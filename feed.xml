<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>DJ Adams</title>
  <subtitle></subtitle>
  <link href="https://qmacro.org/feed.xml" rel="self"/>
  <link href="https://qmacro.org/"/>
  
    <updated>2023-12-20T00:00:00Z</updated>
  
  <id>https://qmacro.org</id>
  <author>
    <name>DJ Adams</name>
    <email>qmacro@gmail.com</email>
  </author>
  
    <entry>
      <title>From Twitter to Mastodon</title>
      <link href="https://qmacro.org/blog/posts/2023/12/20/from-twitter-to-mastodon/"/>
      <updated>2023-12-20T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2023/12/20/from-twitter-to-mastodon/</id>
      <content type="html">
        <![CDATA[
      <p>I'm moving off X (Twitter) at the end of this year. I've been thinking about doing it for a while, and while it's fairly arbitrary, I decided that the end of 2023 would be the end of my activities on that platform.</p>
<p>There are a few reasons why, and some folks may be wondering. So here are those reasons, briefly.</p>
<h2>Centralised vs federated</h2>
<p>I have been around a good while, taking my first nervous but excited steps onto the Internet back in the days of dial-up, via Compulink Internet Exchange (aka <a href="https://en.wikipedia.org/wiki/CIX_(website)">CIX</a>, a very early Internet Service Provider in the UK). I enjoyed access to email, newsgroups (on Usenet) and various resources made available via Gopher and Wais. Those were the days (late 1980s / early 1990s) before the Web, and so I've also seen the Web from the very early days, in all its various guises as it's transitioned to where we are now, which consists of -- for many folks -- a small number of central and privately owned services.</p>
<p>Back in the day, we ran our own websites, maintained and posted on own weblogs, grew ad hoc federation via simple webrings, <a href="https://en.wikipedia.org/wiki/Linkback">linkback</a> mechanisms, RSS (and latterly Atom) feeds and more. They were happier, simpler times, bursting with potential, and times where we had more ownership, control &amp; responsibility for our own content and how it connected to other content.</p>
<p>To that point, while I've been blogging for decades (on <a href="https://qmacro.org/blog/">my own blog</a>), I was also &quot;microblogging&quot; on another platform before I hopped onto Twitter in early 2007. That platform was <a href="https://wiki.p2pfoundation.net/Identica">Identica</a>. And it was open and federated.</p>
<p>The attraction of the federated nature of Identica is here again, and much stronger, with the <a href="https://en.wikipedia.org/wiki/Fediverse">Fediverse</a>, &quot;<em>an ensemble of social networks which can communicate with each other, while remaining independent platforms</em>&quot;. There's a standard, an open decentralised social networking protocol, called <a href="https://en.wikipedia.org/wiki/ActivityPub">ActivityPub</a>, which powers this open interconnectivity, and Mastodon is a microblogging platform that supports ActivityPub and plays nicely in this (relatively) new exciting world.</p>
<blockquote>
<p>Incidentally, a co-author of ActivityPub, Evan Prodromou, was a key actor in the creation of Identica and the technology behind it.</p>
</blockquote>
<h2>The developer angle</h2>
<p>For me, Twitter's API story has been complex and beset with change. At heart I'm a tinkerer, a builder, a hacker (in the proper sense of the word), a developer. So an API to a platform I use is an important aspect that makes that platform more attractive to me. Perhaps worse than a platform that has no API to begin with is a platform that had a great API ... which then eventually is made unavailable for most folks.</p>
<p>That's what's happened with Twitter. That not only kills off any cool integrations and hacks, but it also suppresses any thoughts or interest in building more stuff too. As a developer, I feel that my content and interaction on the platform is no longer wanted. I'm fine with that, it's not my platform. But also, it also means I don't have to stay.</p>
<blockquote>
<p>One example of a very simple integration that I use already on Mastodon is a mechanism I use to toot notes on, and the URLs for, articles I read and find interesting. Here are a couple of examples, <a href="https://hachyderm.io/@qmacro/111222914866332574">on a post about an e-reader setup</a> and <a href="https://hachyderm.io/@qmacro/111573647402350578">on tools and how we maintain them</a>.</p>
<p>I used to have that running on Twitter, but because of the suppression of innovation and the removal of access to the API, that doesn't work any more on that platform. If you're interested in seeing this simple mechanism, see <a href="https://github.com/qmacro-org/url-notes/tree/main/.github/workflows">the GitHub Actions workflows in my URL notes repository</a>.</p>
</blockquote>
<p>Not only does Mastodon have an open API, but the potential with ActivityPub is enormous, too.</p>
<h2>Control and usability</h2>
<p>I was a big user of Tweetdeck, which gave me a great way to organise my consumption of, and interaction with, content on Twitter. With the recent changes, that access to Tweetdeck has gone. Moreover, my timeline is blurred with adverts, and content that is &quot;suggested&quot; to me, in an order that is sometimes confusing too.</p>
<p>With Mastodon, things are simpler, more straightforward, and not polluted with stuff for which I didn't ask.</p>
<p>A side effect of what's happened to timeline content on Twitter, and how it compares with the equivalent on Mastodon, is that the contrast between the two platforms, and how personal and friendly they are, has been accentuated for me. Yes, that is partly due to the smaller numbers of folks on Mastodon, and the fact that those that are there -- the early adopters -- are perhaps more concerned with growing the platform organically and in a fashion that conveys and encourages friendship and kindness.</p>
<h2>Politics and world topics</h2>
<p>While I haven't personally been exposed to much of the less savoury content on Twitter, it is by all accounts not only very much there, but growing and becoming ever more vitriolic in some corners.</p>
<p>Perhaps that's an unavoidable side effect of Twitter being a single, gigantic, central, ungoverned (or ungovernable?) platform. Ultimately the hate comes from humans that are on it, not the platform itself. But that is only half the story, and I don't have the direct experience, or the authority, to talk more about this. Suffice it to say that while it's not been the <em>main</em> factor influencing my decision, it has been a factor.</p>
<h2>Summary</h2>
<p>So there you have it. I wasn't sure what I was going to write in this post; I just opened up my editor and started typing. And it seems that on the whole, the reasons for moving are largely positive rather than negative. I think that's a good basis for the decision.</p>
<p>By the way, if you're interested in getting started with Mastodon, I can recommend <a href="https://fedi.tips/">Fedi.Tips</a>, &quot;<em>an unofficial guide to Mastodon and the Fediverse</em>&quot;.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Tmux plugin development with a local repo</title>
      <link href="https://qmacro.org/blog/posts/2023/11/13/tmux-plugin-development-with-a-local-repo/"/>
      <updated>2023-11-13T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2023/11/13/tmux-plugin-development-with-a-local-repo/</id>
      <content type="html">
        <![CDATA[
      <p>This weekend I wrote a simple Tmux plugin, <a href="https://github.com/qmacro/tmux-focus-status">tmux-focus-status</a>, mostly to learn how to do it, but also to modularise my Tmux configuration (perhaps organising chunks of configuration into plugins is a little extreme, ah well).</p>
<p>The way you add a plugin to your Tmux configuration requires you to specify a remote git repository, such as on GitHub or BitBucket. This would mean I'd have to push my fledgling plugin to GitHub to test it out in the context of Tmux itself, but I wanted to keep everything local while I developed it. So I used a bare repository on the local filesystem. Here's how.</p>
<p>The plugins are managed by <a href="https://github.com/tmux-plugins/tpm">Tmux Plugin Manager</a> (TPM) and there's a great document on how to create a plugin here: <a href="https://github.com/tmux-plugins/tpm/blob/master/docs/how_to_create_plugin.md">How to create Tmux plugins</a>.</p>
<p>While the plugin itself is essentially a script that uses <code>tmux</code> commands, including the plugin into your configuration and testing the installation and use in a real session means that you have to have the plugin code in a remote repository. The examples <a href="https://github.com/tmux-plugins/tpm#installation">in the main TPM README imply this</a>:</p>
<pre class="language-text"><code class="language-text">set -g @plugin 'github_username/plugin_name'<br>set -g @plugin 'github_username/plugin_name#branch'<br>set -g @plugin 'git@github.com:user/plugin'<br>set -g @plugin 'git@bitbucket.com:user/plugin'</code></pre>
<p>Nothing wrong with that at all, but I wanted to get the plugin right before pushing it anywhere like GitHub. So I remembered that you can initialise a repository with the <code>--bare</code> option (see the <a href="https://www.atlassian.com/git/tutorials/setting-up-a-repository/git-init">&quot;Bare Repositories&quot; section in this document</a>), and this will effectively create a shared repository that can be used as a remote.</p>
<p>I was developing the plugin in a directory called:</p>
<pre class="language-text"><code class="language-text">~/work/scratch/tmux-focus-status/</code></pre>
<p>and had run <code>git init</code> in there, and committed my work.</p>
<p>I then created a bare repository with the <code>--bare</code> option, like this:</p>
<pre class="language-shell"><code class="language-shell"><span class="token builtin class-name">cd</span> ~/work/remotes/<br><span class="token function">git</span> init <span class="token parameter variable">--bare</span> tmux-focus-status.git</code></pre>
<blockquote>
<p>The convention is to add the <code>.git</code> ending to repositories initialised like this.</p>
</blockquote>
<p>Then I set up this location as a remote in my plugin directory:</p>
<pre class="language-shell"><code class="language-shell"><span class="token builtin class-name">cd</span> ~/work/scratch/tmux-focus-status/<br><span class="token function">git</span> remote <span class="token function">add</span> <span class="token builtin class-name">local</span> ~/work/remotes/tmux-focus-status.git</code></pre>
<blockquote>
<p>Calling the remote <code>local</code> might seem a little counter-intuitive, but it works for my brain.</p>
</blockquote>
<p>Having pushed the work to that remote:</p>
<pre class="language-shell"><code class="language-shell"><span class="token builtin class-name">cd</span> ~/work/scratch/tmux-focus-status/<br><span class="token function">git</span> push <span class="token builtin class-name">local</span> main</code></pre>
<p>I could then reference that local filesystem remote in my Tmux configuration, alongside my other plugin lines, like this:</p>
<pre class="language-text"><code class="language-text">set -g @plugin 'tmux-plugins/tpm'<br>set -g @plugin 'tmux-plugins/tmux-sensible'<br>set -g @plugin 'christoomey/vim-tmux-navigator'<br>set -g @plugin '/root/work/remotes/tmux-focus-status.git'</code></pre>
<blockquote>
<p>I was doing this in a temporary dev container hence the <code>/root</code> home directory.</p>
</blockquote>
<p>And on invoking the TPM &quot;install&quot; function (with <code>&lt;prefix&gt; I</code>, see the <a href="https://github.com/tmux-plugins/tpm#key-bindings">keybindings</a> info), the plugin was successfully installed:</p>
<pre class="language-text"><code class="language-text">Already installed "tpm"<br>Already installed "tmux-sensible"<br>Already installed "vim-tmux-navigator"<br>Installing "tmux-focus-status"<br>  "tmux-focus-status" download success<br><br>TMUX environment reloaded.<br><br>Done, press ESCAPE to continue.</code></pre>
<p>Excellent!</p>
<p>Using local filesystem based remotes is also nicely summarised in <a href="https://thehorrors.org.uk/snippets/git-local-filesystem-remotes/">How to use local filesystem remotes with git</a> which I found helpful.</p>
<p>Note: You can also just clone the repo from the directory it's in, but it feels nicer and more organised to bridge this via a &quot;real&quot; git remote connection. Thanks to my son Joseph for pointing this out :-)</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>TIL - Two Tmux Plugin Manager features</title>
      <link href="https://qmacro.org/blog/posts/2023/11/10/til-two-tmux-plugin-manager-features/"/>
      <updated>2023-11-10T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2023/11/10/til-two-tmux-plugin-manager-features/</id>
      <content type="html">
        <![CDATA[
      <p>I'm revisiting my working environment setup and configuration, which comprises, at its core, Bash, (Neo)vim and Tmux. This is essentially my IDE, or, to use a term I learned from <a href="https://github.com/tjdevries">TJ DeVries</a>, my <a href="https://www.youtube.com/watch?v=QMVIJhC9Veg">Personalised Development Environment</a> (PDE).</p>
<p>Anyway, while I've used Tmux for a long time, I've never really used a plugin manager, so this week I took a look at <a href="https://github.com/tmux-plugins/tpm">Tmux Plugin Manager</a> (TPM). It worked really nicely out of the box, but there were a couple of things I wanted to sort out for my particular setup.</p>
<p>The short video <a href="https://www.youtube.com/watch?v=DzNmUNvnB04">Tmux has forever changed the way I write code</a> has a nice overview of Tmux configuration, including the use of plugins with TPM, which I'll use here as an example. The relevant configuration in <code>tmux.conf</code> looks like this, defining three plugins (well, two plus TPM itself):</p>
<pre class="language-text"><code class="language-text">set -g @plugin 'tmux-plugins/tpm'<br>set -g @plugin 'tmux-plugins/tmux-sensible'<br>set -g @plugin 'christoomey/vim-tmux-navigator'<br><br>run '~/.config/tmux/plugins/tpm/tpm'</code></pre>
<p>The TPM command to install the plugins defined in your configuration is <code>&lt;prefix&gt; I</code>, where <code>&lt;prefix&gt;</code> is of course the Tmux prefix key, which in my case is <code>Ctrl-space</code>. Invoking this causes the plugins listed in the configuration to be installed, followed by status output that looks like this:</p>
<pre class="language-text"><code class="language-text">Already installed "tpm"<br>Installing "tmux-sensible"<br>  "tmux-sensible" download success<br>Installing "vim-tmux-navigator"<br>  "vim-tmux-navigator" download success<br><br>TMUX environment reloaded.<br><br>Done, press ESCAPE to continue.</code></pre>
<h2>Pre-installing the plugins</h2>
<p>I don't do much at the native OS level of my laptop (which runs macOS); instead, I work in a Linux-based <a href="https://github.com/qmacro/dotfiles/tree/main/devcontainer">dev container</a>. My PDE is essentially a Docker image, from which I create my working environment, usually just a single container, which, when it starts up, runs <code>tmux</code>.</p>
<p>So when I build my image, I'd like to have the Tmux plugins pre-installed, rather than have to go through a manual setup i.e. have to use <code>&lt;prefix&gt; I</code> when I jump into the container for the first time.</p>
<p>After a bit of digging, I found that I can do this by running the <code>bin/install_plugins</code> script which is part of TPM.</p>
<p>So here's a simplified extract of my dev container's Dockerfile definition (ignore the use of the root user here, this is from a testing image setup):</p>
<pre class="language-dockerfile"><code class="language-dockerfile"><span class="token instruction"><span class="token keyword">ARG</span> SETUPDIR=/tmp/setup</span><br><span class="token instruction"><span class="token keyword">ARG</span> CONFDIR=/root/.config</span><br><br><span class="token comment"># Basic setup</span><br><span class="token instruction"><span class="token keyword">RUN</span> mkdir <span class="token variable">$CONFDIR</span> </span><br><span class="token instruction"><span class="token keyword">RUN</span> mkdir <span class="token variable">$SETUPDIR</span></span><br><br><span class="token comment"># Tmux</span><br><span class="token instruction"><span class="token keyword">ARG</span> TMUXVER=3.3a</span><br><span class="token instruction"><span class="token keyword">RUN</span> cd <span class="token variable">$SETUPDIR</span> <span class="token operator">\</span><br>    &amp;&amp; curl -fsSL <span class="token string">"https://github.com/tmux/tmux/releases/download/$TMUXVER/tmux-$TMUXVER.tar.gz"</span> <span class="token operator">\</span><br>    | tar -xzf - <span class="token operator">\</span><br>    &amp;&amp; cd <span class="token string">"tmux-$TMUXVER"</span> &amp;&amp; ./configure &amp;&amp; make &amp;&amp; make install</span><br><br><span class="token comment"># Tmux config, including plugins</span><br><span class="token instruction"><span class="token keyword">RUN</span> mkdir <span class="token variable">$CONFDIR</span>/tmux <span class="token operator">\</span><br>    &amp;&amp; git clone https://github.com/tmux-plugins/tpm ~/.config/tmux/plugins/tpm</span><br><span class="token instruction"><span class="token keyword">COPY</span> tmux.conf <span class="token variable">$CONFDIR</span>/tmux/</span><br><span class="token instruction"><span class="token keyword">RUN</span> <span class="token variable">$CONFDIR</span>/tmux/plugins/tpm/bin/install_plugins</span><br><br><span class="token comment"># Off we go</span><br><span class="token instruction"><span class="token keyword">CMD</span> [<span class="token string">"tmux"</span>]</span></code></pre>
<p>My basic Tmux config is copied to the configuration directory (<code>COPY tmux.conf $CONFDIR/tmux/</code>) and then the TPM <code>bin/install_plugins</code> script is executed.</p>
<p>When I enter the container, and find myself in a new Tmux session (thanks to <code>CMD [&quot;tmux&quot;]</code>), all the plugins are already installed. Nice!</p>
<h2>Invoking plugin management functions</h2>
<p>TPM has a small number of <a href="https://github.com/tmux-plugins/tpm#key-bindings">key bindings for plugin management</a>. The default key binding for uninstalling plugins that you've removed from the list in your configuration is <code>&lt;prefix&gt; + alt + u</code>.</p>
<p>My daily driver is an Apple MacBook Air. One of the (many) &quot;interesting&quot; features of MacBook keyboards, at least with some sort of English layout, is that you can't easily type a <code>#</code> character. Which is especially frustrating as a developer. To get a <code>#</code> character you have to use <code>Option-3</code> which is frankly ridiculous, but I've got used to it over the years.</p>
<p>Anyway, the Option key is the Alt (or Meta) key which means that in order to use <code>&lt;prefix&gt; + alt + u</code> on this keyboard, I would have to change the terminal settings for the Option key, for it to act as a proper Alt key. But then I wouldn't be able to type <code>#</code> characters.</p>
<p>Instead, again after a bit of digging, I found that you can change these default key bindings. They're actually defined in a <a href="https://github.com/tmux-plugins/tpm/blob/master/scripts/variables.sh">variables.sh</a> file:</p>
<pre class="language-shell"><code class="language-shell"><span class="token assign-left variable">install_key_option</span><span class="token operator">=</span><span class="token string">"@tpm-install"</span><br><span class="token assign-left variable">default_install_key</span><span class="token operator">=</span><span class="token string">"I"</span><br><br><span class="token assign-left variable">update_key_option</span><span class="token operator">=</span><span class="token string">"@tpm-update"</span><br><span class="token assign-left variable">default_update_key</span><span class="token operator">=</span><span class="token string">"U"</span><br><br><span class="token assign-left variable">clean_key_option</span><span class="token operator">=</span><span class="token string">"@tpm-clean"</span><br><span class="token assign-left variable">default_clean_key</span><span class="token operator">=</span><span class="token string">"M-u"</span><br><br><span class="token assign-left variable">SUPPORTED_TMUX_VERSION</span><span class="token operator">=</span><span class="token string">"1.9"</span><br><br><span class="token assign-left variable">DEFAULT_TPM_ENV_VAR_NAME</span><span class="token operator">=</span><span class="token string">"TMUX_PLUGIN_MANAGER_PATH"</span><br><span class="token assign-left variable">DEFAULT_TPM_PATH</span><span class="token operator">=</span><span class="token string">"<span class="token environment constant">$HOME</span>/.tmux/plugins/"</span></code></pre>
<p>This allows me to add a line to my <code>tmux.conf</code> file to change the binding for the &quot;clean&quot; option (to uninstall plugins) to something different. I chose <code>K</code> for &quot;(K)lean&quot; (as hitting &quot;C&quot; after the Tmux prefix key is a common action to create a new window):</p>
<pre class="language-text"><code class="language-text">set -g @tpm-clean 'K'</code></pre>
<p>Now I can uninstall plugins that I've removed from my configuration with <code>&lt;prefix&gt; K</code>. Here's an example of the uninstall status output, after I removed the line specifying the <code>christoomey/vim-tmux-navigator</code> plugin from my <code>tmux.conf</code> file and then hit <code>&lt;prefix&gt; K</code>:</p>
<pre class="language-text"><code class="language-text">Removing "vim-tmux-navigator"<br>  "vim-tmux-navigator" clean success<br><br>TMUX environment reloaded.<br><br>Done, press ESCAPE to continue.</code></pre>
<blockquote>
<p>The removal of this plugin was just to illustrate the mechanism; I've just been looking into this plugin and I'll be using it as it's great - especially the extremely comprehensive <a href="https://github.com/christoomey/vim-tmux-navigator/blob/master/README.md">README</a>!</p>
</blockquote>
<p>That's neat. I'll be embracing TPM from now on.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Solving the SAP TechEd Easter Egg on the Web</title>
      <link href="https://qmacro.org/blog/posts/2023/11/02/solving-the-sap-teched-easter-egg-on-the-web/"/>
      <updated>2023-11-02T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2023/11/02/solving-the-sap-teched-easter-egg-on-the-web/</id>
      <content type="html">
        <![CDATA[
      <p>If you're at <a href="https://www.sap.com/india/events/teched.html">SAP TechEd 2023 in Bengaluru, India</a> you may have seen a little Easter Egg in the form of some Node.js code.</p>
<p><img src="/images/2023/11/easter-egg-poster.png" alt="The Easter Egg poster"></p>
<p>If you've seen it and are curious about it, and want to execute it but don't know how, there are plenty of ways you can do it on the Web. You don't need to install Node.js on your machine if you don't want to.</p>
<p>It's important to realise that while Node.js is JavaScript, it comes with more libraries and features relating to the runtime context that it provides. Think of it as &quot;JavaScript++&quot;. So you can't run the Easter Egg code in, say, the Chrome Developer Tools console, for example.</p>
<p>But you can run it on the Web. Here are a few places where this is possible:</p>
<p><a href="https://replit.com/">replit</a> lets you &quot;build software collaboratively with the power of AI, on any device, without spending a second on setup&quot;.</p>
<p><a href="https://codesandbox.io/">CodeSandbox</a> &quot;keeps you in flow by giving you cloud development environments that resume in 1 second&quot;.</p>
<p><a href="https://runkit.com/">RunKit</a> &quot;is a node playground in your browser&quot;.</p>
<p>And of course, it almost goes without saying that you can run it in a Dev Space in the <a href="https://www.sap.com/india/products/technology-platform/business-application-studio.html">SAP Business Application Studio</a>.</p>
<p><img src="/images/2023/11/easter-egg-in-bas.png" alt="Easter Egg in SAP BAS"></p>
<p>So what are you waiting for? <a href="https://qmacro.org/blog/posts/2017/02/19/the-beauty-of-recursion-and-list-machinery/#initialrecognition">Stare at the code</a>, try and work out what it's doing, what it emits, and if you get stuck, run it in one of these Web-based environments and see where it leads you. And have fun!</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Devtoberfest - the best developer prep for SAP TechEd</title>
      <link href="https://qmacro.org/blog/posts/2023/09/18/devtoberfest-the-best-developer-prep-for-sap-teched/"/>
      <updated>2023-09-18T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2023/09/18/devtoberfest-the-best-developer-prep-for-sap-teched/</id>
      <content type="html">
        <![CDATA[
      <p>Devtoberfest 2023 kicked off today, with a wealth of live sessions. Read on to find out why I think Devtoberfest is a great way for developers to get themselves ready for SAP TechEd.</p>
<p><img src="/images/2023/09/devtoberfest.gif" alt="Devtoberfest"></p>
<p>The <a href="https://developers.sap.com/developer-advocates.html">Developer Advocates at SAP</a> have been busy over the past few weeks putting together the content for our now much anticipated annual event - <a href="https://groups.community.sap.com/t5/devtoberfest/gh-p/Devtoberfest">Devtoberfest</a>. If you don't know what Devtoberfest is, let me explain:</p>
<ul>
<li>it's a month long open celebration of what makes us developers: coding and collaboration</li>
<li>it's deliberately scheduled to take place in the run up to SAP TechEd</li>
<li>it's a lot of fun, and combines learning, earning points, and the possibility of winning prizes</li>
</ul>
<p>There's a key activity that's common to any developer, regardless of their area of expertise, interests, and craft. That key activity is learning. The world of development, of software, architecture, operations, and more, is moving at an ever increasing pace, and if there's one thing I've perhaps <a href="https://blogs.sap.com/2018/10/01/monday-morning-thoughts-impostor-syndrome/">finally figured out</a>, after over 35 years as a developer in the SAP tech ecosphere, is that there's <a href="https://blogs.sap.com/2012/10/24/a-call-to-arms-for-abap-developers/comment-page-2/#comment-436250">always more learning to do</a>.</p>
<p>Learning is something we should be doing regularly. It doesn't matter whether the subject matter is brand new, or you're revisiting something you have already had experience with, to go deeper. It doesn't matter if the relevance to your current work tasks is only fleeting, and it certainly doesn't matter how you prefer to learn. Reading, watching videos, completing tutorials, taking part in discussions, asking and answering questions, <a href="https://github.com/SAP-samples/sap-community-activity-badges">earning points &amp; badges</a> - each one of these activities helps you to level up. Back in the early 1990's, I was working at the largest SAP R/2 installation in the world, and learned a valuable lesson from one of my colleagues there. That was to make time to read. I recount the story in the blog post <a href="https://blogs.sap.com/2009/11/05/tech-skills-chat-with-jonerp-a-follow-on-story/">Tech Skills Chat with JonERP – A Follow-on Story</a>, and the key takeaway is: Always Be Reading.</p>
<p>Anyway. Sometimes one learns best alone. And other times, it's great to learn together. And that's what Devtoberfest is all about.</p>
<p>So over the next four weeks, I want to encourage you to make time for yourself as a developer, make time to learn, make time for Devtoberfest. Check out the many, many sessions we have for you over on the <a href="https://groups.community.sap.com/t5/devtoberfest/eb-p/devtoberfest-events">Devtoberfest events calendar</a>, focused on five main topics, each of which has a colour code, and each of which falls on the same day each week:</p>
<ul>
<li>🟢 Monday: ABAP &amp; CAP</li>
<li>🟣 Tuesday: SAP Build / Low-Code and No-Code</li>
<li>🔴 Wednesday: Integration</li>
<li>🔵 Thursday: <a href="https://blogs.sap.com/2023/09/12/data-analytics-sessions-at-devtoberfest-2023/">Data &amp; Analytics</a> &amp; <a href="https://blogs.sap.com/2023/09/18/ai-sessions-at-devtoberfest-2023/">AI</a></li>
<li>🟠 Friday: Frontend</li>
</ul>
<p>It won't surprise you to realise that these core topics are also the backbone of any great SAP TechEd event too. And that's no coincidence. We want you to be prepared for SAP TechEd by being up to date, with your learning neurons revitalised and ready for more action, and hungry for more knowledge.</p>
<p>So dive in. Get started by heading over to and joining the <a href="https://groups.community.sap.com/t5/devtoberfest/gh-p/Devtoberfest">Devtoberfest group on SAP Community</a>. You'll find plenty of information in the <a href="https://groups.community.sap.com/t5/devtoberfest-blog-posts/bg-p/Devtoberfestblog-board">blog post area</a> on how things work, and what to do next.</p>
<p>See you there!</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Bash shell expansion inside double quotes</title>
      <link href="https://qmacro.org/blog/posts/2023/08/25/bash-shell-expansion-inside-double-quotes/"/>
      <updated>2023-08-25T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2023/08/25/bash-shell-expansion-inside-double-quotes/</id>
      <content type="html">
        <![CDATA[
      <p>In the context of this month's <a href="https://blogs.sap.com/2023/08/01/sap-developer-challenge-apis/">SAP Developer Challenge on APIs</a>, some participants working through <a href="https://groups.community.sap.com/t5/application-development/sap-developer-challenge-apis-task-10-request-an-oauth-access/m-p/282016">today's task</a> have tripped up on a Bash feature, a feature which is one of a family of features relating to &quot;expansion&quot; of information. In this short post I dig into what that feature is, and how to ensure you don't trip yourselves up with it.</p>
<h2>Special characters</h2>
<p>In <a href="https://groups.community.sap.com/t5/application-development/sap-developer-challenge-apis-task-10-request-an-oauth-access/m-p/282016">SAP Developer Challenge - APIs - Task 10 - Request an OAuth access token</a>, my good friend and colleague Daniel stumbled into a problem while conveying OAuth client ID and secret values in a call to <code>curl</code>. It would have been something like this:</p>
<pre class="language-shell"><code class="language-shell"><span class="token function">curl</span> <span class="token string">'&lt;oauth-authorization-server>'</span> <span class="token punctuation">\</span><br><span class="token parameter variable">-u</span> <span class="token string">"&lt;clientid>:&lt;clientsecret>"</span> <span class="token punctuation">\</span> <br><span class="token parameter variable">-d</span> <span class="token string">"grant_type=&lt;grant-type>"</span><br><span class="token parameter variable">-d</span> <span class="token string">"..."</span></code></pre>
<p>With many services on the SAP Business Technology Platform, client ID and secret values contain special characters, notably here they contain exclamation marks. Here's an example:</p>
<ul>
<li>client ID: <code>sb-ut-f86082c9-7fbf-4e1e-8310-f5d018dab542-clone!b254751|cis-central!b14</code></li>
<li>client secret: <code>dfad81fe-a33d-4252-b612-d49cd9fd3a42$dE1F7W2F3-TrF9kIrkdQaliGqTKR_aCVcv-oaM7ZZ9x=</code></li>
</ul>
<p>They also contain dollar signs.</p>
<h2>Bash expansions</h2>
<p>Bash is a venerable and extremely capable shell, and supports a number of so-called <a href="https://www.gnu.org/software/bash/manual/html_node/Shell-Expansions.html">Shell Expansions</a>, where values are substituted for tokens on the command line. This is before those values are then interpreted as part of whatever command is to be executed. These expansions are initiated by special characters, two of which are the dollar sign <code>$</code> and exclamation mark <code>!</code>.</p>
<h3>Shell parameter expansion</h3>
<p>The <code>$</code> character introduces <a href="https://www.gnu.org/software/bash/manual/html_node/Shell-Parameter-Expansion.html">shell parameter expansion</a>, and in the very simplest of cases will substitute the value of a variable identified with the <code>$</code> character, replacing the parameter or symbol itself. For example, if we have a variable <code>ans</code> with the value <code>42</code>, then:</p>
<pre class="language-shell"><code class="language-shell"><span class="token builtin class-name">echo</span> <span class="token string">"The answer is <span class="token variable">$ans</span>"</span></code></pre>
<p>will emit:</p>
<pre class="language-text"><code class="language-text">The answer is 42</code></pre>
<h3>History expansion</h3>
<p>The <code>!</code> character introduces <a href="https://www.gnu.org/software/bash/manual/html_node/History-Interaction.html">history expansion</a>. In the Bash shell, commands are remembered in a history, and can be recalled with the <code>history</code> builtin. Here's an example of the output from <code>history</code>:</p>
<pre class="language-text"><code class="language-text">1977  date<br>1978  git status<br>1979  git add .gitignore<br>1980  git commit -m 'do not track cache files'</code></pre>
<p>If I wanted to rerun the <code>git status</code> command, I could invoke it like this:</p>
<pre class="language-shell"><code class="language-shell"><span class="token operator">!</span><span class="token number">1978</span></code></pre>
<p>That might not seem earth shatteringly exciting, but for longer more complex combinations of commands, it can be very useful. Remember also that some shells emit the current history number in the prompt, making it quick and easy to refer to a previous command. And in the older days of slower connections, especially serial terminal connections, the transmission of every character counted!</p>
<h2>Quotes</h2>
<p>Shell parameter and history expansion happen inside double quotes. So if I try:</p>
<pre class="language-shell"><code class="language-shell"><span class="token builtin class-name">echo</span> <span class="token string">"everything!abc"</span></code></pre>
<p>Then I see this:</p>
<pre class="language-text"><code class="language-text">-bash: !abc: event not found</code></pre>
<p>The word &quot;event&quot; here refers to a line selected from the history. And as <code>abc</code> isn't in my history as a reference, the error message makes sense.</p>
<p>But if I were to try:</p>
<pre class="language-shell"><code class="language-shell"><span class="token builtin class-name">echo</span> <span class="token string">"everything!1978"</span></code></pre>
<p>I would see:</p>
<pre class="language-text"><code class="language-text">everythinggit status</code></pre>
<h2>A note on working with OData</h2>
<p>One thing to note for those of you working with OData, is that the OData system query options are all prefixed with the dollar sign. For example, there's <code>$top</code>, <code>$skip</code>, <code>$expand</code> and so on. So if you were to use <code>curl</code> to request a URL like this (elided for brevity):</p>
<pre class="language-shell"><code class="language-shell"><span class="token function">curl</span> <span class="token punctuation">\</span><br>  <span class="token parameter variable">--url</span> <span class="token string">"https://.../Northwind.svc/Products?<span class="token variable">$top</span>=2"</span></code></pre>
<p>then you'd get rather more product entities than you expected. Instead of receiving just the first two, you'd get all of them. Why? Because through shell parameter expansion, the <code>$top</code> part was expanded into the value of the <code>top</code> parameter, which is (most likely to be) empty, making the actual URL passed to <code>curl</code> this:</p>
<pre class="language-url"><code class="language-url"><span class="token scheme">https<span class="token scheme-delimiter">:</span></span><span class="token authority"><span class="token authority-delimiter">//</span><span class="token host">...</span></span><span class="token path"><span class="token path-separator">/</span>Northwind.svc<span class="token path-separator">/</span>Products</span><span class="token query"><span class="token query-delimiter">?</span>=2</span>"</code></pre>
<p>Nicely, perhaps through <a href="https://en.wikipedia.org/wiki/Robustness_principle">Postel's Law</a>, the Northwind service quietly ignores the random <code>=2</code> which is thus sent as the query string part of the URL, and returns the entire products entity set.</p>
<h2>What to do</h2>
<p>These expansions work within double quotes in Bash. They explicitly and deliberately are not active within single quotes. There is in fact a lot more to know about the <a href="https://stackoverflow.com/questions/6697753/difference-between-single-and-double-quotes-in-bash">difference between single and double quotes in Bash</a>, but all you need to remember for now is that you should only use double quotes when you know you want something magic to happen (such as expansions). If you can get away with using single quotes, then that is often the better way, where the data within remains &quot;passive&quot;.</p>
<p>Here are those two examples from earlier, but expressed in single quotes. First, using an exclamation mark which in double quotes would invoke history expansion:</p>
<pre class="language-shell"><code class="language-shell"><span class="token punctuation">;</span> <span class="token builtin class-name">echo</span> <span class="token string">'everything!abc'</span><br>everything<span class="token operator">!</span>abc</code></pre>
<p>Now using a dollar sign, which in double quotes would invoke parameter expansion:</p>
<pre class="language-shell"><code class="language-shell"><span class="token punctuation">;</span> <span class="token builtin class-name">echo</span> <span class="token string">'The answer is $ans'</span><br>The answer is <span class="token variable">$ans</span></code></pre>
<p>The shell is a wonderful environment, but can be arcane and odd around some edges. But how is that different to the univese in general, right?</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>OData query operations and URL encoding the system query options with curl</title>
      <link href="https://qmacro.org/blog/posts/2023/08/08/odata-query-operations-and-url-encoding-the-system-query-options-with-curl/"/>
      <updated>2023-08-08T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2023/08/08/odata-query-operations-and-url-encoding-the-system-query-options-with-curl/</id>
      <content type="html">
        <![CDATA[
      <p><em>You can use curl to send OData query operations with system query options that contain whitespace, and have it URL encode that whitespace for you.</em></p>
<p>We're running an <a href="https://blogs.sap.com/2023/08/01/sap-developer-challenge-apis/">SAP Developer Challenge this month, on the topic of APIs</a>. In a discussion relating to <a href="https://groups.community.sap.com/t5/application-development/sap-developer-challenge-apis-task-2-calculate-northbreeze/td-p/277325">Task 2 - Calculate Northbreeze product stock</a>, Wises shared his process and thoughts in <a href="https://groups.community.sap.com/t5/application-development/sap-developer-challenge-apis-task-2-calculate-northbreeze/m-p/277635/highlight/true#M2656">a nice reply to the task thread</a>, in which he said, about using <code>curl</code>:</p>
<blockquote>
<p>I found that I have to manually replace blank(space) with %20 in the $filter block to be able to fetch an OData API.</p>
</blockquote>
<p>I thought I'd write a few notes on this phenomenon, which may help others, and which is a good opportunity to share some cool <code>curl</code> features.</p>
<p>One of the many lovely aspects of OData, especially with regards to the query and read operations, is that you can try things out in the browser, because both query operations and read operations are accomplished using the HTTP GET method.</p>
<h2>Using spaces in URLs in your browser</h2>
<p>Here's a simple example, related to the topic of Task 2, using <a href="https://services.odata.org/V4/Northwind/Northwind.svc/">the OData V4 version of the Northwind service</a>. Consider a query operation on the <code>Products</code> entity set to:</p>
<ul>
<li>get a list of product names</li>
<li>exclude products that are discontinued</li>
<li>just have the first three returned, by ID</li>
</ul>
<p>If you copy-paste the entire query operation URL into your browser's omnibar:</p>
<p><code>https://services.odata.org/V4/Northwind/Northwind.svc/Products?$filter=Discontinued eq false&amp;$select=ProductName&amp;$top=3&amp;$orderby=ProductID</code></p>
<p>and then send that request off, you'll get an appropriate response:</p>
<pre class="language-json"><code class="language-json"><span class="token punctuation">{</span><br>  <span class="token property">"@odata.context"</span><span class="token operator">:</span> <span class="token string">"https://services.odata.org/V4/Northwind/Northwind.svc/$metadata#Products(ProductName)"</span><span class="token punctuation">,</span><br>  <span class="token property">"value"</span><span class="token operator">:</span> <span class="token punctuation">[</span><br>    <span class="token punctuation">{</span><br>      <span class="token property">"ProductName"</span><span class="token operator">:</span> <span class="token string">"Chai"</span><br>    <span class="token punctuation">}</span><span class="token punctuation">,</span><br>    <span class="token punctuation">{</span><br>      <span class="token property">"ProductName"</span><span class="token operator">:</span> <span class="token string">"Chang"</span><br>    <span class="token punctuation">}</span><span class="token punctuation">,</span><br>    <span class="token punctuation">{</span><br>      <span class="token property">"ProductName"</span><span class="token operator">:</span> <span class="token string">"Aniseed Syrup"</span><br>    <span class="token punctuation">}</span><br>  <span class="token punctuation">]</span><br><span class="token punctuation">}</span></code></pre>
<p>Your browser most likely didn't bat an eyelid at the whitespace in the URL, i.e. the space before and after the <code>eq</code> operator in the <code>$filter</code> system query option.</p>
<p>But if you look at what it actually sent to the Northwind server, you'll see that it automatically URL encoded the whitespace:</p>
<p><img src="/images/2023/08/chrome-dev-tools-urlencoding.png" alt="Chrome Dev Tools URL encoding"></p>
<p>Spaces, and other special characters, are generally unwelcome in URLs, which are restricted to ASCII, and on top of that, there are <a href="https://en.wikipedia.org/wiki/URL_encoding#Reserved_characters">reserved characters</a> which have special meaning in the URL structure.</p>
<p>These characters must be <a href="https://en.wikipedia.org/wiki/URL_encoding">URL encoded</a>. This is also known as &quot;percent encoding&quot;, because the encoding replaces a character with its corresponding ASCII value, in hex, prefixed with a percent sign.</p>
<p>So in this example, this part of the query string:</p>
<p><code>$filter=Discontinued eq false</code></p>
<p>became:</p>
<p><code>$filter=Discontinued%20eq%20false</code></p>
<p>because space, while it has a representation in ASCII, and is not one of the reserved characters, is generally not allowed .Otherwise how would processing or even us humans tell when a URL ended?</p>
<p>And of course, the ASCII character code for space is 32 in decimal which of course is 20 in hex.</p>
<h2>Using curl</h2>
<p>When you use <code>curl</code> or similar tools, there's no context in which to automatically and silently modify URLs. At least, I wouldn't want <code>curl</code> to do that without me asking it to. So if you tried to use <code>curl</code> to request the URL above, it would send it verbatim. Which would be erroneous, and fail.</p>
<p>At this point, what one would normally do is to pre-empt this failure by properly encoding the URL before giving it to <code>curl</code>. There are many libraries and utilities to do this, and you could even write your own, it's not complex. Basically, this is the right way to go, to avoid giving bad data to <code>curl</code> to process.</p>
<p>However, <code>curl</code> has some lovely features, including the ability to send data with the request. This is normally done using the <code>--data</code> option, but there's a <code>--data-urlencode</code> option too, which will URL encode whatever you pass with this option.</p>
<p>Now, typically, one might say normally, these options are used in the case of POST requests, where the data is sent in the body of the request, i.e. in the payload. Often this is in the form of <code>name=value</code> pairs which usually should be URL encoded, in the context of HTML form submissions, for example (have you ever wondered why the default <code>Content-Type</code> header value sent by <code>curl</code> is <code>application/x-www-form-urlencoded</code>?).</p>
<p>Anyway, OData query and get operations are performed with HTTP GET, not HTTP POST.</p>
<p>But.</p>
<p>We can still make use of <code>--data-urlencode</code> and still have the system query options (such as our <code>$filter</code> example here) sent in the query string of the URL, rather than in the request body. And that is if we use the <code>--get</code> option (short version is <code>-G</code>). Here's what the man page says about this option:</p>
<blockquote>
<p>When used, this option will make all data specified with -d, --data, --data-binary or --data-urlencode to be used in an HTTP GET request instead of the POST request that otherwise would be used. The data will be appended to the URL with a '?' separator.</p>
</blockquote>
<p>Perfect!</p>
<p>So the <code>curl</code> equivalent of requesting the URL above, where the whitespace remains, is as follows (I'll also add <code>--verbose</code> so we can see what happens when we send the request, and a <code>Content-Type: application/json</code> header too):</p>
<pre class="language-shell"><code class="language-shell"><span class="token function">curl</span> <span class="token punctuation">\</span><br>  <span class="token parameter variable">--get</span> <span class="token punctuation">\</span><br>  <span class="token parameter variable">--verbose</span> <span class="token punctuation">\</span><br>  <span class="token parameter variable">--header</span> <span class="token string">'Accept: application/json'</span> <span class="token punctuation">\</span><br>  --data-urlencode <span class="token string">'$filter=Discontinued eq false'</span> <span class="token punctuation">\</span><br>  --data-urlencode <span class="token string">'$select=ProductName'</span> <span class="token punctuation">\</span><br>  --data-urlencode <span class="token string">'$top=3'</span> <span class="token punctuation">\</span><br>  --data-urlencode <span class="token string">'$orderby=ProductID'</span> <span class="token punctuation">\</span><br>  <span class="token parameter variable">--url</span> <span class="token string">'https://services.odata.org/V4/Northwind/Northwind.svc/Products'</span></code></pre>
<p>Here's what this produces (some verbose output removed):</p>
<pre class="language-shell"><code class="language-shell"><span class="token operator">></span> GET /V4/Northwind/Northwind.svc/Products?<span class="token variable">$filter</span><span class="token operator">=</span>Discontinued%20eq%20false<span class="token operator">&amp;</span><span class="token variable">$select</span><span class="token operator">=</span>ProductName<span class="token operator">&amp;</span><span class="token variable">$top</span><span class="token operator">=</span><span class="token number">3</span><span class="token operator">&amp;</span><span class="token variable">$orderby</span><span class="token operator">=</span>ProductID HTTP/1.1<br><span class="token operator">></span> Host: services.odata.org<br><span class="token operator">></span> User-Agent: curl/7.74.0<br><span class="token operator">></span> Accept: application/json<br><span class="token operator">></span> <br><span class="token operator">&lt;</span> HTTP/1.1 <span class="token number">200</span> OK<br><span class="token operator">&lt;</span> Content-Length: <span class="token number">195</span><br><span class="token operator">&lt;</span> Content-Type: application/json<span class="token punctuation">;</span><span class="token assign-left variable">odata.metadata</span><span class="token operator">=</span>minimal<span class="token punctuation">;</span><span class="token assign-left variable">odata.streaming</span><span class="token operator">=</span>true<span class="token punctuation">;</span><span class="token assign-left variable">IEEE754Compatible</span><span class="token operator">=</span>false<span class="token punctuation">;</span><span class="token assign-left variable">charset</span><span class="token operator">=</span>utf-8<br><span class="token operator">&lt;</span> Date: Tue, 08 Aug <span class="token number">2023</span> <span class="token number">11</span>:43:25 GMT<br><span class="token operator">&lt;</span> Server: Microsoft-IIS/10.0<br><span class="token operator">&lt;</span> Access-Control-Allow-Headers: Accept, Origin, Content-Type, MaxDataServiceVersion<br><span class="token operator">&lt;</span> Access-Control-Allow-Methods: GET<br><span class="token operator">&lt;</span> Access-Control-Allow-Origin: *<br><span class="token operator">&lt;</span> Access-Control-Expose-Headers: DataServiceVersion<br><span class="token operator">&lt;</span> Cache-Control: private<br><span class="token operator">&lt;</span> Expires: Tue, 08 Aug <span class="token number">2023</span> <span class="token number">11</span>:44:26 GMT<br><span class="token operator">&lt;</span> Vary: *<br><span class="token operator">&lt;</span> X-Content-Type-Options: nosniff<br><span class="token operator">&lt;</span> OData-Version: <span class="token number">4.0</span><span class="token punctuation">;</span><br><span class="token operator">&lt;</span> X-AspNet-Version: <span class="token number">4.0</span>.30319<br><span class="token operator">&lt;</span> X-Powered-By: ASP.NET<br><span class="token operator">&lt;</span> <br><span class="token punctuation">{</span><span class="token string">"@odata.context"</span><span class="token builtin class-name">:</span><span class="token string">"https://services.odata.org/V4/Northwind/Northwind.svc/<span class="token variable">$metadata</span>#Products(ProductName)"</span>,<span class="token string">"value"</span>:<span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">"ProductName"</span><span class="token builtin class-name">:</span><span class="token string">"Chai"</span><span class="token punctuation">}</span>,<span class="token punctuation">{</span><span class="token string">"ProductName"</span><span class="token builtin class-name">:</span><span class="token string">"Chang"</span><span class="token punctuation">}</span>,<span class="token punctuation">{</span><span class="token string">"ProductName"</span><span class="token builtin class-name">:</span><span class="token string">"Aniseed Syrup"</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre>
<p>So there you have it. With <code>curl</code> you can have your cake and eat it. If you're not using <code>curl</code>, give it a spin today. After all, as well as being used everywhere on earth, it's also used <a href="https://youtu.be/Ic37FI351G4?t=127">on Mars</a>.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Curing my stove aboard the narrowboat</title>
      <link href="https://qmacro.org/blog/posts/2023/07/22/curing-my-stove-aboard-the-narrowboat/"/>
      <updated>2023-07-22T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2023/07/22/curing-my-stove-aboard-the-narrowboat/</id>
      <content type="html">
        <![CDATA[
      <p>It's been a few weeks since I took possession of my narrowboat and it's been pretty hot and humid the whole time. Today was the first day where it felt noticeably cooler, so I took the opportunity to complete a task I'd been itching to do since I launched.</p>
<p>And that was to cure the stove.</p>
<p>The stove is a model from Chilli Penguin, specifically a &quot;Fat Penguin, Tall Order&quot;. You can read more about it in the post <a href="/blog/posts/2023/04/07/living-on-a-narrowboat-the-stove-as-the-heart-of-the-home/">Living on a narrowboat - the stove as the heart of the home</a> which I wrote in eager anticipation.</p>
<h2>Getting the stove and trying the chimney out</h2>
<p>The whole journey of getting the stove delivered and fitted on the narrowboat was a little fraught, with manufacturing and delivery delays, but in the end, it arrived just in time for the team at The Fitout Pontoon to install it before launch day. Now I'm on the narrowboat, I couldn't wait to try it out.</p>
<p>Like any painted cast iron stove, it has to be &quot;run in&quot;, run at a low, then medium, then high temperature burn, to cure the paint and also burn off any solvents. The cooler weather today had me convinced that it was a good time to do that. I also wanted to properly set up the flue and chimney, which the team had ordered and fitted; the part that goes outside is quite tall (1 metre, not including the rain cowl) and I wanted to try it out. You can see the chimney and cowl here, as I'd set it up to check it for size, when I was moored at Redhill Marina:</p>
<p><img src="/images/2023/07/moored-at-redhill-with-chimney.jpg" alt="The chimney fitted to the roof of the narrowboat, at Redhill Marina"></p>
<p>The chimney girth is also larger than I've seen; it's double-skinned, based on a flue diameter of 130 mm, which you can see here in this top-down view of the chimney collar fitted to the roof:</p>
<p><img src="/images/2023/07/chimney-collar.jpg" alt="The chimney collar"></p>
<h2>The curing process</h2>
<p>So anyway, I followed the instructions in the Chilli Penguin stove guide, which basically described a sequence of three fires, in one session:</p>
<ul>
<li>a small fire with kindling, for around 15 minutes, to start warming the stove up without shocking it</li>
<li>a medium fire with split logs, for around an hour, getting the temperature up to around 230 degrees C</li>
<li>then into a hot fire with more wood and appropriate air flow control, to get the temperature up to around 315 degrees C</li>
</ul>
<p>I had bought a <a href="https://simplyvaliant.co.uk/products/stove-thermometer">Valiant Stove Thermometer</a> from <a href="https://sandiacrestoves.co.uk/">Sandiacre Stoves</a> in Long Eaton, when I was on the Erewash Canal a week or so ago. What a lovely shop, with a great range of products and super friendly staff. I bought other stove accessories from there then too, including a coal scuttle and a big bag of split logs.</p>
<p><img src="/images/2023/07/valiant-stove-thermometer.png" alt="the Valiant Stove Thermometer"></p>
<p>I wouldn't have managed the sequence and temperature control of the process without the thermometer, which worked well. It has a magnet, and I'd originally placed it on the stove top, but then thought better of it and stuck it to the fire door, which would give me a more accurate reading, because there was the cooking oven that sits between the fire box and the stove top. I didn't attach it to the flue either for a similar reason - it's also double skinned like the chimney.</p>
<p>The small fire started well and I could see that the flue and chimney was producing a great draw:</p>
<p><img src="/images/2023/07/small-fire.jpg" alt="small fire"></p>
<p>The hot fire was pretty intense, and it was at that point I re-assessed the temperature of the day, perhaps it still wasn't cold enough outside to light a fire! Anyway, I had committed so I just opened more windows and let the process complete. I decided that a <a href="https://untappd.com/user/qmacro/checkin/1296609401">beer</a> would help me cool down. Pretty reasonable logic, right?</p>
<p><img src="/images/2023/07/hot-fire.jpg" alt="beer and hot fire"></p>
<h2>Oven door catch</h2>
<p>I noticed that while the stove was hot, during the hot fire, the oven door wouldn't open. It turns out that this was because the catch wasn't quite sitting right. Luckily the catch is simple and protrudes from the iron surface of the front of the stove, so I was able to adjust it slightly so that the door handle catch latched onto it more cleanly, without clashing and getting stuck on it.</p>
<h2>The chimney height</h2>
<p>Clearly, given its height, the chimney is not going to fit under many bridges. In other words, it's not a &quot;cruising chimney&quot;, which are typically more around 30 cm high and are such that you can keep a fire in while cruising. I'm going to try and source a shorter chimney in the medium term (it's from <a href="https://www.jeremias.uk/">Jeremias</a> and the dimensions mean that it's not something I can buy off the shelf in a chandlery, for example) but I also may try fitting just the cowl itself to the collar. It may well be that this won't deliver enough draw for a fire, but we'll see.</p>
<h2>Bonus: a stove fan</h2>
<p>While passing Sawley Marina a few days ago, I called in at <a href="https://www.aquavista.com/guides-tips-faqs/boating-guides/sawley-chandlery">the chandlery there</a> to pick up a few supplies, including a heat-powered stove fan, also <a href="https://simplyvaliant.co.uk/products/premium-4">a Valiant model</a>.</p>
<p><img src="/images/2023/07/stove-fan.png" alt="stove fan"></p>
<p>These are designed to sit on top of the hot stove, and use the heat to power a small motor, which in turn drives the fan, which distributes the warm air throughout the cabin.</p>
<p>I tried this out too, and it worked well. Having read the instructions, I noted that for optimum performance and lifetime, I should place it behind and not in front of the flue (I think otherwise the motor and other small components wear out sooner due to the direct heat from the proximity to the flue). You can't see it in action in the photo above; I only just remembered I had it towards the end of the cure process.</p>
<p>So. That's the stove cured! Is it wrong that I'm hoping for some cold days soon so I can use the stove for real?</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Mercia Marina to Shobnall Fields and Burton-on-Trent</title>
      <link href="https://qmacro.org/blog/posts/2023/07/21/mercia-marina-to-shobnall-fields-and-burton-on-trent/"/>
      <updated>2023-07-21T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2023/07/21/mercia-marina-to-shobnall-fields-and-burton-on-trent/</id>
      <content type="html">
        <![CDATA[
      <p>After three days <a href="/blog/posts/2023/07/18/oil-change-and-a-visit-to-mercia-marina/">in Mercia Marina on a visitor mooring</a>, it was time to leave. I must say that I was impressed with the marina - the facilities, the layout, and the staff. I'll be visiting again in late August, to leave my boat while I travel for a couple of CAP-related CodeJams, <a href="/talks/#codejam-cap-hana-cloud-full-stack-apps-budapest">in Budapest</a> and <a href="/talks/#service-integration-with-cap-dortmund-de">in Dortmund</a>, and I'm looking forward to it. I think that by then, I'm sort of planning to have put on another 25 hours on the engine, bringing me nicely to the 50 hour service, which I'll arrange with Streethay, to be done in the marina.</p>
<p>While I was at the marina I had a day off work, and found that the welldeck, i.e. the space in the bow, was perfect for relaxing.</p>
<p><img src="/images/2023/07/relaxing-in-the-welldeck.jpg" alt="Relaxing in the welldeck"></p>
<p>After an early morning run, plus topping up my water tank (the capacity is around 450 litres), emptying my toilet cassette, and using the washing machine and dryer in the laundry block next to the Egret moorings, it was time to get some work done before I moved off the finger pontoon, out of Mercia Marina, and onto the Trent &amp; Mersey canal again.</p>
<p>The Developer Advocates team is running a series of monthly Developer Challenges, with <a href="https://blogs.sap.com/2023/07/05/sap-developer-challenge-sap-cloud-application-programming-model/">my friend and colleague Nico running the July challenge on CAP</a>. I'll be running the August edition, so my work today involved making some preparations for that. The team puts in a lot of work behind the scenes to create content and events for SAP developers, and I'm proud to play my part.</p>
<h2>Route planning</h2>
<p>I chatted with my son Joseph about the route I was planning to take, and smiled when he mentioned the calculation for the approximate journey time. It's just a rough and ready measure but is enough to get an idea. You take the number of miles, plus the number of locks you'll pass through, and divide that total number by three to get the hours it will take. Of course, there are aspects that will make reality a little different.</p>
<p>One aspect is your cruising speed and the number of moored boats that you'll pass; the rule is that you should pass moored boats at tickover speed, to avoid having the wash from your forward motion rock the boats and potentially loosen mooring pins and ropes.</p>
<p>Another aspect is lock navigation. Some locks take longer to pass through than others. Not only because it depends on whether the lock you're approaching is &quot;in your favour&quot;, i.e. the level of water in the lock is at the level you're at, and you don't need to empty or fill it. But also because some are simply bigger than others, more difficult to work within as well as to fill and empty.</p>
<p>An example of the contrast is between <a href="https://canalplan.uk/place/9g2k">Sawley Locks No 2</a> and <a href="https://canalplan.uk/place/hcik">Dallow Lane Lock No 7</a>. Sawley Locks are are ginormous and electrically operated (the lock gates are opened and closed via hydraulic rams). When I passed through last week, I felt my narrowboat was like a small rubber duck bobbing around in the bath. Passing through Dallow Lane Lock, which I did on this route today was in sharp contrast. It's a single width lock (my 6'10&quot; narrowboat only just fit) with two tiny gates at the lock tail and a single gate at the head. It was also a fairly shallow lock, with a rise of only three and a half feet. The combination of it being a single lock and having a small rise meant that I could get from one side of the lock to the other by walking across my boat, either over the roof (when the lock was empty) or across the stern (when it was full). In turn, this meant that operating the lock (single handed, as I am) took far less time. I haven't got any photos of either lock, but there are photos in the two linked resources.</p>
<p>Anyway, according to CanalPlanAC, the route's distance was 5 miles, 2½ furlongs and 1 lock. Which equates therefore to approximately 2 hours travel time. Here's the route, courtesy of CanalPlanAC:</p>
<p><img src="/images/2023/07/mercia-marina-to-shobnall-visitor-moorings.png" alt="Mercia Marina to Shobnall Fields Visitor Moorings - route"></p>
<p>You can't quite see all the detail (including Dallow Lane Lock) due to the zoom factor, but you get the idea.</p>
<h2>Arrival</h2>
<p>I took it easy, and arrived at <a href="https://canalplan.uk/place/746m">Shobnall Fields Visitor Moorings</a> after just over two hours.</p>
<p>After passing through Dallow Lane Lock, I moored up a few hundred metres later, to check out the best place to moor for the evening. The visitor moorings (on the opposite bank to the towpath) seemed quite full, but I managed to squeeze myself on the end.</p>
<p><img src="/images/2023/07/moored-at-shobnall-fields.jpg" alt="Moored at Shobnall Fields"></p>
<p>The place is pretty peaceful, and my spot affords a lovely view over the park. You can see in this photo the mooring restrictions. I have a <a href="https://canalrivertrust.org.uk/enjoy-the-waterways/boating/licence-your-boat/continuous-cruising">continuous cruising licence</a> and generally one can moor for up to 14 days in a single place, but must then move on. There are exceptions to this, and here is an example, where you can see that boats can only moor here for two days. I'll be moving on yet further west on Sunday, so this suits me fine.</p>
<p><img src="/images/2023/07/view-over-the-park.jpg" alt="View over the park"></p>
<h2>Burton and beer</h2>
<p>Of course, being a Friday, and being in Burton-on-Trent, probably the most famous town in the UK with regards to beer and beer history, it was only right that I celebrated the start of the weekend with a beer. And <a href="https://untappd.com/user/qmacro/checkin/1296156940">so</a> <a href="https://untappd.com/user/qmacro/checkin/1296164172">I</a> <a href="https://untappd.com/user/qmacro/checkin/1296177918">did</a>. Cheers!</p>
<p><img src="/images/2023/07/beer-in-burton.jpg" alt="beer in Burton-on-Trent"></p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Resources for navigating the canal network</title>
      <link href="https://qmacro.org/blog/posts/2023/07/20/resources-for-navigating-the-canal-network/"/>
      <updated>2023-07-20T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2023/07/20/resources-for-navigating-the-canal-network/</id>
      <content type="html">
        <![CDATA[
      <p>My good friend Sascha <a href="https://hachyderm.io/@sufw@mastodon.social/110744077753623324">asked how folks navigate the canal network</a>, given that Google Maps lacks directional detail. I thought this would be a great topic for a short post. Thanks Sascha!</p>
<p>These are the resources I use; there may be others of which I'm not aware, but this combination provides me with everything I've needed so far.</p>
<h2>On the web</h2>
<p>There are some great online resources. The <a href="https://canalrivertrust.org.uk/">Canal &amp; River Trust's website</a> is a good source of information generally, but it also has some <a href="https://canalrivertrust.org.uk/enjoy-the-waterways/canal-and-river-network">great maps of the canal system</a>.</p>
<p>You can dive into the detail either by selecting a canal or river from the list:</p>
<p><img src="/images/2023/07/crt-listing.png" alt="A list of the canals and rivers on CRT's website"></p>
<p>Or you can start with the overall network map:</p>
<p><img src="/images/2023/07/crt-map-zoomed-out.png" alt="CRT network map zoomed out"></p>
<p>and then zoom in to see the detail:</p>
<p><img src="/images/2023/07/crt-map-zoomed-in.png" alt="CRT network map zoomed in, showing more detail"></p>
<p>In this section, showing where I am right now (<a href="/blog/posts/2023/07/18/oil-change-and-a-visit-to-mercia-marina/">in the marina</a> shown just west of Willington Rd) and a short section of the Trent &amp; Mersey Canal, where you can see lots of detail such as:</p>
<ul>
<li>bridges</li>
<li>mooring places</li>
<li>on which side of the canal section the towpath is</li>
<li>locks, and which way they are positioned (the direction of the chevron points &quot;up&quot;)</li>
<li>services (such as rubbish disposal, toilets, toilet cassette emptying facilities, water points, and so on)</li>
<li>winding points</li>
</ul>
<blockquote>
<p>&quot;winding&quot; is pronounced as you would say &quot;wind&quot; as in what blows, rather than what you do with a clock</p>
</blockquote>
<p>For me, the winding points are, from a navigation perspective, one of the most important features, in that they are almost the only places where you can turn round (canal junctions offer space too, but they are few and far between). They're short sections of the canal (usually between around 10 and 20 metres of canal length) where the canal is extra wide, usually going into a point, giving space to turn the narrowboat by 180 degrees.</p>
<p>In the case of this map section, it was good to know that there was a winding point in Willington, as I was coming along the Trent &amp; Mersey canal from the east, and could rest assured that if I missed the entrance to Mercia Marina (just after bridge 22, going west) and had gone too far to reverse, I could continue to the winding point in Willington to turn round and go back.</p>
<blockquote>
<p>Don't ask me why some bridges have letters after the numbers, and some don't. I haven't figured that out yet. I'm guessing it relates to where new bridges are added and there's no space numerically to insert them (why does this remind me of line numbering in steps of 10 in BASIC?).</p>
</blockquote>
<p>This is in fact a good example of where Google Maps is actually very useful; often I'll use the satellite view to see what the turning point looks like, to gauge for example whether it's of a decent size, and what's nearby:</p>
<p><img src="/images/2023/07/winding-point-in-google-maps.png" alt="Google Maps satellite view of the winding point in Willington"></p>
<p>I can also avail myself of any street view resources too, which helps:</p>
<p><img src="/images/2023/07/winding-point-in-google-maps-street-view.png" alt="Google Maps street view of the winding point in Willington"></p>
<p>The combination of these CRT and Google Maps give me a good start in working out where I'm going, what's available where, and how I might get to my destination.</p>
<p>But there's an online resource that is far better suited to planning a journey on the canal system, and that is the awesome <a href="https://canalplan.uk">CanalPlanAC</a>.</p>
<p>You can <a href="https://canalplan.uk/cgi-bin/canal.cgi">plan journeys</a> from A to B, find and explore points by name, and get everything you need (and more) from the data that has been clearly lovingly gathered. I'd heartily recommend you explore what it has to offer, as I cannot begin to describe its richness.</p>
<p>As well as having information on places, and how those places relate to other nearby places (this next screenshot is of the place Shardlow, where you can also see the nearest other places of interest, including pubs, winding holes, bridges and locks), you can plan routes in great detail.</p>
<p><img src="/images/2023/07/canalplan-shardlow.png" alt="Shardlow in CanalPlanAC"></p>
<p>Here's an example of a route that I'm planning for the coming weekend, towards the village of <a href="https://goo.gl/maps/RuxXy4CAwi4S8UkaA">Alrewas</a>.</p>
<p>First, having looked at the CRT and Google Maps to work out roughly where I think I want to end up, I search for a point in CanalPlanAC, which offers me a list of specific and known places:</p>
<p><img src="/images/2023/07/travelling-to-alrewas.png" alt="Searching for places related to Alrewas"></p>
<p>On choosing &quot;Alrewas Road Bridge No 48&quot; (which is roughly where I plan to moor on arrival), I'm taken to the custom journey page with everything I need, including a detailed route:</p>
<p><img src="/images/2023/07/alrewas-trip-detail.png" alt="CanalPlanAC trip detail"></p>
<p>and an accompanying (and zoomable) map:</p>
<p><img src="/images/2023/07/alrewas-trip-map.png" alt="CanalPlanAC trip map"></p>
<h2>On the phone</h2>
<p>While navigating I have my phone by my side, and have the <a href="https://opencanalmap.uk/">Open Canal Map</a> app open and ready to look at. It's a good combination of the CRT and CanalPlanAC resources, and is useful to quickly double check route details and re-confirm the locations of upcoming locks and winding points.</p>
<h2>On paper</h2>
<p>I have some of the Collins Nicholson Waterways Guides which are ringbound books that fold nicely flat and have maps and plenty of curated detail, with some useful opinionated navigation advice too based on experience.</p>
<p>Here's my collection, showing one of the guides (<a href="https://collins.co.uk/collections/collins-nicholson-waterways-guides/products/9780008546687">Four Counties &amp; the Welsh Canals</a>) open and inside a <a href="https://www.amazon.co.uk/gp/product/B08NL83GXJ/">waterproof pouch</a> so I can keep it on the stern with me even in the rain:</p>
<p><img src="/images/2023/07/nicholson-guides.jpg" alt="My Nicholson guides"></p>
<h2>Other ways to plan navigation</h2>
<p>Of course, because canal navigation is on a fairly small scale, given the travel speed and the distances planned for any given journey, it's often the case that one can walk or run ahead to see what's coming. I have used some of my morning runs to do this; here's an example of <a href="https://www.strava.com/activities/9453248632">a run from Shardlow, where I was moored, to Weston Lock, and back</a>, to see what both Weston Lock and Aston Lock were like, and to check the canal stretch along the way:</p>
<p><img src="/images/2023/07/canal-run-strava.png" alt="A run along the Trent &amp; Mersey canal"></p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Oil change and a visit to Mercia Marina</title>
      <link href="https://qmacro.org/blog/posts/2023/07/18/oil-change-and-a-visit-to-mercia-marina/"/>
      <updated>2023-07-18T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2023/07/18/oil-change-and-a-visit-to-mercia-marina/</id>
      <content type="html">
        <![CDATA[
      <p>Today was the day for the first service on the <a href="https://www.barrus.co.uk/divisions/marine/diesel/shire/our-products/">Barrus Shire</a> 50 engine and gearbox.</p>
<p>Specifically, the gearbox oil needs to be changed after 25 hours. While I'd participated in a great course at the <a href="https://nbsc.org.uk/">Narrowboat Skills Centre</a> on boat engine maintenance, the reality of tackling this myself on a new engine, and not messing it up, was a little daunting. So I'd booked in with <a href="https://www.streethaywharf.co.uk">Streethay Wharf Engineering</a>, who are based in Lichfield but also have on-site facilities at <a href="https://www.merciamarina.co.uk">Mercia Marina</a> which is where I was heading, and where I'd approximately be when the engine hour count reached 25.</p>
<h2>Getting into the marina</h2>
<p>At just after 0730 I quietly moved off my mooring on the Trent &amp; Mersey Canal where I'd spent the night. Here's a snap of the view from the stern of my boat that evening.</p>
<p><img src="/images/2023/07/trent-and-mersey-mooring.jpg" alt="My mooring the previous night, on the Trent and Mersey Canal"></p>
<p>The mooring was just before the entrance to the marina, into which I carefully and slowly manoevered, backing onto the first pontoon, one of a few that Streethay use there. I didn't do too badly, there was plenty of space in front for me to turn to port before reversing.</p>
<p><img src="/images/2023/07/at-streethay-engineering-in-mercia-marina.jpg" alt="on the mooring at Streethay Engineering in Mercia Marina"></p>
<p>I waited a while for the engineer to come by; there was a mix up at the office, and that, combined with the general concept of &quot;canal time&quot; (things will happen when they happen) meant that I had to gently persuade them to honour the agreed morning time for the service.</p>
<p>While I waited I took the opportunity to empty my toilet cassettes in an Elsan facility there, and fill up my water tank. I even scrubbed down the roof, bow and stern. Always something to do!</p>
<h2>The oil change</h2>
<p>David from Streethay came by around 1130 and I asked if he would mind if I watched what he did. He was superb, and we had a great chat while he changed the gearbox oil. I watched him intently and am confident that I could do it myself next time. Here's what he did:</p>
<ul>
<li>Remove the bolt on the side of the oil pump</li>
<li>Remove the gold coloured nut from the top of the gearbox enclosure</li>
<li>Position a container underneath the hole now on the side of the oil pump</li>
<li>Pump out the existing oil into the container</li>
<li>Measure the amount of oil pumped out, and then dispose of it</li>
<li>Replace the bolt on the side of the oil pump</li>
<li>Replace with the same amount of new oil, into the gearbox enclosure</li>
<li>Double check the oil level with the dipstick</li>
<li>Replace the nut</li>
</ul>
<blockquote>
<p>the gold nut has a dipstick / level indicator attached</p>
</blockquote>
<p>The oil David used was Comma's &quot;Gear Oil EP80W-90 GL-4 Mineral&quot; (marked GBP 10.00 per litre) and approximately 1.5 litres were replaced.</p>
<p><img src="/images/2023/07/gearbox-oil.jpg" alt="gearbox oil"></p>
<h2>Moving into a visitor mooring</h2>
<p>After that it was time to head over to a visitor mooring spot in the marina. I'd previously booked a week on a visitor mooring with Mercia Marina but circumstances had conspired to prevent me from making it. However the lovely Jules, who works in the office, had kindly agreed to credit those days to my account, which was great.</p>
<p>I had agreed with Jules to take three of the seven days I had credit for, and she assigned me a mooring at Egret 15, finger pontoon position 15 in the &quot;Egret&quot; area which is specifically for 57' boats.</p>
<p>To get to the &quot;Egret&quot; area I had to navigate through a large part of the marina. This was quite daunting, given the number of folks walking up and down the boardwalk, and others watching as they drank their coffee in the cafes that overlooked he water. I took it super slowly, alternating between forward gear and neutral to introduce some extra slow forward motion; steering only works when the propeller is pushing water past the rudder though, so the neutral gear sections were quite short! Anyway, I move the boat into the &quot;Egret&quot; area, and used a combination of forward and reverse movements to gently and slowly back onto the finger pontoon. And I managed it, without any bumps, scrapes, or other collisions, pulling the boat down the pontoon manually with the centre rope for the last part. Phew!</p>
<p>Can you spot FULLY RESTFUL in there? It looks rather diminutive next to its neighbours!</p>
<p><img src="/images/2023/07/moored-on-egret-15.jpg" alt="moored on Egret 15"></p>
<p>I explored the marina which is rather large and <a href="https://www.merciamarina.co.uk/boating/marina-facilities/">which has plenty of facilities</a>, including multiple blocks each with toilets, showers and laundry.</p>
<p>There were also refuse areas for general waste and rubbish for recycling. I took advantage of every single one of those facilities. I was very impressed with the organisation and cleanliness. Given the price of a visitor mooring (GBP 15.00 per day, reduced to GBP 13.00 per day for a week, which is what I'd originally booked), it's pretty good value.</p>
<p>That said, laundry was extra - I had pay a deposit for a credit card sized device and load money onto it, but the wash and dry cycles were reasonable (GBP 3.50 for a wash, GBP 1.20 for a dry). I also had to pay a GBP 20.00 deposit for a key fob which gave me access to all the non-public areas of the marina.</p>
<p>I slept soundly yet again. I think the open air and floating home suits.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>SAP CodeJam report - service integration with CAP in Guetersloh, DE</title>
      <link href="https://qmacro.org/blog/posts/2023/06/17/sap-codejam-report-service-integration-with-cap-in-guetersloh-de/"/>
      <updated>2023-06-17T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2023/06/17/sap-codejam-report-service-integration-with-cap-in-guetersloh-de/</id>
      <content type="html">
        <![CDATA[
      <p>I'm on the train back to Duesseldorf on an early Saturday morning, after another successful outing of our SAP CodeJam content that takes participants through the ins and outs of <a href="https://github.com/SAP-samples/cap-service-integration-codejam/">service integration with CAP</a> (the SAP Cloud Application Programming Model).</p>
<p>This time it was in Guetersloh, hosted by <a href="https://www.reply.com/de">Reply</a> and the very friendly and helpful Raphael Witte. I arrived in the warm early morning after a short bus ride from the town centre - in fact the bus dropped me off right outside the offices!</p>
<p><img src="/images/2023/06/arriving-at-reply.jpg" alt="Arriving at the Reply offices"></p>
<p>The setup was excellent. We had a breakout room plus two work rooms with plenty of power and Internet connectivity. The rather advanced TV / projector display mechanism almost had us foiled ... but after a while we figured it out, although at one point we were projecting onto the large display via a Teams meeting between me and Raphael, where I shared my screen and he relayed it to the display through his software-based connection to the display share device. Give me old fashioned direct HDMI cables plugged into the back any day of the week :-)</p>
<p>The participants were all eager to get started, and all had a great can-do attitude that we needed to work around some initial access challenges. In the end, in fact, every participant ended up going for the VS Code + dev container based working environment which worked brilliantly for everyone. This was also a great testament to the power and flexibility of dev containers, about which I have written in the past, in a three-part series <a href="https://blogs.sap.com/2022/01/27/boosting-tutorial-ux-with-dev-containers-part-1-challenge-and-base-solution/">Boosting tutorial UX with dev containers</a>.</p>
<p>We worked through the exercises, learning together about extending existing services and schemas, external APIs from SAP S/4HANA Cloud, the SAP Business Accelerator Hub (formerly known as the SAP API Business Hub), and how to find and dig into APIs that are detailed there.</p>
<p>Then we set about importing an API definition into an existing project, learning along the way about internal and external mocking, various useful features of the CAP CLI (<code>cds</code>), and created a separate profile in the environment for a direct connection to the SAP Business Accelerator Hub's sandbox systems.</p>
<p>Not only that, but we learned about the different levels of integration, and got a hands-on feel for the best ways to extend existing CDS service and entity definitions, as well as wrap imported external services with a reduced surface area.</p>
<p>All this brain work and conversation was boosted by a midday break for lunch, which was provided by Reply and was delicious, thank you!</p>
<p><img src="/images/2023/06/lunchtime-break.jpg" alt="Lunchtime break outside"></p>
<p>All in all it was a very enjoyable day. All the participants worked hard, had some great questions which provoked interesting side discussions. This is a key part of SAP CodeJams - the conversations and collaborative learning.</p>
<p>Thanks again to Reply and to Raphael for hosting, and to everyone for showing up and taking part!</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Selecting the related endpoints from a GitHub API response using jq&#39;s with_entries</title>
      <link href="https://qmacro.org/blog/posts/2023/06/12/selecting-the-related-endpoints-from-a-github-api-response-using-jq&#39;s-with_entries/"/>
      <updated>2023-06-12T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2023/06/12/selecting-the-related-endpoints-from-a-github-api-response-using-jq&#39;s-with_entries/</id>
      <content type="html">
        <![CDATA[
      <p>I often find myself searching for the related API endpoints for any given chunk of data returned from a call to the <a href="https://docs.github.com/en/rest">GitHub REST API</a>. Let's take an issue as an example, one related to SAP's <a href="https://blogs.sap.com/2021/05/20/introducing-the-open-documentation-initiative/">Open Documentation Initiative</a>:</p>
<p>Feedback for &quot;Data Lake API&quot;: <a href="https://github.com/SAP-docs/sap-datasphere/issues/13">https://github.com/SAP-docs/sap-datasphere/issues/13</a></p>
<p>Taking the basic information available for this issue via <a href="https://docs.github.com/en/rest/issues/issues?apiVersion=2022-11-28#get-an-issue">one of the endpoints in the Issues API</a>, we get an object returned with properties that we can list like this:</p>
<pre class="language-shell"><code class="language-shell">gh api <span class="token punctuation">\</span><br>  <span class="token parameter variable">--cache</span> 1h <span class="token punctuation">\</span><br>  repos/SAP-docs/sap-datasphere/issues/13 <span class="token punctuation">\</span><br>  <span class="token operator">|</span> jq keys</code></pre>
<p>There are quite a few properties, many of them ending <code>_url</code>:</p>
<pre class="language-json"><code class="language-json"><span class="token punctuation">[</span><br>  <span class="token string">"active_lock_reason"</span><span class="token punctuation">,</span><br>  <span class="token string">"assignee"</span><span class="token punctuation">,</span><br>  <span class="token string">"assignees"</span><span class="token punctuation">,</span><br>  <span class="token string">"author_association"</span><span class="token punctuation">,</span><br>  <span class="token string">"body"</span><span class="token punctuation">,</span><br>  <span class="token string">"closed_at"</span><span class="token punctuation">,</span><br>  <span class="token string">"closed_by"</span><span class="token punctuation">,</span><br>  <span class="token string">"comments"</span><span class="token punctuation">,</span><br>  <span class="token string">"comments_url"</span><span class="token punctuation">,</span><br>  <span class="token string">"created_at"</span><span class="token punctuation">,</span><br>  <span class="token string">"events_url"</span><span class="token punctuation">,</span><br>  <span class="token string">"html_url"</span><span class="token punctuation">,</span><br>  <span class="token string">"id"</span><span class="token punctuation">,</span><br>  <span class="token string">"labels"</span><span class="token punctuation">,</span><br>  <span class="token string">"labels_url"</span><span class="token punctuation">,</span><br>  <span class="token string">"locked"</span><span class="token punctuation">,</span><br>  <span class="token string">"milestone"</span><span class="token punctuation">,</span><br>  <span class="token string">"node_id"</span><span class="token punctuation">,</span><br>  <span class="token string">"number"</span><span class="token punctuation">,</span><br>  <span class="token string">"performed_via_github_app"</span><span class="token punctuation">,</span><br>  <span class="token string">"reactions"</span><span class="token punctuation">,</span><br>  <span class="token string">"repository_url"</span><span class="token punctuation">,</span><br>  <span class="token string">"state"</span><span class="token punctuation">,</span><br>  <span class="token string">"state_reason"</span><span class="token punctuation">,</span><br>  <span class="token string">"timeline_url"</span><span class="token punctuation">,</span><br>  <span class="token string">"title"</span><span class="token punctuation">,</span><br>  <span class="token string">"updated_at"</span><span class="token punctuation">,</span><br>  <span class="token string">"url"</span><span class="token punctuation">,</span><br>  <span class="token string">"user"</span><br><span class="token punctuation">]</span></code></pre>
<p>A simple <a href="https://jqlang.github.io/jq/manual/#to_entries,from_entries,with_entries">with_entries</a>, which is actually just a combination of its two sibling functions: <code>to_entries | map(foo) | from_entries</code>, does the trick:</p>
<pre class="language-shell"><code class="language-shell">gh api <span class="token punctuation">\</span><br>  <span class="token parameter variable">--cache</span> 1h <span class="token punctuation">\</span><br>  repos/SAP-docs/sap-datasphere/issues/13 <span class="token punctuation">\</span><br>  <span class="token operator">|</span> jq <span class="token string">'with_entries(select(.key | endswith("_url")))'</span></code></pre>
<p>This gives:</p>
<pre class="language-shell"><code class="language-shell"><span class="token punctuation">{</span><br>  <span class="token string">"repository_url"</span><span class="token builtin class-name">:</span> <span class="token string">"https://api.github.com/repos/SAP-docs/sap-datasphere"</span>,<br>  <span class="token string">"labels_url"</span><span class="token builtin class-name">:</span> <span class="token string">"https://api.github.com/repos/SAP-docs/sap-datasphere/issues/13/labels{/name}"</span>,<br>  <span class="token string">"comments_url"</span><span class="token builtin class-name">:</span> <span class="token string">"https://api.github.com/repos/SAP-docs/sap-datasphere/issues/13/comments"</span>,<br>  <span class="token string">"events_url"</span><span class="token builtin class-name">:</span> <span class="token string">"https://api.github.com/repos/SAP-docs/sap-datasphere/issues/13/events"</span>,<br>  <span class="token string">"html_url"</span><span class="token builtin class-name">:</span> <span class="token string">"https://github.com/SAP-docs/sap-datasphere/issues/13"</span>,<br>  <span class="token string">"timeline_url"</span><span class="token builtin class-name">:</span> <span class="token string">"https://api.github.com/repos/SAP-docs/sap-datasphere/issues/13/timeline"</span><br><span class="token punctuation">}</span></code></pre>
<p>What <code>to_entries</code>, <code>from_entries</code> and <code>with_entries</code> gives us is a way to process properties the names of which are unknown to us until execution time. Each property is normalised into a static structure with well-known property names. Here's an example:</p>
<pre class="language-shell"><code class="language-shell">jq <span class="token parameter variable">-n</span> <span class="token string">'{question: "Life", answer: "Forty Two"} | to_entries'</span></code></pre>
<p>This emits a stable, predictable structure:</p>
<pre class="language-json"><code class="language-json"><span class="token punctuation">[</span><br>  <span class="token punctuation">{</span><br>    <span class="token property">"key"</span><span class="token operator">:</span> <span class="token string">"question"</span><span class="token punctuation">,</span><br>    <span class="token property">"value"</span><span class="token operator">:</span> <span class="token string">"Life"</span><br>  <span class="token punctuation">}</span><span class="token punctuation">,</span><br>  <span class="token punctuation">{</span><br>    <span class="token property">"key"</span><span class="token operator">:</span> <span class="token string">"answer"</span><span class="token punctuation">,</span><br>    <span class="token property">"value"</span><span class="token operator">:</span> <span class="token string">"Forty Two"</span><br>  <span class="token punctuation">}</span><br><span class="token punctuation">]</span></code></pre>
<p>And <code>from_entries</code> reverses the conversion that <code>to_entries</code> performs. For example:</p>
<pre class="language-shell"><code class="language-shell">jq <span class="token parameter variable">-n</span> <span class="token string">'<br>  {question: "Life", answer: "Forty Two"}<br>  | to_entries<br>  | map(.value |= ascii_upcase)<br>  | from_entries<br>'</span></code></pre>
<p>This emits:</p>
<pre class="language-json"><code class="language-json"><span class="token punctuation">{</span><br>  <span class="token property">"question"</span><span class="token operator">:</span> <span class="token string">"LIFE"</span><span class="token punctuation">,</span><br>  <span class="token property">"answer"</span><span class="token operator">:</span> <span class="token string">"FORTY TWO"</span><br><span class="token punctuation">}</span></code></pre>
<p>So this can be replaced simply with:</p>
<pre class="language-shell"><code class="language-shell">jq <span class="token parameter variable">-n</span> <span class="token string">'<br>  {question: "Life", answer: "Forty Two"}<br>  | with_entries(.value |= ascii_upcase)<br>'</span></code></pre>
<p>This has the same effect (because <a href="https://github.com/jqlang/jq/blob/a9f97e9e61a910a374a5d768244e8ad63f407d3e/src/builtin.jq#L43">it's just syntactic sugar for the version with <code>to_entries</code> and <code>from_entries</code></a>):</p>
<pre class="language-json"><code class="language-json"><span class="token punctuation">{</span><br>  <span class="token property">"question"</span><span class="token operator">:</span> <span class="token string">"LIFE"</span><span class="token punctuation">,</span><br>  <span class="token property">"answer"</span><span class="token operator">:</span> <span class="token string">"FORTY TWO"</span><br><span class="token punctuation">}</span></code></pre>
<hr>
<p>I'm going to try and write more of these short &quot;snippet&quot; posts, to break the cycle of only writing longer, more detailed and therefore less frequent ones. Let's see how it goes.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>SAP CodeJam on Service Integration with CAP in Brescia</title>
      <link href="https://qmacro.org/blog/posts/2023/05/20/sap-codejam-on-service-integration-with-cap-in-brescia/"/>
      <updated>2023-05-20T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2023/05/20/sap-codejam-on-service-integration-with-cap-in-brescia/</id>
      <content type="html">
        <![CDATA[
      <p>The <a href="https://groups.community.sap.com/t5/sap-codejam/eb-p/codejam-events">SAP CodeJam programme</a> continues apace. Yesterday I ran a CodeJam in Brescia, Italy, on the topic of service integration with CAP, the SAP Cloud Application Programming Model. Here's a quick overview, with plenty of pictures.</p>
<h2>Working on the content</h2>
<p>This wasn't the first instance of a CodeJam on this topic; the inaugural outing of the content took place in Utrecht, NL in February (see <a href="/blog/posts/2023/02/11/sap-codejam-on-service-integration-with-cap-in-utrecht/">SAP CodeJam on Service Integration with CAP in Utrecht</a>) so I was generally happy with how the content flowed. Nevertheless, I had been working on it recently, running up to this event:</p>
<p><img src="/images/2023/05/commits.png" alt="Commit frequency graph for the CodeJam repo"></p>
<p>Looks like at least one of my Developer Advocate colleagues Antonio <a href="https://fedi.ajmaradiaga.com/@antonio/110395822934061159">has been putting work in on his CodeJam content this week</a> too!</p>
<blockquote>
<p>If you want to find out more about the CodeJams that we offer, I recommend you read this post from Tom Jung: <a href="https://groups.community.sap.com/t5/sap-codejam-blog-posts/so-you-want-to-host-a-codejam-everything-you-need-to-know/ba-p/221415">So, You Want to Host a CodeJam! Everything you need to know</a>, which also links to the list of topics available right now.</p>
</blockquote>
<h2>Travelling to the venue</h2>
<p>I started my journey to Brescia, specifically to the offices of <a href="https://www.regestaitalia.eu/">Regesta S.p.A.</a>, the kind and welcoming hosts for this particular CodeJam instance, on Thursday morning in Manchester. I started out with a bus from home to Manchester Piccadilly station, for a train <a href="https://hachyderm.io/@qmacro/110389088154110866">from Platform 13</a> to the airport.</p>
<p><img src="/images/2023/05/platform-transpennine.jpg" alt="On the platform at Manchester Piccadilly station"></p>
<p>After the flight, which was uneventful (even accounting for the usual experience at Manchester Airport), and a train from Malpenso airport, I reached the centre of Milan at the spectatular Milano Centrale station (you can see <a href="https://hachyderm.io/@qmacro/110391127955702939">more photos of the station in this toot</a>):</p>
<p><img src="/images/2023/05/milano-centrale.jpg" alt="Milano Centrale station"></p>
<p>After a quiet evening and a good coffee at breakfast, overlooking the station:</p>
<p><img src="/images/2023/05/coffee-station.jpg" alt="Coffee overlooking the station"></p>
<p>I was ready to get the train from Milan to Brescia:</p>
<p><img src="/images/2023/05/train-milano-to-trieste.jpg" alt="Train from Milano to Trieste"></p>
<p>There I was met at the station by Valentino, the CodeJam organiser at Regesta. We travelled through the morning rush hour to the office which was perfectly set up for a great learning experience, and we were all soon underway.</p>
<p><img src="/images/2023/05/outside-regesta-offices.jpg" alt="Arrived at the offices"></p>
<h2>The learning experience</h2>
<p>The day flew by.</p>
<p>I can honestly say this was one of the most diligent groups of CodeJam attendees I've had the pleasure of working with. <a href="https://twitter.com/qmacro/status/1659467428093390849">Everyone got properly involved in the content</a>, asked great questions, worked with each other through each exercise, and made it easy for me to convey all the concepts and details. Thanks folks!</p>
<p><img src="/images/2023/05/codejam-attendees.jpg" alt="the CodeJam attendees"></p>
<h2>Networking and getting to know each other</h2>
<p>During lunch, provided by our kind hosts, we got a chance to chat more.</p>
<p><img src="/images/2023/05/buffet-lunch.jpg" alt="Some of the food on offer at the buffet lunch"></p>
<p>We also got another chance at the end of the day, where I learned from a Regesta developer about the awesome tools he's been working on - an NPM-like package experience for ABAP, compatible with and designed to complement <a href="https://abapgit.org/">abapGit</a>. Definitely worth keeping an eye out for in the near future!</p>
<h2>A brief overview of the CodeJam topic focus</h2>
<p>Perhaps it's worth explaining at this point what this specific CodeJam focuses upon.</p>
<p>Of course, you can get a general idea from the <a href="https://github.com/SAP-samples/cap-service-integration-codejam#about-this-codejam">About this CodeJam</a> section of the repo's main README file, but perhaps you want to know more.</p>
<p>In essence, we take a slow but sure, step by step approach to integrating an external service from the SAP Business Accelerator Hub (previously known as the SAP API Business Hub). In doing so, we take a route that introduces us to various CAP server features, cds commands, in-process and external mocking, initial data supply, and take a look at how to extend both services and entities.</p>
<p>Moreover, on that route, we learn about the cds environment, profiles, port control, and custom vs built-in resolutions of OData operation responses. Ultimately we bind in a real remote external service and have it work in harmony with our own local service.</p>
<p>Not only that, but we also dig deep into the philosophy and practicality of how, where and why we make changes and extensions in the places we do. Think of it as dipping into the essential topic of &quot;keep the core clean&quot; for CDS based services and mashups.</p>
<p>And of course, all the way through, we work through deliberate errors that are there for us to learn from and have fun with.</p>
<p>If this sounds like something you would like to experience, check out <a href="https://groups.community.sap.com/t5/sap-codejam-blog-posts/so-you-want-to-host-a-codejam-everything-you-need-to-know/ba-p/221415">Tom's post that I mentioned earlier</a>.</p>
<h2>After the event</h2>
<p>I headed back to Milan that same Friday evening to be closer to Malpensa airport for my flight, which is today (I'm writing this on Saturday). There I treated myself to a couple of excellent beers (a <a href="https://untappd.com/user/qmacro/checkin/1275581325">hyper local IPA</a> and a <a href="https://untappd.com/user/qmacro/checkin/1275585970">West Coast DIPA</a>) at a great place - <a href="https://goo.gl/maps/uJmZMWgriDsEyKAL8">Bierfabrik Milano</a>.</p>
<p>I started writing this post at breakfast in the hotel this morning.</p>
<p><img src="/images/2023/05/at-breakfast.png" alt="My Chrome OS tablet at the breakfast table"></p>
<p>After another train journey back to the airport I'm finishing it off in the gate area while waiting for my flight back to Manchester, tired but happy at the conclusion of another successful CodeJam event!</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Living on a narrowboat - layout details of the stern</title>
      <link href="https://qmacro.org/blog/posts/2023/05/07/living-on-a-narrowboat-layout-details-of-the-stern/"/>
      <updated>2023-05-07T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2023/05/07/living-on-a-narrowboat-layout-details-of-the-stern/</id>
      <content type="html">
        <![CDATA[
      <p>Previous post in this series: <a href="/blog/posts/2023/04/07/living-on-a-narrowboat-the-stove-as-the-heart-of-the-home/">Living on a narrowboat - the stove as the heart of the home</a>.</p>
<hr>
<p>In the first post in this series, <a href="/blog/posts/2023/01/02/i'm-moving-onto-a-narrowboat/">I'm moving onto a narrowboat</a>, I showed an image depicting the design of my narrowboat. My old friend <a href="https://github.com/intosi">Edwin</a> asked me to supply some descriptions of what each of the numbers referred to. I started to write down all the details in response, but I soon found that it would be far too long as a single post, so I've split it up. This post covers the items in the stern area.</p>
<p>Here's the design image again (you can open up the image in a new browser tab where you can see it full size):</p>
<p><img src="/images/2023/01/narrowboat-design.png" alt="narrowboat design image"></p>
<h2>Legend</h2>
<p>Here are what each of the numbers in the stern area signify. Each item's title is taken directly from the detailed design documents drawn up by Mark at <a href="https://www.thefitoutpontoon.co.uk/">The Fitout Pontoon</a>.</p>
<h3>01 Steel taff seating</h3>
<p>This is the rail that goes round the rear of the stern, partly I guess to stop you falling over backwards into the water, and also designed to be somewhere you can perch. &quot;Taff&quot; is one of many wonderful words I'm discovering as I embark upon this new journey, and a <a href="https://en.wikipedia.org/wiki/Taffrail">taffrail</a> is basically just that, i.e. &quot;the handrail around the open deck area towards the stern&quot;.</p>
<p>Here's a photo of my narrowboat's taffrail from mid way through the steel build phase, when the main hull and cabin was done and undercoated, and the steering mechanism (<a href="https://canalrivertrust.org.uk/enjoy-the-waterways/boating/go-boating/a-guide-to-boating/boat-maintenance/steering-mechanism-maintenance">rudder and tiller</a>) had just been fitted:</p>
<p><img src="/images/2023/05/stern.jpg" alt="the stern on Fully Restful"></p>
<h3>02 Morse Control / Control Column</h3>
<p>A Morse control is a lever which is used to control speed and whether you're going forward or in reverse. It's a pretty neat design which uses two cables internally, both of which are connected to different parts of the engine: one is connected to the gear selector and the other to the throttle (I learned about this and many other aspects of narrowboat engines, and maintenance thereof, on the excellent <a href="https://nbsc.org.uk/diesel-engine-boat-maintenance/">Diesel Engine And Boat Maintenance</a> course run by the Narrowboat Skills Centre). Morse is a brand of such a mechanism and its popularity has turned the term into a proprietary eponym (a bit like how the term &quot;Hoover&quot; has come to refer to any make of vacuum cleaner).</p>
<p>When the Morse control is at its highest point (at 12 o'clock, as it were) then the engine is in neutral and the throttle at the base level. Moving it forwards will select forward gear (via one of the cables) and also increase the throttle (via the other) according to how far forwards you move it. Likewise moving it backwards will select reverse gear and also increase the throttle according to how far backwards you move it.</p>
<p>The Morse control is usually fitted to the side of a small column, or tower, on a cruiser stern, in easy reach of the person steering. On that column are also some engine displays such as the engine RPM, battery charge, and various status lights. If a bow thruster is fitted (as is the case with mine), bow thruster controls will also often be mounted on the column.</p>
<p>You can see the column, with a lid at the top (under which the engine display panel and bow thruster controls will be found), on the left in the photo earlier.</p>
<p>In this photo, courtesy of The Fitout Pontoon (from their page on <a href="https://www.thefitoutpontoon.co.uk/engines-drive-gear/controls/">Engine Controls</a>) you can see a Morse control, bow thruster controls and an engine display panel.</p>
<p><img src="/images/2023/05/controls.jpg" alt="controls"></p>
<p>Here the controls and panel are mounted on an internal panel, rather than on a control column on the stern. This is most likely because the controls in this photo are fitted on a traditional or semi-traditional layout narrowboat (where the stern is very different, usually a lot more compact, and there is often no separate control column).</p>
<h3>03 Deck Boards</h3>
<p>Under the deck boards is the engine bay, which of course is where the engine is, but also other equipment, notably the Webasto diesel powered heating system (see the &quot;Diesel&quot; section of <a href="/blog/posts/2023/01/16/living-on-a-narrowboat-embracing-constraints/">Living on a narrowboat - embracing constraints</a> for more details).</p>
<p>Here's what's underneath the deck boards. The steelwork was done by <a href="http://www.jsrboats.co.uk/">JSR Boats</a> and they've welded a little memento onto the bottom of the engine bay:</p>
<p>JSR 90 2022</p>
<p>i.e. the company's initials, the boat number (this is the 90th hull they've built) and the build year 2022. What's extra lovely about this is that this modest but beautiful detail will go unseen for the most part, being directly below the engine, when it's mounted onto those four stands.</p>
<p><img src="/images/2023/05/enginebay.jpg" alt="the engine bay"></p>
<p>And here's a shot of the engine so mounted (and connected to the propeller shaft), a 50hp Shire from <a href="https://www.barrus.co.uk/divisions/marine/diesel/shire/our-products/">Barrus</a>:</p>
<p><img src="/images/2023/05/barrus.jpg" alt="the engine"></p>
<p>One of the many aspects I hadn't even thought about is how to minimise the amount of rainwater entering this engine bay area. Deckboards aren't watertight. Having a huge, single board would help, but would also be very difficult to manage because of the size and weight, and where would you put it while you had it removed?</p>
<p>Instead, the engine bay cover is split up into multiple boards. Not only does that make it easier from a bulk and weight perspective, but it also means that it's easier to access parts of the engine bay that one needs to get to more frequently.</p>
<p>One of these parts is the <a href="https://www.collidgeandpartners.co.uk/blog/maintaining-your-weed-hatch/">weed hatch</a>, which affords direct access to the propeller, so you can sort things out when debris gets around it. This means you don't have to get into the water to do it. You can see the weed hatch on the left of this photo, it's the rectangular box-shaped part that you can see through all the way to the workshop floor:</p>
<p><img src="/images/2023/05/weedhatch.jpg" alt="weed hatch"></p>
<p>Before you ask, yes, there is a lid that goes on the top of the weed hatch, one that has a clamp and rubber seal, too! In fact, you can see the clamp in this next photo, which shows a key part of the solution to keeping rainwater out of the engine bay - gutters:</p>
<p><img src="/images/2023/05/gutters.jpg" alt="gutters"></p>
<p>In the previous photo, you can see the main gutter that is built in to the stern and which and goes around the edge of the engine bay access hole (that the deck boards will cover). The gutter lengths in this photo will go across the width* of the engine bay access hole, at the points where the deck boards meet (slotting in to the three pairs of cut-outs you can see).</p>
<p>*Another boat related word I learned today in fact, while reading an article in this month's <a href="https://waterwaysworld.com/">Waterways World</a> magazine, is <a href="https://en.wiktionary.org/wiki/athwartships">athwartships</a>, which means exactly that - going across the width of the boat.</p>
<h3>04 Vented, Sunken Gas Lockers</h3>
<p>Finally in the stern, we have a couple of gas lockers. These are primarily to store standard 13kg gas canisters, and I wrote more about them in the <a href="/blog/posts/2023/01/16/living-on-a-narrowboat-embracing-constraints/#gas">Gas</a> section of <a href="/blog/posts/2023/01/16/living-on-a-narrowboat-embracing-constraints/">Living on a narrowboat - embracing constraints</a>, where there are a couple of photos. So I'll just add another photo here, showing how they're made into seats.</p>
<p><img src="/images/2023/05/gaslockerseat.png" alt="gas locker seat"></p>
<p>That's it for the stern items. Continuing to move forward towards the bow, I'll cover the items in the galley area next. Thanks for reading!</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Improving my interactive jq workflow with ijq, bash and tmux</title>
      <link href="https://qmacro.org/blog/posts/2023/04/27/improving-my-interactive-jq-workflow-with-ijq-bash-and-tmux/"/>
      <updated>2023-04-27T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2023/04/27/improving-my-interactive-jq-workflow-with-ijq-bash-and-tmux/</id>
      <content type="html">
        <![CDATA[
      <p>I'm a big fan of ijq and how it allows me to explore JSON data interactively with jq expressions. With a small script I have improved my workflow by being able to capture the jq expression from ijq and use it easily on the command line.</p>
<h2>The challenge</h2>
<p>I noticed that I had developed a workflow where I would:</p>
<ul>
<li>load my JSON data into <a href="https://sr.ht/~gpanders/ijq/">ijq</a> and explore it</li>
<li>get to a stage where I was happy with the jq expression I'd constructed</li>
<li>exit ijq back to the command line, to then use jq</li>
<li>try to remember and manually type in the jq expression</li>
</ul>
<p>Yes, I could just use ijq to run the expression for real and get the results, but the command line is both part of my IDE, my scratchpad, my recent memory and much more, so it's important that I have the jq invocation and expression in my command history, and it's also then ready for further processing with more commands in a pipeline that I can add (super easily through the power of <a href="https://opensource.com/article/17/3/fun-vi-mode-your-shell">vi mode</a>).</p>
<p>Anyway, I finally recognised that this was suboptimal and decided to do something about it.</p>
<h2>The context</h2>
<p>90% of the time I'm working in a dev container. Whether that's running on my SAP-supplied MacBook Pro, or on one of my own Chrome OS devices, or even remotely, via Tailscale, on my Raspberry Pi at home.</p>
<p>The definition of my dev container is <a href="https://github.com/qmacro/dotfiles/tree/main/devcontainer">in my dotfiles repo</a>, and if you examine it, or watch some of the episode replays of our <a href="https://github.com/qmacro/dotfiles/tree/main/devcontainer">Hands-on SAP Dev</a> show on our <a href="https://www.youtube.com/user/sapdevs">SAP Developers YouTube channel</a>, you'll see that I use <a href="https://github.com/tmux/tmux/wiki">tmux</a>, an awesome terminal multiplexer. Beyond the obvious and visual superpowers it offers, tmux also surfaces session, window, pane and buffer management to the command line level, which gives me access to them and enables me to make use of them too.</p>
<p>The last part of the context is that the underlying OS in my dev containers is Linux, which means I have a native UNIX based environment in which to work, regardless of the actual physical machine I'm using.</p>
<h2>The solution</h2>
<p>Because of the context, mainly tmux and a Linux environment, but also the nice way ijq works, the solution was straightforward.</p>
<p>The way ijq works, as I've mentioned also in the comments in the script, is that it uses STDOUT and STDERR to split what it emits. On exiting, it will emit the results of the jq expression to STDOUT (i.e. the data you've grabbed or manipulated with the jq expression) and it will emit the jq expression itself to STDERR. If anything was amiss with the jq expression, it will also add the error detail to STDERR as well as ending on a high return code.</p>
<p>Anyway, to take advantage of tmux and how ijq works, I created a short Bash shell script, currently called <a href="https://github.com/qmacro/dotfiles/blob/98d3a68a960a42299d186c310252efb6df98b512/scripts/zijq">zijq</a> (the ABAP developers amongst you will know why). It currently looks like this:</p>
<pre class="language-shell"><code class="language-shell"><span class="token shebang important">#!/usr/bin/env bash</span><br><br><span class="token comment"># Wrapper around ijq to capture the actual jq expression that was used, </span><br><span class="token comment"># unless it ended in an error. The capture of the expression is into a </span><br><span class="token comment"># TMUX paste buffer, so this will only be valid in a TMUX session.</span><br><br><span class="token comment"># Just exec ijq directly if we're not in a TMUX context</span><br><span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token parameter variable">-z</span> <span class="token variable">$TMUX</span> <span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">exec</span> ijq <span class="token string">"<span class="token variable">$@</span>"</span><br><br><span class="token comment"># This is a temporary file to capture the jq expression in</span><br><span class="token builtin class-name">declare</span> tempfile<br><span class="token assign-left variable">tempfile</span><span class="token operator">=</span><span class="token string">"<span class="token variable"><span class="token variable">$(</span>mktemp<span class="token variable">)</span></span>"</span><br><br><span class="token comment"># When ijq ends, the output of the expression is emitted to STDOUT,</span><br><span class="token comment"># and the expression itself is output to STDERR.</span><br><br><span class="token comment"># Run ijq and capture STDERR and the actual RC</span><br><span class="token builtin class-name">declare</span> ijqrc<br>ijq <span class="token string">"<span class="token variable">$@</span>"</span> <span class="token operator"><span class="token file-descriptor important">2</span>></span><span class="token string">"<span class="token variable">$tempfile</span>"</span><br><span class="token assign-left variable">ijqrc</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$?</span>"</span><br><br><span class="token comment"># Emit contents of temporary file to STDERR as ijq would</span><br><span class="token function">cat</span> <span class="token string">"<span class="token variable">$tempfile</span>"</span> <span class="token operator">></span><span class="token file-descriptor important">&amp;2</span><br><br><span class="token comment"># If things were OK, set the TMUX paste buffer.</span><br><span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$ijqrc</span>"</span> <span class="token parameter variable">-eq</span> <span class="token number">0</span> <span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> tmux set-buffer <span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">cat</span> <span class="token string">"<span class="token variable">$tempfile</span>"</span><span class="token variable">)</span></span>"</span><br><br><span class="token comment"># Exit with whatever RC ijq ended with</span><br><span class="token builtin class-name">exit</span> <span class="token string">"<span class="token variable">$ijqrc</span>"</span></code></pre>
<p>I've tried to explain the main parts in the comments, but here are a few extra notes.</p>
<p>When tmux is running, the environment variable <code>TMUX</code> is set with some internal information, and it's not set when tmux is not running. So I'm using that to check whether the script is in fact running in a tmux context, and if not, I use Bash's <code>exec</code> builtin to replace the current process (the script) with the execution of the normal ijq instead (there's no point keeping the context of the script around, hence <code>exec</code>).</p>
<p>The separate lines <code>declare tempfile</code> and <code>tempfile=&quot;$(mktemp)&quot;</code> are a result of the wonderful <a href="https://github.com/koalaman/shellcheck">shellcheck</a> which keeps me straight on Bash style, accuracy and nuances (see the post <a href="/blog/posts/2020/10/05/improving-my-shell-scripting/">Improving my shell scripting</a> for more on this). If you're interested in the specific trap here, see <a href="https://www.shellcheck.net/wiki/SC2155">SC2155 Declare and assign separately to avoid masking return values</a>.</p>
<p>On executing ijq, I capture both the STDERR output into a file, and the return code into a variable. A return code of zero means success, anything else is failure. I'm only capturing the return code because I want this script to emit it when finishing, as if it were ijq itself (in case I have something downstream that examines that).</p>
<p>To stay true to ijq's behaviour at this point, I also emit to STDERR (<code>&gt;&amp;2</code>) whatever was captured there from the actual ijq invocation.</p>
<p>Most importantly, if the jq expression in my ijq session was OK (return code 0), then whatever was in the temporary file will be the expression, so that's when I use tmux's set-buffer command to put it into the buffer (in fact, there are multiple buffers, and lots you can do with them in tmux, check the <a href="https://man7.org/linux/man-pages/man1/tmux.1.html">man page</a> for all the details). I can then just use the standard tmux key binding <code>&lt;prefix&gt;[</code> to emit the contents wherever I am (which will be back on the command line).</p>
<h2>Usage</h2>
<p>Now I have this script, I can use ijq as normal (calling it as zijq, which I do often, and <a href="https://github.com/qmacro/dotfiles/commit/2a81134cdaf3f86a48826e7ba7483073c63a6db3">indirectly, via lf</a>) and when I'm happy with the jq expression I've come up with, I have it in my buffer, as if I'd captured it from, say, copy-mode, and I can emit it wherever I want, such as on the command line, by hitting <code>&lt;prefix&gt;[</code>.</p>
<p>You can see it in action here, as I exit to the command line, and paste in the jq expression into the <code>jq -r '...'</code> invocation.</p>
<p><img src="/images/2023/04/zijq.gif" alt="animated gif of zijq and paste buffer in action"></p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>More on the comma as generator, and streaming with select in jq</title>
      <link href="https://qmacro.org/blog/posts/2023/04/25/more-on-the-comma-as-generator-and-streaming-with-select-in-jq/"/>
      <updated>2023-04-25T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2023/04/25/more-on-the-comma-as-generator-and-streaming-with-select-in-jq/</id>
      <content type="html">
        <![CDATA[
      <p>In the context of writing a short jq script to turn a JSON representation of an OData entity set into a set of CSV records, I came across something in jq that reminded me of something I'd discovered recently, and made me think a bit more about it.</p>
<p>In the source data, each entity was represented by an object, but I only wanted to include properties whose value types were either strings, numbers or booleans. I ended up taking the simplest route to check, in an expression supplied to a call to <code>select</code>, using <a href="https://stedolan.github.io/jq/manual/#type">type</a> to check whether the type of a value was one of these.</p>
<p>What I found was another instance of the <a href="/blog/posts/2023/04/02/learning-from-community-solutions-on-exercism-part-2/#generators-and-streams-of-values">comma as generator</a> that I wrote about a couple of weeks ago in <a href="/blog/posts/2023/04/02/learning-from-community-solutions-on-exercism-part-2/">Learning from community solutions on Exercism - part 2</a>.</p>
<p>Moving away from the original source input, let's consider the simplest case where I want to pick out only numbers from a stream of values:</p>
<pre class="language-jq"><code class="language-jq"><span class="token number">42</span><span class="token punctuation">,</span> <span class="token string">"hello"</span><span class="token punctuation">,</span> <span class="token boolean">true</span> <span class="token operator pipe">|</span> <span class="token c-style-function function">select</span><span class="token punctuation">(</span>type <span class="token operator">==</span> <span class="token string">"number"</span><span class="token punctuation">)</span></code></pre>
<p>This produces:</p>
<pre class="language-json"><code class="language-json"><span class="token number">42</span></code></pre>
<p>So far so good. But what about picking out both numbers and strings? The simplest looking and perhaps idiomatic approach looks like this:</p>
<pre class="language-jq"><code class="language-jq"><span class="token number">42</span><span class="token punctuation">,</span> <span class="token string">"hello"</span><span class="token punctuation">,</span> <span class="token boolean">true</span> <span class="token operator pipe">|</span> <span class="token c-style-function function">select</span><span class="token punctuation">(</span>type <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token string">"number"</span><span class="token punctuation">,</span> <span class="token string">"string"</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>
<p>As one would expect, or at least hope, this produces:</p>
<pre class="language-json"><code class="language-json"><span class="token number">42</span><br><span class="token string">"hello"</span></code></pre>
<p>But what exactly is going on with <code>type == (&quot;number&quot;, &quot;string&quot;)</code>? Visually it's not too far from representing what we want. And in fact it's the same pattern as we saw in <code>&quot;car&quot; | . == (&quot;car&quot;, &quot;truck&quot;)</code> in <a href="/blog/posts/2023/04/02/learning-from-community-solutions-on-exercism-part-2/#generators-and-streams-of-values">that previous post</a>. Moreover, how does this actually work with <code>select</code>?</p>
<p>I'd noticed that <code>select</code> is <a href="https://github.com/stedolan/jq/blob/a9f97e9e61a910a374a5d768244e8ad63f407d3e/src/builtin.jq#L4">defined as a builtin in jq itself</a>:</p>
<pre class="language-jq"><code class="language-jq"><span class="token keyword">def</span> <span class="token function">select</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">if</span> f <span class="token keyword">then</span> <span class="token dot important">.</span> <span class="token keyword">else</span> empty <span class="token keyword">end</span><span class="token punctuation">;</span></code></pre>
<p>The jq manual says:</p>
<blockquote>
<p>The function <code>select(foo)</code> produces its input unchanged if <code>foo</code> returns true for that input, and produces no output otherwise.</p>
</blockquote>
<p>Before we try to use that, let's remove the <code>select</code> from the expression for a moment to see what we get:</p>
<pre class="language-jq"><code class="language-jq"><span class="token number">42</span><span class="token punctuation">,</span> <span class="token string">"hello"</span><span class="token punctuation">,</span> <span class="token boolean">true</span> <span class="token operator pipe">|</span> type <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token string">"number"</span><span class="token punctuation">,</span> <span class="token string">"string"</span><span class="token punctuation">)</span></code></pre>
<p>What we get is something that looks a little odd, at least at first:</p>
<pre class="language-json"><code class="language-json"><span class="token boolean">true</span><br><span class="token boolean">false</span><br><span class="token boolean">false</span><br><span class="token boolean">true</span><br><span class="token boolean">false</span><br><span class="token boolean">false</span></code></pre>
<p>How do we visually parse this? Well, it's two &quot;pairs&quot; of booleans, one pair for each of the input values <code>42</code>, <code>&quot;hello&quot;</code> and <code>true</code>, where each pair represents the result of comparing the type of the input value twice, with <code>&quot;number&quot;</code> and with <code>&quot;string&quot;</code>, in order. Splitting these pairs up with whitespace and adding some explanation, we get:</p>
<pre class="language-text"><code class="language-text">true     :-- is number \   42<br>false    :-- is string /<br><br>false    :-- is number \ "hello"<br>true     :-- is string /<br><br>false    :-- is number \  true<br>false    :-- is string /</code></pre>
<p>Then, reminding ourselves that the definition of <code>select</code> is:</p>
<pre class="language-jq"><code class="language-jq"><span class="token keyword">def</span> <span class="token function">select</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">if</span> f <span class="token keyword">then</span> <span class="token dot important">.</span> <span class="token keyword">else</span> empty <span class="token keyword">end</span><span class="token punctuation">;</span></code></pre>
<p>then the values that stream through to <code>select</code> are either emitted (<code>.</code>) if the condition evaluates to <code>true</code>, otherwise nothing is emitted (<code>empty</code>) if the condition evaluates to <code>false</code>.</p>
<p>This results in the following behaviour:</p>
<pre class="language-text"><code class="language-text">true     :-- is number \   42    / emitted       --:   42<br>false    :-- is string /         \ not emitted<br><br>false    :-- is number \ "hello" / not emitted<br>true     :-- is string /         \ emitted       --: "hello"<br><br>false    :-- is number \  true   / not emitted<br>false    :-- is string /         \ not emitted</code></pre>
<p>and thus:</p>
<pre class="language-json"><code class="language-json"><span class="token number">42</span><br><span class="token string">"hello"</span></code></pre>
<p>The fascinating thing is that if we were to have a duplicate entry (<code>&quot;number&quot;</code>) in the parentheses on the right hand side, like this:</p>
<pre class="language-jq"><code class="language-jq"><span class="token number">42</span><span class="token punctuation">,</span> <span class="token string">"hello"</span><span class="token punctuation">,</span> <span class="token boolean">true</span> <span class="token operator pipe">|</span> <span class="token c-style-function function">select</span><span class="token punctuation">(</span>type <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token string">"number"</span><span class="token punctuation">,</span> <span class="token string">"string"</span><span class="token punctuation">,</span> <span class="token string">"number"</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>
<p>then our result would be different, and probably not what we were expecting:</p>
<pre class="language-json"><code class="language-json"><span class="token number">42</span><br><span class="token number">42</span><br><span class="token string">"hello"</span></code></pre>
<p>But knowing what's going on allows us to understand why. There are now three values each being tested not twice but three times:</p>
<pre class="language-text"><code class="language-text">true     :-- is number \         / emitted       --:   42<br>false    :-- is string |   42    | not emitted<br>true     :-- is number /         \ emitted       --:   42<br><br>false    :-- is number \         / not emitted<br>true     :-- is string | "hello" | emitted       --: "hello"<br>false    :-- is number /         \ not emitted<br><br>false    :-- is number \         / not emitted<br>false    :-- is string |  true   | not emitted<br>false    :-- is number /         \ not emitted</code></pre>
<p>While the superficial operation of this jq expression is sort of obvious, why it works is less so. At least to me. And in case it wasn't obvious to you either, I hope this has helped!</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Double SAP BTP goodness in Isernhagen</title>
      <link href="https://qmacro.org/blog/posts/2023/04/16/double-sap-btp-goodness-in-isernhagen/"/>
      <updated>2023-04-16T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2023/04/16/double-sap-btp-goodness-in-isernhagen/</id>
      <content type="html">
        <![CDATA[
      <p>I'm on my way home from a great double event that took place this week at <a href="https://www.inwerken.de/">Inwerken AG</a> in Isernhagen, just outside of Hannover. The overarching theme was the SAP Business Technology Platform.</p>
<p>On Thu 13 Apr we had an all-day SAP CodeJam <a href="https://groups.community.sap.com/t5/sap-codejam/hands-on-with-the-btp-cli-and-apis-isernhagen-de/ev-p/224169">Hands-on with the btp CLI and APIs</a>, and on Fri 14 Apr, at the same location, there was the first ever public conference all about SAP BTP: <a href="https://www.btpcon.org/">BTPcon 2023</a>. It made a lot of sense to run the two events next to each other; we got a lot of crossover conversation and attendance of both events from many folks.</p>
<h2>Hands-on with the btp CLI and APIs (CodeJam)</h2>
<p>Having arrived in Hannover on Wednesday evening, I made my way on the tram (A3 to Altwarmbuechen) to Isernhagen and Inwerken's offices. Inwerken were the kind hosts (spearheaded by SAP Community member Sascha Seegbarth) and provided us with a warm welcome:</p>
<p><img src="/images/2023/04/codejam-welcome-sign.jpg" alt="A sign welcoming us to the CodeJam location"></p>
<p>They also had set up a great space to network and get down to business working through the CodeJam content, and this soon filled up with CodeJam attendees eager to get started:</p>
<p><img src="/images/2023/04/codejam-room-and-attendees.jpg" alt="CodeJam attendees in the main room"></p>
<p>One of the folks that came along, Matthias, was sporting his stickers (made by another SAP Community member, the great Ronnie Sletta) from our <a href="https://www.youtube.com/playlist?list=PL6RpkC85SLQABOpzhd7WI-hMpy99PxUo0">Hands-on SAP Dev</a> live stream show. Go Matthias!</p>
<p><img src="/images/2023/04/matthias-and-stickers.jpg" alt="Matthias and the stickers on his laptop"></p>
<p>I was accompanied by fellow Developer Advocate Nico Schoenteich who joined up with me to run the CodeJam and help folks out, which was a welcome additional pair of safe hands, not to mention a great chance to work alongside one of my team mates. Thanks Nico!</p>
<p>The CodeJam proceeded and everyone successfully worked through all of the exercises. Again, one of the highlights, at least for me, were the discussions we had at the end of each exercise, before starting the next. There were some great questions and even more valuable opinions and thoughts shared all around. If you're interested in learning more about this particular CodeJam, head over to the <a href="https://github.com/SAP-samples/cloud-btp-cli-api-codejam/blob/main/README.md">main README</a> where there's a general overview and also a list of the exercises.</p>
<h2>BTPcon 2023</h2>
<p>On the following day there was <a href="https://www.btpcon.org">BTPcon</a>. Organised by Sascha and some great folks behind the scenes, this was a superb event. There were two types of sessions: hands-on sessions (150 minutes long) and talks (45 minutes long) and there was so much on offer that there were two tracks throughout the day:</p>
<p><img src="/images/2023/04/btpcon-sessions.jpg" alt="BTPcon sessions"></p>
<p>You can get a feel for the depth and quality of content by taking a look at the <a href="https://www.btpcon.org/">programme on the BTPcon website</a>. I enjoyed all of the sessions I attended, and the atmosphere was great. It's how conferences should be - a mixture of great technical content, interesting Q&amp;A, and spontaneous corridor conversations where experiences and ideas were exchanged.</p>
<p>I was very grateful to get a speaking slot, for which I thank Sascha and the BTPcon organisers. I spoke about the <a href="http://www.catb.org/jargon/html/S/Swiss-Army-chainsaw.html">Swiss Army Chainsaw</a> of the JSON world, <a href="https://stedolan.github.io/jq/">jq</a>, the &quot;lightweight and flexible command-line JSON processor&quot; which just happens to be a very capable, Turing complete functional language.</p>
<p>In today's world of the cloud, which everyone knows is just Linux boxes glued together with JSON and shell scripts, having the power to handle JSON like a boss is super important. Even if you're not fully in the cloud, JSON abounds too - in representations of resources pulled and pushed with APIs, events and more.</p>
<p><img src="/images/2023/04/dj-jq-talk.jpg" alt="giving my talk at BTPcon">
<em>Image courtesy of Enno Wulff</em></p>
<p>My talk consisted of me waving my arms about a lot, rambling, and working through example JSON scenarios and slicing through the JSON precisely with <code>jq</code>.</p>
<p>I wrote the talk in the form of a document which more or less reflects what I said, and along with that document I've made the samples JSON files available, plus a Docker container description that you can use to build a container image which containing those files, with <code>jq</code> and <code>ijq</code> with which you can use to try out all the examples and follow along at home. Head over to the <a href="https://github.com/qmacro/level-up-your-json-fu-with-jq">qmacro/level-up-your-json-fu-with-jq</a> repo for everything I talked about and showed.</p>
<p>My talk also consisted of me wearing flip-flops which seemed to amuse some folks :-) I'd left my outdoor shoes (and socks) outside while the conference proceeded, but during my talk it started to rain heavily, soaking everything! Luckily, SAP Community member Enno (who was also one of BTPcon's co-organisers) was giving out SAP Inside Track Hannover swag, which included socks, which I gratefully accepted!</p>
<p><img src="/images/2023/04/dj-socks.jpg" alt="putting on dry socks">
<em>Image courtesy of Enno Wulff</em></p>
<h2>Wrapping up</h2>
<p>It was a great two days, thanks not in a small part to Sascha and his colleagues at Inwerken, and of course to the CodeJam attendees and the conference attendees &amp; speakers.</p>
<p>I hope that we can see a repeat of BTPcon next year!</p>
<p>And if you want to request a CodeJam, head over to Tom Jung's post <a href="https://groups.community.sap.com/t5/sap-codejam-blog-posts/so-you-want-to-host-a-codejam-everything-you-need-to-know/ba-p/221415">So, You Want to Host a CodeJam! Everything you need to know</a>.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Recognising patterns and embracing the stream</title>
      <link href="https://qmacro.org/blog/posts/2023/04/09/recognising-patterns-and-embracing-the-stream/"/>
      <updated>2023-04-09T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2023/04/09/recognising-patterns-and-embracing-the-stream/</id>
      <content type="html">
        <![CDATA[
      <p>I've been listening to discussions on <a href="https://bird.makeup/@code_report">Conor Hoekstra</a>'s <a href="https://www.arraycast.com/episodes">Array Cast</a> podcast and <a href="https://t.co/uijuAszeFw">ADSP: The Podcast</a> and watching some of the content on <a href="https://www.youtube.com/@code_report">his YouTube channel</a>, all of which I can highly recommend. While I don't understand everything that's being discussed, I do still enjoy and benefit from the content. One of the many recurring themes seems to be recognising patterns, being aware of what is being expressed, and thinking about whether there's an alternative way to do so, for simplicity, clarity, performance or other reasons.</p>
<p>I was happy to be able to recognise a pattern in a tiny submission I made this evening to a repo of <a href="https://github.com/atejada/led_numbers#led_numbers">different language based implementations of a simple LED number display</a> from <a href="https://twitter.com/Blag">Blag</a>, an old friend of mine from the SAP world.</p>
<h2>The initial contribution</h2>
<p>I wanted to contribute a jq version of the LED number display program for the repo, as it didn't have one. The first commit in my pull request contained a working version, which was this:</p>
<pre class="language-jq"><code class="language-jq"><span class="token keyword">def</span> <span class="token function">segments</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><br>  <span class="token punctuation">[</span><span class="token string">" _ "</span><span class="token punctuation">,</span> <span class="token string">"| |"</span><span class="token punctuation">,</span> <span class="token string">"|_|"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><br>  <span class="token punctuation">[</span><span class="token string">"   "</span><span class="token punctuation">,</span> <span class="token string">"  |"</span><span class="token punctuation">,</span> <span class="token string">"  |"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><br>  <span class="token punctuation">[</span><span class="token string">" _ "</span><span class="token punctuation">,</span> <span class="token string">" _|"</span><span class="token punctuation">,</span> <span class="token string">"|_ "</span><span class="token punctuation">]</span><span class="token punctuation">,</span><br>  <span class="token punctuation">[</span><span class="token string">" _ "</span><span class="token punctuation">,</span> <span class="token string">" _|"</span><span class="token punctuation">,</span> <span class="token string">" _|"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><br>  <span class="token punctuation">[</span><span class="token string">"   "</span><span class="token punctuation">,</span> <span class="token string">"|_|"</span><span class="token punctuation">,</span> <span class="token string">"  |"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><br>  <span class="token punctuation">[</span><span class="token string">" _ "</span><span class="token punctuation">,</span> <span class="token string">"|_ "</span><span class="token punctuation">,</span> <span class="token string">" _|"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><br>  <span class="token punctuation">[</span><span class="token string">"   "</span><span class="token punctuation">,</span> <span class="token string">"|_ "</span><span class="token punctuation">,</span> <span class="token string">"|_|"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><br>  <span class="token punctuation">[</span><span class="token string">" _ "</span><span class="token punctuation">,</span> <span class="token string">"  |"</span><span class="token punctuation">,</span> <span class="token string">"  |"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><br>  <span class="token punctuation">[</span><span class="token string">" _ "</span><span class="token punctuation">,</span> <span class="token string">"|_|"</span><span class="token punctuation">,</span> <span class="token string">"|_|"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><br>  <span class="token punctuation">[</span><span class="token string">" _ "</span><span class="token punctuation">,</span> <span class="token string">"|_|"</span><span class="token punctuation">,</span> <span class="token string">"  |"</span><span class="token punctuation">]</span><br><span class="token punctuation">]</span><span class="token punctuation">;</span><br><br><span class="token keyword">def</span> <span class="token function">digits</span><span class="token punctuation">:</span> tostring <span class="token operator pipe">|</span> <span class="token c-style-function function">split</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator pipe">|</span> tonumber<span class="token punctuation">;</span><br><br><span class="token punctuation">[</span>segments<span class="token punctuation">[</span>digits<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator pipe">|</span> transpose <span class="token operator pipe">|</span> <span class="token c-style-function function">map</span><span class="token punctuation">(</span><span class="token c-style-function function">join</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">]</span></code></pre>
<p>This was to be invoked like this:</p>
<pre class="language-bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token number">42</span> <span class="token operator">|</span> jq <span class="token parameter variable">-r</span> <span class="token parameter variable">-f</span> led_numbers.jq</code></pre>
<p>which would produce:</p>
<pre class="language-text"><code class="language-text">    _<br>|_| _|<br>  ||_</code></pre>
<h2>An explanation</h2>
<p>By way of explanation, assuming we have the two function definitions (<code>segments</code> and <code>digits</code>) already, then:</p>
<pre class="language-jq"><code class="language-jq">segments<span class="token punctuation">[</span>digits<span class="token punctuation">]</span></code></pre>
<p>would produce:</p>
<pre class="language-json"><code class="language-json"><span class="token punctuation">[</span><br>  <span class="token string">"   "</span><span class="token punctuation">,</span><br>  <span class="token string">"|_|"</span><span class="token punctuation">,</span><br>  <span class="token string">"  |"</span><br><span class="token punctuation">]</span><br><span class="token punctuation">[</span><br>  <span class="token string">" _ "</span><span class="token punctuation">,</span><br>  <span class="token string">" _|"</span><span class="token punctuation">,</span><br>  <span class="token string">"|_ "</span><br><span class="token punctuation">]</span></code></pre>
<p>One way of getting the &quot;horizontal slices&quot; of these LED numbers joined up onto the appropriate lines of output is to treat it as a matrix (in Conor &amp; co's language I might use the term &quot;rank 2&quot;) and transpose it.</p>
<p>So I wrapped this stream of arrays in an outer array with the <a href="https://stedolan.github.io/jq/manual/#Arrayconstruction:%5B%5D">array construction</a> syntax <code>[]</code>:</p>
<pre class="language-jq"><code class="language-jq"><span class="token punctuation">[</span>segments<span class="token punctuation">[</span>digits<span class="token punctuation">]</span><span class="token punctuation">]</span></code></pre>
<p>which gave me:</p>
<pre class="language-json"><code class="language-json"><span class="token punctuation">[</span><br>  <span class="token punctuation">[</span><br>    <span class="token string">"   "</span><span class="token punctuation">,</span><br>    <span class="token string">"|_|"</span><span class="token punctuation">,</span><br>    <span class="token string">"  |"</span><br>  <span class="token punctuation">]</span><br>  <span class="token punctuation">[</span><br>    <span class="token string">" _ "</span><span class="token punctuation">,</span><br>    <span class="token string">" _|"</span><span class="token punctuation">,</span><br>    <span class="token string">"|_ "</span><br>  <span class="token punctuation">]</span><br><span class="token punctuation">]</span></code></pre>
<p>which I could then transpose, which I did like this:</p>
<pre class="language-jq"><code class="language-jq"><span class="token punctuation">[</span>segments<span class="token punctuation">[</span>digits<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator pipe">|</span> transpose</code></pre>
<p>resulting in:</p>
<pre class="language-json"><code class="language-json"><span class="token punctuation">[</span><br>  <span class="token punctuation">[</span><br>    <span class="token string">"   "</span><span class="token punctuation">,</span><br>    <span class="token string">" _ "</span><br>  <span class="token punctuation">]</span><span class="token punctuation">,</span><br>  <span class="token punctuation">[</span><br>    <span class="token string">"|_|"</span><span class="token punctuation">,</span><br>    <span class="token string">" _|"</span><br>  <span class="token punctuation">]</span><span class="token punctuation">,</span><br>  <span class="token punctuation">[</span><br>    <span class="token string">"  |"</span><span class="token punctuation">,</span><br>    <span class="token string">"|_ "</span><br>  <span class="token punctuation">]</span><br><span class="token punctuation">]</span></code></pre>
<p>These subarrays were now ready for joining together as longer strings:</p>
<pre class="language-jq"><code class="language-jq"><span class="token punctuation">[</span>segments<span class="token punctuation">[</span>digits<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator pipe">|</span> transpose <span class="token operator pipe">|</span> <span class="token c-style-function function">map</span><span class="token punctuation">(</span><span class="token c-style-function function">join</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>
<p>with the following result:</p>
<pre class="language-json"><code class="language-json"><span class="token punctuation">[</span><br>  <span class="token string">"    _ "</span><span class="token punctuation">,</span><br>  <span class="token string">"|_| _|"</span><span class="token punctuation">,</span><br>  <span class="token string">"  ||_ "</span><br><span class="token punctuation">]</span></code></pre>
<p>But I just wanted the plain strings, rather than have then enclosed in an array, so I used the <a href="https://stedolan.github.io/jq/manual/#Array/ObjectValueIterator:.%5B%5D">array iterator</a> to do that:</p>
<pre class="language-json"><code class="language-json"><span class="token punctuation">[</span>segments<span class="token punctuation">[</span>digits<span class="token punctuation">]</span><span class="token punctuation">]</span> | transpose | map(join(<span class="token string">""</span>))<span class="token punctuation">[</span><span class="token punctuation">]</span></code></pre>
<p>which gave me what I was looking for (remember that the <code>-r</code> raw output is still being used), so a stream of strings is output but without the enclosing double quotes):</p>
<pre class="language-text"><code class="language-text">    _<br>|_| _|<br>  ||_</code></pre>
<p>Great!</p>
<p>This was what I send in <a href="https://github.com/atejada/led_numbers/pull/1/commits/e6e3e5c3196aa436f865446a1c99ba4b87380eba">the first commit</a> in the pull request.</p>
<h2>Recognising the pattern</h2>
<p>But the solution looked a little noisy, and after staring at it for a few seconds I realised that it was the last part that was bothering me:</p>
<pre class="language-jq"><code class="language-jq"><span class="token c-style-function function">map</span><span class="token punctuation">(</span><span class="token c-style-function function">join</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">]</span></code></pre>
<p>The pattern is: <code>map(...)[]</code>. If I didn't want to keep the array shape, then why bother with the <code>map</code> in the first place? It appeared to me that I could replace this with just the expression that I'd put inside the parentheses, in this case just the <code>join(&quot;&quot;)</code>.</p>
<h2>An improvement</h2>
<p>The only thing I had to do then, to allow the use of this pattern switch, was to embrace jq's natural streaming nature, and basically start streaming earlier in the pipeline, by using the array iterator directly on the output from <code>transpose</code>, like this:</p>
<pre class="language-jq"><code class="language-jq"><span class="token punctuation">[</span>segments<span class="token punctuation">[</span>digits<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator pipe">|</span> transpose<span class="token punctuation">[</span><span class="token punctuation">]</span></code></pre>
<p>This returns something similar to what we saw <code>transpose</code> return earlier, but instead of a single value (an array of arrays of strings), it just returns a stream of the arrays of strings:</p>
<pre class="language-json"><code class="language-json"><span class="token punctuation">[</span><br>  <span class="token string">"   "</span><span class="token punctuation">,</span><br>  <span class="token string">" _ "</span><br><span class="token punctuation">]</span><span class="token punctuation">,</span><br><span class="token punctuation">[</span><br>  <span class="token string">"|_|"</span><span class="token punctuation">,</span><br>  <span class="token string">" _|"</span><br><span class="token punctuation">]</span><span class="token punctuation">,</span><br><span class="token punctuation">[</span><br>  <span class="token string">"  |"</span><span class="token punctuation">,</span><br>  <span class="token string">"|_ "</span><br><span class="token punctuation">]</span></code></pre>
<p>Then, each of these three array values are passed downstream, where I then only need the expression that was hitherto inside the <code>map(...)[]</code> construct, i.e.:</p>
<pre class="language-jq"><code class="language-jq"><span class="token punctuation">[</span>segments<span class="token punctuation">[</span>digits<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator pipe">|</span> transpose<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator pipe">|</span> <span class="token c-style-function function">join</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span></code></pre>
<p>This indeed gave me the same result which I wanted:</p>
<pre class="language-text"><code class="language-text">    _<br>|_| _|<br>  ||_</code></pre>
<p>This version feels more idiomatic, and I updated the line to look like this in <a href="https://github.com/atejada/led_numbers/pull/1/commits/5f243bc76b83566a0b1a70dfa5668d49ce496a67">the second commit</a> in the pull request.</p>
<p>Thanks to Conor and his cohorts for helping me remember to look for patterns!</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Learning from community solutions on Exercism - part 3</title>
      <link href="https://qmacro.org/blog/posts/2023/04/09/learning-from-community-solutions-on-exercism-part-3/"/>
      <updated>2023-04-09T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2023/04/09/learning-from-community-solutions-on-exercism-part-3/</id>
      <content type="html">
        <![CDATA[
      <p>In this post I continue to dwell on small details in the jq solutions to Exercism exercises. It follows on roughly from parts <a href="/blog/posts/2023/03/29/learning-from-community-solutions-on-exercism-part-1/">1</a> and <a href="/blog/posts/2023/04/02/learning-from-community-solutions-on-exercism-part-2/">2</a>.</p>
<p><a name="remote-control-car"></a></p>
<h2>Remote Control Car exercise</h2>
<p>I was just checking through my solution to this simple exercise, to compare it with the <a href="https://exercism.org/tracks/jq/exercises/remote-control-car/solutions">community solutions</a>. There was nothing earth shattering but a couple of things jumped out at me that I thought might be worthwhile mentioning. I solved tasks 1 and 2 in this exercise like this:</p>
<pre class="language-jq"><code class="language-jq"><span class="token keyword">def</span> <span class="token function">new_remote_control_car</span><span class="token punctuation">:</span><br>  <span class="token punctuation">{</span><br>    <span class="token property-literal property">battery_percentage</span><span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span><br>    <span class="token property-literal property">distance_driven_in_meters</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span><br>    <span class="token property-literal property">nickname</span><span class="token punctuation">:</span> <span class="token keyword">null</span><br>  <span class="token punctuation">}</span><br><span class="token punctuation">;</span><br><br><span class="token keyword">def</span> <span class="token function">new_remote_control_car</span><span class="token punctuation">(</span>nickname<span class="token punctuation">)</span><span class="token punctuation">:</span><br>  new_remote_control_car <span class="token operator pipe">|</span> <span class="token punctuation">.</span>nickname <span class="token operator">=</span> nickname<br><span class="token punctuation">;</span></code></pre>
<h3>Multiple function definitions</h3>
<p>First, this is a pair of definitions of a function named <code>new_remote_control_car</code>. One that takes no arguments, and one that takes a single argument. One would refer to them as <code>new_remote_control_car/0</code> and <code>new_remote_control_car/1</code> respectively.</p>
<p>The jq wiki has a lot of interesting things to say here, and in the <a href="https://github.com/stedolan/jq/wiki/jq-Language-Description#Lexical-Symbol-Bindings-Function-Definitions-and-Data-Symbol-Bindings">Lexical Symbol Bindings: Function Definitions and Data Symbol Bindings</a> section of the <a href="https://github.com/stedolan/jq/wiki/jq-Language-Description">jq Language Description page</a>, we see that:</p>
<blockquote>
<p>Note well that foo, foo(expr), foo(expr0; expr1), and so on, are all different functions. The number of arguments passed determines which foo is applied. We can and do refer to the first as foo/0, the next as foo/1, and so on.</p>
</blockquote>
<p><em>I can't help notice the &quot;Note well&quot;, which is a direct English equivalent of the Latin-based initialism &quot;N.B.&quot; i.e. &quot;Nota bene&quot;. I wonder if it was deliberate. Anyway, I digress.</em></p>
<p>This is why the above approach works so well, and feels so clean. The call to <code>new_remote_control_car</code> in the second function definition will invoke the version from the first function definition as there are no arguments being passed. I was initially thinking this feature might be a way to variadic function definition, but on reflection, this is something that feels different, as there's only a single function definition in the latter case, as can be demonstrated in this JavaScript example of a variadic function, that uses the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax">spread syntax</a>:</p>
<pre class="language-javascript"><code class="language-javascript"><span class="token function-variable function">myfun</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>xs</span><span class="token punctuation">)</span> <span class="token operator">=></span> xs<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> x</span><span class="token punctuation">)</span> <span class="token operator">=></span> a <span class="token operator">+</span> x<span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><br><span class="token function">myfun</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><br><span class="token comment">// => '123'</span></code></pre>
<p>I had a fascinating conversation with my son Joseph about this (who is infinitely more knowledgeable than me in the area of programming, language paradigms, semantics and implementations) and he suggested that this multiple function definition approach could even be compared to how recursion is defined in Haskell, as illustrated in this classic factorial function definition:</p>
<pre class="language-haskell"><code class="language-haskell"><span class="token hvariable">factorial</span> <span class="token operator">::</span> <span class="token constant">Integer</span> <span class="token operator">-></span> <span class="token constant">Integer</span><br><span class="token hvariable">factorial</span> <span class="token number">1</span> <span class="token operator">=</span> <span class="token number">1</span><br><span class="token hvariable">factorial</span> <span class="token hvariable">n</span> <span class="token operator">=</span> <span class="token hvariable">n</span> <span class="token operator">*</span> <span class="token hvariable">factorial</span> <span class="token punctuation">(</span><span class="token hvariable">n</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span></code></pre>
<p>In a way the <code>factorial</code> function is being defined multiple times (well, twice here), but one thinks about this in terms of a way to define a recursive based solution.</p>
<h3>Modifying or extending an object</h3>
<p>In the defintion of <code>new_remote_control_car/1</code> above, we have this:</p>
<pre class="language-jq"><code class="language-jq">new_remote_control_car <span class="token operator pipe">|</span> <span class="token punctuation">.</span>nickname <span class="token operator">=</span> nickname</code></pre>
<p>The output from a call to <code>new_remote_control_car</code> goes through the pipe where <code>.nickname = nickname</code> is then executed. This felt quite natural to me, defining (adding or replacing, or &quot;upserting&quot;, to use that database oriented word) a value for a property.</p>
<p>There was an alternative approach to adding or replacing a property in an object, used in solutions from users glennj and bewuethr:</p>
<pre class="language-jq"><code class="language-jq"><span class="token keyword">def</span> <span class="token function">new_remote_control_car</span><span class="token punctuation">(</span><span class="token variable">$nickname</span><span class="token punctuation">)</span><span class="token punctuation">:</span><br>  new_remote_control_car <span class="token operator">+</span> <span class="token punctuation">{</span><span class="token variable">$nickname</span><span class="token punctuation">}</span><br><span class="token punctuation">;</span></code></pre>
<p>This also works, because the <a href="https://stedolan.github.io/jq/manual/#Addition:+">addition operator</a> <code>+</code> can add objects:</p>
<blockquote>
<p>Objects are added by merging, that is, inserting all the key-value pairs from both objects into a single combined object. If both objects contain a value for the same key, the object on the right of the + wins.</p>
</blockquote>
<p>What makes this particular variation pleasing is the compact nature of the expression on the right of the <code>+</code>, i.e. simply <code>{$nickname}</code>.</p>
<p>This compactness comes about from:</p>
<ul>
<li>the use of a variable reference for the key expression, which of course resolves to the value of the variable</li>
<li>the ability to omit the double quotes for the key if the expression is &quot;identifier-like&quot;</li>
<li>the shortcut syntax that allows <code>{x: .x}</code> to be written as <code>{x}</code>:</li>
</ul>
<p>The &quot;full fat&quot; version of the expression would have been:</p>
<pre class="language-jq"><code class="language-jq">new_remote_control_car <span class="token operator">+</span> <span class="token punctuation">{</span> <span class="token property">"nickname"</span><span class="token punctuation">:</span> <span class="token variable">$nickname</span> <span class="token punctuation">}</span></code></pre>
<p>(There's also the difference between <code>def new_remote_control_car(nickname)</code> and <code>def new_remote_control_car($nickname)</code> but I'll leave that for another time.)</p>
<h2>Grade Stats exercise</h2>
<p>Another simple exercise, and this time I wanted to draw attention to the argument supplied as the &quot;initial value&quot; parameter of the <code>reduce</code> function.</p>
<p>With reduce functions in general, I suppose I've gone through some sort of &quot;journey of enlightenment&quot; with respect to what's supplied as this &quot;initial value&quot;:</p>
<ul>
<li>Stage 1: a literal scalar (for when you're doing something like adding a list of numbers)</li>
<li>Stage 2: a literal form of some sort of more complex value such as an array or object (for when you're doing something like implementing a map function)</li>
<li>Stage 3: something generated (for all sorts of things)</li>
</ul>
<p>Again, this is very obvious, but still worth calling out. Especially as I think that reduce is such a powerful and fundamental mechanism (if you're interested in reading more on reduce, see the <a href="#further-reading">Further reading</a> section below).</p>
<p>Anyway, many of the community solutions used jq's <a href="https://stedolan.github.io/jq/manual/#Reduce">reduce</a>, which looks like this (in pseudocode):</p>
<pre class="language-jq"><code class="language-jq"><span class="token keyword">reduce</span> stream<span class="token operator">-</span>of<span class="token operator">-</span>values <span class="token keyword">as</span> <span class="token variable">$x</span> <span class="token punctuation">(</span><br>  initial<span class="token operator">-</span>value<span class="token punctuation">;</span> <br>  generation of accumulated value using <span class="token dot important">.</span> <span class="token operator">and</span> <span class="token variable">$x</span><br><span class="token punctuation">)</span></code></pre>
<p>Nearly all of them had a literal object as the initial value, representing &quot;Stage 2&quot;, like this from user kruschk:</p>
<pre class="language-jq"><code class="language-jq"><span class="token keyword">def</span> <span class="token function">count_letter_grades</span><span class="token punctuation">:</span><br>    <span class="token keyword">reduce</span> <span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">as</span> <span class="token variable">$grade</span> <span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token property-literal property">A</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token property-literal property">B</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token property-literal property">C</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token property-literal property">D</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token property-literal property">F</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span><br>                          <span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token variable">$grade</span> <span class="token operator pipe">|</span> letter_grade<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">)</span><br><span class="token punctuation">;</span></code></pre>
<p>This is already great, because it elevates the lowly &quot;initial value&quot; parameter to something more important than &quot;just a simple starting value&quot;. The fact that it takes up quite a bit of space in the actual call (i.e. <code>{A: 0, B: 0, C: 0, D: 0, F: 0}</code>) draws one's attention to it.</p>
<p>Instead of writing this starting object out literally, I wanted to generate it, so opted for &quot;Stage 3&quot;. This is in no way &quot;better&quot; than the community solutions*, but in a similar way I think it helps to elevate the &quot;initial value&quot; parameter to something more important than it might be, merely by passing an expression. Here's what I used:</p>
<pre class="language-jq"><code class="language-jq"><span class="token keyword">def</span> <span class="token function">count_letter_grades</span><span class="token punctuation">:</span><br>  <span class="token keyword">reduce</span> <span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">as</span> <span class="token variable">$grade</span> <span class="token punctuation">(</span><br>    <span class="token string">"ABCDEF"</span><span class="token operator pipe">|</span><span class="token c-style-function function">split</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token operator pipe">|</span><span class="token c-style-function function">with_entries</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token property-literal property">key</span><span class="token punctuation">:</span><span class="token punctuation">.</span>value<span class="token punctuation">,</span><span class="token property-literal property">value</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br>    <span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token variable">$grade</span><span class="token operator pipe">|</span>letter_grade<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span><br>  <span class="token punctuation">)</span><br><span class="token punctuation">;</span></code></pre>
<p>*<em>in fact it's worse in at least one way, in that I missed the fact that there's no &quot;E&quot; grade in the entire exercise!</em></p>
<p>With the expression <code>&quot;ABCDEF&quot;|split(&quot;&quot;)|with_entries({key:.value,value:0})</code> I wanted to construct that literal object, and also use it as an opportunity to practise using <code>with_entries</code> which is one of a set of three lovely functions. If you're interested, I wrote a post on this: <a href="/blog/posts/2022/05/30/reshaping-data-values-using-jq's-with_entries/">Reshaping data values using jq's with_entries</a>.</p>
<p>I'll admit that this solution is perhaps not as clear as the literal object construction; nevertheless, I like it because it makes me think more about the importance of that first parameter to <code>reduce</code>.</p>
<p><a name="further-reading"></a></p>
<h2>Further reading</h2>
<p>If you are still unfamiliar with reduce as a concept, I'd heartily recommend taking some time to become familiar with it. Here are a few posts from me on the topic, and the &quot;F3C&quot; ones have links to corresponding &quot;Fun Fun Function&quot; videos on the topic, from the awesome <a href="https://twitter.com/mpjme">mpjme</a>:</p>
<ul>
<li><a href="/blog/posts/2016/10/02/f3c-part-3-reduce-basics/">F3C Part 3 - Reduce basics</a></li>
<li><a href="blog/posts/2016/10/02/f3c-part-4-reduce-advanced/">F3C Part 4 - Reduce advanced</a></li>
<li><a href="/blog/posts/2019/04/08/es6-reduce-and-pipe/">ES6, reduce and pipe</a></li>
<li><a href="/blog/posts/2022/03/25/understanding-jq's-reduce-function/">Understanding jq's reduce function</a></li>
</ul>
<p>Until next time, happy solving!</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Living on a narrowboat - the stove as the heart of the home</title>
      <link href="https://qmacro.org/blog/posts/2023/04/07/living-on-a-narrowboat-the-stove-as-the-heart-of-the-home/"/>
      <updated>2023-04-07T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2023/04/07/living-on-a-narrowboat-the-stove-as-the-heart-of-the-home/</id>
      <content type="html">
        <![CDATA[
      <p>Previous post in this series: <a href="/blog/posts/2023/01/16/living-on-a-narrowboat-embracing-constraints/">Living on a narrowboat - embracing constraints</a>.</p>
<hr>
<p>In <a href="/blog/posts/2023/01/16/living-on-a-narrowboat-embracing-constraints/">Living on a narrowboat - embracing constraints</a> I briefly mentioned the stove I'm getting. This post is about choosing a stove in general, and how I came to my decision and the factors I considered.</p>
<p>For keeping the cabin warm, some modern boats might rely mainly on a radiator circuit. Some even have underfloor heating. Some have an electric heater and fan combination that pushes warm air into the cabin, a little bit like in a car. And of course some (I would suggest the majority) have a standalone stove of some sort.</p>
<p>And if you're going to have a stove, the choice of stove is important, and also based on what can be seen as constraints. Cabin size, smokeless fuel restrictions, and more. There's the question of fuel too - you can get stoves that run on diesel, wood, or wood &amp; coal (&quot;multifuel&quot;).</p>
<h2>The stove on Queenie</h2>
<p>I spent some time on a narrowboat called Queenie that I rented from <a href="https://www.starnarrowboatholidays.co.uk/">Star Narrowboat Holidays</a> (you can see a picture of her moored up in <a href="/blog/posts/2023/01/02/i'm-moving-onto-a-narrowboat/">the first post in this series</a>) and Queenie had an electric heater and fan mechanism, plus a small multifuel stove. I didn't use the former as it was noisy and not particularly effective, so I relied solely on the stove. One of the trips was in February, when the temperatures in the UK are still fairly low (often around freezing) so it was a good test.</p>
<p>Queenie is a relatively small narrowboat, being only 50 feet in length, with a inside cabin length of probably 12 feet less than that. The stove on Queenie is the <a href="https://salamanderstoves.com/product/the-hobbit-stove/">Hobbit model from Salamander</a>. You can just see it in this photo from another post that I wrote about one of my stays on her (<a href="/blog/posts/2022/02/02/allowing-my-intangible-core-to-catch-up-with-the-rest-of-me.../">Allowing my intangible core to catch up with the rest of me...</a>):</p>
<p><img src="/images/2023/04/hobbit-on-queenie.png" alt="the Salamander Hobbit on Queenie"></p>
<p>The stove itself is quite small, somewhat dwarfed by the flue pipe rising from it. You can check the stove's dimensions in the Technical Data section of <a href="https://salamanderstoves.com/product/the-hobbit-stove/">the Hobbit's page</a>. The output is nominally 4.1kW.</p>
<p>I noted both advantages and disadvantages to this stove on Queenie, based on its small size and heat output:</p>
<ul>
<li>I burned less fuel, and it was relatively easy to regulate</li>
<li>it was not quite enough to comfortably heat the entire cabin</li>
</ul>
<p>The multifuel nature of the stove meant that I could burn wood or coal (of the smokeless variety of course) but longer term, the inner dimensions would make it more onerous than I would like to find or cut up wood to fit the small space.</p>
<p>So I ended up discounting the Hobbit early on in my research.</p>
<h2>The stoves I've had previously</h2>
<p>A slightly larger stove is the Squirrel, from Morsø. When I lived in East Sussex, I had the <a href="https://morsoe.com/en/product/indoor/multifuel/p1410_uk">1410 model</a>, and then the <a href="https://morsoe.com/en/product/indoor/multifuel/p1412_squirrel">1412 model</a> more recently in Manchester. This newer model is <a href="https://smokecontrol.defra.gov.uk/appliances.php?country=england">DEFRA approved</a> for use in smoke-controlled zones.</p>
<p>In fact, you can see it in quite a few of <a href="https://untappd.com/user/qmacro">my Untappd beer check-ins</a>, like in <a href="https://untappd.com/user/qmacro/checkin/1061733572">this one of the classic Tripel from Westmalle</a>:</p>
<p><img src="/images/2023/04/checkin.jpg" alt="the picture of the stove in the background to my beer checkin"></p>
<p>The output of the Squirrel is rated at 5kW, and in general it's larger than the Hobbit. Both these aspects would mitigate the issues mentioned earlier, and in fact this was the stove I was going to choose for the narrowboat, if I hadn't had a stroke of luck.</p>
<h2>Double or triple duty</h2>
<p>That luck came at the Crick Boat Show last year. First though, some background. As I mentioned in the post about <a href="/blog/posts/2023/01/16/living-on-a-narrowboat-embracing-constraints/">embracing constraints</a>, the stove would ideally serve not only as a general source of heating, but also provide a way to boil water for tea and coffee, a surface on which to put a casserole dish (or dutch oven) for slow cooking, and, as a bonus, have a separate oven for baking. These are often called &quot;range&quot; stoves.</p>
<p>In this context, before making the final decision to opt for the Squirrel (which had a reasonably sized top plate), I had a look around at multifuel range stoves, i.e. a stove with an oven built in. But my initial search was in vain. By that I mean there were plenty, but they were either <a href="https://www.directstoves.com/ekol-baked-apple-pie-ecodesign-wood-stove.html">too small</a>, <a href="https://salamanderstoves.com/product/the-little-range/">too large</a>, <a href="https://www.stovesareus.co.uk/la-nordica-gemma-forno-wood-burning-stove.html">too tall</a> or <a href="https://www.glowing-embers.co.uk/Stoves/ShopByBrand/LaNordicaWoodBurningStoves/LaNordicaIsottaForno11.5KwWoodBurningCooker">would emit too much heat for the cabin and / or looked a bit too rustic</a>.</p>
<p>I'd more or less shelved the idea of finding a range stove, but at <a href="https://www.crickboatshow.com/">Crick Boat Show</a> last year I saw a range stove in one of the boats I went on to view (just to get ideas of layout, design, and so on). It looked almost ideal!</p>
<p>Speaking to the boat sales person, I found out it was from <a href="https://chillipenguin.co.uk/">Chilli Penguin</a>. It had a modern design, was about the right size (neither too small nor too large) and had a 5kW output rating:</p>
<p><img src="/images/2023/04/penguin-at-crick.jpg" alt="The Chilli Penguin stove I saw at Crick Boat Show"></p>
<p>Beyond the design and specifications, I particularly liked the oven above the fire box, and the stainless steel plate on top.</p>
<h2>Chilli Penguin stoves and my selection</h2>
<p>It turned out that Chilli Penguin offered a good selection of stoves around the 5kW output mark, all of which were going to be a good size for the narrowboat. Not too large, but not too small either.</p>
<p>The selection offered various combinations of aspects, and I ended up choosing the <a href="https://chillipenguin.co.uk/chilli_products/fat-penguin-tall-order/">Fat Penguin (Tall Order)</a>, which has:</p>
<ul>
<li>a nominal output of around 5kW</li>
<li>a modern, compact design</li>
<li>a larger oven (this is the &quot;Tall Order&quot; bit in the name)</li>
<li>side convector panels (this is the &quot;Fat&quot; bit in the name) that will heat the cabin and move the air around effectively*</li>
<li>a slightly larger top plate (due to the extra width from the convector panels) for more space for moka pot, kettle and dutch oven placement</li>
</ul>
<p>*Though I still may get a <a href="https://www.ukstovefans.com/stove-fans/">stove fan</a></p>
<p>Here are the specs:</p>
<p><img src="/images/2023/04/FatTallTechInfo.jpg" alt="Technical specs"></p>
<h2>A brief note on diesel stoves</h2>
<p>It's worth mentioning diesel stoves before I finish this post. Until I started researching stoves for narrowboats, I'd never even come across one particular type, the diesel stove. Having a stove that uses diesel for fuel makes some sense, and is an attractive option for some people. It burns clean, and there's no ash or coke to clear out of the fire box. It's generally a lot cleaner all round.</p>
<p>And if your narrowboat is diesel powered anyway, you're going to be carrying diesel fuel already, for the engine and perhaps also for a diesel powered water heating system too (see the section <a href="/blog/posts/2023/01/16/living-on-a-narrowboat-embracing-constraints/#electricity-and-fuel-for-the-engine-and-for-the-stove">Electricity and fuel for the engine and for the stove</a> in the &quot;embracing constraints post&quot;). So a diesel stove would be a good logical choice.</p>
<p>But it's not all about logic. Certainly not for me. I like a real fire, I like the ability to forage for and gather fuel from fallen branches. And there's something mesmerising, not to mention cosy, in the flames of a real fire. So while stoves like the Refleks are a popular choice these days, I'm sticking with my multifuel experience.</p>
<p><img src="/images/2023/04/refleks-stove.png" alt="Refleks stove"></p>
<p>This picture from <a href="https://www.thefitoutpontoon.co.uk/heating/oil-fired-stoves/">The Fitout Pontoon's page on oil fired heating</a> shows a typical Refleks diesel stove. You can see it sports a small round hot plate on top, but that's about it for double duty.</p>
<h2>Conclusion</h2>
<p>So while I would have been happy with the Morsø Squirrel 1412, I'm even happier with the prospect of the Fat Penguin (Tall Order) stove. It's on order, and delivery is due some time in June. It's this one, although I'm getting it in grey, not red:</p>
<p><img src="/images/2023/01/fat-penguin-tall-order-stove.png" alt="The stove I'm getting"></p>
<p>I'm looking forward to seeing it installed and on board soon!</p>
<hr>
<p>Next post in this series: <a href="/blog/posts/2023/05/07/living-on-a-narrowboat-layout-details-of-the-stern/">Living on a narrowboat - layout details of the stern</a>.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Learning from community solutions on Exercism - part 2</title>
      <link href="https://qmacro.org/blog/posts/2023/04/02/learning-from-community-solutions-on-exercism-part-2/"/>
      <updated>2023-04-02T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2023/04/02/learning-from-community-solutions-on-exercism-part-2/</id>
      <content type="html">
        <![CDATA[
      <p>In response to the <a href="/blog/posts/2023/03/29/learning-from-community-solutions-on-exercism-part-1/">first part of this series</a>, in relation to the <a href="/blog/posts/2023/03/29/learning-from-community-solutions-on-exercism-part-1/#vehicle-purchase-exercise">rabbit hole in the Vehicle Purchase exercise</a>, Mattias Wadman <a href="https://fosstodon.org/@wader/110117608773689719">kindly shared some variants using generators</a>, which I'll reproduce here:</p>
<pre class="language-jq"><code class="language-jq"><span class="token keyword">def</span> <span class="token function">needs_license</span><span class="token punctuation">:</span> <br>  <span class="token c-style-function function">any</span><span class="token punctuation">(</span><span class="token dot important">.</span> <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token string">"car"</span><span class="token punctuation">,</span> <span class="token string">"truck"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token dot important">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<pre class="language-jq"><code class="language-jq"><span class="token keyword">def</span> <span class="token function">needs_license</span><span class="token punctuation">:</span> <br>  <span class="token keyword">if</span> <span class="token dot important">.</span> <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token string">"car"</span><span class="token punctuation">,</span> <span class="token string">"truck"</span><span class="token punctuation">)</span> <span class="token keyword">then</span> <span class="token boolean">true</span> <span class="token keyword">else</span> empty <span class="token keyword">end</span> <span class="token operator">//</span> <span class="token boolean">false</span><span class="token punctuation">;</span></code></pre>
<pre class="language-jq"><code class="language-jq"><span class="token keyword">def</span> <span class="token function">needs_license</span><span class="token punctuation">:</span> <br>  <span class="token punctuation">(</span><span class="token dot important">.</span> <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token string">"car"</span><span class="token punctuation">,</span> <span class="token string">"truck"</span><span class="token punctuation">)</span> <span class="token operator pipe">|</span> <span class="token c-style-function function">select</span><span class="token punctuation">(</span><span class="token dot important">.</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token boolean">false</span><span class="token punctuation">;</span></code></pre>
<p>Each variant, when fed the same input, like this:</p>
<pre class="language-jq"><code class="language-jq"><span class="token string">"car"</span><span class="token punctuation">,</span> <span class="token string">"truck"</span><span class="token punctuation">,</span> <span class="token string">"bike"</span> <span class="token operator pipe">|</span> needs_license</code></pre>
<p>produces the same output, i.e.:</p>
<pre class="language-json"><code class="language-json"><span class="token boolean">true</span><br><span class="token boolean">true</span><br><span class="token boolean">false</span></code></pre>
<p>(It's worth pointing out before continuing that none of these variants will fall foul of the gotcha I discovered with <code>contains</code> / <code>inside</code>, so I can move on from testing whether <code>true</code> will be returned for <code>&quot;car&quot;</code> when the possible vehicles listed includes <code>&quot;cart&quot;</code> and put that behind us.)</p>
<p>In this post, I'll take a brief look at <a href="#generators-and-streams-of-values">generators</a>, and then look at each of these solutions in turn, i.e.</p>
<ul>
<li><a href="#the-any-based-function">the &quot;any&quot; based function</a></li>
<li><a href="#the-if-then-else-end-based-function">the &quot;if ... then ... else ... end&quot; based function</a></li>
<li><a href="#the-select-based-function">the &quot;select&quot; based function</a></li>
</ul>
<p><a name="generators-and-streams-of-values"></a></p>
<h2>Generators and streams of values</h2>
<p>There's a section that's common to each of these functions, and it's this:</p>
<pre class="language-jq"><code class="language-jq"><span class="token dot important">.</span> <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token string">"car"</span><span class="token punctuation">,</span> <span class="token string">"truck"</span><span class="token punctuation">)</span></code></pre>
<p>This struck me right between the eyes. Given the context that the value <code>.</code> would be a vehicle string e.g. <code>&quot;car&quot;</code>, I can't help but admit I was wondering what the heck was going on here. How can a string be sensibly compared with what looks like a list of strings?</p>
<p>So I decided to dig in, and am glad I did.</p>
<p>It becomes quickly clear that <code>(&quot;car&quot;, &quot;truck&quot;)</code> isn't a list in the sense I was thinking about. First, the <a href="https://stedolan.github.io/jq/manual/#Parenthesis">parentheses</a> are just for grouping, not for any literal list construction. So let's omit them for a second. In fact, let's reduce the expression to something simpler, to see what I get:</p>
<pre class="language-jq"><code class="language-jq"><span class="token string">"car"</span> <span class="token operator pipe">|</span> <span class="token dot important">.</span> <span class="token operator">==</span> <span class="token string">"car"</span><br><span class="token comment"># => true</span></code></pre>
<p>So far so good. But what happens when I add the <code>&quot;truck&quot;</code> value?</p>
<pre class="language-jq"><code class="language-jq"><span class="token string">"car"</span> <span class="token operator pipe">|</span> <span class="token dot important">.</span> <span class="token operator">==</span> <span class="token string">"car"</span><span class="token punctuation">,</span> <span class="token string">"truck"</span></code></pre>
<p>This gives us:</p>
<pre class="language-json"><code class="language-json"><span class="token boolean">true</span><br><span class="token string">"truck"</span></code></pre>
<p>The output is not a single JSON value, there are two, one from either side of the comma. And looking at the <a href="https://stedolan.github.io/jq/manual/#Generatorsanditerators">Generators and iterators</a> section of the jq manual, I discover that:</p>
<blockquote>
<p>Even the comma operator is a generator.</p>
</blockquote>
<p>What is a generator? Something that produces zero, one or more values. I've used <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators">iterators and generators in JavaScript</a>, and also <a href="https://wiki.python.org/moin/Generators">in Python</a>, so the concept is at least familiar to me.</p>
<p>What's happening here is that the comma is acting as a generator, producing (in this case) a value resulting from the expression on its left (<code>&quot;car&quot; | . == &quot;car&quot;)</code>, and a value resulting from the expression on its right (<code>&quot;truck&quot;</code>). This is also why the output is as it is, and not, say, <code>[true, &quot;truck&quot;]</code>; what's produced is not an array, but a stream of two discrete (and independently valid) JSON values.</p>
<p>And the difference between this and the version with the parentheses is becoming clearer now. What happens when I add them?</p>
<pre class="language-jq"><code class="language-jq"><span class="token string">"car"</span> <span class="token operator pipe">|</span> <span class="token dot important">.</span> <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token string">"car"</span><span class="token punctuation">,</span> <span class="token string">"truck"</span><span class="token punctuation">)</span></code></pre>
<p>The grouping that the <code>(...)</code> brings doesn't affect the generator nature of the comma, it just causes the <code>. ==</code> part of the expression to be applied to the group of strings (<code>&quot;car&quot;</code> and <code>&quot;truck&quot;</code>), one by one. So this results in:</p>
<pre class="language-json"><code class="language-json"><span class="token boolean">true</span><br><span class="token boolean">false</span></code></pre>
<p>In other words, it's the equivalent of:</p>
<pre class="language-jq"><code class="language-jq"><span class="token string">"car"</span> <span class="token operator pipe">|</span> <span class="token dot important">.</span> <span class="token operator">==</span> <span class="token string">"car"</span><span class="token punctuation">,</span> <span class="token dot important">.</span> <span class="token operator">==</span> <span class="token string">"truck"</span></code></pre>
<h3>More on comma as generator</h3>
<p>I wanted to dwell a little more on this comma-as-generator. Here are a couple of very simple examples:</p>
<pre class="language-jq"><code class="language-jq"><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span></code></pre>
<p>This, unsurprisingly, produces:</p>
<pre class="language-json"><code class="language-json"><span class="token number">1</span><br><span class="token number">2</span><br><span class="token number">3</span><br><span class="token number">4</span><br><span class="token number">5</span></code></pre>
<p>But I know know what's actually happening, and the stream of scalar JSON values is more obvious.</p>
<p>(This subtlety reminds me of another subtlety in LISP, where list construction can be done via the <code>list</code> function: <code>(list 1 2 3 4 5)</code> which produces <code>(1 2 3 4 5)</code>, or more explicitly using the <code>cons</code> function: <code>(cons 1 (cons 2 (cons 3 (cons 4 (cons 5 nil)))))</code> which also produces <code>(1 2 3 4 5)</code>. We're not constructing lists here, but there's a vaguely similar feeling in how things are constructed. But anyway, I digress.)</p>
<p>How about using functions either side of commas, functions that produce streams of values?</p>
<pre class="language-jq"><code class="language-jq"><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator pipe">|</span><span class="token c-style-function function">map</span><span class="token punctuation">(</span><span class="token dot important">.</span><span class="token operator">*</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token c-style-function function">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span></code></pre>
<p>This produces a stream of five individual JSON scalar values:</p>
<pre class="language-json"><code class="language-json"><span class="token number">10</span><br><span class="token number">20</span><br><span class="token number">0</span><br><span class="token number">1</span><br><span class="token number">2</span></code></pre>
<p>Note that the important part of the expression to the left of the comma in this example is the <a href="https://stedolan.github.io/jq/manual/#Array/ObjectValueIterator:.%5B%5D">array iterator</a>, i.e. the <code>[]</code> part. If we were to omit that:</p>
<pre class="language-jq"><code class="language-jq"><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator pipe">|</span><span class="token c-style-function function">map</span><span class="token punctuation">(</span><span class="token dot important">.</span><span class="token operator">*</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token c-style-function function">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span></code></pre>
<p>we'd get this:</p>
<pre class="language-json"><code class="language-json"><span class="token punctuation">[</span><br>  <span class="token number">10</span><span class="token punctuation">,</span><br>  <span class="token number">20</span><br><span class="token punctuation">]</span><br><span class="token number">0</span><br><span class="token number">1</span><br><span class="token number">2</span></code></pre>
<p>This is a stream of four JSON values, the array being the first one.</p>
<p><a name="the-any-based-function"></a></p>
<h2>The &quot;any&quot; based function</h2>
<p>In part 1 of this series, in looking at <a href="/blog/posts/2023/03/29/learning-from-community-solutions-on-exercism-part-1/#some-alternatives">some alternatives</a> for the Vehicle Purchase exercise, I noted that the <code>any</code> function can be used with 0, 1 or 2 parameters.</p>
<p>In Matthias's first function example, we see the <code>any/2</code> in use:</p>
<pre class="language-jq"><code class="language-jq"><span class="token keyword">def</span> <span class="token function">needs_license</span><span class="token punctuation">:</span> <br>  <span class="token c-style-function function">any</span><span class="token punctuation">(</span><span class="token dot important">.</span> <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token string">"car"</span><span class="token punctuation">,</span> <span class="token string">"truck"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token dot important">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>The jq manual says <a href="https://stedolan.github.io/jq/manual/#any,any(condition),any(generator;condition)">the following</a> about this form of <code>any</code>:</p>
<blockquote>
<p>The <code>any(generator; condition)</code> form applies the given condition to all the outputs of the given generator.</p>
</blockquote>
<p>So the first argument passed to <code>any/2</code> is exactly the expression we've been looking at thus far, i.e. <code>. == (&quot;car&quot;, &quot;truck&quot;)</code>. And it's supplied to the generator parameter.</p>
<p>The second argument being passed is <code>.</code> which is supplied to the condition parameter.</p>
<p>So how is this function body to be interpreted? Trying out a simple call to <code>any/2</code> helps me understand it a little more; the expression returns <code>true</code> here because at least one of the values (<code>2</code>) emitted from the generator expression <code>1,2,3</code> is divisible by 2:</p>
<pre class="language-jq"><code class="language-jq"><span class="token c-style-function function">any</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token dot important">.</span> <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><br><span class="token comment"># => true</span></code></pre>
<p>Even more simply, I try this:</p>
<pre class="language-jq"><code class="language-jq"><span class="token c-style-function function">any</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token dot important">.</span> <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span><br><span class="token comment"># => true</span></code></pre>
<p>In fact, this can be simplified to:</p>
<pre class="language-jq"><code class="language-jq"><span class="token c-style-function function">any</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token dot important">.</span><span class="token punctuation">)</span><br><span class="token comment"># => true</span></code></pre>
<p>The values (<code>null</code>, <code>false</code> and <code>true</code>) in the generator expression are considered in the context of the condition expression <code>.</code> and this of course then evaluates to <code>true</code> due to the third value being truthy. I deliberately used the word &quot;truthy&quot; here as this also works:</p>
<pre class="language-jq"><code class="language-jq"><span class="token c-style-function function">any</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">;</span> <span class="token dot important">.</span><span class="token punctuation">)</span><br><span class="token comment"># => true</span></code></pre>
<p>In working slowly through this, I realise what looked odd to me about Matthias's first function solution, given the <code>any(generator; condition)</code> signature - the generator expression looks more like a condition expression:</p>
<pre class="language-jq"><code class="language-jq"><span class="token keyword">def</span> <span class="token function">needs_license</span><span class="token punctuation">:</span> <br>  <span class="token c-style-function function">any</span><span class="token punctuation">(</span><span class="token dot important">.</span> <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token string">"car"</span><span class="token punctuation">,</span> <span class="token string">"truck"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token dot important">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>But now having a better understanding of how <code>. == (&quot;car&quot;, &quot;truck&quot;)</code> works as a generator, things are now clear. Piping the value <code>&quot;truck&quot;</code> into this function, for example, gives us what we want:</p>
<pre class="language-jq"><code class="language-jq"><span class="token string">"truck"</span> <span class="token operator pipe">|</span> needs_license<br><span class="token comment"># => true</span></code></pre>
<p>And to make sure I see what's going on, I can insert a couple of <a href="https://stedolan.github.io/jq/manual/#debug">debug</a> filters in-line with the generator:</p>
<pre class="language-jq"><code class="language-jq"><span class="token keyword">def</span> <span class="token function">needs_license</span><span class="token punctuation">:</span> <br>  <span class="token c-style-function function">any</span><span class="token punctuation">(</span>debug <span class="token operator pipe">|</span> <span class="token dot important">.</span> <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token string">"car"</span><span class="token punctuation">,</span> <span class="token string">"truck"</span><span class="token punctuation">)</span> <span class="token operator pipe">|</span> debug<span class="token punctuation">;</span> <span class="token dot important">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br><span class="token string">"truck"</span> <span class="token operator pipe">|</span> needs_license</code></pre>
<p>Look at what that gives us (I've added some blank lines to better distinguish things):</p>
<pre class="language-json"><code class="language-json"><span class="token punctuation">[</span><span class="token string">"DEBUG:"</span><span class="token punctuation">,</span><span class="token string">"truck"</span><span class="token punctuation">]</span> From the 1st debug<span class="token punctuation">,</span> value going<br>                   into the generator.<br><br><span class="token punctuation">[</span><span class="token string">"DEBUG:"</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">]</span>   From the 2nd debug<span class="token punctuation">,</span> these two values<br><span class="token punctuation">[</span><span class="token string">"DEBUG:"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">]</span>    are emitted from the generator.<br><br><span class="token boolean">true</span>               the final result produced by the call</code></pre>
<p><a name="the-if-then-else-end-based-function"></a></p>
<h2>The &quot;if ... then ... else ... end&quot; based function</h2>
<p>Here's the next sample solution:</p>
<pre class="language-jq"><code class="language-jq"><span class="token keyword">def</span> <span class="token function">needs_license</span><span class="token punctuation">:</span> <br>  <span class="token keyword">if</span> <span class="token dot important">.</span> <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token string">"car"</span><span class="token punctuation">,</span> <span class="token string">"truck"</span><span class="token punctuation">)</span> <span class="token keyword">then</span> <span class="token boolean">true</span> <span class="token keyword">else</span> empty <span class="token keyword">end</span> <span class="token operator">//</span> <span class="token boolean">false</span><span class="token punctuation">;</span></code></pre>
<p>This looked a bit odd to me too. Knowing that <code>. == (&quot;car&quot;, &quot;truck&quot;)</code> is essentially a generator of multiple values, what's going on here? Multiple values in the condition part of an if-then-else construct?</p>
<p>Well, the jq manual <a href="https://stedolan.github.io/jq/manual/#if-then-else">has the following to say</a> in the context of <code>if A then B else C end</code>:</p>
<blockquote>
<p>If the condition A produces multiple results, then B is evaluated once for each result that is not false or null, and C is evaluated once for each false or null.</p>
</blockquote>
<p>What does this look like? To get a feel for it, I try this:</p>
<pre class="language-jq"><code class="language-jq"><span class="token keyword">if</span> <span class="token string">"car"</span> <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token string">"car"</span><span class="token punctuation">,</span> <span class="token string">"truck"</span><span class="token punctuation">)</span> <span class="token keyword">then</span> <span class="token string">"yes"</span> <span class="token keyword">else</span> <span class="token string">"no"</span> <span class="token keyword">end</span></code></pre>
<p>This produces:</p>
<pre class="language-json"><code class="language-json"><span class="token string">"yes"</span><br><span class="token string">"no"</span></code></pre>
<p>The <code>&quot;yes&quot;</code> is from the <code>&quot;car&quot; == &quot;car&quot;</code> returning <code>true</code> (i.e. something that &quot;is not false or null&quot;), and the <code>&quot;no&quot;</code> is from the <code>&quot;car&quot; == &quot;truck&quot;</code> returning <code>false</code>.</p>
<p>So far so good - and I know that multiple values from the generator expression can and do &quot;flow through&quot; the if-then-else construct. This also then helps me understand what is going on in the rest of the construct:</p>
<pre class="language-jq"><code class="language-jq"><span class="token keyword">if</span> <span class="token dot important">.</span> <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token string">"car"</span><span class="token punctuation">,</span> <span class="token string">"truck"</span><span class="token punctuation">)</span> <span class="token keyword">then</span> <span class="token boolean">true</span> <span class="token keyword">else</span> empty <span class="token keyword">end</span></code></pre>
<p>First, the <code>true</code> and <code>empty</code> values, in their respective positions here, are so that the if-then-else construct will emit <code>true</code> (if there's a vehicle match) or nothing at all.</p>
<p>Using something like <code>if . == (&quot;car&quot;, &quot;truck&quot;) then true else false end</code> is not going to work for us here, not least because it's redundant (it could be reduced to the actual condition, without the if-then-else at all) but mostly because it will produce multiple boolean values, whatever the input. Only one is wanted, and that's why <code>empty</code> is used to throw away any <code>false</code> values.</p>
<p>But that then leaves just <code>true</code> or nothing being emitted, and this is what the <code>// false</code> is for:</p>
<pre class="language-jq"><code class="language-jq"><span class="token keyword">if</span> <span class="token dot important">.</span> <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token string">"car"</span><span class="token punctuation">,</span> <span class="token string">"truck"</span><span class="token punctuation">)</span> <span class="token keyword">then</span> <span class="token boolean">true</span> <span class="token keyword">else</span> empty <span class="token keyword">end</span> <span class="token operator">//</span> <span class="token boolean">false</span><span class="token punctuation">;</span></code></pre>
<p>Using this <a href="https://stedolan.github.io/jq/manual/#Alternativeoperator://">alternative operator</a> (<code>//</code>), <code>false</code> can be emitted where there's no value coming from the if-then-else; in other words, whenever there are <code>false</code> value(s) being emitted from the generator in the condition position.</p>
<p>To round off this section, I'll add a couple of <code>debug</code>s to the body of the function to see with my own eyes what's going on (I've also added some extra whitespace for readability):</p>
<pre class="language-jq"><code class="language-jq"><span class="token keyword">def</span> <span class="token function">needs_license</span><span class="token punctuation">:</span> <br>  <span class="token keyword">if</span> debug <span class="token dot important">.</span> <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token string">"car"</span><span class="token punctuation">,</span> <span class="token string">"truck"</span><span class="token punctuation">)</span> <span class="token operator pipe">|</span> debug <br>  <span class="token keyword">then</span> <span class="token boolean">true</span> <br>  <span class="token keyword">else</span> empty<br>  <span class="token keyword">end</span> <span class="token operator">//</span> <span class="token boolean">false</span><span class="token punctuation">;</span></code></pre>
<p>First, passing a vehicle that's not in the list, such as with <code>&quot;boat&quot; | needs_license</code>, emits this:</p>
<pre class="language-json"><code class="language-json"><span class="token punctuation">[</span><span class="token string">"DEBUG:"</span><span class="token punctuation">,</span><span class="token string">"boat"</span><span class="token punctuation">]</span><br><span class="token punctuation">[</span><span class="token string">"DEBUG:"</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">]</span><br><span class="token punctuation">[</span><span class="token string">"DEBUG:"</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">]</span><br><span class="token boolean">false</span></code></pre>
<p>The value <code>&quot;boat&quot;</code> goes in, two <code>false</code> values are emitted from the generator, they both get turned into nothing (with <code>else empty</code>) and then this nothingness is converted into <code>false</code> with the <code>// false</code>.</p>
<p>Now how about a vehicle that is in the list: <code>&quot;car&quot; | needs_license</code> emits this:</p>
<pre class="language-json"><code class="language-json"><span class="token punctuation">[</span><span class="token string">"DEBUG:"</span><span class="token punctuation">,</span><span class="token string">"car"</span><span class="token punctuation">]</span><br><span class="token punctuation">[</span><span class="token string">"DEBUG:"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">]</span><br><span class="token punctuation">[</span><span class="token string">"DEBUG:"</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">]</span><br><span class="token boolean">true</span></code></pre>
<p>The <code>true</code> is emitted for <code>&quot;car&quot; == &quot;car&quot;</code>, and then <code>false</code> is emitted for <code>&quot;car&quot; == &quot;truck&quot;</code>. The <code>false</code> value is thrown away, but also because we still have a <code>true</code> value coming out of the if-then-else construct, the <code>// false</code> does not kick in, and we end up withat <code>true</code> value.</p>
<p>While I still prefer the &quot;any&quot; based function solution to this one, I still think it's quite elegant, and it taught me to be aware of generators producing multiple values in the context of a condition in such a construct, and how to handle them.</p>
<p><a name="the-select-based-function"></a></p>
<h2>The &quot;select&quot; based function</h2>
<p>The last of the function variants is this one:</p>
<pre class="language-jq"><code class="language-jq"><span class="token keyword">def</span> <span class="token function">needs_license</span><span class="token punctuation">:</span> <br>  <span class="token punctuation">(</span><span class="token dot important">.</span> <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token string">"car"</span><span class="token punctuation">,</span> <span class="token string">"truck"</span><span class="token punctuation">)</span> <span class="token operator pipe">|</span> <span class="token c-style-function function">select</span><span class="token punctuation">(</span><span class="token dot important">.</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token boolean">false</span><span class="token punctuation">;</span></code></pre>
<p>Everything here except for the <code>select(.)</code> has been covered already, so I can treat myself to slightly extended test, while omitting that <code>select(.)</code> part (and the <code>// false</code>) for now:</p>
<pre class="language-jq"><code class="language-jq"><span class="token string">"car"</span><span class="token punctuation">,</span> <span class="token string">"truck"</span><span class="token punctuation">,</span> <span class="token string">"bike"</span> <span class="token operator pipe">|</span> <span class="token dot important">.</span> <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token string">"car"</span><span class="token punctuation">,</span> <span class="token string">"truck"</span><span class="token punctuation">)</span></code></pre>
<p>This produces:</p>
<pre class="language-json"><code class="language-json"><span class="token boolean">true</span><br><span class="token boolean">false</span><br><span class="token boolean">false</span><br><span class="token boolean">true</span><br><span class="token boolean">false</span><br><span class="token boolean">false</span></code></pre>
<p>The order here is significant. That's three pairs of two booleans, from the combination of pairing <code>&quot;car&quot;</code>, <code>&quot;truck&quot;</code> and <code>&quot;boat&quot;</code>, one at a time, with the two values <code>&quot;car&quot;</code> and <code>&quot;truck&quot;</code>:</p>
<table>
<thead>
<tr>
<th>Input</th>
<th>Compare with <code>&quot;car&quot;</code></th>
<th>Compare with <code>&quot;truck&quot;</code></th>
</tr>
</thead>
<tbody>
<tr>
<td><code>&quot;car&quot;</code></td>
<td><code>true</code></td>
<td><code>false</code></td>
</tr>
<tr>
<td><code>&quot;truck&quot;</code></td>
<td><code>false</code></td>
<td><code>true</code></td>
</tr>
<tr>
<td><code>&quot;boat&quot;</code></td>
<td><code>false</code></td>
<td><code>false</code></td>
</tr>
</tbody>
</table>
<p>The <a href="https://stedolan.github.io/jq/manual/#select(boolean_expression)">select</a> function is described in the jq manual as <code>select(boolean_expression)</code> thus:</p>
<blockquote>
<p>The function <code>select(foo)</code> produces its input unchanged if <code>foo</code> returns <code>true</code> for that input, and produces no output otherwise.</p>
</blockquote>
<p>This description reminds me of the <code>if &lt;condition&gt; then true else empty end</code>; the only difference is that <code>select</code> returns the input unchanged and this if-then-else construct explicitly returns true. It just so happens of course that the input in this <code>select</code> case is going to be boolean values too, so it has the same effect.</p>
<p>And because it has the same effect, it also needs to supply the alternative value <code>false</code> when there's not a match, which is done again with <code>// false</code> attached to the entire output of the combination of the generator and the <code>select</code> function, i.e. this combination: <code>(.==(&quot;car&quot;, &quot;truck&quot;) | select(.))</code>.</p>
<p>I think the beauty here is the use of <code>.</code> as the boolean expression that <code>select</code> expects, conveying the values from the generator.</p>
<h2>Wrapping up</h2>
<p>I hadn't planned to write this content in this second part of the series, but thanks to Matthias's contribution, I thought it was worthwhile. I've certainly had a good opportunity to dwell on the minutiae of these solutions and to get a better feel for streams of values in jq programs.</p>
<p>In the next part I'll continue to look at community solutions for some other jq exercises on Exercism, and explain what I missed, observed, and learned.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Learning from community solutions on Exercism - part 1</title>
      <link href="https://qmacro.org/blog/posts/2023/03/29/learning-from-community-solutions-on-exercism-part-1/"/>
      <updated>2023-03-29T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2023/03/29/learning-from-community-solutions-on-exercism-part-1/</id>
      <content type="html">
        <![CDATA[
      <p>There's a relatively new <a href="https://exercism.org/tracks/jq">jq track on Exercism</a>, and I've been working through some of the exercises. There are at least a couple of features that appeal to me; one is the ability to easily write and submit solutions from the command line (see <a href="https://exercism.org/docs/using/solving-exercises/working-locally">Working Locally</a>) and the other is the <a href="https://exercism.org/community">community</a> solutions that are available to you after you submit your own first solution.</p>
<p>As well as the direct benefit of practice, I've learned and been reminded of aspects of jq while looking through the community solutions. So I thought I'd write some of them up here, because writing will also help me remember.</p>
<p>I'll start with some simple observations:</p>
<ul>
<li>in the <a href="#shopping-list-exercise">Shopping List exercise</a> I contrast array and stream based thinking</li>
<li>in the <a href="#assembly-line-exercise">Assembly Line exercise</a> I remember how to avoid unnecessary symbolic bindings</li>
<li>in the <a href="#high-score-board-exercise">High Score Board exercise</a> I dwell on <code>map</code>, <code>map_values</code> and the array/object iterator</li>
<li>in the <a href="#vehicle-purchase-exercise">Vehicle Purchase exercise</a> I fall into a rabbit hole about array element containment checks</li>
</ul>
<p><a name="shopping-list-exercise"></a></p>
<h2>Shopping List exercise</h2>
<p>Even in the basic learning exercise <a href="https://exercism.org/tracks/jq/exercises/shopping">Shopping List</a> there are subtle points worth talking about.</p>
<p>It's based on determining information from a shopping list, that looks like this (reduced for brevity):</p>
<pre class="language-json"><code class="language-json"><span class="token punctuation">{</span><br>  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Ingredients for pancakes"</span><span class="token punctuation">,</span><br>  <span class="token property">"ingredients"</span><span class="token operator">:</span> <span class="token punctuation">[</span><br>    <span class="token punctuation">{</span><br>      <span class="token property">"item"</span><span class="token operator">:</span> <span class="token string">"flour"</span><span class="token punctuation">,</span><br>      <span class="token property">"amount"</span><span class="token operator">:</span> <span class="token punctuation">{</span><br>        <span class="token property">"quantity"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span><br>        <span class="token property">"unit"</span><span class="token operator">:</span> <span class="token string">"cup"</span><br>      <span class="token punctuation">}</span><br>    <span class="token punctuation">}</span><span class="token punctuation">,</span><br>    <span class="token punctuation">{</span><br>      <span class="token property">"item"</span><span class="token operator">:</span> <span class="token string">"sugar"</span><span class="token punctuation">,</span><br>      <span class="token property">"amount"</span><span class="token operator">:</span> <span class="token punctuation">{</span><br>        <span class="token property">"quantity"</span><span class="token operator">:</span> <span class="token number">0.25</span><span class="token punctuation">,</span><br>        <span class="token property">"unit"</span><span class="token operator">:</span> <span class="token string">"cup"</span><br>      <span class="token punctuation">}</span><br>    <span class="token punctuation">}</span><span class="token punctuation">,</span><br>    <span class="token punctuation">{</span><br>      <span class="token property">"item"</span><span class="token operator">:</span> <span class="token string">"baking powder"</span><span class="token punctuation">,</span><br>      <span class="token property">"amount"</span><span class="token operator">:</span> <span class="token punctuation">{</span><br>        <span class="token property">"quantity"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span><br>        <span class="token property">"unit"</span><span class="token operator">:</span> <span class="token string">"teaspoon"</span><br>      <span class="token punctuation">}</span><br>    <span class="token punctuation">}</span><br>  <span class="token punctuation">]</span><span class="token punctuation">,</span><br>  <span class="token property">"optional ingredients"</span><span class="token operator">:</span> <span class="token punctuation">[</span><br>    <span class="token punctuation">{</span><br>      <span class="token property">"item"</span><span class="token operator">:</span> <span class="token string">"blueberries"</span><span class="token punctuation">,</span><br>      <span class="token property">"amount"</span><span class="token operator">:</span> <span class="token punctuation">{</span><br>        <span class="token property">"quantity"</span><span class="token operator">:</span> <span class="token number">0.25</span><span class="token punctuation">,</span><br>        <span class="token property">"unit"</span><span class="token operator">:</span> <span class="token string">"cup"</span><br>      <span class="token punctuation">}</span><span class="token punctuation">,</span><br>      <span class="token property">"substitute"</span><span class="token operator">:</span> <span class="token string">"chopped apple"</span><br>    <span class="token punctuation">}</span><br>  <span class="token punctuation">]</span><br><span class="token punctuation">}</span></code></pre>
<p>The first observation is about the contrast between the concept of arrays, with corresponding array functions like <code>map</code>, and the concept of streaming in jq.</p>
<p>The third task in this exercise was to identify the amount of sugar, which I determined like this:</p>
<pre class="language-jq"><code class="language-jq"><span class="token punctuation">(</span><br>  <span class="token punctuation">.</span>ingredients <br>  <span class="token operator pipe">|</span> <span class="token c-style-function function">map</span><span class="token punctuation">(</span><span class="token c-style-function function">select</span><span class="token punctuation">(</span><span class="token punctuation">.</span>item <span class="token operator">==</span> <span class="token string">"sugar"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <br>  <span class="token operator pipe">|</span> first<span class="token punctuation">.</span>amount<span class="token punctuation">.</span>quantity<br><span class="token punctuation">)</span></code></pre>
<p>The value of the <code>ingredients</code> property is an array, and using <code>map</code> like this produces another array, albeit with a single element (the object that represents the sugar ingredient). So I then used <code>first</code> to grab that element, and navigated to the <code>quantity</code> property). All fine. Having used <code>map</code> in various languages, and learned to think about arrays and how functions such as <code>map</code>, <code>filter</code> and <code>reduce</code> work (see <a href="/blog/posts/2016/05/03/fofp-fundamentals-of-functional-programming/">FOFP Fundamentals of functional programming</a>) this felt natural to me.</p>
<p>That being said, jq is fundamentally stream oriented, which can be seen in <a href="https://exercism.org/tracks/jq/exercises/shopping/solutions/glennj">glennj's solution</a>:</p>
<pre class="language-jq"><code class="language-jq"><span class="token punctuation">(</span><br>  <span class="token punctuation">.</span>ingredients<span class="token punctuation">[</span><span class="token punctuation">]</span><br>  <span class="token operator pipe">|</span> <span class="token c-style-function function">select</span><span class="token punctuation">(</span><span class="token punctuation">.</span>item <span class="token operator">==</span> <span class="token string">"sugar"</span><span class="token punctuation">)</span><br>  <span class="token operator pipe">|</span> <span class="token punctuation">.</span>amount<span class="token punctuation">.</span>quantity<br><span class="token punctuation">)</span></code></pre>
<p>Note the use of the <a href="https://stedolan.github.io/jq/manual/#Array/ObjectValueIterator:.%5B%5D">array / object value iterator</a> on the <code>ingredients</code> property (<code>[]</code>), and the lack of <code>map</code> (and <code>first</code>).</p>
<p>Expressing <code>.ingredients[]</code> (as opposed to <code>.ingredients</code>) explodes into a stream of values (one for every array element) which are each passed downstream (to <code>select</code> and beyond). The <code>select</code> then only allows the journey to continue for the element(s) that satisfy the condition, which means that the data coming through the last pipe is not an array but an object*.</p>
<p>*theoretically there could be more than one object coming through, but in this case there is just one.</p>
<p>Streaming in jq is an important aspect and can be a powerful mechanism to use.</p>
<p><a name="assembly-line-exercise"></a></p>
<h2>Assembly Line exercise</h2>
<p><a href="https://exercism.org/tracks/jq/exercises/assembly-line">Assembly Line</a> is another learning exercise, where I decided to avoid an <code>if ... elif ... else ... end</code> structure and instead encode the computation for task 1 (calculation of the production rate per hour) using an array as a kind of lookup table:</p>
<pre class="language-jq"><code class="language-jq"><span class="token keyword">def</span> <span class="token function">production_rate_per_hour</span><span class="token punctuation">:</span><br>  <span class="token dot important">.</span> <span class="token keyword">as</span> <span class="token variable">$speed</span><br>  <span class="token operator pipe">|</span> <span class="token punctuation">(</span><span class="token number">221</span> <span class="token operator">*</span> <span class="token variable">$speed</span><span class="token punctuation">)</span><br>    <span class="token operator">*</span> <br>    <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">77</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token variable">$speed</span><span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">100</span><span class="token punctuation">)</span><br><span class="token punctuation">;</span></code></pre>
<p>I prefer the way this looks, over a multi-condition <code>if</code> structure, but there's a further improvement possible that I picked up, again from glennj <a href="https://exercism.org/tracks/jq/exercises/assembly-line/solutions/glennj">in his solution</a>, which was the avoidance of the <a href="https://stedolan.github.io/jq/manual/#Variable/SymbolicBindingOperator:...as$identifier%7C...">symbolic binding</a> of the input to <code>$speed</code> (the <code>. as $speed</code> part).</p>
<p>I'd used a symbolic binding because I knew I would need to refer to it both in the basic speed calculation (multiplying it by 221) and using it to index into the lookup table (<code>[$speed]</code>). But glennj reminded me that I could just as easily have used <code>.</code> directly:</p>
<pre class="language-jq"><code class="language-jq"><span class="token keyword">def</span> <span class="token function">production_rate_per_hour</span><span class="token punctuation">:</span><br>  <span class="token dot important">.</span> <span class="token operator">*</span> <span class="token number">221</span> <span class="token operator">*</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0.9</span><span class="token punctuation">,</span><span class="token number">0.9</span><span class="token punctuation">,</span><span class="token number">0.9</span><span class="token punctuation">,</span><span class="token number">0.9</span><span class="token punctuation">,</span><span class="token number">0.8</span><span class="token punctuation">,</span><span class="token number">0.77</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token dot important">.</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><br><span class="token punctuation">;</span></code></pre>
<p>Note that tHE subtraction of 1 from <code>.</code> here is because this lookup table was constructed without a dummy value of 0 for the theoretical 0 speed.</p>
<p>A useful reminder which helps me strive for better avoidance of all that is unnecessary.</p>
<p><a name="high-score-board-exercise"></a></p>
<h2>High Score Board exercise</h2>
<p>In reviewing my solutions for this post, I came upon what I'd written for the last task in the <a href="https://exercism.org/tracks/jq/exercises/high-score-board">High Score Board</a> exercise, which was to find the total score, as illustrated thus:</p>
<pre class="language-jq"><code class="language-jq"><span class="token punctuation">{</span><br>  <span class="token property">"Dave Thomas"</span><span class="token punctuation">:</span> <span class="token number">44</span><span class="token punctuation">,</span><br>  <span class="token property">"Freyja Ćirić"</span><span class="token punctuation">:</span> <span class="token number">539</span><span class="token punctuation">,</span><br>  <span class="token property">"José Valim"</span><span class="token punctuation">:</span> <span class="token number">265</span><br><span class="token punctuation">}</span><br><span class="token operator pipe">|</span> total_score<br><span class="token comment"># => 848</span></code></pre>
<p>I'd written the following:</p>
<pre class="language-jq"><code class="language-jq"><span class="token keyword">def</span> <span class="token function">total_score</span><span class="token punctuation">:</span><br>  <span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator pipe">|</span> add <span class="token operator">+</span> <span class="token number">0</span><span class="token punctuation">;</span></code></pre>
<p>As I mentioned earlier in this post, <code>.[]</code> is the <a href="https://stedolan.github.io/jq/manual/#Array/ObjectValueIterator:.%5B%5D">array / object value iterator</a>. When I mentioned it back then, it was used to iterate over array values, i.e. the elements of the <code>ingredients</code> array.</p>
<p>Now here it's being used to iterate over the values in an object. Not the keys, but the values, i.e. <code>44</code>, <code>539</code> and <code>265</code>. When I looked at it, I was reminded of the jq manual section on <a href="https://stedolan.github.io/jq/manual/#map(x),map_values(x)">map and map_values</a> which says:</p>
<blockquote>
<p><code>map(x)</code> is equivalent to <code>[.[] | x]</code>. In fact, this is how it's defined. Similarly, <code>map_values(x)</code> is defined as <code>.[] |= x</code>.</p>
</blockquote>
<p>Also as I mentioned earlier, this iterator will create a stream of values, rather than an array. In other words, this:</p>
<pre class="language-jq"><code class="language-jq"><span class="token punctuation">{</span><br>  <span class="token property">"Dave Thomas"</span><span class="token punctuation">:</span> <span class="token number">44</span><span class="token punctuation">,</span><br>  <span class="token property">"Freyja Ćirić"</span><span class="token punctuation">:</span> <span class="token number">539</span><span class="token punctuation">,</span><br>  <span class="token property">"José Valim"</span><span class="token punctuation">:</span> <span class="token number">265</span><br><span class="token punctuation">}</span><br><span class="token operator pipe">|</span> <span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token punctuation">]</span></code></pre>
<p>produces:</p>
<pre class="language-text"><code class="language-text">44<br>539<br>265</code></pre>
<p>Note the lack of any semblance of an array - these are all single JSON values.</p>
<p>So in order to be able to use <code>add</code>, which takes an array as input, I therefore also had to wrap this in an <a href="https://stedolan.github.io/jq/manual/#Arrayconstruction:%5B%5D">array constructor</a> i.e. inside square brackets <code>[ ]</code>:</p>
<pre class="language-jq"><code class="language-jq"><span class="token punctuation">{</span><br>  <span class="token property">"Dave Thomas"</span><span class="token punctuation">:</span> <span class="token number">44</span><span class="token punctuation">,</span><br>  <span class="token property">"Freyja Ćirić"</span><span class="token punctuation">:</span> <span class="token number">539</span><span class="token punctuation">,</span><br>  <span class="token property">"José Valim"</span><span class="token punctuation">:</span> <span class="token number">265</span><br><span class="token punctuation">}</span><br><span class="token operator pipe">|</span> <span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span></code></pre>
<p>which gave me:</p>
<pre class="language-json"><code class="language-json"><span class="token punctuation">[</span><br>  <span class="token number">44</span><span class="token punctuation">,</span><br>  <span class="token number">539</span><span class="token punctuation">,</span><br>  <span class="token number">265</span><br><span class="token punctuation">]</span></code></pre>
<p>Anyway, forgetting this <code>.[]</code> was acting as an object value iterator, I then thought &quot;hmm, this is more or less the equivalent of <code>map</code>&quot;, given what the manual stated ... so I replaced <code>[.[]]</code> with <code>map(.)</code>, like this:</p>
<pre class="language-jq"><code class="language-jq"><span class="token punctuation">{</span><br>  <span class="token property">"Dave Thomas"</span><span class="token punctuation">:</span> <span class="token number">44</span><span class="token punctuation">,</span><br>  <span class="token property">"Freyja Ćirić"</span><span class="token punctuation">:</span> <span class="token number">539</span><span class="token punctuation">,</span><br>  <span class="token property">"José Valim"</span><span class="token punctuation">:</span> <span class="token number">265</span><br><span class="token punctuation">}</span><br><span class="token operator pipe">|</span> <span class="token c-style-function function">map</span><span class="token punctuation">(</span><span class="token dot important">.</span><span class="token punctuation">)</span></code></pre>
<p>This also gave me an array:</p>
<pre class="language-json"><code class="language-json"><span class="token punctuation">[</span><br>  <span class="token number">44</span><span class="token punctuation">,</span><br>  <span class="token number">539</span><span class="token punctuation">,</span><br>  <span class="token number">265</span><br><span class="token punctuation">]</span></code></pre>
<p>But the interesting thing was that this is <code>map</code> being applied to an object, not an array, and I'm guessing it does the right thing in a sort of <a href="https://en.wikipedia.org/wiki/DWIM">DWIM</a> way (which I first came across in Perl). Even more interestingly, this use of <code>map</code> on an object, which produces an array of the values in that object, contrasts nicely with <code>map</code>'s sibling <code>map_values</code>, which, perhaps confusingly, doesn't do that.</p>
<p>In fact, I used <code>map_values</code> in addressing the previous task in this exercise, to apply Monday bonus points, which I did like this:</p>
<pre class="language-jq"><code class="language-jq"><span class="token keyword">def</span> <span class="token function">apply_monday_bonus</span><span class="token punctuation">:</span><br>  <span class="token c-style-function function">map_values</span><span class="token punctuation">(</span><span class="token dot important">.</span> <span class="token operator">+</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>What <code>map_values</code> does is return the object but offer you the values to manipulate as each property is iterated over. So this:</p>
<pre class="language-jq"><code class="language-jq"><span class="token punctuation">{</span><br>  <span class="token property">"Dave Thomas"</span><span class="token punctuation">:</span> <span class="token number">44</span><span class="token punctuation">,</span><br>  <span class="token property">"Freyja Ćirić"</span><span class="token punctuation">:</span> <span class="token number">539</span><span class="token punctuation">,</span><br>  <span class="token property">"José Valim"</span><span class="token punctuation">:</span> <span class="token number">265</span><br><span class="token punctuation">}</span><br><span class="token operator pipe">|</span> <span class="token c-style-function function">map_values</span><span class="token punctuation">(</span><span class="token dot important">.</span> <span class="token operator">+</span> <span class="token number">100</span><span class="token punctuation">)</span></code></pre>
<p>produces this:</p>
<pre class="language-json"><code class="language-json"><span class="token punctuation">{</span><br>  <span class="token property">"Dave Thomas"</span><span class="token operator">:</span> <span class="token number">144</span><span class="token punctuation">,</span><br>  <span class="token property">"Freyja Ćirić"</span><span class="token operator">:</span> <span class="token number">639</span><span class="token punctuation">,</span><br>  <span class="token property">"José Valim"</span><span class="token operator">:</span> <span class="token number">365</span><br><span class="token punctuation">}</span></code></pre>
<p>and not this:</p>
<pre class="language-json"><code class="language-json"><span class="token punctuation">[</span><br>  <span class="token number">144</span><span class="token punctuation">,</span><br>  <span class="token number">639</span><span class="token punctuation">,</span><br>  <span class="token number">365</span><br><span class="token punctuation">]</span></code></pre>
<p>To complete the picture on this observation, I thought I'd mention the <code>+ 0</code> part in the solution:</p>
<pre class="language-jq"><code class="language-jq"><span class="token keyword">def</span> <span class="token function">total_score</span><span class="token punctuation">:</span><br>  <span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator pipe">|</span> add <span class="token operator">+</span> <span class="token number">0</span><span class="token punctuation">;</span></code></pre>
<p>If you supply an empty array to <code>add</code>, it will produce <code>null</code>:</p>
<pre class="language-jq"><code class="language-jq"><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator pipe">|</span> add<br><span class="token comment"># => null</span></code></pre>
<p>According to the <a href="https://stedolan.github.io/jq/manual/#Addition:+">addition</a> section of the jq manual:</p>
<blockquote>
<p>null can be added to any value, and returns the other value unchanged.</p>
</blockquote>
<p><a name="vehicle-purchase-exercise"></a></p>
<h2>Vehicle Purchase exercise</h2>
<p>The <a href="https://exercism.org/tracks/jq/exercises/vehicle-purchase">Vehicle Purchase</a> exercise is another learning one and was quite straightforward. My solution for the first task (&quot;Determine if you will need a drivers licence&quot;) looked like this:</p>
<pre class="language-jq"><code class="language-jq"><span class="token keyword">def</span> <span class="token function">needs_license</span><span class="token punctuation">:</span><br>  <span class="token dot important">.</span> <span class="token operator">==</span> <span class="token string">"car"</span> <span class="token operator">or</span> <span class="token dot important">.</span> <span class="token operator">==</span> <span class="token string">"truck"</span><span class="token punctuation">;</span></code></pre>
<p>While this is fine because there are only two possible values for which we want to return true, the way I expressed this bothered me slightly.</p>
<p>In JavaScript, for example, I would have used an array to contain the values, and then used <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes">includes</a> like this:</p>
<pre class="language-javascript"><code class="language-javascript"><span class="token function-variable function">needs_license</span> <span class="token operator">=</span> <span class="token parameter">x</span> <span class="token operator">=></span> <span class="token punctuation">[</span><span class="token string">"car"</span><span class="token punctuation">,</span> <span class="token string">"truck"</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><br><span class="token comment">// needs_license("car") => true</span><br><span class="token comment">// needs_license("train") => false</span></code></pre>
<p>So after submitting my solution, I looked at what others had done. Quite a few used the same approach, as me, but there was <a href="https://exercism.org/tracks/jq/exercises/vehicle-purchase/solutions/IsaacG">a solution from IsaacG</a> that looked more appealing.</p>
<h3>Considering the inside filter</h3>
<pre class="language-jq"><code class="language-jq"><span class="token keyword">def</span> <span class="token function">needs_license</span><span class="token punctuation">:</span><br>  <span class="token punctuation">[</span><span class="token dot important">.</span><span class="token punctuation">]</span> <span class="token operator pipe">|</span> <span class="token c-style-function function">inside</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"car"</span><span class="token punctuation">,</span> <span class="token string">"truck"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>This <code>inside</code> filter looked to me like the JavaScript approach above. But my goodness, did it open up a rabbit hole of investigations!</p>
<p>Looking at it, one would think that this would do the job. I started looking at the definition of <a href="https://stedolan.github.io/jq/manual/#inside">inside</a> in the jq manual, and found that it was &quot;essentially an inversed version of <code>contains</code>&quot;. Before looking at the definition of <code>contains</code>, I took a quick look at some of the examples, and saw this one, which made me scratch my head:</p>
<pre class="language-text"><code class="language-text">jq 'inside(["foobar", "foobaz", "blarp"])'<br>Input:	["baz", "bar"]<br>Output:	true</code></pre>
<p>This is not an element-wise check, it's a (sub)string based comparison, even when working with arrays.</p>
<p>I looked at <a href="https://stedolan.github.io/jq/manual/#contains(element)">contains</a> and the examples and description had me more convinced that actually the use of <code>inside</code> in the solution to this sort of task may not be ideal.</p>
<p>There's a sentence in the description of <code>contains</code> which looks fairly innocuous, but in fact masks a major gotcha (emphasis mine):</p>
<blockquote>
<p>[With <code>A | contains(B)</code> ...] an array B is contained in an array A if all elements in B <strong>are contained in</strong> any element in A.</p>
</blockquote>
<h3>Digression: inside as inverse of contains</h3>
<p>Before continuing, let's just understand what does &quot;inside is an inversed version of contains&quot; mean? Well, we can look at the <a href="https://github.com/stedolan/jq/blob/a9f97e9e61a910a374a5d768244e8ad63f407d3e/src/builtin.jq#L211">source for <code>inside</code> in <code>builtin.jq</code></a>:</p>
<pre class="language-jq"><code class="language-jq"><span class="token keyword">def</span> <span class="token function">inside</span><span class="token punctuation">(</span>xs<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token dot important">.</span> <span class="token keyword">as</span> <span class="token variable">$x</span> <span class="token operator pipe">|</span> xs <span class="token operator pipe">|</span> <span class="token c-style-function function">contains</span><span class="token punctuation">(</span><span class="token variable">$x</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>We can see that this is effectively just switching around the two arguments - here, <code>xs</code> is the absolute list of elements, and <code>.</code> (which is bound to <code>$x</code>) is what we want to look for.</p>
<h3>What's the issue?</h3>
<p>OK, digression over. Clearly, given the relationship between <code>inside</code> and <code>contains</code>, the gotcha also applies to <code>inside</code>.</p>
<p>To help me focus in on the significance of &quot;if [...] elements [...] are contained in any element [...]&quot; in the above description, I defined the two licensable vehicles as being &quot;cart&quot; (with a &quot;t&quot;) and &quot;truck&quot; instead of &quot;car&quot; and &quot;truck&quot;:</p>
<pre class="language-jq"><code class="language-jq"><span class="token keyword">def</span> <span class="token function">licensable_vehicles</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"cart"</span><span class="token punctuation">,</span> <span class="token string">"truck"</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre>
<p>I then recreated the function above to look like this*:</p>
<pre class="language-jq"><code class="language-jq"><span class="token keyword">def</span> <span class="token function">needs_license_inside</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token dot important">.</span><span class="token punctuation">]</span> <span class="token operator pipe">|</span> <span class="token c-style-function function">inside</span><span class="token punctuation">(</span>licensable_vehicles<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>I then tested it with three vehicles, which gave me an unexpected result:</p>
<pre class="language-jq"><code class="language-jq"><span class="token punctuation">[</span><span class="token string">"bus"</span><span class="token punctuation">,</span> <span class="token string">"cart"</span><span class="token punctuation">,</span> <span class="token string">"car"</span><span class="token punctuation">]</span> <span class="token operator pipe">|</span> <span class="token c-style-function function">map</span><span class="token punctuation">(</span>needs_license_inside<span class="token punctuation">)</span><br><span class="token comment"># => [false, true, true]</span></code></pre>
<p>The <code>inside</code> function returns <code>true</code> for &quot;car&quot; ... because the string <strong>is contained in</strong> one of the elements (&quot;cart&quot;). We can even unpick the inverse, to get closer to the source of the problem:</p>
<pre class="language-jq"><code class="language-jq">licensable_vehicles <span class="token operator pipe">|</span> <span class="token c-style-function function">contains</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"car"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><br><span class="token comment"># => true</span></code></pre>
<p>Yikes!</p>
<p><a name="some-alternatives"></a></p>
<h3>Some alternatives</h3>
<p>Rather than bemoan the slightly vague documentation combined with my misaligned expectations, I thought I'd look into how one might go about testing membership, if <code>inside</code> (or <code>contains</code>) is not the way.</p>
<h4>Using any(condition)</h4>
<p>The <a href="https://stedolan.github.io/jq/manual/#any,any(condition),any(generator;condition)">any</a> filter has different forms (I guess known as <code>any/0</code>, <code>any/1</code> and <code>any/2</code>).
We can use the <code>any/1</code> form with a condition, like this:</p>
<pre class="language-jq"><code class="language-jq"><span class="token keyword">def</span> <span class="token function">needs_license_any</span><span class="token punctuation">:</span> <span class="token dot important">.</span> <span class="token keyword">as</span> <span class="token variable">$v</span> <span class="token operator pipe">|</span> licensable_vehicles <span class="token operator pipe">|</span> <span class="token c-style-function function">any</span><span class="token punctuation">(</span><span class="token dot important">.</span><span class="token operator">==</span><span class="token variable">$v</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>This will give us what we're looking for:</p>
<pre class="language-jq"><code class="language-jq"><span class="token punctuation">[</span><span class="token string">"bus"</span><span class="token punctuation">,</span> <span class="token string">"cart"</span><span class="token punctuation">,</span> <span class="token string">"car"</span><span class="token punctuation">]</span> <span class="token operator pipe">|</span> <span class="token c-style-function function">map</span><span class="token punctuation">(</span>needs_license_any<span class="token punctuation">)</span><br><span class="token comment"># => [false, true, false]</span></code></pre>
<p>By the way, I had first created this version of the function as follows, and passed the vehicles under tests via a parameter:</p>
<pre class="language-jq"><code class="language-jq"><span class="token keyword">def</span> <span class="token function">needs_license_any</span><span class="token punctuation">(</span><span class="token variable">$v</span><span class="token punctuation">)</span><span class="token punctuation">:</span> licensable_vehicles <span class="token operator pipe">|</span> <span class="token c-style-function function">any</span><span class="token punctuation">(</span><span class="token dot important">.</span><span class="token operator">==</span><span class="token variable">$v</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br><span class="token punctuation">[</span><span class="token string">"bus"</span><span class="token punctuation">,</span> <span class="token string">"cart"</span><span class="token punctuation">,</span> <span class="token string">"car"</span><span class="token punctuation">]</span> <span class="token operator pipe">|</span> <span class="token c-style-function function">map</span><span class="token punctuation">(</span><span class="token c-style-function function">needs_license_any</span><span class="token punctuation">(</span><span class="token dot important">.</span><span class="token punctuation">)</span><span class="token punctuation">)</span><br><span class="token comment"># => [false, true, false]</span></code></pre>
<p>But inspired by the <a href="https://github.com/stedolan/jq/blob/a9f97e9e61a910a374a5d768244e8ad63f407d3e/src/builtin.jq#L211">builtin definition of inside</a> I felt OK in using a symbolic binding (<code>. as $v</code>) after all, despite what I mentioned earlier in the section on the <a href="#assembly-line-exercise">Assembly Line exercise</a>.</p>
<h4>Using index</h4>
<p>In the jq manual, <a href="https://stedolan.github.io/jq/manual/#index(s),rindex(s)">index</a> is described in a vague way, and the examples are quite minimal, which might give the impression it relates to strings and substrings. But I'm learning that the limited examples can be deceiving, and the functions and filters have subtle depths and for the most part just work the way you might assume they might, in different circumstances.</p>
<p>Here, <code>index</code> will work for us in that it can return either an array index (for a given element, if it exists) or null (if it doesn't). A simple start with <code>index</code> might look like this:</p>
<pre class="language-jq"><code class="language-jq"><span class="token keyword">def</span> <span class="token function">needs_license_index</span><span class="token punctuation">:</span> <span class="token dot important">.</span> <span class="token keyword">as</span> <span class="token variable">$v</span> <span class="token operator pipe">|</span> licensable_vehicles <span class="token operator pipe">|</span> <span class="token c-style-function function">index</span><span class="token punctuation">(</span><span class="token variable">$v</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>However, this doesn't quite give us what we want:</p>
<pre class="language-jq"><code class="language-jq"><span class="token punctuation">[</span><span class="token string">"bus"</span><span class="token punctuation">,</span> <span class="token string">"cart"</span><span class="token punctuation">,</span> <span class="token string">"car"</span><span class="token punctuation">]</span> <span class="token operator pipe">|</span> <span class="token c-style-function function">map</span><span class="token punctuation">(</span>needs_license_index<span class="token punctuation">)</span><br><span class="token comment"># => [null, 0, null]</span></code></pre>
<p>But <a href="https://stedolan.github.io/jq/manual/#and/or/not">and</a>ing values such as these with <code>true</code> does the trick, of course:</p>
<pre class="language-jq"><code class="language-jq"><span class="token keyword">def</span> <span class="token function">needs_license_index</span><span class="token punctuation">:</span> <br>  <span class="token dot important">.</span> <span class="token keyword">as</span> <span class="token variable">$v</span> <span class="token operator pipe">|</span> licensable_vehicles <span class="token operator pipe">|</span> <span class="token c-style-function function">index</span><span class="token punctuation">(</span><span class="token variable">$v</span><span class="token punctuation">)</span> <span class="token operator">and</span> <span class="token boolean">true</span><span class="token punctuation">;</span><br><span class="token punctuation">[</span><span class="token string">"bus"</span><span class="token punctuation">,</span> <span class="token string">"cart"</span><span class="token punctuation">,</span> <span class="token string">"car"</span><span class="token punctuation">]</span> <span class="token operator pipe">|</span> <span class="token c-style-function function">map</span><span class="token punctuation">(</span>needs_license_index<span class="token punctuation">)</span><br><span class="token comment"># => [false, true, false]</span></code></pre>
<p>Note that in jq:</p>
<blockquote>
<p>false and null are considered &quot;false values&quot;, and anything else is a &quot;true value&quot;</p>
</blockquote>
<p>which is why <code>0 and true</code> evaluates to <code>true</code>.</p>
<p>I'm sure there are more options, but I'll leave it there for now. What is your goto approach for checking for elements in arrays? Let me know in the comments.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>SAP community memories</title>
      <link href="https://qmacro.org/blog/posts/2023/03/10/sap-community-memories/"/>
      <updated>2023-03-10T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2023/03/10/sap-community-memories/</id>
      <content type="html">
        <![CDATA[
      <p>This year, SAP is celebrating 20 years of the web-based SAP Community platform. Happy anniversary! I thought I'd contribute to these celebrations with some memories of my own.</p>
<p><img src="/images/2023/03/sap-community-anniversary.png" alt="The SAP Community Anniversary logo"></p>
<p>Recently my good old friend Craig Cmehil posted a discussion over on the SAP Community: <a href="https://groups.community.sap.com/t5/coffee-corner-discussions/did-you-know-it-s-been-20-years-what-s-your-favourite-community/m-p/220754">Did you know? It's been 20 years! What's your favourite community memory?</a>. There are some great photos and memories being shared there, and it's definitely worth heading over there after reading this post and checking out the thread.</p>
<p>Twenty years - has it really been that long already? Well, it's actually been longer, but more on that shortly.</p>
<h2>What SAP Community is</h2>
<p>The SAP Community (capital C) is the latest name and incarnation of the web-based platform that was born in 2003, twenty years ago this year. Back then, it was launched as the &quot;SAP Developer Network&quot;, which aligned sensibly with other similar initiatives that existed around that time, such as MSDN, the Microsoft Developer Network.</p>
<p>Later that decade, in 2007, the name was changed to &quot;SAP Community Network&quot;, partly to acknowledge the presence of other practitioners and welcome them into the mix.</p>
<p>Most recently, in 2016, the name was changed again to simplify things, and became &quot;SAP Community&quot;.</p>
<h2>My involvement in its creation</h2>
<p>The launch of SAP Developer Network, which we now take for granted in the form of the SAP Community, was in the first half of 2003. It was the result of a lot of work from a small team working behind the scenes. I was a member of that team. How did it come to be so? Well, there were a number of factors, which I'll describe here.</p>
<h3>As an author and speaker with O'Reilly</h3>
<p>Just over a year before the birth of the web-based platform that we now know and love as SAP Community, my first book &quot;Programming Jabber&quot; was published by O'Reilly (see the <a href="https://qmacro.org/about/#books">books section in my About Me page</a>). O'Reilly was (and still is) a very well respected technical book publisher and also had some great experience with building community platforms on the Web back then.</p>
<p><img src="/images/books/programmingjabber.png" alt="Programming Jabber cover"></p>
<p>My work writing <a href="https://www.oreilly.com/library/view/programming-jabber/0596002025/">Programming Jabber</a>, and speaking at O'Reilly's annual Open Source Convention (OSCON) event, meant that I had a great relationship with the wonderful folks that worked there.</p>
<h3>As a technical consultant in the SAP tech ecosphere</h3>
<p>I started working with SAP software in 1987, with the mainframe version SAP R/2 (version 4.1d to be precise). So by the time SAP decided it was time to build and run a community of its own, I had already 15 years worth of relationships built up, and a reputation (mostly as a troublecauser, no doubt) based on my day job as an SAP basis person, developer, architect, consultant, and so on working at customers and partners and as an independent.</p>
<p>Moreover, I had been active in the community in the decade leading up to the birth of SAP Developer Network in 2003 too.</p>
<h3>As someone active in the early days of SAP communities</h3>
<p>In the early days of my career, I was working as an employee of a small SAP consultancy and travelling around, spending most of my evenings in hotel rooms.</p>
<p>In early 1995 I created the first online SAP community. Back then, the Web wasn't what it is today; most Internet based communities were based around either Usenet (newsgroups) or mailing lists. Mailing list software was the norm for handling community discussions and interactivity, and I used <a href="https://en.wikipedia.org/wiki/Majordomo_(software)">Majordomo</a> for the community I created, which was called &quot;merlin&quot;, and was mainly for technical discussions and Q&amp;A activities around both SAP R/2 and SAP R/3.</p>
<p>I spent pretty much every evening at the desk in my hotel room on my Sanyo NB 17 laptop (with a whopping 1MB of RAM and a 2400 baud modem), administering this community of like-minded folks who wanted to connect and exchange ideas and questions.</p>
<p><img src="/images/2023/03/sanyo-nb-17.png" alt="Sanyo NB 17 laptop"></p>
<p>It was hard work, seemingly never ending, but very rewarding.</p>
<p>Later that year I got to know of another mailing list that had just formed, called sapr3-list. I reached out to the creator of that list, Bryan, and we proceeded to run our lists in parallel, exchanging stories of administrative issues and more.</p>
<p>Then a few months later, we were approached by some lovely folks from <a href="https://www.mit.edu/">MIT</a>, who were SAP customers, and who wanted to offer us help with our SAP community activities.</p>
<p><a href="https://people.sap.com/susan.keohan">Sue Keohan</a> was one of the folks that reached out, and between us, we formed a new single mailing list called SAP-R3-L that became the central SAP community that encompassed all the discussions, memberships and more of merlin and sapr3-list. This mailing list, by the way, was based on another piece of (now venerable) community mailing list software, <a href="https://en.wikipedia.org/wiki/LISTSERV">LISTSERV</a>.</p>
<p><img src="/images/2023/03/posting-guidelines.png" alt="posting guidelines">
<em>The posting guidelines on our SAP-R3-L mailing list</em></p>
<p>With a rapidly growing number of community members, and multiple administrators able to deal with the discussions, the traffic, the issues and whatever else came up, the community blossomed further.</p>
<h2>Creating the SAP Community</h2>
<p>Hopefully that gives you a bit of context as to where things were when SAP decided to make its move. This was great news, and I got together with folks from O'Reilly and SAP to thrash out strategy, design, purpose and types of content that would make for a successful Web based community (because by this time mailing lists were less popular, and communities had started moving to the Web, so it made total sense).</p>
<p>We spent a few months working on this, and the result was launched in early 2003. It was super exciting, and I, along with a couple of others, including my old friend and colleague <a href="https://www.skatelescope.nz/piers-harding/">Piers Harding</a>, had been busy creating technical articles to give the website some substance so we could launch with something that wasn't completely void of content.</p>
<p><img src="/images/2023/03/sdn-screenshot.png" alt="A screenshot of the early SDN"></p>
<p>There was a blogging system too, and we used that to express our thoughts and ideas from the start. I published my <a href="https://blogs.sap.com/2003/05/30/the-sapmysql-partnership/">first blog post</a> on the new website on 30 May 2003; this was the second blog post ever on SAP Community, the first being the inaugural one three days before that from <a href="https://finnern.com/">Mark Finnern</a>, who was at SAP and designated chief community herder and organiser on the new website.</p>
<h2>Wrapping up</h2>
<p>So there you have it, my memories of the birth of the Web-based SAP Community. I'm proud to have played my part, and very happy to continue to do so in today's incarnation. The SAP Community flourishes because of the people, inside and outside of SAP. That's what a community is all about. And as long as it's about that, I think it will flourish for years to come.</p>
<h2>Further reading</h2>
<br/>
<ul>
<li><a href="https://blogs.sap.com/2005/07/04/the-sap-developer-community-10-years-ago/">The SAP developer community 10 years ago</a> (Jul 2005)</li>
<li><a href="https://qmacro.org/blog/posts/2016/03/10/the-evolution-of-the-sap-community/">The evolution of the SAP community</a> (Mar 2016)</li>
<li><a href="https://qmacro.org/blog/posts/2022/02/09/how-i-got-involved-in-the-sap-community">How I got involved in the SAP community</a> (Feb 2022)</li>
</ul>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>A deep dive into OData and CDS annotations</title>
      <link href="https://qmacro.org/blog/posts/2023/03/10/a-deep-dive-into-odata-and-cds-annotations/"/>
      <updated>2023-03-10T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2023/03/10/a-deep-dive-into-odata-and-cds-annotations/</id>
      <content type="html">
        <![CDATA[
      <p>In 2022 on our SAP Developers YouTube channel, I ran a series of live streams on the Hands-on SAP Dev show, where we went back to basics on OData. You can watch all of the episodes via this playlist: <a href="https://www.youtube.com/playlist?list=PL6RpkC85SLQDYLiN1BobWXvvnhaGErkwj">Back to basics: OData</a></p>
<p>In working through content on OData, it's hard not to notice the related topic of annotations. And I think it's fair to say that to some folks (myself included), annotations can seem somewhat mysterious, almost a dark art.</p>
<p>So I've written this deep dive post into exploring annotations, in CDS and in OData, and how they work together. It might help you better understand them, or at least feel more comfortable when you stare at them. I'd love to know what you think - please leave a comment at the bottom of this post.</p>
<p><a name="the-accompanying-repository-and-simple-app"></a></p>
<h2>The accompanying repository and simple app</h2>
<p>There's a repository that was created to accompany the series of live streams: <a href="https://github.com/SAP-samples/odata-basics-handsonsapdev/">Back to basics: OData</a>.</p>
<p>And to accompany this deep-dive post, we'll use a simple app. The specific app we'll use is the one that is built over the series of exercises in the (now archived) <a href="https://github.com/SAP-archive/cloud-cap-nodejs-codejam">repo for the SAP CodeJam on CAP with Node.js</a>.</p>
<p>The app is included in the <a href="https://github.com/SAP-samples/odata-basics-handsonsapdev/">Back to basics: OData</a> repo, specifically in the <a href="https://github.com/SAP-samples/odata-basics-handsonsapdev/tree/annotations/bookshop">bookshop</a> directory in the annotations branch.</p>
<p>In particular, we will examine specific parts of the app, namely the annotations in the <a href="https://github.com/SAP-samples/odata-basics-handsonsapdev/tree/annotations/bookshop/srv/index.cds">index.cds</a> and <a href="https://github.com/SAP-samples/odata-basics-handsonsapdev/tree/annotations/bookshop/srv/service.cds">service.cds</a> files in the <a href="https://github.com/SAP-samples/odata-basics-handsonsapdev/tree/annotations/bookshop/srv/">srv/</a> directory.</p>
<p><a name="getting-things-running"></a></p>
<h2>Getting things running</h2>
<p>If you want to play along, get things set up and running first.</p>
<p>Clone the repository, switch to tracking the annotations branch, and move into the <code>bookshop/</code> directory:</p>
<pre class="language-shell"><code class="language-shell"><span class="token function">git</span> clone https://github.com/SAP-samples/odata-basics-handsonsapdev/ <span class="token punctuation">\</span><br>  <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">cd</span> odata-basics-handsonsapdev <span class="token punctuation">\</span><br>  <span class="token operator">&amp;&amp;</span> <span class="token function">git</span> checkout annotations <span class="token punctuation">\</span><br>  <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">cd</span> bookshop</code></pre>
<p>Then start the CAP server up:</p>
<pre class="language-shell"><code class="language-shell">cds run</code></pre>
<p>You should see some output similar to this:</p>
<pre class="language-text"><code class="language-text">[cds] - loaded model from 4 file(s):<br><br>  db/schema.cds<br>  srv/index.cds<br>  ../../../home/user/.npm-global/lib/node_modules/@sap/cds-dk/node_modules/@sap/cds/common.cds<br>  srv/service.cds<br><br>[cds] - connect to db > sqlite { url: 'db.sqlite', database: 'bookshop.db' }<br>Service name: CatalogService<br>Service name: Stats<br>[cds] - serving CatalogService { path: '/catalog', impl: 'srv/service.js' }<br>[cds] - serving Stats { path: '/stats', impl: 'srv/service.js' }<br><br>[cds] - server listening on { url: 'http://localhost:4004' }<br>[cds] - launched at 3/10/2023, 2:07:18 PM, version: 6.4.0, in: 536.41ms<br>[cds] - [ terminate with ^C ]</code></pre>
<p>If so, you're all set!</p>
<p><a name="the-annotations"></a></p>
<h2>The annotations</h2>
<p>This section is fairly long, and is a journey through annotations in the service layer of the CAP application in this directory. There are the following sections:</p>
<p>We start here with a brief introduction to annotations in CAP and CDS.</p>
<p>Then we look at a singular annotation <a href="#in-servicecds">in service.cds</a>.</p>
<p>After that, we take a look at a more complex set of annotations <a href="#in-indexcds">in index.cds</a>, with an exploration of <a href="#odata-annotation-vocabularies">OData annotation vocabularies</a> in general, a specific look at one particular vocabulary (<a href="#the-ui-annotation-vocabulary">the UI annotation vocabulary</a>), a brief overview of the <a href="#syntax-for-annotations-in-cds">syntax for annotations in CDS</a>, a deep dive into <a href="#annotation-values">annotation values</a> (primitives, collections and records), how to <a href="#expressing-multiple-annotations-with-">express multiple annotations in CDS</a>, rounding off this branch of exploration with an examination of <a href="#annotation-vocabulary-references">annotation vocabulary references</a>.</p>
<p>After that exploration of theory, we're ready for <a href="#interpreting-the-detailed-annotations">interpreting the annotation details</a>, wherein we <a href="#looking-at-the-datafieldabstract-type">look at the DataFieldAbstract type</a>, the <a href="#the-uiidentification-term">UI.Identification term</a>, <a href="#the-uilineitem-term">the UI.LineItem term</a>, <a href="##the-uiselectionfields-term">the UI.SelectionFields term</a> and <a href="#the-uiheaderinfo-term">the UI.HeaderInfo term</a>, all of which are used in the annotations in <code>index.cds</code>.</p>
<p>Finally, we turn to the OData metadata document, and take some time <a href="#examining-the-odata-annotations-in-edmx">examining the OData annotations in EDMX</a>, paying close attention to <a href="#namespace-references">namespace references</a> and then <a href="#annotation-targets">annotation targets</a>, before moving on to look at the actual EDMX generated for the annotations used - the <a href="#uiidentification-annotation">UI.Identification annotation</a>, the <a href="#uiselectionfields-annotation">UI.SelectionFields annotation</a>, the <a href="#uilineitem-annotation">UI.LineItem annotation</a> and the <a href="#uiheaderinfo-annotation">UI.HeaderInfo annotation</a>. To put everything into context, <a href="#the-catalogservices-metadata">the CatalogService's metadata</a> is shown in its entirety.</p>
<p>Here's a brief overview of the annotations used in the service layer, which is part of this app. Note that the word &quot;annotation&quot; is used in two different contexts here:</p>
<ul>
<li><a href="https://cap.cloud.sap/docs/cds/annotations">Annotations in CAP</a> in CDS form are used to describe and augment core data service definitions, and are prefixed with the <code>@</code> symbol</li>
<li><a href="http://docs.oasis-open.org/odata/odata-vocabularies/v4.0/odata-vocabularies-v4.0.html">OData annotations</a>, organised into <a href="https://github.com/oasis-tcs/odata-vocabularies">vocabularies</a>, that provide extra information on an OData service's metadata and appear in the EDMX definition (in the <code>$metadata</code> document)</li>
</ul>
<p>When used in an OData context (i.e. when describing an OData service in CDS) the CAP annotations will result in valid OData annotations. These annotations will belong to either standard OData vocabularies, or SAP specific vocabularies.</p>
<blockquote>
<p>Note that &quot;A service MUST NOT require the client to understand custom annotations in order to accurately interpret a response&quot; (see the <a href="http://docs.oasis-open.org/odata/odata/v4.0/errata03/os/complete/part1-protocol/odata-v4.0-errata03-os-part1-protocol-complete.html#_Toc453752215">Vocabulary Extensibility section of OData Version 4.0. Part 1: Protocol Plus Errata 03</a>). In other words, beyond annotations in the &quot;Core&quot; vocabulary, think of further annotations as suggestions.</p>
</blockquote>
<p><a name="in-servicecds"></a></p>
<h3>In service.cds</h3>
<p>CDS annotation: <code>@readonly</code></p>
<p>Used at the entity level, this CDS annotation generates specific terms in the <a href="http://docs.oasis-open.org/odata/odata-vocabularies/v4.0/csprd01/odata-vocabularies-v4.0-csprd01.html#_Toc472083030">OData &quot;Capabilities&quot; vocabulary</a>.</p>
<p>Specifically, this line:</p>
<p><code>@readonly entity OrderInfo as projection on my.Orders ...</code></p>
<p>causes these OData annotation terms to be generated and included in the service metadata document: <code>DeleteRestrictions</code>, <code>InsertRestrictions</code> and <code>UpdateRestrictions</code>.</p>
<p>You can see this for yourself using the <code>cds</code> command line tool to generate EDMX for the <code>Stats</code> service defined within the <a href="srv/service.cds">srv/service.cds</a> file, which looks like this:</p>
<pre class="language-text"><code class="language-text">using my.bookshop as my from '../db/schema';<br><br>// ...<br><br>service Stats {<br>  @readonly entity OrderInfo as projection on my.Orders excluding {<br>    createdAt,<br>    createdBy,<br>    modifiedAt,<br>    modifiedBy,<br>    book,<br>    country<br>  }<br>}</code></pre>
<p>This is how you do it:</p>
<pre class="language-bash"><code class="language-bash">cds compile srv <span class="token parameter variable">--service</span> Stats <span class="token parameter variable">--to</span> edmx-v4</code></pre>
<p>This produces the following output - note the <code>&lt;Annotations&gt;</code> element:</p>
<pre class="language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><br><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">edmx:</span>Edmx</span> <span class="token attr-name">Version</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>4.0<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>edmx</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://docs.oasis-open.org/odata/ns/edmx<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">edmx:</span>Reference</span> <span class="token attr-name">Uri</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://oasis-tcs.github.io/odata-vocabularies/vocabularies/Org.OData.Capabilities.V1.xml<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">edmx:</span>Include</span> <span class="token attr-name">Alias</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Capabilities<span class="token punctuation">"</span></span> <span class="token attr-name">Namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Org.OData.Capabilities.V1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><br>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">edmx:</span>Reference</span><span class="token punctuation">></span></span><br>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">edmx:</span>DataServices</span><span class="token punctuation">></span></span><br>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Schema</span> <span class="token attr-name">Namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Stats<span class="token punctuation">"</span></span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://docs.oasis-open.org/odata/ns/edm<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>EntityContainer</span> <span class="token attr-name">Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>EntityContainer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>EntitySet</span> <span class="token attr-name">Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>OrderInfo<span class="token punctuation">"</span></span> <span class="token attr-name">EntityType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Stats.OrderInfo<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><br>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>EntityContainer</span><span class="token punctuation">></span></span><br>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>EntityType</span> <span class="token attr-name">Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>OrderInfo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Key</span><span class="token punctuation">></span></span><br>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PropertyRef</span> <span class="token attr-name">Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ID<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><br>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Key</span><span class="token punctuation">></span></span><br>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Property</span> <span class="token attr-name">Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ID<span class="token punctuation">"</span></span> <span class="token attr-name">Type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Edm.Guid<span class="token punctuation">"</span></span> <span class="token attr-name">Nullable</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><br>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Property</span> <span class="token attr-name">Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>quantity<span class="token punctuation">"</span></span> <span class="token attr-name">Type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Edm.Int32<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><br>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>EntityType</span><span class="token punctuation">></span></span><br>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Annotations</span> <span class="token attr-name">Target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Stats.EntityContainer/OrderInfo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Annotation</span> <span class="token attr-name">Term</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Capabilities.DeleteRestrictions<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Record</span> <span class="token attr-name">Type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Capabilities.DeleteRestrictionsType<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PropertyValue</span> <span class="token attr-name">Property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Deletable<span class="token punctuation">"</span></span> <span class="token attr-name">Bool</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><br>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Record</span><span class="token punctuation">></span></span><br>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Annotation</span><span class="token punctuation">></span></span><br>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Annotation</span> <span class="token attr-name">Term</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Capabilities.InsertRestrictions<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Record</span> <span class="token attr-name">Type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Capabilities.InsertRestrictionsType<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PropertyValue</span> <span class="token attr-name">Property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Insertable<span class="token punctuation">"</span></span> <span class="token attr-name">Bool</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><br>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Record</span><span class="token punctuation">></span></span><br>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Annotation</span><span class="token punctuation">></span></span><br>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Annotation</span> <span class="token attr-name">Term</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Capabilities.UpdateRestrictions<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Record</span> <span class="token attr-name">Type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Capabilities.UpdateRestrictionsType<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PropertyValue</span> <span class="token attr-name">Property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Updatable<span class="token punctuation">"</span></span> <span class="token attr-name">Bool</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><br>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Record</span><span class="token punctuation">></span></span><br>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Annotation</span><span class="token punctuation">></span></span><br>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Annotations</span><span class="token punctuation">></span></span><br>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Schema</span><span class="token punctuation">></span></span><br>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">edmx:</span>DataServices</span><span class="token punctuation">></span></span><br><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">edmx:</span>Edmx</span><span class="token punctuation">></span></span></code></pre>
<p>These annotation terms basically say - to those consuming apps that can interpret them - that delete, insert or update operations may not be performed on the <code>OrderInfo</code> entity.</p>
<p>In case you're wondering - these restrictions that are imposed via the <code>@readonly</code> decoration in the CDS definition are actually implemented in CAP.</p>
<p>Assuming that the service is running (with <code>cds run</code>) you can try this yourself, like this:</p>
<pre class="language-bash"><code class="language-bash"><span class="token function">curl</span><br>  <span class="token parameter variable">--silent</span> <span class="token punctuation">\</span><br>  <span class="token parameter variable">--header</span> <span class="token string">'Content-Type: application/json'</span> <span class="token punctuation">\</span><br>  <span class="token parameter variable">--include</span> <span class="token punctuation">\</span><br>  <span class="token parameter variable">--data</span> <span class="token string">'{"quantity": 10}'</span> <span class="token punctuation">\</span><br>  <span class="token parameter variable">--url</span> <span class="token string">'http://localhost:4004/stats/OrderInfo'</span></code></pre>
<p>This produces the following:</p>
<pre class="language-text"><code class="language-text">HTTP/1.1 405 Method Not Allowed<br>X-Powered-By: Express<br>x-correlation-id: 3a80f986-2acd-4663-8116-d9b39d532f31<br>OData-Version: 4.0<br>content-type: application/json;odata.metadata=minimal<br>Date: Thu, 07 Jul 2022 10:57:04 GMT<br>Connection: keep-alive<br>Keep-Alive: timeout=5<br>Content-Length: 104<br><br>{"error":{"code":"405","message":"Entity \"Stats.OrderInfo\" is read-only","@Common.numericSeverity":4}}</code></pre>
<p>Nice!</p>
<p><a name="in-indexcds"></a></p>
<h3>In index.cds</h3>
<p>In this file, <a href="srv/index.cds">srv/index.cds</a>, you can see the explicit <a href="https://cap.cloud.sap/docs/cds/cdl#annotate">annotate</a> directive in action. This is contrast to the previous example, where the <code>@readonly</code> annotation was specified directly with the definition of what was being annotated.</p>
<p>(There's a parallel here to a feature of OData annotations, and how they're served. In a similar way to how annotations in CDS can be either alongside, or separate from, the data definitions they're describing, so also can OData annotations be served in the same EDMX document (the OData service's metadata document) or as a separate resource. Not anything earth shatteringly important, but worth mentioning here.)</p>
<pre class="language-text"><code class="language-text">annotate CatalogService.Books with @(<br>    UI: {<br>        Identification: [ {Value: title} ],<br>        SelectionFields: [ title ],<br>        LineItem: [<br>            {Value: ID},<br>            {Value: title},<br>            {Value: author.name},<br>            {Value: author_ID},<br>            {Value: stock}<br>        ],<br>        HeaderInfo: {<br>            TypeName: '{i18n>Book}',<br>            TypeNamePlural: '{i18n>Books}',<br>            Title: {Value: title},<br>            Description: {Value: author.name}<br>        }<br>    }<br>);</code></pre>
<p>This example is considerably more involved than the <code>@readonly</code> example previously. Let's take it bit by bit. You may also want to refer to the <a href="https://cap.cloud.sap/docs/advanced/odata#annotations">OData Annotations section of the CAP documentation</a>.</p>
<p><a name="odata-annotation-vocabularies"></a></p>
<h4>OData annotation vocabularies</h4>
<p>First, let's consider the simple and single word &quot;readonly&quot;, and then what appears to be words (&quot;UI&quot;, &quot;Identification&quot;, &quot;LineItem&quot;, &quot;Value&quot;, etc) within a wider syntactical structure in this larger example.</p>
<p>The previous <code>@readonly</code> example was a CDS annotation that resulted in the generation of multiple OData annotations.</p>
<p>In this current example, what we're looking at are annotations that are closer to the direct use of the combination of the OData annotation concepts of &quot;vocabulary&quot; and &quot;term&quot;. To understand this better, let's start by taking a step back, and staring at the OData annotation vocabularies for a few minutes.</p>
<p>Put simply, OData annotations are expressed in the form of terms, which are grouped together into vocabularies.</p>
<p>The standards document <a href="http://docs.oasis-open.org/odata/odata-vocabularies/v4.0/odata-vocabularies-v4.0.html">OData Vocabularies Version 4.0 Committee Specification / Public Review Draft 01</a> outlines six vocabularies as follows (the summary document <a href="https://github.com/qmacro/odata-specs/blob/master/overview.md">OData specs</a> provides some information on the different document stages such as &quot;Committee Specification&quot; and &quot;Public Review&quot;):</p>
<table>
<thead>
<tr>
<th>Vocabulary</th>
<th>Namespace</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>Core</td>
<td><a href="https://github.com/oasis-tcs/odata-vocabularies/blob/main/vocabularies/Org.OData.Core.V1.md">Org.OData.Core.V1</a></td>
<td>Terms describing behavioral aspects along with annotation terms that can be used to define other vocabularies (yes, meta all the things!)</td>
</tr>
<tr>
<td>Capabilities</td>
<td><a href="https://github.com/oasis-tcs/odata-vocabularies/blob/main/vocabularies/Org.OData.Capabilities.V1.md">Org.OData.Capabilities.V1</a></td>
<td>Terms that provide a way for service authors to describe certain capabilities of an OData Service</td>
</tr>
<tr>
<td>Measures</td>
<td><a href="https://github.com/oasis-tcs/odata-vocabularies/blob/main/vocabularies/Org.OData.Measures.V1.md">Org.OData.Measures.V1</a></td>
<td>Terms describing monetary amounts and measured quantities</td>
</tr>
<tr>
<td>Validation</td>
<td><a href="https://github.com/oasis-tcs/odata-vocabularies/blob/main/vocabularies/Org.OData.Validation.V1.md">Org.OData.Validation.V1</a></td>
<td>Terms describing validation rules</td>
</tr>
<tr>
<td>Aggregation</td>
<td><a href="https://github.com/oasis-tcs/odata-vocabularies/blob/main/vocabularies/Org.OData.Aggregation.V1.md">Org.OData.Aggregation.V1</a></td>
<td>Terms describing which data in a given entity model can be aggregated, and how</td>
</tr>
<tr>
<td>Authorization</td>
<td><a href="https://github.com/oasis-tcs/odata-vocabularies/blob/main/vocabularies/Org.OData.Authorization.V1.md">Org.OData.Authorization.V1</a></td>
<td>Terms describing a web authorization flow</td>
</tr>
</tbody>
</table>
<blockquote>
<p>If you like rabbit holes, note that all the vocabularies are described in machine-readable format ... using terms in the Core vocabulary. <a href="https://github.com/oasis-tcs/odata-vocabularies/blob/main/vocabularies/Org.OData.Core.V1.xml">Even the Core vocabulary itself</a>. Don't forget to come back once you've explored!</p>
</blockquote>
<p>In the <a href="http://docs.oasis-open.org/odata/odata-vocabularies/v4.0/csprd01/odata-vocabularies-v4.0-csprd01.html#_Toc472083025">Introduction</a> section of the standards document, it says that &quot;<em>Other OData vocabularies may be created, shared, and maintained outside of this work product</em>&quot;.</p>
<p>And so there are other OData annotation vocabularies, for different purposes. SAP has created some, and they are documented publicly in the <a href="https://github.com/SAP/odata-vocabularies">SAP/odata-vocabularies</a> repository on GitHub. Amongst the SAP vocabularies, there are ones called Analytics, Communication, DataIntegration and also one called <a href="https://github.com/SAP/odata-vocabularies/blob/main/vocabularies/Common.md">Common</a> which contains terms common for all SAP vocabularies.</p>
<p><a name="the-ui-annotation-vocabulary"></a></p>
<h4>The UI annotation vocabulary</h4>
<p>Another one in that list from SAP is the <a href="https://github.com/SAP/odata-vocabularies/blob/main/vocabularies/UI.md">UI</a> vocabulary, containing terms relating to presenting data in user interfaces.</p>
<p>Staring at <a href="https://github.com/SAP/odata-vocabularies/blob/main/vocabularies/UI.md#terms">the table of Terms</a> in this vocabulary (or any for that matter) will help us interpret the CDS in <code>index.cds</code> we saw earlier, in other words, this:</p>
<pre class="language-text"><code class="language-text">annotate CatalogService.Books with @(...);</code></pre>
<p>More specifically it will help us to interpret everything inside the <code>@(...)</code>.</p>
<p>Looking at the contents of that table of terms, we see something like this (this excerpt shows just some of the many terms):</p>
<table>
<thead>
<tr>
<th style="text-align:left">Term</th>
<th style="text-align:left">Type</th>
<th style="text-align:left">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><a href="https://github.com/SAP/odata-vocabularies/blob/main/vocabularies/UI.xml#L58:~:text=%3CTerm%20Name=%22-,HeaderInfo,-%22">HeaderInfo</a></td>
<td style="text-align:left"><a href="https://github.com/SAP/odata-vocabularies/blob/main/vocabularies/UI.md#HeaderInfoType">HeaderInfoType?</a></td>
<td style="text-align:left">Information for the header area of an entity representation. HeaderInfo is mandatory for main entity types of the model</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://github.com/SAP/odata-vocabularies/blob/main/vocabularies/UI.xml#L109:~:text=%3CTerm%20Name=%22-,Identification,-%22">Identification</a></td>
<td style="text-align:left">[<a href="https://github.com/SAP/odata-vocabularies/blob/main/vocabularies/UI.md#DataFieldAbstract">DataFieldAbstract</a>]</td>
<td style="text-align:left">Collection of fields identifying the object</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://github.com/SAP/odata-vocabularies/blob/main/vocabularies/UI.xml#L114:~:text=%3CTerm%20Name=%22-,Badge,-%22">Badge</a></td>
<td style="text-align:left"><a href="https://github.com/SAP/odata-vocabularies/blob/main/vocabularies/UI.md#BadgeType">BadgeType?</a></td>
<td style="text-align:left">Information usually displayed in the form of a business card</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://github.com/SAP/odata-vocabularies/blob/main/vocabularies/UI.xml#L141:~:text=%3CTerm%20Name=%22-,LineItem,-%22">LineItem</a></td>
<td style="text-align:left">[<a href="https://github.com/SAP/odata-vocabularies/blob/main/vocabularies/UI.md#DataFieldAbstract">DataFieldAbstract</a>]</td>
<td style="text-align:left">Collection of data fields for representation in a table or list</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://github.com/SAP/odata-vocabularies/blob/main/vocabularies/UI.xml#L931:~:text=%3CTerm%20Name=%22-,SelectionFields,-%22">SelectionFields</a></td>
<td style="text-align:left">[PropertyPath]</td>
<td style="text-align:left">Properties that might be relevant for filtering a collection of entities of this type</td>
</tr>
</tbody>
</table>
<p>Note that there are terms, and there are types. A term has a value, which is of a certain type.</p>
<p>In the table we can recognize some of the content that we saw <a href="#in-indexcds">in index.cds</a> as terms in this UI Vocabulary:</p>
<ul>
<li><code>Identification</code></li>
<li><code>SelectionFields</code></li>
<li><code>LineItem</code></li>
<li><code>HeaderInfo</code></li>
</ul>
<p>Note in each case, the type is a single (camelcased) word. The word may be wrapped in square brackets, which denotes a collection of values of that type.</p>
<p>In the table exerpt above, most of the single words are also hyperlinked. For example, following <a href="https://github.com/SAP/odata-vocabularies/blob/main/vocabularies/UI.md#HeaderInfoType">HeaderInfoType</a> leads to a table of properties that belong to that type, i.e. properties that the type consists of - in other words, the type is a structure (called a record, or object, see later).</p>
<p>This is how the <code>HeaderInfoType</code> type is described, in terms of the properties within:</p>
<table>
<thead>
<tr>
<th style="text-align:left">Property</th>
<th style="text-align:left">Type</th>
<th style="text-align:left">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><a href="https://github.com/SAP/odata-vocabularies/blob/main/vocabularies/UI.xml#L63:~:text=%3CComplexType%20Name=%22-,HeaderInfoType,-%22">TypeName</a></td>
<td style="text-align:left">String</td>
<td style="text-align:left">Name of the main entity type</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://github.com/SAP/odata-vocabularies/blob/main/vocabularies/UI.xml#L67:~:text=%3CComplexType%20Name=%22-,HeaderInfoType,-%22">TypeNamePlural</a></td>
<td style="text-align:left">String</td>
<td style="text-align:left">Plural form of the name of the main entity type</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://github.com/SAP/odata-vocabularies/blob/main/vocabularies/UI.xml#L71:~:text=%3CComplexType%20Name=%22-,HeaderInfoType,-%22">Title</a></td>
<td style="text-align:left"><a href="https://github.com/SAP/odata-vocabularies/blob/main/vocabularies/UI.md#DataFieldAbstract">DataFieldAbstract?</a></td>
<td style="text-align:left">Title, e.g. for overview pages<br>This can be a DataField and any of its children, or a DataFieldForAnnotation targeting ConnectedFields.</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://github.com/SAP/odata-vocabularies/blob/main/vocabularies/UI.xml#L81:~:text=%3CComplexType%20Name=%22-,HeaderInfoType,-%22">Description</a></td>
<td style="text-align:left"><a href="https://github.com/SAP/odata-vocabularies/blob/main/vocabularies/UI.md#DataFieldAbstract">DataFieldAbstract?</a></td>
<td style="text-align:left">Description, e.g. for overview pages<br>This can be a DataField and any of its children, or a DataFieldForAnnotation targeting ConnectedFields.</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://github.com/SAP/odata-vocabularies/blob/main/vocabularies/UI.xml#L91:~:text=%3CComplexType%20Name=%22-,HeaderInfoType,-%22">Image</a> <em>(<a href="Common.md#Experimental">Experimental</a>)</em></td>
<td style="text-align:left">Stream?</td>
<td style="text-align:left">Image for an instance of the entity type. If the property has a valid value, it can be used for the visualization of the instance. If it is not available or not valid the value of the property <code>ImageUrl</code> can be used instead.</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://github.com/SAP/odata-vocabularies/blob/main/vocabularies/UI.xml#L95:~:text=%3CComplexType%20Name=%22-,HeaderInfoType,-%22">ImageUrl</a></td>
<td style="text-align:left">URL?</td>
<td style="text-align:left">Image URL for an instance of the entity type. If the property has a valid value, it can be used for the visualization of the instance. If it is not available or not valid the value of the property <code>TypeImageUrl</code> can be used instead.</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://github.com/SAP/odata-vocabularies/blob/main/vocabularies/UI.xml#L99:~:text=%3CComplexType%20Name=%22-,HeaderInfoType,-%22">TypeImageUrl</a></td>
<td style="text-align:left">URL?</td>
<td style="text-align:left">Image URL for the entity type</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://github.com/SAP/odata-vocabularies/blob/main/vocabularies/UI.xml#L103:~:text=%3CComplexType%20Name=%22-,HeaderInfoType,-%22">Initials</a> <em>(<a href="Common.md#Experimental">Experimental</a>)</em></td>
<td style="text-align:left">String?</td>
<td style="text-align:left">Latin letters to be used in case no <code>Image</code>, <code>ImageUrl</code>, or <code>TypeImageUrl</code> is present</td>
</tr>
</tbody>
</table>
<p>With this knowledge, we can now understand, for example, that the value for the <code>HeaderInfo</code> term is a record of properties including <code>TypeName</code>, <code>TypeNamePlural</code>, <code>Title</code> and so on.</p>
<p>There's one term in the main table of terms excerpt that has a type that is not hyperlinked. The term is <code>SelectionFields</code> and the type is <code>PropertyPath</code>. That's because that type is not a structure, but a single, scalar thing (also called a primitive). This implies that the value for the <code>SelectionFields</code> term is a collection of paths to properties.</p>
<blockquote>
<p>If you're wondering about the <code>?</code> suffix on some of the types, ignore it for now - it doesn't help our understanding that we need here.</p>
</blockquote>
<p><a name="syntax-for-annotations-in-cds"></a></p>
<h4>Syntax for annotations in CDS</h4>
<p>Another aspect that we need to consider when attempting to parse the annotations above, is CDS's <a href="https://cap.cloud.sap/docs/cds/cdl#annotation-syntax">annotation syntax</a>. For any given term in a vocabulary, the annotation is written as follows:</p>
<pre class="language-text"><code class="language-text">@vocabulary.term</code></pre>
<p>followed by the value for that annotation.</p>
<blockquote>
<p>There are also <a href="https://cap.cloud.sap/docs/advanced/odata#qualified-annotations">qualified annotations</a> of which you should be aware, but they're not in play in these examples.</p>
</blockquote>
<p>Multiple annotations can be specified in one go by listing them one after another, or, more commonly, by listing them inside a <code>@(...)</code> construct and separating them with commas. We can clearly see this in action in our <a href="#in-indexcds">index.cds</a> example.</p>
<p><a name="annotation-values"></a></p>
<h4>Annotation values</h4>
<p>The final piece in the puzzle to understanding and interpreting annotation definitions and the EDMX content that is generated is the set of different value types for annotation terms. If you're familiar with the core value types in many programming languages, you'll be at home here. There are:</p>
<table>
<thead>
<tr>
<th>Value Type</th>
<th>Alternative Name</th>
<th>Example</th>
</tr>
</thead>
<tbody>
<tr>
<td>Primitive</td>
<td>Scalar</td>
<td>a string, boolean value or number</td>
</tr>
<tr>
<td>Record</td>
<td>Object</td>
<td>a collection of name value pairs like this: <code>{ name1: value1, name2: value2, ... }</code></td>
</tr>
<tr>
<td>Collection</td>
<td>Array</td>
<td>a list of other types, either primitives or records, enclosed in <code>[ ... ]</code></td>
</tr>
</tbody>
</table>
<p>Examples for each of these will help us to get a feel for their general shape.</p>
<p>For these examples, we'll use the most basic of service definitions in CDS, and annotate it as appropriate.</p>
<p>The base definition looks like this:</p>
<pre class="language-text"><code class="language-text">service Northwind {<br><br>  entity Categories {<br>    key ID: Integer;<br>    description: String;<br>  }<br>}</code></pre>
<p>And the basic EDMX generated from this (see how we did it earlier with the <code>cds compile</code> command) is as follows:</p>
<pre class="language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><br><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">edmx:</span>Edmx</span> <span class="token attr-name">Version</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>4.0<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>edmx</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://docs.oasis-open.org/odata/ns/edmx<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">edmx:</span>DataServices</span><span class="token punctuation">></span></span><br>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Schema</span> <span class="token attr-name">Namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Northwind<span class="token punctuation">"</span></span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://docs.oasis-open.org/odata/ns/edm<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>EntityContainer</span> <span class="token attr-name">Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>EntityContainer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>EntitySet</span> <span class="token attr-name">Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Categories<span class="token punctuation">"</span></span> <span class="token attr-name">EntityType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Northwind.Categories<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><br>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>EntityContainer</span><span class="token punctuation">></span></span><br>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>EntityType</span> <span class="token attr-name">Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Categories<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Key</span><span class="token punctuation">></span></span><br>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PropertyRef</span> <span class="token attr-name">Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ID<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><br>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Key</span><span class="token punctuation">></span></span><br>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Property</span> <span class="token attr-name">Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ID<span class="token punctuation">"</span></span> <span class="token attr-name">Type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Edm.Int32<span class="token punctuation">"</span></span> <span class="token attr-name">Nullable</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><br>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Property</span> <span class="token attr-name">Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>description<span class="token punctuation">"</span></span> <span class="token attr-name">Type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Edm.String<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><br>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>EntityType</span><span class="token punctuation">></span></span><br>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Schema</span><span class="token punctuation">></span></span><br>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">edmx:</span>DataServices</span><span class="token punctuation">></span></span><br><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">edmx:</span>Edmx</span><span class="token punctuation">></span></span></code></pre>
<p>Note that there are no annotations in this EDMX yet.</p>
<p><strong>Primitive example: vocabulary <code>Core</code>, term <code>Description</code></strong></p>
<p>The <a href="http://docs.oasis-open.org/odata/odata-vocabularies/v4.0/csprd01/odata-vocabularies-v4.0-csprd01.html#_Toc472083029">Core vocabulary</a> contains a number of primitive terms, one of which is <a href="https://github.com/oasis-tcs/odata-vocabularies/blob/main/vocabularies/Org.OData.Core.V1.md#Description">Description</a>. This has the type <code>String</code> and itself is described as &quot;A brief description of a model element&quot;.</p>
<p>For a brief look <a href="https://www.youtube.com/clip/Ugkxr9MWdf0L1yfr5Rlv-LwIo44YQol4DUgY">down the rabbit hole</a>, take a look at the definitive description of the Core vocabulary terms, in <a href="https://github.com/oasis-tcs/odata-vocabularies/blob/main/vocabularies/Org.OData.Core.V1.xml">Org.OData.Core.V1.xml</a>, where the Core terms are defined, including <a href="https://github.com/oasis-tcs/odata-vocabularies/blob/main/vocabularies/Org.OData.Core.V1.xml#L105-L108">this one</a>:</p>
<pre class="language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Term</span> <span class="token attr-name">Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Description<span class="token punctuation">"</span></span> <span class="token attr-name">Type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Edm.String<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Annotation</span> <span class="token attr-name">Term</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Core.Description<span class="token punctuation">"</span></span> <span class="token attr-name">String</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>A brief description of a model element<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><br>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Annotation</span> <span class="token attr-name">Term</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Core.IsLanguageDependent<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><br><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Term</span><span class="token punctuation">></span></span></code></pre>
<p>Wait, what? Is the <code>Core.description</code> term itself annotated ... with the <code>Core.description</code> term? Yes. But let's pull ourselves back from the hole and continue with this example and our sanity (although if, like me, you do like to dive in, and are wondering how to annotate annotations in CDS, there's a section in the CAP documentation that covers that: <a href="https://cap.cloud.sap/docs/advanced/odata#annotating-annotations">Annotating annotations</a>).</p>
<p>Let's annotate the <code>Categories</code> entity type with this term (there are different ways to add annotations in CDS - refer to <a href="https://cap.cloud.sap/docs/cds/cdl#annotation-syntax">the CAP annotation syntax</a> for more information):</p>
<p>This results in:</p>
<pre class="language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><br><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">edmx:</span>Edmx</span> <span class="token attr-name">Version</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>4.0<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>edmx</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://docs.oasis-open.org/odata/ns/edmx<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">edmx:</span>Reference</span> <span class="token attr-name">Uri</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://oasis-tcs.github.io/odata-vocabularies/vocabularies/Org.OData.Core.V1.xml<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">edmx:</span>Include</span> <span class="token attr-name">Alias</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Core<span class="token punctuation">"</span></span> <span class="token attr-name">Namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Org.OData.Core.V1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><br>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">edmx:</span>Reference</span><span class="token punctuation">></span></span><br>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">edmx:</span>DataServices</span><span class="token punctuation">></span></span><br>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Schema</span> <span class="token attr-name">Namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Northwind<span class="token punctuation">"</span></span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://docs.oasis-open.org/odata/ns/edm<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>EntityContainer</span> <span class="token attr-name">Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>EntityContainer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>EntitySet</span> <span class="token attr-name">Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Categories<span class="token punctuation">"</span></span> <span class="token attr-name">EntityType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Northwind.Categories<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><br>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>EntityContainer</span><span class="token punctuation">></span></span><br>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>EntityType</span> <span class="token attr-name">Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Categories<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Key</span><span class="token punctuation">></span></span><br>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PropertyRef</span> <span class="token attr-name">Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ID<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><br>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Key</span><span class="token punctuation">></span></span><br>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Property</span> <span class="token attr-name">Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ID<span class="token punctuation">"</span></span> <span class="token attr-name">Type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Edm.Int32<span class="token punctuation">"</span></span> <span class="token attr-name">Nullable</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><br>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Property</span> <span class="token attr-name">Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>description<span class="token punctuation">"</span></span> <span class="token attr-name">Type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Edm.String<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><br>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>EntityType</span><span class="token punctuation">></span></span><br>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Annotations</span> <span class="token attr-name">Target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Northwind.Categories<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Annotation</span> <span class="token attr-name">Term</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Core.description<span class="token punctuation">"</span></span> <span class="token attr-name">String</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>The general type of product<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><br>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Annotations</span><span class="token punctuation">></span></span><br>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Schema</span><span class="token punctuation">></span></span><br>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">edmx:</span>DataServices</span><span class="token punctuation">></span></span><br><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">edmx:</span>Edmx</span><span class="token punctuation">></span></span></code></pre>
<p>Picking out the annotations here, we see this:</p>
<pre class="language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Annotations</span> <span class="token attr-name">Target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Northwind.Categories<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Annotation</span> <span class="token attr-name">Term</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Core.description<span class="token punctuation">"</span></span> <span class="token attr-name">String</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>The general type of product<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><br><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Annotations</span><span class="token punctuation">></span></span></code></pre>
<p>Set within an <code>&lt;Annotations&gt;</code> element based container that is used to identify the target of the annotations contained within, the single <code>&lt;Annotation&gt;</code> element uses attributes to convey the term and the primitive value. Nice and simple.</p>
<p><strong>Record example: vocabulary <code>Capabilities</code>, term <code>DeleteRestrictions</code></strong></p>
<p>This is one we've seen before. The standard <a href="http://docs.oasis-open.org/odata/odata-vocabularies/v4.0/csprd01/odata-vocabularies-v4.0-csprd01.html#_Toc472083030">Capabilities vocabulary</a> contains the <a href="https://github.com/oasis-tcs/odata-vocabularies/blob/main/vocabularies/Org.OData.Capabilities.V1.md#DeleteRestrictions">DeleteRestrictions</a> term, the value for which is a record, of type <a href="https://github.com/oasis-tcs/odata-vocabularies/blob/main/vocabularies/Org.OData.Capabilities.V1.md#DeleteRestrictionsType">DeleteRestrictionsType</a>.</p>
<p>The definitive definition of this can be found in <a href="https://github.com/oasis-tcs/odata-vocabularies/blob/main/vocabularies/Org.OData.Capabilities.V1.xml#L791">Org.OData.Capabilities.V1.xml</a>, as a combination of two things:</p>
<ul>
<li>the term itself (<code>DeleteRestrictions</code>)</li>
<li>a definition of the type (<code>DeleteRestrictionsType</code>)</li>
</ul>
<p>The term is defined thus:</p>
<pre class="language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Term</span> <span class="token attr-name">Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>DeleteRestrictions<span class="token punctuation">"</span></span> <span class="token attr-name">Type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Capabilities.DeleteRestrictionsType<span class="token punctuation">"</span></span> <span class="token attr-name">Nullable</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span> <span class="token attr-name">AppliesTo</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>EntitySet Singleton Collection<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Annotation</span> <span class="token attr-name">Term</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Core.AppliesViaContainer<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><br>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Annotation</span> <span class="token attr-name">Term</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Core.Description<span class="token punctuation">"</span></span> <span class="token attr-name">String</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Restrictions on delete operations<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><br><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Term</span><span class="token punctuation">></span></span></code></pre>
<p>The term itself is annotated with a couple of terms from the Core vocabulary too. But what's important here is that the type of the term. The type of the <code>Description</code> term in the <code>Core</code> vocabulary term's type is declared as <code>Edm.String</code>:</p>
<pre class="language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Term</span> <span class="token attr-name">Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Description<span class="token punctuation">"</span></span> <span class="token attr-name">Type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Edm.String<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre>
<p>But for this <code>Capabilities</code> vocabulary's <code>DeleteRestrictions</code> term, the type is declared as <code>Capabilities.DeleteRestrictionsType</code>. Moreover, this type definition comes next, in the form of a normal OData EDMX <code>ComplexType</code> definition, something we'd see in other OData services, outside the context of just annotations, to describe thing such as cities or locations, like in the <a href="https://services.odata.org/V4/TripPinServiceRW/$metadata">OData metadata document for the V4 sample OData service &quot;TripPin&quot;</a>:</p>
<pre class="language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">edmx:</span>Edmx</span> <span class="token attr-name">Version</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>4.0<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>edmx</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://docs.oasis-open.org/odata/ns/edmx<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">edmx:</span>DataServices</span><span class="token punctuation">></span></span><br>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Schema</span> <span class="token attr-name">Namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Microsoft.OData.SampleService.Models.TripPin<span class="token punctuation">"</span></span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://docs.oasis-open.org/odata/ns/edm<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ComplexType</span> <span class="token attr-name">Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>City<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Property</span> <span class="token attr-name">Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>CountryRegion<span class="token punctuation">"</span></span> <span class="token attr-name">Type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Edm.String<span class="token punctuation">"</span></span> <span class="token attr-name">Nullable</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><br>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Property</span> <span class="token attr-name">Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Name<span class="token punctuation">"</span></span> <span class="token attr-name">Type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Edm.String<span class="token punctuation">"</span></span> <span class="token attr-name">Nullable</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><br>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Property</span> <span class="token attr-name">Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Region<span class="token punctuation">"</span></span> <span class="token attr-name">Type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Edm.String<span class="token punctuation">"</span></span> <span class="token attr-name">Nullable</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><br>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ComplexType</span><span class="token punctuation">></span></span><br>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ComplexType</span> <span class="token attr-name">Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Location<span class="token punctuation">"</span></span> <span class="token attr-name">OpenType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Property</span> <span class="token attr-name">Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Address<span class="token punctuation">"</span></span> <span class="token attr-name">Type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Edm.String<span class="token punctuation">"</span></span> <span class="token attr-name">Nullable</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><br>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Property</span> <span class="token attr-name">Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>City<span class="token punctuation">"</span></span> <span class="token attr-name">Type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Microsoft.OData.SampleService.Models.TripPin.City<span class="token punctuation">"</span></span> <span class="token attr-name">Nullable</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><br>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ComplexType</span><span class="token punctuation">></span></span><br>  ...</code></pre>
<p>So record style annotation types are defined with the <code>&lt;ComplexType&gt;</code> element, and this <code>DeleteRestrictionsType</code> <a href="https://github.com/oasis-tcs/odata-vocabularies/blob/main/vocabularies/Org.OData.Capabilities.V1.xml#L791-L827">looks like this</a> (to keep it brief, only a few properties are shown here):</p>
<pre class="language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ComplexType</span> <span class="token attr-name">Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>DeleteRestrictionsType<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Property</span> <span class="token attr-name">Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Deletable<span class="token punctuation">"</span></span> <span class="token attr-name">Type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Edm.Boolean<span class="token punctuation">"</span></span> <span class="token attr-name">Nullable</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span> <span class="token attr-name">DefaultValue</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Annotation</span> <span class="token attr-name">Term</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Core.Description<span class="token punctuation">"</span></span> <span class="token attr-name">String</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Entities can be deleted<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><br>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Property</span><span class="token punctuation">></span></span><br>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Property</span> <span class="token attr-name">Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>NonDeletableNavigationProperties<span class="token punctuation">"</span></span> <span class="token attr-name">Type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Collection(Edm.NavigationPropertyPath)<span class="token punctuation">"</span></span> <span class="token attr-name">Nullable</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Annotation</span> <span class="token attr-name">Term</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Core.Description<span class="token punctuation">"</span></span> <span class="token attr-name">String</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>These navigation properties do not allow DeleteLink requests<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><br>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Property</span><span class="token punctuation">></span></span><br>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Property</span> <span class="token attr-name">Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>MaxLevels<span class="token punctuation">"</span></span> <span class="token attr-name">Type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Edm.Int32<span class="token punctuation">"</span></span> <span class="token attr-name">Nullable</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span> <span class="token attr-name">DefaultValue</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>-1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Annotation</span> <span class="token attr-name">Term</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Core.Description<span class="token punctuation">"</span></span> <span class="token attr-name">String</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>The maximum number of navigation properties that can be traversed when addressing the collection to delete from or the entity to delete. A value of -1 indicates there is no restriction.<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><br>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Property</span><span class="token punctuation">></span></span><br><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ComplexType</span><span class="token punctuation">></span></span></code></pre>
<p>Where have we seen this term in use before? In the EDMX generated from the <code>@readonly</code> annotation <a href="#in-servicecds">in service.cds</a>. Here's the relevant exerpt from the XML we saw earlier:</p>
<pre class="language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Annotations</span> <span class="token attr-name">Target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Stats.EntityContainer/OrderInfo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Annotation</span> <span class="token attr-name">Term</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Capabilities.DeleteRestrictions<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Record</span> <span class="token attr-name">Type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Capabilities.DeleteRestrictionsType<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PropertyValue</span> <span class="token attr-name">Property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Deletable<span class="token punctuation">"</span></span> <span class="token attr-name">Bool</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><br>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Record</span><span class="token punctuation">></span></span><br>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Annotation</span><span class="token punctuation">></span></span><br>  ...<br><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Annotations</span><span class="token punctuation">></span></span></code></pre>
<p>Having meditated a little on how these terms and types are defined, we can more comfortably approach the EDMX annotation content and pick out what's what. In this excerpt, we can now understand:</p>
<ul>
<li>the annotation is targeting the <code>OrderInfo</code> entity set due to the value of the <code>Target</code> attribute in the container <code>&lt;Annotations&gt;</code> element</li>
<li>the type of the annotation itself is a record, which means there's no primitive value conveyed as an attribute in the <code>&lt;Annotation&gt;</code> element</li>
<li>instead, the <code>&lt;Annotation&gt;</code> element contains a child <code>&lt;Record&gt;</code> element</li>
<li>that <code>&lt;Record&gt;</code> element is described by the type <code>Capabilities.DeleteRestrictionsType</code></li>
<li>it contains a single property / value pair, in the form of a <code>&lt;PropertyValue&gt;</code> element; attributes in this element convey the property (<code>Deletable</code>) and the corresponding value (<code>false</code>)</li>
</ul>
<p>Indeed, the content of the <code>&lt;PropertyValue&gt;</code> element here makes sense to us now, because we've seen the appropriate definition in the <code>&lt;ComplexType&gt;</code> where the <code>DeleteRestrictionsType</code> is defined:</p>
<pre class="language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Property</span> <span class="token attr-name">Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Deletable<span class="token punctuation">"</span></span> <span class="token attr-name">Type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Edm.Boolean<span class="token punctuation">"</span></span> <span class="token attr-name">Nullable</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span> <span class="token attr-name">DefaultValue</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Annotation</span> <span class="token attr-name">Term</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Core.Description<span class="token punctuation">"</span></span> <span class="token attr-name">String</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Entities can be deleted<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><br><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Property</span><span class="token punctuation">></span></span></code></pre>
<p>Remember that the CDS annotation used, <code>@readonly</code>, is basically expanded into the appropriate terms. There's a <a href="https://cap.cloud.sap/docs/advanced/fiori#prefer-readonly-mandatory-">section in the CAP documentation on Adding Fiori apps to projects</a> that shows us what the actual equivalent of this shorthand <code>@readonly</code> annotation is:</p>
<pre class="language-text"><code class="language-text">entity Categories @(Capabilities:{<br>  InsertRestrictions.Insertable: false,<br>  UpdateRestrictions.Updatable: false,<br>  DeleteRestrictions.Deletable: false<br>}) {<br>  ...<br>}</code></pre>
<p>(The other annotations here are also generated in the EDMX, but we've just focused on the <code>Capabilities.DeleteRestrictions</code> term for now.)</p>
<p>We're getting closer to being fully comfortable with the CDS annotation constructs <a href="#in-indexcds">in index.cds</a>. And in fact here we can see something that links where we are on the journey with what we saw back there. And that is the way that the actual <code>Capabilities</code> terms, along with the values for the properties of the corresponding records, are expressed.</p>
<p>Consider that, in the context of a term that is described by a record type, we have three levels:</p>
<ul>
<li>Vocabulary</li>
<li>Term</li>
<li>Property (via Type)</li>
</ul>
<p>In the <code>Capabilities</code> vocabulary, the <code>DeleteRestrictions</code> term is described by the <code>DeleteRestrictionsType</code> type, which contains a number of properties, one of which is <code>Deletable</code>. This property is written in CDS annotation terms in a dotted notation, followed by a colon, and then the value</p>
<pre class="language-text"><code class="language-text">Capabilities.DeleteRestrictions.Deletable: false</code></pre>
<p>This expression is not exactly what we see in the longhand equivalent of <code>@readonly</code> above, but we can see that it works, by using it to annotate our test <code>Categories</code> entity precisely:</p>
<pre class="language-text"><code class="language-text">service Northwind {<br>  @Capabilities.DeleteRestrictions.Deletable: false<br>  entity Categories {<br>    key ID: Integer;<br>    description: String;<br>  }<br>}</code></pre>
<p>This will cause the following to be generated:</p>
<pre class="language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><br><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">edmx:</span>Edmx</span> <span class="token attr-name">Version</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>4.0<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>edmx</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://docs.oasis-open.org/odata/ns/edmx<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">edmx:</span>Reference</span> <span class="token attr-name">Uri</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://oasis-tcs.github.io/odata-vocabularies/vocabularies/Org.OData.Capabilities.V1.xml<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">edmx:</span>Include</span> <span class="token attr-name">Alias</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Capabilities<span class="token punctuation">"</span></span> <span class="token attr-name">Namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Org.OData.Capabilities.V1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><br>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">edmx:</span>Reference</span><span class="token punctuation">></span></span><br>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">edmx:</span>DataServices</span><span class="token punctuation">></span></span><br>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Schema</span> <span class="token attr-name">Namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Northwind<span class="token punctuation">"</span></span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://docs.oasis-open.org/odata/ns/edm<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>EntityContainer</span> <span class="token attr-name">Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>EntityContainer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>EntitySet</span> <span class="token attr-name">Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Categories<span class="token punctuation">"</span></span> <span class="token attr-name">EntityType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Northwind.Categories<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><br>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>EntityContainer</span><span class="token punctuation">></span></span><br>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>EntityType</span> <span class="token attr-name">Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Categories<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Key</span><span class="token punctuation">></span></span><br>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PropertyRef</span> <span class="token attr-name">Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ID<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><br>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Key</span><span class="token punctuation">></span></span><br>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Property</span> <span class="token attr-name">Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ID<span class="token punctuation">"</span></span> <span class="token attr-name">Type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Edm.Int32<span class="token punctuation">"</span></span> <span class="token attr-name">Nullable</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><br>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Property</span> <span class="token attr-name">Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>description<span class="token punctuation">"</span></span> <span class="token attr-name">Type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Edm.String<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><br>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>EntityType</span><span class="token punctuation">></span></span><br>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Annotations</span> <span class="token attr-name">Target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Northwind.EntityContainer/Categories<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Annotation</span> <span class="token attr-name">Term</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Capabilities.DeleteRestrictions<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Record</span> <span class="token attr-name">Type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Capabilities.DeleteRestrictionsType<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PropertyValue</span> <span class="token attr-name">Property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Deletable<span class="token punctuation">"</span></span> <span class="token attr-name">Bool</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><br>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Record</span><span class="token punctuation">></span></span><br>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Annotation</span><span class="token punctuation">></span></span><br>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Annotations</span><span class="token punctuation">></span></span><br>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Schema</span><span class="token punctuation">></span></span><br>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">edmx:</span>DataServices</span><span class="token punctuation">></span></span><br><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">edmx:</span>Edmx</span><span class="token punctuation">></span></span></code></pre>
<p>If you're wondering about the lack of <code>@(...)</code> in this example, rest assured, we'll get to it.</p>
<p><strong>Collection example: vocabulary <code>Capabilities</code>, term <code>DeleteRestrictions</code></strong></p>
<p>The last value type, collection, is used to express an array of values. Those values themselves can be primitive, or they can be records, which in turn contain further values. This is the same concept that can be found in data structures when programming or using declarative modeling in notations such as JSON. For example, a collection, or an array can contain a list of scalars:</p>
<pre class="language-json"><code class="language-json"><span class="token punctuation">[</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token punctuation">]</span></code></pre>
<p>Or it can contain more complex values such as objects; this is how JSON representations of OData entity set resources are typically expressed, such as this list of books <a href="#getting-things-running">from our running app</a>, at the location <a href="http://localhost:4004/catalog/Books">http://localhost:4004/catalog/Books</a>, specifically conveyed in the <code>value</code> property here (which is a JSON array <code>[...]</code>):</p>
<pre class="language-json"><code class="language-json"><span class="token punctuation">{</span><br>  <span class="token property">"value"</span><span class="token operator">:</span> <span class="token punctuation">[</span><br>    <span class="token punctuation">{</span><br>      <span class="token property">"ID"</span><span class="token operator">:</span> <span class="token number">201</span><span class="token punctuation">,</span><br>      <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"Wuthering Heights"</span><span class="token punctuation">,</span><br>      <span class="token property">"stock"</span><span class="token operator">:</span> <span class="token number">12</span><span class="token punctuation">,</span><br>      <span class="token property">"author_ID"</span><span class="token operator">:</span> <span class="token number">101</span><br>    <span class="token punctuation">}</span><span class="token punctuation">,</span><br>    <span class="token punctuation">{</span><br>      <span class="token property">"ID"</span><span class="token operator">:</span> <span class="token number">207</span><span class="token punctuation">,</span><br>      <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"Jane Eyre"</span><span class="token punctuation">,</span><br>      <span class="token property">"stock"</span><span class="token operator">:</span> <span class="token number">11</span><span class="token punctuation">,</span><br>      <span class="token property">"author_ID"</span><span class="token operator">:</span> <span class="token number">107</span><br>    <span class="token punctuation">}</span><span class="token punctuation">,</span><br>    <span class="token punctuation">{</span><br>      <span class="token property">"ID"</span><span class="token operator">:</span> <span class="token number">251</span><span class="token punctuation">,</span><br>      <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"The Raven"</span><span class="token punctuation">,</span><br>      <span class="token property">"stock"</span><span class="token operator">:</span> <span class="token number">333</span><span class="token punctuation">,</span><br>      <span class="token property">"author_ID"</span><span class="token operator">:</span> <span class="token number">150</span><br>    <span class="token punctuation">}</span><br>  <span class="token punctuation">]</span><br><span class="token punctuation">}</span></code></pre>
<blockquote>
<p>Of course, in JSON and in some programming languages, these arrays can contain elements of different types, but in this context of annotation value types, the child elements will all be the same (scalars, objects, etc).</p>
</blockquote>
<p>For an example of a collection value type, we'll turn to the SAP <a href="https://github.com/SAP/odata-vocabularies/blob/main/vocabularies/UI.md">UI vocabulary</a>, and specifically the <code>SelectionFields</code> term, which has the following description: &quot;Properties that might be relevant for filtering a collection of entities of this type&quot;. The term is described as having this type:</p>
<pre class="language-text"><code class="language-text">[PropertyPath]</code></pre>
<p>The collection notation <code>[...]</code> is reflected in the <a href="https://github.com/SAP/odata-vocabularies/blob/main/vocabularies/UI.xml">XML based definition of the vocabulary</a> thus:</p>
<pre class="language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Term</span> <span class="token attr-name">Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>SelectionFields<span class="token punctuation">"</span></span> <span class="token attr-name">Type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Collection(Edm.PropertyPath)<span class="token punctuation">"</span></span> <span class="token attr-name">Nullable</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span> <span class="token attr-name">AppliesTo</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>EntityType<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Annotation</span> <span class="token attr-name">Term</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UI.ThingPerspective<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><br>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Annotation</span> <span class="token attr-name">Term</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Core.Description<span class="token punctuation">"</span></span> <span class="token attr-name">String</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Properties that might be relevant for filtering a collection of entities of this type<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><br><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Term</span><span class="token punctuation">></span></span></code></pre>
<blockquote>
<p>While the previous vocabularies we've examined recently have been OASIS standard vocabularies with namespaces such as <code>Org.OData.Core.V1</code> and <code>Org.OData.Capabilities.V1</code>, this vocabulary from SAP has the namespace <code>com.sap.vocabularies.UI.v1</code>.</p>
</blockquote>
<p>Again, note that this annotation term is itself annotated. But more importantly here note the term type is expressed as a <code>Collection(...)</code> of the type <code>Edm.PropertyPath</code>. This is the definitive evidence that the <code>SelectionFields</code> term has a value which is a collection.</p>
<p>Why don't we take the example of the <code>SelectionFields</code> term from <a href="#in-indexcds">in index.cds</a> and apply it to our simple <code>Categories</code> entity:</p>
<pre class="language-text"><code class="language-text">service Northwind {<br>  @UI.SelectionFields: [ ID, description ]<br>  entity Categories {<br>    key ID: Integer;<br>    description: String;<br>  }<br>}</code></pre>
<p>When compiled to EDMX, this is what we get:</p>
<pre class="language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><br><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">edmx:</span>Edmx</span> <span class="token attr-name">Version</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>4.0<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>edmx</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://docs.oasis-open.org/odata/ns/edmx<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">edmx:</span>Reference</span> <span class="token attr-name">Uri</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://sap.github.io/odata-vocabularies/vocabularies/UI.xml<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">edmx:</span>Include</span> <span class="token attr-name">Alias</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UI<span class="token punctuation">"</span></span> <span class="token attr-name">Namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.sap.vocabularies.UI.v1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><br>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">edmx:</span>Reference</span><span class="token punctuation">></span></span><br>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">edmx:</span>DataServices</span><span class="token punctuation">></span></span><br>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Schema</span> <span class="token attr-name">Namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Northwind<span class="token punctuation">"</span></span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://docs.oasis-open.org/odata/ns/edm<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>EntityContainer</span> <span class="token attr-name">Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>EntityContainer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>EntitySet</span> <span class="token attr-name">Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Categories<span class="token punctuation">"</span></span> <span class="token attr-name">EntityType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Northwind.Categories<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><br>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>EntityContainer</span><span class="token punctuation">></span></span><br>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>EntityType</span> <span class="token attr-name">Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Categories<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Key</span><span class="token punctuation">></span></span><br>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PropertyRef</span> <span class="token attr-name">Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ID<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><br>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Key</span><span class="token punctuation">></span></span><br>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Property</span> <span class="token attr-name">Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ID<span class="token punctuation">"</span></span> <span class="token attr-name">Type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Edm.Int32<span class="token punctuation">"</span></span> <span class="token attr-name">Nullable</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><br>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Property</span> <span class="token attr-name">Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>description<span class="token punctuation">"</span></span> <span class="token attr-name">Type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Edm.String<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><br>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>EntityType</span><span class="token punctuation">></span></span><br>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Annotations</span> <span class="token attr-name">Target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Northwind.Categories<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Annotation</span> <span class="token attr-name">Term</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UI.SelectionFields<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Collection</span><span class="token punctuation">></span></span><br>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PropertyPath</span><span class="token punctuation">></span></span>ID<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>PropertyPath</span><span class="token punctuation">></span></span><br>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PropertyPath</span><span class="token punctuation">></span></span>description<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>PropertyPath</span><span class="token punctuation">></span></span><br>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Collection</span><span class="token punctuation">></span></span><br>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Annotation</span><span class="token punctuation">></span></span><br>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Annotations</span><span class="token punctuation">></span></span><br>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Schema</span><span class="token punctuation">></span></span><br>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">edmx:</span>DataServices</span><span class="token punctuation">></span></span><br><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">edmx:</span>Edmx</span><span class="token punctuation">></span></span></code></pre>
<p>The collection type is clearly comprehensible to us; even the name of the <code>&lt;PropertyPath&gt;</code> elements that are therein contained are not unfamiliar now (remember, the type of the <code>SelectionFields</code> was is described like this: <code>[PropertyPath]</code>). There's nothing within the <code>&lt;Annotations&gt;</code> element that is a mystery to us.</p>
<p><a name="expressing-multiple-annotations-with-"></a></p>
<h4>Expressing multiple annotations with @(...)</h4>
<p>The examples so far have been single and separate. Using the <code>Capabilities</code> vocabulary's <code>DeleteRestrictions</code> term here, the <code>Core</code> vocabulary's <code>Description</code> term there, and the <code>UI</code> vocabulary's <code>SelectionFields</code> term yet somewhere else.</p>
<p>That's fine, and these can all be included together for an entity, as follows:</p>
<pre class="language-text"><code class="language-text">service Northwind {<br>  @Core.Description: 'The general type of product'<br>  @Capabilities.DeleteRestrictions.Deletable: false<br>  @UI.SelectionFields: [ ID, title ]<br>  entity Categories {<br>    key ID: Integer;<br>    description: String;<br>  }<br>}</code></pre>
<p>Often there's a need to use multiple annotations in the same vocabulary. And in order to avoid repeating the vocabulary name, the <code>@(...)</code> construct can be used, in conjunction with curly braces. It might help to illustrate this first by considering an alternative (albeit extreme) way of expressing the <code>DeleteRestrictions</code> annotation:</p>
<pre class="language-text"><code class="language-text">@(Capabilities: { DeleteRestrictions: { Deletable: false } } )</code></pre>
<p>With extra whitespace, this looks like this:</p>
<pre class="language-text"><code class="language-text">@(<br>  Capabilities: {<br>    DeleteRestrictions: {<br>      Deletable: false<br>    }<br>  }<br>)</code></pre>
<blockquote>
<p>The <code>@(...)</code> construct can also be used to group unrelated annotations too, if you wish.</p>
</blockquote>
<p>Each &quot;node&quot; in the dotted hierarchy is exploded into a map (or object) of property and value pairs. Using this syntactical approach, it's easy to see the possibilities open up for expressing multiple terms in the same vocabulary. And this is exactly what's happening <a href="#in-indexcds">in index.cds</a>, as we'll see.</p>
<pre class="language-text"><code class="language-text">annotate CatalogService.Books with @(<br>    UI: {<br>        Identification: [ {Value: title} ],<br>        SelectionFields: [ title ],<br>        LineItem: [<br>            {Value: ID},<br>            {Value: title},<br>            {Value: author.name},<br>            {Value: author_ID},<br>            {Value: stock}<br>        ],<br>        HeaderInfo: {<br>            TypeName: '{i18n>Book}',<br>            TypeNamePlural: '{i18n>Books}',<br>            Title: {Value: title},<br>            Description: {Value: author.name}<br>        }<br>    }<br>);</code></pre>
<p><a name="annotation-vocabulary-references"></a></p>
<h4>Annotation vocabulary references</h4>
<p>Before we leave this long but hopefully enlightening digression, there's one more thing to stare at in the annotation goodness that we find in the OData metadata documents, i.e. in the generated EDMX. For each of the primitive, record and collection examples, we've focused on the <code>&lt;Annotations&gt;</code> element in the XML. But there are elements earlier on that are also related.</p>
<p>This is the EDMX from the primitive value example earlier:</p>
<pre class="language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><br><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">edmx:</span>Edmx</span> <span class="token attr-name">Version</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>4.0<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>edmx</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://docs.oasis-open.org/odata/ns/edmx<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">edmx:</span>Reference</span> <span class="token attr-name">Uri</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://oasis-tcs.github.io/odata-vocabularies/vocabularies/Org.OData.Core.V1.xml<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">edmx:</span>Include</span> <span class="token attr-name">Alias</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Core<span class="token punctuation">"</span></span> <span class="token attr-name">Namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Org.OData.Core.V1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><br>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">edmx:</span>Reference</span><span class="token punctuation">></span></span><br>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">edmx:</span>DataServices</span><span class="token punctuation">></span></span><br>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Schema</span> <span class="token attr-name">Namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Northwind<span class="token punctuation">"</span></span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://docs.oasis-open.org/odata/ns/edm<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>EntityContainer</span> <span class="token attr-name">Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>EntityContainer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>EntitySet</span> <span class="token attr-name">Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Categories<span class="token punctuation">"</span></span> <span class="token attr-name">EntityType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Northwind.Categories<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><br>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>EntityContainer</span><span class="token punctuation">></span></span><br>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>EntityType</span> <span class="token attr-name">Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Categories<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Key</span><span class="token punctuation">></span></span><br>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PropertyRef</span> <span class="token attr-name">Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ID<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><br>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Key</span><span class="token punctuation">></span></span><br>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Property</span> <span class="token attr-name">Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ID<span class="token punctuation">"</span></span> <span class="token attr-name">Type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Edm.Int32<span class="token punctuation">"</span></span> <span class="token attr-name">Nullable</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><br>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Property</span> <span class="token attr-name">Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>description<span class="token punctuation">"</span></span> <span class="token attr-name">Type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Edm.String<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><br>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>EntityType</span><span class="token punctuation">></span></span><br>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Annotations</span> <span class="token attr-name">Target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Northwind.Categories<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Annotation</span> <span class="token attr-name">Term</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Core.description<span class="token punctuation">"</span></span> <span class="token attr-name">String</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>The general type of product<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><br>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Annotations</span><span class="token punctuation">></span></span><br>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Schema</span><span class="token punctuation">></span></span><br>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">edmx:</span>DataServices</span><span class="token punctuation">></span></span><br><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">edmx:</span>Edmx</span><span class="token punctuation">></span></span></code></pre>
<p>The annotation itself is <code>&lt;Annotation Term=&quot;Core.description&quot; String=&quot;The general type of product&quot;/&gt;</code>.</p>
<p>In the EDMX, before the <code>&lt;DataServices&gt;</code> section (which contains the <code>&lt;Schema&gt;</code> which in turn contains the definitions of the annotations, entity sets, entity types, complex types and so on), there is a <code>&lt;edmx:Reference&gt;</code> to the <code>Core</code> vocabulary namespace.</p>
<pre class="language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">edmx:</span>Reference</span> <span class="token attr-name">Uri</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://oasis-tcs.github.io/odata-vocabularies/vocabularies/Org.OData.Core.V1.xml<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">edmx:</span>Include</span> <span class="token attr-name">Alias</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Core<span class="token punctuation">"</span></span> <span class="token attr-name">Namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Org.OData.Core.V1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><br><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">edmx:</span>Reference</span><span class="token punctuation">></span></span></code></pre>
<p>This qualifies the <code>Core</code> vocabulary prefixes on the terms used, and includes the relevant vocabulary namespace <code>Org.OData.Core.V1</code> and also the canonical URL where the definition can be found, i.e. <a href="https://oasis-tcs.github.io/odata-vocabularies/vocabularies/Org.OData.Core.V1.xml">https://oasis-tcs.github.io/odata-vocabularies/vocabularies/Org.OData.Core.V1.xml</a>.</p>
<p>Now you're aware of these, you'll start to notice their existence, to pick them out of the XML noise at the start of the metadata documents.</p>
<p><a name="interpreting-the-detailed-annotations"></a></p>
<h3>Interpreting the detailed annotations</h3>
<p>OK, it's time to revisit the annotations <a href="#in-indexcds">in index.cds</a>, examine them one by one, and make sure we understand what's generated in the EDMX, and why. Here are the annotations again:</p>
<pre class="language-text"><code class="language-text">annotate CatalogService.Books with @(<br>    UI: {<br>        Identification: [ {Value: title} ],<br>        SelectionFields: [ title ],<br>        LineItem: [<br>            {Value: ID},<br>            {Value: title},<br>            {Value: author.name},<br>            {Value: author_ID},<br>            {Value: stock}<br>        ],<br>        HeaderInfo: {<br>            TypeName: '{i18n>Book}',<br>            TypeNamePlural: '{i18n>Books}',<br>            Title: {Value: title},<br>            Description: {Value: author.name}<br>        }<br>    }<br>);</code></pre>
<p>First, note that this is all of the contents of the <a href="srv/index.cds">srv/index.cds</a> file. There are no entity type definitions in here. This is an example of keeping the annotations separate; not only via the <code>annotate</code> directive, but also in a different file.</p>
<p>The entity type being annotated is <code>Books</code>, within the <code>CatalogService</code> service, i.e. this reference here in <a href="srv/service.cds">srv/service.cds</a>:</p>
<pre class="language-text"><code class="language-text">using my.bookshop as my from '../db/schema';<br><br>service CatalogService {<br>  entity Books as projection on my.Books;<br>  ...<br>}</code></pre>
<p>The <code>@(...)</code> construct is being used to group annotations together. In fact, staring at the structure within, we can see that all of the annotations here are terms from the <code>UI</code> vocabulary, along with their types (from the <a href="https://github.com/SAP/odata-vocabularies/blob/main/vocabularies/UI.md">UI Vocabulary</a> resource):</p>
<table>
<thead>
<tr>
<th>Vocabulary</th>
<th>Term</th>
<th>Type</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>UI</code></td>
<td><code>Identification</code></td>
<td><code>[DataFieldAbstract]</code></td>
</tr>
<tr>
<td><code>UI</code></td>
<td><code>SelectionFields</code></td>
<td><code>[PropertyPath]</code></td>
</tr>
<tr>
<td><code>UI</code></td>
<td><code>LineItem</code></td>
<td><code>[DataFieldAbstract]</code></td>
</tr>
<tr>
<td><code>UI</code></td>
<td><code>HeaderInfo</code></td>
<td><code>HeaderInfoType</code></td>
</tr>
</tbody>
</table>
<p><a name="looking-at-the-datafieldabstract-type"></a></p>
<h4>Looking at the DataFieldAbstract type</h4>
<p>Both the <code>Identification</code> and <code>LineItem</code> terms have the same type, which is a collection of <a href="https://github.com/SAP/odata-vocabularies/blob/main/vocabularies/UI.md#DataFieldAbstract">DataFieldAbstract</a> building blocks. This building block is an abstract type (given its name, that's not a surprise to us) which has concrete instances. One concrete instance of this abstract type is <a href="https://github.com/SAP/odata-vocabularies/blob/main/vocabularies/UI.md#datafield-datafieldabstract">DataField</a> which is a record with five properties:</p>
<table>
<thead>
<tr>
<th>Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>Label</code></td>
<td><code>String</code></td>
<td>A short, human-readable text suitable for labels and captions in UIs</td>
</tr>
<tr>
<td><code>Criticality</code></td>
<td><code>CriticalityType</code></td>
<td>Criticality of the data field value</td>
</tr>
<tr>
<td><code>CriticalityRepresentation</code></td>
<td><code>CriticalityRepresentationType</code></td>
<td>Decides if criticality is visualized in addition by means of an icon</td>
</tr>
<tr>
<td><code>IconUrl</code></td>
<td><code>URL</code></td>
<td>Optional icon</td>
</tr>
<tr>
<td><code>Value</code></td>
<td><code>Untyped</code></td>
<td>The data field's value</td>
</tr>
</tbody>
</table>
<p>The <code>Value</code> term is the only one that belongs to this concrete <code>DataField</code> type, the rest are from the <code>DataFieldAbstract</code> type. You can see this by examining <a href="https://github.com/SAP/odata-vocabularies/blob/main/vocabularies/UI.xml#L1559-L1586">the canonical machine-readable XML definition of the type</a>, which looks like this:</p>
<pre class="language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ComplexType</span> <span class="token attr-name">Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>DataField<span class="token punctuation">"</span></span> <span class="token attr-name">BaseType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UI.DataFieldAbstract<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Annotation</span> <span class="token attr-name">Term</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Core.Description<span class="token punctuation">"</span></span> <span class="token attr-name">String</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>A piece of data<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><br>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Property</span> <span class="token attr-name">Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Value<span class="token punctuation">"</span></span> <span class="token attr-name">Type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Edm.Untyped<span class="token punctuation">"</span></span> <span class="token attr-name">Nullable</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Annotation</span> <span class="token attr-name">Term</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Core.Description<span class="token punctuation">"</span></span> <span class="token attr-name">String</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>The data field's value<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><br>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Annotation</span> <span class="token attr-name">Term</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Validation.DerivedTypeConstraint<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Collection</span><span class="token punctuation">></span></span><br>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>String</span><span class="token punctuation">></span></span>Edm.PrimitiveType<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>String</span><span class="token punctuation">></span></span><br>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>String</span><span class="token punctuation">></span></span>Collection(Edm.Binary)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>String</span><span class="token punctuation">></span></span><br>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>String</span><span class="token punctuation">></span></span>Collection(Edm.Boolean)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>String</span><span class="token punctuation">></span></span><br>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>String</span><span class="token punctuation">></span></span>Collection(Edm.Byte)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>String</span><span class="token punctuation">></span></span><br>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>String</span><span class="token punctuation">></span></span>Collection(Edm.Date)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>String</span><span class="token punctuation">></span></span><br>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>String</span><span class="token punctuation">></span></span>Collection(Edm.DateTimeOffset)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>String</span><span class="token punctuation">></span></span><br>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>String</span><span class="token punctuation">></span></span>Collection(Edm.Decimal)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>String</span><span class="token punctuation">></span></span><br>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>String</span><span class="token punctuation">></span></span>Collection(Edm.Double)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>String</span><span class="token punctuation">></span></span><br>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>String</span><span class="token punctuation">></span></span>Collection(Edm.Duration)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>String</span><span class="token punctuation">></span></span><br>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>String</span><span class="token punctuation">></span></span>Collection(Edm.Guid)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>String</span><span class="token punctuation">></span></span><br>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>String</span><span class="token punctuation">></span></span>Collection(Edm.Int16)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>String</span><span class="token punctuation">></span></span><br>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>String</span><span class="token punctuation">></span></span>Collection(Edm.Int32)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>String</span><span class="token punctuation">></span></span><br>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>String</span><span class="token punctuation">></span></span>Collection(Edm.Int64)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>String</span><span class="token punctuation">></span></span><br>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>String</span><span class="token punctuation">></span></span>Collection(Edm.SByte)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>String</span><span class="token punctuation">></span></span><br>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>String</span><span class="token punctuation">></span></span>Collection(Edm.Single)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>String</span><span class="token punctuation">></span></span><br>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>String</span><span class="token punctuation">></span></span>Collection(Edm.String)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>String</span><span class="token punctuation">></span></span><br>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>String</span><span class="token punctuation">></span></span>Collection(Edm.TimeOfDay)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>String</span><span class="token punctuation">></span></span><br>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Collection</span><span class="token punctuation">></span></span><br>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Annotation</span><span class="token punctuation">></span></span><br>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Annotation</span> <span class="token attr-name">Term</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Core.IsLanguageDependent<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><br>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Property</span><span class="token punctuation">></span></span><br><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ComplexType</span><span class="token punctuation">></span></span></code></pre>
<p>There's only a single <code>Property</code> defined (which is <code>Value</code>), with the rest coming from <code>DataFieldAbstract</code> which is referenced via the <code>BaseType</code> attribute in the <code>&lt;ComplexType&gt;</code> element.</p>
<blockquote>
<p>If you're wondering why the type is <code>DataFieldAbstract</code> and not <code>DataField</code>, see this <a href="https://github.com/SAP/odata-vocabularies/issues/190">question and answer</a>.</p>
</blockquote>
<blockquote>
<p>The <a href="https://cap.cloud.sap/docs/advanced/odata#records">Records section on the CAP documentation on OData annotations</a> highlights this <code>DataFieldAbstract</code> type, pointing out its prominence and the behaviour of the compiler for annotations defined with terms that have this type; the generated EDMX will default to the concrete <code>DataField</code> type (i.e. <code>&lt;Record Type=&quot;UI.DataField&quot;&gt;...&lt;/Record&gt;</code>) unless another is specified explicitly via the special <code>$Type</code> property.</p>
</blockquote>
<p><a name="the-ui-annotation-vocabulary"></a></p>
<h4>The UI.Identification term</h4>
<p>Now we know about the <code>DataFieldAbstract</code> type and its concrete derivation <code>DataField</code> that's being used here, we can more comfortably interpret the appearance of the two terms in the CDS annotations:</p>
<pre class="language-text"><code class="language-text">annotate CatalogService.Books with @(<br>    UI: {<br>        Identification: [ {Value: title} ],<br>        LineItem: [<br>            {Value: ID},<br>            {Value: title},<br>            {Value: author.name},<br>            {Value: author_ID},<br>            {Value: stock}<br>        ]<br>    }<br>);</code></pre>
<p>Every part of each of these annotations is now within our grasp. First, consider the syntax. This part:</p>
<pre class="language-text"><code class="language-text">@(<br>  UI: {<br>    Identification: [ {Value: title} ]<br>  }<br>);</code></pre>
<p>can be compressed thus:</p>
<pre class="language-text"><code class="language-text">@UI.Identfication: [ { Value: title } ]</code></pre>
<p>It can't be compressed further; if we were to specify the following:</p>
<pre class="language-text"><code class="language-text">@UI.Identfication.Value: title</code></pre>
<p>then the compiler would emit this:</p>
<pre class="language-text"><code class="language-text">[WARNING] In annotation translation: found complex type, but expected type 'Collection(UI.DataFieldAbstract)', target: Northwind.Categories, annotation: UI.Identification</code></pre>
<p>because the type is a <em>Collection</em> of complex types (records), not a single complex type.</p>
<p>Anyway, what's being expressed here is that the entity type is to be &quot;identified&quot; by the <code>title</code> property (of the <code>Books</code> entity type).</p>
<p>You can see <a href="#uiidentification-annotation">the EDMX result of this annotation in the corresponding XML in the service's metadata document</a>.</p>
<p><a name="the-uilineitem-term"></a></p>
<h4>The UI.LineItem term</h4>
<p>The <code>LineItem</code> term is very similar, except that there is more than one record given as the value. Again, the type of the term is <code>[DataFieldAbstract]</code>, and what's being used is a collection of concrete <code>DataField</code> instances, with a value specified for their <code>Value</code> property. These values that are specified (<code>ID</code>, <code>title</code>, and so on) are properties in the model.</p>
<p>Note in passing that one of these model properties (<code>author.name</code>) is via the <code>Books</code> entity type relationship with the <code>Authors</code> entity type, and another (author_ID) is a generated property from the use of the managed association to create that relationship.</p>
<p>You can see <a href="#uiselectionfields-annotation">the EDMX result of this annotation in the corresponding XML in the service's metadata document</a>.</p>
<p>The <a href="http://localhost:4004/$fiori-preview/CatalogService/Books#preview-app">Fiori preview app</a> shows us an example of how this annotation is used, to determine the columns in the list of books:</p>
<p><img src="/images/2023/03/UI.LineItem.png" alt="Fiori preview - list of books, with the effect of the UI.LineItem annotation highlighted"></p>
<p><a name="the-uiselectionfields-term"></a></p>
<h4>The UI.SelectionFields term</h4>
<p>This has been covered earlier, and is (in this instance) a collection of (a single) primitive value, the <code>title</code> property path. The annotation appears like this:</p>
<pre class="language-text"><code class="language-text">annotate CatalogService.Books with @(<br>    UI: {<br>        SelectionFields: [ title ]<br>    }<br>);</code></pre>
<p>but the annotation itself could be also be compressed like this:</p>
<pre class="language-text"><code class="language-text">annotate CatalogService.Books with @(<br>    UI.SelectionFields: [ title ]<br>);</code></pre>
<p>You can see <a href="#uiselectionfields-annotation">the EDMX result of this annotation in the corresponding XML in the service's metadata document</a>.</p>
<p>The <a href="http://localhost:4004/$fiori-preview/CatalogService/Books#preview-app">Fiori preview app</a> shows us an example of how this annotation is used, to determine which field(s) are exposed to allow filtering of books in the list:</p>
<p><img src="/images/2023/03/UI.SelectionFields.png" alt="Fiori preview - list of books, with the effect of the UI.SelectionFields annotation highlighted"></p>
<p><a name="the-uiheaderinfo-term"></a></p>
<h4>The UI.HeaderInfo term</h4>
<p>Here's what this term looks like in isolation:</p>
<pre class="language-text"><code class="language-text">annotate CatalogService.Books with @(<br>    UI: {<br>        HeaderInfo: {<br>            TypeName: '{i18n>Book}',<br>            TypeNamePlural: '{i18n>Books}',<br>            Title: {Value: title},<br>            Description: {Value: author.name}<br>        }<br>    }<br>);</code></pre>
<p>While not so much compressed, this could have equally been expressed as follows:</p>
<pre class="language-text"><code class="language-text">annotate CatalogService.Books with @(<br>    UI.HeaderInfo.TypeName: '{i18n>Book}',<br>    UI.HeaderInfo.TypeNamePlural: '{i18n>Books}',<br>    UI.HeaderInfo.Title.Value: title,<br>    UI.HeaderInfo.Description.Value: author.name<br>);</code></pre>
<p>Rewriting this <code>HeaderInfo</code> annotation term like this draws our attention to the subtle but significant difference in the curly braces used here.</p>
<p>For the <code>TypeName</code> and <code>TypeNamePlural</code> properties of the <code>HeaderInfoType</code> type (see the <a href="https://github.com/SAP/odata-vocabularies/blob/main/vocabularies/UI.md#HeaderInfoType">HeaderInfoType reference</a> that describes the <code>HeaderInfo</code> term, the values are defined with the <code>String</code> type.</p>
<p>And the string values are both references to internationalized string data, using the standard UI5 and CDS syntax for this:</p>
<pre class="language-text"><code class="language-text">{modelname>property}</code></pre>
<p>In other words, the curly braces here are part of the syntax for specifying a model property in CDS. Inside (single-quoted) strings.</p>
<p>But the values for the <code>Title</code> and <code>Description</code> properties of the <code>HeaderInfoType</code> type are not strings, but records. Complex types, in other words, via our friend <code>DataFieldAbstract</code>. The description of these two properties in the <a href="https://github.com/SAP/odata-vocabularies/blob/main/vocabularies/UI.md#HeaderInfoType">HeaderInfoType reference</a> states: &quot;<em>This can be a DataField and any of its children, or a DataFieldForAnnotation targeting ConnectedFields.</em>&quot;. And just like before, the concrete type used here is <code>DataField</code>, with a <code>Value</code> property.</p>
<p>In other words, the curly braces in these two properties denote the <code>DataField</code> type's record structure that contains the <code>Value</code> property.</p>
<p>You can see <a href="#uiheaderinfo-annotation">the EDMX result of this annotation in the corresponding XML in the service's metadata document</a>.</p>
<p>The <a href="http://localhost:4004/$fiori-preview/CatalogService/Books#preview-app">Fiori preview app</a> shows us an example of how this annotation is used, in two places: the plural of &quot;Books&quot; used in the list, and the singular &quot;Book&quot; used, plus the book title and author name for the header section of the detail page for a selected book:</p>
<p><img src="/images/2023/03/UI.HeaderInfo-List.png" alt="Fiori preview - list of books, with the effect of the UI.HeaderInfo annotation highlighted"></p>
<p><img src="/images/2023/03/UI.HeaderInfo-Detail.png" alt="Fiori preview - single book detail, with the effect of the UI.HeaderInfo annotation highlighted"></p>
<p><a name="examining-the-odata-annotations-in-edmx"></a></p>
<h3>Examining the OData annotations in EDMX</h3>
<p>With all this knowledge under your belt, the last thing to do in this journey of discovery is to revisit the OData service's metadata document (for <code>CatalogService</code>, rather than <code>Stats</code>) and stare at the EDMX, in particular, the annotation related XML. It should now be somewhat clearer, and hopefully you'll be able to read it more comfortably and with more confidence.</p>
<p>You should also more easily recognise the names of the XML elements in use, as they directly represent concepts we've looked at: <code>Collection</code>, <code>Record</code>, <code>PropertyValue</code>, and so on.</p>
<p>Assuming the service is <a href="#getting-things-running">still running</a>, open up <a href="http://localhost:4004/catalog/$metadata">http://localhost:4004/catalog/$metadata</a>, take a deep breath, and dive in. The actual document content is at the end. Here are some reading notes on it.</p>
<p><a name="namespace-references"></a></p>
<h4>Namespace references</h4>
<p>At the top we see references to the namespaces corresponding to the annotation vocabularies used:</p>
<pre class="language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">edmx:</span>Reference</span> <span class="token attr-name">Uri</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://sap.github.io/odata-vocabularies/vocabularies/Common.xml<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">edmx:</span>Include</span> <span class="token attr-name">Alias</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Common<span class="token punctuation">"</span></span> <span class="token attr-name">Namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.sap.vocabularies.Common.v1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><br><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">edmx:</span>Reference</span><span class="token punctuation">></span></span><br><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">edmx:</span>Reference</span> <span class="token attr-name">Uri</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://oasis-tcs.github.io/odata-vocabularies/vocabularies/Org.OData.Core.V1.xml<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">edmx:</span>Include</span> <span class="token attr-name">Alias</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Core<span class="token punctuation">"</span></span> <span class="token attr-name">Namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Org.OData.Core.V1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><br><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">edmx:</span>Reference</span><span class="token punctuation">></span></span><br><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">edmx:</span>Reference</span> <span class="token attr-name">Uri</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://sap.github.io/odata-vocabularies/vocabularies/UI.xml<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">edmx:</span>Include</span> <span class="token attr-name">Alias</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UI<span class="token punctuation">"</span></span> <span class="token attr-name">Namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.sap.vocabularies.UI.v1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><br><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">edmx:</span>Reference</span><span class="token punctuation">></span></span></code></pre>
<p><a name="annotation-targets"></a></p>
<h4>Annotation targets</h4>
<p>The annotations themselves appear within the <code>&lt;Schema&gt;</code> element, within multiple <code>&lt;Annotations&gt;</code> elements. There are multiple elements because it's at this <code>&lt;Annotations&gt;</code> element level that the target of the annotation(s) is specified, and there are multiple annotation targets.</p>
<p>Some targets are entity types, such as <code>Books</code>:</p>
<pre class="language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Annotations</span> <span class="token attr-name">Target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>CatalogService.Books<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br>  ...<br><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Annotations</span><span class="token punctuation">></span></span></code></pre>
<p>and <code>Countries</code>:</p>
<pre class="language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Annotations</span> <span class="token attr-name">Target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>CatalogService.Countries<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br>  ...<br><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Annotations</span><span class="token punctuation">></span></span></code></pre>
<p>Other targets are properties, such as the <code>ID</code> property in <code>Books</code>:</p>
<pre class="language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Annotations</span> <span class="token attr-name">Target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>CatalogService.Books/ID<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br>  ...<br><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Annotations</span><span class="token punctuation">></span></span></code></pre>
<p><a name="uiidentification-annotation"></a></p>
<h4>UI.Identification annotation</h4>
<p>The annotation XML for this, applied to the <code>Books</code> entity set target, is as follows:</p>
<pre class="language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Annotation</span> <span class="token attr-name">Term</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UI.Identification<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Collection</span><span class="token punctuation">></span></span><br>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Record</span> <span class="token attr-name">Type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UI.DataField<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PropertyValue</span> <span class="token attr-name">Property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Value<span class="token punctuation">"</span></span> <span class="token attr-name">Path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><br>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Record</span><span class="token punctuation">></span></span><br>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Collection</span><span class="token punctuation">></span></span><br><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Annotation</span><span class="token punctuation">></span></span></code></pre>
<p><a name="uiselectionfields-annotation"></a></p>
<h4>UI.SelectionFields annotation</h4>
<p>The annotation XML for this, applied to the <code>Books</code> entity set target, is as follows:</p>
<pre class="language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Annotation</span> <span class="token attr-name">Term</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UI.SelectionFields<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Collection</span><span class="token punctuation">></span></span><br>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PropertyPath</span><span class="token punctuation">></span></span>title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>PropertyPath</span><span class="token punctuation">></span></span><br>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Collection</span><span class="token punctuation">></span></span><br><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Annotation</span><span class="token punctuation">></span></span></code></pre>
<p><a name="uilineitem-annotation"></a></p>
<h4>UI.LineItem annotation</h4>
<p>The annotation XML for this, applied to the <code>Books</code> entity set target, is as follows:</p>
<pre class="language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Annotation</span> <span class="token attr-name">Term</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UI.LineItem<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Collection</span><span class="token punctuation">></span></span><br>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Record</span> <span class="token attr-name">Type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UI.DataField<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PropertyValue</span> <span class="token attr-name">Property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Value<span class="token punctuation">"</span></span> <span class="token attr-name">Path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ID<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><br>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Record</span><span class="token punctuation">></span></span><br>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Record</span> <span class="token attr-name">Type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UI.DataField<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PropertyValue</span> <span class="token attr-name">Property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Value<span class="token punctuation">"</span></span> <span class="token attr-name">Path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><br>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Record</span><span class="token punctuation">></span></span><br>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Record</span> <span class="token attr-name">Type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UI.DataField<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PropertyValue</span> <span class="token attr-name">Property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Value<span class="token punctuation">"</span></span> <span class="token attr-name">Path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>author/name<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><br>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Record</span><span class="token punctuation">></span></span><br>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Record</span> <span class="token attr-name">Type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UI.DataField<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PropertyValue</span> <span class="token attr-name">Property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Value<span class="token punctuation">"</span></span> <span class="token attr-name">Path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>author_ID<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><br>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Record</span><span class="token punctuation">></span></span><br>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Record</span> <span class="token attr-name">Type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UI.DataField<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PropertyValue</span> <span class="token attr-name">Property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Value<span class="token punctuation">"</span></span> <span class="token attr-name">Path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stock<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><br>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Record</span><span class="token punctuation">></span></span><br>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Collection</span><span class="token punctuation">></span></span><br><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Annotation</span><span class="token punctuation">></span></span></code></pre>
<p>Note that this XML is slighly larger as there are multiple records in the collection</p>
<p><a name="uiheaderinfo-annotation"></a></p>
<h4>UI.HeaderInfo annotation</h4>
<p>The annotation XML for this, applied to the <code>Books</code> entity set target, is as follows:</p>
<pre class="language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Annotation</span> <span class="token attr-name">Term</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UI.HeaderInfo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Record</span> <span class="token attr-name">Type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UI.HeaderInfoType<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PropertyValue</span> <span class="token attr-name">Property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>TypeName<span class="token punctuation">"</span></span> <span class="token attr-name">String</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Book<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><br>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PropertyValue</span> <span class="token attr-name">Property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>TypeNamePlural<span class="token punctuation">"</span></span> <span class="token attr-name">String</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Books<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><br>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PropertyValue</span> <span class="token attr-name">Property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Record</span> <span class="token attr-name">Type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UI.DataField<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PropertyValue</span> <span class="token attr-name">Property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Value<span class="token punctuation">"</span></span> <span class="token attr-name">Path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><br>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Record</span><span class="token punctuation">></span></span><br>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>PropertyValue</span><span class="token punctuation">></span></span><br>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PropertyValue</span> <span class="token attr-name">Property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Description<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Record</span> <span class="token attr-name">Type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UI.DataField<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PropertyValue</span> <span class="token attr-name">Property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Value<span class="token punctuation">"</span></span> <span class="token attr-name">Path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>author/name<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><br>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Record</span><span class="token punctuation">></span></span><br>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>PropertyValue</span><span class="token punctuation">></span></span><br>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Record</span><span class="token punctuation">></span></span><br><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Annotation</span><span class="token punctuation">></span></span></code></pre>
<p>Here we can more plainly see the intermix of primitive values for <code>TypeName</code> and <code>TypeNamePlural</code> and records (complex types) for <code>Title</code> and <code>Description</code>.</p>
<p><a name="the-catalogservices-metadata"></a></p>
<h4>The CatalogService's metadata</h4>
<p>Here's the entire document, in all its glory.</p>
<pre class="language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><br><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">edmx:</span>Edmx</span> <span class="token attr-name">Version</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>4.0<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>edmx</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://docs.oasis-open.org/odata/ns/edmx<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">edmx:</span>Reference</span> <span class="token attr-name">Uri</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://sap.github.io/odata-vocabularies/vocabularies/Common.xml<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">edmx:</span>Include</span> <span class="token attr-name">Alias</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Common<span class="token punctuation">"</span></span> <span class="token attr-name">Namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.sap.vocabularies.Common.v1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><br>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">edmx:</span>Reference</span><span class="token punctuation">></span></span><br>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">edmx:</span>Reference</span> <span class="token attr-name">Uri</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://oasis-tcs.github.io/odata-vocabularies/vocabularies/Org.OData.Core.V1.xml<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">edmx:</span>Include</span> <span class="token attr-name">Alias</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Core<span class="token punctuation">"</span></span> <span class="token attr-name">Namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Org.OData.Core.V1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><br>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">edmx:</span>Reference</span><span class="token punctuation">></span></span><br>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">edmx:</span>Reference</span> <span class="token attr-name">Uri</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://sap.github.io/odata-vocabularies/vocabularies/UI.xml<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">edmx:</span>Include</span> <span class="token attr-name">Alias</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UI<span class="token punctuation">"</span></span> <span class="token attr-name">Namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.sap.vocabularies.UI.v1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><br>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">edmx:</span>Reference</span><span class="token punctuation">></span></span><br>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">edmx:</span>DataServices</span><span class="token punctuation">></span></span><br>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Schema</span> <span class="token attr-name">Namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>CatalogService<span class="token punctuation">"</span></span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://docs.oasis-open.org/odata/ns/edm<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>EntityContainer</span> <span class="token attr-name">Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>EntityContainer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>EntitySet</span> <span class="token attr-name">Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Books<span class="token punctuation">"</span></span> <span class="token attr-name">EntityType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>CatalogService.Books<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>NavigationPropertyBinding</span> <span class="token attr-name">Path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>author<span class="token punctuation">"</span></span> <span class="token attr-name">Target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Authors<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><br>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>EntitySet</span><span class="token punctuation">></span></span><br>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>EntitySet</span> <span class="token attr-name">Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Authors<span class="token punctuation">"</span></span> <span class="token attr-name">EntityType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>CatalogService.Authors<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>NavigationPropertyBinding</span> <span class="token attr-name">Path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>books<span class="token punctuation">"</span></span> <span class="token attr-name">Target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Books<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><br>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>EntitySet</span><span class="token punctuation">></span></span><br>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>EntitySet</span> <span class="token attr-name">Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Orders<span class="token punctuation">"</span></span> <span class="token attr-name">EntityType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>CatalogService.Orders<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>NavigationPropertyBinding</span> <span class="token attr-name">Path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>book<span class="token punctuation">"</span></span> <span class="token attr-name">Target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Books<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><br>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>NavigationPropertyBinding</span> <span class="token attr-name">Path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>country<span class="token punctuation">"</span></span> <span class="token attr-name">Target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Countries<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><br>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>EntitySet</span><span class="token punctuation">></span></span><br>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>EntitySet</span> <span class="token attr-name">Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Countries<span class="token punctuation">"</span></span> <span class="token attr-name">EntityType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>CatalogService.Countries<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>NavigationPropertyBinding</span> <span class="token attr-name">Path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>texts<span class="token punctuation">"</span></span> <span class="token attr-name">Target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Countries_texts<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><br>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>NavigationPropertyBinding</span> <span class="token attr-name">Path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>localized<span class="token punctuation">"</span></span> <span class="token attr-name">Target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Countries_texts<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><br>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>EntitySet</span><span class="token punctuation">></span></span><br>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>EntitySet</span> <span class="token attr-name">Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Countries_texts<span class="token punctuation">"</span></span> <span class="token attr-name">EntityType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>CatalogService.Countries_texts<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><br>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>EntityContainer</span><span class="token punctuation">></span></span><br>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>EntityType</span> <span class="token attr-name">Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Books<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Key</span><span class="token punctuation">></span></span><br>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PropertyRef</span> <span class="token attr-name">Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ID<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><br>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Key</span><span class="token punctuation">></span></span><br>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Property</span> <span class="token attr-name">Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ID<span class="token punctuation">"</span></span> <span class="token attr-name">Type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Edm.Int32<span class="token punctuation">"</span></span> <span class="token attr-name">Nullable</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><br>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Property</span> <span class="token attr-name">Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span> <span class="token attr-name">Type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Edm.String<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><br>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Property</span> <span class="token attr-name">Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stock<span class="token punctuation">"</span></span> <span class="token attr-name">Type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Edm.Int32<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><br>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>NavigationProperty</span> <span class="token attr-name">Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>author<span class="token punctuation">"</span></span> <span class="token attr-name">Type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>CatalogService.Authors<span class="token punctuation">"</span></span> <span class="token attr-name">Partner</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>books<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ReferentialConstraint</span> <span class="token attr-name">Property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>author_ID<span class="token punctuation">"</span></span> <span class="token attr-name">ReferencedProperty</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ID<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><br>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>NavigationProperty</span><span class="token punctuation">></span></span><br>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Property</span> <span class="token attr-name">Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>author_ID<span class="token punctuation">"</span></span> <span class="token attr-name">Type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Edm.Int32<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><br>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>EntityType</span><span class="token punctuation">></span></span><br>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>EntityType</span> <span class="token attr-name">Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Authors<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Key</span><span class="token punctuation">></span></span><br>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PropertyRef</span> <span class="token attr-name">Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ID<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><br>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Key</span><span class="token punctuation">></span></span><br>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Property</span> <span class="token attr-name">Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ID<span class="token punctuation">"</span></span> <span class="token attr-name">Type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Edm.Int32<span class="token punctuation">"</span></span> <span class="token attr-name">Nullable</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><br>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Property</span> <span class="token attr-name">Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">Type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Edm.String<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><br>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>NavigationProperty</span> <span class="token attr-name">Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>books<span class="token punctuation">"</span></span> <span class="token attr-name">Type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Collection(CatalogService.Books)<span class="token punctuation">"</span></span> <span class="token attr-name">Partner</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>author<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><br>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>EntityType</span><span class="token punctuation">></span></span><br>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>EntityType</span> <span class="token attr-name">Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Orders<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Key</span><span class="token punctuation">></span></span><br>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PropertyRef</span> <span class="token attr-name">Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ID<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><br>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Key</span><span class="token punctuation">></span></span><br>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Property</span> <span class="token attr-name">Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ID<span class="token punctuation">"</span></span> <span class="token attr-name">Type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Edm.Guid<span class="token punctuation">"</span></span> <span class="token attr-name">Nullable</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><br>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Property</span> <span class="token attr-name">Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>createdAt<span class="token punctuation">"</span></span> <span class="token attr-name">Type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Edm.DateTimeOffset<span class="token punctuation">"</span></span> <span class="token attr-name">Precision</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>7<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><br>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Property</span> <span class="token attr-name">Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>createdBy<span class="token punctuation">"</span></span> <span class="token attr-name">Type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Edm.String<span class="token punctuation">"</span></span> <span class="token attr-name">MaxLength</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>255<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><br>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Property</span> <span class="token attr-name">Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>modifiedAt<span class="token punctuation">"</span></span> <span class="token attr-name">Type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Edm.DateTimeOffset<span class="token punctuation">"</span></span> <span class="token attr-name">Precision</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>7<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><br>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Property</span> <span class="token attr-name">Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>modifiedBy<span class="token punctuation">"</span></span> <span class="token attr-name">Type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Edm.String<span class="token punctuation">"</span></span> <span class="token attr-name">MaxLength</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>255<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><br>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>NavigationProperty</span> <span class="token attr-name">Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>book<span class="token punctuation">"</span></span> <span class="token attr-name">Type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>CatalogService.Books<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ReferentialConstraint</span> <span class="token attr-name">Property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>book_ID<span class="token punctuation">"</span></span> <span class="token attr-name">ReferencedProperty</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ID<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><br>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>NavigationProperty</span><span class="token punctuation">></span></span><br>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Property</span> <span class="token attr-name">Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>book_ID<span class="token punctuation">"</span></span> <span class="token attr-name">Type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Edm.Int32<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><br>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Property</span> <span class="token attr-name">Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>quantity<span class="token punctuation">"</span></span> <span class="token attr-name">Type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Edm.Int32<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><br>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>NavigationProperty</span> <span class="token attr-name">Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>country<span class="token punctuation">"</span></span> <span class="token attr-name">Type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>CatalogService.Countries<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ReferentialConstraint</span> <span class="token attr-name">Property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>country_code<span class="token punctuation">"</span></span> <span class="token attr-name">ReferencedProperty</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>code<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><br>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>NavigationProperty</span><span class="token punctuation">></span></span><br>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Property</span> <span class="token attr-name">Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>country_code<span class="token punctuation">"</span></span> <span class="token attr-name">Type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Edm.String<span class="token punctuation">"</span></span> <span class="token attr-name">MaxLength</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>3<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><br>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>EntityType</span><span class="token punctuation">></span></span><br>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>EntityType</span> <span class="token attr-name">Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Countries<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Key</span><span class="token punctuation">></span></span><br>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PropertyRef</span> <span class="token attr-name">Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>code<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><br>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Key</span><span class="token punctuation">></span></span><br>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Property</span> <span class="token attr-name">Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">Type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Edm.String<span class="token punctuation">"</span></span> <span class="token attr-name">MaxLength</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>255<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><br>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Property</span> <span class="token attr-name">Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>descr<span class="token punctuation">"</span></span> <span class="token attr-name">Type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Edm.String<span class="token punctuation">"</span></span> <span class="token attr-name">MaxLength</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1000<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><br>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Property</span> <span class="token attr-name">Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>code<span class="token punctuation">"</span></span> <span class="token attr-name">Type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Edm.String<span class="token punctuation">"</span></span> <span class="token attr-name">MaxLength</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>3<span class="token punctuation">"</span></span> <span class="token attr-name">Nullable</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><br>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>NavigationProperty</span> <span class="token attr-name">Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>texts<span class="token punctuation">"</span></span> <span class="token attr-name">Type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Collection(CatalogService.Countries_texts)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>OnDelete</span> <span class="token attr-name">Action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Cascade<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><br>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>NavigationProperty</span><span class="token punctuation">></span></span><br>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>NavigationProperty</span> <span class="token attr-name">Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>localized<span class="token punctuation">"</span></span> <span class="token attr-name">Type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>CatalogService.Countries_texts<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ReferentialConstraint</span> <span class="token attr-name">Property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>code<span class="token punctuation">"</span></span> <span class="token attr-name">ReferencedProperty</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>code<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><br>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>NavigationProperty</span><span class="token punctuation">></span></span><br>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>EntityType</span><span class="token punctuation">></span></span><br>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>EntityType</span> <span class="token attr-name">Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Countries_texts<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Key</span><span class="token punctuation">></span></span><br>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PropertyRef</span> <span class="token attr-name">Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>locale<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><br>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PropertyRef</span> <span class="token attr-name">Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>code<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><br>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Key</span><span class="token punctuation">></span></span><br>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Property</span> <span class="token attr-name">Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>locale<span class="token punctuation">"</span></span> <span class="token attr-name">Type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Edm.String<span class="token punctuation">"</span></span> <span class="token attr-name">MaxLength</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>14<span class="token punctuation">"</span></span> <span class="token attr-name">Nullable</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><br>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Property</span> <span class="token attr-name">Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">Type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Edm.String<span class="token punctuation">"</span></span> <span class="token attr-name">MaxLength</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>255<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><br>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Property</span> <span class="token attr-name">Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>descr<span class="token punctuation">"</span></span> <span class="token attr-name">Type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Edm.String<span class="token punctuation">"</span></span> <span class="token attr-name">MaxLength</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1000<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><br>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Property</span> <span class="token attr-name">Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>code<span class="token punctuation">"</span></span> <span class="token attr-name">Type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Edm.String<span class="token punctuation">"</span></span> <span class="token attr-name">MaxLength</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>3<span class="token punctuation">"</span></span> <span class="token attr-name">Nullable</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><br>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>EntityType</span><span class="token punctuation">></span></span><br>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Annotations</span> <span class="token attr-name">Target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>CatalogService.Books<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Annotation</span> <span class="token attr-name">Term</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UI.Identification<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Collection</span><span class="token punctuation">></span></span><br>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Record</span> <span class="token attr-name">Type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UI.DataField<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PropertyValue</span> <span class="token attr-name">Property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Value<span class="token punctuation">"</span></span> <span class="token attr-name">Path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><br>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Record</span><span class="token punctuation">></span></span><br>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Collection</span><span class="token punctuation">></span></span><br>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Annotation</span><span class="token punctuation">></span></span><br>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Annotation</span> <span class="token attr-name">Term</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UI.SelectionFields<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Collection</span><span class="token punctuation">></span></span><br>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PropertyPath</span><span class="token punctuation">></span></span>title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>PropertyPath</span><span class="token punctuation">></span></span><br>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Collection</span><span class="token punctuation">></span></span><br>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Annotation</span><span class="token punctuation">></span></span><br>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Annotation</span> <span class="token attr-name">Term</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UI.LineItem<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Collection</span><span class="token punctuation">></span></span><br>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Record</span> <span class="token attr-name">Type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UI.DataField<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PropertyValue</span> <span class="token attr-name">Property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Value<span class="token punctuation">"</span></span> <span class="token attr-name">Path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ID<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><br>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Record</span><span class="token punctuation">></span></span><br>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Record</span> <span class="token attr-name">Type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UI.DataField<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PropertyValue</span> <span class="token attr-name">Property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Value<span class="token punctuation">"</span></span> <span class="token attr-name">Path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><br>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Record</span><span class="token punctuation">></span></span><br>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Record</span> <span class="token attr-name">Type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UI.DataField<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PropertyValue</span> <span class="token attr-name">Property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Value<span class="token punctuation">"</span></span> <span class="token attr-name">Path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>author/name<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><br>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Record</span><span class="token punctuation">></span></span><br>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Record</span> <span class="token attr-name">Type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UI.DataField<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PropertyValue</span> <span class="token attr-name">Property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Value<span class="token punctuation">"</span></span> <span class="token attr-name">Path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>author_ID<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><br>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Record</span><span class="token punctuation">></span></span><br>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Record</span> <span class="token attr-name">Type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UI.DataField<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PropertyValue</span> <span class="token attr-name">Property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Value<span class="token punctuation">"</span></span> <span class="token attr-name">Path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stock<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><br>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Record</span><span class="token punctuation">></span></span><br>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Collection</span><span class="token punctuation">></span></span><br>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Annotation</span><span class="token punctuation">></span></span><br>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Annotation</span> <span class="token attr-name">Term</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UI.HeaderInfo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Record</span> <span class="token attr-name">Type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UI.HeaderInfoType<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PropertyValue</span> <span class="token attr-name">Property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>TypeName<span class="token punctuation">"</span></span> <span class="token attr-name">String</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Book<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><br>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PropertyValue</span> <span class="token attr-name">Property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>TypeNamePlural<span class="token punctuation">"</span></span> <span class="token attr-name">String</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Books<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><br>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PropertyValue</span> <span class="token attr-name">Property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Record</span> <span class="token attr-name">Type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UI.DataField<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PropertyValue</span> <span class="token attr-name">Property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Value<span class="token punctuation">"</span></span> <span class="token attr-name">Path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><br>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Record</span><span class="token punctuation">></span></span><br>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>PropertyValue</span><span class="token punctuation">></span></span><br>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PropertyValue</span> <span class="token attr-name">Property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Description<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Record</span> <span class="token attr-name">Type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UI.DataField<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PropertyValue</span> <span class="token attr-name">Property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Value<span class="token punctuation">"</span></span> <span class="token attr-name">Path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>author/name<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><br>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Record</span><span class="token punctuation">></span></span><br>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>PropertyValue</span><span class="token punctuation">></span></span><br>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Record</span><span class="token punctuation">></span></span><br>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Annotation</span><span class="token punctuation">></span></span><br>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Annotations</span><span class="token punctuation">></span></span><br>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Annotations</span> <span class="token attr-name">Target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>CatalogService.Books/ID<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Annotation</span> <span class="token attr-name">Term</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UI.HiddenFilter<span class="token punctuation">"</span></span> <span class="token attr-name">Bool</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><br>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Annotation</span> <span class="token attr-name">Term</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Common.Label<span class="token punctuation">"</span></span> <span class="token attr-name">String</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ID<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><br>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Annotations</span><span class="token punctuation">></span></span><br>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Annotations</span> <span class="token attr-name">Target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>CatalogService.Books/title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Annotation</span> <span class="token attr-name">Term</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Common.Label<span class="token punctuation">"</span></span> <span class="token attr-name">String</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Title<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><br>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Annotations</span><span class="token punctuation">></span></span><br>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Annotations</span> <span class="token attr-name">Target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>CatalogService.Books/stock<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Annotation</span> <span class="token attr-name">Term</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Common.Label<span class="token punctuation">"</span></span> <span class="token attr-name">String</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Stock<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><br>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Annotations</span><span class="token punctuation">></span></span><br>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Annotations</span> <span class="token attr-name">Target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>CatalogService.Books/author<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Annotation</span> <span class="token attr-name">Term</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Common.Label<span class="token punctuation">"</span></span> <span class="token attr-name">String</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>AuthorID<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><br>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Annotations</span><span class="token punctuation">></span></span><br>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Annotations</span> <span class="token attr-name">Target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>CatalogService.Books/author_ID<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Annotation</span> <span class="token attr-name">Term</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Common.Label<span class="token punctuation">"</span></span> <span class="token attr-name">String</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>AuthorID<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><br>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Annotations</span><span class="token punctuation">></span></span><br>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Annotations</span> <span class="token attr-name">Target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>CatalogService.Authors/ID<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Annotation</span> <span class="token attr-name">Term</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UI.HiddenFilter<span class="token punctuation">"</span></span> <span class="token attr-name">Bool</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><br>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Annotation</span> <span class="token attr-name">Term</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Common.Label<span class="token punctuation">"</span></span> <span class="token attr-name">String</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ID<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><br>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Annotations</span><span class="token punctuation">></span></span><br>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Annotations</span> <span class="token attr-name">Target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>CatalogService.Authors/name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Annotation</span> <span class="token attr-name">Term</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Common.Label<span class="token punctuation">"</span></span> <span class="token attr-name">String</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>AuthorName<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><br>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Annotations</span><span class="token punctuation">></span></span><br>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Annotations</span> <span class="token attr-name">Target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>CatalogService.Orders/createdAt<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Annotation</span> <span class="token attr-name">Term</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UI.HiddenFilter<span class="token punctuation">"</span></span> <span class="token attr-name">Bool</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><br>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Annotation</span> <span class="token attr-name">Term</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Core.Immutable<span class="token punctuation">"</span></span> <span class="token attr-name">Bool</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><br>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Annotation</span> <span class="token attr-name">Term</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Core.Computed<span class="token punctuation">"</span></span> <span class="token attr-name">Bool</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><br>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Annotation</span> <span class="token attr-name">Term</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Common.Label<span class="token punctuation">"</span></span> <span class="token attr-name">String</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Created On<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><br>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Annotations</span><span class="token punctuation">></span></span><br>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Annotations</span> <span class="token attr-name">Target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>CatalogService.Orders/createdBy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Annotation</span> <span class="token attr-name">Term</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UI.HiddenFilter<span class="token punctuation">"</span></span> <span class="token attr-name">Bool</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><br>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Annotation</span> <span class="token attr-name">Term</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Core.Immutable<span class="token punctuation">"</span></span> <span class="token attr-name">Bool</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><br>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Annotation</span> <span class="token attr-name">Term</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Core.Computed<span class="token punctuation">"</span></span> <span class="token attr-name">Bool</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><br>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Annotation</span> <span class="token attr-name">Term</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Core.Description<span class="token punctuation">"</span></span> <span class="token attr-name">String</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>User's unique ID<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><br>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Annotation</span> <span class="token attr-name">Term</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Common.Label<span class="token punctuation">"</span></span> <span class="token attr-name">String</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Created By<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><br>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Annotations</span><span class="token punctuation">></span></span><br>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Annotations</span> <span class="token attr-name">Target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>CatalogService.Orders/modifiedAt<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Annotation</span> <span class="token attr-name">Term</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UI.HiddenFilter<span class="token punctuation">"</span></span> <span class="token attr-name">Bool</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><br>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Annotation</span> <span class="token attr-name">Term</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Core.Computed<span class="token punctuation">"</span></span> <span class="token attr-name">Bool</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><br>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Annotation</span> <span class="token attr-name">Term</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Common.Label<span class="token punctuation">"</span></span> <span class="token attr-name">String</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Changed On<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><br>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Annotations</span><span class="token punctuation">></span></span><br>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Annotations</span> <span class="token attr-name">Target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>CatalogService.Orders/modifiedBy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Annotation</span> <span class="token attr-name">Term</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UI.HiddenFilter<span class="token punctuation">"</span></span> <span class="token attr-name">Bool</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><br>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Annotation</span> <span class="token attr-name">Term</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Core.Computed<span class="token punctuation">"</span></span> <span class="token attr-name">Bool</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><br>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Annotation</span> <span class="token attr-name">Term</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Core.Description<span class="token punctuation">"</span></span> <span class="token attr-name">String</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>User's unique ID<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><br>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Annotation</span> <span class="token attr-name">Term</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Common.Label<span class="token punctuation">"</span></span> <span class="token attr-name">String</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Changed By<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><br>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Annotations</span><span class="token punctuation">></span></span><br>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Annotations</span> <span class="token attr-name">Target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>CatalogService.Orders/country<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Annotation</span> <span class="token attr-name">Term</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Common.Label<span class="token punctuation">"</span></span> <span class="token attr-name">String</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Country<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><br>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Annotation</span> <span class="token attr-name">Term</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Core.Description<span class="token punctuation">"</span></span> <span class="token attr-name">String</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Country code as specified by ISO 3166-1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><br>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Annotations</span><span class="token punctuation">></span></span><br>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Annotations</span> <span class="token attr-name">Target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>CatalogService.Orders/country_code<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Annotation</span> <span class="token attr-name">Term</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Common.Label<span class="token punctuation">"</span></span> <span class="token attr-name">String</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Country<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><br>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Annotation</span> <span class="token attr-name">Term</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Common.ValueList<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Record</span> <span class="token attr-name">Type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Common.ValueListType<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PropertyValue</span> <span class="token attr-name">Property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Label<span class="token punctuation">"</span></span> <span class="token attr-name">String</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Country<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><br>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PropertyValue</span> <span class="token attr-name">Property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>CollectionPath<span class="token punctuation">"</span></span> <span class="token attr-name">String</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Countries<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><br>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PropertyValue</span> <span class="token attr-name">Property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Parameters<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Collection</span><span class="token punctuation">></span></span><br>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Record</span> <span class="token attr-name">Type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Common.ValueListParameterInOut<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br>                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PropertyValue</span> <span class="token attr-name">Property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>LocalDataProperty<span class="token punctuation">"</span></span> <span class="token attr-name">PropertyPath</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>country_code<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><br>                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PropertyValue</span> <span class="token attr-name">Property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ValueListProperty<span class="token punctuation">"</span></span> <span class="token attr-name">String</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>code<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><br>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Record</span><span class="token punctuation">></span></span><br>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Record</span> <span class="token attr-name">Type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Common.ValueListParameterDisplayOnly<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br>                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PropertyValue</span> <span class="token attr-name">Property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ValueListProperty<span class="token punctuation">"</span></span> <span class="token attr-name">String</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><br>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Record</span><span class="token punctuation">></span></span><br>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Collection</span><span class="token punctuation">></span></span><br>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>PropertyValue</span><span class="token punctuation">></span></span><br>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Record</span><span class="token punctuation">></span></span><br>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Annotation</span><span class="token punctuation">></span></span><br>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Annotation</span> <span class="token attr-name">Term</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Core.Description<span class="token punctuation">"</span></span> <span class="token attr-name">String</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Country code as specified by ISO 3166-1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><br>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Annotations</span><span class="token punctuation">></span></span><br>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Annotations</span> <span class="token attr-name">Target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>CatalogService.Countries<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Annotation</span> <span class="token attr-name">Term</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UI.Identification<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Collection</span><span class="token punctuation">></span></span><br>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Record</span> <span class="token attr-name">Type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UI.DataField<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PropertyValue</span> <span class="token attr-name">Property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Value<span class="token punctuation">"</span></span> <span class="token attr-name">Path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><br>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Record</span><span class="token punctuation">></span></span><br>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Collection</span><span class="token punctuation">></span></span><br>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Annotation</span><span class="token punctuation">></span></span><br>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Annotations</span><span class="token punctuation">></span></span><br>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Annotations</span> <span class="token attr-name">Target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>CatalogService.Countries/name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Annotation</span> <span class="token attr-name">Term</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Common.Label<span class="token punctuation">"</span></span> <span class="token attr-name">String</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Name<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><br>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Annotations</span><span class="token punctuation">></span></span><br>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Annotations</span> <span class="token attr-name">Target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>CatalogService.Countries/descr<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Annotation</span> <span class="token attr-name">Term</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Common.Label<span class="token punctuation">"</span></span> <span class="token attr-name">String</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Description<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><br>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Annotations</span><span class="token punctuation">></span></span><br>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Annotations</span> <span class="token attr-name">Target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>CatalogService.Countries/code<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Annotation</span> <span class="token attr-name">Term</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Common.Text<span class="token punctuation">"</span></span> <span class="token attr-name">Path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><br>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Annotation</span> <span class="token attr-name">Term</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Common.Label<span class="token punctuation">"</span></span> <span class="token attr-name">String</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Country Code<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><br>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Annotations</span><span class="token punctuation">></span></span><br>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Annotations</span> <span class="token attr-name">Target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>CatalogService.Countries_texts/name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Annotation</span> <span class="token attr-name">Term</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Common.Label<span class="token punctuation">"</span></span> <span class="token attr-name">String</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Name<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><br>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Annotations</span><span class="token punctuation">></span></span><br>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Annotations</span> <span class="token attr-name">Target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>CatalogService.Countries_texts/descr<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Annotation</span> <span class="token attr-name">Term</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Common.Label<span class="token punctuation">"</span></span> <span class="token attr-name">String</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Description<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><br>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Annotations</span><span class="token punctuation">></span></span><br>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Annotations</span> <span class="token attr-name">Target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>CatalogService.Countries_texts/code<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Annotation</span> <span class="token attr-name">Term</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Common.Text<span class="token punctuation">"</span></span> <span class="token attr-name">Path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><br>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Annotation</span> <span class="token attr-name">Term</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Common.Label<span class="token punctuation">"</span></span> <span class="token attr-name">String</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Country Code<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><br>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Annotations</span><span class="token punctuation">></span></span><br>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Schema</span><span class="token punctuation">></span></span><br>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">edmx:</span>DataServices</span><span class="token punctuation">></span></span><br><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">edmx:</span>Edmx</span><span class="token punctuation">></span></span></code></pre>
<p><a name="further-annotations"></a></p>
<h4>Further annotations</h4>
<p>There are some annotations in the EDMX that we've not mentioned here. But you should be able to work out what they are, where they came from, and understand what they are for. That is a task for you to complete on your own. A clue here is that they relate to built-in CAP features relating to <a href="https://cap.cloud.sap/docs/cds/common">Common Types &amp; Aspects</a>.</p>
<p>Good luck, and happy annotating!</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>SAP CodeJam on the btp CLI and APIs in Heilbronn</title>
      <link href="https://qmacro.org/blog/posts/2023/03/01/sap-codejam-on-the-btp-cli-and-apis-in-heilbronn/"/>
      <updated>2023-03-01T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2023/03/01/sap-codejam-on-the-btp-cli-and-apis-in-heilbronn/</id>
      <content type="html">
        <![CDATA[
      <p>The Developer Advocates are ramping up CodeJams this year. Following on from <a href="/blog/posts/2023/02/11/sap-codejam-on-service-integration-with-cap-in-utrecht/">my visit to Utrecht</a> to deliver a CodeJam on service integration with CAP, I was in Heilbronn last week to deliver <a href="https://groups.community.sap.com/t5/sap-codejam/sap-codejam-btp-hands-on-with-the-btp-cli-and-apis-heilbronn-de/ev-p/130512">another CodeJam</a>, this time on the topic of the btp CLI and APIs.</p>
<h2>The journey there</h2>
<p>After a flight to Frankfurt and then a long and circuitous route to Heilbronn on the train, via Wiesbaden (!) and Mannheim (I think there were some engineering works going on) I set off from my hotel near Heilbronn station on the morning of the event, and crossed the Neckar river.</p>
<p><img src="/images/2023/03/neckar.jpg" alt="crossing the Neckar river"></p>
<p>I found the venue easily, mostly because there was some lovely signage showing us the way.</p>
<p><img src="/images/2023/03/poster-on-door.jpg" alt="poster on the door"></p>
<p>I must start out by congratulating Marco Buescher, the host at Engineering ITS GmbH, for such great organisation. Just look at the setup that awaited us!</p>
<p><img src="/images/2023/03/setup.jpg" alt="the setup at the host venue"></p>
<h2>Getting started</h2>
<p>The partipants arrived (some from afar, including Prague!) and we quickly got going with the CodeJam content, installing and tinkering with the btp CLI, and getting to know it by setting up the autocomplete feature and then exploring various resources on the SAP Business Technology Platform (SAP BTP).</p>
<p>We then started digging into one of the btp CLI's killer features, the JSON output, and spent some time learning how to parse and manipulate that JSON properly.</p>
<p>After that deep dive, I think it's fair to say that any fear of understanding the complexity of the output structures was dispelled; even a couple of participants who weren't primarily developers told me that their confidence in requesting, handling and using complex structured content like this had grown significantly. In addition, the trepidation folks felt about what SAP BTP was, and whether they would grok it, dissolved into the ether.</p>
<p>That made me happy.</p>
<p><img src="/images/2023/03/working.jpg" alt="the participants busy working away"></p>
<h2>Digging in</h2>
<p>One of the cool things about the relationship between what we can do with the btp CLI, and with the platform's Core Services APIs, is that more often than not, the same mechanism is being used in the background. With that in mind, we transitioned smoothly from using the btp CLI on the command line, to gearing up to calling an API, and comparing the output.</p>
<p>The journey from a standing start to calling an API was done over the course of three exercises, and for that I make no apology. One of the great things about a CodeJam event is that as well as getting to know each other, the participants have the best chance of getting to know the subject at hand in a meaningful way; they have the time to move slowly over the surface area and dig in deep, building a solid understanding about the fundamental interconnectedness of all things (that's a nod to the fictional holistic detective Dirk Gently, by the way).</p>
<p>There are a lot of moving parts to understand, from service instances and bindings, to authentication servers, OAuth 2.0 grant types, token requests, construction of authentication headers, and lots more. By the end of the third of these three exercises I could sense the participants flexing their newly formed muscles in this area, and it was a delight to see.</p>
<h2>Breaking for lunch</h2>
<p>We broke for a wonderful Italian lunch (the host company has its world headquarters in Rome, Italy) and it was then revealed that it was Marco's birthday that day!</p>
<p><img src="/images/2023/03/lunch.jpg" alt="lunch"></p>
<h2>Continuing the learning and networking</h2>
<p>After that we got going again on the remaining exercises, looking at automation and scripting. One of the things that everyone seemed to enjoy (as did the participants in Utrecht earlier in the month) was the flow; we all tacked an exercise, and then got together at the end of that exercise to discuss what we'd done, what we'd learned, and to talk about some of the (deliberately open-ended) questions that are at the end of each exercise.</p>
<p>This way, no-one gets left behind, and the discussion and break between each exercise allows for a more permanent embedding of the knowledge in the brain.</p>
<p>We finished off the day with a couple of exercises where the participants created new resources in their SAP BTP subaccount, using the btp CLI, and then cleaned up using the corresponding API. On each API call we examined the verbose HTTP output carefully, learning how to interpret it, how to spot issues, and how to deal with errors.</p>
<h2>Wrapping up</h2>
<p>Overall, I think it's fair to say that we got a lot out of the day. The participants were great, coming with an open mind and a willingness to learn and be curious, which is all one can wish for.</p>
<p>Thanks again to <a href="https://eng-its.de/">Engineering ITS GmbH</a> for hosting, to the participants for coming, to my lovely colleagues and helpers Dinah and Kevin, as well as a bonus visit from another colleague Marco H from a different team at SAP, and last but not least to Marco B for organising!</p>
<p><img src="/images/2023/03/waving.jpg" alt="All the attendees waving"></p>
<hr>
<p>For more on CodeJams, have a look at the long list of <a href="https://groups.community.sap.com/t5/sap-codejam/eb-p/codejam-events">upcoming CodeJam events</a> and the <a href="https://groups.community.sap.com/t5/sap-codejam-blog-posts/sap-codejam-topics/ba-p/221407">topics currently on offer</a>.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>SAP CodeJam on Service Integration with CAP in Utrecht</title>
      <link href="https://qmacro.org/blog/posts/2023/02/11/sap-codejam-on-service-integration-with-cap-in-utrecht/"/>
      <updated>2023-02-11T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2023/02/11/sap-codejam-on-service-integration-with-cap-in-utrecht/</id>
      <content type="html">
        <![CDATA[
      <p>Yesterday I ran an SAP CodeJam in Utrecht, in The Netherlands, on &quot;Service Integration with the SAP Cloud Application Programming Model&quot; (CAP), and I think it's fair to say it was a great success.</p>
<h2>More SAP CodeJams in 2023</h2>
<p>Moving into 2023, my Developer Advocate teammates and I are looking forward to running more SAP CodeJam events. This was not the first SAP CodeJam event this year, Tom Jung ran one in January <a href="https://groups.community.sap.com/t5/sap-codejam/sap-codejam-btp-hands-on-with-the-btp-cli-and-apis-memphis-tn/ev-p/130184">on the btp CLI and APIs</a>. But it was the first SAP CodeJam on this specific topic.</p>
<p>If you're reading this it's quite possible you already know how fundamentally important CAP is (if not, may I recommend <a href="https://qmacro.org/blog/posts/2019/11/06/cap-is-important-because-it's-not-important/">CAP is important because it's not important</a>). Moreover, the breadth of application for CAP is enormous, and it makes sense to have some more focused subject matter based CAP CodeJams as well as more general ones.</p>
<p>So in addition to an SAP CodeJam covering CAP and SAP HANA Cloud (see <a href="https://groups.community.sap.com/t5/sap-codejam/sap-codejam-sap-cloud-application-programming-model-with-sap/ev-p/9652">this instance</a> for example), we now have this SAP CodeJam which is designed to give you a friendly but deep dive introduction to key aspects of service integration with CAP. What service integration is, how it works, what CAP offers you as a developer, plus best practices and more, using a simple local service combined with a remote SAP S/4HANA Cloud service on the SAP API Business Hub. You can read more in the <a href="https://github.com/SAP-samples/cap-service-integration-codejam#about-this-codejam">About this CodeJam</a> section of the material repository.</p>
<h2>Yesterday's event</h2>
<p>So, how did <a href="https://groups.community.sap.com/t5/sap-codejam/sap-codejam-cap-service-integration-with-sap-cloud-application/ev-p/216773">yesterday's SAP CodeJam on Service Integration with SAP Cloud Application Programming Model</a> go?</p>
<h3>My journey there</h3>
<p>I've flown enough work air miles in the past few decades to last more than a lifetime, so I take the opportunity to travel by train whenever I can these days. It's not just better for the planet, it's better for my mental wellbeing too, and it's so much easier to work and relax.</p>
<p>So I took a first train from Manchester Piccadilly to London Euston, arriving in time to spend a pleasant hour's walk around my old stomping ground (I studied at University College London and lived and worked in London for years after too).</p>
<p>Then it was time to head to another central London train station, St Pancras, with its well-preserved gothic architecture.</p>
<p><img src="/images/2023/02/London-St-Pancras.jpg" alt="St Pancras"></p>
<p>It's here that the Eurostar service has its London terminus, so I headed through passport control and was soon boarded and on my way.</p>
<p><img src="/images/2023/02/St-Pancras-Eurostar.jpg" alt="Eurostar trains at St Pancras station"></p>
<p>After spending the night in Rotterdam, I set off to Utrecht the next morning, where Wim Snoep kindly picked me up from Utrecht Leidsche Rijn train station.</p>
<p><img src="/images/2023/02/Utrecht-Leidsche-Rijn.jpg" alt="Utrecht Leidsche Rijn station"></p>
<p>We had a late breakfast at the INNOV8iON office, and in picking up sandwiches, they had ordered one specifically for me with an elongated <a href="https://en.wikipedia.org/wiki/Bitterballen">bitterbal</a> as they knew that was a favourite of mine. The day was off to a great start! :-)</p>
<p>I'd run an SAP CodeJam at <a href="https://innov8ion.nl">INNOV8iON</a> before, so I knew that all the host duties would be well taken care of by the lovely folks there, and I was right.</p>
<h3>Getting started</h3>
<p>We were soon underway.</p>
<p><img src="/images/2023/02/Welcome-Slide.jpg" alt="DJ and the initial welcome slide"></p>
<p>There was a warm welcome for me and all the participants, with a nice introduction from Wim as folks arrived and started to get to know each other.</p>
<p><img src="/images/2023/02/Getting-Together.jpg" alt="The participants getting together"></p>
<h3>The exercises and exercise recaps</h3>
<p>Over the next 6 or so hours, we worked through the exercises, with the participants using their own laptops, with a <a href="https://github.com/SAP-samples/cap-service-integration-codejam/tree/main/exercises/01-set-up-workspace">development environment</a> that was (for this particular SAP CodeJam) either a Dev Space in SAP Business Application Studio or VS Code with a dev container.</p>
<p>After each exercise we stepped away from the keyboards and got together for a 5 minute recap to work through some open ended questions relating to what we'd just done, and to discuss anything that came up, in that exercise.</p>
<p><img src="/images/2023/02/Exercise-Recap.jpg" alt="Exercise recap time"></p>
<p><em>Picture courtesy of Wim Snoep</em></p>
<p>This way we stayed on track together throughout the entire event, and everyone also had a chance to allow what they'd just worked through to bed down more firmly in the brain, before moving on.</p>
<h3>A break for dinner</h3>
<p>After getting about two thirds of the way through the exercises, we took a well-earned break for some delicious food and drink, provided by our hosts, and took a chance to get to know each other better and talk about what we'd learned so far.</p>
<p><img src="/images/2023/02/Dinner.jpg" alt="Dinner"></p>
<p>After that, we got back to it, completing the core part of the SAP CodeJam content (exercises 1 through 11), leaving the last bonus exercise for the participants to complete at home. This bonus exercise covers some CAP-based OData annotations for SAP Fiori elements; not directly part of the core topic, but certainly related and useful to have as reference.</p>
<h3>HANA Cafe NL podcast</h3>
<p>After the main event had finished, I had the opportunity to join Wim and another participant Julian to record an episode of the <a href="https://saphanacafenl.podbean.com">HANA Cafe NL</a> podcast, with Twan van den Broek. We talked about the day and it was a lot of fun, not to mention fascinating to see Twan's rather professional podcast recording equipment!</p>
<p><img src="/images/2023/02/Podcast-Recording.jpg" alt="Recording the podcast episode"></p>
<h2>Wrapping up</h2>
<p>All in all it was a great day, made successful by the hosts at INNOV8iON and especially by all the participants who embraced the SAP CodeJam spirit, getting to know each other while working through the learning material together.</p>
<p>During a couple of the post-exercise recap sessions, we even had bonus information shared with the group by some of the participants. Now that's what I call collaborative learning!</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Living on a narrowboat - embracing constraints</title>
      <link href="https://qmacro.org/blog/posts/2023/01/16/living-on-a-narrowboat-embracing-constraints/"/>
      <updated>2023-01-16T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2023/01/16/living-on-a-narrowboat-embracing-constraints/</id>
      <content type="html">
        <![CDATA[
      <p>Previous post in this series: <a href="/blog/posts/2023/01/09/working-from-a-narrowboat-internet-connectivity/">Working from a narrowboat - Internet connectivity</a>.</p>
<hr>
<p>It's no secret that a narrowboat is smaller than the vast majority of land-based homes (or offices for that matter). In the first post in this series, <a href="/blog/posts/2023/01/02/i'm-moving-onto-a-narrowboat/">I'm moving onto a narrowboat</a>, I outlined some of the basic dimensions (57 feet long and 6 feet 10 inches wide) and shared a diagram of the narrowboat layout:</p>
<p><img src="/images/2023/01/narrowboat-design.png" alt="My narrowboat design, showing the entire boat length and layout details"></p>
<p>What's clear from the design is that given the outside space at the bow and the stern, the total internal cabin length is actually more like 42 feet, from the steps down into the galley from the double doors on the cruiser stern, all the way to the step up from the bedroom, through the double doors at the front, into the well deck at the bow (remember, each of the squares in the diagram represents 1 foot x 1 foot or 30 cm x 30 cm).</p>
<p>That's clearly a constraint that one cannot ignore. But it's not the most significant one. More importantly, constraints are not necessarily a bad thing anyway.</p>
<h2>Small space, big picture</h2>
<p>Let me pause here and dwell on something Igor Stravinsky said:</p>
<p><em>&quot;The more constraints one imposes, the more one frees one's self. And the arbitrariness of the constraint serves only to obtain precision of execution.&quot;</em></p>
<p>This is a great way to look at constraints, especially in today's world of everything everywhere at any time. While I've lived in very comfortable properties, I've never really been one that has coveted the new thing, the better washing machine, another car, that kind of thing. Yes, I've probably bought too much tech equipment in the past, but I've been offloading a lot of that via eBay, Gumtree and the like. What Stravinsky might have had in mind was certainly unlikely to be related to household appliances or computers, but the idea of material possession does come into it, at least from my perspective.</p>
<p>I mean, I'm not going to turn into a hermit or anything like that but over the past few years I've been conscious of how I live.</p>
<p>Reducing one's reliance on material possessions is one thing (and a useful one given the prospect of moving onto a narrowboat) but the feeling of freedom, or at least the ability to escape from the hamster wheel of consumerism is very attractive.</p>
<p>Living day to day with far fewer items holds an appeal for me that is hard to put into words. It's not that I'm eschewing all luxuries, it's that I am (and have to be) very particular about the few that I can allow myself. One of these is a space for my <a href="/tags/coffee/">coffee making equipment</a>.</p>
<p><img src="/images/2023/01/coffeestation.png" alt="My Rancilio Rocky grinder and La Pavoni lever espresso machine"></p>
<p>If you open the narrowboat design diagram in a new window to see it in its full size, you will see a worktop in the galley, numbered 18, with drawers below. That's where this coffee making equipment is going to live.</p>
<h2>Cooking and the multifuel stove</h2>
<p>And while we're there, note the gas hob has just two burners. On many liveaboard narrowboats, there will be a full size cooker with four gas burners. While I've used all four burners while cooking for a load of dinner guests round at the house, that doesn't happen very often and as I'm going to be cooking just for myself for most of the time, two is all I need. What's more, there's the multifuel stove (numbered 24) that also will do perfect double duty for cooking as well as heating.</p>
<p>I want to write a separate post about what stove I chose, how I came to the decision and the factors I considered. For now, here's a picture of it:</p>
<p><img src="/images/2023/01/fat-penguin-tall-order-stove.png" alt="The Fat Penguin (Tall Order)"></p>
<p>It's from <a href="https://chillipenguin.co.uk/">Chilli Penguin Stoves</a> not too far away in Pwllheli, Wales, and is the <a href="https://chillipenguin.co.uk/chilli_products/fat-penguin-tall-order/">Fat Penguin (Tall Order)</a> model. As you can see, it has a decent oven and also the top of the stove acts as a hotplate too, for slow cooking, and brewing coffee in a <a href="/blog/posts/2021/03/31/deeper-connections-to-everyday-tools/">moka pot</a>.</p>
<p>This is in addition to the gas oven and grill I'll have in the galley below the two burner hob.</p>
<p><a name="gas"></a></p>
<h2>Gas</h2>
<p>The hob, oven and grill all run on gas. So where's that from? If you look closely at the stern in the narrowboat design diagram, you'll see a couple of areas numbered 04. These are the stern gas lockers, and you can get a better idea of what they look like from these pictures.</p>
<p>In this first one, you can see inside them (they go deeper than they look):</p>
<p><img src="/images/2023/01/gas-lockers-1.png" alt="Gas lockers in the stern, from above"></p>
<p>In this one, you can see that their effective height from the stern floor is such that they make nice seats:</p>
<p><img src="/images/2023/01/gas-lockers-2.png" alt="Gas lockers in the stern, from below"></p>
<p>The gas is LPG and usually propane, and is most commonly found in 13kg canister sizes. The lockers are designed to take a 13kg canister each. You can read more about gas on board in this article <a href="https://www.thefitoutpontoon.co.uk/gas-lpg/">Gas (LPG) On Narrowboats</a> on The Fitout Pontoon's website.</p>
<p>So in a liveaboard situation, you're effectively off grid. And this is a constraint that's hard to ignore. Once you've got your two gas canisters, and you're underway on the cut, that's it. No unlimited supply. To be fair, even when you're in a marina, on a long term mooring, you'll still have to change the canisters when they're empty (this is why having two instead of one is a great idea).</p>
<p>Incidentally, David Johns, otherwise known as the person behind the YouTube channel <a href="https://www.youtube.com/@CruisingTheCut">CruisingTheCut</a> has a video on fuel boats, those traders who ply the waterways carrying coal, diesel and LPG. They have schedules and you can buy from them as they come round your area. The video is <a href="https://www.youtube.com/watch?v=4_OZDFML7gY">A day in the life of a fuel boat on the UK canals</a>.</p>
<h2>Water</h2>
<p>Talking of being off grid, you're not only going to be carrying your entire gas supply, but also your water. Again, without going into too much detail right now, narrowboats have water tanks that hold water for your everyday use. As well as for drinking, it's for washing, showering, and the toilet (yes there are composting toilets but that's a subject for another time and I'm not going for one of those anyway, as I don't fancy the process of managing multiple stages of composted waste in bags on my narrowboat, thank you very much).</p>
<p>These tanks are often at the bow, under the well deck, and while there are different types (and some used to be part of the hull itself), modern narrowboats will often be fitted with tanks made of stainless steel, holding between 400 and 500 litres. Once that water's gone, it's gone. Another constraint, and this time perhaps an even more important one than the gas constraint.</p>
<p>There are <a href="https://canalrivertrust.org.uk/specialist-teams/maintaining-our-waterways/maintaining-our-facilities/water-points">water points</a> that can be found everywhere along the canal network, so yes you can obviously fill your tank up again, but again, it's not like the cold water tap in a house, which has a magically endless supply. You have to use your water carefully and plan where and when you can get more.</p>
<p>You can see the space for the water tank in this picture; it will go directly behind the bow thruster tube (which will run between the two exit holes on each side) and sit underneath the well deck.</p>
<p>During the steelwork, Mark from the Fitout Pontoon contacted the team and got them to cut the exit holes as far forward as possible, to leave more room for a larger tank. Normally the exit holes would be a bit further back; in fact, you can see the original planned position for the bow thruster tube, indicated by the arrows marked on the base plate:</p>
<p><img src="/images/2023/01/bow.png" alt="The space for the water tank in the bow"></p>
<p><a name="electricity-and-fuel-for-the-engine-and-for-the-stove"></a></p>
<h2>Electricity and fuel for the engine and for the stove</h2>
<p>It's clear that a narrowboat life means an off grid life, for the most part. I say for the most part, as some folks live on their narrowboats which are permanently moored, and are thus also able to be permanently connected to &quot;shoreline power&quot; (i.e. a 230 volt AC supply).</p>
<p>But if you're not permanently moored, you have further constraints, including where your electricity comes from, and how much diesel you can store, and what you need to use it for. I want to cover power, engine and heating in separate posts, but here's a quick overview for now.</p>
<h3>Diesel</h3>
<p>Diesel is used for propulsion (i.e. there's a diesel engine) and for heating. There's a diesel tank in the stern, built in to the shell. You can see where it is in this photo (marked with the red oblong) which also shows the diesel tank drain (the arrow on the right) and three pipes marked E, F and R.</p>
<p>Regarding those three pipes and their legends:</p>
<ul>
<li>&quot;E&quot; stands for <a href="https://www.eberspaecher-climate.com/">Eberspaecher</a> and is one of two common manufacturers of diesel powered heating systems for marine application. I'm actually having one from <a href="https://www.webasto-comfort.com/en-uk/heating/marine/">Webasto</a>, the other common manufacturer. But basically this pipe marked &quot;E&quot; is to supply diesel to that heating system (which in turn will service a radiator circuit in the cabin, and in addition the pipes in the circuit will run through a hot water tank, called a calorifier).</li>
<li>&quot;F&quot; stands for flow, i.e. the supply of diesel from the tank to the engine (to provide not only propulsion but also, via the alternator, to provide charge to the leisure batteries and starter battery, in addition to charging them from solar panels).</li>
<li>&quot;R&quot; stands for return, and is to allow the return of unused diesel from the engine back into the tank. To be honest, it was only after attending a recent two day <a href="https://nbsc.org.uk/diesel-engine-boat-maintenance/">Diesel Engine and Boat Maintenance Course</a> at the Narrowboat Skills Centre that I learned how this worked and why it was necessary.</li>
</ul>
<p><img src="/images/2023/01/diesel-tank.png" alt="The diesel tank in the stern"></p>
<blockquote>
<p>The phrase &quot;leisure batteries&quot; refers to the battery bank that is used to power everything on and inside the narrowboat. It is used to contrast with &quot;starter battery&quot; which is the one that is used to start the engine; they are usually on separate circuits so that even if you drain your leisure batteries through use of equipment on board, you can always start your engine (and then in turn recharge the drained batteries).</p>
</blockquote>
<h3>Fuel for the stove</h3>
<p>I can use coal and / or wood for the multifuel stove. But therein lies yet another constraint. Where do I keep it? There's a finite amount of space to store things. Often narrowboaters will store bags of coal on the roof (if space allows, and if you're not that bothered about the paintwork) or in the bow area, both in the well deck and also in what is still traditionally called the gas locker at the front.</p>
<p>You can see this bow gas locker in the narrowboat design diagram, specifically its lid, and you can see the (square) hole that the lid covers in the picture of the bow, above. You can get a decent amount of coal and wood in there, but the space is finite and there are other bulky things that need space in there - the bow thruster itself, a hosepipe reel (for bringing water from the water point taps and into the tank), and so on.</p>
<p>Again, embracing that constraint, using fuel wisely and conservatively, and planning where &amp; when you're going to be able re-stock, is key.</p>
<h3>Electricity</h3>
<p>This is such a huge subject I'm going to say very little at this stage, and leave the detail for another time. Suffice it to say that given that I'll be not only living aboard, but working aboard too (see <a href="/blog/posts/2023/01/09/working-from-a-narrowboat-internet-connectivity/">Working from a narrowboat - Internet connectivity</a>).</p>
<p>I'll be moored up and at my desk for large chunks of the day. At my desk I'll have a laptop, an external monitor, and the other usual devices associated with working (and <a href="https://www.youtube.com/playlist?list=PL6RpkC85SLQABOpzhd7WI-hMpy99PxUo0">live streaming</a> from) home.</p>
<p>I'll also be running a fridge / freezer, lights, and so on. After consulting with Mark I made the decision to go for a system that is predominantly 230 volt (AC). In other words, I can use all normal appliances on board. But for that, I will need an inverter (which itself consumes a small amount of power to run) to turn the DC from the leisure battery bank to AC. And the charge in my batteries will definitely not be limitless!</p>
<p>So I will have to think about electricity a lot. How I use it, how I maintain the batteries and the rest of the system, and how I put charge back into the batteries.</p>
<h2>Constraints may maketh me</h2>
<p>That's a lot of constraints. Ones that I cannot easily work around, or avoid.</p>
<p>Nor do I want to. Living more frugally, more consciously, from an environment perspective, can only be a good thing. And the limitations and restrictions that come as a natural part of living in a small off grid space such as a narrowboat keeps me away from the dangers of that age old truism - the more you have, the more you want, and the further out of reach satisfaction becomes.</p>
<p>Age and life experience has made me realise that one of the most precious commodities is time. And the wonderful thing one comes to realise here is that amidst all the constraints that I've described here, one thing that is no more constrained than before, is time.</p>
<p>In fact, through that very increased and pronounced contrast, I'm hoping that I will come to value and enjoy time as an end in itself. On the canal, things move slowly. Very slowly. And I think that is reflected in how time will continue to be available in the same quantities as ever, despite everything else being less available, less copious, and far more immediately finite.</p>
<p>A possible net result of this can be a greater awareness and appreciation for the small things, for the simple things. And that's something I would cherish.</p>
<hr>
<p>Next post in this series: <a href="/blog/posts/2023/04/07/living-on-a-narrowboat-the-stove-as-the-heart-of-the-home/">Living on a narrowboat - the stove as the heart of the home</a>.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Working from a narrowboat - Internet connectivity</title>
      <link href="https://qmacro.org/blog/posts/2023/01/09/working-from-a-narrowboat-internet-connectivity/"/>
      <updated>2023-01-09T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2023/01/09/working-from-a-narrowboat-internet-connectivity/</id>
      <content type="html">
        <![CDATA[
      <p>Previous post in this series: <a href="/blog/posts/2023/01/02/i'm-moving-onto-a-narrowboat/">I'm moving onto a narrowboat</a>.</p>
<hr>
<p>Since publishing the first post about my plans to live on and work from a narrowboat (see <a href="/blog/posts/2023/01/02/i'm-moving-onto-a-narrowboat/">I'm moving onto a narrowboat</a>), I've had some lovely comments and some great questions, thank you. One which came up a lot both on Twitter, from folks like <a href="https://twitter.com/OfMaffi/status/1610428180908888065">Maffi</a>, <a href="https://twitter.com/JBY35/status/1609984376799956994">Joel</a> and <a href="https://twitter.com/sufw/status/1609909407562993666">Sacha</a>, and elsewhere, is: How do I get Internet connectivity? I'll try to answer that question in this post.</p>
<p>I work as a Developer Advocate for SAP, and am in the very fortunate position to work remotely. I've worked remotely (i.e. from home) for many, many years, for different companies; in fact, on reflection, my working life has been a balance of two extremes: the constant weekly travel of a contractor / consultant (there was a &quot;peak&quot; period of 7 years where I flew at least twice a week, and sometimes four times a week, every week, to different clients), and the calm and travel-free context of working from home.</p>
<p>I don't miss the travel at all. Not one bit. I've seen enough airports and economy airplane seats to last more than a lifetime.</p>
<p><img src="/images/2023/01/desk.png" alt="My desk setup at home"></p>
<p>Anyway, pretty much any remote work requires an Internet connection. So when I'm on the narrowboat, I'll need one too. While cable or FTTP is appealing, I don't think there's a cable long enough to make things work as I navigate the canal networks. So the solution needs to be a little more mobile than that.</p>
<p>I did a lot of research, and ended up going for a 4G/5G mobile data based solution. I've actually been using this solution for a while already, I'll explain shortly. Here's what that solution looks like.</p>
<h2>Data provider</h2>
<p>First, I had to decide upon a provider for the 4G/5G mobile data connection. Reading the narrowboating forums and speaking to folks on the cut, the general consensus seemed to come down to a choice between a handful of providers (here in the UK): <a href="https://www.three.co.uk">Three</a>, <a href="https://ee.co.uk">EE</a> and <a href="https://www.vodafone.co.uk/">Vodafone</a>. Each offer a broadband solution based on mobile data. All offer both 4G and 5G based options.</p>
<p>After considering all of them, I opted for Vodafone. Specifically, I went for their <a href="https://www.vodafone.co.uk/data-only-sim">Data only SIM</a> offering, specifically the unlimited data version. This offering includes the &quot;fastest available&quot; speed option, which basically means 5G as well as 4G.</p>
<p>There are plenty of articles out there that show comparisons between 4G and 5G (<a href="https://www.tomsguide.com/features/5g-vs-4g">such as this one</a>), some showing 2X speed increases, other showing a 6X speed increase, but the bottom line was that reaching the 5G speed nirvana for me is currently less of a critical matter, for these reasons:</p>
<ul>
<li>4G speeds are plenty fast enough for remote work, as I'll show below</li>
<li>5G equipment is still extremely expensive, when compared to the equivalent devices only capable of supporting 4G</li>
</ul>
<p>Moreover, the rollout of the 5G mast network in the UK is not complete, certainly not in rural areas, whereas 4G coverage is pretty good. So striving for the ultimate Mbps values would not be worth the effort and expense, at least right now.</p>
<p>That said, I wasn't going to shy away from the fact that Vodafone's offering includes 5G, because then as soon as the prices for 5G devices come down, I'm ready.</p>
<p>When doing the deal with Vodafone, they offered me a 6 months discount, and I've effectively ended up with a 2 year contract where I'm paying around GBP 25.00 per month for all the data I can eat, at the maximum speed I can consume. Compared with my previous FTTP deal with BT (which of course is fibre and extremely fast, but I was paying a <em>lot</em> more), I decided I was happy to pay that amount.</p>
<h2>Equipment</h2>
<p>There are two pieces of equipment that I purchased.</p>
<h3>Router</h3>
<p>I opted for a pretty straightforward 4G+/LTE router, from Huawei. There are plenty of these about, and this one was a refurbished one, from Amazon, specifically the <a href="https://www.amazon.co.uk/gp/product/B09J94GLN3">HUAWEI Unlocked Huawei B535-333 Soyealink, CAT7 400mbps 4G+ /LTE Home/Office Router, 1 x RJ11 Tel Port, Includes 2 x External Antennas, Supports VoIP - White (Renewed)</a>. There were a few essential aspects that this device had, which satisfied my requirements:</p>
<ul>
<li>price: less than GBP 100.00 (it's currently selling for less than GBP 70.00, I think I picked mine up for around that price)</li>
<li>ports: four Ethernet ports on the rear for wired device connectivity</li>
<li>signal: it has SMA connectors behind a panel at the rear, for connecting external antennae</li>
<li>SIM slot: it takes a micro SIM card which it will use for Internet connectivity</li>
</ul>
<blockquote>
<p>Yes, as a Latin scholar, I'm using &quot;antennae&quot; as the plural of &quot;antenna&quot;.</p>
</blockquote>
<p>This is not the highest quality router I've had, but it does the job. It works, the UI is serviceable, I can configure it how I want, mostly (trying to set a custom DNS server in the DHCP settings fails consistently, for example). It's not forever; as soon as similar devices that are 5G capable come out, at a more reasonable price, I'll get one of those, to enjoy higher speeds, but for now, this is fine.</p>
<p>From the perspective of receiving a signal, there are three options, in increasing effectiveness:</p>
<ul>
<li>use the router as-is, with no external antennae attached</li>
<li>use a pair of small (approximately 10cm long) external antennae which came with it (they're colloquially referred to as bunny ears as you can see from the picture below)</li>
<li>connect external (outdoor) antennae</li>
</ul>
<p>Given that a narrowboat is a long steel tube, an external antenna solution was going to be essential to enjoy the best speeds. A lot of outdoor antenna equipment uses <a href="https://en.wikipedia.org/wiki/SMA_connector">SMA connectors</a> and this is why such connectors were essential on the router I went for. While I'd likely get a 4G signal just from the router-internal antenna alone, it would be pretty weak and unreliable. Even adding the small bunny ears wouldn't make much difference (from what I've read on the forums).</p>
<p>So an external outdoor antenna solution, mounted on the narrowboat roof, was what I needed.</p>
<h3>External outdoor antennae</h3>
<p>Roof-mounted antennae would not be subject to the constraints that antennae within the narrowboat would have. Choosing the right type was important, all the same. Some antennae are directional, meaning that to get the optimum signal reception, they need to be oriented and reoriented, to point to the nearest mast. If done properly and consistently, this works well, and directional antennae are often what are mounted on houses. Houses don't move, though, which means that once the orientation is done, the antennae can be left to function.</p>
<p>Narrowboats move. Adjusting the antennae on a narrowboat roof for every new location would get tiresome quickly. Luckily there are omnidirectional solutions, such as the <a href="https://www.amazon.co.uk/Poynting-4G-XPOL-A0001-Cross-Polarised-Antenna/dp/B00C1DGFPS/">Poynting 4G-XPOL-A0001 Cross Polarised 4G Omni LTE Antenna</a>.</p>
<p><img src="/images/2023/01/xpol-4g.jpg" alt="the 4G XPOL-A0001 antenna"></p>
<p>These are a common sight, mounted atop narrowboats on short (approx 40cm) vertical poles which have round magnetised bases, and the cables are fed down through into the cabin where they can be then attached to the back of the router. The reason for the magnetised bases is that if you navigate into a super low tunnel or under a very low bridge, and forget to clear the narrowboat roof beforehand, the antennae device and pole will simply be knocked over and rest on the roof, rather than sustain more significant damaged.</p>
<p>As the name of this one suggests, it is good for 4G bands; the frequency range supported is stated as being 790~960, 1710~2170, 2300~2400 and 2500~2700 MHz.</p>
<p>For only a few quid more, the <a href="https://www.amazon.co.uk/gp/product/B08F4S4DMN/">Poynting XPOL-1 V2 5G 3dBi Omni-Directional Cross Polarised LTE 2x2 MIMO Outdoor Antenna</a> provides the same function and covers the same frequency ranges as the 4G XPOL-A0001, but also covers the 5G frequency range (3400~3800 MHz).</p>
<p>So I went for this 5G version, meaning that the only component in the solution that wasn't 5G-ready or capable was the router, which I would replace when the prices drop. Here's what this XPOL-1 V2 5G antenna looks like - it's a similar size to the 4G-XPOL-A0001 and is mounted on the pole in the same way:</p>
<p><img src="/images/2023/01/xpol-5g.jpg" alt="the XPOL-1 V2 5G antenna"></p>
<h2>Soak testing</h2>
<p>I'm currently living in a rented cottage, and have been &quot;soak testing&quot; this very setup for the past 6 months. It's been my only connection to the Internet. It's been great, and I'm more than happy with it.</p>
<p>I've been consistently getting anywhere between 10Mbps and 25Mbps (both down and up). Yes, many of my friends and colleagues are using FTTP these days and revelling in three-figure Mbps readings. But honestly, the speeds I'm getting work fine. More than fine. I've been live streaming on our <a href="https://www.youtube.com/playlist?list=PL6RpkC85SLQABOpzhd7WI-hMpy99PxUo0">Hands-on SAP Dev</a> show, I've been in more Teams and Zoom based video conferences than you can shake a stick at, I watch YouTube and Amazon Prime movies in the evening on my Google TV dongle, and stream music from YouTube Music during the day too.</p>
<p>When I've prepared an item for our <a href="https://www.youtube.com/playlist?list=PL6RpkC85SLQAVBSQXN9522_1jNvPavBgg">SAP Developer News</a> show, where we first upload everything to a central server before editing everything together, I've had no problems either.</p>
<p>In short, the solution met and kept up with my Internet connectivity requirements for work and play since day one.</p>
<p>Here's a picture showing my current setup here in the cottage:</p>
<p><img src="/images/2023/01/router-antenna-setup.jpg" alt="The router and external antenna"></p>
<p>In the picture you can also see the &quot;bunny ears&quot; antennae on the windowsill, now redundant. You can also see the three LED lights on the right of the router showing a &quot;full&quot; signal. The external antennae device is secured to the window pane with suckers that came with it. The external antennae device is secured to the window pane with suckers that came with it.</p>
<p>(Since I took that picture, in the summer of 2022, I've moved the router to a shelf below the windowsill, where I also now have a Raspberry Pi connected to one of the ethernet ports. I'll cover that in a future post).</p>
<h2>Setup in the narrowboat</h2>
<p>In designing the internal layout, working with Mark to achieve the optimum use of space, we ended up with an office area towards the centre of the cabin, which is the perfect size to fit my desk setup you saw near the start of this post. It's highlighted in red here (open the image in a new tab for better viewing):</p>
<p><img src="/images/2023/01/narrowboat-design-office.png" alt="The office area on the narrowboat, highlighted in red"></p>
<blockquote>
<p>Each of the squares in the narrowboat design image represents 1 square foot (30 cm square).</p>
</blockquote>
<p>I've also highlighted in red where the router will be placed, which is in the electrics cupboard marked &quot;16&quot; near the stern, and where I'll have ethernet ports running from the back of the router: one behind the TV in the saloon (marked &quot;22&quot;), a couple in the office, and one in the bedroom, near the bow, on the shelves marked &quot;56&quot;.
Wired connections in general are better than wireless, and for the main devices in the narrowboat this makes a lot of sense.</p>
<p>In case you're wondering, the ethernet port in bedroom will be for Raspberry Pi based experiments. I may run a separate switch to the router so that I can provide power-over-ethernet (PoE) along these cables; I have <a href="https://thepihut.com/products/raspberry-pi-poe-plus-hat">PoE hats</a> for my Pi devices.</p>
<h2>Mounting of the antennae on the roof</h2>
<p>As I don't have my narrowboat yet, my friend Sarah very kindly sent me some pictures of her similar setup on narrowboat Bright Arrow so I could show you what it actually looks like.</p>
<p>Here you can see her 4G-XPOL-A0001 and how it sits on the roof on the pole with that magnetised base:</p>
<p><img src="/images/2023/01/bright-arrow-xpol-4g-2.jpg" alt="The antennae setup on Bright Arrow's roof"></p>
<p>In this one you can also see how the device is secured to the pole, and how the cables are fed into the cabin through sealed weatherproof connectors, the same ones that are used to feed in from the solar panels:</p>
<p><img src="/images/2023/01/bright-arrow-xpol-4g-1.jpg" alt="The antenna setup, this time from behind, showing how the Poynting device is mounted to the pole"></p>
<hr>
<p>Next post in this series: <a href="/blog/posts/2023/01/16/living-on-a-narrowboat-embracing-constraints/">Living on a narrowboat - embracing constraints</a>.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>I&#39;m moving onto a narrowboat</title>
      <link href="https://qmacro.org/blog/posts/2023/01/02/i&#39;m-moving-onto-a-narrowboat/"/>
      <updated>2023-01-02T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2023/01/02/i&#39;m-moving-onto-a-narrowboat/</id>
      <content type="html">
        <![CDATA[
      <p>I'm having a narrowboat built and am going to live on it and work from it. This post has been a long time coming, and the arrival of the new year has prompted me to start writing about it.</p>
<p>I made the explicit decision some time last year, but I think the decision itself was the culmination of a long time desire to live more simply, combined with the realisation that I'm not getting any younger. I have been intrigued by the <a href="https://en.wikipedia.org/wiki/Tiny-house_movement">tiny house movement</a> in the past, but at the same time the lure of the canal network in the UK has been floating around my periphery for a good while.</p>
<h2>Narrowboats and the canal network</h2>
<p>For those of you not in the UK, the <a href="https://en.wikipedia.org/wiki/Canals_of_the_United_Kingdom">canals</a> form the majority of the network of inland waterways that played a major role in the industrial revolution in the 19th century, being the main transport routes for goods between towns and cities. Around 2700 miles of canals in the system are connected and internavigable (there are more canals that are separate too); most of them in England and Wales. The majority of the canals on the network can accommodate boats up to around 70 feet (21m) long, and up to about 7 feet (2m) wide (hence the term &quot;narrowboat&quot;).</p>
<p>While the original narrowboats -- the ones carrying goods during the industrial revolution -- were drawn by horses along the side of the canal, on the &quot;towpath&quot;, most of today's narrowboats are powered either by diesel engines, but there's an increasing interest in hybrid and pure electric propulsion solutions too. And whereas only a small part of the original narrowboats were given over to accommodation (the vast majority of the space being for the cargo), today's narrowboats have all the amenities for living spread along their length - kitchen (galley), living room (saloon), bathroom and bedroom(s). In fact, modern narrowboats have more tech on them than can be found in most bricks-and-mortar houses.</p>
<p>You can find out more about traditional narrowboats in the article <a href="https://waterways.org.uk/about-us/news/the-evolution-of-the-narrow-boat">Evolution of the Narrow Boat</a>, which includes some great pictures of the traditional designs too.</p>
<h2>Narrowboat layouts</h2>
<p>As I mentioned at the start of this post, I'm having a narrowboat built. There are many ways that folks move onto &quot;the cut&quot; (what folks call the canal, given that the canals were dug out, mostly by hand, from the landscape); buying second-hand, buying the (steel) shell and fitting it out yourself (these are often called &quot;sailaways&quot;) or having the shell built and then fitted out professionally. This latter option comes in two forms, either &quot;off the peg&quot; (i.e. you choose a builder that offers a narrowboat size and fit-out in a layout and specification that suits you) or custom, where you get to specify everything from the length of the narrowboat, to the style (more on that shortly), and every detail of the internal layout.</p>
<p>While longer narrowboats offer more living space, there are some canals (or more specificially some <a href="https://canalrivertrust.org.uk/enjoy-the-waterways/boating/go-boating/a-guide-to-boating/different-types-of-locks">locks</a>) that can only accomodate certain narrowboat lengths. As a general rule, any narrowboat with a length of 57 feet or less can pass through all the locks, and therefore navigate the entire network.</p>
<p>After the length decision there's then the style to decide upon. Generally this comes down to three common variations, known as traditional (&quot;trad&quot;), semi-traditional (&quot;semi-trad&quot;) and &quot;cruiser&quot;. There are some styles that are a mixture of these, but it's easiest to think of just these three styles, and they all basically describe what the back (&quot;stern&quot;) of the narrowboat looks like.</p>
<p>As its name implies, a trad most resembles the original narrowboat designs, where there's only a very small standing space at the helm (you steer from the stern), with as much space given over to covered accommodation as possible.</p>
<p>Then there's the semi-trad which looks from the side like a trad, but the rear-most section forms part of the outside of the narrowboat, i.e. there's more outside standing and sitting space for not only the person navigating but also other folks too.</p>
<p>Then there's the cruiser, which has a larger and more open stern, enough to put up a table and chairs when moored. What you gain in space outside is of course lost inside.</p>
<p>Different folks prefer different layouts and it's more or less just a matter of personal choice and use case requirements.</p>
<p>Of course, I'm massively oversimplifying the layouts here; there are also considerations to be made as to engine placement (and indeed traditional engines have their own &quot;engine room&quot; forward of the stern) but this should hopefully give you a general idea.</p>
<p>And while I'm oversimplifying, I will also say that generally there are only a handful of internal layouts, differing by the order in which the different accommodation sections appear along the length of the narrowboat. Traditionally, going from the stern (rear) to the bow (front), you'll get the bedroom first, then the bathroom, then galley and saloon. There's a layout that seems to be more popular these days, which is a &quot;reverse&quot;, i.e. galley first, then saloon, then bathroom and finally bedroom at the bow.</p>
<h2>My narrowboat</h2>
<p>I have been in the fortunate position of having the funds (from part of the proceeds of a house sale) to go for the custom option, where I've specified pretty much everything.</p>
<p>I wanted to go for a narrowboat that would not be network-restricted, i.e. of a maximum length of 57 feet and, as is typical, 6 feet 10 inches wide (yes, narrowboats are still measured in feet and inches, so I'll stick to those units).</p>
<p>Having spent time on cruiser style narrowboats and enjoyed the outside space very much, I decided upon a cruiser stern, with plenty of space at the back to put out a couple of camping chairs or similar, plus compartments to store gas canisters (for oven and hob cooking) and more.</p>
<p>For reference, the picture immediately below is that of Queenie, owned by Hester at <a href="https://www.starnarrowboatholidays.co.uk/">Star Narrowboat Holidays</a>, moored in Altrincham on the Bridgewater Canal. Queenie has a cruiser stern, and for scale, is 50 feet in length.</p>
<p><img src="/images/2023/01/queenie.jpg" alt="Queenie on the Bridgewater Canal"></p>
<p>And internally I've gone for a reverse layout, with the steps at the rear leading down into the galley. This was also the layout on the narrowboats I've spent time on before (such as Queenie), and I think it's more practical on the whole, for example being able to pop down to get a cup of tea, or grab something, without having to go through the bedroom first (to be fair, many narrowboats that don't have the reverse internal layout are of the trad or semi-trad design, which features an engine and storage room at the very rear of the internal cabin area, so access to tools and so on is simpler than you might think).</p>
<p>Here's my narrowboat design (open the picture in a new browser window for a larger version):</p>
<p><img src="/images/2023/01/narrowboat-design.png" alt="My narrowboat design, showing the entire boat length and layout details"></p>
<h2>My builders</h2>
<p>My research and enquiries had me land at <a href="https://www.thefitoutpontoon.co.uk/">The Fitout Pontoon</a>. And after a great initial phone call, I decided to go with them for the design, an independent step before committing to the next step. I worked with them to finalise a design and specification that I could then take to whatever boat builder I chose.</p>
<p>In the end, because my experience with them in design phase was so positive, I decided to engage them for the entire journey. They would take the design, and deliver the narrowboat according to the specifications. One of the deciding factors was that I got on really well with the proprietor and chief designer Mark, who lives aboard his own narrowboat with his wife and child, and has a huge wealth of experience, knowledge and well-based opinions on everything I could think of, and also on plenty of things I didn't even know that I didn't know.</p>
<p>I'd also already heard great things about them and had followed Chris Mears and his experiences with them on his YouTube channel <a href="https://www.youtube.com/@chrismears-inslowtime">In Slow Time</a>, specifically in these two playlists:</p>
<ul>
<li><a href="https://www.youtube.com/playlist?list=PLIbde5c3EVgCgS8jI0g4bdhH7VqHGpL4k">Narrowboat Shell Build</a></li>
<li><a href="https://www.youtube.com/playlist?list=PLIbde5c3EVgBdAMdzIyGRcfSaM3_v5ZzH">Narrowboat Fit Out</a></li>
</ul>
<p>That distinction afforded by the pair of playlists is an important one. Building narrowboat shells is a different set of skills to fitting out a narrowboat, and The Fitout Pontoon use <a href="http://www.jsrboats.co.uk/">JSR Boats</a>, a well respected shell builder, to create the steel shell, which they then take and turn into a fully fitted out liveaboard narrowboat.</p>
<h2>Where things are right now</h2>
<p>The steelwork is done. During the construction, which was at JSR Boats' facility near Northampton, I got a chance to visit and document the progress in photos. In addition, Mark kept me updated with further photos too.</p>
<p>Before I bring this first post to an end, I'll share some of those early pictures, from a couple of months ago in November 2022.</p>
<p>In this one I'm standing at the stern, and you can just see the beautiful &quot;swim&quot; near the bottom of the narrowboat (where the boat tapers to a narrower point), along which the water will flow and out the rear of which will be the propeller shaft and propeller.</p>
<p><img src="/images/2023/01/steel-1.jpg" alt="Steelwork - from the stern"></p>
<p>I love this next shot because it really shows that it's hand built; I'm in awe of the skills involved in producing anything like this. Incidentally the <a href="https://www.thefitoutpontoon.co.uk/hull-integral-parts/steel-specification/">steel specifications</a> here are ones typically used for such builds, being &quot;10,6,5,4&quot;. These are steel thicknesses in mm, and are for (in order) the base plate, the hull sides, the cabin sides and the roof.</p>
<p><img src="/images/2023/01/steel-2.jpg" alt="Steelwork - from the bow"></p>
<p>In this third shot you can see the cabin ends, with a space for the double door from the front of the cabin into the bow ... more specifically into the area called the &quot;well deck&quot;, underneath which will be the 450l fresh water tank.</p>
<p><img src="/images/2023/01/steel-3.jpg" alt="Steelwork - cabin ends"></p>
<h2>Next time</h2>
<p>In fact, the build has progressed beyond this, but I'll save more pictures and details for the next post.</p>
<p>If there's something you'd like to know, tell me in the comments and I'll try to answer it next time.</p>
<hr>
<p>Next post in this series: <a href="/blog/posts/2023/01/09/working-from-a-narrowboat-internet-connectivity/">Working from a narrowboat - Internet connectivity</a>.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Learning from exploring a question on jq</title>
      <link href="https://qmacro.org/blog/posts/2022/12/28/learning-from-exploring-a-question-on-jq/"/>
      <updated>2022-12-28T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2022/12/28/learning-from-exploring-a-question-on-jq/</id>
      <content type="html">
        <![CDATA[
      <p>In this post I explore different ways of achieving a simple goal in reformulating some JSON, with jq, and explain my thinking as I go.</p>
<p>Occasionally I browse the <a href="https://stackoverflow.com/questions/tagged/jq?tab=Newest">Newest 'jq' questions on Stack Overflow</a> and try to gently expand my jq knowledge, or at least exercise my young jq muscles. This morning I came across this one: <a href="https://stackoverflow.com/questions/74937237/jq-extracting-the-name-and-the-value-of-objects-as-an-array">Jq extracting the name and the value of objects as an array</a>. Sometimes the questions are hard, sometimes less so. This one didn't seem too difficult, so I thought I'd take a quick coffee break to see what I could come up with (the question had <a href="https://stackoverflow.com/a/74937461/384366">already been answered</a> but I didn't look until later).</p>
<h2>The requirement</h2>
<p>The OP had this JSON:</p>
<pre class="language-json"><code class="language-json"><span class="token punctuation">{</span><br>  <span class="token property">"filterFeatureGroup"</span><span class="token operator">:</span> <span class="token punctuation">{</span><br>    <span class="token property">"Hauttyp"</span><span class="token operator">:</span> <span class="token punctuation">[</span><br>      <span class="token string">"Normal"</span><br>    <span class="token punctuation">]</span><span class="token punctuation">,</span><br>    <span class="token property">"Deckkraft"</span><span class="token operator">:</span> <span class="token punctuation">[</span><br>      <span class="token string">"Mittlere Deckkraft"</span><br>    <span class="token punctuation">]</span><span class="token punctuation">,</span><br>    <span class="token property">"Grundfarbe"</span><span class="token operator">:</span> <span class="token punctuation">[</span><br>      <span class="token string">"Grau"</span><br>    <span class="token punctuation">]</span><span class="token punctuation">,</span><br>    <span class="token property">"Produkteigenschaften"</span><span class="token operator">:</span> <span class="token punctuation">[</span><br>      <span class="token string">"Vegan"</span><br>    <span class="token punctuation">]</span><span class="token punctuation">,</span><br>    <span class="token property">"Textur / Konsistenz / Applikation"</span><span class="token operator">:</span> <span class="token punctuation">[</span><br>      <span class="token string">"Stift"</span><br>    <span class="token punctuation">]</span><br>  <span class="token punctuation">}</span><br><span class="token punctuation">}</span></code></pre>
<p>and wanted to turn it into this:</p>
<pre class="language-json"><code class="language-json"><span class="token punctuation">[</span><br>  <span class="token string">"Hauttyp: Normal"</span><span class="token punctuation">,</span><br>  <span class="token string">"Deckkraft: Mittlere Deckkraft"</span><span class="token punctuation">,</span><br>  <span class="token string">"Grundfarbe: Grau"</span><span class="token punctuation">,</span><br>  <span class="token string">"Produkteigenschaften: Vegan"</span><span class="token punctuation">,</span><br>  <span class="token string">"Textur / Konsistenz / Applikation: Stift"</span><br><span class="token punctuation">]</span></code></pre>
<blockquote>
<p>As a bonus, I learned that &quot;Deckkraft&quot; means opacity in German. I don't think I've ever seen that word before, or had occasion to use that concept in a conversation. I'm guessing that this data perhaps relates to make-up or something similar. Anyway.</p>
</blockquote>
<p>In thinking about an approach for this data transformation, it struck me that the Perl adage <a href="https://en.wikipedia.org/wiki/There%27s_more_than_one_way_to_do_it">There's more than one way to do it</a> (often shortened to &quot;TIMTOWDI&quot; and pronounced &quot;Tim Toady&quot;) is often at play with jq, too.</p>
<h2>First approach</h2>
<p>I fired up my favourite interactive jq explorer, <a href="https://git.sr.ht/~gpanders/ijq">ijq</a>, and loaded the data. Clearly the first parts of the output strings were the keys within the object that was the value of the <code>filterFeatureGroup</code> property, i.e. <code>Hauttyp</code>, <code>Deckkraft</code>, <code>Grundfarbe</code> and so on. So my immediate approach was to look at them using <a href="https://stedolan.github.io/jq/manual/#keys,keys_unsorted">keys</a>:</p>
<pre class="language-jq"><code class="language-jq"><span class="token punctuation">.</span>filterFeatureGroup <span class="token operator pipe">|</span> keys</code></pre>
<pre class="language-json"><code class="language-json"><span class="token punctuation">[</span><br>  <span class="token string">"Deckkraft"</span><span class="token punctuation">,</span><br>  <span class="token string">"Grundfarbe"</span><span class="token punctuation">,</span><br>  <span class="token string">"Hauttyp"</span><span class="token punctuation">,</span><br>  <span class="token string">"Produkteigenschaften"</span><span class="token punctuation">,</span><br>  <span class="token string">"Textur / Konsistenz / Applikation"</span><br><span class="token punctuation">]</span></code></pre>
<p>This already looked quite close to the target output, so I forced my way forwards, pulling the values from the input that I had to squirrel away first via a <a href="https://stedolan.github.io/jq/manual/#Variable/SymbolicBindingOperator:...as$identifier%7C...">symbolic binding</a> to <code>$x</code>:</p>
<pre class="language-jq"><code class="language-jq"><span class="token punctuation">.</span>filterFeatureGroup <span class="token keyword">as</span> <span class="token variable">$x</span><br><span class="token operator pipe">|</span> <span class="token variable">$x</span><br><span class="token operator pipe">|</span> keys <br><span class="token operator pipe">|</span> <span class="token c-style-function function">map</span><span class="token punctuation">(</span><span class="token string">"<span class="token interpolation"><span class="token punctuation">\(</span><span class="token content"><span class="token dot important">.</span></span><span class="token punctuation">)</span></span>: <span class="token interpolation"><span class="token punctuation">\(</span><span class="token content"><span class="token variable">$x</span><span class="token punctuation">[</span><span class="token dot important">.</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span></span>"</span><span class="token punctuation">)</span></code></pre>
<p>The string expression <code>&quot;...&quot;</code> includes the string interpolation construct (<code>\(...)</code>) to include the value of an expression.</p>
<p>This produced the right output:</p>
<pre class="language-json"><code class="language-json"><span class="token punctuation">[</span><br>  <span class="token string">"Deckkraft: Mittlere Deckkraft"</span><span class="token punctuation">,</span><br>  <span class="token string">"Grundfarbe: Grau"</span><span class="token punctuation">,</span><br>  <span class="token string">"Hauttyp: Normal"</span><span class="token punctuation">,</span><br>  <span class="token string">"Produkteigenschaften: Vegan"</span><span class="token punctuation">,</span><br>  <span class="token string">"Textur / Konsistenz / Applikation: Stift"</span><br><span class="token punctuation">]</span></code></pre>
<p>but felt a little cumbersome, and perhaps not idiomatic. Here are the problems I saw:</p>
<ul>
<li>having to regurgitate what was just captured (<code>.filterFeatureGroup as $x | $x</code>) felt a little clunky</li>
<li>mapping over the keys and constructing a string for each one was OK, but the <code>$x[.][0]</code> bothered me a bit</li>
</ul>
<h2>Subsequent approaches</h2>
<p>I noticed that the output required values that exist as property names in the input: <code>Hauttyp</code>, <code>Deckkraft</code> and other values. More generally, when that is the case (as now) -- when property names are &quot;values&quot; -- my jq &quot;antennae&quot; are directed towards the <a href="https://stedolan.github.io/jq/manual/#to_entries,from_entries,with_entries">to_entries, from_entries, with_entries</a> family.</p>
<p>These functions convert back and forth between objects and arrays of key/value pairs, and in particular, <code>to_entries</code> will reshape an object so it's more straightforward programmatically to get at those property name values. Here's an example. If we have this input:</p>
<pre class="language-json"><code class="language-json"><span class="token punctuation">{</span><br>  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"DJ Adams"</span><span class="token punctuation">,</span><br>  <span class="token property">"website"</span><span class="token operator">:</span> <span class="token string">"https://qmacro.org"</span><br><span class="token punctuation">}</span></code></pre>
<p>then passing this through <code>to_entries</code> will produce this:</p>
<pre class="language-json"><code class="language-json"><span class="token punctuation">[</span>                                <br>  <span class="token punctuation">{</span>                              <br>    <span class="token property">"key"</span><span class="token operator">:</span> <span class="token string">"name"</span><span class="token punctuation">,</span>               <br>    <span class="token property">"value"</span><span class="token operator">:</span> <span class="token string">"DJ Adams"</span>          <br>  <span class="token punctuation">}</span><span class="token punctuation">,</span>                             <br>  <span class="token punctuation">{</span>                              <br>    <span class="token property">"key"</span><span class="token operator">:</span> <span class="token string">"website"</span><span class="token punctuation">,</span>            <br>    <span class="token property">"value"</span><span class="token operator">:</span> <span class="token string">"https://qmacro.org"</span><br>  <span class="token punctuation">}</span>                              <br><span class="token punctuation">]</span></code></pre>
<p>Now each of the property name values (<code>name</code> and <code>website</code> here) are addressable via a consistent property name <code>key</code>, across the objects that represent each of the original property name and value pairs.</p>
<p>Applying <code>to_entries</code> to the object which is the value of the <code>filterFeatureGroup</code> property, like this:</p>
<pre class="language-jq"><code class="language-jq"><span class="token punctuation">.</span>filterFeatureGroup <br><span class="token operator pipe">|</span> to_entries</code></pre>
<p>we get this:</p>
<pre class="language-json"><code class="language-json"><span class="token punctuation">[</span><br>  <span class="token punctuation">{</span><br>    <span class="token property">"key"</span><span class="token operator">:</span> <span class="token string">"Hauttyp"</span><span class="token punctuation">,</span><br>    <span class="token property">"value"</span><span class="token operator">:</span> <span class="token punctuation">[</span><br>      <span class="token string">"Normal"</span><br>    <span class="token punctuation">]</span><br>  <span class="token punctuation">}</span><span class="token punctuation">,</span><br>  <span class="token punctuation">{</span><br>    <span class="token property">"key"</span><span class="token operator">:</span> <span class="token string">"Deckkraft"</span><span class="token punctuation">,</span><br>    <span class="token property">"value"</span><span class="token operator">:</span> <span class="token punctuation">[</span><br>      <span class="token string">"Mittlere Deckkraft"</span><br>    <span class="token punctuation">]</span><br>  <span class="token punctuation">}</span><span class="token punctuation">,</span><br>  <span class="token punctuation">{</span><br>    <span class="token property">"key"</span><span class="token operator">:</span> <span class="token string">"Grundfarbe"</span><span class="token punctuation">,</span><br>    <span class="token property">"value"</span><span class="token operator">:</span> <span class="token punctuation">[</span><br>      <span class="token string">"Grau"</span><br>    <span class="token punctuation">]</span><br>  <span class="token punctuation">}</span><span class="token punctuation">,</span><br>  <span class="token punctuation">{</span><br>    <span class="token property">"key"</span><span class="token operator">:</span> <span class="token string">"Produkteigenschaften"</span><span class="token punctuation">,</span><br>    <span class="token property">"value"</span><span class="token operator">:</span> <span class="token punctuation">[</span><br>      <span class="token string">"Vegan"</span><br>    <span class="token punctuation">]</span><br>  <span class="token punctuation">}</span><span class="token punctuation">,</span><br>  <span class="token punctuation">{</span><br>    <span class="token property">"key"</span><span class="token operator">:</span> <span class="token string">"Textur / Konsistenz / Applikation"</span><span class="token punctuation">,</span><br>    <span class="token property">"value"</span><span class="token operator">:</span> <span class="token punctuation">[</span><br>      <span class="token string">"Stift"</span><br>    <span class="token punctuation">]</span><br>  <span class="token punctuation">}</span><br><span class="token punctuation">]</span></code></pre>
<p>The data itself now feels a little more &quot;pedestrian&quot;, perhaps, but it also feels a little easier to worth with because of that.</p>
<p>The subsequent approaches are all based on this initial reshaping of the data.</p>
<h3>Second approach</h3>
<p>Given the ability to more easily and more directly (explicitly) access the first part of what's required in the output, I moved forward like this:</p>
<pre class="language-jq"><code class="language-jq"><span class="token punctuation">.</span>filterFeatureGroup <br><span class="token operator pipe">|</span> to_entries<br><span class="token operator pipe">|</span> <span class="token c-style-function function">map</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">.</span>key<span class="token punctuation">,</span> <span class="token punctuation">.</span>value<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre>
<p>This produced the following, which feels a little closer:</p>
<pre class="language-json"><code class="language-json"><span class="token punctuation">[</span><br>  <span class="token punctuation">[</span><br>    <span class="token string">"Hauttyp"</span><span class="token punctuation">,</span><br>    <span class="token string">"Normal"</span><br>  <span class="token punctuation">]</span><span class="token punctuation">,</span><br>  <span class="token punctuation">[</span><br>    <span class="token string">"Deckkraft"</span><span class="token punctuation">,</span><br>    <span class="token string">"Mittlere Deckkraft"</span><br>  <span class="token punctuation">]</span><span class="token punctuation">,</span><br>  <span class="token punctuation">[</span><br>    <span class="token string">"Grundfarbe"</span><span class="token punctuation">,</span><br>    <span class="token string">"Grau"</span><br>  <span class="token punctuation">]</span><span class="token punctuation">,</span><br>  <span class="token punctuation">[</span><br>    <span class="token string">"Produkteigenschaften"</span><span class="token punctuation">,</span><br>    <span class="token string">"Vegan"</span><br>  <span class="token punctuation">]</span><span class="token punctuation">,</span><br>  <span class="token punctuation">[</span><br>    <span class="token string">"Textur / Konsistenz / Applikation"</span><span class="token punctuation">,</span><br>    <span class="token string">"Stift"</span><br>  <span class="token punctuation">]</span><br><span class="token punctuation">]</span></code></pre>
<p>I could then just map over these inner arrays and use <a href="https://stedolan.github.io/jq/manual/#join(str)">join</a> to create a string from the values in them, which I did, like this:</p>
<pre class="language-jq"><code class="language-jq"><span class="token punctuation">.</span>filterFeatureGroup <br><span class="token operator pipe">|</span> to_entries<br><span class="token operator pipe">|</span> <span class="token c-style-function function">map</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">.</span>key<span class="token punctuation">,</span> <span class="token punctuation">.</span>value<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><br><span class="token operator pipe">|</span> <span class="token c-style-function function">map</span><span class="token punctuation">(</span><span class="token c-style-function function">join</span><span class="token punctuation">(</span><span class="token string">": "</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>
<p>This produced the desired output:</p>
<pre class="language-json"><code class="language-json"><span class="token punctuation">[</span><br>  <span class="token string">"Hauttyp: Normal"</span><span class="token punctuation">,</span><br>  <span class="token string">"Deckkraft: Mittlere Deckkraft"</span><span class="token punctuation">,</span><br>  <span class="token string">"Grundfarbe: Grau"</span><span class="token punctuation">,</span><br>  <span class="token string">"Produkteigenschaften: Vegan"</span><span class="token punctuation">,</span><br>  <span class="token string">"Textur / Konsistenz / Applikation: Stift"</span><br><span class="token punctuation">]</span></code></pre>
<p>This approach felt a little better, not only because of the cleaner use of <code>to_entries</code> but also because I wasn't constructing a string manually with string interpolation (instead, using <code>join</code> with an array).</p>
<p>But there were a couple of new things that didn't feel quite right:</p>
<ul>
<li>I was using a sequence of two <code>map</code> calls; this feels OK to some extent, expecially in the context of more literate (or explicit) chains of functions in Ramda's <a href="https://ramdajs.com/docs/#pipe">pipe</a> or <a href="https://ramdajs.com/docs/#compose">compose</a> context (see <a href="https://qmacro.org/blog/posts/2019/04/08/es6-reduce-and-pipe/">ES6, reduce and pipe</a> for an example) but perhaps it could be neater in jq</li>
<li>the explicit use of the <a href="https://stedolan.github.io/jq/manual/#ArrayIndex:.%5B2%5D">array index</a> <code>[0]</code> to get the first (and only) values (such as <code>Normal</code> and <code>Grau</code>) out of each of the innermost arrays was OK but made me feel as though I could perhaps transform the input into something even cleaner and simpler earlier in the process</li>
</ul>
<h3>Third approach</h3>
<p>To address the point about the sequence of two <code>map</code> calls, it was just a matter of rearranging the construction so that the call to <code>join</code> was in the same loop, so it looked like this:</p>
<pre class="language-jq"><code class="language-jq"><span class="token punctuation">.</span>filterFeatureGroup <br><span class="token operator pipe">|</span> to_entries<br><span class="token operator pipe">|</span> <span class="token c-style-function function">map</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">.</span>key<span class="token punctuation">,</span> <span class="token punctuation">.</span>value<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator pipe">|</span> <span class="token c-style-function function">join</span><span class="token punctuation">(</span><span class="token string">": "</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>
<p>This produces the same output:</p>
<pre class="language-json"><code class="language-json"><span class="token punctuation">[</span><br>  <span class="token string">"Hauttyp: Normal"</span><span class="token punctuation">,</span><br>  <span class="token string">"Deckkraft: Mittlere Deckkraft"</span><span class="token punctuation">,</span><br>  <span class="token string">"Grundfarbe: Grau"</span><span class="token punctuation">,</span><br>  <span class="token string">"Produkteigenschaften: Vegan"</span><span class="token punctuation">,</span><br>  <span class="token string">"Textur / Konsistenz / Applikation: Stift"</span><br><span class="token punctuation">]</span></code></pre>
<h3>Fourth approach</h3>
<p>After addressing the <code>map</code> sequence issue, I was happy enough, but I wanted to go back to see if I could address the use of the <code>[0]</code> array index, by simplifying the data earlier in the filter pipeline.</p>
<p>Examining the first entry in the now-simplified <code>filterFeatureGroup</code> object, like this:</p>
<pre class="language-jq"><code class="language-jq"><span class="token punctuation">.</span>filterFeatureGroup <span class="token operator pipe">|</span> to_entries <span class="token operator pipe">|</span> first</code></pre>
<p>we get this:</p>
<pre class="language-json"><code class="language-json"><span class="token punctuation">{</span><br>  <span class="token property">"key"</span><span class="token operator">:</span> <span class="token string">"Hauttyp"</span><span class="token punctuation">,</span><br>  <span class="token property">"value"</span><span class="token operator">:</span> <span class="token punctuation">[</span><br>    <span class="token string">"Normal"</span><br>  <span class="token punctuation">]</span><br><span class="token punctuation">}</span></code></pre>
<p>What we really want from this particular entry is just the <code>Hauttyp</code> and <code>Normal</code> strings (to become <code>&quot;Hauttyp: Normal&quot;</code>).</p>
<p>There's a function called <a href="https://stedolan.github.io/jq/manual/#flatten,flatten(depth)">flatten</a> which, according to the manual, operates on arrays and does what you sort of expect it to do (again, jusing Ramda's <a href="https://ramdajs.com/docs/#flatten">flatten</a> as a reference). Given an array such as <code>[1, [2, 3]]</code>, then <code>flatten</code> will produce this: <code>[1, 2, 3]</code>.</p>
<p>What the manual doesn't mention is that it also operates, in a sensible way, on objects.  Given the object entry above, if we add <code>flatten</code> to the filter pipeline, like this:</p>
<pre class="language-jq"><code class="language-jq"><span class="token punctuation">.</span>filterFeatureGroup <span class="token operator pipe">|</span> to_entries <span class="token operator pipe">|</span> first <span class="token operator pipe">|</span> flatten</code></pre>
<p>we get this:</p>
<pre class="language-json"><code class="language-json"><span class="token punctuation">[</span><br>  <span class="token string">"Hauttyp"</span><span class="token punctuation">,</span><br>  <span class="token string">"Normal"</span><br><span class="token punctuation">]</span></code></pre>
<p>Nice! In a way, this for me feels like another philosopical approach that I also learned about in my Perl days (although it goes back way beyond that): <a href="https://en.wikipedia.org/wiki/DWIM">Do What I Mean</a> also known as &quot;DWIM&quot;. Given the data context and what <code>flatten</code> does in general, I'm not surprised at the result, and it's what I would want, or mean, when I invoke it on an object.</p>
<p>Given this, I can do away with a lot of the mechanics for extracting the values, and just write this:</p>
<pre class="language-jq"><code class="language-jq"><span class="token punctuation">.</span>filterFeatureGroup<br><span class="token operator pipe">|</span> to_entries<br><span class="token operator pipe">|</span> <span class="token c-style-function function">map</span><span class="token punctuation">(</span>flatten <span class="token operator pipe">|</span> <span class="token c-style-function function">join</span><span class="token punctuation">(</span><span class="token string">": "</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>
<p>I'm happy to report that this also produces the desired output:</p>
<pre class="language-json"><code class="language-json"><span class="token punctuation">[</span><br>  <span class="token string">"Hauttyp: Normal"</span><span class="token punctuation">,</span><br>  <span class="token string">"Deckkraft: Mittlere Deckkraft"</span><span class="token punctuation">,</span><br>  <span class="token string">"Grundfarbe: Grau"</span><span class="token punctuation">,</span><br>  <span class="token string">"Produkteigenschaften: Vegan"</span><span class="token punctuation">,</span><br>  <span class="token string">"Textur / Konsistenz / Applikation: Stift"</span><br><span class="token punctuation">]</span></code></pre>
<p>I think I like this approach the most.</p>
<h2>Wrapping up</h2>
<p>Working through simple questions like this help me think about jq more, and as I do so, I learn to think more about data structures, which I did in Perl too, but I am learning also to think about how data structures change as they are sent through pipelines of filters.</p>
<p>Incidentally, the accepted answer is a combination of some of what I explored in this post:</p>
<pre class="language-jq"><code class="language-jq"><span class="token punctuation">.</span>filterFeatureGroup <span class="token operator pipe">|</span> to_entries <span class="token operator pipe">|</span> <span class="token c-style-function function">map</span><span class="token punctuation">(</span><span class="token string">"<span class="token interpolation"><span class="token punctuation">\(</span><span class="token content"><span class="token punctuation">.</span>key</span><span class="token punctuation">)</span></span>: <span class="token interpolation"><span class="token punctuation">\(</span><span class="token content"><span class="token punctuation">.</span>value<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span></span>"</span><span class="token punctuation">)</span></code></pre>
<p>Hopefully this has also helped you think a bit more about processing JSON with jq.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Array push with autovivification in jq</title>
      <link href="https://qmacro.org/blog/posts/2022/12/13/array-push-with-autovivification-in-jq/"/>
      <updated>2022-12-13T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2022/12/13/array-push-with-autovivification-in-jq/</id>
      <content type="html">
        <![CDATA[
      <p>I wanted to make a note to self about this. I'm using Advent of Code for an opportunity to practise and learn more about <code>jq</code>, and in <a href="https://adventofcode.com/2022/day/7">Day 7: No Space Left On Device</a> I think I need a way of appending values to arrays, which are themselves values of properties that I create on the fly. This may not turn out to be useful in the end, but I wanted to explore it (I was thinking I could store the list of files in a given directory like this).</p>
<blockquote>
<p>See the update at the end of this post for a much neater approach.</p>
</blockquote>
<p>The structure I had in mind is this (in pseudo-JSON):</p>
<pre class="language-text"><code class="language-text">{<br>  "dirs": {<br>    "a": [file1, file2, ...],<br>    "b": [file3, ...]<br>    ...<br>  },<br>  ...<br>}</code></pre>
<p>Thing is, I need to create the contents of the object at <code>dirs</code> as I go along. In other words, <code>a</code> and <code>b</code> don't necessarily exist at first.</p>
<p>The first time I need to create a new entry like this, it needs to be an array, with the entry as the first and only value:</p>
<pre class="language-text"><code class="language-text">{<br>  "dirs": {<br>    "a": [file1]<br>  },<br>  ...<br>}</code></pre>
<p>But subsequently I need to just append entries (such as <code>file2</code> here) to the existing array:</p>
<pre class="language-text"><code class="language-text">{<br>  "dirs": {<br>    "a": [file1, file2]<br>  },<br>  ...<br>}</code></pre>
<p>The concept of autovivification came to mind; I first learned about this word and concept in my Perl days, and it's never left me (in fact a lot of of how I think in terms of complex data structures I learned back then).</p>
<p>Effectively I want to be able to push a new item, but make sure that the array exists first and create it if it doesn't. Investigating this led me to the family of path related functions <code>path(path_expression)</code>, <code>del(path_expression)</code>, <code>getpath(PATHS)</code>, <code>setpath(PATHS; VALUE)</code> and <code>delpaths(PATHS)</code>.</p>
<p>Here's what I came up with, as a sort of &quot;autovivification-push&quot; (where the semantics of push are more from JavaScript's <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/push">array.prototype.push()</a>:</p>
<pre class="language-jq"><code class="language-jq"><span class="token keyword">def</span> <span class="token function">apush</span><span class="token punctuation">(</span><span class="token variable">$pexp</span><span class="token punctuation">;</span><span class="token variable">$item</span><span class="token punctuation">)</span><span class="token punctuation">:</span><br>  <span class="token c-style-function function">setpath</span><span class="token punctuation">(</span><span class="token variable">$pexp</span><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token c-style-function function">getpath</span><span class="token punctuation">(</span><span class="token variable">$pexp</span><span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token variable">$item</span><span class="token punctuation">]</span><span class="token punctuation">)</span><br><span class="token punctuation">;</span></code></pre>
<p>Given that, then the following:</p>
<pre class="language-jq"><code class="language-jq"><span class="token punctuation">{</span><br>  <span class="token property-literal property">dirs</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><br>    <span class="token property-literal property">a</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"file1"</span><span class="token punctuation">]</span><br>  <span class="token punctuation">}</span><br><span class="token punctuation">}</span><br><span class="token operator pipe">|</span> <span class="token c-style-function function">apush</span><span class="token punctuation">(</span><span class="token c-style-function function">path</span><span class="token punctuation">(</span><span class="token punctuation">.</span>dirs<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token string">"file2"</span><span class="token punctuation">)</span><br><span class="token operator pipe">|</span> <span class="token c-style-function function">apush</span><span class="token punctuation">(</span><span class="token c-style-function function">path</span><span class="token punctuation">(</span><span class="token punctuation">.</span>dirs<span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token string">"file3"</span><span class="token punctuation">)</span><br><span class="token operator pipe">|</span> <span class="token c-style-function function">apush</span><span class="token punctuation">(</span><span class="token c-style-function function">path</span><span class="token punctuation">(</span><span class="token punctuation">.</span>dirs<span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token string">"file4"</span><span class="token punctuation">)</span></code></pre>
<p>produces this:</p>
<pre class="language-json"><code class="language-json"><span class="token punctuation">{</span><br>  <span class="token property">"dirs"</span><span class="token operator">:</span> <span class="token punctuation">{</span><br>    <span class="token property">"a"</span><span class="token operator">:</span> <span class="token punctuation">[</span><br>      <span class="token string">"file1"</span><span class="token punctuation">,</span><br>      <span class="token string">"file2"</span><br>    <span class="token punctuation">]</span><span class="token punctuation">,</span><br>    <span class="token property">"b"</span><span class="token operator">:</span> <span class="token punctuation">[</span><br>      <span class="token string">"file3"</span><span class="token punctuation">,</span><br>      <span class="token string">"file4"</span><br>    <span class="token punctuation">]</span><br>  <span class="token punctuation">}</span><br><span class="token punctuation">}</span></code></pre>
<p>The <code>b</code> array is effectively autovivified when the first item (<code>file3</code>) needs to be pushed.</p>
<p>Like I say, I may go off in another direction for this puzzle, but wanted to make a note of this <code>apush</code> idea.</p>
<h2>Update</h2>
<p>Holy bananas batman. <a href="https://fosstodon.org/@wader">Mattias Wadman</a> just <a href="https://fosstodon.org/@wader/109517582015244200">replied to me on Mastodon</a> with a much neater alternative, one that I should have realised sooner:</p>
<pre class="language-jq"><code class="language-jq"><span class="token punctuation">{</span><br>  <span class="token property-literal property">dirs</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><br>    <span class="token property-literal property">a</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"file1"</span><span class="token punctuation">]</span><br>  <span class="token punctuation">}</span><br><span class="token punctuation">}</span><br><span class="token operator pipe">|</span> <span class="token punctuation">.</span>dirs<span class="token punctuation">.</span>a <span class="token operator">+=</span> <span class="token punctuation">[</span><span class="token string">"file2"</span><span class="token punctuation">]</span><br><span class="token operator pipe">|</span> <span class="token punctuation">.</span>dirs<span class="token punctuation">.</span>b <span class="token operator">+=</span> <span class="token punctuation">[</span><span class="token string">"file3"</span><span class="token punctuation">]</span><br><span class="token operator pipe">|</span> <span class="token punctuation">.</span>dirs<span class="token punctuation">.</span>b <span class="token operator">+=</span> <span class="token punctuation">[</span><span class="token string">"file4"</span><span class="token punctuation">]</span></code></pre>
<p>This results in the same JSON as above. This is a much more precise approach, that also, now I see it, is clearly more idiomatic. I had seen the <code>+=</code> operator in the manual (in the <a href="https://stedolan.github.io/jq/manual/#Arithmeticupdate-assignment:+=,-=,*=,/=,%25=,//=">Arithmetic update-assignment</a> section) but looking at the description, I had applied only a narrow part of my brain and not seen that it might be usable beyond arithmetic operations! Of course! Thanks Mattias.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Extracting blog post dates from URLs with jq</title>
      <link href="https://qmacro.org/blog/posts/2022/11/08/extracting-blog-post-dates-from-urls-with-jq/"/>
      <updated>2022-11-08T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2022/11/08/extracting-blog-post-dates-from-urls-with-jq/</id>
      <content type="html">
        <![CDATA[
      <p>I had a JSON array of objects from a list of GitHub repo issues. Each object contained a blog post URL and a title. The URL had the post date embedded in the path, and I wanted to sort them all based on the post date. Here's how I did it.</p>
<p>I have a working list of blog posts, as <a href="https://github.com/qmacro-org/db/issues?q=is%3Aissue">issues in a GitHub repo</a> (as a sort of temporary data store). Each issue has the blog post title as the issue title, and just the blog post URL in the issue body, like this:</p>
<p><img src="/images/2022/11/exampleissue.png" alt="example blog post issue"></p>
<h2>The base data</h2>
<p>I had retrieved the issue data as JSON like this:</p>
<pre class="language-bash"><code class="language-bash">gh issue list <span class="token punctuation">\</span><br>  <span class="token parameter variable">--limit</span> <span class="token number">500</span> <span class="token punctuation">\</span><br>  <span class="token parameter variable">--label</span> dj-adams-sap <span class="token punctuation">\</span><br>  <span class="token parameter variable">--json</span> number,title,body <span class="token punctuation">\</span><br>  <span class="token operator">></span> dj-adams-sap.json </code></pre>
<p>Here's what the first and last couple of items in <code>dj-adams-sap.json</code> look like (extracted with <code>jq '.[:2] + .[-2:]' dj-adams-sap.json</code>):</p>
<pre class="language-json"><code class="language-json"><span class="token punctuation">[</span><br>  <span class="token punctuation">{</span><br>    <span class="token property">"body"</span><span class="token operator">:</span> <span class="token string">"https://blogs.sap.com/2018/03/26/monday-morning-thoughts-cloud-native/"</span><span class="token punctuation">,</span><br>    <span class="token property">"number"</span><span class="token operator">:</span> <span class="token number">224</span><span class="token punctuation">,</span><br>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"Monday morning thoughts- cloud native"</span><br>  <span class="token punctuation">}</span><span class="token punctuation">,</span><br>  <span class="token punctuation">{</span><br>    <span class="token property">"body"</span><span class="token operator">:</span> <span class="token string">"https://blogs.sap.com/2018/03/31/scripting-the-workflow-api-with-bash-and-curl/"</span><span class="token punctuation">,</span><br>    <span class="token property">"number"</span><span class="token operator">:</span> <span class="token number">223</span><span class="token punctuation">,</span><br>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"Scripting the Workflow API with bash and curl"</span><br>  <span class="token punctuation">}</span><span class="token punctuation">,</span><br>  <span class="token punctuation">{</span><br>    <span class="token property">"body"</span><span class="token operator">:</span> <span class="token string">"https://blogs.sap.com/2022/08/04/introducing-sap-codejam-btp-a-new-group-and-a-first-event/"</span><span class="token punctuation">,</span><br>    <span class="token property">"number"</span><span class="token operator">:</span> <span class="token number">83</span><span class="token punctuation">,</span><br>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"Introducing &amp;#8220;SAP CodeJam BTP&amp;#8221; - a new group, and a first event"</span><br>  <span class="token punctuation">}</span><span class="token punctuation">,</span><br>  <span class="token punctuation">{</span><br>    <span class="token property">"body"</span><span class="token operator">:</span> <span class="token string">"https://blogs.sap.com/2022/10/06/devtoberfest-2022-week-2/"</span><span class="token punctuation">,</span><br>    <span class="token property">"number"</span><span class="token operator">:</span> <span class="token number">82</span><span class="token punctuation">,</span><br>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"Devtoberfest 2022 Week 2"</span><br>  <span class="token punctuation">}</span><br><span class="token punctuation">]</span></code></pre>
<h2>Extracting the dates</h2>
<p>The dates of the blog posts can be determined from the first part of the path info in the blog post URLs, clearly. So I decided to map over each object and add a new property <code>postdate</code> which would be a <code>YYYY-MM-DD</code> formatted string worked out from that data.</p>
<p>First, I decided to define a function to extract the date:</p>
<pre class="language-jq"><code class="language-jq"><span class="token keyword">def</span> <span class="token function">date</span><span class="token punctuation">:</span> <br>  <span class="token c-style-function function">sub</span><span class="token punctuation">(</span><br>    <span class="token string">"^https.+?com/(?&lt;yyyy>[0-9]{4})/(?&lt;mm>[0-9]{2})/(?&lt;dd>[0-9]{2})/.+$"</span><span class="token punctuation">;</span><br>    <span class="token string">"<span class="token interpolation"><span class="token punctuation">\(</span><span class="token content"><span class="token punctuation">.</span>yyyy</span><span class="token punctuation">)</span></span>-<span class="token interpolation"><span class="token punctuation">\(</span><span class="token content"><span class="token punctuation">.</span>mm</span><span class="token punctuation">)</span></span>-<span class="token interpolation"><span class="token punctuation">\(</span><span class="token content"><span class="token punctuation">.</span>dd</span><span class="token punctuation">)</span></span>"</span><br>  <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>This uses the <a href="https://stedolan.github.io/jq/manual/#sub(regex;tostring)sub(regex;string;flags)">sub</a> function to perform a regexp based substitution, actually replacing the entire input string (the URL) with a new string made up from the capture groups defined.</p>
<p>These are named capture groups, here's one of them; this one matches 4 consecutive digits into a capture group named <code>yyyy</code>:</p>
<pre class="language-text"><code class="language-text">(?<yyyy>[0-9]{4})</code></pre>
<p>Looking at the argument supplied for the second parameter of <code>sub/2</code>, the <code>\( ... )</code> syntax is <a href="https://stedolan.github.io/jq/manual/#Stringinterpolation-(foo">string interpolation</a>), to have an expression (in this example it's <code>.yyyy</code>, <code>.mm</code> and <code>.dd</code>) evaluated and expanded in a string.</p>
<h2>Adding the postdate property</h2>
<p>With the <code>date</code> function ready, I could then simply iterate over the items in the array, adding a new <code>postdate</code> property to each object, with the value of whatever the <code>date</code> function extracts from the item's <code>.body</code> property:</p>
<pre class="language-jq"><code class="language-jq"><span class="token c-style-function function">map</span><span class="token punctuation">(</span><span class="token dot important">.</span> <span class="token operator">+</span> <span class="token punctuation">{</span> <span class="token property-literal property">postdate</span><span class="token punctuation">:</span> <span class="token punctuation">.</span>body<span class="token operator pipe">|</span>date <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>
<p>Based on the reduced data set above, this then produces:</p>
<pre class="language-json"><code class="language-json"><span class="token punctuation">[</span><br>  <span class="token punctuation">{</span><br>    <span class="token property">"body"</span><span class="token operator">:</span> <span class="token string">"https://blogs.sap.com/2018/03/26/monday-morning-thoughts-cloud-native/"</span><span class="token punctuation">,</span><br>    <span class="token property">"number"</span><span class="token operator">:</span> <span class="token number">224</span><span class="token punctuation">,</span><br>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"Monday morning thoughts- cloud native"</span><span class="token punctuation">,</span><br>    <span class="token property">"postdate"</span><span class="token operator">:</span> <span class="token string">"2018-03-26"</span><br>  <span class="token punctuation">}</span><span class="token punctuation">,</span><br>  <span class="token punctuation">{</span><br>    <span class="token property">"body"</span><span class="token operator">:</span> <span class="token string">"https://blogs.sap.com/2018/03/31/scripting-the-workflow-api-with-bash-and-curl/"</span><span class="token punctuation">,</span><br>    <span class="token property">"number"</span><span class="token operator">:</span> <span class="token number">223</span><span class="token punctuation">,</span><br>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"Scripting the Workflow API with bash and curl"</span><span class="token punctuation">,</span><br>    <span class="token property">"postdate"</span><span class="token operator">:</span> <span class="token string">"2018-03-31"</span><br>  <span class="token punctuation">}</span><span class="token punctuation">,</span><br>  <span class="token punctuation">{</span><br>    <span class="token property">"body"</span><span class="token operator">:</span> <span class="token string">"https://blogs.sap.com/2022/08/04/introducing-sap-codejam-btp-a-new-group-and-a-first-event/"</span><span class="token punctuation">,</span><br>    <span class="token property">"number"</span><span class="token operator">:</span> <span class="token number">83</span><span class="token punctuation">,</span><br>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"Introducing &amp;#8220;SAP CodeJam BTP&amp;#8221; - a new group, and a first event"</span><span class="token punctuation">,</span><br>    <span class="token property">"postdate"</span><span class="token operator">:</span> <span class="token string">"2022-08-04"</span><br>  <span class="token punctuation">}</span><span class="token punctuation">,</span><br>  <span class="token punctuation">{</span><br>    <span class="token property">"body"</span><span class="token operator">:</span> <span class="token string">"https://blogs.sap.com/2019/10/06/devtoberfest-2022-week-2/"</span><span class="token punctuation">,</span><br>    <span class="token property">"number"</span><span class="token operator">:</span> <span class="token number">82</span><span class="token punctuation">,</span><br>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"Devtoberfest 2022 Week 2"</span><span class="token punctuation">,</span><br>    <span class="token property">"postdate"</span><span class="token operator">:</span> <span class="token string">"2019-10-06"</span><br>  <span class="token punctuation">}</span><br><span class="token punctuation">]</span></code></pre>
<h2>Sorting</h2>
<p>Then it's just a simple case of using <code>sort_by</code> (followed optionally by <code>reverse</code>) to get the post date order I want:</p>
<pre class="language-jq"><code class="language-jq"><span class="token c-style-function function">map</span><span class="token punctuation">(</span><span class="token dot important">.</span> <span class="token operator">+</span> <span class="token punctuation">{</span> <span class="token property-literal property">postdate</span><span class="token punctuation">:</span> <span class="token punctuation">.</span>body<span class="token operator pipe">|</span>date <span class="token punctuation">}</span><span class="token punctuation">)</span><br><span class="token operator pipe">|</span> <span class="token c-style-function function">sort_by</span><span class="token punctuation">(</span><span class="token punctuation">.</span>postdate<span class="token punctuation">)</span></code></pre>
<p>Of course, I could combine the two parts if I didn't want the <code>postdate</code> property to be an explicit fixture in my downstream processing. Something like this:</p>
<pre class="language-jq"><code class="language-jq"><span class="token c-style-function function">sort_by</span><span class="token punctuation">(</span><span class="token punctuation">.</span>body <span class="token operator pipe">|</span> date<span class="token punctuation">)</span></code></pre>
<h2>Wrapping up</h2>
<p>It did occur to me that given the pattern of blog post URLs, I could just sort by them directly. Then again, it wasn't as interesting and I didn't learn anything about named capture groups. Anyway, this post is mostly for me, for when my future self forgets how to use capture groups and the <code>sub</code> function.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Some notes on modular JSON Schema definitions</title>
      <link href="https://qmacro.org/blog/posts/2022/11/02/some-notes-on-modular-json-schema-definitions/"/>
      <updated>2022-11-02T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2022/11/02/some-notes-on-modular-json-schema-definitions/</id>
      <content type="html">
        <![CDATA[
      <p>Here are a few rambling notes-to-self on understanding how a modular JSON Schema definition might be constructed. I've recently become acquainted with JSON Schema through the <a href="https://github.com/SAP-samples/btp-setup-automator">BTP Setup Automator</a> project.</p>
<blockquote>
<p>If you're not familiar with JSON Schema, there are some <a href="https://json-schema.org/learn/">great introductory tutorials</a> that I would recommend. The <a href="https://json-schema.org/slack">Slack channel</a> is friendly and welcoming too.</p>
</blockquote>
<p>OK, so I've been experimenting with how I might construct a schema in a modular way; this is as opposed to more monolithic ones which are arguably harder to read and manage. At least for me and my small brain.</p>
<h2>Example schema and data</h2>
<p>I'm going to go for a deliberately contrived and boringly simple example, where I want to have JSON data sets that contain information about two types of things - people and vehicles.</p>
<p>A person has a first name and a last name (both are required). A vehicle has a make and a model (again, both are required).</p>
<p>A given JSON data set (represented by a single JSON file) can contain zero or more of these two types of things, where each thing is either a PERSON object or a VEHICLE object, represented by a category, contained within a &quot;things&quot; array, which is the single property of the outermost containing object. In other words, something like this:</p>
<pre class="language-json"><code class="language-json"><span class="token punctuation">{</span><br>  <span class="token property">"things"</span><span class="token operator">:</span> <span class="token punctuation">[</span><br>    <span class="token punctuation">{</span><br>      <span class="token property">"category"</span><span class="token operator">:</span> <span class="token string">"VEHICLE"</span><span class="token punctuation">,</span><br>      <span class="token property">"make"</span><span class="token operator">:</span> <span class="token string">"Chevrolet"</span><span class="token punctuation">,</span><br>      <span class="token property">"model"</span><span class="token operator">:</span> <span class="token string">"Caprice"</span><br>    <span class="token punctuation">}</span><span class="token punctuation">,</span><br>    <span class="token punctuation">{</span><br>      <span class="token property">"lastName"</span><span class="token operator">:</span> <span class="token string">"Adams"</span><span class="token punctuation">,</span><br>      <span class="token property">"firstName"</span><span class="token operator">:</span> <span class="token string">"DJ"</span><span class="token punctuation">,</span><br>      <span class="token property">"category"</span><span class="token operator">:</span> <span class="token string">"PERSON"</span><br>    <span class="token punctuation">}</span><span class="token punctuation">,</span><br>    <span class="token punctuation">{</span><br>      <span class="token property">"make"</span><span class="token operator">:</span> <span class="token string">"Tesla"</span><span class="token punctuation">,</span><br>      <span class="token property">"model"</span><span class="token operator">:</span> <span class="token string">"Model 3"</span><span class="token punctuation">,</span><br>      <span class="token property">"category"</span><span class="token operator">:</span> <span class="token string">"VEHICLE"</span><br>    <span class="token punctuation">}</span><br>  <span class="token punctuation">]</span><br><span class="token punctuation">}</span></code></pre>
<p>Let's imagine that this is in a file called <code>data.json</code>.</p>
<h2>Initial schema construction</h2>
<p>What would a schema look like for this data set, and in particular, what might a modular schema look like?</p>
<p>I'll start with the outermost parts, and base the schema definition on draft 07. This is not the <a href="https://json-schema.org/specification.html">latest version of the JSON Schema specification</a> but it's the one <a href="https://github.com/SAP-samples/btp-setup-automator/blob/72a380268a3fca0d310dc539116a58c186a94933/libs/btpsa-usecase.json#L2">currently used to qualify the schemas in the BTP Setup Automator project</a> so I'll go with that.</p>
<pre class="language-json"><code class="language-json"><span class="token punctuation">{</span><br>  <span class="token property">"$schema"</span><span class="token operator">:</span> <span class="token string">"https://json-schema.org/draft-07/schema"</span><span class="token punctuation">,</span><br>  <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">"Things which are either people or vehicles"</span><span class="token punctuation">,</span><br>  <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"object"</span><span class="token punctuation">,</span><br>  <span class="token property">"required"</span><span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token string">"things"</span> <span class="token punctuation">]</span><span class="token punctuation">,</span><br>  <span class="token property">"additionalProperties"</span><span class="token operator">:</span> <span class="token boolean">false</span><br><span class="token punctuation">}</span></code></pre>
<p>Let's say this is in a file called <code>myschema.json</code>.</p>
<p>So far so good. This says that the JSON should be an object with a single property <code>things</code>, which is required. No other properties are allowed.</p>
<h3>Digression - an interesting contradiction</h3>
<p>Interestingly, as it stands right now (deliberately cut short, unfinished), this schema represents a contradiction. If I construct some JSON that is governed by this schema, I'm damned if I do include a <code>things</code> property and damned if I don't:</p>
<p>Just this:</p>
<pre class="language-json"><code class="language-json"><span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre>
<p>gives me an error: &quot;Missing property: things&quot;.</p>
<p>But if I add this property:</p>
<pre class="language-json"><code class="language-json"><span class="token punctuation">{</span><br>  <span class="token property">"things"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><br><span class="token punctuation">}</span></code></pre>
<p>an error is also surfaced to me: &quot;Property things is not allowed&quot; (regardless of what type of value I specify for it).</p>
<p>It was not my intention to include this in my notes, but I just discovered it, and thought it worth sharing. It makes sense - the schema so far says:</p>
<p><em>&quot;A <code>things</code> property is required, no other properties are allowed, but there's no list of actual properties defined.&quot;</em></p>
<p>Even more interesting - if I remove the <code>&quot;additionalProperties&quot;: false</code> constraint, then while <code>{}</code> still gives an error, <code>{ &quot;things&quot; [] }</code> does not, because the &quot;no other properties are allowed&quot; restriction is lifted.</p>
<p>Anyway.</p>
<h2>Extending the schema</h2>
<p>So clearly it's time to extend the schema now to allow for the actual <code>things</code> property, describing what it should be.</p>
<pre class="language-json"><code class="language-json"><span class="token punctuation">{</span><br>  <span class="token property">"$schema"</span><span class="token operator">:</span> <span class="token string">"https://json-schema.org/draft-07/schema"</span><span class="token punctuation">,</span><br>  <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">"Things which are either people or vehicles"</span><span class="token punctuation">,</span><br>  <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"object"</span><span class="token punctuation">,</span><br>  <span class="token property">"required"</span><span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token string">"things"</span> <span class="token punctuation">]</span><span class="token punctuation">,</span><br>  <span class="token property">"additionalProperties"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span><br>  <span class="token property">"properties"</span><span class="token operator">:</span> <span class="token punctuation">{</span><br>    <span class="token property">"things"</span><span class="token operator">:</span> <span class="token punctuation">{</span><br>      <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"array"</span><span class="token punctuation">,</span><br>      <span class="token property">"items"</span><span class="token operator">:</span> <span class="token punctuation">{</span><br>        <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"object"</span><br>      <span class="token punctuation">}</span><br>    <span class="token punctuation">}</span><br>  <span class="token punctuation">}</span><br><span class="token punctuation">}</span></code></pre>
<p>I've added a minimal definition of the <code>things</code> property. It's an array of objects, that's about all this says so far.</p>
<p>But I need to constrain those object to reflect either a PERSON or a VEHICLE. And this is where I want to try out some modularisation.</p>
<p>The JSON Schema keyword <a href="https://json-schema.org/understanding-json-schema/reference/combining.html#oneof">oneOf</a> seems ideal for this job. The description even uses phrases like &quot;combining schemas from multiple files&quot; and &quot;the given data must be valid against exactly one of the given subschemas&quot;. This is exactly the sort of thing I had in mind, in that I want to think about the constraints for a PERSON, and the constraints for a VEHICLE, as separate modular subschemas.</p>
<blockquote>
<p>I say &quot;subschema&quot; but want to emphasise that these subschemas are perfectly valid and independent schemas, they aren't only valid within the context of a referencing schema.</p>
</blockquote>
<h3>Trying out 'oneOf'</h3>
<p>Perhaps I should try out a simple example of <code>oneOf</code> first. In the <a href="https://json-schema.org/understanding-json-schema/reference/combining.html">Schema Composition section of Understanding JSON Schema</a> the example looks like this (<a href="https://en.wikipedia.org/wiki/Fizz_buzz">FizzBuzz</a>, anyone?):</p>
<pre class="language-json"><code class="language-json"><span class="token punctuation">{</span><br>  <span class="token property">"oneOf"</span><span class="token operator">:</span> <span class="token punctuation">[</span><br>    <span class="token punctuation">{</span> <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"number"</span><span class="token punctuation">,</span> <span class="token property">"multipleOf"</span><span class="token operator">:</span> <span class="token number">5</span> <span class="token punctuation">}</span><span class="token punctuation">,</span><br>    <span class="token punctuation">{</span> <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"number"</span><span class="token punctuation">,</span> <span class="token property">"multipleOf"</span><span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><br>  <span class="token punctuation">]</span><br><span class="token punctuation">}</span></code></pre>
<p>I'll insert that verbatim into the schema I have so far; to do that, I'll have to temporarily remove the <code>&quot;type&quot;: &quot;object&quot;</code> constraint from the <code>items</code> property definition, as the <code>type</code> (both <code>number</code>) is defined in each of the two separate subschemas in this example (I'll come back to that in a minute, though):</p>
<pre class="language-json"><code class="language-json"><span class="token punctuation">{</span><br>  <span class="token property">"$schema"</span><span class="token operator">:</span> <span class="token string">"https://json-schema.org/draft-07/schema"</span><span class="token punctuation">,</span><br>  <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">"Things which are either people or vehicles"</span><span class="token punctuation">,</span><br>  <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"object"</span><span class="token punctuation">,</span><br>  <span class="token property">"required"</span><span class="token operator">:</span> <span class="token punctuation">[</span><br>    <span class="token string">"things"</span><br>  <span class="token punctuation">]</span><span class="token punctuation">,</span><br>  <span class="token property">"additionalProperties"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span><br>  <span class="token property">"properties"</span><span class="token operator">:</span> <span class="token punctuation">{</span><br>    <span class="token property">"things"</span><span class="token operator">:</span> <span class="token punctuation">{</span><br>      <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"array"</span><span class="token punctuation">,</span><br>      <span class="token property">"items"</span><span class="token operator">:</span> <span class="token punctuation">{</span><br>        <span class="token property">"oneOf"</span><span class="token operator">:</span> <span class="token punctuation">[</span><br>          <span class="token punctuation">{</span> <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"number"</span><span class="token punctuation">,</span> <span class="token property">"multipleOf"</span><span class="token operator">:</span> <span class="token number">5</span> <span class="token punctuation">}</span><span class="token punctuation">,</span><br>          <span class="token punctuation">{</span> <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"number"</span><span class="token punctuation">,</span> <span class="token property">"multipleOf"</span><span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><br>        <span class="token punctuation">]</span><br>      <span class="token punctuation">}</span><br>    <span class="token punctuation">}</span><br>  <span class="token punctuation">}</span><br><span class="token punctuation">}</span></code></pre>
<p>As expected, this will appropriately validate the following data:</p>
<pre class="language-json"><code class="language-json"><span class="token punctuation">{</span><br>    <span class="token property">"things"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><br><span class="token punctuation">}</span></code></pre>
<p>The values 1, 2 and 4 are marked in my editor as invalid (interestingly, but not completely unexpectedly, with errors relating to the first constraint in the list, namely &quot;Value is not divisible by 5&quot;).</p>
<h3>Digression - floating constraints upwards</h3>
<p>Just coming back to that <code>type</code> definition for a second; instead of removing the <code>&quot;type&quot;: &quot;object&quot;</code> constraint to make way for the two <code>type</code> definitions in what I was pasting in, I could have removed the two <code>type</code> definitions in what I was pasting in, and floated the constraint one level up, changing the value for the <code>type</code> property from <code>&quot;object&quot;</code> to <code>&quot;number&quot;</code>, like this:</p>
<pre class="language-json"><code class="language-json"><span class="token property">"items"</span><span class="token operator">:</span> <span class="token punctuation">{</span><br>  <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"number"</span><span class="token punctuation">,</span><br>  <span class="token property">"oneOf"</span><span class="token operator">:</span> <span class="token punctuation">[</span><br>    <span class="token punctuation">{</span> <span class="token property">"multipleOf"</span><span class="token operator">:</span> <span class="token number">5</span> <span class="token punctuation">}</span><span class="token punctuation">,</span><br>    <span class="token punctuation">{</span> <span class="token property">"multipleOf"</span><span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><br>  <span class="token punctuation">]</span><br><span class="token punctuation">}</span></code></pre>
<p>This is much cleaner. But I digress (again).</p>
<h2>Introducing some modularisation</h2>
<p>First, what do I actually mean by modularisation? Well I want to have the definitions for PERSON and VEHICLE in separate files, each representing a subschema, and then I want to be able to point to those two subschema files in the context of this <code>oneOf</code> section.</p>
<p>Why? Well, I feel as thought I'd be able to construct, think about and maintain schemas if they're smaller and self-contained, and then glue them together as I see fit.</p>
<h3>Subschemas</h3>
<p>If I take the PERSON definition, I could define a self-contained schema that might look like this:</p>
<pre class="language-json"><code class="language-json"><span class="token punctuation">{</span><br>  <span class="token property">"$schema"</span><span class="token operator">:</span> <span class="token string">"https://json-schema.org/draft-07/schema"</span><span class="token punctuation">,</span><br>  <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"Person schema"</span><span class="token punctuation">,</span><br>  <span class="token property">"properties"</span><span class="token operator">:</span> <span class="token punctuation">{</span><br>    <span class="token property">"category"</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token property">"enum"</span><span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token string">"PERSON"</span> <span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">,</span><br>    <span class="token property">"firstName"</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"string"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span><br>    <span class="token property">"lastName"</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"string"</span> <span class="token punctuation">}</span><br>  <span class="token punctuation">}</span><span class="token punctuation">,</span><br>  <span class="token property">"required"</span><span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token string">"firstName"</span><span class="token punctuation">,</span> <span class="token string">"lastName"</span><span class="token punctuation">,</span> <span class="token string">"category"</span> <span class="token punctuation">]</span><span class="token punctuation">,</span><br>  <span class="token property">"additionalProperties"</span><span class="token operator">:</span> <span class="token boolean">false</span><br><span class="token punctuation">}</span></code></pre>
<p>Similarly, here's a self-contained schema for VEHICLE:</p>
<pre class="language-json"><code class="language-json"><span class="token punctuation">{</span><br>  <span class="token property">"$schema"</span><span class="token operator">:</span> <span class="token string">"https://json-schema.org/draft-07/schema"</span><span class="token punctuation">,</span><br>  <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"Vehicle schema"</span><span class="token punctuation">,</span><br>  <span class="token property">"properties"</span><span class="token operator">:</span> <span class="token punctuation">{</span><br>    <span class="token property">"category"</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token property">"enum"</span><span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token string">"VEHICLE"</span> <span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">,</span><br>    <span class="token property">"make"</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"string"</span><span class="token punctuation">,</span> <span class="token property">"enum"</span><span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token string">"Tesla"</span><span class="token punctuation">,</span> <span class="token string">"Chevrolet"</span> <span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">,</span><br>    <span class="token property">"model"</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"string"</span> <span class="token punctuation">}</span><br>  <span class="token punctuation">}</span><span class="token punctuation">,</span><br>  <span class="token property">"required"</span><span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token string">"make"</span><span class="token punctuation">,</span> <span class="token string">"model"</span><span class="token punctuation">,</span> <span class="token string">"category"</span> <span class="token punctuation">]</span><span class="token punctuation">,</span><br>  <span class="token property">"additionalProperties"</span><span class="token operator">:</span> <span class="token boolean">false</span><br><span class="token punctuation">}</span></code></pre>
<blockquote>
<p>I've added some vehicle manufacturer constraints for a bit of spice.</p>
</blockquote>
<p>Each of these schemas is complete and self-contained, and each can be employed to validate data appropriately. But they can also be combined, as subschemas, with <code>oneOf</code>, into a larger whole.</p>
<p>I've put each of these into files in a subdirectory called <code>things/</code>, such that I now have this in my workspace:</p>
<pre class="language-text"><code class="language-text">.<br>|-- myschema.json<br>`-- things<br>    |-- person.json<br>    `-- vehicle.json</code></pre>
<h3>Referencing another schema</h3>
<p>The combining can be achieved through the use of the <a href="https://json-schema.org/understanding-json-schema/structuring.html#ref">$ref</a> keyword.</p>
<p>So to reference these two self-contained schemas to describe what the <code>items</code> can be, I can do this:</p>
<pre class="language-json"><code class="language-json"><span class="token punctuation">{</span><br>  <span class="token property">"$schema"</span><span class="token operator">:</span> <span class="token string">"https://json-schema.org/draft-07/schema"</span><span class="token punctuation">,</span><br>  <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">"Things which are either people or vehicles"</span><span class="token punctuation">,</span><br>  <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"object"</span><span class="token punctuation">,</span><br>  <span class="token property">"required"</span><span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token string">"things"</span> <span class="token punctuation">]</span><span class="token punctuation">,</span><br>  <span class="token property">"additionalProperties"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span><br>  <span class="token property">"properties"</span><span class="token operator">:</span> <span class="token punctuation">{</span><br>    <span class="token property">"things"</span><span class="token operator">:</span> <span class="token punctuation">{</span><br>      <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"array"</span><span class="token punctuation">,</span><br>      <span class="token property">"items"</span><span class="token operator">:</span> <span class="token punctuation">{</span><br>        <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"object"</span><span class="token punctuation">,</span><br>        <span class="token property">"oneOf"</span><span class="token operator">:</span> <span class="token punctuation">[</span><br>          <span class="token punctuation">{</span> <span class="token property">"$ref"</span><span class="token operator">:</span> <span class="token string">"./things/person.json"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span><br>          <span class="token punctuation">{</span> <span class="token property">"$ref"</span><span class="token operator">:</span> <span class="token string">"./things/vehicle.json"</span> <span class="token punctuation">}</span><br>        <span class="token punctuation">]</span><br>      <span class="token punctuation">}</span><br>    <span class="token punctuation">}</span><br>  <span class="token punctuation">}</span><br><span class="token punctuation">}</span></code></pre>
<h3>Disambiguating the possibilities</h3>
<p>For me, there's a bit of magic that makes this sort of construction really well. Looking back at the two subschema definitions, each of them defines a <code>category</code> property, and in each case, only a single specific value for that property is valid. This constraint is achieved with the use of the <a href="https://json-schema.org/understanding-json-schema/reference/generic.html#enumerated-values">enum</a> keyword, where there's just a single value in the array of possible values.</p>
<p>Here's what the two definitions look like:</p>
<pre class="language-json"><code class="language-json"><span class="token property">"category"</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token property">"enum"</span><span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token string">"PERSON"</span> <span class="token punctuation">]</span> <span class="token punctuation">}</span></code></pre>
<p>and</p>
<pre class="language-json"><code class="language-json"><span class="token property">"category"</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token property">"enum"</span><span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token string">"VEHICLE"</span> <span class="token punctuation">]</span> <span class="token punctuation">}</span></code></pre>
<p>This means that for an item object to match the PERSON definition, the value of the <code>category</code> property in that object <em>must</em> be &quot;PERSON&quot;. Likewise, for an item object to match the VEHICLE definition, the value of the <code>category</code> property in that object <em>must</em> be &quot;VEHICLE&quot;.</p>
<h3>Autocomplete and validation examples</h3>
<p>This then has effects that are great for validation, and best illustrated by us imagining the creation of new <code>item</code> objects. Let's play a couple of examples out.</p>
<p>First, I'll add a vehicle object.</p>
<p>In the <code>data.json</code> file, in the array that is the value for the <code>things</code> property, I create a new empty object <code>{}</code>:</p>
<pre class="language-json"><code class="language-json"><span class="token punctuation">{</span><br>  <span class="token property">"things"</span><span class="token operator">:</span> <span class="token punctuation">[</span><br>    <span class="token punctuation">{</span><span class="token punctuation">}</span><br>  <span class="token punctuation">]</span><br><span class="token punctuation">}</span></code></pre>
<blockquote>
<p>This assumes that my editor has associated this <code>data.json</code> file with the JSON Schema in <code>myschema.json</code>. I'll talk about how this is done in another post.</p>
</blockquote>
<p>On entering <code>{}</code> I immediately get a message: &quot;Matches multiple schemas when only one must validate&quot;. Fair enough. Not enough data to go on yet.</p>
<p>I ask for suggestions and am presented with a combination of all the properties from the VEHICLE and PERSON schemas, i.e.:</p>
<ul>
<li><code>category</code></li>
<li><code>firstName</code></li>
<li><code>lastName</code></li>
<li><code>make</code></li>
<li><code>model</code></li>
</ul>
<p>Also fair. I'm still at the fork in the road.</p>
<p>I choose <code>make</code>, and request autocomplete, and then I'm presented with the following possible values:</p>
<ul>
<li>&quot;Chevrolet&quot;</li>
<li>&quot;Tesla&quot;</li>
</ul>
<p>Makes sense, these are the string values in the <code>enum</code> defined for that property, in the VEHICLE subschema. So I select &quot;Chevrolet&quot;, and ask for suggestions for the next property. This time I'm just presented with two:</p>
<ul>
<li><code>category</code></li>
<li><code>make</code></li>
</ul>
<p>This also makes sense - given that the object now has a <code>model</code> property, it will only match with the VEHICLE schema.</p>
<p>I choose <code>category</code> and request autocomplete. This time the value is automatically filled for me, it's &quot;VEHICLE&quot;. It can only be that value, and there were no other values suggested.</p>
<p>At this stage my object looks like this:</p>
<pre class="language-json"><code class="language-json"><span class="token punctuation">{</span><br>  <span class="token property">"things"</span><span class="token operator">:</span> <span class="token punctuation">[</span><br>    <span class="token punctuation">{</span> <span class="token property">"make"</span><span class="token operator">:</span> <span class="token string">"Chevrolet"</span><span class="token punctuation">,</span> <span class="token property">"category"</span><span class="token operator">:</span> <span class="token string">"VEHICLE"</span> <span class="token punctuation">}</span><br>  <span class="token punctuation">]</span><br><span class="token punctuation">}</span></code></pre>
<p>There's still an error showing, and this time it's &quot;Missing property model&quot;. Of course. The validation mechanism has matched the VEHICLE subschema, and according to the <code>required</code> property in that subschema ...</p>
<pre class="language-json"><code class="language-json"><span class="token punctuation">{</span><br>  <span class="token property">"required"</span><span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token string">"make"</span><span class="token punctuation">,</span> <span class="token string">"model"</span><span class="token punctuation">,</span> <span class="token string">"category"</span> <span class="token punctuation">]</span><br><span class="token punctuation">}</span></code></pre>
<p>... the <code>model</code> property is also required.</p>
<p>So I add one (autocomplete has this property as its only suggestion anyway) and specify &quot;Caprice&quot; as the value.</p>
<p>I end up with my first thing, and everything is valid:</p>
<pre class="language-json"><code class="language-json"><span class="token punctuation">{</span><br>  <span class="token property">"things"</span><span class="token operator">:</span> <span class="token punctuation">[</span><br>    <span class="token punctuation">{</span><br>      <span class="token property">"make"</span><span class="token operator">:</span> <span class="token string">"Chevrolet"</span><span class="token punctuation">,</span><br>      <span class="token property">"category"</span><span class="token operator">:</span> <span class="token string">"VEHICLE"</span><span class="token punctuation">,</span><br>      <span class="token property">"model"</span><span class="token operator">:</span> <span class="token string">"Caprice"</span><br>    <span class="token punctuation">}</span><br>  <span class="token punctuation">]</span><br><span class="token punctuation">}</span></code></pre>
<p>For a second example, I'll add a person object.</p>
<p>I start out the same way as before, by adding a new <code>{}</code> empty object, and then select <code>category</code> as the property I want to create first:</p>
<pre class="language-json"><code class="language-json"><span class="token punctuation">{</span><br>  <span class="token property">"things"</span><span class="token operator">:</span> <span class="token punctuation">[</span><br>    <span class="token punctuation">{</span><br>      <span class="token property">"make"</span><span class="token operator">:</span> <span class="token string">"Chevrolet"</span><span class="token punctuation">,</span><br>      <span class="token property">"category"</span><span class="token operator">:</span> <span class="token string">"VEHICLE"</span><span class="token punctuation">,</span><br>      <span class="token property">"model"</span><span class="token operator">:</span> <span class="token string">"Caprice"</span><br>    <span class="token punctuation">}</span><span class="token punctuation">,</span><br>    <span class="token punctuation">{</span> <span class="token property">"category"</span><span class="token operator">:</span> ... <span class="token punctuation">}</span><br>  <span class="token punctuation">]</span><br><span class="token punctuation">}</span></code></pre>
<p>The autocomplete automatically suggests &quot;PERSON&quot; as the value. This strikes me as slightly odd, and perhaps a foible of the implementation of autocomplete in the editor I'm using. Because at this stage the choice of subschemas is still open, right?</p>
<p>I guess it's sort of understandable (almost?) in that if I've asked it to suggest a value, then it needs to suggest one, and picks the first possibility, which due to the simple fact that the PERSON subschema is listed first in the <code>oneOf</code> array ...</p>
<pre class="language-json"><code class="language-json"><span class="token property">"oneOf"</span><span class="token operator">:</span> <span class="token punctuation">[</span><br>  <span class="token punctuation">{</span> <span class="token property">"$ref"</span><span class="token operator">:</span> <span class="token string">"./things/person.json"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span><br>  <span class="token punctuation">{</span> <span class="token property">"$ref"</span><span class="token operator">:</span> <span class="token string">"./things/vehicle.json"</span> <span class="token punctuation">}</span><br><span class="token punctuation">]</span></code></pre>
<p>... is &quot;PERSON&quot;. Makes sense, sort of.</p>
<p>So anyway I remove the suggested &quot;PERSON&quot; value and ask for suggestions again; this time, it gives me a choice of the two actual possibilities: &quot;PERSON&quot; and &quot;VEHICLE&quot;. I select &quot;PERSON&quot; anyway, but am happy to have seen that both were presented as options.</p>
<p>I then proceed to ask for and then select the only two remaining possible properties which are <code>firstName</code> and <code>lastName</code> because the choice of &quot;PERSON&quot; for <code>category</code> has locked this object into being constrained by the corresponding subschema, add the values, and end up with:</p>
<pre class="language-json"><code class="language-json"><span class="token punctuation">{</span><br>  <span class="token property">"things"</span><span class="token operator">:</span> <span class="token punctuation">[</span><br>    <span class="token punctuation">{</span><br>      <span class="token property">"make"</span><span class="token operator">:</span> <span class="token string">"Chevrolet"</span><span class="token punctuation">,</span><br>      <span class="token property">"category"</span><span class="token operator">:</span> <span class="token string">"VEHICLE"</span><span class="token punctuation">,</span><br>      <span class="token property">"model"</span><span class="token operator">:</span> <span class="token string">"Caprice"</span><br>    <span class="token punctuation">}</span><span class="token punctuation">,</span><br>    <span class="token punctuation">{</span><br>      <span class="token property">"category"</span><span class="token operator">:</span> <span class="token string">"PERSON"</span><span class="token punctuation">,</span><br>      <span class="token property">"firstName"</span><span class="token operator">:</span> <span class="token string">"Arthur"</span><span class="token punctuation">,</span><br>      <span class="token property">"lastName"</span><span class="token operator">:</span> <span class="token string">"Dent"</span><br>    <span class="token punctuation">}</span><br>  <span class="token punctuation">]</span><br><span class="token punctuation">}</span></code></pre>
<p>I've put the schema / subschemas combination through its paces and am happy with the result - it's what I'd expect (modulo the questionable editor behaviour mentioned) from the overall schema.</p>
<h3>Improving on the category constraints</h3>
<p>One of the reasons I write rambling notes to myself (and to you, dear reader, if - by this point in the post - you're still here) is that at the end of it, my own understanding is better. Not only that, in looking up stuff that I can reference, I learn new things.</p>
<p>An example of this is that in looking up the content related to <a href="https://json-schema.org/understanding-json-schema/reference/generic.html#enumerated-values">enumerated values</a> I noticed, directly in the next section, that JSON Schema also has <a href="https://json-schema.org/understanding-json-schema/reference/generic.html#constant-values">constant values</a>! They're new from draft 06, so are fine for me to use.</p>
<p>This is a new discovery for me, and I can replace the magic earlier - <code>enums</code> with single values - with this <code>const</code> keyword.</p>
<p>Taking the VEHICLE subschema as an example, here's what it looks like now:</p>
<pre class="language-json"><code class="language-json"><span class="token punctuation">{</span><br>  <span class="token property">"$schema"</span><span class="token operator">:</span> <span class="token string">"https://json-schema.org/draft-07/schema"</span><span class="token punctuation">,</span><br>  <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"Vehicle schema"</span><span class="token punctuation">,</span><br>  <span class="token property">"properties"</span><span class="token operator">:</span> <span class="token punctuation">{</span><br>    <span class="token property">"category"</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token property">"const"</span><span class="token operator">:</span> <span class="token string">"VEHICLE"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span><br>    <span class="token property">"make"</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"string"</span><span class="token punctuation">,</span> <span class="token property">"enum"</span><span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token string">"Tesla"</span><span class="token punctuation">,</span> <span class="token string">"Chevrolet"</span> <span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">,</span><br>    <span class="token property">"model"</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"string"</span> <span class="token punctuation">}</span><br>  <span class="token punctuation">}</span><span class="token punctuation">,</span><br>  <span class="token property">"required"</span><span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token string">"make"</span><span class="token punctuation">,</span> <span class="token string">"model"</span><span class="token punctuation">,</span> <span class="token string">"category"</span> <span class="token punctuation">]</span><span class="token punctuation">,</span><br>  <span class="token property">"additionalProperties"</span><span class="token operator">:</span> <span class="token boolean">false</span><br><span class="token punctuation">}</span></code></pre>
<p>Using <code>const</code> makes more sense, and is more explicit. Nice!</p>
<h2>Wrapping up</h2>
<p>I think the possibilities of managing schemas in a modular way are definitely there, and this brief foray into that area of JSON Schema has taught me a thing or two. I hope it has helped you become acquainted too.</p>
<p><img src="/images/2022/11/tdx13.jpg" alt="Chevrolet Caprice Classic Coupe"></p>
<p>Here's a pic of my 1973 Chevrolet Caprice Classic Coupe which I had in the 1990's. Long gone, never forgotten.</p>
<h2>Further reading</h2>
<ul>
<li><a href="https://json-schema.org/understanding-json-schema/structuring.html">Structuring a complex schema</a></li>
</ul>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>More Untappd data explorations with jq - my top ranking beer types (part 3)</title>
      <link href="https://qmacro.org/blog/posts/2022/11/01/more-untappd-data-explorations-with-jq-my-top-ranking-beer-types-(part-3)/"/>
      <updated>2022-11-01T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2022/11/01/more-untappd-data-explorations-with-jq-my-top-ranking-beer-types-(part-3)/</id>
      <content type="html">
        <![CDATA[
      <p>This is a continuation of <a href="/blog/posts/2022/10/31/more-untappd-data-explorations-with-jq-my-top-ranking-beer-types-(part-2)/">part 2</a> which you should read first.</p>
<p><a href="https://untappd.com/user/qmacro/checkin/696856275"><img src="/images/2022/10/east-india-porter-checkin.png" alt="A checkin of Beer Nouveau's C18th recipe of East India Porter"></a></p>
<p>Part 2 finished with an array of category objects, each containing all the checkin ratings for that category, albeit in string form, with some empty strings:</p>
<pre class="language-jq"><code class="language-jq"><span class="token punctuation">[</span><br>  <span class="token punctuation">{</span><br>    <span class="token property">"key"</span><span class="token punctuation">:</span> <span class="token string">"Altbier"</span><span class="token punctuation">,</span><br>    <span class="token property">"value"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><br>      <span class="token string">"4"</span><span class="token punctuation">,</span><br>      <span class="token string">"3"</span><span class="token punctuation">,</span><br>      <span class="token string">"3.75"</span><span class="token punctuation">,</span><br>      <span class="token string">"3.5"</span><span class="token punctuation">,</span><br>      <span class="token string">"3.25"</span><br>    <span class="token punctuation">]</span><br>  <span class="token punctuation">}</span><span class="token punctuation">,</span><br>  <span class="token punctuation">{</span><br>    <span class="token property">"key"</span><span class="token punctuation">:</span> <span class="token string">"..."</span><span class="token punctuation">,</span><br>    <span class="token property">"value"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><br>      <span class="token string">"..."</span><span class="token punctuation">,</span><br>      <span class="token string">"..."</span><br>    <span class="token punctuation">]</span><br>  <span class="token punctuation">}</span><span class="token punctuation">,</span><br>  <span class="token punctuation">{</span><br>    <span class="token property">"key"</span><span class="token punctuation">:</span> <span class="token string">"Winter Warmer"</span><span class="token punctuation">,</span><br>    <span class="token property">"value"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><br>      <span class="token string">""</span><span class="token punctuation">,</span><br>      <span class="token string">""</span><span class="token punctuation">,</span><br>      <span class="token string">"4"</span><span class="token punctuation">,</span><br>      <span class="token string">"4"</span><span class="token punctuation">,</span><br>      <span class="token string">"4"</span><span class="token punctuation">,</span><br>      <span class="token string">"3.5"</span><span class="token punctuation">,</span><br>      <span class="token string">"4"</span><span class="token punctuation">,</span><br>      <span class="token string">"4.25"</span><span class="token punctuation">,</span><br>      <span class="token string">"3.25"</span><span class="token punctuation">,</span><br>      <span class="token string">"4.25"</span><span class="token punctuation">,</span><br>      <span class="token string">"3.75"</span><span class="token punctuation">,</span><br>      <span class="token string">"3.4"</span><br>    <span class="token punctuation">]</span><br>  <span class="token punctuation">}</span><br><span class="token punctuation">]</span></code></pre>
<p>This was achieved using a pattern now encapsulated into a function called <code>arrange</code>:</p>
<pre class="language-jq"><code class="language-jq"><span class="token keyword">def</span> <span class="token function">major_type</span><span class="token punctuation">:</span> <span class="token c-style-function function">split</span><span class="token punctuation">(</span><span class="token string">" -"</span><span class="token punctuation">)</span> <span class="token operator pipe">|</span> first<span class="token punctuation">;</span><br><br><span class="token keyword">def</span> <span class="token function">arrange</span><span class="token punctuation">(</span>k<span class="token punctuation">;</span>v<span class="token punctuation">)</span><span class="token punctuation">:</span> <br>  <span class="token c-style-function function">group_by</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><br>  <span class="token operator pipe">|</span> <span class="token c-style-function function">map</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token property-literal property">key</span><span class="token punctuation">:</span> <span class="token punctuation">(</span>first<span class="token operator pipe">|</span><span class="token punctuation">.</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token property-literal property">value</span><span class="token punctuation">:</span> v<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br><br><span class="token c-style-function function">map</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token property-literal property">category</span><span class="token punctuation">:</span> <span class="token punctuation">.</span>beer_type<span class="token operator pipe">|</span>major_type<span class="token punctuation">,</span> rating_score <span class="token punctuation">}</span><span class="token punctuation">)</span><br><span class="token operator pipe">|</span> <span class="token c-style-function function">arrange</span><span class="token punctuation">(</span><span class="token string">"category"</span><span class="token punctuation">;</span> <span class="token c-style-function function">map</span><span class="token punctuation">(</span><span class="token punctuation">.</span>rating_score<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>
<h2>Dealing with bad data</h2>
<p>So, about those rating values. I'll take the ratings for the Winter Warmer category as an example to work on, and I can get a list of those by extending the current filter like this:</p>
<pre class="language-jq"><code class="language-jq"><span class="token keyword">def</span> <span class="token function">category</span><span class="token punctuation">:</span> <span class="token c-style-function function">split</span><span class="token punctuation">(</span><span class="token string">" -"</span><span class="token punctuation">)</span> <span class="token operator pipe">|</span> first<span class="token punctuation">;</span><br><br><span class="token keyword">def</span> <span class="token function">arrange</span><span class="token punctuation">(</span>k<span class="token punctuation">;</span>v<span class="token punctuation">)</span><span class="token punctuation">:</span> <br>  <span class="token c-style-function function">group_by</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><br>  <span class="token operator pipe">|</span> <span class="token c-style-function function">map</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token property-literal property">key</span><span class="token punctuation">:</span> <span class="token punctuation">(</span>first<span class="token operator pipe">|</span><span class="token punctuation">.</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token property-literal property">value</span><span class="token punctuation">:</span> v<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br><br><span class="token c-style-function function">map</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token property-literal property">category</span><span class="token punctuation">:</span> <span class="token punctuation">.</span>beer_type<span class="token operator pipe">|</span>major_type<span class="token punctuation">,</span> rating_score <span class="token punctuation">}</span><span class="token punctuation">)</span><br><span class="token operator pipe">|</span> <span class="token c-style-function function">arrange</span><span class="token punctuation">(</span><span class="token string">"category"</span><span class="token punctuation">;</span> <span class="token c-style-function function">map</span><span class="token punctuation">(</span><span class="token punctuation">.</span>rating_score<span class="token punctuation">)</span><span class="token punctuation">)</span><br><br><span class="token comment"># Temporary selection of Winter Warmer ratings</span><br><span class="token operator pipe">|</span> <span class="token c-style-function function">map</span><span class="token punctuation">(</span><span class="token c-style-function function">select</span><span class="token punctuation">(</span><span class="token punctuation">.</span>key <span class="token operator">==</span> <span class="token string">"Winter Warmer"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator pipe">|</span>first<span class="token operator pipe">|</span><span class="token punctuation">.</span>value</code></pre>
<p>I've deliberately put some whitespace (and a comment) before this temporary extension, to make it clear it's not permanent.</p>
<p>The output looks like this:</p>
<pre class="language-json"><code class="language-json"><span class="token punctuation">[</span><br>  <span class="token string">""</span><span class="token punctuation">,</span><br>  <span class="token string">""</span><span class="token punctuation">,</span><br>  <span class="token string">"4"</span><span class="token punctuation">,</span><br>  <span class="token string">"4"</span><span class="token punctuation">,</span><br>  <span class="token string">"4"</span><span class="token punctuation">,</span><br>  <span class="token string">"3.5"</span><span class="token punctuation">,</span><br>  <span class="token string">"4"</span><span class="token punctuation">,</span><br>  <span class="token string">"4.25"</span><span class="token punctuation">,</span><br>  <span class="token string">"3.25"</span><span class="token punctuation">,</span><br>  <span class="token string">"4.25"</span><span class="token punctuation">,</span><br>  <span class="token string">"3.75"</span><span class="token punctuation">,</span><br>  <span class="token string">"3.4"</span><br><span class="token punctuation">]</span></code></pre>
<p>OK, so it seems worthwhile building something to filter these values down to ones that are not null and to turn them from strings to numbers. While there isn't an explicit <code>filter</code> function, it's achieved by the combination of <code>map</code> and <code>select</code>, which is very common to see. In fact, I use it in this temporary extension: <code>map(select(.key == &quot;Winter Warmer&quot;))</code>.</p>
<blockquote>
<p>To be honest, I've often wondered why a simple syntactic sugar function isn't in the <a href="https://github.com/stedolan/jq/blob/master/src/builtin.jq">builtin</a> library, something like this:</p>
<pre class="language-jq"><code class="language-jq"><span class="token keyword">def</span> <span class="token function">filter</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token c-style-function function">map</span><span class="token punctuation">(</span><span class="token c-style-function function">select</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>Then I could have expressed the above section like this: <code>filter(.key == &quot;Winter Warmer&quot;)</code>.</p>
</blockquote>
<p>Anyway, to the data. Filtering out anything except actual values could be done like this:</p>
<pre class="language-jq"><code class="language-jq"><span class="token keyword">def</span> <span class="token function">category</span><span class="token punctuation">:</span> <span class="token c-style-function function">split</span><span class="token punctuation">(</span><span class="token string">" -"</span><span class="token punctuation">)</span> <span class="token operator pipe">|</span> first<span class="token punctuation">;</span><br><br><span class="token keyword">def</span> <span class="token function">arrange</span><span class="token punctuation">(</span>k<span class="token punctuation">;</span>v<span class="token punctuation">)</span><span class="token punctuation">:</span> <br>  <span class="token c-style-function function">group_by</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><br>  <span class="token operator pipe">|</span> <span class="token c-style-function function">map</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token property-literal property">key</span><span class="token punctuation">:</span> <span class="token punctuation">(</span>first<span class="token operator pipe">|</span><span class="token punctuation">.</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token property-literal property">value</span><span class="token punctuation">:</span> v<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br><br><span class="token c-style-function function">map</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token property-literal property">category</span><span class="token punctuation">:</span> <span class="token punctuation">.</span>beer_type<span class="token operator pipe">|</span>major_type<span class="token punctuation">,</span> rating_score <span class="token punctuation">}</span><span class="token punctuation">)</span><br><span class="token operator pipe">|</span> <span class="token c-style-function function">arrange</span><span class="token punctuation">(</span><span class="token string">"category"</span><span class="token punctuation">;</span> <span class="token c-style-function function">map</span><span class="token punctuation">(</span><span class="token punctuation">.</span>rating_score<span class="token punctuation">)</span><span class="token punctuation">)</span><br><br><span class="token comment"># Temporary selection of Winter Warmer ratings</span><br><span class="token operator pipe">|</span> <span class="token c-style-function function">map</span><span class="token punctuation">(</span><span class="token c-style-function function">select</span><span class="token punctuation">(</span><span class="token punctuation">.</span>key <span class="token operator">==</span> <span class="token string">"Winter Warmer"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator pipe">|</span>first<span class="token operator pipe">|</span><span class="token punctuation">.</span>value<br><span class="token operator pipe">|</span> <span class="token c-style-function function">map</span><span class="token punctuation">(</span><span class="token c-style-function function">select</span><span class="token punctuation">(</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>
<p>Which reduces the array of values appropriately:</p>
<pre class="language-json"><code class="language-json"><span class="token punctuation">[</span><br>  <span class="token string">"4"</span><span class="token punctuation">,</span><br>  <span class="token string">"4"</span><span class="token punctuation">,</span><br>  <span class="token string">"4"</span><span class="token punctuation">,</span><br>  <span class="token string">"3.5"</span><span class="token punctuation">,</span><br>  <span class="token string">"4"</span><span class="token punctuation">,</span><br>  <span class="token string">"4.25"</span><span class="token punctuation">,</span><br>  <span class="token string">"3.25"</span><span class="token punctuation">,</span><br>  <span class="token string">"4.25"</span><span class="token punctuation">,</span><br>  <span class="token string">"3.75"</span><span class="token punctuation">,</span><br>  <span class="token string">"3.4"</span><br><span class="token punctuation">]</span></code></pre>
<p>And conveniently, there's a function to parse input as a number, appropriately called <code>tonumber</code> (there's also <code>tostring</code>). Adding that to this filter like this:</p>
<pre class="language-jq"><code class="language-jq"><span class="token keyword">def</span> <span class="token function">category</span><span class="token punctuation">:</span> <span class="token c-style-function function">split</span><span class="token punctuation">(</span><span class="token string">" -"</span><span class="token punctuation">)</span> <span class="token operator pipe">|</span> first<span class="token punctuation">;</span><br><br><span class="token keyword">def</span> <span class="token function">arrange</span><span class="token punctuation">(</span>k<span class="token punctuation">;</span>v<span class="token punctuation">)</span><span class="token punctuation">:</span> <br>  <span class="token c-style-function function">group_by</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><br>  <span class="token operator pipe">|</span> <span class="token c-style-function function">map</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token property-literal property">key</span><span class="token punctuation">:</span> <span class="token punctuation">(</span>first<span class="token operator pipe">|</span><span class="token punctuation">.</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token property-literal property">value</span><span class="token punctuation">:</span> v<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br><br><span class="token c-style-function function">map</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token property-literal property">category</span><span class="token punctuation">:</span> <span class="token punctuation">.</span>beer_type<span class="token operator pipe">|</span>major_type<span class="token punctuation">,</span> rating_score <span class="token punctuation">}</span><span class="token punctuation">)</span><br><span class="token operator pipe">|</span> <span class="token c-style-function function">arrange</span><span class="token punctuation">(</span><span class="token string">"category"</span><span class="token punctuation">;</span> <span class="token c-style-function function">map</span><span class="token punctuation">(</span><span class="token punctuation">.</span>rating_score<span class="token punctuation">)</span><span class="token punctuation">)</span><br><br><span class="token comment"># Temporary selection of Winter Warmer ratings</span><br><span class="token operator pipe">|</span> <span class="token c-style-function function">map</span><span class="token punctuation">(</span><span class="token c-style-function function">select</span><span class="token punctuation">(</span><span class="token punctuation">.</span>key <span class="token operator">==</span> <span class="token string">"Winter Warmer"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator pipe">|</span>first<span class="token operator pipe">|</span><span class="token punctuation">.</span>value<br><span class="token operator pipe">|</span> <span class="token c-style-function function">map</span><span class="token punctuation">(</span><span class="token c-style-function function">select</span><span class="token punctuation">(</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator pipe">|</span>tonumber<span class="token punctuation">)</span></code></pre>
<p>gives us:</p>
<pre class="language-json"><code class="language-json"><span class="token punctuation">[</span><br>  <span class="token number">4</span><span class="token punctuation">,</span><br>  <span class="token number">4</span><span class="token punctuation">,</span><br>  <span class="token number">4</span><span class="token punctuation">,</span><br>  <span class="token number">3.5</span><span class="token punctuation">,</span><br>  <span class="token number">4</span><span class="token punctuation">,</span><br>  <span class="token number">4.25</span><span class="token punctuation">,</span><br>  <span class="token number">3.25</span><span class="token punctuation">,</span><br>  <span class="token number">4.25</span><span class="token punctuation">,</span><br>  <span class="token number">3.75</span><span class="token punctuation">,</span><br>  <span class="token number">3.4</span><br><span class="token punctuation">]</span></code></pre>
<p>That's what we want! Worth putting into a function, don't you agree? How about calling that function <code>numbers</code>, and then using it in our temporary &quot;Winter Warmer&quot; extension:</p>
<pre class="language-jq"><code class="language-jq"><span class="token keyword">def</span> <span class="token function">category</span><span class="token punctuation">:</span> <span class="token c-style-function function">split</span><span class="token punctuation">(</span><span class="token string">" -"</span><span class="token punctuation">)</span> <span class="token operator pipe">|</span> first<span class="token punctuation">;</span><br><br><span class="token keyword">def</span> <span class="token function">arrange</span><span class="token punctuation">(</span>k<span class="token punctuation">;</span>v<span class="token punctuation">)</span><span class="token punctuation">:</span> <br>  <span class="token c-style-function function">group_by</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><br>  <span class="token operator pipe">|</span> <span class="token c-style-function function">map</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token property-literal property">key</span><span class="token punctuation">:</span> <span class="token punctuation">(</span>first<span class="token operator pipe">|</span><span class="token punctuation">.</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token property-literal property">value</span><span class="token punctuation">:</span> v<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br><br><span class="token keyword">def</span> <span class="token function">numbers</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token c-style-function function">map</span><span class="token punctuation">(</span><span class="token c-style-function function">select</span><span class="token punctuation">(</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator pipe">|</span>tonumber<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br><br><span class="token c-style-function function">map</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token property-literal property">category</span><span class="token punctuation">:</span> <span class="token punctuation">.</span>beer_type<span class="token operator pipe">|</span>category<span class="token punctuation">,</span> rating_score <span class="token punctuation">}</span><span class="token punctuation">)</span><br><span class="token operator pipe">|</span> <span class="token c-style-function function">arrange</span><span class="token punctuation">(</span><span class="token string">"category"</span><span class="token punctuation">;</span> <span class="token c-style-function function">map</span><span class="token punctuation">(</span><span class="token punctuation">.</span>rating_score<span class="token punctuation">)</span><span class="token punctuation">)</span><br><br><span class="token comment"># Temporary selection of Winter Warmer ratings</span><br><span class="token operator pipe">|</span> <span class="token c-style-function function">map</span><span class="token punctuation">(</span><span class="token c-style-function function">select</span><span class="token punctuation">(</span><span class="token punctuation">.</span>key <span class="token operator">==</span> <span class="token string">"Winter Warmer"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator pipe">|</span>first<span class="token operator pipe">|</span><span class="token punctuation">.</span>value<br><span class="token operator pipe">|</span> numbers</code></pre>
<h2>Taking the average</h2>
<p>While I'm in the mood for functions, how about one that will give the average of an array of numbers?  I'll call it <code>average</code> and add it to <code>untappd.jq</code>:</p>
<pre class="language-jq"><code class="language-jq"><span class="token keyword">def</span> <span class="token function">category</span><span class="token punctuation">:</span> <span class="token c-style-function function">split</span><span class="token punctuation">(</span><span class="token string">" -"</span><span class="token punctuation">)</span> <span class="token operator pipe">|</span> first<span class="token punctuation">;</span><br><br><span class="token keyword">def</span> <span class="token function">arrange</span><span class="token punctuation">(</span>k<span class="token punctuation">;</span>v<span class="token punctuation">)</span><span class="token punctuation">:</span> <br>  <span class="token c-style-function function">group_by</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><br>  <span class="token operator pipe">|</span> <span class="token c-style-function function">map</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token property-literal property">key</span><span class="token punctuation">:</span> <span class="token punctuation">(</span>first<span class="token operator pipe">|</span><span class="token punctuation">.</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token property-literal property">value</span><span class="token punctuation">:</span> v<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br><br><span class="token keyword">def</span> <span class="token function">numbers</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token c-style-function function">map</span><span class="token punctuation">(</span><span class="token c-style-function function">select</span><span class="token punctuation">(</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator pipe">|</span>tonumber<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br><span class="token keyword">def</span> <span class="token function">average</span><span class="token punctuation">:</span> <span class="token punctuation">(</span>add <span class="token operator">/</span> length<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator pipe">|</span> floor <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">;</span><br><br><span class="token c-style-function function">map</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token property-literal property">category</span><span class="token punctuation">:</span> <span class="token punctuation">.</span>beer_type<span class="token operator pipe">|</span>category<span class="token punctuation">,</span> rating_score <span class="token punctuation">}</span><span class="token punctuation">)</span><br><span class="token operator pipe">|</span> <span class="token c-style-function function">arrange</span><span class="token punctuation">(</span><span class="token string">"category"</span><span class="token punctuation">;</span> <span class="token c-style-function function">map</span><span class="token punctuation">(</span><span class="token punctuation">.</span>rating_score<span class="token punctuation">)</span><span class="token punctuation">)</span><br><br><span class="token comment"># Temporary selection of Winter Warmer ratings</span><br><span class="token operator pipe">|</span> <span class="token c-style-function function">map</span><span class="token punctuation">(</span><span class="token c-style-function function">select</span><span class="token punctuation">(</span><span class="token punctuation">.</span>key <span class="token operator">==</span> <span class="token string">"Winter Warmer"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator pipe">|</span>first<span class="token operator pipe">|</span><span class="token punctuation">.</span>value<br><span class="token operator pipe">|</span> numbers<br><span class="token operator pipe">|</span> average</code></pre>
<p>I added some numeric fettling to the <code>average</code> function to ensure I'd end up with an average rating with a single decimal place.</p>
<p>So, what does this temporary extension now produce?</p>
<pre class="language-json"><code class="language-json"><span class="token number">3.8</span></code></pre>
<p>Lovely!</p>
<p>I can now remove that extension and inject the two functions to the expression I'm sending in the second parameter for the call to <code>arrange</code>, like this:</p>
<pre class="language-jq"><code class="language-jq"><span class="token keyword">def</span> <span class="token function">category</span><span class="token punctuation">:</span> <span class="token c-style-function function">split</span><span class="token punctuation">(</span><span class="token string">" -"</span><span class="token punctuation">)</span> <span class="token operator pipe">|</span> first<span class="token punctuation">;</span><br><br><span class="token keyword">def</span> <span class="token function">arrange</span><span class="token punctuation">(</span>k<span class="token punctuation">;</span>v<span class="token punctuation">)</span><span class="token punctuation">:</span> <br>  <span class="token c-style-function function">group_by</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><br>  <span class="token operator pipe">|</span> <span class="token c-style-function function">map</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token property-literal property">key</span><span class="token punctuation">:</span> <span class="token punctuation">(</span>first<span class="token operator pipe">|</span><span class="token punctuation">.</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token property-literal property">value</span><span class="token punctuation">:</span> v<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br><br><span class="token keyword">def</span> <span class="token function">numbers</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token c-style-function function">map</span><span class="token punctuation">(</span><span class="token c-style-function function">select</span><span class="token punctuation">(</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator pipe">|</span>tonumber<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br><span class="token keyword">def</span> <span class="token function">average</span><span class="token punctuation">:</span> <span class="token punctuation">(</span>add <span class="token operator">/</span> length<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator pipe">|</span> floor <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">;</span><br><br><span class="token c-style-function function">map</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token property-literal property">category</span><span class="token punctuation">:</span> <span class="token punctuation">.</span>beer_type<span class="token operator pipe">|</span>category<span class="token punctuation">,</span> rating_score <span class="token punctuation">}</span><span class="token punctuation">)</span><br><span class="token operator pipe">|</span> <span class="token c-style-function function">arrange</span><span class="token punctuation">(</span><span class="token string">"category"</span><span class="token punctuation">;</span> <span class="token c-style-function function">map</span><span class="token punctuation">(</span><span class="token punctuation">.</span>rating_score<span class="token punctuation">)</span><span class="token operator pipe">|</span>numbers<span class="token operator pipe">|</span>average<span class="token punctuation">)</span></code></pre>
<p>This produces what I was hoping for, a nice list of objects, one per category, with that category's average rating. Here's the first and last couple in that list (for brevity):</p>
<pre class="language-json"><code class="language-json"><span class="token punctuation">[</span><br>  <span class="token punctuation">{</span><br>    <span class="token property">"key"</span><span class="token operator">:</span> <span class="token string">"Altbier"</span><span class="token punctuation">,</span><br>    <span class="token property">"value"</span><span class="token operator">:</span> <span class="token number">3.5</span><br>  <span class="token punctuation">}</span><span class="token punctuation">,</span><br>  <span class="token punctuation">{</span><br>    <span class="token property">"key"</span><span class="token operator">:</span> <span class="token string">"Barleywine"</span><span class="token punctuation">,</span><br>    <span class="token property">"value"</span><span class="token operator">:</span> <span class="token number">4.4</span><br>  <span class="token punctuation">}</span><span class="token punctuation">,</span><br>  <span class="token punctuation">{</span><br>    <span class="token property">"key"</span><span class="token operator">:</span> <span class="token string">"Belgian Blonde"</span><span class="token punctuation">,</span><br>    <span class="token property">"value"</span><span class="token operator">:</span> <span class="token number">3.7</span><br>  <span class="token punctuation">}</span><span class="token punctuation">,</span><br>  <span class="token punctuation">{</span><br>    <span class="token property">"key"</span><span class="token operator">:</span> <span class="token string">"Belgian Dubbel"</span><span class="token punctuation">,</span><br>    <span class="token property">"value"</span><span class="token operator">:</span> <span class="token number">3.9</span><br>  <span class="token punctuation">}</span><br><span class="token punctuation">]</span></code></pre>
<h2>Neatening up the results, and a main function</h2>
<p>The nice thing about this sort of data structure is that it lends itself to further processing. In this case, I want to sort the categories by rating, in descending order.</p>
<p>I can achieve this with a call to <code>sort_by</code>, and then a call to <code>reverse</code> to swap the order.</p>
<p>While I'm at it, I'll also adopt a common programming approach of putting the main logic control in a <code>main</code> function and then calling that at the bottom of the script. It reminds me a lot of the Python style:</p>
<pre class="language-python"><code class="language-python"><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span><br>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre>
<p>So, here goes:</p>
<pre class="language-jq"><code class="language-jq"><span class="token keyword">def</span> <span class="token function">category</span><span class="token punctuation">:</span> <span class="token c-style-function function">split</span><span class="token punctuation">(</span><span class="token string">" -"</span><span class="token punctuation">)</span> <span class="token operator pipe">|</span> first<span class="token punctuation">;</span><br><br><span class="token keyword">def</span> <span class="token function">arrange</span><span class="token punctuation">(</span>k<span class="token punctuation">;</span>v<span class="token punctuation">)</span><span class="token punctuation">:</span> <br>  <span class="token c-style-function function">group_by</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><br>  <span class="token operator pipe">|</span> <span class="token c-style-function function">map</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token property-literal property">key</span><span class="token punctuation">:</span> <span class="token punctuation">(</span>first<span class="token operator pipe">|</span><span class="token punctuation">.</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token property-literal property">value</span><span class="token punctuation">:</span> v<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br><br><span class="token keyword">def</span> <span class="token function">numbers</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token c-style-function function">map</span><span class="token punctuation">(</span><span class="token c-style-function function">select</span><span class="token punctuation">(</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator pipe">|</span>tonumber<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br><span class="token keyword">def</span> <span class="token function">average</span><span class="token punctuation">:</span> <span class="token punctuation">(</span>add <span class="token operator">/</span> length<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator pipe">|</span> floor <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">;</span><br><br><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">:</span><br>  <span class="token c-style-function function">map</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token property-literal property">category</span><span class="token punctuation">:</span> <span class="token punctuation">.</span>beer_type<span class="token operator pipe">|</span>category<span class="token punctuation">,</span> rating_score <span class="token punctuation">}</span><span class="token punctuation">)</span><br>  <span class="token operator pipe">|</span> <span class="token c-style-function function">arrange</span><span class="token punctuation">(</span><span class="token string">"category"</span><span class="token punctuation">;</span> <span class="token c-style-function function">map</span><span class="token punctuation">(</span><span class="token punctuation">.</span>rating_score<span class="token punctuation">)</span><span class="token operator pipe">|</span>numbers<span class="token operator pipe">|</span>average<span class="token punctuation">)</span><br>  <span class="token operator pipe">|</span> <span class="token c-style-function function">sort_by</span><span class="token punctuation">(</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><br>  <span class="token operator pipe">|</span> reverse<span class="token punctuation">;</span><br><br>main</code></pre>
<p>This produces an array of categories, ordered by their average rating. Here are the first and last two in that list:</p>
<pre class="language-json"><code class="language-json"><span class="token punctuation">[</span><br>  <span class="token punctuation">{</span><br>    <span class="token property">"key"</span><span class="token operator">:</span> <span class="token string">"Rauchbier"</span><span class="token punctuation">,</span><br>    <span class="token property">"value"</span><span class="token operator">:</span> <span class="token number">5</span><br>  <span class="token punctuation">}</span><span class="token punctuation">,</span><br>  <span class="token punctuation">{</span><br>    <span class="token property">"key"</span><span class="token operator">:</span> <span class="token string">"Freeze-Distilled Beer"</span><span class="token punctuation">,</span><br>    <span class="token property">"value"</span><span class="token operator">:</span> <span class="token number">5</span><br>  <span class="token punctuation">}</span><span class="token punctuation">,</span><br>  <span class="token punctuation">{</span><br>    <span class="token property">"key"</span><span class="token operator">:</span> <span class="token string">"Märzen"</span><span class="token punctuation">,</span><br>    <span class="token property">"value"</span><span class="token operator">:</span> <span class="token number">2.9</span><br>  <span class="token punctuation">}</span><span class="token punctuation">,</span><br>  <span class="token punctuation">{</span><br>    <span class="token property">"key"</span><span class="token operator">:</span> <span class="token string">"Pilsner"</span><span class="token punctuation">,</span><br>    <span class="token property">"value"</span><span class="token operator">:</span> <span class="token number">2.7</span><br>  <span class="token punctuation">}</span><br><span class="token punctuation">]</span></code></pre>
<p>That's nice, but I will go one stage further and take advantage of the <code>key/value</code> pattern, using <code>from_entries</code> to condense that:</p>
<pre class="language-jq"><code class="language-jq"><span class="token keyword">def</span> <span class="token function">category</span><span class="token punctuation">:</span> <span class="token c-style-function function">split</span><span class="token punctuation">(</span><span class="token string">" -"</span><span class="token punctuation">)</span> <span class="token operator pipe">|</span> first<span class="token punctuation">;</span><br><br><span class="token keyword">def</span> <span class="token function">arrange</span><span class="token punctuation">(</span>k<span class="token punctuation">;</span>v<span class="token punctuation">)</span><span class="token punctuation">:</span> <br>  <span class="token c-style-function function">group_by</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><br>  <span class="token operator pipe">|</span> <span class="token c-style-function function">map</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token property-literal property">key</span><span class="token punctuation">:</span> <span class="token punctuation">(</span>first<span class="token operator pipe">|</span><span class="token punctuation">.</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token property-literal property">value</span><span class="token punctuation">:</span> v<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br><br><span class="token keyword">def</span> <span class="token function">numbers</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token c-style-function function">map</span><span class="token punctuation">(</span><span class="token c-style-function function">select</span><span class="token punctuation">(</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator pipe">|</span>tonumber<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br><span class="token keyword">def</span> <span class="token function">average</span><span class="token punctuation">:</span> <span class="token punctuation">(</span>add <span class="token operator">/</span> length<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator pipe">|</span> floor <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">;</span><br><br><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">:</span><br>  <span class="token c-style-function function">map</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token property-literal property">category</span><span class="token punctuation">:</span> <span class="token punctuation">.</span>beer_type<span class="token operator pipe">|</span>category<span class="token punctuation">,</span> rating_score <span class="token punctuation">}</span><span class="token punctuation">)</span><br>  <span class="token operator pipe">|</span> <span class="token c-style-function function">arrange</span><span class="token punctuation">(</span><span class="token string">"category"</span><span class="token punctuation">;</span> <span class="token c-style-function function">map</span><span class="token punctuation">(</span><span class="token punctuation">.</span>rating_score<span class="token punctuation">)</span><span class="token operator pipe">|</span>numbers<span class="token operator pipe">|</span>average<span class="token punctuation">)</span><br>  <span class="token operator pipe">|</span> <span class="token c-style-function function">sort_by</span><span class="token punctuation">(</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><br>  <span class="token operator pipe">|</span> reverse<br>  <span class="token operator pipe">|</span> from_entries<span class="token punctuation">;</span><br><br>main</code></pre>
<p>This produces a neat list, like this:</p>
<pre class="language-json"><code class="language-json"><span class="token punctuation">{</span><br>  <span class="token property">"Rauchbier"</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span><br>  <span class="token property">"Freeze-Distilled Beer"</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span><br>  <span class="token property">"Chilli / Chile Beer"</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span><br>  <span class="token property">"Black &amp; Tan"</span><span class="token operator">:</span> <span class="token number">4.5</span><span class="token punctuation">,</span><br>  <span class="token property">"Belgian Quadrupel"</span><span class="token operator">:</span> <span class="token number">4.5</span><span class="token punctuation">,</span><br>  <span class="token property">"Barleywine"</span><span class="token operator">:</span> <span class="token number">4.4</span><span class="token punctuation">,</span><br>  <span class="token property">"Wild Ale"</span><span class="token operator">:</span> <span class="token number">4.3</span><span class="token punctuation">,</span><br>  <span class="token property">"Specialty Grain"</span><span class="token operator">:</span> <span class="token number">4.3</span><span class="token punctuation">,</span><br>  <span class="token property">"Old Ale"</span><span class="token operator">:</span> <span class="token number">4.3</span><span class="token punctuation">,</span><br>  <span class="token property">"Bière de Champagne / Bière Brut"</span><span class="token operator">:</span> <span class="token number">4.3</span><span class="token punctuation">,</span><br>  <span class="token property">"Strong Ale"</span><span class="token operator">:</span> <span class="token number">4.2</span><span class="token punctuation">,</span><br>  <span class="token property">"Sour"</span><span class="token operator">:</span> <span class="token number">4.2</span><span class="token punctuation">,</span><br>  <span class="token property">"Stout"</span><span class="token operator">:</span> <span class="token number">4.1</span><span class="token punctuation">,</span><br>  <span class="token property">"Rye Wine"</span><span class="token operator">:</span> <span class="token number">4.1</span><span class="token punctuation">,</span><br>  <span class="token property">"IPA"</span><span class="token operator">:</span> <span class="token number">4.1</span><span class="token punctuation">,</span><br>  <span class="token property">"Belgian Tripel"</span><span class="token operator">:</span> <span class="token number">4.1</span><span class="token punctuation">,</span><br>  <span class="token property">"Winter Ale"</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span><br>  <span class="token property">"Smoked Beer"</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span><br>  <span class="token property">"Scotch Ale / Wee Heavy"</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span><br>  <span class="token property">"Red Ale"</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span><br>  <span class="token property">"Lambic"</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span><br>  <span class="token property">"Historical Beer"</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span><br>  <span class="token property">"Grape Ale"</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span><br>  <span class="token property">"Brown Ale"</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span><br>  <span class="token property">"Brett Beer"</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span><br>  <span class="token property">"Belgian Strong Dark Ale"</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span><br>  <span class="token property">"Traditional Ale"</span><span class="token operator">:</span> <span class="token number">3.9</span><span class="token punctuation">,</span><br>  <span class="token property">"Rye Beer"</span><span class="token operator">:</span> <span class="token number">3.9</span><span class="token punctuation">,</span><br>  <span class="token property">"Porter"</span><span class="token operator">:</span> <span class="token number">3.9</span><span class="token punctuation">,</span><br>  <span class="token property">"Pale Ale"</span><span class="token operator">:</span> <span class="token number">3.9</span><span class="token punctuation">,</span><br>  <span class="token property">"Mild"</span><span class="token operator">:</span> <span class="token number">3.9</span><span class="token punctuation">,</span><br>  <span class="token property">"Farmhouse Ale"</span><span class="token operator">:</span> <span class="token number">3.9</span><span class="token punctuation">,</span><br>  <span class="token property">"California Common"</span><span class="token operator">:</span> <span class="token number">3.9</span><span class="token punctuation">,</span><br>  <span class="token property">"Belgian Dubbel"</span><span class="token operator">:</span> <span class="token number">3.9</span><span class="token punctuation">,</span><br>  <span class="token property">"Winter Warmer"</span><span class="token operator">:</span> <span class="token number">3.8</span><span class="token punctuation">,</span><br>  <span class="token property">"Spiced / Herbed Beer"</span><span class="token operator">:</span> <span class="token number">3.8</span><span class="token punctuation">,</span><br>  <span class="token property">"Schwarzbier"</span><span class="token operator">:</span> <span class="token number">3.8</span><span class="token punctuation">,</span><br>  <span class="token property">"Belgian Strong Golden Ale"</span><span class="token operator">:</span> <span class="token number">3.8</span><span class="token punctuation">,</span><br>  <span class="token property">"Gluten-Free"</span><span class="token operator">:</span> <span class="token number">3.7</span><span class="token punctuation">,</span><br>  <span class="token property">"Fruit Beer"</span><span class="token operator">:</span> <span class="token number">3.7</span><span class="token punctuation">,</span><br>  <span class="token property">"Bock"</span><span class="token operator">:</span> <span class="token number">3.7</span><span class="token punctuation">,</span><br>  <span class="token property">"Bitter"</span><span class="token operator">:</span> <span class="token number">3.7</span><span class="token punctuation">,</span><br>  <span class="token property">"Belgian Blonde"</span><span class="token operator">:</span> <span class="token number">3.7</span><span class="token punctuation">,</span><br>  <span class="token property">"Scottish Export Ale"</span><span class="token operator">:</span> <span class="token number">3.6</span><span class="token punctuation">,</span><br>  <span class="token property">"Roggenbier"</span><span class="token operator">:</span> <span class="token number">3.6</span><span class="token punctuation">,</span><br>  <span class="token property">"Dark Ale"</span><span class="token operator">:</span> <span class="token number">3.6</span><span class="token punctuation">,</span><br>  <span class="token property">"Wheat Beer"</span><span class="token operator">:</span> <span class="token number">3.5</span><span class="token punctuation">,</span><br>  <span class="token property">"Table Beer"</span><span class="token operator">:</span> <span class="token number">3.5</span><span class="token punctuation">,</span><br>  <span class="token property">"Mead"</span><span class="token operator">:</span> <span class="token number">3.5</span><span class="token punctuation">,</span><br>  <span class="token property">"Kellerbier / Zwickelbier"</span><span class="token operator">:</span> <span class="token number">3.5</span><span class="token punctuation">,</span><br>  <span class="token property">"Honey Beer"</span><span class="token operator">:</span> <span class="token number">3.5</span><span class="token punctuation">,</span><br>  <span class="token property">"Cream Ale"</span><span class="token operator">:</span> <span class="token number">3.5</span><span class="token punctuation">,</span><br>  <span class="token property">"Cider"</span><span class="token operator">:</span> <span class="token number">3.5</span><span class="token punctuation">,</span><br>  <span class="token property">"Altbier"</span><span class="token operator">:</span> <span class="token number">3.5</span><span class="token punctuation">,</span><br>  <span class="token property">"Blonde Ale"</span><span class="token operator">:</span> <span class="token number">3.4</span><span class="token punctuation">,</span><br>  <span class="token property">"Scottish Ale"</span><span class="token operator">:</span> <span class="token number">3.3</span><span class="token punctuation">,</span><br>  <span class="token property">"Kölsch"</span><span class="token operator">:</span> <span class="token number">3.3</span><span class="token punctuation">,</span><br>  <span class="token property">"Golden Ale"</span><span class="token operator">:</span> <span class="token number">3.3</span><span class="token punctuation">,</span><br>  <span class="token property">"Lager"</span><span class="token operator">:</span> <span class="token number">3.1</span><span class="token punctuation">,</span><br>  <span class="token property">"Shandy / Radler"</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span><br>  <span class="token property">"Märzen"</span><span class="token operator">:</span> <span class="token number">2.9</span><span class="token punctuation">,</span><br>  <span class="token property">"Pilsner"</span><span class="token operator">:</span> <span class="token number">2.7</span><br><span class="token punctuation">}</span></code></pre>
<p>That's very satisfying!</p>
<h2>What's next</h2>
<p>Well I think I'm there, basically. But something bothers me. I know my favourite style is more towards the India Pale Ale (IPA) variety, but ranking well above that style (both IPAs and Imperial IPAs) are some rarer categories, such as Rauchbier and Freeze-Distilled Beer. Why is that? That's what I'll investigate in part 4.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>More Untappd data explorations with jq - my top ranking beer types (part 2)</title>
      <link href="https://qmacro.org/blog/posts/2022/10/31/more-untappd-data-explorations-with-jq-my-top-ranking-beer-types-(part-2)/"/>
      <updated>2022-10-31T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2022/10/31/more-untappd-data-explorations-with-jq-my-top-ranking-beer-types-(part-2)/</id>
      <content type="html">
        <![CDATA[
      <p>This is a continuation of <a href="/blog/posts/2022/10/30/more-untappd-data-explorations-with-jq-my-top-ranking-beer-types-(part-1)/">part 1</a> which you should read first.</p>
<p><a href="https://untappd.com/user/qmacro/checkin/1204944451"><img src="/images/2022/10/orval-2005-checkin.png" alt="A checkin of an incredible 2005 vintage bottle of Orval"></a></p>
<p>Part 1 finished with a count and list of categories of beer (IPA, Bock, Belgian Tripel, etc), produced from some <code>jq</code> in <code>untappd.jq</code> that looks like this:</p>
<pre class="language-jq"><code class="language-jq"><span class="token keyword">def</span> <span class="token function">category</span><span class="token punctuation">:</span> <span class="token c-style-function function">split</span><span class="token punctuation">(</span><span class="token string">" -"</span><span class="token punctuation">)</span> <span class="token operator pipe">|</span> first<span class="token punctuation">;</span><br><br><span class="token c-style-function function">map</span><span class="token punctuation">(</span><span class="token punctuation">.</span>beer_type<span class="token operator pipe">|</span>category<span class="token punctuation">)</span> <span class="token operator pipe">|</span> unique <span class="token operator pipe">|</span> length<span class="token punctuation">,</span> <span class="token dot important">.</span></code></pre>
<p>The output looks like this (reduced here):</p>
<pre class="language-json"><code class="language-json"><span class="token number">62</span><br><span class="token punctuation">[</span><br>  <span class="token string">"Altbier"</span><span class="token punctuation">,</span><br>  <span class="token string">"Barleywine"</span><span class="token punctuation">,</span><br>  <span class="token string">"Belgian Blonde"</span><span class="token punctuation">,</span><br>  <span class="token string">"..."</span><span class="token punctuation">,</span><br>  <span class="token string">"Winter Ale"</span><span class="token punctuation">,</span><br>  <span class="token string">"Winter Warmer"</span><br><span class="token punctuation">]</span></code></pre>
<h2>Picking out the data</h2>
<p>So now it's time to pick out the data I need for the analysis, and that is, for each checkin, the beer's category, and my rating. I'll start by just mapping the array of checkin objects to an array of smaller objects just containing these two things:</p>
<pre class="language-jq"><code class="language-jq"><span class="token keyword">def</span> <span class="token function">category</span><span class="token punctuation">:</span> <span class="token c-style-function function">split</span><span class="token punctuation">(</span><span class="token string">" -"</span><span class="token punctuation">)</span> <span class="token operator pipe">|</span> first<span class="token punctuation">;</span><br><br><span class="token c-style-function function">map</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token property-literal property">category</span><span class="token punctuation">:</span> <span class="token punctuation">.</span>beer_type<span class="token operator pipe">|</span>category<span class="token punctuation">,</span> rating_score <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>
<blockquote>
<p>When using the <a href="https://stedolan.github.io/jq/manual/#ObjectConstruction:%7B%7D">object construction</a> mechanism, I can just specify the name of an existing property, in this case <code>rating_score</code>, which is shorthand for <code>&quot;rating_score&quot;: .rating_score</code>.</p>
</blockquote>
<p>This produces an array of pairs of values which parallel the simple chronological list of checkins (output reduced for brevity):</p>
<pre class="language-json"><code class="language-json"><span class="token punctuation">[</span><br>  <span class="token punctuation">{</span><br>    <span class="token property">"category"</span><span class="token operator">:</span> <span class="token string">"Brown Ale"</span><span class="token punctuation">,</span><br>    <span class="token property">"rating_score"</span><span class="token operator">:</span> <span class="token string">"5"</span><br>  <span class="token punctuation">}</span><span class="token punctuation">,</span><br>  <span class="token punctuation">{</span><br>    <span class="token property">"category"</span><span class="token operator">:</span> <span class="token string">"Pale Ale"</span><span class="token punctuation">,</span><br>    <span class="token property">"rating_score"</span><span class="token operator">:</span> <span class="token string">"5"</span><br>  <span class="token punctuation">}</span><span class="token punctuation">,</span><br>  <span class="token punctuation">{</span><br>    <span class="token property">"category"</span><span class="token operator">:</span> <span class="token string">"Bitter"</span><span class="token punctuation">,</span><br>    <span class="token property">"rating_score"</span><span class="token operator">:</span> <span class="token string">"3"</span><br>  <span class="token punctuation">}</span><span class="token punctuation">,</span><br>  <span class="token punctuation">{</span><br>    <span class="token property">"category"</span><span class="token operator">:</span> <span class="token string">"Bitter"</span><span class="token punctuation">,</span><br>    <span class="token property">"rating_score"</span><span class="token operator">:</span> <span class="token string">""</span><br>  <span class="token punctuation">}</span><span class="token punctuation">,</span><br>  <span class="token punctuation">{</span><br>    <span class="token property">"category"</span><span class="token operator">:</span> <span class="token string">"Belgian Tripel"</span><span class="token punctuation">,</span><br>    <span class="token property">"rating_score"</span><span class="token operator">:</span> <span class="token string">"4.7"</span><br>  <span class="token punctuation">}</span><span class="token punctuation">,</span><br>  <span class="token punctuation">{</span><br>    <span class="token property">"category"</span><span class="token operator">:</span> <span class="token string">"..."</span><span class="token punctuation">,</span><br>    <span class="token property">"rating_score"</span><span class="token operator">:</span> <span class="token string">"..."</span><br>  <span class="token punctuation">}</span><br><span class="token punctuation">]</span></code></pre>
<blockquote>
<p>Notice the checkin to a Bitter where I had not specified a rating. While we're at it, notice that the ratings are all strings, even though the values are numeric. We'll deal with those two aspects, but not just yet.</p>
</blockquote>
<h2>Arranging by category</h2>
<p>In order to be able to have a chance of calculating the average rating per category, I need first to group the data by category. So that's next:</p>
<pre class="language-jq"><code class="language-jq"><span class="token keyword">def</span> <span class="token function">category</span><span class="token punctuation">:</span> <span class="token c-style-function function">split</span><span class="token punctuation">(</span><span class="token string">" -"</span><span class="token punctuation">)</span> <span class="token operator pipe">|</span> first<span class="token punctuation">;</span><br><br><span class="token c-style-function function">map</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token property-literal property">category</span><span class="token punctuation">:</span> <span class="token punctuation">.</span>beer_type<span class="token operator pipe">|</span>category<span class="token punctuation">,</span> rating_score <span class="token punctuation">}</span><span class="token punctuation">)</span><br><span class="token operator pipe">|</span> <span class="token c-style-function function">group_by</span><span class="token punctuation">(</span><span class="token punctuation">.</span>category<span class="token punctuation">)</span></code></pre>
<p>Here's what that produces (again, massively reduced for brevity):</p>
<pre class="language-json"><code class="language-json"><span class="token punctuation">[</span><br>  <span class="token punctuation">[</span><br>    <span class="token punctuation">{</span><br>      <span class="token property">"category"</span><span class="token operator">:</span> <span class="token string">"Altbier"</span><span class="token punctuation">,</span><br>      <span class="token property">"rating_score"</span><span class="token operator">:</span> <span class="token string">"4"</span><br>    <span class="token punctuation">}</span><span class="token punctuation">,</span><br>    <span class="token punctuation">{</span><br>      <span class="token property">"category"</span><span class="token operator">:</span> <span class="token string">"Altbier"</span><span class="token punctuation">,</span><br>      <span class="token property">"rating_score"</span><span class="token operator">:</span> <span class="token string">"3"</span><br>    <span class="token punctuation">}</span><span class="token punctuation">,</span><br>    <span class="token punctuation">{</span><br>      <span class="token property">"category"</span><span class="token operator">:</span> <span class="token string">"Altbier"</span><span class="token punctuation">,</span><br>      <span class="token property">"rating_score"</span><span class="token operator">:</span> <span class="token string">"3.75"</span><br>    <span class="token punctuation">}</span><br>  <span class="token punctuation">]</span><span class="token punctuation">,</span><br>  <span class="token punctuation">[</span><br>    <span class="token punctuation">{</span><br>      <span class="token property">"category"</span><span class="token operator">:</span> <span class="token string">"Barleywine"</span><span class="token punctuation">,</span><br>      <span class="token property">"rating_score"</span><span class="token operator">:</span> <span class="token string">"4"</span><br>    <span class="token punctuation">}</span><span class="token punctuation">,</span><br>  <span class="token punctuation">[</span><br>    <span class="token punctuation">{</span><br>      <span class="token property">"category"</span><span class="token operator">:</span> <span class="token string">"Belgian Quadrupel"</span><span class="token punctuation">,</span><br>      <span class="token property">"rating_score"</span><span class="token operator">:</span> <span class="token string">"4.9"</span><br>    <span class="token punctuation">}</span><span class="token punctuation">,</span><br>    <span class="token punctuation">{</span><br>      <span class="token property">"category"</span><span class="token operator">:</span> <span class="token string">"Belgian Quadrupel"</span><span class="token punctuation">,</span><br>      <span class="token property">"rating_score"</span><span class="token operator">:</span> <span class="token string">"5"</span><br>    <span class="token punctuation">}</span><br>  <span class="token punctuation">]</span><br><span class="token punctuation">]</span></code></pre>
<h2>Rolling up by category</h2>
<p>This seems familiar. In the &quot;Arranging by brewery country and count&quot; section of <a href="/blog/posts/2022/10/28/untappd-data-with-jq-my-top-brewery-countries/">Untappd data with jq - my top brewery countries</a> I had a similar requirement, and following the call to <code>group_by</code> I mapped over each subarray creating small objects consisting of a <code>key</code> property having the value of the subarray's first entry's <code>brewery_country</code> and a <code>value</code> property having the length of the subarray. This is the code I had:</p>
<pre class="language-bash"><code class="language-bash"><span class="token operator">&lt;</span> checkins.json jq <span class="token string">'<br>.[-20:]<br>| map({beer_name, brewery_name, brewery_country})<br>| group_by(.brewery_country)<br>| map({key: first.brewery_country, value: length})<br>'</span></code></pre>
<p>I'm at a similar position here now too. I have a number of subarrays, each one representing a beer category, and containing one object per checkin. I want to turn those subarrays into something that makes more sense from an average rating per category point of view. And to get there would need something very similar to this <code>group_by ... map</code> approach. Let's have a look:</p>
<pre class="language-jq"><code class="language-jq"><span class="token keyword">def</span> <span class="token function">category</span><span class="token punctuation">:</span> <span class="token c-style-function function">split</span><span class="token punctuation">(</span><span class="token string">" -"</span><span class="token punctuation">)</span> <span class="token operator pipe">|</span> first<span class="token punctuation">;</span><br><br><span class="token c-style-function function">map</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token property-literal property">category</span><span class="token punctuation">:</span> <span class="token punctuation">.</span>beer_type<span class="token operator pipe">|</span>category<span class="token punctuation">,</span> rating_score <span class="token punctuation">}</span><span class="token punctuation">)</span><br><span class="token operator pipe">|</span> <span class="token c-style-function function">group_by</span><span class="token punctuation">(</span><span class="token punctuation">.</span>category<span class="token punctuation">)</span><br><span class="token operator pipe">|</span> <span class="token c-style-function function">map</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token property-literal property">key</span><span class="token punctuation">:</span> first<span class="token punctuation">.</span>category<span class="token punctuation">,</span> <span class="token property-literal property">value</span><span class="token punctuation">:</span> <span class="token c-style-function function">map</span><span class="token punctuation">(</span><span class="token punctuation">.</span>rating_score<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>
<p>This creates the following type of output:</p>
<pre class="language-jq"><code class="language-jq"><span class="token punctuation">[</span><br>  <span class="token punctuation">{</span><br>    <span class="token property">"key"</span><span class="token punctuation">:</span> <span class="token string">"Altbier"</span><span class="token punctuation">,</span><br>    <span class="token property">"value"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><br>      <span class="token string">"4"</span><span class="token punctuation">,</span><br>      <span class="token string">"3"</span><span class="token punctuation">,</span><br>      <span class="token string">"3.75"</span><span class="token punctuation">,</span><br>      <span class="token string">"3.5"</span><span class="token punctuation">,</span><br>      <span class="token string">"3.25"</span><br>    <span class="token punctuation">]</span><br>  <span class="token punctuation">}</span><span class="token punctuation">,</span><br>  <span class="token punctuation">{</span><br>    <span class="token property">"key"</span><span class="token punctuation">:</span> <span class="token string">"..."</span><span class="token punctuation">,</span><br>    <span class="token property">"value"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><br>      <span class="token string">"..."</span><span class="token punctuation">,</span><br>      <span class="token string">"..."</span><br>    <span class="token punctuation">]</span><br>  <span class="token punctuation">}</span><span class="token punctuation">,</span><br>  <span class="token punctuation">{</span><br>    <span class="token property">"key"</span><span class="token punctuation">:</span> <span class="token string">"Winter Warmer"</span><span class="token punctuation">,</span><br>    <span class="token property">"value"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><br>      <span class="token string">""</span><span class="token punctuation">,</span><br>      <span class="token string">""</span><span class="token punctuation">,</span><br>      <span class="token string">"4"</span><span class="token punctuation">,</span><br>      <span class="token string">"4"</span><span class="token punctuation">,</span><br>      <span class="token string">"4"</span><span class="token punctuation">,</span><br>      <span class="token string">"3.5"</span><span class="token punctuation">,</span><br>      <span class="token string">"4"</span><span class="token punctuation">,</span><br>      <span class="token string">"4.25"</span><span class="token punctuation">,</span><br>      <span class="token string">"3.25"</span><span class="token punctuation">,</span><br>      <span class="token string">"4.25"</span><span class="token punctuation">,</span><br>      <span class="token string">"3.75"</span><span class="token punctuation">,</span><br>      <span class="token string">"3.4"</span><br>    <span class="token punctuation">]</span><br>  <span class="token punctuation">}</span><br><span class="token punctuation">]</span></code></pre>
<h2>Encapsulating the roll-up into a function</h2>
<p>OK, getting there! But before we move on it feels right to encapsulate this pattern into a function. I'll do that now:</p>
<pre class="language-jq"><code class="language-jq"><span class="token keyword">def</span> <span class="token function">category</span><span class="token punctuation">:</span> <span class="token c-style-function function">split</span><span class="token punctuation">(</span><span class="token string">" -"</span><span class="token punctuation">)</span> <span class="token operator pipe">|</span> first<span class="token punctuation">;</span><br><br><span class="token keyword">def</span> <span class="token function">arrange</span><span class="token punctuation">(</span>k<span class="token punctuation">;</span>v<span class="token punctuation">)</span><span class="token punctuation">:</span> <br>  <span class="token c-style-function function">group_by</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><br>  <span class="token operator pipe">|</span> <span class="token c-style-function function">map</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token property-literal property">key</span><span class="token punctuation">:</span> <span class="token punctuation">(</span>first<span class="token operator pipe">|</span><span class="token punctuation">.</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token property-literal property">value</span><span class="token punctuation">:</span> v<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br><br><span class="token c-style-function function">map</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token property-literal property">category</span><span class="token punctuation">:</span> <span class="token punctuation">.</span>beer_type<span class="token operator pipe">|</span>category<span class="token punctuation">,</span> rating_score <span class="token punctuation">}</span><span class="token punctuation">)</span><br><span class="token operator pipe">|</span> <span class="token c-style-function function">arrange</span><span class="token punctuation">(</span><span class="token string">"category"</span><span class="token punctuation">;</span> <span class="token c-style-function function">map</span><span class="token punctuation">(</span><span class="token punctuation">.</span>rating_score<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>
<p>This new function <code>arrange</code> (naming things is hard) performs the <code>group_by ... map</code>. It takes two parameters (in <code>jq</code> parlance it would be written as <code>arrange/2</code>):</p>
<ul>
<li><code>k</code> is what the grouping property should be</li>
<li><code>v</code> is what the value of the <code>value</code> property should be in the resulting objects</li>
</ul>
<blockquote>
<p>To use an indirect value (whatever is in <code>k</code>) like this in a property reference, we have to use this syntax: <code>.[k]</code> rather than <code>.k</code> of course).</p>
</blockquote>
<p>So in the call to <code>arrange</code>, the first parameter I'm passing is the string <code>&quot;category&quot;</code>, which is the name of the property by which I want the objects to be grouped, and also which is the name of the property that I use to get the value for the <code>key</code> (<code>first|.[k]</code>) in each object I'm producing in the call to <code>map</code>.</p>
<p>And the second parameter I'm passing is the expression <code>map(.rating_score)</code> which when evaluated produces an array of values from the <code>rating_score</code> property in each checkin.</p>
<h2>What's next</h2>
<p>Well, that seems like a good place to end this part. In part 3 I'll deal with those pesky null rating values, and also with the fact that all the ratings are strings rather than numbers. And then calculate an average.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Stop asking for slides in advance</title>
      <link href="https://qmacro.org/blog/posts/2022/10/31/stop-asking-for-slides-in-advance/"/>
      <updated>2022-10-31T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2022/10/31/stop-asking-for-slides-in-advance/</id>
      <content type="html">
        <![CDATA[
      <p>I'm giving a talk next month and was asked by the organiser to send my slides to them no later than two weeks before the event. Further to my <a href="https://twitter.com/qmacro/status/1587102735794638854">tweet on the subject</a>, I decided to write a quick post to explain why this is such an anti-pattern.</p>
<p>I'm not a great fan of slides, but am not against them either. I use them sometimes, and on the occasions when I do, each slide will be simple, perhaps with a picture or diagram, or with a few key words.</p>
<p><img src="/images/2022/10/learn-share-grow.jpeg" alt="A slide from one of my talks at SAP Inside Track Oslo in 2019"></p>
<p>Sometimes, only when absolutely necessary, some slides will have more detail on them.</p>
<p>A slide deck is not the talk content. A slide deck is there to aid the talk, to enhance it, to provide a bit of context (or light relief) for those attending. They're there to support what's being said, to underpin the message.</p>
<p>That's why, sometimes, I don't use slides at all. I just show stuff on my computer, fumble around and wave my arms about wildly. Anything to get the point across, to help explain what I'm trying to say, to be more effective in landing the concepts that I'm attempting to convey.</p>
<p>I often am modifying (I was going to say &quot;improving&quot; but that is up for debate) the content of my talk right up to the day, the hour of when I'm going to give it. It's all about being as up to date as possible, and maintaining the balance between spontaneity and the solid core of a story. Naturally, I'll adjust any supporting slides as I make such modifications.</p>
<p>So asking for slides in advance is entirely inappropriate. It feels like being asked to submit a speech in written form, verbatim and immutable.</p>
<p>It's an anti-pattern. In these days of, you know, the Internet and the Web, it's not even necessary. We all have the wherewithall to host content and point to it. The technologies required have existed since the early 1990s, at least.
In other words, stop trying to gather slide decks as if they still existed on transparent foils that were presented on overhead projectors and then photocopied and distributed via mail after the event.</p>
<p><img src="/images/2022/10/ohp.jpg" alt="An overhead projector and screen">
<em>Picture courtesy of Wikimedia Commons</em></p>
<p>This anti-pattern reminds me of another pre-Web process still extant in today's age of <a href="https://sarielhp.org/misc/intercon.html">the fundamental interconnectedness of all things</a>. I wrote about this, the depressing sight of the requirement to upload one's CV (résumé) to a server on LinkedIn.</p>
<p><img src="/images/2022/10/upload.png" alt="The upload form on LinkedIn"></p>
<p>To make matters worse, the only filetypes allowed are Word and PDF. Seriously? (See <a href="https://blogs.sap.com/2018/11/19/monday-morning-thoughts-rethinking-like-the-web/">Monday morning thoughts: rethinking like the web</a> for more details on this).</p>
<p>Anyway, this is 2022. I wish event organisers would notice that and stop asking for slides in advance. Why do they do it? I suspect it's because it's just how they've always done it, and have not been told otherwise, and haven't really thought about what a poor process it is with respect to their speakers. So perhaps this blog post will help.</p>
<p>And in the same way that the Word and PDF filetype restriction makes a bad situation even worse in the LinkedIn CV upload anti-pattern, asking your speakers to use a specific PowerPoint template is making a big assumption and also turning a bad situation worse. What if your speaker doesn't have or use PowerPoint? Do you have a template for another slides tool? What about Apple's Keynote? Google Slides? And I know this is niche, but what about terminal-based slide presentation software? It's <a href="https://github.com/qmacro/btp-resources-with-cli-tools-and-apis#slides-material">what I use</a> these days. Are you going to provide your branding on templates for all these tools?</p>
<p>So, dear event organisers, I exhort you. Please stop asking for slides in advance, treat your speakers like grown-ups and respect their content creation process. Thank you.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>More Untappd data explorations with jq - my top ranking beer types (part 1)</title>
      <link href="https://qmacro.org/blog/posts/2022/10/30/more-untappd-data-explorations-with-jq-my-top-ranking-beer-types-(part-1)/"/>
      <updated>2022-10-30T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2022/10/30/more-untappd-data-explorations-with-jq-my-top-ranking-beer-types-(part-1)/</id>
      <content type="html">
        <![CDATA[
      <p>I've been exploring my Untappd data a bit more since <a href="/blog/posts/2022/10/28/untappd-data-with-jq-my-top-brewery-countries/">analysing my top brewery countries</a>, this time to see if my average ratings indicated anything about my preferred beer types. Here's what I've done so far, in part 1 of this little series.</p>
<p><a href="https://untappd.com/user/qmacro/checkin/658678850"><img src="/images/2022/10/dogfishhead-checkin.png" alt="a 5 star rating to a checkin of Dogfishhead's 90 Minute Imperial IPA"></a></p>
<p>Near the start of the previous post <a href="https://qmacro.org/blog/posts/2022/10/28/untappd-data-with-jq-my-top-brewery-countries/">Untappd data with jq - my top brewery countries</a> there's an example of a checkin object; here are some of the properties:</p>
<pre class="language-json"><code class="language-json"><span class="token punctuation">{</span><br>  <span class="token property">"beer_name"</span><span class="token operator">:</span> <span class="token string">"Leffe Brune / Bruin"</span><span class="token punctuation">,</span><br>  <span class="token property">"brewery_name"</span><span class="token operator">:</span> <span class="token string">"Abbaye de Leffe"</span><span class="token punctuation">,</span><br>  <span class="token property">"beer_type"</span><span class="token operator">:</span> <span class="token string">"Brown Ale - Belgian"</span><span class="token punctuation">,</span><br>  <span class="token property">"rating_score"</span><span class="token operator">:</span> <span class="token string">"5"</span><br><span class="token punctuation">}</span></code></pre>
<h2>What are the beer types?</h2>
<p>I wanted to know how (if at all) my rating was affected by my particular preferences on beer types. I started looking at what types existed in my checkin data. First, how many are we talking about here?</p>
<pre class="language-bash"><code class="language-bash"><span class="token operator">&lt;</span> checkins.json jq <span class="token string">'<br>map(.beer_type) | unique | length<br>'</span></code></pre>
<p>Wow, there are quite a few:</p>
<pre class="language-json"><code class="language-json"><span class="token number">177</span></code></pre>
<p>Let's have a look at the first 20:</p>
<pre class="language-bash"><code class="language-bash"><span class="token operator">&lt;</span> checkins.json jq <span class="token string">'<br>map(.beer_type) | unique[:20]<br>'</span></code></pre>
<blockquote>
<p>The <a href="https://stedolan.github.io/jq/manual/#unique,unique_by(path_exp)">unique</a> function produces a sorted list as well as removing duplicates.</p>
</blockquote>
<pre class="language-json"><code class="language-json"><span class="token punctuation">[</span><br>  <span class="token string">"Altbier"</span><span class="token punctuation">,</span><br>  <span class="token string">"Barleywine - American"</span><span class="token punctuation">,</span><br>  <span class="token string">"Barleywine - English"</span><span class="token punctuation">,</span><br>  <span class="token string">"Barleywine - Other"</span><span class="token punctuation">,</span><br>  <span class="token string">"Belgian Blonde"</span><span class="token punctuation">,</span><br>  <span class="token string">"Belgian Dubbel"</span><span class="token punctuation">,</span><br>  <span class="token string">"Belgian Quadrupel"</span><span class="token punctuation">,</span><br>  <span class="token string">"Belgian Strong Dark Ale"</span><span class="token punctuation">,</span><br>  <span class="token string">"Belgian Strong Golden Ale"</span><span class="token punctuation">,</span><br>  <span class="token string">"Belgian Tripel"</span><span class="token punctuation">,</span><br>  <span class="token string">"Bitter - Best"</span><span class="token punctuation">,</span><br>  <span class="token string">"Bitter - Extra Special / Strong (ESB)"</span><span class="token punctuation">,</span><br>  <span class="token string">"Bitter - Session / Ordinary"</span><span class="token punctuation">,</span><br>  <span class="token string">"Bière de Champagne / Bière Brut"</span><span class="token punctuation">,</span><br>  <span class="token string">"Black &amp; Tan"</span><span class="token punctuation">,</span><br>  <span class="token string">"Blonde Ale"</span><span class="token punctuation">,</span><br>  <span class="token string">"Bock - Doppelbock"</span><span class="token punctuation">,</span><br>  <span class="token string">"Bock - Eisbock"</span><span class="token punctuation">,</span><br>  <span class="token string">"Bock - Hell / Maibock / Lentebock"</span><span class="token punctuation">,</span><br>  <span class="token string">"Bock - Single / Traditional"</span><br><span class="token punctuation">]</span></code></pre>
<p>OK so there are quite a few.</p>
<h2>Reducing the number of types</h2>
<p>I might be able to be a little less granular if I just take whatever comes before the dash, if there is one. That would, for example, group together all the Bock types, and, for another example, all the IPAs, of which there are quite a few:</p>
<pre class="language-bash"><code class="language-bash"><span class="token operator">&lt;</span> checkins.json jq <span class="token string">'<br>map(.beer_type|select(startswith("IPA -"))) | unique<br>'</span></code></pre>
<p>As you can see:</p>
<pre class="language-json"><code class="language-json"><span class="token punctuation">[</span><br>  <span class="token string">"IPA - American"</span><span class="token punctuation">,</span><br>  <span class="token string">"IPA - Belgian"</span><span class="token punctuation">,</span><br>  <span class="token string">"IPA - Black / Cascadian Dark Ale"</span><span class="token punctuation">,</span><br>  <span class="token string">"IPA - Brett"</span><span class="token punctuation">,</span><br>  <span class="token string">"IPA - Brut"</span><span class="token punctuation">,</span><br>  <span class="token string">"IPA - Cold"</span><span class="token punctuation">,</span><br>  <span class="token string">"IPA - English"</span><span class="token punctuation">,</span><br>  <span class="token string">"IPA - Farmhouse"</span><span class="token punctuation">,</span><br>  <span class="token string">"IPA - Imperial / Double"</span><span class="token punctuation">,</span><br>  <span class="token string">"IPA - Imperial / Double Black"</span><span class="token punctuation">,</span><br>  <span class="token string">"IPA - Imperial / Double Milkshake"</span><span class="token punctuation">,</span><br>  <span class="token string">"IPA - Imperial / Double New England / Hazy"</span><span class="token punctuation">,</span><br>  <span class="token string">"IPA - Milkshake"</span><span class="token punctuation">,</span><br>  <span class="token string">"IPA - New England / Hazy"</span><span class="token punctuation">,</span><br>  <span class="token string">"IPA - New Zealand"</span><span class="token punctuation">,</span><br>  <span class="token string">"IPA - Other"</span><span class="token punctuation">,</span><br>  <span class="token string">"IPA - Red"</span><span class="token punctuation">,</span><br>  <span class="token string">"IPA - Rye"</span><span class="token punctuation">,</span><br>  <span class="token string">"IPA - Session"</span><span class="token punctuation">,</span><br>  <span class="token string">"IPA - Sour"</span><span class="token punctuation">,</span><br>  <span class="token string">"IPA - Triple"</span><span class="token punctuation">,</span><br>  <span class="token string">"IPA - Triple New England / Hazy"</span><span class="token punctuation">,</span><br>  <span class="token string">"IPA - White / Wheat"</span><br><span class="token punctuation">]</span></code></pre>
<p>So if I call the part before any dash the &quot;major&quot; type, how many of those are there? Hopefully fewer than 177. Let's work it out:</p>
<pre class="language-bash"><code class="language-bash"><span class="token operator">&lt;</span> checkins.json jq <span class="token string">'<br>map(.beer_type|split(" -")|first) | unique | length, .<br>'</span></code></pre>
<blockquote>
<p>Hold on though, what if a <code>beer_type</code> value doesn't have a dash? What will calling <code>split(&quot; -&quot;)</code> do here? Let's see:</p>
<pre class="language-bash"><code class="language-bash">jq <span class="token parameter variable">-n</span> <span class="token string">'<br>["Major - minor", "Some other type"] | map(split(" -")|first)<br>'</span></code></pre>
<p>(The <code>-n</code> option tells <code>jq</code> to use <code>null</code> as the single input value, effectively telling <code>jq</code> not to expect any JSON to be fed in).</p>
<p>This gives:</p>
<pre class="language-json"><code class="language-json"><span class="token punctuation">[</span><br>  <span class="token string">"Major"</span><span class="token punctuation">,</span><br>  <span class="token string">"Some other type"</span><br><span class="token punctuation">]</span></code></pre>
<p>This is what we want to happen.</p>
</blockquote>
<p>OK, let's run the filter, which gives:</p>
<pre class="language-json"><code class="language-json"><span class="token number">62</span><br><span class="token punctuation">[</span><br>  <span class="token string">"Altbier"</span><span class="token punctuation">,</span><br>  <span class="token string">"Barleywine"</span><span class="token punctuation">,</span><br>  <span class="token string">"Belgian Blonde"</span><span class="token punctuation">,</span><br>  <span class="token string">"Belgian Dubbel"</span><span class="token punctuation">,</span><br>  <span class="token string">"Belgian Quadrupel"</span><span class="token punctuation">,</span><br>  <span class="token string">"Belgian Strong Dark Ale"</span><span class="token punctuation">,</span><br>  <span class="token string">"Belgian Strong Golden Ale"</span><span class="token punctuation">,</span><br>  <span class="token string">"Belgian Tripel"</span><span class="token punctuation">,</span><br>  <span class="token string">"Bitter"</span><span class="token punctuation">,</span><br>  <span class="token string">"Bière de Champagne / Bière Brut"</span><span class="token punctuation">,</span><br>  <span class="token string">"Black &amp; Tan"</span><span class="token punctuation">,</span><br>  <span class="token string">"Blonde Ale"</span><span class="token punctuation">,</span><br>  <span class="token string">"Bock"</span><span class="token punctuation">,</span><br>  <span class="token string">"Brett Beer"</span><span class="token punctuation">,</span><br>  <span class="token string">"Brown Ale"</span><span class="token punctuation">,</span><br>  <span class="token string">"California Common"</span><span class="token punctuation">,</span><br>  <span class="token string">"Chilli / Chile Beer"</span><span class="token punctuation">,</span><br>  <span class="token string">"Cider"</span><span class="token punctuation">,</span><br>  <span class="token string">"Cream Ale"</span><span class="token punctuation">,</span><br>  <span class="token string">"Dark Ale"</span><span class="token punctuation">,</span><br>  <span class="token string">"Farmhouse Ale"</span><span class="token punctuation">,</span><br>  <span class="token string">"Freeze-Distilled Beer"</span><span class="token punctuation">,</span><br>  <span class="token string">"Fruit Beer"</span><span class="token punctuation">,</span><br>  <span class="token string">"Gluten-Free"</span><span class="token punctuation">,</span><br>  <span class="token string">"Golden Ale"</span><span class="token punctuation">,</span><br>  <span class="token string">"Grape Ale"</span><span class="token punctuation">,</span><br>  <span class="token string">"Historical Beer"</span><span class="token punctuation">,</span><br>  <span class="token string">"Honey Beer"</span><span class="token punctuation">,</span><br>  <span class="token string">"IPA"</span><span class="token punctuation">,</span><br>  <span class="token string">"Kellerbier / Zwickelbier"</span><span class="token punctuation">,</span><br>  <span class="token string">"Kölsch"</span><span class="token punctuation">,</span><br>  <span class="token string">"Lager"</span><span class="token punctuation">,</span><br>  <span class="token string">"Lambic"</span><span class="token punctuation">,</span><br>  <span class="token string">"Mead"</span><span class="token punctuation">,</span><br>  <span class="token string">"Mild"</span><span class="token punctuation">,</span><br>  <span class="token string">"Märzen"</span><span class="token punctuation">,</span><br>  <span class="token string">"Old Ale"</span><span class="token punctuation">,</span><br>  <span class="token string">"Pale Ale"</span><span class="token punctuation">,</span><br>  <span class="token string">"Pilsner"</span><span class="token punctuation">,</span><br>  <span class="token string">"Porter"</span><span class="token punctuation">,</span><br>  <span class="token string">"Rauchbier"</span><span class="token punctuation">,</span><br>  <span class="token string">"Red Ale"</span><span class="token punctuation">,</span><br>  <span class="token string">"Roggenbier"</span><span class="token punctuation">,</span><br>  <span class="token string">"Rye Beer"</span><span class="token punctuation">,</span><br>  <span class="token string">"Rye Wine"</span><span class="token punctuation">,</span><br>  <span class="token string">"Schwarzbier"</span><span class="token punctuation">,</span><br>  <span class="token string">"Scotch Ale / Wee Heavy"</span><span class="token punctuation">,</span><br>  <span class="token string">"Scottish Ale"</span><span class="token punctuation">,</span><br>  <span class="token string">"Scottish Export Ale"</span><span class="token punctuation">,</span><br>  <span class="token string">"Shandy / Radler"</span><span class="token punctuation">,</span><br>  <span class="token string">"Smoked Beer"</span><span class="token punctuation">,</span><br>  <span class="token string">"Sour"</span><span class="token punctuation">,</span><br>  <span class="token string">"Specialty Grain"</span><span class="token punctuation">,</span><br>  <span class="token string">"Spiced / Herbed Beer"</span><span class="token punctuation">,</span><br>  <span class="token string">"Stout"</span><span class="token punctuation">,</span><br>  <span class="token string">"Strong Ale"</span><span class="token punctuation">,</span><br>  <span class="token string">"Table Beer"</span><span class="token punctuation">,</span><br>  <span class="token string">"Traditional Ale"</span><span class="token punctuation">,</span><br>  <span class="token string">"Wheat Beer"</span><span class="token punctuation">,</span><br>  <span class="token string">"Wild Ale"</span><span class="token punctuation">,</span><br>  <span class="token string">"Winter Ale"</span><span class="token punctuation">,</span><br>  <span class="token string">"Winter Warmer"</span><br><span class="token punctuation">]</span></code></pre>
<blockquote>
<p>Note there are two JSON values - a scalar (62) and an array. I wanted the count, as well as all the names of the major types, and that's what was produced, as you can see, from <code>length</code> and <code>.</code> respectively. The interesting thing to note is that in the last part of the filter, <em>both</em> <code>length</code> and <code>.</code> were passed the output from the preceding expression (the output from <code>unique</code>); there was no need for any variable binding or explicit value passing.</p>
</blockquote>
<h2>Encoding a function</h2>
<p>That &quot;major type&quot; thing is something I'll likely use again, so it's worth considering creating a function for it.</p>
<blockquote>
<p>From now on, I'll stop showing the entire command line invocation (passing the file contents to <code>jq</code>, and specifying the filter in single quotes, also on the command line) and show just the <code>jq</code> expressions instead. That's mostly because I can then get it formatted a little nicer in these posts (with a bit of colour that's sensitive to <code>jq</code>'s syntax). I'll create a file <code>untappd.jq</code> to hold the <code>jq</code> expressions, so you just need to imagine that the invocations now look like this:</p>
<pre class="language-bash"><code class="language-bash"><span class="token operator">&lt;</span> checkins.json jq <span class="token parameter variable">-f</span> untappd.jq </code></pre>
</blockquote>
<p>The function is very simple and just encapsulates what we've done already, which is then replaced with a call to that function:</p>
<pre class="language-jq"><code class="language-jq"><span class="token keyword">def</span> <span class="token function">category</span><span class="token punctuation">:</span> <span class="token c-style-function function">split</span><span class="token punctuation">(</span><span class="token string">" -"</span><span class="token punctuation">)</span> <span class="token operator pipe">|</span> first<span class="token punctuation">;</span><br><br><span class="token c-style-function function">map</span><span class="token punctuation">(</span><span class="token punctuation">.</span>beer_type<span class="token operator pipe">|</span>category<span class="token punctuation">)</span> <span class="token operator pipe">|</span> unique <span class="token operator pipe">|</span> length<span class="token punctuation">,</span> <span class="token dot important">.</span></code></pre>
<p>I wasn't fond of the name &quot;major_type&quot; for the function, so I've come up with the name &quot;category&quot; instead.</p>
<h2>What's next</h2>
<p>That's the end of part 1. It looks like I have a manageable set of major beer types (categories) to use as a basis for this analysis. I've also got the feeling that the <code>jq</code> that I'll end up writing might be more than a few lines' worth, so I'm glad I've made the switch away from a &quot;one-liner&quot; to a file based filter.</p>
<p>In <a href="/blog/posts/2022/10/31/more-untappd-data-explorations-with-jq-my-top-ranking-beer-types-(part-2)/">part 2</a> I look at collecting my ratings across all the checkins, ready for averaging them by category.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Untappd data with jq - my top brewery countries</title>
      <link href="https://qmacro.org/blog/posts/2022/10/28/untappd-data-with-jq-my-top-brewery-countries/"/>
      <updated>2022-10-28T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2022/10/28/untappd-data-with-jq-my-top-brewery-countries/</id>
      <content type="html">
        <![CDATA[
      <p>In this short post I explore my Untappd checkin data with <code>jq</code>, because it's a nice data set to practise my limited filtering fu upon, and also to get my blogging flowing again.</p>
<p><img src="/images/2022/10/untappd-profile.png" alt="My profile on Untappd"></p>
<p>I'm an <a href="https://untappd.com/user/qmacro">Untappd supporter</a> and an early adopter, joining in early November 12 years ago in 2010. Recently Untappd <a href="https://twitter.com/untappd/status/1584908973135859717">celebrated 12 years of operation and 10 million users</a>. It got me thinking back to my <a href="https://untappd.com/user/qmacro/checkin/11215/">very first checkin</a> (it was a Leffe Brune, in case you're wondering) and then I remembered that as an Untappd supporter I could get access to my entire checkin history, in JSON.</p>
<h2>The Untappd checkin data</h2>
<p>The JSON data is quite simple - it's a single file (I've called it <code>checkins.json</code>) containing an array of checkin objects, where each object looks like this:</p>
<pre class="language-json"><code class="language-json"><span class="token punctuation">{</span><br>  <span class="token property">"beer_name"</span><span class="token operator">:</span> <span class="token string">"Leffe Brune / Bruin"</span><span class="token punctuation">,</span><br>  <span class="token property">"brewery_name"</span><span class="token operator">:</span> <span class="token string">"Abbaye de Leffe"</span><span class="token punctuation">,</span><br>  <span class="token property">"beer_type"</span><span class="token operator">:</span> <span class="token string">"Brown Ale - Belgian"</span><span class="token punctuation">,</span><br>  <span class="token property">"beer_abv"</span><span class="token operator">:</span> <span class="token string">"6.5"</span><span class="token punctuation">,</span><br>  <span class="token property">"beer_ibu"</span><span class="token operator">:</span> <span class="token string">"20"</span><span class="token punctuation">,</span><br>  <span class="token property">"comment"</span><span class="token operator">:</span> <span class="token string">"Christening Untappd with this, a fav of mine."</span><span class="token punctuation">,</span><br>  <span class="token property">"venue_name"</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span><br>  <span class="token property">"venue_city"</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span><br>  <span class="token property">"venue_state"</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span><br>  <span class="token property">"venue_country"</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span><br>  <span class="token property">"venue_lat"</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span><br>  <span class="token property">"venue_lng"</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span><br>  <span class="token property">"rating_score"</span><span class="token operator">:</span> <span class="token string">"5"</span><span class="token punctuation">,</span><br>  <span class="token property">"created_at"</span><span class="token operator">:</span> <span class="token string">"2010-11-08 18:52:02"</span><span class="token punctuation">,</span><br>  <span class="token property">"checkin_url"</span><span class="token operator">:</span> <span class="token string">"https://untappd.com/c/11215"</span><span class="token punctuation">,</span><br>  <span class="token property">"beer_url"</span><span class="token operator">:</span> <span class="token string">"https://untappd.com/beer/5941"</span><span class="token punctuation">,</span><br>  <span class="token property">"brewery_url"</span><span class="token operator">:</span> <span class="token string">"https://untappd.com/brewery/5"</span><span class="token punctuation">,</span><br>  <span class="token property">"brewery_country"</span><span class="token operator">:</span> <span class="token string">"Belgium"</span><span class="token punctuation">,</span><br>  <span class="token property">"brewery_city"</span><span class="token operator">:</span> <span class="token string">"Leuven"</span><span class="token punctuation">,</span><br>  <span class="token property">"brewery_state"</span><span class="token operator">:</span> <span class="token string">"Vlaanderen"</span><span class="token punctuation">,</span><br>  <span class="token property">"flavor_profiles"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span><br>  <span class="token property">"purchase_venue"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span><br>  <span class="token property">"serving_type"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span><br>  <span class="token property">"checkin_id"</span><span class="token operator">:</span> <span class="token string">"11215"</span><span class="token punctuation">,</span><br>  <span class="token property">"bid"</span><span class="token operator">:</span> <span class="token string">"5941"</span><span class="token punctuation">,</span><br>  <span class="token property">"brewery_id"</span><span class="token operator">:</span> <span class="token string">"5"</span><span class="token punctuation">,</span><br>  <span class="token property">"photo_url"</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span><br>  <span class="token property">"global_rating_score"</span><span class="token operator">:</span> <span class="token number">3.55</span><span class="token punctuation">,</span><br>  <span class="token property">"global_weighted_rating_score"</span><span class="token operator">:</span> <span class="token number">3.55</span><span class="token punctuation">,</span><br>  <span class="token property">"tagged_friends"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span><br>  <span class="token property">"total_toasts"</span><span class="token operator">:</span> <span class="token string">"1"</span><span class="token punctuation">,</span><br>  <span class="token property">"total_comments"</span><span class="token operator">:</span> <span class="token string">"0"</span><br><span class="token punctuation">}</span></code></pre>
<p>(OK, I put my <code>rating_score</code> of 5 down to excitement at a new beer rating app).</p>
<h2>My top brewery countries</h2>
<p>Noting that my first checkin was to a beer from Belgium (see the value for the <code>brewery_country</code> property) I thought it would be a nice exercise to discover the top brewery countries for the beers I've checked in.</p>
<h3>Reducing the data set</h3>
<p>To keep the data compact for this blog post, I decided to analyse just the latest 20 checkins, rather than the entire <a href="https://untappd.com/user/qmacro">four thousand plus</a>. And for the purposes of experimentation and illustration, I only really need to see the beer name, brewery name and brewery country.</p>
<p>So I start my analysis like this:</p>
<pre class="language-bash"><code class="language-bash"><span class="token operator">&lt;</span> checkins.json jq <span class="token string">'<br>.[-20:]<br>| map({beer_name, brewery_name, brewery_country})<br>'</span></code></pre>
<blockquote>
<p>Note the use of a negative index on the <a href="https://stedolan.github.io/jq/manual/#Array/StringSlice:.%5B10:15%5D">array slice</a> here - which causes the slice to start from counting backwards from the end of the array. Note also that I'm invoking <code>jq</code> and passing in the data in a slightly different way than I have done before (such as in <a href="/blog/posts/2022/06/16/summing-and-grouping-values-with-jq/">Summing and grouping values with jq</a>). Instead of specifying a filename (<code>jq filter filename</code>) I'm using redirection to pass the contents of the <code>filename</code> to <code>jq</code>'s STDIN: <code>&lt; filename jq filter</code>.</p>
</blockquote>
<p>This gives us a much smaller data set to think about, but which has enough variation to have the analysis also make sense:</p>
<pre class="language-json"><code class="language-json"><span class="token punctuation">[</span><br>  <span class="token punctuation">{</span><br>    <span class="token property">"beer_name"</span><span class="token operator">:</span> <span class="token string">"Kentucky Breakfast Stout (KBS)"</span><span class="token punctuation">,</span><br>    <span class="token property">"brewery_name"</span><span class="token operator">:</span> <span class="token string">"Founders Brewing Co."</span><span class="token punctuation">,</span><br>    <span class="token property">"brewery_country"</span><span class="token operator">:</span> <span class="token string">"United States"</span><br>  <span class="token punctuation">}</span><span class="token punctuation">,</span><br>  <span class="token punctuation">{</span><br>    <span class="token property">"beer_name"</span><span class="token operator">:</span> <span class="token string">"Gueuze Tilquin – Draft Version"</span><span class="token punctuation">,</span><br>    <span class="token property">"brewery_name"</span><span class="token operator">:</span> <span class="token string">"Gueuzerie Tilquin"</span><span class="token punctuation">,</span><br>    <span class="token property">"brewery_country"</span><span class="token operator">:</span> <span class="token string">"Belgium"</span><br>  <span class="token punctuation">}</span><span class="token punctuation">,</span><br>  <span class="token punctuation">{</span><br>    <span class="token property">"beer_name"</span><span class="token operator">:</span> <span class="token string">"Zwanze 2022 - Poivre De Gorilles"</span><span class="token punctuation">,</span><br>    <span class="token property">"brewery_name"</span><span class="token operator">:</span> <span class="token string">"Brasserie Cantillon"</span><span class="token punctuation">,</span><br>    <span class="token property">"brewery_country"</span><span class="token operator">:</span> <span class="token string">"Belgium"</span><br>  <span class="token punctuation">}</span><span class="token punctuation">,</span><br>  <span class="token punctuation">{</span><br>    <span class="token property">"beer_name"</span><span class="token operator">:</span> <span class="token string">"Moeder Imperiale"</span><span class="token punctuation">,</span><br>    <span class="token property">"brewery_name"</span><span class="token operator">:</span> <span class="token string">"La Source Beer Co."</span><span class="token punctuation">,</span><br>    <span class="token property">"brewery_country"</span><span class="token operator">:</span> <span class="token string">"Belgium"</span><br>  <span class="token punctuation">}</span><span class="token punctuation">,</span><br>  <span class="token punctuation">{</span><br>    <span class="token property">"beer_name"</span><span class="token operator">:</span> <span class="token string">"Supersonic"</span><span class="token punctuation">,</span><br>    <span class="token property">"brewery_name"</span><span class="token operator">:</span> <span class="token string">"LERVIG"</span><span class="token punctuation">,</span><br>    <span class="token property">"brewery_country"</span><span class="token operator">:</span> <span class="token string">"Norway"</span><br>  <span class="token punctuation">}</span><span class="token punctuation">,</span><br>  <span class="token punctuation">{</span><br>    <span class="token property">"beer_name"</span><span class="token operator">:</span> <span class="token string">"Illuminati"</span><span class="token punctuation">,</span><br>    <span class="token property">"brewery_name"</span><span class="token operator">:</span> <span class="token string">"Leelanau Brewing Company"</span><span class="token punctuation">,</span><br>    <span class="token property">"brewery_country"</span><span class="token operator">:</span> <span class="token string">"United States"</span><br>  <span class="token punctuation">}</span><span class="token punctuation">,</span><br>  <span class="token punctuation">{</span><br>    <span class="token property">"beer_name"</span><span class="token operator">:</span> <span class="token string">"Out of Vogue"</span><span class="token punctuation">,</span><br>    <span class="token property">"brewery_name"</span><span class="token operator">:</span> <span class="token string">"Burning Sky Brewery"</span><span class="token punctuation">,</span><br>    <span class="token property">"brewery_country"</span><span class="token operator">:</span> <span class="token string">"England"</span><br>  <span class="token punctuation">}</span><span class="token punctuation">,</span><br>  <span class="token punctuation">{</span><br>    <span class="token property">"beer_name"</span><span class="token operator">:</span> <span class="token string">"SDIPA Strata"</span><span class="token punctuation">,</span><br>    <span class="token property">"brewery_name"</span><span class="token operator">:</span> <span class="token string">"Vault City Brewing"</span><span class="token punctuation">,</span><br>    <span class="token property">"brewery_country"</span><span class="token operator">:</span> <span class="token string">"Scotland"</span><br>  <span class="token punctuation">}</span><span class="token punctuation">,</span><br>  <span class="token punctuation">{</span><br>    <span class="token property">"beer_name"</span><span class="token operator">:</span> <span class="token string">"Petrus Dubbel"</span><span class="token punctuation">,</span><br>    <span class="token property">"brewery_name"</span><span class="token operator">:</span> <span class="token string">"Brouwerij De Brabandere"</span><span class="token punctuation">,</span><br>    <span class="token property">"brewery_country"</span><span class="token operator">:</span> <span class="token string">"Belgium"</span><br>  <span class="token punctuation">}</span><span class="token punctuation">,</span><br>  <span class="token punctuation">{</span><br>    <span class="token property">"beer_name"</span><span class="token operator">:</span> <span class="token string">"Outlaw"</span><span class="token punctuation">,</span><br>    <span class="token property">"brewery_name"</span><span class="token operator">:</span> <span class="token string">"Distant Hills"</span><span class="token punctuation">,</span><br>    <span class="token property">"brewery_country"</span><span class="token operator">:</span> <span class="token string">"England"</span><br>  <span class="token punctuation">}</span><span class="token punctuation">,</span><br>  <span class="token punctuation">{</span><br>    <span class="token property">"beer_name"</span><span class="token operator">:</span> <span class="token string">"North X Neon Raptor Imperial Stout + Cacao + Peanut + Banana"</span><span class="token punctuation">,</span><br>    <span class="token property">"brewery_name"</span><span class="token operator">:</span> <span class="token string">"North Brewing Co."</span><span class="token punctuation">,</span><br>    <span class="token property">"brewery_country"</span><span class="token operator">:</span> <span class="token string">"England"</span><br>  <span class="token punctuation">}</span><span class="token punctuation">,</span><br>  <span class="token punctuation">{</span><br>    <span class="token property">"beer_name"</span><span class="token operator">:</span> <span class="token string">"Sweet Temptation"</span><span class="token punctuation">,</span><br>    <span class="token property">"brewery_name"</span><span class="token operator">:</span> <span class="token string">"Vocation Brewery"</span><span class="token punctuation">,</span><br>    <span class="token property">"brewery_country"</span><span class="token operator">:</span> <span class="token string">"England"</span><br>  <span class="token punctuation">}</span><span class="token punctuation">,</span><br>  <span class="token punctuation">{</span><br>    <span class="token property">"beer_name"</span><span class="token operator">:</span> <span class="token string">"Turns"</span><span class="token punctuation">,</span><br>    <span class="token property">"brewery_name"</span><span class="token operator">:</span> <span class="token string">"Siren Craft Brew"</span><span class="token punctuation">,</span><br>    <span class="token property">"brewery_country"</span><span class="token operator">:</span> <span class="token string">"England"</span><br>  <span class="token punctuation">}</span><span class="token punctuation">,</span><br>  <span class="token punctuation">{</span><br>    <span class="token property">"beer_name"</span><span class="token operator">:</span> <span class="token string">"Abt 12"</span><span class="token punctuation">,</span><br>    <span class="token property">"brewery_name"</span><span class="token operator">:</span> <span class="token string">"Brouwerij St.Bernardus"</span><span class="token punctuation">,</span><br>    <span class="token property">"brewery_country"</span><span class="token operator">:</span> <span class="token string">"Belgium"</span><br>  <span class="token punctuation">}</span><span class="token punctuation">,</span><br>  <span class="token punctuation">{</span><br>    <span class="token property">"beer_name"</span><span class="token operator">:</span> <span class="token string">"Interference Is Temporary"</span><span class="token punctuation">,</span><br>    <span class="token property">"brewery_name"</span><span class="token operator">:</span> <span class="token string">"Cloudwater Brew Co."</span><span class="token punctuation">,</span><br>    <span class="token property">"brewery_country"</span><span class="token operator">:</span> <span class="token string">"England"</span><br>  <span class="token punctuation">}</span><span class="token punctuation">,</span><br>  <span class="token punctuation">{</span><br>    <span class="token property">"beer_name"</span><span class="token operator">:</span> <span class="token string">"Liquid Art"</span><span class="token punctuation">,</span><br>    <span class="token property">"brewery_name"</span><span class="token operator">:</span> <span class="token string">"Prizm Brewing Co."</span><span class="token punctuation">,</span><br>    <span class="token property">"brewery_country"</span><span class="token operator">:</span> <span class="token string">"France"</span><br>  <span class="token punctuation">}</span><span class="token punctuation">,</span><br>  <span class="token punctuation">{</span><br>    <span class="token property">"beer_name"</span><span class="token operator">:</span> <span class="token string">"Have You Got Cask Or Is It All Craft?"</span><span class="token punctuation">,</span><br>    <span class="token property">"brewery_name"</span><span class="token operator">:</span> <span class="token string">"DEYA Brewing Company"</span><span class="token punctuation">,</span><br>    <span class="token property">"brewery_country"</span><span class="token operator">:</span> <span class="token string">"England"</span><br>  <span class="token punctuation">}</span><span class="token punctuation">,</span><br>  <span class="token punctuation">{</span><br>    <span class="token property">"beer_name"</span><span class="token operator">:</span> <span class="token string">"DIVINE FAITH // DIPA (2022)"</span><span class="token punctuation">,</span><br>    <span class="token property">"brewery_name"</span><span class="token operator">:</span> <span class="token string">"Northern Monk"</span><span class="token punctuation">,</span><br>    <span class="token property">"brewery_country"</span><span class="token operator">:</span> <span class="token string">"England"</span><br>  <span class="token punctuation">}</span><span class="token punctuation">,</span><br>  <span class="token punctuation">{</span><br>    <span class="token property">"beer_name"</span><span class="token operator">:</span> <span class="token string">"Silver King"</span><span class="token punctuation">,</span><br>    <span class="token property">"brewery_name"</span><span class="token operator">:</span> <span class="token string">"Ossett Brewery"</span><span class="token punctuation">,</span><br>    <span class="token property">"brewery_country"</span><span class="token operator">:</span> <span class="token string">"England"</span><br>  <span class="token punctuation">}</span><span class="token punctuation">,</span><br>  <span class="token punctuation">{</span><br>    <span class="token property">"beer_name"</span><span class="token operator">:</span> <span class="token string">"HEATHEN // HAZY IPA"</span><span class="token punctuation">,</span><br>    <span class="token property">"brewery_name"</span><span class="token operator">:</span> <span class="token string">"Northern Monk"</span><span class="token punctuation">,</span><br>    <span class="token property">"brewery_country"</span><span class="token operator">:</span> <span class="token string">"England"</span><br>  <span class="token punctuation">}</span><br><span class="token punctuation">]</span></code></pre>
<h2>Grouping by brewery country</h2>
<p>Well the first thing I want to do is arrange the checkin objects by brewery country. Using <a href="https://stedolan.github.io/jq/manual/#group_by(path_expression)">group_by</a> produces a set of subarrays, like this:</p>
<pre class="language-bash"><code class="language-bash"><span class="token operator">&lt;</span> checkins.json jq <span class="token string">'<br>.[-20:]<br>| map({beer_name, brewery_name, brewery_country})<br>| group_by(.brewery_country)<br>'</span></code></pre>
<p>This results in a set of subarrays, one for each brewery country, as we'd expect. Note the new <code>[ [ ... ], [ ... ], ... ]</code> structure:</p>
<pre class="language-json"><code class="language-json"><span class="token punctuation">[</span><br>  <span class="token punctuation">[</span><br>    <span class="token punctuation">{</span><br>      <span class="token property">"beer_name"</span><span class="token operator">:</span> <span class="token string">"Gueuze Tilquin – Draft Version"</span><span class="token punctuation">,</span><br>      <span class="token property">"brewery_name"</span><span class="token operator">:</span> <span class="token string">"Gueuzerie Tilquin"</span><span class="token punctuation">,</span><br>      <span class="token property">"brewery_country"</span><span class="token operator">:</span> <span class="token string">"Belgium"</span><br>    <span class="token punctuation">}</span><span class="token punctuation">,</span><br>    <span class="token punctuation">{</span><br>      <span class="token property">"beer_name"</span><span class="token operator">:</span> <span class="token string">"Zwanze 2022 - Poivre De Gorilles"</span><span class="token punctuation">,</span><br>      <span class="token property">"brewery_name"</span><span class="token operator">:</span> <span class="token string">"Brasserie Cantillon"</span><span class="token punctuation">,</span><br>      <span class="token property">"brewery_country"</span><span class="token operator">:</span> <span class="token string">"Belgium"</span><br>    <span class="token punctuation">}</span><span class="token punctuation">,</span><br>    <span class="token punctuation">{</span><br>      <span class="token property">"beer_name"</span><span class="token operator">:</span> <span class="token string">"Moeder Imperiale"</span><span class="token punctuation">,</span><br>      <span class="token property">"brewery_name"</span><span class="token operator">:</span> <span class="token string">"La Source Beer Co."</span><span class="token punctuation">,</span><br>      <span class="token property">"brewery_country"</span><span class="token operator">:</span> <span class="token string">"Belgium"</span><br>    <span class="token punctuation">}</span><span class="token punctuation">,</span><br>    <span class="token punctuation">{</span><br>      <span class="token property">"beer_name"</span><span class="token operator">:</span> <span class="token string">"Petrus Dubbel"</span><span class="token punctuation">,</span><br>      <span class="token property">"brewery_name"</span><span class="token operator">:</span> <span class="token string">"Brouwerij De Brabandere"</span><span class="token punctuation">,</span><br>      <span class="token property">"brewery_country"</span><span class="token operator">:</span> <span class="token string">"Belgium"</span><br>    <span class="token punctuation">}</span><span class="token punctuation">,</span><br>    <span class="token punctuation">{</span><br>      <span class="token property">"beer_name"</span><span class="token operator">:</span> <span class="token string">"Abt 12"</span><span class="token punctuation">,</span><br>      <span class="token property">"brewery_name"</span><span class="token operator">:</span> <span class="token string">"Brouwerij St.Bernardus"</span><span class="token punctuation">,</span><br>      <span class="token property">"brewery_country"</span><span class="token operator">:</span> <span class="token string">"Belgium"</span><br>    <span class="token punctuation">}</span><br>  <span class="token punctuation">]</span><span class="token punctuation">,</span><br>  <span class="token punctuation">[</span><br>    <span class="token punctuation">{</span><br>      <span class="token property">"beer_name"</span><span class="token operator">:</span> <span class="token string">"Out of Vogue"</span><span class="token punctuation">,</span><br>      <span class="token property">"brewery_name"</span><span class="token operator">:</span> <span class="token string">"Burning Sky Brewery"</span><span class="token punctuation">,</span><br>      <span class="token property">"brewery_country"</span><span class="token operator">:</span> <span class="token string">"England"</span><br>    <span class="token punctuation">}</span><span class="token punctuation">,</span><br>    <span class="token punctuation">{</span><br>      <span class="token property">"beer_name"</span><span class="token operator">:</span> <span class="token string">"Outlaw"</span><span class="token punctuation">,</span><br>      <span class="token property">"brewery_name"</span><span class="token operator">:</span> <span class="token string">"Distant Hills"</span><span class="token punctuation">,</span><br>      <span class="token property">"brewery_country"</span><span class="token operator">:</span> <span class="token string">"England"</span><br>    <span class="token punctuation">}</span><span class="token punctuation">,</span><br>    <span class="token punctuation">{</span><br>      <span class="token property">"beer_name"</span><span class="token operator">:</span> <span class="token string">"North X Neon Raptor Imperial Stout + Cacao + Peanut + Banana"</span><span class="token punctuation">,</span><br>      <span class="token property">"brewery_name"</span><span class="token operator">:</span> <span class="token string">"North Brewing Co."</span><span class="token punctuation">,</span><br>      <span class="token property">"brewery_country"</span><span class="token operator">:</span> <span class="token string">"England"</span><br>    <span class="token punctuation">}</span><span class="token punctuation">,</span><br>    <span class="token punctuation">{</span><br>      <span class="token property">"beer_name"</span><span class="token operator">:</span> <span class="token string">"Sweet Temptation"</span><span class="token punctuation">,</span><br>      <span class="token property">"brewery_name"</span><span class="token operator">:</span> <span class="token string">"Vocation Brewery"</span><span class="token punctuation">,</span><br>      <span class="token property">"brewery_country"</span><span class="token operator">:</span> <span class="token string">"England"</span><br>    <span class="token punctuation">}</span><span class="token punctuation">,</span><br>    <span class="token punctuation">{</span><br>      <span class="token property">"beer_name"</span><span class="token operator">:</span> <span class="token string">"Turns"</span><span class="token punctuation">,</span><br>      <span class="token property">"brewery_name"</span><span class="token operator">:</span> <span class="token string">"Siren Craft Brew"</span><span class="token punctuation">,</span><br>      <span class="token property">"brewery_country"</span><span class="token operator">:</span> <span class="token string">"England"</span><br>    <span class="token punctuation">}</span><span class="token punctuation">,</span><br>    <span class="token punctuation">{</span><br>      <span class="token property">"beer_name"</span><span class="token operator">:</span> <span class="token string">"Interference Is Temporary"</span><span class="token punctuation">,</span><br>      <span class="token property">"brewery_name"</span><span class="token operator">:</span> <span class="token string">"Cloudwater Brew Co."</span><span class="token punctuation">,</span><br>      <span class="token property">"brewery_country"</span><span class="token operator">:</span> <span class="token string">"England"</span><br>    <span class="token punctuation">}</span><span class="token punctuation">,</span><br>    <span class="token punctuation">{</span><br>      <span class="token property">"beer_name"</span><span class="token operator">:</span> <span class="token string">"Have You Got Cask Or Is It All Craft?"</span><span class="token punctuation">,</span><br>      <span class="token property">"brewery_name"</span><span class="token operator">:</span> <span class="token string">"DEYA Brewing Company"</span><span class="token punctuation">,</span><br>      <span class="token property">"brewery_country"</span><span class="token operator">:</span> <span class="token string">"England"</span><br>    <span class="token punctuation">}</span><span class="token punctuation">,</span><br>    <span class="token punctuation">{</span><br>      <span class="token property">"beer_name"</span><span class="token operator">:</span> <span class="token string">"DIVINE FAITH // DIPA (2022)"</span><span class="token punctuation">,</span><br>      <span class="token property">"brewery_name"</span><span class="token operator">:</span> <span class="token string">"Northern Monk"</span><span class="token punctuation">,</span><br>      <span class="token property">"brewery_country"</span><span class="token operator">:</span> <span class="token string">"England"</span><br>    <span class="token punctuation">}</span><span class="token punctuation">,</span><br>    <span class="token punctuation">{</span><br>      <span class="token property">"beer_name"</span><span class="token operator">:</span> <span class="token string">"Silver King"</span><span class="token punctuation">,</span><br>      <span class="token property">"brewery_name"</span><span class="token operator">:</span> <span class="token string">"Ossett Brewery"</span><span class="token punctuation">,</span><br>      <span class="token property">"brewery_country"</span><span class="token operator">:</span> <span class="token string">"England"</span><br>    <span class="token punctuation">}</span><span class="token punctuation">,</span><br>    <span class="token punctuation">{</span><br>      <span class="token property">"beer_name"</span><span class="token operator">:</span> <span class="token string">"HEATHEN // HAZY IPA"</span><span class="token punctuation">,</span><br>      <span class="token property">"brewery_name"</span><span class="token operator">:</span> <span class="token string">"Northern Monk"</span><span class="token punctuation">,</span><br>      <span class="token property">"brewery_country"</span><span class="token operator">:</span> <span class="token string">"England"</span><br>    <span class="token punctuation">}</span><br>  <span class="token punctuation">]</span><span class="token punctuation">,</span><br>  <span class="token punctuation">[</span><br>    <span class="token punctuation">{</span><br>      <span class="token property">"beer_name"</span><span class="token operator">:</span> <span class="token string">"Liquid Art"</span><span class="token punctuation">,</span><br>      <span class="token property">"brewery_name"</span><span class="token operator">:</span> <span class="token string">"Prizm Brewing Co."</span><span class="token punctuation">,</span><br>      <span class="token property">"brewery_country"</span><span class="token operator">:</span> <span class="token string">"France"</span><br>    <span class="token punctuation">}</span><br>  <span class="token punctuation">]</span><span class="token punctuation">,</span><br>  <span class="token punctuation">[</span><br>    <span class="token punctuation">{</span><br>      <span class="token property">"beer_name"</span><span class="token operator">:</span> <span class="token string">"Supersonic"</span><span class="token punctuation">,</span><br>      <span class="token property">"brewery_name"</span><span class="token operator">:</span> <span class="token string">"LERVIG"</span><span class="token punctuation">,</span><br>      <span class="token property">"brewery_country"</span><span class="token operator">:</span> <span class="token string">"Norway"</span><br>    <span class="token punctuation">}</span><br>  <span class="token punctuation">]</span><span class="token punctuation">,</span><br>  <span class="token punctuation">[</span><br>    <span class="token punctuation">{</span><br>      <span class="token property">"beer_name"</span><span class="token operator">:</span> <span class="token string">"SDIPA Strata"</span><span class="token punctuation">,</span><br>      <span class="token property">"brewery_name"</span><span class="token operator">:</span> <span class="token string">"Vault City Brewing"</span><span class="token punctuation">,</span><br>      <span class="token property">"brewery_country"</span><span class="token operator">:</span> <span class="token string">"Scotland"</span><br>    <span class="token punctuation">}</span><br>  <span class="token punctuation">]</span><span class="token punctuation">,</span><br>  <span class="token punctuation">[</span><br>    <span class="token punctuation">{</span><br>      <span class="token property">"beer_name"</span><span class="token operator">:</span> <span class="token string">"Kentucky Breakfast Stout (KBS)"</span><span class="token punctuation">,</span><br>      <span class="token property">"brewery_name"</span><span class="token operator">:</span> <span class="token string">"Founders Brewing Co."</span><span class="token punctuation">,</span><br>      <span class="token property">"brewery_country"</span><span class="token operator">:</span> <span class="token string">"United States"</span><br>    <span class="token punctuation">}</span><span class="token punctuation">,</span><br>    <span class="token punctuation">{</span><br>      <span class="token property">"beer_name"</span><span class="token operator">:</span> <span class="token string">"Illuminati"</span><span class="token punctuation">,</span><br>      <span class="token property">"brewery_name"</span><span class="token operator">:</span> <span class="token string">"Leelanau Brewing Company"</span><span class="token punctuation">,</span><br>      <span class="token property">"brewery_country"</span><span class="token operator">:</span> <span class="token string">"United States"</span><br>    <span class="token punctuation">}</span><br>  <span class="token punctuation">]</span><br><span class="token punctuation">]</span></code></pre>
<h2>Arranging by brewery country and count</h2>
<p>Each of the subarrays has a length equal to the count of checkins for that country, clearly. So I can use this and gather the data into a key/value structure that I can then use further down the line with the <a href="https://stedolan.github.io/jq/manual/#to_entries,from_entries,with_entries">entries</a> family of functions.</p>
<pre class="language-bash"><code class="language-bash"><span class="token operator">&lt;</span> checkins.json jq <span class="token string">'<br>.[-20:]<br>| map({beer_name, brewery_name, brewery_country})<br>| group_by(.brewery_country)<br>| map({key: first.brewery_country, value: length})<br>'</span></code></pre>
<p>This has the effect of turning the subarrays into objects:</p>
<pre class="language-json"><code class="language-json"><span class="token punctuation">[</span><br>  <span class="token punctuation">{</span><br>    <span class="token property">"key"</span><span class="token operator">:</span> <span class="token string">"Belgium"</span><span class="token punctuation">,</span><br>    <span class="token property">"value"</span><span class="token operator">:</span> <span class="token number">5</span><br>  <span class="token punctuation">}</span><span class="token punctuation">,</span><br>  <span class="token punctuation">{</span><br>    <span class="token property">"key"</span><span class="token operator">:</span> <span class="token string">"England"</span><span class="token punctuation">,</span><br>    <span class="token property">"value"</span><span class="token operator">:</span> <span class="token number">10</span><br>  <span class="token punctuation">}</span><span class="token punctuation">,</span><br>  <span class="token punctuation">{</span><br>    <span class="token property">"key"</span><span class="token operator">:</span> <span class="token string">"France"</span><span class="token punctuation">,</span><br>    <span class="token property">"value"</span><span class="token operator">:</span> <span class="token number">1</span><br>  <span class="token punctuation">}</span><span class="token punctuation">,</span><br>  <span class="token punctuation">{</span><br>    <span class="token property">"key"</span><span class="token operator">:</span> <span class="token string">"Norway"</span><span class="token punctuation">,</span><br>    <span class="token property">"value"</span><span class="token operator">:</span> <span class="token number">1</span><br>  <span class="token punctuation">}</span><span class="token punctuation">,</span><br>  <span class="token punctuation">{</span><br>    <span class="token property">"key"</span><span class="token operator">:</span> <span class="token string">"Scotland"</span><span class="token punctuation">,</span><br>    <span class="token property">"value"</span><span class="token operator">:</span> <span class="token number">1</span><br>  <span class="token punctuation">}</span><span class="token punctuation">,</span><br>  <span class="token punctuation">{</span><br>    <span class="token property">"key"</span><span class="token operator">:</span> <span class="token string">"United States"</span><span class="token punctuation">,</span><br>    <span class="token property">"value"</span><span class="token operator">:</span> <span class="token number">2</span><br>  <span class="token punctuation">}</span><br><span class="token punctuation">]</span></code></pre>
<p>I could have mapped the subarrays slightly differently, like this:</p>
<pre class="language-bash"><code class="language-bash"><span class="token operator">&lt;</span> checkins.json jq <span class="token string">'<br>.[-20:]<br>| map({beer_name, brewery_name, brewery_country})<br>| group_by(.brewery_country)<br>| map({(first.brewery_country): length})<br>'</span></code></pre>
<p>which would have produced an arguably neater result:</p>
<pre class="language-json"><code class="language-json"><span class="token punctuation">[</span><br>  <span class="token punctuation">{</span><br>    <span class="token property">"Belgium"</span><span class="token operator">:</span> <span class="token number">5</span><br>  <span class="token punctuation">}</span><span class="token punctuation">,</span><br>  <span class="token punctuation">{</span><br>    <span class="token property">"England"</span><span class="token operator">:</span> <span class="token number">10</span><br>  <span class="token punctuation">}</span><span class="token punctuation">,</span><br>  <span class="token punctuation">{</span><br>    <span class="token property">"France"</span><span class="token operator">:</span> <span class="token number">1</span><br>  <span class="token punctuation">}</span><span class="token punctuation">,</span><br>  <span class="token punctuation">{</span><br>    <span class="token property">"Norway"</span><span class="token operator">:</span> <span class="token number">1</span><br>  <span class="token punctuation">}</span><span class="token punctuation">,</span><br>  <span class="token punctuation">{</span><br>    <span class="token property">"Scotland"</span><span class="token operator">:</span> <span class="token number">1</span><br>  <span class="token punctuation">}</span><span class="token punctuation">,</span><br>  <span class="token punctuation">{</span><br>    <span class="token property">"United States"</span><span class="token operator">:</span> <span class="token number">2</span><br>  <span class="token punctuation">}</span><br><span class="token punctuation">]</span></code></pre>
<p>The problem with this result is that it's now harder to sort by the count, because there's no stable property to refer to for sorting. So we'll stick with the use of <code>key</code> and <code>value</code> properties.</p>
<h2>Sorting</h2>
<p>It's now time to sort, and I want the most popular brewery country at the top, so I'll also need to reverse the sorted output:</p>
<pre class="language-bash"><code class="language-bash"><span class="token operator">&lt;</span> checkins.json jq <span class="token string">'<br>.[-20:]<br>| map({beer_name, brewery_name, brewery_country})<br>| group_by(.brewery_country)<br>| map({key: first.brewery_country, value: length})<br>| sort_by(.value)<br>| reverse<br>'</span></code></pre>
<p>This produces what we're expecting:</p>
<pre class="language-json"><code class="language-json"><span class="token punctuation">[</span><br>  <span class="token punctuation">{</span><br>    <span class="token property">"key"</span><span class="token operator">:</span> <span class="token string">"England"</span><span class="token punctuation">,</span><br>    <span class="token property">"value"</span><span class="token operator">:</span> <span class="token number">10</span><br>  <span class="token punctuation">}</span><span class="token punctuation">,</span><br>  <span class="token punctuation">{</span><br>    <span class="token property">"key"</span><span class="token operator">:</span> <span class="token string">"Belgium"</span><span class="token punctuation">,</span><br>    <span class="token property">"value"</span><span class="token operator">:</span> <span class="token number">5</span><br>  <span class="token punctuation">}</span><span class="token punctuation">,</span><br>  <span class="token punctuation">{</span><br>    <span class="token property">"key"</span><span class="token operator">:</span> <span class="token string">"United States"</span><span class="token punctuation">,</span><br>    <span class="token property">"value"</span><span class="token operator">:</span> <span class="token number">2</span><br>  <span class="token punctuation">}</span><span class="token punctuation">,</span><br>  <span class="token punctuation">{</span><br>    <span class="token property">"key"</span><span class="token operator">:</span> <span class="token string">"Scotland"</span><span class="token punctuation">,</span><br>    <span class="token property">"value"</span><span class="token operator">:</span> <span class="token number">1</span><br>  <span class="token punctuation">}</span><span class="token punctuation">,</span><br>  <span class="token punctuation">{</span><br>    <span class="token property">"key"</span><span class="token operator">:</span> <span class="token string">"Norway"</span><span class="token punctuation">,</span><br>    <span class="token property">"value"</span><span class="token operator">:</span> <span class="token number">1</span><br>  <span class="token punctuation">}</span><span class="token punctuation">,</span><br>  <span class="token punctuation">{</span><br>    <span class="token property">"key"</span><span class="token operator">:</span> <span class="token string">"France"</span><span class="token punctuation">,</span><br>    <span class="token property">"value"</span><span class="token operator">:</span> <span class="token number">1</span><br>  <span class="token punctuation">}</span><br><span class="token punctuation">]</span></code></pre>
<h2>Arranging into the final structure</h2>
<p>Now I have the core data computed and organised as required, I can neaten it up using the <code>from_entries</code> function, which expects <code>key</code> and <code>value</code> property names:</p>
<pre class="language-bash"><code class="language-bash"><span class="token operator">&lt;</span> checkins.json jq <span class="token string">'<br>.[-20:]<br>| map({beer_name, brewery_name, brewery_country})<br>| group_by(.brewery_country)<br>| map({key: first.brewery_country, value: length})<br>| sort_by(.value)<br>| reverse<br>| from_entries<br>'</span></code></pre>
<p>And I get an even better version of what I almost went for when I was first arranging by brewery country and count:</p>
<pre class="language-json"><code class="language-json"><span class="token punctuation">{</span><br>  <span class="token property">"England"</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span><br>  <span class="token property">"Belgium"</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span><br>  <span class="token property">"United States"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span><br>  <span class="token property">"Scotland"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span><br>  <span class="token property">"Norway"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span><br>  <span class="token property">"France"</span><span class="token operator">:</span> <span class="token number">1</span><br><span class="token punctuation">}</span></code></pre>
<p>That'll do nicely.</p>
<h2>Running the filter on the entire data set</h2>
<p>Now I'm happy with the result, I can remove the first two parts of the filter (which were there just for a quick experiment) so that the results reflect my entire history checkin:</p>
<pre class="language-bash"><code class="language-bash"><span class="token operator">&lt;</span> checkins.json jq <span class="token string">'<br>group_by(.brewery_country)<br>| map({key: first.brewery_country, value: length})<br>| sort_by(.value)<br>| reverse<br>| from_entries<br>'</span></code></pre>
<p>This gives me the following result:</p>
<pre class="language-json"><code class="language-json"><span class="token punctuation">{</span><br>  <span class="token property">"England"</span><span class="token operator">:</span> <span class="token number">2518</span><span class="token punctuation">,</span><br>  <span class="token property">"United States"</span><span class="token operator">:</span> <span class="token number">590</span><span class="token punctuation">,</span><br>  <span class="token property">"Belgium"</span><span class="token operator">:</span> <span class="token number">497</span><span class="token punctuation">,</span><br>  <span class="token property">"Scotland"</span><span class="token operator">:</span> <span class="token number">157</span><span class="token punctuation">,</span><br>  <span class="token property">"Netherlands"</span><span class="token operator">:</span> <span class="token number">123</span><span class="token punctuation">,</span><br>  <span class="token property">"Denmark"</span><span class="token operator">:</span> <span class="token number">97</span><span class="token punctuation">,</span><br>  <span class="token property">"Germany"</span><span class="token operator">:</span> <span class="token number">79</span><span class="token punctuation">,</span><br>  <span class="token property">"Wales"</span><span class="token operator">:</span> <span class="token number">70</span><span class="token punctuation">,</span><br>  <span class="token property">"Spain"</span><span class="token operator">:</span> <span class="token number">69</span><span class="token punctuation">,</span><br>  <span class="token property">"Norway"</span><span class="token operator">:</span> <span class="token number">40</span><span class="token punctuation">,</span><br>  <span class="token property">"Ireland"</span><span class="token operator">:</span> <span class="token number">29</span><span class="token punctuation">,</span><br>  <span class="token property">"Sweden"</span><span class="token operator">:</span> <span class="token number">25</span><span class="token punctuation">,</span><br>  <span class="token property">"Italy"</span><span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span><br>  <span class="token property">"France"</span><span class="token operator">:</span> <span class="token number">19</span><span class="token punctuation">,</span><br>  <span class="token property">"Australia"</span><span class="token operator">:</span> <span class="token number">17</span><span class="token punctuation">,</span><br>  <span class="token property">"Estonia"</span><span class="token operator">:</span> <span class="token number">16</span><span class="token punctuation">,</span><br>  <span class="token property">"Poland"</span><span class="token operator">:</span> <span class="token number">13</span><span class="token punctuation">,</span><br>  <span class="token property">"New Zealand"</span><span class="token operator">:</span> <span class="token number">13</span><span class="token punctuation">,</span><br>  <span class="token property">"Latvia"</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span><br>  <span class="token property">"Japan"</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span><br>  <span class="token property">"United Kingdom"</span><span class="token operator">:</span> <span class="token number">6</span><span class="token punctuation">,</span><br>  <span class="token property">"Northern Ireland"</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span><br>  <span class="token property">"India"</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span><br>  <span class="token property">"Austria"</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span><br>  <span class="token property">"Iceland"</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span><br>  <span class="token property">"Greece"</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span><br>  <span class="token property">"Croatia"</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span><br>  <span class="token property">"Canada"</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span><br>  <span class="token property">"Turkey"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span><br>  <span class="token property">"Switzerland"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span><br>  <span class="token property">"South Africa"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span><br>  <span class="token property">"Portugal"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span><br>  <span class="token property">"Lithuania"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span><br>  <span class="token property">"Hungary"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span><br>  <span class="token property">"Channel Islands"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span><br>  <span class="token property">"Romania"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span><br>  <span class="token property">"Malta"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span><br>  <span class="token property">"Hong Kong"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span><br>  <span class="token property">"Finland"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span><br>  <span class="token property">"Czech Republic"</span><span class="token operator">:</span> <span class="token number">1</span><br><span class="token punctuation">}</span></code></pre>
<p>Given my beer tastes and my location, I don't think that's a surprising result. But nice to have it confirmed. Cheers and happy 12th birthday Untappd! 🍻</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Understanding jq&#39;s SQL style operators JOIN and INDEX</title>
      <link href="https://qmacro.org/blog/posts/2022/06/23/understanding-jq&#39;s-sql-style-operators-join-and-index/"/>
      <updated>2022-06-23T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2022/06/23/understanding-jq&#39;s-sql-style-operators-join-and-index/</id>
      <content type="html">
        <![CDATA[
      <p>In this post I explore a couple of new (to me) operators in jq's arsenal: <code>JOIN</code> and <code>INDEX</code>, based on an answer to a question that I came across on Stack Overflow.</p>
<p>The <a href="https://stackoverflow.com/a/72725480/384366">answer</a> was in response to a question (<a href="https://stackoverflow.com/q/72723706/384366">JQ: How to join arrays by key?</a>) about how to merge two arrays of related information. I found it interesting and it also introduced me to a couple of operators in <code>jq</code> that I'd hitherto not come across. There's a section in the manual titled <a href="https://stedolan.github.io/jq/manual/#SQL-StyleOperators">SQL-Style Operators</a> that describe them.</p>
<p>I could have sworn I'd never seen this section before, so had instead looked to see if they were defined in the <a href="https://github.com/stedolan/jq/blob/a9f97e9e61a910a374a5d768244e8ad63f407d3e/src/builtin.jq">builtin.jq</a> file, where <code>jq</code> functions, filters and operators are defined ... in <code>jq</code>. I did come across them there, and their definitions helped me understand them too. I thought I'd explore them in this blog post, &quot;out loud&quot;, as it were.</p>
<h2>Test data</h2>
<p>Throughout this post I'm going to use the data described in the Stack Overflow question, which (after a bit of tidying up) looks like this (and which I've put into a file called <code>data.json</code>):</p>
<pre class="language-json"><code class="language-json"><span class="token punctuation">{</span><br>  <span class="token property">"weights"</span><span class="token operator">:</span> <span class="token punctuation">[</span><br>    <span class="token punctuation">{</span><br>      <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"apple"</span><span class="token punctuation">,</span><br>      <span class="token property">"weight"</span><span class="token operator">:</span> <span class="token number">200</span><br>    <span class="token punctuation">}</span><span class="token punctuation">,</span><br>    <span class="token punctuation">{</span><br>      <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"tomato"</span><span class="token punctuation">,</span><br>      <span class="token property">"weight"</span><span class="token operator">:</span> <span class="token number">100</span><br>    <span class="token punctuation">}</span><br>  <span class="token punctuation">]</span><span class="token punctuation">,</span><br>  <span class="token property">"categories"</span><span class="token operator">:</span> <span class="token punctuation">[</span><br>    <span class="token punctuation">{</span><br>      <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"apple"</span><span class="token punctuation">,</span><br>      <span class="token property">"category"</span><span class="token operator">:</span> <span class="token string">"fruit"</span><br>    <span class="token punctuation">}</span><span class="token punctuation">,</span><br>    <span class="token punctuation">{</span><br>      <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"tomato"</span><span class="token punctuation">,</span><br>      <span class="token property">"category"</span><span class="token operator">:</span> <span class="token string">"vegetable"</span><br>    <span class="token punctuation">}</span><br>  <span class="token punctuation">]</span><br><span class="token punctuation">}</span></code></pre>
<h2>Starting with the definitions in builtin.jq</h2>
<p>I want to start by staring at the definitions of the two operators in <code>builtin.jq</code>. Here's the section of code, with a few empty lines added for readability:</p>
<pre class="language-jq"><code class="language-jq"><span class="token keyword">def</span> <span class="token function">INDEX</span><span class="token punctuation">(</span>stream<span class="token punctuation">;</span> idx_expr<span class="token punctuation">)</span><span class="token punctuation">:</span><br>  <span class="token keyword">reduce</span> stream <span class="token keyword">as</span> <span class="token variable">$row</span> <span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token variable">$row</span><span class="token operator pipe">|</span>idx_expr<span class="token operator pipe">|</span>tostring<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$row</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br><br><span class="token keyword">def</span> <span class="token function">INDEX</span><span class="token punctuation">(</span>idx_expr<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token c-style-function function">INDEX</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> idx_expr<span class="token punctuation">)</span><span class="token punctuation">;</span><br><br><span class="token keyword">def</span> <span class="token function">JOIN</span><span class="token punctuation">(</span><span class="token variable">$idx</span><span class="token punctuation">;</span> idx_expr<span class="token punctuation">)</span><span class="token punctuation">:</span><br>  <span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator pipe">|</span> <span class="token punctuation">[</span><span class="token dot important">.</span><span class="token punctuation">,</span> <span class="token variable">$idx</span><span class="token punctuation">[</span>idx_expr<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><br><br><span class="token keyword">def</span> <span class="token function">JOIN</span><span class="token punctuation">(</span><span class="token variable">$idx</span><span class="token punctuation">;</span> stream<span class="token punctuation">;</span> idx_expr<span class="token punctuation">)</span><span class="token punctuation">:</span><br>  stream <span class="token operator pipe">|</span> <span class="token punctuation">[</span><span class="token dot important">.</span><span class="token punctuation">,</span> <span class="token variable">$idx</span><span class="token punctuation">[</span>idx_expr<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><br><br><span class="token keyword">def</span> <span class="token function">JOIN</span><span class="token punctuation">(</span><span class="token variable">$idx</span><span class="token punctuation">;</span> stream<span class="token punctuation">;</span> idx_expr<span class="token punctuation">;</span> join_expr<span class="token punctuation">)</span><span class="token punctuation">:</span><br>  stream <span class="token operator pipe">|</span> <span class="token punctuation">[</span><span class="token dot important">.</span><span class="token punctuation">,</span> <span class="token variable">$idx</span><span class="token punctuation">[</span>idx_expr<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator pipe">|</span> join_expr<span class="token punctuation">;</span></code></pre>
<p>The first thing I see is that there are multiple definitions of both <code>INDEX</code> and <code>JOIN</code>, each with different numbers of parameters. In various discussions, I've seen this represented in the way folks refer to them. For example, there are three definitions of <code>JOIN</code>, one with two parameters (<code>JOIN($idx; idx_expr)</code>), one with three (<code>JOIN($idx; stream; idx_expr)</code>) and one with four (<code>JOIN($idx; stream; idx_expr; join_expr)</code>). These are referred to, respectively, like this: <code>JOIN/2</code>, <code>JOIN/3</code> and <code>JOIN/4</code>, where the number represents the <a href="https://en.wikipedia.org/wiki/Arity">arity</a>.</p>
<h3>INDEX definitions</h3>
<p>So I set off on my exploration, looking at the two definitions of <code>INDEX</code>.</p>
<h4>INDEX/2</h4>
<p>Starting with <code>INDEX/2</code>, I see:</p>
<pre class="language-jq"><code class="language-jq"><span class="token keyword">def</span> <span class="token function">INDEX</span><span class="token punctuation">(</span>stream<span class="token punctuation">;</span> idx_expr<span class="token punctuation">)</span><span class="token punctuation">:</span><br>  <span class="token keyword">reduce</span> stream <span class="token keyword">as</span> <span class="token variable">$row</span> <span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token variable">$row</span><span class="token operator pipe">|</span>idx_expr<span class="token operator pipe">|</span>tostring<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$row</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>Earlier this year I managed to get to grips with the <code>reduce</code> function in <code>jq</code>, and wrote about it in this post: <a href="/blog/posts/2022/03/25/understanding-jq's-reduce-function/">Understanding jq's reduce function</a>. With that understanding, the call to <code>reduce</code> here doesn't seem as impenetrable. Here's how I understand it, in pseudo-JS:</p>
<pre class="language-javascript"><code class="language-javascript">stream<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">accumulator<span class="token punctuation">,</span> row</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span><br>  accumulator<span class="token punctuation">[</span><span class="token operator">&lt;</span>result <span class="token keyword">of</span> determining the idx_expr<span class="token operator">></span><span class="token punctuation">]</span> <span class="token operator">=</span> row<br>  <span class="token keyword">return</span> accumulator<br><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>
<p>In other words, this <code>reduce</code> invocation iterates through the elements of <code>stream</code>, and for each one, represented by <code>$row</code> each time, adds a new entry to an object, which is empty to start with (<code>{}</code>), where the value of the entry is the element itself (<code>$row</code>) and the key is determined by applying the <code>idx_expr</code> expression to the row, and then stringifying the result (<code>tostring</code>).</p>
<p>What happens if I invoke such an <code>INDEX</code> operator on the test data above? How about:</p>
<pre class="language-bash"><code class="language-bash">jq <span class="token string">'INDEX(.categories[]; .name)'</span> data.json</code></pre>
<p>First, <code>.categories[]</code> is used as the &quot;stream&quot;, i.e. a stream of values - in this case the values are objects each with <code>name</code> and <code>category</code> keys, like this:</p>
<pre class="language-json"><code class="language-json"><span class="token punctuation">{</span><br>  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"apple"</span><span class="token punctuation">,</span><br>  <span class="token property">"category"</span><span class="token operator">:</span> <span class="token string">"fruit"</span><br><span class="token punctuation">}</span><span class="token punctuation">,</span><br><span class="token punctuation">{</span><br>  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"tomato"</span><span class="token punctuation">,</span><br>  <span class="token property">"category"</span><span class="token operator">:</span> <span class="token string">"vegetable"</span><br><span class="token punctuation">}</span></code></pre>
<p>In this invocation of <code>INDEX</code>, <code>.name</code> is set as the <code>idx_expr</code> (the expression for determining what the index, or key, is going to be). So for the first element (the object with the &quot;apple&quot; details) the <code>idx_expr</code> of <code>.name</code> gives &quot;apple&quot;.</p>
<p>The result of invoking <code>INDEX(.categories[], .name)</code> then, is this:</p>
<pre class="language-json"><code class="language-json"><span class="token punctuation">{</span><br>  <span class="token property">"apple"</span><span class="token operator">:</span> <span class="token punctuation">{</span><br>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"apple"</span><span class="token punctuation">,</span><br>    <span class="token property">"category"</span><span class="token operator">:</span> <span class="token string">"fruit"</span><br>  <span class="token punctuation">}</span><span class="token punctuation">,</span><br>  <span class="token property">"tomato"</span><span class="token operator">:</span> <span class="token punctuation">{</span><br>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"tomato"</span><span class="token punctuation">,</span><br>    <span class="token property">"category"</span><span class="token operator">:</span> <span class="token string">"vegetable"</span><br>  <span class="token punctuation">}</span><br><span class="token punctuation">}</span></code></pre>
<p>So this has turned a stream of objects into a single object with keys (&quot;indices&quot;, I guess) built from values in the original objects.</p>
<h4>INDEX/1</h4>
<p>And <code>INDEX/1</code> is just a call to <code>INDEX/2</code> with the first parameter set to <code>.[]</code>:</p>
<pre class="language-jq"><code class="language-jq"><span class="token keyword">def</span> <span class="token function">INDEX</span><span class="token punctuation">(</span>idx_expr<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token c-style-function function">INDEX</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> idx_expr<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>This feels like a nice convenience redefinition, and I get the feeling that this version might see more use in a pipeline context. Looking at how it might be used, with the same data, I get this:</p>
<pre class="language-bash"><code class="language-bash">jq <span class="token string">'.categories | INDEX(.name)'</span> data.json</code></pre>
<p>This produces the same thing:</p>
<pre class="language-json"><code class="language-json"><span class="token punctuation">{</span><br>  <span class="token property">"apple"</span><span class="token operator">:</span> <span class="token punctuation">{</span><br>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"apple"</span><span class="token punctuation">,</span><br>    <span class="token property">"category"</span><span class="token operator">:</span> <span class="token string">"fruit"</span><br>  <span class="token punctuation">}</span><span class="token punctuation">,</span><br>  <span class="token property">"tomato"</span><span class="token operator">:</span> <span class="token punctuation">{</span><br>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"tomato"</span><span class="token punctuation">,</span><br>    <span class="token property">"category"</span><span class="token operator">:</span> <span class="token string">"vegetable"</span><br>  <span class="token punctuation">}</span><br><span class="token punctuation">}</span></code></pre>
<p>Implicitly what's piped into <code>INDEX/1</code> has to be an array, I guess, which is why the left hand side of the pipe here is <code>.categories</code>, rather than <code>.categories[]</code> which would have caused multiple invocations of <code>INDEX</code>, one for every array element. Moreover, <code>.categories</code> is more appropriate because the first thing that <code>INDEX/1</code> does is invoke the <a href="https://stedolan.github.io/jq/manual/#Array/ObjectValueIterator:.%5B%5D">array iterator</a>  on it (i.e. the <code>.[]</code> in <code>INDEX(.[]; idx_expr)</code>).</p>
<p>So in summary, <code>INDEX</code> can be used to create a &quot;lookup&quot; object where the keys are determined based on what you specify to pick out of the incoming stream.</p>
<h3>JOIN definitions</h3>
<p>Now I can turn my attention to each of the definitions of <code>JOIN</code>, and there are three: <code>JOIN/2</code>, <code>JOIN/3</code> and <code>JOIN/4</code>:</p>
<pre class="language-jq"><code class="language-jq"><span class="token keyword">def</span> <span class="token function">JOIN</span><span class="token punctuation">(</span><span class="token variable">$idx</span><span class="token punctuation">;</span> idx_expr<span class="token punctuation">)</span><span class="token punctuation">:</span><br>  <span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator pipe">|</span> <span class="token punctuation">[</span><span class="token dot important">.</span><span class="token punctuation">,</span> <span class="token variable">$idx</span><span class="token punctuation">[</span>idx_expr<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><br><br><span class="token keyword">def</span> <span class="token function">JOIN</span><span class="token punctuation">(</span><span class="token variable">$idx</span><span class="token punctuation">;</span> stream<span class="token punctuation">;</span> idx_expr<span class="token punctuation">)</span><span class="token punctuation">:</span><br>  stream <span class="token operator pipe">|</span> <span class="token punctuation">[</span><span class="token dot important">.</span><span class="token punctuation">,</span> <span class="token variable">$idx</span><span class="token punctuation">[</span>idx_expr<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><br><br><span class="token keyword">def</span> <span class="token function">JOIN</span><span class="token punctuation">(</span><span class="token variable">$idx</span><span class="token punctuation">;</span> stream<span class="token punctuation">;</span> idx_expr<span class="token punctuation">;</span> join_expr<span class="token punctuation">)</span><span class="token punctuation">:</span><br>  stream <span class="token operator pipe">|</span> <span class="token punctuation">[</span><span class="token dot important">.</span><span class="token punctuation">,</span> <span class="token variable">$idx</span><span class="token punctuation">[</span>idx_expr<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator pipe">|</span> join_expr<span class="token punctuation">;</span></code></pre>
<p>I'll start by examining <code>JOIN/4</code>.</p>
<h4>JOIN/4</h4>
<p>As the arity identification suggests, this version takes four parameters. Even though the definition is just above, it's worth repeating it here, to be able to stare at for a minute or two:</p>
<pre class="language-jq"><code class="language-jq"><span class="token keyword">def</span> <span class="token function">JOIN</span><span class="token punctuation">(</span><span class="token variable">$idx</span><span class="token punctuation">;</span> stream<span class="token punctuation">;</span> idx_expr<span class="token punctuation">;</span> join_expr<span class="token punctuation">)</span><span class="token punctuation">:</span><br>  stream <span class="token operator pipe">|</span> <span class="token punctuation">[</span><span class="token dot important">.</span><span class="token punctuation">,</span> <span class="token variable">$idx</span><span class="token punctuation">[</span>idx_expr<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator pipe">|</span> join_expr<span class="token punctuation">;</span></code></pre>
<p>It's described in the manual thus (emphasis mine, to refer to the parameters):</p>
<blockquote>
<p>This builtin joins the values from the <strong>given stream</strong> to the <strong>given index</strong>. The index's keys are computed by applying the given <strong>index expression</strong> to each value from the given stream. An array of the value in the stream and the corresponding value from the index is fed to the given <strong>join expression</strong> to produce each result.</p>
</blockquote>
<p>Here's an example call that I'll run shortly:</p>
<pre class="language-jq"><code class="language-jq"><span class="token c-style-function function">INDEX</span><span class="token punctuation">(</span><span class="token punctuation">.</span>categories<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token variable">$categories</span><br><span class="token operator pipe">|</span> <span class="token c-style-function function">JOIN</span><span class="token punctuation">(</span><span class="token variable">$categories</span><span class="token punctuation">;</span> <span class="token punctuation">.</span>weights<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token punctuation">.</span>name<span class="token punctuation">;</span> add<span class="token punctuation">)</span></code></pre>
<p>Examining each of the parameters in turn, in the context of this description, we have the following values provided for the following parameters:</p>
<p><strong><code>$idx &lt;-- $categories</code> (&quot;the given index&quot;)</strong></p>
<p>An example of such an index is what's produced by the <code>INDEX</code> builtin we looked at earlier:</p>
<pre class="language-json"><code class="language-json"><span class="token punctuation">{</span><br>  <span class="token property">"apple"</span><span class="token operator">:</span> <span class="token punctuation">{</span><br>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"apple"</span><span class="token punctuation">,</span><br>    <span class="token property">"category"</span><span class="token operator">:</span> <span class="token string">"fruit"</span><br>  <span class="token punctuation">}</span><span class="token punctuation">,</span><br>  <span class="token property">"tomato"</span><span class="token operator">:</span> <span class="token punctuation">{</span><br>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"tomato"</span><span class="token punctuation">,</span><br>    <span class="token property">"category"</span><span class="token operator">:</span> <span class="token string">"vegetable"</span><br>  <span class="token punctuation">}</span><br><span class="token punctuation">}</span></code></pre>
<p>In the example call, this is referred to via <code>$categories</code> which is a symbolic binding to the result of <code>INDEX(.categories[]; .name)</code>.</p>
<p><strong><code>stream &lt;-- .weights[]</code> (the &quot;given stream&quot;)</strong></p>
<p>This is a sequence, usually of objects. In the example call, I'm using <code>.weights[]</code> as the stream, i.e. the objects describing food and their respective weights:</p>
<pre class="language-json"><code class="language-json"><span class="token punctuation">{</span><br>  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"apple"</span><span class="token punctuation">,</span><br>  <span class="token property">"weight"</span><span class="token operator">:</span> <span class="token number">200</span><br><span class="token punctuation">}</span><span class="token punctuation">,</span><br><span class="token punctuation">{</span><br>  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"tomato"</span><span class="token punctuation">,</span><br>  <span class="token property">"weight"</span><span class="token operator">:</span> <span class="token number">100</span><br><span class="token punctuation">}</span></code></pre>
<p><strong><code>idx_expr &lt;-- .name</code> (the &quot;given index expression&quot;)</strong></p>
<p>This is effectively what to use, in the stream, to look up the corresponding data in the index. In this case, <code>.name</code> is appropriate, as it has the values which are used as keys (&quot;apple&quot; and &quot;tomato&quot;) in the index.</p>
<p><strong><code>join_expr &lt;-- add</code> (the &quot;given join expression&quot;)</strong></p>
<p>In order to understand why this parameter exists, it's necessary to have in mind what would be produced before such a join. For every stream object, after a successful lookup of a corresponding object in the index based on the index expression that points to a value in that stream object, what's produced is an array of two objects.</p>
<p>Here's an example, again based on the call I'll make, which is:</p>
<pre class="language-jq"><code class="language-jq"><span class="token c-style-function function">INDEX</span><span class="token punctuation">(</span><span class="token punctuation">.</span>categories<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token variable">$categories</span><br><span class="token operator pipe">|</span> <span class="token c-style-function function">JOIN</span><span class="token punctuation">(</span><span class="token variable">$categories</span><span class="token punctuation">;</span> <span class="token punctuation">.</span>weights<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token punctuation">.</span>name<span class="token punctuation">;</span> add<span class="token punctuation">)</span></code></pre>
<p>The first object in the <code>.weights[]</code> stream is:</p>
<pre class="language-json"><code class="language-json"><span class="token punctuation">{</span><br>  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"apple"</span><span class="token punctuation">,</span><br>  <span class="token property">"weight"</span><span class="token operator">:</span> <span class="token number">200</span><br><span class="token punctuation">}</span></code></pre>
<p>From this, the value of <code>.name</code> is &quot;apple&quot;, and this is used to look for an entry in the <code>$categories</code> index, and one is found - this one:</p>
<pre class="language-json"><code class="language-json"><span class="token property">"apple"</span><span class="token operator">:</span> <span class="token punctuation">{</span><br>  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"apple"</span><span class="token punctuation">,</span><br>  <span class="token property">"category"</span><span class="token operator">:</span> <span class="token string">"fruit"</span><br><span class="token punctuation">}</span></code></pre>
<p>Note that what's returned is not that entire structure, but just the value that &quot;apple&quot; points to:</p>
<pre class="language-json"><code class="language-json"><span class="token punctuation">{</span><br>  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"apple"</span><span class="token punctuation">,</span><br>  <span class="token property">"category"</span><span class="token operator">:</span> <span class="token string">"fruit"</span><br><span class="token punctuation">}</span></code></pre>
<p>What happens now is described in the last sentence from the manual description:</p>
<blockquote>
<p>An array of the value in the stream and the corresponding value from the index is fed to the given join expression to produce each result.</p>
</blockquote>
<p>So looking at the first part of that sentence, this is what's produced - an array like this:</p>
<pre class="language-json"><code class="language-json"><span class="token punctuation">[</span><br>  <span class="token punctuation">{</span><br>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"apple"</span><span class="token punctuation">,</span><br>    <span class="token property">"weight"</span><span class="token operator">:</span> <span class="token number">200</span><br>  <span class="token punctuation">}</span><span class="token punctuation">,</span><br>  <span class="token punctuation">{</span><br>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"apple"</span><span class="token punctuation">,</span><br>    <span class="token property">"category"</span><span class="token operator">:</span> <span class="token string">"fruit"</span><br>  <span class="token punctuation">}</span><br><span class="token punctuation">]</span></code></pre>
<p>With the knowledge of what's produced before the <code>join_expr</code> is employed, it is now clearer as to why such a join expression exists as a parameter.</p>
<p>In this example case it makes most sense to merge the two objects, and the multi-faceted <a href="https://stedolan.github.io/jq/manual/#add">add</a> filter is perfect for this, producing - from that array of two objects - this single object:</p>
<pre class="language-json"><code class="language-json"><span class="token punctuation">{</span><br>  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"apple"</span><span class="token punctuation">,</span><br>  <span class="token property">"weight"</span><span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span><br>  <span class="token property">"category"</span><span class="token operator">:</span> <span class="token string">"fruit"</span><br><span class="token punctuation">}</span></code></pre>
<p>Joining the pairs of objects in one way or another is very likely to be what one desires.</p>
<h4>JOIN/3</h4>
<p>Following on from <code>JOIN/4</code>, it's easier to examine the other arity versions, starting with this one:</p>
<pre class="language-jq"><code class="language-jq"><span class="token keyword">def</span> <span class="token function">JOIN</span><span class="token punctuation">(</span><span class="token variable">$idx</span><span class="token punctuation">;</span> stream<span class="token punctuation">;</span> idx_expr<span class="token punctuation">)</span><span class="token punctuation">:</span><br>  stream <span class="token operator pipe">|</span> <span class="token punctuation">[</span><span class="token dot important">.</span><span class="token punctuation">,</span> <span class="token variable">$idx</span><span class="token punctuation">[</span>idx_expr<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre>
<p>From the definition, the difference to <code>JOIN/4</code> is just that the <code>join_expr</code> parameter is omitted, and there's no pipe into such an expression at the end. The equivalent of this in a <code>JOIN/4</code> context would be to specify <code>.</code> as the <code>join_expr</code>. I guess it's nicer not have to specify that if you don't want any special joining of the pairs of elements in your result.</p>
<h4>JOIN/2</h4>
<p>This is an even more cut down version, in that not only is there no <code>join_expr</code> but there's also no explicit parameter for specifying the stream. Instead, one is expected to pipe that into such a call to <code>JOIN/2</code>. This is what the definition looks like, and one can see the <code>.[]</code> at the start which unwraps an assumed array to produce a stream that is then piped into the main definition:</p>
<pre class="language-jq"><code class="language-jq"><span class="token keyword">def</span> <span class="token function">JOIN</span><span class="token punctuation">(</span><span class="token variable">$idx</span><span class="token punctuation">;</span> idx_expr<span class="token punctuation">)</span><span class="token punctuation">:</span><br>  <span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator pipe">|</span> <span class="token punctuation">[</span><span class="token dot important">.</span><span class="token punctuation">,</span> <span class="token variable">$idx</span><span class="token punctuation">[</span>idx_expr<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre>
<p>Note also in this arity version that the results are returned within an outer array via the <code>[...]</code> array construction that wraps the entire definition.</p>
<h2>Walking through the entire call</h2>
<p>Now I've examined the different definitions, it's time to finish off with putting the new knowledge to work, to better understand the <a href="https://stackoverflow.com/questions/72723706/jq-how-to-join-arrays-by-key/72725480#72725480">answer</a> given, which centres around this <code>jq</code> expression and operates on the same test data I described earlier:</p>
<pre class="language-jq"><code class="language-jq"><span class="token punctuation">{</span><span class="token property-literal property">weights</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token c-style-function function">JOIN</span><span class="token punctuation">(</span><span class="token c-style-function function">INDEX</span><span class="token punctuation">(</span><span class="token punctuation">.</span>categories<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">.</span>weights<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token punctuation">.</span>name<span class="token punctuation">;</span> add<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre>
<p>With some whitespace, that expression looks like this, which might help us read it more easily and see that there's nothing we don't now know about:</p>
<pre class="language-jq"><code class="language-jq"><span class="token punctuation">{</span><br>  <span class="token property-literal property">weights</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><br>    <span class="token c-style-function function">JOIN</span><span class="token punctuation">(</span><br>      <span class="token c-style-function function">INDEX</span><span class="token punctuation">(</span> <span class="token punctuation">.</span>categories<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token punctuation">.</span>name <span class="token punctuation">)</span><span class="token punctuation">;</span><br>      <span class="token punctuation">.</span>weights<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><br>      <span class="token punctuation">.</span>name<span class="token punctuation">;</span><br>      add<br>    <span class="token punctuation">)</span><br>  <span class="token punctuation">]</span><br><span class="token punctuation">}</span></code></pre>
<p>The expression contains a call to <code>JOIN/4</code>, and the first parameter (the &quot;index&quot;) is actually a call to <code>INDEX/2</code>, which, as we know, given the test data, produces this:</p>
<pre class="language-json"><code class="language-json"><span class="token punctuation">{</span><br>  <span class="token property">"apple"</span><span class="token operator">:</span> <span class="token punctuation">{</span><br>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"apple"</span><span class="token punctuation">,</span><br>    <span class="token property">"category"</span><span class="token operator">:</span> <span class="token string">"fruit"</span><br>  <span class="token punctuation">}</span><span class="token punctuation">,</span><br>  <span class="token property">"tomato"</span><span class="token operator">:</span> <span class="token punctuation">{</span><br>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"tomato"</span><span class="token punctuation">,</span><br>    <span class="token property">"category"</span><span class="token operator">:</span> <span class="token string">"vegetable"</span><br>  <span class="token punctuation">}</span><br><span class="token punctuation">}</span></code></pre>
<p>Then there's <code>.weights[]</code> specified for the &quot;stream&quot;, from which values for the &quot;index expression&quot; <code>.name</code> are used to look up data in the index. Finally, <code>add</code> is specified as what to use as the &quot;join expression&quot;. What's produced is a stream of values which are then enclosed in an array (<code>[...]</code>). This array is then returned as the value of a <code>weights</code> property inside an object that's constructed just to hold that property.</p>
<p>This entire <code>jq</code> filter, when applied to the test data, produces the following:</p>
<pre class="language-json"><code class="language-json"><span class="token punctuation">{</span><br>  <span class="token property">"weights"</span><span class="token operator">:</span> <span class="token punctuation">[</span><br>    <span class="token punctuation">{</span><br>      <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"apple"</span><span class="token punctuation">,</span><br>      <span class="token property">"weight"</span><span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span><br>      <span class="token property">"category"</span><span class="token operator">:</span> <span class="token string">"fruit"</span><br>    <span class="token punctuation">}</span><span class="token punctuation">,</span><br>    <span class="token punctuation">{</span><br>      <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"tomato"</span><span class="token punctuation">,</span><br>      <span class="token property">"weight"</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span><br>      <span class="token property">"category"</span><span class="token operator">:</span> <span class="token string">"vegetable"</span><br>    <span class="token punctuation">}</span><br>  <span class="token punctuation">]</span><br><span class="token punctuation">}</span></code></pre>
<h2>Wrapping up</h2>
<p>Again, I've probably used too many words in my exploration, but perhaps it will help you in your understanding as you explore this area too.</p>
<p>This exploration was inspired by the great <a href="https://stackoverflow.com/a/72725480/384366">answer</a> by Stack Overflow user <a href="https://stackoverflow.com/users/2158479/pmf">pmf</a>.</p>
<p>If you're looking for another angle, and another example, there's <a href="https://stackoverflow.com/a/71107203/384366">another great answer</a> from the same user, to a related question <a href="https://stackoverflow.com/q/71106595/384366">Understanding jq JOIN()</a>.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Summing and grouping values with jq</title>
      <link href="https://qmacro.org/blog/posts/2022/06/16/summing-and-grouping-values-with-jq/"/>
      <updated>2022-06-16T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2022/06/16/summing-and-grouping-values-with-jq/</id>
      <content type="html">
        <![CDATA[
      <p>Here's yet another note-to-self on using jq, this time to transform a flat list of order totals and dates into a summary of total order values by year.</p>
<p>In doing some research for an <a href="https://qmacro.org/talks/#odata-basics-4-all-things-filter">upcoming live stream</a> I was looking at the <a href="https://services.odata.org/v4/northwind/northwind.svc/">Northwind OData v4 service</a> and in particular at the <a href="https://services.odata.org/v4/northwind/northwind.svc/Summary_of_Sales_by_Years">Summary_of_Sales_by_Years</a> entity set. It is not what I initially expected; rather than be a summary of sales by year, it was a list of orders each with a shipping date, order ID and order total. There are <a href="https://services.odata.org/v4/northwind/northwind.svc/Summary_of_Sales_by_Years/$count">over 800</a> entries, and I grabbed all of them and stored them in a single JSON file <code>Summary_of_Sales_by_Years.json</code> using a Bash shell script <a href="https://github.com/SAP-samples/odata-basics-handsonsapdev/blob/ecf9f4f4c378428e936dfbd80bbcefcaebfbfb8b/bin/slurp">slurp</a> that auto-follows the <a href="http://docs.oasis-open.org/odata/odata-json-format/v4.0/errata03/os/odata-json-format-v4.0-errata03-os-complete.html#_Toc453766632">@odata.nextLink annotation</a> trail on each chunk response.</p>
<p>I wanted to group the list by year and get grand totals for each year. This blog post describes how I went about it, and also describes a sort of preparation stage too where I created an initially much smaller dataset to experiment with.</p>
<p>I've created snippets on <a href="https://jqplay.org">jqplay</a> for each of the stages here - you'll see the links at the relevant points in this post.</p>
<h2>Preparing the sample data</h2>
<p>For the sake of brevity in this post, I cut the data down to just 6 entries, two for each of the years represented (1996, 1997 and 1998). I did this with <code>jq</code> too, redirecting the output into a new file <code>subset.json</code>, thus:</p>
<pre class="language-bash"><code class="language-bash">jq <span class="token punctuation">\</span><br>  <span class="token string">'.value |= (<br>    group_by(.ShippedDate[:4])<br>    | map(.[:2])<br>    | flatten<br>  )'</span> <span class="token punctuation">\</span><br>  Summary_of_Sales_by_Years.json <span class="token punctuation">\</span><br>  <span class="token operator">></span> subset.json</code></pre>
<p>This resulted in the following content in <code>subset.json</code>, which I can now use to more easily illustrate the summing and grouping.</p>
<pre class="language-json"><code class="language-json"><span class="token punctuation">{</span><br>  <span class="token property">"value"</span><span class="token operator">:</span> <span class="token punctuation">[</span><br>    <span class="token punctuation">{</span><br>      <span class="token property">"ShippedDate"</span><span class="token operator">:</span> <span class="token string">"1996-07-16T00:00:00Z"</span><span class="token punctuation">,</span><br>      <span class="token property">"OrderID"</span><span class="token operator">:</span> <span class="token number">10248</span><span class="token punctuation">,</span><br>      <span class="token property">"Subtotal"</span><span class="token operator">:</span> <span class="token number">440</span><br>    <span class="token punctuation">}</span><span class="token punctuation">,</span><br>    <span class="token punctuation">{</span><br>      <span class="token property">"ShippedDate"</span><span class="token operator">:</span> <span class="token string">"1996-07-10T00:00:00Z"</span><span class="token punctuation">,</span><br>      <span class="token property">"OrderID"</span><span class="token operator">:</span> <span class="token number">10249</span><span class="token punctuation">,</span><br>      <span class="token property">"Subtotal"</span><span class="token operator">:</span> <span class="token number">1863.4</span><br>    <span class="token punctuation">}</span><span class="token punctuation">,</span><br>    <span class="token punctuation">{</span><br>      <span class="token property">"ShippedDate"</span><span class="token operator">:</span> <span class="token string">"1997-01-16T00:00:00Z"</span><span class="token punctuation">,</span><br>      <span class="token property">"OrderID"</span><span class="token operator">:</span> <span class="token number">10380</span><span class="token punctuation">,</span><br>      <span class="token property">"Subtotal"</span><span class="token operator">:</span> <span class="token number">1313.82</span><br>    <span class="token punctuation">}</span><span class="token punctuation">,</span><br>    <span class="token punctuation">{</span><br>      <span class="token property">"ShippedDate"</span><span class="token operator">:</span> <span class="token string">"1997-01-01T00:00:00Z"</span><span class="token punctuation">,</span><br>      <span class="token property">"OrderID"</span><span class="token operator">:</span> <span class="token number">10392</span><span class="token punctuation">,</span><br>      <span class="token property">"Subtotal"</span><span class="token operator">:</span> <span class="token number">1440</span><br>    <span class="token punctuation">}</span><span class="token punctuation">,</span><br>    <span class="token punctuation">{</span><br>      <span class="token property">"ShippedDate"</span><span class="token operator">:</span> <span class="token string">"1998-01-02T00:00:00Z"</span><span class="token punctuation">,</span><br>      <span class="token property">"OrderID"</span><span class="token operator">:</span> <span class="token number">10771</span><span class="token punctuation">,</span><br>      <span class="token property">"Subtotal"</span><span class="token operator">:</span> <span class="token number">344</span><br>    <span class="token punctuation">}</span><span class="token punctuation">,</span><br>    <span class="token punctuation">{</span><br>      <span class="token property">"ShippedDate"</span><span class="token operator">:</span> <span class="token string">"1998-01-21T00:00:00Z"</span><span class="token punctuation">,</span><br>      <span class="token property">"OrderID"</span><span class="token operator">:</span> <span class="token number">10777</span><span class="token punctuation">,</span><br>      <span class="token property">"Subtotal"</span><span class="token operator">:</span> <span class="token number">224</span><br>    <span class="token punctuation">}</span><br>  <span class="token punctuation">]</span><br><span class="token punctuation">}</span></code></pre>
<p>Before we move on, let's briefly examine the <code>jq</code> used to produce this.</p>
<h3>Examining the preparation phase</h3>
<p>Here's that <code>jq</code> program again:</p>
<pre class="language-jq"><code class="language-jq"><span class="token punctuation">.</span>value <span class="token operator pipe">|=</span> <span class="token punctuation">(</span><br>  <span class="token c-style-function function">group_by</span><span class="token punctuation">(</span><span class="token punctuation">.</span>ShippedDate<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><br>  <span class="token operator pipe">|</span> <span class="token c-style-function function">map</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><br>  <span class="token operator pipe">|</span> flatten<br><span class="token punctuation">)</span></code></pre>
<p>First, there's this construct: <code>.value |= (...)</code>. The <code>|=</code> is the <a href="https://stedolan.github.io/jq/manual/#Update-assignment:%7C=">update assignment</a> operator and whatever the filter on the right hand side produces becomes the new value for the <code>value</code> property. The parentheses in this particular instance ensure that the output from the entire expression within is used. It's needed here because the expression contains pipes (<code>|</code>) which would otherwise short circuit.</p>
<p>With <code>group_by(.ShippedDate[:4])</code> the <a href="https://stedolan.github.io/jq/manual/#group_by(path_expression)">group_by</a> function collects objects by the <code>ShippedDate</code> property - but not the entire property value, just the first four characters, which represent the year, for example &quot;1996&quot; in &quot;1996-07-16T00:00:00Z&quot; (there's the <code>strptime</code> function too, which will parse a date into its component parts, but knowledge of the data and laziness won through here). Note that the <code>[:4]</code> construct (which is short for <code>[0:4]</code>) is the <a href="https://stedolan.github.io/jq/manual/#Array/StringSlice:.%5B10:15%5D">array/string slice</a> filter operating on a string value in this case, which will return a substring.</p>
<p>The use of <code>group_by</code> produces an array of arrays, with one subarray for each year.</p>
<p>This is then piped into <code>map(.[:2])</code>. The <code>[:2]</code> (again, short for <code>[0:2]</code>) is the array/string slice filter again, but this time, it's operating on an array rather than a string. I'm using <code>map</code> to run the filter <code>.[:2]</code> against each element of the input array, which contains a subarray for each of the years. And the <code>.[:2]</code> filter, in an array context, will return the first two elements.</p>
<p>The result of this is still an array of arrays, but now each subarray has only two objects each. Now they can all be merged, i.e. taken out of their respective subarrays and collected together. This is done with the <a href="https://stedolan.github.io/jq/manual/#flatten,flatten(depth)">flatten</a> filter.</p>
<p>▶ You can see how this <code>jq</code> program reduces the input data to the subset in this jqplay snippet: <a href="https://jqplay.org/s/7fwbQqvjluG">Initial input data reduction</a>.</p>
<h2>Producing the totals by year</h2>
<p>So, (now based on the subset of data above), what I actually want is a summary of total order value for each year, something like this:</p>
<pre class="language-json"><code class="language-json"><span class="token punctuation">[</span><br>  <span class="token punctuation">[</span><br>    <span class="token string">"1996"</span><span class="token punctuation">,</span><br>    <span class="token number">2303</span><br>  <span class="token punctuation">]</span><span class="token punctuation">,</span><br>  <span class="token punctuation">[</span><br>    <span class="token string">"1997"</span><span class="token punctuation">,</span><br>    <span class="token number">2753</span><br>  <span class="token punctuation">]</span><span class="token punctuation">,</span><br>  <span class="token punctuation">[</span><br>    <span class="token string">"1998"</span><span class="token punctuation">,</span><br>    <span class="token number">568</span><br>  <span class="token punctuation">]</span><br><span class="token punctuation">]</span></code></pre>
<h3>Grouping by year</h3>
<p>It makes sense that the approach required will also employ the <a href="https://stedolan.github.io/jq/manual/#group_by(path_expression)">group_by</a> function as we want total order values for each year, and we can determine the years in the same way as we've seen in the preparation stage, i.e. with the <a href="https://stedolan.github.io/jq/manual/#Array/StringSlice:.%5B10:15%5D">array/string slice</a> filter (<code>[:4]</code>).</p>
<p>Let's start to explore:</p>
<pre class="language-bash"><code class="language-bash">jq <span class="token punctuation">\</span><br>  <span class="token string">'.value<br>  | group_by(.ShippedDate[:4])'</span> <span class="token punctuation">\</span><br>  subset.json</code></pre>
<pre class="language-json"><code class="language-json"><span class="token punctuation">[</span><br>  <span class="token punctuation">[</span><br>    <span class="token punctuation">{</span><br>      <span class="token property">"ShippedDate"</span><span class="token operator">:</span> <span class="token string">"1996-07-16T00:00:00Z"</span><span class="token punctuation">,</span><br>      <span class="token property">"OrderID"</span><span class="token operator">:</span> <span class="token number">10248</span><span class="token punctuation">,</span><br>      <span class="token property">"Subtotal"</span><span class="token operator">:</span> <span class="token number">440</span><br>    <span class="token punctuation">}</span><span class="token punctuation">,</span><br>    <span class="token punctuation">{</span><br>      <span class="token property">"ShippedDate"</span><span class="token operator">:</span> <span class="token string">"1996-07-10T00:00:00Z"</span><span class="token punctuation">,</span><br>      <span class="token property">"OrderID"</span><span class="token operator">:</span> <span class="token number">10249</span><span class="token punctuation">,</span><br>      <span class="token property">"Subtotal"</span><span class="token operator">:</span> <span class="token number">1863.4</span><br>    <span class="token punctuation">}</span><br>  <span class="token punctuation">]</span><span class="token punctuation">,</span><br>  <span class="token punctuation">[</span><br>    <span class="token punctuation">{</span><br>      <span class="token property">"ShippedDate"</span><span class="token operator">:</span> <span class="token string">"1997-01-16T00:00:00Z"</span><span class="token punctuation">,</span><br>      <span class="token property">"OrderID"</span><span class="token operator">:</span> <span class="token number">10380</span><span class="token punctuation">,</span><br>      <span class="token property">"Subtotal"</span><span class="token operator">:</span> <span class="token number">1313.82</span><br>    <span class="token punctuation">}</span><span class="token punctuation">,</span><br>    <span class="token punctuation">{</span><br>      <span class="token property">"ShippedDate"</span><span class="token operator">:</span> <span class="token string">"1997-01-01T00:00:00Z"</span><span class="token punctuation">,</span><br>      <span class="token property">"OrderID"</span><span class="token operator">:</span> <span class="token number">10392</span><span class="token punctuation">,</span><br>      <span class="token property">"Subtotal"</span><span class="token operator">:</span> <span class="token number">1440</span><br>    <span class="token punctuation">}</span><br>  <span class="token punctuation">]</span><span class="token punctuation">,</span><br>  <span class="token punctuation">[</span><br>    <span class="token punctuation">{</span><br>      <span class="token property">"ShippedDate"</span><span class="token operator">:</span> <span class="token string">"1998-01-02T00:00:00Z"</span><span class="token punctuation">,</span><br>      <span class="token property">"OrderID"</span><span class="token operator">:</span> <span class="token number">10771</span><span class="token punctuation">,</span><br>      <span class="token property">"Subtotal"</span><span class="token operator">:</span> <span class="token number">344</span><br>    <span class="token punctuation">}</span><span class="token punctuation">,</span><br>    <span class="token punctuation">{</span><br>      <span class="token property">"ShippedDate"</span><span class="token operator">:</span> <span class="token string">"1998-01-21T00:00:00Z"</span><span class="token punctuation">,</span><br>      <span class="token property">"OrderID"</span><span class="token operator">:</span> <span class="token number">10777</span><span class="token punctuation">,</span><br>      <span class="token property">"Subtotal"</span><span class="token operator">:</span> <span class="token number">224</span><br>    <span class="token punctuation">}</span><br>  <span class="token punctuation">]</span><br><span class="token punctuation">]</span></code></pre>
<p>This is a nice illustration of the array of arrays structure we talked about earlier. There's a subarray for the objects for each year.</p>
<h3>Totalling the values</h3>
<p>Now the data is in the right &quot;shape&quot;, it's time to focus on summing the <code>Subtotal</code> values within each subarray.</p>
<pre class="language-bash"><code class="language-bash">jq <span class="token punctuation">\</span><br>  <span class="token string">'.value<br>  | group_by(.ShippedDate[:4])<br>  | map(map(.Subtotal))'</span> <span class="token punctuation">\</span><br>  subset.json</code></pre>
<p>This produces the following:</p>
<pre class="language-bash"><code class="language-bash"><span class="token punctuation">[</span><br>  <span class="token punctuation">[</span><br>    <span class="token number">440</span>,<br>    <span class="token number">1863.4</span><br>  <span class="token punctuation">]</span>,<br>  <span class="token punctuation">[</span><br>    <span class="token number">1313.82</span>,<br>    <span class="token number">1440</span><br>  <span class="token punctuation">]</span>,<br>  <span class="token punctuation">[</span><br>    <span class="token number">344</span>,<br>    <span class="token number">224</span><br>  <span class="token punctuation">]</span><br><span class="token punctuation">]</span></code></pre>
<p>Note the nested calls to <code>map</code>, i.e. <code>map(map(...)</code>. This is because the outer <code>map</code> processes the outer array, and passes each element (each of which are also arrays - the by-year subarrays) to the function specified, which is also <code>map</code>, which processes (in turn) each inner array, which contain the objects. The simple filter <code>.Subtotal</code> will just return the value of the <code>Subtotal</code> property, so we see a list of lists of subtotals, remembering that we've got two for each of the three years.</p>
<p>So we have an array of arrays of subtotal values. As a next step let's add these grouped subtotal values together, using <a href="https://stedolan.github.io/jq/manual/#add">add</a> (which is a filter that operates on arrays). While we're at it, we'll use <a href="https://stedolan.github.io/jq/manual/#floor">floor</a> to hard round down to the nearest whole number:</p>
<pre class="language-bash"><code class="language-bash">jq <span class="token punctuation">\</span><br>  <span class="token string">'.value<br>  | group_by(.ShippedDate[:4])<br>  | map(map(.Subtotal) | add | floor)'</span> <span class="token punctuation">\</span><br>  subset.json</code></pre>
<p>This produces the following:</p>
<pre class="language-bash"><code class="language-bash"><span class="token punctuation">[</span><br>  <span class="token number">2303</span>,<br>  <span class="token number">2753</span>,<br>  <span class="token number">568</span><br><span class="token punctuation">]</span></code></pre>
<h3>Adding the year</h3>
<p>Almost there - but it's not that useful without the year. To get the structure we want, which is an array of arrays each containing the year and total, we'll need to add the year, and enclose that, with the total, in an array:</p>
<pre class="language-bash"><code class="language-bash">jq <span class="token punctuation">\</span><br>  <span class="token string">'.value<br>  | group_by(.ShippedDate[:4])<br>  | map([<br>      first.ShippedDate[:4],<br>      (map(.Subtotal) | add | floor)<br>    ])'</span> <span class="token punctuation">\</span><br>  subset.json</code></pre>
<p>We've expanded what's passed to the outer <code>map</code> function to the following:</p>
<pre class="language-jq"><code class="language-jq"><span class="token punctuation">[</span><br>  first<span class="token punctuation">.</span>ShippedDate<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span><br>  <span class="token punctuation">(</span><span class="token c-style-function function">map</span><span class="token punctuation">(</span><span class="token punctuation">.</span>Subtotal<span class="token punctuation">)</span> <span class="token operator pipe">|</span> add <span class="token operator pipe">|</span> floor<span class="token punctuation">)</span><br><span class="token punctuation">]</span></code></pre>
<p>What's happening here is that we're using <a href="https://stedolan.github.io/jq/manual/#Arrayconstruction:%5B%5D">array construction</a> (<code>[...]</code>) to produce an array, with two elements, starting with the value of <code>first.ShippedDate[:4]</code>.</p>
<p>Each of the expressions in this array construction receives an array (one of the year-specific subarrays), but for our first element we only want the value from one of the elements in the incoming array, so we can use the <a href="https://stedolan.github.io/jq/manual/#first,last,nth(n)">first</a> function to do that. This is a lovely bit of syntactic sugar through a definition, along with definitions for its siblings <code>last</code> and <code>nth</code>, in <a href="https://github.com/stedolan/jq/blob/a9f97e9e61a910a374a5d768244e8ad63f407d3e/src/builtin.jq#L187-L189">builtin.jq</a>:</p>
<pre class="language-jq"><code class="language-jq"><span class="token keyword">def</span> <span class="token function">first</span><span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><br><span class="token keyword">def</span> <span class="token function">last</span><span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><br><span class="token keyword">def</span> <span class="token function">nth</span><span class="token punctuation">(</span><span class="token variable">$n</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token variable">$n</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre>
<p>I'm tempted to want to define another function <code>rest</code> thus:</p>
<pre class="language-jq"><code class="language-jq"><span class="token keyword">def</span> <span class="token function">rest</span><span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre>
<p>See <a href="https://qmacro.org/blog/posts/2017/02/19/the-beauty-of-recursion-and-list-machinery/">The beauty of recursion and list machinery</a> for why - in particular, a slight obsession about <code>x:xs</code>, first and rest, head and tail, and so on.</p>
<p>But I digress.</p>
<p>The second element in the constructed array, i.e. <code>(map(.Subtotal) | add | floor)</code>, is the same as before, except that it's now surrounded in parentheses to ensure the whole thing is evaluated in one go (specifically, so that it's only the <code>map(.Subtotal)</code> that gets passed through those pipes to <code>add</code> and <code>floor</code>, and not anything else).</p>
<p>So this is where we've ended up:</p>
<pre class="language-bash"><code class="language-bash">jq <span class="token punctuation">\</span><br>  <span class="token string">'.value<br>  | group_by(.ShippedDate[:4])<br>  | map([<br>      first.ShippedDate[:4],<br>      (map(.Subtotal) | add | floor)<br>    ])'</span> <span class="token punctuation">\</span><br>  subset.json</code></pre>
<p>Running this produces the desired result:</p>
<pre class="language-json"><code class="language-json"><span class="token punctuation">[</span><br>  <span class="token punctuation">[</span><br>    <span class="token string">"1996"</span><span class="token punctuation">,</span><br>    <span class="token number">2303</span><br>  <span class="token punctuation">]</span><span class="token punctuation">,</span><br>  <span class="token punctuation">[</span><br>    <span class="token string">"1997"</span><span class="token punctuation">,</span><br>    <span class="token number">2753</span><br>  <span class="token punctuation">]</span><span class="token punctuation">,</span><br>  <span class="token punctuation">[</span><br>    <span class="token string">"1998"</span><span class="token punctuation">,</span><br>    <span class="token number">568</span><br>  <span class="token punctuation">]</span><br><span class="token punctuation">]</span></code></pre>
<p>Very nice!</p>
<p>▶ You can see how this result is achieved in this jqplay snippet: <a href="https://jqplay.org/s/TRVd7ttVjmc">Producing the 'array' style final result</a>.</p>
<h3>An alternative result structure</h3>
<p>As alternative way of representing the totals by year, and knowing that the year values are stable enough to be property names in objects, we could instead go for something like this:</p>
<pre class="language-json"><code class="language-json"><span class="token punctuation">{</span><br>  <span class="token property">"1996"</span><span class="token operator">:</span> <span class="token number">2303</span><span class="token punctuation">,</span><br>  <span class="token property">"1997"</span><span class="token operator">:</span> <span class="token number">2753</span><span class="token punctuation">,</span><br>  <span class="token property">"1998"</span><span class="token operator">:</span> <span class="token number">568</span><br><span class="token punctuation">}</span></code></pre>
<p>To get this, it's not much of a departure from what we previously ended up with. First, instead of using array construction (<code>[...]</code>) we can use <a href="https://stedolan.github.io/jq/manual/#Objectconstruction:%5B%5D">object construction</a>. As expected, we need to specify the property name and value, in this form:</p>
<pre><code>property: value
</code></pre>
<p>Let's make that change, noting that because the expression for the property (the key) is not &quot;identifier-like&quot;, i.e. it's an expression to be evaluated, we need to enclose it in parentheses like this: <code>(first.ShippedDate[:4])</code>. Here we go:</p>
<pre class="language-bash"><code class="language-bash">jq <span class="token punctuation">\</span><br>  <span class="token string">'.value<br>  | group_by(.ShippedDate[:4])<br>  | map({<br>      (first.ShippedDate[:4]): map(.Subtotal)|add|floor<br>    })'</span> <span class="token punctuation">\</span><br>  subset.json</code></pre>
<p>This produces almost but not quite what we want:</p>
<pre class="language-bash"><code class="language-bash"><span class="token punctuation">[</span><br>  <span class="token punctuation">{</span><br>    <span class="token string">"1996"</span><span class="token builtin class-name">:</span> <span class="token number">2303</span><br>  <span class="token punctuation">}</span>,<br>  <span class="token punctuation">{</span><br>    <span class="token string">"1997"</span><span class="token builtin class-name">:</span> <span class="token number">2753</span><br>  <span class="token punctuation">}</span>,<br>  <span class="token punctuation">{</span><br>    <span class="token string">"1998"</span><span class="token builtin class-name">:</span> <span class="token number">568</span><br>  <span class="token punctuation">}</span><br><span class="token punctuation">]</span></code></pre>
<p>But that's OK, because the more you get the feel for how <code>jq</code> behaves, the more you'll likely guess that there'll be a simple way to merge these objects. And there is - the versatile <a href="https://stedolan.github.io/jq/manual/#add">add</a> filter. We've used <code>add</code> already to sum up an array of numeric values (the subtotals) but &quot;adding&quot; an array of objects together merges them.</p>
<p>So let's pipe the output of the <code>map({...})</code> into add:</p>
<pre class="language-bash"><code class="language-bash">jq <span class="token punctuation">\</span><br>  <span class="token string">'.value<br>  | group_by(.ShippedDate[:4])<br>  | map({<br>      (first.ShippedDate[:4]): map(.Subtotal)|add|floor<br>    }) | add'</span> <span class="token punctuation">\</span><br>  subset.json</code></pre>
<p>This merges the three year:total pairs from the three objects into a single object, and thus gives us what we want:</p>
<pre class="language-json"><code class="language-json"><span class="token punctuation">{</span><br>  <span class="token property">"1996"</span><span class="token operator">:</span> <span class="token number">2303</span><span class="token punctuation">,</span><br>  <span class="token property">"1997"</span><span class="token operator">:</span> <span class="token number">2753</span><span class="token punctuation">,</span><br>  <span class="token property">"1998"</span><span class="token operator">:</span> <span class="token number">568</span><br><span class="token punctuation">}</span></code></pre>
<p>Lovely!</p>
<p>▶ You can see how this alternative result is achieved in this jqplay snippet: <a href="https://jqplay.org/s/LJzeX3oH64M">Producing the 'array' style final result</a>.</p>
<h2>Summing up</h2>
<p>This turned out (again) to be a slightly longer post than expected, but in writing it, and in manipulating the source data, I've learned more about <code>jq</code>. So that's a result. I hope this helps you too.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Reshaping data values using jq&#39;s with_entries</title>
      <link href="https://qmacro.org/blog/posts/2022/05/30/reshaping-data-values-using-jq&#39;s-with_entries/"/>
      <updated>2022-05-30T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2022/05/30/reshaping-data-values-using-jq&#39;s-with_entries/</id>
      <content type="html">
        <![CDATA[
      <p>Receipt of a JSON file containing valid tags for tutorial metadata gave me the perfect opportunity to explore it and learn a bit more jq in the process.</p>
<p>For each of our <a href="https://github.com/SAP-tutorials">tutorials</a> in SAP's <a href="https://developers.sap.com/tutorial-navigator.html">Tutorial Navigator</a>, we have metadata in the frontmatter. Here's <a href="https://github.com/sap-tutorials/Tutorials/blob/5c282ddec1cb15f3d8d5c6e0814ad9a8c94ee0f2/tutorials/odata-01-intro-origins/odata-01-intro-origins.md">an example</a> from the <a href="https://developers.sap.com/tutorials/odata-01-intro-origins.html">Learn About OData Fundamentals</a> tutorial:</p>
<pre class="language-markdown"><code class="language-markdown">author_name: DJ Adams<br>author_profile: https://github.com/qmacro<br>title: Learn about OData Fundamentals<br>description: Discover OData's origins and learn about the fundamentals of OData by exploring a public OData service.<br>auto_validation: false<br>primary_tag: software-product>sap-business-technology-platform<br>tags: [ software-product>sap-business-technology-platform, topic>cloud, programming-tool>odata, tutorial>beginner ]<br>time: 15</code></pre>
<p>I received a JSON file with updated valid tags, against which I could check the values for the <code>primary_tag</code> and <code>tags</code> properties. The tags were arranged like this (drastically reduced to save space here):</p>
<pre class="language-json"><code class="language-json"><span class="token punctuation">{</span><br>  <span class="token property">"level"</span><span class="token operator">:</span> <span class="token punctuation">[</span><br>    <span class="token punctuation">{</span><br>      <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Beginner"</span><span class="token punctuation">,</span><br>      <span class="token property">"value"</span><span class="token operator">:</span> <span class="token string">" tutorial>beginner"</span><br>    <span class="token punctuation">}</span><span class="token punctuation">,</span><br>    <span class="token punctuation">{</span><br>      <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Intermediate"</span><span class="token punctuation">,</span><br>      <span class="token property">"value"</span><span class="token operator">:</span> <span class="token string">" tutorial>intermediate"</span><br>    <span class="token punctuation">}</span><span class="token punctuation">,</span><br>    <span class="token punctuation">{</span><br>      <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Advanced"</span><span class="token punctuation">,</span><br>      <span class="token property">"value"</span><span class="token operator">:</span> <span class="token string">" tutorial>advanced"</span><br>    <span class="token punctuation">}</span><br>  <span class="token punctuation">]</span><span class="token punctuation">,</span><br>  <span class="token property">"common"</span><span class="token operator">:</span> <span class="token punctuation">[</span><br>    <span class="token punctuation">{</span><br>      <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"ABAP Connectivity"</span><span class="token punctuation">,</span><br>      <span class="token property">"value"</span><span class="token operator">:</span> <span class="token string">"topic>abap-connectivity"</span><br>    <span class="token punctuation">}</span><span class="token punctuation">,</span><br>    <span class="token punctuation">{</span><br>      <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"ABAP Development"</span><span class="token punctuation">,</span><br>      <span class="token property">"value"</span><span class="token operator">:</span> <span class="token string">"programming-tool>abap-development"</span><br>    <span class="token punctuation">}</span><span class="token punctuation">,</span><br>    <span class="token punctuation">{</span><br>      <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"ABAP Extensibility"</span><span class="token punctuation">,</span><br>      <span class="token property">"value"</span><span class="token operator">:</span> <span class="token string">"programming-tool>abap-extensibility"</span><br>    <span class="token punctuation">}</span><span class="token punctuation">,</span><br>    <span class="token punctuation">{</span><br>      <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Android"</span><span class="token punctuation">,</span><br>      <span class="token property">"value"</span><span class="token operator">:</span> <span class="token string">"operating-system>android"</span><br>    <span class="token punctuation">}</span><span class="token punctuation">,</span><br>    <span class="token punctuation">{</span><br>      <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Artificial Intelligence"</span><span class="token punctuation">,</span><br>      <span class="token property">"value"</span><span class="token operator">:</span> <span class="token string">"topic>artificial-intelligence"</span><br>    <span class="token punctuation">}</span><span class="token punctuation">,</span><br>    <span class="token punctuation">{</span><br>      <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Big Data"</span><span class="token punctuation">,</span><br>      <span class="token property">"value"</span><span class="token operator">:</span> <span class="token string">"topic>big-data"</span><br>    <span class="token punctuation">}</span><br>  <span class="token punctuation">]</span><br><span class="token punctuation">}</span></code></pre>
<p>I wanted to explore the tags by &quot;category&quot;, the part before the <code>&gt;</code> symbol in the <code>value</code> properties. In the above excerpt (in the <code>common</code> object, which is where the main list of tags are), there are the following categories: <code>topic</code>, <code>programming-tool</code> and <code>operating-system</code>.</p>
<h2>Separating tags from categories with split</h2>
<p>First, I used <a href="https://stedolan.github.io/jq/manual/#split(str)">split</a> to separate out the categories and tags by splitting on the <code>&gt;</code> symbol in each of the values.</p>
<pre class="language-jq"><code class="language-jq"><span class="token punctuation">.</span>common<br><span class="token operator pipe">|</span> <span class="token c-style-function function">map</span><span class="token punctuation">(</span><span class="token punctuation">.</span>value <span class="token operator pipe">|</span> <span class="token c-style-function function">split</span><span class="token punctuation">(</span><span class="token string">">"</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>
<p>This produces an array of arrays. The outer array is the result of running <code>map</code> (which takes an array and produces an array) and the inner arrays are the result of running <code>split</code> on each <code>category&gt;tag</code> pattern in the <code>value</code> properties:</p>
<pre class="language-json"><code class="language-json"><span class="token punctuation">[</span><br>  <span class="token punctuation">[</span><br>    <span class="token string">"topic"</span><span class="token punctuation">,</span><br>    <span class="token string">"abap-connectivity"</span><br>  <span class="token punctuation">]</span><span class="token punctuation">,</span><br>  <span class="token punctuation">[</span><br>    <span class="token string">"programming-tool"</span><span class="token punctuation">,</span><br>    <span class="token string">"abap-development"</span><br>  <span class="token punctuation">]</span><span class="token punctuation">,</span><br>  <span class="token punctuation">[</span><br>    <span class="token string">"programming-tool"</span><span class="token punctuation">,</span><br>    <span class="token string">"abap-extensibility"</span><br>  <span class="token punctuation">]</span><span class="token punctuation">,</span><br>  <span class="token punctuation">[</span><br>    <span class="token string">"operating-system"</span><span class="token punctuation">,</span><br>    <span class="token string">"android"</span><br>  <span class="token punctuation">]</span><span class="token punctuation">,</span><br>  <span class="token punctuation">[</span><br>    <span class="token string">"topic"</span><span class="token punctuation">,</span><br>    <span class="token string">"artificial-intelligence"</span><br>  <span class="token punctuation">]</span><span class="token punctuation">,</span><br>  <span class="token punctuation">[</span><br>    <span class="token string">"topic"</span><span class="token punctuation">,</span><br>    <span class="token string">"big-data"</span><br><span class="token punctuation">]</span></code></pre>
<h2>Grouping by categories with group_by</h2>
<p>The categories are the first values in each of the inner arrays, so next is to group the inner arrays by those categories:</p>
<pre class="language-jq"><code class="language-jq"><span class="token punctuation">.</span>common<br><span class="token operator pipe">|</span> <span class="token c-style-function function">map</span><span class="token punctuation">(</span><span class="token punctuation">.</span>value <span class="token operator pipe">|</span> <span class="token c-style-function function">split</span><span class="token punctuation">(</span><span class="token string">">"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><br><span class="token operator pipe">|</span> <span class="token c-style-function function">group_by</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre>
<p>The <code>.[0]</code> supplied to <code>group_by</code> specifies that it's the first element of each inner array that should be the basis of grouping (i.e. the categories <code>topic</code>, <code>programming-tool</code>, <code>programming-tool</code>, etc).</p>
<p>This produces a differently shaped nesting of arrays, one for each of the categories:</p>
<pre class="language-json"><code class="language-json"><span class="token punctuation">[</span><br>  <span class="token punctuation">[</span><br>    <span class="token punctuation">[</span><br>      <span class="token string">"operating-system"</span><span class="token punctuation">,</span><br>      <span class="token string">"android"</span><br>    <span class="token punctuation">]</span><br>  <span class="token punctuation">]</span><span class="token punctuation">,</span><br>  <span class="token punctuation">[</span><br>    <span class="token punctuation">[</span><br>      <span class="token string">"programming-tool"</span><span class="token punctuation">,</span><br>      <span class="token string">"abap-development"</span><br>    <span class="token punctuation">]</span><span class="token punctuation">,</span><br>    <span class="token punctuation">[</span><br>      <span class="token string">"programming-tool"</span><span class="token punctuation">,</span><br>      <span class="token string">"abap-extensibility"</span><br>    <span class="token punctuation">]</span><br>  <span class="token punctuation">]</span><span class="token punctuation">,</span><br>  <span class="token punctuation">[</span><br>    <span class="token punctuation">[</span><br>      <span class="token string">"topic"</span><span class="token punctuation">,</span><br>      <span class="token string">"abap-connectivity"</span><br>    <span class="token punctuation">]</span><span class="token punctuation">,</span><br>    <span class="token punctuation">[</span><br>      <span class="token string">"topic"</span><span class="token punctuation">,</span><br>      <span class="token string">"artificial-intelligence"</span><br>    <span class="token punctuation">]</span><span class="token punctuation">,</span><br>    <span class="token punctuation">[</span><br>      <span class="token string">"topic"</span><span class="token punctuation">,</span><br>      <span class="token string">"big-data"</span><br>    <span class="token punctuation">]</span><br>  <span class="token punctuation">]</span><br><span class="token punctuation">]</span></code></pre>
<h2>Reforming the structure with the entries functions</h2>
<p>Now comes the task to reform that essential structure into something a little less &quot;noisy&quot;. Using the <a href="https://stedolan.github.io/jq/manual/#to_entries,from_entries,with_entries">entries family</a> of functions, this turned out to be quite straightforward. That said, I'll explain the intermediate steps I went through on the way.</p>
<h3>Getting from an array-based to an object-based structure with to_entries</h3>
<p>As I wanted an object, with the keys being categories, and the values being arrays of tag strings, it felt right to reach for the <code>to_entries</code> function:</p>
<pre class="language-jq"><code class="language-jq"><span class="token punctuation">.</span>common<br><span class="token operator pipe">|</span> <span class="token c-style-function function">map</span><span class="token punctuation">(</span><span class="token punctuation">.</span>value <span class="token operator pipe">|</span> <span class="token c-style-function function">split</span><span class="token punctuation">(</span><span class="token string">">"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><br><span class="token operator pipe">|</span> <span class="token c-style-function function">group_by</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><br><span class="token operator pipe">|</span> to_entries</code></pre>
<p>This produced the following:</p>
<pre class="language-json"><code class="language-json"><span class="token punctuation">[</span><br>  <span class="token punctuation">{</span><br>    <span class="token property">"key"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span><br>    <span class="token property">"value"</span><span class="token operator">:</span> <span class="token punctuation">[</span><br>      <span class="token punctuation">[</span><br>        <span class="token string">"operating-system"</span><span class="token punctuation">,</span><br>        <span class="token string">"android"</span><br>      <span class="token punctuation">]</span><br>    <span class="token punctuation">]</span><br>  <span class="token punctuation">}</span><span class="token punctuation">,</span><br>  <span class="token punctuation">{</span><br>    <span class="token property">"key"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span><br>    <span class="token property">"value"</span><span class="token operator">:</span> <span class="token punctuation">[</span><br>      <span class="token punctuation">[</span><br>        <span class="token string">"programming-tool"</span><span class="token punctuation">,</span><br>        <span class="token string">"abap-development"</span><br>      <span class="token punctuation">]</span><span class="token punctuation">,</span><br>      <span class="token punctuation">[</span><br>        <span class="token string">"programming-tool"</span><span class="token punctuation">,</span><br>        <span class="token string">"abap-extensibility"</span><br>      <span class="token punctuation">]</span><br>    <span class="token punctuation">]</span><br>  <span class="token punctuation">}</span><span class="token punctuation">,</span><br>  <span class="token punctuation">{</span><br>    <span class="token property">"key"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span><br>    <span class="token property">"value"</span><span class="token operator">:</span> <span class="token punctuation">[</span><br>      <span class="token punctuation">[</span><br>        <span class="token string">"topic"</span><span class="token punctuation">,</span><br>        <span class="token string">"abap-connectivity"</span><br>      <span class="token punctuation">]</span><span class="token punctuation">,</span><br>      <span class="token punctuation">[</span><br>        <span class="token string">"topic"</span><span class="token punctuation">,</span><br>        <span class="token string">"artificial-intelligence"</span><br>      <span class="token punctuation">]</span><span class="token punctuation">,</span><br>      <span class="token punctuation">[</span><br>        <span class="token string">"topic"</span><span class="token punctuation">,</span><br>        <span class="token string">"big-data"</span><br>      <span class="token punctuation">]</span><br>    <span class="token punctuation">]</span><br>  <span class="token punctuation">}</span><br><span class="token punctuation">]</span></code></pre>
<h3>Tidying up with object construction in a map</h3>
<p>That is sort of the direction I want to go, but there's some tidying up to do, to get cleaner values for <code>key</code> and <code>value</code>. So I reached for <code>map</code> to do this:</p>
<pre class="language-jq"><code class="language-jq"><span class="token punctuation">.</span>common<br><span class="token operator pipe">|</span> <span class="token c-style-function function">map</span><span class="token punctuation">(</span><span class="token punctuation">.</span>value <span class="token operator pipe">|</span> <span class="token c-style-function function">split</span><span class="token punctuation">(</span><span class="token string">">"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><br><span class="token operator pipe">|</span> <span class="token c-style-function function">group_by</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><br><span class="token operator pipe">|</span> to_entries<br><span class="token operator pipe">|</span> <span class="token c-style-function function">map</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token property-literal property">key</span><span class="token punctuation">:</span> <span class="token punctuation">.</span>value<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token property-literal property">value</span><span class="token punctuation">:</span> <span class="token punctuation">.</span>value<span class="token operator pipe">|</span><span class="token c-style-function function">map</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>
<p>The expression passed to <code>map</code> is the <a href="https://stedolan.github.io/jq/manual/#ObjectConstruction:%7B%7D">object construction</a> (<code>{...}</code>), creating objects each with two properties, <code>key</code> and <code>value</code>. The reason for staying with these property names will become clear shortly.</p>
<p>The value for <code>key</code> is expressed as <code>.value[0][0]</code>, i.e. the first (zeroth) element of the inner array that is the first (zeroth) element of the array that is the value of the <code>value</code> property.</p>
<p>In other words, given the last object in the above most recent intermediate results:</p>
<pre class="language-json"><code class="language-json">  <span class="token punctuation">{</span><br>    <span class="token property">"key"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span><br>    <span class="token property">"value"</span><span class="token operator">:</span> <span class="token punctuation">[</span><br>      <span class="token punctuation">[</span><br>        <span class="token string">"topic"</span><span class="token punctuation">,</span><br>        <span class="token string">"abap-connectivity"</span><br>      <span class="token punctuation">]</span><span class="token punctuation">,</span><br>      <span class="token punctuation">[</span><br>        <span class="token string">"topic"</span><span class="token punctuation">,</span><br>        <span class="token string">"artificial-intelligence"</span><br>      <span class="token punctuation">]</span><span class="token punctuation">,</span><br>      <span class="token punctuation">[</span><br>        <span class="token string">"topic"</span><span class="token punctuation">,</span><br>        <span class="token string">"big-data"</span><br>      <span class="token punctuation">]</span><br>    <span class="token punctuation">]</span><br>  <span class="token punctuation">}</span></code></pre>
<p>Then <code>.value[0][0]</code> will return <code>&quot;topic&quot;</code> (specifically, the first instance of that string in the above JSON).</p>
<p>Similarly, to build the value for the new <code>value</code> property in the object being constructed, I used this expression: <code>.value|map(.[1])</code>. The current value of the <code>value</code> property is an array, so using <code>map</code> on that will produce another array. Of what? Well, of these values: <code>.[1]</code>.</p>
<p>In other words, the second (index 1) value in each of the sub arrays. Given this same last object example above, <code>.value|map(.[1])</code> produces <code>[&quot;abap-connectivity&quot;, &quot;artificial-intelligence&quot;, &quot;big-data&quot;]</code>.</p>
<p>Running this latest iteration with the <code>map</code> function produces this:</p>
<pre class="language-json"><code class="language-json"><span class="token punctuation">[</span><br>  <span class="token punctuation">{</span><br>    <span class="token property">"key"</span><span class="token operator">:</span> <span class="token string">"operating-system"</span><span class="token punctuation">,</span><br>    <span class="token property">"value"</span><span class="token operator">:</span> <span class="token punctuation">[</span><br>      <span class="token string">"android"</span><br>    <span class="token punctuation">]</span><br>  <span class="token punctuation">}</span><span class="token punctuation">,</span><br>  <span class="token punctuation">{</span><br>    <span class="token property">"key"</span><span class="token operator">:</span> <span class="token string">"programming-tool"</span><span class="token punctuation">,</span><br>    <span class="token property">"value"</span><span class="token operator">:</span> <span class="token punctuation">[</span><br>      <span class="token string">"abap-development"</span><span class="token punctuation">,</span><br>      <span class="token string">"abap-extensibility"</span><br>    <span class="token punctuation">]</span><br>  <span class="token punctuation">}</span><span class="token punctuation">,</span><br>  <span class="token punctuation">{</span><br>    <span class="token property">"key"</span><span class="token operator">:</span> <span class="token string">"topic"</span><span class="token punctuation">,</span><br>    <span class="token property">"value"</span><span class="token operator">:</span> <span class="token punctuation">[</span><br>      <span class="token string">"abap-connectivity"</span><span class="token punctuation">,</span><br>      <span class="token string">"artificial-intelligence"</span><span class="token punctuation">,</span><br>      <span class="token string">"big-data"</span><br>    <span class="token punctuation">]</span><br>  <span class="token punctuation">}</span><br><span class="token punctuation">]</span></code></pre>
<p>Almost there!</p>
<h2>Creating a neat structure with from_entries</h2>
<p><a href="https://stedolan.github.io/jq/manual/#to_entries,from_entries,with_entries">According to the manual</a>, the <code>to_entries</code> and <code>from_entries</code> &quot;convert between an object and array of key-value pairs&quot;. In each case, the name for the key and value properties are <code>key</code> and <code>value</code> respectively. I had an inkling I would probably want to use <code>from_entries</code> at some stage, and this is the reason why I kept the names of the properties earlier.</p>
<p>Let's have a look what passing the above structure into <code>from_entries</code> produces:</p>
<pre class="language-jq"><code class="language-jq"><span class="token punctuation">.</span>common<br><span class="token operator pipe">|</span> <span class="token c-style-function function">map</span><span class="token punctuation">(</span><span class="token punctuation">.</span>value <span class="token operator pipe">|</span> <span class="token c-style-function function">split</span><span class="token punctuation">(</span><span class="token string">">"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><br><span class="token operator pipe">|</span> <span class="token c-style-function function">group_by</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><br><span class="token operator pipe">|</span> to_entries<br><span class="token operator pipe">|</span> <span class="token c-style-function function">map</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token property-literal property">key</span><span class="token punctuation">:</span> <span class="token punctuation">.</span>value<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token property-literal property">value</span><span class="token punctuation">:</span> <span class="token punctuation">.</span>value<span class="token operator pipe">|</span><span class="token c-style-function function">map</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><br><span class="token operator pipe">|</span> from_entries</code></pre>
<p>It's this:</p>
<pre class="language-json"><code class="language-json"><span class="token punctuation">{</span><br>  <span class="token property">"operating-system"</span><span class="token operator">:</span> <span class="token punctuation">[</span><br>    <span class="token string">"android"</span><br>  <span class="token punctuation">]</span><span class="token punctuation">,</span><br>  <span class="token property">"programming-tool"</span><span class="token operator">:</span> <span class="token punctuation">[</span><br>    <span class="token string">"abap-development"</span><span class="token punctuation">,</span><br>    <span class="token string">"abap-extensibility"</span><br>  <span class="token punctuation">]</span><span class="token punctuation">,</span><br>  <span class="token property">"topic"</span><span class="token operator">:</span> <span class="token punctuation">[</span><br>    <span class="token string">"abap-connectivity"</span><span class="token punctuation">,</span><br>    <span class="token string">"artificial-intelligence"</span><span class="token punctuation">,</span><br>    <span class="token string">"big-data"</span><br>  <span class="token punctuation">]</span><br><span class="token punctuation">}</span></code></pre>
<p>That's very nice, and pretty much exactly what I want. A neat and low-noise representation of the category and tag structure.</p>
<h2>Refactoring with with_entries</h2>
<p>It turns out that the pattern:</p>
<pre><code>to_entries -&gt; map(...) -&gt; from_entries
</code></pre>
<p>is common enough to have a function expression all of its own, and it's <code>with_entries</code>. As detailed in the <a href="https://stedolan.github.io/jq/manual/#to_entries,from_entries,with_entries">entries section of the manual</a>:</p>
<blockquote>
<p><code>with_entries(foo)</code> is shorthand for <code>to_entries | map(foo) | from_entries</code></p>
</blockquote>
<p>In fact, we can see how it's defined (which is exactly as described in the manual) <a href="https://github.com/stedolan/jq/tree/a9f97e9e61a910a374a5d768244e8ad63f407d3e">in builtin.jq</a>, along with <code>to_entries</code> and <code>from_entries</code>.</p>
<h2>Wrapping up</h2>
<p>While I've played around a little with the <a href="https://stedolan.github.io/jq/manual/#to_entries,from_entries,with_entries">entries family</a>, this is the first time I've used it for real. Going through the intermediate process of finding myself using <code>map</code> actually has helped me reflect on <code>with_entries</code> very well.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Multiple level filters in jq</title>
      <link href="https://qmacro.org/blog/posts/2022/05/28/multiple-level-filters-in-jq/"/>
      <updated>2022-05-28T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2022/05/28/multiple-level-filters-in-jq/</id>
      <content type="html">
        <![CDATA[
      <p>Here's another note-to-self on using jq to shape JSON representations of OData to match what's returned using system query options. Thsi time it's all filtering at two levels.</p>
<p>In the <a href="https://www.youtube.com/watch?v=Bln2A0_OauY&amp;list=PL6RpkC85SLQABOpzhd7WI-hMpy99PxUo0&amp;index=3">Back to basics: OData - the Open Data Protocol - Part 3 - System query options</a> live stream last Friday we looked at OData's system query options.</p>
<p>There was a question at the end about whether it was possible to use the <code>$filter</code> system query option at multiple levels, in an <code>$expand</code> context. I wrote up the question, and a detailed answer (summary: yes) with an example here: <a href="https://github.com/SAP-samples/odata-basics-handsonsapdev/issues/8">Can $filter be applied at multiple levels in an expand?</a>.</p>
<p>I thought this would be another good opportunity to practise a bit of <code>jq</code> this Saturday late morning, so wondered what a <code>jq</code> filter would look like, one that would produce the same result as in the answer's example (showing suppliers only from the UK, and only including their products that were low in stock).</p>
<p>The OData URL for this request looks like this:</p>
<pre><code>http://localhost:4004/northwind-model/Suppliers
  ?$filter=Country eq 'UK'
  &amp;$expand=Products($filter=UnitsInStock le 15)
</code></pre>
<p>It turned out to be pretty simple. First, I grabbed the basic data:</p>
<pre class="language-bash"><code class="language-bash"><span class="token function">curl</span> <span class="token punctuation">\</span><br>  <span class="token string">'http://localhost:8000/northwind-model/Suppliers?$expand=Products'</span> <span class="token punctuation">\</span><br>  <span class="token operator">></span> data.json</code></pre>
<blockquote>
<p>Incidentally, here's another example of the power of OData, being able to fetch data from related resources, in the same single request (see <a href="https://www.youtube.com/clip/Ugkxp6b9vNpSL44Xd9JevC7zmG5Tj9VOCLTq">Nonsense! Absolute nonsense!</a> for a deliberately provocative take on how some folks are so attracted to shiny new things they ignore what is already there).</p>
</blockquote>
<p>Then I loaded it into <a href="https://sr.ht/~gpanders/ijq/">ijq</a>, the lovely interactive frontend to <code>jq</code>, and played around a bit.</p>
<p>Here's what I ended up with:</p>
<pre class="language-jq"><code class="language-jq"><span class="token punctuation">.</span>value<br><span class="token operator pipe">|</span> <span class="token c-style-function function">map</span><span class="token punctuation">(</span><br>    <span class="token c-style-function function">select</span><span class="token punctuation">(</span><span class="token punctuation">.</span>Country <span class="token operator">==</span> <span class="token string">"UK"</span><span class="token punctuation">)</span><br>    <span class="token operator pipe">|</span> <span class="token punctuation">.</span>Products <span class="token operator pipe">|=</span> <span class="token c-style-function function">map</span><span class="token punctuation">(</span><br>        <span class="token c-style-function function">select</span><span class="token punctuation">(</span><span class="token punctuation">.</span>UnitsInStock <span class="token operator">&lt;=</span> <span class="token number">15</span><span class="token punctuation">)</span><br>      <span class="token punctuation">)</span><br>  <span class="token punctuation">)</span></code></pre>
<p>Breaking this down, we have:</p>
<ul>
<li><code>.value</code> gives me the entire array of objects in the dataset, each one of which represents a supplier with all their products</li>
<li><code>map(...)</code> this outer <code>map</code> takes the array of supplier and product data and produces a new array, having processed each array element (each supplier with their products) with the filter expression supplied</li>
<li><code>select(.Country == &quot;UK&quot;)</code> this is the equivalent of the <code>$filter=Country eq UK</code> in the OData URL</li>
<li><code>.Products |= map(...)</code> the result of the previous <code>select</code> (i.e. each supplier that is in the UK) is then passed to this expression which uses the <a href="https://stedolan.github.io/jq/manual/#Update-assignment:%7C=">update assignment</a> (<code>|=</code>) to produce a modified version of the value of the <code>Products</code> property</li>
<li><code>select(.UnitsInStock &lt;= 15)</code> the value of the <code>Products</code> property is an array, because the <a href="https://github.com/SAP-samples/odata-basics-handsonsapdev/blob/8347ca89ad75df111b3ab05c245da840762398b4/db/schema.cds#L29">navigation property</a> between the <code>Suppliers</code> and <code>Products</code> entity types is defined as a one-to-many. This means it's appropriate to use another <code>select</code> filter to pick out specific elements (those with a value of 15 or less for the <code>UnitsInStock</code>). This is the equivalent of the <code>Products($filter=UnitsInStock le 15)</code> part of the OData URL</li>
</ul>
<p>One thing to note here is that there's a single outer <code>map</code>, the processing within which not only filters the suppliers, but subsequently filters the products of the (reduced number of) suppliers, in one pass.</p>
<p>Anyway, that's pretty much it for this note-to-self. I think it's time for an early afternoon beer at <a href="https://twitter.com/browtons">Browtons</a>. Cheers.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Products by supplier in OData and jq</title>
      <link href="https://qmacro.org/blog/posts/2022/05/21/products-by-supplier-in-odata-and-jq/"/>
      <updated>2022-05-21T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2022/05/21/products-by-supplier-in-odata-and-jq/</id>
      <content type="html">
        <![CDATA[
      <p>This is more of a note-to-self. I'm enjoying comparing resource requests in OData with the equivalent shaping with <code>jq</code>. Here's a simple example.</p>
<p>With the <a href="https://services.odata.org/v4/northwind/northwind.svc/">Northwind OData v4 service</a> there are <a href="https://services.odata.org/v4/northwind/northwind.svc/Products">Products</a> and <a href="https://services.odata.org/v4/northwind/northwind.svc/">Suppliers</a>. As an easy exercise I want to create a list of products by supplier.</p>
<h2>With OData</h2>
<p>With OData it's easy to follow the <code>Products</code> navigation property in the <code>Supplier</code> entity type (see the <a href="https://services.odata.org/v4/northwind/northwind.svc/$metadata">metadata</a> for more info) to the <code>Product</code> entity type.</p>
<p>With an OData QUERY operation it's straightforward, using the <code>$expand</code> and <code>$select</code> system query options (with extra whitespace for readability):</p>
<pre class="language-text"><code class="language-text">https://services.odata.org<br>  /v4/northwind/northwind.svc/Suppliers<br>  ?$expand=Products($select=ProductName)<br>  &$select=CompanyName</code></pre>
<p>You can <a href="https://services.odata.org/v4/northwind/northwind.svc/Suppliers?$expand=Products($select=ProductName)&amp;$select=CompanyName">try out this OData request directly</a>, and the JSON representation in the response looks something like this (shortened to the first two suppliers for brevity):</p>
<pre class="language-json"><code class="language-json"><span class="token punctuation">{</span><br>  <span class="token property">"@odata.context"</span><span class="token operator">:</span> <span class="token string">"https://services.odata.org/V4/Northwind/Northwind.svc/$metadata#Suppliers(CompanyName,Products,Products(ProductName))"</span><span class="token punctuation">,</span><br>  <span class="token property">"value"</span><span class="token operator">:</span> <span class="token punctuation">[</span><br>    <span class="token punctuation">{</span><br>      <span class="token property">"CompanyName"</span><span class="token operator">:</span> <span class="token string">"Exotic Liquids"</span><span class="token punctuation">,</span><br>      <span class="token property">"Products"</span><span class="token operator">:</span> <span class="token punctuation">[</span><br>        <span class="token punctuation">{</span><br>          <span class="token property">"ProductName"</span><span class="token operator">:</span> <span class="token string">"Chai"</span><br>        <span class="token punctuation">}</span><span class="token punctuation">,</span><br>        <span class="token punctuation">{</span><br>          <span class="token property">"ProductName"</span><span class="token operator">:</span> <span class="token string">"Chang"</span><br>        <span class="token punctuation">}</span><span class="token punctuation">,</span><br>        <span class="token punctuation">{</span><br>          <span class="token property">"ProductName"</span><span class="token operator">:</span> <span class="token string">"Aniseed Syrup"</span><br>        <span class="token punctuation">}</span><br>      <span class="token punctuation">]</span><br>    <span class="token punctuation">}</span><span class="token punctuation">,</span><br>    <span class="token punctuation">{</span><br>      <span class="token property">"CompanyName"</span><span class="token operator">:</span> <span class="token string">"New Orleans Cajun Delights"</span><span class="token punctuation">,</span><br>      <span class="token property">"Products"</span><span class="token operator">:</span> <span class="token punctuation">[</span><br>        <span class="token punctuation">{</span><br>          <span class="token property">"ProductName"</span><span class="token operator">:</span> <span class="token string">"Chef Anton's Cajun Seasoning"</span><br>        <span class="token punctuation">}</span><span class="token punctuation">,</span><br>        <span class="token punctuation">{</span><br>          <span class="token property">"ProductName"</span><span class="token operator">:</span> <span class="token string">"Chef Anton's Gumbo Mix"</span><br>        <span class="token punctuation">}</span><span class="token punctuation">,</span><br>        <span class="token punctuation">{</span><br>          <span class="token property">"ProductName"</span><span class="token operator">:</span> <span class="token string">"Louisiana Fiery Hot Pepper Sauce"</span><br>        <span class="token punctuation">}</span><span class="token punctuation">,</span><br>        <span class="token punctuation">{</span><br>          <span class="token property">"ProductName"</span><span class="token operator">:</span> <span class="token string">"Louisiana Hot Spiced Okra"</span><br>        <span class="token punctuation">}</span><br>      <span class="token punctuation">]</span><br>    <span class="token punctuation">}</span><br>  <span class="token punctuation">]</span><br><span class="token punctuation">}</span></code></pre>
<h2>With jq</h2>
<p>How might we do this in <code>jq</code>? Let's see. First, let's grab some JSON data. To make it a little more interesting (i.e. without going directly to the supplier grouping) we'll start with the <code>Products</code> entityset and expand the <code>Supplier</code> navigation property like <a href="https://services.odata.org/v4/northwind/northwind.svc/Products?$expand=Supplier">this</a>:</p>
<pre class="language-text"><code class="language-text">https://services.odata.org<br>  /v4/northwind/northwind.svc/Products<br>  ?$expand=Supplier</code></pre>
<p>(Note for this simple example, I won't bother trying to consume all of the products by following the <code>@odata.nextLink</code>s).</p>
<p>This gives a nice structure that we can dig into with <code>jq</code>. It turns out to be quite simple, especially in the context of the recent process I followed in <a href="https://qmacro.org/blog/posts/2022/05/21/exploring-json-with-interactive-jq/">Exploring JSON with interactive jq</a>.</p>
<p>Being an OData v4 entityset, the data is in the top level <code>value</code> property, so we start with that, grouping by the ID of each product's supplier:</p>
<pre class="language-jq"><code class="language-jq"><span class="token punctuation">.</span>value<br><span class="token operator pipe">|</span> <span class="token c-style-function function">group_by</span><span class="token punctuation">(</span><span class="token punctuation">.</span>SupplierID<span class="token punctuation">)</span></code></pre>
<p>Then all we need to do is to reshape the resulting array, via <code>map</code>, to product an object for each supplier, with a list of products:</p>
<pre class="language-jq"><code class="language-jq"><span class="token punctuation">.</span>value<br><span class="token operator pipe">|</span> <span class="token c-style-function function">group_by</span><span class="token punctuation">(</span><span class="token punctuation">.</span>SupplierID<span class="token punctuation">)</span><br><span class="token operator pipe">|</span> <span class="token c-style-function function">map</span><span class="token punctuation">(</span><br>    <span class="token punctuation">{</span><br>      <span class="token property-literal property">CompanyName</span><span class="token punctuation">:</span> first<span class="token punctuation">.</span>Supplier<span class="token punctuation">.</span>CompanyName<span class="token punctuation">,</span><br>      <span class="token property-literal property">Products</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ProductName<span class="token punctuation">]</span><br>    <span class="token punctuation">}</span><br>  <span class="token punctuation">)</span></code></pre>
<p>Here's a screenshot of this <code>jq</code> invocation in action, against the OData JSON representation retrieved with the URL above.</p>
<p><img src="/images/2022/05/ijq-products-by-supplier.png" alt="products by supplier"></p>
<p>You can see the results of the <code>jq</code> filter, producing what we want (reduced for brevity):</p>
<pre class="language-json"><code class="language-json"><span class="token punctuation">[</span><br>  <span class="token punctuation">{</span><br>    <span class="token property">"CompanyName"</span><span class="token operator">:</span> <span class="token string">"Exotic Liquids"</span><span class="token punctuation">,</span><br>    <span class="token property">"Products"</span><span class="token operator">:</span> <span class="token punctuation">[</span><br>      <span class="token string">"Chai"</span><span class="token punctuation">,</span><br>      <span class="token string">"Chang"</span><span class="token punctuation">,</span><br>      <span class="token string">"Aniseed Syrup"</span><br>    <span class="token punctuation">]</span><br>  <span class="token punctuation">}</span><span class="token punctuation">,</span><br>  <span class="token punctuation">{</span><br>    <span class="token property">"CompanyName"</span><span class="token operator">:</span> <span class="token string">"New Orleans Cajun Delights"</span><span class="token punctuation">,</span><br>    <span class="token property">"Products"</span><span class="token operator">:</span> <span class="token punctuation">[</span><br>      <span class="token string">"Chef Anton's Cajun Seasoning"</span><span class="token punctuation">,</span><br>      <span class="token string">"Chef Anton's Gumbo Mix"</span><br>    <span class="token punctuation">]</span><br>  <span class="token punctuation">}</span><span class="token punctuation">,</span><br>  <span class="token punctuation">{</span><br>    <span class="token property">"CompanyName"</span><span class="token operator">:</span> <span class="token string">"Grandma Kelly's Homestead"</span><span class="token punctuation">,</span><br>    <span class="token property">"Products"</span><span class="token operator">:</span> <span class="token punctuation">[</span><br>      <span class="token string">"Grandma's Boysenberry Spread"</span><span class="token punctuation">,</span><br>      <span class="token string">"Uncle Bob's Organic Dried Pears"</span><span class="token punctuation">,</span><br>      <span class="token string">"Northwoods Cranberry Sauce"</span><br>    <span class="token punctuation">]</span><br>  <span class="token punctuation">}</span><br><span class="token punctuation">]</span></code></pre>
<p>You can examine how this works yourself <a href="https://jqplay.org/s/ldrVNmwLbF7">courtesy of jq play</a>.</p>
<p>Note: If we wanted to create the same shape as the OData output, with each product name as a value for a <code>ProductName</code> property, this would just need a small change:</p>
<pre class="language-jq"><code class="language-jq"><span class="token punctuation">.</span>value<br><span class="token operator pipe">|</span> <span class="token c-style-function function">group_by</span><span class="token punctuation">(</span><span class="token punctuation">.</span>SupplierID<span class="token punctuation">)</span><br><span class="token operator pipe">|</span> <span class="token c-style-function function">map</span><span class="token punctuation">(</span><br>    <span class="token punctuation">{</span><br>      <span class="token property-literal property">CompanyName</span><span class="token punctuation">:</span> first<span class="token punctuation">.</span>Supplier<span class="token punctuation">.</span>CompanyName<span class="token punctuation">,</span><br>      <span class="token property-literal property">Products</span><span class="token punctuation">:</span> <span class="token c-style-function function">map</span><span class="token punctuation">(</span><span class="token punctuation">{</span>ProductName<span class="token punctuation">}</span><span class="token punctuation">)</span><br>    <span class="token punctuation">}</span><br>  <span class="token punctuation">)</span></code></pre>
<p>This works because of the shortcut syntax available for <code>jq</code>'s <a href="https://stedolan.github.io/jq/manual/#ObjectConstruction:%7B%7D">object construction</a> (<code>{...}</code>) which is simply to use the name of the property (and you don't even need quotes):</p>
<pre class="language-jq"><code class="language-jq"><span class="token punctuation">{</span>ProductName<span class="token punctuation">}</span></code></pre>
<p>is the same as:</p>
<pre class="language-jq"><code class="language-jq"><span class="token punctuation">{</span><span class="token property">"ProductName"</span><span class="token punctuation">:</span> <span class="token punctuation">.</span>ProductName<span class="token punctuation">}</span></code></pre>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Exploring JSON with interactive jq</title>
      <link href="https://qmacro.org/blog/posts/2022/05/21/exploring-json-with-interactive-jq/"/>
      <updated>2022-05-21T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2022/05/21/exploring-json-with-interactive-jq/</id>
      <content type="html">
        <![CDATA[
      <p>I often use ijq, or &quot;interactive jq&quot;, to explore JSON, and also to improve my jq fu, because it gives me immediate visual feedback. Here's an example.</p>
<p>There's a wrapper around <code>jq</code> called <a href="https://sr.ht/~gpanders/ijq/">ijq</a> (short for &quot;interactive jq&quot;) which is a bit like a REPL in that it affords immediate feedback. It's a lovely program, and I use it a lot.</p>
<p>Yesterday I <a href="https://twitter.com/qmacro/status/1527678770454331392">shared a short video</a> of an example of how it can be used to explore a JSON dataset and I thought I'd give that example a more permanent home here on the blog.</p>
<p><img src="/images/2022/05/ijq.gif" alt="ijq in action"></p>
<p>(There's an <a href="https://asciinema.org/a/496082">asciinema version of this</a> too).</p>
<p>In practising a little <code>jq</code>, I thought I'd use it to find out the most common city in the <a href="https://services.odata.org/v4/northwind/northwind.svc/Customer_and_Suppliers_by_Cities">Customers and Suppliers by Cities</a> entityset in the V4 Northwind service.</p>
<p>This is the invocation I ended up with:</p>
<pre class="language-jq"><code class="language-jq"><span class="token punctuation">.</span>value<br><span class="token operator pipe">|</span> <span class="token c-style-function function">group_by</span><span class="token punctuation">(</span><span class="token punctuation">.</span>City<span class="token punctuation">)</span><br><span class="token operator pipe">|</span> <span class="token c-style-function function">map</span><span class="token punctuation">(</span><span class="token punctuation">[</span>length<span class="token punctuation">,</span> first<span class="token punctuation">.</span>City<span class="token punctuation">]</span><span class="token punctuation">)</span><br><span class="token operator pipe">|</span> <span class="token c-style-function function">sort_by</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><br><span class="token operator pipe">|</span> reverse<br><span class="token operator pipe">|</span> first<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span></code></pre>
<p>Here's a brief breakdown of the invocation I ended up with:</p>
<ul>
<li><code>.value</code> gives me the entire array of objects in the dataset, each one of which represents a customer or supplier in a city</li>
<li><code>group_by(...)</code> collects array elements together that have the same path expression specified (in this case the <code>City</code> property), producing an array of arrays</li>
<li><code>map(...)</code> is much like <code>map</code> in other languages, in that it will apply the function or filter given to the input array, producing a new array</li>
<li><code>[length, first.City]</code> uses the array constructor (<code>[...]</code>) to produce an array of two elements, the first being the length of the input (the inner array containing the same-city grouped objects) and the value of the <code>City</code> property for the <code>first</code> element in that array*</li>
<li><code>sort_by(...)</code> sorts the input array (which is now the one with length-and-city name elements) by the first item (<code>.[0]</code>), i.e. by the length</li>
<li><code>reverse</code> simply reverses the order of the items of the array</li>
<li><code>first[1]</code> then this picks the second item (<code>[1]</code>) of the first element, which after the reverse-sort will be the length-and-city pair with the highest length</li>
</ul>
<p>*during the interactive session, I'd just guessed that there would be a <code>first</code> function, and there was!</p>
<p>For those of you wondering, I deliberately chose to reverse the list before picking out the first element, so the element would be at the top and therefore visible in <code>ijq</code>'s output window:</p>
<pre class="language-jq"><code class="language-jq"><span class="token operator pipe">|</span> <span class="token c-style-function function">sort_by</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><br><span class="token operator pipe">|</span> reverse<br><span class="token operator pipe">|</span> first<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span></code></pre>
<p>But I could have just as well done this:</p>
<pre class="language-jq"><code class="language-jq"><span class="token operator pipe">|</span> <span class="token c-style-function function">sort_by</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><br><span class="token operator pipe">|</span> last<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span></code></pre>
<p>As a kind fellow rightly pointed out in the comments to my previous post <a href="https://qmacro.org/blog/posts/2022/05/19/json-object-values-into-csv-with-jq/">JSON object values into CSV with jq</a> - TIMTOWTDI, or &quot;there is more than one way to do it&quot;, an adage from the Perl community.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>JSON object values into CSV with jq</title>
      <link href="https://qmacro.org/blog/posts/2022/05/19/json-object-values-into-csv-with-jq/"/>
      <updated>2022-05-19T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2022/05/19/json-object-values-into-csv-with-jq/</id>
      <content type="html">
        <![CDATA[
      <p>I wanted to grab a CSV version of a JSON representation of an entityset in the Northwind OData service. Here's how I converted the JSON structure into CSV with jq, and along the way, I talk about arrays, objects, iterators, object indices, variables, identity, array construction and format strings.</p>
<p>In our current <a href="https://www.youtube.com/playlist?list=PL6RpkC85SLQDYLiN1BobWXvvnhaGErkwj">Back to basics: OData series</a> on the Developer Advocates' Hands-on SAP Dev <a href="https://blogs.sap.com/2020/11/09/an-overview-of-sap-developers-video-content/#shows">show</a> I'm using various aspects of the classic Northwind OData service:</p>
<p><a href="https://services.odata.org/V4/Northwind/Northwind.svc/">https://services.odata.org/V4/Northwind/Northwind.svc/</a></p>
<p>There's an entityset that I wanted to grab the data from, but have in CSV form. It's the <a href="https://services.odata.org/v4/northwind/northwind.svc/Customer_and_Suppliers_by_Cities">Customer_and_Suppliers_by_Cities</a> entityset that looks like this:</p>
<pre class="language-json"><code class="language-json"><span class="token punctuation">{</span><br>  <span class="token property">"@odata.context"</span><span class="token operator">:</span> <span class="token string">"https://services.odata.org/V4/Northwind/Northwind.svc/$metadata#Customer_and_Suppliers_by_Cities"</span><span class="token punctuation">,</span><br>  <span class="token property">"value"</span><span class="token operator">:</span> <span class="token punctuation">[</span><br>    <span class="token punctuation">{</span><br>      <span class="token property">"City"</span><span class="token operator">:</span> <span class="token string">"Berlin"</span><span class="token punctuation">,</span><br>      <span class="token property">"CompanyName"</span><span class="token operator">:</span> <span class="token string">"Alfreds Futterkiste"</span><span class="token punctuation">,</span><br>      <span class="token property">"ContactName"</span><span class="token operator">:</span> <span class="token string">"Maria Anders"</span><span class="token punctuation">,</span><br>      <span class="token property">"Relationship"</span><span class="token operator">:</span> <span class="token string">"Customers"</span><br>    <span class="token punctuation">}</span><span class="token punctuation">,</span><br>    <span class="token punctuation">{</span><br>      <span class="token property">"City"</span><span class="token operator">:</span> <span class="token string">"México D.F."</span><span class="token punctuation">,</span><br>      <span class="token property">"CompanyName"</span><span class="token operator">:</span> <span class="token string">"Ana Trujillo Emparedados y helados"</span><span class="token punctuation">,</span><br>      <span class="token property">"ContactName"</span><span class="token operator">:</span> <span class="token string">"Ana Trujillo"</span><span class="token punctuation">,</span><br>      <span class="token property">"Relationship"</span><span class="token operator">:</span> <span class="token string">"Customers"</span><br>    <span class="token punctuation">}</span><span class="token punctuation">,</span><br>    <span class="token punctuation">{</span><br>      <span class="token property">"City"</span><span class="token operator">:</span> <span class="token string">"México D.F."</span><span class="token punctuation">,</span><br>      <span class="token property">"CompanyName"</span><span class="token operator">:</span> <span class="token string">"Antonio Moreno Taquería"</span><span class="token punctuation">,</span><br>      <span class="token property">"ContactName"</span><span class="token operator">:</span> <span class="token string">"Antonio Moreno"</span><span class="token punctuation">,</span><br>      <span class="token property">"Relationship"</span><span class="token operator">:</span> <span class="token string">"Customers"</span><br>    <span class="token punctuation">}</span><br>  <span class="token punctuation">]</span><br><span class="token punctuation">}</span></code></pre>
<blockquote>
<p>I've reduced the actual representation down to just three entries to save space here, and will retrieve these three entries only (with OData's <code>$top</code> system query option) to keep the display of data in this blog post under control.</p>
</blockquote>
<p>I wanted to turn this JSON into something like this:</p>
<pre class="language-text"><code class="language-text">"Berlin","Alfreds Futterkiste","Maria Anders","Customers"<br>"México D.F.","Ana Trujillo Emparedados y helados","Ana Trujillo","Customers"<br>"México D.F.","Antonio Moreno Taquería","Antonio Moreno","Customers"</code></pre>
<p>As I'm trying to <a href="/tags/jq/">learn more</a> about <a href="https://stedolan.github.io/jq/">jq</a> I thought I'd use that.</p>
<p>Before doing anything else, I grab the representation into a local file called <code>entities.json</code> like this (restricting the entities to the first three):</p>
<pre class="language-bash"><code class="language-bash"><span class="token function">curl</span> <span class="token punctuation">\</span><br>  <span class="token parameter variable">--url</span> <span class="token string">'https://services.odata.org/v4/northwind/northwind.svc/Customer_and_Suppliers_by_Cities?$top=3'</span> <span class="token punctuation">\</span><br>  <span class="token operator">></span> entities.json</code></pre>
<h2>Iterating through the entities</h2>
<p>OK, so it's the values in the objects that I want, in the <code>value</code> property. So I start out with the simple <a href="https://stedolan.github.io/jq/manual/#ObjectIdentifier-Index:.foo,.foo.bar">object identifier-index</a> like this:</p>
<pre class="language-bash"><code class="language-bash">jq <span class="token string">'.value'</span> entities.json</code></pre>
<p>This gives me:</p>
<pre class="language-bash"><code class="language-bash"><span class="token punctuation">[</span><br>  <span class="token punctuation">{</span><br>    <span class="token string">"City"</span><span class="token builtin class-name">:</span> <span class="token string">"Berlin"</span>,<br>    <span class="token string">"CompanyName"</span><span class="token builtin class-name">:</span> <span class="token string">"Alfreds Futterkiste"</span>,<br>    <span class="token string">"ContactName"</span><span class="token builtin class-name">:</span> <span class="token string">"Maria Anders"</span>,<br>    <span class="token string">"Relationship"</span><span class="token builtin class-name">:</span> <span class="token string">"Customers"</span><br>  <span class="token punctuation">}</span>,<br>  <span class="token punctuation">{</span><br>    <span class="token string">"City"</span><span class="token builtin class-name">:</span> <span class="token string">"México D.F."</span>,<br>    <span class="token string">"CompanyName"</span><span class="token builtin class-name">:</span> <span class="token string">"Ana Trujillo Emparedados y helados"</span>,<br>    <span class="token string">"ContactName"</span><span class="token builtin class-name">:</span> <span class="token string">"Ana Trujillo"</span>,<br>    <span class="token string">"Relationship"</span><span class="token builtin class-name">:</span> <span class="token string">"Customers"</span><br>  <span class="token punctuation">}</span>,<br>  <span class="token punctuation">{</span><br>    <span class="token string">"City"</span><span class="token builtin class-name">:</span> <span class="token string">"México D.F."</span>,<br>    <span class="token string">"CompanyName"</span><span class="token builtin class-name">:</span> <span class="token string">"Antonio Moreno Taquería"</span>,<br>    <span class="token string">"ContactName"</span><span class="token builtin class-name">:</span> <span class="token string">"Antonio Moreno"</span>,<br>    <span class="token string">"Relationship"</span><span class="token builtin class-name">:</span> <span class="token string">"Customers"</span><br>  <span class="token punctuation">}</span><br><span class="token punctuation">]</span></code></pre>
<p>The value of the <code>value</code> property is indeed an array of objects. So far so good. But I want to do something with each of those objects, so next I add the <a href="https://stedolan.github.io/jq/manual/#Array/ObjectValueIterator:.%5B%5D">array value iterator</a> (<code>[]</code>) thus:</p>
<pre class="language-bash"><code class="language-bash">jq <span class="token string">'.value[]'</span> entities.json</code></pre>
<p>This results in something that looks almost but not quite the same:</p>
<pre class="language-json"><code class="language-json"><span class="token punctuation">{</span><br>  <span class="token property">"City"</span><span class="token operator">:</span> <span class="token string">"Berlin"</span><span class="token punctuation">,</span><br>  <span class="token property">"CompanyName"</span><span class="token operator">:</span> <span class="token string">"Alfreds Futterkiste"</span><span class="token punctuation">,</span><br>  <span class="token property">"ContactName"</span><span class="token operator">:</span> <span class="token string">"Maria Anders"</span><span class="token punctuation">,</span><br>  <span class="token property">"Relationship"</span><span class="token operator">:</span> <span class="token string">"Customers"</span><br><span class="token punctuation">}</span><br><span class="token punctuation">{</span><br>  <span class="token property">"City"</span><span class="token operator">:</span> <span class="token string">"México D.F."</span><span class="token punctuation">,</span><br>  <span class="token property">"CompanyName"</span><span class="token operator">:</span> <span class="token string">"Ana Trujillo Emparedados y helados"</span><span class="token punctuation">,</span><br>  <span class="token property">"ContactName"</span><span class="token operator">:</span> <span class="token string">"Ana Trujillo"</span><span class="token punctuation">,</span><br>  <span class="token property">"Relationship"</span><span class="token operator">:</span> <span class="token string">"Customers"</span><br><span class="token punctuation">}</span><span class="token punctuation">,</span><br><span class="token punctuation">{</span><br>  <span class="token property">"City"</span><span class="token operator">:</span> <span class="token string">"México D.F."</span><span class="token punctuation">,</span><br>  <span class="token property">"CompanyName"</span><span class="token operator">:</span> <span class="token string">"Antonio Moreno Taquería"</span><span class="token punctuation">,</span><br>  <span class="token property">"ContactName"</span><span class="token operator">:</span> <span class="token string">"Antonio Moreno"</span><span class="token punctuation">,</span><br>  <span class="token property">"Relationship"</span><span class="token operator">:</span> <span class="token string">"Customers"</span><br><span class="token punctuation">}</span></code></pre>
<p>What's happening here is that the iterator causes <code>jq</code> to emit a JSON value for each item in the array. This is an important concept and also relates to the fact that <code>jq</code> can process -- as well as emit -- multiple JSON values. I discuss this in the post <a href="https://qmacro.org/blog/posts/2022/05/02/some-thoughts-on-jq-and-statelessness/">Some thoughts on jq and statelessness</a> which you may be interested to read.</p>
<p>In other words, while the first invocation (<code>.value</code>) emitted a single JSON value (an array), the second (<code>.value[]</code>) caused three JSON values (three objects) to be emitted, effectively one at a time.</p>
<h3>Understanding the iterator a bit more</h3>
<p>To understand what the iterator does, we can run a simple experiment. We'll revisit each of the two <code>jq</code> invocations we've done so far, adding a second filter into the mix via the <a href="https://stedolan.github.io/jq/manual/#Pipe:%7C">pipe</a>. We'll use the simple <code>length</code> filter which, given an array will return the number of elements, and given an object will return the number of key-value pairs (and, for that matter, given a string, will return the length of that string).</p>
<p>Remember that the value of the <code>value</code> property is an array. So this:</p>
<pre class="language-bash"><code class="language-bash">jq <span class="token string">'.value | length'</span> entities.json</code></pre>
<p>returns the following:</p>
<pre class="language-text"><code class="language-text">3</code></pre>
<p>Doing the same with the second invocation, in other words this:</p>
<pre class="language-bash"><code class="language-bash">jq <span class="token string">'.value[] | length'</span> entities.json</code></pre>
<p>has a slightly different output:</p>
<pre class="language-text"><code class="language-text">4<br>4<br>4</code></pre>
<p>In this case, what's happening is that the array iterator is causing each element of the array to be passed, one at a time, through the filter(s) that follow (i.e. through <code>length</code> in this case). And when passed an object, <code>length</code> returns the number of key-value pairs. There are four key-value pairs in each of the objects, so we get 4, but we get that three times, one for each object (and remember, each of these instances of <code>4</code> are valid JSON values).</p>
<h2>Jumping ahead temporarily to CSV output</h2>
<p>So that we better understand where we're heading, I want to introduce the <code>@csv</code> <a href="https://stedolan.github.io/jq/manual/#Formatstringsandescaping">format string</a>, which is described as follows:</p>
<blockquote>
<p>The input must be an array, and it is rendered as CSV with double quotes for strings, and quotes escaped by repetition.</p>
</blockquote>
<p>So this:</p>
<pre class="language-bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token string">'[1,2,"buckle my shoe"]'</span> <span class="token operator">|</span> jq --raw-output <span class="token string">'@csv'</span></code></pre>
<p>(note the use of the <code>--raw-output</code> (<code>-r</code>) option so that <code>jq</code> won't try to emit JSON values but instead output the values directly) results in CSV like this:</p>
<pre class="language-text"><code class="language-text">1,2,"buckle my shoe"</code></pre>
<p>So our aim is to produce a list of arrays, one for each JSON object in the input (one for each entity, effectively). Then each of these arrays can then be fed through the <code>@csv</code> format string, to produce CSV records.</p>
<h2>Producing the arrays with hardcoded key names</h2>
<p>Each CSV record needs four values, the values for each key in the object(s):</p>
<pre class="language-json"><code class="language-json"><span class="token punctuation">{</span><br>  <span class="token property">"City"</span><span class="token operator">:</span> <span class="token string">"México D.F."</span><span class="token punctuation">,</span><br>  <span class="token property">"CompanyName"</span><span class="token operator">:</span> <span class="token string">"Antonio Moreno Taquería"</span><span class="token punctuation">,</span><br>  <span class="token property">"ContactName"</span><span class="token operator">:</span> <span class="token string">"Antonio Moreno"</span><span class="token punctuation">,</span><br>  <span class="token property">"Relationship"</span><span class="token operator">:</span> <span class="token string">"Customers"</span><br><span class="token punctuation">}</span></code></pre>
<p>In other words, values for <code>City</code>, <code>CompanyName</code>, <code>ContactName</code> and <code>Relationship</code>.</p>
<p>The simplest way to do this would be to just use <a href="https://stedolan.github.io/jq/manual/#ObjectIdentifier-Index:.foo,.foo.bar">object identifier-indices</a> directly, something like this:</p>
<pre class="language-bash"><code class="language-bash">jq --raw-output <span class="token string">'<br>  .value[]<br>  | [.City, .CompanyName, .ContactName, .Relationship]<br>  | @csv<br>'</span> entities.json</code></pre>
<p>This gives us what we want:</p>
<pre class="language-text"><code class="language-text">"Berlin","Alfreds Futterkiste","Maria Anders","Customers"<br>"México D.F.","Ana Trujillo Emparedados y helados","Ana Trujillo","Customers"<br>"México D.F.","Antonio Moreno Taquería","Antonio Moreno","Customers"</code></pre>
<p>But of course that's somewhat unsatisfactory. We'd have to examine the input data and then adjust the object identifier-indices each time we had different input data.</p>
<h2>Producing the arrays dynamically</h2>
<p>According to the great <a href="https://en.wikipedia.org/wiki/Larry_Wall">Larry Wall</a>, the three great virtues of a programmer are <a href="https://wiki.c2.com/?LazinessImpatienceHubris">laziness, impatience and hubris</a>. And we can get a little nearer to laziness and also somewhat to impatience here by striving to make our solution determine the keys automatically.</p>
<p>There's a <a href="https://stedolan.github.io/jq/manual/#keys,keys_unsorted">keys</a> function in <code>jq</code> which will return the keys of an object. That might get us part of the way. Let's try it out:</p>
<pre class="language-bash"><code class="language-bash">jq <span class="token string">'<br>  .value[]<br>  | keys<br>'</span> entities.json</code></pre>
<p>This produces what we expect, or at least hope for:</p>
<pre class="language-json"><code class="language-json"><span class="token punctuation">[</span><br>  <span class="token string">"City"</span><span class="token punctuation">,</span><br>  <span class="token string">"CompanyName"</span><span class="token punctuation">,</span><br>  <span class="token string">"ContactName"</span><span class="token punctuation">,</span><br>  <span class="token string">"Relationship"</span><br><span class="token punctuation">]</span><br><span class="token punctuation">[</span><br>  <span class="token string">"City"</span><span class="token punctuation">,</span><br>  <span class="token string">"CompanyName"</span><span class="token punctuation">,</span><br>  <span class="token string">"ContactName"</span><span class="token punctuation">,</span><br>  <span class="token string">"Relationship"</span><br><span class="token punctuation">]</span><br><span class="token punctuation">[</span><br>  <span class="token string">"City"</span><span class="token punctuation">,</span><br>  <span class="token string">"CompanyName"</span><span class="token punctuation">,</span><br>  <span class="token string">"ContactName"</span><span class="token punctuation">,</span><br>  <span class="token string">"Relationship"</span><br><span class="token punctuation">]</span></code></pre>
<p>In fact, we have the structure that we want and are now only really one &quot;indirection&quot; away from our goal. Let's put this into the CSV output context to see, by piping the result into <code>@csv</code>:</p>
<pre class="language-bash"><code class="language-bash">jq --raw-output <span class="token string">'<br>  .value[]<br>  | keys<br>  | @csv<br>'</span> entities.json</code></pre>
<p>This gives us:</p>
<pre class="language-text"><code class="language-text">"City","CompanyName","ContactName","Relationship"<br>"City","CompanyName","ContactName","Relationship"<br>"City","CompanyName","ContactName","Relationship"</code></pre>
<p>We can make use of these key values like <code>City</code> with the <a href="https://stedolan.github.io/jq/manual/#ObjectIdentifier-Index:.foo,.foo.bar">object identifier-index</a> construct. Well, almost. We need the more <a href="https://stedolan.github.io/jq/manual/#GenericObjectIndex:.%5B%3Cstring%3E%5D">generic form</a> for which the <a href="https://stedolan.github.io/jq/manual/#ObjectIdentifier-Index:.foo,.foo.bar">object identifier-index</a> is just a shorthand version for when identifiers are simple and &quot;string-like&quot;.</p>
<p>In other words, the <a href="https://stedolan.github.io/jq/manual/#GenericObjectIndex:.%5B%3Cstring%3E%5D">generic object index</a> can be used when the identifier is not &quot;string-like&quot; ... such as when it's a <a href="https://stedolan.github.io/jq/manual/#Variable/SymbolicBindingOperator:...as$identifier%7C...">variable</a>.</p>
<p>Let's step back and focus for a moment on just one of the objects - the first (0th) one - using the <a href="https://stedolan.github.io/jq/manual/#ArrayIndex:.%5B2%5D">array index</a> construction (<code>[n]</code>):</p>
<pre class="language-bash"><code class="language-bash">jq <span class="token string">'<br>  .value[0]<br>  | keys<br>'</span> entities.json</code></pre>
<p>This gives us:</p>
<pre class="language-bash"><code class="language-bash"><span class="token punctuation">[</span><br>  <span class="token string">"City"</span>,<br>  <span class="token string">"CompanyName"</span>,<br>  <span class="token string">"ContactName"</span>,<br>  <span class="token string">"Relationship"</span><br><span class="token punctuation">]</span></code></pre>
<p>Let's assign the keys to a variable <code>$k</code>, and just emit the value of that variable:</p>
<pre class="language-bash"><code class="language-bash">jq <span class="token string">'<br>  .value[0]<br>  | keys as $k | $k<br>'</span> entities.json</code></pre>
<p>Perhaps unsurprisingly, this gives us the same result:</p>
<pre class="language-text"><code class="language-text">[<br>  "City",<br>  "CompanyName",<br>  "ContactName",<br>  "Relationship"<br>]</code></pre>
<p>But now we have an array of key names to work with!</p>
<p>Note that <code>keys</code> produces an array, so we can use the <a href="https://stedolan.github.io/jq/manual/#Array/ObjectValueIterator:.%5B%5D">array value iterator</a> (<code>[]</code>) to cause each of the keys to be emitted separately (looped through, effectively) and passed to subsequent filters.</p>
<p>Adding the iterator <code>[]</code> to the <code>keys</code> function like this:</p>
<pre class="language-bash"><code class="language-bash">jq <span class="token string">'<br>  .value[0]<br>  | keys[] as $k | $k<br>'</span> entities.json</code></pre>
<p>produces this:</p>
<pre class="language-text"><code class="language-text">"City"<br>"CompanyName"<br>"ContactName"<br>"Relationship"</code></pre>
<p>This is a similar effect to what we've seen earlier; it causes <code>jq</code> to iterate over the output of <code>keys</code> one item at a time, so the <code>$k</code> after the pipe in this sample is called four times, one for each key, and each time producing a JSON value (the key name as a string) as output.</p>
<p>We may be focusing deeper and deeper on the keys here, but don't forget we always have the <a href="https://stedolan.github.io/jq/manual/#Identity:.">identity</a> filter (<code>.</code>) to give us access to the input, to whatever came through the pipe to where we are now, as it were.</p>
<h2>Variable assignment with 'as' as a foreach loop</h2>
<p>Let's understand this, by way of something perhaps unexpected. Replacing the <code>$k</code> at the end of the pipeline with simply <code>.</code>, like this:</p>
<pre class="language-bash"><code class="language-bash">jq <span class="token string">'<br>  .value[0]<br>  | keys[] as $k | .<br>'</span> entities.json</code></pre>
<p>actually gives us this:</p>
<pre class="language-json"><code class="language-json"><span class="token punctuation">{</span><br>  <span class="token property">"City"</span><span class="token operator">:</span> <span class="token string">"Berlin"</span><span class="token punctuation">,</span><br>  <span class="token property">"CompanyName"</span><span class="token operator">:</span> <span class="token string">"Alfreds Futterkiste"</span><span class="token punctuation">,</span><br>  <span class="token property">"ContactName"</span><span class="token operator">:</span> <span class="token string">"Maria Anders"</span><span class="token punctuation">,</span><br>  <span class="token property">"Relationship"</span><span class="token operator">:</span> <span class="token string">"Customers"</span><br><span class="token punctuation">}</span><br><span class="token punctuation">{</span><br>  <span class="token property">"City"</span><span class="token operator">:</span> <span class="token string">"Berlin"</span><span class="token punctuation">,</span><br>  <span class="token property">"CompanyName"</span><span class="token operator">:</span> <span class="token string">"Alfreds Futterkiste"</span><span class="token punctuation">,</span><br>  <span class="token property">"ContactName"</span><span class="token operator">:</span> <span class="token string">"Maria Anders"</span><span class="token punctuation">,</span><br>  <span class="token property">"Relationship"</span><span class="token operator">:</span> <span class="token string">"Customers"</span><br><span class="token punctuation">}</span><br><span class="token punctuation">{</span><br>  <span class="token property">"City"</span><span class="token operator">:</span> <span class="token string">"Berlin"</span><span class="token punctuation">,</span><br>  <span class="token property">"CompanyName"</span><span class="token operator">:</span> <span class="token string">"Alfreds Futterkiste"</span><span class="token punctuation">,</span><br>  <span class="token property">"ContactName"</span><span class="token operator">:</span> <span class="token string">"Maria Anders"</span><span class="token punctuation">,</span><br>  <span class="token property">"Relationship"</span><span class="token operator">:</span> <span class="token string">"Customers"</span><br><span class="token punctuation">}</span><br><span class="token punctuation">{</span><br>  <span class="token property">"City"</span><span class="token operator">:</span> <span class="token string">"Berlin"</span><span class="token punctuation">,</span><br>  <span class="token property">"CompanyName"</span><span class="token operator">:</span> <span class="token string">"Alfreds Futterkiste"</span><span class="token punctuation">,</span><br>  <span class="token property">"ContactName"</span><span class="token operator">:</span> <span class="token string">"Maria Anders"</span><span class="token punctuation">,</span><br>  <span class="token property">"Relationship"</span><span class="token operator">:</span> <span class="token string">"Customers"</span><br><span class="token punctuation">}</span></code></pre>
<p>Odd, the same object, four times. But when we stare at that for a second, we realise that it's exactly what we asked for. With <code>keys[]</code> we're iterating through the keys of the object (<code>City</code>, <code>CompanyName</code>, <code>ContactName</code> and <code>Relationship</code>). Four of them. So whatever is beyond the pipe after that, which is simply the identity filter (<code>.</code>), is being called four times. And the identity filter (which simply outputs whatever it receives as input) receives as input the original object.</p>
<p>What we might expect <code>.</code> to output is one key, each time. That would be the case if we didn't assign <code>keys[]</code> to the variable <code>$k</code> with <code>keys[] as $k</code>. Let's remove the <code>as $k</code> bit to see:</p>
<pre class="language-bash"><code class="language-bash">jq <span class="token string">'<br>  .value[0]<br>  | keys[] | .<br>'</span> entities.json</code></pre>
<p>This produces:</p>
<pre class="language-text"><code class="language-text">"City"<br>"CompanyName"<br>"ContactName"<br>"Relationship"</code></pre>
<p>So in this case, <code>.</code>'s input are (each time) the keys of the object. The important thing to realise here is that the variable assignment <code>as $k</code> means that the input that came into that expression (the object) passes straight through unconsumed to the next filter. This part of the manual for the section on <a href="https://stedolan.github.io/jq/manual/#Variable/SymbolicBindingOperator:...as$identifier%7C...">variables</a> helps to explain:</p>
<blockquote>
<p>The expression <code>exp as $x | ...</code> means: for each value of expression <code>exp</code>, run the rest of the pipeline with the entire original input, and with <code>$x</code> set to that value. Thus <code>as</code> functions as something of a foreach loop.</p>
</blockquote>
<p>With this in mind, we should now be able to understand why this:</p>
<pre class="language-bash"><code class="language-bash">jq <span class="token string">'<br>  .value[0]<br>  | keys[] as $k | .<br>'</span> entities.json</code></pre>
<p>produced four identical copies of the object.</p>
<p>While that's an odd thing to produce, it helps a lot here. Having the input at this stage in the pipeline (<code>.</code>) set to the object, combined with the &quot;foreach loop&quot; (as the manual described it) iterating over the values in <code>$k</code>, is very useful!</p>
<p>Let's look at that in a basic form; how about emitting an array with two elements, the first being the value of <code>$k</code> and the second being the input, each time:</p>
<pre class="language-bash"><code class="language-bash">jq <span class="token string">'<br>  .value[0]<br>  | keys[] as $k | [$k, .]<br>'</span> entities.json</code></pre>
<p>This gives us a combination of values like this:</p>
<pre class="language-json"><code class="language-json"><span class="token punctuation">[</span><br>  <span class="token string">"City"</span><span class="token punctuation">,</span><br>  <span class="token punctuation">{</span><br>    <span class="token property">"City"</span><span class="token operator">:</span> <span class="token string">"Berlin"</span><span class="token punctuation">,</span><br>    <span class="token property">"CompanyName"</span><span class="token operator">:</span> <span class="token string">"Alfreds Futterkiste"</span><span class="token punctuation">,</span><br>    <span class="token property">"ContactName"</span><span class="token operator">:</span> <span class="token string">"Maria Anders"</span><span class="token punctuation">,</span><br>    <span class="token property">"Relationship"</span><span class="token operator">:</span> <span class="token string">"Customers"</span><br>  <span class="token punctuation">}</span><br><span class="token punctuation">]</span><br><span class="token punctuation">[</span><br>  <span class="token string">"CompanyName"</span><span class="token punctuation">,</span><br>  <span class="token punctuation">{</span><br>    <span class="token property">"City"</span><span class="token operator">:</span> <span class="token string">"Berlin"</span><span class="token punctuation">,</span><br>    <span class="token property">"CompanyName"</span><span class="token operator">:</span> <span class="token string">"Alfreds Futterkiste"</span><span class="token punctuation">,</span><br>    <span class="token property">"ContactName"</span><span class="token operator">:</span> <span class="token string">"Maria Anders"</span><span class="token punctuation">,</span><br>    <span class="token property">"Relationship"</span><span class="token operator">:</span> <span class="token string">"Customers"</span><br>  <span class="token punctuation">}</span><br><span class="token punctuation">]</span><br><span class="token punctuation">[</span><br>  <span class="token string">"ContactName"</span><span class="token punctuation">,</span><br>  <span class="token punctuation">{</span><br>    <span class="token property">"City"</span><span class="token operator">:</span> <span class="token string">"Berlin"</span><span class="token punctuation">,</span><br>    <span class="token property">"CompanyName"</span><span class="token operator">:</span> <span class="token string">"Alfreds Futterkiste"</span><span class="token punctuation">,</span><br>    <span class="token property">"ContactName"</span><span class="token operator">:</span> <span class="token string">"Maria Anders"</span><span class="token punctuation">,</span><br>    <span class="token property">"Relationship"</span><span class="token operator">:</span> <span class="token string">"Customers"</span><br>  <span class="token punctuation">}</span><br><span class="token punctuation">]</span><br><span class="token punctuation">[</span><br>  <span class="token string">"Relationship"</span><span class="token punctuation">,</span><br>  <span class="token punctuation">{</span><br>    <span class="token property">"City"</span><span class="token operator">:</span> <span class="token string">"Berlin"</span><span class="token punctuation">,</span><br>    <span class="token property">"CompanyName"</span><span class="token operator">:</span> <span class="token string">"Alfreds Futterkiste"</span><span class="token punctuation">,</span><br>    <span class="token property">"ContactName"</span><span class="token operator">:</span> <span class="token string">"Maria Anders"</span><span class="token punctuation">,</span><br>    <span class="token property">"Relationship"</span><span class="token operator">:</span> <span class="token string">"Customers"</span><br>  <span class="token punctuation">}</span><br><span class="token punctuation">]</span></code></pre>
<p>And of course, look what we can do with that combination of data in <code>.</code> and <code>$k</code>, using the <a href="https://stedolan.github.io/jq/manual/#GenericObjectIndex:.%5B%3Cstring%3E%5D">generic object index</a> like this <code>.[$k]</code> to look up the value of each of the keys:</p>
<pre class="language-bash"><code class="language-bash">jq <span class="token string">'<br>  .value[0]<br>  | keys[] as $k | .[$k]<br>'</span> entities.json</code></pre>
<p>This results in:</p>
<pre class="language-text"><code class="language-text">"Berlin"<br>"Alfreds Futterkiste"<br>"Maria Anders"<br>"Customers"</code></pre>
<p>Great! And if we wrap this entire expression in an <a href="https://stedolan.github.io/jq/manual/#Arrayconstruction:%5B%5D">array construction</a> (<code>[...]</code>), we then have the right shape (an array) to give to the <code>@csv</code> format string (and as we're emitting CSV again we'll use the <code>--raw-output</code> option again here):</p>
<pre class="language-bash"><code class="language-bash">jq --raw-output <span class="token string">'<br>  .value[0]<br>  | [ keys[] as $k | .[$k] ]<br>  | @csv<br>'</span> entities.json</code></pre>
<p>This produces a perfect single CSV record:</p>
<pre class="language-text"><code class="language-text">"Berlin","Alfreds Futterkiste","Maria Anders","Customers"</code></pre>
<p>Now all we need to do is remove the array index (the <code>0</code> from <code>.value[0]</code>) to go back to an iteration over all the items in the array:</p>
<pre class="language-bash"><code class="language-bash">jq --raw-output <span class="token string">'<br>  .value[]<br>  | [ keys[] as $k | .[$k] ]<br>  | @csv<br>'</span> entities.json</code></pre>
<p>and we get exactly what we're looking for:</p>
<pre class="language-text"><code class="language-text">"Berlin","Alfreds Futterkiste","Maria Anders","Customers"<br>"México D.F.","Ana Trujillo Emparedados y helados","Ana Trujillo","Customers"<br>"México D.F.","Antonio Moreno Taquería","Antonio Moreno","Customers"</code></pre>
<h2>Storing as a function</h2>
<p>I'm likely to want to use this approach again some time, so I'll store the core construct here as a function in my local <code>~/.jq</code> file (see the <a href="https://stedolan.github.io/jq/manual/#Modules">modules</a> section of the manual for more detail):</p>
<pre class="language-jq"><code class="language-jq"><span class="token keyword">def</span> <span class="token function">onlyvalues</span><span class="token punctuation">:</span> <span class="token punctuation">[</span> keys<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">as</span> <span class="token variable">$k</span> <span class="token operator pipe">|</span> <span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token variable">$k</span><span class="token punctuation">]</span> <span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre>
<p>Now I can use that function wherever I want; here's a great place, because it also simplifies the entire invocation:</p>
<pre class="language-bash"><code class="language-bash">jq --raw-output <span class="token string">'<br>  .value[]<br>  | onlyvalues<br>  | @csv<br>'</span> entities.json</code></pre>
<p>And yes, this produces the same output:</p>
<pre class="language-text"><code class="language-text">"Berlin","Alfreds Futterkiste","Maria Anders","Customers"<br>"México D.F.","Ana Trujillo Emparedados y helados","Ana Trujillo","Customers"<br>"México D.F.","Antonio Moreno Taquería","Antonio Moreno","Customers"</code></pre>
<h2>Wrapping up</h2>
<p>This turned out to be a longer post than I'd intended to write. I found that I wanted to make sure I explained each part of the solution, and why it was how it was. Of course, this has the benefit of causing me to think a little harder about what <code>jq</code> is doing, which in turn helps me learn a little bit more about it.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Exploring GitHub repo name distribution with jq</title>
      <link href="https://qmacro.org/blog/posts/2022/05/07/exploring-github-repo-name-distribution-with-jq/"/>
      <updated>2022-05-07T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2022/05/07/exploring-github-repo-name-distribution-with-jq/</id>
      <content type="html">
        <![CDATA[
      <p>I wanted a brief rundown of the name prefixes for repositories in the <a href="https://github.com/SAP-samples">SAP-samples</a> organisation on GitHub. With the <code>gh</code> CLI it was easy to grab the names, and gave me the opportunity to practise a bit of <code>jq</code>. Here's what I did.</p>
<p>The <a href="https://github.com/SAP-samples">SAP-samples</a> organisation on GitHub is where we keep lots of sample code, configuration and more for various SAP services and products. We also store our workshop and CodeJam material in repositories there too.</p>
<p>There's a sort of loose naming convention, where the first part of the name gives a general indication of topic. For example, the first part of the <a href="https://github.com/SAP-samples/cloud-messaging-handsonsapdev">cloud-messaging-handsonsapdev</a> repository, &quot;cloud&quot;, gives an indication that the topic is the cloud in general, and the first part of the <a href="https://github.com/SAP-samples/btp-setup-automator">btp-setup-automator</a> repository, &quot;btp&quot;, indicates that the main topic is the SAP Business Technology Platform.</p>
<p>I wanted to find out what the names were of all the repositories in the <a href="https://github.com/SAP-samples">SAP-samples</a> organisation, and understand the distribution across the different topics. Something like this, showing here that the most popular topic is &quot;cloud&quot;:</p>
<pre class="language-text"><code class="language-text">1    abap<br>1    artifact<br>2    btp<br>3    cloud<br>2    sap<br>1    ui5</code></pre>
<h2>Using the gh CLI</h2>
<p>Requesting the names of public repositories with the GitHub CLI <a href="https://github.com/cli/cli">gh</a> is easy. Here's an example:</p>
<pre class="language-bash"><code class="language-bash">gh repo list SAP-samples <span class="token parameter variable">--limit</span> <span class="token number">10</span> <span class="token parameter variable">--public</span></code></pre>
<p>This produces output something like this (output somewhat redacted for display purposes):</p>
<pre class="language-text"><code class="language-text">SAP-samples/cloud-sdk-js                   This re...  public  7h<br>SAP-samples/cloud-cap-samples-java         A sampl...  public  15h<br>SAP-samples/btp-setup-automator            Automat...  public  15h<br>SAP-samples/btp-ai-sustainability-bootcamp This gi...  public  15h<br>SAP-samples/cloud-cap-samples              This pr...  public  17h<br>SAP-samples/ui5-exercises-codejam          Materia...  public  19h<br>SAP-samples/cap-sflight                    Using S...  public  1d<br>SAP-samples/cloud-cf-feature-flags-sample  A sampl...  public  1d<br>SAP-samples/cloud-espm-cloud-native        Enterpr...  public  2d<br>SAP-samples/iot-edge-samples               Showcas...  public  2d</code></pre>
<blockquote>
<p>This is a slightly contrived example, because I wanted to illustrate the distribution over a small number of repositories (10 in this case). To this end, I cut down the actual output to come up with a list of repositories that would illustrate the point. If you want to find out what I did with this list, and how I turned it into what <code>gh</code> would output, in particular what JSON structure it would produce (see the next section in this post), you may want to read the &quot;prequel&quot; post to this one: <a href="/blog/posts/2022/05/06/converting-strings-to-objects-with-jq/">Converting strings to objects with jq</a>.</p>
</blockquote>
<p>With regular shell tools I could parse out the names, split off the topic prefix, and go from there. But I'm trying to improve my skills in <a href="https://stedolan.github.io/jq/">jq</a>, and the <code>gh</code> CLI gives me an opportunity to do that, with the combination of two options.</p>
<h3>Requesting JSON output with --json</h3>
<p>With <code>--json</code> I can specify fields I want to have returned to me. At first I was at a loss as to which fields were available to specify, but leaving off the value for <code>--json</code> gives a list.</p>
<p>In other words, invoking this:</p>
<pre class="language-bash"><code class="language-bash">gh repo list <span class="token parameter variable">--json</span></code></pre>
<p>results in a list like this (cut short for brevity):</p>
<pre><code>Specify one or more comma-separated fields for `--json`:
  assignableUsers
  codeOfConduct
  contactLinks
  createdAt
  defaultBranchRef
  deleteBranchOnMerge
  description
  diskUsage
  forkCount
  ...
</code></pre>
<p>The field <code>name</code> is available, and applying it as the value for <code>--json</code> like this:</p>
<pre class="language-bash"><code class="language-bash">gh repo list SAP-samples <span class="token parameter variable">--limit</span> <span class="token number">10</span> <span class="token parameter variable">--public</span> <span class="token parameter variable">--json</span> name</code></pre>
<p>gives this JSON output:</p>
<pre class="language-json"><code class="language-json"><span class="token punctuation">[</span><br>  <span class="token punctuation">{</span><br>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"cloud-sdk-js"</span><br>  <span class="token punctuation">}</span><span class="token punctuation">,</span><br>  <span class="token punctuation">{</span><br>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"cloud-cap-samples-java"</span><br>  <span class="token punctuation">}</span><span class="token punctuation">,</span><br>  <span class="token punctuation">{</span><br>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"btp-setup-automator"</span><br>  <span class="token punctuation">}</span><span class="token punctuation">,</span><br>  <span class="token punctuation">{</span><br>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"btp-ai-sustainability-bootcamp"</span><br>  <span class="token punctuation">}</span><span class="token punctuation">,</span><br>  <span class="token punctuation">{</span><br>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"cloud-cap-samples"</span><br>  <span class="token punctuation">}</span><span class="token punctuation">,</span><br>  <span class="token punctuation">{</span><br>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"ui5-exercises-codejam"</span><br>  <span class="token punctuation">}</span><span class="token punctuation">,</span><br>  <span class="token punctuation">{</span><br>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"cap-sflight"</span><br>  <span class="token punctuation">}</span><span class="token punctuation">,</span><br>  <span class="token punctuation">{</span><br>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"cloud-cf-feature-flags-sample"</span><br>  <span class="token punctuation">}</span><span class="token punctuation">,</span><br>  <span class="token punctuation">{</span><br>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"cloud-espm-cloud-native"</span><br>  <span class="token punctuation">}</span><span class="token punctuation">,</span><br>  <span class="token punctuation">{</span><br>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"iot-edge-samples"</span><br>  <span class="token punctuation">}</span><br><span class="token punctuation">]</span></code></pre>
<h3>Filtering JSON output with --jq</h3>
<p>With the <code>--jq</code> option, a jq filter can be supplied that will be applied to the JSON output produced. Let's start with a very simple example.</p>
<p>As we can see, the structure returned is an array of objects, each containing the property or properties requested with the <code>--json</code> option. So to obtain the value of each of the <code>name</code> properties from the JSON output that we saw earlier, we can use <code>.[] | .name</code>, or, more succinctly, <code>.[].name</code>:</p>
<pre class="language-bash"><code class="language-bash">gh repo list SAP-samples <span class="token parameter variable">--limit</span> <span class="token number">10</span> <span class="token parameter variable">--public</span> <span class="token punctuation">\</span><br>  <span class="token parameter variable">--json</span> name <span class="token punctuation">\</span><br>  <span class="token parameter variable">--jq</span> .<span class="token punctuation">[</span><span class="token punctuation">]</span>.name</code></pre>
<p>This returns the following:</p>
<pre class="language-text"><code class="language-text">artifact-of-the-month<br>cloud-sdk-js<br>sap-tech-bytes<br>cloud-cap-samples-java<br>btp-setup-automator<br>btp-ai-sustainability-bootcamp<br>sap-iot-samples<br>abap-platform-fundamentals-01<br>cloud-cap-samples<br>ui5-exercises-codejam</code></pre>
<h3>The --jq option in gh is applied with --raw-output</h3>
<p>We can make one side observation here. Normally, we'd expect to see JSON values output from <code>jq</code>; in other words, double-quoted strings like this:</p>
<pre class="language-json"><code class="language-json"><span class="token string">"artifact-of-the-month"</span><br><span class="token string">"cloud-sdk-js"</span><br><span class="token string">"sap-tech-bytes"</span><br><span class="token string">"cloud-cap-samples-java"</span><br><span class="token string">"btp-setup-automator"</span><br><span class="token string">"btp-ai-sustainability-bootcamp"</span><br><span class="token string">"sap-iot-samples"</span><br><span class="token string">"abap-platform-fundamentals-01"</span><br><span class="token string">"cloud-cap-samples"</span><br><span class="token string">"ui5-exercises-codejam"</span></code></pre>
<p>So it seems like when a <code>jq</code> filter is applied via the <code>--jq</code> option to <code>gh</code>, it's applied with the <code>--raw-output</code> (<code>-r</code>) option implicitly. I think that makes sense, especially if the output is to be used with other Unix command line tools later on in a pipeline.</p>
<h2>Using the power of jq</h2>
<p>Now we have the context in which we can invoke a jq filter on the JSON output from <code>gh</code>, let's dig in a little more. Bear in mind that this may not be the most efficient way of doing things, but I thought it might still be useful, and it certainly helps me to try to express something in jq in public, as it were.</p>
<p>To be kind to the API, I'll grab the JSON output from the <code>gh</code> invocation and use that while I build up the filter:</p>
<pre class="language-bash"><code class="language-bash">gh repo list SAP-samples <span class="token parameter variable">--limit</span> <span class="token number">10</span> <span class="token parameter variable">--public</span> <span class="token punctuation">\</span><br>  <span class="token parameter variable">--json</span> name <span class="token punctuation">\</span><br>  <span class="token operator">></span> names.json</code></pre>
<p>As a reminder, the content of <code>names.json</code> will look like this:</p>
<pre class="language-json"><code class="language-json"><span class="token punctuation">[</span><br>  <span class="token punctuation">{</span><br>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"cloud-sdk-js"</span><br>  <span class="token punctuation">}</span><span class="token punctuation">,</span><br>  <span class="token punctuation">{</span><br>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"cloud-cap-samples-java"</span><br>  <span class="token punctuation">}</span><span class="token punctuation">,</span><br>  <span class="token punctuation">{</span><br>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"btp-setup-automator"</span><br>  <span class="token punctuation">}</span><span class="token punctuation">,</span><br>  <span class="token punctuation">{</span><br>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"btp-ai-sustainability-bootcamp"</span><br>  <span class="token punctuation">}</span><span class="token punctuation">,</span><br>  <span class="token punctuation">{</span><br>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"cloud-cap-samples"</span><br>  <span class="token punctuation">}</span><span class="token punctuation">,</span><br>  <span class="token punctuation">{</span><br>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"ui5-exercises-codejam"</span><br>  <span class="token punctuation">}</span><span class="token punctuation">,</span><br>  <span class="token punctuation">{</span><br>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"cap-sflight"</span><br>  <span class="token punctuation">}</span><span class="token punctuation">,</span><br>  <span class="token punctuation">{</span><br>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"cloud-cf-feature-flags-sample"</span><br>  <span class="token punctuation">}</span><span class="token punctuation">,</span><br>  <span class="token punctuation">{</span><br>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"cloud-espm-cloud-native"</span><br>  <span class="token punctuation">}</span><span class="token punctuation">,</span><br>  <span class="token punctuation">{</span><br>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"iot-edge-samples"</span><br>  <span class="token punctuation">}</span><br><span class="token punctuation">]</span></code></pre>
<h3>Get the first part of the name</h3>
<p>The convention is to use dashes to separate the different parts of the repository names, so it occurs to me that I can use <a href="https://stedolan.github.io/jq/manual/#split(str)">split</a>, which produces an array, and then grab the first element.</p>
<p>Let's have a first go, based on the <code>name</code> property access we saw earlier:</p>
<pre class="language-bash"><code class="language-bash">jq <span class="token string">'.[].name | split("-") | .[0]'</span> names.json</code></pre>
<p>This produces the following list:</p>
<pre class="language-json"><code class="language-json"><span class="token string">"artifact"</span><br><span class="token string">"cloud"</span><br><span class="token string">"sap"</span><br><span class="token string">"cloud"</span><br><span class="token string">"btp"</span><br><span class="token string">"btp"</span><br><span class="token string">"sap"</span><br><span class="token string">"abap"</span><br><span class="token string">"cloud"</span><br><span class="token string">"ui5"</span></code></pre>
<h3>Stay within the context of an array</h3>
<p>In jq, there are plenty of functions that operate on arrays, such as <a href="https://stedolan.github.io/jq/manual/#sort,sort_by(path_expression)">sort</a>, <a href="https://stedolan.github.io/jq/manual/#min,max,min_by(path_exp),max_by(path_exp)">min and max</a> and <a href="https://stedolan.github.io/jq/manual/#reverse">reverse</a>. There's also <a href="https://stedolan.github.io/jq/manual/#group_by(path_expression)">group-by</a> which is what will be useful to our requirements here. The manual's description is as follows:</p>
<blockquote>
<p><code>group_by(.foo)</code> takes as input an array, groups the elements having the same <code>.foo</code> field into separate arrays, and produces all of these arrays as elements of a larger array, sorted by the value of the <code>.foo</code> field.</p>
</blockquote>
<p>We're starting from an array (note the outer enclosing <code>[...]</code> in the data we're working on) so it makes sense to try to keep that array context. So rather than use the <a href="https://stedolan.github.io/jq/manual/#Array/ObjectValueIterator:.%5B%5D">array / object iterator</a>, which &quot;explodes&quot; an array into separate results, we can use <a href="https://stedolan.github.io/jq/manual/#map(x),map_values(x)">map</a> here:</p>
<pre class="language-bash"><code class="language-bash">jq <span class="token string">'map(.name | split("-") | .[0])'</span> names.json</code></pre>
<p>This produces the same values, but within an array:</p>
<pre class="language-json"><code class="language-json"><span class="token punctuation">[</span><br>  <span class="token string">"artifact"</span><span class="token punctuation">,</span><br>  <span class="token string">"cloud"</span><span class="token punctuation">,</span><br>  <span class="token string">"sap"</span><span class="token punctuation">,</span><br>  <span class="token string">"cloud"</span><span class="token punctuation">,</span><br>  <span class="token string">"btp"</span><span class="token punctuation">,</span><br>  <span class="token string">"btp"</span><span class="token punctuation">,</span><br>  <span class="token string">"sap"</span><span class="token punctuation">,</span><br>  <span class="token string">"abap"</span><span class="token punctuation">,</span><br>  <span class="token string">"cloud"</span><span class="token punctuation">,</span><br>  <span class="token string">"ui5"</span><br><span class="token punctuation">]</span></code></pre>
<h3>Using group_by</h3>
<p>Now we can use <a href="https://stedolan.github.io/jq/manual/#group_by(path_expression)">group-by</a> on this (switching here to a multi-line version for better readability):</p>
<pre class="language-bash"><code class="language-bash">jq <span class="token punctuation">\</span><br>  <span class="token string">'map(.name | split("-") | .[0])<br>  | group_by(.)'</span> <span class="token punctuation">\</span><br>  names.json</code></pre>
<p>This seems to &quot;<a href="https://en.wikipedia.org/wiki/Does_exactly_what_it_says_on_the_tin#:~:text=%22It%20does%20exactly%20what%20it,accurate%20description%20of%20its%20qualities.">do exactly what it says on the tin</a>&quot;:</p>
<pre class="language-json"><code class="language-json"><span class="token punctuation">[</span><br>  <span class="token punctuation">[</span><br>    <span class="token string">"abap"</span><br>  <span class="token punctuation">]</span><span class="token punctuation">,</span><br>  <span class="token punctuation">[</span><br>    <span class="token string">"artifact"</span><br>  <span class="token punctuation">]</span><span class="token punctuation">,</span><br>  <span class="token punctuation">[</span><br>    <span class="token string">"btp"</span><span class="token punctuation">,</span><br>    <span class="token string">"btp"</span><br>  <span class="token punctuation">]</span><span class="token punctuation">,</span><br>  <span class="token punctuation">[</span><br>    <span class="token string">"cloud"</span><span class="token punctuation">,</span><br>    <span class="token string">"cloud"</span><span class="token punctuation">,</span><br>    <span class="token string">"cloud"</span><br>  <span class="token punctuation">]</span><span class="token punctuation">,</span><br>  <span class="token punctuation">[</span><br>    <span class="token string">"sap"</span><span class="token punctuation">,</span><br>    <span class="token string">"sap"</span><br>  <span class="token punctuation">]</span><span class="token punctuation">,</span><br>  <span class="token punctuation">[</span><br>    <span class="token string">"ui5"</span><br>  <span class="token punctuation">]</span><br><span class="token punctuation">]</span></code></pre>
<p>Note that the value passed to <code>group_by</code> is <code>.</code>, i.e. the <code>path_expression</code> is the entire string value, for example <code>&quot;artifact&quot;</code>, <code>&quot;cloud&quot;</code>, <code>&quot;sap&quot;</code> etc.</p>
<p>Great. We can already start to see the distribution of topics now, but let's go a bit further.</p>
<h3>Creating a list of topic counts</h3>
<p>I think ideally I'd like a flat list of topics with their counts, in a tab-separated list, as that is then conducive to further processing on the command line should I want to. In other words, I want this sort of line for each topic:</p>
<pre><code>[count][tab][topic-name]
</code></pre>
<h3>Producing the raw data</h3>
<p>First, let's produce the raw data for this list. While we wanted to avoid exploding the array earlier, now would be the time to use the <a href="https://stedolan.github.io/jq/manual/#Array/ObjectValueIterator:.%5B%5D">array / object iterator</a>:</p>
<pre class="language-bash"><code class="language-bash">jq <span class="token punctuation">\</span><br>  <span class="token string">'map(.name | split("-") | .[0])<br>  | group_by(.)<br>  | .[]'</span> <span class="token punctuation">\</span><br>  names.json</code></pre>
<p>This produces a JSON value for each of the array items. Here, each item, and thus value produces, is an array containing one or more instances of a topic name:</p>
<pre class="language-json"><code class="language-json"><span class="token punctuation">[</span><br>  <span class="token string">"abap"</span><br><span class="token punctuation">]</span><br><span class="token punctuation">[</span><br>  <span class="token string">"artifact"</span><br><span class="token punctuation">]</span><br><span class="token punctuation">[</span><br>  <span class="token string">"btp"</span><span class="token punctuation">,</span><br>  <span class="token string">"btp"</span><br><span class="token punctuation">]</span><br><span class="token punctuation">[</span><br>  <span class="token string">"cloud"</span><span class="token punctuation">,</span><br>  <span class="token string">"cloud"</span><span class="token punctuation">,</span><br>  <span class="token string">"cloud"</span><br><span class="token punctuation">]</span><br><span class="token punctuation">[</span><br>  <span class="token string">"sap"</span><span class="token punctuation">,</span><br>  <span class="token string">"sap"</span><br><span class="token punctuation">]</span><br><span class="token punctuation">[</span><br>  <span class="token string">"ui5"</span><br><span class="token punctuation">]</span></code></pre>
<p>In effect, this removes the outermost <code>[...]</code> array that contains all these inner arrays.</p>
<p>Now it's just a matter of defining what we want to see, with the <a href="https://stedolan.github.io/jq/manual/#Arrayconstruction:%5B%5D">array constructor</a>, in this case, two elements representing the length of the array, and the first value of the array <code>[length, .[0]]</code>:</p>
<pre class="language-bash"><code class="language-bash">jq <span class="token punctuation">\</span><br>  <span class="token string">'map(.name | split("-") | .[0])<br>  | group_by(.)<br>  | .[]<br>  | [length, .[0]]'</span> <span class="token punctuation">\</span><br>  names.json</code></pre>
<p>Remember that this construct <code>.[] | ...</code> will iterate through each array element and pass them one at a time to the filter that follows the pipe. And this produces the following:</p>
<pre class="language-json"><code class="language-json"><span class="token punctuation">[</span><br>  <span class="token number">1</span><span class="token punctuation">,</span><br>  <span class="token string">"abap"</span><br><span class="token punctuation">]</span><br><span class="token punctuation">[</span><br>  <span class="token number">1</span><span class="token punctuation">,</span><br>  <span class="token string">"artifact"</span><br><span class="token punctuation">]</span><br><span class="token punctuation">[</span><br>  <span class="token number">2</span><span class="token punctuation">,</span><br>  <span class="token string">"btp"</span><br><span class="token punctuation">]</span><br><span class="token punctuation">[</span><br>  <span class="token number">3</span><span class="token punctuation">,</span><br>  <span class="token string">"cloud"</span><br><span class="token punctuation">]</span><br><span class="token punctuation">[</span><br>  <span class="token number">2</span><span class="token punctuation">,</span><br>  <span class="token string">"sap"</span><br><span class="token punctuation">]</span><br><span class="token punctuation">[</span><br>  <span class="token number">1</span><span class="token punctuation">,</span><br>  <span class="token string">"ui5"</span><br><span class="token punctuation">]</span></code></pre>
<h3>Output the results as a tab-separated list</h3>
<p>We have our list of topic counts, so now let's add the final touch to have a tab-separated list. There's nothing further we need to do to the data, it's as we want it. So we just need some formatting. In the <a href="https://stedolan.github.io/jq/manual/#Formatstringsandescaping">Format strings and escaping</a> section of the jq manual, we see that there's the <code>@tsv</code> which is described thus:</p>
<blockquote>
<p>The input must be an array, and it is rendered as TSV (tab-separated values). Each input array will be printed as a single line.</p>
</blockquote>
<p>This is exactly what we're looking for. Note that here, the &quot;input array&quot; referred to is each of the individual arrays in the output above, i.e. this is the first array:</p>
<pre class="language-json"><code class="language-json"><span class="token punctuation">[</span><br>  <span class="token number">1</span><span class="token punctuation">,</span><br>  <span class="token string">"abap"</span><br><span class="token punctuation">]</span></code></pre>
<p>Let's try it:</p>
<pre class="language-bash"><code class="language-bash">jq <span class="token punctuation">\</span><br>  <span class="token string">'map(.name | split("-") | .[0])<br>  | group_by(.)<br>  | .[]<br>  | [length, .[0]]<br>  | @tsv'</span> <span class="token punctuation">\</span><br>  names.json</code></pre>
<pre class="language-text"><code class="language-text">"1\tabap"<br>"1\tartifact"<br>"2\tbtp"<br>"3\tcloud"<br>"2\tsap"<br>"1\tui5"</code></pre>
<p>Close! Remember that by default, an invocation of <code>jq</code> on the command line will output JSON values by default. These strings are JSON values. But here we want the raw form, via the <code>--raw-output</code> (<code>-r</code>), to benefit from (and see) the tab characters (<code>\t</code>) that the <code>@tsv</code> has put in for us:</p>
<pre class="language-bash"><code class="language-bash">jq <span class="token parameter variable">-r</span> <span class="token punctuation">\</span><br>  <span class="token string">'map(.name | split("-") | .[0])<br>  | group_by(.)<br>  | .[]<br>  | [length, .[0]]<br>  | @tsv'</span> <span class="token punctuation">\</span><br>  names.json</code></pre>
<p>This gives us what we're looking for:</p>
<pre class="language-text"><code class="language-text">1    abap<br>1    artifact<br>2    btp<br>3    cloud<br>2    sap<br>1    ui5</code></pre>
<p>And in fact, remembering that when a jq filter is invoked from <code>gh</code> via the <code>--jq</code> option the raw output is used by default, we can now put everything together and benefit from that in the final <code>gh</code> invocation, which looks like this:</p>
<pre class="language-bash"><code class="language-bash">gh repo list SAP-samples <span class="token parameter variable">--limit</span> <span class="token number">10</span> <span class="token parameter variable">--public</span> <span class="token punctuation">\</span><br>  <span class="token parameter variable">--json</span> name <span class="token punctuation">\</span><br>  <span class="token parameter variable">--jq</span> <span class="token punctuation">\</span><br>  <span class="token string">'map(.name | split("-") | .[0])<br>   | group_by(.)<br>   | .[]<br>   | [length, .[0]]<br>   | @tsv'</span></code></pre>
<p>This gives us the same result, i.e.:</p>
<pre class="language-text"><code class="language-text">1    abap<br>1    artifact<br>2    btp<br>3    cloud<br>2    sap<br>1    ui5</code></pre>
<p>So I can see that the most common topic here is &quot;cloud&quot;.</p>
<h2>Wrapping up</h2>
<p>I'm happy with this approach, how I'm starting to get a better feel for how data flows through a jq filter, and also that I can use such filters with the GitHub CLI.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Converting strings to objects with jq</title>
      <link href="https://qmacro.org/blog/posts/2022/05/06/converting-strings-to-objects-with-jq/"/>
      <updated>2022-05-06T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2022/05/06/converting-strings-to-objects-with-jq/</id>
      <content type="html">
        <![CDATA[
      <p>In preparing some data for another upcoming blog post (now published: <a href="/blog/posts/2022/05/07/exploring-github-repo-name-distribution-with-jq/">Exploring GitHub repo name distribution with jq</a>), I needed to convert a list of fully qualified GitHub repository names into a JSON array of single-property objects (to reflect the style of JSON output from GitHub's <code>gh</code> CLI). I achieved this with a short jq filter. Here's how, recorded here, with my working thoughts, mostly for my outboard memory.</p>
<h2>The starting data</h2>
<p>For <a href="/blog/posts/2022/05/07/exploring-github-repo-name-distribution-with-jq/">that other blog post</a> I wanted to start with a list of repositories from GitHub. The list produced by the command I was invoking (<code>gh repo list SAP-samples --limit 10 --public</code>) was fine but to illustrate the wider point of the post I wanted to select specific repository names. So I ended up with a manually edited list like this, in a file called <code>names.txt</code>:</p>
<pre class="language-text"><code class="language-text">SAP-samples/cloud-sdk-js<br>SAP-samples/cloud-cap-samples-java<br>SAP-samples/btp-setup-automator<br>SAP-samples/btp-ai-sustainability-bootcamp<br>SAP-samples/cloud-cap-samples<br>SAP-samples/ui5-exercises-codejam<br>SAP-samples/cap-sflight<br>SAP-samples/cloud-cf-feature-flags-sample<br>SAP-samples/cloud-espm-cloud-native<br>SAP-samples/iot-edge-samples</code></pre>
<h2>The desired output</h2>
<p>What I wanted was a JSON version of this, where each repository name, minus the organisation prefix (<code>SAP-samples/</code>), was represented in a <code>name</code> property in an object, with all of them wrapped in an outer array, like this:</p>
<pre class="language-json"><code class="language-json"><span class="token punctuation">[</span><br>  <span class="token punctuation">{</span><br>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"cloud-sdk-js"</span><br>  <span class="token punctuation">}</span><span class="token punctuation">,</span><br>  <span class="token punctuation">{</span><br>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"cloud-cap-samples-java"</span><br>  <span class="token punctuation">}</span><span class="token punctuation">,</span><br>  <span class="token punctuation">{</span><br>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"btp-setup-automator"</span><br>  <span class="token punctuation">}</span><span class="token punctuation">,</span><br>  <span class="token punctuation">{</span><br>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"btp-ai-sustainability-bootcamp"</span><br>  <span class="token punctuation">}</span><span class="token punctuation">,</span><br>  <span class="token punctuation">{</span><br>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"cloud-cap-samples"</span><br>  <span class="token punctuation">}</span><span class="token punctuation">,</span><br>  <span class="token punctuation">{</span><br>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"ui5-exercises-codejam"</span><br>  <span class="token punctuation">}</span><span class="token punctuation">,</span><br>  <span class="token punctuation">{</span><br>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"cap-sflight"</span><br>  <span class="token punctuation">}</span><span class="token punctuation">,</span><br>  <span class="token punctuation">{</span><br>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"cloud-cf-feature-flags-sample"</span><br>  <span class="token punctuation">}</span><span class="token punctuation">,</span><br>  <span class="token punctuation">{</span><br>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"cloud-espm-cloud-native"</span><br>  <span class="token punctuation">}</span><span class="token punctuation">,</span><br>  <span class="token punctuation">{</span><br>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"iot-edge-samples"</span><br>  <span class="token punctuation">}</span><br><span class="token punctuation">]</span></code></pre>
<h2>Looking at jq options</h2>
<p>First off, the content of the text file is lines of raw text, so I'll need to use the <code>--raw-input</code> (<code>-R</code>) option to tell <code>jq</code> that.</p>
<p>Incidentally, if the lines of the file had been like this (where each line was enclosed in double quotes):</p>
<pre class="language-text"><code class="language-text">"SAP-samples/cloud-sdk-js"<br>"SAP-samples/cloud-cap-samples-java"<br>"SAP-samples/btp-setup-automator"<br>...</code></pre>
<p>then I wouldn't have needed this option, as these lines are all valid JSON values (a double-quoted string is a valid JSON value).</p>
<p>While thinking of command line options, I then considered the <code>--slurp</code> (<code>-s</code>) option. This is because I was thinking about gathering up the entire input to pass through the filter once, because I needed the final result to be enclosed in a single, outer array. For more on slurping and statelessness, you may like to read <a href="/blog/posts/2022/05/02/some-thoughts-on-jq-and-statelessness/">Some thoughts on jq and statelessness</a>.</p>
<p>What I noticed is that <code>--slurp</code> has a very specific effect when used with the <code>--raw-input</code> option, as described in the manual - see the second sentence here:</p>
<blockquote>
<p><code>--raw-input</code> : Don't parse the input as JSON. Instead, each line of text is passed to the filter as a string. If combined with <code>--slurp</code>, then the entire input is passed to the filter as a single long string.</p>
</blockquote>
<p>This would be a way to read all the repository names in at once, which would give me a chance to output them, transformed, in an enclosing array.</p>
<h3>Trying --slurp</h3>
<p>So let's start by looking at the effect of the combination of these two options, when processing the input data with the simple identity filter (<code>.</code>). With this invocation:</p>
<pre class="language-bash"><code class="language-bash">jq <span class="token parameter variable">-s</span> <span class="token parameter variable">-R</span> <span class="token builtin class-name">.</span> names.txt</code></pre>
<p>we get this, a single string:</p>
<pre><code>&quot;SAP-samples/cloud-sdk-js\nSAP-samples/cloud-cap-samples-java\nSAP-samples/btp-setup-automator\nSAP-samples/btp-ai-sustainability-bootcamp\nSAP-samples/cloud-cap-samples\nSAP-samples/ui5-exercises-codejam\nSAP-samples/cap-sflight\nSAP-samples/cloud-cf-feature-flags-sample\nSAP-samples/cloud-espm-cloud-native\nSAP-samples/iot-edge-samples\n&quot;
</code></pre>
<p>At first I thought I could simply then separate the names by using <code>split</code> to chop up on what looked to be a newline (<code>\n</code>) character separating each one; this would be ideal as <code>split</code> produces an array, which is exactly what I'm looking for:</p>
<pre class="language-bash"><code class="language-bash">jq <span class="token parameter variable">-s</span> <span class="token parameter variable">-R</span> <span class="token string">'split("\n")'</span> names.txt</code></pre>
<p>But this wasn't quite right, producing this:</p>
<pre class="language-json"><code class="language-json"><span class="token punctuation">[</span><br>  <span class="token string">"SAP-samples/cloud-sdk-js"</span><span class="token punctuation">,</span><br>  <span class="token string">"SAP-samples/cloud-cap-samples-java"</span><span class="token punctuation">,</span><br>  <span class="token string">"SAP-samples/btp-setup-automator"</span><span class="token punctuation">,</span><br>  <span class="token string">"SAP-samples/btp-ai-sustainability-bootcamp"</span><span class="token punctuation">,</span><br>  <span class="token string">"SAP-samples/cloud-cap-samples"</span><span class="token punctuation">,</span><br>  <span class="token string">"SAP-samples/ui5-exercises-codejam"</span><span class="token punctuation">,</span><br>  <span class="token string">"SAP-samples/cap-sflight"</span><span class="token punctuation">,</span><br>  <span class="token string">"SAP-samples/cloud-cf-feature-flags-sample"</span><span class="token punctuation">,</span><br>  <span class="token string">"SAP-samples/cloud-espm-cloud-native"</span><span class="token punctuation">,</span><br>  <span class="token string">"SAP-samples/iot-edge-samples"</span><span class="token punctuation">,</span><br>  <span class="token string">""</span><br><span class="token punctuation">]</span></code></pre>
<p>What's that random empty string at the end?</p>
<p>Turns out that I wasn't staring hard enough at the single string; the newline characters weren't used to &quot;join&quot; each string, they were just there because each of the strings themselves included a newline.</p>
<p>In other words, they weren't separators, they were just part of the data, and so the last newline at the end of the last string &quot;SAP-samples/iot-edge-samples&quot; meant that <code>split</code> would produce a final empty value, i.e. what it found to the right of the last newline character, as we can see in the last array position above (<code>&quot;&quot;</code>).</p>
<h3>Avoiding or cleaning up the extra empty value</h3>
<p>Of course, I was tempted to munge the input data before even feeding it to <code>jq</code>, so each repository name <em>would</em> be a valid JSON value. I would do this by enclosing each of them in double quotes. But that wasn't what I was looking to do here, I wanted to use <code>jq</code> on its own.</p>
<p>Another way would be just to ignore the last value in the array, like this:</p>
<pre class="language-bash"><code class="language-bash">jq <span class="token parameter variable">-s</span> <span class="token parameter variable">-R</span> <span class="token string">'split("\n") | .[:-1]'</span> names.txt</code></pre>
<p>This makes use of the <a href="https://stedolan.github.io/jq/manual/#Array/StringSlice:.%5B10:15%5D">array slice</a>, where the second filter <code>.[:-1]</code> says to return all the array elements up to but not including the last one, producing the basics of what we're looking for:</p>
<pre class="language-json"><code class="language-json"><span class="token punctuation">[</span><br>  <span class="token string">"SAP-samples/cloud-sdk-js"</span><span class="token punctuation">,</span><br>  <span class="token string">"SAP-samples/cloud-cap-samples-java"</span><span class="token punctuation">,</span><br>  <span class="token string">"SAP-samples/btp-setup-automator"</span><span class="token punctuation">,</span><br>  <span class="token string">"SAP-samples/btp-ai-sustainability-bootcamp"</span><span class="token punctuation">,</span><br>  <span class="token string">"SAP-samples/cloud-cap-samples"</span><span class="token punctuation">,</span><br>  <span class="token string">"SAP-samples/ui5-exercises-codejam"</span><span class="token punctuation">,</span><br>  <span class="token string">"SAP-samples/cap-sflight"</span><span class="token punctuation">,</span><br>  <span class="token string">"SAP-samples/cloud-cf-feature-flags-sample"</span><span class="token punctuation">,</span><br>  <span class="token string">"SAP-samples/cloud-espm-cloud-native"</span><span class="token punctuation">,</span><br>  <span class="token string">"SAP-samples/iot-edge-samples"</span><br><span class="token punctuation">]</span></code></pre>
<p>While this would be perfectly practical, creating and then removing unwanted data elements didn't feel entirely agreeable to me today, so I looked for another approach.</p>
<h2>Using inputs</h2>
<p>On my <a href="https://www.strava.com/activities/7101292856">walk</a>, thinking about this, I decided to see if there were any approaches that didn't involve the use of the <code>--slurp</code> option. And there was, in the form of <a href="https://stedolan.github.io/jq/manual/#inputs">inputs</a>, which, according to the manual:</p>
<blockquote>
<p>outputs all remaining inputs, one by one.</p>
</blockquote>
<p>This suggested to me that if I were to call <code>inputs</code> at the start, I'd likely get all but the first string, and this was the case:</p>
<pre class="language-bash"><code class="language-bash">jq <span class="token parameter variable">-R</span> inputs names.txt</code></pre>
<p>This produced this:</p>
<pre class="language-json"><code class="language-json"><span class="token string">"SAP-samples/cloud-cap-samples-java"</span><br><span class="token string">"SAP-samples/btp-setup-automator"</span><br><span class="token string">"SAP-samples/btp-ai-sustainability-bootcamp"</span><br><span class="token string">"SAP-samples/cloud-cap-samples"</span><br><span class="token string">"SAP-samples/ui5-exercises-codejam"</span><br><span class="token string">"SAP-samples/cap-sflight"</span><br><span class="token string">"SAP-samples/cloud-cf-feature-flags-sample"</span><br><span class="token string">"SAP-samples/cloud-espm-cloud-native"</span><br><span class="token string">"SAP-samples/iot-edge-samples"</span></code></pre>
<p>The first string</p>
<pre class="language-json"><code class="language-json"><span class="token string">"SAP-samples/cloud-sdk-js"</span></code></pre>
<p>was missing, as it was already &quot;consumed&quot; ... but happily available in <code>.</code>. So I could <a href="https://stedolan.github.io/jq/manual/#Arrayconstruction:%5B%5D">construct an array</a> directly at the start of the filter program, like this:</p>
<pre class="language-bash"><code class="language-bash">jq <span class="token parameter variable">-R</span> <span class="token string">'[.,inputs]'</span> names.txt</code></pre>
<blockquote>
<p>See the end of this post for an update on this.</p>
</blockquote>
<p>Lo and behold, it seems that this is exactly the sort of thing I'm looking to start with:</p>
<pre class="language-json"><code class="language-json"><span class="token punctuation">[</span><br>  <span class="token string">"SAP-samples/cloud-sdk-js"</span><span class="token punctuation">,</span><br>  <span class="token string">"SAP-samples/cloud-cap-samples-java"</span><span class="token punctuation">,</span><br>  <span class="token string">"SAP-samples/btp-setup-automator"</span><span class="token punctuation">,</span><br>  <span class="token string">"SAP-samples/btp-ai-sustainability-bootcamp"</span><span class="token punctuation">,</span><br>  <span class="token string">"SAP-samples/cloud-cap-samples"</span><span class="token punctuation">,</span><br>  <span class="token string">"SAP-samples/ui5-exercises-codejam"</span><span class="token punctuation">,</span><br>  <span class="token string">"SAP-samples/cap-sflight"</span><span class="token punctuation">,</span><br>  <span class="token string">"SAP-samples/cloud-cf-feature-flags-sample"</span><span class="token punctuation">,</span><br>  <span class="token string">"SAP-samples/cloud-espm-cloud-native"</span><span class="token punctuation">,</span><br>  <span class="token string">"SAP-samples/iot-edge-samples"</span><br><span class="token punctuation">]</span></code></pre>
<p>Now that I had the basic structure, it was then just a matter of modifying each element, from a string to an object. Moreover, given that I had the elements where I wanted them, in an outer array, it would seem sensible at this point onwards to express the transformations required via <a href="https://stedolan.github.io/jq/manual/#map(x),map_values(x)">map</a>, which (like <code>map</code> in other languages, I guess it's as much of a paradigm as it is a function or filter), takes an array and produces an array.</p>
<p>So for example, I could replace each string with its length, while still keeping the structure, by passing the <code>[.,inputs]</code> into <code>map</code> like this:</p>
<pre class="language-bash"><code class="language-bash">jq <span class="token parameter variable">-c</span> <span class="token parameter variable">-R</span> <span class="token string">'[.,inputs] | map(length)'</span> names.txt</code></pre>
<p>This would produce the following (note I've used the <code>--compact-output</code> (<code>-c</code>) option to save space here):</p>
<pre class="language-json"><code class="language-json"><span class="token punctuation">[</span><span class="token number">24</span><span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">,</span><span class="token number">42</span><span class="token punctuation">,</span><span class="token number">29</span><span class="token punctuation">,</span><span class="token number">33</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">41</span><span class="token punctuation">,</span><span class="token number">35</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">]</span></code></pre>
<h2>Transforming the repository name</h2>
<p>In the modification requirements, I first had to remove the <code>SAP-samples/</code> organisation name prefix, and I turned to <a href="https://stedolan.github.io/jq/manual/#sub(regex;tostring)sub(regex;string;flags)">sub</a> for that, as I'm partial to the occasional regular expression:</p>
<pre class="language-bash"><code class="language-bash">jq <span class="token parameter variable">-R</span> <span class="token string">'[.,inputs] | map(sub("^.+/";""))'</span> names.txt</code></pre>
<p>Mapping the substitution of <code>^.+/</code> (anchored at the start of the line, at least one but possibly more characters, up to and including a forward slash) with nothing (<code>&quot;&quot;</code>) gives this:</p>
<pre class="language-json"><code class="language-json"><span class="token punctuation">[</span><br>  <span class="token string">"cloud-sdk-js"</span><span class="token punctuation">,</span><br>  <span class="token string">"cloud-cap-samples-java"</span><span class="token punctuation">,</span><br>  <span class="token string">"btp-setup-automator"</span><span class="token punctuation">,</span><br>  <span class="token string">"btp-ai-sustainability-bootcamp"</span><span class="token punctuation">,</span><br>  <span class="token string">"cloud-cap-samples"</span><span class="token punctuation">,</span><br>  <span class="token string">"ui5-exercises-codejam"</span><span class="token punctuation">,</span><br>  <span class="token string">"cap-sflight"</span><span class="token punctuation">,</span><br>  <span class="token string">"cloud-cf-feature-flags-sample"</span><span class="token punctuation">,</span><br>  <span class="token string">"cloud-espm-cloud-native"</span><span class="token punctuation">,</span><br>  <span class="token string">"iot-edge-samples"</span><br><span class="token punctuation">]</span></code></pre>
<h2>Objectifying the string</h2>
<p>The second transformation was to make the simple string value into the value for a property called <code>name</code>, within an object.</p>
<p>So for the first string</p>
<pre class="language-json"><code class="language-json"><span class="token string">"cloud-sdk-js"</span></code></pre>
<p>I wanted this:</p>
<pre class="language-json"><code class="language-json"><span class="token punctuation">{</span><br>  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"cloud-sdk-js"</span><br><span class="token punctuation">}</span></code></pre>
<p>Similar to the <a href="https://stedolan.github.io/jq/manual/#Arrayconstruction:%5B%5D">array construction</a> there's also the <a href="https://stedolan.github.io/jq/manual/#ObjectConstruction:%7B%7D">object construction</a>, with which objects can be created on the fly quite easily. And as the manual says:</p>
<blockquote>
<p>If the keys are &quot;identifier-like&quot;, then the quotes can be left off</p>
</blockquote>
<p>So I can use <code>name</code> rather than <code>&quot;name&quot;</code> for the property, reducing the JSON noise a little:</p>
<pre class="language-bash"><code class="language-bash">jq <span class="token parameter variable">-R</span> <span class="token string">'[.,inputs] | map(sub("^.+/";"")) | map({name: .})'</span> names.txt</code></pre>
<p>This produces:</p>
<pre class="language-json"><code class="language-json"><span class="token punctuation">[</span><br>  <span class="token punctuation">{</span><br>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"cloud-sdk-js"</span><br>  <span class="token punctuation">}</span><span class="token punctuation">,</span><br>  <span class="token punctuation">{</span><br>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"cloud-cap-samples-java"</span><br>  <span class="token punctuation">}</span><span class="token punctuation">,</span><br>  <span class="token punctuation">{</span><br>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"btp-setup-automator"</span><br>  <span class="token punctuation">}</span><span class="token punctuation">,</span><br>  <span class="token punctuation">{</span><br>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"btp-ai-sustainability-bootcamp"</span><br>  <span class="token punctuation">}</span><span class="token punctuation">,</span><br>  <span class="token punctuation">{</span><br>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"cloud-cap-samples"</span><br>  <span class="token punctuation">}</span><span class="token punctuation">,</span><br>  <span class="token punctuation">{</span><br>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"ui5-exercises-codejam"</span><br>  <span class="token punctuation">}</span><span class="token punctuation">,</span><br>  <span class="token punctuation">{</span><br>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"cap-sflight"</span><br>  <span class="token punctuation">}</span><span class="token punctuation">,</span><br>  <span class="token punctuation">{</span><br>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"cloud-cf-feature-flags-sample"</span><br>  <span class="token punctuation">}</span><span class="token punctuation">,</span><br>  <span class="token punctuation">{</span><br>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"cloud-espm-cloud-native"</span><br>  <span class="token punctuation">}</span><span class="token punctuation">,</span><br>  <span class="token punctuation">{</span><br>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"iot-edge-samples"</span><br>  <span class="token punctuation">}</span><br><span class="token punctuation">]</span></code></pre>
<p>Actually we can reduce the filter a little here, by including the object construction within the first <code>map</code>, like this:</p>
<pre class="language-bash"><code class="language-bash">jq <span class="token parameter variable">-R</span> <span class="token string">'[.,inputs] | map(sub("^.+/";"") | {name: .})'</span> names.txt</code></pre>
<p>and it produces exactly the same thing. And what it produces, is what we're looking for.</p>
<h2>Wrapping up</h2>
<p>So there we are, I can now produce a simulation of what <code>gh</code>'s JSON output creates, from a flat list of simple strings, using a modest filter with <code>jq</code>. Of course, there are other ways of achieving this, but I'm happy with this for now.</p>
<hr>
<p>There is some brief discussion of this post on <a href="https://news.ycombinator.com/item?id=31293982#31294281">Hacker News</a> and <a href="https://lobste.rs/s/qi5tge/converting_strings_objects_with_jq">Lobsters</a>.</p>
<hr>
<p>Update: in the middle of the night last night, after publishing this post, I woke up and suddenly realised that I could make this even neater, by the use of the <code>--null-input</code> (<code>-n</code>) option, which is described as follows:</p>
<blockquote>
<p>Don't read any input at all! Instead, the filter is run once using null as the input.</p>
</blockquote>
<p>That in turn means that I could avoid the two-item list of <code>.</code> and <code>inputs</code>, and simply have:</p>
<pre class="language-bash"><code class="language-bash">jq <span class="token parameter variable">-R</span> <span class="token parameter variable">-n</span> <span class="token string">'[inputs]'</span> names.txt</code></pre>
<p>I do still have a place in my heart for <code>[.,inputs]</code> because it reminds me of the fundamental &quot;first and rest&quot;, or &quot;head and tail&quot; concept from functional programming. See the &quot;Subsequent understanding&quot; section in <a href="/blog/posts/2017/02/19/the-beauty-of-recursion-and-list-machinery/">The beauty of recursion and list machinery</a> for more on this, if you're interested.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Some thoughts on jq and statelessness</title>
      <link href="https://qmacro.org/blog/posts/2022/05/02/some-thoughts-on-jq-and-statelessness/"/>
      <updated>2022-05-02T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2022/05/02/some-thoughts-on-jq-and-statelessness/</id>
      <content type="html">
        <![CDATA[
      <p>I came across a great article <a href="https://lobste.rs/s/uhkwhn/introducing_zq_easier_faster">via lobsters</a> recently: <a href="https://www.brimdata.io/blog/introducing-zq/">Introducing zq: an Easier (and Faster) Alternative to jq</a>. I <a href="https://lobste.rs/s/uhkwhn/introducing_zq_easier_faster#c_ue6azr">posted</a> some brief thoughts on it over on the lobsters thread, and in the spirit of &quot;owning your own words&quot;, I thought I'd write them up here too.</p>
<p>I do like articles like this, that show and lay out the thinking behind the conclusion, and along the way, impart knowledge about the topic at hand. Especially when they're on a subject I'm eager to learn more about.</p>
<p>While reading the article a couple of things struck me.</p>
<h2>Stateless dataflow</h2>
<p>First, I'd not really heard of the phrase &quot;stateless dataflow&quot; (and its opposite &quot;stateful dataflow&quot;). I did look it up via Google and found that there were <a href="https://www.google.com/search?q=%22stateless+(dataflow%7Cdata-flow)">very few results</a>, most of them being scholarly papers either in PDF or even PostScript form. So I sort of forgave myself for not really knowing what was implied, although I had taken a guess anyway.</p>
<p>Basically the author was explaining that the reason for finding the <code>jq</code> language difficult was down to the computational model. I don't think <code>jq</code> is the easiest language, and in my experience so far that is down to a number of things, not least the relative terseness of the official manual, but also my inability to grasp powerful constructs, as well as having to manipulate complex object and array structures in my head, not only statically, but also having to imagine how they might change when processed through filters.</p>
<p>It seems that the author's issue with the &quot;stateless dataflow&quot; was down to the fact that what's being processed by <code>jq</code> is very often a <em>stream</em> of discrete JSON values, rather than a single value.</p>
<h2>JSON values</h2>
<p>So what do I mean by &quot;JSON value&quot;? Well, in the article <a href="https://www.json.org/json-en.html">Introducing JSON</a> there's a McKeeman form expressing the JSON grammar, and the building blocks of what we know as JSON are described as &quot;JSON values&quot; thus:</p>
<pre><code>value
  object
  array
  string
  number
  &quot;true&quot;
  &quot;false&quot;
  &quot;null&quot;
</code></pre>
<p>These JSON values are described as fundamental building blocks in <a href="https://datatracker.ietf.org/doc/html/rfc8259#section-3">RFC 8259</a>.</p>
<p>Anything expressed in JSON will be one of these value types. This is why, for example, <code>&quot;hello world&quot;</code> is valid JSON, as is <code>42</code>.</p>
<h2>Processing JSON with jq</h2>
<p>In the &quot;Invoking jq&quot; section of the <a href="https://stedolan.github.io/jq/manual/">manual</a>, it says:</p>
<blockquote>
<p>jq filters run on a stream of JSON data. The input to jq is parsed as a sequence of whitespace-separated JSON values which are passed through the provided filter one at a time. The output(s) of the filter are written to standard out, again as a sequence of whitespace-separated JSON data.</p>
</blockquote>
<p>Key for me, in my journey towards a deeper understanding of <code>jq</code>, is that the &quot;filter&quot; here is the entire <code>jq</code> program, whether that's something short expressed literally on the command line, or in a file, pointed to with the <code>--from-file</code> or <code>-f</code> option.</p>
<p>So each and every JSON value that is passed into <code>jq</code> is processed by the entire program.</p>
<p>There's the &quot;slurp&quot; option (with <code>--slurp</code> or <code>-s</code>) which will &quot;read the entire input stream into a large array and run the filter just once&quot;. This is maybe what one might initially assume or expect <code>jq</code> to do, but one needs to be explicit.</p>
<p>Perhaps a small example might help, based on a sequence of JSON values that we can produce with <a href="https://linux.die.net/man/1/seq">seq</a>:</p>
<pre class="language-bash"><code class="language-bash"><span class="token function">seq</span> <span class="token number">3</span></code></pre>
<p>produces:</p>
<pre><code>1
2
3
</code></pre>
<p>If we pass this sequence of JSON values through the simplest of <code>jq</code> filters -- the <a href="https://stedolan.github.io/jq/manual/#Identity:.">identity</a> function -- like this:</p>
<pre class="language-bash"><code class="language-bash"><span class="token function">seq</span> <span class="token number">3</span> <span class="token operator">|</span> jq <span class="token builtin class-name">.</span></code></pre>
<p>then we get this:</p>
<pre><code>1
2
3
</code></pre>
<p>One might think &quot;well, what else would you expect?&quot; but this illustrates the nature of running discrete JSON values through a filter quite nicely.</p>
<p>Before we continue, let's use the <code>--compact-output</code> (or <code>-c</code>) option here:</p>
<pre class="language-bash"><code class="language-bash"><span class="token function">seq</span> <span class="token number">3</span> <span class="token operator">|</span> jq <span class="token parameter variable">-c</span> <span class="token builtin class-name">.</span></code></pre>
<p>The output is the same:</p>
<pre><code>1
2
3
</code></pre>
<p>For me, this drives home the &quot;discrete JSON values&quot; approach to both <code>jq</code>'s input and output processing - there are three discrete values in, and three out.</p>
<h2>Stateless</h2>
<p>I guess this also helps explain what the author of the article means by &quot;stateless&quot;. As far as the filter is concerned, it's seeing the values <code>1</code>, <code>2</code> and <code>3</code> separately and in new contexts each time. And as the article illustrates, this is where <code>jq</code>'s <code>--slurp</code> (or <code>-s</code>) option comes in. Adding the option to the above example:</p>
<pre class="language-bash"><code class="language-bash"><span class="token function">seq</span> <span class="token number">3</span> <span class="token operator">|</span> jq <span class="token parameter variable">-c</span> <span class="token parameter variable">-s</span> <span class="token builtin class-name">.</span></code></pre>
<p>produces this:</p>
<pre><code>[1,2,3]
</code></pre>
<p>A <em>single JSON value</em>. This is because what the filter received was actually this:</p>
<pre class="language-json"><code class="language-json"><span class="token punctuation">[</span><br>  <span class="token number">1</span><span class="token punctuation">,</span><br>  <span class="token number">2</span><span class="token punctuation">,</span><br>  <span class="token number">3</span><br><span class="token punctuation">]</span></code></pre>
<p>Three discrete values, but wrapped in an outer enclosing array. A single JSON value, in the form of an array. And being the simple identity function, just regurgitating what it reads, produces in turn that same, single JSON value as output. On one line here, rather than pretty printed with more whitespace, because of the <code>-c</code> option.</p>
<h2>Stateful</h2>
<p>The <code>--slurp</code> option brings about a sort of statefulness, in that every discrete JSON value, previously independent, now share the same single context of the single invocation of the <code>jq</code> filter.</p>
<p>Changing the filter from the <code>.</code> identity function to the <code>add</code> function* demonstrates this singular context, this &quot;statefulness&quot;:</p>
<pre class="language-bash"><code class="language-bash"><span class="token function">seq</span> <span class="token number">3</span> <span class="token operator">|</span> jq <span class="token parameter variable">-s</span> <span class="token function">add</span></code></pre>
<p>This yields the single JSON value:</p>
<pre><code>6
</code></pre>
<p>*I'm calling them &quot;functions&quot;, but the manual actually calls them &quot;filters&quot;</p>
<h2>Syntactic sugar</h2>
<p>There's one more observation I'd like to make in these ramblings. The article describes the task of adding up the numbers here:</p>
<pre class="language-bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token string">'[1,2,3] [4,5,6]'</span></code></pre>
<p>In other words, the result should be 21.</p>
<p>We know by now that this:</p>
<pre><code>[1,2,3] [4,5,6]
</code></pre>
<p>is actually two discrete JSON values. Two arrays. So, as the author demonstrates, the <code>--slurp</code> option is called for, thus:</p>
<pre class="language-bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token string">'[1,2,3] [4,5,6]'</span> <span class="token operator">|</span> jq <span class="token parameter variable">-s</span> <span class="token string">'[.[] | add] | add'</span></code></pre>
<p>So in this invocation, the filter is executed once only, and actually receives:</p>
<pre class="language-json"><code class="language-json"><span class="token punctuation">[</span><br>  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><br>  <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><br><span class="token punctuation">]</span></code></pre>
<p>The article does a great job of describing the author's thought process here, and also showing how some of the basic filters work. And I guess the filter used here is possibly deliberately complex, or at least contrived to illustrate a point:</p>
<pre><code>[.[] | add] | add
</code></pre>
<p>However to be fair on the language, it has some syntactic sugar in the form of <a href="https://stedolan.github.io/jq/manual/#map(x),map_values(x)">map</a>. In the description, we read:</p>
<blockquote>
<p><code>map(x)</code> is equivalent to <code>[.[] | x]</code>. In fact, this is how it's defined.</p>
</blockquote>
<p>And we can see this definition in <code>jq</code>'s source, specifically in the <a href="https://github.com/stedolan/jq/blob/a9f97e9e61a910a374a5d768244e8ad63f407d3e/src/builtin.jq#L3">builtin.jq</a> file:</p>
<pre><code>def map(f): [.[] | f];
</code></pre>
<p>This definition helps the mental model, and helps me a lot, not only to reduce noise, but also to relate the computation to an arguably well-known function (map). So the entire line turns into a much simpler:</p>
<pre class="language-bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token string">'[1,2,3] [4,5,6]'</span> <span class="token operator">|</span> jq <span class="token parameter variable">-s</span> <span class="token string">'map(add) | add'</span></code></pre>
<h2>Wrapping up</h2>
<p>This has turned into a bit of a longer ramble, beyond what I'd originally <a href="https://lobste.rs/s/uhkwhn/introducing_zq_easier_faster#c_ue6azr">commented</a>. But writing it has helped me think about this a bit more. Perhaps it helps you too - I hope so!</p>
<p>And most importantly, my thoughts in this post should not detract from the article nor from their conclusions with zq - more power to them!</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Bash notes 3</title>
      <link href="https://qmacro.org/blog/posts/2022/04/17/bash-notes-3/"/>
      <updated>2022-04-17T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2022/04/17/bash-notes-3/</id>
      <content type="html">
        <![CDATA[
      <p>Another Exercism Bash track exercise, another opportunity to learn from the community solutions. This time I came across a few nice Bash language features that I'd probably known about but forgotten due to lack of practice.</p>
<p>The exercise in question is <a href="https://exercism.org/tracks/bash/exercises/atbash-cipher">Atbash Cipher</a> and the features that I wanted to share with you are from user <a href="https://exercism.org/profiles/chicovg">Victor Guthrie</a>'s <a href="https://exercism.org/tracks/bash/exercises/atbash-cipher/solutions/chicovg">solution</a>.</p>
<h2>Array definition</h2>
<p>The first line in Victor's solution is as follows:</p>
<pre class="language-bash"><code class="language-bash"><span class="token assign-left variable">alphabet</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">{</span>a<span class="token punctuation">..</span>z<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>
<p>The concise nature of this is quite striking. There are two mechanisms at play here. The first is the outer brackets <code>(...)</code>. Brackets are used in different contexts in Bash, but here, without any leading symbol before the opening bracket, and in the context of an assignment to a variable, they represent the definition of an array.</p>
<p>Here's a simple example, with a variable <code>letters</code> declared thus:</p>
<pre class="language-bash"><code class="language-bash"><span class="token assign-left variable">letters</span><span class="token operator">=</span><span class="token punctuation">(</span>a b c<span class="token punctuation">)</span></code></pre>
<p>This results in <code>letters</code> being an array of three elements, the values <code>a</code>, <code>b</code> and <code>c</code>. We can check this as follows:</p>
<pre class="language-bash"><code class="language-bash"><span class="token keyword">for</span> <span class="token for-or-select variable">letter</span> <span class="token keyword">in</span> <span class="token variable">${letters<span class="token punctuation">[</span>@<span class="token punctuation">]</span>}</span><span class="token punctuation">;</span> <span class="token keyword">do</span> <span class="token builtin class-name">echo</span> <span class="token string">"-> <span class="token variable">$letter</span>"</span><span class="token punctuation">;</span> <span class="token keyword">done</span></code></pre>
<p>This produces:</p>
<pre><code>-&gt; a
-&gt; b
-&gt; c
</code></pre>
<h2>Brace expansion</h2>
<p>So what's the <code>{a..z}</code> inside of the brackets in this particular case? Well, given the variable name and the <code>a</code> and the <code>z</code> we can probably reasonably guess that it's all the letters in the alphabet.</p>
<p>And we'd be right. But what is that construct and how does it work? I find that one of the key aspects of learning Bash and any language is knowing what things are called, so you can research them in the documentation.</p>
<p>And the <code>{...}</code> construct is called <a href="https://www.gnu.org/software/bash/manual/html_node/Brace-Expansion.html">brace expansion</a>, which is described as:</p>
<blockquote>
<p>A mechanism by which arbitrary strings may be generated.</p>
</blockquote>
<p>There are plenty of other expansion mechanisms in Bash, which are documented in the <a href="https://www.gnu.org/software/bash/manual/html_node/Shell-Expansions.html">Shell Expansions</a> section of the manual.</p>
<p>Anyway, this example will expand the characters <code>a</code> and <code>z</code> lexicographically, using the default C locale, resulting in every letter of the alphabet. What brace expansion offers is more than this, and I'd recommend you take a quick look at the page in the manual. To give you a taste, you can do things like this:</p>
<pre class="language-bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token punctuation">{</span>a,b<span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">..</span><span class="token number">3</span><span class="token punctuation">}</span></code></pre>
<p>which results in:</p>
<pre><code>a1 a2 a3 b1 b2 b3
</code></pre>
<p>You can even use numbers, with an optional increment value, like this:</p>
<pre class="language-bash"><code class="language-bash"><span class="token punctuation">;</span> <span class="token builtin class-name">echo</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">..</span><span class="token number">10</span><span class="token punctuation">..</span><span class="token number">2</span><span class="token punctuation">}</span></code></pre>
<p>the <code>..2</code> is the optional increment, and this expands to:</p>
<pre><code>1 3 5 7 9
</code></pre>
<p>Nice!</p>
<h2>Character classes and bracket expressions</h2>
<p>In the <code>main</code> function of Victor's solution, the first line is this:</p>
<pre class="language-bash"><code class="language-bash"><span class="token builtin class-name">local</span> <span class="token assign-left variable">trimmed</span><span class="token operator">=</span><span class="token string">"<span class="token variable">${2<span class="token operator">/</span><span class="token operator">/</span><span class="token punctuation">[</span><span class="token operator">^</span><span class="token punctuation">[</span><span class="token operator">:</span>alnum<span class="token operator">:</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">/</span>}</span>"</span></code></pre>
<p>We've come across some of the constructs here before, but let's break this down to get to something I'd vaguely known about but never could remember how to express it, until now.</p>
<p>The value being assigned to the locally declared variable <code>trimmed</code> is the result of a <a href="https://www.gnu.org/software/bash/manual/html_node/Shell-Parameter-Expansion.html">shell parameter expansion</a>. Specifically it's this construct, where <code>pattern</code> is replaced with <code>string</code> inside of the given <code>parameter</code>:</p>
<pre class="language-bash"><code class="language-bash"><span class="token variable">${parameter<span class="token operator">/</span>pattern<span class="token operator">/</span>string}</span></code></pre>
<p>In fact, the version we see in the solution is the &quot;all matches&quot; version, where <code>pattern</code> itself begins with a <code>/</code>; this is described in the manual thus:</p>
<blockquote>
<p>If pattern begins with ‘/’, all matches of pattern are replaced with string.</p>
</blockquote>
<p>In other words we should first see this in the expression:</p>
<pre class="language-bash"><code class="language-bash"><span class="token builtin class-name">local</span> <span class="token assign-left variable">trimmed</span><span class="token operator">=</span><span class="token string">"<span class="token variable">${2<span class="token operator">/</span><span class="token operator">/</span>...<span class="token operator">/</span>}</span>"</span></code></pre>
<p>By the way, the <code>2</code> here refers to the second positional parameter passed into the <code>main</code> function.</p>
<p>Note that the <code>string</code> is empty here; in other words, every occurrence of where <code>pattern</code> is matched is replaced with nothing, i.e. effectively removed.</p>
<p>So what is the pattern? Let's now stare at it for a second:</p>
<pre class="language-bash"><code class="language-bash"><span class="token punctuation">[</span>^<span class="token punctuation">[</span>:alnum:<span class="token punctuation">]</span><span class="token punctuation">]</span></code></pre>
<p>There are two things going on here. Well, three if you count the <code>^</code> separately. Working from the outside in, we start with a bracket expression, thus:</p>
<pre class="language-bash"><code class="language-bash"><span class="token punctuation">[</span><span class="token punctuation">..</span>.<span class="token punctuation">]</span></code></pre>
<p>This is simply a list of characters, where any of them can be matched. It's also possible to use a &quot;range expression&quot; instead of a list of characters, so <code>a-c</code> would match <code>a</code>, <code>b</code> or <code>c</code>. It's even possible to combine range expressions with single characters. For example, this:</p>
<pre class="language-bash"><code class="language-bash"><span class="token assign-left variable">fruit</span><span class="token operator">=</span>bananas<br><span class="token builtin class-name">echo</span> <span class="token variable">${fruit<span class="token operator">/</span><span class="token operator">/</span><span class="token punctuation">[</span>sa-c<span class="token punctuation">]</span><span class="token operator">/</span>_}</span></code></pre>
<p>would result in:</p>
<pre><code>__n_n__
</code></pre>
<p>A circumflex (<code>^</code>) in the first character position of the bracket expression negates the characters listed, so this:</p>
<pre class="language-bash"><code class="language-bash"><span class="token assign-left variable">fruit</span><span class="token operator">=</span>bananas<br><span class="token builtin class-name">echo</span> <span class="token variable">${fruit<span class="token operator">/</span><span class="token operator">/</span><span class="token punctuation">[</span><span class="token operator">^</span>sa-c<span class="token punctuation">]</span><span class="token operator">/</span>_}</span></code></pre>
<p>would result in:</p>
<pre><code>ba_a_as
</code></pre>
<p>So we can see that</p>
<pre class="language-bash"><code class="language-bash"><span class="token punctuation">[</span>^<span class="token punctuation">[</span>:alnum:<span class="token punctuation">]</span><span class="token punctuation">]</span></code></pre>
<p>has a brace expression which is negating something (<code>[^...]</code>) but it's neither one or more single characters nor a range expression. It's this:</p>
<pre class="language-bash"><code class="language-bash"><span class="token punctuation">[</span>:alnum:<span class="token punctuation">]</span></code></pre>
<p>This is a &quot;character class&quot;, of which there are several, described in the <a href="https://www.gnu.org/software/grep/manual/html_node/Character-Classes-and-Bracket-Expressions.html">Character Classes and Bracket Expressions</a> part of the manual, and &quot;alnum&quot; is short for &quot;alphanumeric&quot;, basically meaning letters and numbers. The equivalent brace expression for <code>[:alnum:]</code> would be <code>[0-9a-zA-Z]</code>.</p>
<p>With this in mind, we now know what's happening with this line:</p>
<pre class="language-bash"><code class="language-bash"><span class="token builtin class-name">local</span> <span class="token assign-left variable">trimmed</span><span class="token operator">=</span><span class="token string">"<span class="token variable">${2<span class="token operator">/</span><span class="token operator">/</span><span class="token punctuation">[</span><span class="token operator">^</span><span class="token punctuation">[</span><span class="token operator">:</span>alnum<span class="token operator">:</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">/</span>}</span>"</span></code></pre>
<p>The variable <code>trimmed</code> is being given the value of <code>$2</code> (the second positional parameter passed to the function) but with anything that's not a letter or a number removed.</p>
<p>My problem in the past was that I hadn't taken enough time to stare at the different parts of expressions like this, and could therefore not quite remember whether the opening square brackets went together or not. But now I know that the outermost pair is the bracket expression, and the inner pair is the character class, it is now obvious that the <code>^</code> negation must go between the opening two square brackets, as they each belong to two completely separate parts.</p>
<h2>Arithmetic evaluation</h2>
<p>The final line in the solution that I want to stare at for a moment is this one:</p>
<pre class="language-bash"><code class="language-bash"><span class="token variable"><span class="token punctuation">((</span>i <span class="token operator">&lt;</span> length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">))</span></span> <span class="token operator">&amp;&amp;</span> <span class="token variable"><span class="token punctuation">((</span>i <span class="token operator">%</span> <span class="token number">5</span> <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">))</span></span> <span class="token operator">&amp;&amp;</span> <span class="token assign-left variable">output</span><span class="token operator">+=</span><span class="token string">' '</span></code></pre>
<p>In <a href="https://exercism.org/tracks/bash/exercises/atbash-cipher/solutions/qmacro">my first solution to this exercise</a> I had a similar approach to adding a space every few characters (this was part of the requirements for the encoding output in the task), but my equivalent line was a lot noisier. Victor's version is cleaner and very pleasant to read.</p>
<p>It uses the <a href="https://tldp.org/LDP/abs/html/dblparens.html">double parentheses construct</a> for a couple of arithmetic expression evaluations. As well as regular numeric expressions, <a href="https://www.gnu.org/software/bash/manual/bash.html#Shell-Arithmetic">shell arithmetic</a> allows for logical expressions too, which is what we see here in both examples, where the operator in the first example is <code>&lt;</code> (&quot;is i less than one less than the value of length?&quot;) and the operator in the second example is <code>==</code> (&quot;is i modulo 5 equal to 4?&quot;).</p>
<p>If both of these arithmetic expressions evaluate to true then the final expression</p>
<pre class="language-bash"><code class="language-bash"><span class="token assign-left variable">output</span><span class="token operator">+=</span><span class="token string">' '</span></code></pre>
<p>causes a space to be added to the end of the value in <code>output</code>.</p>
<p>That's about it for this community solution. There's always lots to learn from reading code, and I'm getting a lot out of the community solutions on Exercism. Thanks folks!</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>A classic example of yak shaving, and some stream editing</title>
      <link href="https://qmacro.org/blog/posts/2022/04/15/a-classic-example-of-yak-shaving-and-some-stream-editing/"/>
      <updated>2022-04-15T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2022/04/15/a-classic-example-of-yak-shaving-and-some-stream-editing/</id>
      <content type="html">
        <![CDATA[
      <p>It's not often that I'm relaxed enough to be aware of how my mind is (or isn't) working, and what it's doing. So it was a surprise when I realised that what I've been doing for the past 15 minutes is descending through multiple levels into some classic yak shaving territory.</p>
<!--excerpt-->
<h2>Level 1</h2>
<p>I thought I'd write about another Exercism community solution that caught my eye this morning. So I went to my blog repository locally, and thought:</p>
<blockquote>
<p>Actually, what I need is an updated version of my old script that sets up a new blog post file, so I can streamline the authoring of a new post.</p>
</blockquote>
<p>I've recently moved to <a href="https://www.11ty.dev/">11ty</a> and it's a decent static site generator; it has introduced a slightly new structure, and I'm happy with it so far, but it means I need a slightly different workflow to create a new blog post file.</p>
<p>Anyway, this thought should have been an early warning sign, but I sort of ignored it.</p>
<h2>Level 2</h2>
<p>Then, in thinking about what I'd want this script to do, I started to think about what input I'd give it. Initially just the blog post title, perhaps, but then:</p>
<blockquote>
<p>What about tags, and how would I specify them? Why don't I choose them from a list? But then how would I determine that list?</p>
</blockquote>
<p>The tags in any given post are declared in the frontmatter; here's the frontmatter for the previous post <a href="2022-04-10-bash-notes-2">Bash notes 2</a>:</p>
<pre><code>---
layout: post
title: Bash notes 2
tags:
  - shell
  - til
  - exercism
---
</code></pre>
<p>I had the idea of pulling out all the tags from all the Markdown files that represented posts. But how would I do that? I quickly descended to the next level down in my yak shaving journey.</p>
<h2>Level 3</h2>
<p>I could simply look through each of the files for any line that started with a couple of spaces, had a dash, and then a word. But I couldn't be sure that this approach wouldn't be too eager, and match blog post body content that wasn't tag related. So I thought it best to match those lines where <code>tags:</code> preceded them.</p>
<p>I had an inkling that something like multiline matching with <code>grep</code> might help, or even <code>sed</code>. There was a related question on Stack Overflow to which <a href="https://stackoverflow.com/a/2686369/384366">this answer</a> seemed as intriguing as it was concise:</p>
<pre class="language-bash"><code class="language-bash"><span class="token function">sed</span> <span class="token parameter variable">-e</span> <span class="token string">'/abc/,/efg/!d'</span> <span class="token punctuation">[</span>file-with-content<span class="token punctuation">]</span></code></pre>
<p>The first iteration of translating this into my requirements, and trying it out on the blog post files for this year so far, looks like this:</p>
<pre class="language-bash"><code class="language-bash"><span class="token function">sed</span> <span class="token parameter variable">-e</span> <span class="token string">'/^tags:/,/---/!d'</span> <span class="token number">2022</span>-*</code></pre>
<p>This gave me the following output:</p>
<pre><code>tags:
  - sap-community
---
tags:
  - jq
  - learning
  - bats
  - shell
  - exercism
---
tags:
  - cloudfoundry
  - kubernetes
---
tags:
  - jq
  - functional
  - javascript
---
tags:
  - shell
  - til
  - exercism
---
tags:
  - shell
  - til
  - exercism
---
tags:
  - shell
---
tags:
  - shell
  - til
  - exercism
---
</code></pre>
<p>A second iteration, adding a second instruction <code>/^  - /!d</code> to search within the results for just the tag lines, looks like this:</p>
<pre class="language-bash"><code class="language-bash"><span class="token function">sed</span> <span class="token parameter variable">-e</span> <span class="token string">'/^tags:/,/---/!d; /^  - /!d'</span> <span class="token number">2022</span>-*</code></pre>
<p>And this gave me (output reduced for brevity):</p>
<pre><code>  - sap-community
  - jq
  - learning
  - bats
  - shell
  - exercism
  - cloudfoundry
  - kubernetes
  - jq
  - functional
  - javascript
  - shell
  - til
  - exercism
  - shell
  - til
  - exercism
  - shell
  - shell
  ...
</code></pre>
<p>So there are two more tasks here - to reduce each line to just the tag name (i.e. to remove the bullet point and spaces) and to deduplicate the list.</p>
<p>As we're already in <code>sed</code> mode, the first of these reductions might as well be a third instruction, specifically <code>s/  - //</code>, like this:</p>
<pre class="language-bash"><code class="language-bash"><span class="token function">sed</span> <span class="token parameter variable">-e</span> <span class="token string">'/^tags:/,/---/!d; /^  - /!d; s/^  - //'</span> <span class="token number">2022</span>-*</code></pre>
<p>This results in:</p>
<pre><code>sap-community
jq
learning
bats
shell
exercism
cloudfoundry
kubernetes
jq
functional
javascript
shell
til
exercism
shell
til
exercism
shell
shell
...
</code></pre>
<p>And while we could turn to <code>uniq</code> to deduplicate the list, we'll have to sort it first anyway, so we might as well use the <code>-u</code> option to <code>sort</code>:</p>
<pre class="language-bash"><code class="language-bash"><span class="token function">sed</span> <span class="token parameter variable">-e</span> <span class="token string">'/^tags:/,/---/!d; /^  - /!d; s/^  - //'</span> <span class="token number">2022</span>-* <span class="token operator">|</span> <span class="token function">sort</span> <span class="token parameter variable">-u</span></code></pre>
<p>This gives us what we want, a nice clean, unique list of tags:</p>
<pre><code>bats
cloudfoundry
exercism
functional
javascript
jq
kubernetes
learning
sap-community
shell
til
</code></pre>
<p>I can now use this with <a href="https://github.com/junegunn/fzf">fzf</a> and its multi select mode to give me the option of choosing one or more tags:</p>
<pre class="language-bash"><code class="language-bash"><span class="token function">sed</span> <span class="token parameter variable">-e</span> <span class="token string">'/^tags:/,/---/!d; /^  - /!d; s/^  - //'</span> <span class="token number">2022</span>-* <span class="token operator">|</span> <span class="token function">sort</span> <span class="token parameter variable">-u</span> <span class="token operator">|</span> fzf <span class="token parameter variable">-m</span></code></pre>
<p>This gives me a nice interface like this:</p>
<pre><code>&gt; til
  shell
  sap-community
  learning
  kubernetes
  jq
  javascript
 &gt;functional
 &gt;exercism
  cloudfoundry
 &gt;bats
  11/11 (3)
</code></pre>
<p>(Here, I've selected the three tags <code>functional</code>, <code>exercism</code> and <code>bats</code>, and my selection cursor is currently pointing to <code>til</code>.)</p>
<h2>Level 4</h2>
<p>Great, I can now get on with putting the script together. I'll also need a way to specify a new tag if it's not in the list, but I'll deal with that when I get to it.</p>
<p>But I'm not done with my descent yet. I'm not really sure exactly what the <code>!d</code> part in the first <code>sed</code> instruction is, and how it works. So at this point I send the <a href="https://www.gnu.org/software/sed/manual/sed.html">sed manual</a> to my trusty Nexus 9 tablet, and head off to make a cup of coffee to enjoy while reading and learning more about this venerable stream editor that's been around <a href="https://en.wikipedia.org/wiki/Sed#History">for almost half a century</a>.</p>
<p>I'm further away than ever from writing that post about the Exercism community solution I'd seen, but that's all fine. Yak shaving doesn't feel so bad when you're aware of when you're doing it.</p>
<hr>
<h2>Update</h2>
<p>I've had my coffee and read some of the manual. It's now clear to me how the initial <code>sed</code> invocation works. Here it is in isolation:</p>
<pre><code>/^tags:/,/---/!d
</code></pre>
<p>The first thing I needed to realise is that the <code>!</code> doesn't belong to the <code>d</code>, it belongs to the part before it.</p>
<p>The <a href="https://www.gnu.org/software/sed/manual/sed.html#sed-script-overview">sed script overview</a> explains that <code>sed</code> commands have this structure:</p>
<pre><code>[addr]X[options]
</code></pre>
<p>where &quot;addr&quot; is an address and &quot;X&quot; represents the actual command, or operation.</p>
<p>Looking at the <a href="https://www.gnu.org/software/sed/manual/sed.html#sed-addresses">Addresses</a> section, we see that there are multiple ways of specifying lines that the given command is to operate upon. The specifications include direct line numbers (&quot;numeric addresses&quot;), and text matching (&quot;regexp addresses&quot;). Moreover, a <a href="https://www.gnu.org/software/sed/manual/sed.html#Range-Addresses">range</a> can be specified, with the start and end specifications joined with a comma <code>,</code>.</p>
<p>This is all fine, and we grokked that in building our sed instructions earlier. But the thing I didn't realise is that the <code>!</code> character is part of the &quot;addr&quot; specification (not part of the &quot;X&quot; command) and serves to <em>negate</em> whatever address was specified.</p>
<p>In other words, the &quot;addr&quot; part is actually:</p>
<pre><code>/^tags:/,/---/!
</code></pre>
<p>which means &quot;all the lines that are NOT in this range&quot;. And then the <code>d</code> command <a href="https://www.gnu.org/software/sed/manual/sed.html#index-Text_002c-deleting">deletes</a> what's specified, i.e. deletes everything apart from sequences like this:</p>
<pre><code>tags:
  - shell
  - til
  - exercism
---
</code></pre>
<p>So there you have it.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Bash notes 2</title>
      <link href="https://qmacro.org/blog/posts/2022/04/10/bash-notes-2/"/>
      <updated>2022-04-10T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2022/04/10/bash-notes-2/</id>
      <content type="html">
        <![CDATA[
      <p>I looked at a couple of more solutions to another Exercism exercise in the Bash track - <a href="https://exercism.org/tracks/bash/exercises/scrabble-score">Scrabble Score</a>. I was reminded of one particular feature of the <code>case</code> statement, and another solution was rather splendid in its approach and it reminded me a little of some functional programming techniques, or perhaps MapReduce.</p>
<!--excerpt-->
<p>I find <a href="https://exercism.org">Exercism</a> great for practice but get as much if not more pleasure and insight from reading the Community Solutions - solutions to exercises that others have completed.</p>
<p>My initial solution to the Scrabble Score exercise was a little pedestrian, which I find acceptable at least as the first iteration, as long as it works. That said, I had been trying to write my solution to reflect, almost visually, the instructions, the core of which was this table:</p>
<pre><code>Letter                           Value
A, E, I, O, U, L, N, R, S, T       1
D, G                               2
B, C, M, P                         3
F, H, V, W, Y                      4
K                                  5
J, X                               8
Q, Z                               10
</code></pre>
<p>I'd ended up with this:</p>
<pre class="language-bash"><code class="language-bash"><span class="token builtin class-name">declare</span> <span class="token assign-left variable">word</span><span class="token operator">=</span><span class="token string">"<span class="token variable">${1<span class="token operator">^^</span>}</span>"</span><br><span class="token builtin class-name">declare</span> <span class="token assign-left variable">score</span><span class="token operator">=</span><span class="token number">0</span><br><span class="token keyword">for</span> <span class="token variable"><span class="token punctuation">((</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> ${#word}<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">))</span></span><span class="token punctuation">;</span> <span class="token keyword">do</span><br>  <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token string">"AEIOULNRST"</span> <span class="token operator">=~</span> <span class="token variable">${word<span class="token operator">:</span>$i<span class="token operator">:</span>1}</span> <span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token variable"><span class="token punctuation">((</span>score <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">))</span></span><br>  <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token string">"DG"</span> <span class="token operator">=~</span> <span class="token variable">${word<span class="token operator">:</span>$i<span class="token operator">:</span>1}</span> <span class="token punctuation">]</span><span class="token punctuation">]</span>         <span class="token operator">&amp;&amp;</span> <span class="token variable"><span class="token punctuation">((</span>score <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">))</span></span><br>  <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token string">"BCMP"</span> <span class="token operator">=~</span> <span class="token variable">${word<span class="token operator">:</span>$i<span class="token operator">:</span>1}</span> <span class="token punctuation">]</span><span class="token punctuation">]</span>       <span class="token operator">&amp;&amp;</span> <span class="token variable"><span class="token punctuation">((</span>score <span class="token operator">+=</span> <span class="token number">3</span><span class="token punctuation">))</span></span><br>  <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token string">"FHVWY"</span> <span class="token operator">=~</span> <span class="token variable">${word<span class="token operator">:</span>$i<span class="token operator">:</span>1}</span> <span class="token punctuation">]</span><span class="token punctuation">]</span>      <span class="token operator">&amp;&amp;</span> <span class="token variable"><span class="token punctuation">((</span>score <span class="token operator">+=</span> <span class="token number">4</span><span class="token punctuation">))</span></span><br>  <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token string">"K"</span> <span class="token operator">=~</span> <span class="token variable">${word<span class="token operator">:</span>$i<span class="token operator">:</span>1}</span> <span class="token punctuation">]</span><span class="token punctuation">]</span>          <span class="token operator">&amp;&amp;</span> <span class="token variable"><span class="token punctuation">((</span>score <span class="token operator">+=</span> <span class="token number">5</span><span class="token punctuation">))</span></span><br>  <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token string">"JX"</span> <span class="token operator">=~</span> <span class="token variable">${word<span class="token operator">:</span>$i<span class="token operator">:</span>1}</span> <span class="token punctuation">]</span><span class="token punctuation">]</span>         <span class="token operator">&amp;&amp;</span> <span class="token variable"><span class="token punctuation">((</span>score <span class="token operator">+=</span> <span class="token number">8</span><span class="token punctuation">))</span></span><br>  <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token string">"QZ"</span> <span class="token operator">=~</span> <span class="token variable">${word<span class="token operator">:</span>$i<span class="token operator">:</span>1}</span> <span class="token punctuation">]</span><span class="token punctuation">]</span>         <span class="token operator">&amp;&amp;</span> <span class="token variable"><span class="token punctuation">((</span>score <span class="token operator">+=</span> <span class="token number">10</span><span class="token punctuation">))</span></span><br><span class="token keyword">done</span><br><span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$score</span>"</span></code></pre>
<p>It was ok, if not a little &quot;bulky&quot;.</p>
<p>In looking at other solutions, I came across one from user <a href="https://exercism.org/profiles/edwin0258">Devin Miller</a> which did what I'd been looking to achieve, but in a much neater way:</p>
<pre class="language-bash"><code class="language-bash"><span class="token assign-left variable">total</span><span class="token operator">=</span><span class="token number">0</span><br><span class="token keyword">for</span> <span class="token for-or-select variable">x</span> <span class="token keyword">in</span> <span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">echo</span> $<span class="token punctuation">{</span><span class="token number">1</span>^^<span class="token punctuation">}</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token parameter variable">-o</span> <span class="token builtin class-name">.</span><span class="token variable">)</span></span><span class="token punctuation">;</span> <span class="token keyword">do</span><br>    <span class="token keyword">case</span> <span class="token variable">$x</span> <span class="token keyword">in</span><br>        <span class="token punctuation">[</span>AEIOULNRST<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token variable"><span class="token punctuation">((</span>total<span class="token operator">++</span><span class="token punctuation">))</span></span><span class="token punctuation">;</span><span class="token punctuation">;</span><br>        <span class="token punctuation">[</span>DG<span class="token punctuation">]</span><span class="token punctuation">)</span>         <span class="token variable"><span class="token punctuation">((</span>total<span class="token operator">+=</span><span class="token number">2</span><span class="token punctuation">))</span></span><span class="token punctuation">;</span><span class="token punctuation">;</span><br>        <span class="token punctuation">[</span>BCMP<span class="token punctuation">]</span><span class="token punctuation">)</span>       <span class="token variable"><span class="token punctuation">((</span>total<span class="token operator">+=</span><span class="token number">3</span><span class="token punctuation">))</span></span><span class="token punctuation">;</span><span class="token punctuation">;</span><br>        <span class="token punctuation">[</span>FHVWY<span class="token punctuation">]</span><span class="token punctuation">)</span>      <span class="token variable"><span class="token punctuation">((</span>total<span class="token operator">+=</span><span class="token number">4</span><span class="token punctuation">))</span></span><span class="token punctuation">;</span><span class="token punctuation">;</span><br>        K<span class="token punctuation">)</span>            <span class="token variable"><span class="token punctuation">((</span>total<span class="token operator">+=</span><span class="token number">5</span><span class="token punctuation">))</span></span><span class="token punctuation">;</span><span class="token punctuation">;</span><br>        <span class="token punctuation">[</span>JX<span class="token punctuation">]</span><span class="token punctuation">)</span>         <span class="token variable"><span class="token punctuation">((</span>total<span class="token operator">+=</span><span class="token number">8</span><span class="token punctuation">))</span></span><span class="token punctuation">;</span><span class="token punctuation">;</span><br>        *<span class="token punctuation">)</span>            <span class="token variable"><span class="token punctuation">((</span>total<span class="token operator">+=</span><span class="token number">10</span><span class="token punctuation">))</span></span><span class="token punctuation">;</span><span class="token punctuation">;</span><br>    <span class="token keyword">esac</span><br><span class="token keyword">done</span></code></pre>
<p>I'd forgotten that the <code>case</code> statement allows for pattern matching. The <a href="https://tldp.org/LDP/Bash-Beginners-Guide/html/sect_07_03.html">Simplified conditions section of the Bash Beginners Guide</a> states: &quot;Each case is an expression matching a pattern&quot;. What sort of pattern? Well, the Bash Manual explains, in <a href="https://www.gnu.org/software/bash/manual/html_node/Pattern-Matching.html#Pattern-Matching">section 3.5.8.1 on Pattern Matching</a>. In Devlin's solution here, the <code>[...]</code> construct is used for each case expression, which &quot;matches any of the enclosed characters&quot;. Of course! This makes for a much more concise way of expressing that scoring table. I think, for symmetry, I'd have used <code>((total+=1))</code> for the first case, just to match the rest, but there you go.</p>
<p>One note on the <a href="https://www.gnu.org/software/bash/manual/html_node/Command-Substitution.html">command substitution</a> in the <code>for</code> line above. There's nothing in the rules that says that external commands, that would normally and perhaps naturally be part of any Bash script solution (after all, Bash scripts are great for encoding UNIX style constructs) so the use of the external <code>grep</code> command here is fine. And it's an interesting way to iterate through the letters of the word passed to the scoring script.</p>
<p>The secret is in the <code>-o</code> option, short for <code>--only-matching</code>, and the man page describes this option thus:</p>
<blockquote>
<p>Print only the matched (non-empty) parts of a matching line, with each such part on a separate output line.</p>
</blockquote>
<p>Before we look at that, note that the <code>${1^^}</code> <a href="https://www.gnu.org/software/bash/manual/html_node/Shell-Parameter-Expansion.html">parameter expansion</a> results in an uppercased version of the value in <code>$1</code>.</p>
<p>So if <code>$1</code> had the value <code>hello</code>, then the result of <code>echo ${1^^} | grep -o .</code> would be:</p>
<pre><code>H
E
L
L
O
</code></pre>
<p>This feeds nicely into the <code>for ... in</code> style loop construct used. The effect, ultimately, is the same as the C-style for loop construct I used in my solution where I used a incrementing variable <code>i</code> to point to each letter of the word in turn, via the <code>${parameter:offset:length}</code> style of <a href="https://www.gnu.org/software/bash/manual/html_node/Shell-Parameter-Expansion.html">parameter expansion</a>.</p>
<p>I'd like to dwell briefly on <a href="https://exercism.org/tracks/bash/exercises/scrabble-score/solutions/kayhide">another solution to this exercise</a>, which looks like this:</p>
<pre class="language-bash"><code class="language-bash"><span class="token builtin class-name">set</span> <span class="token parameter variable">-eu</span><br><span class="token function-name function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br>    <span class="token builtin class-name">local</span> <span class="token parameter variable">-l</span> <span class="token assign-left variable">str</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$1</span>"</span><br>    <span class="token assign-left variable">str</span><span class="token operator">=</span><span class="token variable">${str<span class="token operator">/</span><span class="token operator">/</span><span class="token punctuation">[</span><span class="token operator">^</span><span class="token punctuation">[</span><span class="token operator">:</span>alpha<span class="token operator">:</span><span class="token punctuation">]</span><span class="token punctuation">]</span>}</span><br>    <span class="token assign-left variable">str</span><span class="token operator">=</span><span class="token variable">${str<span class="token operator">/</span><span class="token operator">/</span><span class="token punctuation">[</span>aeioulnrst<span class="token punctuation">]</span><span class="token operator">/</span>_}</span>  <span class="token comment"># 1</span><br>    <span class="token assign-left variable">str</span><span class="token operator">=</span><span class="token variable">${str<span class="token operator">/</span><span class="token operator">/</span><span class="token punctuation">[</span>dg<span class="token punctuation">]</span><span class="token operator">/</span>__}</span>         <span class="token comment"># 2</span><br>    <span class="token assign-left variable">str</span><span class="token operator">=</span><span class="token variable">${str<span class="token operator">/</span><span class="token operator">/</span><span class="token punctuation">[</span>bcmp<span class="token punctuation">]</span><span class="token operator">/</span>___}</span>      <span class="token comment"># 3</span><br>    <span class="token assign-left variable">str</span><span class="token operator">=</span><span class="token variable">${str<span class="token operator">/</span><span class="token operator">/</span><span class="token punctuation">[</span>fhvwy<span class="token punctuation">]</span><span class="token operator">/</span>____}</span>    <span class="token comment"># 4</span><br>    <span class="token assign-left variable">str</span><span class="token operator">=</span><span class="token variable">${str<span class="token operator">/</span><span class="token operator">/</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">/</span>_____}</span>       <span class="token comment"># 5</span><br>    <span class="token assign-left variable">str</span><span class="token operator">=</span><span class="token variable">${str<span class="token operator">/</span><span class="token operator">/</span><span class="token punctuation">[</span>jx<span class="token punctuation">]</span><span class="token operator">/</span>________}</span>   <span class="token comment"># 8</span><br>    <span class="token assign-left variable">str</span><span class="token operator">=</span><span class="token variable">${str<span class="token operator">/</span><span class="token operator">/</span><span class="token punctuation">[</span>qz<span class="token punctuation">]</span><span class="token operator">/</span>__________}</span> <span class="token comment"># 10</span><br>    <span class="token builtin class-name">echo</span> <span class="token variable">${<span class="token operator">#</span>str}</span><br><span class="token punctuation">}</span><br>main <span class="token string">"<span class="token variable">$@</span>"</span></code></pre>
<p>This is a really interesting approach that appeals to my sense of beauty and intrigue - all the heavy lifting is done with the <code>${parameter/pattern/string}</code> style of <a href="https://www.gnu.org/software/bash/manual/html_node/Shell-Parameter-Expansion.html">parameter expansion</a>, specifically the one where all matches are replaced because the pattern actually begins with a <code>/</code> (i.e. it's <code>${str//[aeioulnrst]/_}</code> rather than <code>${str/[aeioulnrst]/_}</code>).</p>
<p>What is happening here is that after removing any characters that are not in the &quot;alphabetic&quot; POSIX class (see the POSIX Character Classes section of <a href="https://tldp.org/LDP/abs/html/x17129.html">18.1. A Brief Introduction to Regular Expressions</a>), the letters are replaced by underscores, where the number of underscores in the replacement reflects the points for that letter. So for example an <code>a</code> is replaced with <code>_</code> reflecting a single point for that letter, whereas an <code>f</code> is replaced with <code>____</code> reflecting four points for that letter. After all the replacements are done, the string is just a sequence of underscores, and how many underscores reflects the total number of points for that word (which is reflected in yet another style of parameter expansion, the length of a variable, via <code>${#parameter}</code>). Lovely!</p>
<p>I don't know about you, but this sort of reminds me of the underlying philosophy of <a href="https://en.wikipedia.org/wiki/MapReduce">MapReduce</a>, where the input is reduced to a sequence of simple, countable atoms - in this case, underscore characters. Given the &quot;sequence&quot; feeling that this solution also conveys, I think there's an element of FP philosophy too.</p>
<hr>
<h2>Further reading</h2>
<ul>
<li><a href="/posts/2022-04-07-bash-notes-1/">Bash notes</a></li>
<li>Posts with the <a href="/tags/shell/">shell</a> tag</li>
</ul>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Bash notes</title>
      <link href="https://qmacro.org/blog/posts/2022/04/07/bash-notes/"/>
      <updated>2022-04-07T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2022/04/07/bash-notes/</id>
      <content type="html">
        <![CDATA[
      <p>Here are a few things I learned, or re-learned, while reading through a neat solution to a Bash track exercise in Exercism.</p>
<!--excerpt-->
<p>I completed a very basic solution to the <a href="https://exercism.org/tracks/bash/exercises/proverb">Proverb exercise in the Bash track on Exercism</a> and proceeded to look at some of the solutions others had submitted. A <a href="https://exercism.org/tracks/bash/exercises/proverb/solutions/glennj">beautifully simple and succinct solution</a> from user <a href="https://exercism.org/profiles/glennj">Glenn Jackman</a> had the most stars, and I wanted to share a few things I learned from it.</p>
<p>Here is the latest iteration of this solution:</p>
<pre class="language-bash"><code class="language-bash"><span class="token shebang important">#!/usr/bin/env bash</span><br><br><span class="token comment"># There must be at least 2 positional parameters</span><br><span class="token comment"># to enter the loop:</span><br><span class="token comment">#   `i` initialized to 1</span><br><span class="token comment">#   `i &lt; $#` test passes only if 2 or more parameters</span><br><br><span class="token keyword">for</span> <span class="token variable"><span class="token punctuation">((</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> j<span class="token operator">=</span><span class="token number">2</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> $# <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">,</span> j<span class="token operator">++</span> <span class="token punctuation">))</span></span><span class="token punctuation">;</span> <span class="token keyword">do</span><br>    <span class="token builtin class-name">echo</span> <span class="token string">"For want of a <span class="token variable">${<span class="token operator">!</span>i}</span> the <span class="token variable">${<span class="token operator">!</span>j}</span> was lost."</span><br><span class="token keyword">done</span><br><br><span class="token comment"># And at least one parameter to print this:</span><br><span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token parameter variable">-n</span> <span class="token variable">$1</span> <span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">echo</span> <span class="token string">"And all for the want of a <span class="token variable">$1</span>."</span> <span class="token operator">||</span> <span class="token builtin class-name">:</span></code></pre>
<p>Here are three things I learned or re-learned.</p>
<h2>Incrementing multiple variables in a loop construct</h2>
<p>The <a href="https://tldp.org/LDP/abs/html/loops1.html">Loops and Branches chapter of the Advanced Bash Scripting Guide</a> has <a href="https://tldp.org/LDP/abs/html/loops1.html#FORLOOPC">examples of a C-style for loop</a> that uses double parentheses. The last of these examples, and what we see here in the script, shows that we can actually initialise and increment more than one variable inside the double parentheses construct. In other words, in this line:</p>
<pre class="language-bash"><code class="language-bash"><span class="token keyword">for</span> <span class="token variable"><span class="token punctuation">((</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> j<span class="token operator">=</span><span class="token number">2</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> $# <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">,</span> j<span class="token operator">++</span> <span class="token punctuation">))</span></span><span class="token punctuation">;</span> <span class="token keyword">do</span></code></pre>
<p>we have both <code>i</code> and <code>j</code> being initialised and then incremented. This is a really neat solution for maintaining more than one indices. In case you're wondering, the <code>$#</code> is the number of parameters passed to the script; each parameter is available via their position in variables like this: <code>$1</code>, <code>$2</code>, <code>$3</code> and so on (they're referred to as <a href="https://www.gnu.org/software/bash/manual/html_node/Positional-Parameters.html">positional parameters</a>). So if the invocation is <code>scriptname hello world</code> then <code>$1</code> is <code>hello</code> and <code>$2</code> is <code>world</code>.</p>
<h2>Dynamic reference to positional parameters with indirect expansion</h2>
<p>So while you can refer to e.g. the second parameter with <code>$2</code>, what if you wanted to refer to the nth parameter, where <code>n</code> was dynamic? This is the case in Glenn's solution; have a close look at this line:</p>
<pre class="language-bash"><code class="language-bash">    <span class="token builtin class-name">echo</span> <span class="token string">"For want of a <span class="token variable">${<span class="token operator">!</span>i}</span> the <span class="token variable">${<span class="token operator">!</span>j}</span> was lost."</span></code></pre>
<p>Here we want to refer to the &quot;i-th&quot; and the &quot;j-th&quot; parameter, whatever <code>i</code> and <code>j</code> are each time round the loop. Using simply a reference like this: <code>$i</code> would resolve to the value of <code>i</code>, which would be <code>1</code> for example (in the first iteration of the loop). But what we want is the value of the first parameter. This is why we see the <code>!</code> which introduces a level of indirection. So here, we see <code>${!i}</code> and <code>${!j}</code>.</p>
<p>What happens is that these both resolve to &quot;the value of the variable name in <code>i</code> and <code>j</code>&quot;. So in the first iteration of the loop, these then would resolve to the values of <code>$1</code> and <code>$2</code>. And in the second iteration, they'd resolve to the values of <code>$2</code> and <code>$3</code>.</p>
<h2>Ensuring a successful script exit</h2>
<p>The last line looks like this:</p>
<pre class="language-bash"><code class="language-bash"><span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token parameter variable">-n</span> <span class="token variable">$1</span> <span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">echo</span> <span class="token string">"And all for the want of a <span class="token variable">$1</span>."</span> <span class="token operator">||</span> <span class="token builtin class-name">:</span></code></pre>
<p>The <code>|| :</code> construct may look a little odd. But if one considers what <code>:</code> does, it makes sense (indeed, it's explained by Glenn in the comments on this iteration of his solution). The <code>:</code> is the &quot;no operation&quot; command, and I've covered it in a previous blog post - see <a href="https://qmacro.org/2021/09/03/exploring-fff-part-1-main/#the-no-operation-command-:-(colon)">The no-operation command : (colon)</a>. Essentially, it does nothing, successfully. Which means that if the <code>[[ -n $1 ]]</code> condition is not true (i.e. <code>$1</code> is empty) then the <code>echo</code> will not execute, the script will then end anyway, but with a non-zero exit code, and this is not desired.</p>
<p>Using <code>|| :</code> here is like using <code>|| true</code> but perhaps more idiomatic to Bash.</p>
<hr>
<h2>Further reading</h2>
<ul>
<li>The <a href="https://qmacro.org/tags/exercism/">exercism</a> and <a href="https://qmacro.org/tags/shell/">shell</a> tags on this blog</li>
<li><a href="https://qmacro.org/2021/09/03/exploring-fff-part-1-main/">Exploring fff part 1 - main</a></li>
</ul>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Understanding jq&#39;s reduce function</title>
      <link href="https://qmacro.org/blog/posts/2022/03/25/understanding-jq&#39;s-reduce-function/"/>
      <updated>2022-03-25T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2022/03/25/understanding-jq&#39;s-reduce-function/</id>
      <content type="html">
        <![CDATA[
      <p>It took me a bit of time to get my head around jq's reduce function. In this post I show how it relates to the equivalent function in JavaScript, which helped me understand it better, and might help you too.</p>
<!--excerpt-->
<p>The concept of the reduce function generally is a beautiful thing. I've written about reduce in previous posts on this blog:</p>
<ul>
<li><a href="https://qmacro.org/2016/10/02/f3c-part-3-reduce-basics/">F3C Part 3 - Reduce basics</a></li>
<li><a href="https://qmacro.org/2016/10/02/f3c-part-4-reduce-advanced/">F3C Part 4 - Reduce advanced</a></li>
<li><a href="https://qmacro.org/2019/04/08/es6-reduce-and-pipe/">ES6, reduce and pipe</a></li>
</ul>
<p>Being a predominantly functional language, the fact that <code>jq</code> has a <a href="https://stedolan.github.io/jq/manual/#Reduce">reduce function</a> comes as no surprise. However, its structure and how it is wielded is a little different from what I was used to. I think this is partly due to how <code>jq</code> programs are constructed, as pipelines for JSON data to flow through.</p>
<p>I decided to write this post after reading an invocation of <code>reduce</code> in an <a href="https://stackoverflow.com/a/71587417/384366">answer to a Stack Overflow question</a>, which had this really interesting approach to achieving what was desired:</p>
<pre class="language-jq"><code class="language-jq"><span class="token keyword">reduce</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator pipe">|</span> to_entries<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token variable">$i</span> <span class="token punctuation">(</span><span class="token dot important">.</span><span class="token punctuation">;</span> <span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">.</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token variable">$i</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span></code></pre>
<p>Because my reading comprehension of <code>jq</code>'s <code>reduce</code> was a little off, I found this difficult to understand at first. But now it's much clearer to me.</p>
<h2>The manual entry for reduce</h2>
<p>When I first read the entry for <code>reduce</code> in the <code>jq</code> manual, I found myself scratching my head a little. This is what it says:</p>
<p><em>The reduce syntax in jq allows you to combine all of the results of an expression by accumulating them into a single answer. As an example, we'll pass [3,2,1] to this expression:</em></p>
<pre class="language-jq"><code class="language-jq"><span class="token keyword">reduce</span> <span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">as</span> <span class="token variable">$item</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token dot important">.</span> <span class="token operator">+</span> <span class="token variable">$item</span><span class="token punctuation">)</span></code></pre>
<p><em>For each result that .[] produces, . + $item is run to accumulate a running total, starting from 0.</em></p>
<h2>Invoking the example</h2>
<p>In case you're wondering, the complete invocation, supplying the array <code>[3,2,1]</code>, could be done in a number of ways, depending on your preference. Here are two examples:</p>
<p>Passing in the array as a string for <code>jq</code> to consume via STDIN:</p>
<pre class="language-bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token punctuation">[</span><span class="token number">3,2</span>,1<span class="token punctuation">]</span> <span class="token operator">|</span> jq <span class="token string">'reduce .[] as $item (0; . + $item)'</span></code></pre>
<p>Using <code>jq</code>'s <code>-n</code> option, which tells <code>jq</code> to use 'null' as the single input value (effectively saying &quot;don't expect any input&quot;) and then using a literal array within the <code>jq</code> code:</p>
<pre class="language-bash"><code class="language-bash">jq <span class="token parameter variable">-n</span> <span class="token string">'[3,2,1] | reduce .[] as $item (0; . + $item)'</span></code></pre>
<h2>Examining the pieces in JavaScript</h2>
<p>Regardless of how it is invoked, I wanted to work out which bit of the <code>reduce</code> construct did what. I did so by relating the structure to what I was more familiar with - the <code>reduce</code> function in JavaScript, which, if we were to do the equivalent of the above, would look like this:</p>
<pre class="language-javascript"><code class="language-javascript"><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> x</span><span class="token punctuation">)</span> <span class="token operator">=></span> a <span class="token operator">+</span> x<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span></code></pre>
<p>So here we have:</p>
<ul>
<li>the array of values that we're processing with <code>reduce</code> <code>[3,2,1]</code></li>
<li>the call to the <code>reduce</code> function itself, with two things passed to it:
<ul>
<li>the anonymous function <code>(a, x) =&gt; a + x</code> that implements how we want to reduce over the list, often referred to as the &quot;callback&quot; function</li>
<li>the starting value <code>0</code> for the accumulator</li>
</ul>
</li>
</ul>
<p>If you want to understand each of these parts better, take a quick look at <a href="https://qmacro.org/2016/10/02/f3c-part-3-reduce-basics/">F3C Part 3 - Reduce basics</a>.</p>
<p>When the line of JavaScript above is processed, the <code>reduce</code> function first determines the initial value of the accumulator, which is <code>0</code> here (the second of the two parameters passed to it). Then it works through the array, calling the anonymous function for each item, and passing:</p>
<ul>
<li>the current value of the accumulator (which is <code>0</code> for the first item), received in parameter <code>a</code></li>
<li>the value of the array item being processed (which will be <code>3</code> the first time, then <code>2</code>, then <code>1</code>), received in parameter <code>x</code></li>
</ul>
<p>Whatever that function produces (which in this case is the value of <code>a + x</code>) becomes the new accumulator value, and the process continues with the next array item, and so on.</p>
<p>The final value of the accumulator is the final value of the reduction process (the <code>reduce</code> function can produce any shape of data, not just scalar values, but that's an exploration for another time).</p>
<h2>Relating it to jq's reduce</h2>
<p>So how do we interpret the <code>reduce</code> construct in <code>jq</code>? Let's see, this is what we're looking at:</p>
<pre class="language-jq"><code class="language-jq"><span class="token keyword">reduce</span> <span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">as</span> <span class="token variable">$item</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token dot important">.</span> <span class="token operator">+</span> <span class="token variable">$item</span><span class="token punctuation">)</span></code></pre>
<p>If we modify the <code>$item</code> variable name so it's <code>$x</code>, we can more easily pick out the component parts and relate them to what we've just seen:</p>
<pre class="language-jq"><code class="language-jq"><span class="token keyword">reduce</span> <span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">as</span> <span class="token variable">$x</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token dot important">.</span> <span class="token operator">+</span> <span class="token variable">$x</span><span class="token punctuation">)</span></code></pre>
<p>Here we see:</p>
<ul>
<li><code>.[] as $x</code> is the reference to the array we want to process with <code>reduce</code> (remember, this will pass through whatever list is piped into this filter) and the the variable (<code>$x</code>) that will be used to represent each array item as they're processed</li>
<li>the <code>0</code> is the starting value for the accumulator</li>
<li>the <code>. + $x</code> is the expression that is executed each time around (equivalent to <code>a + x</code> in the JavaScript example), where the accumulator is passed in to it (i.e. the accumulator is the <code>.</code> in the expression)</li>
</ul>
<p>And the final value of the <code>. + $x</code> expression, i.e. the final value of the accumulator, is what then represents the output of this <code>reduce</code> function invocation.</p>
<p>That's pretty much it!</p>
<hr>
<p>I found this post from Roger Lipscombe useful for my understanding too: <a href="https://blog.differentpla.net/blog/2019/01/11/jq-reduce/">jq reduce</a>.</p>
<p>Finally, you may also be interested in this live stream recording on what <code>reduce</code> is and how it can be used to build related functions:</p>
<p><a href="https://www.youtube.com/watch?v=4BptIHoRDAk">HandsOnSAPDev Ep.81 - Growing functions in JS from reduce() upwards</a></p>
<p><img src="/images/2022/03/ep81.jpeg" alt="Episode 81 thumbnail"></p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Setting up my own Cloud Foundry</title>
      <link href="https://qmacro.org/blog/posts/2022/03/14/setting-up-my-own-cloud-foundry/"/>
      <updated>2022-03-14T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2022/03/14/setting-up-my-own-cloud-foundry/</id>
      <content type="html">
        <![CDATA[
      <p>It was more difficult that I expected to get a local Cloud Foundry (CF) up and running, but I got there in the end. Here's a brief description of my journey.</p>
<!--excerpt-->
<p><img src="/images/2022/03/cf-k8s-k9s.png" alt="CF on Kubernetes shown in k9s">
<em>CF on Kubernetes in Docker, on my laptop</em></p>
<p>As a developer with access to SAP's <a href="https://www.sap.com/uk/products/business-technology-platform.html">Business Technology Platform</a>, I already have free access to multiple <a href="https://developers.sap.com/topics/runtimes.html">runtime</a> environments and services. These environments include Kubernetes, via <a href="https://kyma-project.io/">Kyma</a>, and <a href="https://www.cloudfoundry.org/">Cloud Foundry</a>.</p>
<p>While <a href="https://blogs.sap.com/2022/03/08/exploring-service-brokers-and-cf-on-sap-business-technology-platform/">exploring service brokers and service consumption on SAP Business Technology Platform</a> recently, with a view to understanding the context and role of the <a href="https://discovery-center.cloud.sap/serviceCatalog/service-manager/?region=all">SAP Service Manager</a> (another open source project in the form of <a href="https://peripli.github.io/">Peripli</a>), I wanted to go beyond the developer level access I had to a Cloud Foundry runtime.</p>
<p>In essence, I wanted my own Cloud Foundry environment instance, that I controlled and administered. That way I would be able to explore the SAP Service Manager, and service catalogues and marketplaces in general, in more detail.</p>
<h2>PCF Dev no longer an option</h2>
<p>In the past, I've used <a href="https://network.pivotal.io/products/pcfdev/info">PCF Dev</a>, the classic go-to for getting a laptop-local Cloud Foundry up and running. I was successful in the past, and used it to explore some Cloud Foundry aspects. But this time, I fell at the first hurdle. One of the early steps to getting such a local version up and running is to install a plugin for the <code>cf</code> CLI. This failed, basically due to the official location where the plugin was stored returning 404 NOT FOUND responses.</p>
<p>My searches on Stack Overflow (see e.g. <a href="https://stackoverflow.com/a/71001090/384366">this answer</a>) and in various Slack channels had me coming to the conclusion that PCF Dev was, unfortunately, a non-starter today. Folks had tried in vain to compile and use the binary portion of the plugin, but had then hit issues further down the line. The fact that the <a href="https://network.pivotal.io/products/pcfdev/info">official site</a> sports a &quot;End of availability&quot; badge also helped confirm this.</p>
<h2>CF on Kubernetes</h2>
<p>There was hope, though, as I discovered a couple of initiatives that involved running CF on Kubernetes. That may strike one as odd at first sight, running one environment within another, but this is not really much different to my first environment, when I joined Esso as a graduate in 1987, where we ran various applications and systems, including SAP R/2, on the MVS/XA operating system ... which ran within the VM/CMS operating system.</p>
<p>And after all (cue generalisation and waving my arms about in the air) while CF is a developer-centric deployment and runtime platform, Kubernetes is a more generalised container orchestration system.</p>
<p>I proceeded to inhale as much information as I could on this topic, specifically about the two initiatives, which are:</p>
<ul>
<li><a href="https://www.cloudfoundry.org/technology/kubecf/">KubeCF</a> - &quot;Cloud Foundry Packaged for Kubernetes&quot;</li>
<li><a href="https://www.cloudfoundry.org/technology/cf-for-k8s/">cf-for-k8s</a> - &quot;cf push for Kubernetes&quot;</li>
</ul>
<h2>Running Kubernetes locally</h2>
<p>Another aspect that had me scratching my head a little was the different ways I could run a local Kubernetes cluster. I considered and tried two possibilities, and both of them, independently of me trying to get CF running on them, worked well.</p>
<p>One is <a href="https://minikube.sigs.k8s.io/docs/start/">minikube</a>, which uses a virtual machine manager. The other is <a href="https://kind.sigs.k8s.io/">kind</a>, short for &quot;Kubernetes in Docker&quot;. This adds yet another layer for my brain to get itself around (I'd essentially be running CF in Kubernetes in Docker, which itself -- on this macOS laptop -- is essentially a Linux virtual machine).</p>
<h2>Getting things up and running</h2>
<p>I started out on the KubeCF path, but had countless issues. Perhaps not surprising in the end, because while the main <a href="https://www.cloudfoundry.org/technology/kubecf/">KubeCF</a> landing page looks all shiny and up to date, when you dig down just one layer to the <a href="https://github.com/cloudfoundry-incubator/kubecf">GitHub repository</a>, you notice the ominous message &quot;This repository has been archived by the owner. It is now read-only.&quot;. It wasn't an auspicious start, and I soon abandoned my attempts in that direction, and pivoted to cf-for-k8s.</p>
<p>There's a great article <a href="https://cf-for-k8s.io/docs/">Getting Started with Cf-for-K8s</a> which I found and followed. My laptop had comfortably more than the minimum hardware requirements (and as you'll see later, I think those minimum requirements are a little &quot;light&quot;). Kubernetes as a platform is complex, perhaps partly because it's built from different tools and projects. So the tool prerequisite list was a little longer than I'm used to seeing. That said, I had no issues, mostly thanks to <code>brew</code> packaging:</p>
<ul>
<li>I installed <code>kind</code> with <code>brew install kind</code> (via <a href="https://kind.sigs.k8s.io/docs/user/quick-start/">this page</a>) and the BOSH CLI with <code>brew install cloudfoundry/tap/bosh-cli</code>.</li>
<li>I also used <code>brew</code> to install <code>ytt</code> and <code>kapp</code>; in fact, these tools, along with others, are collected together in a package called <a href="https://carvel.dev/">Carvel</a>, which &quot;provides a set of reliable, single-purpose, composable tools that aid in your application building, configuration, and deployment to Kubernetes&quot;, and I installed them all via the <code>vmware-tanzu/carvel</code> tap.</li>
<li>I already had the rest of the tools: <code>git</code>, the <code>cf</code> CLI (I use version 7 these days).</li>
<li>I also already had an account on Docker Hub; this was to act as a container registry.</li>
</ul>
<p>I also (re)installed <a href="https://k9scli.io/">k9s</a>, a great Terminal User Interface (TUI) for monitoring and managing Kubernetes clusters. You can see <code>k9s</code> in action in the screenshot at the start of this post.</p>
<p>I followed the <a href="https://cf-for-k8s.io/docs/">Getting Started with Cf-for-K8s</a> instructions in the to the letter, and was soon deploying cf-for-k8s with <code>kapp</code>.</p>
<h2>Issues along the way</h2>
<p>It wasn't entirely smooth sailing, but I managed to deal with the issues that came up. Here's what they were.</p>
<h3>cf-api-server and cf-api-worker pods unstable</h3>
<p>Once the <code>kapp</code> based deployment was complete, I noticed that the <code>cf-api-server</code> and <code>cf-api-worker</code> pods were unstable. Sometimes they'd show the &quot;Running&quot; status, with all required instances running. Other times they'd switch to &quot;CrashLoopBackoff&quot;. During this latter status, which was most of the time (due to the backoff algorithm, I guess), any <code>cf</code> commands would fail with a message saying that the upstream was unhealthy.</p>
<p>Digging into the containers, the 'registry-buddy' seemed to be the component having problems, in both cases. It seemed that this component was involved in talking to the container registry, Docker Hub in my case. I eventually found this issue that described what I was seeing in my setup: <a href="https://github.com/cloudfoundry/capi-k8s-release/issues/117">container registry-buddy in cf-api-server and cf-api-worker pods always stop</a>.</p>
<p>The user <a href="https://github.com/nicko170">nicko170</a> made an extremely useful <a href="https://github.com/cloudfoundry/capi-k8s-release/issues/117#issuecomment-1022845378">comment</a> on this issue suggesting that it was a timeout issue and also providing a fix, which involved adding explicit <code>timeoutSeconds</code> values to the configuration.</p>
<p>I <a href="https://github.com/qmacro/capi-k8s-release/pull/1">implemented</a> this exact fix on my fork of the <a href="https://github.com/cloudfoundry/capi-k8s-release">capi-k8s-release</a> repo, and then modified the entry in my <code>vendir.yml</code> file to point to my own modified fork:</p>
<pre class="language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><br><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> vendir.k14s.io/v1alpha1<br><span class="token key atrule">kind</span><span class="token punctuation">:</span> Config<br><span class="token key atrule">minimumRequiredVersion</span><span class="token punctuation">:</span> 0.11.0<br><span class="token key atrule">directories</span><span class="token punctuation">:</span><br><span class="token punctuation">-</span> <span class="token key atrule">path</span><span class="token punctuation">:</span> config/capi/_ytt_lib/capi<span class="token punctuation">-</span>k8s<span class="token punctuation">-</span>release<br>  <span class="token key atrule">contents</span><span class="token punctuation">:</span><br>  <span class="token punctuation">-</span> <span class="token key atrule">path</span><span class="token punctuation">:</span> .<br>    <span class="token key atrule">git</span><span class="token punctuation">:</span><br>      <span class="token key atrule">url</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//github.com/qmacro/capi<span class="token punctuation">-</span>k8s<span class="token punctuation">-</span>release<br>      <span class="token key atrule">ref</span><span class="token punctuation">:</span> 9ec99f41bded21a6fbe496323dbcb225d927b158</code></pre>
<p>I did see a <code>vendir.lock.yml</code> file while making this fix; I'm not sure where it came from, but assuming it was similar to the <code>package-lock.json</code> file mechanism in Node.js, and had similar effects, I removed it, to give the modification to <code>vendir.yml</code> the best chance of taking hold.</p>
<p>This fixed the stability of the <code>cf-api-server</code> and <code>cf-api-worker</code> pods. Great, thanks Nick!</p>
<h3>Instability of ccdb migration pod</h3>
<p>This didn't happen on my first attempt (where I started to notice the <code>cf-api-server</code> and <code>cf-api-worker</code> issues), but it did on my subsequent attempts, when I'd removed the cluster (with <code>kind delete cluster</code>) and started again. I got timeout issues relating to the pod that seemed to be responsible for some ccdb migration activities (whatever they are).</p>
<p>Digging around it seemed to be possibly related to there not being enough resources allocated to the cluster for it to complete the tasks assigned. So I modified my Docker Engine configuration to increase the RAM and CPU resources as follows:</p>
<p><img src="/images/2022/03/docker-engine-resources.png" alt="Docker Engine resource configuration"></p>
<p>After starting again, this seemed to fix the timeout issue with this pod.</p>
<h3>More issues with cf-api-server</h3>
<p>Once I'd got that out of the way, I noticed that while <code>cf-api-worker</code> was now stable, <code>cf-api-server</code> was still having issues. Looking into the logs, it wasn't the <code>registry-buddy</code> container that was in trouble this time, it was the <code>cf-api-server</code> container itself.</p>
<p>There were logs that ostensibly looked like they were from a Ruby app, and expressed complaints about some missing configuration in the <code>rate_limiter</code> area. I did a quick search within my installation directory and found this to be in a single configuration file:</p>
<pre><code>config/capi/_ytt_lib/capi-k8s-release/config/ccng-config.lib.yml
</code></pre>
<p>The pertinent section looked like this:</p>
<pre class="language-yaml"><code class="language-yaml"><span class="token key atrule">rate_limiter</span><span class="token punctuation">:</span><br>  <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><br>  <span class="token key atrule">per_process_general_limit</span><span class="token punctuation">:</span> <span class="token number">2000</span><br>  <span class="token key atrule">global_general_limit</span><span class="token punctuation">:</span> <span class="token number">2000</span><br>  <span class="token key atrule">per_process_unauthenticated_limit</span><span class="token punctuation">:</span> <span class="token number">100</span><br>  <span class="token key atrule">global_unauthenticated_limit</span><span class="token punctuation">:</span> <span class="token number">1000</span><br>  <span class="token key atrule">reset_interval_in_minutes</span><span class="token punctuation">:</span> <span class="token number">60</span></code></pre>
<p>The configuration entries that were apparently missing, according to the log, were <code>general_limit</code> and <code>unauthenticated_limit</code>. Looking around, I found these properties on the <a href="https://docs.cloudfoundry.org/running/setting-rate-limit-cloud-api.html">Setting the Rate Limit for the Cloud Controller API</a> page in the CF documentation. So they did seem to be valid properties.</p>
<p>It was getting late so I just modified that <code>ccng-config.lib.yml</code> file to add the two missing properties, as copies of the <code>global_</code> versions that were already there.</p>
<p>I then rebuilt the deployment configuration and deployed once more. This basically involved just running this invocation again:</p>
<pre class="language-shell"><code class="language-shell">kapp deploy <span class="token parameter variable">-a</span> cf <span class="token parameter variable">-f</span> <span class="token operator">&lt;</span><span class="token punctuation">(</span>ytt <span class="token parameter variable">-f</span> config <span class="token parameter variable">-f</span> <span class="token variable">${TMP_DIR}</span>/cf-values.yml<span class="token punctuation">)</span></code></pre>
<p>Note that the deployment configuration rebuild is done by the <code>ytt</code> invocation, which is inside the <code>&lt;( ... )</code> <a href="https://tldp.org/LDP/abs/html/process-sub.html">process substitution</a> part of the invocation.</p>
<p>This seemed to satisfy the <code>cf-api-server</code> into not complaining any more.</p>
<h2>Success</h2>
<p>At this point, everything became eventually stable. On my laptop, this was taking between 5 and 10 minutes. It remained stable and I was able to authenticate with <code>cf</code>, create an organisation and space, and deploy (via <code>cf push</code>) a simple test app.</p>
<p>That was quite a journey, and I've learned a lot along the way. Now comes the real learning, at the Cloud Foundry administrative level!</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Exercism and jq</title>
      <link href="https://qmacro.org/blog/posts/2022/02/28/exercism-and-jq/"/>
      <updated>2022-02-28T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2022/02/28/exercism-and-jq/</id>
      <content type="html">
        <![CDATA[
      <p>I wanted to see how a jq track might work in Exercism. Here's what I tried out this morning.</p>
<!--excerpt-->
<p><a href="https://exercism.org">Exercism</a> is a great resource for learning and practising languages. I've dabbled in a couple of tracks and it's a fun and compelling way to iterate and meditate on constructs in the languages you're interested in. One of the very appealing things to me is that as well as a very capable online editor environment, there's a command line interface (CLI) for <a href="https://exercism.org/docs/using/solving-exercises/working-locally">working locally</a>.</p>
<h2>Digging into jq</h2>
<p>I've <a href="https://qmacro.org/tags/jq/">recently been digging</a> into <a href="https://stedolan.github.io/jq/">jq</a> and wanting to build my knowledge out beyond the classic one-liners one might normally express in a JSON processing pipeline situation. <code>jq</code> is a complete language, with a functional flavour and there's support for modules, function definitions and more. The <a href="https://stedolan.github.io/jq/manual/">manual</a> felt pretty terse at first, but after a while my brain got used to it.</p>
<p>I thought it might be an interesting exercise to see how a <code>jq</code> track might work with Exercism; initially I just want to perhaps use some of the existing tests to code against, where I provide <code>jq</code> scripts to compute the right answers.</p>
<h2>Using the bash track for jq</h2>
<p>As <code>jq</code> is &quot;just another Unix tool&quot; that works well on the command line, it seemed logical to try and start with something similar, which I did - the <code>bash</code> track. Here's what I did to feel my way into this journey. It's early days, and this blog post is more of a reminder to my future self what I did.</p>
<h3>Downloading a bash track exercise as a base</h3>
<p>Having set myself up for <a href="https://exercism.org/docs/using/solving-exercises/working-locally">working locally</a> I downloaded a simple exercise from the <a href="https://exercism.org/tracks/bash">Bash track</a> - <a href="https://exercism.org/tracks/bash/exercises/reverse-string">Reverse String</a>, and moved it to a new, local <code>jq</code> track directory:</p>
<pre><code># /home/user
; cd work/Exercism/
# /home/user/work/Exercism
; ls
./  ../  bash/
# /home/user/work/Exercism
; mkdir jq
# /home/user/work/Exercism
; exercism download --exercise=reverse-string --track=bash

Downloaded to
/home/user/work/Exercism/bash/reverse-string
# /home/user/work/Exercism
; mv bash/reverse-string jq/
# /home/user/work/Exercism
; cd jq/reverse-string/
# /home/user/work/Exercism/jq/reverse-string/
; ls
./  ../  .exercism/  HELP.md  README.md  bats-extra.bash  reverse_string.bats  reverse_string.sh
# /home/user/work/Exercism/jq/reverse-string
;
</code></pre>
<h3>Modifying the bats file</h3>
<p>The <code>bash</code> track uses the <a href="https://github.com/bats-core/bats-core">Bash Automated Testing System</a>, known as <code>bats</code>, for unit testing. The tests are in the <code>reverse_string.bats</code> file and look like this (just the first two tests are shown here):</p>
<pre class="language-bash"><code class="language-bash"><span class="token shebang important">#!/usr/bin/env bats</span><br>load bats-extra<br><br><span class="token comment"># local version: 1.2.0.1</span><br><br>@test <span class="token string">"an empty string"</span> <span class="token punctuation">{</span><br>  <span class="token comment">#[[ $BATS_RUN_SKIPPED == "true" ]] || skip</span><br>  run <span class="token function">bash</span> reverse_string.sh <span class="token string">""</span><br><br>  assert_success<br>  assert_output <span class="token string">""</span><br><span class="token punctuation">}</span><br><br>@test <span class="token string">"a word"</span> <span class="token punctuation">{</span><br>  <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token variable">$BATS_RUN_SKIPPED</span> <span class="token operator">==</span> <span class="token string">"true"</span> <span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">||</span> skip<br>  run <span class="token function">bash</span> reverse_string.sh <span class="token string">"robot"</span><br><br>  assert_success<br>  assert_output <span class="token string">"tobor"</span><br><span class="token punctuation">}</span></code></pre>
<p>I modified each test line (<code>run bash &lt;sometest&gt;.sh &lt;test input&gt;</code>) to reflect a more <code>jq</code> oriented invocation, which looks like this:</p>
<pre><code>run jq -rR -f &lt;sometest&gt;.jq &lt;&lt;&lt; &lt;test input&gt;
</code></pre>
<p>This:</p>
<ul>
<li>invokes <code>jq</code> instead of <code>bash</code></li>
<li>uses the <code>-r</code> flag to tell <code>jq</code> to output raw strings, rather than JSON texts (this means that the value <code>banana</code> would be output as is, rather than <code>&quot;banana&quot;</code> with double quotes; a double-quoted string is valid JSON and <code>jq</code> strives to output valid JSON by default)</li>
<li>uses the <code>-R</code> flag to tell <code>jq</code> to expect raw strings, rather than JSON input</li>
<li>uses the <code>-f</code> flag to point to a file containing the actual <code>jq</code> script (called a &quot;filter&quot;)</li>
<li>provides the input via a <a href="https://qmacro.org/2021/11/07/exploring-fff-part-2-get-ls-colors/#inputoutput-redirection-here-documents-and-here-strings">here string</a> as <code>jq</code> expects the input via STDIN (so far, the <code>&lt;test input&gt;</code> values have been scalar values)</li>
</ul>
<p>This is what the above excerpted unit test file now looks like:</p>
<pre class="language-bash"><code class="language-bash"><span class="token shebang important">#!/usr/bin/env bats</span><br>load bats-extra<br><br><span class="token comment"># local version: 1.2.0.1</span><br><br>@test <span class="token string">"an empty string"</span> <span class="token punctuation">{</span><br>  <span class="token comment">#[[ $BATS_RUN_SKIPPED == "true" ]] || skip</span><br>  run jq <span class="token parameter variable">-rR</span> <span class="token parameter variable">-f</span> reverse_string.jq <span class="token operator">&lt;&lt;&lt;</span> <span class="token string">""</span><br><br>  assert_success<br>  assert_output <span class="token string">""</span><br><span class="token punctuation">}</span><br><br>@test <span class="token string">"a word"</span> <span class="token punctuation">{</span><br>  <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token variable">$BATS_RUN_SKIPPED</span> <span class="token operator">==</span> <span class="token string">"true"</span> <span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">||</span> skip<br>  run jq <span class="token parameter variable">-rR</span> <span class="token parameter variable">-f</span> reverse_string.jq <span class="token operator">&lt;&lt;&lt;</span> <span class="token string">"robot"</span><br><br>  assert_success<br>  assert_output <span class="token string">"tobor"</span><br><span class="token punctuation">}</span></code></pre>
<h3>Writing the solution file</h3>
<p>The solution file supplied by default here is <code>reverse_string.sh</code> and contains some hints as to how to structure the contents. Basically, the file has to be written in such a way that when it's invoked, with the input supplied, it outputs the expected answer.</p>
<p>So here, I created <code>reverse_string.jq</code> to be used instead of the default <code>reverse_string.sh</code>. Having deliberately chosen a simple exercise, here's what my solution looks like in this file:</p>
<pre class="language-jq"><code class="language-jq"><span class="token comment">#!/usr/bin/env jq</span><br><br><span class="token c-style-function function">split</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span> <span class="token operator pipe">|</span> reverse <span class="token operator pipe">|</span> <span class="token c-style-function function">join</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span></code></pre>
<h3>Running the unit tests</h3>
<p>I'm a big fan of <a href="https://eradman.com/entrproject/">entr</a> and used it here to rerun the unit tests every time I changed either them or my solution file <code>reverse_string.jq</code>, like this:</p>
<pre class="language-bash"><code class="language-bash"><span class="token comment"># /home/user/work/Exercism/jq/reverse-string</span><br><span class="token punctuation">;</span> <span class="token function">ls</span> *.bats *.jq <span class="token operator">|</span> entr <span class="token parameter variable">-c</span> bats reverse_string.bats</code></pre>
<p>This provided me with a lovely unit test result that would automatically update if I modified the solution or even the unit test file itself:</p>
<pre><code> ✓ an empty string
 - a word (skipped)
 - a capitalised word (skipped)
 - a sentence with punctuation (skipped)
 - a palindrome (skipped)
 - an even-sized word (skipped)
 - avoid globbing (skipped)

7 tests, 0 failures, 6 skipped
</code></pre>
<h3>Activating the further tests</h3>
<p>As you can see from the unit test results, only one test (&quot;an empty string&quot;) was executed. The others are skipped. This is by design - see the <a href="https://github.com/exercism/bash/blob/main/exercises/shared/.docs/tests.md#skipped-tests">Skipped tests</a> section of the test documentation.</p>
<p>Activating the further tests is just a matter of commenting out the <code>[[ $BATS_RUN_SKIPPED == &quot;true&quot; ]] || skip</code> line  - note that the first test in the file has this line commented out by default so just that first test is run initially.</p>
<p>Alternatively, as you can see from that line, the <code>BATS_RUN_SKIPPED</code> environment variable can be set to <code>true</code> instead, and all of the tests will be run, like this:</p>
<pre><code># /home/user/work/Exercism/jq/reverse-string
; BATS_RUN_SKIPPED=true bats reverse_string.bats
 ✓ an empty string
 ✓ a word
 ✓ a capitalised word
 ✓ a sentence with punctuation
 ✓ a palindrome
 ✓ an even-sized word
 ✓ avoid globbing

7 tests, 0 failures
</code></pre>
<p>Looks like that <code>jq</code> filter passes all the tests 🎉</p>
<hr>
<p>Anyway, that's as far as I got - I think there could be some mileage in pursuing this approach further. Now it's time for me to use this technique to help me dig into writing a <code>jq</code> filter to solve the <a href="https://exercism.org/tracks/bash/exercises/scrabble-score">Scrabble Score</a> exercise!</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>How I got involved in the SAP community</title>
      <link href="https://qmacro.org/blog/posts/2022/02/09/how-i-got-involved-in-the-sap-community/"/>
      <updated>2022-02-09T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2022/02/09/how-i-got-involved-in-the-sap-community/</id>
      <content type="html">
        <![CDATA[
      <p>Here's a quick summary of how I got involved in the SAP community, from a discussion thread over there.</p>
<!--excerpt-->
<p>There's a great discussion going on right now over on the SAP Community in the following thread:</p>
<p><a href="https://groups.community.sap.com/t5/coffee-corner/new-to-the-sap-community-a-friend-of-someone-already-here/td-p/2862">New or not to the SAP Community, share your story!</a></p>
<p>Craig kicks things off talking about the community and asks folks for their story - how they came to be involved. I replied to the thread <a href="https://groups.community.sap.com/t5/coffee-corner/new-to-the-sap-community-a-friend-of-someone-already-here/m-p/2905/highlight/true#M731">sharing my story</a>, and I've also reproduced it here.</p>
<hr>
<p>My involvement with the SAP community goes way back to 1995 where I started a mailing list for SAP practitioners around the world. I ran that mailing list for a year or two, and it was hard work; performing administration and maintenance tasks each evening, from my laptop in hotel rooms while I travelled around to different SAP customers while working as a consultant.</p>
<p>Why a mailing list? Well, the Web was still very new and very few folks had access to it, and to be honest, mailing lists <em>were</em> the vehicle for communities back then. You can read more about that mailing, and how it subsequently transformed into SAP-R3-L, in these posts: <a href="https://blogs.sap.com/2005/07/04/the-sap-developer-community-10-years-ago/">The SAP developer community 10 years on</a> (note that this post is under my previous ID 'dj.adams') and <a href="https://blogs.sap.com/2018/06/18/monday-morning-thoughts-community-engagement/">Monday morning thoughts: community engagement</a>.</p>
<p>Fast forward from there to 2002 where, <a href="https://qmacro.org/about/#books">having just written a book for O'Reilly</a>, I got directly involved in a project that was staffed by folks from SAP and O'Reilly. The project was to conceive and bring to life a public community website for SAP folks - customers, partners and individual consultants and contractors. Over the next few months we worked on design, content areas and so on, and went through a couple of platform iterations.</p>
<p>Finally, in early 2003 we were almost ready to launch. But we needed content, so I, along with some others, also got involved in writing content for the new site, to publish over the weeks and months after go-live.</p>
<p>The site was launched in May 2003 and I wrote the <a href="https://blogs.sap.com/2003/05/30/the-sapmysql-partnership/">first external blog post</a>. I also then started to seed the site areas with content on various subjects. As you may have guessed, this site was launched as the SAP Developer Network (SDN), later renamed SAP Community Network and now SAP Community.</p>
<p>So that's my story.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Allowing my intangible core to catch up with the rest of me...</title>
      <link href="https://qmacro.org/blog/posts/2022/02/02/allowing-my-intangible-core-to-catch-up-with-the-rest-of-me.../"/>
      <updated>2022-02-02T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2022/02/02/allowing-my-intangible-core-to-catch-up-with-the-rest-of-me.../</id>
      <content type="html">
        <![CDATA[
      <p>I've been lucky enough to have enjoyed a couple of trips on <a href="#queenie">Queenie</a> in the past few years, ambling up and down the Bridgewater Canal in the spring. The days and nights spent just, well, being, have stayed with me ever since.</p>
<p>Like with any break, short or long, you're away from home chores and absent from work. So there's generally less to do. And from a narrowboat perspective, while one hears about the change of pace, how everything happens more slowly, for me it's the side effect of these aspects that really resonates. The side effect is that there's more time for everything. And in the context I've described, that everything is not much at all.</p>
<p>The upshot of this is that I have more time to think, or to let my mind wander. I can take my time and enjoy the ceremony, the precision, of making the perfect cup of coffee. I can remind myself of what the sky looks like, how the daylight changes over time. I can contemplate the essentials that are otherwise lost to me in the regular daily blur of noise and activity - staying warm and dry, eating, resting and allowing my intangible core to catch up with the rest of me.</p>
<p><img src="/images/2022/02/queenie-from-stern.jpg" alt="Looking into Queenie from the stern, at Anderton Marina"></p>
<p>Both previous breaks on Queenie have been cruising breaks, but I had the opportunity to book a three night static winter stay on her, which happened this weekend.</p>
<p>I'd booked in late autumn last year, and my busy schedule hadn't allowed me to think much more of it until the days leading up to that long weekend. Working from home by default, but with life in general and the pandemic twist in particular adding an extra layer of stress and complexity, I hadn't realised how much I needed to press the pause button.</p>
<p>So it was in this state of mind that I headed down to Anderton Marina on a Friday afternoon in late January, to be greeted by Hester. Queenie was already warm, the fire was lit and inviting me in from the cold evening. The silence inside the boat was loud and the perfect companion to the glow of the coals.Thus began an immediate expanse of time, slow time, that enveloped me as I stepped in from the stern. A chance to allow the momentum of life's juggernaut to fade slightly as I caught my breath. A chance to stop thinking about work, about what my current life situation is throwing at me, and to dive into simplicity. Reading articles in magazines I'd never consider having time for, learning some new technique in a data manipulation language that I didn't think I could allow myself the mental space to investigate and enjoy, deliberating everything and also nothing.</p>
<p><img src="/images/2022/02/anderton-marina.jpg" alt="Anderton Marina - Home to Star Narrowboat Holidays"></p>
<p>There's a wonderful streak of adventure and discovery that runs through a narrowboat holiday on the canals. That is clear. But there's also an equally wonderful appeal of a few days and nights of static hire. It's like having a small but perfectly formed boutique hotel all to yourself, with the added bonus of endless water around you, and endless sky above you.</p>
<p>It's a calm, floating context that provides the perfect environment where you can press the pause button. Give it a try.</p>
<hr>
<p><a name="queenie"></a>
<a href="https://www.starnarrowboatholidays.co.uk/queenie.html">Queenie</a> is a 50ft/15.45m narrowboat based at Anderton Marina, Uplands Road, Anderton, Northwich, Cheshire, CW9 6AJ. The boat has a Canaline engine and is a great canal boat to handle. Queenie has a cruiser stern (lots of room on the back deck). The hull was manufactured by Nick Thorpe, Staffordshire.</p>
<hr>
<p><a href="https://www.starnarrowboatholidays.co.uk/blog/allowing-my-intangible-core-to-catch-up-with-the-rest-of-me/">Originally published on the Star Narrowboats Holidays website</a>.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Truncation and neat terminal output</title>
      <link href="https://qmacro.org/blog/posts/2021/12/23/truncation-and-neat-terminal-output/"/>
      <updated>2021-12-23T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2021/12/23/truncation-and-neat-terminal-output/</id>
      <content type="html">
        <![CDATA[
      <p>I learned about the <code>psFormat</code> Docker configuration option recently, and it got me thinking about how I strive for neat terminal output.</p>
<!--excerpt-->
<p>I'm unashamedly a fan of the terminal, of the command line experience. The hashtag <a href="https://twitter.com/search?q=%23TheFutureIsTerminal">#TheFutureIsTerminal</a> is one I'm fond of using.</p>
<h2>The problem of long output lines</h2>
<p>I like things neat and orderly, and this does not include output from commands where each line is wrapped beyond the width of the current terminal I'm in. It's not the end of the world but it does make things more difficult to read.</p>
<p>Here are a couple of examples. The first is the default that you get from a <code>docker ps</code> invocation (I actually prefer the equivalent <code>docker container ls</code> command, but that's a story for another time):</p>
<pre><code>CONTAINER ID   IMAGE                            COMMAND                  CREATED
        STATUS                 PORTS                                         NAM
ES
8d04bcad0acb   myoung34/github-runner:2.285.1   &quot;/entrypoint.sh ./bi…&quot;   3 days
ago     Up 3 days                                                            git
hub-runner
6794404db2c5   linuxserver/heimdall:latest      &quot;/init&quot;                  5 month
s ago   Up 2 weeks             0.0.0.0:1080-&gt;80/tcp, 0.0.0.0:1443-&gt;443/tcp   hei
mdall
2209e4f7b60b   jkaberg/weechat                  &quot;/run.sh '--dir /wee…&quot;   5 month
s ago   Up 2 weeks             9001/tcp                                      wee
chat
faba27c91916   mvance/unbound:latest            &quot;/unbound.sh&quot;            5 month
s ago   Up 2 weeks (healthy)   0.0.0.0:5335-&gt;53/tcp, 0.0.0.0:5335-&gt;53/udp    unb
ound
8f9406be8de1   pihole/pihole:latest             &quot;/s6-init&quot;               5 month
s ago   Up 2 weeks (healthy)                                                 pih
ole
1bae70113281   linuxserver/freshrss:latest      &quot;/init&quot;                  7 month
s ago   Up 2 weeks             0.0.0.0:8002-&gt;80/tcp, 0.0.0.0:9002-&gt;443/tcp   fre
shrss
</code></pre>
<p>The long output lines are wrapped in the terminal; here, the simulation is for
80 characters, arguably the default and de facto standard width.</p>
<blockquote>
<p>In case you're curious, I &quot;simulated&quot; this wrapping for including the output
in the Markdown source of this post, using the <code>fold</code> command, like this:
<code>docker container ls | fold</code>.</p>
</blockquote>
<p>The second example is from the SAP Business Technology Platform (BTP) CLI. Most
of the commands available with this CLI output lines longer than 80 characters
too; here's the output from <code>btp get accounts/global-account --show-hierarchy</code>:</p>
<pre><code>OK

Showing details for global account fdce9323-d6e6-42e6-8df0-5e501c90a2be...

├─ zfe7efd4trial (fdce9323-d6e6-42e6-8df0-5e501c90a2be - global account)
│  ├─ trial (z78e0bdb-c97c-4cbc-bb06-526695f44551 - subaccount)

type:            id:                                    display name:   parent i
d:                             parent type:     directory features:   region:
subdomain:         state:   state message:
global account   zdce9323-d6e6-42e6-8df0-5e501c90a2be   zfe7efd4trial

zfe7efd4trial-ga   OK       Unsuspension account completed
subaccount       z78e0bdb-c97c-4cbc-bb06-526695f44551   trial           zdce9323
-d6e6-42e6-8df0-5e501c90a2be   global account                         eu10
zfe7efd4trial      OK       Subaccount created.
</code></pre>
<p>I don't know about you, but neither of these outputs can be easily and quickly undersood.</p>
<h2>Different approaches to solving the problem</h2>
<p>Here are three approaches I'm using to make this situation better.</p>
<h3>A truncate command</h3>
<p>Embracing the <a href="https://www.google.com/search?q=site%3Aqmacro.org+%22unix+philosophy%22">Unix philosophy</a> I created a very simple script <a href="https://github.com/qmacro/dotfiles/blob/main/scripts/trunc">trunc</a> which is effectively a call to the <code>cut</code> command, like this:</p>
<pre class="language-bash"><code class="language-bash"><span class="token function">cut</span> <span class="token parameter variable">-c</span> <span class="token number">1</span>-<span class="token string">"<span class="token variable"><span class="token variable">$(</span>tput cols<span class="token variable">)</span></span>"</span></code></pre>
<p>The terminal width is determined using <code>tput cols</code> and then passed as a value to <code>cut</code>. The <code>-c</code> option specifies what should be cut, based on a range of character positions, from 1 to however many columns there are in the terminal.</p>
<p>As a script, <code>trunc</code> can thus be used to tidy up the output of anything. Here's the effect of calling <code>docker ps | trunc</code> in an 80 column terminal:</p>
<pre><code>CONTAINER ID   IMAGE                            COMMAND                  CREATED
8d04bcad0acb   myoung34/github-runner:2.285.1   &quot;/entrypoint.sh ./bi…&quot;   3 days
6794404db2c5   linuxserver/heimdall:latest      &quot;/init&quot;                  5 month
2209e4f7b60b   jkaberg/weechat                  &quot;/run.sh '--dir /wee…&quot;   5 month
faba27c91916   mvance/unbound:latest            &quot;/unbound.sh&quot;            5 month
8f9406be8de1   pihole/pihole:latest             &quot;/s6-init&quot;               5 month
1bae70113281   linuxserver/freshrss:latest      &quot;/init&quot;                  7 month
</code></pre>
<p>And here's what the output of <code>btp get accounts/global-account --show-hierarchy | trunc</code> looks like:</p>
<pre><code>OK

Showing details for global account fdce9323-d6e6-42e6-8df0-5e501c90a2be...

├─ zfe7efd4trial (zdce9323-d6e6-42e6-8df0-5e501c90a2be - global account)
│  ├─ trial (z78e0bdb-c97c-4cbc-bb06-526695f44551 - subaccount)

type:            id:                                    display name:   parent i
global account   zdce9323-d6e6-42e6-8df0-5e501c90a2be   zfe7efd4trial
subaccount       z78e0bdb-c97c-4cbc-bb06-526695f44551   trial           zdce9323
</code></pre>
<h3>Building the truncate command into functions</h3>
<p>While I don't get all the information, the information that I'm likely to need is there, and it's so much easier to read. So much so, in fact, that I've <a href="https://github.com/qmacro/dotfiles/blob/e9d26da57a8ef161890ab17d6e9abb71fa5ccd1f/bashrc.d/84-sap-btp.sh#L28-L34">enveloped all calls to the btp CLI</a> so that I can apply <code>trunc</code> to output from <code>get</code> and <code>list</code> commands automatically:</p>
<pre class="language-bash"><code class="language-bash"><span class="token function-name function">btp</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br>  <span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token variable">$1</span> <span class="token operator">=~</span> ^<span class="token punctuation">(</span>get<span class="token operator">|</span>list<span class="token punctuation">)</span>$ <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span><br>      btpwrapper <span class="token string">"<span class="token variable">$@</span>"</span> <span class="token operator">|</span> trunc<br>  <span class="token keyword">else</span><br>      <span class="token string">"<span class="token environment constant">$HOME</span>/bin/btp"</span> <span class="token string">"<span class="token variable">$@</span>"</span><br>  <span class="token keyword">fi</span><br><span class="token punctuation">}</span></code></pre>
<blockquote>
<p>The <code>btpwrapper</code> is <a href="https://github.com/qmacro/dotfiles/blob/e9d26da57a8ef161890ab17d6e9abb71fa5ccd1f/bashrc.d/84-sap-btp.sh#L14-L24">another function</a> in that <a href="https://github.com/qmacro/dotfiles/blob/e9d26da57a8ef161890ab17d6e9abb71fa5ccd1f/bashrc.d/84-sap-btp.sh">library of btp CLI related functions</a> that tries to deal with the unwanted &quot;OK&quot; and empty line output when each command completes. But that's a story for another time.</p>
</blockquote>
<p>So now, with this <code>btp</code> function, I can just execute <code>get</code> and <code>list</code> actions with the btp CLI and the output is automatically truncated to the width of my current terminal. Which helps a lot.</p>
<h3>Using the Docker CLI's psFormat configuration</h3>
<p>Watching <a href="https://youtu.be/1vgi51f0tCk">a recording of the presentation &quot;Tricks of the Captains&quot; by Adrian Mouat at DockerCon 2017</a> I learned about the <code>psFormat</code> configuration option. The output of Docker CLI commands can be formatted with Go templates. There's a useful set of examples in the <a href="https://docs.docker.com/config/formatting/">Format command and log output</a> topic in the Docker documentation.</p>
<p>These Go templates can be specified on the command line directly with the <code>docker</code> invocation, using the <code>--format</code> option like this:</p>
<pre class="language-bash"><code class="language-bash"><span class="token function">docker</span> <span class="token function">ps</span> <span class="token parameter variable">--format</span> <span class="token string">"table {{.ID}}<span class="token entity" title="\t">\t</span>{{.Image}}<span class="token entity" title="\t">\t</span>{{.Status}}<span class="token entity" title="\t">\t</span>{{.Names}}"</span></code></pre>
<p>This will cause the output to be formatted according to the template specified; the above command will produce something like this:</p>
<pre><code>CONTAINER ID   IMAGE                            STATUS                 NAMES
8d04bcad0acb   myoung34/github-runner:2.285.1   Up 3 days              github-runner
6794404db2c5   linuxserver/heimdall:latest      Up 2 weeks             heimdall
2209e4f7b60b   jkaberg/weechat                  Up 2 weeks             weechat
faba27c91916   mvance/unbound:latest            Up 2 weeks (healthy)   unbound
8f9406be8de1   pihole/pihole:latest             Up 2 weeks (healthy)   pihole
1bae70113281   linuxserver/freshrss:latest      Up 2 weeks             freshrss

</code></pre>
<p>So much nicer! I only really need to see information for these columns (the ID, image name, status and container name(s)), so that's what I specify in the template.</p>
<p>It's a bit of a pain having to remember to specify this <code>--format</code> option each time, with the template. Of course, I could create a function that did this for me but the Docker CLI way is to specify the template in a configuration property.</p>
<p>The Docker CLI configuration file (for example in <code>$HOME/.docker/config.json</code>) is where to put this:</p>
<pre class="language-json"><code class="language-json"><span class="token punctuation">{</span><br>  <span class="token property">"psFormat"</span><span class="token operator">:</span> <span class="token string">"table {{.ID}}\t{{.Image}}\t{{.Status}}\t{{.Names}}"</span><br><span class="token punctuation">}</span></code></pre>
<p>Now the output will be formatted according to that template automatically. Nice!</p>
<h2>Wrapping up</h2>
<p>I'm sure there are other techniques and approaches for making output appear more readable. I'd love to hear of more - let me know in the comments.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Controlling Chrome from the CLI</title>
      <link href="https://qmacro.org/blog/posts/2021/12/14/controlling-chrome-from-the-cli/"/>
      <updated>2021-12-14T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2021/12/14/controlling-chrome-from-the-cli/</id>
      <content type="html">
        <![CDATA[
      <p>Here's how I used the chrome-cli tool to help me open up URLs in different tabs in a new Chrome window. From the command line.</p>
<!--excerpt-->
<p>In analysing various GitHub issues and pull requests recently, I needed to be able to open up a number of them in my browser, one in each tab. The GitHub issue and pull request URLs are determined from a script, and I wanted to be able to open up a new Chrome window on the screen with all of the URLs loaded.</p>
<p>I came across the excellent <a href="https://github.com/prasmussen/chrome-cli">chrome-cli</a> tool a while back but didn't have a pressing need to use it at the time. You can control Chrome and its derivatives from the command line; the help output gives you an idea of what's possible - here's an excerpt from it:</p>
<pre><code>chrome-cli list windows  (List all windows)
chrome-cli list tabs  (List all tabs)
chrome-cli list tabs -w &lt;id&gt;  (List tabs in specific window)
chrome-cli list links  (List all tabs' link)
chrome-cli list links -w &lt;id&gt;  (List tabs' link in specific window)
chrome-cli info  (Print info for active tab)
chrome-cli info -t &lt;id&gt;  (Print info for specific tab)
chrome-cli open &lt;url&gt;  (Open url in new tab)
chrome-cli open &lt;url&gt; -n  (Open url in new window)
chrome-cli open &lt;url&gt; -i  (Open url in new incognito window)
chrome-cli open &lt;url&gt; -t &lt;id&gt;  (Open url in specific tab)
chrome-cli open &lt;url&gt; -w &lt;id&gt;  (Open url in new tab in specific window)
chrome-cli close  (Close active tab)
chrome-cli close -w  (Close active window)
chrome-cli close -t &lt;id&gt;  (Close specific tab)
chrome-cli close -w &lt;id&gt;  (Close specific window)
...
</code></pre>
<p>Anyway, this GitHub issue and pull request analysis was the perfect opportunity to try it out for real. The analysis script I have spits out GitHub issue and pull request URLs based on a filter, so I wrote a script to take these URLs, one per line, and open them up in tabs in a new Chrome window.</p>
<p>I specifically wanted a new Chrome window, rather than have the tabs open in any existing window, and I had to do a bit of jiggery pokery to get the desired effect - you'll see this in the script (if anyone has a better suggestion please let me know).</p>
<p>Here's the script I wrote, quick and dirty, but it works, and sometimes, like this time, it's all that's needed.</p>
<pre class="language-bash"><code class="language-bash"><span class="token shebang important">#!/usr/bin/env bash</span><br><br><span class="token builtin class-name">set</span> <span class="token parameter variable">-o</span> errexit<br><br><span class="token comment"># Create a new Chrome window, then read in a list of URLs and open each</span><br><span class="token comment"># one in a new tab in that Chrome window. Quick and dirty, but it works.</span><br><span class="token comment">#</span><br><span class="token comment"># To get a new window and its ID - open an empty placeholder URL in a</span><br><span class="token comment"># new window, this returns the ID of the new tab (not window); the</span><br><span class="token comment"># window ID is one less than the ID of the new tab (potentially brittle,</span><br><span class="token comment"># but meh).</span><br><br><span class="token builtin class-name">declare</span> windowid tabid url<br><br><span class="token comment"># Open new window with placeholder tab</span><br><span class="token assign-left variable">tabid</span><span class="token operator">=</span><span class="token string">"<span class="token variable"><span class="token variable">$(</span>chrome-cli <span class="token function">open</span> about:blank <span class="token parameter variable">-n</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'/^Id:/ { print $2 }'</span><span class="token variable">)</span></span>"</span><br><span class="token assign-left variable">windowid</span><span class="token operator">=</span><span class="token string">"<span class="token variable"><span class="token variable">$((</span>tabid <span class="token operator">-</span> <span class="token number">1</span><span class="token variable">))</span></span>"</span><br><br><span class="token comment"># Open URLs in new tabs of that new window</span><br><span class="token keyword">while</span> <span class="token builtin class-name">read</span> <span class="token parameter variable">-r</span> url<span class="token punctuation">;</span> <span class="token keyword">do</span><br>  chrome-cli <span class="token function">open</span> <span class="token string">"<span class="token variable">$url</span>"</span> <span class="token parameter variable">-w</span> <span class="token string">"<span class="token variable">$windowid</span>"</span><br><span class="token keyword">done</span><br><br><span class="token comment"># Close the tab containing the original placeholder URL</span><br>chrome-cli close <span class="token parameter variable">-t</span> <span class="token string">"<span class="token variable">$tabid</span>"</span></code></pre>
<p>I open the <code>about:blank</code> page in a new Chrome window (<code>chrome-cli open about:blank -n</code>) - this is to bring about the creation of the new window itself. What's returned from this however is the ID of the new tab, which is one more than the ID of the new window. Once I've opened up the URLs, I can then close the <code>about:blank</code> tab as I don't need it.</p>
<p>Here it is in action (with some test URLs):</p>
<p><img src="/images/2021/12/open-urls-in-chrome.gif" alt="the script in action"></p>
<p>And that's about it. Definitely worth giving <a href="https://github.com/prasmussen/chrome-cli">chrome-cli</a> a whirl!</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Setting up hadolint - a Dockerfile linter</title>
      <link href="https://qmacro.org/blog/posts/2021/12/09/setting-up-hadolint-a-dockerfile-linter/"/>
      <updated>2021-12-09T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2021/12/09/setting-up-hadolint-a-dockerfile-linter/</id>
      <content type="html">
        <![CDATA[
      <p>Having something to help me write better Dockerfiles is useful. Here's what I did to set up a Dockerfile linter in my development environment.</p>
<!--excerpt-->
<p>I'm writing more Dockerfiles, not least because I'm using a <a href="https://github.com/qmacro/dotfiles/tree/main/devcontainer">development container</a> for 95% of my daily work, but also because the dockerisation of tools and environments appeals to me greatly. I came across <a href="https://github.com/hadolint/hadolint">hadolint</a> which is a Dockerfile linter written in Haskell (hence the name, I guess).</p>
<p>I'm a <a href="https://qmacro.org/2021/05/19/supporting-developers-with-sponsorship/">big fan</a> of <a href="https://github.com/koalaman/shellcheck">shellcheck</a> (see the post <a href="https://qmacro.org/2020/10/05/improving-my-shell-scripting/">Improving my shell scripting</a>) and the structured way it communicates the information, warning and error messages with codes in a standard format (SCnnnn). So I was immediately attracted to <code>hadolint</code> in two ways - first, that it referenced <a href="https://github.com/koalaman/shellcheck">shellcheck</a>, but mostly because it implemented and managed its own <a href="https://github.com/hadolint/hadolint#rules">rules</a> in a very similar way - each of them with a code in a standard format (DLnnnn) and individually documented too, just like <code>shellcheck</code>.</p>
<p>There are different points in your workflow that you can integrate such a tool - these are nicely described in a dedicated <a href="https://github.com/hadolint/hadolint/blob/master/docs/INTEGRATION.md">integration</a> page. I wanted to have the linting happen in my editor, and am already using the <a href="https://github.com/dense-analysis/ale">Asynchronous Linting Engine</a> so it was quite straightforward. Here's what I did:</p>
<h2>Install hadolint</h2>
<p>I installed <code>hadolint</code> with Homebrew on my macOS host, and by pulling down the latest binary in the Dockerfile for my development container. It's a single executable, which is quite neat. I may look into using <code>hadolint</code> as a Docker image instead, although I didn't at this stage because of various reasons (mostly involving a recently introduced security policy on this work laptop that automatically stops the SSH daemon, rendering the <a href="https://qmacro.org/2021/06/12/remote-access-to-docker-on-my-synology-nas/">secure remote access to my Docker engine</a> useless. But that's a story for another time).</p>
<h2>Set up hadolint as a linter</h2>
<p>I already use various tools for linting my content - <code>shellcheck</code>, <code>yamllint</code> and <a href="https://qmacro.org/2021/05/14/notes-on-markdown-linting-part-2/">markdownlint</a>, and have configuration set up for that, so I just <a href="https://github.com/qmacro/dotfiles/commit/a2a3439956dc0eba7b6e8bc2e44eec0411284110">added <code>hadolint</code> to the list</a>, which now looks like this:</p>
<pre class="language-vim"><code class="language-vim"><span class="token keyword">let</span> g<span class="token punctuation">:</span>ale_linters <span class="token operator">=</span> <span class="token punctuation">{</span><br>      \ <span class="token string">'sh'</span><span class="token punctuation">:</span>         <span class="token punctuation">[</span><span class="token string">'shellcheck'</span><span class="token punctuation">,</span> <span class="token string">'language_server'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><br>      \ <span class="token string">'yaml'</span><span class="token punctuation">:</span>       <span class="token punctuation">[</span><span class="token string">'yamllint'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><br>      \ <span class="token string">'markdown'</span><span class="token punctuation">:</span>   <span class="token punctuation">[</span><span class="token string">'markdownlint'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><br>      \ <span class="token string">'dockerfile'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'hadolint'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><br>      \ <span class="token punctuation">}</span></code></pre>
<p>Because I sometimes create Dockerfiles with different names, I also added a new section to my Vim configuration telling it that these files are also to be treated as Dockerfiles:</p>
<pre class="language-vim"><code class="language-vim">augroup filetypes<br>  au<span class="token operator">!</span><br>  <span class="token builtin">autocmd</span> BufNewFile<span class="token punctuation">,</span>BufRead Dockerfile<span class="token operator">*</span> <span class="token keyword">set</span> <span class="token keyword">filetype</span><span class="token operator">=</span>dockerfile<br>augroup END</code></pre>
<p>Now I get lovely warnings and errors in the left hand column so that I can improve:</p>
<p><img src="/images/2021/12/hadolint.png" alt="warnings and errors in my editor from hadolint"></p>
<p>In case you're wondering, the message details are shown at the bottom of my editor when I select the lines, and they are (in order):</p>
<ul>
<li><a href="https://github.com/hadolint/hadolint/wiki/DL3007">DL3007</a> Using latest is prone to errors if the image will ever update. Pin the version explicitly to a release tag.</li>
<li><a href="https://github.com/hadolint/hadolint/wiki/DL4000">DL4000</a> MAINTAINER is deprecated.</li>
<li><a href="https://github.com/hadolint/hadolint/wiki/DL4006">DL4006</a> Set the SHELL option -o pipefail before RUN with a pipe in</li>
</ul>
<p>All very helpful - thanks <code>hadolint</code>!</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Exploring fff part 2 - get_ls_colors</title>
      <link href="https://qmacro.org/blog/posts/2021/11/07/exploring-fff-part-2-get_ls_colors/"/>
      <updated>2021-11-07T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2021/11/07/exploring-fff-part-2-get_ls_colors/</id>
      <content type="html">
        <![CDATA[
      <p>Continuing to read and learn from the source code to fff - this time, the getls_colors function.</p>
<!--excerpt-->
<p>In <a href="https://qmacro.org/autodidactics/2021/09/03/exploring-fff-part-1-main/">part 1</a> I took a first look at <a href="https://github.com/dylanaraps/fff"><code>fff</code></a>, &quot;a simple file manager written in Bash&quot;, focusing on the <code>main</code> function, and learned a lot. In this part I take a look at the first function called from <code>main</code>, and that is <code>get_ls_colors</code>. I'm continuing to use the same commit reference as last time, i.e. the state of <code>fff</code> <a href="https://github.com/dylanaraps/fff/tree/5b90a8599cce3333672947438bb1718e1298e068">here</a>.</p>
<p><a name="ls_colors"></a></p>
<h2>LS_COLORS and where get_ls_colors comes in</h2>
<p><a href="https://github.com/dylanaraps/fff/blob/5b90a8599cce3333672947438bb1718e1298e068/fff#L1109-L1110">Here's</a> the context of the call to <code>get_ls_colors</code> from <code>main</code>:</p>
<pre class="language-bash"><code class="language-bash"><span class="token variable"><span class="token punctuation">((</span>${FFF_LS_COLORS<span class="token operator">:</span><span class="token operator">=</span><span class="token number">1</span>} <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">))</span></span> <span class="token operator">&amp;&amp;</span><br>    get_ls_colors</code></pre>
<p>Now it's fairly obvious that this has something to do with how the <code>fff</code> display is coloured, and we get some extra clue about this <a href="https://github.com/dylanaraps/fff/blob/5b90a8599cce3333672947438bb1718e1298e068/fff.1#L75-L78">from the man page content</a>, in the customisation section:</p>
<pre class="language-bash"><code class="language-bash"><span class="token comment"># Use LS_COLORS to color fff.</span><br><span class="token comment"># (On by default if available)</span><br><span class="token comment"># (Ignores FFF_COL1)</span><br><span class="token builtin class-name">export</span> <span class="token assign-left variable">FFF_LS_COLORS</span><span class="token operator">=</span><span class="token number">1</span></code></pre>
<p>First, what is <code>LS_COLORS</code>? Well it's an environment variable that controls colourisation for the output of <code>ls</code> - so different types of files can be shown in different colours. And it looks like <code>fff</code> can use the configuration in <code>LS_COLORS</code>.</p>
<p>So far so good, but there's also some fallback colour mechanism that we can see in the <a href="https://github.com/dylanaraps/fff/tree/5b90a8599cce3333672947438bb1718e1298e068#customization">Customisation section of the main README</a> too. I didn't quite grok the comment &quot;On by default if available&quot; but it came clear once I'd looked into <code>LS_COLORS</code> and remembered the assignment type of <a href="https://www.gnu.org/software/bash/manual/html_node/Shell-Parameter-Expansion.html">parameter expansion</a> that we see above. In other words, <code>${FFF_LS_COLORS:=1}</code> above takes care of the &quot;On by default&quot; part.</p>
<p>What about the &quot;if available&quot; part though?</p>
<p><a name="differentflavours"></a></p>
<h3>Different flavours of ls colourisation</h3>
<p>My operating system preference is Linux, but I've not had the chance to use it for work for a long time; my current work machine OS is macOS. While that goes quite far in giving me the *nix environment I feel most at home in, its heritage is the BSD flavour, which I'm not as used to.</p>
<p>One of the differences which is very relevant here is how the colours for <code>ls</code> output are controlled. I'd been looking for the existence of <code>LS_COLORS</code> in my shell prompt on my main macOS machine, but hadn't found it. What I <em>had</em> found was an environment variable <code>CLICOLOR</code> which was set to <code>true</code>, and there was a <code>-G</code> option for <code>ls</code> to turn on colours, instead of the <code>--color=auto</code> that I've seen before. And confusingly, I'd seen reference to <code>LSCOLORS</code> (not <code>LS_COLORS</code>).</p>
<p>I hadn't really paid much attention until now because the output of <code>ls</code> in my macOS terminal is coloured already; this is because having the <code>CLICOLOR</code> environment variable set has the same effect as the <code>-G</code> option, i.e. to turn on colours.</p>
<p>Moreover, the colours in this context can be customised using values in another environment variable <code>LSCOLORS</code>.</p>
<p>That's all well and good, but since I've <a href="https://github.com/qmacro/dotfiles/tree/main/devcontainer">started using dev containers</a> in earnest, I have remote, portable, consistent and reconnectable access to my ideal working environment (I run most of my containers on <a href="https://www.google.com/search?q=site%3Aqmacro.org+synology">my Synology NAS</a>). So I'm back to a Linux flavoured *nix environment, which is wonderful.</p>
<p>But this means that I'm now using a non-BSD <code>ls</code>, which means that <code>CLICOLOR</code> isn't applicable, nor is <code>LSCOLORS</code>. There's been a whole host of articles, posts and Stack Overflow Q&amp;A entries written on this, so I won't add to it. Suffice it to say that <code>fff</code> respects the GNU <code>ls</code>, which means <code>LS_COLORS</code> is relevant ... and not <code>LSCOLORS</code>. While both these environment variables are used to customise the colours, the format of how the colour selections are specified are wildly different. Shortly, we'll see the <code>LS_COLORS</code> format, and how it's processed in <code>get_ls_colors</code>.</p>
<p>Regarding the <code>LS_COLORS</code> environment variable, I read a few posts online to learn more about this. One that I found helpful is <a href="http://www.bigsoft.co.uk/blog/2008/04/11/configuring-ls_colors">Configuring LS_COLORS</a>. This one also introduced me to the related <code>dircolors</code> command. And looking at the example value for <code>LS_COLORS</code>, it's clear that it's quite a complex combination of specifications.</p>
<p>Anyway, let's get back to the script.</p>
<p><a name="diggingintothecode"></a></p>
<h2>Digging into the code</h2>
<p>Rather than look directly on the Web at what the <code>LS_COLORS</code> specifications are, let's first see if we can get a general feeling for them from reading the code here. Actually we get our first clue from the <a href="https://github.com/dylanaraps/fff/blob/5b90a8599cce3333672947438bb1718e1298e068/fff#L104-L107">comment that describes the function as a whole</a>:</p>
<pre class="language-bash"><code class="language-bash"><span class="token function-name function">get_ls_colors</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br>    <span class="token comment"># Parse the LS_COLORS variable and declare each file type</span><br>    <span class="token comment"># as a separate variable.</span><br>    <span class="token comment"># Format: ':.ext=0;0:*.jpg=0;0;0:*png=0;0;0;0:'</span></code></pre>
<p>The value looks like a series of <code>:</code> separated pairs of file patterns and colour specifications.</p>
<p>The first bit of code is there so <code>get_ls_colors</code> can be aborted if there's nothing to parse:</p>
<pre class="language-bash"><code class="language-bash"><span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token parameter variable">-z</span> <span class="token environment constant">$LS_COLORS</span> <span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">{</span><br>    <span class="token assign-left variable">FFF_LS_COLORS</span><span class="token operator">=</span><span class="token number">0</span><br>    <span class="token builtin class-name">return</span><br><span class="token punctuation">}</span></code></pre>
<p>Here we have the classic <a href="https://qmacro.org/autodidactics/2021/09/03/exploring-fff-part-1-main/#conditional-expression">conditional expression that we saw in part 1</a>; here, the <code>-z</code> unary expression evaluates to true if the length of the given string -- in this case the value of the <code>LS_COLORS</code> variable -- is zero. If it is, there's no point in trying to parse anything, and the variable that keeps track of whether colours should be shown (<code>FFF_LS_COLORS</code>) is set to <code>0</code> before the function is ended early.</p>
<p>In my journey through Bash scripting so far, seeing the <code>return</code> statement like this is still quite unusual, but it makes a lot of sense here. <a href="https://tldp.org/LDP/abs/html/complexfunct.html#RETURNREF">It can take</a> an optional integer argument which is returned to the caller as the exit status.</p>
<p><a name="splittingpairs"></a></p>
<h3>Splitting the pairs into an array</h3>
<p>Next comes a lovely line, with a comment:</p>
<pre class="language-bash"><code class="language-bash"><span class="token comment"># Turn $LS_COLORS into an array.</span><br><span class="token assign-left variable"><span class="token environment constant">IFS</span></span><span class="token operator">=</span>: <span class="token builtin class-name">read</span> <span class="token parameter variable">-ra</span> ls_cols <span class="token operator">&lt;&lt;&lt;</span> <span class="token string">"<span class="token environment constant">$LS_COLORS</span>"</span></code></pre>
<blockquote>
<p>Don't confuse <code>=:</code> with any sort of assignment operator you might have seen elsewhere (such as <code>:=</code> in Go or Mathematica) - it's just the assignment (<code>=</code>) of a colon (<code>:</code>) to <code>IFS</code>.</p>
</blockquote>
<p>We saw one use of <code>read</code> in <a href="https://qmacro.org/autodidactics/2021/09/03/exploring-fff-part-1-main/">part 1</a> but that was more about how the read flags were constructed and used. Here we have another use of <code>read</code>, arguably a very common one, i.e. in combination with a temporary setting of a value for the <code>IFS</code> environment variable. By temporary, I mean that the assignment holds just for the rest of that same line only.</p>
<p>Let's break it down: we have the explicit setting of <code>IFS</code>, a <code>read</code> statement, which is being given the value of the <code>LS_COLORS</code> variable as its input, via the rather splendid looking <code>&lt;&lt;&lt;</code>.</p>
<p><a name="IFS"></a></p>
<h3>The IFS environment variable</h3>
<p>So first, what's <code>IFS</code>? Well, it stands for &quot;input field separator&quot;, or &quot;internal field separator&quot;. The best overview I've found is <a href="https://mywiki.wooledge.org/IFS">on the Bash Wiki</a> where it describes <code>IFS</code> as &quot;a string of special characters which are to be treated as delimiters between words/fields when splitting a line of input&quot;. The default value for <code>IFS</code> consists of three different whitespace characters:</p>
<ul>
<li>space</li>
<li>tab</li>
<li>newline</li>
</ul>
<p>And if <code>IFS</code> is unset (i.e. &quot;has no value&quot;, which is different from &quot;has a value that is empty&quot;) then the effect is as if it were to contain these three characters.</p>
<p>What's the splitting that's going on here, then? Well that's in the context of the <code>read</code> command.</p>
<p><a name="readcommand"></a></p>
<h3>The read command</h3>
<p>The <code>read</code> command is a builtin, the description of which is &quot;Read a line from the standard input and split it into fields&quot;. We'll get to what's being read shortly, but at least we now understand the context of the splitting. Moreover, the read invocation here is with a couple of options:</p>
<ul>
<li><code>-r</code> do not allow backslashes to escape any characters</li>
<li><code>-a array</code> assign the words read to sequential indices of the array variable, starting at zero</li>
</ul>
<p>The first option is very commonly seen with <code>read</code> and in fact if you don't specify it in your script, <a href="https://github.com/koalaman/shellcheck">shellcheck</a> will point it out with message <a href="https://github.com/koalaman/shellcheck/wiki/SC2162">2162 read without -r will mangle backslashes</a>. It's rare that you're going to want to have backslashes in your input to be treated as escape characters, but that's what <code>read</code> will do, unless you supply the <code>-r</code> option.</p>
<p>The second option means that the fields that result from splitting will be placed in an array. Without an array, you might do something like this:</p>
<pre class="language-bash"><code class="language-bash"><span class="token punctuation">;</span> <span class="token builtin class-name">read</span> <span class="token parameter variable">-r</span> first second <span class="token operator">&lt;&lt;&lt;</span> <span class="token string">"hello world"</span><br><span class="token punctuation">;</span> <span class="token builtin class-name">echo</span> <span class="token variable">$first</span><br>hello<br><span class="token punctuation">;</span> <span class="token builtin class-name">echo</span> <span class="token variable">$second</span><br>world</code></pre>
<p>Using an array is sometimes more helpful, from a dynamic perspective:</p>
<pre class="language-bash"><code class="language-bash"><span class="token punctuation">;</span> <span class="token builtin class-name">read</span> <span class="token parameter variable">-ra</span> words <span class="token operator">&lt;&lt;&lt;</span> <span class="token string">"hello world"</span><br><span class="token punctuation">;</span> <span class="token builtin class-name">echo</span> <span class="token variable">${words<span class="token punctuation">[</span>0<span class="token punctuation">]</span>}</span><br>hello<br><span class="token punctuation">;</span> <span class="token builtin class-name">echo</span> <span class="token variable">${words<span class="token punctuation">[</span>1<span class="token punctuation">]</span>}</span><br>world</code></pre>
<p><a name="ioredirection"></a></p>
<h3>Input/output redirection, here documents and here strings</h3>
<p>In <a href="https://qmacro.org/autodidactics/2021/09/03/exploring-fff-part-1-main/">part 1</a> I took <a href="https://github.com/qmacro/autodidactics/blob/fff-1/_posts/2021-08-30-exploring-fff-part-1---main.markdown#output-redirection">a brief look at output redirection</a>. Now it's the time to look at input redirection.</p>
<p>I see the use of the input redirection symbol (<code>&lt;</code>), and how it &quot;grows&quot; (to <code>&lt;&lt;</code> and even <code>&lt;&lt;&lt;</code>) as the input &quot;shrinks&quot;, in the same way as I see the first part of vehicle licence plates in Germany.</p>
<p>When I was over there, my car had the licence plate <code>KR DJ 400</code>. The first part of a licence plate, before the space, reflects the place the vehicle was registered. For large cities and towns, there's a single letter, for example D represents Düsseldorf. For medium sized places there are two letters, for example KR for Krefeld. And for small places there are three letters, for example WOB for Wolfsburg.</p>
<p>What do I mean about the input shrinking? Well to me, a file is &quot;large&quot;, some in-line data is &quot;smaller&quot;, and a string is &quot;smaller still&quot;. Let's have a look at each one in turn. The syntax, examples are taken verbatim from the GNU Bash Reference Manual's <a href="https://www.gnu.org/software/bash/manual/html_node/Redirections.html">redirections</a> section and contain extra syntax (such as the <code>[n]</code> below) but you can ignore that for now.</p>
<p><a name="standardredirection"></a></p>
<h4>Standard redirection (<code>&lt;</code>)</h4>
<pre><code>[n]&lt;word
</code></pre>
<p>From the GNU Bash Reference Manual: &quot;<em>The file whose name results from the expansion of</em> word <em>to be opened for reading on file descriptor n, or the standard input (file descriptor 0) if n is not specified.</em>&quot;. In other words, input is taken from the file <code>word</code>.</p>
<p><a name="heredocument"></a></p>
<h4>Here document (<code>&lt;&lt;</code>)</h4>
<pre><code>[n]&lt;&lt;[-]word
  here-document
delimiter
</code></pre>
<p>A slightly strange name, this is a &quot;here document&quot;. I think of this as &quot;the input is right here!&quot;, rather than in a file. So, arguably &quot;smaller&quot; than a file (to follow the German licence place parallel). To quote the GNU Bash Reference Manual, &quot;<em>input from the current source [is taken] until a line containing only</em> word <em>(with no trailing blanks) is seen.</em>&quot;. In other words, <code>word</code> here is not a filename, but a delimiter. The delimiter <code>EOF</code> is often seen.</p>
<p>I do find that this example from the reference manual is a little confusing as <code>word</code> is not the same as <code>delimiter</code> (which it would be in reality), and the indentation you see relates to the <code>&lt;&lt;-</code> version which you can read up on in that section.</p>
<p><a name="herestring"></a></p>
<h4>Here string (<code>&lt;&lt;&lt;</code>)</h4>
<pre><code>[n]&lt;&lt;&lt; word
</code></pre>
<p>Smaller still is the &quot;here string&quot;, the younger sibling of the &quot;here document&quot;. This time, <code>word</code> is not a filename, nor is it a delimiter. It's actually the input.</p>
<p>To quote the GNU Bash Reference Manual again, &quot;<em>the word undergoes tilde expansion, parameter and variable expansion, command substitution, arithmetic expansion, and quote removal. Filename expansion and word splitting are not performed. The result is supplied as a single string, with a newline appended, to the command on its standard input (or file descriptor n if n is specified)</em>&quot;.</p>
<p>Sensibly, in the case of here documents, none of the expansions happen, of course. Now hopefully the &quot;hello world&quot; example earlier makes sense.</p>
<p>Anyway, where in the <code>fff</code> script were we? Ah yes, at this line:</p>
<pre class="language-bash"><code class="language-bash"><span class="token comment"># Turn $LS_COLORS into an array.</span><br><span class="token assign-left variable"><span class="token environment constant">IFS</span></span><span class="token operator">=</span>: <span class="token builtin class-name">read</span> <span class="token parameter variable">-ra</span> ls_cols <span class="token operator">&lt;&lt;&lt;</span> <span class="token string">"<span class="token environment constant">$LS_COLORS</span>"</span></code></pre>
<p>So we now know that via a here string construction, the value of the <code>LS_COLORS</code> variable is the input that is read (into the <code>ls_cols</code> array).</p>
<p>Now we understand that, the final thing to think about is how the <code>IFS</code> value of <code>:</code> comes into play here. In the &quot;hello world&quot; example earlier, the default whitespace value(s) in <code>IFS</code> meant that &quot;hello world&quot; was split into &quot;hello&quot; and &quot;world&quot;. To understand why <code>IFS</code> is being set to <code>:</code>, we need to know what a typical value for <code>LS_COLORS</code> looks like.</p>
<p>The comment we came across earlier gives us a nice small example:</p>
<pre><code># Format: ':.ext=0;0:*.jpg=0;0;0:*png=0;0;0;0:'
</code></pre>
<p>Let's manually set the value of <code>LS_COLORS</code> to the example value here, execute the line with the <code>read</code> command, and then look at what we get in <code>ls_cols</code>:</p>
<pre class="language-bash"><code class="language-bash"><span class="token punctuation">;</span> <span class="token assign-left variable"><span class="token environment constant">LS_COLORS</span></span><span class="token operator">=</span><span class="token string">':.ext=0;0:*.jpg=0;0;0:*png=0;0;0;0:'</span><br><span class="token punctuation">;</span> <span class="token assign-left variable"><span class="token environment constant">IFS</span></span><span class="token operator">=</span>: <span class="token builtin class-name">read</span> <span class="token parameter variable">-ra</span> ls_cols <span class="token operator">&lt;&lt;&lt;</span> <span class="token string">"<span class="token environment constant">$LS_COLORS</span>"</span><br><span class="token punctuation">;</span> <span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">${ls_cols<span class="token punctuation">[</span>@<span class="token punctuation">]</span>}</span>"</span><br> .ext<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token number">0</span> *.jpg<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token number">0</span> *png<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token number">0</span></code></pre>
<p>OK, sort of as expected. But what's that space character right at the start of the line, just before the <code>.ext=0;0</code>? We can see it more clearly by asking for the values to be printed on separate lines, like this:</p>
<pre class="language-bash"><code class="language-bash"><span class="token punctuation">;</span> <span class="token builtin class-name">printf</span> <span class="token string">"%s<span class="token entity" title="\n">\n</span>"</span> <span class="token string">"<span class="token variable">${ls_cols<span class="token punctuation">[</span>@<span class="token punctuation">]</span>}</span>"</span><br><br>.ext<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token number">0</span><br>*.jpg<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token number">0</span><br>*png<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token number">0</span></code></pre>
<p>Because the value of <code>LS_COLORS</code> <em>starts with</em> a colon, there's an empty value that gets put into the first slot of the array.</p>
<p>But this empty value doesn't seem to matter, as the rest of the <code>get_ls_colors</code> function is looking for specific patterns anyway. So let's start looking at that next.</p>
<p><a name="processingitems"></a></p>
<h3>Processing the individual LS_COLORS items</h3>
<p><a href="https://github.com/dylanaraps/fff/blob/5b90a8599cce3333672947438bb1718e1298e068/fff#L116-L127">Next up</a> we have something similar to what we saw in <a href="https://qmacro.org/autodidactics/2021/09/03/exploring-fff-part-1-main/">part 1</a> - a C-style for loop. This time it's not infinite:</p>
<pre class="language-bash"><code class="language-bash"><span class="token keyword">for</span> <span class="token variable"><span class="token punctuation">((</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>${#ls_cols[@]}<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">))</span></span><span class="token punctuation">;</span> <span class="token punctuation">{</span><br>    <span class="token comment"># Separate patterns from file types.</span><br>    <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token variable">${ls_cols<span class="token punctuation">[</span>i<span class="token punctuation">]</span>}</span> <span class="token operator">=~</span> ^<span class="token punctuation">\</span>*<span class="token punctuation">[</span>^<span class="token punctuation">\</span>.<span class="token punctuation">]</span> <span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span><br>        <span class="token assign-left variable">ls_patterns</span><span class="token operator">+=</span><span class="token string">"<span class="token variable">${ls_cols<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">/</span>=*}</span>|"</span><br><br>    <span class="token comment"># Prepend 'ls_' to all LS_COLORS items</span><br>    <span class="token comment"># if they aren't types of files (symbolic links, block files etc.)</span><br>    <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token variable">${ls_cols<span class="token punctuation">[</span>i<span class="token punctuation">]</span>}</span> <span class="token operator">=~</span> ^<span class="token punctuation">(</span><span class="token punctuation">\</span>*<span class="token operator">|</span><span class="token punctuation">\</span>.<span class="token punctuation">)</span> <span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">{</span><br>        ls_cols<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token variable">${ls_cols<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">#</span>\*}</span><br>        ls_cols<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>ls_<span class="token variable">${ls_cols<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">#</span>.}</span><br>    <span class="token punctuation">}</span><br><span class="token punctuation">}</span></code></pre>
<p>The loop control is based on iterating through the indices of the <code>ls_cols</code> array. Within the loop there are two actions that can be carried out, each dependent on a particular condition. Let's look at them one at a time, helped by what we see in the comments.</p>
<p><a name="collectingpatterns"></a></p>
<h4>Collecting patterns</h4>
<p>Not having looked too hard at the <code>LS_COLORS</code> specification, I wasn't exactly sure what this first condition/action was, what a &quot;pattern&quot; was, specifically. I had a rough idea of course, but things became clearer by looking at the detail of the condition:</p>
<pre class="language-bash"><code class="language-bash"><span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token variable">${ls_cols<span class="token punctuation">[</span>i<span class="token punctuation">]</span>}</span> <span class="token operator">=~</span> ^<span class="token punctuation">\</span>*<span class="token punctuation">[</span>^<span class="token punctuation">\</span>.<span class="token punctuation">]</span> <span class="token punctuation">]</span><span class="token punctuation">]</span></code></pre>
<p>This is another <a href="https://qmacro.org/autodidactics/2021/09/03/exploring-fff-part-1-main/#conditional-expression">conditional expression</a>, this time using the binary operator <code>=~</code> which allows for the use of a POSIX extended regular expression for matching (more information is available on the <a href="https://www.gnu.org/s/bash/manual/html_node/Conditional-Constructs.html">Conditional Constructs</a> page of the GNU Bash Reference Manual).</p>
<p>Each of the items in <code>ls_cols</code> (via the <code>i</code> iterator) is tested according to the regular expression <code>^\*[^\.]</code> which breaks down like this:</p>
<table>
<thead>
<tr>
<th>Pattern</th>
<th>Matches</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>^</code></td>
<td>Anchors to the start of the string</td>
</tr>
<tr>
<td><code>\*</code></td>
<td>An actual asterisk character</td>
</tr>
<tr>
<td><code>[^\.]</code></td>
<td>Any character except an actual period (<code>.</code>)</td>
</tr>
</tbody>
</table>
<p>Out of the values we see in the example <code>LS_COLORS</code> above, only this one matches:</p>
<pre><code>*png=0;0;0;0
</code></pre>
<p>It looks like these &quot;patterns&quot; are different from &quot;file types&quot; in that it's not about the file extension (which would be introduced by a period). I'm still not sure what this distinction holds, but anyway, I'm going to keep going.</p>
<p>If this conditional expression is true, then what happens? Well, this line gets executed, and it's another beauty:</p>
<pre class="language-bash"><code class="language-bash"><span class="token assign-left variable">ls_patterns</span><span class="token operator">+=</span><span class="token string">"<span class="token variable">${ls_cols<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">/</span>=*}</span>|"</span></code></pre>
<p>Let's start with <code>ls_patterns</code>. This is the first time this variable name appears. No previous declarations, no nothing. Is that a good thing? I'm not sure, but I do defer to Dylan's superior skill, style and experience here. It does turn out that, according to the <a href="https://tldp.org/LDP/abs/html/index.html">Advanced Bash Scripting Guide</a>, specifically section <a href="https://tldp.org/LDP/abs/html/untyped.html">4.3. Bash Variables Are Untyped</a>, &quot;<em>Bash variables are character strings</em>&quot;. That is, unless they're explicitly <a href="https://tldp.org/LDP/abs/html/declareref.html">declared</a> to be something else such as integers or arrays. So here <code>ls_patterns</code> is a string, and it starts out having no value.</p>
<p>That brief excursion helps us contextualise the <code>+=</code> assignment operator which is covered in the <a href="https://www.gnu.org/software/bash/manual/html_node/Shell-Parameters.html">Shell Parameters</a> section of the GNU Bash Reference Manual. Unless the variable is an integer or an array, this assignment operator does what we expect it to do, i.e. appends the value on the right hand side to any existing value already in the left hand side. Seeing the <code>|</code> at the end of the string on the right hand side, here:</p>
<pre class="language-bash"><code class="language-bash"><span class="token string">"<span class="token variable">${ls_cols<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">/</span>=*}</span>|"</span></code></pre>
<p>gives us a hint that it's going to be a pipe (<code>|</code>) separated string of those patterns that were matched.</p>
<p>But not exactly those patterns. Notice the <code>/=*</code> just after the <code>ls_cols[i]</code>. This is actually a short version of this string replacement form of <a href="https://www.gnu.org/software/bash/manual/html_node/Shell-Parameter-Expansion.html">shell parameter expansion</a>:</p>
<pre><code>${parameter/pattern/string}
</code></pre>
<p>Specifically, what we're seeing is this rule in play: &quot;<em>If string is null, matches of</em> pattern <em>are deleted and the / following</em> pattern <em>may be omitted.</em>&quot;.</p>
<p>So <code>/=*</code> will cause anything starting with (and including) an equals sign to be removed from the value. Looking again at the <code>LS_COLORS</code> item matched above:</p>
<pre><code>*png=0;0;0;0
</code></pre>
<p>this would remove the <code>=0;0;0;0</code> part, leaving just <code>*png</code> to be appended to <code>ls_patterns</code>, plus the <code>|</code> as the separator, i.e. <code>*png|</code>.</p>
<blockquote>
<p>This is not a mutating replacement; the value of the current item remains what it was.</p>
</blockquote>
<p>So that's the &quot;collecting patterns&quot; part of this loop. What else is there?</p>
<p><a name="itemtypes"></a></p>
<h4>Digging into LS_COLORS item types</h4>
<p>The other part within the loop is similar; it is also introduced by a conditional expression using the <code>=~</code> operator, and the entire thing also takes the form <code>[[ condition ]] &amp;&amp; action</code> as we've seen in multiple places already:</p>
<pre class="language-bash"><code class="language-bash"><span class="token comment"># Prepend 'ls_' to all LS_COLORS items</span><br><span class="token comment"># if they aren't types of files (symbolic links, block files etc.)</span><br><span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token variable">${ls_cols<span class="token punctuation">[</span>i<span class="token punctuation">]</span>}</span> <span class="token operator">=~</span> ^<span class="token punctuation">(</span><span class="token punctuation">\</span>*<span class="token operator">|</span><span class="token punctuation">\</span>.<span class="token punctuation">)</span> <span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">{</span><br>    ls_cols<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token variable">${ls_cols<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">#</span>\*}</span><br>    ls_cols<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>ls_<span class="token variable">${ls_cols<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">#</span>.}</span><br><span class="token punctuation">}</span></code></pre>
<p>Again, each <code>ls_cols</code> item is being tested, but what's the pattern this time? Well, there a clue in the comment. Digging into the regular expression <code>^(\*|\.)</code> we have this:</p>
<table>
<thead>
<tr>
<th>Pattern</th>
<th>Matches</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>^</code></td>
<td>Anchors to the start of the string</td>
</tr>
<tr>
<td><code>( | )</code></td>
<td>Matching either of two values</td>
</tr>
<tr>
<td><code>\*</code></td>
<td>An actual asterisk</td>
</tr>
<tr>
<td><code>\.</code></td>
<td>An actual period</td>
</tr>
</tbody>
</table>
<p>So it seems as though this regular expression would actually match some of the items that the previous one would - anything beginning with an asterisk, basically. Perhaps now would be a good time to look at a larger examples of a <code>LS_COLORS</code> value in the wild. I'll use the <code>dircolors</code> command to produce one, as described in the <a href="http://www.bigsoft.co.uk/blog/2008/04/11/configuring-ls_colors">Configuring LS_COLORS</a> article I mentioned earlier (I've artificially wrapped the <code>LS_COLORS</code> line to fit better into this blog post format):</p>
<pre class="language-bash"><code class="language-bash"><span class="token punctuation">;</span> <span class="token function">dircolors</span><br><span class="token assign-left variable"><span class="token environment constant">LS_COLORS</span></span><span class="token operator">=</span><span class="token string">'rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01<br>:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st<br>=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.<br>lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=0<br>1;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=<br>01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*<br>.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=0<br>1;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*<br>.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01<br>;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;3<br>5:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xp<br>m=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01<br>;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*<br>.webm=01;35:*.webp=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vo<br>b=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35<br>:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=0<br>1;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*<br>.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=<br>00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*<br>.opus=00;36:*.spx=00;36:*.xspf=00;36:'</span><span class="token punctuation">;</span><br><span class="token builtin class-name">export</span> <span class="token environment constant">LS_COLORS</span></code></pre>
<blockquote>
<p>This is another pattern in the *nix world - some commands (like <code>dircolors</code> here) output further commands that can be executed using <code>eval</code>; in other words, if you run <code>eval $(dircolors)</code> you'll end up with your <code>LS_COLORS</code> variable set to the value you see, and also exported. Nice!</p>
</blockquote>
<p>In the items in <code>LS_COLORS</code> above, there are two different types of values before the equals signs. It's easier to see if we display the items on separate lines. There are many ways to do this, one might be to use <code>tr</code> to translate each separating colon (<code>:</code>) to a newline, like this:</p>
<pre class="language-bash"><code class="language-bash"><span class="token punctuation">;</span> <span class="token builtin class-name">echo</span> <span class="token environment constant">$LS_COLORS</span> <span class="token operator">|</span> <span class="token function">tr</span> <span class="token string">':'</span> <span class="token string">'\n'</span><br><span class="token assign-left variable">rs</span><span class="token operator">=</span><span class="token number">0</span><br><span class="token assign-left variable">di</span><span class="token operator">=</span>01<span class="token punctuation">;</span><span class="token number">34</span><br><span class="token assign-left variable">ln</span><span class="token operator">=</span>01<span class="token punctuation">;</span><span class="token number">36</span><br><span class="token assign-left variable">mh</span><span class="token operator">=</span>00<br><span class="token assign-left variable">pi</span><span class="token operator">=</span><span class="token number">40</span><span class="token punctuation">;</span><span class="token number">33</span><br><span class="token assign-left variable">so</span><span class="token operator">=</span>01<span class="token punctuation">;</span><span class="token number">35</span><br><span class="token punctuation">..</span>.</code></pre>
<p>Not bad. But there's a more Bash specific way, and that is to make use of the parameter expansion mechanism we've already seen, to perform a string replacement like this:</p>
<pre class="language-bash"><code class="language-bash"><span class="token punctuation">;</span> <span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token variable">${<span class="token environment constant">LS_COLORS</span><span class="token operator">/</span><span class="token operator">/</span><span class="token operator">:</span><span class="token operator">/</span>\\n}</span><br><span class="token assign-left variable">rs</span><span class="token operator">=</span><span class="token number">0</span><br><span class="token assign-left variable">di</span><span class="token operator">=</span>01<span class="token punctuation">;</span><span class="token number">34</span><br><span class="token assign-left variable">ln</span><span class="token operator">=</span>01<span class="token punctuation">;</span><span class="token number">36</span><br><span class="token assign-left variable">mh</span><span class="token operator">=</span>00<br><span class="token assign-left variable">pi</span><span class="token operator">=</span><span class="token number">40</span><span class="token punctuation">;</span><span class="token number">33</span><br><span class="token assign-left variable">so</span><span class="token operator">=</span>01<span class="token punctuation">;</span><span class="token number">35</span><br><span class="token punctuation">..</span>.</code></pre>
<p>This is another form of:</p>
<pre><code>${parameter/pattern/string}
</code></pre>
<p>But in this case, because the actual pattern starts with a forward slash (i.e. the second one in <code>LS_COLORS//</code>), the replacement is &quot;global&quot; rather than singular, i.e. every occurrence of <code>pattern</code> is replaced with <code>string</code>. The <code>string</code> in this case is <code>\\n</code> which is a newline, where the first backslash is an escape, so that the second backslash (which goes with the <code>n</code> to make the newline character <code>\n</code>) is interpreted as an actual backslash.</p>
<p>Moreover, by default, <code>echo</code> suppresses any interpretation of backslashes in the way that we want, so the <code>-e</code> option is needed here to enable that interpretation (so that <code>\n</code> is actually interpreted as a newline).</p>
<p>Anyway, this larger example value for <code>LS_COLORS</code> shows that not only are there items starting with an asterisk, but also other two-character items - these represent file types. Examples are <code>ln</code> for symbolic links, <code>di</code> for directories, <code>so</code> for sockets, and so on.</p>
<p>Now the second regular expression <code>^(\*|\.)</code> that also matches items beginning with asterisks makes more sense, in that beyond what's matched here as well, there are other item types, and fits with the &quot;<em>if they aren't types of files...</em>&quot; comment.</p>
<p>But anyway, back down to business. What is to be done with <code>LS_COLORS</code> items that match this second regular expression - items that are <em>not</em> file types? Let's take a closer look, bearing in mind what's in the comment that hints at prefixing &quot;ls_&quot; to these items:</p>
<pre class="language-bash"><code class="language-bash">ls_cols<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token variable">${ls_cols<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">#</span>\*}</span><br>ls_cols<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>ls_<span class="token variable">${ls_cols<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">#</span>.}</span></code></pre>
<p>This is effectively a two-pass change of the item value, by means of a <a href="https://www.gnu.org/software/bash/manual/html_node/Shell-Parameter-Expansion.html">parameter expansion</a> mechanism, specifically the <code>${parameter#word}</code> variety. Working through these two passes, based on the example value of <code>*.ogg=0;36</code>, this is what happens:</p>
<ol>
<li>any leading asterisk (<code>*</code>) is removed, resulting in <code>.ogg=0;36</code></li>
<li>any (now) leading period (<code>.</code>) is removed, and the string <code>ls_</code> is prepended, resulting in <code>ls_ogg=0;36</code></li>
</ol>
<p>I'm honestly not sure what the significance of this prefix is, but I guess we'll find out later.</p>
<blockquote>
<p>I had a hard time remembering the difference between the meanings of the <code>${parameter#word}</code> and <code>${parameter%word}</code> varieties (and their double versions, i.e. <code>${parameter##word}</code> and <code>${parameter%%word}</code>) until I decided to think about <code>#</code> being the character to introduce a comment at the <em>start of</em> a line, and <code>%</code> being the percent character that one puts after (<em>at the end of</em>) a number.</p>
</blockquote>
<p><a name="processingallatonce"></a></p>
<h3>Processing all the LS_COLORS items at once</h3>
<p>Once this loop is complete, we may have some value in <code>ls_patterns</code> (if there were some items that started with an asterisk but without an immediately following period), and we definitely have all the item values in the <code>ls_cols</code> array, some of which will have been modified.</p>
<p>There's now a further modification, as the comment explains, to remove characters that wouldn't be allowed in a variable name. We'll see why this is important shortly. The modification here is not within an explicit loop, but in one single go - it's quite spectacular:</p>
<pre class="language-bash"><code class="language-bash"><span class="token comment"># Strip non-ascii characters from the string as they're</span><br><span class="token comment"># used as a key to color the dir items and variable</span><br><span class="token comment"># names in bash must be '[a-zA-z0-9_]'.</span><br><span class="token assign-left variable">ls_cols</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">"<span class="token variable">${ls_cols<span class="token punctuation">[</span>@<span class="token punctuation">]</span><span class="token operator">/</span><span class="token operator">/</span><span class="token punctuation">[</span><span class="token operator">^</span>a-zA-Z0-9=\\;<span class="token punctuation">]</span><span class="token operator">/</span>_}</span>"</span><span class="token punctuation">)</span></code></pre>
<p>The comment is great, not only because it tells us what's happening, but also why it's being done. I often wish more comments in the code that I have to read reflected the &quot;why&quot; as well as the &quot;what&quot;. But that's a story for another time.</p>
<p>If we stare at the actual executable line for a bit, it's not that scary. It's the assignment of an array to <code>ls_cols</code> (which is what it is already, but the point here is that we want to modify values within it). This is the array assignment bit:</p>
<pre class="language-bash"><code class="language-bash"><span class="token assign-left variable">ls_cols</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">..</span>.<span class="token punctuation">)</span></code></pre>
<p>In the <a href="https://wiki.bash-hackers.org/syntax/arrays#storing_values">Storing Values</a> section of the <a href="https://wiki.bash-hackers.org/syntax/arrays">Bash Hackers Wiki</a> this is called a &quot;compound assignment&quot;. But what is being assigned? Well, it's this:</p>
<pre class="language-bash"><code class="language-bash"><span class="token string">"<span class="token variable">${ls_cols<span class="token punctuation">[</span>@<span class="token punctuation">]</span><span class="token operator">/</span><span class="token operator">/</span><span class="token punctuation">[</span><span class="token operator">^</span>a-zA-Z0-9=\\;<span class="token punctuation">]</span><span class="token operator">/</span>_}</span>"</span></code></pre>
<p>And by now we should recognise that immediately, albeit in a slightly different guise. It's our old friend the <code>${parameter/pattern/string}</code> parameter expansion, but this time, applied not to a scalar variable but to an array. The <a href="https://www.gnu.org/software/bash/manual/html_node/Shell-Parameter-Expansion.html">Shell Parameter Expansion</a> section for this variation has this to say: &quot;<em>If parameter is an array variable subscripted with ‘@’ or ‘*’, the substitution operation is applied to each member of the array in turn, and the expansion is the resultant list.</em>&quot;.</p>
<p>That's what we could probably guess would happen, but it's nice to have the behaviour described explicitly.</p>
<p>So what's happening in this parameter expansion? Well, the pattern is <code>[^a-zA-Z0-9=\\;]</code>, matching anything that <em>isn't</em> alphanumeric or an equals sign, an actual backslash or a semicolon, and replacing all occurrences (all because the second forward slash signifies &quot;global&quot;) with underscores. And this global replacement is performed on each member of the <code>ls_cols</code> array.</p>
<p>A short visualisation might help here. Let's say we have five items in the <code>ls_cols</code> array; we can set that up like this:</p>
<pre class="language-bash"><code class="language-bash"><span class="token punctuation">;</span> <span class="token assign-left variable">ls_cols</span><span class="token operator">=</span><span class="token punctuation">(</span>ab-c D%EF gh<span class="token punctuation">\</span><span class="token punctuation">\</span>i <span class="token operator">=</span>jkl x123<span class="token punctuation">)</span></code></pre>
<p>Applying this parameter expansion and printing the results, one item on each line, looks like this</p>
<pre class="language-bash"><code class="language-bash"><span class="token punctuation">;</span> <span class="token builtin class-name">printf</span> <span class="token string">"%s<span class="token entity" title="\n">\n</span>"</span> <span class="token string">"<span class="token variable">${ls_cols<span class="token punctuation">[</span>@<span class="token punctuation">]</span><span class="token operator">/</span><span class="token operator">/</span><span class="token punctuation">[</span><span class="token operator">^</span>a-zA-Z0-9=\\;<span class="token punctuation">]</span><span class="token operator">/</span>_}</span>"</span></code></pre>
<p>And the output is as follows:</p>
<pre><code>ab_c
D_EF
gh\i
=jkl
x123
</code></pre>
<p><a name="regex"></a></p>
<h3>Setting up a regex for the patterns</h3>
<p>There's a bit more processing before we're done with this function. Again, the comments are great. Let's take a look:</p>
<pre class="language-bash"><code class="language-bash"><span class="token comment"># Store the patterns in a '|' separated string</span><br><span class="token comment"># for use in a REGEX match later.</span><br><span class="token assign-left variable">ls_patterns</span><span class="token operator">=</span><span class="token variable">${ls_patterns<span class="token operator">/</span><span class="token operator">/</span>\*}</span><br><span class="token assign-left variable">ls_patterns</span><span class="token operator">=</span><span class="token variable">${ls_patterns<span class="token operator">%</span>?}</span></code></pre>
<p>This is another two-pass process, modifying the contents of <code>ls_patterns</code>, which, if it contains anything*, has pipe-separated pattern content.</p>
<p>*the <code>dircolors</code>-generated value for <code>LS_COLORS</code> didn't have any such &quot;patterns&quot; at all</p>
<p>In the first pass here, any and all asterisks are removed. Then in the second pass any trailing question mark is removed. This makes sense, as asterisks and question marks have special meaning in regular expressions and if they were left in, they'd take on those meanings, which is very unlikely to be what's wanted.</p>
<p><a name="ls_cols"></a></p>
<h3>Making the ls_cols variables available</h3>
<p>The contents of the <code>ls_cols</code> array are string items from the <code>LS_COLORS</code> variable, parsed and modified. Some of them -- the ones that are not file types like <code>di</code>, <code>so</code> and so on -- will have been prefixed with <code>ls_</code> too.</p>
<p>The last thing this <code>get_ls_colors</code> function does is to make these available as variable names. Here's the line, with the comments that go with it:</p>
<pre class="language-bash"><code class="language-bash"><span class="token comment"># Define the ls_ variables.</span><br><span class="token comment"># 'declare' can't be used here as variables are scoped</span><br><span class="token comment"># locally. 'declare -g' is not available in 'bash 3'.</span><br><span class="token comment"># 'export' is a viable alternative.</span><br><span class="token builtin class-name">export</span> <span class="token string">"<span class="token variable">${ls_cols<span class="token punctuation">[</span>@<span class="token punctuation">]</span>}</span>"</span> <span class="token operator">&amp;></span> /dev/null</code></pre>
<p>I was a bit confused at first as to what the comments signified, but a little digging down, via the <code>git blame</code> feature, allowed me to peel back the <a href="https://en.wikipedia.org/wiki/Palimpsest">palimpsest</a> to reveal earlier versions of this part of the function.</p>
<p>The earliest occurrence of this form <a href="https://github.com/dylanaraps/fff/commit/3bc14f4ef9fd2e5155b6769c714913d66e7d8585#diff-f284bdc3c1c9e24a494e285cb387c69510f28de51c15bb93179d9c7f28705398L110">appeared in Feb 2019</a>, and replaced a previous use of <code>source</code> with the following:</p>
<pre class="language-bash"><code class="language-bash"><span class="token comment"># Declare all LS_COLORS variables.</span><br><span class="token builtin class-name">declare</span> <span class="token parameter variable">-g</span> <span class="token string">"<span class="token variable">${ls_cols<span class="token punctuation">[</span>@<span class="token punctuation">]</span>}</span>"</span></code></pre>
<blockquote>
<p>The actual use of <code>source</code> that this replaced is amazing in its own right, and I know I can learn from it (and the linked source/eval meme image), but I'll leave that for another time: <code>source /dev/stdin &lt;&lt;&lt; &quot;${ls_exts/#;}&quot; &gt;/dev/null 2&gt;&amp;1</code></p>
</blockquote>
<p>So the first version of this was using <code>declare</code>, with the <code>-g</code> option, to declare those values as variables. If you're interested in learning more about declare, you may enjoy the post <a href="https://qmacro.org/autodidactics/2020/10/08/understanding-declare/">Understanding declare</a>. It includes a quote from the help page that talks specifically about using the <code>-g</code> (&quot;global&quot;) option when <code>declare</code> is used within a function (as it is here) to ensure the variables are not just local to that function.</p>
<p>Later the same day, <a href="https://github.com/dylanaraps/fff/commit/b76ca4c13a13d21f723a1099fff92fb3e7fffdae">this was changed</a> to almost what we have now:</p>
<pre class="language-bash"><code class="language-bash"><span class="token comment"># Define the ls_ variables.</span><br><span class="token builtin class-name">export</span> <span class="token string">"<span class="token variable">${ls_cols<span class="token punctuation">[</span>@<span class="token punctuation">]</span>}</span>"</span></code></pre>
<p>Additionally, this <a href="https://github.com/dylanaraps/fff/commit/d11a6a6adadf57adc4f72128f3afbc39d8a11733">was expanded to</a></p>
<pre class="language-bash"><code class="language-bash"><span class="token comment"># Define the ls_ variables.</span><br><span class="token builtin class-name">export</span> <span class="token string">"<span class="token variable">${ls_cols<span class="token punctuation">[</span>@<span class="token punctuation">]</span>}</span>"</span> <span class="token operator">&amp;></span>/dev/null</code></pre>
<p>to deal silently with anything that might go wrong with the export, and just a few days after that, in a <a href="https://github.com/dylanaraps/fff/commit/7bebeb28c7181bf9480e676e0660e5cab3eaa5ed">cleanup commit</a>, the comments that we see now were added.</p>
<p>Now that we have glimpsed a little of the history, and (via <a href="https://qmacro.org/autodidactics/2020/10/08/understanding-declare/">Understanding declare</a>) know that <code>-g</code> must be used with <code>declare</code> within a function to declare variables that have an existence beyond the function's scope, the comments make more sense.</p>
<p>I guess we'll find out <em>how</em> these variables are used elsewhere in the script, but for now, this brings this post, on <code>get_ls_colors</code>, to an end.</p>
<p><a name="wrappingup"></a></p>
<h3>Wrapping up</h3>
<p>I have again learned a lot by poring over the details of this, and I'm always happy to hear from you too. Has this helped? Did I miss something, or get something wrong? Whatever it is, please feel free to let me know in the comments mechanism below. Thanks for reading this far, and thanks especially to my son Joseph for a great eye and some very helpful observations!</p>
<p><a name="splittingpairs"></a></p>
<h3>Splitting the pairs into an array</h3>
<p>Next comes a lovely line, with a comment:</p>
<pre class="language-bash"><code class="language-bash"><span class="token comment"># Turn $LS_COLORS into an array.</span><br><span class="token assign-left variable"><span class="token environment constant">IFS</span></span><span class="token operator">=</span>: <span class="token builtin class-name">read</span> <span class="token parameter variable">-ra</span> ls_cols <span class="token operator">&lt;&lt;&lt;</span> <span class="token string">"<span class="token environment constant">$LS_COLORS</span>"</span></code></pre>
<blockquote>
<p>Don't confuse <code>=:</code> with any sort of assignment operator you might have seen elsewhere (such as <code>:=</code> in Go or Mathematica) - it's just the assignment (<code>=</code>) of a colon (<code>:</code>) to <code>IFS</code>.</p>
</blockquote>
<p>We saw one use of <code>read</code> in <a href="https://qmacro.org/autodidactics/2021/09/03/exploring-fff-part-1-main/">part 1</a> but that was more about how the read flags were constructed and used. Here we have another use of <code>read</code>, arguably a very common one, i.e. in combination with a temporary setting of a value for the <code>IFS</code> environment variable. By temporary, I mean that the assignment holds just for the rest of that same line only.</p>
<p>Let's break it down: we have the explicit setting of <code>IFS</code>, a <code>read</code> statement, which is being given the value of the <code>LS_COLORS</code> variable as its input, via the rather splendid looking <code>&lt;&lt;&lt;</code>.</p>
<hr>
<p>I managed to get this post finished while stuck on the ICE 1011 from Düsseldorf to Frankfurt which has been stationary for over two and a half hours already (and we're still stationary) due to a serious incident further down the line.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Embracing jq and JSON</title>
      <link href="https://qmacro.org/blog/posts/2021/10/29/embracing-jq-and-json/"/>
      <updated>2021-10-29T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2021/10/29/embracing-jq-and-json/</id>
      <content type="html">
        <![CDATA[
      <p>Finding objects in a complex JSON structure isn't as scary as I thought with jq.</p>
<!--excerpt-->
<p>My friend and colleague Rui was asking today about finding directory information for a given global account on SAP's <a href="https://www.sap.com/uk/products/business-technology-platform.html">Business Technology Platform</a> (BTP). Of course, being an awesome chap, he was asking in the context of the <a href="https://help.sap.com/viewer/65de2977205c403bbc107264b8eccf4b/Cloud/en-US/7c6df2db6332419ea7a862191525377c.html">BTP CLI tool</a>, <code>btp</code>.</p>
<p>For a given (fictitious) trial global account, let's say I have a structure that looks like this:</p>
<p><img src="/images/2021/10/btp-global-account-structure.png" alt="BTP global account structure"></p>
<p>With the <code>btp</code> tool, I can see this information cleanly in my environment of choice, my Bash shell, with this invocation:</p>
<pre class="language-bash"><code class="language-bash">btp get accounts/global-account --show-hierarchy</code></pre>
<p>which shows me something like this:</p>
<pre><code>Showing details for global account 42bb4252-2b49-4685-bcd7-62c8d85d8b13...

├─ 7f81446xtrial (42bb4252-2b49-4685-bcd7-62c8d85d8b13 - global account)
│  ├─ trial (b3f3b2a3-d96d-4bea-8bbf-57ee84a9fc23 - subaccount)
│  ├─ mydir (e6cde265-5d78-4e7c-a8cb-8625a4daaa04 - directory)
│  │  ├─ fruit (4cc2e8f8-8cef-4828-82af-9b5adae387de - directory)
│  │  │  ├─ apple (3b4ba347-973f-4571-b4af-7862886104be - directory)
│  │  │  ├─ banana (0b58163d-5c49-4eb5-b359-17c9a0d94138 - directory)
│  │  ├─ this and that (4a050bbe-5c4d-4ac0-9a66-d7e513f8b4c8 - directory)

type:            id:                                    display name:   parent id:                             parent type:
global account   42bb4252-2b49-4685-bcd7-62c8d85d8b13   7f81446xtrial
subaccount       b3f3b2a3-d96d-4bea-8bbf-57ee84a9fc23   trial           42bb4252-2b49-4685-bcd7-62c8d85d8b13   global account
directory        e6cde265-5d78-4e7c-a8cb-8625a4daaa04   mydir           42bb4252-2b49-4685-bcd7-62c8d85d8b13   global account
directory        4cc2e8f8-8cef-4828-82af-9b5adae387de   fruit           e6cde265-5d78-4e7c-a8cb-8625a4daaa04   directory
directory        3b4ba347-973f-4571-b4af-7862886104be   apple           4cc2e8f8-8cef-4828-82af-9b5adae387de   directory
directory        0b58163d-5c49-4eb5-b359-17c9a0d94138   banana          4cc2e8f8-8cef-4828-82af-9b5adae387de   directory
directory        4a050bbe-5c4d-4ac0-9a66-d7e513f8b4c8   this and that   e6cde265-5d78-4e7c-a8cb-8625a4daaa04   directory
</code></pre>
<p>The directories are hierarchically related, as you can see from the graphical depiction. But they're presented in a nice flat list towards the end, and I'm tempted to use standard *nix tools to parse that information out.</p>
<p>First, I'm only interested in the data in the second half, in the table that has headers like &quot;type:&quot;, &quot;id:&quot; and so on. So I can remove all the lines up to (and including) that header line like this:</p>
<pre class="language-bash"><code class="language-bash">btp get accounts/global-account --show-hierarchy <span class="token punctuation">\</span><br>  <span class="token operator">|</span> <span class="token function">sed</span> <span class="token parameter variable">-e</span> <span class="token string">'1,/^type:\s/d'</span></code></pre>
<p>This gives me the following:</p>
<pre><code>global account   42bb4252-2b49-4685-bcd7-62c8d85d8b13   7f81446xtrial
subaccount       b3f3b2a3-d96d-4bea-8bbf-57ee84a9fc23   trial           42bb4252-2b49-4685-bcd7-62c8d85d8b13   global account
directory        e6cde265-5d78-4e7c-a8cb-8625a4daaa04   mydir           42bb4252-2b49-4685-bcd7-62c8d85d8b13   global account
directory        4cc2e8f8-8cef-4828-82af-9b5adae387de   fruit           e6cde265-5d78-4e7c-a8cb-8625a4daaa04   directory
directory        3b4ba347-973f-4571-b4af-7862886104be   apple           4cc2e8f8-8cef-4828-82af-9b5adae387de   directory
directory        0b58163d-5c49-4eb5-b359-17c9a0d94138   banana          4cc2e8f8-8cef-4828-82af-9b5adae387de   directory
directory        4a050bbe-5c4d-4ac0-9a66-d7e513f8b4c8   this and that   e6cde265-5d78-4e7c-a8cb-8625a4daaa04   directory
</code></pre>
<p>Now I can more reliably look for the <code>directory</code> entries, right?</p>
<pre class="language-bash"><code class="language-bash">btp get accounts/global-account --show-hierarchy <span class="token punctuation">\</span><br>  <span class="token operator">|</span> <span class="token function">sed</span> <span class="token string">'1,/^type:\s/d'</span> <span class="token punctuation">\</span><br>  <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">'^directory\s'</span></code></pre>
<p>This gives me:</p>
<pre><code>directory        e6cde265-5d78-4e7c-a8cb-8625a4daaa04   mydir           42bb4252-2b49-4685-bcd7-62c8d85d8b13   global account
directory        4cc2e8f8-8cef-4828-82af-9b5adae387de   fruit           e6cde265-5d78-4e7c-a8cb-8625a4daaa04   directory
directory        3b4ba347-973f-4571-b4af-7862886104be   apple           4cc2e8f8-8cef-4828-82af-9b5adae387de   directory
directory        0b58163d-5c49-4eb5-b359-17c9a0d94138   banana          4cc2e8f8-8cef-4828-82af-9b5adae387de   directory
directory        4a050bbe-5c4d-4ac0-9a66-d7e513f8b4c8   this and that   e6cde265-5d78-4e7c-a8cb-8625a4daaa04   directory
</code></pre>
<p>Now all I need to do is grab the value of the third column ... oh, wait.</p>
<p>The directory named &quot;this and that&quot; is going to give me a bit of a headache; because it's not tabs that separate the columns, but normal spaces, I can't easily distinguish the spaces separating the columns from the spaces separating the words in the name &quot;this and that&quot;.</p>
<p>While it's possible I could come up with some solution here, I think it's getting a little complex.</p>
<p>The BTP CLI sports a <a href="https://help.sap.com/viewer/65de2977205c403bbc107264b8eccf4b/Cloud/en-US/dcb85b7dea61432cbafaab4ce0ec9b08.html">JSON output mode</a>. This provides me with a more reliable and predictable data structure that I can parse. The natural tool to reach for here is of course <a href="https://stedolan.github.io/jq/">jq</a>, the &quot;lightweight and flexible command-line JSON processor&quot;.</p>
<p>However, the structure of the JSON in this particular case is not regular; the nesting of parent and child objects reflects the structure of the actual hierarchy in the global account. That makes sense of course, but to be honest, the prospect of wielding some <code>jq</code> incantation to parse an object structure that I cannot know in advance felt a little scary; I had visions of recursive procedures and more.</p>
<p>Here's a short section of the <a href="/autodidactics/content/2021/10/hierarchy.json">JSON output</a>, to show you what I mean:</p>
<p><img src="/images/2021/10/json-output-structure.png" alt="JSON output structure"></p>
<p>As it turns out, finding the objects in this hierarchy of nested parents and children turned out to be not as scary as I thought. Here's the invocation again, this time passing the option <code>--format json</code> when invoking <code>btp</code>, and parsing the output with <code>jq</code>:</p>
<pre class="language-bash"><code class="language-bash">btp <span class="token parameter variable">--format</span> json get accounts/global-account --show-hierarchy <span class="token punctuation">\</span><br>  <span class="token operator">|</span> jq <span class="token parameter variable">-r</span> <span class="token string">'recurse | objects | select(.directoryType=="FOLDER") | .displayName'</span></code></pre>
<p>This produces the following output to STDOUT:</p>
<pre><code>fruit
banana
apple
this and that
</code></pre>
<p>Wonderful!</p>
<p>Here's a quick summary of what each of the items in the <code>jq</code> pipeline does:</p>
<ul>
<li><code>recurse</code>: Recursively descends <code>.</code>, producing every value</li>
<li><code>objects</code>: Selects only inputs that are objects</li>
<li><code>select(boolean_expression)</code>: produces its input unchanged if the expression returns true</li>
</ul>
<p>The boolean expression used with <code>select</code> ensures that only objects that have a JSON property <code>directoryType</code> with the specific value <code>FOLDER</code> are picked out. From those, just the value of the <code>displayName</code> property is then produced.</p>
<p>And that's it. Not as scary as I thought.</p>
<p>I need to improve my <code>jq</code> fu, and using it like this to process output from CLI tools such as <code>btp</code> is one way of doing it.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Sourcing vs executing in Bash</title>
      <link href="https://qmacro.org/blog/posts/2021/10/14/sourcing-vs-executing-in-bash/"/>
      <updated>2021-10-14T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2021/10/14/sourcing-vs-executing-in-bash/</id>
      <content type="html">
        <![CDATA[
      <p>Checking the value of $0 allows me to source rather than execute an entire script.</p>
<!--excerpt-->
<p>Today I wrote a script <code>checksubmissions</code> to check submitted pull requests in the <a href="https://github.com/SAP-samples/devtoberfest-2021">SAP-samples/devtoberfest-2021</a> repo related to Devtoberfest from SAP this year, specifically the <a href="https://github.com/SAP-samples/devtoberfest-2021/tree/main/topics/Week2_Best_Practices">Best Practices</a> week.</p>
<p><a href="https://github.com/SAP-samples/devtoberfest-2021/blob/730e998d350282ae368d80abbfbf3a322823981c/topics/Week2_Best_Practices/challenge/checksubmissions">In its current form, at the time of writing</a>, the script follows a pattern that I've used for a while now</p>
<ul>
<li>some general settings and possibly global variables</li>
<li>then some function definitions, including a <code>main</code> function definition</li>
<li>then finally, the invocation of that <code>main</code> function, passing on to it any parameters that were supplied when the script is invoked</li>
</ul>
<p>For the sake of illustration, here's a super simplified script called <code>myscript</code> that follows that pattern:</p>
<pre class="language-bash"><code class="language-bash"><span class="token shebang important">#!/usr/bin/env bash</span><br><br><span class="token builtin class-name">set</span> <span class="token parameter variable">-o</span> errexit<br><br><span class="token function-name function">func1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br>  <span class="token builtin class-name">echo</span> <span class="token string">"Inside func1"</span><br><span class="token punctuation">}</span><br><br><span class="token function-name function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br>  <span class="token builtin class-name">echo</span> <span class="token string">"Running main with <span class="token variable">$*</span>"</span><br>  func1<br><span class="token punctuation">}</span><br><br>main <span class="token string">"<span class="token variable">$@</span>"</span></code></pre>
<p>Sometimes, especially when building out scripts like this, I like to test the functions individually, from the command line if possible. In the example from today, I check every pull request each time, initiated from <code>main</code> like this:</p>
<pre class="language-bash"><code class="language-bash"><span class="token function-name function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br><br>  getprs <span class="token operator">|</span> <span class="token keyword">while</span> <span class="token builtin class-name">read</span> <span class="token parameter variable">-r</span> number title<span class="token punctuation">;</span> <span class="token keyword">do</span><br><br>    check <span class="token string">"<span class="token variable">$number</span>"</span> <span class="token string">"<span class="token variable">$title</span>"</span><br>    <span class="token function">sleep</span> <span class="token number">1</span><br><br>  <span class="token keyword">done</span><br><br><span class="token punctuation">}</span><br><br>main <span class="token string">"<span class="token variable">$@</span>"</span></code></pre>
<p>(<a href="https://github.com/SAP-samples/devtoberfest-2021/blob/730e998d350282ae368d80abbfbf3a322823981c/topics/Week2_Best_Practices/challenge/checksubmissions#L104-L113">Source</a>)</p>
<p>But while developing, I wanted to test out the <code>check</code> function (<a href="https://github.com/SAP-samples/devtoberfest-2021/blob/730e998d350282ae368d80abbfbf3a322823981c/topics/Week2_Best_Practices/challenge/checksubmissions#L62-L100">source</a>) manually on a single pull request. Of course, editing the script to do that wasn't much of an effort, but I wondered if there was another way.</p>
<p>What if, from the shell prompt, I could <a href="https://tldp.org/HOWTO/Bash-Prompt-HOWTO/x237.html">source</a> the script, to bring the function definitions into my current environment, and then manually invoke the <code>check</code> function on a single pull request?</p>
<p>Sourcing the script as it is would have the unwanted effect of running checks on all the pull requests, because the last line in the script actually invokes <code>main</code>, as it's supposed to.</p>
<p>It turns out that it is possible to determine whether a script is being <a href="https://tldp.org/HOWTO/Bash-Prompt-HOWTO/x237.html">sourced</a> just by close examination of the <code>$0</code> variable.</p>
<blockquote>
<p>There's also the <code>BASH_SOURCE</code> environment variable, which I want to look into as well (e.g. by reading this StackOverflow post: <a href="https://stackoverflow.com/questions/35006457/choosing-between-0-and-bash-source">Choosing between $0 and BASH_SOURCE</a>) but that's for another time.</p>
</blockquote>
<p>First, I can replace the simple invocation:</p>
<pre class="language-bash"><code class="language-bash">main <span class="token string">"<span class="token variable">$@</span>"</span></code></pre>
<p>with this:</p>
<pre class="language-bash"><code class="language-bash"><span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token variable">$0</span> <span class="token operator">=~</span> ^-bash <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span><br>  <span class="token builtin class-name">return</span> <span class="token number">0</span><br><span class="token keyword">else</span><br>  main <span class="token string">"<span class="token variable">$@</span>"</span><br><span class="token keyword">fi</span></code></pre>
<p>When the script is executed, the value of <code>$0</code> is the name of the script. But when it's <em>sourced</em>, it's <code>-bash</code>.</p>
<p>Now, if I implement this change in the super simplified <code>myscript</code> above, then this is what happens, at a Bash shell prompt.</p>
<p>First, to show there's nothing up my sleeve, an attempt to invoke <code>func1</code> fails:</p>
<pre class="language-bash"><code class="language-bash"><span class="token punctuation">;</span> func1<br>-bash: func1: <span class="token builtin class-name">command</span> not found</code></pre>
<p>Now I execute the script, and it behaves as expected:</p>
<pre class="language-bash"><code class="language-bash"><span class="token punctuation">;</span> ./myscript hello world<br>running main with hello world<br>Inside func1</code></pre>
<p>Of course, we still don't have the <code>func1</code> function available to us:</p>
<pre class="language-bash"><code class="language-bash"><span class="token punctuation">;</span> func1<br>-bash: func1: <span class="token builtin class-name">command</span> not found</code></pre>
<p>But what if I <em>source</em> the script rather than execute it? I can do that with <code>source myscript</code> or simply <code>. myscript</code>:</p>
<pre class="language-bash"><code class="language-bash"><span class="token punctuation">;</span> <span class="token builtin class-name">source</span> myscript</code></pre>
<p>Nothing seems to happen. Which is good -- we don't get the &quot;running main with hello world&quot; or &quot;Inside func1&quot; output.</p>
<p>But now the definition of <code>func1</code> is available, and we can run it:</p>
<pre class="language-bash"><code class="language-bash"><span class="token punctuation">;</span> func1<br>Inside func1</code></pre>
<p>That seems rather appealing!</p>
<p>This is early days, I may have missed a fundamental gotcha, but for now, I've found a way (which vaguely reminds me of Python's <code>if __name__ == &quot;__main__&quot;</code> pattern) to be able to reduce that (already small) gap even further between the interactive shell and script content.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Using functions more</title>
      <link href="https://qmacro.org/blog/posts/2021/09/15/using-functions-more/"/>
      <updated>2021-09-15T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2021/09/15/using-functions-more/</id>
      <content type="html">
        <![CDATA[
      <p>Using functions more in my shell seems to bring benefits. Here's an example.</p>
<!--excerpt-->
<p>Bash functions seem to sit in a sweet spot between aliases and full blown scripts. I've defined a number of functions in my dotfiles which are all useful. Unlike aliases, they can take parameters and have greater scope for doing things; unlike scripts, they run in the context of the current shell which means, for example, that I can set a value in a variable during the course of a function's execution and it's available directly afterwards, in the same shell session.</p>
<p>Anyway, in the context of thinking about functions more, I decided to write a &quot;wrapper&quot; around one of the CLI tools I'm using a lot at the moment, the btp CLI, i.e. the command line tool for administration of resources and services on the SAP Business Technology Platform (BTP). If you want to learn more about the btp CLI and, indirectly, about BTP, have a look at the corresponding SAP Tech Bytes series of blog posts, starting with <a href="https://blogs.sap.com/2021/09/01/sap-tech-bytes-btp-cli-installation/">SAP Tech Bytes: btp CLI - installation</a>, and <a href="https://github.com/SAP-samples/sap-tech-bytes/tree/2021-09-01-btp-cli">the associated branch in the SAP Tech Bytes repo on GitHub</a>.</p>
<p>The btp CLI, like other tools that manage cloud-based resources, is quite verbose in its output; partly because it needs to impart a lot of information, and partly because cloud resources, being &quot;cattle, not pets&quot;, have identities that are more likely to be long GUIDs than short human-friendly names. For more on this, see this post in my <a href="https://blogs.sap.com/tag/mondaymorningthoughts/">Monday morning thoughts</a> series: <a href="https://blogs.sap.com/2018/04/09/monday-morning-thoughts-a-cloud-native-smell/">A cloud-native smell</a>.</p>
<p>So when invoking the btp CLI with an action to look at the hierarchy of directories and subaccounts in a global account, the output tends to wrap around, like this:</p>
<p><img src="/images/2021/09/hierarchy-wrapped.png" alt="hierarchy information, wrapped"></p>
<p>But with a simple wrapper function, I can have this a lot cleaner; granted, if there's something at the end of the long lines that I'm interested in, then I won't be able to use this, but it's usually information at the start of the lines that's important to me.</p>
<p>Here's a wrapper function for the btp CLI that I've just started to use:</p>
<pre class="language-bash"><code class="language-bash"><span class="token function-name function">btp</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><br><span class="token punctuation">{</span><br>    <span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token variable">$1</span> <span class="token operator">=~</span> ^<span class="token punctuation">(</span>get<span class="token operator">|</span>list<span class="token punctuation">)</span>$ <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span><br>        <span class="token string">"<span class="token environment constant">$HOME</span>/bin/btp"</span> <span class="token string">"<span class="token variable">$@</span>"</span> <span class="token operator">|</span> trunc<br>    <span class="token keyword">else</span><br>        <span class="token string">"<span class="token environment constant">$HOME</span>/bin/btp"</span> <span class="token string">"<span class="token variable">$@</span>"</span><br>    <span class="token keyword">fi</span><br><span class="token punctuation">}</span></code></pre>
<p>When I use <code>btp</code> to display information, with the <code>get</code> or <code>list</code> actions, this will run the real btp CLI, passing it whatever arguments I passed to the function (i.e. in <code>$@</code>), piping the output to the <code>cut</code> command where I use the <code>-c</code> option to tell it to only output characters from column 1, up to however many columns the current terminal has (which can be determined with <code>tput cols</code>).</p>
<blockquote>
<p>For those of you who are #HandsOnSAPDev pioneers, you may recognise this, as we encapsulated <code>cut -c 1-$(tput cols)</code> as <code>trunc</code>.</p>
</blockquote>
<p>Now, running that same command, the output looks like this:</p>
<p><img src="/images/2021/09/hierarchy-clean.png" alt="hierarchy information, clean"></p>
<p>It's early days, but I quite like the way I can use the power of functions like this.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Improving shell fu with practice</title>
      <link href="https://qmacro.org/blog/posts/2021/09/12/improving-shell-fu-with-practice/"/>
      <updated>2021-09-12T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2021/09/12/improving-shell-fu-with-practice/</id>
      <content type="html">
        <![CDATA[
      <p>Practising in the shell helps me improve and exposes me to new knowledge. Here's an example.</p>
<!--excerpt-->
<p>At the end of the working day I'm tired, but there's often just enough energy left in my brain to explore new options for some Unix commands, and practise my shell fu. Here's a few trivial things that I just learned, by writing a pipeline to choose and display a new theme for my current terminal of choice, <a href="https://sw.kovidgoyal.net/kitty/">kitty</a>.</p>
<p>There's <a href="https://github.com/dexpota/kitty-themes">a nice selection of themes for kitty</a>; I've installed the contents of the repo in the right place and can select a theme by <a href="https://github.com/qmacro/dotfiles/blob/ba940b5b70b069010e18d22d8d88da01acaf9048/config/kitty/kitty.conf#L1287">adding an include at the bottom of my <code>kitty.conf</code> file</a>:</p>
<pre><code>include ./theme.conf
</code></pre>
<p>and then creating <code>theme.conf</code> as a symbolic link pointing to the actual theme configuration file (from the repo) that I want to use:</p>
<pre><code>lrwxr-xr-x   1 i347491  staff     72 13 Sep 18:07 theme.conf -&gt; kitty-themes/themes/SpaceGray.conf
</code></pre>
<p>This was achieved with the following:</p>
<pre class="language-bash"><code class="language-bash"><span class="token builtin class-name">cd</span> <span class="token variable">$DOTFILES</span>/config/kitty/ <span class="token punctuation">\</span><br>  <span class="token operator">&amp;&amp;</span> <span class="token function">find</span> kitty-themes/themes <span class="token parameter variable">-name</span> <span class="token string">'*.conf'</span> <span class="token punctuation">\</span><br>    <span class="token operator">|</span> <span class="token function">shuf</span> <span class="token parameter variable">-n</span> <span class="token number">1</span> <span class="token punctuation">\</span><br>    <span class="token operator">|</span> <span class="token function">xargs</span> <span class="token parameter variable">-J</span> % <span class="token function">ln</span> <span class="token parameter variable">-fsv</span> % theme.conf <span class="token punctuation">\</span><br>    <span class="token operator">|</span> <span class="token function">grep</span> <span class="token parameter variable">-P</span> <span class="token parameter variable">-o</span> <span class="token string">'\w+(?=\.conf$)'</span></code></pre>
<p>This uses <code>find</code> to look for <code>conf</code> files in the <code>kitty-themes/themes/</code> directory within my dotfiles configuration for <code>kitty</code>. The output of such a <code>find</code> command looks like this:</p>
<pre><code>kitty-themes/themes/SpaceGray_Eighties_Dull.conf
kitty-themes/themes/Monokai.conf
kitty-themes/themes/Floraverse.conf
...
</code></pre>
<p>I pass this list to <code>shuf</code> (short for &quot;shuffle&quot;), which &quot;generates random permutations&quot; and ask it via <code>-n 1</code> to only give me one back.</p>
<p>Then of course it would be nice to use <code>xargs</code> to pass that single, random theme file name, for example <code>kitty-themes/themes/SpaceGray.conf</code>, to the <code>ln</code> command to create a symbolic link. The thing is, <code>xargs</code> puts what it's given at the end of the list; in other words, if we did this:</p>
<pre class="language-bash"><code class="language-bash"><span class="token builtin class-name">echo</span> kitty-themes/themes/SpaceGray.conf <span class="token operator">|</span> <span class="token function">xargs</span> <span class="token function">ln</span> <span class="token parameter variable">-fsv</span> theme.conf</code></pre>
<p>then the <code>ln</code> command invoked would be the wrong way round, i.e.:</p>
<pre class="language-bash"><code class="language-bash"><span class="token function">ln</span> <span class="token parameter variable">-fsv</span> theme.conf kitty-themes/themes/SpaceGray.conf</code></pre>
<p>instead of</p>
<pre class="language-bash"><code class="language-bash"><span class="token function">ln</span> <span class="token parameter variable">-fsv</span> kitty-themes/themes/SpaceGray.conf theme.conf</code></pre>
<p>Luckily <code>xargs</code> has the <code>-J</code> option which allows us to specify a pattern, and then refer to that pattern to insert the value appropriately, which is what is happening here - the <code>%</code> is the pattern and shows where in the <code>ln</code> command the value should be put:</p>
<pre class="language-bash"><code class="language-bash"><span class="token function">xargs</span> <span class="token parameter variable">-J</span> % <span class="token function">ln</span> <span class="token parameter variable">-fsv</span> % theme.conf</code></pre>
<p>What of the <code>ln</code> command itself? Well there's the <code>-s</code> option which is the main deal, i.e. we want to create a symbolic link. The <code>-f</code> option tells <code>ln</code> to not worry about any existing file (i.e. if there's already a <code>theme.conf</code>) and to just overwrite it. And the <code>-v</code> is a verbose option which outputs what is being done.</p>
<p>This last <code>-v</code> option is used so that I can get the name of the randomly selected theme. Without the last part of the pipeline, into <code>grep</code>, we'd see something like this, output because of this <code>-v</code> option to <code>ln</code>:</p>
<pre><code>theme.conf -&gt; kitty-themes/themes/SpaceGray.conf
</code></pre>
<p>So we can then pipe this into <code>grep</code> to grab the <code>SpaceGray</code> part, invoking the powerful Perl Compatible Regular Expression (PCRE) class of regular expressions (for which I have to use the <code>-P</code> option) to be able to use a positive lookahead assertion <code>(?=\.conf$)</code> to say <em>what we're trying to match, <code>\w+</code> (a sequence of at least one word character), must be directly followed by <code>.conf</code> up against the end of the line (<code>$</code>)</em>.</p>
<p>Such an assertion is not part of the actual match, which means we can then simply use the <code>-o</code> option to tell <code>grep</code> to output just the match itself, i.e.:</p>
<pre><code>SpaceGray
</code></pre>
<p>I use this technique in <a href="https://github.com/SAP-samples/sap-tech-bytes/blob/8cbc01e51a8adcc6051fe9c6800c91a4093f1af9/getbtpcli">getbtpcli</a> (see <a href="https://github.com/SAP-samples/sap-tech-bytes/blob/8cbc01e51a8adcc6051fe9c6800c91a4093f1af9/getbtpcli#L61">line 61</a>) - if you're interested in reading more about this, have a look at the blog post <a href="https://blogs.sap.com/2021/09/01/sap-tech-bytes-btp-cli-installation/">SAP Tech Bytes: btp CLI - installation</a>, and the comments too.</p>
<p>And that's pretty much it. Nothing earth shattering, but certainly a couple of things that I found out (in particular <code>ln</code>'s <code>-v</code> option and <code>xargs</code>'s <code>-J</code> option.</p>
<p>Happy learning!</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Exploring fff part 1 - main</title>
      <link href="https://qmacro.org/blog/posts/2021/09/03/exploring-fff-part-1-main/"/>
      <updated>2021-09-03T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2021/09/03/exploring-fff-part-1-main/</id>
      <content type="html">
        <![CDATA[
      <p>Here's what I learned from starting to read the source code to fff - in particular, the main function.</p>
<!--excerpt-->
<p><a href="https://github.com/dylanaraps/fff"><code>fff</code></a> is &quot;a simple file manager written in Bash&quot;. As I'm always on the lookout to learn more about Bash, that description got my attention immediately. It's a small but perfectly formed offering, complete with man page and even a <code>Makefile</code> for installation. And the file manager executable* itself is a single Bash script.</p>
<p>*I use this term deliberately, and it does make me stop and think every time I see scripts in a <code>bin</code> directory (where &quot;bin&quot; stands for binary). But that's a conversation for another time.</p>
<p>The author, <a href="https://github.com/dylanaraps">Dylan Araps</a> has produced other interesting pieces of software (such as <a href="https://github.com/dylanaraps/neofetch">neofetch</a>) as well some great documents such as the <a href="https://github.com/dylanaraps/pure-bash-bible">pure bash bible</a> as well as the <a href="https://github.com/dylanaraps/pure-sh-bible">pure sh bible</a>. He's also the creator of <a href="https://kisslinux.org/">Kiss Linux</a>. He has a reputation for writing great Bash code, so this seems like an opportunity too good to miss to learn from better programmers.</p>
<p>It seems that recently Dylan has <a href="https://www.reddit.com/r/kisslinux/comments/lsbz8n/an_update_on_dylan/">disappeared off the radar</a>, I don't know what the situation is but I wish him well.</p>
<p>Anyway, I wanted to take a first look at <code>fff</code> to see what I could discern. I'm reviewing the code as it stands at the latest to-date <a href="https://github.com/dylanaraps/fff/commit/5b90a8599cce3333672947438bb1718e1298e068">commit</a>, i.e. <a href="https://github.com/dylanaraps/fff/tree/5b90a8599cce3333672947438bb1718e1298e068">here</a>.</p>
<p>Where I can, I link to reference material so you can dig in further to Bash details that take your fancy. This reference material includes the following sites (and there are more of course):</p>
<ul>
<li><a href="https://www.gnu.org/software/bash/manual/html_node/index.html">Bash Reference Manual</a></li>
<li><a href="https://unix.stackexchange.com/">Unix &amp; Linux Stack Exchange</a> (esp. the <a href="https://unix.stackexchange.com/questions/tagged/bash"><code>bash</code> tag</a>)</li>
<li><a href="https://wiki.bash-hackers.org/start">Bash Hackers Wiki</a></li>
<li>the <a href="https://mywiki.wooledge.org/BashFAQ">Bash FAQ on Greg's Wiki</a></li>
<li>the <a href="https://github.com/koalaman/shellcheck/wiki">Shellcheck Wiki</a></li>
</ul>
<h1>Structure and use of main function</h1>
<p>As I mentioned recently in <a href="https://qmacro.org/2021/08/26/learning-by-rewriting/">Learning by rewriting - bash, jq and fzf details</a>, I like to structure Bash scripts into functions, with a <code>main</code> function towards the end, followed by a simple call to that function, passing in everything that was specified on the command line via the <code>$@</code> <a href="https://www.gnu.org/software/bash/manual/html_node/Special-Parameters.html">special parameter</a> which &quot;expands to the positional parameters, starting from one&quot; (positional parameter zero is the name of the script itself).</p>
<p>This is a practice I picked up, I think, from Google's <a href="https://google.github.io/styleguide/shellguide.html">Shell Style Guide</a> - see <a href="https://google.github.io/styleguide/shellguide.html#s7.8-main">this section</a> for details. I wrote about this guide last year in <a href="https://qmacro.org/2020/10/05/improving-my-shell-scripting/">Improving my shell scripting</a>.</p>
<p>Dylan structures <code>fff</code> in the same way, and <a href="https://github.com/dylanaraps/fff/blob/5b90a8599cce3333672947438bb1718e1298e068/fff#L1145">uses the <code>main</code> pattern too</a>. For me, that's a good affirmation of this approach.</p>
<p>The <code>main</code> function itself <a href="https://github.com/dylanaraps/fff/blob/5b90a8599cce3333672947438bb1718e1298e068/fff#L1074-L1078">begins with</a> a series of comments indented to the same level as the rest of the function body.</p>
<pre class="language-bash"><code class="language-bash"><span class="token function-name function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br>    <span class="token comment"># Handle a directory as the first argument.</span><br>    <span class="token comment"># 'cd' is a cheap way of finding the full path to a directory.</span><br>    <span class="token comment"># It updates the '$PWD' variable on successful execution.</span><br>    <span class="token comment"># It handles relative paths as well as '../../../'.</span></code></pre>
<p>I used to oscillate between putting comments that described a function <em>before</em> the function definition, and <em>within</em> the function definition. On balance I prefer the comments to be within, so the entire function content is encapsulated within the <code>{...}</code> brace-bound block.</p>
<p>The comment here is interesting too; it shows that a knowledge of side effects (the setting of a value in <code>$PWD</code>) can be useful, and also a willingness to use <code>cd</code> itself; to quote Ward Cunningham, &quot;the simplest thing that could possibly work&quot; (this came up in a great interview with Ward, which I've transcoded to audio format in my &quot;Tech Aloud&quot; podcast - see <a href="https://anchor.fm/tech-aloud/episodes/The-Simplest-Thing-that-Could-Possibly-Work--A-conversation-with-Ward-Cunningham--Part-V---Bill-Venners-e5dpts">The Simplest Thing that Could Possibly Work, A conversation with Ward Cunningham</a>).</p>
<h2>First line - changing directory</h2>
<p>The <a href="https://github.com/dylanaraps/fff/blob/5b90a8599cce3333672947438bb1718e1298e068/fff#L1081">first actual executable line</a> is now ready for our gaze, and it's a beauty.</p>
<pre class="language-bash"><code class="language-bash"><span class="token builtin class-name">cd</span> <span class="token string">"<span class="token variable">${2<span class="token operator">:-</span>$1}</span>"</span> <span class="token operator">&amp;></span>/dev/null <span class="token operator">||</span><span class="token builtin class-name">:</span></code></pre>
<p>What can we unpack from that?</p>
<p><a name="parameter-expansion"></a></p>
<h3>Parameter expansion &quot;${2:-$1}&quot;</h3>
<p>Let's start with the <a href="https://www.gnu.org/software/bash/manual/html_node/Shell-Parameter-Expansion.html">parameter expansion</a> used here: <code>&quot;${2:-$1}&quot;</code>. The <code>${parameter:-word}</code> form lets you specify a default value, basically; if the value of 'parameter' is unset or null, then the expansion of 'word' is substituted.</p>
<p>First of all, the idea is that if a value is specified when <code>fff</code> is invoked, it's used as the directory to start in. Now that's established, let's dig in a little more.</p>
<p>The first question that comes to mind is why is <code>$2</code> (the second parameter) specified first, falling back to <code>$1</code> here? Well my take is that it's again a simple but effective way of handling optional parameters when the script is invoked.</p>
<p>There has been an awful lot written about how best (and how not) to parse script parameters in Bash, from roll-your-own solutions, the use of the <code>switch</code> statement, and of course the <code>getopts</code> builtin. Each approach has its merits and downsides, and there doesn't seem to be a single, universal ideal.</p>
<p>If we read a little further ahead in the <code>main</code> function, we notice checks for various options in <code>$1</code>:</p>
<table>
<thead>
<tr>
<th>Check for</th>
<th>Check with</th>
</tr>
</thead>
<tbody>
<tr>
<td>Version information</td>
<td><code>[[ $1 == -v ]] &amp;&amp; { ... }</code></td>
</tr>
<tr>
<td>Help</td>
<td><code>[[ $1 == -h ]] &amp;&amp; { ... }</code></td>
</tr>
<tr>
<td>Some custom file picker processing</td>
<td><code>[[ $1 == -p ]] &amp;&amp; { ... }</code></td>
</tr>
</tbody>
</table>
<p>So we know from this that there are at least three option parameters that <code>fff</code> understands, and that they are expected before anything else (the starting directory, if any) is passed on invocation (I guess we can assume that Dylan doesn't expect more than one of them to be specified in any single invocation too).</p>
<p>Knowing this, the <code>&quot;${2:-$1}&quot;</code> incantation is easier to understand: it tries for the value of the second parameter to be the directory to start in, assuming that one of the option parameters might have been specified first. But if a option parameter <em>wasn't</em> specified, then any starting directory would not be in <code>$2</code>, but in <code>$1</code>, which the parameter expansion deals with perfectly here.</p>
<p>I think this potentially saves some unnecessary conditional logic that would otherwise make this section of <code>main</code> more verbose. I like it!</p>
<p><a name="output-redirection"></a></p>
<h3>Output redirection</h3>
<p>What if no starting directory was specified at all? What if a value was specified but that value wasn't a directory, wasn't something that was going to make sense being passed to <code>cd</code>?</p>
<p>Giving an inappropriate value to <code>cd</code> results in an error, for example:</p>
<pre class="language-bash"><code class="language-bash">$ <span class="token builtin class-name">cd</span> foo  <span class="token comment"># foo doesn't exist</span><br>-bash: cd: foo: No such <span class="token function">file</span> or directory</code></pre>
<p>or even just:</p>
<pre class="language-bash"><code class="language-bash">$ <span class="token builtin class-name">cd</span> testfile <span class="token comment"># this is a file not a directory</span><br>-bash: cd: testfile: Not a directory</code></pre>
<p>The behaviour actually appropriate in these cases is just to allow the <code>cd</code> invocation to fail, and for <code>fff</code> to start in whatever directory we happen to be in. We don't want to see any error messages, so they're redirected to <code>/dev/null</code>. This redirection construct used is quite interesting in itself, though.</p>
<p>What we see here is <code>&amp;&gt;</code> and according to <a href="https://www.gnu.org/software/bash/manual/html_node/Redirections.html#Redirecting-Standard-Output-and-Standard-Error">3.6.4 Redirecting Standard Output and Standard Error</a> in the Bash manual, it's the preferred short form for redirecting both standard output (STDOUT) and standard error (STDERR) to the same place. Indeed, we see that</p>
<pre><code>&amp;&gt;/dev/null
</code></pre>
<p>is equivalent to</p>
<pre><code>&gt;/dev/null 2&gt;&amp;1
</code></pre>
<p>Moreover, you may be happy to find out that this in turn is a short form of</p>
<pre><code>1&gt;/dev/null 2&gt;&amp;1
</code></pre>
<p>because the standard three file descriptors that are opened are:</p>
<table>
<thead>
<tr>
<th>Descriptor</th>
<th>Representation</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>standard input (STDIN)</td>
</tr>
<tr>
<td>1</td>
<td>standard output (STDOUT)</td>
</tr>
<tr>
<td>2</td>
<td>standard error (STDERR)</td>
</tr>
</tbody>
</table>
<p>This is just my guess, but because redirecting standard output to a file is very common, the simple short form <code>&gt;</code> (for <code>1&gt;</code>) is very useful and more logical to allow than a short form for redirecting standard error (<code>2&gt;</code>).</p>
<p>Note that when using redirection, the <a href="https://wiki.bash-hackers.org/howto/redirection_tutorial#order_of_redirection_ie_file_2_1_vs_2_1_file">order of redirection</a> is important:</p>
<pre><code>&gt;/dev/null 2&gt;&amp;1
</code></pre>
<p>is not the same as</p>
<pre><code>2&gt;&amp;1 &gt;/dev/null
</code></pre>
<p>So we have to be careful. One could therefore argue then that the use of this short form of <code>&amp;&gt;</code> here in the <code>main</code> function is helpful because there's only one part to the construct, so you can't get it &quot;the wrong way round&quot;.</p>
<p>I recommend the wonderfully illustrated <a href="https://wiki.bash-hackers.org/howto/redirection_tutorial">Redirection Tutorial in the Bash Hackers Wiki</a> for lots more goodness on this subject.</p>
<p><a name="no-operation"></a></p>
<h3>The no operation command : (colon)</h3>
<p>The comment above the <code>cd</code> invocation sort of explains the last bit:</p>
<pre class="language-bash"><code class="language-bash"><span class="token comment"># '||:': Do nothing if 'cd' fails. We don't care.</span><br><span class="token builtin class-name">cd</span> <span class="token string">"<span class="token variable">${2<span class="token operator">:-</span>$1}</span>"</span> <span class="token operator">&amp;></span>/dev/null <span class="token operator">||</span><span class="token builtin class-name">:</span></code></pre>
<p>It's not unusual to see the logical operator for OR, i.e. <code>||</code>. What's interesting is that this operator is explained in the Bash manual in the context of <a href="https://www.gnu.org/software/bash/manual/html_node/Lists.html#Lists">lists</a> - as separators within such lists.</p>
<p>So this invocation in the <code>main</code> function is called an &quot;OR list&quot;, i.e. <code>command1 || command2</code> where <code>command2</code> is executed if and only if <code>command1</code> fails. What does &quot;fail&quot; mean? Well, return a non-zero exit status, basically.</p>
<p>So if the <code>cd</code> command fails, what gets executed as command2? Well that's the even more interesting part. It's <code>:</code>.</p>
<p>Yes, the colon is a <a href="https://www.gnu.org/software/bash/manual/html_node/Bourne-Shell-Builtins.html">shell builtin inherited from the Bourne shell (sh)</a> and is the &quot;no operation&quot; command (a bit like, say, <code>pass</code> in Python). In some ways it has a similar effect to what <code>true</code> does (i.e. nothing, successfully) but it's also different, in that it will expand arguments and perform redirections. For example, you can specify stuff after the colon to manipulate files if needed.</p>
<p>Read more on this no operation or &quot;null command&quot; in <a href="https://www.shell-tips.com/bash/null-command/">What is the Bash null command?</a>, and also take a look at <a href="https://github.com/dylanaraps/pash/blob/c61a24b981345be9e09af5e1d870a01fba6d8eac/pash#L176">this example</a>, from <code>pash</code>, <a href="https://github.com/dylanaraps/pash">a  password manager written in POSIX <code>sh</code></a> (from the same author), where <code>:</code> appears with &quot;side effects&quot;, using the <code>:=</code> parameter expansion to assign default values to a couple of variables:</p>
<pre class="language-bash"><code class="language-bash"><span class="token builtin class-name">:</span> <span class="token string">"<span class="token variable">${PASH_DIR<span class="token operator">:=</span>${XDG_DATA_HOME<span class="token operator">:=</span>$HOME<span class="token operator">/</span>.local<span class="token operator">/</span>share}</span>/pash}"</span></code></pre>
<p>We'll examine the use of <code>:=</code> later in this post when we come across it.</p>
<p>So now that we've looked through the interesting parts of this line, we can translate it to: &quot;<em>try to change directory to what was given in the second parameter when invoked, and failing that, the first parameter; don't show any errors or anything at all on the terminal, and if that fails generally, don't do anything</em>&quot;. Simple and minimal. A great start!</p>
<h2>Next lines - handling option parameters</h2>
<p>Following this first line we have those tests we saw briefly earlier, the ones that check for and act upon specific option parameters. Interestingly the availability of these option parameters is not documented, at least as far as I can see - either in the <a href="https://github.com/dylanaraps/fff/blob/5b90a8599cce3333672947438bb1718e1298e068/fff.1">man page</a> or in the GitHub repo in general.</p>
<p>Anyway, I like the way these action-on-condition lines are written, they're short, concise and are also reminiscent of the sorts of expressions one sees in Perl scripts too (or is it the other way around - after all, Perl was created as an amalgam (and more) of various shell scripting substrates).</p>
<p>Looking at the first instance, we see this:</p>
<pre class="language-bash"><code class="language-bash"><span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token variable">$1</span> <span class="token operator">==</span> <span class="token parameter variable">-v</span> <span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">{</span><br>    <span class="token builtin class-name">printf</span> <span class="token string">'%s\n'</span> <span class="token string">"fff 2.2"</span><br>    <span class="token builtin class-name">exit</span><br><span class="token punctuation">}</span></code></pre>
<p>Beyond the actual concise way this has been written, avoiding the wordy &quot;if ... then ... fi&quot; construct, there are a couple of things that are worth looking at.</p>
<p><a name="conditional-expression"></a></p>
<h3>Conditional expression</h3>
<p>Following the <code>if</code> of the standard construct, we have a command list, the exit code of which is checked to determine how to proceed. How this command list is expressed has changed over the years, as we've moved from <code>sh</code> to <code>bash</code> and had POSIX to think about too.</p>
<p>More traditionally the condition <code>$1 == -v</code> might have been introduced with <code>test</code>, or expressed within single square brackets, i.e. <code>[ $1 == -v ]</code>. The opening single square bracket is interesting in its own right, being a synonym for <code>test</code>. In fact, while <code>[</code> is built in to many shells (including <code>bash</code>), it's also an external command, as is <code>test</code>. In case you want to find out more, you may find this post interesting: <a href="https://qmacro.org/autodidactics/2020/08/21/open-square-bracket/">The open square bracket [ is an executable</a>.</p>
<p>These days one often sees the more modern version of double square brackets, as we see here. This is a construct also built into <code>bash</code> and allows for a richer set of expressions within. For example, the operator <code>=~</code>, which allows the use of a regular expression for matching, is not available within the <code>[ ... ]</code> construct but is available within <code>[[ ... ]]</code>. Moreover, there are different quoting rules; for example, in some cases, you can omit double quotes within some <code>[[ ... ]]</code>-enclosed conditions.</p>
<p>Here are a couple of helpful answers with more information, on the Unix and Linux Stack Exchange:</p>
<ul>
<li><a href="https://unix.stackexchange.com/questions/68694/when-is-double-quoting-necessary/68748#68748">When is double-quoting necessary</a></li>
<li><a href="https://unix.stackexchange.com/questions/32210/why-does-parameter-expansion-with-spaces-without-quotes-work-inside-double-brack/32227#32227">Why does parameter expansion with spaces without quotes work inside double brackets [[ but not inside single brackets [?</a></li>
</ul>
<p><a name="printf"></a></p>
<h3>Use of printf</h3>
<p>Why is <code>printf</code> used here, and not the arguably simpler <code>echo</code>? The main differences between the two are:</p>
<ul>
<li>by default, <code>echo</code> adds a newline character, <code>printf</code> does not</li>
<li><code>printf</code> allows for and centres around a format string</li>
</ul>
<p>There's some amazing background information on <a href="https://www.in-ulm.de/~mascheck/various/echo+printf/">echo(1) and printf(1)</a>, but for me the bottom line is that <code>printf</code> gives you more control over the output. Perhaps for those versed in programming languages where there's a similar format string focused <code>printf</code> function, using it feels more natural.</p>
<p>Throughout the entire <code>fff</code> script there's no use of <code>echo</code>, only <code>printf</code>; my guess is simply that <code>printf</code> is used here for consistency throughout. I also am guessing that the separation of the format string from any variable values allows for a consistency in expression - none of the uses of <code>printf</code> in <code>fff</code> have the format string in anything other than single quotes, meaning there's less to worry about in terms of variable expansions.</p>
<p>Before we leave this section, I think it's worth pointing out something minor but nonetheless interesting. I often have a <code>usage</code> function that emits instructions to standard out, and would be called in the situation where help was requested. I do like the way that the Unix philosophy is used even here; there's <a href="https://github.com/dylanaraps/fff/blob/5b90a8599cce3333672947438bb1718e1298e068/fff.1">man page content</a> as we saw earlier, so why not use that instead? This also emphasises the extremely short distance between script and interactive command line, with shell languages:</p>
<pre class="language-bash"><code class="language-bash"><span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token variable">$1</span> <span class="token operator">==</span> <span class="token parameter variable">-h</span> <span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">{</span><br>    <span class="token function">man</span> fff<br>    <span class="token builtin class-name">exit</span><br><span class="token punctuation">}</span></code></pre>
<h3>Link to fff.vim</h3>
<p>Finally, let's take a quick look at the third option parameter here, <code>-p</code>:</p>
<pre class="language-bash"><code class="language-bash"><span class="token comment"># Store file name in a file on open instead of using 'FFF_OPENER'.</span><br><span class="token comment"># Used in 'fff.vim'.</span><br><span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token variable">$1</span> <span class="token operator">==</span> <span class="token parameter variable">-p</span> <span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">{</span><br>    <span class="token assign-left variable">file_picker</span><span class="token operator">=</span><span class="token number">1</span><br><span class="token punctuation">}</span></code></pre>
<p>It looks like this is the one that caused the introduction of the <code>&quot;${2:-$1}&quot;</code> parameter expansion we examined earlier, when it was introduced with this commit: <a href="https://github.com/dylanaraps/fff/commit/7c2144abaaa012b1f61601dbcb326da482ec36e9">general: Added -p to store opened files in a file for use in fff.vim</a>. In addition to the comment here, the title of the commit sort of gives it away ... <code>-p</code> is for use from within the Vim plugin <a href="https://github.com/dylanaraps/fff.vim">fff.vim</a> which allows <code>fff</code> to be used as a file picker within the editor.</p>
<h3>No explicit variable declarations</h3>
<p>One last thing that catches my eye here; this is the first time we see a variable assignment. The odd thing (to me) is that nowhere in the script is the <code>file_picker</code> variable declared.</p>
<p>There is some usage of <code>declare</code> elsewhere in the script, so we'll leave that examination until then, except to notice that this undeclaredness is not something that <code>shellcheck</code> complains about. If you ask <code>shellcheck</code> to check the source to <code>fff</code>, and get it to explicitly exclude specific errors as it does in the <a href="https://github.com/dylanaraps/fff/blob/c7e9b75648900d77e016ffc6a9ef2b7e807e49cc/.travis.yml#L8">CI configuration</a> (none of them related to variable declaration):</p>
<pre class="language-bash"><code class="language-bash"><span class="token function">shellcheck</span> fff <span class="token parameter variable">-e</span> <span class="token number">2254</span> <span class="token parameter variable">-e</span> <span class="token number">2244</span> <span class="token parameter variable">-e</span> <span class="token number">1090</span> <span class="token parameter variable">-e</span> <span class="token number">1091</span></code></pre>
<p>then <code>shellcheck</code> ends calmly and quietly with no errors. Maybe my fervent desire to use <code>declare</code> and <code>local</code> liberally throughout my scripts is misguided?</p>
<h2>Setup section</h2>
<p>The section that follows the processing of options is about handling certain contexts.</p>
<h3>Bash version check</h3>
<p>The <a href="https://github.com/dylanaraps/fff/blob/5b90a8599cce3333672947438bb1718e1298e068/fff#L1106-L1107">first of which</a> is for where we're running a relatively modern version of Bash:</p>
<pre class="language-bash"><code class="language-bash"><span class="token variable"><span class="token punctuation">((</span>BASH_VERSINFO[<span class="token number">0</span>] <span class="token operator">></span> <span class="token number">3</span><span class="token punctuation">))</span></span> <span class="token operator">&amp;&amp;</span><br>    <span class="token assign-left variable">read_flags</span><span class="token operator">=</span><span class="token punctuation">(</span>-t <span class="token number">0.05</span><span class="token punctuation">)</span></code></pre>
<p>There's so much to unpack from this; let's start with the <code>BASH_VERSINFO</code> environment variable. What Bash environment variables are available, generally? Well, there's quite a few - getting the completion working for us with the Tab key, we see this:</p>
<pre class="language-bash"><code class="language-bash">$ <span class="token builtin class-name">echo</span> <span class="token environment constant">$BASH</span><span class="token operator">&lt;</span>tab<span class="token operator">></span><br><span class="token environment constant">$BASH</span>                      <span class="token environment constant">$BASH_ARGC</span>                 <span class="token variable">$BASH_COMMAND</span>              <span class="token environment constant">$BASH_SOURCE</span><br><span class="token environment constant">$BASHOPTS</span>                  <span class="token environment constant">$BASH_ARGV</span>                 <span class="token variable">$BASH_COMPLETION_VERSINFO</span>  <span class="token variable">$BASH_SUBSHELL</span><br><span class="token variable">$BASHPID</span>                   <span class="token variable">$BASH_ARGV0</span>                <span class="token environment constant">$BASH_LINENO</span>               <span class="token environment constant">$BASH_VERSINFO</span><br><span class="token environment constant">$BASH_ALIASES</span>              <span class="token environment constant">$BASH_CMDS</span>                 <span class="token environment constant">$BASH_REMATCH</span>              <span class="token environment constant">$BASH_VERSION</span></code></pre>
<p>There's <code>BASH_VERSION</code> which is a string like this:</p>
<pre><code>5.1.4(1)-release
</code></pre>
<p>But there's also <code>BASH_VERSINFO</code> which is an array containing the various pieces of that version string, plus a bit more too:</p>
<pre class="language-bash"><code class="language-bash">$ <span class="token keyword">for</span> <span class="token for-or-select variable">val</span> <span class="token keyword">in</span> <span class="token string">"<span class="token variable">${<span class="token environment constant">BASH_VERSINFO</span><span class="token punctuation">[</span>@<span class="token punctuation">]</span>}</span>"</span><span class="token punctuation">;</span> <span class="token keyword">do</span> <span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$val</span>"</span><span class="token punctuation">;</span> <span class="token keyword">done</span><br><span class="token number">5</span><br><span class="token number">1</span><br><span class="token number">4</span><br><span class="token number">1</span><br>release<br>x86_64-pc-linux-gnu</code></pre>
<p>I hadn't known of the existence of <code>BASH_VERSINFO</code> until now. Using an element of this array is a better approach than parsing out the value from the <code>BASH_VERSION</code> string.</p>
<p>Something else to unpack is the construct within which we find the reference to <code>BASH_VERSINFO</code> too. That's the <code>(( ... ))</code> construct, an <a href="https://wiki.bash-hackers.org/syntax/ccmd/arithmetic_eval">arithmetic evaluation</a> containing an <a href="https://www.gnu.org/software/bash/manual/html_node/Shell-Arithmetic.html">arithmetic expression</a>. I tend to think of these expressions as being in one of two categories:</p>
<ul>
<li>variable assignment, e.g. <code>(( answer = 40 + 2 ))</code></li>
<li>condition, e.g. <code>(( answer &lt; 50 ))</code></li>
</ul>
<p>There's a related construct called an <a href="https://www.gnu.org/software/bash/manual/html_node/Arithmetic-Expansion.html">arithmetic expansion</a> which follows the usual Bash meaning of &quot;expansion&quot;, whereby the evaluation of the arithmetic expression it contains is substituted as the result; the construct looks like this: <code>$(( expression ))</code>.</p>
<p>Anyway, here we have an arithmetic evaluation acting as a condition in a short form of the <code>if</code> construct. And what is executed if the condition is true, i.e. if the version of Bash is indeed greater than 3? Now <strong>that</strong> has had me scratching my head for a while. Not about <em>what</em> it is, but <em>why</em> Dylan used it.</p>
<p>This is what I'm talking about:</p>
<pre class="language-bash"><code class="language-bash"><span class="token assign-left variable">read_flags</span><span class="token operator">=</span><span class="token punctuation">(</span>-t <span class="token number">0.05</span><span class="token punctuation">)</span></code></pre>
<p>The <code>read_flags</code> variable is used later in this <code>main</code> function, in a call to <code>read</code>, like this:</p>
<pre class="language-bash"><code class="language-bash"><span class="token builtin class-name">read</span> <span class="token string">"<span class="token variable">${read_flags<span class="token punctuation">[</span>@<span class="token punctuation">]</span>}</span>"</span> <span class="token parameter variable">-srn</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> key <span class="token string">"<span class="token environment constant">$REPLY</span>"</span></code></pre>
<p>I thought it was quite unusual, or at least very deliberate, to have used an array <code>(-t 0.05)</code> instead of just a string <code>&quot;-t 0.05&quot;</code> here. Dylan <a href="https://github.com/dylanaraps/fff/commit/f0023f93fde103a0d69eea26b4c3f589bf68e824">used this directly in a single commit introducing the read_flags feature</a>, as if it was obvious that this use of an array was the right thing to do from the outset. From a pragmatic point of view, it was clearly the right thing to do, as using a string like this:</p>
<pre class="language-bash"><code class="language-bash"><span class="token assign-left variable">read_flags</span><span class="token operator">=</span><span class="token string">"-t 0.05"</span> <span class="token builtin class-name">read</span> <span class="token string">"<span class="token variable">$read_flags</span>"</span> <span class="token parameter variable">-srn</span> <span class="token number">1</span></code></pre>
<p>would have resulted in <code>read</code> complaining about the timeout (<code>-t</code>) value, like this:</p>
<pre><code>read:  0.05: invalid timeout specification
</code></pre>
<p>I had struggled a little with this, knowing it was related to the whitespace before the 0.05 timeout value, but couldn't quite figure it out myself. I <a href="https://unix.stackexchange.com/questions/667139/bashs-read-builtin-errors-on-a-string-based-timeout-option-specification-but-no">asked on the Unix &amp; Linux Stack Exchange</a> and got some wonderful answers and insights, thank you folks. I'd encourage you to read the question and the answers supplied for enlightenment, if you're interested.</p>
<p>A side effect of the enlightenment that came my way from this was the fact that in preparing the error message above, I realised that a simple string <em>could</em> have been used here, as long as it was <em>not</em> quoted in the invocation:</p>
<pre class="language-bash"><code class="language-bash"><span class="token assign-left variable">read_flags</span><span class="token operator">=</span><span class="token string">"-t 0.05"</span> <span class="token builtin class-name">read</span> <span class="token variable">$read_flags</span> <span class="token parameter variable">-srn</span> <span class="token number">1</span></code></pre>
<p>This works fine and <code>read</code> doesn't complain, because the shell is <a href="https://mywiki.wooledge.org/WordSplitting">word splitting</a> on whitespace and thus the rogue space between <code>-t</code> and <code>0.05</code> which was being passed to <code>read</code> is now consumed in the word splitting action. I'm so used to quoting variables because, since <a href="https://qmacro.org/2020/10/05/improving-my-shell-scripting">introducing <code>shellcheck</code> into my scripting flow</a> I'm constantly reminded to so by <a href="https://github.com/koalaman/shellcheck/wiki/SC2086">SC2086</a>. I guess there are (rare) cases where you <em>don't</em> want to avoid word splitting on the value of a variable.</p>
<h3>FFF settings check</h3>
<p>The next two checks are related to <code>fff</code> options, based on the values of the environment variables <code>FFF_LS_COLORS</code> and <code>FFF_HIDDEN</code>. Both exhibit nice examples of a particular type of <a href="https://www.gnu.org/software/bash/manual/html_node/Shell-Parameter-Expansion.html">parameter expansion</a>, one that we briefly noticed earlier in this post in the <code>pash</code> script.</p>
<p>This is what those checks look like:</p>
<pre class="language-bash"><code class="language-bash"><span class="token variable"><span class="token punctuation">((</span>${FFF_LS_COLORS<span class="token operator">:</span><span class="token operator">=</span><span class="token number">1</span>} <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">))</span></span> <span class="token operator">&amp;&amp;</span><br>    get_ls_colors<br><br><span class="token variable"><span class="token punctuation">((</span>${FFF_HIDDEN<span class="token operator">:</span><span class="token operator">=</span><span class="token number">0</span>} <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">))</span></span> <span class="token operator">&amp;&amp;</span><br>    <span class="token builtin class-name">shopt</span> <span class="token parameter variable">-s</span> dotglob</code></pre>
<p>The <code>:=</code> form of shell parameter expansion lets us assign a parameter a value if it doesn't have one. To quote the documentation for this <code>${parameter:=word}</code> form:</p>
<blockquote>
<p>If <em>parameter</em> is unset or null, the expansion of <em>word</em> is assigned to <em>parameter</em>. The value of <em>parameter</em> is then substituted. Positional parameters and special parameters may not be assigned to in this way.</p>
</blockquote>
<p>So this is basically a default assignment, before the actual comparison with <code>==</code>. Taking the first example, we can think of it as: &quot;If the <code>FFF_LS_COLORS</code> variable is unset or null, assign it the value of <code>1</code>. Now, is the value of <code>FFF_LS_COLORS</code> equal to <code>1</code>?&quot;</p>
<p>The second example is similar, except that the default value to assign to <code>FFF_HIDDEN</code>, before the actual comparison, is <code>0</code> not <code>1</code>.</p>
<p>This is a very succinct way of assigning default values, with an expression. In some ways the shape and action of <code>:=</code> reminds me of Perl's <code>||=</code>. Or is it the other way round?</p>
<p>While the <code>get_ls_colors</code> function is elsewhere in the <code>fff</code> script and we'll get to that another time, it's worth taking a quick look at what's executed if <code>FFF_HIDDEN</code> is <code>1</code>. The <a href="https://github.com/dylanaraps/fff/blob/5b90a8599cce3333672947438bb1718e1298e068/fff.1#L80-L82">relevant section of the man page</a> explains what this variable controls - whether hidden files are shown in the file manager or not. In fact, the explanation in the man page reflects the <code>:=0</code> part of the parameter expansion (i.e. the default value is <code>0</code>, as shown in the man page):</p>
<pre><code># Show/Hide hidden files on open.
# (On by default)
export FFF_HIDDEN=0
</code></pre>
<p>How is this showing or hiding of hidden files controlled? Through the use of the &quot;shopt&quot; (shell option) builtin. While asking for help on this with <code>shopt --help</code> will give you basic information -- such as how to set (with <code>-s</code>) or unset (with <code>-u</code>) the options -- it doesn't enumerate what the options are. For that I had to look at <a href="https://www.gnu.org/software/bash/manual/html_node/The-Shopt-Builtin.html">the shopt builtin</a> of the Bash reference manual. The <code>dotglob</code> option is described thus:</p>
<blockquote>
<p>If set, Bash includes filenames beginning with a '.' in the results of filename expansion. The filenames '.' and '..' must always be matched explicitly, even if dotglob is set.</p>
</blockquote>
<p>Pretty self explanatory and not unexpected; still, it was nice to be able to see a shell option in action.</p>
<p>In fact, there are other shell options in use a little bit further down in this <code>main</code> function, and they're explained in comments, too:</p>
<pre class="language-bash"><code class="language-bash"><span class="token comment"># 'nocaseglob': Glob case insensitively (Used for case insensitive search).</span><br><span class="token comment"># 'nullglob':   Don't expand non-matching globs to themselves.</span><br><span class="token builtin class-name">shopt</span> <span class="token parameter variable">-s</span> nocaseglob nullglob</code></pre>
<p>These are sensible options for a file manager, at least, they make sense to me. Incidentally, there are more glob-related shell options: <code>extglob</code>, <code>failglob</code>, <code>globasciiranges</code> and <code>globstar</code>.</p>
<h2>Almost ready to start</h2>
<p>At this point the options have been dealt with (and the trash and cache directories have been created); it's now time to set a few hooks to handle various signals, and then call various functions.</p>
<p><a name="signals"></a></p>
<h3>Trapping and handling signals</h3>
<p>This is done with the <code>trap</code> builtin, and there are <a href="https://github.com/dylanaraps/fff/blob/5b90a8599cce3333672947438bb1718e1298e068/fff#L1123-L1127">two instances of this</a>:</p>
<pre class="language-bash"><code class="language-bash"><span class="token comment"># Trap the exit signal (we need to reset the terminal to a useable state.)</span><br><span class="token builtin class-name">trap</span> <span class="token string">'reset_terminal'</span> EXIT<br><br><span class="token comment"># Trap the window resize signal (handle window resize events).</span><br><span class="token builtin class-name">trap</span> <span class="token string">'get_term_size; redraw'</span> WINCH</code></pre>
<p>Looking at the <a href="https://tldp.org/LDP/Bash-Beginners-Guide/html/sect_12_02.html">Bash Beginners Guide section on traps</a> we can see that the <code>trap</code> pattern is:</p>
<pre><code>trap [COMMANDS] [SIGNALS]
</code></pre>
<p>Looking at the first instance, while it's common for specific and individual SIGNALS to begin &quot;SIG&quot;, there's also a general &quot;EXIT&quot; value that can be used; this triggers both when the shell script terminates of its own accord, or is terminated by the user with CTRL-C.</p>
<p>Running this simple script <code>terminator</code> and allowing it to exit, and then running it and CTRL-C'ing it after a second, demonstrates this:</p>
<pre class="language-bash"><code class="language-bash"><span class="token builtin class-name">trap</span> <span class="token string">'echo EXITING...'</span> EXIT<br><span class="token builtin class-name">echo</span> Press CTRL-C or <span class="token function">wait</span> <span class="token number">5</span> seconds to <span class="token builtin class-name">exit</span><br><span class="token function">sleep</span> <span class="token number">5</span></code></pre>
<p>Here's what happens:</p>
<pre class="language-bash"><code class="language-bash">$ <span class="token function">bash</span> terminator<br>Press CTRL-C or <span class="token function">wait</span> <span class="token number">5</span> seconds to <span class="token builtin class-name">exit</span><br>EXITING<span class="token punctuation">..</span>.<br>$ <span class="token function">bash</span> terminator<br>Press CTRL-C or <span class="token function">wait</span> <span class="token number">5</span> seconds to <span class="token builtin class-name">exit</span><br>^CEXITING<span class="token punctuation">..</span>.</code></pre>
<p>It took me a bit longer than I thought to find definitive documentation on the signal in the second instance - <code>SIGWINCH</code> (or <code>WINCH</code>). Rather than being Bash specific, this is of course related to the interaction between processes and terminals in a Unix context. The <a href="https://en.wikipedia.org/wiki/Signal_(IPC)">Signal (IPC) Wikipedia page</a> has a wealth of information, including a reference to <code>SIGWINCH</code> in the list of POSIX signals. To quote:</p>
<blockquote>
<p>The SIGWINCH signal is sent to a process when its controlling terminal changes its size (a window change).</p>
</blockquote>
<p>The footnote reference associated with this leads to a <a href="https://www.austingroupbugs.net/view.php?id=1151">recent (2017) proposal</a> which suggests why this signal is less widespread in coverage and use. While I'm aware of some of the more common signals (such as <code>SIGCHLD</code>, <code>SIGINT</code>, <code>SIGKILL</code> and so on) I'd never heard of <code>SIGWINCH</code> until now.</p>
<p>The two functions that are called when this signal is trapped, <code>get_term_size</code> and <code>redraw</code>, make sense in the context of what this &quot;window change&quot; signal represents.</p>
<h2>Main loop</h2>
<p>The final part of the <code>main</code> script, after calling some functions to set things up, is what Dylan refers to as a &quot;Vintage infinite loop&quot;. It's <a href="https://github.com/dylanaraps/fff/blob/5b90a8599cce3333672947438bb1718e1298e068/fff#L1136-L1142">quite the eyecatcher</a>:</p>
<pre class="language-bash"><code class="language-bash"><span class="token comment"># Vintage infinite loop.</span><br><span class="token keyword">for</span> <span class="token variable"><span class="token punctuation">((</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">))</span></span><span class="token punctuation">;</span> <span class="token punctuation">{</span><br>    <span class="token builtin class-name">read</span> <span class="token string">"<span class="token variable">${read_flags<span class="token punctuation">[</span>@<span class="token punctuation">]</span>}</span>"</span> <span class="token parameter variable">-srn</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> key <span class="token string">"<span class="token environment constant">$REPLY</span>"</span><br><br>    <span class="token comment"># Exit if there is no longer a terminal attached.</span><br>    <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token parameter variable">-t</span> <span class="token number">1</span> <span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token builtin class-name">exit</span> <span class="token number">1</span><br><span class="token punctuation">}</span></code></pre>
<p>Why not simply <code>while true; do ...; done</code>? I can only summise this is something playful, an enjoyment of the relationship that Bash has (or doesn't have, mostly) to the C programming language, where this so-called <a href="https://www.cyberciti.biz/faq/bash-for-loop/#C_style_for_loop">three-expression for loop</a> is widely used, with an initialiser, a loop continuation condition and a modifier that are separated by <code>;</code> characters. Common in C and related languages, but not so much in Bash, I would have thought.</p>
<p>What has got me thinking, however, is why and how does <code>((;;))</code> even work?</p>
<p>It's definitely a lesser used construct for loops in Bash; again, I had to search a little deeper to find official references to it. In <a href="https://tldp.org/LDP/abs/html/loops1.html">Advanced Bash-Scripting Guide: Chapter 11. Loops and Branches</a>, we see &quot;Example 11-13. A C-style for loop&quot;:</p>
<pre class="language-bash"><code class="language-bash"><span class="token assign-left variable">LIMIT</span><span class="token operator">=</span><span class="token number">10</span><br><br><span class="token keyword">for</span> <span class="token variable"><span class="token punctuation">((</span>a<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> a <span class="token operator">&lt;=</span> LIMIT <span class="token punctuation">;</span> a<span class="token operator">++</span><span class="token punctuation">))</span></span>  <span class="token comment"># Double parentheses, and naked "LIMIT"</span><br><span class="token keyword">do</span><br>  <span class="token builtin class-name">echo</span> <span class="token parameter variable">-n</span> <span class="token string">"<span class="token variable">$a</span> "</span><br><span class="token keyword">done</span>                           <span class="token comment"># A construct borrowed from ksh93.</span></code></pre>
<p>I'm not sure if the reference to the Korn shell (ksh93)* in the comment relates to the entire construct, or particularly to the triple semicolon-separated expression within the arithmetic evaluation <code>(( ... ))</code>. In any case, while it's clear what this is and how it works, it remains to me somewhat of a mystery as to why the particular instance used in the <code>main</code> function here works, where all three expressions are null <code>((;;))</code>.</p>
<p>*Since listening to a very enjoyable <a href="https://podcast.curiefense.io/">Committing to Cloud Native podcast</a> episode 22 recently: <a href="https://podcast.curiefense.io/22">Thoughts on Bash Becoming Interplanetary and More with Brian J. Fox</a> I've become more aware of the relationship between Brian Fox (Bash's creator) and David Korn (ksh's creator), and the features and style of their respective shells, that they were striving to finalise in 1989 as replacements for Stephen Bourne's <code>sh</code>.</p>
<p>I am guessing first that the <code>for</code> knows to look for truthiness in the second expression (the one in between the two semicolons). That's a bit vague, I know. I'm also guessing that an empty value here is going to be &quot;truthy&quot;, in that, according to the <a href="https://wiki.bash-hackers.org/syntax/arith_expr#truth">Bash Hackers Wiki section on truth</a>, anything that's not 0 is true. That seems more likely, but I'd love to find out more about this.</p>
<p>In any case, it's not always going to be an infinite loop; there's a <a href="https://www.gnu.org/software/bash/manual/html_node/Bash-Conditional-Expressions.html">conditional expression</a> within the loop to test whether a terminal is (still) attached. This is the <code>[[ -t 1 ]]</code> part. Here's how the <code>-t</code> test is described:</p>
<blockquote>
<p>True if file descriptor fd is open and refers to a terminal.</p>
</blockquote>
<p>In a happy circular twist of fate, we're back almost to where we started on this journey through the <code>main</code> function. File descriptor 1 refers to STDOUT, i.e. standard output. If <code>fff</code> (still) has its STDOUT connected to a terminal, then the loop continues. If not, it's terminated (<code>|| exit</code>).</p>
<p>Is this all that the loop does? Well, the key part (if you forgive the pun) is the call to <code>key</code> here:</p>
<pre class="language-bash"><code class="language-bash"><span class="token builtin class-name">read</span> <span class="token string">"<span class="token variable">${read_flags<span class="token punctuation">[</span>@<span class="token punctuation">]</span>}</span>"</span> <span class="token parameter variable">-srn</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> key <span class="token string">"<span class="token variable">$reply</span>"</span></code></pre>
<p>The <code>key</code> function handles keypresses, and acts accordingly. The core action part of <code>fff</code>, effectively. And it's only called if <code>read</code> successfully receives a keypress on that occasion. Nice!</p>
<p>So that's it for the <code>main</code> function. Directory startup, option parameter handling, setup and initial calls, and the main loop. Such a lot to learn in so few lines.</p>
<hr>
<p>If you're still reading, thank you for indulging me, and I hope you've enjoyed the journey as much as I have. There's plenty more to learn from this script; let me know if you found it useful and whether I should venture further.</p>
<p><strong>Update: You may like to know that there's now a second part: <a href="https://qmacro.org/autodidactics/2021/11/07/exploring-fff-part-2-get-ls-colors/">Exploring fff part 2 - get_ls_colors</a>.</strong></p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Learning by rewriting - bash, jq and fzf details</title>
      <link href="https://qmacro.org/blog/posts/2021/08/26/learning-by-rewriting-bash-jq-and-fzf-details/"/>
      <updated>2021-08-26T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2021/08/26/learning-by-rewriting-bash-jq-and-fzf-details/</id>
      <content type="html">
        <![CDATA[
      <p><em>One of the ways I learn is by reading and sometimes rewriting other people's scripts. Here I learn more about <code>jq</code> by rewriting a friend's password CLI script.</em></p>
<p>My friend <a href="https://twitter.com/ceedee666">Christian Drumm</a> published a nice post this week on <a href="https://www.drumm.sh/blog/bw-cli">Adapting the Bitwarden CLI with Shell Scripting</a>, where he shared a script he wrote to conveniently grab passwords into his paste buffer at the command line.</p>
<p>It's a good read and contains some nice CLI animations too. In the summary, Christian remarks that there may be some areas for improvement. I don't know about that, and I'm certainly no &quot;shell scripting magician&quot; but I thought I'd have a go at modifying the script to perhaps introduce some further Bash shell, <code>jq</code> and <code>fzf</code> features to dig into.</p>
<h2>Emulating the CLI</h2>
<p>I don't have Bitwarden, so I created a quick &quot;database&quot; of login information that took the form of what the Bitwarden CLI <code>bw</code> produced. First, then, is the contents of the <code>items.json</code> file:</p>
<pre class="language-json"><code class="language-json"><span class="token punctuation">[</span><br>  <span class="token punctuation">{</span> <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"E45 S4HANA 2020 Sandbox"</span><span class="token punctuation">,</span> <span class="token property">"login"</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token property">"username"</span><span class="token operator">:</span> <span class="token string">"e45user"</span><span class="token punctuation">,</span> <span class="token property">"password"</span><span class="token operator">:</span> <span class="token string">"sappass"</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span><br>  <span class="token punctuation">{</span> <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"space user"</span><span class="token punctuation">,</span> <span class="token property">"login"</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token property">"username"</span><span class="token operator">:</span> <span class="token string">"spaceuser"</span><span class="token punctuation">,</span> <span class="token property">"password"</span><span class="token operator">:</span> <span class="token string">"in space"</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span><br>  <span class="token punctuation">{</span> <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"foo"</span><span class="token punctuation">,</span> <span class="token property">"login"</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token property">"username"</span><span class="token operator">:</span> <span class="token string">"foouser"</span><span class="token punctuation">,</span> <span class="token property">"password"</span><span class="token operator">:</span> <span class="token string">"foopass"</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span><br>  <span class="token punctuation">{</span> <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"bar"</span><span class="token punctuation">,</span> <span class="token property">"login"</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token property">"username"</span><span class="token operator">:</span> <span class="token string">"baruser"</span><span class="token punctuation">,</span> <span class="token property">"password"</span><span class="token operator">:</span> <span class="token string">"sekrit!"</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span><br>  <span class="token punctuation">{</span> <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"baz"</span><span class="token punctuation">,</span> <span class="token property">"login"</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token property">"username"</span><span class="token operator">:</span> <span class="token string">"bazuser"</span><span class="token punctuation">,</span> <span class="token property">"password"</span><span class="token operator">:</span> <span class="token string">"hunter2"</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><br><span class="token punctuation">]</span></code></pre>
<p>Then I needed to emulate the <code>bw list items --search</code> command that Christian uses to search for an entry. As far as I can tell, it returns an array, regardless of whether a single entry is found, or more than one. I'm also assuming it returns an empty array if nothing is found, but that's less important here as you'll see.</p>
<p>I did this by creating a script <code>bw-list-items-search</code> which looks like this:</p>
<pre><code>#!/usr/bin/env bash

# Emulates 'bw list items --search $1'

jq --arg name &quot;$1&quot; 'map(select(.name | test($name; &quot;i&quot;)))' ./items.json
</code></pre>
<p>Perhaps unironically I'm using <code>jq</code> to emulate the behaviour, because the data being searched is a JSON array (in <code>items.json</code>). I map over the entries in the array, and use the <a href="https://stedolan.github.io/jq/manual/#select(boolean_expression)"><code>select</code> function</a> to return only those entries that satisfy the boolean expression passed to it:</p>
<pre class="language-jq"><code class="language-jq"><span class="token punctuation">.</span>name <span class="token operator pipe">|</span> <span class="token c-style-function function">test</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">;</span> <span class="token string">"i"</span><span class="token punctuation">)</span></code></pre>
<p>This pipes the value of the <code>name</code> property (e.g. &quot;E45 S4HANA 2020 Sandbox&quot;, &quot;space user&quot;, &quot;foo&quot; etc) into the <a href="https://stedolan.github.io/jq/manual/#test(val),test(regex;flags)"><code>test</code> function</a> which can take a regular expression, along with one or more flags if required.</p>
<p>Here, we're just taking the value passed into the script, via the argument that was passed to the <code>jq</code> invocation with <code>--arg name &quot;$1&quot;</code>. This is then available within the <code>jq</code> script as the binding <code>$name</code>. The second parameter supplied here, <code>&quot;i&quot;</code>, is the &quot;case insensitive match&quot; flag.</p>
<p>The result means that I can emulate what I think <code>bw list items --search</code> does:</p>
<pre class="language-shell"><code class="language-shell"><span class="token punctuation">;</span> ./bw-list-items-search e45<br><span class="token punctuation">[</span><br>  <span class="token punctuation">{</span><br>    <span class="token string">"name"</span><span class="token builtin class-name">:</span> <span class="token string">"E45 S4HANA 2020 Sandbox"</span>,<br>    <span class="token string">"login"</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span><br>      <span class="token string">"username"</span><span class="token builtin class-name">:</span> <span class="token string">"e45user"</span>,<br>      <span class="token string">"password"</span><span class="token builtin class-name">:</span> <span class="token string">"sappass"</span><br>    <span class="token punctuation">}</span><br>  <span class="token punctuation">}</span><br><span class="token punctuation">]</span></code></pre>
<p>Here's an example of where more than one result is found:</p>
<pre class="language-shell"><code class="language-shell"><span class="token punctuation">;</span> ./bw-list-items-search ba<br><span class="token punctuation">[</span><br>  <span class="token punctuation">{</span><br>    <span class="token string">"name"</span><span class="token builtin class-name">:</span> <span class="token string">"bar"</span>,<br>    <span class="token string">"login"</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span><br>      <span class="token string">"username"</span><span class="token builtin class-name">:</span> <span class="token string">"baruser"</span>,<br>      <span class="token string">"password"</span><span class="token builtin class-name">:</span> <span class="token string">"sekrit!"</span><br>    <span class="token punctuation">}</span><br>  <span class="token punctuation">}</span>,<br>  <span class="token punctuation">{</span><br>    <span class="token string">"name"</span><span class="token builtin class-name">:</span> <span class="token string">"baz"</span>,<br>    <span class="token string">"login"</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span><br>      <span class="token string">"username"</span><span class="token builtin class-name">:</span> <span class="token string">"bazuser"</span>,<br>      <span class="token string">"password"</span><span class="token builtin class-name">:</span> <span class="token string">"hunter2"</span><br>    <span class="token punctuation">}</span><br>  <span class="token punctuation">}</span><br><span class="token punctuation">]</span></code></pre>
<h2>The main script</h2>
<p>Now I could turn my attention to the main script. Here it is in its entirety; I'll describe it section by section.</p>
<pre><code>#!/usr/bin/env bash

set -e

pbcopy() { true; }

copy_uname_and_passwd() {

  local login=$1

  echo &quot;&gt; Copying Username&quot;
  jq -r '.username' &lt;&lt;&lt; &quot;$login&quot;

  echo &quot;&gt; Press any key to copy password...&quot;
  read
  echo &quot;&gt; Copying Password&quot;
  jq -r '.password' &lt;&lt;&lt; &quot;$login&quot;

}

main() {

  local searchterm=$1
  local selection logins
  logins=&quot;$(./bw-list-items-search $searchterm)&quot;

  selection=&quot;$(jq -r '.[] | &quot;\(.name)\t\(.login)&quot;' &lt;&lt;&lt; &quot;$logins&quot; \
    | fzf --reverse --with-nth=1 --delimiter=&quot;\t&quot; --select-1 --exit-0
  )&quot;

  [[ -n $selection ]] \
    &amp;&amp; echo &quot;Name: ${selection%%$'\t'*}&quot; \
    &amp;&amp; copy_uname_and_passwd &quot;${selection#*$'\t'}&quot;

}

main &quot;$@&quot;
</code></pre>
<h3>Overall structure and the main function</h3>
<p>For the last few months, my preference for laying out non-trivial scripts has been to use the approach that one often finds in other languages, and that is to define a main function, and right at the bottom, call that to start things off.</p>
<p>This call is <code>main &quot;$@&quot;</code> which just passes on any and all values that were specified in the script's invocation - they're available in the special parameter <code>$@</code> which &quot;expands to the positional parameters, starting from one&quot; (see <a href="https://tiswww.case.edu/php/chet/bash/bashref.html#Special-Parameters">Special Parameters</a>).</p>
<h3>The main function</h3>
<p>I like to qualify my variables, so use <code>local</code> here, which is a synonym for <code>declare</code>. I wrote about this in <a href="https://qmacro.org/autodidactics/2020/10/08/understanding-declare/">Understanding declare</a> in case you want to dig in further.</p>
<p>Because I have my emulator earlier, I can make almost the same-shaped call to the Bitwarden CLI, passing what was specified in <code>searchterm</code> and retrieving the results (a JSON array) in the <code>logins</code> variable.</p>
<p>Next comes perhaps the most involved part of the script, which results in a value being stored in the <code>selection</code> variable (if nothing is selected or available, then this will be empty, which we'll deal with too).</p>
<p><strong>Determining the selection part 1 - with <code>jq</code></strong></p>
<p>The value for <code>selection</code> is determined from a combination of <code>jq</code> and <code>fzf</code>, which are also the two commands that Christian uses.</p>
<p>This is the invocation:</p>
<pre><code>jq -r '.[] | &quot;\(.name)\t\(.login)&quot;' &lt;&lt;&lt; &quot;$logins&quot; \
    | fzf --reverse --with-nth=1 --delimiter=&quot;\t&quot; --select-1 --exit-0
</code></pre>
<p>The first thing to notice is that I'm using <code>&lt;&lt;&lt;</code> which is a <a href="https://tldp.org/LDP/abs/html/x17837.html">here string</a> - it's like a <a href="https://tldp.org/LDP/abs/html/here-docs.html">here document</a>, but it's just the variable that gets expanded and fed to the STDIN of the command. This means that whatever is in <code>logins</code> gets expanded and passed to the STDIN of <code>jq</code>.</p>
<p>Given the emulation of the Bitwarden CLI above, a value that might be in <code>logins</code> looks like this:</p>
<pre class="language-json"><code class="language-json"><span class="token punctuation">[</span><br>  <span class="token punctuation">{</span><br>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"bar"</span><span class="token punctuation">,</span><br>    <span class="token property">"login"</span><span class="token operator">:</span> <span class="token punctuation">{</span><br>      <span class="token property">"username"</span><span class="token operator">:</span> <span class="token string">"baruser"</span><span class="token punctuation">,</span><br>      <span class="token property">"password"</span><span class="token operator">:</span> <span class="token string">"sekrit!"</span><br>    <span class="token punctuation">}</span><br>  <span class="token punctuation">}</span><span class="token punctuation">,</span><br>  <span class="token punctuation">{</span><br>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"baz"</span><span class="token punctuation">,</span><br>    <span class="token property">"login"</span><span class="token operator">:</span> <span class="token punctuation">{</span><br>      <span class="token property">"username"</span><span class="token operator">:</span> <span class="token string">"bazuser"</span><span class="token punctuation">,</span><br>      <span class="token property">"password"</span><span class="token operator">:</span> <span class="token string">"hunter2"</span><br>    <span class="token punctuation">}</span><br>  <span class="token punctuation">}</span><br><span class="token punctuation">]</span></code></pre>
<p>Let's look at the <code>jq</code> script now, which is this:</p>
<pre class="language-jq"><code class="language-jq"><span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator pipe">|</span> <span class="token string">"<span class="token interpolation"><span class="token punctuation">\(</span><span class="token content"><span class="token punctuation">.</span>name</span><span class="token punctuation">)</span></span>\t<span class="token interpolation"><span class="token punctuation">\(</span><span class="token content"><span class="token punctuation">.</span>login</span><span class="token punctuation">)</span></span>"</span></code></pre>
<p>This iterates over the items passed in (i.e. it will process the first object containing the details for &quot;bar&quot; and then the second object containing the details for &quot;baz&quot;) and pipes them into the creation of a literal string (enclosed in double quotes). This literal string is two values separated with a tab character (<code>\t</code>) ... but those values are the values of the respective properties, via <code>jq</code>'s <a href="https://stedolan.github.io/jq/manual/#Stringinterpolation-(foo">string interpolation</a>).</p>
<p>It's worth noting that the value of <code>.name</code> is a scalar, e.g. &quot;bar&quot;, but the value of <code>.login</code> is actually an object:</p>
<pre class="language-json"><code class="language-json"><span class="token property">"login"</span><span class="token operator">:</span> <span class="token punctuation">{</span><br>  <span class="token property">"username"</span><span class="token operator">:</span> <span class="token string">"baruser"</span><span class="token punctuation">,</span><br>  <span class="token property">"password"</span><span class="token operator">:</span> <span class="token string">"sekrit!"</span><br><span class="token punctuation">}</span></code></pre>
<p>but this gets turned into a string. If &quot;bar&quot; is selected, then the value in <code>selection</code> will be:</p>
<pre><code>bar     {&quot;username&quot;:&quot;baruser&quot;,&quot;password&quot;:&quot;sekrit!&quot;}
</code></pre>
<p>where the whitespace between the name &quot;bar&quot; and the rest of the line is a tab character.</p>
<p>So given the two values (for &quot;bar&quot; and &quot;baz&quot;) above which would have been extracted for the search string &quot;ba&quot;, the following would be produced by the <code>jq</code> invocation:</p>
<pre><code>bar     {&quot;username&quot;:&quot;baruser&quot;,&quot;password&quot;:&quot;sekrit!&quot;}
baz     {&quot;username&quot;:&quot;bazuser&quot;,&quot;password&quot;:&quot;hunter2&quot;}
</code></pre>
<p>Note that the <code>-r</code> option is supplied to <code>jq</code> to produce this raw output.</p>
<p><strong>Determining the selection part 2 - with <code>fzf</code></strong></p>
<p>This is then passed to <code>fzf</code>, which is passed a few more options than we saw with Christian's script. Taking them one at a time:</p>
<ul>
<li><code>--reverse</code> - this is the same as Christian and is a layout option that causes the selection to be displayed from the top of the screen.</li>
<li><code>--delimiter=&quot;\t&quot;</code> - this tells <code>fzf</code> how the input fields are delimited, and as we're using a tab character to separate the name and login information, we need to tell <code>fzf</code> (using just spaces would give us issues with spaces in the values of the names).</li>
<li><code>--with-nth=1</code> - this says &quot;only use the value of the first field in the selection list&quot;, where the fields are delimited as instructed (with the tab character here). This means that only the value of the &quot;name&quot; is presented, not the &quot;login&quot; (username and password) details.</li>
<li><code>--select-1</code> - this tells <code>fzf</code> that if there's only one item in the selection anyway, just automatically select it and don't show any selection dialogue.</li>
<li><code>--exit-0</code> - this tells <code>fzf</code> to just end if there's nothing to select from at all (which would be the case if the invocation to <code>bw list items --search</code> returned nothing, i.e. an empty array).</li>
</ul>
<p>Here's what the selection looks like if no search string is specified, i.e. it's a presentation of all the possible names:</p>
<p><img src="/images/2021/08/fzf-name-selection.png" alt="selection in fzf"></p>
<p>Once we're done with determining the selection, we check to see that there is actually a value in <code>selection</code> and proceed to first show the name and then to call the <code>copy_uname_and_passwd</code> function.</p>
<p><strong>Displaying the name and extracting the login details</strong></p>
<p>It's worth highlighting that while <code>fzf</code> only <em>presents</em> the names in the selection list, it will <em>return</em> the entire line that was selected, which is what we want. In other words, given the selection in the screenshot above, if the name &quot;E45 S4HANA 2020 Sandbox&quot; is chosen, then <code>fzf</code> will emit this to STDOUT:</p>
<pre><code>E45 S4HANA 2020 Sandbox {&quot;username&quot;:&quot;e45user&quot;,&quot;password&quot;:&quot;sappass&quot;}
</code></pre>
<p>(again, remember that there's a tab character between the name &quot;E45 S4HANA 2020 Sandbox&quot; and the JSON object with the login details).</p>
<p>So to just print the name, we can use <a href="https://www.gnu.org/software/bash/manual/html_node/Shell-Parameter-Expansion.html">shell parameter expansion</a> to pick out the part we want. The <code>${parameter%%word}</code> form is appropriate here; this will remove anything with longest matching pattern first.</p>
<p>In other words, the expression <code>${selection%%$'\t'*}</code> means:</p>
<ul>
<li>take the value of the <code>selection</code> variable</li>
<li>look at the <em>trailing</em> portion of that value</li>
<li>find the <em>longest</em> match of the pattern <code>$'\t'*</code></li>
<li>and remove it</li>
</ul>
<p>The <code>$'...'</code> way of quoting a string allows us to use special characters such as tab (<code>\t</code>) safely. The <code>*</code> means &quot;anything&quot;. So the pattern is &quot;a tab character and whatever follows it, if anything&quot;.</p>
<p>So if the value of <code>selection</code> is:</p>
<pre><code>E45 S4HANA 2020 Sandbox {&quot;username&quot;:&quot;e45user&quot;,&quot;password&quot;:&quot;sappass&quot;}
</code></pre>
<p>then this expression will yield:</p>
<pre><code>E45 S4HANA 2020 Sandbox
</code></pre>
<p>The expression in the next line, where we invoke the <code>copy_uname_and_passwd</code> function, is <code>${selection#*$'\t'}</code> which is similar. It means:</p>
<ul>
<li>take the value of the <code>selection</code> variable</li>
<li>look at the <em>beginning</em> portion of that value</li>
<li>find the <em>shortest</em> match of the pattern <code>*$'\t'</code></li>
<li>and remove it</li>
</ul>
<p>This pattern, then, is &quot;anything, up to and including a tab character&quot;.</p>
<p>Given the same value as above, this expression will yield:</p>
<pre><code>{&quot;username&quot;:&quot;e45user&quot;,&quot;password&quot;:&quot;sappass&quot;}
</code></pre>
<h3>The copy_uname_and_passwd function</h3>
<p>This is very similar to Christian's original script, except that we can use a &quot;here string&quot; again to pass the value of the <code>login</code> variable to <code>jq</code> each time. Given what we know from the <code>main</code> function, this value will be something like this:</p>
<pre><code>{&quot;username&quot;:&quot;e45user&quot;,&quot;password&quot;:&quot;sappass&quot;}
</code></pre>
<p>which makes for a simpler extraction of the values we want (from the <code>username</code> and <code>password</code> properties).</p>
<h3>The pbcopy function</h3>
<p>While my main machine is a macOS device, I'm working in a (Linux based) dev container and therefore don't have access right now to the <code>pbcopy</code> command. As I wanted to leave calls to it in the script to reflect where it originally was, this function that does nothing will do the trick.</p>
<h2>Wrapping up</h2>
<p>There's always more to learn about Bash scripting and the tools we have at our disposal. And to use one of the sayings from the wonderful Perl community - TMOWTDI - &quot;there's more than one way to do it&quot;. I'm sure you can come up with some alternatives too, and some improvements on what I've written.</p>
<p>Keep on learning and sharing.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Today&#39;s TIL trio</title>
      <link href="https://qmacro.org/blog/posts/2021/08/22/today&#39;s-til-trio/"/>
      <updated>2021-08-22T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2021/08/22/today&#39;s-til-trio/</id>
      <content type="html">
        <![CDATA[
      <p><em>Here are three mini TILs from today, on minimum JSON, using <code>tee</code>, and <code>netstat</code> options.</em></p>
<p>I enjoy finding time to catch up on reading blog posts and watching videos in my queue, but the time is often tinged with a slight uneasy feeling that I'm seeing things in passing which are not part of what the main content is about, and I'm not acknowledging or capturing that knowledge.</p>
<p>Here are three very small things I learned (or was reminded of) in passing today, and I thought I'd share them.</p>
<h2>A simple double-quoted string is valid JSON</h2>
<p>Often when using <a href="https://stedolan.github.io/jq/"><code>jq</code></a>, the command line JSON processor, what I'm looking for is a scalar string, when I just want to extract the value of a property.</p>
<pre class="language-shell"><code class="language-shell">$ <span class="token builtin class-name">echo</span> <span class="token string">'{"foo":"bar"}'</span> <span class="token operator">|</span> jq .foo<br><span class="token string">"bar"</span></code></pre>
<p>I always vaguely thought that this was <code>jq</code> just doing what I wanted and giving me the value, which was nice. But it was actually doing more than that. The <a href="https://stedolan.github.io/jq/manual/#Invokingjq">Invoking jq</a> section of <code>jq</code>'s manual has this (emphasis mine):</p>
<blockquote>
<p>jq filters run on a stream of JSON data. The input to jq is parsed as a sequence of whitespace-separated JSON values which are passed through the provided filter one at a time. <strong>The output(s) of the filter are written to standard out, again as a sequence of whitespace-separated JSON data.</strong></p>
</blockquote>
<p>What <code>jq</code> aims to do is not only read JSON, but <em>write JSON to STDOUT</em>, unless otherwise directed.</p>
<p>In the above invocation (<code>jq .foo</code>) I didn't direct <code>jq</code> to do anything special, so it wrote <code>&quot;bar&quot;</code> on STDOUT.</p>
<p>And that's appropriate, because <code>&quot;bar&quot;</code> is completely valid JSON.</p>
<p>I'd vaguely thought that JSON data was only valid in the context of a structure (a map or array) but had never looked into it properly. But my explorations of what <code>jq</code> can do led me down the familiar path of wonder, whereupon I realised that, according to the most up to date specification of JSON, <a href="http://www.ietf.org/rfc/rfc7159.txt">RFC 7159</a>, a JSON text (this is as good a word as any to use as a name for a lump of JSON) &quot;is a serialised value&quot;. This <a href="https://stackoverflow.com/questions/7487869/is-this-simple-string-considered-valid-json/7487892#7487892">Stack Overflow answer</a> is a good summary of the situation.</p>
<p>So when <code>jq</code> gives you just a simple double-quoted string as the output for your incantation, it's giving you JSON. Which is what it is designed to do.</p>
<p>I realised this when watching <a href="https://www.youtube.com/watch?v=MvI6Z85EgVo">David Hand - &quot;Non-trivial jq&quot;</a>.</p>
<h2>I should use tee more</h2>
<p>It's easy to overlook this perhaps unloved and semi-forgotten Unix command. According to the (very brief!) man page, <code>tee</code> is a &quot;pipe fitting&quot;, which:</p>
<blockquote>
<p>copies STDIN to STDOUT, making a copy in zero or more files.</p>
</blockquote>
<p>The <code>tee</code> command crops up in more places than you think; it appears regularly in installation commands. Take this example* from the <a href="https://docs.docker.com/engine/install/debian/">installation instructions for Docker on Debian Linux</a>:</p>
<pre class="language-shell"><code class="language-shell">$ <span class="token builtin class-name">echo</span> <span class="token string">"deb [arch=amd64 ...] https://.../linux/debian buster stable"</span> <span class="token punctuation">\</span><br>  <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token function">tee</span> /etc/apt/sources.list.d/docker.list <span class="token operator">></span> /dev/null</code></pre>
<p>*I've modified the actual command that appears in the <a href="https://docs.docker.com/engine/install/debian/#set-up-the-repository">Set up the repository</a> section for readability.</p>
<p>Here's another example that appeared in the same video I mentioned earlier:</p>
<pre class="language-shell"><code class="language-shell">$ <span class="token function">curl</span> http://some.json/api <span class="token operator">|</span> <span class="token function">tee</span> example1.json</code></pre>
<p>In both cases, <code>tee</code> is used to show the operator what text is flowing into the file. The text (that string starting &quot;deb&quot; in the first example, and the JSON resource retrieved with <code>curl</code> in the second example) is shown on STDOUT ... and also written to the file specified (those being <code>/etc/apt/sources.list.d/docker.list</code> and <code>example1.json</code> respectively in these two examples).</p>
<p>I bring in <code>tee</code> for specific use cases; for example, <a href="https://github.com/qmacro/dotfiles/commit/2ce53780daf31f8f07681d74fa00b0a6e71602db#diff-65c9282a9859d16acdc87f650a575e909d6200072927fb266b769c4d0241f215R31-R38">in this <code>cache</code> script</a>, to generate the output, show it, and cache it:</p>
<pre class="language-bash"><code class="language-bash"><span class="token comment"># If there's no cache file or it's older than N mins then</span><br><span class="token comment"># run the command for real, cacheing the output (again).</span><br><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token operator">!</span> <span class="token parameter variable">-f</span> <span class="token string">"<span class="token variable">$cachefile</span>"</span> <span class="token punctuation">]</span> <span class="token punctuation">\</span><br>  <span class="token operator">||</span> <span class="token builtin class-name">test</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">find</span> <span class="token string">"<span class="token variable">$cachefile</span>"</span> <span class="token parameter variable">-mmin</span> +<span class="token string">"<span class="token variable">$mins</span>"</span><span class="token variable">)</span></span>"</span><span class="token punctuation">;</span> <span class="token keyword">then</span><br>  <span class="token string">"<span class="token variable">$@</span>"</span> <span class="token operator">|</span> <span class="token function">tee</span> <span class="token string">"<span class="token variable">$cachefile</span>"</span><br><span class="token keyword">else</span><br>  <span class="token function">cat</span> <span class="token string">"<span class="token variable">$cachefile</span>"</span><br><span class="token keyword">fi</span></code></pre>
<p>But I want to use <code>tee</code> more regularly in my daily scripting activities. With <a href="https://tldp.org/LDP/abs/html/process-sub.html">process substitution</a>, it can be a powerful ally.</p>
<h2>Use netstat's --listening option</h2>
<p>When I want to see what sockets are being listened to on a machine, my muscle memory types out:</p>
<pre class="language-shell"><code class="language-shell">$ <span class="token function">netstat</span> <span class="token parameter variable">-atn</span> <span class="token operator">|</span> <span class="token function">grep</span> LISTEN</code></pre>
<p>This is fine, and gives me what I want - the lines showing what ports are bound with listening processes. Here's an example:</p>
<pre class="language-shell"><code class="language-shell">$ <span class="token function">netstat</span> <span class="token parameter variable">-atn</span> <span class="token operator">|</span> <span class="token function">grep</span> LISTEN<br>tcp4       <span class="token number">0</span>      <span class="token number">0</span>  <span class="token number">127.0</span>.0.1.53           *.*                    LISTEN<br>tcp4       <span class="token number">0</span>      <span class="token number">0</span>  <span class="token number">127.0</span>.0.1.28196        *.*                    LISTEN<br>tcp6       <span class="token number">0</span>      <span class="token number">0</span>  fe80::aede:48ff:.49158 *.*                    LISTEN<br>tcp6       <span class="token number">0</span>      <span class="token number">0</span>  fe80::aede:48ff:.49157 *.*                    LISTEN<br>tcp6       <span class="token number">0</span>      <span class="token number">0</span>  fe80::aede:48ff:.49156 *.*                    LISTEN<br>tcp6       <span class="token number">0</span>      <span class="token number">0</span>  fe80::aede:48ff:.49155 *.*                    LISTEN<br>tcp6       <span class="token number">0</span>      <span class="token number">0</span>  fe80::aede:48ff:.49154 *.*                    LISTEN<br>tcp6       <span class="token number">0</span>      <span class="token number">0</span>  fe80::aede:48ff:.49153 *.*                    LISTEN<br>tcp4       <span class="token number">0</span>      <span class="token number">0</span>  *.22                   *.*                    LISTEN<br>tcp6       <span class="token number">0</span>      <span class="token number">0</span>  *.22                   *.*                    LISTEN<br>$</code></pre>
<p>But I learned something as a side effect from reading a great post (which I <a href="https://twitter.com/qmacro/status/1429463349239197701">auto-tweeted</a> from my [https://github.com/qmacro-org/url-notes](URL Notes) repo today): <a href="https://twitter.com/qmacro/status/1429463349239197701">Bringing the Unix Philosophy to the 21st Century - Brazil's Blog</a>.</p>
<p>The author gave this example of using their <code>jc</code> utility (which looks fascinating) to be able to more easily parse this sort of <code>netstat</code> output:</p>
<pre class="language-shell"><code class="language-shell">$ <span class="token function">netstat</span> <span class="token parameter variable">-tln</span> <span class="token operator">|</span> jc <span class="token parameter variable">--netstat</span> <span class="token operator">|</span> jq <span class="token string">'.[].local_port_num'</span></code></pre>
<p>The <code>-l</code> flag used here for <code>netstat</code> is the short form of <code>--listening</code>, and combined with <code>-t</code> (<code>--tcp</code>) and <code>-n</code> (<code>--numeric</code>) shows only TCP sockets that are being listened on. Here's an example:</p>
<pre class="language-shell"><code class="language-shell">$ <span class="token function">netstat</span> <span class="token parameter variable">-tln</span><br>Active Internet connections <span class="token punctuation">(</span>only servers<span class="token punctuation">)</span><br>Proto Recv-Q Send-Q Local Address           Foreign Address         State<br>tcp        <span class="token number">0</span>      <span class="token number">0</span> <span class="token number">0.0</span>.0.0:2222            <span class="token number">0.0</span>.0.0:*               LISTEN<br>tcp6       <span class="token number">0</span>      <span class="token number">0</span> :::2222                 :::*                    LISTEN</code></pre>
<p>Of course, because we're not using <code>grep</code>, we still get the heading output from <code>netstat</code> here. But the <code>--listening</code> does the job nicely!</p>
<p>Unfortunately, it won't be any time soon that I can switch to this option, because the macOS version of <code>netstat</code> doesn't support <code>-l</code>. In fact, it does have a <code>-l</code> option but it's for something completely different (printing full IPv6 addresses).</p>
<p>That said, this is yet another small step towards me moving further away from macOS-local activities, and more fully to Linux based dev containers running on my Synology NAS. But that's a post for another time.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Session switching with the tmux menu</title>
      <link href="https://qmacro.org/blog/posts/2021/08/12/session-switching-with-the-tmux-menu/"/>
      <updated>2021-08-12T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2021/08/12/session-switching-with-the-tmux-menu/</id>
      <content type="html">
        <![CDATA[
      <p><em>Here's a way to get a simple session switcher in <code>tmux</code> using a popup menu.</em></p>
<p>I was looking at Waylon Walker's <a href="https://waylonwalker.com/tmux-fzf-session-jump/">tmux fzf session jumper</a> recently, and really liked it, so much so that I dug into the incantations that he shared, resulting in a new post on this autodidactics blog: <a href="https://qmacro.org/autodidactics/2021/08/06/tmux-output-formatting/">tmux output formatting</a>.</p>
<p>Anyway, I was still thinking about session switching yesterday, and randomly came across this Reddit post: <a href="https://www.reddit.com/r/tmux/comments/ot77fx/how_to_bring_up_context_menu_without_mouse/">how to bring up context menu without a mouse</a>. I'd seen the context menu before, by accidentally triggering it with the right mouse button, and it looks something like this:</p>
<p><img src="/images/2021/08/context-menu.png" alt="context menu"></p>
<p>It was <a href="https://www.reddit.com/r/tmux/comments/ot77fx/how_to_bring_up_context_menu_without_mouse/h6tfadp/?utm_source=reddit&amp;utm_medium=web2x&amp;context=3">the comment by user Coffee_24_7</a> that really got me thinking - turns out that this type of menu can be called up with one of the myriad <code>tmux</code> commands, one which I hadn't yet come across: <code>display-menu</code>.</p>
<h2>Building a context menu</h2>
<p>I thought that using a context menu like this to present a list of sessions to switch to would be fun and teach me more about the <code>display-menu</code> command. Basically I just wanted to have the menu display the sessions I had, and when I'd selected one, switch me to it. So, this is what I did.</p>
<p>The first part of the <code>tmux</code> man page for the <code>display-menu</code> command looks like this:</p>
<blockquote>
<p>display-menu [-O] [-c target-client] [-t target-pane] [-T title] [-x position] [-y position] name key command</p>
</blockquote>
<blockquote>
<p>Display a menu on target-client.  target-pane gives the target for any commands run from the menu.</p>
</blockquote>
<blockquote>
<p>A menu is passed as a series of arguments: first the menu item name, second the key shortcut (or empty for none) and third the command to run when the menu item is chosen.  The name and command are formats, see the FORMATS and STYLES sections.  If the name begins with a hyphen (-), then the item is disabled (shown dim) and may not be chosen.  The name may be empty for a separator line, in which case both the key and command should be omitted.</p>
</blockquote>
<blockquote>
<p>-T is a format for the menu title (see FORMATS).</p>
</blockquote>
<p>So it looked like I would need something like this to have three sessions listed, with shortcut keys 1-3, and commands to switch to the selected one:</p>
<pre class="language-shell"><code class="language-shell">tmux display-menu <span class="token punctuation">\</span><br>  writing  <span class="token number">1</span> <span class="token string">'switch-client -t writing'</span> <span class="token punctuation">\</span><br>  dotfiles <span class="token number">2</span> <span class="token string">'switch-client -t dotfiles'</span> <span class="token punctuation">\</span><br>  focus    <span class="token number">3</span> <span class="token string">'switch-client -t focus'</span></code></pre>
<p>(The session names in this example are actually the permanent sessions I use right now.)</p>
<h3>Listing the sessions</h3>
<p>From the <a href="https://qmacro.org/autodidactics/2021/08/06/tmux-output-formatting/">tmux output formatting</a> post we already know how to do this. The basic <code>tmux list-sessions</code> command produces something like this:</p>
<pre><code>dotfiles: 2 windows (created Thu Aug 12 10:06:53 2021)
focus: 1 windows (created Wed Aug 11 10:44:18 2021)
writing: 1 windows (created Wed Aug 11 10:46:21 2021) (attached)
</code></pre>
<p>To get just the session names, I can supply a format with the <code>-F</code> option, like this (specifying <code>#S</code> for &quot;session name&quot;):</p>
<pre class="language-shell"><code class="language-shell">tmux list-sessions <span class="token parameter variable">-F</span> <span class="token string">'#S'</span></code></pre>
<p>This produces:</p>
<pre><code>dotfiles
focus
writing
</code></pre>
<h3>Creating the input</h3>
<p>For each of the menu entries, three values are needed - the session name, an incrementing identifier (which becomes the single key to press for selection), and the <code>switch-client</code> command to switch to the selected session. There are many ways to turn this list of sessions into something like this; I'm going to use <code>awk</code> here, for these reasons:</p>
<ul>
<li>I like <code>awk</code> and its history</li>
<li>it has a nice <code>NR</code> built-in variable that holds the record number being processed, and I can use it for the incrementing identifier</li>
<li>I can set <code>ORS</code>, the Output Record Separator (which is usually a newline), to a space, to avoid having to use something like <code>tr</code> or <code>paste</code> to bring everything onto one line afterwards</li>
</ul>
<p>The invocation now becomes:</p>
<pre class="language-shell"><code class="language-shell">tmux list-sessions <span class="token parameter variable">-F</span> <span class="token string">'#S'</span> <span class="token punctuation">\</span><br><span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'BEGIN {ORS=" "} {print $1, NR, "\"switch-client -t", $1 "\""}'</span></code></pre>
<p>This produces:</p>
<pre><code>dotfiles 1 &quot;switch-client -t dotfiles&quot; focus 2 &quot;switch-client -t focus&quot; writing 3 &quot;switch-client -t writing&quot;
</code></pre>
<h3>Using the input for the menu</h3>
<p>Now I can just pass that entire output, via the venerable <code>xargs</code>, to <code>tmux</code>'s <code>display-menu</code> command. While I'm at it, I'll use the <code>-T</code> option to supply a title for the top of the menu display.</p>
<p>This is what the invocation finally becomes:</p>
<pre class="language-shell"><code class="language-shell">tmux list-sessions <span class="token parameter variable">-F</span> <span class="token string">'#S'</span> <span class="token punctuation">\</span><br><span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'BEGIN {ORS=" "} {print $1, NR, "\"switch-client -t", $1 "\""}'</span> <span class="token punctuation">\</span><br><span class="token operator">|</span> <span class="token function">xargs</span> tmux display-menu <span class="token parameter variable">-T</span> <span class="token string">"Switch session"</span></code></pre>
<p>It's worth putting this in a script, so I have done: <a href="https://github.com/qmacro/dotfiles/commit/68ba9c0934b8c77af44ae9581171577225298814"><code>session-menu</code></a>.</p>
<h3>Bind the menu to a key</h3>
<p>The final touch in this learning experiment is to bind this invocation to a key in <code>tmux</code>, so that I can quickly invoke it. I'll choose &quot;prefix Ctrl-s&quot;, which means the line I need to <a href="https://github.com/qmacro/dotfiles/commit/a8b70a3e247590275eef8de23aa7ceb9da043d46">add to my config</a> looks like this:</p>
<pre><code>bind-key C-s run-shell session-menu
</code></pre>
<p>And with this in place, I can invoke the session switch menu popup very comfortably - this is what it looks like:</p>
<p><img src="/images/2021/08/session-switch-menu.png" alt="session switch menu"></p>
<p>If I decide I don't want to switch sessions after all, I can just dismiss the menu with the standard key <code>q</code> (this is also in the <code>display-menu</code> part of the <code>tmux</code> man page).</p>
<hr>
<p>So there you have it. I do love <code>fzf</code> and all the things it can do, but it's worth spending some time on this native <code>tmux</code> feature. There's more to it, as well - for example, you can add separators and disabled items (like the ones in the first screenshot in this post) - but this will do me nicely for now. Happy multiplexing!</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>tmux output formatting</title>
      <link href="https://qmacro.org/blog/posts/2021/08/06/tmux-output-formatting/"/>
      <updated>2021-08-06T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2021/08/06/tmux-output-formatting/</id>
      <content type="html">
        <![CDATA[
      <p><em>Here's what I learned today about FORMATS in tmux output.</em></p>
<p>This week I came across <a href="https://twitter.com/_WaylonWalker">Waylon Walker</a> who is doing some lovely learning-and-sharing on the topic of <code>tmux</code>, the terminal multiplexer. He has a <a href="https://www.youtube.com/user/quadmx08">YouTube channel</a> and a <a href="https://waylonwalker.com">blog</a>, and there are plenty of <code>tmux</code> nuggets that are explained in short video and blog post formats.</p>
<p>I read Waylon's post <a href="https://waylonwalker.com/tmux-fzf-session-jump/">tmux fzf session jumper</a> that he published yesterday, and, having been curious to learn more about his <code>tmux</code> setup and usage, I stared a bit at the commands he'd shared. Here's what he was using, in his <code>tmux</code> popup based session selector (I was so happy to learn about <code>tmux</code> popups from Waylon, more on that topic another time, perhaps):</p>
<pre class="language-bash"><code class="language-bash">tmux <span class="token builtin class-name">bind</span> C-j <span class="token punctuation">\</span><br>  display-popup <span class="token punctuation">\</span><br>  <span class="token parameter variable">-E</span> <span class="token punctuation">\</span><br>  <span class="token string">"tmux list-sessions \<br>   | sed -E 's/:.*$//' \<br>   | grep -v <span class="token entity" title="\&quot;">\"</span>^<span class="token variable"><span class="token variable">$(</span>tmux display-message <span class="token parameter variable">-p</span> <span class="token string">'#S'</span><span class="token variable">)</span></span>\$<span class="token entity" title="\&quot;">\"</span> \<br>   | fzf --reverse \<br>   | xargs tmux switch-client -t"</span></code></pre>
<p>That's quite a bit to unpack and learn from! I've taken the liberty of inserting lots of newlines so we can stare at it more easily.</p>
<p>Before we start to unpack it, you can see what it does in this screenshot - on invocation, it brings up a session chooser in a popup for me to be able to switch to a different session. Nice!</p>
<p><img src="/images/2021/08/session-chooser.png" alt="session chooser in popup"></p>
<h2>Unpacking the invocation</h2>
<p>The invocation itself is creating a new key binding (<code>prefix</code> <code>ctrl-j</code>) with the <code>bind</code> (short for <code>bind-key</code>) command. The command that is invoked when this key combination is used is a relatively new one: <code>display-popup</code>. It seems that the popup feature appeared only about a year ago with <code>tmux</code> version 3.2 - see the <a href="https://github.com/tmux/tmux/issues/2645">associated change notes and discussion for 3.2</a> for more context.</p>
<p>The <code>-E</code> switch goes with the <code>display-popup</code> command and causes the popup to close automatically when the shell command that's executed within it completes.</p>
<p>The shell command to execute within the popup follows, and is basically the rest of the line - everything inside the outermost double-quote pair (<code>&quot;tmux list-sessions ... -t&quot;</code>). This is a pipeline that starts with the output of whatever <code>tmux list-sessions</code> produces - here's an example of that output, from the sessions I'm running right now:</p>
<pre><code>another session: 1 windows (created Fri Aug  6 11:24:34 2021) (attached)
tmux experiments: 2 windows (created Thu Aug  5 21:04:16 2021)
writing: 2 windows (created Fri Aug  6 11:02:10 2021)
</code></pre>
<p>I added a third session, &quot;another session&quot;, to have more than just a couple for the example, and it's in that third session that I invoked the <code>tmux list-sessions</code> command just now - which is why that is the one marked as <code>(attached)</code> in the output.</p>
<h3>Removing unwanted information</h3>
<p>That output is passed to <code>sed -E 's/:.*$//'</code> which uses an extended (that's what the <code>-E</code> denotes) regular expression to replace everything on the line* starting with a colon and going all the way to the end of the line, with nothing. This would change the output above to this:</p>
<pre><code>another session
tmux experiments
writing
</code></pre>
<p>* <code>sed</code> is a stream editor and processes each line in turn</p>
<h3>Filtering out the name of the current session</h3>
<p>This reduced output is then piped into <code>grep</code>, the search utility. The <code>-v</code> switch used inverts the match, effectively printing what is <em>not</em> matched by the regular expression that is given.</p>
<p>And what is that, exactly? It's this: <code>\&quot;^$(tmux display-message -p '#S')\$\&quot;</code>. First, because we're already in the context of the pair of outermost double-quotes, the double-quotes used here to enclose the entire pattern need to be escaped, with the backslashes. And within those escaped double-quotes we have <code>^</code> that anchors the match to the start of the line, and <code>$</code> (escaped again, because it has special meaning within double-quotes) which anchors to the end of the line. And what should actually be matched? If we stare hard enough, we see that what should be matched is the output of running the following command in a subshell (<code>$(...)</code>):</p>
<pre class="language-bash"><code class="language-bash">tmux display-message <span class="token parameter variable">-p</span> <span class="token string">'#S'</span></code></pre>
<p>The <code>display-message</code> command normally writes a message to the <code>tmux</code> session's status line, but the <code>-p</code> switch directs the command to write the message to STDOUT instead. What is the message to be written? Well, it's the value of <code>#S</code>, which is a variable (identified by the <code>#</code>), and specifically, <code>S</code> is an alias for <code>session_name</code>. So this command prints the name of the current session to STDOUT. In the same context as before (i.e. attached to the &quot;another session&quot; session), running this command would produce this:</p>
<pre><code>another session
</code></pre>
<p>So the ultimate result of piping the list of session names into this inverted matching <code>grep</code> invocation is that it would filter out the current session's name, resulting in:</p>
<pre><code>tmux experiments
writing
</code></pre>
<p>Why do this? Well, it makes sense that if I'm going to pick another session to jump to, I probably won't want to jump to my current session.</p>
<h3>Presenting the list for selection</h3>
<p>This reduced list is then piped into <code>fzf</code>, about which I've written a couple of posts on this autodidactics blog before:</p>
<ul>
<li><a href="https://qmacro.org/autodidactics/2021/02/02/fzf-the-basics-1-layout/">fzf - the basics part 1 - layout</a></li>
<li><a href="https://qmacro.org/autodidactics/2021/02/07/fzf-the-basics-2-search-results/">fzf - the basics part 2 - search results</a></li>
</ul>
<p>Using <code>fzf</code> here is perfect, it's my tool of choice for mini-UIs in the terminal where a choice has to be made, where an item (or items) must be selected. And because it fits with the Unix philosophy too, the output is simply the value of the item(s) selected. And in case you're wondering, the <code>--reverse</code> switch is a synonym for <code>--layout=reverse</code> which causes <code>fzf</code> to display the selection from the top.</p>
<h3>Jumping to the selected session</h3>
<p>In the last part of the pipeline, this value (the name of the session that was selected) is passed to <code>xargs</code>, the powerful but oft-misunderstood utility that helps you build and execute commands from STDIN. Here, with the invocation <code>xargs tmux switch-client -t</code>, we're using it to pass that selected value (e.g. &quot;writing&quot;) as a parameter, adding it to the end of the entire set of arguments passed to <code>xarg</code>, resulting in an invocation like this:</p>
<pre class="language-bash"><code class="language-bash">tmux switch-client <span class="token parameter variable">-t</span> writing</code></pre>
<p>This of course is the denoument to which we've been building up, and our <code>tmux</code> client is switched to the session we selected. Success!</p>
<h2>Formats and an alternative approach</h2>
<p>The reference to the <code>#S</code> variable got me thinking, and I remembered seeing an awful lot of potential, particularly in the &quot;FORMATS&quot; section of the <a href="https://man7.org/linux/man-pages/man1/tmux.1.html"><code>tmux</code> man page</a>. So I thought I'd use this opportunity, having been inspired by what Waylon showed, to see if I could come up with a different way of doing it.</p>
<p>First, could I use something from &quot;FORMATS&quot; to avoid the need to invoke <code>sed</code> in the pipeline (i.e. to not do this bit: <code>sed -E 's/:.*$//'</code>)? Turns out that the answer is yes; a format string can be used with the <code>list-sessions</code> command, with the <code>-F</code> option. So this would be an alternative, using the same variable as we saw earlier. Here's the invocation:</p>
<pre class="language-bash"><code class="language-bash">tmux list-sessions <span class="token parameter variable">-F</span> <span class="token string">'#{session_name}'</span></code></pre>
<p>which produces:</p>
<pre><code>another session
tmux experiments
writing
</code></pre>
<p>That is, none of the extraneous information is there, so we don't need to remove it.</p>
<p>We can go a bit further, too, with a conditional expression. Here it is, in action:</p>
<pre class="language-bash"><code class="language-bash">tmux list-sessions <span class="token parameter variable">-F</span> <span class="token string">'#{?session_attached,,#{session_name}}'</span></code></pre>
<p>The value of the <code>session_attached</code> variable is <code>1</code> if the session currently being listed is attached (i.e. is the one we're in) and <code>0</code> if not. So this conditional expression <code>#{?COND,A,B}</code> outputs A if condition COND is true, otherwise B. What a lovely ternary style operator just waiting to be used within <code>tmux</code> formatting!</p>
<p>So this version produces:</p>
<pre><code>
tmux experiments
writing
</code></pre>
<p>The empty line comes from the fact that for the A value in the conditional expression above, we specified nothing (there was nothing between the two commas <code>,,</code>) when the session to which we're currently attached is listed.</p>
<p>That means we still have something to filter out, with <code>grep</code>, but it becomes simpler, with the briefest of patterns needed for <code>grep</code>, to match and filter out (with <code>-v</code>) empty lines: <code>^$</code> - i.e. &quot;the start of the line followed immediately by the end of the line&quot;. Like this:</p>
<pre class="language-bash"><code class="language-bash">tmux list-sessions <span class="token parameter variable">-F</span> <span class="token string">'#{?session_attached,,#{session_name}}'</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token parameter variable">-v</span> <span class="token string">'^$'</span></code></pre>
<p>This produces:</p>
<pre><code>tmux experiments
writing
</code></pre>
<p>which then can be passed as before into <code>fzf</code> for selection.</p>
<h2>Wrapping up</h2>
<p>This is in no way an attempt to &quot;better&quot; Waylon's post - far from it. It's a different way of approaching things, but most importantly, it's a classic example of folks learning together and from each other. Thanks Waylon, I'm looking forward to learning more from what you share.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Reopening pull requests and GITHUB_ACTOR</title>
      <link href="https://qmacro.org/blog/posts/2021/07/26/reopening-pull-requests-and-github_actor/"/>
      <updated>2021-07-26T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2021/07/26/reopening-pull-requests-and-github_actor/</id>
      <content type="html">
        <![CDATA[
      <p><em>Today I learned that the <code>GITHUB_ACTOR</code> on a re-opened pull request reflects the person re-opening it, not the original creator.</em></p>
<p>Over on the <a href="https://github.com/SAP-docs/contribution-guidelines">Community Guidelines</a> content for SAP's <a href="https://blogs.sap.com/2021/05/20/introducing-the-open-documentation-initiative/">Open Documentation Initiative</a> there was a <a href="https://github.com/SAP-docs/contribution-guidelines/pull/64">recent pull request</a> (PR) that was opened by user <code>cyberpinguin</code>.</p>
<p>We have a GitHub Actions workflow <a href="https://github.com/SAP-docs/contribution-guidelines/blob/main/.github/workflows/disallowed-content-checks.yaml">Disallowed content checker</a> that ensures that contributions coming in via PRs are targeting the appropriate content. The workflow <a href="https://github.com/SAP-docs/contribution-guidelines/runs/2953360170?check_suite_focus=true">was duly triggered</a>, as expected, and appropriately <a href="https://github.com/SAP-docs/contribution-guidelines/pull/64#issuecomment-871460299">alerted</a> the user that the contribution was outside of the desired target location.</p>
<p>We want to allow administrators of the repo to be able to maintain content across the whole repo, rather than restrict them, and we want those who are not administrators to be restricted. We do this by checking the collaborator permissions, using the <a href="https://docs.github.com/en/rest/reference/repos#get-repository-permissions-for-a-user">Collaborators</a> section of the GitHub API, like this:</p>
<pre class="language-shell"><code class="language-shell">gh api <span class="token punctuation">\</span><br>  <span class="token parameter variable">--jq</span> .permission <span class="token punctuation">\</span><br>  <span class="token string">"/repos/<span class="token variable">$GITHUB_REPOSITORY</span>/collaborators/<span class="token variable">$GITHUB_ACTOR</span>/permission"</span></code></pre>
<p>So far so good.</p>
<p>Shortly after opening the PR, the user <a href="https://github.com/SAP-docs/contribution-guidelines/pull/64#event-4983349361">closed</a> it (by mistake, I think), and it was <a href="https://github.com/SAP-docs/contribution-guidelines/pull/64#event-4987076185">re-opened</a> by my colleague and fellow Contribution Guidelines administrator <a href="https://github.com/je-hal">Jens</a>. As a result of this re-opening of the PR, the workflow was triggered again.</p>
<p>However, this time, no disallowed content alert was raised. Why was this?</p>
<p>Looking at <a href="https://github.com/SAP-docs/contribution-guidelines/runs/3006185835?check_suite_focus=true">the execution for that workflow run</a>, it's clear that the steps that would have caused an alert to be issued were skipped; the skip logic looks like this:</p>
<pre class="language-yaml"><code class="language-yaml"><span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> check_files_changed<br>  <span class="token key atrule">name</span><span class="token punctuation">:</span> Checks if disallowed content has been changed<br>  <span class="token key atrule">if</span><span class="token punctuation">:</span> env.repo_permission <span class="token tag">!=</span> 'admin'<br>  <span class="token key atrule">uses</span><span class="token punctuation">:</span> dorny/paths<span class="token punctuation">-</span>filter@v2<br>  <span class="token key atrule">with</span><span class="token punctuation">:</span><br>    <span class="token key atrule">list-files</span><span class="token punctuation">:</span> <span class="token string">'shell'</span><br>    <span class="token key atrule">filters</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string"><br>      disallowed:<br>        - '!docs/**'</span><br><span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> comment_on_disallowed<br>  <span class="token key atrule">if</span><span class="token punctuation">:</span> steps.check_files_changed.outputs.disallowed == 'true'<br>  <span class="token punctuation">...</span></code></pre>
<p>So it would seem that the permissions for the <code>GITHUB_ACTOR</code> in this subsequent execution were 'admin'. Why?</p>
<p>Because, as it turns out (and I confirmed this with a simple test just now) the value of <code>GITHUB_ACTOR</code> is set to the user who opens -- or re-opens -- a PR. In this case it was Jens, an administrator.</p>
<p>This is not what I'd expected, so I thought I'd write it up and share it.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Unix tooling - join, don&#39;t extend</title>
      <link href="https://qmacro.org/blog/posts/2021/07/21/unix-tooling-join-don&#39;t-extend/"/>
      <updated>2021-07-21T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2021/07/21/unix-tooling-join-don&#39;t-extend/</id>
      <content type="html">
        <![CDATA[
      <p><em>Reading a paper from 1984 has helped crystallise an important axiom in Unix tool design, so much so that I found myself referring to it today when scripting.</em></p>
<p>Rob Pike and Brian Kernighan authored a paper in 1984 titled &quot;<a href="https://nymity.ch/sybilhunting/pdf/Pike1983a.pdf">Program design in the UNIX environment</a>&quot;. In it, they explore the difference between adding features to existing programs, and achieving the same effect through connecting programs together.</p>
<p>It's not unusual to read about the UNIX philosophy of &quot;small programs, loosely joined&quot;, about the power of small, single-responsibility programs doing one thing and doing it well, used together to form something greater than merely the sum of its parts.</p>
<p>What really jumped out at me was the thinly veiled scorn poured onto some design decisions relating to the Berkeley distribution version of the humble <code>ls</code> command, design decisions ultimately based on a form of narrow thinking, rather than consideration of the UNIX environment - particularly the shell and the user space programs - as being the most important &quot;meta tool&quot;.</p>
<p>I won't try to summarise what that paper says about those extensions to <code>ls</code>, I would rather encourage you to go and read the paper yourself - it's only 7 pages. Instead, I'll relate a small example from today of how the paper has helped me remember the difference between focusing on a single tool to the detriment of the rest of the tools in the environment, and thinking about the entire environment as a single entity.</p>
<p>I have a small script, <a href="https://github.com/qmacro/dotfiles/blob/master/scripts/skv"><code>skv</code></a> which is short for &quot;service key value&quot;, which returns a value from a property within a JSON dataset representing a (Cloud Foundry) service key. In retrospect, calling it <code>skv</code> was a little short-sighted, because it would work on any JSON dataset, not just service keys. I guess that's another example of (not) thinking about the environment as the real &quot;meta tool&quot;. But I digress.</p>
<p>Today I've been using <code>skv</code> to grab OAuth-related values (client ID, client secret, and so on) from a JSON dataset and use them to construct URLs to follow an OAuth authorisation code flow. Some of those values are put into the query string of the URLs I'm constructing, and so I need to be careful to URL encode them.</p>
<p>My first reaction was to go into the source code of the <code>skv</code> script to add a switch, say, <code>-u</code>, along with the corresponding logic, so that I could ask, when invoking <code>skv</code>, that the value be returned URL encoded.</p>
<p>I'm happy to say that a second after having this reaction, I felt almost horrified that I was about to do exactly what those Berkeley authors did, and add an unnecessary switch to a single program. I already have <code>urlencode</code> available to me in my environment, so to get a URL encoded value from the JSON dataset, I'd just have to do something like this:</p>
<pre><code>skv uaa.clientid | urlencode
</code></pre>
<p>This is only a trivial example, and there's a difference because here I'm just stringing together commands in Bash scripts, but I think the principle still holds here. I feel that this approach is embracing the UNIX approach described in the paper.</p>
<p>What's more, there was nothing stopping me encapsulating the pipeline-based use of these two simple tools (<code>skv</code> and <code>urlencode</code>) in a little script <code>skvu</code>, that I could use to save some keystrokes:</p>
<pre><code>urlencode &quot;$(skv &quot;$*&quot;)&quot;
</code></pre>
<p>In fact here I've re-jigged how these two commands work together, as the version of <code>urlencode</code> I settled on works on a value passed as an argument, rather than passed via STDIN. But the beauty of the shell means that this just means I have to express my intention in a way that echoes that approach.</p>
<p>Anyway, that's all I wanted to share here - it's not a crazily interesting and little-understood corner of the UNIX church that I'm discovering here, merely the delight in something resonating with me to the extent that the strong reverberations carried through to something that I was actually doing, without consciously thinking of what I'd read.</p>
<p>I hope you enjoy the paper as much as I did!</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Early thoughts on Warp</title>
      <link href="https://qmacro.org/blog/posts/2021/07/20/early-thoughts-on-warp/"/>
      <updated>2021-07-20T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2021/07/20/early-thoughts-on-warp/</id>
      <content type="html">
        <![CDATA[
      <p><em>Here are some very early thoughts on Warp, the &quot;pro terminal designed for everyday use&quot;.</em></p>
<p>Today I was <a href="https://twitter.com/Fidschenheimer/status/1417416096131518469">pointed</a> in Warp's direction on Twitter by <a href="https://twitter.com/Fidschenheimer">Christian Pfisterer</a> and <a href="https://twitter.com/ceedee666">Christian Drumm</a>.</p>
<p>To quote <a href="https://www.warp.dev/">Warp's website</a>:</p>
<blockquote>
<p>Warp is a blazingly fast, Rust-based terminal that makes you and your team more productive at coding and DevOps.</p>
</blockquote>
<p>It's a fascinating venture, for many reasons. While the team is not looking to reinvent the entire terminal, a lot of what they describe feels &quot;foreign&quot; to me, as a long time terminal user (who <a href="https://qmacro.org/2020/11/03/computer-unit-1979/">started out</a> on a paper-based Superterm Data Communications Terminal hooked up to a PDP-11). I've read the <a href="https://blog.warp.dev/how-warp-works/">How it works</a> post, which is great. Here are some random thoughts on that, and also on the <a href="https://youtu.be/X0LzWAVlOC0">Warp beta welcome</a> video.</p>
<h2>Speed</h2>
<p>Warp is designed from the outset to be fast; written in Rust (a language designed in part with a major focus on performance) and using the GPU for rendering (which, to be fair, other terminal programs also do, such as my current terminal program of choice, <a href="https://sw.kovidgoyal.net/kitty/">kitty</a>).</p>
<p>What struck me is how far away my brain is from the sort of speed that this team is talking about; while I guess I still about terminal speed in terms of baud, and based on characters, the measurement for Warp is in frames per second; not only that, it's in the early gaming ballpark of 60fps. It feels a little odd thinking about a terminal in those terms.</p>
<h2>Input affordances</h2>
<p>The <a href="https://docs.warp.dev/features/the-input-editor">input editor</a> is effectively reinvented. I'm in two minds about this; moreover, one of those minds is awash with ignorance and uncertainty. First and most importantly, the editing capabilities on command lines today, at least in popular shells such as Bash and ZSH, are very advanced already. I'm not talking about what perhaps most people use - the default Emacs based editing facilities, which I think the demo is comparing Warp to - but the Vi based ones.</p>
<p>While I do like the idea of being able to more comfortably edit multiple lines, the other features feel rather redundant. With a <a href="https://github.com/qmacro/dotfiles/blob/master/bashrc.d/00-shell.sh#L1">simple</a> <code>set -o vi</code> I am in total control of how I edit, fix, rearrange and generally prepare my input. Very powerful.</p>
<p>The other mind is wondering about how this translates to remote sessions. The beauty of standard tools and shell facilities means that I can have exactly the same experience whether I'm local, or remote, via an ssh-based connection, to a machine elsewhere on the network, or to a container in a Kubernetes cluster.</p>
<p>Will the input editor allow this to happen in these remote contexts too? The <a href="https://docs.warp.dev/features/ssh">SSH</a> section does seem to say that this is possible, but I'm also wondering about whether that is also valid for ssh sessions within <a href="https://github.com/tmux/tmux/wiki">tmux</a> panes?</p>
<h2>Blocks of commands</h2>
<p>Another feature of the Warp terminal, very nicely demonstrated in the video, is the concept of <a href="https://docs.warp.dev/features/blocks">blocks</a>. This makes a lot of sense to me, and I can imagine already how it will help me visually move up and down examining and working with previous commands and their output.</p>
<p>What worries me slightly is that it looks, at least from the demo, that I'll have to use the mouse if I want to scroll further up, via the &quot;snackbar&quot; (I'm not sure why it's called that, chalk another item down to my ignorance). I wonder if I'll be able to use the terminal as a terminal (yes, that's deliberately provocative) and keep my hands where they belong - on the keyboard?</p>
<h2>The future is terminal</h2>
<p>Whatever the answers to these questions turn out to be (and please note that I've not seen or tried out Warp for myself yet - I've added myself to the list requesting beta access when it's available), there's one thing that I'm very happy to see.</p>
<p>And that's fresh thinking and energy going into what I think is one of the most misunderstood superpowers of today's computing space. So whatever this team comes up with, it's an automatic thumbs up for me. I may come to enjoy all Warp's features, or I may only like some of them. But I love the focus and <a href="https://www.warp.dev/about-us">brain power</a> that's going into Warp.</p>
<p>Here's a picture of Warp, from the very interesting <a href="https://blog.warp.dev/how-warp-works/">How Warp works</a> article I mentioned earlier.</p>
<p><img src="/images/2021/07/warp.png" alt="A picture of Warp"></p>
<p>Make it so!</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>The APC SMT750IC UPS works with the Synology NAS DS1621+</title>
      <link href="https://qmacro.org/blog/posts/2021/06/14/the-apc-smt750ic-ups-works-with-the-synology-nas-ds1621+/"/>
      <updated>2021-06-14T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2021/06/14/the-apc-smt750ic-ups-works-with-the-synology-nas-ds1621+/</id>
      <content type="html">
        <![CDATA[
      <p><em>I've successfully configured this setup, and the USB connection from the UPS to the NAS does indeed work to tell the NAS to shut down.</em></p>
<p>TL;DR - My Synology DS1621+ NAS recognises the USB-connected APC SMT750IC UPS and will shut itself down on signals sent from it.</p>
<p>Since buying my Synology NAS DS1621+ a few weeks ago, we've had one power outage in the village. I'd been musing on the idea of getting a UPS for the NAS, and this event helped me come to a decision (a little late, perhaps, but there you go). It took me longer than it should have done to work out which UPS might be applicable and compatible. I couldn't find definitive confirmation that the UPS I was looking at was going to work with the NAS; in particular, I wanted to be as sure as I could that the USB connection would indeed be recognised by the NAS, which would receive power event signals and shut itself down as appropriate when the UPS had to switch to battery power.</p>
<p>Synology maintain a <a href="https://www.synology.com/en-us/compatibility?search_by=products&amp;model=DS1621%2B&amp;category=upses&amp;p=1&amp;change_log_p=1">Compatibility List</a> and the APC Smart-UPS SMT750IC is indeed in there, with the value &quot;Vendor Recommended&quot; in the &quot;Tested by&quot; column. Reading around, I got the impression that this indeed meant what I suspected it meant, i.e. Synology themselves hadn't tested it, but instead were relying on APC to tell them. While I had no reason to doubt APC, I am fond of the proverb <em>Доверяй, но проверяй</em> (<a href="https://en.wikipedia.org/wiki/Trust,_but_verify">Trust, but verify</a>) and needed more solid evidence, especially before splashing out the <a href="https://www.amazon.co.uk/gp/product/B07DM6BPM2/">£300+</a> on the device (shipping it back might also have been a pain, due to its extreme weight).</p>
<p>I'd seen a few bits and pieces about the SMT750IC model's predecessor, the SMT750I, and some evidence that folks were successfully using this older SMT750I model with their Synology NAS devices, including the USB-based shutdown flows. My research told me that the &quot;C&quot; suffix on the newer model represented a new cloud enabled feature, described in the blurb thus: &quot;APC SmartConnect is a proactive remote UPS cloud monitoring feature that is accessible from any internet connected device&quot;. I'd also seen some vague confirmation that alongside some minor performance improvements, this cloud feature was really the only difference.</p>
<p>So it would seem reasonable to assume that the SMT750IC was going to be OK. But viewing the ports on the back of each device showed me that the USB connection was different (you can also see the green-coloured ethernet port on the SMT750IC relating to its &quot;cloud enabled&quot; feature):</p>
<p><img src="/images/2021/06/smt-devices-rear.png" alt="The backs of each of the SMT750I and SMT750IC"></p>
<p>Was this USB port difference significant? It was hard to tell. Perhaps the USB port on the SMT750I was a type B for a reason? Had the USB support on the SMT750IC changed?</p>
<p>Further research suggested that on the one hand, if the APC &quot;Powerchute&quot; software was supported by the UPS, it was likely to work with the NAS, mostly because of Synology's support for the <a href="https://networkupstools.org/">Network UPS Tools (NUT) standard</a>. But then I read elsewhere that this standard had multiple implementations, so it wasn't a certainty by any means.</p>
<p>In the end, I <a href="https://www.amazon.co.uk/ask/questions/Tx32WEPA58FDXDS/ref=ask_dp_dpmw_al_hza">asked on the Amazon product page</a>, and also called their UK support centre. Both avenues resulted in a positive outcome - I got a positive reply from APC Customer Care and also from the user &quot;Pegasus&quot;, and the person on the phone also confirmed this.</p>
<p>So if you're in the same situation as I was, perhaps this post will help.</p>
<p>Here are some screenshots of when I tested the UPS and NAS, removing the power from the UPS so that it switched to battery mode.</p>
<p><img src="/images/2021/06/ups-recognised.png" alt="The UPS settings on the NAS, showing the UPS is recognised via USB"></p>
<p>The UPS settings on the NAS, showing the UPS is recognised via USB.</p>
<p><img src="/images/2021/06/cloud-status-power.png" alt="The UPS's normal status showing via the &quot;cloud enabled&quot; feature on APC's website"></p>
<p>The UPS's normal status showing via the &quot;cloud enabled&quot; feature on APC's website.</p>
<p><img src="/images/2021/06/ups-shutdown-display.jpeg" alt="The UPS's front panel display shortly after I removed the power"></p>
<p>The UPS's front panel display shortly after I removed the power.</p>
<p><img src="/images/2021/06/ups-alert-on-nas.png" alt="The alert on the NAS when the UPS has switched to battery mode"></p>
<p>The alert on the NAS when the UPS has switched to battery mode.</p>
<p><img src="/images/2021/06/cloud-status-battery.png" alt="The UPS's warning status showing via the &quot;cloud enabled&quot; feature on APC's website when the UPS is in battery mode"></p>
<p>The UPS's warning status showing via the &quot;cloud enabled&quot; feature on APC's website when the UPS is in battery mode.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Remote access to Docker on my Synology NAS</title>
      <link href="https://qmacro.org/blog/posts/2021/06/12/remote-access-to-docker-on-my-synology-nas/"/>
      <updated>2021-06-12T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2021/06/12/remote-access-to-docker-on-my-synology-nas/</id>
      <content type="html">
        <![CDATA[
      <p><em>Here's what I did to enable remote access to the Docker install on my Synology NAS.</em></p>
<p>This post describes the steps I took to set up remote access to Docker running on my NAS, in the simplest and &quot;smallest footprint&quot; possible way I could find. There are other approaches, but this is what I did. It was a little less obvious than one might have expected, because of the way the Docker service is hosted on the NAS's operating system, and I ended up having to read around (see the reading list at the end).</p>
<h2>Introduction</h2>
<p>Having followed the container revolution for a while, I've become more and more enamoured with the idea of disposable workspaces, services and apps that can be instantly reified and leave no trace when they're gone. This was one of the reasons I opted for a Synology NAS, my first NAS device (see <a href="https://qmacro.org/2021/05/22/adding-a-drive-to-my-synology-nas/">Adding a drive to my Synology NAS</a>), because it is to act not only as a storage device, but as a container server.</p>
<p>The Docker experience out of the box with the NAS's operating system, DiskStation Manager (DSM), is very pleasant, via a graphical user interface. I've been very happy with the way it works, especially in the initial discovery phase.</p>
<p><img src="/images/2021/06/docker-gui.png" alt="A screenshot of the Docker app installed on the Synology NAS, showing two running containers"></p>
<p>But for this old mainframe and Unix dinosaur, a command line interface with access to a myriad remote servers is a much more appealing prospect, and the separation of client and server executables in Docker plays to the strengths of such a setup. So I wanted to use my Docker command line interface (CLI) <code>docker</code> to interact with the resources on the Synology NAS's Docker service. Not only for the sheer convenience, but also to be able to spin up CLIs and TUIs, as remote containers, and have seamless access to them from the comfort of my local machine's command line.</p>
<h2>Setup steps</h2>
<p>Here's what I did, starting from the Docker package already installed and running on the NAS.</p>
<p><img src="/images/2021/06/docker-package.png" alt="A screenshot of the Docker package installed on the NAS"></p>
<p>From a command line perspective, this out of the box installation also gave me access to be able to run the <code>docker</code> client CLI while remotely logged into the NAS, but only as root, i.e. directly, or via <code>sudo</code> as shown in this example:</p>
<pre><code>; ssh ds1621plus
administrator@ds1621plus:~$ sudo docker -v
Password:
Docker version 20.10.3, build b35e731
administrator@ds1621plus:~$ sudo docker image ls
REPOSITORY                     TAG       IMAGE ID       CREATED       SIZE
homeassistant/home-assistant   latest    832ca33fe14a   4 weeks ago   1.1GB
linuxserver/freshrss           latest    09ffc08f14fe   4 weeks ago   120MB
administrator@ds1621plus:~$
</code></pre>
<h3>Allow access as non-root user</h3>
<p>The first thing I wanted to do is to allow myself to run the <code>docker</code> CLI as a non-root user; in my case (as in many basic Synology NAS contexts) this is the as the <code>administrator</code> user.</p>
<p>In the standard Docker <a href="https://docs.docker.com/engine/install/linux-postinstall/">Post-installation steps for Linux</a>, there's a specific section for this: <a href="https://docs.docker.com/engine/install/linux-postinstall/#manage-docker-as-a-non-root-user">Manage Docker as a non-root user</a>. However, due to the way that users and groups are managed in DSM, this specific approach didn't work; there was no <code>docker</code> group that had been created, to which the <code>administrator</code> user could be added, and manually adding the group wasn't the right approach either, not least because DSM doesn't sport a <code>groupadd</code> command.</p>
<p>In fact, there are DSM specific commands for managing local users, groups, network settings and more. They all begin <code>syno</code> and are described in the <a href="https://global.download.synology.com/download/Document/Software/DeveloperGuide/Firmware/DSM/All/enu/Synology_DiskStation_Administration_CLI_Guide.pdf">CLI Administrator Guide for Synology NAS</a>.</p>
<p>So here's what I did. I'm a check-before-and-after kind of person, so some of these steps aren't essential, but they helped me to go carefully.</p>
<h4>Check docker group doesn't already exist</h4>
<p>First, I wanted to check that I wasn't about to clobber any existing <code>docker</code> group:</p>
<pre><code>administrator@ds1621plus:~$ grep -i docker /etc/group
administrator@ds1621plus:~$
</code></pre>
<p>Nope, no existing <code>docker</code> group, at least in the regular place.</p>
<h4>Add the docker group, with the administrator user as a member</h4>
<p>Time to create the group then, using the DSM specific command; I specified the <code>administrator</code> user to be added directly, as I did it:</p>
<pre><code>administrator@ds1621plus:~$ sudo synogroup --add docker administrator
Group Name: [docker]
Group Type: [AUTH_LOCAL]
Group ID:   [65538]
Group Members:
0:[administrator]
</code></pre>
<p>Checking to see if the group was now listed in <code>/etc/group</code> confirmed that these DSM specific commands weren't doing anything out of the ordinary:</p>
<pre><code>administrator@ds1621plus:~$ grep -i docker /etc/group
docker:x:65538:administrator
</code></pre>
<p>Great, the <code>docker</code> group now exists, with <code>administrator</code> as a member.</p>
<h4>Change the group owner of the Docker socket</h4>
<p>The <a href="https://docs.docker.com/engine/install/linux-postinstall/#manage-docker-as-a-non-root-user">Manage Docker as a non-root user</a> steps mentioned earlier showed that this is pretty much all one needs to do on a standard Docker-on-Linux install. However, there was an extra step needed on DSM, to actually assign to this new <code>docker</code> group access to the Unix socket that Docker uses.</p>
<p>Before I did this, I wanted to see what the standard situation was:</p>
<pre><code>administrator@ds1621plus:~$ ls -l /var/run/ | grep docker
drwx------ 8 root         root             200 Jun 10 17:40 docker
-rw-r--r-- 1 root         root               5 Jun 10 17:40 docker.pid
srw-rw---- 1 root         root               0 Jun 10 17:40 docker.sock
</code></pre>
<p>The socket (<code>docker.sock</code>) in <code>/var/run/</code> was owned by <code>root</code> as user and <code>root</code> as group. This meant that no amount of membership of the <code>docker</code> group was going to get the <code>administrator</code> user any closer to being able to interact with Docker.</p>
<p>So I changed the group ownership to <code>docker</code>:</p>
<pre><code>administrator@ds1621plus:~$ sudo chown root:docker /var/run/docker.sock
administrator@ds1621plus:~$ ls -l /var/run/ | grep docker
drwx------ 8 root         root             200 Jun 10 17:40 docker
-rw-r--r-- 1 root         root               5 Jun 10 17:40 docker.pid
srw-rw---- 1 root         docker             0 Jun 10 17:40 docker.sock
</code></pre>
<h4>Test non-root user access</h4>
<p>Now for the big moment. I logged out and back in again (for the new group membership to take effect) and tried a <code>docker</code> command:</p>
<pre><code>administrator@ds1621plus:~$ logout
Connection to ds1621plus closed.
# ~
; ssh ds1621plus
administrator@ds1621plus:~$ docker image ls
REPOSITORY                     TAG       IMAGE ID       CREATED       SIZE
homeassistant/home-assistant   latest    832ca33fe14a   3 weeks ago   1.1GB
linuxserver/freshrss           latest    09ffc08f14fe   4 weeks ago   120MB
</code></pre>
<p>Success!</p>
<h3>Setting up SSH access and a Docker context</h3>
<p>Now that I was able to safely interact with Docker on the NAS, I turned my attention to doing that remotely.</p>
<p>Elsewhere in the Docker documentation, there's <a href="https://docs.docker.com/engine/security/protect-access/">Protect the Docker daemon socket</a> which has tips on using either SSH or TLS to do so. I'd already established public key based SSH access from my local machine to the NAS, and maintain SSH configuration for various hosts (which you can see in my <a href="https://github.com/qmacro/dotfiles/blob/master/ssh/config">dotfiles</a>). So the SSH route was appealing to me.</p>
<p>The idea of this SSH access is to connect to the remote Docker service via <code>ssh</code> and run <code>docker</code> like that, remotely.</p>
<p>However, trying a basic connection failed at first; running a simple <code>ssh</code>-based invocation of <code>docker</code> on the remote machine (<code>ssh ds1621plus docker -v</code>) resulted in an error that ended like this:</p>
<p>&quot;<em>Exit status 127, please make sure the URL is valid, and Docker 18.09 or later is installed on the remote host: stderr=sh: docker: command not found</em>&quot;</p>
<p>In desperation I even tried explicit values (<code>ssh -l administrator -p 2222 ds1621plus docker -v</code>) but got the same message.</p>
<p>It turns out that on SSH access, the environment variables are not set the same as when you connect via <code>ssh</code> for an actual login session. Crucially, the value of the <code>PATH</code> environment variable was rather limited. Here's the entirety of the environment on an <code>ssh</code> based invocation of <code>env</code>:</p>
<pre><code>; ssh ds1621plus env
SHELL=/bin/sh
SSH_CLIENT=192.168.86.50 54644 2222
USER=administrator
MAIL=/var/mail/administrator
PATH=/usr/bin:/bin:/usr/sbin:/sbin
PWD=/volume1/homes/administrator
SHLVL=1
HOME=/var/services/homes/administrator
LOGNAME=administrator
SSH_CONNECTION=192.168.86.50 54644 192.168.86.155 2222
_=/usr/bin/env
</code></pre>
<p>We can see that there are only four directories in the <code>PATH</code>: <code>/usr/bin</code>, <code>/bin</code>, <code>/usr/sbin</code> and <code>/sbin</code>.</p>
<p>On the NAS, the <code>docker</code> client executable was in <code>/usr/local/bin</code>, not in the <code>PATH</code>; this was the cause of the error above - via a simple <code>ssh</code> invocation, the <code>docker</code> command wasn't found.</p>
<p>So I had to address this, and I did via SSH's &quot;user environment&quot; feature.</p>
<h4>Turn on user environment support in sshd</h4>
<p>SSH and its implementation, on client and server, is extremely accomplished, which is code for &quot;there's so much about SSH I don't yet know&quot;. One thing I learned about in this mini adventure is that the SSH daemon has support for &quot;user environments&quot;, via the <code>.ssh/environment</code> file, which is described in the <a href="http://man.openbsd.org/sshd.8#FILES">FILES section of the sshd documentation</a>.</p>
<p>Basically, setting the <code>PATH</code> to include <code>/usr/local/bin</code>, via this support for user environments, was exactly what I needed. What's more, I was not having to &quot;hack&quot; anything on the NAS (such as copying or symbolic-linking <code>docker</code> to another place so that it would be accessible) that I might regret later.</p>
<p>First, though, I needed to turn on user environment support on the SSH daemon service on the NAS. For this, I uncommented <code>PermitUserEnvironment</code> in <code>/etc/ssh/sshd_config</code> and set the value to <code>yes</code>, with this result:</p>
<pre><code>administrator@ds1621plus:~$ sudo grep PermitUserEnvironment /etc/ssh/sshd_config
PermitUserEnvironment yes
</code></pre>
<p>I then restarted the NAS; I could have messed around finding a neater way just to restart the SSH daemon, but I'd read about some other gotchas doing this, and I was the only one using the NAS at the time, so I went for it.</p>
<h4>Add the location of the docker executable in the PATH variable via .ssh/environment</h4>
<p>Now I could use the <code>.ssh/environment</code> file in the <code>administrator</code> user's home directory to set the value of the <code>PATH</code> environment variable to what I needed.</p>
<p>To do this, I just started a remote login session on the NAS via <code>ssh</code>, and asked <code>env</code> to tell me what this was and also write it to the <code>.ssh/environment</code> file directly:</p>
<pre><code>; ssh ds1621plus
administrator@ds1621plus:~$ env | grep PATH | tee .ssh/environment
PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/syno/sbin:/usr/syno/bin:/usr/local/sbin:/usr/local/bin
administrator@ds1621plus:~$
</code></pre>
<p>And that was it; when running commands remotely via <code>ssh</code>, this <code>PATH</code> value was now applicable. So the remote invocation of <code>docker</code> now worked:</p>
<pre><code>; ssh ds1621plus docker -v
Docker version 20.10.3, build b35e731
</code></pre>
<h4>Create a Docker context</h4>
<p>This final step was just for convenience, but worth it. With a context, I can avoid having to use <code>ssh</code> explicitly to interact with Docker on the NAS remotely.</p>
<p>It's described in <a href="https://docs.docker.com/engine/security/protect-access/">Use SSH to protect the Docker daemon socket</a> mentioned earlier, so I'll just show here what I did.</p>
<p>Create the context:</p>
<pre><code>; docker context create \
  --docker host=ssh://administrator@ds1621plus \
  --description=&quot;Synology NAS&quot; \
  synology
</code></pre>
<p>List the contexts, and select the new <code>synology</code> context for use:</p>
<pre><code>; docker context list
NAME                TYPE                DESCRIPTION                               DOCKER ENDPOINT                  KUBERNETES ENDPOINT                                                     ORCHESTRATOR
default *           moby                Current DOCKER_HOST based configuration   unix:///var/run/docker.sock      https://api.c-681fdc3.kyma.shoot.live.k8s-hana.ondemand.com (default)   swarm
synology            moby                Synology NAS                              ssh://administrator@ds1621plus
# ~
; docker context use synology
synology
# ~
; docker image ls
REPOSITORY                     TAG       IMAGE ID       CREATED       SIZE
homeassistant/home-assistant   latest    832ca33fe14a   4 weeks ago   1.1GB
linuxserver/freshrss           latest    09ffc08f14fe   4 weeks ago   120MB
</code></pre>
<p>Note that last command <code>docker image ls</code>; I invoked that on my client machine, but because of the context set, and the SSH based connection set up, the target was the Docker engine running on the Synology NAS. Success!</p>
<h2>References</h2>
<p>Here's what I read to find my way through this. Documents referenced in this post are also included here.</p>
<ul>
<li><a href="https://docs.docker.com/engine/security/protect-access/">Protect the Docker daemon socket</a></li>
<li><a href="https://github.com/docker/machine/issues/1200">Feature request: add driver for Synology</a></li>
<li><a href="https://github.com/microsoft/vscode-remote-release/issues/3748">Remote Docker version not detected correctly</a></li>
<li><a href="https://www.synoforum.com/threads/permissions-for-user-to-run-docker.3536/">Permission for User to run Docker?</a></li>
<li><a href="https://global.download.synology.com/download/Document/Software/DeveloperGuide/Firmware/DSM/All/enu/Synology_DiskStation_Administration_CLI_Guide.pdf">CLI Administrator Guide for Synology NAS</a></li>
<li><a href="http://man.openbsd.org/sshd.8">OpenBSD manual page server for sshd</a></li>
</ul>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Adding a drive to my Synology NAS</title>
      <link href="https://qmacro.org/blog/posts/2021/05/22/adding-a-drive-to-my-synology-nas/"/>
      <updated>2021-05-22T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2021/05/22/adding-a-drive-to-my-synology-nas/</id>
      <content type="html">
        <![CDATA[
      <p><em>A brief summary of how things went adding a drive to my Synology DS1621+ NAS.</em></p>
<p>Earlier this month I took delivery of my first Network Attached Storage (NAS) device - a <a href="https://www.synology.com/en-uk/products/DS1621+">Synology DS1621+</a>. It has 6 drive bays. Note that you can sort of tell this from the model number:</p>
<ul>
<li>DS: Disk Station (standalone, as opposed to rack mountable, for example)</li>
<li>16: Maximum number of drives possible</li>
<li>21: Model year</li>
</ul>
<p>Synology also offer an expansion unit, a <a href="https://www.synology.com/en-uk/products/DX517">DX517</a> which has 5 drive bays, and you can attach two of them to the DS1621+ adding up to a total of 6 + (5 + 5) = 16.</p>
<blockquote>
<p>Thanks to <a href="https://twitter.com/koehntopp">Frank</a> for answering all my early questions on Synology NAS systems.</p>
</blockquote>
<h2>Initial setup</h2>
<p>I bought two Seagate IronWolf 4TB drives. I knew I wanted to go for the <a href="https://www.synology.com/en-global/knowledgebase/DSM/tutorial/Storage/What_is_Synology_Hybrid_RAID_SHR">Synology Hybrid Raid</a> (SHR) disk arrangement (this has many advantages that appealed to me, not least the ability to add different sized drives in the future).</p>
<p>SHR requires at least two drives, which is why two was the minimum purchase that made sense. But I also bought a couple more, a week later. It's amazing how cheap, relatively speaking, spinning disk storage has become.</p>
<p>With the initial two drives, I'd set up a storage pool, following the instructions (it was pretty straightforward). Here's what the status of that storage pool looked like:</p>
<p><img src="/images/2021/05/storage-manager-storage-pool.png" alt="Status of Storage Pool 1 with 2 drives"></p>
<p>There are a few things that are worth noting here:</p>
<ul>
<li>SHR is using &quot;1-drive fault tolerance&quot; which basically means that the capacity of one entire drive is given over to data safety and not available for actual storage</li>
<li>this is why the &quot;Total capacity&quot; is at 3.63TB - remember that disk sizes are a bit misleading, this is effectively what you get with a 4TB drive, minus 0.01TB for overhead</li>
<li>the &quot;Used capacity&quot; is at 250.01GB, as I've created a single volume of 250GB so far in that storage pool</li>
</ul>
<h2>Inserting the new drive</h2>
<p>Now the second two drives have arrived, I decided to add one of them to the existing storage pool. I'm thinking of using the second one as a &quot;Hot Spare&quot; and seeing how that goes, but that's for another time.</p>
<p>So I added it to the caddy:</p>
<p><img src="/images/2021/05/drive-in-caddy.jpg" alt="drive in caddy"></p>
<p>I checked the specifications of the DS1621+ and noted that it supported hot swapping, so I could insert the drive and caddy back in as the device was running, which I did:</p>
<p><img src="/images/2021/05/inserting-drive-into-nas.jpg" alt="inserting drive into NAS"></p>
<p>A few moments later, I re-checked the storage manager and it showed me the new drive:</p>
<p><img src="/images/2021/05/storage-manager-overview.png" alt="storage manager overview"></p>
<p>Here's the newly inserted drive in a &quot;Not initialized&quot; state in the HDD/SDD list:</p>
<p><img src="/images/2021/05/storage-manager-hdd-sdd.png" alt="storage manager HDD/SDD list"></p>
<h2>Adding the new drive to the storage pool</h2>
<p>Now the drive was known, I could add it to the storage pool. I did this with the &quot;Action -&gt; Add drive&quot; menu item in the storage pool window, and the flow was fairly predictable, starting with the drive selection:</p>
<p><img src="/images/2021/05/storage-manager-storage-pool-add-drive-a.png" alt="adding the new drive - choosing the drive"></p>
<p>After a warning about any data being erased on the new drive, I was presented with a summary before proceeding:</p>
<p><img src="/images/2021/05/storage-manager-storage-pool-add-drive-b.png" alt="adding the new drive - summary"></p>
<p>The result was as expected. The storage pool had this new drive listed, and went into an &quot;Expanding&quot; status (note the capacity is not yet shown as being increased):</p>
<p><img src="/images/2021/05/storage-manager-storage-pool-after-add.png" alt="the third drive shown in the storage pool, which was now being expanded"></p>
<p>Checking back over in the &quot;HDD/SDD&quot; display, the drive status has gone from &quot;Not initialized&quot; to &quot;Healthy&quot;, and is showing an assignment to Storage Pool 1.</p>
<p>That was pretty much it - it wasn't an unexpected flow, but I was curious as to what would happen and how it would happen. Perhaps this helps someone who is also wondering. I've been writing this as I've been working through the flow, and now I've come to the end of this post, the status is still &quot;Expanding&quot; and shows that it's still less than 1% through a check of parity consistency - so it has a long way to go yet. I think I now realise why a &quot;Hot Spare&quot; might be useful. Anyway, I'll bring this post to an end now, and update it when the status changes.</p>
<p>Update: 12 hours later, it's still at it - the status of the storage pool is &quot;Expanding (Checking parity consistency 47.33%)&quot;. Some way to go yet.</p>
<p>Further update: It's the next morning, and the storage pool is now showing &quot;Healthy&quot; again, and its new expanded state of 7.27TB:</p>
<p><img src="/images/2021/05/storage-manager-storage-pool-expanded.png" alt="storage pool in new expanded state"></p>
<hr>
<p>Further reading:</p>
<ul>
<li><a href="https://global.download.synology.com/download/Document/Hardware/HIG/DiskStation/21-year/DS1621+/enu/Syno_HIG_DS1621_Plus_enu.pdf">Synology NAS DS1621+ Hardware Installation Guide</a> (PDF)</li>
</ul>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Equality in tech</title>
      <link href="https://qmacro.org/blog/posts/2021/05/20/equality-in-tech/"/>
      <updated>2021-05-20T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2021/05/20/equality-in-tech/</id>
      <content type="html">
        <![CDATA[
      <p><em>I support equality in tech, and so should you.</em></p>
<p>This should go without saying, but alas, we're not in an ideal world. Equality in tech should be the backbone, the basis, upon which we run our industry. But it's not.</p>
<p>I interact a lot on social media, I live stream too. And I haven't had a single occasion where I've been harrassed in any way. I'd like to think that this is because everyone is spellbound by what I have to say and what I'm showing. But it's not. It's because I'm male.</p>
<p>I've had the pleasure of watching some awesome folks streaming on Twitch and YouTube, and have witnessed them being harrassed. And guess what, all of the targets, on all of the occasions, are female. This is not a coincidence.</p>
<p>To those people thinking it's OK to make inappropriate comments, or worse, I say this: What is WRONG with you morons? It's not OK. Very not OK.</p>
<p>To those who already get it, great. Perhaps the next step is to think about loading time in favour of helping and encouraging girls and women in tech. I've been very lucky to have been able to do this in a teaching capacity over the years, especially with youngsters (see reading links below). But even simpler is to just help female tech folks level up by supporting them on social media, helping them to grow and be the role models for the next generation too. And also, I've suddenly grokked it that being vocal about this also helps.</p>
<p>I support equality in tech, and so should you.</p>
<hr>
<p>Further reading:</p>
<ul>
<li><a href="https://unbreak.tech">Unbreak Tech</a></li>
<li><a href="https://qmacro.org/2012/12/05/codeclub-and-becoming-a-stem-ambassador/">CodeClub and becoming a STEM Ambassador</a></li>
<li><a href="https://qmacro.org/2013/04/18/codeclub-thoughts/">CodeClub Thoughts</a></li>
<li><a href="https://qmacro.org/2020/03/24/code-at-home/">Let's learn to &quot;Code at Home&quot;</a></li>
</ul>
<p><img src="/images/2020/03/underwaterscratch.jpg" alt="Me teaching Scratch at Manchester CoderDojo"></p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Supporting developers with sponsorship</title>
      <link href="https://qmacro.org/blog/posts/2021/05/19/supporting-developers-with-sponsorship/"/>
      <updated>2021-05-19T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2021/05/19/supporting-developers-with-sponsorship/</id>
      <content type="html">
        <![CDATA[
      <p><em>I've started to use the sponsors facility on GitHub to support developers. Here's my thinking.</em></p>
<p>There are many folks that I observe giving to the community. This giving takes many forms, such as providing software in an open source manner, supporting that software, sharing knowledge, and mentoring. I wanted to look into how I could provide a bit of support. I give to charity as part of my remuneration scheme, and I'm very fortunate to be able to do that. But that seems more of a &quot;given&quot; and not particularly specific, nor do I have any direct connection to the recipients.</p>
<p>There are various ways to support individuals online - I've used the &quot;buy me a coffee&quot; approach, I've sent small amounts via PayPal to folks to say thanks (e.g. for the <a href="https://rubjo.github.io/victor-mono/">Victor Mono font</a>), subscribed to folks on Twitch, gifted subscriptions, and so on. These are all avenues available to us, and I'd encourage you to look into them.</p>
<p>But there's an avenue that resonates quite well with me, one that was introduced to me by <a href="https://github.com/alexellis">Alex Ellis</a>. And that's <a href="https://github.com/sponsors">GitHub Sponsors</a>. Subjective, I know, but I feel that sponsoring someone at this layer is a useful thing to do. The facilities offered by this mechanism also allow the sponsor relationship to be on a automatic and regular basis too.</p>
<p>I've no idea how far I'll go yet, I'm just really starting. So far I'm sponsoring Alex for his work on Kubernetes, small machines and everything in between, and have also sponsored <a href="https://github.com/koalaman">Vidar Holen</a>, mostly for <a href="https://github.com/koalaman/shellcheck">shellcheck</a>, which has been a key part of how I'm <a href="https://qmacro.org/2020/10/05/improving-my-shell-scripting">trying to improve my shell scripting</a>. I've just started sponsoring <a href="https://github.com/rwxrob">Rob Muhlestein</a> for everything that he shares and for his long term efforts to share knowledge with junior developers on his Twitch live streams.</p>
<p>My contributions are minimal, but this is a scale thing - I would like to encourage you to consider doing the same and sponsoring someone for their work that collectively helps strengthen our community.</p>
<hr>
<ul>
<li>Update 25 May 2021 - I've now also started sponsoring <a href="https://github.com/sponsors/larshp">Lars Hvam</a> for his work on ABAP outside the stack.</li>
<li>Update 31 May 2021 - See also the <a href="https://github.com/junegunn/junegunn/blob/main/BACKERS.md">BACKERS file for fzf's creator June Gunn</a></li>
</ul>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Notes on Markdown linting - part 2</title>
      <link href="https://qmacro.org/blog/posts/2021/05/14/notes-on-markdown-linting-part-2/"/>
      <updated>2021-05-14T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2021/05/14/notes-on-markdown-linting-part-2/</id>
      <content type="html">
        <![CDATA[
      <p><em>More on Markdown linting, this time in the context of GitHub Actions.</em></p>
<p>Yesterday I <a href="/blog/posts/2021/05/13/notes-on-markdown-linting-part-1/">wrote up some initial notes on my foray into Markdown linting</a>. Today I continue my journey of learning and discovery by attempting to get the Markdown linting working in a GitHub Action workflow, so I can have the checks done on pull requests.</p>
<p>Beyond creating the workflow definition itself, there are only a few parts to getting Markdown content linted in the context of a pull request:</p>
<ul>
<li>getting the content of the pull request, to be able to perform linting upon it</li>
<li>setting up an association between any linting output messages with the lines of Markdown to which they relate</li>
<li>installing the <code>markdownlint</code> tool and any custom rule packages</li>
<li>performing the linting</li>
</ul>
<h2>Creating the workflow definition</h2>
<p>Since being able to quickly look at previous examples of GitHub Actions workflow definitions using my <a href="/blog/posts/2021/04/24/github-actions-workflow-browser/">workflow browser</a>, it was quite easy to create a simple workflow definition. Here's what the start looks like:</p>
<pre class="language-yaml"><code class="language-yaml"><span class="token key atrule">name</span><span class="token punctuation">:</span> Markdown checks<br><br><span class="token key atrule">on</span><span class="token punctuation">:</span><br>  <span class="token key atrule">pull_request</span><span class="token punctuation">:</span><br>    <span class="token key atrule">branches</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>main<span class="token punctuation">,</span> master<span class="token punctuation">]</span><br><br><span class="token key atrule">jobs</span><span class="token punctuation">:</span><br>  <span class="token key atrule">lint-markdown</span><span class="token punctuation">:</span><br>    <span class="token key atrule">runs-on</span><span class="token punctuation">:</span> ubuntu<span class="token punctuation">-</span><span class="token number">20.04</span><br><br>    <span class="token key atrule">steps</span><span class="token punctuation">:</span><br><br>    <span class="token punctuation">...</span></code></pre>
<blockquote>
<p>I've moved from specifying <code>ubuntu-latest</code> to <code>ubuntu-nn.nn</code> for a more stable (or perhaps &quot;predictable&quot;) runner experience.</p>
</blockquote>
<p>Nothing exciting in this workflow definition so far; I've included both <code>main</code> and <code>master</code> in the list of branches because I've been testing with an older repository that still has <code>master</code> as the default branch.</p>
<h2>Getting the pull request content</h2>
<p>To run <code>markdownlint</code> on the content of the pull request, we need that in the runner workspace, and the usual use of the standard <a href="https://github.com/actions/checkout">actions/checkout</a> action does the job here:</p>
<pre class="language-yaml"><code class="language-yaml">    <span class="token punctuation">-</span> <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/checkout@v2</code></pre>
<h2>Setting up an output association</h2>
<p>While the whole process will work without this step, it provides an extra level of comfort for those involved in the pull request review.</p>
<p>The linting is performed in the runner, and the output (from <code>markdownlint</code>) is available in the workflow execution detail:</p>
<p><img src="/images/2021/05/execution-detail-messages.png" alt="workflow execution detail showing markdown lint output"></p>
<p>However, there's a small disconnect between the place of change and discussion (the pull request) and this workflow output.</p>
<p>There's a special, slightly mysterious feature that can help address this disconnection. This is the &quot;matcher&quot; feature, and is mysterious in that it's not particularly prominent in the main <a href="https://docs.github.com/en/actions">GitHub Actions documentation</a> ... although it is explained in the Actions Toolkit documentation, specifically <a href="https://github.com/actions/toolkit/blob/master/docs/commands.md#problem-matchers">in the ::Commands section</a>.</p>
<p>The general idea is that matchers can be added to a workflow execution. Matchers take the form of configuration that uses a regular expression to pick out parts of output messages and work out which bits are what. In other words, work out which file, line number and column each message applies to, as well as the message code and text.</p>
<p>This is what a matcher looks like, and it's the one I'm using to match the <code>markdownlint</code> output:</p>
<pre class="language-json"><code class="language-json"><span class="token punctuation">{</span><br>  <span class="token property">"problemMatcher"</span><span class="token operator">:</span> <span class="token punctuation">[</span><br>    <span class="token punctuation">{</span><br>      <span class="token property">"owner"</span><span class="token operator">:</span> <span class="token string">"markdownlint"</span><span class="token punctuation">,</span><br>      <span class="token property">"pattern"</span><span class="token operator">:</span> <span class="token punctuation">[</span><br>        <span class="token punctuation">{</span><br>          <span class="token property">"regexp"</span><span class="token operator">:</span> <span class="token string">"^([^:]*):(\\d+):?(\\d+)?\\s([\\w-\\/]*)\\s(.*)$"</span><span class="token punctuation">,</span><br>          <span class="token property">"file"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span><br>          <span class="token property">"line"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span><br>          <span class="token property">"column"</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span><br>          <span class="token property">"code"</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span><br>          <span class="token property">"message"</span><span class="token operator">:</span> <span class="token number">5</span><br>        <span class="token punctuation">}</span><br>      <span class="token punctuation">]</span><br>    <span class="token punctuation">}</span><br>  <span class="token punctuation">]</span><br><span class="token punctuation">}</span></code></pre>
<blockquote>
<p>The regular expression actually appears slightly more complex than it is, because the backslashes that are used to introduce the metacharacters <code>\d</code> (digit), <code>\s</code> (whitespace) and <code>\w</code> (alphanumeric) are escaped with backslashes in the JSON string value (so e.g. <code>\d</code> becomes <code>\\d</code>). This is so they don't get interpreted as escape characters themselves.</p>
</blockquote>
<p>If we stare at the output earlier, we see this:</p>
<pre class="language-text"><code class="language-text">docs/b.md:5 MD022/blanks-around-headings/blanks-around-headers Headings should be surrounded by blank lines [Expected: 1; Actual: 0; Below] [Context: "### Something Else"]<br>docs/b.md:6 MD032/blanks-around-lists Lists should be surrounded by blank lines [Context: "- one"]<br>docs/b.md:10:10 MD011/no-reversed-links Reversed link syntax [(reversed)[]]</code></pre>
<p>Applying the regular expression, we can see that it will indeed pick out the values as desired. Taking the last message line as an example, we get:</p>
<table>
<thead>
<tr>
<th>Regular expression part</th>
<th>Matched text</th>
<th>Value for</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>^</code></td>
<td>(start of line)</td>
<td></td>
</tr>
<tr>
<td><code>([^:]*)</code></td>
<td><code>docs/b.md</code></td>
<td><code>file</code></td>
</tr>
<tr>
<td><code>:</code></td>
<td><code>:</code></td>
<td></td>
</tr>
<tr>
<td><code>(\d+)</code></td>
<td><code>10</code></td>
<td><code>line</code></td>
</tr>
<tr>
<td><code>:?</code></td>
<td><code>:</code></td>
<td></td>
</tr>
<tr>
<td><code>(\d+)?</code></td>
<td><code>10</code></td>
<td><code>column</code></td>
</tr>
<tr>
<td><code>\s</code></td>
<td>(a space)</td>
<td></td>
</tr>
<tr>
<td><code>([\w-\/]*)</code></td>
<td><code>MD011/no-reversed-links</code></td>
<td><code>code</code></td>
</tr>
<tr>
<td><code>\s</code></td>
<td>(a space)</td>
<td></td>
</tr>
<tr>
<td><code>(.*)</code></td>
<td><code>Reversed link syntax [...]</code></td>
<td><code>message</code></td>
</tr>
<tr>
<td><code>$</code></td>
<td>(end of line)</td>
<td></td>
</tr>
</tbody>
</table>
<blockquote>
<p>In this table, the escaping backslashes have been removed, as they're only there to make the JSON string happy.</p>
</blockquote>
<p>The result of having a matcher like this is that as well as having the messages available in the workflow execution detail, we get the messages in context too, which is far more comfortable. They appear in the workflow execution summary, like this (see the &quot;Annotations&quot; section):</p>
<p><img src="/images/2021/05/execution-summary-messages.png" alt="workflow execution summary showing markdown lint output"></p>
<p>Moreover, each message appears directly below the line to which it applies, like this:</p>
<p><img src="/images/2021/05/messages-in-pr.png" alt="markdown linting messages next to the relevant lines"></p>
<p>To get this to work, the matcher configuration needs to be added with the <code>add-matcher</code> directive, in a step, like this:</p>
<pre class="language-yaml"><code class="language-yaml">    <span class="token punctuation">-</span> <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token string">"echo ::add-matcher::.qmacro/workflows/markdownlint/problem-matcher.json"</span></code></pre>
<p>There is actually a GitHub Action, <a href="https://github.com/xt0rted/markdownlint-problem-matcher">xt0rted/markdownlint-problem-matcher</a> that does this for you, but I'm still in two minds as to whether to use a &quot;black box&quot; action or something direct for things like this. Only time will tell.</p>
<h2>Installing the tool and custom rules packages</h2>
<p>Next, it's time to install the actual <code>markdownlint</code> tool, along with the custom rule package I mentioned in <a href="/blog/posts/2021/05/13/notes-on-markdown-linting-part-1/">part 1</a>. While I installed <code>markdownlint</code> on my macOS machine with <code>brew</code>, it seems fine here to install it with <code>npm</code>, along with the rule too:</p>
<pre class="language-yaml"><code class="language-yaml">    <span class="token punctuation">-</span> <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string"><br>        npm install \<br>          --no-package-lock \<br>          --no-save \<br>          markdownlint-cli markdownlint-rule-titlecase</span></code></pre>
<p>Using the <code>--no-package-lock</code> and <code>--no-save</code> options makes for a slightly cleaner environment, given what we're doing here (i.e. we are only really interested in NPM metadata for this current job's execution).</p>
<h2>Performing the linting</h2>
<p>Now everything is ready, we can run the linter. I am invoking the <code>markdownlint</code> tool, just installed with <code>npm</code>, using the <code>npx</code> package runner as it seems the cleanest way to do it:</p>
<pre class="language-yaml"><code class="language-yaml">    <span class="token punctuation">-</span> <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string"><br>        npx markdownlint \<br>          --config .qmacro/workflows/markdownlint/config.yaml \<br>          --rules markdownlint-rule-titlecase \<br>          docs/</span></code></pre>
<p>Without configuration, <code>markdownlint</code> will apply <a href="https://github.com/DavidAnson/markdownlint/blob/main/doc/Rules.md">all the rules</a> by default. I don't want that to happen, so I've used the <code>--config</code> option to point to a rules file <code>.qmacro/workflows/markdownlint/config.yaml</code>. This is what's in that file:</p>
<pre class="language-yaml"><code class="language-yaml"><span class="token comment"># All rules are inactive by default.</span><br><span class="token key atrule">default</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><br><br><span class="token comment"># These specific rules are active.</span><br><span class="token comment"># See https://github.com/DavidAnson/markdownlint#rules--aliases for details.</span><br><span class="token key atrule">heading-increment</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><br><span class="token key atrule">no-reversed-links</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><br><span class="token key atrule">no-missing-space-atx</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><br><span class="token key atrule">no-multiple-space-atx</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><br><span class="token key atrule">blanks-around-headings</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><br><span class="token key atrule">blanks-around-lists</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><br><span class="token key atrule">no-alt-text</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></code></pre>
<p>In other words, with this configuration, only those rules in that second stanza will be applied. Plus of course the explicit NPM package based title-case rule I've specified with the <code>--rules</code> option.</p>
<blockquote>
<p>I've been <a href="https://github.community/t/best-practices-for-storing-organising-shell-scripts-for-workflow-steps/176822">thinking about</a> where to store workflow related artifacts in a repository. I don't want to use <code>.github/workflows</code> for anything other than actual workflow definition files. So right now, I'm thinking along the lines of a hidden user/organisation based directory name -- <code>.qmacro</code> in this example -- to parallel <code>.github</code>.</p>
</blockquote>
<p>The final thing to note in this invocation is that I'm passing a specific directory to be linted: <code>docs/</code>. This means only content there will be linted. I will probably want some sort of <code>.markdownlintignore</code> file at some stage, but for now this will do.</p>
<h2>Wrapping up</h2>
<p>Here's the workflow definition in its entirety:</p>
<pre class="language-yaml"><code class="language-yaml"><span class="token key atrule">name</span><span class="token punctuation">:</span> Markdown checks<br><br><span class="token key atrule">on</span><span class="token punctuation">:</span><br>  <span class="token key atrule">pull_request</span><span class="token punctuation">:</span><br>    <span class="token key atrule">branches</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>main<span class="token punctuation">,</span> master<span class="token punctuation">]</span><br><br><span class="token key atrule">jobs</span><span class="token punctuation">:</span><br>  <span class="token key atrule">main</span><span class="token punctuation">:</span><br>    <span class="token key atrule">runs-on</span><span class="token punctuation">:</span> ubuntu<span class="token punctuation">-</span><span class="token number">20.04</span><br>    <span class="token key atrule">steps</span><span class="token punctuation">:</span><br><br>    <span class="token punctuation">-</span> <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/checkout@v2<br><br>    <span class="token punctuation">-</span> <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token string">"echo ::add-matcher::.qmacro/workflows/markdownlint/problem-matcher.json"</span><br><br>    <span class="token punctuation">-</span> <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string"><br>        npm install \<br>          --no-package-lock \<br>          --no-save \<br>          markdownlint-cli markdownlint-rule-titlecase</span><br><br>    <span class="token punctuation">-</span> <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string"><br>        npx markdownlint \<br>          --config .qmacro/workflows/markdownlint/config.yaml \<br>          --rules markdownlint-rule-titlecase \<br>          docs/</span></code></pre>
<p>Everything works nicely, and I'm happy with the local and remote linting process.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Notes on Markdown linting - part 1</title>
      <link href="https://qmacro.org/blog/posts/2021/05/13/notes-on-markdown-linting-part-1/"/>
      <updated>2021-05-13T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2021/05/13/notes-on-markdown-linting-part-1/</id>
      <content type="html">
        <![CDATA[
      <p><em>Here's what I found out when I started to look into linting Markdown content.</em></p>
<p>Thanks to some great direction and enlightenment from my colleague <a href="https://github.com/shegox">Tobias</a>, I found myself getting my brain around Markdown linting. Of course, not what it is, but what the current possibilities are and how they might apply to my situation. I thought I'd write some notes on what I found (mostly for my future self).</p>
<p>(See also <a href="/blog/posts/2021/05/14/notes-on-markdown-linting-part-2/">Notes on Markdown linting - part 2</a> where I learn how to get Markdown linting working in GitHub Actions).</p>
<h2>Which linter?</h2>
<p>The Node.js-based <a href="https://github.com/DavidAnson/markdownlint">DavidAnson/markdownlint</a> is the linter of choice. I'll refer to it as <code>markdownlint</code> in this post.</p>
<p>There's a related project <a href="https://github.com/markdownlint/markdownlint">markdownlint/markdownlint</a> which seems to be another, very similar linter written in Ruby. I'll refer to this as <code>mdl</code> as that's what the executable is called.</p>
<p>They both seem to share the same <a href="https://github.com/DavidAnson/markdownlint/blob/main/doc/Rules.md">rule</a> <a href="https://github.com/markdownlint/markdownlint/blob/master/docs/RULES.md">definitions</a> which is good; although <code>mdl</code> seems to have rules that have been deprecated in <code>markdownlint</code>.</p>
<p>I went for <code>markdownlint</code> for a number of reasons:</p>
<ul>
<li>it had more watchers, stargazers and forks on GitHub</li>
<li>I could install it on my macOS daily driver with <code>brew</code> (see later)</li>
<li>installing <code>mdl</code> involved RubyGems which I've never got on with</li>
<li>there was explicit information about using <code>markdownlint</code> in various editors (including in Vim)</li>
<li>Tobias had wanted to use a specific custom linting rule, something that <code>markdownlint</code> supports</li>
</ul>
<h2>Installing markdownlint</h2>
<p>Markdownlint can be installed via <code>npm install</code> or via <code>brew</code>. The <code>brew</code> option is actually via a connected project <a href="https://github.com/igorshubovych/markdownlint-cli">igorshubovych/markdownlint-cli</a>. I ran the <code>brew install markdownlint-cli</code> command and was up and running pretty much immediately:</p>
<pre class="language-shell"><code class="language-shell"><span class="token comment"># ~/Projects/gh/github.com/qmacro/qmacro.github.io (markdownlint-post *=)</span><br><span class="token punctuation">;</span> markdownlint<br>Usage: markdownlint <span class="token punctuation">[</span>options<span class="token punctuation">]</span> <span class="token operator">&lt;</span>files<span class="token operator">|</span>directories<span class="token operator">|</span>globs<span class="token operator">></span><br><br>MarkdownLint Command Line Interface<br><br>Options:<br> -V, <span class="token parameter variable">--version</span>                               output the version number<br> -c, <span class="token parameter variable">--config</span> <span class="token punctuation">[</span>configFile<span class="token punctuation">]</span>                   configuration <span class="token function">file</span> <span class="token punctuation">(</span>JSON, JSONC, JS, or YAML<span class="token punctuation">)</span><br> -d, <span class="token parameter variable">--dot</span>                                   include files/folders with a dot <span class="token punctuation">(</span>for example <span class="token variable"><span class="token variable">`</span>.github<span class="token variable">`</span></span><span class="token punctuation">)</span><br> -f, <span class="token parameter variable">--fix</span>                                   fix basic errors <span class="token punctuation">(</span>does not work with STDIN<span class="token punctuation">)</span><br> -i, <span class="token parameter variable">--ignore</span> <span class="token punctuation">[</span>file<span class="token operator">|</span>directory<span class="token operator">|</span>glob<span class="token punctuation">]</span>          file<span class="token punctuation">(</span>s<span class="token punctuation">)</span> to ignore/exclude <span class="token punctuation">(</span>default: <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><br> -o, <span class="token parameter variable">--output</span> <span class="token punctuation">[</span>outputFile<span class="token punctuation">]</span>                   <span class="token function">write</span> issues to <span class="token function">file</span> <span class="token punctuation">(</span>no console<span class="token punctuation">)</span><br> -p, --ignore-path <span class="token punctuation">[</span>file<span class="token punctuation">]</span>                    path to <span class="token function">file</span> with ignore pattern<span class="token punctuation">(</span>s<span class="token punctuation">)</span><br> -r, <span class="token parameter variable">--rules</span>  <span class="token punctuation">[</span>file<span class="token operator">|</span>directory<span class="token operator">|</span>glob<span class="token operator">|</span>package<span class="token punctuation">]</span>  custom rule files <span class="token punctuation">(</span>default: <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><br> -s, <span class="token parameter variable">--stdin</span>                                 <span class="token builtin class-name">read</span> from STDIN <span class="token punctuation">(</span>does not work with files<span class="token punctuation">)</span><br> -h, <span class="token parameter variable">--help</span>                                  display <span class="token builtin class-name">help</span> <span class="token keyword">for</span> <span class="token builtin class-name">command</span><br></code></pre>
<p>From the options we can see that it works in the way we'd expect - point it at one or more files, optionally give it some configuration, and go.</p>
<p>But we can also see that it allows the use of custom rules. The custom rule that Tobias wanted to use was one that checks for title case (and I still went ahead, despite the fact that I dislike title case intensely :-)). The custom rules can be supplied in different forms as we can see from what can be specified with the <code>--rules</code> option; this particular one was of the exotic variety, i.e. an NPM package: <a href="https://www.npmjs.com/package/markdownlint-rule-titlecase">markdownlint-rule-titlecase</a>. In fact, there's a grouping of NPM packages that are custom rules for <code>markdownlint</code>, organised via the <a href="https://www.npmjs.com/search?q=keywords:markdownlint-rule">markdownlint-rule keyword</a>.</p>
<h2>Using markdownlint with Vim</h2>
<p>As I mentioned earlier, there is a <a href="https://github.com/DavidAnson/markdownlint#related">list of references</a> to mechanisms where you can use <code>markdownlint</code> from the comfort of your editor. This list pointed to <a href="https://github.com/fannheyward/coc-markdownlint">fannheyward/coc-markdownlint</a> for Vim.</p>
<p>I don't use <a href="https://github.com/neoclide/coc.nvim">Conqueror of Completion (coc)</a> - but I do use the <a href="https://github.com/dense-analysis/ale">Asynchronous Linting Engine (ALE)</a>, which has <a href="https://github.com/dense-analysis/ale/blob/master/ale_linters/markdown/markdownlint.vim">built-in support</a> for <code>markdownlint</code>. Within 5 minutes and a <a href="https://github.com/qmacro/dotfiles/commit/1281d8f908d51e43d280619668ac1d32bc3811a9">few tweaks to my ALE related Vim configuration</a> I was up and running. I have to tweak the rule configuration to my liking, as right now, even as I write this post, I'm being given grief by <code>markdownlint</code> about <a href="https://github.com/DavidAnson/markdownlint/blob/main/doc/Rules.md#md013">overly long lines</a>.</p>
<p><img src="/images/2021/05/long-lines-warnings.png" alt="long lines warnings"></p>
<h2>Configuring markdownlint</h2>
<p>Configuration for <code>markdownlint</code> can be supplied with the <code>--config</code> option, or by configuration files in the right place - either in the current directory or in one's home directory.</p>
<p>I added the following to <code>~/.markdownlintrc</code>, and the grief about line length went away:</p>
<pre class="language-json"><code class="language-json"><span class="token punctuation">{</span><br>  <span class="token property">"line-length"</span><span class="token operator">:</span> <span class="token boolean">false</span><br><span class="token punctuation">}</span></code></pre>
<h2>Trying a custom rule</h2>
<p>I then wanted to see if I could get the custom linting rule working, at least in a basic way. On the <a href="https://www.npmjs.com/package/markdownlint-rule-titlecase">NPM page for markdownlint-rule-titlecase</a> it says:</p>
<p><em>Once installed using npm install markdownlint-rule-titlecase, run markdownlint with --rules &quot;markdownlint-rule-titlecase&quot;.</em></p>
<p>Sounds fair, although a little worrying for me as I'm not going to be working with Markdown content in the context of a Node.js project any time soon. However, it turns out that I can still install the package and use it, even in a non-Node.js project directory:</p>
<pre class="language-shell"><code class="language-shell"><span class="token comment"># ~/Projects/gh/github.com/qmacro/qmacro.github.io (markdownlint-post *=)</span><br><span class="token punctuation">;</span> <span class="token function">npm</span> i --no-package-lock markdownlint-rule-titlecase<br><span class="token function">npm</span> WARN saveError ENOENT: no such <span class="token function">file</span> or directory, <span class="token function">open</span> <span class="token string">'/Users/dj/Projects/gh/github.com/qmacro/qmacro.github.io/package.json'</span><br><span class="token function">npm</span> WARN enoent ENOENT: no such <span class="token function">file</span> or directory, <span class="token function">open</span> <span class="token string">'/Users/dj/Projects/gh/github.com/qmacro/qmacro.github.io/package.json'</span><br><span class="token function">npm</span> WARN qmacro.github.io No description<br><span class="token function">npm</span> WARN qmacro.github.io No repository field.<br><span class="token function">npm</span> WARN qmacro.github.io No README data<br><span class="token function">npm</span> WARN qmacro.github.io No license field.<br><br>+ markdownlint-rule-titlecase@0.1.0<br>added <span class="token number">4</span> packages from <span class="token number">4</span> contributors and audited <span class="token number">4</span> packages <span class="token keyword">in</span> <span class="token number">0</span>.838s<br>found <span class="token number">0</span> vulnerabilities</code></pre>
<p>The warnings are fair - there isn't a <code>package.json</code> file of course, why would there be?</p>
<p>I do now have a smallish <code>node_modules/</code> directory, though - containing the custom rule package:</p>
<pre><code># ~/Projects/gh/github.com/qmacro/qmacro.github.io (markdownlint-post *%=)
; tree -d node_modules/
node_modules/
├── markdownlint-rule-helpers
├── markdownlint-rule-titlecase
├── title-case
│   ├── dist
│   └── dist.es2015
└── tslib
    └── modules

7 directories
</code></pre>
<p>Oh well, I guess I could delete it when I'm done. In the meantime, can I take this new custom rule for a spin?</p>
<pre><code># ~/Projects/gh/github.com/qmacro/qmacro.github.io (markdownlint-post *%=)
; markdownlint --rules markdownlint-rule-titlecase _posts/2021-05-13-notes-on-markdown-linting.markdown
_posts/2021-05-13-notes-on-markdown-linting.markdown:11:1 titlecase-rule Titlecase rule [Title Case: 'Expected ## Which Linter?, found ## Which linter?']
_posts/2021-05-13-notes-on-markdown-linting.markdown:27:1 titlecase-rule Titlecase rule [Title Case: 'Expected ## Installing Markdownlint, found ## Installing markdownlint']
_posts/2021-05-13-notes-on-markdown-linting.markdown:55:1 titlecase-rule Titlecase rule [Title Case: 'Expected ## Using Markdownlint with Vim, found ## Using markdownlint with Vim']
_posts/2021-05-13-notes-on-markdown-linting.markdown:63:1 titlecase-rule Titlecase rule [Title Case: 'Expected ## Configuring Markdownlint, found ## Configuring markdownlint']
_posts/2021-05-13-notes-on-markdown-linting.markdown:75:1 titlecase-rule Titlecase rule [Title Case: 'Expected ## Trying a Custom Rule, found ## Trying a custom rule']
</code></pre>
<p>Yes! Works nicely. Although like I say, I'm not sure why anyone would <em>want</em> to use such a rule ... I may write one that complains if you <em>do</em> use title case. But I digress.</p>
<p>I think I'd like to be able to run these custom rules in Vim too, but I'll leave that for another time. I'm satisfied at least at this stage to be able to lint my Markdown files at all. And the next thing is actually to be able to use <code>markdownlint</code> in a GitHub Actions workflow.</p>
<p>Update: <a href="/blog/posts/2021/05/14/notes-on-markdown-linting-part-2/">I've written that up in part 2</a>.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Solving mysterious unrendered markdown headings</title>
      <link href="https://qmacro.org/blog/posts/2021/05/10/solving-mysterious-unrendered-markdown-headings/"/>
      <updated>2021-05-10T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2021/05/10/solving-mysterious-unrendered-markdown-headings/</id>
      <content type="html">
        <![CDATA[
      <p><em>I finally spent some time getting to the bottom of why some headings in my markdown content weren't getting rendered properly.</em></p>
<p>I've noticed over the years that occasionally the rendered version of my markdown content, in particular on GitHub (which is where most of my markdown content ends up), sometimes contains unrendered headings. Here's <a href="https://github.com/qmacro-org/test/blob/d6f348858dd5014d8b96060e4b8dd75999af431b/README.md">an example</a>:</p>
<p><img src="/images/2021/05/unrendered-heading-github.png" alt="Rendered markdown showing an unrendered heading - on GitHub"></p>
<p>The second level 2 heading &quot;Another heading level 2&quot; remains unrendered, even though everything looks fine. Why? This has bugged me for a while, but not so much as to make me stop and work out why it was happening. When it happened, I'd just go into the markdown source, rewrite the heading line, and all was fine.</p>
<p>Today I finally stopped to spend a bit of time to look into it. Turns out it's quite simple and obvious now I know what was causing it.</p>
<p>The <a href="https://www.markdownguide.org/basic-syntax/">basic syntax</a> for headings involves one or more hashes (depending on the heading level needed) followed by the heading text. There's a space that should separate the hashes and the heading text. Here's an example:</p>
<pre class="language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">##</span> Heading level 2</span></code></pre>
<p>What's causing that heading above not to be rendered properly? Well, it's the space. To you and me there is indeed a space between <code>##</code> and <code>Another heading level 2</code>.</p>
<p>But it's <a href="https://en.wikipedia.org/wiki/The_wrong_type_of_snow">the wrong type of space</a>.</p>
<p>Checking first that it's not something weird going on with the markdown renderer on GitHub, let's try a different rendering, in the terminal, with the excellent <a href="https://github.com/charmbracelet/glow">glow</a> tool:</p>
<p><img src="/images/2021/05/unrendered-heading-glow.png" alt="Rendered markdown showing an unrendered heading - using glow"></p>
<p>Same issue.</p>
<p>So let's dig in a little deeper, and look at the source.</p>
<p>First, let's look at the first level 2 heading, which has been rendered correctly:</p>
<pre><code># ~/Projects/gh/github.com/qmacro-org/test (main=)
; grep 'Heading level 2' README.md | od -t x1 -c
0000000    23  23  20  48  65  61  64  69  6e  67  20  6c  65  76  65  6c
           #   #       H   e   a   d   i   n   g       l   e   v   e   l
0000020    20  32  0a
               2  \n
0000023
# ~/Projects/gh/github.com/qmacro-org/test (main=)
;
</code></pre>
<p>Seems OK, and yes, there's the space, hex value <code>20</code>, following the two hashes (hex values <code>23</code>).</p>
<p>Now let's look at the second level 2 heading, which has not been correctly rendered;</p>
<pre><code># ~/Projects/gh/github.com/qmacro-org/test (main=)
; grep 'Another heading level 2' README.md | od -t x1 -c
0000000    23  23  c2  a0  41  6e  6f  74  68  65  72  20  68  65  61  64
           #   # 302 240   A   n   o   t   h   e   r       h   e   a   d
0000020    69  6e  67  20  6c  65  76  65  6c  20  32  0a
           i   n   g       l   e   v   e   l       2  \n
0000034
# ~/Projects/gh/github.com/qmacro-org/test (main=)
;
</code></pre>
<p>What the heck is that following the two hex <code>23</code> hash characters?</p>
<pre><code>0000000    23  23  c2  a0
           #   # 302 240
</code></pre>
<p>Turns out it's a <a href="https://en.wikipedia.org/wiki/Non-breaking_space">non-breaking space</a> character. And its UTF-8 <a href="https://en.wikipedia.org/wiki/Non-breaking_space#Encodings">encoding</a>, which is what the markdown file has, is <code>c2 a0</code>.</p>
<p>So this second level 2 heading cannot be rendered as such, as the markdown cannot be recognised. Makes sense!</p>
<p>But where are these non-breaking space coming from? How do they get there?</p>
<p>Well, my daily driver during the working week is a macOS device, where it's notoriously more difficult that it should be to type a <code>#</code> character. One has to use <code>Option-3</code> (or <code>Alt-3</code>) to get it. And it turns out that after holding down <code>Option</code> to hit <code>3</code> a couple of times to introduce the <code>##</code> for a level 2 heading, my thumb is sometimes still on the <code>Option</code> key when I hit <code>space</code>.</p>
<p>And guess what - <code>Option-space</code> is how you type a non-breaking space on macOS!</p>
<p>So basically it's <strong>me</strong> that's been causing this issue - by inadvertently inserting not a space but a non-breaking space after the <code>#</code> characters introducing markdown headings.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Unpacking Bash shell tips from a GitHub Actions workflow</title>
      <link href="https://qmacro.org/blog/posts/2021/04/28/unpacking-bash-shell-tips-from-a-github-actions-workflow/"/>
      <updated>2021-04-28T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2021/04/28/unpacking-bash-shell-tips-from-a-github-actions-workflow/</id>
      <content type="html">
        <![CDATA[
      <p><em>Someone shared a GitHub Actions workflow step which was written to find out some pull request info, but I thought even the first couple of shell lines, using IFS and awk, were worth staring at for a second or two.</em></p>
<p>I don't know about you, but I find value in staring at other people's shell activities, so I thought I'd share what occurred to me as I did so on this occasion, in case it helps newcomers become a little more acquainted.</p>
<p>A colleague wanted to find out something about the pull request ID when a workflow was triggered. This is a shortened version of what was shared:</p>
<pre class="language-yaml"><code class="language-yaml"><span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> PR ID<br>  <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string"><br>    IFS='/' read -r OWNER REPOSITORY &lt;&lt;&lt; "$GITHUB_REPOSITORY"<br>    HEADREFNAME=$(echo ${{ github.event.ref }} | awk -F'/' '{print $NF}')<br>    PR_ID=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \<br>      -X POST \<br>      -d "{\"query\": ... }" \<br>      "$GITHUB_GRAPHQL_URL" \<br>      | jq '.data.repository.pullRequests.nodes[].number' \<br>    )</span><br>  <span class="token key atrule">shell</span><span class="token punctuation">:</span> bash</code></pre>
<p>I've omitted the detail of the API call being made with <code>curl</code>, partly because it's not relevant, and partly because it's a GraphQL call and extremely ugly.</p>
<p>So what can we learn from this? Let's take it line by line.</p>
<h2>Obtaining the owner and repository values</h2>
<pre class="language-bash"><code class="language-bash"><span class="token assign-left variable"><span class="token environment constant">IFS</span></span><span class="token operator">=</span><span class="token string">'/'</span> <span class="token builtin class-name">read</span> <span class="token parameter variable">-r</span> OWNER REPOSITORY <span class="token operator">&lt;&lt;&lt;</span> <span class="token string">"<span class="token variable">$GITHUB_REPOSITORY</span>"</span></code></pre>
<p>This is a nice way of splitting the value in a variable into a couple of variables. What's in <code>$GITHUB_REPOSITORY</code>? The <a href="https://docs.github.com/en/actions/reference/environment-variables#default-environment-variables">Default environment variables</a> documentation tells us that it's going to be the repository owner and name, joined with a <code>/</code> character, e.g. <code>octocat/Hello-World</code>.</p>
<p>Let's pick this line apart.</p>
<h3>Using the IFS environment variable</h3>
<p>The first thing we see is <code>IFS='/'</code>. <code>IFS</code> is an environment variable in Bash and stands for <a href="https://en.wikipedia.org/wiki/Input_Field_Separators">Input Field Separators</a> (or Internal Field Separators). Notice that &quot;separators&quot; is plural. Note also that some folks like to think of them as delimiters, rather than separators, but that's a debate for another time. The default value for the <code>IFS</code> environment variable is the list of different whitespace types, i.e. space, tab and newline.</p>
<p>Here, we only want to split on <code>/</code> characters, rather than on any whitespace characters.</p>
<p>There are a number of places that <code>IFS</code> is used in the context of the shell. One of these places is with the <code>read</code> command, and in particular, it comes into play when there are multiple variable names specified. But we'll get to that shortly.</p>
<p>The other thing to note is that the setting of the value for <code>IFS</code> is done &quot;in the same breath&quot; as the <code>read</code> command, on the same line. This means that the value assigned is temporary, just for the duration of the command or builtin that follows. What actually happens is that the <code>IFS='/'</code> assignment is passed as part of the environment within which the command or builtin is executed. (I found <a href="https://stackoverflow.com/questions/25153582/why-cant-i-set-ifs-for-one-call-of-printf/25154499#25154499">this explanation on StackOverflow very helpful in understanding this</a>).</p>
<p>This means, in turn, that when (in this case) <code>read</code> consults the value of <code>IFS</code> it gets the <code>/</code> character, and not whatever <code>IFS</code> was set or defaulted to before that incantation. But once the processing of whatever is on that line is finished, that temporary, execution-environment-specific assignment is done with, and effectively we're back with whatever <code>IFS</code> was before we started.</p>
<h3>Splitting with read</h3>
<p>Next we have the actual execution of the <code>read</code> builtin: <code>read -r OWNER REPOSITORY</code>.</p>
<blockquote>
<p>In case you're wondering, &quot;builtin&quot; just means that <code>read</code> is part of the Bash shell itself, rather than a separate executable. One implication of this is that the execution of <code>read</code> is going to be faster (although unless you're running it many times in a loop, or on a very slow machine, the difference is going to be almost imperceptible). Another implication is that you'll want to use <code>read --help</code> to find out what <code>read</code> does, rather than <code>man read</code>.</p>
</blockquote>
<p>Looking at what <code>read --help</code> tells us, we see that it reads a line from STDIN and splits it into fields. Note the phase &quot;a line&quot; - it only reads one line, so if you have multiple lines, you'll need to execute <code>read</code> in a loop (a common idiom is to use a <code>while</code> loop here). Next, then, is the <code>-r</code> option, which prevents any backslashes from escaping characters. Often with input you'll find control characters, such as tab or newline, written in an escaped form, i.e. <code>\t</code> and <code>\n</code> respectively. In this instance, this is not desired - any actual backslash should be interpreted directly as such.</p>
<p>Knowing that the value in <code>$GITHUB_REPOSITORY</code> is going to be an owner and a repository name, stuck together with a <code>/</code> character (such as &quot;octocat/Hello-World&quot;) we can understand what the variable names <code>OWNER</code> and <code>REPOSITORY</code> are likely to receive, given the temporary assignment of <code>/</code> to <code>IFS</code>.</p>
<h3>I/O redirection and using a here string</h3>
<p>But we know <code>read</code> reads lines from STDIN. So how do we get it to read the value of a variable (<code>$GITHUB_REPOSITORY</code>) instead? We get it to do that using a &quot;here string&quot; - and that's the last bit of the line that we should now stare at for a second, the <code>&lt;&lt;&lt; &quot;$GITHUB_REPOSITORY&quot;</code> part.</p>
<p>To understand what a &quot;here string&quot; is, let's take a few steps back, starting at the concept of STDIN (&quot;standard input&quot;). In the context of the shell, this is often what is supplied to a program in a pipeline, like this:</p>
<pre class="language-bash"><code class="language-bash">$ producer <span class="token operator">|</span> consumer</code></pre>
<p>Whatever <code>producer</code> emits to STDOUT, that's what <code>consumer</code> receives on STDIN.</p>
<p>There are other ways to supply data to <code>consumer</code>. One way is to use &quot;redirection&quot;, which is useful if you want to use files:</p>
<pre class="language-bash"><code class="language-bash">$ producer <span class="token operator">></span> some-file<br>$ consumer <span class="token operator">&lt;</span> some-file</code></pre>
<p>The first line uses &quot;output redirection&quot;, i.e. the output that <code>producer</code> emits to STDOUT is redirected to <code>some-file</code>. The second line uses &quot;input redirection&quot;, where <code>some-file</code> is opened for reading on <code>consumer</code>'s STDIN.</p>
<p>There's another type of redirection, called a &quot;here document&quot;, which allows us to specify input lines directly, i.e. &quot;here&quot;, like this:</p>
<pre class="language-bash"><code class="language-bash">$ consumer <span class="token operator">&lt;&lt;</span><span class="token string">EOF<br>first line of input<br>second line of input<br>last line of input<br>EOF</span></code></pre>
<p>The three lines of input are what are supplied to <code>consumer</code>'s STDIN. The string <code>EOF</code> is declared as a delimiter, and all lines up until that delimiter is seen are taken as input.</p>
<p>And there's a variation on such &quot;here document&quot;, and that's a &quot;here string&quot;, which is what we have in our example. While regular STDIN redirection is introduced with a single <code>&lt;</code>, and a &quot;here document&quot;-based redirection is introduced with a double <code>&lt;&lt;</code>, a &quot;here string&quot; is introduced with a triple <code>&lt;&lt;&lt;</code>, and takes whatever is supplied, appends a single newline and passes that to STDIN.</p>
<p>In this case, a variable <code>$GITHUB_REPOSITORY</code> is supplied, so that is expanded to the value it contains, and passed to <code>read</code>'s STDIN.</p>
<h2>Getting the HEAD reference</h2>
<p>The second line is also interesting and deserves a little attention. It's a single assignment statement, assigning a value to the variable <code>HEADREFNAME</code>. It doesn't matter too much what this is, but it doesn't hurt to make a guess. Based on the context in which this will run, i.e. in a pull request event, and the reference to the GitHub event property &quot;ref&quot; (in <code>github.event.ref</code>), we can see from the <a href="https://docs.github.com/en/developers/webhooks-and-events/webhook-events-and-payloads">Webhook events and payloads</a> section of the documentation that this is likely to be something that looks like this:</p>
<pre><code>refs/head/main
</code></pre>
<p>Let's stare at this line to see what it does and how it works:</p>
<pre class="language-bash"><code class="language-bash"><span class="token assign-left variable">HEADREFNAME</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">echo</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span> github.event.ref <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token operator">|</span> <span class="token function">awk</span> -F<span class="token string">'/'</span> <span class="token string">'{print $NF}'</span><span class="token variable">)</span></span></code></pre>
<h3>Use of command substitution with $(...)</h3>
<p>We can see that what is assigned to the <code>HEADREFNAME</code> variable is something inside this construct: <code>$(...)</code>. This is the <a href="https://www.gnu.org/software/bash/manual/html_node/Command-Substitution.html">command substitution</a> construct. This allows the output of a command to be substituted in-place. In other words, whatever the output of what's expressed within the <code>$(...)</code> construct is substituted, and (in this case) assigned as the value to <code>HEADREFNAME</code>.</p>
<blockquote>
<p>You may see an alternative command substitution construct in this form: <code>`...`</code>; this is the older style of the construct, but the newer <code>$(...)</code> style is preferred due to some quoting complexities with the older style.</p>
</blockquote>
<h3>Using awk</h3>
<p>So what is the command that is producing the output that will be substituted and assigned to the <code>HEADREFNAME</code> variable here? Let's have a look:</p>
<pre class="language-bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token variable">${{ github.event.ref }</span><span class="token punctuation">}</span> <span class="token operator">|</span> <span class="token function">awk</span> -F<span class="token string">'/'</span> <span class="token string">'{print $NF}'</span></code></pre>
<p>Remember that the definition context here is a GitHub Actions workflow definition. This is where the <code>${{ ... }}</code> comes from - it's not a shell expression; rather, it's an <a href="https://docs.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions">expression in the workflow definition format</a>. It basically means that the value of the property <code>github.event.ref</code> is substituted; this is before the line is executed by Bash.</p>
<p>Assuming for now that the value of <code>github.event.ref</code> is indeed <code>refs/head/main</code>, this amounts to:</p>
<pre class="language-bash"><code class="language-bash"><span class="token builtin class-name">echo</span> refs/head/main <span class="token operator">|</span> <span class="token function">awk</span> -F<span class="token string">'/'</span> <span class="token string">'{print $NF}'</span></code></pre>
<p>So the value is piped into the STDIN of <code>awk</code>, the venerable and still useful tool for <a href="https://en.wikipedia.org/wiki/AWK">text processing, data extraction and reporting</a>. And it is here that data extraction is taking place. Let's break down how it works.</p>
<h3>Awk condition-action pairs and built-in variables</h3>
<p>The structure of an <code>awk</code> script is one or more &quot;condition action&quot; pairs. The basic idea is that <code>awk</code> processes lines that it receives via STDIN, and for each line, applies the condition, and if the condition is true, executes the corresponding action. Conditions are often regular expressions, and there's the special (and common) case of &quot;no condition&quot;, in which case the action is executed regardless. (There are also the special <code>BEGIN</code> and <code>END</code> conditions which can be used for pre- and post-processing respectively).</p>
<p>Actions are enclosed in curly braces <code>{ ... }</code>.</p>
<p>For quick one-liners, <code>awk</code> scripts are often expressed &quot;in-line&quot; like we see here. In other more complex cases they're stored in separate script files - you can see a couple of examples of <code>.awk</code> file contents in the <a href="https://github.com/SAP-samples/cloud-messaging-handsonsapdev/tree/main/graphing">graphing</a> directory within the <a href="https://github.com/SAP-samples">SAP samples</a> repository <a href="https://github.com/SAP-samples/cloud-messaging-handsonsapdev">cloud-messaging-handsonsapdev</a>.</p>
<p>This particular one-liner looks like this:</p>
<pre><code>(no condition) { print $NF }
</code></pre>
<p>In other words, the action will be executed for every line coming in on STDIN. Considering that there's only going to be one line coming in (the <code>refs/head/main</code> string), that's just a single instance of that action. But what does it do? To understand that, we have to look at <code>$NF</code> and, in turn, the value <code>'/'</code> passed to the <code>-F</code> option in the <code>awk</code> invocation.</p>
<p>There are a number of built-in variables in <code>awk</code>, and <code>NF</code> is one that represents the number of fields.</p>
<p>What does &quot;number of fields&quot; mean, exactly? Well, first, it's the number of fields in the input line currently being processed. And the number of fields is determined by the value of the <code>FS</code> built-in variable - the &quot;field separator&quot;. The default value of <code>FS</code> is whitespace, but this can be changed using the <code>-F</code> option, which is what's happening here.</p>
<p>With that knowledge, we can guess what this might produce (note the addition of <code>FS</code> and the deliberate omission for now of the <code>$</code> prefix to <code>NF</code>):</p>
<pre><code>echo refs/head/main | awk -F'/' '{print FS, NF}'
</code></pre>
<p>It produces this, i.e. the value of the field separator and the number of fields.</p>
<pre><code>/ 3
</code></pre>
<p>Fields in an <code>awk</code> script can be referred to positionally with <code>$1</code>, <code>$2</code>, <code>$3</code> and so on. But usefully, with a touch of indirection, we can prefix <code>NF</code> with <code>$</code> to refer to fields relatively, such that <code>$NF</code>, which resolves to <code>$3</code>, is the last field in this input, <code>$NF-1</code> is the second to last, and so on.</p>
<p>So the action <code>{ print $NF }</code> just prints the last field on the line.</p>
<p>In other words, what this entire line does is assign whatever the last part of the value of <code>github.event.ref</code> (i.e. <code>main</code>, here) to the <code>HEADREFNAME</code> variable.</p>
<p>And that's it. While there's more in this workflow definition step, I'll stop here to let you take things in. Hopefully if you're taking some tentative steps towards embracing more terminal based command of your working environment, this has helped break down the barriers a little to the syntax and use of Bash shell expressions and scripts.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>GitHub Actions workflow browser</title>
      <link href="https://qmacro.org/blog/posts/2021/04/24/github-actions-workflow-browser/"/>
      <updated>2021-04-24T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2021/04/24/github-actions-workflow-browser/</id>
      <content type="html">
        <![CDATA[
      <p><em>I wrote a simple workflow browser to help me refer to previous workflow definitions while I'm writing a new one, as I'm still learning the syntax and techniques.</em></p>
<p>With a programming or definition language, especially one that's new and powerful, it takes me a while to become comfortable writing scripts or definitions from scratch. I have a small amount of auto completion in my editor, but I'm not a fan - I prefer to learn by looking things up and then typing them in, rather than have words automatically completed for me.</p>
<p>The YAML based syntax for definining GitHub Actions workflows is powerful and there are different ways of achieving similar things. And it's new to me too (although defining jobs and steps isn't - in many ways it's just like writing Job Control Language (JCL) back in the mainframe era, but that's a story for another time).</p>
<p>While the latest version of the GitHub command line client <code>gh</code> sports lovely new features for workflows and actions, it doesn't quite give me the quick cross-repository overview that I'm looking for. So I decided to combine three of my favourite terminal power tools to help me:</p>
<ul>
<li>Bash, for my command line interface and utility scripting, my shell of choice</li>
<li><a href="https://github.com/cli/cli"><code>gh</code></a>, which is already a very accomplished command line interface (CLI) to GitHub and a really comfortable way of using the API</li>
<li><a href="https://github.com/junegunn/fzf"><code>fzf</code></a>, which is a powerful fuzzy finder utility and provides just enough features for me to build simple terminal user interfaces (UIs) with</li>
</ul>
<p>I combined them to build a &quot;workflow browser&quot;. Here it is in action:</p>
<script id="asciicast-409638" src="https://asciinema.org/a/409638.js" async></script>
<p>It consists of three parts:</p>
<ul>
<li>
<p>a new environment variable GH_CACHETIME which I can set globally to be nice to the GitHub API servers (I'm not changing workflows that often so a generous cache time of 1 hour works for me)</p>
</li>
<li>
<p>the main <code>workflowbrowser</code> script which finds workflow definitions across my content on GitHub and presents them in a list to search through</p>
</li>
<li>
<p>a separate <code>showgithubcontent</code> script that displays the content of a resource in one of my GitHub repositories</p>
</li>
</ul>
<p>The <code>showgithubcontent</code> script was initially a function inside of the <code>workflowbrowser</code> script but I separated it out, first because it felt better and second because there was something more I could do once I'd browsed the workflow definitions with <code>workflowbrowser</code> and selected one - more on that later.</p>
<h2>The workflowbrowser script</h2>
<p>Here's the script in its entirety, <a href="https://github.com/qmacro/dotfiles/blob/master/scripts/workflowbrowser">as it stands right now</a>:</p>
<pre><code>#!/usr/bin/env bash

# Find and browse GitHub Actions workflow definitions.
# In addition to regular shell tools (such as sed), this
# script uses gh and fzf.

workflows() {

  # Takes owner type (org or user) and owner name.
  # Returns tab-separated list of owner/repo/workflowfile/path.

  local ownertype=$1
  local owner=$2

  gh api \
    --method GET \
    --paginate \
    --cache &quot;${GH_CACHETIME:-1h}&quot; \
    --field &quot;q=$ownertype:$owner path:.github/workflows/&quot; \
    --jq '.items[] | [&quot;\(.repository.full_name)/\(.name)&quot;, .repository.owner.login, .repository.name, .path] | @tsv' \
    &quot;/search/code&quot;

}

main() {

  # Calls workflows for my org and user.

  cat \
    &lt;(workflows org qmacro-org) \
    &lt;(workflows user qmacro) \
    | fzf \
      --with-nth=1 \
      --delimiter='\t' \
      --preview='showgithubcontent {2} {3} {4} yaml always' \
      | cut -f 2,3,4

}

main &quot;$@&quot;
</code></pre>
<p>There's just a <code>main</code> function and a <code>workflows</code> function.</p>
<h3>The main function</h3>
<p>The <code>main</code> function calls the <code>workflows</code> function a couple of times, because I have repositories under my own user <a href="https://github.com/qmacro">qmacro</a> and also under a small experimental organisation <a href="https://github.com/qmacro-org">qmacro-org</a> and I have workflows across both of these owner areas.</p>
<p>In learning more about Bash I've found it's helpful to know the terms for various aspects, so I'm going to point out one here. I'm calling the <code>workflows</code> function twice, like this:</p>
<pre><code>  cat \
    &lt;(workflows org qmacro-org) \
    &lt;(workflows user qmacro)
</code></pre>
<p>This to me was the simplest way of combining output from two calls into a single stream, using <code>cat</code>. The <code>&lt;(...)</code> is <a href="https://tldp.org/LDP/abs/html/process-sub.html">process substitution</a>. This is very useful when you want to supply some data to a command, which is expecting that data to be in a file, but where you don't have a file, and instead want to generate the data on the fly, and have it provided as the output of some execution. Here I'm using process substitution to call the <code>workflows</code> function a couple of times, and have the output from those calls supplied to <code>cat</code>. As if I did this: <code>cat firstfile secondfile</code>.</p>
<blockquote>
<p>I did a 10 minute video on process substitution on Hands-on SAP Dev, in case you're interested: <a href="https://www.youtube.com/watch?v=JF4lGw4Itpk&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;index=41">Ep.39 - Looking at process substitution</a>.</p>
</blockquote>
<p>I'll dig into the <code>workflows</code> function shortly, but for now, we need to know what it outputs, to understand better what we do with that output, i.e. what we do downstream from <code>cat</code> in the pipeline.</p>
<p>The output from <code>workflows</code> are records representing workflow definitions, in the form of lines with tab-separated fields, like this:</p>
<pre><code>qmacro-org/test/dump.yml	qmacro-org	test	.github/workflows/dump.yml
qmacro/showntell/main.yml	qmacro	showntell	.github/workflows/main.yml
qmacro/qmacro/build.yml	qmacro	qmacro	.github/workflows/build.yml
</code></pre>
<p>In order, the fields represent:</p>
<ol>
<li>a combination of repo owner, repo name &amp; workflow definition file name</li>
<li>the repo owner</li>
<li>the repo name</li>
<li>the path in the repository to that workflow definition file</li>
</ol>
<p>The lines are piped into <code>fzf</code> which is used to present the workflow definitions and also a preview of their contents. This is done by using various options supplied to <code>fzf</code>.</p>
<p>The first option deals with what to show in the basic list display that <code>fzf</code> first presents, and that is the contents of the first field above (the combination). This is done using the <code>--with-nth</code> option; we also tell <code>fzf</code> how the fields are delimited:</p>
<ul>
<li><code>--with-nth=1</code> - use field 1 in the list display</li>
<li><code>--delimiter='\t'</code> - fields are tab-delimited</li>
</ul>
<p>Then there's what to do from a preview perspective; when a particular entry in the list is selected, <code>fzf</code> can run a preview command to display something in a window:</p>
<ul>
<li><code>--preview='showgithubcontent {2} {3} {4} yaml always'</code></li>
</ul>
<p>Whatever is produced (via STDOUT) by the incantation supplied with the <code>--preview</code> option is shown in the preview window. Here, we call the <code>showgithubcontent</code> script, supplying that script with 5 arguments. The first three use <code>fzf</code>'s field reference syntax to pass the values of the second, third &amp; fourth field, i.e. the repo owner, the repo name and the workflow file path. The last two arguments control how <code>showgithubcontent</code> displays things (we'll come to that later).</p>
<p>With <code>fzf</code>, if an item in the list is indeed selected, then the line passed into <code>fzf</code> that represents the line selected is output to STDOUT. This makes <code>fzf</code> a very powerful tool that plays well with other tools, following the Unix philosophy (if no selection is made, e.g. by aborting <code>fzf</code> with Ctrl-C, then nothing is emitted).</p>
<p>The final part of the <code>main</code> function takes the line emitted from <code>fzf</code> and outputs the same three fields (repo owner, repo name and workflow file path). Basically field 1 is just used as a &quot;display&quot; field for <code>fzf</code>.</p>
<h3>The workflows function</h3>
<p>The <code>workflows</code> function is basically a wrapper around a call to the <a href="https://docs.github.com/en/rest/reference/search">GitHub Search API</a>. This is an API that I haven't used before now, and it's pretty powerful. There are different endpoints representing different search approaches. What worked for me, to find workflow definitions, was to use the <a href="https://docs.github.com/en/rest/reference/search#search-code">Search code</a> endpoint with <code>/search/code</code>.</p>
<p>This endpoint takes the search criteria in the form of a query string parameter <code>q</code>, and it was very easy to use the GUI based search to try out different search parameters to figure out what I needed to specify. Here's an example:</p>
<p><a href="https://github.com/search?q=org%3Aqmacro-org+path%3A.github%2Fworkflows%2F">https://github.com/search?q=org%3Aqmacro-org+path%3A.github%2Fworkflows%2F</a></p>
<p>One thing that tripped me up at first was the wrong type of request was being made first of all. I supplied the search criteria value in the <code>q</code> query string parameter correctly, like this (as you can see in the function):</p>
<ul>
<li><code>--field &quot;q=$ownertype:$owner path:.github/workflows/&quot;</code></li>
</ul>
<p>but the HTTP call that <code>gh</code> then made for me was a POST request, with this search query parameter in the body of the request. That wasn't right. Checking in the API documentation, the <code>q</code> parameter needs to be in the query string. Explicitly setting the method to GET made this right:</p>
<ul>
<li><code>--method GET</code></li>
</ul>
<p>There are a couple of other &quot;housekeeping&quot; parameters used here too:</p>
<ul>
<li><code>--paginate</code></li>
<li><code>--cache &quot;${GH_CACHETIME:-1h}&quot;</code></li>
</ul>
<p>I don't yet have that many workflow definitions, but if it comes to that, <code>gh</code> will work through the responses to get them all for me with <code>--paginate</code>.
And the <code>--cache</code> parameter works both ways: my activities are well behaved when it comes to using the API endpoints, and also, after the first time the list of workflow definitions is retrieved, any subsequent uses of the workflow browser are that much snappier (this works also with the similar use of the <code>--cache</code> parameter in the <code>showgithubcontent</code> script we'll see shortly). Note that if there's no value specified for <code>GH_CACHETIME</code>, the default will be 1 hour (<code>1h</code>) through the use of <a href="https://www.gnu.org/software/bash/manual/html_node/Shell-Parameter-Expansion.html">shell parameter expansion</a>.</p>
<p>Next we come to the use of the <code>--field</code> parameter, which allows me to specify the name and value for the search parameter <code>q</code>. I looked at the <a href="https://docs.github.com/en/github/searching-for-information-on-github/searching-code">Searching code</a> documentation to find out about the <code>ownertype:owner</code> specification. The first time around this value will be &quot;org:qmacro-org&quot; and the second time around it will be &quot;user:qmacro&quot;. Moreover, with <code>path</code> I can search for content that appears at a specific location - see <a href="https://docs.github.com/en/github/searching-for-information-on-github/searching-code#search-by-file-location">Search by file location</a>.</p>
<blockquote>
<p>For those wondering, GitHub Actions workflow definition files are stored in the <code>.github/workflows/</code> directory within a repository.</p>
</blockquote>
<p>Last but not least I use <code>--jq</code> parameter to supply <code>fzf</code> with some <code>jq</code> script that will parse and extract the data I need from the API's JSON output. I think it was in <a href="https://github.com/cli/cli/releases/tag/v1.7.0">release 1.7.0</a> that this feature appeared, and it's a great idea - build in <code>jq</code> to <code>gh</code> so those that don't have <code>jq</code> already installed can still benefit. I guess it also helps to establish <code>jq</code> as the de facto standard for parsing and manipulating JSON.</p>
<p>If we add some whitespace to the <code>jq</code> script passed with the <code>--jq</code> parameter, we get this:</p>
<pre class="language-jq"><code class="language-jq"><span class="token punctuation">.</span>items<span class="token punctuation">[</span><span class="token punctuation">]</span><br>  <span class="token operator pipe">|</span> <span class="token punctuation">[</span><br>      <span class="token string">"<span class="token interpolation"><span class="token punctuation">\(</span><span class="token content"><span class="token punctuation">.</span>repository<span class="token punctuation">.</span>full_name</span><span class="token punctuation">)</span></span>/<span class="token interpolation"><span class="token punctuation">\(</span><span class="token content"><span class="token punctuation">.</span>name</span><span class="token punctuation">)</span></span>"</span><span class="token punctuation">,</span><br>      <span class="token punctuation">.</span>repository<span class="token punctuation">.</span>owner<span class="token punctuation">.</span>login<span class="token punctuation">,</span><br>      <span class="token punctuation">.</span>repository<span class="token punctuation">.</span>name<span class="token punctuation">,</span><br>      <span class="token punctuation">.</span>path<br>    <span class="token punctuation">]</span><br>  <span class="token operator pipe">|</span> @tsv'</code></pre>
<p>I think it's always easier to stare at a script like this when we see what it's going to be processing, so here's some sample output from the API call to the search endpoint (reduced for brevity):</p>
<pre class="language-json"><code class="language-json"><span class="token punctuation">{</span><br>  <span class="token property">"total_count"</span><span class="token operator">:</span> <span class="token number">7</span><span class="token punctuation">,</span><br>  <span class="token property">"incomplete_results"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span><br>  <span class="token property">"items"</span><span class="token operator">:</span> <span class="token punctuation">[</span><br>    <span class="token punctuation">{</span><br>      <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"dump.yml"</span><span class="token punctuation">,</span><br>      <span class="token property">"path"</span><span class="token operator">:</span> <span class="token string">".github/workflows/dump.yml"</span><span class="token punctuation">,</span><br>      <span class="token property">"repository"</span><span class="token operator">:</span> <span class="token punctuation">{</span><br>        <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">331995789</span><span class="token punctuation">,</span><br>        <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"test"</span><span class="token punctuation">,</span><br>        <span class="token property">"full_name"</span><span class="token operator">:</span> <span class="token string">"qmacro-org/test"</span><span class="token punctuation">,</span><br>        <span class="token property">"owner"</span><span class="token operator">:</span> <span class="token punctuation">{</span><br>          <span class="token property">"login"</span><span class="token operator">:</span> <span class="token string">"qmacro-org"</span><span class="token punctuation">,</span><br>          <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">75827316</span><span class="token punctuation">,</span><br>          <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"Organization"</span><br>        <span class="token punctuation">}</span><span class="token punctuation">,</span><br>      <span class="token punctuation">}</span><span class="token punctuation">,</span><br>    <span class="token punctuation">}</span><span class="token punctuation">,</span><br>    <span class="token punctuation">{</span><br>      <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"main.yml"</span><span class="token punctuation">,</span><br>      <span class="token property">"path"</span><span class="token operator">:</span> <span class="token string">".github/workflows/main.yml"</span><span class="token punctuation">,</span><br>      <span class="token property">"repository"</span><span class="token operator">:</span> <span class="token punctuation">{</span><br>        <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">331995789</span><span class="token punctuation">,</span><br>        <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"showntell"</span><span class="token punctuation">,</span><br>        <span class="token property">"full_name"</span><span class="token operator">:</span> <span class="token string">"qmacro/showntell"</span><span class="token punctuation">,</span><br>        <span class="token property">"owner"</span><span class="token operator">:</span> <span class="token punctuation">{</span><br>          <span class="token property">"login"</span><span class="token operator">:</span> <span class="token string">"qmacro"</span><span class="token punctuation">,</span><br>          <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">73068</span><span class="token punctuation">,</span><br>          <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"User"</span><br>        <span class="token punctuation">}</span><span class="token punctuation">,</span><br>      <span class="token punctuation">}</span><span class="token punctuation">,</span><br>    <span class="token punctuation">}</span><span class="token punctuation">,</span><br>    <span class="token punctuation">{</span><br>      <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"build.yml"</span><span class="token punctuation">,</span><br>      <span class="token property">"path"</span><span class="token operator">:</span> <span class="token string">".github/workflows/build.yml"</span><span class="token punctuation">,</span><br>      <span class="token property">"repository"</span><span class="token operator">:</span> <span class="token punctuation">{</span><br>        <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">165207450</span><span class="token punctuation">,</span><br>        <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"qmacro"</span><span class="token punctuation">,</span><br>        <span class="token property">"full_name"</span><span class="token operator">:</span> <span class="token string">"qmacro/qmacro"</span><span class="token punctuation">,</span><br>        <span class="token property">"owner"</span><span class="token operator">:</span> <span class="token punctuation">{</span><br>          <span class="token property">"login"</span><span class="token operator">:</span> <span class="token string">"qmacro"</span><span class="token punctuation">,</span><br>          <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">73068</span><span class="token punctuation">,</span><br>          <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"User"</span><br>        <span class="token punctuation">}</span><span class="token punctuation">,</span><br>      <span class="token punctuation">}</span><span class="token punctuation">,</span><br>    <span class="token punctuation">}</span><br>  <span class="token punctuation">]</span><br><span class="token punctuation">}</span></code></pre>
<p>Now we can understand what the <code>jq</code> script is doing. It's working through the contents of the <code>items</code> array (the search results) and piping each item into an array construction. The array construction is declaring three fields, a literal string and two properties:</p>
<ul>
<li>
<p>the literal string contains two JSON properties <code>.repository.full_name</code> and <code>.name</code>, which are references with the <code>\(...)</code> syntax. They're put into a literal string so I can add a slash (<code>/</code>) between them</p>
</li>
<li>
<p>the two properties are the repository owner name and the repository name</p>
</li>
</ul>
<p>Once constructed, the array is passed to <code>@tsv</code> which puts the values into a nice tab-separated list.</p>
<blockquote>
<p>I think it's fair to say that the output from the built-in <code>jq</code> works as if the <code>--raw-output</code> flag has been specified (see the <a href="https://stedolan.github.io/jq/manual/">jq Manual</a>), which is what we want.</p>
</blockquote>
<p>This then produces the lines that we've seen earlier, i.e. ones that look like this:</p>
<pre><code>qmacro-org/test/dump.yml	qmacro-org	test	.github/workflows/dump.yml
qmacro/showntell/main.yml	qmacro	showntell	.github/workflows/main.yml
qmacro/qmacro/build.yml	qmacro	qmacro	.github/workflows/build.yml
</code></pre>
<p>These lines are then ready for piping to <code>fzf</code> in <code>main()</code>. Great!</p>
<p>Now let's move on to the second script, which is what <code>fzf</code> calls to present the previews (i.e. with <code>--preview='showgithubcontent {2} {3} {4} yaml always'</code>).</p>
<h2>The showgithubcontent script</h2>
<p>As I mentioned earlier, this was originally just another function inside the <code>workflowbrowser</code> script, but I extracted it to use outside of that script too. You'll see why in a bit.</p>
<p>Here's the script in its entirety:</p>
<pre><code>#!/usr/bin/env bash

# Takes owner, repo and path and shows content of that resource from GitHub.
# Also accepts optional language and colour parameter.
# Uses gh, base64 and bat.

declare owner=$1
declare repo=$2
declare path=$3
declare language=&quot;${4:-txt}&quot;
declare color=&quot;${5:-never}&quot;

gh api \
  --cache &quot;${GH_CACHETIME:-1h}&quot; \
  --jq '.content' \
  &quot;/repos/$owner/$repo/contents/$path&quot; \
  | base64 --decode -i - \
  | bat --color &quot;$color&quot; --theme gruvbox --plain --language &quot;$language&quot; -
</code></pre>
<p>This is so simple as to not even warrant the <code>main()</code> function based approach to organisation. At least not yet. So what does it do? It expects five parameters, that we've seen already:</p>
<ul>
<li>the repository owner name</li>
<li>the repository name</li>
<li>the path to the workflow definition file in the repository</li>
<li>what language to base any syntax highlighting upon</li>
<li>whether to show colours</li>
</ul>
<p>The last two parameters are specific to the <code>bat</code> tool, which is a posh version of <code>cat</code> - <a href="https://github.com/sharkdp/bat"><code>bat</code>'s home page</a> calls it &quot;a cat clone with wings&quot;.</p>
<p>The reason we need the first three parameters is because they're required in the call we need to the <a href="https://docs.github.com/en/rest/reference/repos#get-repository-content">GitHub Contents API</a>. With this endpoint:</p>
<pre><code>/repos/{owner}/{repo}/contents/{path}
</code></pre>
<p>we can retrieve the contents of a resource (a file) in a repository.</p>
<p>Let's have a look what this gives us, in a sample call, for the following values:</p>
<ul>
<li>owner: &quot;qmacro&quot;</li>
<li>repo: &quot;showntell&quot;</li>
<li>path: &quot;.github/workflows/main.yml&quot;</li>
</ul>
<pre><code>$ gh api /repos/qmacro/showntell/contents/.github/workflows/main.yml

{
  &quot;name&quot;: &quot;main.yml&quot;,
  &quot;path&quot;: &quot;.github/workflows/main.yml&quot;,
  &quot;size&quot;: 387,
  &quot;url&quot;: &quot;https://api.github.com/repos/qmacro/showntell/contents/.github/workflows/main.yml?ref=master&quot;,
  &quot;type&quot;: &quot;file&quot;,
  &quot;content&quot;: &quot;bmFtZTogYWRkX2FjdGl2aXR5X2NhcmQKCm9uOgogIGlzc3VlczoKICAgIHR5\ncGVzOiBvcGVuZWQKCmpvYnM6CiAgbGlzdF9wcm9qZWN0czoKICAgIHJ1bnMt\nb246IHVidW50dS1sYXRlc3QKICAgIG5hbWU6IEFzc2lnbiBuZXcgaXNzdWUg\ndG8gcHJvamVjdAogICAgc3RlcHM6CiAgICAtIG5hbWU6IENyZWF0ZSBuZXcg\ncHJvamVjdCBjYXJkIHdpdGggaXNzdWUKICAgICAgaWQ6IGxpc3QKICAgICAg\ndXNlczogcW1hY3JvL2FjdGlvbi1hZGQtaXNzdWUtdG8tcHJvamVjdC1jb2x1\nbW5AcmVsZWFzZXMvdjEKICAgICAgd2l0aDoKICAgICAgICB0b2tlbjogJHt7\nIHNlY3JldHMuR0lUSFVCX1RPS0VOIH19CiAgICAgICAgcHJvamVjdDogJ3Ax\nJwogICAgICAgIGNvbHVtbjogJ3RoaW5ncycK\n&quot;,
  &quot;encoding&quot;: &quot;base64&quot;
}
</code></pre>
<p>(Output is reduced for brevity again).</p>
<p>The content isn't what we might first expect - where's the YAML? It's Base64 encoded, so we need to grab the value of the <code>content</code> property (which we do with <code>--jq '.content'</code>) and decode it. The handy <code>base64</code> command is ideal for that.</p>
<p>Once decoded, the workflow definition YAML content is piped into <code>bat</code>, with the following parameters:</p>
<ul>
<li><code>--color &quot;$color&quot;</code> - do we want colour? In preview mode, always (which is why we pass <code>always</code> in the call from the other script) but unless we're explicit about that, <code>bat</code> won't use colour. This is because of the shell parameter expansion in the declaration of the <code>color</code> variable: <code>&quot;${5:-never}&quot;</code>, where the literal string &quot;never&quot; is used as a default value if none is supplied.</li>
<li><code>--theme gruvbox</code> - who doesn't like a little <a href="https://github.com/morhetz/gruvbox">gruvbox</a> theming?</li>
<li><code>--plain</code> - this turns off any of the <code>bat</code> &quot;chrome&quot; like line numbers and headings.</li>
<li><code>--language &quot;$language&quot;</code> - this tells <code>bat</code> about the content, in the form of a hint as to what language it is and therefore how to syntax highlight it.</li>
</ul>
<p>And don't miss the final <code>-</code> passed to <code>bat</code>, that's to tell it to read from STDIN.</p>
<p><strong>Embracing the Unix philosophy</strong></p>
<p>That'a about it for the two scripts. I've found them to be useful and have had fun creating them. Really it's just glueing together different tools, that's sort of the point, part of the Unix philosophy in general.</p>
<p>And talking of that, here's the reason I split out the <code>showgithubcontent</code> function into a separate script. It's because I wanted to be able to browse the workflow definitions, but then if I selected one, I wanted to be taken into an editor with that definition's contents. And with a proper shell (like Bash, or most other Unix shells) this is simple:</p>
<pre><code>$ workflowbrowser | xargs showgithubcontent | vim --not-a-term -
</code></pre>
<p>That is:</p>
<ol>
<li>call <code>workflowbrowser</code> and take the selected output from <code>workflowbrowser</code> (which will be the three values that <code>fzf</code> emits when I select a workflow definition) and, by piping them through to a call to <code>xargs</code>, send them as parameters to <code>showgithubcontent</code></li>
<li>this of course is a &quot;second&quot; call to <code>showgithubcontent</code> - it's been used in <code>fzf</code>'s preview window, but now we're calling it explicitly, for the selected definition, without the two extra arguments &quot;yaml&quot; and &quot;always&quot; so that the the workflow definition is output without adornment</li>
<li>that unadorned workflow definition goes to STDOUT, which is then fed through the pipe to the STDIN of <code>vim</code>, my editor, where I tell it to read from STDIN (that's the use of <code>-</code>) and, using <code>--not-a-term</code>, tell it that its startup context is not a terminal (it's a pipe) so that it won't issue any warnings along those lines</li>
</ol>
<p>Here's an example of that pipeline flow in action:</p>
<script id="asciicast-409639" src="https://asciinema.org/a/409639.js" async></script>
<p>I hope you found this useful and perhaps it will encourage you to create your own utility scripts using <code>gh</code> and <code>fzf</code>.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Producing JSON with jq for appending issue titles</title>
      <link href="https://qmacro.org/blog/posts/2021/04/13/producing-json-with-jq-for-appending-issue-titles/"/>
      <updated>2021-04-13T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2021/04/13/producing-json-with-jq-for-appending-issue-titles/</id>
      <content type="html">
        <![CDATA[
      <p><em>I learned how to use <code>jq</code> to <strong>produce</strong> JSON, while writing a script to enhance my Thinking Aloud journal entry titles.</em></p>
<p>In my <a href="https://github.com/qmacro/thinking-aloud">Thinking Aloud</a> journal, the entries are issues in a GitHub repository. To <a href="https://github.com/qmacro/thinking-aloud/issues/1">reduce friction</a> I decided to just use the current date and time for the journal entry title.</p>
<p>That's worked fine, but in the overview of the issues it wasn't really practical to pick out the one I wanted to read or edit, because all I had to go on was the timestamp. Of course, I could scan the <a href="https://github.com/qmacro/thinking-aloud/blob/main/recent.md">recent entries</a> but that would quickly become a little limiting as the number of journal entries grows.</p>
<p>In a small script <a href="https://github.com/qmacro/thinking-aloud/blob/main/preptweet">preptweet</a>, used when automatically tweeting about new entries, I was extracting the first 50 characters from the body and using that in the tweet. You can see an example in <a href="https://twitter.com/qmacro/status/1380500800879919105">this tweet</a> - &quot;I've been thinking about field naming conventions today …&quot;.</p>
<p>I thought this would be a useful string to have in the journal entry (issue) titles too, so I wrote a script <a href="https://github.com/qmacro/thinking-aloud/blob/main/appendtitle">appendtitle</a> that would do that for me for the existing issues. I have yet to decide how to modify the process of creating a new journal entry (I could just have this script run as a separate job step in the <a href="https://github.com/qmacro/thinking-aloud/blob/main/.github/workflows/process-new-entry.yaml">workflow</a> I already have, for example).</p>
<p><a href="https://github.com/qmacro/thinking-aloud/blob/main/appendtitle">appendtitle</a> contains essentially a single incantation, deliberately so, in my journey to practise my scripting. It's not the most readable but it helps me think about pipelining and how data flows through such a pipeline.</p>
<p>I thought it might be useful to share and explain, in case others are on a similar journey. In it, I'll show how I used <code>jq</code> to cleanly <em>produce</em> JSON - I normally <em>consume</em> JSON with <code>jq</code>, so this was a nice departure.</p>
<pre class="language-bash"><code class="language-bash"> <span class="token number">1</span> <span class="token comment">#!/usr/bin/env bash</span><br> <span class="token number">2</span><br> <span class="token number">3</span> <span class="token comment"># Convert journal entry issues where the issue title is currently</span><br> <span class="token number">4</span> <span class="token comment"># just the date and time stamp, by adding the first &lt;length> chars</span><br> <span class="token number">5</span> <span class="token comment"># of the issue body to the title.</span><br> <span class="token number">6</span><br> <span class="token number">7</span> <span class="token builtin class-name">readonly</span> <span class="token assign-left variable">length</span><span class="token operator">=</span><span class="token number">50</span><br> <span class="token number">8</span><br> <span class="token number">9</span> gh api <span class="token string">"/repos/:owner/:repo/issues?state=open&amp;labels=entry"</span> <span class="token punctuation">\</span><br><span class="token number">10</span>   <span class="token parameter variable">--jq</span> <span class="token string">".[] | [.number, .title, .body[0:<span class="token variable">$length</span>]+<span class="token entity" title="\&quot;">\"</span>…<span class="token entity" title="\&quot;">\"</span>] | @tsv"</span> <span class="token punctuation">\</span><br><span class="token number">11</span>   <span class="token operator">|</span> <span class="token function">grep</span> <span class="token parameter variable">-E</span> <span class="token string">'\t\d\d\d\d-\d\d-\d\d \d\d:\d\d:\d\d\t'</span> <span class="token punctuation">\</span><br><span class="token number">12</span>   <span class="token operator">|</span> <span class="token function">sed</span> <span class="token string">'s/\t/ /g'</span> <span class="token punctuation">\</span><br><span class="token number">13</span>   <span class="token operator">|</span> <span class="token keyword">while</span> <span class="token builtin class-name">read</span> <span class="token parameter variable">-r</span> number <span class="token function">date</span> <span class="token function">time</span> text<span class="token punctuation">;</span> <span class="token keyword">do</span><br><span class="token number">14</span>     <span class="token assign-left variable">newtitle</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$date</span> <span class="token variable">$time</span> <span class="token variable">$text</span>"</span><br><span class="token number">15</span>     jq <span class="token parameter variable">-n</span> <span class="token parameter variable">--arg</span> key title <span class="token parameter variable">--arg</span> value <span class="token string">"<span class="token variable">$newtitle</span>"</span> <span class="token string">'{($key):$value}'</span> <span class="token punctuation">\</span><br><span class="token number">16</span>       <span class="token operator">|</span> gh api <span class="token string">"/repos/:owner/:repo/issues/<span class="token variable">$number</span>"</span> <span class="token parameter variable">--input</span> -<br><span class="token number">17</span>     <span class="token function">sleep</span> <span class="token number">0.25</span><br><span class="token number">18</span>   <span class="token keyword">done</span></code></pre>
<p>Here's a breakdown, by line:</p>
<p>9: Invoke the GitHub API with <code>gh</code> to retrieve the open issues representing journal entries.</p>
<p>10: Use <code>gh</code>'s <code>--jq</code> flag to pass a script to pull out the issue number, current title &amp; first &lt;length&gt; characters from the body (plus an ellipsis to denote an elision). Output these values in tab-separated format.</p>
<p>So far, here's typical output produced from lines 9 and 10:</p>
<pre><code>19      2021-04-09 13:17:08 I've been thinking about field naming conventions …
18      2021-04-07 16:27:58 One consequence of using repo issues for journal e…
15      2021-04-07 09:04:01 Does it make sense to create a workflow to clean u…
</code></pre>
<p>Those are tab characters between the three columns number, timestamp and text.</p>
<p>Continuing on:</p>
<p>11: The output produced is passed via <code>grep</code> to check for a timestamp (nnnn-nn-nn nn:nn:nn) bounded on either side with tab characters (\t). This ensures that only those entries with a title that is (still) only a timestamp are processed (In constructing the pattern, I found it clearer to write out each of the <code>\d</code> digits than use something like e.g. <code>\d{4}</code> for the four-digit year).</p>
<p>12: Rather than mess around with tabs from this point on, <code>sed</code> is used to convert each tab to a space; this will keep things simple for reading each &quot;field&quot; on the next line.</p>
<p>13: The output is now passed into a <code>while</code> loop, where <code>read</code> is used to capture each field. The default delineation is whitespace, so perhaps you're thinking &quot;what happens to the words beyond the first one, for the text value on each line?&quot;. Well because there are no further variable names following <code>text</code> in the <code>read</code> invocation, <code>text</code> gets the rest of the line, not just the next whitespace separated token. In other words, taking the first output line as an example, we don't just get &quot;I've&quot; in <code>text</code>, but all of &quot;I've been thinking about field naming conventions …&quot;.</p>
<p>14: The values are marshalled into a new title format, in <code>newtitle</code>.</p>
<p>15: Using <code>jq</code>, a properly formatted chunk of JSON is produced, to prepare a payload value to pass in the GitHub API call to <a href="https://docs.github.com/en/rest/reference/issues#update-an-issue">update an issue</a>.</p>
<p>If the value of <code>newtitle</code> was &quot;2021-04-09 13:17:08 I've been thinking about field naming conventions …&quot;, then this <code>jq</code> invocation would produce this (including the whitespace):</p>
<pre class="language-json"><code class="language-json"><span class="token punctuation">{</span><br>  <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"2021-04-09 13:17:08 I've been thinking about field naming conventions …"</span><br><span class="token punctuation">}</span></code></pre>
<p>16: This JSON thus produced can be then supplied in the API call, again using <code>gh</code>, with the value <code>-</code> (classically denoting &quot;take from STDIN&quot;) for the <code>--input</code> parameter.</p>
<p>17: A short pause between API calls keeps the GitHub API endpoint sweet, and we're done.</p>
<p>This is the first time I've used <code>jq</code> to produce JSON, and it feels a lot safer than messing around with quoting, and the quotes required for the JSON format itself. Thanks <code>jq</code>, and of course thanks GitHub API!</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Mainframes, SDSF and GitHub Actions</title>
      <link href="https://qmacro.org/blog/posts/2021/04/04/mainframes-sdsf-and-github-actions/"/>
      <updated>2021-04-04T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2021/04/04/mainframes-sdsf-and-github-actions/</id>
      <content type="html">
        <![CDATA[
      <p><em>GitHub Actions workflows, mainframes and SDSF. I can't get the combination out of my head.</em></p>
<p>I started my computing adventure at the age of 11 on a minicomputer (see <a href="https://qmacro.org/2020/11/03/computer-unit-1979/">Computer Unit 1979</a>) and then IBM mainframes featured heavily in the early and formational part of my career. Job definitions, job &amp; step interdependencies, batch job execution and output management are in my blood.</p>
<p>The reliability, predictability, and perhaps even the ceremony of defining a job, submitting it to the right execution class, have it run, at some time, and then poring over the output after execution was finished, is something that still appeals to me. Even in today's world of always-on, I'd like to think that realtime, the ultimate opposite to batch, is in some senses overrated, or at least misunderstood.</p>
<p>All of my career, more or less, has revolved around SAP systems. The R in SAP R/2, which I worked with between 1987 and around 1995, stood for Realtime (and this was the name of the consulting company I joined to launch my career as a consultant / contractor, but that's a story for another time).</p>
<p><strong>Realtime vs batch</strong></p>
<p>What did realtime mean here? Well, it meant that human facing processes were exposed via screens, interaction with data was live, it happened there and then. Transactions could be executed directly. What SAP R/2 replaced was a completely batch oriented system where everything ran asynchronously and the idea of screens allowing access to and interaction with business processes was very new. Moreover, these business processes were integrated.</p>
<p>Of course, any SAP Basis person will tell you that while yes there are dynamic programs (dynpros) that allow immediate and interactive access in realtime, the batch concept is still alive and well in SAP systems. It was then in R/2 (with an overnight schedule of tens if not hundreds of interdependent jobs), and it even is today with SAP S/4HANA Cloud, and every other SAP system that is based upon the R/3 architecture. Yes, I'm talking about the batch processes, and even the update processes, that are part of the DISP+WORK design from the early 1990s.</p>
<p>So batch is still alive and well, in fact it never went away.</p>
<p>Moreover, while for very large organisations the mainframe lives on, especially in financial circles, the concept of the mainframe lives on too. <a href="http://www.winestockwebdesign.com/Essays/Eternal_Mainframe.html">The Eternal Mainframe</a> is a great essay that muses on that and more.</p>
<p><strong>Realtime vs resilient</strong></p>
<p>And in today's era, the obsession with realtime seems to be spilling over into the API world, where folks are wanting to interconnect their systems in a loosely coupled way with realtime interfaces. While <a href="https://en.wikipedia.org/wiki/Loose_coupling">loose coupling</a> is usually the right approach, realtime interfaces are a different beast. In some cases of course, synchronous communication, with blocking, is required. But in many cases it's not.</p>
<p><em>What the R should really stand for here is not Realtime, but Resilient.</em></p>
<p>(I'd like to take credit for this quotable nugget, but I have to attribute it to the person from whom I heard it first - my friend and SAP colleague <a href="https://people.sap.com/c.stasila">Craig Stasila</a>.)</p>
<p>And what does that mean, exactly? Well to me it means not synchronous, but asynchronous. Message (i.e. event) based integration. Message events that are fired by a system, with a payload, managed by a message bus, and received &amp; processed by other systems. We've looked into this a lot on our <a href="https://blogs.sap.com/2020/11/09/an-overview-of-sap-developers-video-content/#shows">Hands-on SAP Dev</a> show, in particular the <a href="https://www.youtube.com/playlist?list=PL6RpkC85SLQCf--P9o7DtfjEcucimapUf">Diving into SAP Enterprise Messaging</a> series (SAP's Enterprise Messaging service is now called Event Mesh, by the way).</p>
<p>Embracing &amp; understanding the importance of this asynchronous nature might help folks to think about the nature of batch, too. Not everything needs to be immediate. Not everything must happen as soon as something else happens. If that was the case, then why are we seeing such a massive interest and use of <a href="https://github.com/features/actions">GitHub Actions</a>, which brings the whole idea, and appeal, of batch processing to the masses.</p>
<p><strong>GitHub Actions and batch processing</strong></p>
<p>While writing this I've realised that there's another layer to GitHub Actions that adds to the appeal for me. When I first encountered batch processing, at Esso Petroleum at the start of my career, I spent many a happy hour writing Job Control Language (JCL), monitoring jobs, and obsessing over the detail of their output messages. One thing that was almost unspoken in this is that sitting at my silent terminal, I had no idea at the time where the machines were that processed my jobs, what they looked like, sounded like, nor did I have to care. They were looked after by the system operators.</p>
<p>And so it is with GitHub Actions. Unless I'm using self-hosted runners, I have no idea about the machines upon which the jobs defined in my workflows are run. I don't know where they are, whether they're real or virtual, nothing. And as long as I remain within my execution quota, I don't have to care, either. Again, that's someone else's task.</p>
<p><strong>SDSF for GitHub Actions</strong></p>
<p>Anyway, I'm not really sure where I'm going with this post. I'd started out with the intention of explaining a little bit as to why, to GitHub Actions product manager <a href="https://twitter.com/chrisrpatterson">Chris Patterson</a>'s question &quot;If you had one wish for GitHub Actions what would it be?&quot;, my answer was:</p>
<p><a href="https://twitter.com/qmacro/status/1372578449743826949">&quot;SDSF for workflow/job execution and output. Please :-)&quot;</a></p>
<p>IBM's System Display and Search Facility (<a href="https://en.wikipedia.org/wiki/SDSF">SDSF</a>) was how I navigated the output from batch jobs that had executed. How I searched, sorted, viewed, printed and purged output. How I found patterns in what was happening in the area for which I was responsible. Using a powerful and classic terminal user interface (TUI) design which fit well with the Interactive System Productivity Facility (ISPF) world where we spent our working hours.</p>
<p>I think I'll leave the explanation for why I think it would suit the GitHub Actions ecosystem, for next time. Until then, I'll leave you with a screenshot (courtesy of <a href="https://community.ibm.com/community/user/ibmz-and-linuxone/blogs/trent-balta1/2021/01/28/exploring-zos-through-zowe-zoau-ide-tools">Trent Balta and the IBM Community</a>) of SDSF in action.</p>
<p><img src="/images/2021/04/sdsf.png" alt="SDSF in action"></p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>New tmux panes and windows in the right directory</title>
      <link href="https://qmacro.org/blog/posts/2021/04/01/new-tmux-panes-and-windows-in-the-right-directory/"/>
      <updated>2021-04-01T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2021/04/01/new-tmux-panes-and-windows-in-the-right-directory/</id>
      <content type="html">
        <![CDATA[
      <p><em>I finally got round to looking into how to be in the &quot;right&quot; directory when I create a new window or pane in <code>tmux</code>. Here's what I did.</em></p>
<p>I've been starting multiple <code>tmux</code> sessions, one for each project I'm working on, and ensuring that I'm in the &quot;right&quot; base directory for each of those projects before actually creating the corresponding <code>tmux</code> session. That way, each new window or pane I open places me in that project's base directory. Which isn't too bad.</p>
<p>But I'm trying to move to a simpler workflow, and use fewer <code>tmux</code> sessions. This meant I hit on that possibly age-old issue of being in the &quot;wrong&quot; directory when I create a new window or pane, and having to <code>cd</code> to where I want to be. Which is usually <em>where I just was</em> before invoking the new window or pane command!</p>
<p>I did a bit of digging and found the answer, which was quite simple in the end - and I would have known about it with a better level of knowledge about <code>tmux</code>. I had written a short essay on that subject: <a href="https://qmacro.org/2021/03/31/deeper-connections-to-everyday-tools/">Deeper connections to everyday tools</a>, and in that essay, I'd made a reference to this new discovery.</p>
<p><a href="https://twitter.com/ceedee666/status/1377501505226477569">Christian Drumm asked</a> me today about this very thing, so I thought I'd write this short entry that I could refer to for Christian and also for others.</p>
<p>Basically it involves using the <code>-c</code> option when creating a new window or pane, and passing the value of the built-in variable <code>pane_current_path</code> (see the <a href="https://man7.org/linux/man-pages/man1/tmux.1.html">manual</a> for info).</p>
<p>I initially got this info from a <a href="https://gist.github.com/william8th/faf23d311fc842be698a1d80737d9631">gist</a> by <a href="https://gist.github.com/william8th">William Heng</a> but <a href="https://unix.stackexchange.com/a/12091/87597">this Stack Exchange answer</a> by Chris Johnsen has some great background which is worth reading too.</p>
<p>The change I made to my <code>tmux</code> configuration is in this commit:</p>
<p><a href="https://github.com/qmacro/dotfiles/pull/2/commits/2664669d5922e640b232f185e2045e412852f47c">https://github.com/qmacro/dotfiles/pull/2/commits/2664669d5922e640b232f185e2045e412852f47c</a></p>
<p>and looks like this:</p>
<pre><code>bind c new-window -c &quot;#{pane_current_path}&quot;
bind '-' split-window -c &quot;#{pane_current_path}&quot;
bind '\' split-window -h -c &quot;#{pane_current_path}&quot;
bind C new-window
bind '_' split-window
bind '|' split-window -h
</code></pre>
<p>Basically I'm now set up to enjoy the new behaviour (opening new windows and panes in the current working directory) when I use the keys I normally use:</p>
<ul>
<li><code>c</code> - new window</li>
<li><code>-</code> - new vertically split pane</li>
<li><code>\</code> - new horizontally split pane</li>
</ul>
<p>But I've added three extra bindings in case I want the old behaviour, bindings to the &quot;shifted&quot; version of those keys:</p>
<ul>
<li><code>C</code> - new window</li>
<li><code>_</code> - new vertically split pane</li>
<li><code>|</code> - new horizontally split pane</li>
</ul>
<p>I've not found myself using these extra bindings for the old behaviour yet, and I'll probably end up removing them.</p>
<p>Anyway, there you have it. Thank you William and Chris for the help!</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Deeper connections to everyday tools</title>
      <link href="https://qmacro.org/blog/posts/2021/03/31/deeper-connections-to-everyday-tools/"/>
      <updated>2021-03-31T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2021/03/31/deeper-connections-to-everyday-tools/</id>
      <content type="html">
        <![CDATA[
      <p><em>With some things, ignorance is not bliss. There are entire features of the tools I use every day that I know little about, and I want to change that.</em></p>
<p>Something mildly profound emerged from the combination two recent activities:</p>
<ul>
<li>eBay sales of items I've not used in a while</li>
<li>maintenance of my La Pavoni coffee machine</li>
</ul>
<p>The <a href="/blog/posts/2021/03/27/la-pavoni-maintenance-successful/">successful maintenance</a> of that beautifully designed manual lever espresso machine did take a while, but during it I guess I formed a deeper relationship with the device, built upon the existing connection I had already from the constant enjoyment &amp; challenge of getting everything aligned to pull a decent shot.</p>
<p>And the items I sold (SONOS speakers, an old Macbook Pro) are items I've not really had any relationship with at all. Yes, I used the speakers, but not every day, and since SONOS's <a href="https://www.fastcompany.com/90454672/this-is-disgusting-angry-sonos-customers-are-calling-for-a-boycott">meltdown</a> last year an active distancing and dislike has grown between me and the devices.</p>
<p>What was profound was that the lack of relationship I had with the stuff I just sold on eBay actually amplified the deep relationship I feel with the La Pavoni.</p>
<p><strong>Tools I use often in the kitchen</strong></p>
<p>I'd been thinking about tools I use often, since <a href="https://twitter.com/qmacro/status/1374655713331544065">noticing how worn my hand milk frother was recently</a>.</p>
<img src="/images/2021/03/milkfrother.jpeg" alt="Worn milk frother" width="200" height="138"/>
<p>I've had that milk frother for about 10 years. I've had a moka pot for about that long too - originally one from Bialetti, which I eventually replaced with one from IKEA (which is surprisingly excellent).</p>
<img src="/images/2021/03/mokapot.png" alt="IKEA RÅDIG moka pot" width="147" height="155"/>
<p>And I've had the La Pavoni Professional Lusso for almost 2 years.</p>
<img src="/images/2021/03/lapavoni.jpeg" alt="La Pavoni and espresso cup" width="300" height="400"/>
<p>Give or take, I've used each of these items <strong>every single day</strong> since I've had them. Often more than once per day. (In case you're wondering, I make M's latte with the moka pot and froth the milk manually, as that's how she prefers it, and I make my espresso with the La Pavoni).</p>
<p>These are just examples of course, but they're very visceral because I use all of them with my hands and what they produce is also consumed by me and M.</p>
<p>There's something special about tools like this. The bond, the attachment, the relationship that builds is more something than nothing. Anyway, before I get too philosophical, I'll get to the other half of this post, which is about tools I use at work.</p>
<p><strong>Tools I use often at work</strong></p>
<p>I like the command line. Give me a terminal over a GUI any day. The command line is a rich and powerful environment because of the expressive nature and the closeness you feel to the things you're trying to do (or manipulate).</p>
<p>That power comes from the combination of two things, the shell, and the commands available to you in your path (for more on the shell, see <a href="/blog/posts/2020/12/28/waiting-for-jobs-and-the-concept-of-the-shell/">Waiting for jobs, and the concept of the shell</a>).</p>
<p>Without thinking too hard, here's a list of commands, of tools, that I use in the context of the shell, every single day:</p>
<ul>
<li><code>vim</code> (editor)</li>
<li><code>tmux</code> (terminal multiplexer)</li>
<li><code>curl</code> (HTTP client)</li>
<li><code>fzf</code> (fuzzy finder)</li>
<li><code>jq</code> (JSON processor)</li>
</ul>
<p>(One could say that the combination of <code>vim</code>, <code>tmux</code> and the shell is my IDE.)</p>
<p>Of course, I use other commands too, and many Bash shell builtins &amp; features, but I'd say these are tools that I find essential.</p>
<p><strong>More learning required</strong></p>
<p>As well as being daily drivers, regardless of the task at hand, what else do these tools have in common?</p>
<p>Well, to be honest - there's still much that I don't know about them.</p>
<p>In many ways, one could argue that these tools represent the zenith of achievement in their area:</p>
<ul>
<li>there are few editors as powerful or accomplished as <code>vim</code></li>
<li><code>tmux</code> is the de facto standard for managing terminal sessions</li>
<li><code>curl</code> is possibly the most popular HTTP client mechanism out there, in command line tool form as well as in library form</li>
<li>someone <a href="https://lobste.rs/s/nsfdaw/improving_shell_workflows_with_fzf#c_2um216">said this</a> about <code>fzf</code> recently, and I tend to agree: &quot;<em>I don’t think any other single cli tool has ever had such a big and positive impact on my workflow than fzf has, it’s really a great piece of work</em>&quot;.</li>
<li>while there are other great options such as <code>fx</code>, it's <code>jq</code> that everyone turns to, to handle JSON data on the command line</li>
</ul>
<p>So while at least the La Pavoni machine has moving parts, it's still a block of stone compared to these tools, which all have such rich and varied features.</p>
<p>Here are a few example of what I've only recently discovered, or perhaps uncovered, with these tools.</p>
<ul>
<li>I managed to write some Vimscript to call <a href="https://github.com/mvdan/sh"><code>shfmt</code></a> to pretty-print my shell scripts on save</li>
<li>I <a href="/blog/posts/2021/04/01/new-tmux-panes-and-windows-in-the-right-directory/">worked out</a> how to get <code>tmux</code> to open a new window or pane in the same directory as I was when I invoked the open command</li>
<li>Having read <a href="https://seb.jambor.dev/posts/improving-shell-workflows-with-fzf/">Improving shell workflows with fzf</a> I learned about how to configure my own previews</li>
<li>I remembered (I'd forgotten) that I can use <code>--data-urlencode</code> to have values automatically URL encoded with <code>curl</code></li>
<li>I'm only just now starting to feel comfortable enough to embrace <code>jq</code> as a complete language, with my <a href="https://github.com/qmacro/dotfiles/blob/master/scripts/dwr#L21-L38">first script with function definitions</a></li>
</ul>
<p>As those lovely folks that join my live stream sessions* know - I'm not afraid of admitting that &quot;I've no idea what I'm doing&quot;.</p>
<p>*I live stream usually weekly on Friday mornings UK time - look for the Hands-on SAP Dev episodes on the <a href="https://www.youtube.com/channel/UCNfmelKDrvRmjYwSi9yvrMg">SAP Developers</a> YouTube channel.</p>
<p>At the beginning of last year, along with other folks in the <a href="https://community.sap.com">SAP Community</a>, I wrote up <a href="https://blogs.sap.com/2020/01/12/my-learning-list-for-2020/">my learning list for 2020</a>. In it, I had a section titled &quot;Understanding core things better&quot;, and while that contained the kernel of the idea that I want to improve my understanding of fundamental things, I think I missed the mark somewhat. I failed to spot the tools that were right in front of me (or my fingers).</p>
<p>So I guess this is a reminder for me that I'm nowhere near done. That's fine, continuous learning is a thing, and as it is for many others, it's my thing.</p>
<p>Triggered by some mundane moments recently (eBay activities, gasket maintenance, the wearing thin of a simple wooden handle), I've come to realise what I need to do. And that is far from mundane. It won't be a short process -- I think mastery of these tools will only come over years -- but the journey will enjoyable and rich from the outset.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Two-phase video uploads with YouTube API and curl</title>
      <link href="https://qmacro.org/blog/posts/2021/03/30/two-phase-video-uploads-with-youtube-api-and-curl/"/>
      <updated>2021-03-30T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2021/03/30/two-phase-video-uploads-with-youtube-api-and-curl/</id>
      <content type="html">
        <![CDATA[
      <p><em>TIL how to use the YouTube API to upload a video, with <code>curl</code>, using a two-phase approach.</em></p>
<p>I'm becoming more familiar with the YouTube API surface area, and a task recently required me to look into an efficient way of uploading videos to a YouTube channel. While I managed the upload technically, it was ultimately in vain due to a recent <a href="https://developers.google.com/youtube/v3/revision_history#release_notes_07_28_2020">change to the terms of service</a>. But it's still worth sharing the two-phase approach that I was able to take.</p>
<p>The YouTube Data API has a <a href="https://developers.google.com/youtube/v3/docs/videos/insert">Videos: insert</a> facility. It's worth reading through this, and, if you get the chance, through other areas of the API, because they're quite similar, and what appeared initially a little overwhelming to me has become more familiar.</p>
<p>The approach revolves around the following flow:</p>
<ol>
<li>prepare a <a href="https://developers.google.com/youtube/v3/docs/videos#resource">video resource</a> - this is a JSON structure where you put your video metadata</li>
<li>POST this JSON structure to the API endpoint, and expect a Location header in the response</li>
<li>POST the binary content of the video itself to the URL that the Location header pointed to</li>
</ol>
<p>Here's a brief example based on a throwaway script I created to use the API.</p>
<p><strong>Preparing the video resource</strong></p>
<p>I don't like writing JSON by hand, I prefer writing YAML and then having it converted to JSON on the fly. Here's a function I wrote to produce the video resource:</p>
<pre class="language-bash"><code class="language-bash"><span class="token function-name function">videoresource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br>  yq e <span class="token parameter variable">-j</span> <span class="token parameter variable">-I</span><span class="token operator">=</span><span class="token number">0</span> - <span class="token operator">&lt;&lt;</span><span class="token string">EODATA<br>snippet:<br>  categoryId: 28<br>  title: The video title<br>  description: |<br>    A longer description that can run over<br>    several lines if needed. This is the text<br>    that appears beneath the video on YouTube.<br>  tags:<br>    - sap<br>    - bash<br>    - jq<br>    - scripting<br>    - btp<br>status:<br>  selfDeclaredMadeForKids: False<br>  privacyStatus: Unlisted<br>recordingDetails:<br>  recordingDate: 2018-03-31T00:00:00Z<br>EODATA</span><br><span class="token punctuation">}</span></code></pre>
<p>I'm using <code>yq</code> to evaluate (<code>e</code>) the YAML and emit JSON (<code>-j</code>). The <code>-I=0</code> tells <code>yq</code> to put all the JSON output on a single line (by default it will nicely pretty-print it with whitespace).</p>
<p><strong>Posting the JSON video resource</strong></p>
<p>In making a POST request to the <a href="https://developers.google.com/youtube/v3/docs/videos/insert">Videos: insert</a> endpoint, you need to specify the <code>part</code> parameter, which, amongst other things, describes what you're sending in the video resource. I prepare my <code>part</code> parameter like this (and yes, I know I should URL encode the values, but hey, it's a throwaway script and it worked):</p>
<pre class="language-bash"><code class="language-bash"><span class="token function-name function">urlparameters</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br>  <span class="token function">paste</span> <span class="token parameter variable">-s</span> -d<span class="token string">'&amp;'</span> - <span class="token operator">&lt;&lt;</span><span class="token string">EOPARM<br>part=snippet,status,recordingDetails<br>notifySubscribers=False<br>uploadType=resumable<br>EOPARM</span><br><span class="token punctuation">}</span></code></pre>
<p>As well as adding the optional parameter <code>notifySubscribers</code> I also added the <code>uploadType</code> parameter. While not directly documented on the <a href="https://developers.google.com/youtube/v3/docs/videos/insert">Videos: insert</a> page, it appears in the <a href="https://developers.google.com/youtube/v3/docs/videos/insert#ruby">Ruby code sample</a> there and seems to be quite important.</p>
<p>Using the two functions thus defined, it's a straightforward matter of using the Swiss Army toolchain of HTTP clients, the venerable <code>curl</code>:</p>
<pre class="language-bash"><code class="language-bash"><span class="token function">curl</span> <span class="token punctuation">\</span><br>  <span class="token string">"https://www.googleapis.com/upload/youtube/v3/videos?<span class="token variable"><span class="token variable">$(</span>urlparameters<span class="token variable">)</span></span>"</span> <span class="token punctuation">\</span><br>  <span class="token parameter variable">--verbose</span> <span class="token punctuation">\</span><br>  <span class="token parameter variable">--header</span> <span class="token string">"Authorization: Bearer <span class="token variable"><span class="token variable">$(</span>tget<span class="token variable">)</span></span>"</span> <span class="token punctuation">\</span><br>  <span class="token parameter variable">--header</span> <span class="token string">"Accept: application/json"</span> <span class="token punctuation">\</span><br>  <span class="token parameter variable">--header</span> <span class="token string">"Content-Type: application/json"</span> <span class="token punctuation">\</span><br>  <span class="token parameter variable">--data</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span>videoresource<span class="token variable">)</span></span>"</span></code></pre>
<p>You'll need to supply an OAuth access token as the value for the Bearer token in the <code>Authorization</code> header - I want to focus on the actual two-phase upload here so I'll leave the <code>tget</code> script that I have for another time.</p>
<p>Here's a slightly redacted snippet of the HTTP request and response:</p>
<pre><code>&gt; POST /upload/youtube/v3/videos?part=snippet... HTTP/2
&gt; Host: www.googleapis.com
&gt; User-Agent: curl/7.64.1
&gt; Authorization: Bearer ya23supersekritaccesstokenhunter2
&gt; Accept: application/json
&gt; Content-Type: application/json
&gt; Content-Length: 111
&gt;
&lt; HTTP/2 200
&lt; content-type: text/plain; charset=utf-8
&lt; content-type: application/json; charset=UTF-8
&lt; x-guploader-uploadid: ABg5...
&lt; location: https://www.googleapis.com/upload/youtube/v3/videos?part=snippet...&amp;upload_id=ABg5someuniqueuploadidentifier
&lt; content-length: 0
&lt; date: Tue, 30 Mar 2021 07:14:47 GMT
&lt; server: UploadServer
</code></pre>
<p>While there are a couple of odd aspects to that HTTP response (see below), what we're looking for here is the Location header. The URL there is the one to which we must now send the binary data of the video.</p>
<p><strong>Sending the binary data</strong></p>
<p>In the first phase we sent the JSON representation of the video resource, the video's metadata, effectively. In this second phase we now send the video content itself, to the URL in the Location header in the first phase's response.</p>
<p>With <code>curl</code>, sending binary data in a file is easier than you think:</p>
<pre class="language-bash"><code class="language-bash"><span class="token function">curl</span> <span class="token punctuation">\</span><br>  <span class="token string">"https://www.googleapis.com/upload/youtube/v3/videos?part=snippet...&amp;upload_id=ABg5someuniqueuploadidentifier"</span> <span class="token punctuation">\</span><br>  <span class="token parameter variable">--header</span> <span class="token string">"Authorization: Bearer <span class="token variable"><span class="token variable">$(</span>tget<span class="token variable">)</span></span>"</span> <span class="token punctuation">\</span><br>  --data-binary @videofile.mp4</code></pre>
<p><strong>Wrapping up</strong></p>
<p>That's pretty much it. I must say, I have struggled to get my brain around some of the YouTube API surface area, but the mist is starting to clear. If you're like me and also trying to grok things, perhaps this post will help a little.</p>
<p>Oh yes, and those odd aspects to the first phase HTTP response earlier?</p>
<p>Well, for a start, why are there two different Content-Type headers?</p>
<p>More importantly though, sending an HTTP 200 response to the request seems a little suspect. It's HTTP status <a href="https://tools.ietf.org/html/rfc2616#section-10.2.2">201 CREATED</a> that is appropriate here, not <a href="https://tools.ietf.org/html/rfc2616#section-10.2.1">200 OK</a>. And while a Location header in an HTTP response is appropriate (and more or less required) with a 201 CREATED status, with a 200 OK status it is not.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>La Pavoni maintenance successful</title>
      <link href="https://qmacro.org/blog/posts/2021/03/27/la-pavoni-maintenance-successful/"/>
      <updated>2021-03-27T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2021/03/27/la-pavoni-maintenance-successful/</id>
      <content type="html">
        <![CDATA[
      <p><em>I've successfully carried out maintenance on my La Pavoni espresso machine, and you can too. Here are some notes that may help.</em></p>
<p>I'd been slightly apprehensive about replacing the gaskets on my La Pavoni lever espresso machine, as I'm not particularly skilled at this kind of thing and didn't want to break anything. But I've just gone through the process and things seem to have worked out OK, and I wanted to share that information - because if I can do it, you can too.</p>
<p><img src="/images/2021/03/lapavonimaintenance.jpeg" alt="My La Pavoni in mid-maintenance"></p>
<h2>Why I did it</h2>
<p>I'd started to notice some leakage in the grouphead - once the machine was up to temperature and pressure, water would drip out into the drip tray (or cup). Sometimes only a few drops; but at other times almost up to an espresso cup's worth.</p>
<p>Related, I'm sure, was the fact that the lever action, both up and down, was far from smooth. It was, how can I put it, bumpy and uneven, as though something was rubbing or catching. The odd thing is that because this happened over time, I didn't actually notice it in the early stages. But it became quite severe and I guessed it was a gasket issue - which was very likely related to the leakage too.</p>
<h2>Learning how to do it</h2>
<p>I watched and re-watched various videos on YouTube, and found that this one from Sam Stiles was the most helpful: <a href="https://www.youtube.com/watch?v=DwLkxOpXSOg">La Pavoni- 5 piece gasket replacement</a>. I must have watched that one at least 7 or 8 times before I started.</p>
<h2>What I ordered</h2>
<p>I ordered a <a href="https://www.theespressoshop.co.uk/en/La-Pavoni-Lever-Grouphead-Service-Kit-New-Group/m-2791.aspx">La Pavoni Lever Grouphead Service Kit (New Group)</a> from The Espresso Shop. I chose this to order as I wasn't sure what I needed, and in fact it came with some parts that were a nice bonus (more on that shortly).</p>
<p>Following the process demonstrated very ably by William Stiles in the video, I managed to remove the lever and then the grouphead, and then the piston.</p>
<h2>Tools</h2>
<p>Having watched how William used his tools, I ordered a <a href="https://www.amazon.co.uk/gp/product/B0818WLSGS/">set of snap ring pullers</a> to be able to remove the snap ring holding the piston shaft gasket in place.</p>
<p><img src="/images/2021/03/snapringpullers.png" alt="Snap ring pullers"></p>
<p>Having seen one used in another video, I also ordered a cheap <a href="https://www.amazon.co.uk/gp/product/B00G3CCJ94/">hook and pick set</a>. I wasn't entirely sure I'd need them but in fact they were very handy to have - I found the 90 degree angled one useful for prying the old gaskets off, and for retrieving the aforementioned piston shaft gasket.</p>
<p><img src="/images/2021/03/hookandpickset.png" alt="Hook and pick set"></p>
<p>I already had a rubber mallet so with the arrival of those online purchases, I was all set.</p>
<h2>Observations</h2>
<p>I went slowly and carefully, and everything pretty much went as William described. Here are some observations and experiences that I thought might be helpful.</p>
<p><strong>Lever attachment</strong></p>
<p>The lever attachment section was pretty dirty - especially the bolts and the roller nut; while I cleaned the lever itself, and the top of the grouphead, I didn't need to clean the bolts or the roller nut, as the service kit included new ones, and also new clips (called &quot;circlips&quot;, which was new to me) that hold the bolts in place.</p>
<p><strong>Removing the piston</strong></p>
<p>It was quite difficult to remove the piston from the grouphead; I whacked it with the rubber mallet just like William did, with some force, but it wasn't budging.</p>
<p>But after removing the large gasket at the bottom of the grouphead, the one holding the shower screen in (i.e. the one that the top of the portafilter touches when you attach it when about to pull a shot) ... one more whack with the mallet did it and it came out much more easily.</p>
<p>With it came a small amount of water - luckily, I'd placed a towel where the drip tray usually goes, not for any water, but to prevent the piston scratching the chrome as it shot out of the bottom.</p>
<p><strong>Cleaning the piston</strong></p>
<p>I made sure to clean each and every part I could get access to, but the piston itself was by far the most grimy. I spent about 10 minutes with some hot soapy water and a gentle panscrub to remove a layer, which was quite greasy (from the coffee oils, I guess).</p>
<p>This was after removing the old piston gaskets, which looked pretty knackered. I found the pick set was useful for this, by the way.</p>
<p><strong>Replacing the piston gaskets</strong></p>
<p>After removing the piston, I found that this was one of the hardest things to do. It was easy enough to pry the old gaskets off, but the new ones weren't for going on easily. In another video, I saw that the person had pre-soaked the gaskets in warm water for 5 minutes to make them a little more pliable.</p>
<p>Doing this helped, but it still took me a couple of attempts. First of all I managed to get one on, but when I looked, it had twisted around and the &quot;groove&quot; was facing outwards. So I had to remove it and try again.</p>
<p>Removing it was difficult too, I didn't want to use the pick, or even a flathead screwdriver as they both had sharp bits and I didn't want to damage the new gaskets. But then I realised I could use the thin end of a teaspoon. Smooth, and, as it turns out, ideal!</p>
<p>I made sure I put the gaskets on as William had instructed, i.e. like the shape of a guitar body.</p>
<p><strong>The piston shaft gasket, washer and snap ring replacement</strong></p>
<p>Getting to the piston shaft gasket was fiddly but doable - mostly thanks to one of the snap ring pullers in the set I bought. Definitely recommended. I've no idea how I would have removed the snap ring without it, and I'm pretty certain I would have had no chance to put it back either.</p>
<p>By the way, the service kit also included a new snap ring, plus the washer that sits between the ring and the gasket. That was nice, as both the ring and washer were quite dirty and some limescale had built up there too. The gasket itself was pretty decrepit, at least as worn as the piston gaskets, if not worse.</p>
<p><strong>Re-inserting the piston</strong></p>
<p>When I was ready to re-insert the piston, I made sure to lightly grease the piston itself (around the head, including the gaskets), and put a small amount on the shaft. This helped with the insertion, but only after I'd fiddled around with a spoon to squash in the flanged part of the topmost piston gasket so it would go back into the grouphead.</p>
<p>You see William doing this, but as he did it so deftly, I didn't notice at first. It took me a minute or so to get this done.</p>
<p><strong>Re-attaching the lever</strong></p>
<p>Once the piston was in, the lever re-attachment was pretty easy. One thing I found fascinating is that the lower of the two nuts that are screwed onto the top of piston shaft is to provide an appropriate &quot;stop&quot; point so that the piston doesn't go too low. I found that I had to adjust that nut a little bit as, later, when I attached the portafilter, the lever handle was touching the portafilter handle.</p>
<p>One thing that was lovely to see - and feel - was the huge difference this maintenance made. In both directions, the lever action (and more importantly piston action) was totally smooth, I couldn't believe how much better it was.</p>
<p><strong>Re-attaching the shower screen and filter holder gasket</strong></p>
<p>The final task was to re-attach the screen at the bottom of the grouphead. I say &quot;re-attach&quot;, but in fact the service kit also came with a new one, so I used that.</p>
<p>Regarding the gasket - there were two in the service kit - one thinner one with a round cross-section, and one fatter one with a U cross-section. I guessed (correctly, I think) that it was the fatter one that I needed, based on the size of the old one that I'd removed.</p>
<p>The idea is that you slide it over the screen, from the bottom of the screen up to the lip, first, and then insert both into the bottom of the grouphead.</p>
<p>But as this fatter one had a U cross-section, there was a chance that I'd slide it up and insert it the wrong way.</p>
<p>And I did.</p>
<p>First of all I'd put it in with the &quot;flat&quot; part (the top of the U) facing upwards up into the grouphead. However, I couldn't get the portafilter in. After a few moments head scratching, I realised that the gasket must be the wrong way round and that the top of the U was preventing it from being pushed far enough up.</p>
<p>I pulled it gently back out (using the smooth edge of the teaspoon again) and slid it back over the screen, this time so that the flat part of the U was facing downwards (like this: ∩) and would come into contact with the top of the portafilter when inserted.</p>
<p>This was much better, and I could use the portafilter (without the basket, as William demonstrated) to push the screen and gasket up into the grouphead.</p>
<p>Update: I realised after posting this, and re-examining the schematic diagram that came in the service kit, that the &quot;other&quot; gasket was perhaps not an alternative filter holder gasket, but a group sleeve gasket - item number 77 in the schematic (see later for a section of that diagram). The group sleeve is the light-coloured plastic or bakelite cylinder inside of the grouphead, inside which the piston moves. I couldn't get this off as I didn't have the right tool, but I'd decided that that was fine, I'd do that next time. Anyway, I think I now realise what this &quot;spare&quot; gasket is for.</p>
<p><strong>The group to boiler gasket</strong></p>
<p>I didn't forget to replace the gasket between the grouphead and the boiler itself, that was the easiest part. It's important to note here, however, that I heeded William's advice not to over-tighten the two bolts that hold the grouphead onto the boiler. On tightening them, I came to feel a natural &quot;stop&quot; and didn't apply any further torque.</p>
<h2>Conclusion</h2>
<p>The entire process took about 90 mins, as I was going very slowly and also re-watching parts of the video as needed. I'm not very dextrous but managed to complete the service successfully.</p>
<p>I thought this experience and process was worth sharing, especially for folks that might be in my position right now - thinking or knowing you need to do it but being a little apprehensive.</p>
<p>It's doable, and definitely worth it!</p>
<p><img src="/images/2021/03/schematic.png" alt="La Pavoni schematic diagram">.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Mass deletion of GitHub Actions workflow runs</title>
      <link href="https://qmacro.org/blog/posts/2021/03/26/mass-deletion-of-github-actions-workflow-runs/"/>
      <updated>2021-03-26T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2021/03/26/mass-deletion-of-github-actions-workflow-runs/</id>
      <content type="html">
        <![CDATA[
      <p><em>Implementing a simple cleanup script for workflow runs, using <code>gh</code>, <code>jq</code>, <code>fzf</code> and the GitHub API</em></p>
<p>Yesterday, while <a href="https://github.com/qmacro/thinking-aloud/issues/13">thinking aloud</a>, I was wondering how best to mass-delete logs from GitHub Actions workflow runs. Such a feature isn't available in the Web based Actions UI and my lack of competence in the Actions area means that I have a lot of cruft from my trial and error approach to writing and executing workflows.</p>
<p><strong>The GitHub Workflow Runs API</strong></p>
<p>I knew the answer probably was in the GitHub API, and it was - in the form of the <a href="https://docs.github.com/en/rest/reference/actions#workflow-runs">Workflow Runs</a> API. There are various endpoints that follow a clean and logical design. Workflow runs are repo specific, and to list them, the following API endpoint is available to access via the GET method:</p>
<pre><code>GET /repos/{owner}/{repo}/actions/runs
</code></pre>
<p>Following this straightforward URL-space design, a deletion is possible thus:</p>
<pre><code>DELETE /repos/{owner}/{repo}/actions/runs/{run_id}
</code></pre>
<p>Incidentally, I like the use of &quot;owner&quot; here - because a repo can belong to an individual GitHub account (such as <a href="https://github.com/qmacro">qmacro</a>) or an organisation (such as <a href="https://github.com/SAP-samples">SAP-samples</a>), and &quot;owner&quot; is a generic term that covers both situations and has the right semantics.</p>
<p><strong>Requesting the workflow run information with <code>gh</code></strong></p>
<p>To make use of these API endpoints, I used the excellent <code>gh</code> <a href="https://github.com/cli/cli">GitHub CLI</a>, specifically the <a href="https://cli.github.com/manual/gh_api">api</a> facility. Once <a href="https://cli.github.com/manual/gh_auth">authenticated</a>, it's super easy to make API calls; to retrieve the workflow runs for the <code>qmacro/thinking-aloud</code> repo, it's as simple as this (some pretty-printed output is also shown here):</p>
<pre class="language-shell"><code class="language-shell"><span class="token punctuation">;</span> gh api /repos/qmacro/thinking-aloud/actions/runs<br><span class="token punctuation">{</span><br>  <span class="token string">"total_count"</span><span class="token builtin class-name">:</span> <span class="token number">22</span>,<br>  <span class="token string">"workflow_runs"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span><br>    <span class="token punctuation">{</span><br>      <span class="token string">"id"</span><span class="token builtin class-name">:</span> <span class="token number">686610826</span>,<br>      <span class="token string">"name"</span><span class="token builtin class-name">:</span> <span class="token string">"Generate Atom Feed"</span>,<br>      <span class="token string">"node_id"</span><span class="token builtin class-name">:</span> <span class="token string">"MDExOldvcmtmbG93UnVuNjg2NjEwODI2"</span>,<br>      <span class="token string">"head_branch"</span><span class="token builtin class-name">:</span> <span class="token string">"main"</span>,<br>      <span class="token string">"head_sha"</span><span class="token builtin class-name">:</span> <span class="token string">"24822bfb34573c0dc2fb6b0f83c42a1752a324d9"</span>,<br>      <span class="token string">"run_number"</span><span class="token builtin class-name">:</span> <span class="token number">13</span>,<br>      <span class="token string">"event"</span><span class="token builtin class-name">:</span> <span class="token string">"issues"</span>,<br>      <span class="token string">"status"</span><span class="token builtin class-name">:</span> <span class="token string">"completed"</span>,<br>      <span class="token string">"conclusion"</span><span class="token builtin class-name">:</span> <span class="token string">"skipped"</span>,<br>      <span class="token punctuation">..</span>.</code></pre>
<p><strong>Making sense of the response with <code>jq</code></strong></p>
<p>The response from the API has a JSON representation and a straightfoward but rich set of details. This is where <code>jq</code> comes in. I started with just pulling out values for a few properties like this:</p>
<pre class="language-shell"><code class="language-shell"><span class="token punctuation">;</span> gh api /repos/qmacro/thinking-aloud/actions/runs <span class="token punctuation">\</span><br><span class="token operator">></span> <span class="token operator">|</span> jq <span class="token parameter variable">-r</span> <span class="token string">'.workflow_runs[] | [.id, .conclusion, .name] | @tsv'</span> <span class="token punctuation">\</span><br><span class="token operator">></span> <span class="token operator">|</span> <span class="token function">head</span> <span class="token parameter variable">-5</span><br><span class="token number">686610826</span>       skipped Generate Atom Feed<br><span class="token number">686610824</span>       skipped Tweet new entry<br><span class="token number">686610823</span>       skipped Render <span class="token function">most</span> recent entries<br><span class="token number">686471644</span>       success Render <span class="token function">most</span> recent entries<br><span class="token number">686157878</span>       success Render <span class="token function">most</span> recent entries</code></pre>
<blockquote>
<p>There's built-in support for pagination with <code>gh api</code>, with the <code>--paginate</code> switch, which is handy.</p>
</blockquote>
<p>Breaking the <code>jq</code> invocation down, we have:</p>
<table>
<thead>
<tr>
<th>Part</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>-r</code></td>
<td>Tells <code>jq</code> to output &quot;raw&quot; values, rather than JSON structures</td>
</tr>
<tr>
<td><code>.workflow_runs[]</code></td>
<td>Process each of the entries in the <code>workflow_runs</code> array</td>
</tr>
<tr>
<td><code>[.id, .conclusion, .name]</code></td>
<td>Show values for these three properties</td>
</tr>
<tr>
<td><code>@tsv</code></td>
<td>Convert everything into tab separated values</td>
</tr>
</tbody>
</table>
<p>Notice the use of the <code>|</code> symbol too - the output of <code>.workflow_runs[]</code> is piped into the selection of properties, and the output of that is piped further into the call to the builtin <code>@tsv</code> mechanism.</p>
<p>I ended up <a href="https://github.com/qmacro/dotfiles/blob/230c6df494f239e9d1762794943847816e1b7c32/scripts/dwr#L21-L38">using this approach</a>, but in a slightly expanded way, using a couple of helper functions:</p>
<ul>
<li>one to make the values for the <code>.created_at</code> property easier to read (for example changing &quot;2021-03-26T09:10:11Z&quot; into &quot;2021-03-26 09:10:11&quot;)</li>
<li>the other to convert the values for the <code>.conclusion</code> property into simpler and shorter terms</li>
</ul>
<pre class="language-jq"><code class="language-jq"><span class="token keyword">def</span> <span class="token function">symbol</span><span class="token punctuation">:</span><br>  <span class="token c-style-function function">sub</span><span class="token punctuation">(</span><span class="token string">"skipped"</span><span class="token punctuation">;</span> <span class="token string">"SKIP"</span><span class="token punctuation">)</span> <span class="token operator pipe">|</span><br>  <span class="token c-style-function function">sub</span><span class="token punctuation">(</span><span class="token string">"success"</span><span class="token punctuation">;</span> <span class="token string">"GOOD"</span><span class="token punctuation">)</span> <span class="token operator pipe">|</span><br>  <span class="token c-style-function function">sub</span><span class="token punctuation">(</span><span class="token string">"failure"</span><span class="token punctuation">;</span> <span class="token string">"FAIL"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br><br><span class="token keyword">def</span> <span class="token function">tz</span><span class="token punctuation">:</span><br>  <span class="token c-style-function function">gsub</span><span class="token punctuation">(</span><span class="token string">"[TZ]"</span><span class="token punctuation">;</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br><br><span class="token punctuation">.</span>workflow_runs<span class="token punctuation">[</span><span class="token punctuation">]</span><br>  <span class="token operator pipe">|</span> <span class="token punctuation">[</span><br>      <span class="token punctuation">(</span><span class="token punctuation">.</span>conclusion <span class="token operator pipe">|</span> symbol<span class="token punctuation">)</span><span class="token punctuation">,</span><br>      <span class="token punctuation">(</span><span class="token punctuation">.</span>created_at <span class="token operator pipe">|</span> tz<span class="token punctuation">)</span><span class="token punctuation">,</span><br>      <span class="token punctuation">.</span>id<span class="token punctuation">,</span><br>      <span class="token punctuation">.</span>event<span class="token punctuation">,</span><br>      <span class="token punctuation">.</span>name<br>    <span class="token punctuation">]</span><br>  <span class="token operator pipe">|</span> @tsv</code></pre>
<p><strong>Presenting the list with <code>fzf</code></strong></p>
<p>Now all that was required was to present the list of workflow runs in a list, for me to choose which ones to delete. The wonderful <code>fzf</code> came to the rescue here. If you've not heard of <code>fzf</code>, go and read all about <a href="https://github.com/junegunn/fzf">the command line fuzzy-finder</a> right now. I've written a couple of posts on this very blog about <code>fzf</code> basics too:</p>
<ul>
<li><a href="https://qmacro.org/autodidactics/2021/02/02/fzf-the-basics-1-layout/">fzf - the basics part 1 - layout</a></li>
<li><a href="https://qmacro.org/autodidactics/2021/02/07/fzf-the-basics-2-search-results/">fzf - the basics part 2 - search results</a></li>
</ul>
<p>This is how I combined the <code>gh</code>, <code>jq</code> and <code>fzf</code> invocations, inside a <a href="https://github.com/qmacro/dotfiles/blob/230c6df494f239e9d1762794943847816e1b7c32/scripts/dwr#L43-L49"><code>selectruns</code></a> function:</p>
<pre class="language-shell"><code class="language-shell">gh api <span class="token parameter variable">--paginate</span> <span class="token string">"/repos/<span class="token variable">$repo</span>/actions/runs"</span> <span class="token punctuation">\</span><br>  <span class="token operator">|</span> jq <span class="token parameter variable">-r</span> <span class="token parameter variable">-f</span> <span class="token operator">&lt;</span><span class="token punctuation">(</span>jqscript<span class="token punctuation">)</span> <span class="token punctuation">\</span><br>  <span class="token operator">|</span> fzf <span class="token parameter variable">--multi</span></code></pre>
<p>With the <code>--multi</code> switch, <code>fzf</code> allows the selection of more than one item.</p>
<p>Then it was just a case of processing each selected item, and making use of that other API endpoint we saw earlier inside a <a href="https://github.com/qmacro/dotfiles/blob/230c6df494f239e9d1762794943847816e1b7c32/scripts/dwr#L51-L60"><code>deleterun</code></a> function, like this:</p>
<pre class="language-shell"><code class="language-shell"><span class="token builtin class-name">local</span> run <span class="token function">id</span> result<br><span class="token assign-left variable">run</span><span class="token operator">=</span><span class="token variable">$1</span><br><span class="token assign-left variable">id</span><span class="token operator">=</span><span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">cut</span> <span class="token parameter variable">-f</span> <span class="token number">3</span> <span class="token operator">&lt;&lt;&lt;</span> <span class="token string">"<span class="token variable">$run</span>"</span><span class="token variable">)</span></span>"</span><br>gh api <span class="token parameter variable">-X</span> DELETE <span class="token string">"/repos/<span class="token variable">$repo</span>/actions/runs/<span class="token variable">$id</span>"</span><br><span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token variable">$?</span> <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token assign-left variable">result</span><span class="token operator">=</span><span class="token string">"OK!"</span> <span class="token operator">||</span> <span class="token assign-left variable">result</span><span class="token operator">=</span><span class="token string">"BAD"</span><br><span class="token builtin class-name">printf</span> <span class="token string">"%s<span class="token entity" title="\t">\t</span>%s<span class="token entity" title="\n">\n</span>"</span> <span class="token string">"<span class="token variable">$result</span>"</span> <span class="token string">"<span class="token variable">$run</span>"</span><span class="token punctuation">)</span></code></pre>
<p>The use of <code>cut</code> was to pick out the <code>id</code> property in the list, as presented to (and selected via) <code>fzf</code>; the list is tab separated (thanks to <code>@tsv</code>) and <code>cut</code>'s default delimiter is tab too, which is nice.</p>
<p><strong>The script in action</strong></p>
<p>That's about it - here's the entire script in action:</p>
<script id="asciicast-402683" src="https://asciinema.org/a/402683.js" async></script>
<p>And you can check out the script, as it was at the time of writing, in my dotfiles repository here: <a href="https://github.com/qmacro/dotfiles/blob/230c6df494f239e9d1762794943847816e1b7c32/scripts/dwr"><code>dwr</code></a>.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>A new journal experiment - Thinking Aloud</title>
      <link href="https://qmacro.org/blog/posts/2021/03/25/a-new-journal-experiment-thinking-aloud/"/>
      <updated>2021-03-25T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2021/03/25/a-new-journal-experiment-thinking-aloud/</id>
      <content type="html">
        <![CDATA[
      <p><em>I'm trying out a new way of sharing thoughts in a GitHub issues based journal style blog called <a href="https://github.com/qmacro/thinking-aloud">Thinking Aloud</a>.</em></p>
<p>TL;DR - My <a href="https://github.com/qmacro/thinking-aloud">Thinking Aloud repo</a> is where I am experimenting with journalling via GitHub issues. Check out the <a href="https://github.com/qmacro/thinking-aloud/issues?q=is%3Aissue+is%3Aopen+label%3Aentry">issues themselves</a>, the <a href="https://github.com/qmacro/thinking-aloud/blob/main/recent.md">rendered versions of recent entries</a>, the <a href="https://raw.githubusercontent.com/qmacro/thinking-aloud/main/feed.xml">Atom feed</a> or the <a href="https://github.com/qmacro/thinking-aloud/tree/main/.github/workflows">GitHub Actions workflows</a> with which I automate some of the process.</p>
<p>I've been blogging for over 20 years, since 2000. I started with a Blogspot hosted blog over at <a href="https://qmacro.blogspot.com">https://qmacro.blogspot.com</a> which amazingly is still around.</p>
<p><strong>This blog</strong></p>
<p>I quickly moved over to a self-hosted blogging system, initially powered by the beautifully simple <a href="https://en.wikipedia.org/wiki/Blosxom">Bloxsom</a>.</p>
<p>Over the years I tried out various blogging software, including Ghost and Movable Type, but at the core I've had my main blog (now at <a href="https://qmacro.org">https://qmacro.org</a> - where you're reading this) since 2002. I'm currently using GitHub Pages to host and manage things and I'm quite happy with it. I see this blog as my main personal blog and a place for &quot;long form&quot; posts on various subjects (as you can see from the <a href="https://qmacro.org">index</a>).</p>
<p><strong>My posts on the SAP Community blog</strong></p>
<p>Of course, I also publish on the <a href="https://community.sap.com">SAP Community</a> blog, which is a collective set of posts by many, many members of the SAP ecosphere. I have posts under the <a href="https://people.sap.com/dj.adams">dj.adams</a> identifier and also (since I joined SAP) under the <a href="https://people.sap.com/dj.adams.sap">dj.adams.sap</a> identifier, and as you might expect, the subject matter is very definitely SAP related. That said, you may be surprised at the breadth of topics - posts on subjects as diverse as <a href="https://blogs.sap.com/tag/terminaltip/">terminal tips</a> and <a href="https://blogs.sap.com/2020/12/01/utfrw-unofficial-teched-fun-run-walk/">fun runs</a> are all there.</p>
<p><strong>My autodidactics blog</strong></p>
<p>In the middle of last year I started a new, secondary blog <a href="https://qmacro.org/autodidactics/">autodidactics</a> to share things I'd learned (I endeavour to be a life long learner). I was inspired to create such a blog having seen <a href="https://til.simonwillison.net/">Simon Willison's TIL (Today I Learned)</a> site.</p>
<p>Moreover, I did very definitely feel I needed a place to share smaller nuggets of information that I'd learned; this in turn was triggered by reading some of <a href="https://rwxrob.live/">rwxrob</a>'s repository of <a href="https://github.com/rwxrob/dotfiles/">dotfiles and scripts</a>.</p>
<p>Ever since I read through the entire source code base of the original Jabber (XMPP) server <code>jabberd</code> to understand how everything worked, in researching for my O'Reilly book <a href="https://qmacro.org/about/#writing-and-talks">Programming Jabber</a>, I've been a strong proponent of reading other people's code. There's so much richness out there, a variety of styles and approaches, and oh so much to learn.</p>
<p><strong>Twitter</strong></p>
<p>And of course, when it comes to sharing thoughts, there's always <a href="https://twitter.com/qmacro">Twitter</a>, which has been referred to as a &quot;microblogging&quot; platform, in the same way that <a href="https://wiki.p2pfoundation.net/Identica">identi.ca</a> was. The key difference between Twitter and identi.ca was that the former is centralised, and the latter (sadly no longer in operation) was distributed. With identi.ca I felt in more control of my microblogging efforts. Don't get me wrong, Twitter is a great platform for conversation and ideas, but it's still centralised.</p>
<p><strong>Journalling</strong></p>
<p>And so to <a href="https://github.com/qmacro/thinking-aloud">Thinking Aloud</a>. If I lay out the different outlets for my thoughts in decreasing order of magnitude, I end up with something that looks like this:</p>
<pre><code>+---------------------------------------------------------------+
|    Major      |    Minor      |     Mini      |     Micro     |
|---------------|---------------|---------------|---------------|
|  qmacro.org   | autodidactics |  (something   |    Twitter    |
| SAP Community |               |   missing)    |               |
+---------------------------------------------------------------+
</code></pre>
<p>What do these categories mean to me?</p>
<p><strong>Major</strong>: If I want to write something in the major category, that's a relatively significant investment in time to create and publish posts (and for the consumer it can be significant too). That's fine, and those posts definitely will always have their place.</p>
<p><strong>Minor</strong>: If I want to share something specific that I learned, such as on the subject of the shell's <code>declare</code> builtin (in <a href="https://qmacro.org/autodidactics/2020/10/08/understanding-declare/">Understanding declare</a>), I have my <a href="https://qmacro.org/autodidactics">autodidactics</a> blog. The posts are usually shorter -- although some may be more densely packed -- and about something quite small and specific.</p>
<p><strong>Micro</strong>: If I just want to share a fleeting idea (or rant), I have <a href="https://twitter.com/qmacro">Twitter</a>.</p>
<p>So I feel there's a gap, for the <strong>Mini</strong> category. I have been inspired by <a href="https://rwxrob.live">rwxrob</a>'s journalling, where he writes in relatively short form, but in a structured fashion. It seems a way of getting things written down, freeing up mental space for new ideas, and also a semi-cathartic approach to expressing thoughts, regardless of how fully formed (or not) they are.</p>
<p>One of the aspects that I like about the journalling that I've seen is that it's about the body of the journal entry first, and the title is not important. In fact, rwxrob's journal titles are timestamps, which seems a great way to avoid wasting brain cycles trying to think of a title, either before writing the entry (when you don't exactly know what you're going to write), or after (when you may have covered various topics in one entry).</p>
<p>So I've decided to try to feel my way into this <strong>Mini</strong> gap, and do some journalling of my own. The idea is that the amount of pre-thought, the level of friction &amp; inhibition to create a new journal entry should reflect where this is in the &quot;scale&quot; expressed in the table above. I don't think much before tweeting (maybe I should, but that's a different story) and journalling is more towards that end of the scale than the other.</p>
<p><strong>Using GitHub features</strong></p>
<p>As part of the experiment, I decided to learn more about GitHub features while doing this, by making them a fundamental basis for the journalling mechanism.</p>
<p>I have a new GitHub repository <a href="https://github.com/qmacro/thinking-aloud">thinking-aloud</a>, and each journal entry is an <a href="https://github.com/qmacro/thinking-aloud/issues">issue</a> in there. The beauty of GitHub issues is that Markdown is supported, plenty rich enough to express my ideas.</p>
<p>Moreover, there are other metadata aspects such as labels that I might want to take advantage of at some stage (think <a href="https://github.com/qmacro/thinking-aloud/blob/08bf3f98064237c35b3bf7ae4fb16b5ecb9608b6/feed#L44">&quot;categories&quot; in Atom feed entries</a>).</p>
<p>Not least is the chance for folks to engage with the journal entries, via reactions and comments. I'm not sure how this is going to pan out, but I want to at least give this aspect a chance. I may get no engagement, I may get a load of spam. Let's see.</p>
<p>Most interestingly (to me) is the way I create new journal entries, and how I build the Atom feed so folks can subscribe.</p>
<p>I create a new entry via a shell function <code>j</code>, at the heart of which is this invocation:</p>
<pre class="language-shell"><code class="language-shell">gh issue create <span class="token parameter variable">--title</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">date</span> <span class="token string">'+%Y-%m-%d %H:%M:%S'</span><span class="token variable">)</span></span>"</span></code></pre>
<p>My editor (Vim) is then launched and I write Markdown, which is then sent to be the body of a new issue when I finish. Simple!</p>
<p>Each time a new journal entry (issue) is created, I rebuild the Atom feed. This is done via the power of GitHub Actions. Have a look at the <a href="https://github.com/qmacro/thinking-aloud/blob/main/.github/workflows/generate-feed.yml">generate-feed workflow</a> to get an idea of how that works; in one of the steps there, I'm using <code>gh</code> to call the GitHub API to get the list of issues, and piping that (JSON) into a simple Node.js script <a href="https://github.com/qmacro/thinking-aloud/blob/main/feed">feed</a> that uses the freakishly easy-to-use NPM module <a href="https://www.npmjs.com/package/feed">feed</a> (thanks <a href="https://github.com/jpmonette">jpmonette</a>!) to generate the Atom feed.</p>
<p>Additionally, I have implemented some <a href="https://github.com/qmacro/thinking-aloud/pull/5/files">simple rendering</a> to make the entries easier to consume - the <a href="https://github.com/qmacro/thinking-aloud/blob/main/recent.md">most recent entries are rendered into a Markdown file</a> in the main repository, and GitHub's Markdown rendering is more than good enough to make things easy and pleasant to read.</p>
<p><strong>Summary</strong></p>
<p>And that's it, so far. As usual, I'm making this up as I go along, and things may change along the way. I've written a couple of journal entries already, <a href="https://github.com/qmacro/thinking-aloud/blob/main/recent.md">check them out</a> and let me know what you think.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Aborting a script with parameter expansion</title>
      <link href="https://qmacro.org/blog/posts/2021/03/15/aborting-a-script-with-parameter-expansion/"/>
      <updated>2021-03-15T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2021/03/15/aborting-a-script-with-parameter-expansion/</id>
      <content type="html">
        <![CDATA[
      <p><em>Use the :? form of shell parameter expansion to abort a script if a required parameter value is not set.</em></p>
<p>I'm attracted to the somewhat arcane details of <a href="https://www.gnu.org/software/bash/manual/html_node/Shell-Expansions.html">Bash shell expansions</a> and it was while looking up something completely different (more on that another time) that I decided to re-read the <a href="https://www.gnu.org/software/bash/manual/html_node/Shell-Parameter-Expansion.html">parameter expansion</a> section of the GNU Bash manual.</p>
<p>In many of my scripts, like a good shell scripting citizen I check to ensure that there's a value for a parameter I want to use, and if there isn't, I abort with a message. In this case, abort implies returning a non-zero code, indicating failure.</p>
<p>The most recent example is in a little script that I've started to use to retrieve the image related to a YouTube live stream episode; this requires the YouTube video ID. The relevant part of this <a href="https://github.com/qmacro/dotfiles/blob/master/scripts/getepisodeimage"><code>getepisodeimage</code></a> script currently looks like this:</p>
<pre class="language-bash"><code class="language-bash"><span class="token comment"># Requires YouTube video ID</span><br><span class="token builtin class-name">readonly</span> <span class="token assign-left variable">id</span><span class="token operator">=</span><span class="token variable">$1</span><br><br><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token parameter variable">-z</span> <span class="token string">"<span class="token variable">$id</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span><br>  <span class="token builtin class-name">echo</span> <span class="token string">"Usage: <span class="token variable">$scriptname</span> &lt;YOUTUBE VIDEO ID>"</span><br>  <span class="token builtin class-name">exit</span> <span class="token number">1</span><br><span class="token keyword">fi</span></code></pre>
<p>(And yes, before you say it, I could have saved myself the execution of a binary by replacing the <code>[ ... ]</code> with <code>[[ ... ]]</code>. If you're curious, see <a href="https://qmacro.org/autodidactics/2020/08/21/open-square-bracket/">The open square bracket [ is an executable</a>.)</p>
<p>Anyway, rather than test for the emptiness of the value of the <code>id</code> parameter (with <code>-z</code>), in a standalone <code>if ... fi</code> section, I could have used the following shell parameter expansion pattern:</p>
<pre class="language-bash"><code class="language-bash"><span class="token variable">${parameter<span class="token operator">:?</span>word}</span></code></pre>
<p>The description for this is as follows:</p>
<blockquote>
<p>If parameter is null or unset, the expansion of word (or a message to that effect if word is not present) is written to the standard error and the shell, if it is not interactive, exits. Otherwise, the value of parameter is substituted.</p>
</blockquote>
<p>I've written about another shell parameter expansion pattern before (see <a href="https://qmacro.org/autodidactics/2020/09/27/shell-parameter-expansion-with-+/">Shell parameter expansion with :+ is useful</a>) but I'd forgotten about this one.</p>
<p>Using this pattern, I can replace the code above with this:</p>
<pre class="language-bash"><code class="language-bash"><span class="token builtin class-name">readonly</span> <span class="token assign-left variable">id</span><span class="token operator">=</span><span class="token variable">${1<span class="token operator">:?</span>Usage<span class="token operator">:</span> $scriptname &lt;YOUTUBE VIDEO ID>}</span></code></pre>
<p>Much more succinct - I like it!</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>fzf - the basics part 2 - search results</title>
      <link href="https://qmacro.org/blog/posts/2021/02/07/fzf-the-basics-part-2-search-results/"/>
      <updated>2021-02-07T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2021/02/07/fzf-the-basics-part-2-search-results/</id>
      <content type="html">
        <![CDATA[
      <p><em>Here’s more of what I learned from reading the first part of the fzf README and paying attention. Now I have a better setup and understanding of the basics and how to control the appearance, it's time to turn my attention to setting some defaults to control what I get in my search results.</em></p>
<p>In <a href="https://qmacro.org/autodidactics/2021/02/02/fzf-the-basics-1-layout/">fzf - the basics part 1 - layout</a> I shared what I learned about controlling <code>fzf</code>'s layout. In the examples I showed, based on directories and files in the <a href="https://github.com/SAP-samples/teched2020-developer-keynote">SAP TechEd 2020 Developer Keynote repository</a> (which I'll use again in this post), <code>fzf</code> presented a total of over 17000 items from which to make my choice.</p>
<p>That's a lot, and far more than I want to consider wading through.</p>
<p>In a pipeline context, <code>fzf</code> will present choices given to it in that pipeline, i.e. via STDIN, like this:</p>
<pre class="language-shell"><code class="language-shell"><span class="token punctuation">;</span> <span class="token builtin class-name">printf</span> <span class="token string">"one<span class="token entity" title="\n">\n</span>two<span class="token entity" title="\n">\n</span>three"</span> <span class="token operator">|</span> fzf <span class="token parameter variable">--layout</span><span class="token operator">=</span>reverse <span class="token parameter variable">--height</span><span class="token operator">=</span><span class="token number">40</span>%<br><span class="token operator">></span><br>  <span class="token number">3</span>/3<br><span class="token operator">></span> one<br>  two<br>  three</code></pre>
<blockquote>
<p>Interestingly, to copy/paste this example from my terminal, I had to (discover and) use the <code>--no-mouse</code> option from the Interface category so that the mouse was free to use and not locked to <code>fzf</code> during that moment.</p>
</blockquote>
<p>But I want to think about using <code>fzf</code> in a pipeline at another time; right now I'm just digging into options where <code>fzf</code> is used without receiving anything on STDIN.</p>
<p><a name="default-command"></a>
<strong>Default command</strong></p>
<p>So what does <code>fzf</code> do if it's not fed anything to display via STDIN? Well, the README states that unless otherwise directed, <code>fzf</code> uses the <code>find</code> command to build the list of items. The actual sentence in the <a href="https://github.com/junegunn/fzf#usage">Usage</a> section reads as follows:</p>
<p><em>&quot;Without STDIN pipe, fzf will use find command to fetch the list of files excluding hidden ones.&quot;</em></p>
<p>At first, I stopped reading after &quot;fzf will use find command to fetch the list of files&quot;, and missed the &quot;excluding hidden ones&quot;.</p>
<p><a name="basic-uses-of-find"></a>
<strong>Basic uses of <code>find</code></strong></p>
<p>That careless omission did cause me a pleasant coffee length digression into the nuances of basic uses of the <code>find</code> command. I created a set of test files and directories like this, some hidden, some not, as you can see:</p>
<pre class="language-shell"><code class="language-shell"><span class="token builtin class-name">.</span><br>├── Fruit<br>│   ├── apple<br>│   ├── banana<br>│   ├── cherry<br>│   └── .damson<br>├── .Trees<br>│   ├── ash<br>│   └── birch<br>├── aardvark<br>├── badger<br>└── .cow</code></pre>
<p>If pressed, I'd say that I'd naturally use the following incantation as a basic way to find files and directories: <code>find . -type f</code>. The results are interesting.</p>
<blockquote>
<p>In all the following examples, I'm in the directory denoted by <code>.</code> at the top of the tree as shown above. The <code>;</code> is my simple prompt (inspired by <a href="https://twitter.com/thingskatedid">Kate</a>), with my directory location shown in a line above that (<code># /tmp/testdir</code>).</p>
</blockquote>
<pre class="language-shell"><code class="language-shell"><span class="token comment"># /tmp/testdir</span><br><span class="token punctuation">;</span> <span class="token function">find</span> <span class="token builtin class-name">.</span> <span class="token parameter variable">-type</span> f<br>./Fruit/apple<br>./Fruit/cherry<br>./Fruit/.damson<br>./Fruit/banana<br>./.cow<br>./aardvark<br>./.Trees/birch<br>./.Trees/ash<br>./badger<br><span class="token comment"># /tmp/testdir</span><br><span class="token punctuation">;</span></code></pre>
<p>(9 entries)</p>
<p>I'd always considered that the &quot;default&quot; behaviour, but on reflection, it's arguably not default, as I'm using something specific (<code>.</code>) as the first argument to <code>find</code>, whereas I could just as easily have used <code>*</code>, thus:</p>
<pre class="language-shell"><code class="language-shell"><span class="token comment"># /tmp/testdir</span><br><span class="token punctuation">;</span> <span class="token function">find</span> * <span class="token parameter variable">-type</span> f<br>Fruit/apple<br>Fruit/cherry<br>Fruit/.damson<br>Fruit/banana<br>aardvark<br>badger<br><span class="token comment"># /tmp/testdir</span><br><span class="token punctuation">;</span></code></pre>
<p>(6 entries)</p>
<p>That's quite a difference! The Stack Overflow entry <a href="https://stackoverflow.com/questions/46578534/difference-between-find-and-find-in-unix">Difference between find . and find * in unix</a> confirms that difference.</p>
<ul>
<li>passing <code>.</code> results in everything in <code>.</code> being found, including the hidden file <code>.cow</code> and the hidden directory (and its contents) <code>.Trees/</code></li>
<li>passing <code>*</code> results in only the &quot;visible&quot; content in <code>.</code> being returned; note that this visibility difference only applies to the starting directory in question - as <code>Fruit/.damson</code> was reported even though <code>.cow</code> and <code>.Trees/</code> weren't</li>
</ul>
<p>So I wonder if either of these two incantations are what <code>fzf</code> uses by default. Let's see what <code>fzf</code> gives, in this same starting directory:</p>
<pre class="language-shell"><code class="language-shell"><span class="token comment"># /tmp/testdir</span><br><span class="token punctuation">;</span> fzf <span class="token parameter variable">--height</span><span class="token operator">=</span><span class="token number">40</span>% <span class="token parameter variable">--reverse</span><br><span class="token operator">></span><br>  <span class="token number">5</span>/5<br><span class="token operator">></span> Fruit/apple<br>  Fruit/cherry<br>  Fruit/banana<br>  aardvark<br>  badger</code></pre>
<p>(5 entries)</p>
<p>Nope!</p>
<p>Of course, there's that &quot;excluding hidden ones&quot; phrase from the README to which I must now pay attention. What I need is to tell <code>find</code> explicitly to exclude hidden files and directories. This will do the trick:</p>
<pre class="language-shell"><code class="language-shell"><span class="token comment"># /tmp/testdir</span><br><span class="token punctuation">;</span> <span class="token function">find</span> <span class="token builtin class-name">.</span> <span class="token parameter variable">-type</span> f <span class="token parameter variable">-not</span> <span class="token parameter variable">-path</span> <span class="token string">'*/\.*'</span><br>./Fruit/apple<br>./Fruit/cherry<br>./Fruit/banana<br>./aardvark<br>./badger<br><span class="token comment"># /tmp/testdir</span><br><span class="token punctuation">;</span></code></pre>
<p>(5 entries)</p>
<p>That's more like it! In fact, because we're explicitly excluding content based on a pattern, the same results are forthcoming whether we use a <code>.</code> or <code>*</code> as the first argument to <code>find</code>. Here's what we get with a <code>*</code>:</p>
<pre class="language-shell"><code class="language-shell"><span class="token comment"># /tmp/testdir</span><br><span class="token punctuation">;</span> <span class="token function">find</span> * <span class="token parameter variable">-type</span> f <span class="token parameter variable">-not</span> <span class="token parameter variable">-path</span> <span class="token string">'*/\.*'</span><br>Fruit/apple<br>Fruit/cherry<br>Fruit/banana<br>aardvark<br>badger<br><span class="token comment"># /tmp/testdir</span><br><span class="token punctuation">;</span></code></pre>
<p>(5 entries)</p>
<p>OK, there is a subtle difference, in that in this latter case, the <code>./</code> prefix is not included in the output of each entry. This is closest to what we see with <code>fzf</code> too.</p>
<p><a name="FZF_DEFAULT_COMMAND"></a>
<strong>FZF_DEFAULT_COMMAND</strong></p>
<p>So if I wanted <code>fzf</code> to actually show me hidden files, how would I do that? Well of course one way would be to run the appropriate <code>find</code> command and then pipe the output into <code>fzf</code>, like this:</p>
<pre class="language-shell"><code class="language-shell"><span class="token comment"># /tmp/testdir</span><br><span class="token punctuation">;</span> <span class="token function">find</span> <span class="token builtin class-name">.</span> <span class="token parameter variable">-type</span> f  <span class="token operator">|</span> fzf <span class="token parameter variable">--height</span><span class="token operator">=</span><span class="token number">40</span>% <span class="token parameter variable">--reverse</span><br><span class="token operator">></span><br>  <span class="token number">9</span>/9<br><span class="token operator">></span> ./Fruit/apple<br>  ./Fruit/cherry<br>  ./Fruit/.damson<br>  ./Fruit/banana<br>  ./.cow<br>  ./aardvark<br>  ./.Trees/birch<br>  ./.Trees/ash<br>  ./badger</code></pre>
<p>But I want to leave the pipeline approach until another time. Can I influence <code>fzf</code>'s search behaviour when, as the README puts it, &quot;input is [the] tty&quot;?</p>
<p>The answer is yes and is in the form of the environment variable <code>FZF_DEFAULT_COMMAND</code>. If set, <code>fzf</code> will use its value as the command to execute to find the files to display. So instead of using the pipeline above, I could do this:</p>
<pre class="language-shell"><code class="language-shell"><span class="token comment"># /tmp/testdir</span><br><span class="token punctuation">;</span> <span class="token builtin class-name">export</span> <span class="token assign-left variable">FZF_DEFAULT_COMMAND</span><span class="token operator">=</span><span class="token string">'find . -type f'</span><br><span class="token comment"># /tmp/testdir</span><br><span class="token punctuation">;</span> fzf <span class="token parameter variable">--height</span><span class="token operator">=</span><span class="token number">40</span>% <span class="token parameter variable">--reverse</span><br><span class="token operator">></span><br>  <span class="token number">9</span>/9<br><span class="token operator">></span> ./Fruit/apple<br>  ./Fruit/cherry<br>  ./Fruit/.damson<br>  ./Fruit/banana<br>  ./.cow<br>  ./aardvark<br>  ./.Trees/birch<br>  ./.Trees/ash<br>  ./badger</code></pre>
<p>Nice - now <code>fzf</code> shows me hidden files.</p>
<p><a name="alternative-commands"></a>
<strong>Alternative commands</strong></p>
<p>If we can modify what <code>fzf</code> uses to find files, we can go further, as the README suggests, and use another utility entirely, as described in the README's <a href="https://github.com/junegunn/fzf#tips">Tips</a> section (and hinted at also in the <a href="https://github.com/junegunn/fzf#environment-variables">Environment variables</a> section).</p>
<p>I've installed the search utility <a href="https://github.com/BurntSushi/ripgrep">ripgrep</a>, known as <code>rg</code>, as it works for me in a more natural <a href="https://en.wikipedia.org/wiki/DWIM">DWIM</a> (Do What I Mean) mode.</p>
<p>Let's see what <code>rg</code> will do for us with the same content. It is as much like <code>grep</code> than <code>find</code> and so we need to tell it to search at the file level, with <code>--files</code>, for the purposes of this exploration:</p>
<pre class="language-shell"><code class="language-shell"><span class="token comment"># /tmp/testdir</span><br><span class="token punctuation">;</span> rg <span class="token parameter variable">--files</span><br>badger<br>aardvark<br>Fruit/banana<br>Fruit/cherry<br>Fruit/apple<br><span class="token comment"># /tmp/testdir</span><br><span class="token punctuation">;</span></code></pre>
<p>(5 entries)</p>
<p><code>rg</code> won't consider hidden files and directories unless told to explicitly with <code>--hidden</code>:</p>
<pre><code># /tmp/testdir
; rg --files --hidden
badger
.Trees/ash
.Trees/birch
aardvark
.cow
Fruit/banana
Fruit/.damson
Fruit/cherry
Fruit/apple
# /tmp/testdir
;
</code></pre>
<p>(9 entries)</p>
<p>At this level, <code>rg</code> delivers results similar to what we already get with <code>find</code>.</p>
<p><a name="respecting-.gitignore"></a>
<strong>Respecting .gitignore</strong></p>
<p>Where <code>rg</code> comes into its own, DWIM-like, is when the search in question is within a git repository. In that case, it will respect what you have in your <a href="https://git-scm.com/docs/gitignore"><code>.gitignore</code></a> file.</p>
<p>I was curious to see this in action in the context of the simple set of files above. I added a <code>.gitignore</code> file in <code>/tmp/testdir</code> containing a single entry (<code>Fruit</code>) and then ran both <code>find . -type f -not -path '*/\.*'</code> and <code>rg --files</code>:</p>
<pre class="language-shell"><code class="language-shell"><span class="token comment"># /tmp/testdir</span><br><span class="token punctuation">;</span> <span class="token function">cat</span> .gitignore<br>Fruit<br><span class="token comment"># /tmp/testdir</span><br><span class="token punctuation">;</span> <span class="token function">find</span> <span class="token builtin class-name">.</span> <span class="token parameter variable">-type</span> f <span class="token parameter variable">-not</span> <span class="token parameter variable">-path</span> <span class="token string">'*/\.*'</span><br>./Fruit/apple<br>./Fruit/cherry<br>./Fruit/banana<br>./aardvark<br>./badger<br><span class="token comment"># /tmp/testdir</span><br><span class="token punctuation">;</span> rg <span class="token parameter variable">--files</span><br>badger<br>aardvark<br>Fruit/banana<br>Fruit/cherry<br>Fruit/apple<br><span class="token comment"># /tmp/testdir</span><br><span class="token punctuation">;</span></code></pre>
<p>Hmm, so what's going on here? They both produce the same list of files, despite the presence of the <code>.gitignore</code> file and its contents.</p>
<p>Turns out that it will only respect <code>.gitignore</code> in the context of an actual git repository, which makes sense. So a quick <code>git init</code> in the directory later, and we now see a different result for <code>rg --files</code>:</p>
<pre class="language-shell"><code class="language-shell"><span class="token comment"># /tmp/testdir</span><br><span class="token punctuation">;</span> <span class="token function">git</span> init<br>Initialized empty Git repository <span class="token keyword">in</span> /private/tmp/testdir/.git/<br><span class="token comment"># /tmp/testdir (master #%)</span><br><span class="token punctuation">;</span> rg <span class="token parameter variable">--files</span><br>badger<br>aardvark<br><span class="token comment"># /tmp/testdir (master #%)</span><br><span class="token punctuation">;</span></code></pre>
<p>That's more like it - the <code>Fruit/</code> directory and its contents are ignored.</p>
<p><a name="using-rg-for-real"></a>
<strong>Using rg for real</strong></p>
<p>Moving back to the <a href="https://github.com/SAP-samples/teched2020-developer-keynote">repository</a> content that I have been using to explore <code>fzf</code> in more depth (especially in <a href="https://qmacro.org/autodidactics/2021/02/02/fzf-the-basics-1-layout/">fzf - the basics part 1 - layout</a>), let's see what effect <code>rg</code>'s respect for <code>.gitignore</code> has on the results in this more realistic scenario.</p>
<p>First, what does the incantation of <code>find</code> that most closely resembles <code>fzf</code>'s default behaviour give us from the top level of that repository?</p>
<pre class="language-shell"><code class="language-shell"><span class="token comment"># /tmp/teched2020-developer-keynote (main *=)</span><br><span class="token punctuation">;</span> <span class="token function">find</span> <span class="token builtin class-name">.</span> <span class="token parameter variable">-type</span> f <span class="token parameter variable">-not</span> <span class="token parameter variable">-path</span> <span class="token string">'*/\.*'</span>  <span class="token operator">|</span> <span class="token function">wc</span> <span class="token parameter variable">-l</span><br>   <span class="token number">17688</span><br><span class="token comment"># /tmp/teched2020-developer-keynote (main *=)</span><br><span class="token punctuation">;</span></code></pre>
<p>OK, so that's what we got in the <a href="https://qmacro.org/autodidactics/2021/02/02/fzf-the-basics-1-layout/">previous post</a>. The repository has a <code>.gitignore</code> file:</p>
<pre class="language-shell"><code class="language-shell"><span class="token comment"># /tmp/teched2020-developer-keynote (main *=)</span><br><span class="token punctuation">;</span> <span class="token function">cat</span> .gitignore<br>node_modules/<br>*.swp<br>sk*.json<br>default-env.json<br>.DS_Store<br>dashboard.zip<br>mta_archives/<br>ui/resources<br>*.db-journal<br>*.token<br>kubeconfig.*<br><span class="token comment"># /tmp/teched2020-developer-keynote (main *=)</span><br><span class="token punctuation">;</span></code></pre>
<p>So let's see what <code>rg</code> gives us:</p>
<pre class="language-shell"><code class="language-shell"><span class="token comment"># /tmp/teched2020-developer-keynote (main *=)</span><br><span class="token punctuation">;</span> rg <span class="token parameter variable">--files</span> <span class="token operator">|</span> <span class="token function">wc</span> <span class="token parameter variable">-l</span><br>     <span class="token number">163</span><br><span class="token comment"># /tmp/teched2020-developer-keynote (main *=)</span><br><span class="token punctuation">;</span></code></pre>
<p>That is certainly a huge difference, mostly a result of ignoring a load of stuff - not least in the various <code>node_modules/</code> directories within the repository.</p>
<p><a name="showing-hidden-files"></a>
<strong>Showing hidden files</strong></p>
<p>Now that the list of choices is more manageable, I can now start to think about what it actually contains, and what it doesn't contain. There are hidden files in the repository that I actually want to be able to select. <code>fzf</code>'s default behaviour is preventing that from happening, but it's only now that my head is clear enough to address this (looking through a list of 17000+ files fogged my thinking).</p>
<p>So I remember I can use the <code>--hidden</code> option with <code>rg</code>; let's try that:</p>
<pre class="language-shell"><code class="language-shell"><span class="token comment"># /tmp/teched2020-developer-keynote (main *=)</span><br><span class="token punctuation">;</span> rg <span class="token parameter variable">--files</span> <span class="token parameter variable">--hidden</span> <span class="token operator">|</span> <span class="token function">wc</span> <span class="token parameter variable">-l</span><br>     <span class="token number">209</span><br><span class="token comment"># /tmp/teched2020-developer-keynote (main *=)</span><br><span class="token punctuation">;</span></code></pre>
<p>OK, so a few more than the 163 that <code>rg --files</code> returned. Good stuff. But what are those extra hidden files? Let's take a look, using a regular expression to reduce the output to entries where there's a <code>.</code> either at the start of the line or following a <code>/</code>:</p>
<pre class="language-shell"><code class="language-shell"><span class="token comment"># /tmp/teched2020-developer-keynote (main *=)</span><br><span class="token punctuation">;</span> rg <span class="token parameter variable">--files</span> <span class="token parameter variable">--hidden</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token parameter variable">-E</span> <span class="token string">'(^|\/)\.'</span> <span class="token operator">|</span> <span class="token function">sort</span><br>.abapgit.xml<br>.git/HEAD<br>.git/config<br>.git/description<br>.git/hooks/applypatch-msg.sample<br>.git/hooks/commit-msg.sample<br>.git/hooks/fsmonitor-watchman.sample<br>.git/hooks/post-update.sample<br>.git/hooks/pre-applypatch.sample<br>.git/hooks/pre-commit.sample<br>.git/hooks/pre-merge-commit.sample<br>.git/hooks/pre-push.sample<br>.git/hooks/pre-rebase.sample<br>.git/hooks/pre-receive.sample<br>.git/hooks/prepare-commit-msg.sample<br>.git/hooks/update.sample<br>.git/index<br>.git/info/exclude<br>.git/logs/HEAD<br>.git/logs/refs/heads/main<br>.git/logs/refs/remotes/origin/HEAD<br>.git/objects/pack/pack-8933b87ef40a05f8e4974179d6b7288c4cbb0a39.idx<br>.git/objects/pack/pack-8933b87ef40a05f8e4974179d6b7288c4cbb0a39.pack<br>.git/packed-refs<br>.git/refs/heads/main<br>.git/refs/remotes/origin/HEAD<br>.github/workflows/image-build-and-publish.yml<br>.github/workflows/out-of-office.yml<br>.gitignore<br>.reuse/dep5<br>cap/brain/.cdsrc.json<br>cap/brain/.dockerignore<br>cap/brain/.eslintrc<br>cap/brain/.gitignore<br>cap/brain/.prettierignore<br>cap/brain/.prettierrc.json<br>cap/brain/.vscode/extensions.json<br>cap/brain/.vscode/launch.json<br>cap/brain/.vscode/settings.json<br>cap/brain/.vscode/tasks.json<br>converter/.dockerignore<br>rapreceiver/.gitignore<br>s4hana/sandbox/.gitignore<br>s4hana/sandbox/router/.dockerignore<br>s4hana/sandbox/router/.prettierignore<br>s4hana/sandbox/router/.prettierrc.json<br><span class="token comment"># /tmp/teched2020-developer-keynote (main *=)</span><br><span class="token punctuation">;</span></code></pre>
<p>That's nice - I can see important hidden files such as <code>.abapgit.xml</code>, <code>cap/brain/.dockerignore</code> and <code>github/workflows/image-build-and-publish.yml</code> now.</p>
<p>However, the presence of all those files in the <code>.git/</code> directory are clouding that overview. Let's get rid of those with <code>rg</code>'s <code>--glob</code> option, with which one can include, or (using a <code>!</code> to negate things) exclude results:</p>
<pre class="language-shell"><code class="language-shell"><span class="token comment"># /tmp/teched2020-developer-keynote (main *=)</span><br><span class="token punctuation">;</span> rg <span class="token parameter variable">--files</span> <span class="token parameter variable">--hidden</span> <span class="token parameter variable">--glob</span> <span class="token string">'!.git/'</span> <span class="token operator">|</span> <span class="token function">wc</span> <span class="token parameter variable">-l</span><br>     <span class="token number">184</span><br><span class="token comment"># /tmp/teched2020-developer-keynote (main *=)</span><br><span class="token punctuation">;</span></code></pre>
<p>Let's see what makes up the list of hidden files now:</p>
<pre class="language-shell"><code class="language-shell"><span class="token comment"># /tmp/teched2020-developer-keynote (main *=)</span><br><span class="token punctuation">;</span> rg <span class="token parameter variable">--files</span> <span class="token parameter variable">--hidden</span> <span class="token parameter variable">--glob</span> <span class="token string">'!.git/'</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token parameter variable">-E</span> <span class="token string">'(^|\/)\.'</span> <span class="token operator">|</span> <span class="token function">sort</span><br>.abapgit.xml<br>.github/workflows/image-build-and-publish.yml<br>.github/workflows/out-of-office.yml<br>.gitignore<br>.reuse/dep5<br>cap/brain/.cdsrc.json<br>cap/brain/.dockerignore<br>cap/brain/.eslintrc<br>cap/brain/.gitignore<br>cap/brain/.prettierignore<br>cap/brain/.prettierrc.json<br>cap/brain/.vscode/extensions.json<br>cap/brain/.vscode/launch.json<br>cap/brain/.vscode/settings.json<br>cap/brain/.vscode/tasks.json<br>converter/.dockerignore<br>rapreceiver/.gitignore<br>s4hana/sandbox/.gitignore<br>s4hana/sandbox/router/.dockerignore<br>s4hana/sandbox/router/.prettierignore<br>s4hana/sandbox/router/.prettierrc.json<br><span class="token comment"># /tmp/teched2020-developer-keynote (main *=)</span><br><span class="token punctuation">;</span></code></pre>
<p>Now we're talking! That looks like the level of results that will work for me generally. So I can now <a href="https://github.com/qmacro/dotfiles/commit/29368542f9249de85ada759591cf87b52c2b3c0e?branch=29368542f9249de85ada759591cf87b52c2b3c0e&amp;diff=unified">add that glob exclusion</a> to the value for <code>FZF_DEFAULT_COMMAND</code> like this:</p>
<pre class="language-shell"><code class="language-shell"><span class="token comment"># /tmp/teched2020-developer-keynote (main *=)</span><br><span class="token punctuation">;</span> <span class="token builtin class-name">export</span> <span class="token assign-left variable">FZF_DEFAULT_COMMAND</span><span class="token operator">=</span><span class="token string">'rg --files --hidden --glob '</span><span class="token string">"'"</span>'<span class="token operator">!</span>.git/<span class="token string">'"'</span>"<br><span class="token comment"># /tmp/teched2020-developer-keynote (main *=)</span><br><span class="token punctuation">;</span></code></pre>
<blockquote>
<p>The <code>&quot;'&quot;</code> sequences are to supply single quotes in an otherwise single-quoted string.</p>
</blockquote>
<p>This can be seen in <a href="https://github.com/qmacro/dotfiles/blob/master/bashrc.d/82-fzf.sh">my Bash configuration script for <code>fzf</code></a>.</p>
<p><a name="the-final-result"></a>
<strong>The final result</strong></p>
<p>Now I've customised exactly which type of entries I want to be included (and excluded) in the search results that <code>fzf</code> presents to me in a tty context, I'm happy:</p>
<pre class="language-shell"><code class="language-shell"><span class="token comment"># /tmp/teched2020-developer-keynote (main *=)</span><br><span class="token punctuation">;</span> fzf <span class="token parameter variable">--height</span><span class="token operator">=</span><span class="token number">40</span>% <span class="token parameter variable">--reverse</span><br><span class="token operator">></span><br>  <span class="token number">184</span>/184<br><span class="token operator">></span> enabling-workflows.md<br>  message-bus-settings.sh<br>  .gitignore<br>  README.md<br>  quickstart.md<br>  .reuse/dep5<br>  images/whiteboard.jpg<br>  images/enable-kyma.png<br>  images/enabling-workflows.png<br>  images/split-terminals.png<br>  kymaruntime/README.md<br>  mock-converter/index.js<br>  storyboard.md<br>  .abapgit.xml<br>  mock-converter/package.json<br>  abap/README.md</code></pre>
<p>Far easier to deal with (than the 17000+ files previously) but nothing important omitted.</p>
<p>Turns out that <code>FZF_DEFAULT_COMMAND</code> is useful, and it's also not the only environment variable that <code>fzf</code> sports. I'll look into others in the next post.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Thoughts on video content</title>
      <link href="https://qmacro.org/blog/posts/2021/02/02/thoughts-on-video-content/"/>
      <updated>2021-02-02T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2021/02/02/thoughts-on-video-content/</id>
      <content type="html">
        <![CDATA[
      <p><em>Here are some thoughts on video content - form, length, frequency and more, especially in a learning and sharing context, and specificially in a developer advocate content.</em></p>
<p>Just now my good friend Ronnie Sletta <a href="https://twitter.com/rsletta/status/1356563739676471297">drew our attention to</a> a question by <a href="https://chrismroberts.com/">Chris Roberts</a> on video content: &quot;<em>I’m thinking of making some free courses and putting them on YouTube. Do you prefer a series of short videos, or one long video? If a series, should I release one a week? If one long video, how long?</em>&quot;.</p>
<p>I started to reply on Twitter, then found myself needing to use the &quot;1/n&quot; tweet thread approach, which I've never really liked, so I thought I'd take a <a href="https://www.hanselman.com/blog/your-blog-is-the-engine-of-community">leaf out of Scott Hanselman's book</a> and reply once in a form that's arguably more permanent and easier to read.</p>
<p><strong>Form variation</strong></p>
<p>First off, I think it's important for us to remember that folks have different preferences when it comes to consuming content and learning. Some prefer the written word, and some prefer video instruction or demonstration. But it goes deeper than that.</p>
<p>Descend into the video category and within that there are some that like to settle in and watch a &quot;feature length&quot; video. Others prefer short, sharp and to-the-point videos, the moving picture equivalent of good answers on Stack Overflow. Then there's the question of time available, which also factors into the decision on which videos to watch. Often I find myself thinking:</p>
<p>&quot;<em>OK, I've got 15 mins before the next meeting, and I'd like to learn more about X - what videos fit that combination of time and topic filter?</em>&quot;</p>
<p>It seems obvious to me that when it comes to the time filter, shorter time slots are going to be more common, so in one sense shorter videos in general seem like a good idea.</p>
<p>But there are cases to be made for both short and long form videos. They serve different purposes and contexts.</p>
<p><strong>Long form</strong></p>
<p>Before I proceed with this thought, let me be clear on what I mean by &quot;long form&quot;. There are recordings of live streams from YouTube or Twitch sessions that are very often far more than an hour or so. A live stream that is just one hour is actually quite unusual.</p>
<p>For me though, an &quot;hour&quot; is long form. Anything longer than that is beyond the question at hand, and for me fits into the &quot;<em>I want to watch my favourite streamer and relax, so I'll watch this recording as they're not live right now, or because it covers something I'm interested in</em>&quot; category.</p>
<p>It's worth pointing out at this point that the <a href="https://www.youtube.com/playlist?list=PL6RpkC85SLQABOpzhd7WI-hMpy99PxUo0">main live stream episodes that I put out</a> are deliberately limited to one hour. That's for many reasons, here's the main one:</p>
<ul>
<li>the folks that join have other things to do in their day, meetings to go to, and so on; I don't want to make it harder for them to do that, and by streaming from the top of the hour to the top of the next hour makes it easier for them to fit the live stream attendance into their work calendar</li>
</ul>
<p>This applies to me too - I have other tasks to accomplish and meetings to attend in my working day.</p>
<p>With this in mind, I'd say that the &quot;long form&quot; categorisation of one hour videos only applies if they're not live. I'd almost go so far as to say that a live stream of less than an hour has more disadvantages than advantages:</p>
<ul>
<li>the time to establish the topic and focus is limited</li>
<li>some folks joining don't get enough time to &quot;warm up&quot; and feel confident enough to participate in the chat</li>
<li>given that a live stream has a fixed broadcast start time, if you miss it, you miss it, so a longer live stream gives latecomers (not anything to be ashamed of!) chance to actually catch something, participate and get something from it</li>
</ul>
<p><strong>Video chapters</strong></p>
<p>While short form videos are great for focused search, confirmation and consumption, there's a key feature that's essential for making longer form videos more easily consumable and more useful, and that's the <a href="https://support.google.com/youtube/answer/9884579">video chapters</a> feature.</p>
<p>I think they go some considerable way towards bringing the &quot;long form&quot; videos closer to &quot;short form&quot; in consumability and relevance.</p>
<p>I've been making use of video chapters for a while, and I can thoroughly recommend it.</p>
<p><strong>Some examples</strong></p>
<p>I use video chapters in my live stream recordings; after a live stream is finished, I scrub through the recording and then add video chapter information in the description, making it much more accessible and useful for consumers. Here's an example from an episode of the <a href="https://www.youtube.com/playlist?list=PL6RpkC85SLQCBncEWbkHTLz7ykB9C7yof">Getting the most out of the SAP TechEd Developer Keynote repository</a> series on the <a href="https://www.youtube.com/playlist?list=PL6RpkC85SLQABOpzhd7WI-hMpy99PxUo0">Hands-on SAP Dev</a> show*.</p>
<p>*<em>See <a href="https://blogs.sap.com/2020/11/09/an-overview-of-sap-developers-video-content/">An overview of SAP Developers video content</a> for more details.</em></p>
<p><img src="/images/2021/02/videochapters.png" alt="video chapters in the description"></p>
<p>My other SAP Developer Advocate colleagues use video chapters too.</p>
<p>Talking of <a href="https://youtube.com/sapdevs">SAP Developers video content</a>, we've just launched the first video in a new shorter form show - SAP Tech Bytes. The videos here are deliberately short, to be more consumable in a shorter amount of time, to be focused on one specific topic, and also to provide form variation.</p>
<p>Here's the first episode: <a href="https://www.youtube.com/watch?v=O0x7Jt6yre0">SAP Tech Bytes: Tutorial - Create SAP HANA Database Project</a>. Note that there are video chapters even in this shorter form content.</p>
<p>In fact, we use video chapters in even our shortest form videos - the episodes of the <a href="https://www.youtube.com/playlist?list=PL6RpkC85SLQAVBSQXN9522_1jNvPavBgg">SAP Developer News</a> show, where each video is only around five minutes long - deliberately a coffee break length.</p>
<p><strong>Frequency and schedule</strong></p>
<p>I've just got to here and realised I haven't even talked about frequency. I thought it might be at least helpful to give some examples; I've been live streaming in my role as SAP Developer Advocate since January 2019, and have kept more or less the same frequency since then, which is weekly. I've done the occasional second live stream in a single week, but I treat (and refer to) those as &quot;off piste&quot; and not really part of the usual cadence.</p>
<p>Perhaps more importantly than the frequency, at least for live streams, is the consistency of day and time, i.e. the schedule. I think of my episodes of Hands-on SAP Dev as episodes of a TV programme, and again, because it's broadcast live, the best way to help folks <em>not</em> to miss it is to be consistent and predictable with the schedule. That's why I broadcast my episodes on Fridays, at 0800 GMT.</p>
<p>Incidentally, I chose a relatively early morning slot because that's when I'm most awake and my brain is buzzing - I'm a morning person and the plate spinning that's required to stream live is slightly less difficult then.</p>
<p>I think the same scheduling rules apply to YouTube <a href="https://www.youtube.com/watch/Wbi_Ic1DDwQ">Premieres</a> too. Premieres are videos that you can pre-record but have the first broadcast set for a fixed date and time in the future, with all the build up and excitement of a live stream, but during playback you can attend and interact in the chat with the viewers. Sort of a combination of live stream and recording, which can work really well.</p>
<p>When it comes to recorded videos, i.e. neither live streams nor premieres, then the schedule is not that important, so it just comes down to frequency. And that really depends on two factors:</p>
<ul>
<li>primarily: how much content you can produce</li>
<li>secondarily: how much content your viewers can consume</li>
</ul>
<p>There's a balance you need to find between these two factors, and there's no algorithm I know of that will provide a solid answer here; it really depends on how you work, what you have to share, and so on.</p>
<p>That said, here's a general piece of advice: If you have a load of pre-recorded videos waiting to upload to YouTube, don't be tempted to just publish them all at once. Resist the urge to flood your viewers' brains with all that wonderful goodness, and instead publish them in a spaced-out fashion instead. That has two advantages:</p>
<ul>
<li>they don't feel overwhelmed and tempted to give up because there's too much to consume</li>
<li>you don't burn yourself out, and instead give yourself time to think of other content</li>
</ul>
<p><strong>Wrapping up</strong></p>
<p>Anyway, this post is already far longer than I expected it to be; I'll bring it to a close now, but as it's just blog post content, I may come back to it in the future and update it as I see fit. That's the wonderful nature of blog posts and how they're still the backbone of many communities.</p>
<p>Happy videoing!</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>fzf - the basics part 1 - layout</title>
      <link href="https://qmacro.org/blog/posts/2021/02/02/fzf-the-basics-part-1-layout/"/>
      <updated>2021-02-02T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2021/02/02/fzf-the-basics-part-1-layout/</id>
      <content type="html">
        <![CDATA[
      <p><em>Here's what I learned from reading the first part of the fzf README and paying attention. Now I have a better setup and understanding of the basics, and in particular how to control the appearance.</em></p>
<p>In the context of <a href="https://qmacro.org/2021/02/01/do-less-and-do-it-better/">doing less and doing it better</a> I decided to start learning more about <a href="https://github.com/junegunn/fzf"><code>fzf</code></a>, the &quot;command line fuzzy finder&quot;. Learning more wasn't difficult, because despite using it for quite a while, I've never really read any of the documentation, and have thus only scratched its surface.</p>
<p>So I started with the first part of the main <a href="https://github.com/junegunn/fzf/blob/master/README.md">README</a>, and here's what I found.</p>
<p>The examples I give in this post are taken from a directory and file structure reflecting the <a href="https://github.com/SAP-samples/teched2020-developer-keynote">SAP TechEd 2020 Developer Keynote repository</a>, which has multiple directories and subdirectories, lots of files with different extensions, hidden files and directories (and I'm not just talking about the <code>.git/</code> directory) and also stuff that we often want excluded, such as any <code>node_modules/</code> directories. Fairly representative and useful for illustration.</p>
<p><strong>An awareness of new and changed features</strong></p>
<p>I was using an older version of <code>fzf</code> because I hadn't upgraded it; a quick <code>brew update; brew upgrade fzf</code> later and I was using the <a href="https://github.com/junegunn/fzf/releases/tag/0.25.0">latest release</a>. Not absolutely essential for me, but doing this makes me more aware of the fact that fixes and features do come along, and also exposes me to options that I might not have known about. So an indirect but useful advantage already.</p>
<p>I'd <a href="https://github.com/qmacro/dotfiles/commit/68f3c40a76ddd2d8c5c08463855a59ed0e6d7c74#diff-53370cdb3bc79473f0579d40685f8516cc93a2c60b4382e60cb94c09d0c2bfc2R1">already installed the keybindings</a> keybindings (to get <code>fzf</code> to react on Ctrl-T and Ctrl-C) so that was still OK.</p>
<p><strong>Basic navigation</strong></p>
<p>I'd been using the arrow keys to move up and down in the list that <code>fzf</code> presents. The shame of it! Now I've learned that I can use Vim style key bindings to move up (Ctrl-J) and down (Ctrl-K) I feel less unclean. There's even support for the mousewheel, but the less said about that the better.</p>
<p>Anyway, it's time to get to the main topic of this post - how to affect <code>fzf</code>'s appearance, or layout.</p>
<p><strong>Layout</strong></p>
<p>Out of the box, <code>fzf</code> will use the entire height of your current terminal to display the choices, and this is more or less how I've mostly used <code>fzf</code> thus far:</p>
<script id="asciicast-388791" src="https://asciinema.org/a/388791.js" async></script>
<p>But it doesn't have to be this way; in the Layout category of options there's <code>--height</code> with which you can tell <code>fzf</code> only to use a certain percentage of the terminal's height.</p>
<script id="asciicast-388792" src="https://asciinema.org/a/388792.js" async></script>
<p>Moreover, the jump from the line I was on when <code>fzf</code> was invoked, down to the bottom of the screen where I was to make my choice, was a little jarring for me.</p>
<p>I'd vaguely (but mistakenly) thought that the <code>--layout=reverse</code> option, also in the Layout category, was something to do with the sort order of the choices presented. Turns out that the order can be reversed with the <code>--tac</code> option (taken from the name of <code>tac</code>, a command independent of <code>fzf</code>, whose name is the opposite of <code>cat</code>, see?) and that the <code>--layout=reverse</code> relates to the general presentation of the choices.</p>
<p>So with <code>--layout=reverse</code> I can reduce that jarring by having the place where I make my choice at the top of the list rather than at the bottom, like this:</p>
<script id="asciicast-388795" src="https://asciinema.org/a/388795.js" async></script>
<p>There's a couple of other options that I found that made the appearance even better for me, but these are more subjective.</p>
<p>First, I can get a border around everything with the Layout option <code>--border</code>. In fact there are multiple values that can be specified for this option; the default is to make a rounded border around all four sides.</p>
<p>Then I can save a bit of space by specifying the value <code>inline</code> for the <code>--info</code> option, also in the Layout category, to get the stats displayed on the same line as my input.</p>
<p>Here's both of those options in action:</p>
<script id="asciicast-388802" src="https://asciinema.org/a/388802.js" async></script>
<blockquote>
<p>In this and the next asciicast, the right hand edge of the border is not properly displayed or reproduced in asciinema for some reason; just imagine that the options are nicely boxed all the way around.</p>
</blockquote>
<p>Before we leave the Layout category, there's a couple of other options that can give a nice effect, especially for making <a href="https://tools.suckless.org/dmenu/"><code>dmenu</code></a> or <a href="https://github.com/davatorium/rofi"><code>rofi</code></a> style popup menus. These are <code>--margin</code> and <code>--padding</code>. I've found that to get a popup menu effect, it's worth leaving off the height option (<code>--height</code>) to get full screen:</p>
<script id="asciicast-388803" src="https://asciinema.org/a/388803.js" async></script>
<p><strong>Next time</strong></p>
<p>That's about it for what I've learned about controlling the appearance. There's actually plenty more on this in the <a href="https://github.com/junegunn/fzf/wiki">wiki</a>.</p>
<p>Note right now that there are 17688 entries in the list of choices presented to me. That's a lot, and far more than I'd ever actually want to select from. <a href="https://qmacro.org/2021/02/07/fzf-the-basics-part-2-search-results/">Next time</a> I'll take a look at a couple of <code>fzf</code> environment variables, one of which controls what command <code>fzf</code> uses, and how that can be changed to affect what gets displayed (or not displayed) in the choice list, so I can address that large number of entries issue.</p>
<p>Update: part 2 of this series is now available: <a href="https://qmacro.org/2021/02/07/fzf-the-basics-part-2-search-results/">fzf - the basics part 2 - search results</a>.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Do less and do it better</title>
      <link href="https://qmacro.org/blog/posts/2021/02/01/do-less-and-do-it-better/"/>
      <updated>2021-02-01T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2021/02/01/do-less-and-do-it-better/</id>
      <content type="html">
        <![CDATA[
      <p><em>In 2021 I want to consolidate and improve upon some skills I already have, rather than add more. Here's what I mean, and how I got inspired.</em></p>
<p>In October last year Samir Talwar <a href="https://twitter.com/SamirTalwar/status/1318904227935227905">tweeted</a> something simple yet profound: &quot;<em>Do less, and do it better</em>&quot;.</p>
<p>In my work and play I discover and start using various tools and technologies. The pace of change in this industry, coupled with the (not unpleasant) demands on what I have to produce, means that I often end up with only a shallow understanding of things. And sometimes these are things I use every day.</p>
<p>The nature of my job as a developer advocate (but I think this extends to development in general), in the context of that fast pace of change, means that there's always something new to learn, to adopt, and to incorporate into a workflow, process or solution. But that can come at a price - of limited comprehension and mastery.</p>
<p>To explain further, I'm going to stretch a metaphor relating to ploughing a field and sowing seeds.</p>
<p><strong>Ploughing and sowing</strong></p>
<p>As an individual, I sometimes feel as though I'm trying to prepare a large field and plant seeds there using a poorly hand-constructed and inefficient plough made of the wrong sort of wood and bits of string, combined with a seed drill made out of old toilet rolls and sticky tape. Not only that, but I'm trying to plant across the entire field, 50 furrows wide, as I move along.</p>
<p>Needless to say, the ploughing doesn't go very well, and the seeds are planted imprecisely, sometimes superficially, mostly wastefully, resulting in poor distribution, low growth and high energy expenditure.</p>
<p>But if I were to abandon the idea of going wide, and instead go narrow, focusing on just a handful of furrows, I could afford to take the time to correctly plant each seed, nurturing &amp; watering each one, producing strong plants with deep roots and healthy growth.</p>
<p>I've thought this for a while but never got round to doing anything about it. Samir's tweet has galvanised me into spending some time working out what that means for me.</p>
<p><strong>Consolidating</strong></p>
<p>So this year I'm attempting to &quot;do less, and do it better&quot; by acknowledging the tools I use day in day out, and learn more about them, restricting myself to a narrow set of topics, move a step closer towards mastery in each, and really benefit from everything they have to offer.</p>
<p>Here's an example from this weekend; I read the entirety of the main README for the excellent fuzzy-finder tool <a href="https://github.com/junegunn/fzf"><code>fzf</code></a>, all 16 pages. That might seem ridiculous to say (16 pages is not a lot) but I've used <code>fzf</code> for a year or so and never RTFM'd before. In my defence, I've also been constantly and painfully aware that I've merely scratched the surface. I've now discovered some <code>fzf</code> gems that I can put into practice immediately, and some areas that I need to dig into more.</p>
<p>Likewise for other tools that I use, tools that are not only essential, but which, when mastered, can make my workflows even better. I'm thinking of Vim (I've recently started watching my friend and colleague David Kunz's <a href="https://www.youtube.com/channel/UCFU7a7OMYfcpjtIpu2j47_Q">DevOnDuty</a> series, which I can strongly recommend), <a href="https://github.com/tmux/tmux/wiki"><code>tmux</code></a> (<a href="http://rwxrob.live/">rwxrob</a> is a great practitioner, and I should re-read Brian P. Hogan's great <a href="https://pragprog.com/titles/bhtmux2/tmux-2/">book on tmux</a> too) and of course the environment and language that ties it all together for me - <a href="https://www.gnu.org/software/bash/">Bash</a>.</p>
<p>The lockdown has afforded me time to read more, and I need to embrace that and work out how I can keep that momentum up. I want to tip the balance over from always having my fingers on the keyboard towards stepping away from the keyboard to read, reflect and consolidate my learning.</p>
<hr>
<p>Update 02 Feb 2021: I've started digging deeper into <code>fzf</code> - see <a href="https://qmacro.org/autodidactics/2021/02/02/fzf-the-basics-1-layout/">fzf - the basics part 1 - layout</a> and <a href="https://qmacro.org/autodidactics/2021/02/07/fzf-the-basics-2-search-results/">fzf - the basics part 2 - search results</a> over on my <a href="https://qmacro.org/autodidactics/">Autodidactics</a> blog.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Columnar layout with AWK</title>
      <link href="https://qmacro.org/blog/posts/2021/01/26/columnar-layout-with-awk/"/>
      <updated>2021-01-26T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2021/01/26/columnar-layout-with-awk/</id>
      <content type="html">
        <![CDATA[
      <p><em>Here's a breakdown of a simple AWK script I wrote to format values into neatly aligned columns</em></p>
<p>(Jump to the end for a couple of updates, thanks gioele and oh5nxo!)</p>
<p>I'm organising my GitHub repositories locally by creating a directory structure representing the different GitHub servers that I use and the orgs and users that I have access to, with symbolic links at the ends of these structures pointing to where I've cloned the actual repositories.</p>
<p>Here's an example of what I started out with:</p>
<pre><code>; find ~/gh -type l
/Users/dja/gh/github.tools.sap/developer-relations/advocates-team-general
/Users/dja/gh/github.com/SAP-samples/teched2020-developer-keynote
/Users/dja/gh/github.com/qmacro-org/auto-tweeter
</code></pre>
<p>and what I wanted to end up with (you can see the invocation of the script here too):</p>
<pre><code>; find ~/gh -type l | awk -F/ -vCOLS=5,6,7 -f ~/.dotfiles/scripts/cols.awk
github.tools.sap developer-relations advocates-team-general
github.com       SAP-samples         teched2020-developer-keynote
github.com       qmacro-org          auto-tweeter
</code></pre>
<p>In other words, I wanted to select columns from the output and have them printed neatly and aligned. Don't ask me why, I guess it's just some form of OCD.</p>
<p><a name="homage"></a><strong>Homage</strong></p>
<p>Anyway, I decided to write this in AWK, partly because I don't know AWK that well, but mostly as a meditation on the early days of Unix and a homage to <a href="https://en.wikipedia.org/wiki/Brian_Kernighan">Brian Kernighan</a>. Talking of homages, I've also decided to share this script by describing it line by line, in homage to <a href="https://en.wikipedia.org/wiki/Randal_L._Schwartz">Randal L Schwartz</a>, that maverick hero that I learned a great deal from in the Perl world.</p>
<p>Randal <a href="http://www.stonehenge.com/merlyn/columns.html">wrote columns for magazines</a>, each time listing and describing a Perl script he'd written, line by line. I learned so much from Randal and enjoyed the format, so I thought I'd reproduce it here.</p>
<p>Let's start with the script, in full, courtesy of GitHub's embeddable Gist mechanism, which, incidentally, I created from the command line using <a href="https://github.com/cli/cli">GitHub's CLI <code>gh</code></a>, like this:</p>
<pre><code>; gh gist create --public scripts/cols.awk
</code></pre>
<p>I subsequently edited it too (there are now <a href="https://gist.github.com/qmacro/c84f5a17dc4740dc2defa6a913cd3c2c/revisions">multiple revisions</a>) with:</p>
<pre><code>; gh gist edit c84f5a17dc4740dc2defa6a913cd3c2c
</code></pre>
<p>OK, so here's the entire script.</p>
<script src="https://gist.github.com/qmacro/c84f5a17dc4740dc2defa6a913cd3c2c.js"></script>
<p>Remember that an AWK scripts are generally data driven, in that you describe patterns and then what to do when those patterns are matched. This is described nicely in the <a href="https://www.gnu.org/software/gawk/manual/html_node/Getting-Started.html#Getting-Started">Getting Started with <code>awk</code></a> section of the GNU AWK manual. The approach is &lt;pattern&gt; &lt;action&gt;, where the actions are within a <code>{...}</code> block. In this script, there are two special (and common) patterns used: <code>BEGIN</code> and <code>END</code>, i.e. before and after all lines have been processed. There's an &lt;action&gt; block in the middle which has no pattern; that means it's called for each and every line in the input. There's also an &lt;action&gt; block with a specific pattern, which we'll look at shortly.</p>
<p><strong>The invocation</strong></p>
<p>Note the invocation earlier looks like this:</p>
<pre><code>awk -F/ -vCOLS=5,6,7 -f ~/.dotfiles/scripts/cols.awk
</code></pre>
<p>Here are what the options do:</p>
<ul>
<li><code>-F/</code> says that the input field separator is the <code>/</code> character</li>
<li><code>-vCOLS=5,6,7</code> sets the value <code>5,6,7</code> for the variable <code>COLS</code></li>
<li><code>-f &lt;script&gt;</code> tells AWK where to find the script</li>
</ul>
<p>OK, let's start digging in.</p>
<p><strong>The <code>BEGIN</code> pattern</strong></p>
<p>Lines 7-9 just make sure that the optional <code>GAP</code> variable, if not explicitly set (using a <code>-v</code> option in the invocation) is set to 1. That's how many spaces we want between each column. If we had wanted a value other than the default here, an extra option like this would be required, for example <code>-vGAP=2</code>.</p>
<p><strong>The <code>NR == 1</code> pattern</strong></p>
<p>The action in this block is executed only on one occasion - when the value of <code>NR</code> is <code>1</code>.</p>
<p><code>NR</code> is a special AWK variable that represents the record number, i.e. the value is <code>1</code> for the first record, <code>2</code> for the second, and so on. Note that there's also <code>FNR</code> (file record number) which comes in handy when you're processing multiple input files. So the &lt;action&gt; block related to this <code>NR == 1</code> pattern is only executed once, when processing the first record in the input.</p>
<p>This &lt;action&gt; block, specifically lines 18-24, deal with the value for the <code>COLS</code> variable. If it's been set (as in our invocation: <code>-vCOLS=5,6,7</code>) it splits out the column numbers (5,6 and 7 here) into an array <code>fieldlist</code>. If it's not been set, then the default should be all columns, which are put into the <code>fieldlist</code> array using the loop in lines 21-23. Note that <code>NF</code> is another special variable, the value of which tells us the number of fields in the current record.</p>
<p><strong>The default pattern</strong></p>
<p>Lines 31-36 represent the action for the default pattern, i.e. this is executed for each line in the input. That includes even the first record, although we've done some processing for the first record in the &lt;action&gt; block for the <code>NR == 1</code> pattern already. That's because <em>all</em> patterns are tested, in sequence, unless an action invokes an explicit <code>next</code> to skip to the next input record (see update #2 at the end of this post for the attribution for this info).</p>
<p>The script has to work out what the longest word in each column is, and for that it needs to read through the entire input. I think perhaps there may be better ways of doing this, but here's what I did.</p>
<p>Because this script needs two passes over the input, we store the current record in an array called <code>records</code> in line 32. Worthy of note here is that each field in a record is represented by its positional variable i.e. <code>$1</code>, <code>$2</code>, and so on, and <code>$0</code> represents the entire record. In lines 33-35 we build up an array <code>fieldlengths</code> of the longest field by position. Arguably we only really need to remember the longest lengths of the fields in <code>fieldlist</code>, but hey.</p>
<p><strong>The <code>END</code> pattern</strong></p>
<p>Lines 40-49 represent the action for the special <code>END</code> pattern, i.e. once the records have been processed (once). At this stage we have the longest lengths for each of the fields (columns), and now we just need to go through the input again, which we have in the <code>records</code> array.</p>
<p>In line 42 we use the <code>split</code> function to split out the record we're processing into an array called <code>fields</code>:</p>
<pre><code>split(records[record], fields, FS)
</code></pre>
<p>The third argument supplied to this call is <code>FS</code>, which is another special variable representing the field separator for this execution. Remember the <code>-F/</code> option in the invocation, shown earlier? In this case, the value of <code>FS</code> is also therefore <code>/</code>. If the field separator is different (the default is whitespace) then the value of <code>FS</code> will be different too.</p>
<p>Then in lines 43-46 we start printing out each chosen field (remember, the chosen ones are in <code>fieldlist</code>). The <code>printf</code> call in line 45 is special, let's break that down here:</p>
<pre><code>printf &quot;%*-s&quot;, fieldlengths[f] + GAP, fields[f]
</code></pre>
<p>Like other flavours of <code>printf</code>, this one also takes a pattern and one or more variables to substitute into that pattern. The pattern here is for a single variable, and is <code>%*-s</code>. This means that the variable to print is a string (basic form is <code>%s</code>), which should be padded out, left justified (<code>-</code>) by a value also to be supplied as a variable (<code>*</code>).</p>
<p>So we need to supply two variables, the width to which the variable value should be padded, and the variable itself. And that's what is supplied. First, we have <code>fieldlengths[f] + GAP</code>, which works out to be the longest length for that field (column), plus zero or more spaces as defined in <code>GAP</code>. Then we have the variable that we want printed, i.e. <code>fields[f]</code>.</p>
<p>Noting that <code>printf</code> won't print a newline unless it's explicitly given (as <code>\n</code>), this works well because then the consecutive fields are printed on the same line. Line 47 takes care of printing a newline when all the fields are output for that record.</p>
<p>And that's it. As the tagline for this blog says, I reserve the right to be wrong. I'm not a proficient AWK scripter, but this works for me.</p>
<p>Happy scripting!</p>
<p><em>Update #1, later the same day: Over on Lobsters, the user <a href="https://gioele.io/">gioele</a> <a href="https://lobste.rs/s/r5ezxh/columnar_layout_with_awk#c_8cunpb">contributed a pipeline version</a>, which also helps me in a different area (small pieces loosely joined) of the same Unix meditation: <code>find ~/gh -type | cut -d/ -f5,6,7 | column -s/ -t</code>. Thanks gioele!</em></p>
<p><em>Update #2, even later the same day: Over on Reddit, the user <a href="https://www.reddit.com/user/oh5nxo/">oh5nxo</a> puts me right; in an earlier version of this script (and this blog post) I'd put the lines of code that are now in the <code>NR == 1</code> &lt;action&gt; block inside the main (default) &lt;action&gt; block, as I'd mistakenly thought that I'd have to otherwise repeat some code. That wasn't the case. Thanks for <a href="https://www.reddit.com/r/commandline/comments/l5ivt7/columnar_layout_with_awk/gkuxhx0/?utm_source=reddit&amp;utm_medium=web2x&amp;context=3">sharing your knowledge</a>, oh5nxo! I've updated the script and this post to reflect that.</em></p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Waiting for jobs, and the concept of the shell</title>
      <link href="https://qmacro.org/blog/posts/2020/12/28/waiting-for-jobs-and-the-concept-of-the-shell/"/>
      <updated>2020-12-28T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2020/12/28/waiting-for-jobs-and-the-concept-of-the-shell/</id>
      <content type="html">
        <![CDATA[
      <p><em>Bash's 'wait' builtin helps me understand Bash scripting as a language</em></p>
<p>I was browsing the source code of the main script in the <a href="https://github.com/RaymiiOrg/bash-http-monitoring">bash-http-monitoring</a> project that had been shared on a social news site recently. The general idea was that it fired off a number of background web requests to run in parallel and eventually produce a report on the availability of various websites. Nice, neat and simple.</p>
<p>In the main part of the project's <code>srvmon</code> script, I saw this:</p>
<pre class="language-bash"><code class="language-bash"><span class="token comment"># Do the checks parallel</span><br><span class="token keyword">for</span> <span class="token for-or-select variable">key</span> <span class="token keyword">in</span> <span class="token string">"<span class="token variable">${<span class="token operator">!</span>urls<span class="token punctuation">[</span>@<span class="token punctuation">]</span>}</span>"</span><br><span class="token keyword">do</span><br>  <span class="token assign-left variable">value</span><span class="token operator">=</span><span class="token variable">${urls<span class="token punctuation">[</span>$key<span class="token punctuation">]</span>}</span><br>  <span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">jobs</span> <span class="token operator">|</span> <span class="token function">wc</span> <span class="token parameter variable">-l</span><span class="token variable">)</span></span>"</span> <span class="token parameter variable">-ge</span> <span class="token variable">${maxConcurrentCurls}</span> <span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token punctuation">;</span> <span class="token keyword">then</span> <span class="token comment"># run 12 curl commands at max parallel</span><br>      <span class="token function">wait</span> <span class="token parameter variable">-n</span><br>  <span class="token keyword">fi</span><br>  doRequest <span class="token string">"<span class="token variable">$key</span>"</span> <span class="token string">"<span class="token variable">$value</span>"</span> <span class="token operator">&amp;</span><br><span class="token keyword">done</span><br><span class="token function">wait</span></code></pre>
<p>I noticed the use of <code>wait</code> in those two places and was intrigued; although I could guess what it did, I wanted to learn more. On digging in a little, and reflecting on it, it struck me that <code>wait</code> helps me understand better the origins of shell scripting and why it seems to be often misunderstood.</p>
<p><strong>The <code>wait</code> builtin in action</strong></p>
<p>First, what is <code>wait</code>? Well, it's (usually a) builtin, i.e. a command that is built in to the shell executable itself, rather than existing as a separate program. The headline description is that <code>wait</code> &quot;waits for job completion and returns the exit status&quot;. The <a href="https://en.wikipedia.org/wiki/Wait_(command)">Wikipedia entry</a> for it notes that it's a builtin because it &quot;<em>needs to be aware of the job table of the current shell execution environment</em>&quot;, which makes sense, given its purpose.</p>
<p>While the above snippet of code gives a couple of examples, I thought I'd spend a coffee writing a little exploratory script called <code>jobwait</code> to feel how <code>wait</code> can work. Here it is:</p>
<pre class="language-bash"><code class="language-bash"><span class="token shebang important">#!/usr/bin/env bash</span><br><br><span class="token function-name function">log</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br>  <span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">date</span> +%H:%M:%S<span class="token variable">)</span></span> <span class="token variable">$*</span>"</span><br><span class="token punctuation">}</span><br><br><span class="token function-name function">createjob</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br>  <span class="token builtin class-name">local</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token variable">$1</span><br>  <span class="token builtin class-name">local</span> <span class="token assign-left variable">message</span><span class="token operator">=</span><span class="token variable">$2</span><br>  <span class="token punctuation">(</span>sleep <span class="token string">"<span class="token variable">$time</span>"</span> <span class="token operator">&amp;&amp;</span> log <span class="token string">"<span class="token variable">$message</span>"</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><br>  log <span class="token string">"created job '<span class="token variable">$message</span>' (<span class="token variable">${time}</span>s) PID=<span class="token variable">$!</span>"</span><br><span class="token punctuation">}</span><br><br><span class="token function-name function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br>  createjob <span class="token number">10</span> medium<br>  createjob <span class="token number">15</span> long<br>  createjob <span class="token number">5</span> short<br>  log <span class="token string">"jobs created"</span><br>  <span class="token function">wait</span> <span class="token parameter variable">-n</span> <span class="token operator">&amp;&amp;</span> log <span class="token string">"a job has finished"</span><br>  <span class="token function">wait</span> <span class="token operator">&amp;&amp;</span> log <span class="token string">"all jobs have finished"</span><br><span class="token punctuation">}</span><br><br>main <span class="token string">"<span class="token variable">$@</span>"</span></code></pre>
<p>Running this script produced the following output - note the times on each of the log records, which shows when each log record was issued:</p>
<pre><code>; ./jobwait
09:03:11 created job 'medium' (10s) PID=72679
09:03:11 created job 'long' (15s) PID=72682
09:03:11 created job 'short' (5s) PID=72685
09:03:11 jobs created
09:03:16 short
09:03:16 a job has finished
09:03:21 medium
09:03:26 long
09:03:26 all jobs have finished
;
</code></pre>
<p>Now there's nothing unexpected about this; nevertheless, it was quite satisfying seeing things happen in the order that they did. Note that <code>wait</code> returns the job exit status too, and with the use of <code>&amp;&amp;</code> I'm ignoring that here at my peril, but it's only a test script.</p>
<p>The <code>-n</code> option makes <code>wait</code> wait for the next job to terminate, whatever that job is. So here we see that the &quot;a job has finished&quot; log entry is issued as soon as one of the jobs terminates - the 'short' one, in this case.</p>
<p><strong>The shell as a command environment</strong></p>
<p>Now we know what <code>wait</code> can do, I'd like to think a little bit about what it represents, too.</p>
<p>Recently my learning radar has been picking up various conversations where it seemed to me that people were <a href="https://twitter.com/qmacro/status/1332303180240216066">misunderstanding what shell scripting is</a>. It also came up this month in a Lobster thread, where the user &quot;pm&quot; really <a href="https://lobste.rs/s/yeloyn/minimal_safe_bash_script_template#c_q4gyqw">helped me put my finger on</a> what is frustrating about the &quot;Bash vs a real programming language&quot; discussion.</p>
<p>The shell is like a <a href="https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop">REPL</a> to your operating system, an interactive environment where you can have a conversation with it - manage resources, execute programs and so on. In that sense, the language of that conversation needs to be simple and have minimal noise. You want to just type something in and have it happen.</p>
<p>Moreover, you want to specify values with as little fuss as possible. Run a program that operates on a word, or a list of words, or a file or list of files - you don't want to be messing around with having to quote those things in the basic case. And the facilities that the REPL provides to enable you to take full advantage of the resources and programs you're working with, are super important. I'm thinking of the Unix pipeline, and IO redirection as two great examples of that.</p>
<p>That reference to Unix reminds me of a wonderful paper written in 1976 by one of Unix's fathers, Ken Thompson. It's <a href="https://archive.org/details/theunixcommandlanguage">THE UNIX COMMAND LANGUAGE</a> which is available via the Internet Archive but has also been made more consumable in different formats in <a href="https://susam.github.io/tucl/">this lovely repository</a> too. This paper is purportedly the first ever written about the Unix shell, and is a great read. It has a beautifully simple introduction to subshells, pipelines and IO redirection too.</p>
<p>Perhaps more subtly, what we know as the source for shell scripting today is referred to in the paper's title as a &quot;command language&quot;, and that's what it is. There is much in the paper that is quoteworthy, but I'll pick just one here that helps me think about what the shell (and, by implication, its language) is:</p>
<p>&quot;<em>The Shell, and the commands it executes, form an expression language ... [which is] easily extensible</em>&quot;</p>
<p>So this REPL, our interface to the operating system and its resources, is a command environment and our direct interaction with it is via a command language that has been designed to express our intentions in a straighforward and as consistent a way as possible.</p>
<p>Here's another quote, from the section &quot;THE SHELL AS A COMMAND&quot;:</p>
<p>&quot;<em>The Shell is just another command and by redirecting its standard input, it is possible to execute commands from files.</em>&quot;</p>
<p><strong>A natural progression to scripting</strong></p>
<p>So it's at this point in this thinking journey that we start to transition from a REPL, where the interaction is direct ... to a collection of commands that can be saved in a file and passed to the shell, which I guess one could see as indirect interaction.</p>
<p>This of course is a move to scripting, as intentional collections of command language elements. And this is where <code>wait</code> makes a lot of sense; perhaps it would be used interactively, but it seems more useful to me as a way of getting things to pause while other things complete, when in indirect mode ... in unattended command language execution mode. Scripting.</p>
<p>The transition from using the command language directly (including the syntax that allows us to join programs together in pipelines and manage input and output) to scripting, is in this way very subtle, and feels to me like a natural conclusion. And the features that make the command environment and its language so useful in the context of direct interaction in the REPL, are exactly those features that are available for scripting too.</p>
<p>To me, this is the essence of shell scripting, and explains why it is how it is. While it makes sense to write individual programs in whatever language one finds suitable -- while of course making sure those programs behave in predictable and useful ways in the context of the command environment, especially in relation to STDIN, STDOUT and STDERR -- it makes absolute no sense to me whatsoever to suggest that shell scripting itself should be replaced by &quot;a modern language&quot; (whatever that means).</p>
<p>To echo a (deliberately preposterous) concept mentioned in the Lobsters thread earlier, try replacing your shell with a &quot;modern language&quot; REPL such as Node.js's or Python's, and see how your productivity plummets. Try harnessing operating system resources, executing programs and filtering their output, or submitting background jobs (and <code>wait</code>ing for them to complete before proceeding further) - and you'll soon come unstuck.</p>
<p>The shell is how it is for a reason. I'm happy with that.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Implicit values in Bash for loop construct</title>
      <link href="https://qmacro.org/blog/posts/2020/12/03/implicit-values-in-bash-for-loop-construct/"/>
      <updated>2020-12-03T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2020/12/03/implicit-values-in-bash-for-loop-construct/</id>
      <content type="html">
        <![CDATA[
      <p><em>Bash's 'for loop' construct can use implicit values - who knew? Not me ...</em></p>
<p>I was browsing a <a href="https://superuser.com/questions/318067/how-to-iterate-over-all-pair-combinations-in-a-list-in-bash/732740">Superuser question and answer</a> this morning and the code in the <a href="https://superuser.com/a/318073/620229">accepted answer</a> looked like this:</p>
<pre class="language-bash"><code class="language-bash"><span class="token builtin class-name">set</span> -- value1 value2 <span class="token string">"value with spaces"</span><br><span class="token keyword">for</span> a<span class="token punctuation">;</span> <span class="token keyword">do</span><br>    <span class="token builtin class-name">shift</span><br>    <span class="token keyword">for</span> b<span class="token punctuation">;</span> <span class="token keyword">do</span><br>        <span class="token builtin class-name">printf</span> <span class="token string">"%s - %s<span class="token entity" title="\n">\n</span>"</span> <span class="token string">"<span class="token variable">$a</span>"</span> <span class="token string">"<span class="token variable">$b</span>"</span><br>    <span class="token keyword">done</span><br><span class="token keyword">done</span></code></pre>
<p>I was somewhat confused by the rather short <code>for</code> loop constructions here, and ended up looking it up in the <a href="https://www.gnu.org/savannah-checkouts/gnu/bash/manual/bash.html#Looping-Constructs">looping constructs section of the Bash manual</a>.</p>
<p>What looked odd to me was that there is no <code>in &lt;values&gt;</code> part to either of the <code>for</code> loops. I am used to seeing (and writing) <code>for var in x y z</code> or similar. So what were these loop constructions iterating over? Well, the Bash manual section says this (emphasis mine):</p>
<p><em><code>for name [ [in [words …] ] ; ] do commands; done</code></em></p>
<p><em>Expand words (see Shell Expansions), and execute commands once for each member in the resultant list, with name bound to the current member. <strong>If ‘in words’ is not present, the for command executes the commands once for each positional parameter that is set, as if ‘in &quot;$@&quot;’ had been specified</strong> (see Special Parameters).</em></p>
<p>So these <code>for</code> loops are processing the positional parameters in <code>$1</code>, <code>$2</code> and <code>$3</code> which were set by the <code>set</code> command on the first line, i.e. the values <code>value1</code>, <code>value2</code>, and <code>value with spaces</code> respectively.</p>
<p>So there you go - it's sort of obvious now I think about it - what else would the loop constructs be processing? Anyway - onwards and upwards!</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>The myriad meanings of pwd in Unix systems</title>
      <link href="https://qmacro.org/blog/posts/2020/11/08/the-myriad-meanings-of-pwd-in-unix-systems/"/>
      <updated>2020-11-08T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2020/11/08/the-myriad-meanings-of-pwd-in-unix-systems/</id>
      <content type="html">
        <![CDATA[
      <p><em>Last week I ran a poll on Twitter to see what people considered with respect to the meaning of 'pwd' in Unix and Linux systems. The results were varied, for perhaps good reason.</em></p>
<p>At the end of Oct 2020 I ran a <a href="https://twitter.com/qmacro/status/1322567992551624705">brief poll on Twitter</a>, on which 82 people voted. Here's that poll, and the results. They're quite mixed, which at first might seem surprising. But there are reasons for that, as we'll find out.</p>
<p><img src="/images/2020/11/twitter-poll-pwd.png" alt="Poll on Twitter: &quot;Fun Saturday afternoon shell poll. In Unix (and Linux), what do you think the P in $PWD (or pwd) stand for?&quot;"></p>
<p><strong>Print working directory</strong></p>
<p>The most popular option was &quot;print working directory&quot;. At first sight it seems logical: &quot;print out the current working directory, i.e. where I am right now&quot;. Moreover, the description in various versions of the manual for <code>pwd</code> help to drive home that notion. Typically we see sentences like &quot;<a href="https://linux.die.net/man/1/pwd">print name of current/working directory</a>&quot; or &quot;<a href="https://www.mankier.com/1/pwd">print the current directory</a>&quot;.</p>
<p>But there are lots of commands that print stuff, and are described in that way too. Take the <code>id</code> command. Here's what one man page says: &quot;<a href="https://man7.org/linux/man-pages/man1/id.1.html">print real and effective user and group IDs</a>&quot;. There's &quot;print&quot; again. But the command isn't <code>pid</code>, it's <code>id</code>. When you think about it, many, many commands in Unix send information to STDOUT, i.e. to the terminal. That's sort of the point of many of them.</p>
<p>This time arguably only superficially definitive, it would seem, the Wikipedia entry states, on the <a href="https://en.wikipedia.org/wiki/Pwd">page for <code>pwd</code></a>: &quot;the pwd command (print working directory) writes the full pathname of the current working directory to the standard output&quot;. As if to underline the hopeful authority of this statement, there are five (!) footnotes that supposedly link to resources that back this up.</p>
<p>Unfortunately, the first footnote points to a Wayback Machine copy of the <a href="https://web.archive.org/web/20050520231659/http://cm.bell-labs.com/7thEdMan/v7vol1.pdf">UNIX PROGRAMMERS MANUAL - Seventh Edition, Volume 1 - January, 1979</a>, wherein there are actually zero references to <code>pwd</code> being short for &quot;print working directory&quot;:</p>
<p><img src="/images/2020/11/programmers-manual-pwd.png" alt="excerpt from UNIX PROGRAMMERS MANUAL on pwd"></p>
<p>I don't know about you, but this historic document carries more weight for me than other sources I've come across, and it only serves here to undermine the credibility of the Wikipedia entry.</p>
<p>The rest of the footnote links seem dubious at best, except for the one pointing to the <a href="https://www.gnu.org/software/coreutils/manual/coreutils.html#pwd-invocation">GNU Coreutils manual on pwd</a> which has it as &quot;print working directory&quot;. But everything else I've seen so far makes me think that this is a misunderstanding that has spread for obvious and innocent reasons. In addition, the one footnote in the Wikipedia page that is not used to back this claim up is a pointer to <a href="https://pubs.opengroup.org/onlinepubs/9699919799/utilities/pwd.html">The Open Group Base Specifications Issue 7, 2018 edition's information on pwd</a>, which almost seems like it's actually avoiding using the word &quot;print&quot; at all: &quot;return working directory name&quot; ... &quot;The pwd utility shall write to standard output an absolute pathname of the current working directory, which does not contain the filenames dot or dot-dot.&quot;. Very specific, very not-print.</p>
<p>So I'm thinking that &quot;print working directory&quot; isn't what <code>pwd</code> stands for. In fact, &quot;print working directory&quot; may be common to some man pages, but on this macOS machine, with its <a href="https://en.wikipedia.org/wiki/Berkeley_Software_Distribution">BSD</a> heritage, we have, instead: &quot;pwd -- return working directory name&quot;. Moreover, it goes on to say &quot;The pwd utility writes the absolute pathname of the current working directory to the standard output&quot;.</p>
<p><strong>Pathname of working directory</strong></p>
<p>So perhaps it really is &quot;pathname of working directory&quot;. That would, at least to me, make more sense. Not only does it eschew the redundancy of &quot;print&quot;, it also is more specific about the output - if I'm in <code>/home/dja/</code> for example, then invoking pwd will tell me that, i.e. where I am, including the whole path, and not just <code>dja</code>:</p>
<pre class="language-shell"><code class="language-shell">$ <span class="token builtin class-name">pwd</span><br>/home/dja</code></pre>
<p><strong>Process working directory</strong></p>
<p>As for the other options, I do favour &quot;process working directory&quot;, mostly because it makes a lot of sense to me; every process in Unix has the concept of a current working directory, and that's exactly what I'm asking for when I'm in my shell process and enter <code>pwd</code> - there's a part in the video <a href="https://youtu.be/hgFBRZmwpSM?t=165">Unix terminals and shells</a> that explains this very well.</p>
<p>I'd love to be able to point to some old Unix sources that definitively explain the answer, but unfortunately that search has come up with very little - the <code>pwd</code> source in both the <a href="https://minnie.tuhs.org/cgi-bin/utree.pl?file=V5/usr/source/s2/pwd.c">5th</a> and <a href="https://github.com/yisooan/unix-v6/blob/master/source/s2/pwd.c">6th</a> Editions of Unix shed no light on this whatsoever.</p>
<p><strong>Present working directory</strong></p>
<p>What about &quot;present working directory&quot;? Well, that option seems to have legs, in the form of the Korn shell. While <a href="https://northstar-www.dartmouth.edu/doc/solaris-forte/ipe-help/dbx/dbx88cc.html">one source</a> implies that the answer might well be &quot;pathname of current working directory&quot;, in that <code>pwd</code> just emits the value of the <code>$PWD</code> environment variable (and a variable called &quot;print working directory&quot; makes no sense at all) ... it would seem that in ksh-land, at least, &quot;present working directory&quot; is what <code>pwd</code> represents. Take, for example, the <a href="https://osr507doc.xinuos.com/en/man/html.C/ksh.C.html">ksh man page</a> which states &quot;PWD - The present working directory set by the cd command&quot;.</p>
<p>There's a ton of discussion, both direct and indirect, on this very question. Take for example these two entries in the Unix &amp; Linux Stack Exchange forum: <a href="https://unix.stackexchange.com/questions/399026/etymology-of-pwd">Etymology of $PWD</a> and <a href="https://unix.stackexchange.com/questions/174990/what-is-pwd-vs-current-working-directory">What is $PWD? (vs current working directory)</a>. Of course, perhaps the definitive answer will never be found, as computing history is nothing if not varied and prone to forking.</p>
<p><strong>Multics and print_wdir</strong></p>
<p>Talking of history, we could go further back to pre-Unix roots, in the form of Multics, which indirectly gave rise to Unix (originally &quot;Unics&quot;). In the <a href="https://multicians.org/multics-commands.html">list of Multics Commands</a>, we see, nestled amongst other similarly named commands, something that jumps out at us:</p>
<pre><code>print_mail (pm)	display mail in a mailbox
print_messages (pm)	display interactive messages in a mailbox
print_motd (pmotd)	display message of the day (source)
print_proc_auth (ppa)	display process's sensitivity level and compartments
print_request_types (prt)	display list of I/O daemon request types
print_search_paths (psp)	display search paths
print_search_rules (psr)	display ready messages
print_wdir (pwd)	display working directory
</code></pre>
<p>There's <code>pwd</code>, and in fact, just like its sibling <code>pmotd</code>, for example, which is short for <code>print_motd</code>, it's short for <code>print_wdir</code>. Now, given the context of the original poll being set to Unix and Linux, perhaps we must discount this information. But as someone who is fascinated with Unix history in general - how can I?</p>
<p>I guess there are few things to conclude. The history is rich and diverse, and maybe we'll never know for sure. Perhaps, in fact, the answer will depend on whom we ask. In the grand scheme of things, it doesn't really matter ... but to those who delight in minutiae, it's a fun topic worth exploring.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Computer Unit 1979</title>
      <link href="https://qmacro.org/blog/posts/2020/11/03/computer-unit-1979/"/>
      <updated>2020-11-03T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2020/11/03/computer-unit-1979/</id>
      <content type="html">
        <![CDATA[
      <p><em>I've transcribed an article about the arrival of the &quot;Computer Unit&quot; - a PDP-11/34 - at my school in 1979. The unit became the early focus of a fascination with computing that's never left me.</em></p>
<p>I went to school in the late 1970s and early 1980s - the dawn of computing for everyone. My very first experience of computing was at a terminal connected to a timesharing minicomputer, rather than at the keyboard of one of the personal computers of the day.</p>
<p>There was an article in the 1979 edition of my school's magazine &quot;The Hulmeian&quot;, written by our head of Mathematics Morris Loveland. It brings back many happy memories, and provides some insight into computing in the early days.</p>
<p>Below the article, I've included some pictures accompanied by brief descriptions.</p>
<p><em>COMPUTER UNIT</em></p>
<p><em>In 1974 the School purchased a single computer terminal, a TEXAS 733, and established the G.P.O. dial-up link to Salford University. This project, initially between School and the University, made available on-line computer time to us and later to other educational establishments. It proved to be a most useful and successful facility and reports have been given in this magazine of some of the work undertaken in the five years in which the link was used. The School had between ten and fifteen hours of on-line time each week, mainly during lunch hours and after school. Some time was available during teaching time and a large number of boys had experience of using the BASIC language to a large remote processor.</em></p>
<p><em>Computing was mainly organised for small groups or for individual users, although a certain amount of class teaching was undertaken. The limitations of a single terminal caused delays and frustration. Boys were foreced to wait to use the system and it was found to be extremely difficult to teach a class of thirty boys where the visual display was a single sheet of typed material. Salford University extended the computer facility to several other schools resulting in a considerable reduction in the on-line time available to us.</em></p>
<p><em>Early in 1978 it was decided to investigate the possibility of installing a complete on-site computer system at School. The searches took nearly a year and in that time a system which would satisfy the requirements of the School was determined. The financial aspects were agreed in November 1978 and the system was delivered in January 1979.</em></p>
<p><em>The computer which has been installed is a SYSTIME 3000 comprising a PDP11/34 processor with 196Kb of working memory, two 4.8Mb disc drives for data storage, three visual display terminals (one of which is used for system control), a Superterm paper printer and the necessary hardware to include the original Texas terminal into the system. Thus four terminals instead of one are available for use with no restriction on the time when a boy may use the computer.</em></p>
<p><em>The language used is BASIC PLUS which is a variant of the BASIC language used during the past five years. Very few problems have been experienced with this minor change of language and it is a most suitable language for teaching purposes. BASIC PLUS is interactive, that is, one which enables a two way 'conversation' between user and machine. If an error is made by the user, either in typing or in the logic of what is communicated to the machine, he is informed of that error immediately and can make the required corrections.</em></p>
<p><em>The processor and system control is housed in the careers room and is linked by cables running across the quadrangle and over the roof of the Science block to room 34. This room has been redesigned and redecorated to be a terminal room, housing at present the four computer terminals.</em></p>
<p><em>The system is a fairly standard computer package apart from one important modification. The signal from one visual display unit is taken and fed to a television monitor. Normally a single terminal is used by an individual or at most by a small group working on a particular project. The intention of having the signal from one terminal displayed on a large television monitor was to enable full classes of thirty boys to see a particular piece of computing. However, one monitor proved insufficient and by including a signal converter and amplifier the signal from one terminal can now be displayed on three domestic television sets. When a full class is taken into the terminal room teaching can be given to all by linking all four terminals together and displaying the data on them and on the three television sets. As far as is known this particular part of the system is an innovation as regards the teaching of computing in schools, particularly as part of the electronics required to convert the signals to be compatible with domestic television sets was designed and built in School.</em></p>
<p><em>The system is thus being used in two different ways: for individual and small group activity or with the system linked together for class teaching. So far no examination teaching has been undertaken and at present none is envisaged. The intention is to use the computer in the classroom as a tool to teach a computer language, which will enable boys to undertake projects on their own, and as an aid to enrich and extend the normal teaching of Mathematics. Boys will find that they are taken to the terminal room perhaps for a complete period or for only ten minotes of a Mathematics period during which some particular part of the subject matter being developed will be illustrated using the computer.</em></p>
<p><em>The system has been planned with future expansion in mind. When the wiring was installed two extra cables were taken into room 34; and therefore two more terminals can be added to the system fairly easily as and when they are required. Further expansion is possible; up to twenty-four terminals can be serviced by the processor! To achieve this additional memory will have to be added to the processor.</em></p>
<p><em>Following the delivery of the system in January 1979 and after all testing had been carried out by the suppliers the computer was in limited use in early March. Since then the number of users has increased considerably. The computer is available for general use from 8.00 am to 5.00 pm and is heavily used by boys from the first to the sixth form before morning school, during the lunch hour and after school. Considerable use has been made during teaching time for class sessions, and sixth formers are able to use the computer in their private study time. During the final three weeks of the summer term about nine hundred log-ins were recorded! As this period included the preparation for the Open Days when the system was out of general use, there appears to be a growing for the facility the computer now provides.</em></p>
<p><em>During the summer term three after-school courses were provided to each the BASIC language, two for juniors new to the system and one for those with considerable experience in computing. It is hoped that more of these courses will be provided for boys at all levels in the School in the coming years.</em></p>
<p><em>Looking back over the period of the installation of the computer and the enthusiasm it has generated with boys of all ages, I anticipate a growing demand for computer time and an enhancement of the teaching of Mathematics in the School.</em></p>
<p><em>M.L.</em></p>
<p><img src="/images/2020/11/computerunit.jpg" alt="A picture of schoolboys using the terminals of the computer unit">
<em>A photo that accompanied the article in the school magazine</em></p>
<p>Here's a grainy photo that accompanied the article in the school magazine. You can see one of the &quot;VDU&quot; (Visual Display Unit) terminals, and you can see a better picture of one of these in the photo of the Systime unit at the end of this post, but can you also spot the <a href="http://vtda.org/docs/computing/IntertecDataSystems/1100500-00_SuperTermMaintenance_1978.pdf">Superterm</a> paper-based terminal (back right)?</p>
<p><img src="/images/2020/11/superterm.png" alt="A grainy photo of the &quot;Superterm Data Communications Terminal&quot;">
<em>A Superterm Data Communications Terminal</em></p>
<p>Moreover, furthest away from the camera, there's the original Texas 733 terminal, also paper-based. Here's a better picture of one, from the <a href="http://www.bitsavers.org/pdf/ti/terminal/brochures/TI-327-A-10M_Silent_700_Model_732_733_Brochure_Sep_1973.pdf">original brochure</a>.</p>
<p><img src="/images/2020/11/texas.png" alt="A Texas 733 terminal&quot;">
<em>A Texas 733 terminal</em></p>
<p>Here's a picture of what the computer unit looked like - it's a photo (courtesy of <a href="http://www.chilton-computing.org.uk/">Computing at Chilton</a>, thank you) of a Systime unit, and the terminal on the desk is the same as those that we had in the computer room.</p>
<p><img src="/images/2020/11/systime.png" alt="A picture of a very similar Systime unit">
<em>A Systime unit</em></p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>The subtle art of quoting newline characters</title>
      <link href="https://qmacro.org/blog/posts/2020/11/01/the-subtle-art-of-quoting-newline-characters/"/>
      <updated>2020-11-01T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2020/11/01/the-subtle-art-of-quoting-newline-characters/</id>
      <content type="html">
        <![CDATA[
      <p><em>Putting a backslash at the end of a line in the shell (or in a shell script) means &quot;continued on the next line!&quot;, right? Well yes, but it's more subtle, more simple and more beautifully shell-like than I thought.</em></p>
<p>I was staring absentmindedly at a helper script that I'd written on last Friday's #HandsOnSAPDev live stream (replay here: <a href="https://www.youtube.com/watch?v=E9Ha0tnXGS4">Generating Enterprise Messaging artifact graphs with shell scripting and Graphviz - Part 1</a>) which looks like this:</p>
<pre class="language-shell"><code class="language-shell"><span class="token shebang important">#!/usr/bin/env bash</span><br><br><span class="token builtin class-name">declare</span> <span class="token assign-left variable">fontname</span><span class="token operator">=</span><span class="token string">"Victor Mono"</span><br><span class="token builtin class-name">declare</span> <span class="token assign-left variable">fontsize</span><span class="token operator">=</span><span class="token string">"16"</span><br><br>dot <span class="token punctuation">\</span><br>  <span class="token parameter variable">-Tpng</span> <span class="token punctuation">\</span><br>  <span class="token parameter variable">-Nfontname</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$fontname</span>"</span> <span class="token punctuation">\</span><br>  <span class="token parameter variable">-Nfontsize</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$fontsize</span>"</span> <span class="token punctuation">\</span><br>  test.dot <span class="token operator">></span> test.png</code></pre>
<p>(yes, I know we need to talk about the hashbang, but let's leave that for another time).</p>
<p>I like to make my scripts readable, so I often split commands over separate lines, as I've done here in the invocation of the <code>dot</code> command, with its various switches and arguments.</p>
<p>I had always vaguely thought that &quot;OK, well if I want to continue on the next line, I have to put a backslash (<code>\</code>) at the end of the preceding line&quot;, like I've done here. So in that sense, I was considering the backslash as a sort of continuation character.</p>
<p>Bzzt. Wrong. Or at least not entirely accurate.</p>
<p>Yesterday the YouTube algorithm, which knows I'm currently geeking out on all things shell, suggested a short series of videos by <a href="https://www.youtube.com/channel/UCseUQK4kC3x2x543nHtGpzw">Brian Will</a>: <a href="https://www.youtube.com/playlist?list=PLFAC320731F539902">Unix Terminals and Shells</a>. In the second video in this playlist, he listed the characters in Bash that had special meaning:</p>
<pre><code># ' &quot; \ $ ` * ~ ? &lt; &gt; ( ) ! | &amp; ; space newline
</code></pre>
<p>Some may be more obvious or familiar than others. Note the last two in the list - <code>space</code> and <code>newline</code>. In particular, <code>newline</code> normally denotes the end of a command (of course, there are other special characters that denote this too - notably <code>;</code> and <code>&amp;</code>). See <a href="https://www.gnu.org/software/bash/manual/bash.html#Lists">Section 3.2.3 Lists of Commands</a> in the Bash manual for details.</p>
<p>Brian goes on to explain the function of the backslash character in a quoting or escape capacity - to remove the special meaning of the immediately following character, so that it's treated as-is. So for example if you actually wanted a dollar sign, which normally has a special meaning if you use it, you'd use <code>\$</code>.</p>
<p>Likewise, then for the newline character. If you want the meaning of newline to be cancelled, i.e. &quot;please do <em>not</em> treat this point as the end of the command&quot;, then you need to use the backslash to quote it:</p>
<pre><code>\newline
</code></pre>
<p>(of course, I'm representing an actual newline with <code>newline</code> here).</p>
<p>I don't know about you, but I've always used &quot;escape&quot; as a verb here, rather than &quot;quote&quot;, i.e. &quot;to remove the special meaning of character x, you have to escape it with a <code>\</code>&quot;. I think a more accurate way of saying it is &quot;... you have to quote it with a <code>\</code>&quot;. The cause is probably the fact that <code>\</code> is known as the &quot;escape character&quot;. The escape character is documented in Section <a href="https://www.gnu.org/software/bash/manual/bash.html#Escape-Character">3.1.2.1 Escape Character</a> of the Bash manual, which is quite short, and worth quoting, thus:</p>
<p>&quot;<em>A non-quoted backslash ‘\’ is the Bash escape character. It preserves the literal value of the next character that follows, with the exception of newline. If a \newline pair appears, and the backslash itself is not quoted, the \newline is treated as a line continuation (that is, it is removed from the input stream and effectively ignored)</em>&quot;.</p>
<p>This rounds out this post neatly for me, in that in fact, yes, the special meaning of <code>newline</code> is removed if you quote it with a backslash, so you can continue on the next line; what's more, it's actually removed from the input stream. I mean, it's just whitespace anyway, but that's a curious and interesting detail.</p>
<p>Anyway, I'm now enlightened - I thought the backslash was doing something &quot;special&quot; here in the context of the script above (and many others like it), but no, in fact, it's just doing its normal job of removing the special meaning of the immediately following character, which to us is invisible.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Case modification operators in parameter substitution</title>
      <link href="https://qmacro.org/blog/posts/2020/10/16/case-modification-operators-in-parameter-substitution/"/>
      <updated>2020-10-16T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2020/10/16/case-modification-operators-in-parameter-substitution/</id>
      <content type="html">
        <![CDATA[
      <p><em>Today I learned that in addition to the usual ways of uppercasing strings, Bash 4 brought the addition of case modification operators to the parameter substitution family.</em></p>
<p>Spending a pleasant coffee on my day off today I looked at tackling another challenge in <a href="https://exercism.io/tracks/bash">Exercism's bash track</a> - <a href="https://exercism.io/tracks/bash/exercises/acronym/solutions/e70a7282d2fb4856bbeb1c2ae745d3c4">Acronym</a>. The requirement included ensuring that any generated acronym (I guess these might actually be initialisms, but that's a discussion for another time) was completely in uppercase, regardless of the source.</p>
<p>In my solution, I resorted to the usual use of <code>tr</code>, like this:</p>
<pre class="language-bash"><code class="language-bash"><span class="token function">tr</span> <span class="token string">'[:lower:]'</span> <span class="token string">'[:upper:]'</span></code></pre>
<p>All good. I like to peruse others' solutions, to learn from how they might have tackled the same challenge, and I came across something that looked rather odd at first, as I'd never seen it before. It was a solution by TopKech and looks like this:</p>
<pre class="language-bash"><code class="language-bash"><span class="token assign-left variable">OUTPUT</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$1</span>"</span> <span class="token operator">|</span> <span class="token function">sed</span> <span class="token parameter variable">-e</span> <span class="token string">'s/$/ /'</span> <span class="token parameter variable">-e</span> <span class="token string">'s/\([^ \-]\)[^ \-]*[ \-]/\1/g'</span> <span class="token parameter variable">-e</span> <span class="token string">'s/^ *//'</span><span class="token variable">)</span></span><br><span class="token builtin class-name">echo</span> <span class="token variable">${OUTPUT<span class="token operator">^^</span>}</span></code></pre>
<p>What's that <code>^^</code> in the second line?</p>
<p>Turns out that it's a case modification operator, within a parameter substitution context. What's more, it is &quot;relatively&quot; new, in that it was introduced with <a href="https://tldp.org/LDP/abs/html/bashver4.html">version 4 of Bash</a>. I say &quot;relatively&quot;, as version 4 was introduced way back in 2009; but having been a macOS user for a while, I'd been stuck with version 3 due to Apple's issues with the GPL v3 licence (prompting them not to ship any version beyond 3, and even go so far as to make <code>zsh</code> the default shell on newer versions of the OS).</p>
<p>Version 4 of Bash came with lots of wonderful stuff, including 4 separate case modification operators, that are illustrated in the <a href="https://tldp.org/LDP/abs/html/bashver4.html">Advanced Bash Scripting Guide - Chapter 37. Bash, versions 2, 3, and 4</a> and can be summarised thus:</p>
<p>|-|-|
|<code>${var^}</code>|Make first char of <code>var</code> value uppercase|
|<code>${var^^}</code>|Make all chars of <code>var</code> value uppercase|
|<code>${var,}</code>|Make first char of <code>var</code> value lowercase|
|<code>${var,,}</code>|Make all chars of <code>var</code> value lowercase|</p>
<p>I didn't know that, but <a href="https://twitter.com/qmacro/status/1317046383950659584">I do now!</a></p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>MID$ and shell parameter expansion</title>
      <link href="https://qmacro.org/blog/posts/2020/10/11/middollar-and-shell-parameter-expansion/"/>
      <updated>2020-10-11T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2020/10/11/middollar-and-shell-parameter-expansion/</id>
      <content type="html">
        <![CDATA[
      <p><em>While perhaps misunderstood and potentially confusing due to the different options, the ability to access and manipulate values in variables in Bash is rich and varied.</em></p>
<p>I've just set up <a href="https://exercism.io">Exercism</a> on this machine so I could download challenges in the <a href="https://exercism.io/tracks/bash">Bash track</a> and try to improve my Bash scripting fu. I spent a pleasant hour getting to know <a href="https://github.com/sstephenson/bats">bats</a> - the Bash Automated Testing System, which Exercism uses for the Bash track, and looking at one of the easy challenges on Hamming in relation to DNA sequences. My solution, in case you're interested, is <a href="https://exercism.io/my/solutions/50ef4a487c3641eda1b1af823ca7d9b2">here</a>.</p>
<p>In implementing the solution, I had to compare DNA sequences and determine how many differences between them there were - a count of where letters differed in the same positions. For example, while there are no differences in the pair of sequences GATTACA and GATTACA, there are two differences in the pair GATTACA and GCTTAGA. As much by luck as anything else, I stumbled upon this construct:</p>
<pre class="language-bash"><code class="language-bash"><span class="token variable">${parameter<span class="token operator">:</span>offset<span class="token operator">:</span>length}</span></code></pre>
<p>I'd seen this construct before and it rang a bell, I remember thinking it was like the <a href="http://www.bbcbasic.co.uk/bbcbasic/manual/bbckey3.html"><code>MID$</code> function in many implementations of the BASIC language</a> I'd used in my early days. Basically it's a way of reaching into a string and pulling out a section of it.</p>
<p>So for example, if we have <code>str=&quot;Hello, World!&quot;</code> then we can use this construct like this (note that all these variations are possible):</p>
<pre class="language-bash"><code class="language-bash"><span class="token operator">></span> <span class="token builtin class-name">echo</span> <span class="token variable">${str}</span><br>Hello, World<span class="token operator">!</span><br><span class="token operator">></span> <span class="token builtin class-name">echo</span> <span class="token variable">${str<span class="token operator">:</span>4}</span><br>o, World<span class="token operator">!</span><br><span class="token operator">></span> <span class="token builtin class-name">echo</span> <span class="token variable">${str<span class="token operator">:</span>4<span class="token operator">:</span>5}</span><br>o, Wo</code></pre>
<p><strong>Shell parameter expansion</strong></p>
<p>There's plenty more information on this in the <a href="https://www.gnu.org/savannah-checkouts/gnu/bash/manual/bash.html">Bash man page</a>; perhaps most importantly we learn there what this is called - in what category this contruct lives. It's in the <a href="https://www.gnu.org/software/bash/manual/html_node/Shell-Parameter-Expansion.html"><strong>parameter expansion</strong></a> family.</p>
<p>We've seen parameter expansion before in this blog, specifically in <a href="https://qmacro.org/autodidactics/2020/09/27/shell-parameter-expansion-with-+/">Shell parameter expansion with :+ is useful</a>, which looks at the <code>:-</code> and <code>:+</code> variants. But even if we combine this post with that one, we're only scratching the surface of what's possible; I'm looking forward to grabbing a cup of tea and reading through the entire section of the Bash man page on this topic soon.</p>
<p><strong>Using <code>expr</code></strong></p>
<p>What's potentially confusing here is that there's more than one way to extract a portion of a string. Not only do we have this shell parameter expansion construct, but we have the executable <code>expr</code>, which evaluates expressions. There are many expressions that can be evaluated (see the man page), one of which is <code>substr</code>. This explains why, in the <a href="https://tldp.org/LDP/abs/html/string-manipulation.html">Manipulating Strings</a> section of the Linux Documentation project, both approaches are documented.</p>
<p>So using <code>expr</code>, the equivalent of the above example where the value &quot;o, Wo&quot; is pulled out of &quot;Hello, World!&quot; is this:</p>
<pre class="language-bash"><code class="language-bash"><span class="token operator">></span> <span class="token function">expr</span> substr <span class="token string">"<span class="token variable">$str</span>"</span> <span class="token number">5</span> <span class="token number">5</span><br>o, Wo</code></pre>
<p>There are two things to note here with this <code>expr</code> evaluation of <code>substr</code>, given that the man page describes it as <code>substr STRING POS LEN</code>:</p>
<ul>
<li>
<p>the first number is not the <em>offset</em> but the <em>position</em>, which is why here we need the first value to be 5 (position in the string) whereas with the parameter expansion we needed the value 4 (offset from the start).</p>
</li>
<li>
<p>both numbers (POS and LEN) are required; if your extraction needs to be &quot;from here to the end of the line&quot; you'll either have to work out the length yourself, or use another expression with <code>expr</code>, for example <code>match</code>.</p>
</li>
</ul>
<p><strong>In context</strong></p>
<p>Right now I'm wondering about the history of both approaches, and what we should be using, but that question is for another day. In the meantime, in case you want to see the use of this parameter expansion approach in my solution, here's the relevant section (noting that the first and second DNA sequence strings are in <code>$1</code> and <code>$2</code> respectively):</p>
<pre class="language-bash"><code class="language-bash"><span class="token comment"># Count the differences</span><br><span class="token builtin class-name">declare</span> <span class="token assign-left variable">diffcount</span><span class="token operator">=</span><span class="token number">0</span><br><span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">seq</span> <span class="token number">0</span> <span class="token punctuation">$((</span> $<span class="token punctuation">{</span><span class="token punctuation">\</span>#1<span class="token punctuation">}</span> <span class="token parameter variable">-1</span> <span class="token punctuation">)</span><span class="token variable">)</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">do</span><br>  <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token operator">!</span> <span class="token string">"<span class="token variable">${1<span class="token operator">:</span>$i<span class="token operator">:</span>1}</span>"</span> <span class="token operator">=</span> <span class="token string">"<span class="token variable">${2<span class="token operator">:</span>$i<span class="token operator">:</span>1}</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token variable"><span class="token punctuation">((</span> diffcount<span class="token operator">++</span> <span class="token punctuation">))</span></span><br><span class="token keyword">done</span><br><span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$diffcount</span>"</span></code></pre>
<p>There's plenty to learn in this area, but right now it's time for me to make that cuppa.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Understanding declare</title>
      <link href="https://qmacro.org/blog/posts/2020/10/08/understanding-declare/"/>
      <updated>2020-10-08T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2020/10/08/understanding-declare/</id>
      <content type="html">
        <![CDATA[
      <p><em>I've been looking into declare, and also how it compares to typeset and local. It turns out that there's a lot to know.</em></p>
<p>After working my way through the small <code>ix</code> script in <a href="https://rwx.gg">Mr Rob</a>'s <a href="https://gitlab.com/rwxrob/dotfiles/-/tree/master">dotfiles</a>, writing three posts <a href="/autodidactics/2020/10/03/using-exec-to-jump/">Using exec to jump</a>, <a href="/autodidactics/2020/10/04/curl-and-multipart-form-data/">curl and multipart/form-data</a> and <a href="/autodidactics/2020/10/04/check-command-available/">Checking a command is available before use</a> along the way, I've now turned my attention to the <a href="https://gitlab.com/rwxrob/dotfiles/-/blob/master/scripts/twitch"><code>twitch</code></a> script which he uses during his <a href="twitch.tv/rwxrob">live streams</a>. I haven't gone very far when I light upon this section:</p>
<pre class="language-shell"><code class="language-shell"><span class="token builtin class-name">declare</span> <span class="token assign-left variable">gold</span><span class="token operator">=</span><span class="token string">$'<span class="token entity" title="\033">\033</span>[38;2;184;138;0m'</span><br><span class="token builtin class-name">declare</span> <span class="token assign-left variable">red</span><span class="token operator">=</span><span class="token string">$'<span class="token entity" title="\033">\033</span>[38;2;255;0;0m'</span><br><span class="token punctuation">..</span>.</code></pre>
<p>So <code>declare</code> is a keyword that I've seen before but never fully understood or embraced. Seems like this is a good time to fix that.</p>
<p><strong>Declare is a builtin</strong></p>
<p>To start off, <code>declare</code> is a <a href="https://tldp.org/LDP/abs/html/internal.html#BUILTINREF">builtin</a>, which means that rather than an external executable (such as <code>echo</code>, or even <code>[</code>), it's part of the Bash runtime itself, as we can see thus:</p>
<pre class="language-shell"><code class="language-shell"><span class="token operator">></span> strings <span class="token variable"><span class="token variable">$(</span><span class="token function">which</span> <span class="token function">bash</span><span class="token variable">)</span></span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token builtin class-name">declare</span><br><span class="token builtin class-name">declare</span> -%s %s<span class="token operator">=</span>%s<br><span class="token builtin class-name">declare</span><br><span class="token builtin class-name">declare</span> <span class="token punctuation">[</span>-aAfFgilnrtux<span class="token punctuation">]</span> <span class="token punctuation">[</span>-p<span class="token punctuation">]</span> <span class="token punctuation">[</span>name<span class="token punctuation">[</span><span class="token operator">=</span>value<span class="token punctuation">]</span> <span class="token punctuation">..</span>.<span class="token punctuation">]</span><br>    When used <span class="token keyword">in</span> a function, <span class="token variable"><span class="token variable">`</span>declare' makes NAMEs local, as with the <span class="token variable">`</span></span><span class="token builtin class-name">local</span><span class="token string">'<br>    A synonym for `declare'</span><span class="token builtin class-name">.</span>  See <span class="token variable"><span class="token variable">`</span><span class="token builtin class-name">help</span> declare'.<br>    be any option accepted by <span class="token variable">`</span></span>declare'.<br><span class="token builtin class-name">declare</span> -%s</code></pre>
<p>(If you're curious about <code>[</code> being an external executable, you might be interested in another post: <a href="https://qmacro.org/autodidactics/2020/08/21/open-square-bracket/">The open square bracket [ is an executable</a>.)</p>
<p><strong>The <code>typeset</code> synonym</strong></p>
<p>First off, let's deal with the <code>declare</code> vs <code>typeset</code> question. Basically, <code>typeset</code> does in the Korn shell (ksh) pretty much what <code>declare</code> does in the Bash shell. And <code>typeset</code> has been added to Bash as a synonym for <code>declare</code>, to make it easier for developers to switch between the flavours. There are other synonyms relating to <code>declare</code>, but we'll come to those in a bit.</p>
<p><strong>Basics of <code>declare</code></strong></p>
<p>Next, let's deal with the question: &quot;But why is declare used here at all?&quot;. Well, in <a href="https://gitlab.com/rwxrob/dotfiles/-/blob/master/scripts/twitch#L29-36">this particular case</a> it's not absolutely necessary. Strings and array variables don't actually need to be declared, so this would be fine, too:</p>
<pre class="language-shell"><code class="language-shell"><span class="token assign-left variable">gold</span><span class="token operator">=</span><span class="token string">$'<span class="token entity" title="\033">\033</span>[38;2;184;138;0m'</span><br><span class="token assign-left variable">red</span><span class="token operator">=</span><span class="token string">$'<span class="token entity" title="\033">\033</span>[38;2;255;0;0m'</span><br><span class="token punctuation">..</span>.</code></pre>
<p>This would be a couple of simple assignments of values to (otherwise) previously undeclared variables. On the other hand, with the <code>declare</code> variant, subtly different, we're declaring a couple of variables and also making assignments at the same time, which <code>declare</code> permits us to do.</p>
<p><strong>The <code>local</code> synonym</strong></p>
<p>Of course, the main point of <code>declare</code> is to declare variables and state certain attributes that they are to have. We haven't seen an example of that yet, but before we do, there's another subtle difference between <code>declare var=value</code> and simply <code>var=value</code>. This is briefly covered in a paragraph of the help information (run <code>help declare</code> in a Bash shell):</p>
<p><em>When used in a function, <code>declare</code> makes NAMEs local, as with the <code>local</code> command.  The <code>-g</code> option suppresses this behavior.</em></p>
<p>So <code>local</code> is our next synonym for <code>declare</code>, in the context a function definition. An example script <code>foo</code> will help:</p>
<pre class="language-bash"><code class="language-bash"><span class="token function-name function">func1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br>  <span class="token builtin class-name">local</span> var1<br>  <span class="token assign-left variable">var1</span><span class="token operator">=</span><span class="token string">"Apple"</span><br>  <span class="token builtin class-name">echo</span> <span class="token string">"func1: <span class="token variable">$var1</span>"</span><br><span class="token punctuation">}</span><br><br><span class="token function-name function">func2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br>  <span class="token builtin class-name">declare</span> var1<br>  <span class="token assign-left variable">var1</span><span class="token operator">=</span><span class="token string">"Banana"</span><br>  <span class="token builtin class-name">echo</span> <span class="token string">"func2: <span class="token variable">$var1</span>"</span><br><span class="token punctuation">}</span><br><br><span class="token function-name function">func3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br>  <span class="token assign-left variable">var1</span><span class="token operator">=</span><span class="token string">"Carrot"</span><br>  <span class="token builtin class-name">echo</span> <span class="token string">"func3: <span class="token variable">$var1</span>"</span><br><span class="token punctuation">}</span><br><br><span class="token assign-left variable">var1</span><span class="token operator">=</span><span class="token string">"Main"</span><br><span class="token builtin class-name">echo</span> <span class="token string">"var1 is <span class="token variable">$var1</span>"</span><br>func1<br><span class="token builtin class-name">echo</span> <span class="token string">"var1 is <span class="token variable">$var1</span>"</span><br>func2<br><span class="token builtin class-name">echo</span> <span class="token string">"var1 is <span class="token variable">$var1</span>"</span><br>func3<br><span class="token builtin class-name">echo</span> <span class="token string">"var1 is <span class="token variable">$var1</span>"</span></code></pre>
<p>Let's look at what we get when this script is executed:</p>
<pre><code>&gt; bash ./foo
var1 is Main
func1: Apple
var1 is Main
func2: Banana
var1 is Main
func3: Carrot
var1 is Carrot
</code></pre>
<p>The thing to spot here is that because neither <code>local</code> nor <code>declare</code> were used for <code>var1</code> in the definition of the <code>func3</code> function, the assignment of the value <code>Carrot</code> was not restricted to the scope of that function, and when back in the main part of the script, the value of <code>var1</code> has the value that it was assigned within <code>func3</code>, i.e. <code>Carrot</code>, not <code>Main</code> any more.</p>
<p><strong>Options for <code>declare</code></strong></p>
<p>Of course, given the main purpose of <code>declare</code>, it's worth briefly looking at more specific uses. There are various options, adequately covered by various sources including <a href="https://tldp.org/LDP/abs/html/declareref.html">Advanced Bash-Scripting Guide - Chapter 9: Another Look at Variables</a>, and so only summarised here:</p>
<p>|-|-|
|<code>-r</code>|Read-only|
|<code>-i</code>|Integer|
|<code>-a</code>|Array|
|<code>-A</code>|Associative array (i.e. a dictionary, or object)|
|<code>-f</code>|Function|
|<code>-x</code>|Exported|
|<code>-g</code>|Global|</p>
<p>There are other options, but these are the most common, at least as far as I've found in my research. Others are covered in the <code>help declare</code> output.</p>
<p><strong>The <code>readonly</code> synonym</strong></p>
<p>The <code>-r</code> option for <code>declare</code> has a sort of synonym too, which is <code>readonly</code>. However, there's a difference relating to scope; while <code>declare -r</code> will use function-local scope (similar to how it was used in <code>func1</code> and <code>func2</code> earlier), <code>readonly</code> will not respect that and simply use the global scope, even inside functions.</p>
<p>In other words, if you were to add another function definition to the above <code>foo</code> script example, like this:</p>
<pre class="language-bash"><code class="language-bash"><span class="token function-name function">func4</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br>  <span class="token builtin class-name">readonly</span> var1<br>  <span class="token assign-left variable">var1</span><span class="token operator">=</span><span class="token string">"Damson"</span><br>  <span class="token builtin class-name">echo</span> <span class="token string">"func4: <span class="token variable">$var1</span>"</span><br><span class="token punctuation">}</span></code></pre>
<p>... then when <code>func4</code> had been executed, the value of <code>var1</code> in the main section of the script would then also be <code>Damson</code>.</p>
<p>Using <code>declare -r</code> here instead is the safer approach, in that the local function scope is respected. Note however that if we add <code>-g</code> (denoting the &quot;global&quot; attribute) to this, i.e. use <code>declare -r -g</code> or <code>declare -rg</code>, then the effect would be the same as using <code>readonly</code>.</p>
<p><strong>The <code>export</code> synonym and what <code>-x</code> implies</strong></p>
<p>There's one final synonym I found in this journey of discovery, and that's <code>export</code>, which is the equivalent of <code>declare -x</code>. It took me a few minutes to properly think about what this &quot;available for export&quot; attribute actually implies.</p>
<p>Like me, you've most probably used <code>export</code> in your <code>.bashrc</code> file, to set &quot;global&quot; variables when your shell session starts, to be available to you in that session and in executables that you invoke there. Usually these variable names will be in upper case by convention, denoting variables that are &quot;environment&quot; wide. In your shell, you can use <code>env</code> to see what these are. Note that the list that <code>env</code> produces includes variables automatically available to you in the shell too, such as <code>HOME</code> and <code>PATH</code>.</p>
<p>So what does <code>declare -x</code> imply, in the context of a script that you might write and then invoke? It does not mean that once the script finishes, that variable will be available to you in the shell. As an example, consider this script <code>bar</code>:</p>
<pre><code>declare -x var2=&quot;Raining&quot;
echo &quot;var2 is $var2&quot;
</code></pre>
<p>When we run this, look at what we get:</p>
<pre class="language-shell"><code class="language-shell"><span class="token operator">></span> <span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$var2</span>"</span> <span class="token comment"># nothing up my sleeve</span><br><br><span class="token operator">></span> ./bar<br>var2 is Raining<br><span class="token operator">></span> <span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$var2</span>"</span><br><br><span class="token operator">></span></code></pre>
<p>But what if we also had another script <code>baz</code>:</p>
<pre><code>echo &quot;In baz: var2 is $var2&quot;
</code></pre>
<p>and we invoked it from within the <code>bar</code> script:</p>
<pre><code>declare -x var2=&quot;Raining&quot;
echo &quot;var2 is $var2&quot;
./baz
</code></pre>
<p>You can guess what the output will be:</p>
<pre class="language-shell"><code class="language-shell"><span class="token operator">></span> ./bar<br>var2 is Raining<br>In baz: var2 is Raining</code></pre>
<p>And on returning to the shell prompt, we can double check that <code>var2</code> doesn't have a value:</p>
<pre class="language-shell"><code class="language-shell"><span class="token operator">></span> <span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$var2</span>"</span><br><br><span class="token operator">></span></code></pre>
<p>The way I think about this in my mind is like a tree structure:</p>
<pre><code>shell
 |
 +-- bar        &lt;- var2 declared with -x as 'exported'
      |
      +-- baz   &lt;- var2 available here too
</code></pre>
<p>Exporting descends, rather than ascends, so there's no way <code>var2</code> could ever be made available like this in the <code>shell</code>.</p>
<p>That's about it, I think. I hope this is useful; I have found it helpful to try and explain these concepts to you, as it helps me learn. In researching, I came across some content in Stack Overflow and Stack Exchange - so thanks to those folks who took the time to explain things there. You may want to reference them too:</p>
<ul>
<li><a href="https://unix.stackexchange.com/questions/254367/in-bash-scripting-whats-the-different-between-declare-and-a-normal-variable">In bash scripting, what's the different between declare and a normal variable?</a></li>
<li><a href="https://stackoverflow.com/questions/4419704/differences-between-declare-typeset-and-local-variable-in-bash">Differences between declare, typeset and local variable in Bash</a></li>
<li><a href="https://stackoverflow.com/questions/30362831/what-is-difference-in-declare-r-and-readonly-in-bash">what is difference in <code>declare -r</code> and <code>readonly</code> in bash?</a></li>
</ul>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Desnowballification with set -o errexit</title>
      <link href="https://qmacro.org/blog/posts/2020/10/06/desnowballification-with-set-o-errexit/"/>
      <updated>2020-10-06T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2020/10/06/desnowballification-with-set-o-errexit/</id>
      <content type="html">
        <![CDATA[
      <p><em>I've started to use <code>set -o errexit</code> at the start of my scripts to make them more robust.</em></p>
<p>There comes a time when you move from just hacking lines of shell script together into a file, to recognising that the file is now a script and that you want that script to run well, so you give it a little bit of help.</p>
<p>In a similar way to the <code>-w</code> flag for Perl scripts, or even perhaps the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode">strict mode</a> turned on in JavaScript files with <code>'use strict'</code>, there are flags that you can use for Bash scripts. A few weeks ago I read <a href="https://www.davidpashley.com/articles/writing-robust-shell-scripts/">Writing Robust Bash Shell Scripts</a> by David Pashley, and it taught me about a couple of flags:</p>
<p>|-|-|-|
|<code>set -e</code>|<code>set -o errexit</code>|exit when a command fails|
|<code>set -u</code>|<code>set -o nounset</code>|exit when an undeclared variable is used|</p>
<p>There are short and long forms of these flags, as you can see. I would use the short forms on the command line, but prefer the long forms in scripts, because they're more readable (although the language nerd in me sees 'noun set' before 'no unset' in the latter). The <a href="https://google.github.io/styleguide/shellguide.html">Google Shell Style Guide</a>, to which I referred in <a href="https://qmacro.org/2020/10/05/improving-my-shell-scripting/">Improving my shell scripting</a> recently, also has something useful on using flags, in the <a href="https://google.github.io/styleguide/shellguide.html#which-shell-to-use">Which Shell to Use</a> section. It says that flags on the <a href="https://en.wikipedia.org/wiki/Shebang_(Unix)">hashbang</a> line (<code>#!/bin/bash</code>) should be used sparingly - in other words, they should be set with <code>set</code> on their own lines. The reason it gives, which makes sense, is that the script can then be run in the same way like this: <code>bash scriptname</code> (the hashbang is redundant in this case, along with any flags set on that line).</p>
<p>I honed in on <code>set -o errexit</code> as it seems to be a recommended standard and makes a lot of sense (although interestingly the Google Shell Style Guide makes no mention of it). This flag causes the script to be terminated if any statement returns a non-true value. As David put in his article, this &quot;prevents errors snowballing into serious issues when they could have been caught earlier&quot;.</p>
<p>As I was looking for further information on <code>set -o errexit</code> I came across another useful article <a href="https://kvz.io/bash-best-practices.html">Best Practices for Writing Bash Scripts</a> by Kev van Zonneveld - definitely worth a read, especially for other flags that are available (<code>xtrace</code> and <code>pipefail</code>).</p>
<p>So, I'm putting <code>set -o errexit</code> as one of the first lines in my Bash shell scripts. I notice that <a href="https://rwx.gg">Mr Rob</a> does the same (see his <a href="https://gitlab.com/rwxrob/dotfiles/-/blob/master/scripts/twitch#L3"><code>twitch</code> script</a> as an example). You should, too.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Improving my shell scripting</title>
      <link href="https://qmacro.org/blog/posts/2020/10/05/improving-my-shell-scripting/"/>
      <updated>2020-10-05T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2020/10/05/improving-my-shell-scripting/</id>
      <content type="html">
        <![CDATA[
      <p><em>I'm using a style guide along with the <code>shellcheck</code> and <code>shfmt</code> tools to help me improve the quality and consistency of my shell scripts.</em></p>
<p>I'm doubling down on shell scripting, in particular Bash shell scripting. This is for many reasons, not least because I think that in the age of cloud and containers, shell environments are more important than ever. And what better shell than the Unix style shell; the design dates back decades but is still in my eyes one of the most wondrous things in tech even today, with its beautiful simplicity and its <a href="https://en.wikipedia.org/wiki/Unix_philosophy#:~:text=The%20Unix%20philosophy%20is%20documented,%2C%20as%20yet%20unknown%2C%20program.">simple beauty</a>.</p>
<p><strong>Style Guide</strong></p>
<p>While watching a live stream replay by <a href="https://rwx.gg">Mr Rob</a>, specifically <a href="https://www.youtube.com/watch?v=UGCw6wXv1Ao">Google Shell Scripting Guide, Yes, Yes, 1000 Times Yes!</a>, I came across the <a href="https://google.github.io/styleguide/shellguide.html">Google Shell Style Guide</a> and it's succinct enough to digest in a single sitting, and well written enough to comprehend in that time, too.</p>
<p>I've decided to use this style guide as a general reference for my scripts and plan to implement changes to some of my existing scripts over time.</p>
<p><strong>Shellcheck</strong></p>
<p>I discovered the <a href="https://github.com/koalaman/shellcheck"><code>shellcheck</code></a> shell script analysis tool recently and my goodness me has it made a significant impact on not only the quality of what I write, but also on my understanding of Bash shell syntax! It's available as an online tool, but far more importantly as a command line tool that will highlight issues with your shell code. A linter, basically.</p>
<p>Moreover, it has a rich set of reference material in the <a href="https://github.com/koalaman/shellcheck/wiki">wiki</a>, including definitive pages for each of the errors it will emit. Here's an example: SC1019 is the error code for &quot;Expected this to be an argument to the unary condition&quot; and there's a reference page for it here: <a href="https://github.com/koalaman/shellcheck/wiki/SC1019">SC1019</a>.</p>
<p>I use Vim as my primary editing environment and use the <a href="https://github.com/dense-analysis/ale">Asynchronous Linting Engine</a> (ALE) as a key plugin. This means, that without me lifting a finger, <code>shellcheck</code> will be used asynchronously, live while I'm editing, to show me issues.</p>
<p>If you're writing shell scripts, get <code>shellcheck</code> installed and wired up to your editor now.</p>
<p><strong>shfmt</strong></p>
<p>My son Joseph used to write a lot of Go, and I was fascinated by the philosophy of what the <a href="https://golang.org/cmd/gofmt/"><code>gofmt</code></a> formatting tool represented. Go programmers all expected code to be formatted the same way via this tool, and it's natural for them to have their code (re)formatted when they save it in the editor. I know that this is anathema to some programmers, which is why it caught my eye.</p>
<p>There are formatters for other languages that work this way now (and I'm sure there were before, too) such as <code>rustfmt</code> (used by Mr Rob, which is what gave me the idea) and there's a version for shell scripts called <a href="https://github.com/mvdan/sh"><code>shfmt</code></a>, described as &quot;a shell parser, formatter and interpreter&quot;.</p>
<p>Having experimented with the <code>shfmt</code> options, I ended up choosing a few that would help me stay close to the style guide:</p>
<table>
<thead>
<tr>
<th>Option</th>
<th>Meaning</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>-i 2</code></td>
<td>indent with two spaces</td>
</tr>
<tr>
<td><code>-bn</code></td>
<td>binary ops like &amp;&amp; and | may start a line</td>
</tr>
<tr>
<td><code>-ci</code></td>
<td>switch cases will be indented</td>
</tr>
<tr>
<td><code>-sr</code></td>
<td>redirect operators will be followed by a space</td>
</tr>
</tbody>
</table>
<p>I <a href="https://github.com/qmacro/dotfiles/commit/1581496cdc2a51b0bcdda525a7f06dc11129abb1">added some new configuration</a> to tell Vim to use this <code>shfmt</code> tool with these options, to automatically format any shell source on save.  This means that I can get my script content automatically formatted without thinking about it, in the same way Go programmers enjoy.</p>
<p>This is what that configuration addition looks like right now:</p>
<pre class="language-vim"><code class="language-vim"><span class="token keyword">fun</span><span class="token operator">!</span> s<span class="token punctuation">:</span><span class="token function">FormatBashScripts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><br>  <span class="token keyword">if</span> <span class="token function">getline</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=~#</span> <span class="token string">'^#!.*bash'</span> <span class="token operator">&amp;&amp;</span> <span class="token function">executable</span><span class="token punctuation">(</span><span class="token string">'shfmt'</span><span class="token punctuation">)</span><br>    <span class="token operator">%</span><span class="token operator">!</span>shfmt <span class="token operator">-</span>i <span class="token number">2</span> <span class="token operator">-</span><span class="token keyword">bn</span> <span class="token operator">-</span><span class="token builtin">ci</span> <span class="token operator">-</span><span class="token builtin">sr</span> <span class="token operator">-</span><br>  <span class="token keyword">endif</span><br><span class="token keyword">endfun</span><br><span class="token builtin">autocmd</span> BufWritePre <span class="token operator">*</span> <span class="token keyword">call</span> s<span class="token punctuation">:</span><span class="token function">FormatBashScripts</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>
<p>The reference to <code>getline</code> is to check that the <a href="https://en.wikipedia.org/wiki/Shebang_(Unix)">shebang</a> denotes a Bash shell script and the reference to <code>executable</code> prevents errors occurring if I'm on a machine where <code>shfmt</code> is not available. The key part is this: <code>%!shfmt ...</code> which passes the entire buffer contents through the invocation of <code>shfmt</code> as if it were a filter, replacing the contents with whatever <code>shfmt</code> outputs.</p>
<p>I guess it almost goes without saying that the significance of how this works -- using <code>shfmt</code> as a filter to pass the content through, via STDIN and STDOUT, following one of the key Unix shell philosophies -- is not lost on me.</p>
<p>And remember folks, <a href="https://twitter.com/search?q=%23TheFutureIsTerminal&amp;src=typed_query">#TheFutureIsTerminal!</a></p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>curl and multipart/form-data</title>
      <link href="https://qmacro.org/blog/posts/2020/10/04/curl-and-multipartform-data/"/>
      <updated>2020-10-04T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2020/10/04/curl-and-multipartform-data/</id>
      <content type="html">
        <![CDATA[
      <p><em>In <a href="/autodidactics/2020/10/03/using-exec-to-jump.html">reading through</a> <a href="https://rwx.gg/">Mr Rob</a>'s <a href="https://gitlab.com/rwxrob/dotfiles/-/blob/master/scripts/ix"><code>ix</code></a> script, I discovered something about <code>curl</code> that I hadn't known about.</em></p>
<p>The script's key line is this:</p>
<pre class="language-shell"><code class="language-shell"><span class="token assign-left variable">url</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">curl</span> <span class="token parameter variable">-s</span> <span class="token parameter variable">-F</span> <span class="token string">'f:1=&lt;-'</span> http://ix.io<span class="token variable">)</span></span></code></pre>
<p>My gaze was immediately drawn to this bit: <code>-F 'f:1=&lt;-'</code>. Part of this initially cryptic incantation is actually down to the instructions from the <a href="http://ix.io">ix.io</a> website itself, in the TL;DR section.</p>
<p>Checking the <a href="https://curl.haxx.se/docs/manpage.html"><code>curl</code> documentation</a> for the <code>-F</code> option, I discover that this venerable command line HTTP client can send multipart/form-data payloads, with files or file contents. So, breaking this incantation down, we have:</p>
<table>
<thead>
<tr>
<th>Part</th>
<th>Meaning</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>-F</code></td>
<td>send a POST with multipart/form-data content</td>
</tr>
<tr>
<td><code>f:1</code></td>
<td>the name of the form field that the website is expecting</td>
</tr>
<tr>
<td><code>&lt;</code></td>
<td>send as file contents (rather than an actual file)</td>
</tr>
<tr>
<td><code>-</code></td>
<td>read the contents from STDIN</td>
</tr>
</tbody>
</table>
<p>And in the context of where this is being executed, STDIN is the <code>ix</code> script's STDIN, in other words, whatever is piped into <code>ix</code> when it's invoked.</p>
<p>In response to the form being POSTed, the <a href="http://ix.io">ix.io</a> website returns the newly minted unique pastebin URL that was created, and this is saved into the <code>url</code> variable in the script, to be shared in various ways.</p>
<p>Lovely!</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Checking a command is available before use</title>
      <link href="https://qmacro.org/blog/posts/2020/10/04/checking-a-command-is-available-before-use/"/>
      <updated>2020-10-04T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2020/10/04/checking-a-command-is-available-before-use/</id>
      <content type="html">
        <![CDATA[
      <p><em>There's one final nugget in <a href="https://rwx.gg/">Mr Rob</a>'s <a href="https://gitlab.com/rwxrob/dotfiles/-/blob/master/scripts/ix"><code>ix</code></a> script that I wanted to pick out. It's not earth shattering but still useful to have seen.</em></p>
<p>At the end of the script, the URL generated from the newly created <a href="http://ix.io">ix.io</a> pastebin is put into the X buffer (so that it can be pasted into other X applications). This is done via the <a href="https://linux.die.net/man/1/xclip"><code>xclip</code></a> command, but <code>xclip</code> is not installed everywhere, so the <code>ix</code> script checks that it is available before trying to use it:</p>
<pre class="language-shell"><code class="language-shell"><span class="token function">which</span> xclip <span class="token operator">></span>/dev/null <span class="token operator">||</span> <span class="token builtin class-name">exit</span> <span class="token number">0</span><br><span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$url</span>"</span> <span class="token operator">|</span> xclip</code></pre>
<p>This is a common pattern.</p>
<p>Because the use of <code>xclip</code> here is right at the end of the script (by design, most likely) it's possible to abort (<code>|| exit 0</code>) if <code>xclip</code> isn't there. I guess an alternative, if it was necessary to run it mid-script, would be something like this:</p>
<pre class="language-shell"><code class="language-shell"><span class="token function">which</span> xclip <span class="token operator">></span>/dev/null <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$url</span>"</span> <span class="token operator">|</span> xclip</code></pre>
<p>Anyway, worth knowing and having seen it, right?</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Using exec to jump</title>
      <link href="https://qmacro.org/blog/posts/2020/10/03/using-exec-to-jump/"/>
      <updated>2020-10-03T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2020/10/03/using-exec-to-jump/</id>
      <content type="html">
        <![CDATA[
      <p><em>In <a href="https://rwx.gg">Mr Rob</a>'s <a href="https://gitlab.com/rwxrob/dotfiles/">dotfiles repo</a> (see <a href="https://qmacro.org/2020/10/03/a-new-learning-source-for-shell-scripting/">A new learning source for shell scripting</a>) there's a treasure trove of content that is very pleasant to peruse.</em></p>
<p>In one of his streams I saw him use <a href="https://gitlab.com/rwxrob/dotfiles/-/blob/master/scripts/ix"><code>ix</code></a> and thereby discovered <a href="http://ix.io">ix.io</a> - a simple pastebin. He uses his <code>ix</code> script to share code and other content, either from the command line or from within Vim directly. It's only 14 lines including comments, but I've learned stuff from it already.</p>
<p>If <code>ix</code> is invoked with an argument, it's treated as the unique identifier for a specific pastebin, and that pastebin is retrieved, such as <a href="http://ix.io/2pgP">2pgP</a> (which is another of his scripts with lots to learn from - <code>twitch</code>).</p>
<p>The part of <code>ix</code> that handles this is simply:</p>
<pre class="language-shell"><code class="language-shell"><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token parameter variable">-n</span> <span class="token string">"<span class="token variable">$1</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span><br>  <span class="token builtin class-name">exec</span> <span class="token function">curl</span> <span class="token parameter variable">-s</span> <span class="token string">"ix.io/<span class="token variable">$1</span>"</span><br><span class="token keyword">fi</span></code></pre>
<p>Basically in this mode, there's no point in processing the rest of the script (beyond the small section you see here), so the handling of the input should finish when the pastebin is retrieved.</p>
<p>Until now, I would have written it like this:</p>
<pre class="language-shell"><code class="language-shell"><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token parameter variable">-n</span> <span class="token string">"<span class="token variable">$1</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span><br>  <span class="token function">curl</span> <span class="token parameter variable">-s</span> <span class="token string">"ix.io/<span class="token variable">$1</span>"</span><br>  <span class="token builtin class-name">exit</span><br><span class="token keyword">fi</span></code></pre>
<p>But that's simply unnecessary, and in fact arguably less efficient too. The Bash man page mentions, for <code>exec</code>, this fact: &quot;<em>If command is specified, it replaces the shell. No new process is created.</em>&quot;. In other words, in this <code>if ... fi</code>, the <code>curl</code> command replaces the script's execution, rather than being executed as a sub process.</p>
<p>Sometimes there's a beauty in the smallest things.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>A new learning source for shell scripting</title>
      <link href="https://qmacro.org/blog/posts/2020/10/03/a-new-learning-source-for-shell-scripting/"/>
      <updated>2020-10-03T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2020/10/03/a-new-learning-source-for-shell-scripting/</id>
      <content type="html">
        <![CDATA[
      <p>Recently I discovered <a href="https://rwx.gg">Mr Rob</a> (and yes, I'll admit, it took me a day or so to realise the significance of 'rwx' in his website, and names on <a href="https://twitch.tv/rwxrob">Twitch</a> and <a href="https://youtube.com/rwxrob">YouTube</a>). He has lots of experience and teaches directly and also indirectly, which appeals to me.</p>
<p>The range of subjects is wide, and breadth of discussions wider, and it's very <a href="https://twitter.com/search?q=%23TheFutureIsTerminal&amp;src=typed_query">terminal</a> centric, which I like.</p>
<p>I've been inspired to level up my shell scripting game, not least by watching what he does and reading what he's written. To that end I've created a small new blog where I'll add posts as and when I get the chance. The blog is '<a href="https://qmacro.org/autodidactics/">Autodidactics</a>' and is a play on a phrase that Rob used in a <a href="https://twitter.com/rwxrob/status/1311403209622204428">reply to me on Twitter the other day</a>.</p>
<p>I've made a small start with <a href="https://qmacro.org/autodidactics/2020/10/03/using-exec-to-jump/">Using exec to jump</a>, but that's also the point. The things I see, and that grab my attention and help me improve my knowledge, are small. One of the keys to continuous improvement and learning is adding to one's knowledge base one small gem at a time.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Shell parameter expansion with :+ is useful</title>
      <link href="https://qmacro.org/blog/posts/2020/09/27/shell-parameter-expansion-with-:+-is-useful/"/>
      <updated>2020-09-27T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2020/09/27/shell-parameter-expansion-with-:+-is-useful/</id>
      <content type="html">
        <![CDATA[
      <p><em>Use the shell parameter expansion form <code>:+</code> for expanding optional values</em></p>
<p>I've been increasing my Bash scripting activities recently, not least in relation to some <a href="https://github.com/SAP-samples/cloud-messaging-handsonsapdev">live stream episodes relating to Enterprise Messaging</a> and have used some of the shell parameter expansion facilities described in <a href="https://www.gnu.org/software/bash/manual/html_node/Shell-Parameter-Expansion.html">section 3.5.3 Shell Parameter Expansion</a> of the GNU Bash manual. In particular, I've been using what I call the &quot;default value&quot; (<code>:-</code>) form:</p>
<pre><code>${parameter:-word}
</code></pre>
<p>This form has this description: &quot;If <em>parameter</em> is unset or null, the expansion of <em>word</em> is substituted. Otherwise, the value of <em>parameter</em> is substituted&quot; and is very useful for setting default value for parameters that are expected at invocation time, for example.</p>
<p>On a walk yesterday I was listening to an episode of a series of podcasts I'd discovered that very day, on <a href="http://hackerpublicradio.org/">Hacker Public Radio</a>. It's an <a href="http://hackerpublicradio.org/series.php?id=42">in-depth series on Bash scripting</a>, and has quite a few episodes, some very recent, and the early ones dating back to 2010. The episode I listened to was <a href="http://hackerpublicradio.org/eps.php?id=1648">hpr1648 :: Bash parameter manipulation</a> by <a href="http://hackerpublicradio.org/correspondents.php?hostid=225">Dave Morriss</a>, and I enjoyed it very much.</p>
<p>One of the things Dave mentioned was this form of expansion (<code>:+</code>), related to the one above, but sort of the opposite:</p>
<pre><code>${parameter:+word}
</code></pre>
<p>The form has this description: &quot;If <em>parameter</em> is null or unset, nothing is substituted, otherwise the expansion of <em>word</em> is substituted.&quot; Dave found this slightly odd, and commented that he couldn't quite think of a use case for this form. I couldn't, either.</p>
<p>Later that same day, I came across a live streamer on Twitch - Rob, aka <a href="https://www.twitch.tv/rwxrob">rwxrob</a> - who has some excellent content, also on <a href="https://www.youtube.com/c/rwxrob">YouTube</a>. Watching the beginning of one of his live stream recordings, <a href="https://www.youtube.com/watch?v=UGCw6wXv1Ao">Google Shell Scripting Guide, Yes, Yes, 1000 Times Yes!</a>, he introduces a Bash shell scripting resource from Google - the <a href="https://google.github.io/styleguide/shellguide.html">Shell Style Guide</a>, which he goes through in detail in the live stream.</p>
<p>Noting how great that style guide looked, I start to read through it immediately. And what do I see, in the <a href="https://google.github.io/styleguide/shellguide.html#quoting">section on Quoting</a>? An example of the <code>:+</code> shell expansion form (in an illustration of something else entirely), which made complete sense and explained its real purpose! I couldn't believe it - discovering multiple complementary sources of information on Bash shell scripting on the same day? Goodness me.</p>
<p>Here's the example of that <code>:+</code> shell expansion form taken directly from <a href="https://google.github.io/styleguide/shellguide.html#quoting">that section</a> in the style guide:</p>
<pre class="language-bash"><code class="language-bash"><span class="token function">git</span> send-email <span class="token parameter variable">--to</span> <span class="token string">"<span class="token variable">${reviewers}</span>"</span> <span class="token variable">${ccs<span class="token operator">:+</span>"--cc" "${ccs}</span>"<span class="token punctuation">}</span></code></pre>
<p>Look at that beautiful thing!</p>
<pre class="language-bash"><code class="language-bash"><span class="token variable">${ccs<span class="token operator">:+</span>"--cc" "${ccs}</span>"<span class="token punctuation">}</span></code></pre>
<p>If there is a value in the <code>ccs</code> variable, use it, but in the expanded context of it being a value to the <code>--cc</code> switch used with the <code>git</code> command. The value (most likely one or more email addresses) would be of no use on its own, but put with <code>--cc</code> it makes complete sense. And the icing on the cake is that the <code>:+</code> form substitutes nothing if the variable is null or unset, meaning there's no carbon-copying requested if there are no emails listed in the <code>ccs</code> variable.</p>
<p>Now that made my day. I was originally with Dave on not being able to think of a reason for the <code>:+</code> form, and then whammo, there's a perfect example right there. Thanks Dave, thanks Rob, and thanks to the Googlers who wrote the style guide!</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Reducing writing friction</title>
      <link href="https://qmacro.org/blog/posts/2020/09/11/reducing-writing-friction/"/>
      <updated>2020-09-11T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2020/09/11/reducing-writing-friction/</id>
      <content type="html">
        <![CDATA[
      <p><em>I've created a simple script for myself to reduce writing friction.</em></p>
<p>I saw <a href="https://twitter.com/simonw/status/1304117739083059200">a tweet from Simon Willison</a> earlier this week pointing to Matt Webb's <a href="http://interconnected.org/home/2020/09/10/streak">15 rules for blogging, and my current streak</a>. I decided that I would also like to try to write more, and one of the things getting in my way was the slight friction in starting a new post. I use GitHub Pages and Jekyll behind the scenes, and my posts are in Markdown, one file per post (I like the simplicity of this, it reminds me of Rael Dornfest's <a href="https://www.google.com/search?q=site%3Aqmacro.org+blosxom">Blosxom</a>).</p>
<p>So running the risk of being accused of a small amount of yak shaving, I wrote a very basic script (with Simon's &quot;perfect is the enemy of shipped&quot; in my head) that I could use to start a new post quickly and <a href="https://github.com/qmacro/dotfiles/commit/e609d80ed4c768a5236e976bce9b69a18fd01b04">pushed it to my dotfiles repo</a>.</p>
<p>The script is <a href="https://github.com/qmacro/dotfiles/blob/master/scripts/newpost">newpost</a> and is very basic, having taken me less than 10 mins to write.
That's sort of the point. I may refine it as I go on, in fact I probably will; not least because the function that generates a filename from a post title is very basic indeed, but also because I would like to perhaps create a new tmux session for editing and running Jekyll locally for test rendering. But it's good enough for now, and in fact I kicked off this post using it, by typing:</p>
<pre><code>&gt; newpost reducing writing friction
</code></pre>
<p>whereupon I landed in Vim with this in the file, all ready:</p>
<pre><code>---
layout: post
title: Reducing writing friction
---
</code></pre>
<p>That'll do for now!</p>
<p>Incidentally, I'm already on a small path to writing more, having adopted Simon's <a href="https://til.simonwillison.net/">Today I Learned</a> (TIL) mini-post approach. I've written a few TIL posts on this blog recently and I feel very freed by the constraints.</p>
<p><strong>Update 2020-10-08</strong> I've moved these posts to a new blog <a href="https://qmacro.org/autodidactics/">autodidactics</a> - see <a href="https://qmacro.org/2020/10/03/a-new-learning-source-for-shell-scripting/">A new learning source for shell scripting</a> for the background.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>You can mask sensitive hostnames with wildcards and host aliases</title>
      <link href="https://qmacro.org/blog/posts/2020/08/25/you-can-mask-sensitive-hostnames-with-wildcards-and-host-aliases/"/>
      <updated>2020-08-25T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2020/08/25/you-can-mask-sensitive-hostnames-with-wildcards-and-host-aliases/</id>
      <content type="html">
        <![CDATA[
      <p><em>The HOSTALIASES feature works well when combined with wildcard host definitions in SSH config</em></p>
<p>I run my own DNS locally via Pi-hole, but I also like to have SSH configuration to specify various options depending on the hosts I'm remotely connecting to. Usually it's the username to use, sometimes it's whether I want to do X11 forwarding, and so on.</p>
<h1>Problem</h1>
<p>My work machines have very odd and hard to remember hostnames. I could use the SSH configuration feature (via the <code>.ssh/config</code> file) to get around this, like this:</p>
<pre><code>Host easy
    HostName hard-to-remember
    User username-to-use
</code></pre>
<p>Then I could just remotely connect to that <code>hard-to-remember</code> host machine like this:</p>
<pre><code>ssh easy
</code></pre>
<p>(As a bonus, having securely shared public key credentials with <code>ssh-copy-id</code> beforehand makes this process even smoother.)</p>
<p>But I don't want to expose those <code>hard-to-remember</code> work machine hostnames in the configuration.</p>
<h1>Hello HOSTALIASES</h1>
<p>I learned today about the <code>HOSTALIASES</code> environment variable which is supported by <code>glibc</code>'s resolver function <code>gethostbyname()</code>. Pointing <code>HOSTALIASES</code> to a file of &quot;aliasname realname&quot; pairs of hostnames means that commands that use <code>gethostbyname()</code> to resolve hostnames can be given alias hostnames instead of real hostnames. The <code>ssh</code> command uses that function.</p>
<h1>Solution</h1>
<p>This is what I did:</p>
<p>First, I created a file <code>host.aliases</code> (making sure not to check this file into a git repo, by adding the file name to <code>.gitignore</code>) with content like this:</p>
<pre><code>oldmbp realsecrethostname1
newmbp anothersecretworkhostname
</code></pre>
<p>Then, in my <code>.bashrc</code>, I set the <code>HOSTALIASES</code> environment variable to point to this file:</p>
<pre><code>export HOSTALIASES=&quot;$HOME/.dotfiles/host.aliases&quot;
</code></pre>
<p>Finally, I modified the contents of my <code>.ssh/config</code> file to use wildcards matching the aliases:</p>
<pre><code>Host *mbp
    User username-to-use
</code></pre>
<p>That way I can use easy and memorable hostnames when connecting to my work machines (e.g. <code>ssh oldmbp</code>) without exposing the hostnames in any public configuration.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>The open square bracket [ is an executable</title>
      <link href="https://qmacro.org/blog/posts/2020/08/21/the-open-square-bracket-is-an-executable/"/>
      <updated>2020-08-21T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2020/08/21/the-open-square-bracket-is-an-executable/</id>
      <content type="html">
        <![CDATA[
      <p><em>In a shell script, the <code>[</code> symbol is not syntax, it's an executable</em></p>
<p>In my <a href="https://www.youtube.com/watch?v=Ct-uiu3RRZs">live stream episode</a> this morning I added to a function so that it looked like this:</p>
<pre class="language-shell"><code class="language-shell"><span class="token function-name function">getservicekey</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br>  <span class="token builtin class-name">local</span> <span class="token assign-left variable">instance</span><span class="token operator">=</span><span class="token variable">${1}</span><br>  <span class="token builtin class-name">local</span> <span class="token assign-left variable">servicekey</span><span class="token operator">=</span><span class="token variable">${2}</span><br>  <span class="token builtin class-name">local</span> <span class="token function">file</span><br>  <span class="token assign-left variable">file</span><span class="token operator">=</span><span class="token string">"<span class="token variable">${instance}</span>-<span class="token variable">${servicekey}</span>.json"</span><br>  <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token parameter variable">-r</span> <span class="token string">"<span class="token variable">${file}</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span><br>    <span class="token function">cat</span> <span class="token string">"<span class="token variable">${file}</span>"</span><br>  <span class="token keyword">else</span><br>    cf service-key <span class="token string">"<span class="token variable">${instance}</span>"</span> <span class="token string">"<span class="token variable">${servicekey}</span>"</span> <span class="token operator">|</span> <span class="token function">sed</span> <span class="token string">'1,2d'</span><br>  <span class="token keyword">fi</span><br><span class="token punctuation">}</span></code></pre>
<p>Looking at that condition <code>if [ -r &quot;${file}&quot; ]</code> one would think that the <code>[ ... ]</code> part is just some shell syntax to glue things together (to contain the expression under evaluation), part of the family of symbols including double quotes, semicolons and others.</p>
<p>But no. In a wonderfully quirky way, <code>[</code> is actually a command, an executable. I remember seeing an odd character in my <code>/bin/</code> directory a while back:</p>
<pre><code>▶ ls /bin
[               dash            expr            ln              pwd             sync
bash            date            hostname        ls              rm              tcsh
cat             dd              kill            mkdir           rmdir           test
chmod           df              ksh             mv              sh              unlink
cp              echo            launchctl       pax             sleep           wait4path
csh             ed              link            ps              stty            zsh
</code></pre>
<p>Check out that <code>[</code> entry!</p>
<p>Turns out that <code>[</code> is a synonym for <code>test</code>. You can ask for the manual page for <code>[</code> and you get something that covers <code>[</code> and <code>test</code>:</p>
<pre class="language-shell"><code class="language-shell">▶ <span class="token function">man</span> <span class="token punctuation">[</span><br><br>NAME<br>     test, <span class="token punctuation">[</span> -- condition evaluation utility<br><br>SYNOPSIS<br>     <span class="token builtin class-name">test</span> expression<br>     <span class="token punctuation">[</span> expression <span class="token punctuation">]</span><br><br>DESCRIPTION<br>     The <span class="token builtin class-name">test</span> utility evaluates the expression and, <span class="token keyword">if</span> it evaluates to true, returns a zero<br>     <span class="token punctuation">(</span>true<span class="token punctuation">)</span> <span class="token builtin class-name">exit</span> status<span class="token punctuation">;</span> otherwise it returns <span class="token number">1</span> <span class="token punctuation">(</span>false<span class="token punctuation">)</span>.  If there is no expression, <span class="token builtin class-name">test</span> also<br>     returns <span class="token number">1</span> <span class="token punctuation">(</span>false<span class="token punctuation">)</span>.<br><br>     <span class="token punctuation">..</span>.</code></pre>
<p>Indeed, if you compare the two files <code>/bin/[</code> and <code>/bin/test</code>, they're the same.</p>
<p>The <code>if</code> statement above can be rewritten with the <code>test</code> synonym like this: <code>if test -r &quot;${file}&quot;</code>, but now I know that <code>[</code> is an actual executable, I'll take great delight in using it more.</p>
<p>Post Script: As well as being an executable, <code>[</code> is also built in to many shells these days, so incurs no performance penalty on use that an external command would otherwise do.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Why we have /bin/ and /usr/bin/</title>
      <link href="https://qmacro.org/blog/posts/2020/08/16/why-we-have-bin-and-usrbin/"/>
      <updated>2020-08-16T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2020/08/16/why-we-have-bin-and-usrbin/</id>
      <content type="html">
        <![CDATA[
      <p><em>There's a simple, historic reason why we have /bin/ and /usr/bin/</em></p>
<p>I'd half wondered for a while why many of the directories in the root filesystem (<code>/</code>) of a Linux installation are also to be found in <code>/usr</code>. Recent convention implies that 'usr' stands for &quot;User System Resources&quot; but this is really only a sort of <a href="https://en.wikipedia.org/wiki/Backronym">backronym</a>.</p>
<p>There are executable files and libraries in <code>/bin/</code> and <code>/lib/</code>, for example, but also in <code>/usr/bin/</code> and <code>/usr/lib/</code>. Why? Regardless of what people might tell you today, the answer lies in the history of Unix (upon which Linux is based, of course). Created in the late 1960s / early 1970s on Digital PDP machines with limited disk space, the original Unix operating system binaries were placed on the root filesystem (mounted at <code>/</code>), with e.g. executables, libraries and configuration files split across <code>/bin/</code>, <code>/lib/</code> and <code>/etc/</code> directories respectively.</p>
<p>Separate from the root filesystem was another filesystem (on a separate disk) for users' home directories. This was <code>/usr/</code> - yes, short for &quot;user(s)&quot;.</p>
<p>As the Unix system grew, the space on the root filesystem disk eventually ran out, and a decision was made to move some of the executable and library content over to the other disk that was mounted on <code>/usr/</code>. It made sense to replicate the names of the directories on that other disk, names which therefore became <code>/usr/bin/</code> and <code>/usr/lib/</code> because of the relation to where that filesystem was mounted.</p>
<p>Over time the place for the users' home directories moved from <code>/usr/</code> to <code>/home/</code>, meaning <code>/usr/</code> content eventually lost any semblance of user-specific focus.</p>
<p>A bonus, related thing I learned fairly recently is that the &quot;s&quot; in <code>sbin</code> (which also can be found in both the filesystems mounted on root (<code>/</code>) and <code>/usr/</code>) stands for &quot;system&quot; denoting that the content is only executable by the root user.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>String.prototype.replace() can take a function</title>
      <link href="https://qmacro.org/blog/posts/2020/08/04/string.prototype.replace()-can-take-a-function/"/>
      <updated>2020-08-04T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2020/08/04/string.prototype.replace()-can-take-a-function/</id>
      <content type="html">
        <![CDATA[
      <p><em>You can use a function to dynamically provide the replacement value in a <code>replace</code> operation</em></p>
<p>I was pondering different approaches to solving the Codewars kata <a href="https://www.codewars.com/kata/5a71939d373c2e634200008e">Simple string reversal</a>, and having submitted my own, I started to browse other solutions. One that caught my eye was this, from users <a href="https://www.codewars.com/users/Bubbler">Bubbler</a> and <a href="https://www.codewars.com/users/Telllurian">Tellurian</a>:</p>
<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br>  <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>str<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=></span> x <span class="token operator">!=</span> <span class="token string">' '</span><span class="token punctuation">)</span><br>  <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\S</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token parameter">_</span> <span class="token operator">=></span> arr<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><br><span class="token punctuation">}</span></code></pre>
<p>If you look at the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace">MDN page for String.prototype.replace()</a> the syntax is given thus:</p>
<pre><code>const newStr = str.replace(regexp|substr, newSubstr|function)
</code></pre>
<p>A function! I probably had come across this before but had forgotten. The beauty of the solution above lies in this possibility; while the <code>arr.pop()</code> mutates the <code>arr</code>, it does it in such a beguiling way I don't have any issue enjoying the entire <code>replace</code> call. Given that the regular expression <code>g</code> modifier is used, the function supplied is called N times, each time supplying a (single character) value from the <code>arr</code> array.</p>
<p>Absolutely lovely.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>continue-on-error can prevent a job step failure causing an action failure</title>
      <link href="https://qmacro.org/blog/posts/2020/07/21/continue-on-error-can-prevent-a-job-step-failure-causing-an-action-failure/"/>
      <updated>2020-07-21T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2020/07/21/continue-on-error-can-prevent-a-job-step-failure-causing-an-action-failure/</id>
      <content type="html">
        <![CDATA[
      <p><em>Use <code>continue-on-error: true</code> in a GitHub Actions job spec to prevent failures from being flagged when a job step fails.</em></p>
<p>For me, high (non-zero) return codes don't always necessarily denote failure; sometimes I want to use a high return code to control step execution (see <a href="https://qmacro.org/2020/07/20/github-actions-step-conditional/">TIL: git diff can emit different exit codes</a>). But this means that the entire workflow run is marked as failed in a GitHub Action context. To prevent this, you can use <a href="https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idcontinue-on-error"><code>continue-on-error</code></a> at the job level to prevent a workflow from failing when a job fails.</p>
<p>I <a href="https://github.com/qmacro/qmacro/commit/42217c8a53108856dfcc85108f2cca4731bfa1ba">added this</a> to my build workflow and it works nicely. See for example <a href="https://github.com/qmacro/qmacro/actions/runs/178511479">action execution 178511479</a> - i.e. even when there was a step that ended with a high return code (deliberately, to signify no changes), the entire execution was still marked as a success:</p>
<p><img src="/images/2020/07/successfulaction.png" alt="action marked as success"></p>
<p>(Hat tip to <a href="https://github.com/jung-thomas">Tom Jung</a> for this).</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>git diff can emit different exit codes</title>
      <link href="https://qmacro.org/blog/posts/2020/07/20/git-diff-can-emit-different-exit-codes/"/>
      <updated>2020-07-20T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2020/07/20/git-diff-can-emit-different-exit-codes/</id>
      <content type="html">
        <![CDATA[
      <p><em>You can combine git diff exit codes and the POSIX <code>!</code> operator to control GitHub Actions job step execution based on git changes.</em></p>
<p>When defining a job step in GitHub Actions, you can specify a <a href="https://docs.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions#job-status-check-functions">condition</a> that must be met for a job step to run (in a broadly similar way to how things were in Job Control Language). In my <a href="https://github.com/qmacro/qmacro/blob/03246248853b563bb6774697e7156bfb183e3f0a/.github/workflows/build.yml">profile repo's builder workflow</a>, I wanted only to proceed with a git commit step if there were actual changes that had been made in a previous step.</p>
<p>Supplying the <code>--exit-code</code> option to <a href="https://git-scm.com/docs/git-diff">git diff</a> makes it emit an exit code of 1 if there are differences, and 0 if not. This option is implicit in <code>--quiet</code>, too.</p>
<p>As exit code 1 represents a fail in job step conditionals, the output of git diff can be reversed with the POSIX <code>!</code> operator. So in this pair of steps, the second one will only run if there are no differences detected in the first one:</p>
<pre><code>- name: Check for changes (fail if none)
  run: |
    ! git diff --quiet

- name: Commit changes if required
  if: ${{ success() }}
  run: |
    git config --global user.email &quot;qmacro-bot@example.com&quot;
    git config --global user.name &quot;qmacro bot&quot;
    git add README.md
    git commit -m 'update README' || exit 0
    git push
</code></pre>
<blockquote>
<p>I had to write the <code>! git diff --quiet</code> within a YAML multiline expression (introduced with <code>|</code>) as the GitHub Actions runner didn't like it on the same line, i.e. <code>run: ! git diff --quiet</code>.</p>
</blockquote>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>In an mta.yaml file you can use the service-name parameter to point to an existing resource</title>
      <link href="https://qmacro.org/blog/posts/2020/07/20/in-an-mta.yaml-file-you-can-use-the-service-name-parameter-to-point-to-an-existing-resource/"/>
      <updated>2020-07-20T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2020/07/20/in-an-mta.yaml-file-you-can-use-the-service-name-parameter-to-point-to-an-existing-resource/</id>
      <content type="html">
        <![CDATA[
      <p><em>In <code>mta.yaml</code> files you can use the <code>service-name</code> parameter to point to an existing service instance with a different name than the resource.</em></p>
<p>When the contents of a <a href="https://help.sap.com/viewer/4505d0bdaf4948449b7f7379d24d0f0d/2.0.03/en-US/33548a721e6548688605049792d55295.html">multi-target application file</a> file have been created or modified automatically for you, and there are references to generated service instance names, you don't have to globally replace those names to match whatever service instances you may already have, but instead you can add the <code>service-name</code> <a href="https://help.sap.com/viewer/4505d0bdaf4948449b7f7379d24d0f0d/2.0.03/en-US/4050fee4c469498ebc31b10f2ae15ff2.html">parameter</a> in the resource definition.</p>
<p>For example, when adding a new Workflow module to an existing (<code>mta.yaml</code>-based) project, the generator will add something like this:</p>
<pre><code>modules:
  - name: OrderProcess
    type: com.sap.application.content
    path: OrderProcess
    requires:
      - name: workflow_mta
        parameters:
          content-target: true
resources:
  - name: workflow_mta
    parameters:
      service-plan: standard
      service: workflow
    type: org.cloudfoundry.managed-service
</code></pre>
<p>It's often the case that you already have a Workflow service instance, but not with the generated name <code>workflow_mta</code>. So after modifying the resource <code>type</code> to be <code>org.cloudfoundry.existing-service</code>, you can save some time and avoid changing all occurrences of <code>workflow_mta</code> to match your actual instance name (e.g. <code>my-workflow-instance</code>). Instead, use the <code>service-name</code> parameter, like this:</p>
<pre><code>modules:
  - name: OrderProcess
    type: com.sap.application.content
    path: OrderProcess
    requires:
      - name: workflow_mta
        parameters:
          content-target: true
resources:
  - name: workflow_mta
    parameters:
      service-name: my-workflow-instance
    type: org.cloudfoundry.existing-service
</code></pre>
<blockquote>
<p>I learned this a while ago but promptly forgot about it until now, when I needed it again.</p>
</blockquote>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Removing the knob on a La Pavoni steam valve</title>
      <link href="https://qmacro.org/blog/posts/2020/06/20/removing-the-knob-on-a-la-pavoni-steam-valve/"/>
      <updated>2020-06-20T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2020/06/20/removing-the-knob-on-a-la-pavoni-steam-valve/</id>
      <content type="html">
        <![CDATA[
      <p><em>This post documents how I went about removing the knob from the shaft of the steam valve on my La Pavoni lever coffee machine.</em></p>
<p>I've had my La Pavoni PL lever espresso coffee machine for just over a year, and I'm extremely happy with it. Recently I ordered some wooden replacement handles for it from a vendor on Etsy and when they finally arrived I set about replacing the factory standard bakelite handles with the wooden ones.</p>
<p>Replacing them was easy except for one item - the knob on the steam valve shaft. The existing one was held in place by a metal split pin and seems to have a reputation of being hard to remove. I couldn't figure out the best way either; while I'd learned how to remove the shaft itself from this video on YouTube: <a href="https://www.youtube.com/watch?v=xPj1VSGgyCY">La Pavoni Lever Machines: How to Remove the Steam Valve Shaft</a> I couldn't quite figure out how to remove the knob itself.</p>
<p>So I <a href="https://www.reddit.com/r/espresso/comments/h868yx/help_please_remove_steam_valve_knob_on_la_pavoni/">asked on the r/espresso subreddit</a> and the user <a href="https://www.reddit.com/user/Dr_Procrastinator/">Dr_Procrastinator</a> gave some very helpful advice in a reply.</p>
<p>Having obtained a small and inexpensive set of nail punches from a local hardware / DIY store (B&amp;Q Ashton, £5.25) earlier this week, I set about the task this morning, and thought I'd share some photos as it might help someone else.</p>
<p><img src="/images/2020/06/nailpunchset.jpg" alt="nail punch set"></p>
<h3>Removing the shaft</h3>
<p>First I removed the shaft, by simultaneously unscrewing it using the knob, and unscrewing the silver threaded nut with a spanner.</p>
<p><img src="/images/2020/06/shaft.jpg" alt="removing the shaft"></p>
<p>I just kept on unscrewing the shaft until it came completely loose and I could pull it out with the last few turns; there was a bit of resistance (from the gasket, I guess) but not much.</p>
<p>This is what it looks like once removed:</p>
<p><img src="/images/2020/06/shaft-removed.png" alt="the shaft, removed"></p>
<h3>Removing the knob</h3>
<p>I needed to hammer the split pin out through the hole in the knob, so I used a folded towel to support the shaft, and laid the knob within / on top of the thumb-hole of a heavy-duty chopping board; in this photo you can see the hole marked with the arrow. This gave enough support and stability for the next step, and it also afforded enough gap underneath for the pin to start coming out of the bottom (it wasn't a worry though as the pin came through very slowly with a lot of effort!).</p>
<p><img src="/images/2020/06/supported.png" alt="supporting the shaft and knob"></p>
<p>While the shaft and knob were supported, I could then use the appropriately sized punch with a small hammer to gently but firmly tap down on the split pin, driving it out slowly.</p>
<p><img src="/images/2020/06/punch.jpg" alt="using a punch"></p>
<p>It took a while - I was going gently and it took me a few minutes. Once the pin was sticking out enough through the end, I pulled it out with a pair of pliers (it was quite a struggle).</p>
<p>While tapping the pin punch into the hole, the rim cracked a little and a bit of bakelite flaked off, but I think that is not unusual in such conditions.</p>
<p>Here's the final result:</p>
<p><img src="/images/2020/06/removed.jpg" alt="knob removed"></p>
<h3>Fitting the new knob</h3>
<p>Ironically, all this effort has been somewhat in vain, as the new wooden knob has a tiny hex nut that you are supposed to screw round and down into the shaft to hold it firm. But while I had plenty of Allen keys around the house, not one of them fitted snugly and I couldn't get a decent torque to turn the screw into the shaft. This meant that this securing mechanism - that relies on sheer force into the metal shaft - was useless.</p>
<p><img src="/images/2020/06/woodenknob.png" alt="the wooden knob"></p>
<p>I guess once I find an Allen key that fits, I can try to screw it in tight enough for the knob to hold and not slide around the shaft when I'm using it to open and close the steam valve.</p>
<p>Until then, I've gone back to the bakelite knob ... with the pin pushed back through, but not all the way so I can get it out more easily next time.</p>
<p><img src="/images/2020/06/lapavoni.jpg" alt="the espresso machine"></p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Remote mount setup on the Raspberry Pi</title>
      <link href="https://qmacro.org/blog/posts/2020/06/07/remote-mount-setup-on-the-raspberry-pi/"/>
      <updated>2020-06-07T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2020/06/07/remote-mount-setup-on-the-raspberry-pi/</id>
      <content type="html">
        <![CDATA[
      <p><em>This post documents what I did to set up mount points for, and connect to, an Apple Airport Time Capsule here on my homelab network and also my Google Drive.</em></p>
<p>My interest in Raspberry Pis has increased over the last few months, and I've taken delivery of a couple of Pi Zero W models and another Pi 4, all from <a href="https://thepihut.com/">The Pi Hut</a>, which I can heartily recommend. Using the Pis more often, I wanted to connect them to some remote storage, specifically my old but still relevant network storage device - an Airport Time Capsule from Apple - and also be able to seamlessly read and write files on my Google Drive. This short post documents what I did, so I can refer back to it if I need to do it again. Perhaps it might be useful for you too.</p>
<p>Here's the relevant section from a <code>tree -L 2</code> in my home directory:</p>
<pre><code>.
└── mnt
    ├── gdrive
    └── timecapsule
</code></pre>
<h2>Mounting the Time Capsule</h2>
<p>This was pretty straightforward and involves adding a new line in <code>/etc/fstab</code> to represent the mount. This is the line:</p>
<pre><code>//timecapsule/Data /home/pi/mnt/timecapsule cifs vers=1.0,password=sekrit,rw,uid=1000,iocharset=utf8,sec=ntlm 0 0
</code></pre>
<p>Broken down bit by bit, we have:</p>
<ul>
<li><code>//timecapsule/Data</code>: The mount device, which is the Data share on the Time Capsule itself, which is identified here as the hostname <code>timecapsule</code>. I could have used an IP address but I'm happily running a local DNS setup on this homelab (on one of the Pi Zero W devices) using <a href="https://pi-hole.net/">Pi-hole</a></li>
<li><code>/home/pi/mnt/timecapsule</code>: The mount point, where I want the Data share to be mounted</li>
<li><code>cifs</code>: The file system type; Common Internet File System (CIFS) is a dialect of the more Windows specific Server Message Block (SMB) network protocol</li>
<li><code>vers=1.0,password=sekrit,rw,uid=1000,iocharset=utf8,sec=ntlm</code>: There a few options specified here, such as the protocol version number, that the mount should be read-write, and so on (it seems as though the security mode 'ntlm', which was the default for a while, now must be specified explicitly)</li>
<li><code>0</code>: Dump (disabled), i.e. no backing up of this partition</li>
<li><code>0</code>: Boot time fsck (disabled), i.e. no file system check at boot time for this file system</li>
</ul>
<p>A short note on the password (which isn't actually 'sekrit', obviously) - via the airport utility on my macOS device, I connected to the Time Capsule and set up the security for the disks with a &quot;disk password&quot;, i.e. there is no user. This seemed simpler and good enough for what I need.</p>
<p><img src="/images/2020/06/diskconfig.png" alt="Disk configuration on the Time Capsule"></p>
<p>And that's it. After adding the line, a <code>mount -a</code> (as root) did the trick, and of course the mount is performed on (re)boot too.</p>
<h2>Mounting Google Drive</h2>
<p>This was a bit more involved, but still worked first time. It involves the use of <a href="https://rclone.org/">rclone</a>, which is described as &quot;a command line program to manage files on cloud storage&quot;, and support for Google Drive is included.</p>
<p>Basically, I followed this excellent tutorial from Artur Klauser - <a href="https://medium.com/@artur.klauser/mounting-google-drive-on-raspberry-pi-f5002c7095c2">Mounting Google Drive on Raspberry Pi</a>, so I won't repeat all the details; instead, I'll list the commands and activities I went through here.</p>
<h3>Installed rclone</h3>
<p>I installed <code>rclone</code> from the standard repositories, and got version 1.45; in other words, I didn't bother with trying to get the latest through a <code>wget</code> pull of something newer - I think I'm happy with 1.45 (and it's worked well so far for me).</p>
<pre><code>sudo apt install rclone
</code></pre>
<h3>Set up a Google API project</h3>
<p>In order to use my own access configuration, I need a client ID and client secret pair for OAuth based authentication to the Google Drive API, and so I needed to get those from Google. I set up a fresh project &quot;homelab-rclone&quot;, enabled the Google Drive API, and generated some OAuth 2.0 client credentials.</p>
<p><img src="/images/2020/06/googleapiclient.png" alt="The OAuth 2.0 Client ID"></p>
<h3>Configured rclone</h3>
<p>After generating the credentials, I went back to the command line and fired up <code>rclone config</code>, following the guide in Artur's post mentioned earlier. Next, a simple test (<code>rclone ls --max-depth 1 gdrive:</code>) showed that I could indeed see the contents of my Google Drive. The configuration procedure caused a file <code>rclone.conf</code> to be created in <code>~/.config/rclone/</code> too, this is what the contents look like (I've elided the credential details of course):</p>
<pre><code>[gdrive]
type = drive
client_id = 693105092413-sv17[...].apps.googleusercontent.com
client_secret = dQwG[...]
scope = drive
token = {&quot;access_token&quot;:&quot;ya29[...]&quot;,&quot;token_type&quot;:&quot;Bearer&quot;,&quot;refresh_token&quot;:&quot;1ae03[...]&quot;,&quot;expiry&quot;:&quot;2020-06-07T16:58:38.185331858+01:00&quot;}
</code></pre>
<p>Note that the permissions for this config file are appropriately set to 0600 (read-write for the owner, i.e. me, only).</p>
<h3>Set up automatic mounting</h3>
<p>Using Artur's instructions, I set up a user mode service to execute <code>rclone</code>, including the use of <a href="https://wiki.archlinux.org/index.php/Systemd/User#Automatic_start-up_of_systemd_user_instances">lingering</a>. Here, briefly, are the commands I used:</p>
<p>Create a new directory for this new user mode service:</p>
<pre><code>mkdir -p ~/.config/systemd/user/
</code></pre>
<p>Add the <code>[Unit]</code> and <code>[Service]</code> entries as directed in the blog post, with a little modification as some of the options to <code>rclone</code> did't work for me:</p>
<pre><code>cat &lt;&lt;EOF &gt; ~/.config/systemd/user/rclone@.service
[Unit]
Description=rclone: Remote FUSE filesystem for cloud storage config %i
Documentation=man:rclone(1)

[Service]
Type=notify
ExecStartPre=/bin/mkdir -p %h/mnt/%i
ExecStart= \
  /usr/bin/rclone mount \
    --fast-list \
    %i: %h/mnt/%i

[Install]
WantedBy=default.target
EOF
</code></pre>
<p>Enable &amp; start the service:</p>
<pre><code>systemctl --user enable rclone@gdrive
systemctl --user start rclone@gdrive
</code></pre>
<p>Set up lingering:</p>
<pre><code>loginctl enable-linger $USER
</code></pre>
<p>And that's it. After rebooting (to test), I can see the contents of my Google Drive at <code>~/mnt/gdrive/</code>. Success!</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Initial Pi configuration via Ansible</title>
      <link href="https://qmacro.org/blog/posts/2020/04/05/initial-pi-configuration-via-ansible/"/>
      <updated>2020-04-05T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2020/04/05/initial-pi-configuration-via-ansible/</id>
      <content type="html">
        <![CDATA[
      <p><em>In the previous post we identified the freshly booted Pis on the network; now it's time to perform some initial configuration, using Ansible.</em></p>
<p>This is a post in the &quot;<a href="/blog/posts/2020/03/22/brambleweeny-cluster-experiments/">Brambleweeny Cluster Experiments</a>&quot; series of blog posts, which accompanies the <a href="https://www.youtube.com/playlist?list=PLfctWmgNyOIf9rXaZp9RSM2YVxAPGGthe">YouTube live stream recording playlist</a> of the same name. The video linked here is the one that accompanies this blog post.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/vooBccHq6_4" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
<p>Previous post in this series: <a href="/blog/posts/2020/03/22/finding-the-pis-on-the-network/">Finding the Pis on the network</a></p>
<h2>Ansible configuration</h2>
<p>At the end of the previous post, we'd identified the MAC and current IP addresses of the Pis on the network. This information found its way into a couple of files used in a process that follows the general flow described in Jeff Geerling's <a href="https://github.com/geerlingguy/raspberry-pi-dramble/tree/master/setup/networking">Raspberry Pi Networking Setup</a>.</p>
<p>First, we have the <code>inventory</code> file defining the current (&quot;as-is&quot;) IP addresses of the Pis:</p>
<pre class="language-yml"><code class="language-yml"><span class="token punctuation">[</span>brambleweeny<span class="token punctuation">]</span><br>192.168.86.47<br>192.168.86.15<br>192.168.86.158<br>192.168.86.125<br><br><span class="token punctuation">[</span>brambleweeny<span class="token punctuation">:</span>vars<span class="token punctuation">]</span><br>ansible_ssh_user=pi</code></pre>
<p>Note that we've also got the definition of the default user <code>pi</code> also in there.</p>
<p>Then, we also have the <code>vars.yml</code> file which is used by the <a href="https://github.com/geerlingguy/raspberry-pi-dramble/blob/master/setup/networking/main.yml"><code>main.yml</code></a> Ansible script to set things up. While we saw the contents in the previous post, it's worth looking at them again here:</p>
<pre class="language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><br><span class="token comment"># Mapping of what hardware MAC addresses should be configured with specific IPs.</span><br><span class="token key atrule">mac_address_mapping</span><span class="token punctuation">:</span><br><br>  <span class="token key atrule">"dc:a6:32:60:60:95"</span><span class="token punctuation">:</span><br>    <span class="token key atrule">name</span><span class="token punctuation">:</span> brambleweeny1.lan<br>    <span class="token key atrule">ip</span><span class="token punctuation">:</span> <span class="token string">"192.168.86.12"</span><br>  <span class="token key atrule">"dc:a6:32:60:60:77"</span><span class="token punctuation">:</span><br>    <span class="token key atrule">name</span><span class="token punctuation">:</span> brambleweeny2.lan<br>    <span class="token key atrule">ip</span><span class="token punctuation">:</span> <span class="token string">"192.168.86.13"</span><br>  <span class="token key atrule">"dc:a6:32:60:60:44"</span><span class="token punctuation">:</span><br>    <span class="token key atrule">name</span><span class="token punctuation">:</span> brambleweeny3.lan<br>    <span class="token key atrule">ip</span><span class="token punctuation">:</span> <span class="token string">"192.168.86.14"</span><br>  <span class="token key atrule">"dc:a6:32:60:60:e3"</span><span class="token punctuation">:</span><br>    <span class="token key atrule">name</span><span class="token punctuation">:</span> brambleweeny4.lan<br>    <span class="token key atrule">ip</span><span class="token punctuation">:</span> <span class="token string">"192.168.86.15"</span><br><br><span class="token comment"># Nameservers to use in resolv.conf.</span><br><span class="token key atrule">dns_nameservers</span><span class="token punctuation">:</span><br>  <span class="token punctuation">-</span> <span class="token string">"192.168.86.5"</span></code></pre>
<p>This is the &quot;to-be&quot; state of the Pis, via configuration of specific hostnames and IP addresses, as well as what to use for domain name resolution, for each of the Pis that are to be identified by their MAC addresses. More explicitly, I want to move from dynamically allocated IP addresses (which are currently 47, 15, 158 and 125) to statically allocated IP addresses 12, 13, 14 and 15.</p>
<h2>Strict host key checking</h2>
<p>Running the Ansible <code>main.yml</code> playbook as it stands right now presents us with a problem:</p>
<pre><code>-&gt; ansible-playbook -i inventory main.yml
PLAY [brambleweeny] ***

TASK [Gathering Facts] ***
The authenticity of host '192.168.86.47 (192.168.86.47)' can't be established.
ECDSA key fingerprint is SHA256:AJ5628fGhewiqdu/V2+B1LkR2HKGa+nRcwjYiiTGqWg.
Are you sure you want to continue connecting (yes/no)?
The authenticity of host '192.168.86.15 (192.168.86.15)' can't be established.
ECDSA key fingerprint is SHA256:sn2otbKVAa9Jsj+i3W0poIK731+pBP+ivbUrATJGVQk.
Are you sure you want to continue connecting (yes/no)?
The authenticity of host '192.168.86.158 (192.168.86.158)' can't be established.
ECDSA key fingerprint is SHA256:jFgPSwjEQsCSUx+nJcZ6ub9EhoGC1I1vSX5uSvVc1YE.
Are you sure you want to continue connecting (yes/no)?
The authenticity of host '192.168.86.125 (192.168.86.125)' can't be established.
ECDSA key fingerprint is SHA256:Tl3t427yXmbPIXjgBNBDHtNuw+MQUS132xhX6DCgo9E.
Are you sure you want to continue connecting (yes/no)?
</code></pre>
<p>We've never connected to these Pis before now, so <code>ssh</code>, which is at the heart of Ansible's connection to them, will appropriately complain that it doesn't recognise them. This &quot;complaint&quot; comes about from <code>ssh</code>'s default approach to <a href="https://www.ibm.com/support/knowledgecenter/SSLTBW_2.2.0/com.ibm.zos.v2r2.foto100/hostch.htm">checking the keys of remote hosts</a>, which is what we normally want (i.e. be strict!).</p>
<p>But for this particular operation we need to relax this approach, and for that we can use the <code>StrictHostKeyChecking</code> option, which can either be set in the <code>ssh</code> config file (<code>~/.ssh/config</code> at a user level) or on the command line.</p>
<p>Here's the difference between trying to <code>ssh</code> to one of the Pis without and then with the option turned off:</p>
<pre><code>-&gt; ssh pi@192.168.86.47
The authenticity of host '192.168.86.47 (192.168.86.47)' can't be established.
ECDSA key fingerprint is SHA256:AJ5628fGhewiqdu/V2+B1LkR2HKGa+nRcwjYiiTGqWg.
Are you sure you want to continue connecting (yes/no)?
Host key verification failed.
</code></pre>
<pre><code>-&gt; ssh -o StrictHostKeyChecking=no pi@192.168.86.47
Warning: Permanently added '192.168.86.47' (ECDSA) to the list of known hosts.
pi@192.168.86.47's password:
</code></pre>
<p>Note that in this second example, even before the password has been entered, the key for this remote Pi has now already been added to <code>~/.ssh/known_hosts</code>.</p>
<p>Ansible makes it easy for us to add <code>ssh</code> options to the <code>inventory</code> file, via the <code>ansible_ssh_common_args</code> variable, which we do, at the end of the file, like this:</p>
<pre><code>[brambleweeny:vars]
ansible_ssh_user=pi
ansible_ssh_common_args='-o StrictHostKeyChecking=no'
</code></pre>
<p>Trying the playbook again, we don't get a problem with the inability of <code>ssh</code> to authenticate the Pi hosts' keys. Great! But this just reveals the next problem, which again we can learn from:</p>
<pre><code>-&gt; ansible-playbook -i inventory main.yml

PLAY [brambleweeny] ***

TASK [Gathering Facts] ***
fatal: [192.168.86.47]: UNREACHABLE! =&gt; {&quot;changed&quot;: false, &quot;msg&quot;: &quot;Failed to connect to the host via ssh:
Warning: Permanently added '192.168.86.47' (ECDSA) to the list of known hosts.\r\n
pi@192.168.86.47: Permission denied (publickey,password).&quot;, &quot;unreachable&quot;: true}
fatal: [192.168.86.15]: UNREACHABLE! =&gt; {&quot;changed&quot;: false, &quot;msg&quot;: &quot;Failed to connect to the host via ssh:
Warning: Permanently added '192.168.86.15' (ECDSA) to the list of known hosts.\r\n
pi@192.168.86.15: Permission denied (publickey,password).&quot;, &quot;unreachable&quot;: true}
fatal: [192.168.86.158]: UNREACHABLE! =&gt; {&quot;changed&quot;: false, &quot;msg&quot;: &quot;Failed to connect to the host via ssh:
Warning: Permanently added '192.168.86.158' (ECDSA) to the list of known hosts.\r\n
pi@192.168.86.158: Permission denied (publickey,password).&quot;, &quot;unreachable&quot;: true}
fatal: [192.168.86.125]: UNREACHABLE! =&gt; {&quot;changed&quot;: false, &quot;msg&quot;: &quot;Failed to connect to the host via ssh:
Warning: Permanently added '192.168.86.125' (ECDSA) to the list of known hosts.\r\n
pi@192.168.86.125: Permission denied (publickey,password).&quot;, &quot;unreachable&quot;: true}
          to retry, use: --limit @/home/pi/raspberry-pi-dramble/setup/networking/main.retry
PLAY RECAP ***
192.168.86.125             : ok=0    changed=0    unreachable=1    failed=0
192.168.86.15              : ok=0    changed=0    unreachable=1    failed=0
192.168.86.158             : ok=0    changed=0    unreachable=1    failed=0
192.168.86.47              : ok=0    changed=0    unreachable=1    failed=0
</code></pre>
<p>Notice that the <code>-o StrictHostKeyChecking=no</code> did what we wanted it to do, as we can see the following message for each host in the output: &quot;Warning: Permanently added '192.168.86.n' (ECDSA) to the list of known hosts&quot;.</p>
<p>So we've got <code>ssh</code> to not refuse to connect because it doesn't initially recognise the hosts, but now we're getting a &quot;permission denied&quot; issue.</p>
<h2>Uploading the ssh key, and sshpass</h2>
<p>Of course, we're getting a &quot;permission denied&quot; issue because the remote Pis don't have the public key of the user of my current host (i.e. <code>~/.ssh/id_rsa.pub</code>) for public key based authentication, and we haven't supplied a password either (which for each of the freshly booted Pis, is 'raspberry' for the 'pi' user).</p>
<p>A passwordless based remote access flow is ideal, so this is something we should address now. We need somehow to get my public key across to each of the Pis, in the right place i.e. in the remote user's <code>~/.ssh/authorized_keys</code> file. (If you've not used public key based <code>ssh</code> access before, why not?)</p>
<p>There's a specific Ansible module for this - the <a href="https://docs.ansible.com/ansible/latest/modules/authorized_key_module.html"><code>authorized_key</code> module</a>, and we can use it in a short playbook like this, which we'll call <code>set_ssh_key.yml</code>:</p>
<pre class="language-yml"><code class="language-yml"><span class="token punctuation">---</span><br><span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span> brambleweeny<br><br>  <span class="token key atrule">tasks</span><span class="token punctuation">:</span><br>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Set authorized key from file<br>      <span class="token key atrule">authorized_key</span><span class="token punctuation">:</span><br>        <span class="token key atrule">user</span><span class="token punctuation">:</span> pi<br>        <span class="token key atrule">state</span><span class="token punctuation">:</span> present<br>        <span class="token key atrule">key</span><span class="token punctuation">:</span> <span class="token string">"{{ lookup('file', '/home/pi/.ssh/id_rsa.pub') }}"</span></code></pre>
<p>But of course we can't just run this, as we're still unable to connect, for the same reason:</p>
<pre><code>-&gt; ansible-playbook -i inventory set_ssh_key.yml

PLAY [brambleweeny] ***

TASK [Gathering Facts] ***
fatal: [192.168.86.47]: UNREACHABLE! =&gt; {&quot;changed&quot;: false, &quot;msg&quot;: &quot;Failed to connect to the host via ssh:
pi@192.168.86.47: Permission denied (publickey,password).&quot;, &quot;unreachable&quot;: true}
fatal: [192.168.86.15]: UNREACHABLE! =&gt; {&quot;changed&quot;: false, &quot;msg&quot;: &quot;Failed to connect to the host via ssh:
pi@192.168.86.15: Permission denied (publickey,password).&quot;, &quot;unreachable&quot;: true}
fatal: [192.168.86.158]: UNREACHABLE! =&gt; {&quot;changed&quot;: false, &quot;msg&quot;: &quot;Failed to connect to the host via ssh:
pi@192.168.86.158: Permission denied (publickey,password).&quot;, &quot;unreachable&quot;: true}
fatal: [192.168.86.125]: UNREACHABLE! =&gt; {&quot;changed&quot;: false, &quot;msg&quot;: &quot;Failed to connect to the host via ssh:
pi@192.168.86.125: Permission denied (publickey,password).&quot;, &quot;unreachable&quot;: true}
        to retry, use: --limit @/home/pi/raspberry-pi-dramble/setup/networking/set_ssh_key.retry

PLAY RECAP ***
192.168.86.125             : ok=0    changed=0    unreachable=1    failed=0
192.168.86.15              : ok=0    changed=0    unreachable=1    failed=0
192.168.86.158             : ok=0    changed=0    unreachable=1    failed=0
192.168.86.47              : ok=0    changed=0    unreachable=1    failed=0
</code></pre>
<p>So we have to authenticate a different way - with the 'raspberry' password (remember, we're already supplying Ansible with the user via the <code>ansible_ssh_user</code> variable in the <code>inventory</code> file). The <code>-k</code> option for <code>ansible-playbook</code> tells it to ask for a connection password, which it will then use on our behalf when connecting to each host.</p>
<p>It's worth spending a couple of minutes understanding how this actually operates. It uses the <code>sshpass</code> command, which is therefore required (I didn't have this and had to install it with <code>sudo apt install sshpass</code>). <code>sshpass</code> is described by its <a href="https://linux.die.net/man/1/sshpass">man page</a> as a &quot;noninteractive ssh password provider&quot;. Most of the time when we run <code>ssh</code> it's in &quot;keyboard interactive&quot; mode, which means that it can ask the user for a password if required. The man page states that that <code>ssh</code> &quot;uses direct TTY access to make sure that the password is indeed issued by an interactive keyboard user&quot;, and that, fascinatingly, <code>sshpass</code> runs <code>ssh</code> in a dedicated TTY to trick <code>ssh</code> into thinking it is indeed getting the password from an interactive user, when in fact it's not.</p>
<p>We can see this in action with a simple test:</p>
<pre><code>-&gt; sshpass -p 'raspberry' ssh pi@192.168.86.47
Linux raspberrypi 4.19.97-v7l+ #1294 SMP Thu Jan 30 13:21:14 GMT 2020 armv7l
[...]
pi@raspberrypi:~ $
</code></pre>
<p>Anyway, let's use the <code>-k</code> option with <code>ansible-playbook</code> to make use of this <code>sshpass</code> utility; Ansible will first ask us for the password and then use <code>sshpass</code> to pass it on to each of the <code>ssh</code> connections it makes:</p>
<pre><code>-&gt; ansible-playbook -k -i inventory set_ssh_key.yml
SSH password: *********

PLAY [brambleweeny] ***

TASK [Gathering Facts] ***
ok: [192.168.86.15]
ok: [192.168.86.125]
ok: [192.168.86.47]
ok: [192.168.86.158]

TASK [Set authorized key from file] ***
changed: [192.168.86.158]
changed: [192.168.86.47]
changed: [192.168.86.125]
changed: [192.168.86.15]

PLAY RECAP ***
192.168.86.125             : ok=2    changed=1    unreachable=0    failed=0
192.168.86.15              : ok=2    changed=1    unreachable=0    failed=0
192.168.86.158             : ok=2    changed=1    unreachable=0    failed=0
192.168.86.47              : ok=2    changed=1    unreachable=0    failed=0
</code></pre>
<p>Success! From this point onwards, we can use <code>ssh</code> to connect to each of the Pis, but via our public key, rather than a password:</p>
<pre><code>-&gt; ssh pi@192.168.86.47
Linux raspberrypi 4.19.97-v7l+ #1294 SMP Thu Jan 30 13:21:14 GMT 2020 armv7l
[...]
pi@raspberrypi:~ $
</code></pre>
<h2>Running the main playbook</h2>
<p>At this point I can retry <code>main.yml</code> playbook, knowing that Ansible will be able to successfully connect to each of the Pis, using the public key we've transferred, and also using the default user defined in the <code>ansible_ssh_user</code> variable in the <code>inventory</code> file:</p>
<pre><code>-&gt; ansible-playbook -i inventory main.yml

PLAY [brambleweeny] ***

TASK [Gathering Facts] ***
ok: [192.168.86.47]
ok: [192.168.86.15]
ok: [192.168.86.158]
ok: [192.168.86.125]

TASK [Set the current MAC address for eth0.] ***
ok: [192.168.86.47]
ok: [192.168.86.15]
ok: [192.168.86.158]
ok: [192.168.86.125]

TASK [Set variables based on eth0 MAC address.] ***
ok: [192.168.86.47]
ok: [192.168.86.15]
ok: [192.168.86.158]
ok: [192.168.86.125]

TASK [Set up networking-related files.] ***
changed: [192.168.86.47] =&gt; (item={'template': 'hostname.j2', 'dest': '/etc/hostname'})
changed: [192.168.86.15] =&gt; (item={'template': 'hostname.j2', 'dest': '/etc/hostname'})
changed: [192.168.86.158] =&gt; (item={'template': 'hostname.j2', 'dest': '/etc/hostname'})
changed: [192.168.86.125] =&gt; (item={'template': 'hostname.j2', 'dest': '/etc/hostname'})
changed: [192.168.86.47] =&gt; (item={'template': 'hosts.j2', 'dest': '/etc/hosts'})
changed: [192.168.86.15] =&gt; (item={'template': 'hosts.j2', 'dest': '/etc/hosts'})
changed: [192.168.86.158] =&gt; (item={'template': 'hosts.j2', 'dest': '/etc/hosts'})
changed: [192.168.86.125] =&gt; (item={'template': 'hosts.j2', 'dest': '/etc/hosts'})
changed: [192.168.86.47] =&gt; (item={'template': 'resolv.conf.j2', 'dest': '/etc/resolv.conf'})
changed: [192.168.86.15] =&gt; (item={'template': 'resolv.conf.j2', 'dest': '/etc/resolv.conf'})
changed: [192.168.86.158] =&gt; (item={'template': 'resolv.conf.j2', 'dest': '/etc/resolv.conf'})
changed: [192.168.86.125] =&gt; (item={'template': 'resolv.conf.j2', 'dest': '/etc/resolv.conf'})
changed: [192.168.86.47] =&gt; (item={'template': 'dhcpcd.conf.j2', 'dest': '/etc/dhcpcd.conf'})
changed: [192.168.86.15] =&gt; (item={'template': 'dhcpcd.conf.j2', 'dest': '/etc/dhcpcd.conf'})
changed: [192.168.86.158] =&gt; (item={'template': 'dhcpcd.conf.j2', 'dest': '/etc/dhcpcd.conf'})
changed: [192.168.86.125] =&gt; (item={'template': 'dhcpcd.conf.j2', 'dest': '/etc/dhcpcd.conf'})

RUNNING HANDLER [update hostname] ***
changed: [192.168.86.47]
changed: [192.168.86.15]
changed: [192.168.86.158]
changed: [192.168.86.125]

RUNNING HANDLER [delete dhcp leases] ***
ok: [192.168.86.47] =&gt; (item=/var/lib/dhcp/dhclient.leases)
ok: [192.168.86.15] =&gt; (item=/var/lib/dhcp/dhclient.leases)
ok: [192.168.86.158] =&gt; (item=/var/lib/dhcp/dhclient.leases)
ok: [192.168.86.125] =&gt; (item=/var/lib/dhcp/dhclient.leases)
ok: [192.168.86.47] =&gt; (item=/var/lib/dhcpcd5/dhcpcd-eth0.lease)
ok: [192.168.86.15] =&gt; (item=/var/lib/dhcpcd5/dhcpcd-eth0.lease)
ok: [192.168.86.158] =&gt; (item=/var/lib/dhcpcd5/dhcpcd-eth0.lease)
ok: [192.168.86.125] =&gt; (item=/var/lib/dhcpcd5/dhcpcd-eth0.lease)

PLAY RECAP ***
192.168.86.47              : ok=6    changed=2    unreachable=0    failed=0
192.168.86.15              : ok=6    changed=2    unreachable=0    failed=0
192.168.86.158             : ok=6    changed=2    unreachable=0    failed=0
192.168.86.125             : ok=6    changed=2    unreachable=0    failed=0
</code></pre>
<p>Very nice indeed!</p>
<h2>Rebooting and updating the inventory</h2>
<p>At this stage, as advised in Jeff's <a href="https://github.com/geerlingguy/raspberry-pi-dramble/tree/master/setup/networking">networking setup README</a>, we can reboot the Pis with the following direct shell module based command:</p>
<pre><code>-&gt; ansible all \
&gt; -i inventory \
&gt; -m shell \
&gt; -a &quot;sleep 1s; shutdown -r now&quot; \
&gt; -b \
&gt; -B 60 \
&gt; -P 0
192.168.86.47  | CHANGED | rc=-1 &gt;&gt;
192.168.86.15  | CHANGED | rc=-1 &gt;&gt;
192.168.86.158 | CHANGED | rc=-1 &gt;&gt;
192.168.86.125 | CHANGED | rc=-1 &gt;&gt;
</code></pre>
<p>Note that this is the last time we'll be using these &quot;as-is&quot; IP addresses; when the Pis restart they'll have the static IP addresses defined in the <code>vars.yml</code> file we saw earlier. So at this point, the addresses in the inventory need to be updated to reflect that, for future Ansible-based management of these machines.</p>
<p>This is now what's in the updated <code>inventory</code> file:</p>
<pre class="language-yml"><code class="language-yml"><span class="token punctuation">[</span>brambleweeny<span class="token punctuation">]</span><br>192.168.86.12<br>192.168.86.13<br>192.168.86.14<br>192.168.86.15<br><br><span class="token punctuation">[</span>brambleweeny<span class="token punctuation">:</span>vars<span class="token punctuation">]</span><br>ansible_ssh_user=pi<br>ansible_ssh_common_args='<span class="token punctuation">-</span>o StrictHostKeyChecking=no'</code></pre>
<p>The <code>ansible_ssh_common_args</code> variable is still there, because we need it one more time. When the IP address of a remote host changes, <code>ssh</code> will complain again, because the key isn't in <code>known_hosts</code>. So a simple connection to each of the Pis with this <code>StrictHostKeyChecking=no</code> option set will cause that complaint to be suppressed, and also cause the new keys to be stored:</p>
<pre><code>-&gt; ansible -m ping all -i inventory
192.168.86.12 | SUCCESS =&gt; {
    &quot;changed&quot;: false,
    &quot;ping&quot;: &quot;pong&quot;
}
192.168.86.13 | SUCCESS =&gt; {
    &quot;changed&quot;: false,
    &quot;ping&quot;: &quot;pong&quot;
}
192.168.86.14 | SUCCESS =&gt; {
    &quot;changed&quot;: false,
    &quot;ping&quot;: &quot;pong&quot;
}
192.168.86.15 | SUCCESS =&gt; {
    &quot;changed&quot;: false,
    &quot;ping&quot;: &quot;pong&quot;
}
</code></pre>
<p>Now we have another four lines in our <code>~/.ssh/known_hosts</code> file, reflecting the four Pis with their new keys, making a total of eight lines (one for each host when we had the DHCP-allocated IP addresses, and then one for each host with the new statically allocated IP addresses). To be thorough, it's probably a good idea to delete the first four lines, but more importantly, it's paramount that we remove the <code>ansible_ssh_common_args</code> line from the inventory file now, to prevent future (and inadvertent) suppression of potentially real key warnings.</p>
<h2>Wrapping up</h2>
<p>And that's it for this post. Ansible is indeed a powerful system, but taking the time to understand what's going on has taught me things about basic networking (and in particular some ins and outs of <code>ssh</code>) that I'm glad I know now.</p>
<p>Moreover, I now have a nice set of four Pis set up from a basic networking perspective, ready for the next steps.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Code at Home episodes</title>
      <link href="https://qmacro.org/blog/posts/2020/04/02/code-at-home-episodes/"/>
      <updated>2020-04-02T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2020/04/02/code-at-home-episodes/</id>
      <content type="html">
        <![CDATA[
      <p><em>This post summarises the episodes streamed live (and available as recordings) on YouTube. Find out more about the Code at Home initiative in the main blog post: <a href="/blog/posts/2020/03/24/code-at-home/">Let's learn to &quot;Code at Home&quot;</a>.</em></p>
<p>All the episodes are live streamed <a href="https://youtube.com/djadams-qmacro">on my YouTube channel</a> and are then available on that same channel after the streams finish, as recordings. In this post are links to those recordings with a short description of each. You can easily spot the upcoming live streams and recordings as they always have the &quot;Code at Home&quot; background in the thumbnail, like this:</p>
<p><img src="/images/2020/04/cahthumbnails.png" alt="Code at Home video thumbnails"></p>
<h1>Episodes</h1>
<p>Here are the recordings of the live stream episodes so far. Click on the episode title link to get to the recording on YouTube.</p>
<table>
  <tr>
    <th width="35%">Episode</th>
    <th>Description</th>
  </tr>
  <tr>
    <td>
      Fri 27 Mar 2020<br>
      <a href="https://www.youtube.com/watch?v=X7gtbWiHTBY">Code at Home Ep.1<br>Setting up for our first challenge</a>
    </td>
    <td>
      <p>In this first episode we set up the tools that we need - the <a href="https://projecteuler.net">Project Euler</a> and the <a href="https://repl.it">repl.it</a> websites. We also solve together the very first problem described on Project Euler: <a href="https://projecteuler.net/problem=1">Multiples of 3 and 5</a>.</p>
      <p>Code resources for this episode: <a href="https://repl.it/@qmacro/CodeAtHome1">CodeAtHome1</a></p>
    </td>
  </tr>
  <tr>
    <td>
      Mon 30 Mar 2020<br>
      <a href="https://www.youtube.com/watch?v=cfGQ-K7dvfg">Code at Home Ep.2<br>Fizz-Buzz and Fibonacci</a>
    </td>
    <td>
      <p>We start off by looking at the little "homework" challenge from last time, with a program to generate the output of a Fizz-Buzz game. Then the main part of this episode sees us take a first look at the Fibonacci sequence, what it is and how to work out the termns in that sequence, coding together a simple program to do that.</p>
      <p>Code resources for this episode: <a href="https://repl.it/@qmacro/CodeAtHome2">CodeAtHome2</a> and <a href="https://repl.it/@qmacro/FizzBuzz">FizzBuzz</a></p>
    </td>
  </tr>
  <tr>
    <td>
      Wed 01 Apr 2020<br>
      <a href="https://www.youtube.com/watch?v=tYt7SsGbhu4">Code at Home Ep.3<br>Solving a Fibonacci related challenge</a>
    </td>
    <td>
      <p>Following on from the previous episode we take another look together at what we wrote already to generate the Fibonacci sequence, and rewrite it to make it better, using a generator function and even creating a function that produces other functions. With that, we go and solve Project Euler problem 2: <a href="https://projecteuler.net/problem=2">Even Fibonacci numbers</a>.</p>
      <p>Code resources for this episode: <a href="https://repl.it/@qmacro/CodeAtHome3">CodeAtHome3</a></p>
    </td>
  </tr>
  <tr>
    <td>
      Fri 03 Apr 2020<br>
      <a href="https://www.youtube.com/watch?v=yOfp681B_tg">Code at Home Ep.4<br>Figuring out sentence statistics!</a>
    </td>
    <td>
      <p>Taking a break from numbers, we start to look at sentences and words, and how to parse them to grab basic data. In doing this we learn about arrays, and how to create and use them, even discovering functions and properties that are available on them. We also start to introduce the 'const' and 'let' keywords, and end with a gentle introduction to the super 'map' function.</p>
      <p>Code resources for this episode: <a href="https://repl.it/@qmacro/CodeAtHome4">CodeAtHome4</a></p>
    </td>
  </tr>
  <tr>
    <td>
      Mon 06 Apr 2020<br>
      <a href="https://www.youtube.com/watch?v=7HDJOKtSNUE">Code at Home Ep.5<br>More on arrays and array functions</a>
    </td>
    <td>
      <p>Continuing on from the previous episode we start off by taking a look at character codes to understand the default sort() behaviour, digging in a little bit to the ASCII table. Then we look at a few more array functions, revisiting split() and map() and finally building a predicate function isPalindrome() that will tell us if the input is palindromic, a useful function that we'll need to solve <a href="https://projecteuler.net/problem=4">Project Euler problem 4</a> in the next episode.</p>
      <p>Code resources for this episode: <a href="https://repl.it/@qmacro/CodeAtHome5">CodeAtHome5</a></p>
    </td>
  </tr>
  <tr>
    <td>
      Wed 08 Apr 2020<br>
      <a href="https://www.youtube.com/watch?v=vQoZeQW4SbQ">Code at Home Ep.6<br>Solving the palindromic products puzzle</a>
    </td>
    <td>
      <p>We start off by making slight improvements to our isPalindrome() function so that it will work with numbers as well as strings. Then we generate pairs of numbers in nested for loops, implementing an optimisation that will leave out duplicate calculations. We then check whether our code agrees with the answer to the sample in the problem (the product of two 2-digit numbers) and confident that it's OK, we put the code to work to calculate the main part of <a href="https://projecteuler.net/problem=4">Project Euler problem 4</a>, and it works!</p>
      <p>Along the way, we define a function that we then use to influence the behaviour of the sort() function. Between now and the next episode, think about how this function works, by looking at the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort">Array.prototype.sort</a> documentation at MDN.</p>
      <p>Code resources for this episode: <a href="https://repl.it/@qmacro/CodeAtHome6">CodeAtHome6</a></p>
    </td>
  </tr>
  <tr>
    <td>
      Fri 10 Apr 2020<br>
      <a href="https://youtu.be/cIX5ThSpYGI">Code at Home Ep.7<br>Looking at sort functions</a>
    </td>
    <td>
      <p>In this episode we dig more into why the default sort behaviour for our filtered palindromic products wasn't quite what we wanted, and looked into how the sort() function can use a 'compare function' to tell it how to behave. Then after creating a useful function to generate a nice list of random numbers on demand, we explore our own compare function implementation, passing it to sort() to influence the behaviour. Lots of fun!</p>
      <p>Code resources for this episode: <a href="https://repl.it/@qmacro/CodeAtHome7">CodeAtHome7</a></p>
    </td>
  </tr>
  <tr>
    <td>
      Mon 13 Apr 2020<br>
      <a href="https://www.youtube.com/watch?v=hizi99N8F5A">Code at Home Ep.8<br>Finishing off sort, and introducing objects</a>
    </td>
    <td>
      <p>In this episode we expand our horizons with respect to arrays, and learn how you can have arrays with different types of data, and even nest arrays inside each other. We then move on to objects, which are an even more powerful way of representing and manipulating data. As a brief aside, we take an initial look at <a href="https://projecteuler.net/problem=4">Project Euler Problem 4 - Names Scores</a>, which we'll start to solve together next. Finally, we write another compare function to call sort() with, so that we can sort by referring to values of properties inside object structures.</p>
      <p>Code resources for this episode: <a href="https://repl.it/@qmacro/CodeAtHome8">CodeAtHome8</a></p>
      <p>Data resources for this episode: <a href="https://gist.github.com/qmacro/7dcab532e7029ac1a1042bcf9f29f3af#file-episodes-a-js">episodes-A.js</a> which we copied into our repl.it workspace.</p>
    </td>
  </tr>
  <tr>
    <td>
      Wed 15 Apr 2020<br>
      <a href="https://www.youtube.com/watch?v=3HrewK3Z114">Code at Home Ep.9<br>Looking at Project Euler problem Nr.22</a>
    </td>
    <td>
      <p>We take a first proper look at the "Names Scores" problem, which is Nr.22 in the Project Euler series. There are a lot of things for us to do to solve the problem, but all of them definitely manageable. We spent a lot of this episode learning about how to open and read file contents, which we need to do to bring in the 5000+ first names that the problem is based upon.</p>
      <p>Code resources for this episode: <a href="https://repl.it/@qmacro/CodeAtHome9">CodeAtHome9</a></p>
    </td>
  </tr>
  <tr>
    <td>
      Fri 17 Apr 2020<br>
      <a href="https://www.youtube.com/watch?v=MCcOglgeiqE">Code at Home Ep.10<br>Continuing with Project Euler problem Nr.22</a>
    </td>
    <td>
      <p>Now we're comfortable with reading in the data from the file from the previous episode, we can turn our attention to starting to pick off each task we need to achieve to solve the problem. In this episode we look at stripping off the double-quotes from each name, and how to go about calculating individual letter scores for each name. We also take a brief look at the raw data that is provided to us from the file read process, and work out what it represents, by translating between hexadecimal and decimal and looking up values in an ASCII table.</p>
      <p>Code resources for this episode (same as the previous episode): <a href="https://repl.it/@qmacro/CodeAtHome9">CodeAtHome9</a></p>
    </td>
  </tr>
  <tr>
    <td>
      Mon 20 Apr 2020<br>
      <a href="https://www.youtube.com/watch?v=bzJ7UQoCqxI">Code at Home Ep.11<br>An introduction to reduce()</a>
    </td>
    <td>
      <p>In this episode we took our time over getting acquainted with the powerful Array.prototype.reduce() function, the 'big sister' of Array.prototype.map(), Array.prototype.filter() and other similar array functions. Unlike map() and filter(), both of which expect to be passed functions that take a single parameter, and both of which produce an array as a result, the reduce() function expects to be passed a function that takes two parameters, and can produce a result of any shape (e.g. an array, an object or a scalar). We used reduce() to add up an array of numbers.</p>
      <p>Code resources for this episode (same as the previous episode): <a href="https://repl.it/@qmacro/CodeAtHome9">CodeAtHome9</a></p>
    </td>
  </tr>
  <tr>
    <td>
      Wed 22 Apr 2020<br>
      <a href="https://youtu.be/puzpDLgWebA">Code at Home Ep.12<br>Finishing off Project Euler Nr.22</a>
    </td>
    <td>
      <p>In this episode we finish off the coding for Project Euler problem 22. In doing so, we look at a feature of the Array.prototype.map() function that we've previously ignored - the fact that not only does it pass the element to the function we provide to it, but also that element's position in the array that's being processed. We use this feature to get the position of the element, to work out the final score for each name. Great!</p>
      <p>Code resources for this episode (same as the previous episode): <a href="https://repl.it/@qmacro/CodeAtHome9">CodeAtHome9</a></p>
    </td>
  </tr>
  <tr>
    <td>
      Fri 24 Apr 2020<br>
      <a href="https://youtu.be/S_2-cMRd4N8">Code at Home Ep.13<br>Looking at Base 2 and our next challenge</a>
    </td>
    <td>
      <p>We start off by taking a peek at the next challenge which is <a href="https://projecteuler.net/problem=36">Project Euler Nr.36 - Double-base palindromes</a> where we have to check not only decimal but binary numbers for palindromic properties. So we take an excursion into binary, or Base 2, to understand how that works. Then we grab the isPalindrome() function from a previous CodeAtHome episode to reuse, and quite easily solve the problem together. Great!</p>
      <p>Code resources for this episode <a href="https://repl.it/@qmacro/CodeAtHome13">CodeAtHome13</a></p>
    </td>
  </tr>
  <tr>
    <td>
      Mon 27 Apr 2020<br>
      <a href="https://www.youtube.com/watch?v=570mDChjATM">Code at Home Ep.14<br>Refactoring to improve our code</a>
    </td>
    <td>
      <p>There are nearly always opportunities to make improvements to code; whether that is for readability, performance, or other reasons. In this episode we looked at what we wrote for the solution we coded together on the previous episode and made a few improvements, by tweaking some values to make the calculation perform better, and by adding a "helper" function that we can use in lots of places and that encapsulates complexity that we can then forget about.</p>
      <p>Code resources for this episode <a href="https://repl.it/@qmacro/CodeAtHome14">CodeAtHome14</a></p>
    </td>
  </tr>
  <tr>
    <td>
      Wed 29 Apr 2020<br>
      <a href="https://www.youtube.com/watch?v=2gf1lytLR3k">Code at Home Ep.15<br>Continuing our refactoring journey using 'range'</a>
    </td>
    <td>
      <p>We refactored some of our code in the previous episode and in this one we continued to do so, creating our own utility module and moving functions into that, and then importing what we need to the main index.js file. Then before tackling our range() function we looked at how range() works in Python, so that we could emulate that, for consistency. Then we started to write a new version of our range() function accordingly.</p>
      <p>Code resources for this episode <a href="https://repl.it/@qmacro/CodeAtHome15">CodeAtHome15</a></p>
    </td>
  </tr>
  <tr>
    <td>
      Fri 01 May 2020<br>
      <a href="https://youtu.be/78Exn27aGXg">Code at Home Ep.16<br>recursion (noun): for a definition, see 'recursion'</a>
    </td>
    <td>
      <p>After finishing off our reworked range() function so that it behaved more like Python 3's range() function, we moved on to start looking at <a href="https://en.wikipedia.org/wiki/Recursion">recursion</a> - what it is and where it came from. It's a wonderful concept but does take some time to understand, so we started slowly by looking at how we might use a recursive function definition to add some numbers together - with no explicit looping!</p>
      <p>Code resources for this episode <a href="https://repl.it/@qmacro/CodeAtHome16">CodeAtHome16</a></p>
    </td>
  </tr>
  <tr>
    <td>
      Mon 04 May 2020<br>
      <a href="https://youtu.be/1whk_QC9CPw">Code at Home Ep.17<br>A little more exploration of recursion</a>
    </td>
    <td>
      <p>In last Friday's episode we got our first taste of recursion, defining a recursive function sum() to add a list of numbers together. In this episode we had another look at that recursive definition to understand the pattern a bit more, with the base case and the main part, and then expanded our knowledge by creating a similar function mul() to multiply a list of numbers together, and making note of the (very few) things that had to change. Then we looked at what factorials were, and defined a recursive function to determine factorials for us. In fact, we defined it three different ways, ending up with a single-expression function that used the ternary operator. The definition was a little terse, but hopefully interesting!</p>
      <p>Code resources for this episode <a href="https://repl.it/@qmacro/CodeAtHome17">CodeAtHome17</a></p>
    </td>
  </tr>
  <tr>
    <td>
      Mon 11 May 2020<br>
      <a href="https://youtu.be/gFZEDy6ZAxo">Code at Home Ep.18<br>Looking at our next coding challenge together</a>
    </td>
    <td>
      <p>We embark upon our last challenge for this series, which is Project Euler problem 52 <a href="https://projecteuler.net/problem=52">Permuted Multiples</a>, and take our time exploring the problem space in the REPL together. We build up solid little functions to help us out along the way, and to codify what our thoughts are, starting with digits(), contains() and sameLength(). We get to the stage where we can check through to see if all the digits in one number are in another number ... but we're not done yet, as we saw towards the end where we came across the 'subset' issue. We'll finish this off in the next episode, by looking at solving that (using sameLength()) and improving the comparisons with the array function every().</p>
      <p>Code resources for this episode <a href="https://repl.it/@qmacro/CodeAtHome18">CodeAtHome18</a></p>
    </td>
  </tr>
  <tr>
    <td>
      Fri 15 May 2020<br>
      <a href="https://youtu.be/qw8BY5kvoI8">Code at Home Ep.19<br>Finishing off our challenge, improving the code</a>
    </td>
    <td>
      <p>We did it! We finished off and solved Project Euler problem 52 together. In finishing off, we completed the isPermutation() function, which we needed to check two things, in sequence - first, whether the length of each number was the same, and then (and only if the lengths were the same) whether the digits in the first number were in the second number. We also created the meetsRequirements() function, and indeed wrote two versions of it, which checked the actual requirements of the problem, for each number we could throw at it - which we did in a simple while loop at the end.</p>
      <p>Code resources for this episode <a href="https://repl.it/@qmacro/CodeAtHome18">CodeAtHome18</a></p>
    </td>
  </tr>
</table>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Let&#39;s learn to &quot;Code at Home&quot;</title>
      <link href="https://qmacro.org/blog/posts/2020/03/24/code-at-home/"/>
      <updated>2020-03-24T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2020/03/24/code-at-home/</id>
      <content type="html">
        <![CDATA[
      <p><em>This post provides information on the simple Code at Home initiative - what it is and what you need to join in.</em></p>
<ul>
<li>Episodes on Mondays and Fridays at 15:30 UK time.</li>
<li>Last episode in this first series will be Ep.20 on Mon 18 May.</li>
<li>Subscribe on YouTube and find all the upcoming episode links here: <a href="https://youtube.com/djadams-qmacro">youtube.com/djadams-qmacro</a></li>
<li>Find a summary list of the past episode recordings, with links, here: <a href="/blog/posts/2020/04/02/code-at-home-episodes/">Code at Home episodes</a></li>
<li><strong>New: Please take 30 seconds to let me know what you think, and what I can do to improve, in this <a href="https://docs.google.com/forms/d/e/1FAIpQLSfHWIWRTPb5cCO2TfMIntixT5bUEDw7wd4x8SFKC6q6a4RCbA/viewform">feedback form</a>. Thank you!</strong></li>
</ul>
<p>Parents: if you have any questions (during the streams or in between) please don't hesitate to contact me at <a href="mailto:qmacro+codeathome@gmail.com">qmacro+codeathome@gmail.com</a>.</p>
<p>It's super important for us to stay at home right now, but that doesn't mean that we can't have some fun learning together online. If you have kids at home and want to give them a break from school work at the kitchen table, and they fancy learning a bit of programming for beginners, then this Code at Home idea might be helpful.</p>
<p><strong>Who I am</strong></p>
<p>First, a bit about who I am.</p>
<image src="https://qmacro.org/images/DJA-head-small.jpg" align="right" />
<p>My name's DJ Adams and I live in Woodhouses, Failsworth, in Manchester. I am proud to work for SAP as a <a href="https://community.sap.com/influencers/?program=devadvocates">developer advocate</a>, and I feel supported by them in this endeavour. I have a short bio page here: <a href="https://qmacro.org/about">qmacro.org/about</a>. I've been involved with teaching kids to code for a good while now, and you can read more about that <a href="#moreinfo">down below</a>.</p>
<p><strong>The idea</strong></p>
<p>The idea is that school children who are stuck at home can take part in some coding for beginners, by connecting to YouTube and joining a &quot;Code at Home&quot; live stream that I'll broadcast on a regular basis at a fixed time in the day, for an hour. I don't have this all planned out, I'm just going to start it and see how it goes and would welcome input from anyone. What I do know is that I want it to be approachable and for beginners, where the age range is around 11 and up.</p>
<p><img src="/images/2020/03/codeathome.png" alt="Code at Home"></p>
<p>We'll be learning basic programming together using the most popular language out there (by some measurements) - JavaScript, and we'll be starting off by using some simple problems from the <a href="https://projecteuler.net/">Project Euler</a> website. Here's <a href="https://projecteuler.net/problem=1">problem number 1</a>, titled &quot;Multiples of 3 and 5&quot;, to give you an idea:</p>
<p><em>If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23. Find the sum of all the multiples of 3 or 5 below 1000.</em></p>
<p>The plan is that we'll use each hour to solve little problems like this, by writing code in JavaScript.</p>
<p>Here are some questions and answers that hopefully will tell you what you need to know.</p>
<p><strong>What's required?</strong></p>
<p>To connect and join in, you'll need:</p>
<ul>
<li>An Internet connection so that you can connect to and watch things on YouTube</li>
<li>A laptop or desktop, it doesn't matter whether it's a MacBook, a Windows machine or anything else</li>
<li>On that laptop or desktop you need a web browser, like Chrome. You don't need anything else specific to programming</li>
</ul>
<p>If you want to enable your kids join in and type along during the live stream, and want to use the same setup as I'll be showing, sign up to the following two websites:</p>
<ul>
<li><a href="https://projecteuler.net">Project Euler</a> - it's not completely necessary, but if you sign up then you can enter your own answers to the problems and see your progress</li>
<li><a href="https://repl.it">repl.it</a> - this is a really nice coding environment online, that you can access and use from your web browser, and it's the one I will be using in the live stream sessions</li>
</ul>
<p>Of course, if all you want to do is watch, that's fine and then you don't need anything other than your web browser. But it's fun to type the code in yourself on your own computer too and see the results.</p>
<p><strong>How do we follow the schedule and get reminders?</strong></p>
<p>I'll be broadcasting these Code at Home live streams on YouTube, on my channel at <a href="https://youtube.com/djadams-qmacro">youtube.com/djadams-qmacro</a>, so the simplest way is to head over to the channel, subscribe, and there you'll be able to see the upcoming Code at Home live stream episodes.</p>
<p>If you miss an actual live stream, don't worry, because they're all automatically recorded and made available on YouTube.</p>
<p><strong>When and how often is this happening?</strong></p>
<p>I'll start out by doing this regularly from 15:30 to 16:30 (UK time). This is so that any school work at home can be completed and out of the way during the day first.</p>
<p>I'll do the first one this coming <strong>Friday 27 March</strong> - and have set up the live stream ready on <a href="https://youtube.com/djadams-qmacro">my YouTube channel</a>, so you can set a reminder for it.</p>
<p><strong>What will it be like?</strong></p>
<p>On the live streams I'll be sharing my screen, showing the problem we're looking at solving, and showing what I'm typing in the <a href="https://repl.it">repl.it</a> website. There'll also be a little &quot;picture-in-picture&quot; of me on the camera. To get a rough idea, here's a still from last Friday's episode of another (more technical) live stream series that I run (called &quot;<a href="https://bit.ly/handsonsapdev">Hands-on SAP dev with qmacro</a>&quot;, which is for the SAP development and technical community):</p>
<p><img src="/images/2020/03/sapdev.png" alt="still from Hands-on SAP dev"></p>
<p>I definitely encourage you parents to join too if you can, so you can satisfy yourself that this is something that might help. Perhaps you can help with the setup too.</p>
<p><a name="moreinfo"></a>
<strong>More information on me</strong></p>
<p>I used to <a href="https://qmacro.org/2012/12/05/codeclub-and-becoming-a-stem-ambassador/">run a CodeClub</a> at the Woodhouses Village School, I have been a volunteer at <a href="https://mcrcoderdojo.org.uk/">Manchester CoderDojo</a> at MadLab and also at the Sharp Project in Newton Heath.</p>
<p>Here's a pic of me <a href="https://mcrcoderdojo.org.uk/underwater-scratch/">giving a Scratch session</a> at Manchester CoderDojo:</p>
<p><img src="/images/2020/03/underwaterscratch.jpg" alt="Underwater Scratch"></p>
<p>I'm a STEM Ambassador who has given sessions at schools including <a href="http://www.xaverian.ac.uk/computer-science-with-dj-adams/">Xaverian Sixth Form College</a>, I've given a session at TEDx Oldham on <a href="https://www.youtube.com/watch?v=-gvOCaExeK0">Our Computational Future</a> (making the argument for teaching our kids to code).</p>
<p>I've also helped out as a mentor at MadLab in Manchester during the <a href="https://getcodingkids.com/young-rewired-state/">Young Rewired State</a> (YRS) events. Here's a still of me from <a href="https://vimeo.com/75229099">the video about our activities for YRS 2013</a>:</p>
<p><a href="https:/vimeo.com/75229099"><img src="/images/2020/03/yrs.png" alt="still from YRS 2013 video"></a></p>
<p><strong>OK, what's the next step?</strong></p>
<p>Head on over to the channel on YouTube, get set up for the first one and be ready to connect to the live stream this coming Friday 27 March. Here's the YouTube link for that first live stream episode: <a href="https://youtu.be/X7gtbWiHTBY">https://youtu.be/X7gtbWiHTBY</a>.</p>
<p>If you have any questions, please reach out to me on Twitter (my handle is <a href="https://twitter.com/qmacro">@qmacro</a>) where I'd be more than happy to try and answer them.</p>
<p>Also, bookmark this blog post to be able to come back to it at a later date, in case there are updates I have added, with extra information, a change in schedule, things like that.</p>
<p>Please also wish me luck - while I've taught kids to code in many contexts, and I've live streamed in my professional life, I've never combined the two. I want this to be helpful in these trying times, and for that I will need your help too.Thanks!</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Starting out with Raspberry Pi experiments</title>
      <link href="https://qmacro.org/blog/posts/2020/03/22/starting-out-with-raspberry-pi-experiments/"/>
      <updated>2020-03-22T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2020/03/22/starting-out-with-raspberry-pi-experiments/</id>
      <content type="html">
        <![CDATA[
      <p><em>This post provides some background to why I've started to experiment with Raspberry Pis, and to list the hardware components that I bought and set up with my son Joseph over the Christmas holidays.</em></p>
<p>This is a post in the &quot;<a href="/blog/posts/2020/03/22/brambleweeny-cluster-experiments/">Brambleweeny Cluster Experiments</a>&quot; series of blog posts, which accompanies the <a href="https://www.youtube.com/playlist?list=PLfctWmgNyOIf9rXaZp9RSM2YVxAPGGthe">YouTube live stream recording playlist</a> of the same name.</p>
<p>Next post in this series: <a href="/blog/posts/2020/03/22/preparing-the-os-image/">Preparing the OS image</a></p>
<p>I've been skirting around the edges of experimentation with Raspberry Pis, to learn about clustering and containerisation using such technologies as Docker and Kubernetes. The topic area is fascinating in and of itself, but I think it's an important collection of subjects that one should know about in the SAP tech world too, given the cloud direction we're taking and how resources, services and applications are managed there.</p>
<p>I haven't gone too deep yet, having paused the project over the first couple of months of 2020 - I think one of the things holding me back was that I had stumbled my way through things at the start and wanted to hold off going further before I'd understood things a little more.</p>
<p>Here's a photo of the cluster that we built.</p>
<p><img src="/images/2020/03/picluster.png" alt="The cluster of Pis"></p>
<p>I know that writing about my activities helps my understanding, and so I thought I'd set out to write some posts about what I'm doing. As a bonus, they might help you too.</p>
<p>I've been learning a lot from two folks in particular, both of whom I came across, independently, from recordings of talks I saw them give.</p>
<img align="right" src="/content/images/2020/03/jeff.jpeg" />
<p><a href="https://jeffgeerling.com">Jeff Geerling</a> gave a talk at DrupalCon in 2019 called <a href="https://www.jeffgeerling.com/blog/2019/everything-i-know-about-kubernetes-i-learned-cluster-raspberry-pis">Everything I know about Kubernetes I learned from a cluster of Raspberry Pis</a>, which inspired me to put together my own cluster of Raspberry Pis. Clusters of Raspberry Pis are called brambles, which I think is a nice touch. Jeff named his cluster a Dramble, owing to the use of Drupal on it, and has some great resources at <a href="https://www.pidramble.com/">pidramble.com</a>. Moreover, I've been learning about Ansible from Jeff too, generally but also specifically for setting up the Pis. I even bought his book <a href="https://www.jeffgeerling.com/project/ansible-kubernetes">Ansible for Kubernetes</a> which I can definitely recommend.</p>
<p>Jeff documented his hardware setup over on the PiDramble site, and in particular I went for a version of his <a href="https://www.pidramble.com/wiki/hardware/pis">2019 Edition</a> which was to use power-over-ethernet (PoE) rather than running individual power cables to each Pi.</p>
<img align="right" src="/content/images/2020/03/alex.jpeg" />
<p><a href="https://www.alexellis.io/">Alex Ellis</a> has been doing some fascinating work in this space and sharing a ton of stuff on Kubernetes, serverless and in particular on <a href="https://www.openfaas.com/">OpenFaaS</a> which he set up and runs as an open project. He's also a prolific writer and sharer, and I recommend you bookmark a few of his <a href="https://blog.alexellis.io/">articles</a> which are rich in content and inspiration. I saw a recording of a talk he gave with <a href="https://www.hanselman.com/">Scott Hanselman</a> at NDC London in 2018: <a href="https://www.youtube.com/watch?v=ZyTLMnzehyU">Building a Raspberry Pi Kubernetes Cluster and running .NET Core</a>, which is definitely worth a watch.</p>
<p>To set my cluster up, here's what I ended up buying:</p>
<ul>
<li><a href="https://shop.pimoroni.com/products/raspberry-pi-4?variant=29157087445075">Raspberry Pi 4 (4GB RAM version)</a> x 4</li>
<li><a href="https://shop.pimoroni.com/products/raspberry-pi-poe-hat">Raspberry Pi PoE HAT</a> x 4</li>
<li><a href="https://www.amazon.co.uk/gp/product/B06XFSZGCC/">Samsung EVO Plus 32GB microSDHC memory card with adapter</a> x 4</li>
<li>Short (25cm) CAT6 Ethernet cables x 4</li>
<li><a href="https://www.amazon.co.uk/gp/product/B07TLSVTQP">Techson 4 Layers Clear Acrylic Rack Case</a></li>
<li><a href="https://www.amazon.co.uk/gp/product/B072BDGQR8/">NETGEAR 5-Port Gigabit Ethernet PoE Switch</a></li>
</ul>
<p>There are plenty of cases and mounting possibilities; just make sure, if you go for something different, that there's room for the PoE HAT mounted on top of each of the Pis.</p>
<p>I'm pleased with the result as there's a lot less cabling to deal with - it's just a single ethernet cable from the switch to each Pi, an ethernet cable from the switch to the main network, plus the power supply and cable to the switch, and that's it.</p>
<p>You can see this in the photo I took yesterday, which also shows an original Raspberry Pi Model B that I used as a console for various things.</p>
<p><img src="/images/2020/03/picollection.png" alt="Pi collection"></p>
<p>The setup is compact and I can keep it on a shelf behind my main desk. I'm somewhat averse to fan noise, which does mean that I don't run the cluster all the time, as there are fans on the PoE HATs that come on now and again. But the lights are pretty!</p>
<p>The next post I want to write is about how I set up the Pis ready for the cluster experiments, and what I learned. Until then, you might want to take a look at the recording of a live stream from earlier this month where I just went ahead and followed Alex's blog post <a href="https://medium.com/@alexellisuk/walk-through-install-kubernetes-to-your-raspberry-pi-in-15-minutes-84a8492dc95a">Walk-through — install Kubernetes to your Raspberry Pi in 15 minutes</a>. The key takeaway for me was that it was very easy.</p>
<p>The live stream was the first in what may turn out to be a series of cluster experiment live streams, so I've put the video into a playlist to help you find them.</p>
<p>The playlist is called <a href="https://www.youtube.com/playlist?list=PLfctWmgNyOIf9rXaZp9RSM2YVxAPGGthe">Brambleweeny Cluster Experiments</a>, where the name &quot;Brambleweeny&quot; is a conflation of the &quot;Bramble&quot; name for a Pi cluster, and the name of a computer in the Hitch Hiker's Guide To The Galaxy, the &quot;<a href="https://hitchhikers.fandom.com/wiki/Bambleweeny_57_Submeson_Brain">Bambleweeny 57 Submeson Brain</a>&quot;.</p>
<p><a href="https:/www.youtube.com/watch?v=ZiR3QEfBivk&amp;list=PLfctWmgNyOIf9rXaZp9RSM2YVxAPGGthe"><img src="/images/2020/03/video.png" alt="screenshot from live stream recording"></a></p>
<p>Until next time, happy clustering!</p>
<p>Next post in this series: <a href="/blog/posts/2020/03/22/preparing-the-os-image/">Preparing the OS image</a></p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Preparing the OS image</title>
      <link href="https://qmacro.org/blog/posts/2020/03/22/preparing-the-os-image/"/>
      <updated>2020-03-22T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2020/03/22/preparing-the-os-image/</id>
      <content type="html">
        <![CDATA[
      <p><em>This post describes how I prepared the base OS image for each of the Raspberry Pis in my &quot;Brambleweeny&quot; cluster.</em></p>
<p>This is a post in the &quot;<a href="/blog/posts/2020/03/22/brambleweeny-cluster-experiments/">Brambleweeny Cluster Experiments</a>&quot; series of blog posts, which accompanies the <a href="https://www.youtube.com/playlist?list=PLfctWmgNyOIf9rXaZp9RSM2YVxAPGGthe">YouTube live stream recording playlist</a> of the same name. The video linked here is the one that accompanies this blog post.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/IY5ZNZDI-EQ" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
<p>Previous post in this series: <a href="/blog/posts/2020/03/22/starting-out-with-raspberry-pi-experiments/">Starting out with Raspberry Pi experiments</a><br>
Next post in this series: <a href="/blog/posts/2020/03/22/finding-the-pis-on-the-network/">Finding the Pis on the network</a></p>
<blockquote>
<p>This post has been updated to reflect the new name of the OS -- Raspberry Pi OS -- which changed (from Raspbian) around May 2020.</p>
</blockquote>
<p>There are many ways to prepare base OS images for your Raspberry Pi computers. In the past I've used various devices and software to write bootable images to SD cards, but I've settled on using <a href="https://www.balena.io/etcher/">balena Etcher</a> that I read about in Alex Ellis's <a href="https://medium.com/@alexellisuk/walk-through-install-kubernetes-to-your-raspberry-pi-in-15-minutes-84a8492dc95a">Walk-through — install Kubernetes to your Raspberry Pi in 15 minutes</a>.</p>
<p>The Pis in the cluster will be run headless (the only cable running to each of them will be an Ethernet cable). This has a couple of implications for us at this stage, which are (a) there's no point installing graphical tools or a full desktop, and (b) we'll be using remote access only.</p>
<h2>No GUI</h2>
<p>There's no point in installing a graphical user interface (GUI) or windowing system on the Pis. That said, of course, with the power of X Windows we can have remote GUI windows but that's another story and a path we don't want to take for now.</p>
<p>There are different operating systems available for the Raspberry Pi, and at the time of this edit, <a href="https://www.raspberrypi.org/downloads/raspberry-pi-os/">Raspberry Pi OS</a> (previously called Raspbian), is a Linux OS based on Debian Linux (currently Buster). Here, the &quot;Lite&quot; image, that comes without GUI software or a windowing system, is appropriate. This is convenient as the image is a lot smaller in size, too.</p>
<p><img src="/images/2020/03/os-image.png" alt="Raspberry Pi OS (32-bit) Lite"></p>
<h2>Remote access</h2>
<p>To access the headless Pis remotely, we'll be using Secure Shell (SSH). There's a bit of a chicken-and-egg problem though, in that we need to be able to configure the Pis to allow remote access via SSH, before we can make the connection. For that we'd need a keyboard and screen, to be able to log on, install and set up the SSH service.</p>
<p>However, headless use of Raspberry Pi computers is so common that there's a nice way to solve this dilemma, and it's described in the official documentation, in a section on <a href="https://www.raspberrypi.org/documentation/configuration/boot_folder.md">the boot folder</a>. Basically, the OS image that is to be written to the SD card for installation on the Pis has a partition named <code>boot</code>. If you stick an SD card with a Linux image like Raspian Buster on it into your desktop computer or laptop, and automatic mounting is enabled, you'll see this boot partition mounted, and you can have a look inside.</p>
<p>If you place a file called <code>ssh</code> in this boot partition, then when the image is inserted into a Pi and the Pi is booted, SSH will be enabled automatically and set up appropriately. Nice!</p>
<h2>Preparing the image</h2>
<p>Most of the articles on the preparation of SD cards for Pis involve multiple steps: first, burn the OS image, then eject and re-insert the SD card to have the <code>boot</code> partition from that new image automatically mounted, then create the <code>ssh</code> file in that partition, and finally unmount the partition. This is fine for the occasional SD card preparation, but when preparing SD cards for an entire cluster, this can get tedious.</p>
<p>So I decided to embrace one of the <a href="http://threevirtues.com/">three virtues</a> of a programmer, namely laziness.</p>
<p>After downloading the Raspbian Buster Lite image, I unzipped the archive to reveal the actual image file, which I then mounted. In the mounted partition, I added the <code>ssh</code> file, before unmounting it again. I then zipped the now-SSH-enabled image file up again, ready for writing to the SD cards.</p>
<p>On my macOS machine (which is one of the few devices I have that has an SD card slot), I unzipped the archive like this:</p>
<pre class="language-shell"><code class="language-shell">-<span class="token operator">></span> <span class="token function">unzip</span> <span class="token number">2020</span>-05-27-raspios-buster-lite-armhf.zip<br>Archive:  <span class="token number">2020</span>-05-27-raspios-buster-lite-armhf.zip<br>  inflating: <span class="token number">2020</span>-05-27-raspios-buster-lite-armhf.img</code></pre>
<p>Then I used the DiskImageMounter utility <code>hdiutil</code> to mount the <code>.img</code> image file (noting also that the <code>boot</code> partition is only one of two partitions on the image - the other, of type &quot;Linux&quot;, being the eventual root partition):</p>
<pre class="language-shell"><code class="language-shell">-<span class="token operator">></span> hdiutil <span class="token function">mount</span> <span class="token number">2020</span>-05-27-raspios-buster-lite-armhf.img<br>/dev/disk3              FDisk_partition_scheme<br>/dev/disk3s1            Windows_FAT_32                  /Volumes/boot<br>/dev/disk3s2            Linux</code></pre>
<p>The <code>boot</code> partition was made available at <code>/Volumes/boot</code>, as we can see from what <code>df</code> tells us:</p>
<pre><code>-&gt; df | grep disk3
/dev/disk3s1  516190   104290   411900   21%   0    0  100%  /Volumes/boot
</code></pre>
<p>I could then add an empty <code>ssh</code> file to the filesystem on that partition:</p>
<pre class="language-shell"><code class="language-shell">-<span class="token operator">></span> <span class="token function">touch</span> /Volumes/boot/ssh</code></pre>
<h2>WiFi connection</h2>
<p>If you'd also like your Raspberry Pi to connect to your WiFi network when it boots (which will often be the case, even for headless mode), then at this stage you can also add another file, and this time, it's not an empty file like the <code>ssh</code> one, but one with configuration so that the Pi can connect to and authenticate with your WiFi network.</p>
<p>If you want to do that, create a file in the same boot partition as you created the <code>ssh</code> file, called <code>wpa_supplicant.conf</code>, and add the following configuration to it:</p>
<pre><code>ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev
update_config=1
country=&lt;Insert 2 letter ISO 3166-1 country code here&gt;

network={
 ssid=&quot;&lt;Name of your wireless LAN&gt;&quot;
 psk=&quot;&lt;Password for your wireless LAN&gt;&quot;
}
</code></pre>
<p>(This example is taken directly from this useful page: <a href="https://www.raspberrypi.org/documentation/configuration/wireless/headless.md">Setting up a Raspberry Pi headless</a>).</p>
<blockquote>
<p>If you're in the UK and wondering about the ISO-3166-1 country code that you need, it's &quot;GB&quot;.</p>
</blockquote>
<p>After that, I unmounted it:</p>
<pre class="language-shell"><code class="language-shell">-<span class="token operator">></span> <span class="token function">umount</span> /Volumes/boot</code></pre>
<p>And then created a new zip archive:</p>
<pre class="language-shell"><code class="language-shell">-<span class="token operator">></span> <span class="token function">zip</span> <span class="token number">2020</span>-05-27-raspios-buster-lite-armhf-ssh.zip <span class="token number">2020</span>-05-27-raspios-buster-lite-armhf.img<br>  adding: <span class="token number">2020</span>-05-27-raspios-buster-lite-armhf.img</code></pre>
<h2>Using the image</h2>
<p>I could then use this new image archive file <code>2020-05-27-raspios-buster-lite-armhf-ssh.zip</code> in my use of balena Etcher, creating all four SD cards ready for the Pis in the cluster. Result!</p>
<p><img src="/images/2020/03/etcher.png" alt="balena Etcher"></p>
<p>Balena Etcher is great, but if, like me, you're more of a terminal person, you can also perform this step from the command line.</p>
<p>Whether or not you use balena Etcher or the command line, it's at this stage of course that you insert the SD card.</p>
<p>The steps are described well in <a href="https://www.raspberrypi.org/documentation/installation/installing-images/mac.md">Copying an operating system image to an SD card using Mac OS</a> so here's a precis:</p>
<pre><code>-&gt; diskutil list
/dev/disk0 (internal, physical):
   #:                       TYPE NAME                    SIZE       IDENTIFIER
   0:      GUID_partition_scheme                        *1.0 TB     disk0
   1:                        EFI EFI                     314.6 MB   disk0s1
   2:                 Apple_APFS Container disk1         1.0 TB     disk0s2

[...]

/dev/disk4 (external, physical):
   #:                       TYPE NAME                    SIZE       IDENTIFIER
   0:     FDisk_partition_scheme                        *31.9 GB    disk4
   1:             Windows_FAT_32 boot                    268.4 MB   disk4s1
   2:                      Linux                         31.6 GB    disk4s2

-&gt; sudo diskutil unmountDisk /dev/disk4
Password: ...
Unmount of all volumes on disk4 was successful
-&gt; sudo dd bs=1m if=./2020-05-27-raspios-buster-lite-armhf.img of=/dev/rdisk4; sync
1768+0 records in
1768+0 records out
1853882368 bytes transferred in 122.702619 secs (15108743 bytes/sec)
-&gt; sudo diskutil eject /dev/rdisk5
Disk /dev/rdisk5 ejected
</code></pre>
<h2>A note on security</h2>
<p>You may be wondering why there's no Raspbian image available that already contains the <code>ssh</code> file. That's because it would be a security risk; in other words, you have to explicitly enable SSH through this route if you want it; otherwise, the Pis stay locked down. That's the right approach.</p>
<h2>Booting and connecting</h2>
<p>After inserting the SD cards into the Raspberry Pis, and connecting up the Ethernet cables to power them up and have them boot the images for the first time, we can see that this SSH configuration action was successful:</p>
<pre><code>-&gt; ssh 192.168.86.53
The authenticity of host '192.168.86.53 (192.168.86.53)' can't be established.
ECDSA key fingerprint is SHA256:jFgPSwjEQsCSUx+nJcZ6ub9EhoGC1I1vSX5uSvVc1YE.
Are you sure you want to continue connecting (yes/no)?
</code></pre>
<p>In the next post, we'll find out how I discovered the IP address(es) to use to connect, but for now, this is a great start - the SSH service responded to my request to connect (the &quot;authenticity&quot; message is just my machine saying &quot;hey, I don't recognise this remote host - are you sure you want to proceed?&quot;) - we're all ready to start setting up our Pis for some clustering goodness!</p>
<p>Next post in this series: <a href="/blog/posts/2020/03/22/finding-the-pis-on-the-network/">Finding the Pis on the network</a></p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Finding the Pis on the network</title>
      <link href="https://qmacro.org/blog/posts/2020/03/22/finding-the-pis-on-the-network/"/>
      <updated>2020-03-22T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2020/03/22/finding-the-pis-on-the-network/</id>
      <content type="html">
        <![CDATA[
      <p><em>Now that we have our Pis booted and up and running on the network, we need to find them to configure them further.</em></p>
<p>This is a post in the &quot;<a href="/blog/posts/2020/03/22/brambleweeny-cluster-experiments/">Brambleweeny Cluster Experiments</a>&quot; series of blog posts, which accompanies the <a href="https://www.youtube.com/playlist?list=PLfctWmgNyOIf9rXaZp9RSM2YVxAPGGthe">YouTube live stream recording playlist</a> of the same name. The video linked here is the one that accompanies this blog post.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/hx7DB7Iqslk" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
<p>Previous post in this series: <a href="/blog/posts/2020/03/22/preparing-the-os-image/">Preparing the OS image</a><br>
Next post in this series: <a href="/blog/posts/2020/04/05/initial-pi-configuration-via-ansible/">Initial Pi configuration via Ansible</a></p>
<p>Having booted the Pis in the cluster using the <a href="/blog/posts/2020/03/22/preparing-the-os-image/">OS image prepared earlier</a>, we now need to find them so that we can continue with the setup.</p>
<p>What does that mean? Well, the Pis will have requested IP addresses via DHCP. In my case, I run DHCP via my Google Wifi setup, and have a range set up for DHCP leases. While I can guess what the IP addresses might be, it's not scientific. I could look at the Google Wifi app on my phone, and go through manually searching for the devices that called themselves something that includes the string &quot;raspberrypi&quot;, then looking at the details to reveal the IP addresses. But that sounds too much hard work, and not something I'd learn from.</p>
<p><img src="/images/2020/03/wifiapp.png" alt="Google Wifi app"></p>
<p><strong>Using nmap</strong></p>
<p>I could use the <code>nmap</code> command that Alex <a href="https://medium.com/@alexellisuk/walk-through-install-kubernetes-to-your-raspberry-pi-in-15-minutes-84a8492dc95a">uses</a>, which has a wealth of possibilities. If all I wanted to do was to find the IP addresses, this would be what I'd want to use, specifying the <code>-sn</code> option (which means &quot;don't do a port scan&quot;, previously the option was <code>-sP</code>) for my home network (192.168.86.0/24), which would give results that look like this:</p>
<pre class="language-shell"><code class="language-shell">-<span class="token operator">></span> nmap <span class="token parameter variable">-sn</span> <span class="token number">192.168</span>.86.0/24<br>Starting Nmap <span class="token number">7.70</span> <span class="token punctuation">(</span> https://nmap.org <span class="token punctuation">)</span> at <span class="token number">2020</span>-03-22 <span class="token number">17</span>:08 GMT<br><span class="token punctuation">[</span><span class="token punctuation">..</span>.<span class="token punctuation">]</span><br>Nmap scan report <span class="token keyword">for</span> chromecast-audio.lan <span class="token punctuation">(</span><span class="token number">192.168</span>.86.43<span class="token punctuation">)</span><br>Host is up <span class="token punctuation">(</span><span class="token number">0</span>.037s latency<span class="token punctuation">)</span>.<br>Nmap scan report <span class="token keyword">for</span> amazon-517762033.lan <span class="token punctuation">(</span><span class="token number">192.168</span>.86.47<span class="token punctuation">)</span><br>Host is up <span class="token punctuation">(</span><span class="token number">0</span>.10s latency<span class="token punctuation">)</span>.<br>Nmap scan report <span class="token keyword">for</span> pimodelb.lan <span class="token punctuation">(</span><span class="token number">192.168</span>.86.49<span class="token punctuation">)</span><br>Host is up <span class="token punctuation">(</span><span class="token number">0</span>.0022s latency<span class="token punctuation">)</span>.<br>Nmap scan report <span class="token keyword">for</span> <span class="token number">192.168</span>.86.15<br>Host is up <span class="token punctuation">(</span><span class="token number">0</span>.026s latency<span class="token punctuation">)</span>.<br>Nmap scan report <span class="token keyword">for</span> raspberrypi.lan <span class="token punctuation">(</span><span class="token number">192.168</span>.86.54<span class="token punctuation">)</span><br>Host is up <span class="token punctuation">(</span><span class="token number">0</span>.0039s latency<span class="token punctuation">)</span>.<br>Nmap scan report <span class="token keyword">for</span> <span class="token number">192.168</span>.86.47<br>Host is up <span class="token punctuation">(</span><span class="token number">0</span>.0033s latency<span class="token punctuation">)</span>.<br>Nmap scan report <span class="token keyword">for</span> <span class="token number">192.168</span>.86.125<br>Host is up <span class="token punctuation">(</span><span class="token number">0</span>.0023s latency<span class="token punctuation">)</span>.<br><span class="token punctuation">[</span><span class="token punctuation">..</span>.<span class="token punctuation">]</span><br>Nmap done: <span class="token number">256</span> IP addresses <span class="token punctuation">(</span><span class="token number">28</span> hosts up<span class="token punctuation">)</span> scanned <span class="token keyword">in</span> <span class="token number">2.38</span> seconds<br>-<span class="token operator">></span></code></pre>
<p>If you're wondering about the way the network is written, i.e. 192.168.86.0/24, here's how that works. An IP (v4) address is a dotted quad number, i.e. four single byte values (range 0-255) that specify a combination of network number and host number. The number after the slash (24 in this case) tells you how many bits wide the mask for the network number is, with the remaining bits being the host number. Bearing in mind that the resolution of four bytes gives a total address space of 32 bits (4 x 8), 24 signifies that the first three numbers (192.168.86) represent the network number, and the fourth represents the host number(s).</p>
<p>This is how I see 192.168.86.0/24 in my mind:</p>
<pre><code>     192      168       86        0 decimal
11000000 10101000 01010110 00000000 binary
11111111 11111111 11111111 00000000 network mask (24 bits)
|                        | |      |
+------------------------+ +------+
            |                 |
          network            host
</code></pre>
<p>Given that I can work out what IP addresses might already be allocated on my network, I could eventually reach the conclusion that the following IP addresses were the four new Pis in the cluster: 192.168.86.53, 192.168.86.54, 192.168.86.55 and 192.168.86.56.</p>
<p>But that feels a little fuzzy to me.</p>
<p>Moreover, I'm learning about <a href="https://www.ansible.com">Ansible</a> from Jeff Geerling, as I mentioned in <a href="/blog/posts/2020/03/22/starting-out-with-raspberry-pi-experiments/">Starting out with Raspberry Pi experiments</a>, and want to use some of the Ansible goodness for the setup of the Pis, as explained in his wiki page <a href="http://www.pidramble.com/wiki/setup/network">Network the Raspberry Pis</a>. Jeff has a nice <a href="https://github.com/geerlingguy/raspberry-pi-dramble/tree/master/setup/networking">networking setup</a> section in his GitHub repo <a href="https://github.com/geerlingguy/raspberry-pi-dramble">geerlingguy/raspberry-pi-dramble</a> which I recommend you have a look at. In this networking setup he has a playbook (a series of tasks for Ansible to carry out on a set of remote hosts) <a href="https://github.com/geerlingguy/raspberry-pi-dramble/blob/master/setup/networking/main.yml"><code>main.yml</code></a> that sets up networking, including allocating specific IP addresses to specific hosts.</p>
<p>How are these hosts identified and defined? In a <code>vars.yml</code> file, an example of which is <a href="https://github.com/geerlingguy/raspberry-pi-dramble/blob/master/setup/networking/example.vars.yml">provided</a> in that networking setup section. It contains a mapping of MAC addresses to hostname and IP address pairs, which is exactly what I want. In other words, I want to give each of the Pis in the cluster a hostname, and a specific IP address that will persist and that I can remember.</p>
<p>I'm going to jump ahead and show you what's in the <code>vars.yml</code> file for my Pi cluster setup here:</p>
<pre class="language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><br><span class="token comment"># Mapping of what hardware MAC addresses should be configured with specific IPs.</span><br><span class="token key atrule">mac_address_mapping</span><span class="token punctuation">:</span><br><br>  <span class="token key atrule">"dc:a6:32:60:60:95"</span><span class="token punctuation">:</span><br>    <span class="token key atrule">name</span><span class="token punctuation">:</span> brambleweeny1.lan<br>    <span class="token key atrule">ip</span><span class="token punctuation">:</span> <span class="token string">"192.168.86.12"</span><br>  <span class="token key atrule">"dc:a6:32:60:60:77"</span><span class="token punctuation">:</span><br>    <span class="token key atrule">name</span><span class="token punctuation">:</span> brambleweeny2.lan<br>    <span class="token key atrule">ip</span><span class="token punctuation">:</span> <span class="token string">"192.168.86.13"</span><br>  <span class="token key atrule">"dc:a6:32:60:60:44"</span><span class="token punctuation">:</span><br>    <span class="token key atrule">name</span><span class="token punctuation">:</span> brambleweeny3.lan<br>    <span class="token key atrule">ip</span><span class="token punctuation">:</span> <span class="token string">"192.168.86.14"</span><br>  <span class="token key atrule">"dc:a6:32:60:60:e3"</span><span class="token punctuation">:</span><br>    <span class="token key atrule">name</span><span class="token punctuation">:</span> brambleweeny4.lan<br>    <span class="token key atrule">ip</span><span class="token punctuation">:</span> <span class="token string">"192.168.86.15"</span><br><br><span class="token comment"># Nameservers to use in resolv.conf.</span><br><span class="token key atrule">dns_nameservers</span><span class="token punctuation">:</span><br>  <span class="token punctuation">-</span> <span class="token string">"192.168.86.5"</span></code></pre>
<p>I want to give the four Pis host numbers in the range 12-15, and name them after the cluster name &quot;Brambleweeny&quot;. I also want to tell them to use a local DNS server at 192.168.86.5 for domain name resolution. This is a tiny <a href="https://thepihut.com/products/raspberry-pi-zero-w">Raspberry Pi Zero W</a> running the excellent <a href="https://pi-hole.net/">Pi-hole</a>.</p>
<p>But putting aside the IP addresses for a moment - how did I find out the MAC addresses?</p>
<p><strong>Using arp-scan</strong></p>
<p>Well it pleases me to say that I found them out using a bit of technology that dates back to the early 1980s, and relates directly to one of the fundamental and critical parts of the Internet protocol suite - the <a href="https://en.wikipedia.org/wiki/Address_Resolution_Protocol">Address Resolution Protocol</a> (ARP). Essentially, ARP provides a mapping between the link layer address of a network device (i.e. a MAC address in this case) and the internet layer address (i.e. the IP address in this case).</p>
<p>To work with ARP data there's a venerable program called <code>arp-scan</code> which is standard on real operating systems such as Linux. It's a system binary, which means it lives in <code>/usr/sbin</code> (&quot;sbin&quot; is short for &quot;system binaries&quot;) which means, more or less, that it's for root use only.</p>
<p>Running <code>arp-scan</code> on this network address 192.168.86.0/24 reveals almost exactly what we're looking for: not only the MAC addresses, but the IP addresses that are associated with them.</p>
<p>Here's what the output of running <code>arp-scan</code> on my network looks like (I've modified parts of the addresses for security reasons):</p>
<pre class="language-shell"><code class="language-shell">-<span class="token operator">></span> <span class="token function">sudo</span> arp-scan <span class="token number">192.168</span>.86.0/24<br>Interface: eth0, datalink type: EN10MB <span class="token punctuation">(</span>Ethernet<span class="token punctuation">)</span><br>Starting arp-scan <span class="token number">1.9</span>.5 with <span class="token number">256</span> hosts <span class="token punctuation">(</span>https://github.com/royhills/arp-scan<span class="token punctuation">)</span><br><span class="token number">192.168</span>.86.1    <span class="token number">70</span>:3a:cb:2e:c5:fb       <span class="token punctuation">(</span>Unknown<span class="token punctuation">)</span><br><span class="token number">192.168</span>.86.22   <span class="token number">70</span>:3a:cb:32:0a:38       <span class="token punctuation">(</span>Unknown<span class="token punctuation">)</span><br><span class="token number">192.168</span>.86.32   00:26:2d:18:d0:12       Wistron Neweb Corporation<br><span class="token number">192.168</span>.86.31   00:0e:58:68:59:33       Sonos, Inc.<br><span class="token number">192.168</span>.86.33   f0:72:ea:30:59:e3       <span class="token punctuation">(</span>Unknown<span class="token punctuation">)</span><br><span class="token number">192.168</span>.86.37   <span class="token number">64</span>:16:66:40:5f:c3       <span class="token punctuation">(</span>Unknown<span class="token punctuation">)</span><br><span class="token number">192.168</span>.86.36   6c:ad:f8:6c:5a:3d       AzureWave Technology Inc.<br><span class="token number">192.168</span>.86.39   <span class="token number">18</span>:b4:30:ec:11:2a       Nest Labs Inc.<br><span class="token number">192.168</span>.86.39   <span class="token number">18</span>:b4:30:ec:51:2a       Nest Labs Inc. <span class="token punctuation">(</span>DUP: <span class="token number">2</span><span class="token punctuation">)</span><br><span class="token number">192.168</span>.86.28   00:0e:58:8a:c6:92       Sonos, Inc.<br><span class="token number">192.168</span>.86.15   dc:a6:32:60:60:77       <span class="token punctuation">(</span>Unknown<span class="token punctuation">)</span><br><span class="token number">192.168</span>.86.47   dc:a6:32:60:60:95       <span class="token punctuation">(</span>Unknown<span class="token punctuation">)</span><br><span class="token number">192.168</span>.86.48   9c:32:ce:7e:15:a1       <span class="token punctuation">(</span>Unknown<span class="token punctuation">)</span><br><span class="token number">192.168</span>.86.158  dc:a6:32:60:60:44       <span class="token punctuation">(</span>Unknown<span class="token punctuation">)</span><br><span class="token number">192.168</span>.86.125  dc:a6:32:60:60:e3       <span class="token punctuation">(</span>Unknown<span class="token punctuation">)</span><br><span class="token number">192.168</span>.86.20   6c:56:97:64:1d:6f       <span class="token punctuation">(</span>Unknown<span class="token punctuation">)</span><br><span class="token number">192.168</span>.86.47   fc:65:de:08:1b:69       <span class="token punctuation">(</span>Unknown<span class="token punctuation">)</span><br><span class="token number">192.168</span>.86.44   f4:f5:d8:ed:13:fa       Google, Inc.<br><span class="token number">192.168</span>.86.43   <span class="token number">54</span>:60:09:eb:1a:dc       Google, Inc.<br><span class="token number">192.168</span>.86.21   a4:77:33:25:13:14       Google, Inc.<br><span class="token number">192.168</span>.86.187  5c:aa:fd:24:11:84       Sonos, Inc.<br><span class="token number">192.168</span>.86.24   3c:15:c2:b3:10:03       Apple, Inc.<br><span class="token number">192.168</span>.86.29   <span class="token number">20</span>:16:b9:c2:1d:f1       <span class="token punctuation">(</span>Unknown<span class="token punctuation">)</span><br><span class="token number">192.168</span>.86.250  5c:aa:fd:02:15:48       Sonos, Inc.<br><span class="token number">192.168</span>.86.26   <span class="token number">20</span>:df:b9:41:1d:24       <span class="token punctuation">(</span>Unknown<span class="token punctuation">)</span><br><span class="token number">192.168</span>.86.35   00:0e:58:f3:1e:6c       Sonos, Inc.<br><span class="token number">192.168</span>.86.40   1c:f2:9a:64:1c:22       <span class="token punctuation">(</span>Unknown<span class="token punctuation">)</span><br><br><span class="token number">29</span> packets received by filter, <span class="token number">0</span> packets dropped by kernel<br>Ending arp-scan <span class="token number">1.9</span>.5: <span class="token number">256</span> hosts scanned <span class="token keyword">in</span> <span class="token number">4.639</span> seconds <span class="token punctuation">(</span><span class="token number">55.18</span> hosts/sec<span class="token punctuation">)</span>. <span class="token number">27</span> responded<br>-<span class="token operator">></span></code></pre>
<p>Gosh that's nice, but how do I tell which are my new Raspberry Pis in the cluster?</p>
<p>Well, to answer that, we need to understand how MAC addresses are formed. Each address is a series of byte values, in hexadecimal. They're assigned to hardware devices, most commonly to network interfaces. In the case of the Pis, this is the RJ45 Ethernet port you can see in the top right of this picture of a Raspberry Pi 4:</p>
<p><img src="/images/2020/03/pi4.png" alt="Raspberry Pi 4"></p>
<p>Significantly, the first three bytes in a MAC address represent the hardware manufacturer, via a so-called Organisationally Unique Identifier (OUI). And if we look at the <a href="http://standards-oui.ieee.org/oui.txt">canonical list of OUIs</a> we see that there's an entry for the Raspberry Pi organisation thus:</p>
<pre><code>DC-A6-32   (hex)        Raspberry Pi Trading Ltd
DCA632     (base 16)    Raspberry Pi Trading Ltd
                        Maurice Wilkes Building, Cowley Road
                        Cambridge    CB4 0DS
                        GB
</code></pre>
<p>How convenient!</p>
<blockquote>
<p>Incidentally, the building in this address is named after one of the fathers of modern computing, <a href="https://en.wikipedia.org/wiki/Maurice_Wilkes">Maurice Wilkes</a>, who worked on one of the earliest stored-program computers EDSAC, and who also invented microprogramming, which was first described in Manchester in 1951.</p>
</blockquote>
<p>So all we have to do is reduce the output of <code>arp-scan</code> by filtering the output to only show devices manufactured by the Raspberry Pi organisation, which has the OUI DC-A6-32, or, as it's more commonly written, dc:a6:32:</p>
<pre class="language-shell"><code class="language-shell">-<span class="token operator">></span> <span class="token function">sudo</span> arp-scan <span class="token number">192.168</span>.86.0/24 <span class="token operator">|</span> <span class="token function">grep</span> dc:a6:32<br><span class="token number">192.168</span>.86.47   dc:a6:32:60:60:95       <span class="token punctuation">(</span>Unknown<span class="token punctuation">)</span><br><span class="token number">192.168</span>.86.15   dc:a6:32:60:60:77       <span class="token punctuation">(</span>Unknown<span class="token punctuation">)</span><br><span class="token number">192.168</span>.86.158  dc:a6:32:60:60:44       <span class="token punctuation">(</span>Unknown<span class="token punctuation">)</span><br><span class="token number">192.168</span>.86.125  dc:a6:32:60:60:e3       <span class="token punctuation">(</span>Unknown<span class="token punctuation">)</span><br>-<span class="token operator">></span></code></pre>
<p>Bingo!</p>
<p>DHCP leases had indeed been given out for hosts 47, 15, 158 and 125 in the 192.168.86.0/24 network, and there we have each associated MAC address too.</p>
<p>So in preparing for the networking setup, the MAC addresses went into the <code>vars.yml</code> file as shown earlier, with the <strong>to-be</strong> IP addresses.</p>
<p>Of course, we need to help Ansible find the Pis to make this configuration, and for that we need to specify a list of the <strong>existing</strong> IP addresses, which we now also have. Those go into the Ansible inventory, effectively a list of hosts in this simple case.</p>
<p>Based on the <a href="https://github.com/geerlingguy/raspberry-pi-dramble/blob/master/setup/networking/example.inventory"><code>example.inventory</code></a> in Jeff's repository, here's what we need for the setup in the case of our Brambleweeny cluster:</p>
<pre class="language-yml"><code class="language-yml"><span class="token punctuation">[</span>brambleweeny<span class="token punctuation">]</span><br>192.168.86.47<br>192.168.86.15<br>192.168.86.158<br>192.168.86.125<br><br><span class="token punctuation">[</span>brambleweeny<span class="token punctuation">:</span>vars<span class="token punctuation">]</span><br>ansible_ssh_user=pi</code></pre>
<p>I've changed the name of the group from &quot;Dramble&quot; to &quot;Brambleweeny&quot;, and of course adjusted the IP addresses to the as-is ones that exist right now. There's also a variable in this file, <code>ansible_ssh_user</code>, but we'll ignore that for now.</p>
<p>At this stage, we have found the Pis on the network, and gathered the appropriate information to supply to Ansible so that we can ask it to make the networking setup on each host, on our behalf.</p>
<p>We'll get to that in the next post. Until then, happy arping!</p>
<p>Next post in this series: <a href="/blog/posts/2020/04/05/initial-pi-configuration-via-ansible/">Initial Pi configuration via Ansible</a></p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Brambleweeny Cluster Experiments</title>
      <link href="https://qmacro.org/blog/posts/2020/03/22/brambleweeny-cluster-experiments/"/>
      <updated>2020-03-22T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2020/03/22/brambleweeny-cluster-experiments/</id>
      <content type="html">
        <![CDATA[
      <p><em>This is where the individual posts in the &quot;Brambleweeny Cluster Experiments&quot; series of blog posts are listed, in order.</em></p>
<p>I'm experimenting with a cluster of Raspberry Pi computers, and sharing that experimentation as I make my slow progress towards enlightenment.</p>
<p><img src="/images/2020/03/picluster.png" alt="The cluster"></p>
<p>That sharing comes in two forms: blog posts, which you'll find listed here, and live streams, which you can find over on my YouTube channel at <a href="https://youtube.com/djadams-qmacro">https://youtube.com/djadams-qmacro</a>. The channel's home page is where you'll see upcoming live streams, and the recordings are available in a playlist, also called <a href="https://www.youtube.com/playlist?list=PLfctWmgNyOIf9rXaZp9RSM2YVxAPGGthe">Brambleweeny Cluster Experiments</a>.</p>
<p>Here are the posts:</p>
<ol>
<li><a href="/blog/posts/2020/03/22/brambleweeny-cluster-experiments">Brambleweeny Cluster Experiments</a> (this post)</li>
<li><a href="/blog/posts/2020/03/22/starting-out-with-raspberry-pi-experiments">Starting out with Raspberry Pi experiments</a></li>
<li><a href="/blog/posts/2020/03/22/preparing-the-os-image">Preparing the OS image</a></li>
<li><a href="/blog/posts/2020/03/22/finding-the-pis-on-the-network">Finding the Pis on the network</a></li>
<li><a href="/blog/posts/2020/04/05/initial-pi-configuration-via-ansible">Initial Pi configuration via Ansible</a></li>
</ol>
<p>...</p>
<p>Share &amp; enjoy!</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>CAP is important because it&#39;s not important</title>
      <link href="https://qmacro.org/blog/posts/2019/11/06/cap-is-important-because-it&#39;s-not-important/"/>
      <updated>2019-11-06T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2019/11/06/cap-is-important-because-it&#39;s-not-important/</id>
      <content type="html">
        <![CDATA[
      <p>In this post, I consider what CAP really is, what it gives us, and why we should consider it a fundamental piece of the puzzle in the cloud context and beyond.</p>
<p>Update (08 Nov): This blog post is available in audio format as <a href="https://anchor.fm/tech-aloud/episodes/CAP-is-important-because-its-not-important---6-Nov-2019---DJ-Adams-e8rg7s">an episode</a> on the <a href="https://qmacro.org/2019/09/17/new-podcast-tech-aloud/">Tech Aloud podcast</a>. Also, I recorded a CodeTalk episode on this subject with <a href="https://people.sap.com/ian.thain">Ian Thain</a> – watch it here: <a href="https://www.youtube.com/watch?v=5ffTjFdjs8M">https://www.youtube.com/watch?v=5ffTjFdjs8M</a>.</p>
<p>If you read one technical article today*, make it the <a href="https://cap.cloud.sap/docs/about/">About CAP</a> page in the online documentation, which starts with the following overview:</p>
<blockquote>
<p>The &quot;SAP Cloud Application Programming Model&quot; is an open and opinionated, framework of languages, libraries, and tools for building enterprise-grade services and applications. It guides developers through proven best practices and a great wealth of out-of-the-box solutions to recurring tasks.</p>
</blockquote>
<p>Key for me here is that the design principles that are at CAP's core (open and opinionated, zero lock-in, non-intrusive and platform agnostic) and that have influenced what CAP is and what it can do for us, explain why it is fundamental.</p>
<p>*(If you don't have time to read it, it's also available as a podcast episode in the <a href="https://qmacro.org/2019/09/17/new-podcast-tech-aloud/">Tech Aloud podcast</a> here: <a href="https://anchor.fm/tech-aloud/episodes/SAP-Cloud-Application-Programming-Model-About-CAP---SAP---September-2019-e5f76p">SAP Cloud Application Programming Model (About CAP) – SAP – September 2019</a>.</p>
<h2>What CAP is for me</h2>
<p>CAP provides the <strong>substrate</strong> within or upon which actual services and applications can be designed and built, cloud-ready.</p>
<p>It is the fresh, fertile and well-watered <strong>soil</strong> in which we can grow our flowers and food.</p>
<p>It is the <strong>backbone</strong> which is the stable base that connects everything together, the <strong>trunk</strong> from which all branches can flourish.</p>
<p>To bring these metaphors a little closer to the subject at hand, CAP is like the combination of mores and spoken languages upon which society is built … or, in a narrower computing context, it's the programming language that we use to express our solutions.</p>
<p>What this suggests to me is that if we see CAP in this way, we should master enough of it to express ourselves, to start building services, to plant seeds and nurture them into blossom, to build upon and build with.</p>
<p>Just like we learn a language with which to express ourselves, whether that language is English, international sign language, or APL, we should make a point of learning what CAP is, how it works, what it can do for us, and how to embrace and wield the power that it gives us as developers.</p>
<h2>A means to an end</h2>
<p>CAP is not an end in itself, it is a means to other ends. And my goodness, in my experience, what a means it is!</p>
<p>It's hard now to remember the times when the effort to create a functioning read-write OData service was so great that proof-of-concept projects didn't even get off the ground. Now, literally with less than ten lines of declarative code you can spin up a fully formed CRUD+Q OData service, and what's more, adding custom handlers to augment the standard handlers is also only a few lines of code away.</p>
<p>Similarly, I had never really seriously attempted mocking a business service from the SAP API Business Hub before, as the effort was too great. Now with CAP it's a <a href="https://developers.sap.com/tutorials/cap-cloudsdk-1-mock-service.html">matter of minutes</a>.</p>
<p>It's hard to remember what it was like to explore how annotations actually drive Fiori elements, because of the complexity involved in establishing where to store and how to serve up annotations along with an existing OData service. With CAP you just add them to a file, using Notepad or similar, and you're done. The time between tweaking annotations and refreshing your Fiori elements app to see what those tweaks do is now measured in seconds (and yes, I do that, I'm just like you :-)).</p>
<p>I can't actually remember a time when I didn't have to think about specific persistence layers and machinery when prototyping a service, until CAP came along.</p>
<p>And the mental heavy lifting previously needed to consider how I might go about building a solution that involved persistence, built-in extensibility, enterprise messaging and more … well, as a regular developer with limited brain power, I'm now in a much better position to create solutions like that.</p>
<h2>Start smart</h2>
<p>With the building blocks such as the family of <a href="https://blogs.sap.com/2019/09/18/tech-aloud-podcast-an-introduction/#dsls">Domain Specific Languages</a>*, with the convention-over-configuration approach, with the first class support for <a href="https://qmacro.org/2019/04/18/brief-thoughts-on-the-2019-stack-overflow-developer-survey-results/#languages">today's most popular language</a>, CAP helps you start smart, start your development project at a level far higher up, far nearer the business domain, than you could have started previously.</p>
<p>You could say that this higher level starting point puts you closer to the cloud before you've even begun!</p>
<p>*(See the <a href="https://cap.cloud.sap/docs/cds/">CDS language reference documentation</a> to learn more about the CAP DSLs.)</p>
<p>So, my advice is – learn CAP, understand how to make use of the superpowers it gives you, and be mindful of its key role as a development substrate letting you focus on the business domain at hand.</p>
<p>And, in the nicest possible way, just as for me my knowledge of the English language and and my understanding of social rules and customs fades into unimportance when interacting with my fellow human beings, consider CAP as unimportant in the same way. Fundamental, something you should learn and be able to make full use of, but a means to an end.</p>
<p><a href="https://blogs.sap.com/2019/11/06/cap-is-important-because-its-not-important/">Originally published on SAP Community</a></p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Shell power and simplicity</title>
      <link href="https://qmacro.org/blog/posts/2019/10/23/shell-power-and-simplicity/"/>
      <updated>2019-10-23T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2019/10/23/shell-power-and-simplicity/</id>
      <content type="html">
        <![CDATA[
      <p>Sometimes we overlook the power of the shell, because the terminal context in which it's used is seen as outdated. That's far from the truth; in fact I think it would be a shame to lose sight of some fundamental and simple shell programming concepts which are as relevant, if not more, today, as they were ten years ago.</p>
<h2>The inspiration for this post</h2>
<p>Earlier this morning, on my travels, a <a href="https://twitter.com/david_ruizb/status/1186920793604796416">tweet</a> from <a href="https://twitter.com/david_ruizb">David Ruiz Badia</a> caught my eye:</p>
<p>&quot;<em>Artificial intelligence + code repository on git = Autocomplete models when coding by @timoelliott Experience Intelligent Summit Barcelona #Intelligententerprise #experiencemanagement #sapchampions @SAPSpain</em>&quot;</p>
<p>It wasn't the text or the main subject of the tweet, but the code on the slide that was shown in the accompanying picture:</p>
<p><img src="https://pbs.twimg.com/media/EHjKKl3WoAAtxzl?format=jpg&amp;name=medium" alt="The slide on the tweet, showing Ruby code to work out lines by file extension">.</p>
<p>Luckily the code on the slide is clear enough to read, so I won't reproduce it here.</p>
<h2>The challenge</h2>
<p>It's Ruby, and fairly simple code to sum up the total number of lines in files, by file type (extension), in a given directory.
So for example, assume you have the following files, each containing the indicated amount of lines:</p>
<pre><code>a.txt (3 lines)
b.txt (4 lines)
c.dat (1 line)
d.txt (2 lines)
e.dat (5 lines)
</code></pre>
<p>What you want this program to produce is something like this:</p>
<pre><code>dat -&gt; 6
txt -&gt; 9
</code></pre>
<p>Thinking of files and lines immediately switched my brain to shell mode, where one part of the shell philosophy (do one thing and do it well - also attributable to the Unix philosophy in general) gives us the <a href="https://linux.die.net/man/1/wc">wc</a> program, which produces word, line, character and byte counts for files (and that's about it).</p>
<p>Another part of the philosophy is &quot;small pieces loosely joined&quot;, which, in conjunction with the <a href="https://en.wikipedia.org/wiki/Pipeline_(Unix)">pipeline</a> concept, and combined with the wonderful simplicity of STDIN (standard input) and STDOUT (standard output), gives us the ridiculously useful ability to send the output of one command into the input of another.</p>
<p>This ability might seem somewhat familiar, particularly if you've been discovering the <a href="https://en.wikipedia.org/wiki/Fluent_interface">fluent interface</a> style of method chaining in API consumption, as recently shown in how the <a href="https://developers.sap.com/topics/cloud-sdk.html">SAP Cloud SDK</a> is used - here's an example from a tutorial &quot;<a href="https://developers.sap.com/tutorials/cap-cloudsdk-2-v2-adapter.html">Install an OData V2 Adapter</a>&quot; which is part of one of this year's SAP TechEd App Space missions &quot;S/4HANA Extensions with Cloud Application Programming Model&quot;:</p>
<pre class="language-javascript"><code class="language-javascript">BusinessPartnerAddress<br>        <span class="token punctuation">.</span><span class="token function">requestBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><br>        <span class="token punctuation">.</span><span class="token function">getAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><br>        <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><br>                BusinessPartnerAddress<span class="token punctuation">.</span><span class="token constant">BUSINESS_PARTNER</span><span class="token punctuation">,</span><br>                BusinessPartnerAddress<span class="token punctuation">.</span><span class="token constant">ADDRESS_ID</span><span class="token punctuation">,</span><br>                BusinessPartnerAddress<span class="token punctuation">.</span><span class="token constant">CITY_NAME</span><span class="token punctuation">,</span><br>        <span class="token punctuation">)</span><br>        <span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">url</span><span class="token operator">:</span><span class="token string">'http://localhost:3000/v2'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><br>        <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">xs</span> <span class="token operator">=></span> xs<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=></span> x<span class="token punctuation">.</span>cityName<span class="token punctuation">)</span><span class="token punctuation">)</span><br>        <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>console<span class="token punctuation">.</span>log<span class="token punctuation">)</span></code></pre>
<p>Anyway, I'm always happy for opportunities to practise my basic shell skills and Unix commands, so I thought I'd have a go at &quot;finishing the sentence&quot; in my mind, the one that had started with <code>wc</code>, and write a pipeline that would do the same thing as that lightly pedestrian Ruby code.</p>
<blockquote>
<p>I realise I don't have much context as to why the code is there or why it looks like it does - it relates to machine learning powered autocomplete features in code editors, so was likely something simple enough for the audience to understand but verbose enough to be of use as an example.</p>
</blockquote>
<h3>Getting the line counts</h3>
<p>Starting with <code>wc</code> on the files, using the <code>-l</code> switch to request lines, we get this:</p>
<pre class="language-shell"><code class="language-shell">→ <span class="token function">wc</span> <span class="token parameter variable">-l</span> *<br> <span class="token number">3</span> a.txt<br> <span class="token number">4</span> b.txt<br> <span class="token number">1</span> c.dat<br> <span class="token number">2</span> d.txt<br> <span class="token number">5</span> e.dat<br><span class="token number">15</span> total<br>→</code></pre>
<blockquote>
<p>There's nothing other than these 5 files in this directory, as you might have guessed.</p>
</blockquote>
<p>That's something we can definitely work with - we need to sum the numbers by file extension (<code>txt</code> or <code>dat</code> in this example).</p>
<h3>Stripping the extraneous info</h3>
<p>If we're to pass the output of <code>wc</code> directly into another program to do the summing, we may trip ourselves up because of this line at the end of the <code>wc</code> output:</p>
<pre><code>15 total
</code></pre>
<p>We don't want the value 15 from that total summary line to be included. So we use another program to strip that line out, and pipe <code>wc</code>'s output into that.</p>
<p>On <a href="https://en.wikipedia.org/wiki/GNU">GNU</a>-based Unix or Linux systems, we can use the <a href="https://en.wikipedia.org/wiki/Head_(Unix)">head</a> program to do that for us. <code>head</code> will display the first N lines of a file. The GNU version of <code>head</code> contains a flag <code>-n</code> that can take a negative number, to work backwards from the end of the file, so that we can do this:</p>
<pre class="language-shell"><code class="language-shell">→ <span class="token function">wc</span> <span class="token parameter variable">-l</span> * <span class="token operator">|</span> <span class="token function">head</span> <span class="token parameter variable">-n</span> <span class="token parameter variable">-1</span><br> <span class="token number">3</span> a.txt<br> <span class="token number">4</span> b.txt<br> <span class="token number">1</span> c.dat<br> <span class="token number">2</span> d.txt<br> <span class="token number">5</span> e.dat<br>→</code></pre>
<p>The nice thing about this approach is that we will always strip off just the last line.</p>
<p>Observe how the output of <code>wc</code> has been piped into the input of <code>head</code>. If you wanted to do this in a very inefficient but more or less equivalent way, using an intermediate file, you'd have to do this:</p>
<pre class="language-shell"><code class="language-shell">→ <span class="token function">wc</span> <span class="token parameter variable">-l</span> * <span class="token operator">></span> intermediatefile<br>→ <span class="token function">head</span> <span class="token parameter variable">-n</span> <span class="token parameter variable">-1</span> intermediatefile<br> <span class="token number">3</span> a.txt<br> <span class="token number">4</span> b.txt<br> <span class="token number">1</span> c.dat<br> <span class="token number">2</span> d.txt<br> <span class="token number">5</span> e.dat<br>→</code></pre>
<p>Here, the <code>&gt;</code> symbol is redirecting the STDOUT from <code>wc</code> to a file called <code>intermediatefile</code>, and the <code>head</code> program reads from STDIN, or, if a filename is specified as it is here, will read from that file.</p>
<p>On macOS, a decendant of BSD Unix, the GNU version of <code>head</code> isn't available, and so we cannot avail ourselves of the <code>-n -1</code> approach. Instead, we'd use the <a href="https://linux.die.net/man/1/grep">grep</a> command which in its basic form prints lines that match (or don't match) a pattern. We can use <code>grep</code>'s <code>-v</code> switch to negate it, i.e. to get it to print lines <em>not</em> matching the pattern, and specify &quot; total$&quot; as the pattern to match (the dollar sign at the end of the match string is a regular expression symbol that anchors the text &quot; total&quot; to the end of the line from a match perspective). While we do have to be careful not to have a file called <code>total</code>, it will do the job for us here:</p>
<pre class="language-shell"><code class="language-shell">→ <span class="token function">wc</span> <span class="token parameter variable">-l</span> * <span class="token operator">|</span> <span class="token function">grep</span> <span class="token parameter variable">-v</span> <span class="token string">' total$'</span><br> <span class="token number">3</span> a.txt<br> <span class="token number">4</span> b.txt<br> <span class="token number">1</span> c.dat<br> <span class="token number">2</span> d.txt<br> <span class="token number">5</span> e.dat<br>→</code></pre>
<p>Same result. Nice.</p>
<h3>Summing by extension</h3>
<p>Now we have some clean and predictable input to pass to another program. We'll use <code>awk</code> which is a very useful and powerful text processing tool, along with its sibling <code>sed</code>. The wonderful programming language Perl took inspiration from both <code>awk</code> and <code>sed</code> and other text processing tools, as it happens.</p>
<blockquote>
<p>It may be interesting to you to know that <code>awk</code>'s initials are from the authors, Aho, Weinberger and Kernighan, three luminaries from Bell Labs, the birthplace of C and Unix. On the <a href="https://qmacro.org/2019/09/17/new-podcast-tech-aloud/">Tech Aloud</a> podcast, you'll find an episode entitled &quot;<a href="https://anchor.fm/tech-aloud/episodes/C--the-Enduring-Legacy-of-Dennis-Ritchie---Alfred-V--Aho---07-Sep-2012-e7mp8r">C, the Enduring Legacy of Dennis Ritchie - Alfred V. Aho - 07 Sep 2012</a>&quot; to which you may enjoy listening.</p>
</blockquote>
<p><code>awk</code> reads lines from STDIN (standard input) and is used often to rearrange fields in those lines, or otherwise process them. In this case we're going to read in the output from our pipeline so far, and get <code>awk</code> to start out by splitting each one up into separate pieces, so that we go from this:</p>
<pre><code> 3 a.txt
 4 b.txt
 1 c.dat
 2 d.txt
 5 e.dat
</code></pre>
<p>to this:</p>
<pre><code> 3 a txt
 4 b txt
 1 c dat
 2 d txt
 5 e dat
</code></pre>
<p>In this new state we can now distinguish the file extensions, and thereby have a chance to sum the line counts by them.</p>
<p>To do this, we use the <code>-F</code> switch which allows us to define what we want the &quot;field separator&quot; to be, what character (or which characters) we want <code>awk</code> to split each line on. In our case we want to split on space, and also period. So we do the following, specifying a simple in-line <code>awk</code> script as the main parameter:</p>
<pre class="language-shell"><code class="language-shell">→ <span class="token function">wc</span> <span class="token parameter variable">-l</span> * <span class="token operator">|</span> <span class="token function">head</span> <span class="token parameter variable">-n</span> <span class="token parameter variable">-1</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token parameter variable">-F</span> <span class="token string">'[\ .]'</span> <span class="token string">'{print $2, $NF}'</span><br><span class="token number">3</span> txt<br><span class="token number">4</span> txt<br><span class="token number">1</span> dat<br><span class="token number">2</span> txt<br><span class="token number">5</span> dat</code></pre>
<blockquote>
<p>We have to escape the space in the list of delimiters, hence the <code>\</code> escape character.</p>
</blockquote>
<p>What the script (<code>{ print $2, $NF }</code>) is doing is simply printing out field number 2 and the last field. We specify field number 2 (<code>$2</code>) because there's an empty field number one, because we've split on space. We get the last field by specifying <code>$NF</code>, which represents &quot;the number of fields&quot;.</p>
<p>Note that for every line of input, we get a line of output. This is deliberate - <code>awk</code> executes the bit in curly brackets for each line it processes. But we can also get <code>awk</code> to do something at the beginning, or at the end, of processing. Consider a change from the simple script that we have now:</p>
<pre><code>{ print $2, $NF }
</code></pre>
<p>to this:</p>
<pre><code>{ counts[$NF]+=$2 }
END { for (ext in counts) print ext, &quot;-&gt;&quot;, counts[ext] }
</code></pre>
<p>This will accumulate the individual line counts for each file into an associative array <code>counts</code> keyed by the extension (e.g. <code>txt</code>). The <code>{ counts[$NF]+=$2 }</code> part runs for each line coming in on STDIN. Then at the end of processing, the block with the <code>for</code> loop is executed, printing out the totals by extension.</p>
<p>Let's see this in action:</p>
<pre class="language-shell"><code class="language-shell">→ <span class="token function">wc</span> <span class="token parameter variable">-l</span> * <span class="token operator">|</span> <span class="token function">head</span> <span class="token parameter variable">-n</span> <span class="token parameter variable">-1</span> <span class="token operator">|</span> <span class="token function">awk</span> -F<span class="token string">'[\ .]'</span> <span class="token string">'{counts[$NF]+=$2}<br>> END {for (ext in counts) print ext, "->", counts[ext]}'</span><br>dat -<span class="token operator">></span> <span class="token number">6</span><br>txt -<span class="token operator">></span> <span class="token number">9</span></code></pre>
<blockquote>
<p>The <code>&gt;</code> symbol at the start of the second line is the &quot;continuation&quot; character, put there by the shell to tell me it was expecting more input, after I'd hit enter at the end of the first line (because I hadn't yet closed the opening single quote).</p>
</blockquote>
<h2>Wrapping up</h2>
<p>And there we have it. We only used a few features of <code>awk</code> but they are certainly powerful enough for this task, when combined into a pipeline with <code>wc</code> and <code>head</code> (or <code>grep</code>).</p>
<p>I'd encourage you to spend some time in a text-based Unix or Unix-like environment. All the major PC operating systems today have such environments available, either directly (with Linux and macOS) or indirectly via VMs (with ChromeOS and Windows 10).</p>
<p>The future is terminal. Happy pipelining!</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>New podcast - Tech Aloud</title>
      <link href="https://qmacro.org/blog/posts/2019/09/17/new-podcast-tech-aloud/"/>
      <updated>2019-09-17T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2019/09/17/new-podcast-tech-aloud/</id>
      <content type="html">
        <![CDATA[
      <p><em>I've created a new podcast called &quot;Tech Aloud&quot;, where I read out loud tech articles and blog posts, so you can consume them while on the go.</em></p>
<p><a href="https://anchor.fm/tech-aloud"><img src="/images/2019/09/tech-aloud.jpeg" alt="Tech Aloud logo"></a></p>
<p>There's such a rich seam of material out there to read and learn from that it's more or less impossible to keep up. Technical articles and blog posts are published day in day out, and I can only find time to read so many. I'd been thinking that if I could find a podcast where articles and blog posts are simply read out, aloud, I could digest a little more via audio while on the move, when travelling or even just going for a walk.</p>
<p>I couldn't find such a podcast, so I decided to start one myself. It's called &quot;<a href="https://anchor.fm/tech-aloud">Tech Aloud</a>&quot; and is hosted on Anchor FM. It's already available in many of the podcast systems:</p>
<ul>
<li><a href="https://player.fm/series/tech-aloud">Player FM</a></li>
<li><a href="https://podcasts.google.com/?feed=aHR0cHM6Ly9hbmNob3IuZm0vcy9lNWRjMzZjL3BvZGNhc3QvcnNz">Google Podcasts</a></li>
<li><a href="https://open.spotify.com/show/5l4AR3Q3HKZEpE7x9j0tdJ">Spotify</a></li>
<li><a href="https://www.breaker.audio/tech-aloud">Breaker</a></li>
<li><a href="https://overcast.fm/itunes1480329467/tech-aloud">Overcast</a></li>
<li><a href="https://pca.st/kyepz7uy">Pocket Casts</a></li>
<li><a href="https://radiopublic.com/tech-aloud-6N3Nrw">Radio Public</a></li>
<li><a href="https://podcasts.apple.com/gb/podcast/tech-aloud/id1480329467">Apple Podcasts</a></li>
</ul>
<p>If you want to add it to your own podcast listening workflow, the RSS feed URL is: <a href="https://anchor.fm/s/e5dc36c/podcast/rss">https://anchor.fm/s/e5dc36c/podcast/rss</a>.</p>
<p>You can learn more about this new podcast by listening to the first episode &quot;<a href="https://anchor.fm/tech-aloud/episodes/Welcome-to-Tech-Aloud-e5ddsh">Welcome to Tech Aloud</a>&quot;. I've also written a post on the SAP Community about this podcast, which provides a bit more context: &quot;<a href="https://blogs.sap.com/2019/09/18/tech-aloud-podcast-an-introduction/">Tech Aloud podcast - an introduction</a>&quot;. Moreover, I'm encouraging folks to submit content suggestions during the SAP TechEd Barcelona week in this post: &quot;<a href="https://blogs.sap.com/2019/10/04/submit-suggestions-for-tech-aloud-during-sap-teched-barcelona/">Submit suggestions for Tech Aloud during SAP TechEd Barcelona</a>&quot;.</p>
<p>I have a system for bookmarking articles and posts that I want to read, and this podcast is me basically dipping into that list, picking entries out that seem suitable for audio, and recording them as episodes in this new podcast. How do I pick which articles or posts to read aloud? Well, there are a few rules of thumb:</p>
<p>First, each audio episode should be fairly short (say, up to 10 minutes), so super long essays are not going to make the cut, no matter how interesting they are (I reserve the right to make exceptions, though!).</p>
<p>Second, the content must be mostly text; in other words, if it's code or diagram heavy, it's not going to translate well into a pure audio format.</p>
<p>And finally, the range of topics is wide, and basically whatever takes my fancy.</p>
<p>On that last point, I might even think about letting you submit requests (for certain articles or posts of your choosing to be included). More on that another time, perhaps.</p>
<p>Anyway, I've also created a <a href="https://github.com/qmacro/tech-aloud">GitHub repo</a> to manage my activities relating to the production of this podcast - mainly listing the articles or posts that I want to read out loud, and which ones I've done in a project (&quot;<a href="https://github.com/qmacro/tech-aloud/projects/1">Episodes</a>&quot;) in that repo.</p>
<p>Ok, one final note - my reading aloud of any given article or blog post does not represent any sort of endorsement from me - it's just that I find it interesting.</p>
<p>Oh yes, and don't forget to subscribe, and if you're subscribing to this one and interested in SAP tech, you should also subscribe to the <a href="https://anchor.fm/sap-community-podcast">Coffee Corner Radio podcast</a> which has a whole host of great stuff on subjects within the SAP tech ecosphere.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Hitch Hiker&#39;s style in Sea of Sorrows</title>
      <link href="https://qmacro.org/blog/posts/2019/08/28/hitch-hiker&#39;s-style-in-sea-of-sorrows/"/>
      <updated>2019-08-28T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2019/08/28/hitch-hiker&#39;s-style-in-sea-of-sorrows/</id>
      <content type="html">
        <![CDATA[
      <p><em>Is there a link between a scene in &quot;Alien: Sea of Sorrows&quot; and a scene in part 2 of The Hitch Hiker's Guide To The Galaxy? I think so, or perhaps I hope so.</em></p>
<p>I'm listening to and rather enjoying the Audible Original &quot;<a href="https://www.amazon.co.uk/Alien-Sorrows-Audible-Original-Drama/dp/B07B3MZHTQ">Alien: Sea Of Sorrows</a>&quot;. Beyond being a good story (along with its related titles such as &quot;Out Of The Shadows&quot; and &quot;River Of Pain&quot;), the audio genre is new to me - rather than just being a narration, it's a full-on audio action experience. Definitely recommended.</p>
<p>Anyway, in Chapter 2, Rawlins, Morris and someone else is inspecting the <a href="https://avp.fandom.com/wiki/DSMO_Marion">Deep Space Mining Orbital spaceship &quot;Marion&quot;</a>, destroyed in unusual circumstances (in &quot;Out Of The Shadows&quot;, actually).</p>
<p>Closely examining a fragment of the ship, the dialogue between the characters goes something like this:</p>
<p><em>... &quot;OK, looks like a section from a docking arm.&quot;<br>
Morris: &quot;Bay three docking arm from the DSMO Marion, to be exact.&quot;<br>
Rawlins: &quot;You can tell which docking bay this came from? Is it that obvious?!&quot;<br>
Morris: &quot;No, there's a serial number on the end plate.&quot;</em></p>
<p>There's a lovely contrast between how impressed Rawlins is, and how Morris's response is honest and matter-of-fact, and how it conveys an almost but not quite imperceptible playfulness on the part of the author, <a href="https://en.wikipedia.org/wiki/Dirk_Maggs">Dirk Maggs</a>. Because it reminded me of another passage, from my favourite series of all time, Douglas Adams's Hitch Hiker's Guide To The Galaxy, in particular the <a href="https://en.wikipedia.org/wiki/The_Hitchhiker%27s_Guide_to_the_Galaxy#Original_radio_series">original radio series</a> from the late 1970s. In Part 2, or rather &quot;<a href="https://www.clivebanks.co.uk/THHGTTG/THHGTTGradio2.htm">Fit the Second</a>&quot;, there's this exchange between Arthur and Ford, who have just been picked up from open space and found themselves inside the Heart of Gold spaceship:</p>
<p><em>Ford: &quot;I think this ship is brand new, Arthur.&quot;<br>
Arthur: &quot;How can you tell? Have you got some exotic device for measuring the age of metal?&quot;<br>
Ford: &quot;No, I just found this sales brochure lying on the floor.&quot;</em></p>
<p>Again, there's the banality of the answer which wonderfully contrasts with alternative and potentially amazing explanations.</p>
<p>I can't help but think that the conversation on DSMO Marion is somewhat of a small homage to this classic exchange.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>We can do better than &#39;polynimbus&#39;</title>
      <link href="https://qmacro.org/blog/posts/2019/07/29/we-can-do-better-than-&#39;polynimbus&#39;/"/>
      <updated>2019-07-29T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2019/07/29/we-can-do-better-than-&#39;polynimbus&#39;/</id>
      <content type="html">
        <![CDATA[
      <p>My attention was drawn to an interesting blog post over on the <a href="https://community.sap.com">SAP Community</a>: &quot;<a href="https://blogs.sap.com/2019/07/29/are-you-polynimbus/">Are you polynimbus</a>&quot;. The word &quot;polynimbus&quot; jumped out at me, and not particularly in a good way. Here's why.</p>
<p>First, before reading the first paragraph of the post which explains where the word comes from, I was able to get a general idea of what the word was supposed to mean. I looked into where the word came from, and it seems to have started appearing in a few sources, including:</p>
<ul>
<li><a href="https://buildazure.com/the-polynimbus-cloud-enterprise">The Polynimbus Cloud Enterprise</a></li>
<li><a href="http://www.mplsvpn.info/2019/02/what-is-polynimbus-strategy.html">What is Polynimbus Strategy?</a></li>
<li><a href="https://polynimbus.it/">Polynimbus.it</a></li>
</ul>
<p>There's even a <a href="https://github.com/polynimbus/polynimbus">GitHub organisation and repo</a> with this name too.</p>
<p>The thing is, to me (and I guess I should declare myself a pedant and proud of it) this neologism is ugly and not really thought through, for these reasons:</p>
<ol>
<li>
<p>It's a hybrid of Greek (poly) and Latin (nimbus). There are of course other words that are hybrid, but if we're going to create new compound words, surely we want to avoid hybrids? After all, the original meaning of the word &quot;hybrid&quot; has <a href="https://en.wiktionary.org/wiki/%E1%BD%95%CE%B2%CF%81%CE%B9%CF%82">rather negative connotations</a>.</p>
</li>
<li>
<p>If we're going to go for tacking a Latin word onto the end of a Greek one, let's at least make sure it's the <em>right</em> Latin word. &quot;Nimbus&quot; doesn't mean simply &quot;cloud&quot; <a href="https://en.wiktionary.org/wiki/nimbus#Latin">in Latin</a>, it means &quot;dark cloud&quot;, like a thunder or storm cloud. Perhaps not exactly the meaning we want to convey when talking about something positive.</p>
</li>
<li>
<p>The word seems to be employed mostly as an adjective right now. Using the raw nominative singular form of the noun &quot;nimbus&quot; is hardly appropriate, then. At least change the ending to a more traditionally adjectival suffix &quot;-ic&quot;, in other words &quot;polynimbic&quot;.</p>
</li>
</ol>
<p>I can't see this word without my face contorting into a grimace, especially when it would have been easy to come up with something a lot less unpleasant.</p>
<p>My suggestion? <strong>Polynephic</strong>. Nephic from the Greek for cloud: <a href="https://en.wiktionary.org/wiki/%CE%BD%CE%AD%CF%86%CE%BF%CF%82">νέφος</a>.</p>
<p>Thanks for your attention :-)</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>The Observer&#39;s Book of JS Style</title>
      <link href="https://qmacro.org/blog/posts/2019/07/18/the-observer&#39;s-book-of-js-style/"/>
      <updated>2019-07-18T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2019/07/18/the-observer&#39;s-book-of-js-style/</id>
      <content type="html">
        <![CDATA[
      <p><img src="/images/2019/07/observersbook.png" alt="Observer's Book of Commercial Vehicles - cover"></p>
<p>In the 1970's I had a book which I cherished: <a href="https://www.goodreads.com/book/show/46652855-observer-s-book-of-commercial-vehicles">The Observer's Book of Commercial Vehicles</a>. It was pocket-sized &amp; well thumbed, and listed various vans and trucks. I could identify a Volvo F88 tractor unit from 500 paces.</p>
<p>I guess the interest in spotting and identifying things of interest has never left me, and so I find myself delighting in various examples of style with respect to expressing oneself in code. These days it's mostly in the context of JavaScript; unlike other languages, JavaScript is not only multi-paradigm but extremely malleable, making it possible to leave behind a trace of one's character, often by accident.</p>
<p>This post is to record some of those characterful or otherwise interesting expressions in code, taken predominantly from the Node.js codebase for the SAP Cloud Application Programming (CAP) Model.</p>
<h1><strong>File: @sap/cds/server.js</strong></h1>
<p>Who knew there could be so much richness to write about in a single file of fewer than 100 lines? This is the main server mechanism, in the form of a <code>server.js</code> file in <code>@sap/cds</code>, that uses the <a href="https://expressjs.com/">Express</a> web framework to serve resources both static and dynamic.</p>
<p>If you want to see this code in context, or even get it running in your favourite debugging setup to examine things step by step, pull the <code>@sap/cds</code> package from <a href="https://npm.sap.com">SAP's NPM registry</a>, dig in to the sources, and have a look.</p>
<h3>Object destructuring with default value</h3>
<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token constant">PORT</span><span class="token operator">=</span><span class="token number">4004</span> <span class="token punctuation">}</span> <span class="token operator">=</span> process<span class="token punctuation">.</span>env<br><span class="token keyword">return</span> app<span class="token punctuation">.</span><span class="token function">listen</span> <span class="token punctuation">(</span><span class="token constant">PORT</span><span class="token punctuation">)</span></code></pre>
<p>This is a lovely example of <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment#Object_destructuring">object destructuring</a> in action, with a bonus application of the default values option. Plus of course the appropriate use of a constant. This takes whatever value the PORT environmental variable might have, falling back to a default of 4004 if a value wasn't set.</p>
<p>The other thing that stands out to me is a particular affectation that I'm still not sure about - the use of whitespace before the brackets in the <code>app.listen</code> call. It does make the code feel more like a spoken language, somehow; here's another example of that use of whitespace from the same file:</p>
<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">await</span> cds<span class="token punctuation">.</span><span class="token function">serve</span> <span class="token punctuation">(</span>models<span class="token punctuation">,</span>o<span class="token punctuation">)</span> <span class="token punctuation">.</span><span class="token function">in</span> <span class="token punctuation">(</span>app<span class="token punctuation">)</span></code></pre>
<p>I think I like it.</p>
<h3>Ignored parameters</h3>
<pre class="language-javascript"><code class="language-javascript">app<span class="token punctuation">.</span><span class="token function">get</span> <span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">_<span class="token punctuation">,</span>res</span><span class="token punctuation">)</span> <span class="token operator">=></span> res<span class="token punctuation">.</span><span class="token function">send</span> <span class="token punctuation">(</span>index<span class="token punctuation">.</span>html<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">//> if none in ./app</span></code></pre>
<p>The use of the undercore (<code>_</code>) here is not particular to JavaScript nor uncommon, but it's nice to see it in use here. As a sort of placeholder for a parameter that we're not interested in using in the function that is passed to <code>app.get</code>, the underscore is for me the perfect character to use.</p>
<p>If you're familiar with HTTP server libraries, you'll be able to guess what that parameter is that is being ignored. An HTTP handler function is usually passed the incoming HTTP request object, and the fledgling HTTP response object. The response object is the only thing that is important here, so the signature is</p>
<pre class="language-javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token parameter">_<span class="token punctuation">,</span>res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token operator">...</span></code></pre>
<p>rather than</p>
<pre class="language-javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span>res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token operator">...</span></code></pre>
<h3>Getter and fake filename</h3>
<p>Did you notice something odd in that previous example? There was a call to <code>res.send</code> like this:</p>
<pre class="language-javascript"><code class="language-javascript">res<span class="token punctuation">.</span><span class="token function">send</span> <span class="token punctuation">(</span>index<span class="token punctuation">.</span>html<span class="token punctuation">)</span></code></pre>
<p>At first I was only semi-aware of something not quite right about the way that appeared. But then looking further down in the code, I suddenly realised. <code>index.html</code> is not a filename ... it's a property (<code>html</code>) on an object (<code>index</code>)! Further down, we come across this, where it's defined:</p>
<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">const</span> index <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token keyword">get</span> <span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br>  <span class="token operator">...</span><br>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_html <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"><br>    &lt;html><br>      &lt;head><br>        ...<br>  </span><span class="token template-punctuation string">`</span></span><br><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>
<p>I've not seen the use of a <code>getter</code> in the wild that often. According to <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/get">the MDN web docu on 'getter'</a>:</p>
<p>&quot;The <code>get</code> syntax binds an object property to a function that will be called when that property is looked up&quot;.</p>
<p>Put simply, you can define properties on an object whose values are dynamic, resolved by a call to a function. Of course, you can also define functions as property values, but that would mean that you'd have to use the call syntax, i.e. <code>index.html()</code> in this case. But given the emphasis on something that's more readable than normal, I can see why a getter was used here. Although I think it might take a bit of getting used to.</p>
<h3>More destructuring</h3>
<p>Now the cat is out of the bag, it gets everywhere! I wanted to include this example of destructuring because at first I was scratching my head over the line, but then after staring at it for a few seconds I realised what I was looking at.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token punctuation">{</span> isfile <span class="token punctuation">}</span> <span class="token operator">=</span> cds<span class="token punctuation">.</span>utils<span class="token punctuation">,</span> <span class="token punctuation">{</span>app<span class="token punctuation">}</span> <span class="token operator">=</span> cds<span class="token punctuation">.</span>env<span class="token punctuation">.</span>folders<span class="token punctuation">,</span> <span class="token punctuation">{</span>join<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><br><span class="token keyword">const</span> _has_fiori_html <span class="token operator">=</span> <span class="token function">isfile</span> <span class="token punctuation">(</span><span class="token function">join</span> <span class="token punctuation">(</span>app<span class="token punctuation">,</span><span class="token string">'fiori.html'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>
<p>(I'm including the second line only to give a bit of usage context).</p>
<p>Part of the reason this had me wondering was simply due to the whitespace - I guess the author was in a hurry as the spacing is not consistent. I thought there was something special about the first pair of braces around <code>isfile</code>, but in fact it's just three separate constant declarations, all on the same line: <code>isfile</code>, <code>app</code> and then <code>join</code>.</p>
<p>The value for each is resolved through destructuring. For example, the <code>app</code> constant comes from the <code>cds.env.folders</code> property which itself has a number of child properties, one of which is <code>app</code>. <code>cds.env</code> is part of CAP's Node.js API, and provides access to an effective environment computed from different layers of configuration.</p>
<p>Going one example further, the <code>join</code> constant ends up having the value of <code>join</code> in the Node.js builtin <code>path</code> package (the value is a function), as you can see in this snippet from a Node.js REPL session:</p>
<pre><code>=&gt; node
&gt; require('path')
{ resolve: [Function: resolve],
  normalize: [Function: normalize],
  isAbsolute: [Function: isAbsolute],
  join: [Function: join],
  relative: [Function: relative],
  ...
</code></pre>
<p>Anyway, while there's more to explore and pore over, I'll leave it here for now. Who knows, I may write another one of these covering more finds in the source code. If you're interested, <a href="https://twitter.com/qmacro">let me know</a>.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>David Edward Adams</title>
      <link href="https://qmacro.org/blog/posts/2019/07/11/david-edward-adams/"/>
      <updated>2019-07-11T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2019/07/11/david-edward-adams/</id>
      <content type="html">
        <![CDATA[
      <p><img src="/images/2019/07/dad.jpg" alt="A picture of dad with Louise, Katie and me"></p>
<center>02 Sep 1944 - 11 Jul 2019</center>
<p>On the evening of Thursday 11 July 2019, after a long and latterly very painful struggle, dad passed away in his sleep. We were in the room at Park Hills Nursing Home with him, sitting by the window, and didn't even notice, it was that peaceful.</p>
<p>He was loved by many people, from many walks of life, and he has close friends from so many of his ventures, from farming, haulage, skip hire, chauffeuring, dealings in antiques (&quot;clutter&quot;), running the door at Cruz 101, and most recently from his volunteer work at the charity shop where he enjoyed his time pointing to things with his stick, trying his best to tolerate cheeky customers, and messing up till transactions.</p>
<p>We could write so much here, but whatever we put would not be a match for the memories you undoubtedly have of him. So we'll keep it brief.</p>
<p><em>Dad, we love you and miss you terribly. Life won't be the same without your sharp wit, your eye for a bargain, and your swearing. And your love.</em></p>
<p><strong>Donations</strong></p>
<p>In his last weeks, dad was cared for by some amazing people, initially at <a href="https://www.drkershawshospice.org.uk/">Dr Kershaw's Hospice</a> and then at Park Hills Nursing Home. We cannot thank the staff at these two places enough - it takes a special kind of person to look after folks like they do.</p>
<p>Instead of flowers, we would please ask you to consider donating to the Dr Kershaw's Hospice charity - you can do this via the Just Giving page we have set up:</p>
<p><a href="https://www.justgiving.com/fundraising/davidedwardadams">https://www.justgiving.com/fundraising/davidedwardadams</a></p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>First thoughts on the 2019 Stack Overflow Developer Survey results</title>
      <link href="https://qmacro.org/blog/posts/2019/04/18/first-thoughts-on-the-2019-stack-overflow-developer-survey-results/"/>
      <updated>2019-04-18T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2019/04/18/first-thoughts-on-the-2019-stack-overflow-developer-survey-results/</id>
      <content type="html">
        <![CDATA[
      <p>I've just finished perusing <a href="https://insights.stackoverflow.com/survey/2019">this year's Stack Overflow Developer Survey results</a> and have some initial observations. Nothing earth shattering, and of course you will likely have other observations. Moreover, with anything like this, my thoughts are probably not neutral, as I'm looking for patterns to back up how I see the world.</p>
<p>These survey results are of particular interest to me in my developer outreach &amp; advocacy role within the <a href="https://developers.sap.com">SAP Developer Relations</a> team, especially now that I've had just over a year to settle in and find my feet. Another document I'm looking forward to reading is hoopy.io's <a href="https://stateofdevrel.hoopy.io/">State of Developer Relations 2019</a> report, which I hope to get to next week.</p>
<p>Ok, so here goes. I'm picking out particular results as and when they pique my interest, in particular from the <a href="https://insights.stackoverflow.com/survey/2019#developer-profile">Developer Profile</a> and <a href="https://insights.stackoverflow.com/survey/2019#technology">Technology</a> sections. By the way - kudos to the producers of this report in making every section and subsection linkable and referenceable - this is a well put together hypertext document!</p>
<p><strong><a href="https://insights.stackoverflow.com/survey/2019#developer-profile-_-developer-type">Developer Type</a></strong></p>
<p>I didn't see the survey itself (otherwise I would have probably completed it as well) but I'm curious about how they asked the question that differentiated developer types listed here. I'm guessing it wasn't just a &quot;pick one&quot;, partly from the accompanying text for this section, and partly because what jumps out is that &quot;enterprise developer&quot; is separate from other types such as full-stack, back-end, front-end and so on.</p>
<p>I'm an enterprise developer <em>and</em> a back-end developer (and sometimes a front-end developer of course too). I don't see how this distinction adds value, unless it's to show &quot;of the respondents, X% identified as working in the enterprise software context,  <em>as well as expressing their actual developer type</em>&quot;.</p>
<p><strong><a href="https://insights.stackoverflow.com/survey/2019#developer-profile-_-years-coding-professionally">Years Coding Professionally</a></strong></p>
<p>What struck me here was the comment in the accompanying text: &quot;Developers who work with languages such as VBA, F# and Clojure&quot; have the most years of professional coding experience&quot;.</p>
<p>This came as quite a surprise - I would have expected to see perhaps Java in this list (some say Java is the new COBOL). I can understand seeing VBA there but certainly not the two functional languages F# and Clojure, which no-one is going to claim are mainstream. That said, they are both wonderful ... I've been exploring them both over the last couple of years - see my other blog <a href="https://langram.org">Language Ramblings</a> for some posts on that subject.</p>
<p>Note that later on we see also that Clojure and F# are number one and number two in the list of <a href="https://insights.stackoverflow.com/survey/2019#top-paying-technologies">Top Paying Technologies</a>!</p>
<p><strong><a href="https://insights.stackoverflow.com/survey/2019#developer-profile-_-undergraduate-major">Undergraduate Major</a></strong></p>
<p>I'm not surprised at what these results tell us here, but I am a little disappointed. Being a Classics (Ancient Greek, Latin, Sanskrit, Philology) graduate I guess I must put myself into the &quot;humanities discipline&quot; category which makes up a mere 2.1% of the respondents.</p>
<p>I know I'm in the minority with my degree, but didn't expect the minority to be that small!</p>
<p><strong><a href="https://insights.stackoverflow.com/survey/2019#developer-profile-_-other-types-of-education">Other Types of Education</a></strong></p>
<p>The text that accompanies the results in this section starts with &quot;Developers are lifelong learners&quot;. That resonates very much with me; when people ask what I do, I often say &quot;I learn&quot;. See the section <a href="https://blogs.sap.com/2018/10/01/monday-morning-thoughts-impostor-syndrome/#tryingtokeepup">Trying to keep up</a> in my <a href="https://blogs.sap.com/tag/mondaymorningthoughts/">Monday Morning Thoughts</a> post on <a href="https://blogs.sap.com/2018/10/01/monday-morning-thoughts-impostor-syndrome/">impostor syndrome</a> for more background on this.</p>
<p>If I were feeling bold, perhaps I'd go so far as to say that if you're not learning, you're not a developer.</p>
<p><strong><a href="https://insights.stackoverflow.com/survey/2019#developer-profile-_-social-media-use">Social Media Use</a></strong></p>
<p>The accompanying text here suggests that in the non-developer world, Reddit doesn't even appear in the top ten list. In this list, it's at number one. Why? I'd say because it's the new <a href="https://en.wikipedia.org/wiki/Usenet">Usenet</a> which is where a lot of developers discussed low level detail and esoterica about development topics with like-minded individuals. Usenet (and NNTP) isn't really a thing these days, and Reddit has taken over where it left off.</p>
<p>As a developer, <a href="https://www.reddit.com/user/qmacro">I use Reddit</a> to follow nerdy discussions for some of my areas of interest including Mechanical Keyboards, Twitch, Vim, i3wm, ChromeOS and Crostini.</p>
<p><a name="languages"></a><strong><a href="https://insights.stackoverflow.com/survey/2019#technology-_-programming-scripting-and-markup-languages">Programming, Scripting, and Markup Languages</a></strong></p>
<p>(That ugly second comma in the section title is from the original results page, not me!)</p>
<p>It's not a secret that I am a fan of JavaScript as a language, for many reasons - it's available for use in both front-end and back-end development contexts, it's a flexible multi-paradigm language that is evolving nicely, it is accessible and easy to get started with, and (warning, controversial!) the lack of a type system helps rather than hinders. Not in every context, but in many.</p>
<p>So I'm happy (but not surprised) to see JavaScript in first place in the &quot;most popular / most commonly used&quot; list here. It's also held this top spot for seven years in a row.</p>
<p>This gives me confidence to continue on my trajectories (with live streaming, blogging, CodeJams and so on) with JavaScript as a backbone language.</p>
<p>Further results in this section show that JavaScript is also the second most wanted language, just behind Python.</p>
<p>Talking of JavaScript on the back-end, it's also not surprising to see Node.js (backend JavaScript, essentially) at the number one spot on the list of most popular <a href="https://insights.stackoverflow.com/survey/2019#technology-_-other-frameworks-libraries-and-tools">other frameworks, libraries and tools</a>. Not only that, but Node.js is  it's certainlalso top of the list of most wanted other frameworks, libraries and tools.</p>
<p>Go JavaScript!</p>
<p><strong><a href="https://insights.stackoverflow.com/survey/2019#technology-_-most-loved-dreaded-and-wanted-platforms">Most Loved, Dreaded, and Wanted Platforms</a></strong></p>
<p>Talking of most loved and wanted, it tickles me to see that Windows doesn't even make the top ten list of most loved platforms. But it's certainly up there (along with WordPress, Watson, Heroku and Arduino) in the top five most dreaded. I wonder why that is?</p>
<p><strong><a href="https://insights.stackoverflow.com/survey/2019#technology-_-most-popular-development-environments">Most Popular Development Environments</a></strong></p>
<p>Top of the list here, from all respondents, is Microsoft's <a href="https://code.visualstudio.com/">Visual Studio Code</a>. And for good reason, it's a great piece of software that works really well for me and many developers.</p>
<p>I think it's fair to say that over the years, some editors have come in and either stayed or gone out of fashion. Restricting myself to &quot;local&quot; editors and IDEs, ones that come to mind in this context are TextMate, Sublime Text and Atom. Of course, many developers still use those, but the IDE du jour, without a doubt, is Visual Studio Code.</p>
<p>I'm happy to say that SAP have an extension for it, to help developers build apps with the <a href="https://blogs.sap.com/2018/10/10/application-programming-model-start-here/">SAP Cloud Application Programming Model</a>. Go to the <a href="https://tools.hana.ondemand.com/#cloud">SAP Development Tools - Cloud</a> page and look for the CDS Language Support for Visual Studio Code extension.</p>
<p>Some of you may know that my long-term love is for Vim, that masterpiece of philosophy, design and implementation that has been around for a very long time. And it's heartening to see Vim at fifth place in this particular list, above Sublime Text, Atom, TextMate, Eclipse and of course above Emacs :-)</p>
<p>One notable entry in the list, even though it's in last place (but it's <em>on the list</em>) is <a href="http://lighttable.com/">Light Table</a>, a fabulous reimagining of an editor by Chris Grainger, which I learned about in my Clojure adventures. You can see Light Table in action in some of the videos from <a href="https://www.youtube.com/user/Misophistful">Misophistful</a> from whom I learnt stuff about Clojure.</p>
<hr>
<p>That's it for now - perhaps I'll write down some more thoughts about the results in the other sections of the survey. But for now, it's time for a beer (and another look at my Clojure books). Cheerio!</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>ES6, reduce and pipe</title>
      <link href="https://qmacro.org/blog/posts/2019/04/08/es6-reduce-and-pipe/"/>
      <updated>2019-04-08T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2019/04/08/es6-reduce-and-pipe/</id>
      <content type="html">
        <![CDATA[
      <p>In learning about functional programming, one thing that's worked for me is to take my time, and not rush over fundamental concepts. In fact, like a good beer or whisky, a fundamental concept is something to savour, to enjoy at a leisurely pace.</p>
<p>This weekend I turned to a post that was highlighted originally by <a href="https://twitter.com/fredverheul">Fred Verheul</a>: <a href="https://medium.com/javascript-scene/transducers-efficient-data-processing-pipelines-in-javascript-7985330fe73d">Transducers: Efficient Data Processing Pipelines in JavaScript</a> by <a href="https://twitter.com/_ericelliott">Eric Elliott</a>. It turns out that this post is part of a series on &quot;Composing Software&quot;, so I turned to the first post - <a href="https://medium.com/javascript-scene/composing-software-an-introduction-27b72500d6ea">Composing Software: An Introduction</a> as I didn't want to miss anything.</p>
<p>Reading at my leisurely pace, mindful of what <a href="https://en.wikipedia.org/wiki/Erik_Meijer_(computer_scientist)">Erik Meijer</a> seems to say a lot, which is &quot;... if you stare at this long enough&quot;, I didn't get very far into the post before I found something of wonder, and thought I'd share it.</p>
<p><strong>pipe</strong></p>
<p>In talking about the basics of composition, specifically of functions, Eric Elliott talks about utilities that make function composition easier. He mentions <code>pipe</code> which is <a href="https://ramdajs.com/docs/#pipe">available</a> in my favourite functional programming library for JavaScript - <a href="https://ramdajs.com">Ramda</a>.</p>
<p>He also provides a simple implementation, that looks like this:</p>
<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">pipe</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>fns</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token parameter">x</span> <span class="token operator">=></span> fns<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">y<span class="token punctuation">,</span> f</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">f</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>Let's use the rest of the time on this post to stare at this for a few minutes, as there's some goodness to unpack. First though, let's see how <code>pipe</code> is used.</p>
<p>Here's a simple example, where we use a predefined function <code>dbl</code> that doubles a number, and a lambda (anonymous) function that adds 42 to a number. We use these two functions inside of <code>pipe</code>, which transforms the input (5) in a sort of &quot;pipeline process&quot;:</p>
<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">dbl</span> <span class="token operator">=</span> <span class="token parameter">x</span> <span class="token operator">=></span> x <span class="token operator">*</span> <span class="token number">2</span><br>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><br>  <span class="token function">pipe</span><span class="token punctuation">(</span><br>    dbl<span class="token punctuation">,</span><br>    <span class="token parameter">x</span> <span class="token operator">=></span> x <span class="token operator">+</span> <span class="token number">42</span><br>  <span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><br><span class="token punctuation">)</span><br><br><span class="token comment">//=> 52</span></code></pre>
<p>In a recent talk I gave at <a href="https://wiki.scn.sap.com/wiki/display/events/SAP+Inside+Track+Frankfurt+2019%2C+March+30th%2C+%23sitFRA">SAP Inside Track Frankfurt</a> - &quot;<a href="http://sitfra2019.cbasis.com/#3">ES6 JavaScript in the wild</a>&quot; - I took the audience through a number of language features introduced with ES6, a version of ECMAScript (JavaScript) introduced in 2015.</p>
<p><img src="/images/2019/03/sitfra-talk.jpg" alt="DJ Adams presenting at SAP Inside Track Frankfurt">
<em>(Photo <a href="https://twitter.com/wsnoep/status/1111921184088772608">courtesy of Wim Snoep</a>)</em></p>
<p>In the definition of <code>pipe</code> here we can see a few of them in action. Also, in a couple of the episodes of our &quot;<a href="https://bit.ly/handsonsapdev">Hands-on SAP dev with qmacro</a>&quot; series, we've seen that the <code>reduce</code> function is a fundamental building block, sort of like the hydrogen of the functional universe. For example <code>map</code> and <code>filter</code> can be built with <code>reduce</code>.</p>
<p>So let's have a closer look at the definition, and see what we can see:</p>
<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">pipe</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>fns</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token parameter">x</span> <span class="token operator">=></span> fns<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">y<span class="token punctuation">,</span> f</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">f</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p><strong>const</strong></p>
<p>First, we have the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const"><code>const</code></a> declaration, which introduces a constant. My early journey towards functional programming involved starting to think of things that didn't mutate, and declaring values as constants helped me remember that by forcing me to write using values that don't change. In this case it's a function definition, but I use <code>const</code> equally to define other types of values.</p>
<p><strong>rest parameters</strong></p>
<p>Next, we see the use of the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters">rest parameter</a> syntax (<code>...</code>), which is a great way of saying, either in a <a href="https://hacks.mozilla.org/2015/05/es6-in-depth-destructuring/">destructuring</a> context or in the context of function parameter declarations, &quot;whatever values haven't been assigned to parameters already, capture them all (the rest, essentially) in an array&quot;. So in this case, all the function definitions specified as arguments to a call to <code>pipe</code> (in this case <code>dbl</code> and <code>x =&gt; x + 42</code>) are captured into the <code>fns</code> array.</p>
<p><strong>fat arrows</strong></p>
<p>Then we see our friend the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions">fat arrow</a> (<code>=&gt;</code>), used to concisely define functions. The conciseness is underlined here in particular, because here, <code>pipe</code> is being declared as a function that takes some parameters (<code>(...fns)</code>) <strong>and produces a function</strong> that takes a single parameter (<code>x</code>) which produces whatever the <code>fn.reduce</code> expression evaluates to (we'll look at that next).</p>
<p>Stare at this definition for a minute, perhaps with a sip of nice coffee, and marvel not only at the concise nature, but also at the power that JavaScript puts in your hands as a programmer, in giving you the ability to treat functions as first class citizens: to <em>receive</em> functions as arguments in function calls, and to <em>produce</em> functions as results of function calls.</p>
<p>Functions that receive and / or produce other functions are called <a href="https://eloquentjavascript.net/05_higher_order.html">higher order functions</a>. This concept is not specific to ES6 nor to JavaScript, but the prevalence of the use of higher order functions has increased in JavaScript with ES6 because the language improvements have made the concept very easy to express.</p>
<p><strong>reduce</strong></p>
<p>Let's finish by looking now at the <code>fns.reduce</code> expression, noting in passing that another small thing of beauty is the fact that this function that is being produced by the <code>pipe</code> function has, as its body, a single expression.</p>
<p>The <code>reduce</code> function is called on the array of functions provided in the call to <code>pipe</code> (<code>dbl</code> and <code>x =&gt; x + 42</code> in the example shown). The <code>reduce</code> function itself takes two parameters - a &quot;reducer&quot; function that is executed for each of the items in the array being reduced over (i.e. for each of the functions), and a starting value.</p>
<p>Here are those two parameters:</p>
<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">pipe</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>fns</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token parameter">x</span> <span class="token operator">=></span> fns<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">y<span class="token punctuation">,</span> f</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">f</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span><br><span class="token comment">//                                       --------------  -</span><br><span class="token comment">//                                              ^        ^</span><br><span class="token comment">//                                              |        |</span><br><span class="token comment">//                    reducer function ---------+        |</span><br><span class="token comment">//                      starting value ------------------+</span></code></pre>
<p>The reducer function itself is defined with two parameters: the &quot;accumulator&quot;, i.e. the value that has been built up (starting out as the starting value) so far with each reduce iteration, and the &quot;next&quot; item being reduced over (the functions in <code>fns</code> in this case) one by one.</p>
<p>The body of the reducer function here is again, a single expression, which calls the function in question (as they are iterated through) on the current value of the accumulator.</p>
<p>Focusing only at the reducer function, here are those two parameters and the single expression:</p>
<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">pipe</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>fns</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token parameter">x</span> <span class="token operator">=></span> fns<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">y<span class="token punctuation">,</span> f</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">f</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span><br><span class="token comment">//                                        -  -     ----</span><br><span class="token comment">//                                        ^  ^      ^</span><br><span class="token comment">//                                        |  |      |</span><br><span class="token comment">//                   accumulator ---------+  |      |</span><br><span class="token comment">//                     next item ------------+      |</span><br><span class="token comment">//         reducer function body -------------------+</span></code></pre>
<p>So with all this in mind, can we imagine how the whole thing works, with the invocation example we saw earlier?</p>
<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">dbl</span> <span class="token operator">=</span> <span class="token parameter">x</span> <span class="token operator">=></span> x <span class="token operator">*</span> <span class="token number">2</span><br>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><br>  <span class="token function">pipe</span><span class="token punctuation">(</span><br>    dbl<span class="token punctuation">,</span><br>    <span class="token parameter">x</span> <span class="token operator">=></span> x <span class="token operator">+</span> <span class="token number">42</span><br>  <span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><br><span class="token punctuation">)</span></code></pre>
<p>Let's try.</p>
<p>The call to <code>pipe</code> is made specifying two function definitions <code>dbl</code> and <code>x =&gt; x + 42</code>. This produces a function that has captured (closed over - forming a closure) those two function definitions, and is expecting a single value to be received in <code>x</code>. Once that value is received (the value is 5 in this case), the function <code>x =&gt; fns.reduce((y, f) =&gt; f(y), x)</code> can be evaluated, which we can visualise like this:</p>
<pre><code>Function invocation (y, f) =&gt; f(y)        Value

(starting value)                          5
(5, dbl) =&gt; dbl(5)                        10
(10, x =&gt; x + 42) =&gt; (x =&gt; x + 42)(10)    52
</code></pre>
<p>Given that <code>reduce</code> sensibly returns the final value (i.e. the result of the final expression in the iteration loop) which is 52, we're good.</p>
<p>I do find it's useful to take one's time staring at stuff until the mist clears. I hope this post helps you when staring at things like this. Happy functional adventuring!</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Vim, Markdown and writing</title>
      <link href="https://qmacro.org/blog/posts/2018/12/24/vim-markdown-and-writing/"/>
      <updated>2018-12-24T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2018/12/24/vim-markdown-and-writing/</id>
      <content type="html">
        <![CDATA[
      <p>Having got my personal space on the Web in order with some <a href="/blog/posts/2018/12/24/housekeeping">housekeeping</a> this weekend, I can now turn my attention to my workflow and tools, where I intend to rebuild some skills in core technologies. To that end, I'm writing more in Markdown, and have re-embraced Vim as my editor of choice for many things.</p>
<p>The availability of Linux on my OS of choice (Chrome OS), in the form of <a href="https://www.reddit.com/r/Crostini/">Crostini</a>, and the immediacy of the Linux terminal, where I feel most at home, has given me the chance I've been looking for to properly learn stuff I've only scraped by with in the past, and to mix old &amp; new techniques. I'm blogging using <a href="//pages.github.com">GitHub Pages</a> which means Markdown and Jekyll, synchronising content between my local machine(s) and the cloud using git repositories. I'm using Vim to write, and am especially enjoying some of the plugins I'm trying out, in particular this zen-like writing mode that the lovely combination of <a href="https://github.com/junegunn/goyo.vim">Goyo</a> and <a href="https://github.com/junegunn/limelight.vim">Limelight</a> offers.</p>
<p><img src="/images/2018/12/goyo-limelight.png" alt="Goyo and Limelight in action"></p>
<p>I've started rebuilding my Vim setup from scratch, based on the work of some great folks out there, including the author of many Vim plugins <a href="https://tpo.pe/">Tim Pope</a> and someone with a great setup and approach, <a href="//lukesmith.xyz">Luke Smith</a>. I've started to share my Vim setup in my <a href="//github.com/qmacro/dotvim">dotvim</a> repository on Github.</p>
<p>I'll talk about the contents of that repository in another post sometime ... for now, I wanted to mention a script I wrote to help me quickly start writing posts. It's called <code>newpost.js</code> and lives in a <code>scripts</code> folder in my <code>$PATH</code>. I can invoke it like this:</p>
<pre><code>&gt; newpost.js Vim, Markdown and writing
</code></pre>
<p>and it will create a new file with the right name:</p>
<pre><code>2018-12-24-vim-markdown-and-writing.markdown
</code></pre>
<p>in the right place (the <code>_posts/</code> directory of the local version of my <a href="//github.com/qmacro/qmacro.github.io">blog repository</a>), containing basic frontmatter that looks like this:</p>
<pre><code>---
layout: post
title: Vim, Markdown and writing
---
</code></pre>
<p>It will then open up the file in Vim so that I can start writing immediately.</p>
<p>I can imagine further refinements to this script, but I realised I wouldn't be able to get to any refinements until I created a first version and started using it. So I did. I've shared the <a href="https://github.com/qmacro/scripts/blob/master/newpost.js">script</a> in a new <a href="//github.com/qmacro/scripts">scripts repository</a>.</p>
<p>It's working well for me so far, but I want to explore further the relationship between a Node.js based script and the underlying shell environment. I'm already <a href="https://github.com/qmacro/scripts/blob/d72a7df54a9bfbb65984b766dac19aa12b5da11c/newpost.js#L81-L90">spawning a Vim process</a> to edit the file, directly from the Node.js process:</p>
<pre class="language-javascript"><code class="language-javascript">cp<span class="token punctuation">.</span><span class="token function">spawn</span><span class="token punctuation">(</span><span class="token string">'vim'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><br>	<span class="token string">'-c'</span><span class="token punctuation">,</span><br>	<span class="token string">'+normal G'</span><span class="token punctuation">,</span><br>	fullname<br><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><br>	<span class="token literal-property property">stdio</span><span class="token operator">:</span> <span class="token string">'inherit'</span><br><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>
<p>Perhaps next will be some interaction via environmental variables. We'll see!</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Housekeeping</title>
      <link href="https://qmacro.org/blog/posts/2018/12/24/housekeeping/"/>
      <updated>2018-12-24T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2018/12/24/housekeeping/</id>
      <content type="html">
        <![CDATA[
      <p>Over the years since I've been blogging, I've used various systems (Blosxom, Moveable Type, WordPress, and latterly Ghost) which have all had their great features. In addition, I've been using a domain 'pipetree.com' that I've had since <a href="//twitter.com/piers">Piers</a> and I came up with the name during a Perl conference in London (it was YAPC - Yet Another Perl Conference) in 2000.</p>
<p>We needed a name for our <a href="/blog/posts/2005/02/18/a-fresh-start/">shared co-located host gnu.pipetree.com</a> and decided, literally, to think of two random words and put them together. And the name has stuck ever since. Unfortunately I've had all sorts of issues with Network Solutions, where the domain name is managed ... so much so that I've pretty much given up getting them to allow me to update my records. Piers had moved on to his own domain names a good while ago, so it has been just me using pipetree.com for a long while now.</p>
<p>I've been thinking a lot about 2019 and decided to clear the decks a little, to be somewhat more organised and to make a clean break. So I'm planning to retire pipetree.com over the next few months, and have moved to a new domain <a href="//qmacro.org">qmacro.org</a> where you're reading this now. I've embraced the <a href="//pages.github.com">GitHub Pages</a> approach to blogging, continuing on with using <a href="https://en.wikipedia.org/wiki/Markdown">Markdown</a>, something I started with Ghost (it was one of the main attractions of the platform).</p>
<p>My existing pipetree.com platform is served from a Linode-based virtual private server; I've been very happy indeed with <a href="//linode.com">Linode</a>, but my own management of the server has lagged a little, and while I used to run various services on it, including the Ghost installation for my blog at <code>pipetree.com/qmacro/blog</code>, there's not much need for it any more, and it's become a little bit disorganised.</p>
<p>So I have migrated all my old posts to this new place, using Jekyll (as the basis for GitHub Pages) and I've made my first steps with the <a href="https://jekyllrb.com/docs/liquid/">Liquid</a> templating language to build my <a href="//qmacro.org">new homepage</a>. I know that I'm breaking all my old URLs, but I feel it's the right move to make at this stage. I'm now managing my domains with Google Domains which is super simple, and a far better experience than Network Solutions. And I have a domain name that more reflects me and my identity on the Web.</p>
<p>I am of course still blogging over on the <a href="//people.sap.com/dj.adams.sap">SAP Community</a> and will continue to do but my personal space here will continue to serve in the wider context, as it always has done.</p>
<p>So there you are. A new start and new domain name ready for 2019, even running over HTTPS, through the power of <a href="//letsencrypt.org">Let's Encrypt</a>. In the meantime, happy holidays!</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>My take on Wired&#39;s Google &amp; URLs article</title>
      <link href="https://qmacro.org/blog/posts/2018/09/06/my-take-on-wired&#39;s-google-and-urls-article/"/>
      <updated>2018-09-06T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2018/09/06/my-take-on-wired&#39;s-google-and-urls-article/</id>
      <content type="html">
        <![CDATA[
      <p>Something is surfacing that makes me rather uncomfortable.</p>
<p><strong>Google is rethinking the idea of the URL</strong></p>
<p>I saw a few tweets this week, including <a href="https://twitter.com/judell/status/1037537440263618560">this one</a> from Jon Udell which pointed me to a tweet and article on Wired that talked about Google rethinking the idea of the URL. On the one hand, the concept of URLs doesn't belong exclusively for Google to do with as it pleases ... on the other hand, it's not for me to say what they can and can't think about.</p>
<p>Anyway, I read the article -- &quot;<a href="https://www.wired.com/story/google-wants-to-kill-the-url/">Google want to kill the URL</a>&quot;, by Emily Waite -- on Wired. At least, I <em>think</em> it was on Wired, I wasn't sure because Chrome was <a href="https://twitter.com/qmacro/status/1037684084066136064">deliberately obscuring the URL in the address bar</a>.</p>
<p>I thought it was worth sharing the thoughts that occurred to me as I read through it, so here they are, in context. I'd encourage you to read the article too, so you can come to your own conclusions. My thoughts are just that - thoughts, opinions, based upon nothing much except what I've read, mind you. Note also that some sections that I quote are directly from the article's author, others are quotes from other people interviewed for the article.</p>
<p><strong>Quotes and comments</strong></p>
<p><em>&quot;...as Chrome looks ahead to its next 10 years, the team is mulling its most controversial initiative yet: fundamentally rethinking URLs across the web.&quot;</em> --- There's definitely a very good chance it will be controversial - look at the &quot;<a href="https://www.google.co.uk/search?q=google+origin+chip&amp;oq=google+origin+chip&amp;aqs=chrome..69i57j69i64.1962j0j7&amp;sourceid=chrome&amp;ie=UTF-8">origin chip</a>&quot; idea that surfaced a few years ago; from what I surmise, the &quot;origin chip&quot; idea is nothing compared to the size of the rethink I'm getting a feel for.</p>
<p><em>&quot;...Uniform Resource Locators are the familiar web addresses you use every day. They are listed in the web's DNS address book and direct browsers to the right Internet Protocol addresses that identify and differentiate web servers.&quot;</em> --- Nope, not quite. The hostname part of the URL is what that is, not the URL itself. I'm not sure whether I should be relieved or worried at this inaccuracy. Relieved because it suggests the article isn't entirely based on solid research, or worried because of the dangerous conflation of two distinct things: fully qualified hostnames (&quot;wired.com&quot; is the example given in the article) and URLs. Dangerous, because it only serves to add fuel to the &quot;rethink&quot; fire.</p>
<p><em>&quot;In short, you navigate to WIRED.com to read WIRED so you don't have to manage complicated routing protocols and strings of numbers.&quot;</em> --- Again with this conflation. Stop it, please.</p>
<p><em>&quot;As web functionality has expanded, URLs have increasingly become unintelligible strings of gibberish&quot;</em> --- On what basis is this statement made? I've been around the Web from the beginning, and use it daily. This statement is nonsense.</p>
<p><em>&quot;[URLs] combining components from third-parties&quot;</em> ---  What? This makes no sense whatsoever. Is it just a misunderstanding, or a deliberate attempt to inject a vague notion of unease in the reader?</p>
<p><em>&quot;And on mobile devices there isn't room to display much of a URL at all.&quot;</em> --- This is being presented as a problem, even though earlier in the same paragraph the problem was that they were too hard to read anyway. How does that logic work?</p>
<p><em>&quot;it's difficult for web users to keep track of who they're dealing with&quot;</em> --- This is not related to the length or complexity of URLs, it's mainly related to the establishment of the server origin.</p>
<p><em>&quot;it’s hard to know which part of [URLs] is supposed to be trusted&quot;</em> --- Most people I know don't find it hard, and isn't this what the various secure symbols are for?</p>
<p><em>&quot;in general I don’t think URLs are working as a good way to convey site identity.&quot;</em> --- Of course, that's an opinion, so we must read that as &quot;I don't think URLs are working as a good way ... for <em>me</em>&quot; (the quotee, Adrienne Porter Felt). It's not my opinion - I think the opposite.</p>
<p><em>&quot;So we want to move toward a place where web identity is understandable by everyone—they know who they’re talking to when they’re using a website and they can reason about whether they can trust them. But this will mean big changes in how and when Chrome displays URLs.&quot;</em> --- If that how and when is different to the current state (i.e. &quot;always&quot;, right now), then the situation will be worse, not better.</p>
<p><em>&quot;the problem doesn't have an easy answer&quot;</em> --- Could it be because it's not actually a problem, and therefore an answer doesn't make any sense here?</p>
<p><em>&quot;even the Chrome team itself is still divided on the best solution to propose&quot;</em> --- This tells us a lot about what's going on here, perhaps.</p>
<p><em>&quot;I don’t know what this will look like, because it’s an active discussion in the team right now&quot;</em> --- That's good, and I hope that discussion is open and remains open.</p>
<p><em>&quot;That’s one of the challenges with a really old and open and sprawling platform.&quot;</em> --- Ah! There we go. I was wondering when it would appear. <a href="https://en.wikipedia.org/wiki/Fear,_uncertainty_and_doubt">FUD</a> in all its glory.</p>
<p><em>&quot;everyone is unsatisfied by URLs&quot;</em> --- Nope. Wrong.</p>
<p><em>&quot;They kind of suck&quot;</em> --- Nope, they don't.</p>
<p><em>&quot;Google paused the origin chip rollout&quot;</em> --- I wonder why? Could it be because there was strong feedback that it was a bad idea?</p>
<p><em>&quot;the team faced a lot of pushback for its HTTPS web encryption initiative&quot;</em> --- Too right! I don't always agree with Dave Winer, but <a href="http://this.how/googleAndHttp/">on this topic</a>, he makes a lot of sense.</p>
<p><em>&quot;But you make a change and people freak out. &quot;</em> --- Err, yep - of course they do, if it's not a change that's fully thought through.</p>
<p><em>&quot;community scrutiny of any proposal Google puts forth will be crucial&quot;</em> --- This is super important. I know this is just the beginning, and the engineers are talking about ideas, which is more than fine. I hope for everyone's voice to be heard, and that everyone concerned expresses their opinion.</p>
<p>On that point, I've tried to make a start here.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>SAP CodeTalk sessions</title>
      <link href="https://qmacro.org/blog/posts/2018/07/30/sap-codetalk-sessions/"/>
      <updated>2018-07-30T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2018/07/30/sap-codetalk-sessions/</id>
      <content type="html">
        <![CDATA[
      <p>My friend and colleague <a href="https://people.sap.com/ian.thain">Ian Thain</a> organises and hosts the excellent <a href="https://www.sap.com/uk/developer/resources.html">SAP CodeTalk</a> series, that's been going for over five years now, with more than 240 episodes. Nice work, Ian!</p>
<p>I've been very honoured to be a guest on SAP CodeTalk a few times, and I thought it would be worth listing those sessions here.</p>
<p>March 2014</p>
<p><a href="https://www.youtube.com/watch?v=o0CvsQxI6Nw">Paying IT Forward ... IT Does Compute</a></p>
<p>November 2014</p>
<p><a href="https://www.youtube.com/watch?v=r-QszpA-HiI">SAPUI5 &amp; Fiori - Part #1</a></p>
<p><a href="https://www.youtube.com/watch?v=r-QszpA-HiI">SAPUI5 &amp; Fiori - Part #2</a></p>
<p><a href="https://www.youtube.com/watch?v=IEXNLHn9Yus">OpenUI5</a></p>
<p>April 2016</p>
<p><a href="https://www.youtube.com/watch?v=BMz-VQGk9kU">Developer Hero - DJ Adams</a></p>
<p>April 2018</p>
<p><a href="https://www.youtube.com/watch?v=t5V0WRle1xc">SAP Cloud Platform Workflow Service</a></p>
<p>May 2018</p>
<p><a href="https://www.youtube.com/watch?v=3pLz7xCXPHM">Business Rules Service</a></p>
<p>Aug 2018</p>
<p><a href="https://www.youtube.com/watch?v=mm7spFuE5eM">Functional Programming</a></p>
<p><a href="https://www.youtube.com/watch?v=GhEpcB7x4UA">Application Programming Model</a></p>
<p>Oct 2018</p>
<p><a href="https://www.youtube.com/watch?v=IY-amlZuPrs">SAP CodeTalk on Tour</a></p>
<p>Jan 2019</p>
<p><a href="https://www.youtube.com/watch?v=SvmNaTRrTvI">Hands-on SAP dev with qmacro</a></p>
<p>Mar 2019</p>
<p><a href="https://www.youtube.com/watch?v=5RrfPz-Ep8o">Update on 'Hands-on SAP dev with qmacro'</a></p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Collaboration tools</title>
      <link href="https://qmacro.org/blog/posts/2018/05/23/collaboration-tools/"/>
      <updated>2018-05-23T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2018/05/23/collaboration-tools/</id>
      <content type="html">
        <![CDATA[
      <p>If you're wanting to collaborate with me, on a document or other content, please understand I'll only be able to participate if appropriate tools are used.</p>
<p>There are some amazing online tools that allow online multi-user realtime editing, commenting, suggestions, revision management, and so on, and these work very well indeed.</p>
<p>Unfortunately, Office 365, Sharepoint and Teams are not tools that fit into this category and are detrimental to productivity and collaboration.</p>
<p>Thanks.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Balancing features with simplicity</title>
      <link href="https://qmacro.org/blog/posts/2018/05/13/balancing-features-with-simplicity/"/>
      <updated>2018-05-13T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2018/05/13/balancing-features-with-simplicity/</id>
      <content type="html">
        <![CDATA[
      <p>I was browsing forum-based conversations on ChromeOS this evening and came across yet another thread that started along these lines:</p>
<p><em>&quot;I've just bought a Chromebook. How do I use Word on it?&quot;</em></p>
<p>After my initial, and usual <a href="https://www.youtube.com/watch?v=a4GHDKOaN1A">phone-biting</a> reaction, I read a reply that went along these lines:</p>
<p><em>&quot;Soon you'll be able to run Linux apps, so perhaps you could run Libre Office&quot;</em></p>
<p>Apart from that reply instilling a similar &quot;good grief&quot; response, it got me thinking. I have for a while felt slightly disappointed in the explosion of 3-in-1 Chromebook devices, with touchscreens, 180 degree hinge flip capabilities, and the ability to run Android apps. Now there's the prospect of running native Linux apps too.</p>
<p>Now I don't want to appear as a stick in the mud, but this is a little sad. I love the simplicity of ChromeOS as it is, a great browser on a fast device with little else: a secure shell facility for connecting to remote systems, and a simple file manager for when you absolutely need to give the cloud a leg-up by downloading and uploading files from one service to another. I grew up with the keyboard + screen combination; the keyboard shortcuts in ChromeOS are great, which means I use the trackpad on my Pixelbook less than I otherwise would. And I found a <a href="https://www.groovypost.com/howto/disable-the-touchpad-on-a-google-chromebook/">software switch</a> that allows me to turn the touchscreen off. I hardly ever want or need a touchscreen. I just want my web terminal.</p>
<p>I don't want another Linux style OS - if I do, I'd use Linux. And those that know me know that I certainly don't want any Windows type OS - in fact, I don't allow any form of Windows operating system in the house, my son runs macOS and my two nephews' machines have Ubuntu Linux running on them.</p>
<p>I know I'm probably in the minority, but with the prospect of Linux apps coming to ChromeOS, I hope the project team manages to keep that sense of simplicity - and speed - that made ChromeOS so appealing in the first place.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Becoming an SAP Mentor Alumnus</title>
      <link href="https://qmacro.org/blog/posts/2018/03/21/becoming-an-sap-mentor-alumnus/"/>
      <updated>2018-03-21T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2018/03/21/becoming-an-sap-mentor-alumnus/</id>
      <content type="html">
        <![CDATA[
      <p>It was in 2009 that I was honoured to be recognised as an SAP Mentor for my contributions to the SAP community at large, co-creating the original SAP Developer Network back in 2003 (which, via the SAP Community Network, is now the <a href="https://www.sap.com/community.html">SAP Community</a>). Since then I've tried to act as an SAP Mentor should act; there aren't any written rules of course, it's just something that one should know.</p>
<p>In the years since becoming an <a href="https://www.sap.com/uk/community/about/mentors-program.html">SAP Mentor</a> lots of things have happened, and I'm grateful for the opportunities that have presented themselves to me ... as well as the Mentor shirts that take up a decent space in my wardrobe and that I proudly wear at events inside and outside the SAP developer ecosphere.</p>
<p><a href="http:/mcrcoderdojo.org.uk/underwater-scratch/"><img src="/images/2018/03/scratch.jpg" alt="Explaining some facet of our Underwater Scratch project at Manchester CoderDojo"></a></p>
<p>There's an end to pretty much everything though, and I've been planning to retire to SAP Mentor Alumnus status for a while. There are many reasons for this, but the main one is to make way for new blood. I can and will continue to be active in the community - becoming an SAP Mentor Alumnus doesn't mean that changes.</p>
<p>My move to SAP Mentor Alumnus status also coincides with a couple of other events; of course, there's my recent move to <a href="/blog/posts/2018/01/17/coming-home/">join the SAP family</a>, but there's also the end of the term of membership of the <a href="https://blogs.sap.com/2016/03/08/introducing-the-new-sap-mentors-advisory-board-2016-2018/">SAP Mentors Advisory Board</a> (MAB). So I think the timing is right.</p>
<p>Thank you to my fellow SAP Mentors and the programme team, and also to my esteemed co-members of the MAB. I don't see this as a big change - I'm just moving from one group of folks I respect to another.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Thoughts on what&#39;s next for the SAP Community</title>
      <link href="https://qmacro.org/blog/posts/2018/02/02/thoughts-on-what&#39;s-next-for-the-sap-community/"/>
      <updated>2018-02-02T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2018/02/02/thoughts-on-what&#39;s-next-for-the-sap-community/</id>
      <content type="html">
        <![CDATA[
      <p>This evening I watched a short video, <a href="https://www.youtube.com/watch?v=iZVoCV8ryF8">What's Next for SAP Community?</a>, with Björn Goerke, Chief Technology Officer and President of SAP Cloud Platform, and Thomas Grassl, Head of Developer Relations, laying out the vision for the SAP Community. Here are some brief Friday night thoughts.</p>
<p>I have been involved in building and helping the SAP community (small 'c') grow for a long time, from mailing lists in the 1990's, through co-creating the original SAP Developer Network and seeing the changes through the SAP Community Network to become simply the SAP Community (see <a href="https://blogs.sap.com/2005/07/04/the-sap-developer-community-10-years-ago/">The SAP developer community 10 years ago</a>, a post from 2005).</p>
<p>It's been great to see Developer Relations and the SAP Community moving under the wing of the office of the CTO, and with <a href="https://blogs.sap.com/2018/01/16/the-future-of-sap-community/">the backing of CEO Bill McDermott</a>, there's certainly more than enough torque and momentum upon which to build.</p>
<p>The chassis has undergone some significant welding in recent years, but the current remodelling, while still needing some love and attention, is <a href="https://twitter.com/qmacro/status/950628022842994688">so much better for content creators</a>. And without content, there is no community. I'm hopeful that the chassis and bodywork will go from strength to strength, especially with the recently announced <a href="https://blogs.sap.com/2018/01/26/sneak-peak-2018-sap-community-redesign/">2018 redesigns</a>, and we see the rebirth of interconnectivity.</p>
<p>What struck me most about listening to Björn and Thomas on the video just now was my perception of the sense of community being the strong, implicit anchor for the message and the vision. So I decided to transcribe the video, to perform a simple text analysis.</p>
<p>The transcription is <a href="https://docs.google.com/document/d/1xYTh0EYSDNNCfHTcBDG3kpI_4-byPMA6Wfv_rtGz2Yk/edit?usp=sharing">here</a>, and we can see from some simple <a href="http://textalyser.net">textalyser</a> analysis that the perception wasn't too far off - the top five places for word frequencies in the entire piece are (with occurrences in brackets):</p>
<p>1: &quot;our&quot; (12)
2: &quot;community&quot; (10)
3: &quot;sap&quot; (6)
4: &quot;how&quot;, &quot;new&quot;, &quot;customers&quot; (5)
5: &quot;need&quot;, &quot;think&quot;, &quot;help&quot;, &quot;content&quot; (4)</p>
<p>Now it's a short dialogue so perhaps this analysis needs to be taken with a pinch of salt, but it certainly occurs to me that the core message, and the core task, is getting people and knowledge connected.</p>
<p><a href="https://people.sap.com/dj.adams">We can do that</a>, can't we?</p>
<p>Update: I've since been encouraged to re-post this on the SAP Community site itself. So I've done so, here: <a href="https://blogs.sap.com/2018/02/04/thoughts-on-whats-next-for-the-sap-community/">Thoughts on what's next for the SAP Community</a>.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Apps Script - Privacy Policy</title>
      <link href="https://qmacro.org/blog/posts/2018/02/01/apps-script-privacy-policy/"/>
      <updated>2018-02-01T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2018/02/01/apps-script-privacy-policy/</id>
      <content type="html">
        <![CDATA[
      <p>This is the Privacy Policy for the Apps Scripts made available for use. For example, one such script is SheetAsJSON, described in this blog post: <a href="/blog/posts/2013/10/04/sheetasjson-google-spreadsheet-data-as-json/">SheetAsJSON - Google Spreadsheet Data as JSON</a>.</p>
<p>This privacy policy sets out how the scripts use and protects any information that you supply when using them.</p>
<p>We are committed to ensuring that your privacy is protected. We ask for no information, nor is private information required to operate the scripts. This policy is effective from 01 Feb 2018.</p>
<p><strong>What we collect</strong></p>
<p>Nothing.</p>
<p><strong>What we do with the information we gather</strong></p>
<p>We do not gather or keep any information.</p>
<p><strong>Security</strong></p>
<p>We are committed to ensuring that your information is secure. To this end, the scripts runs on the secure Google platform, specifically via the Apps Script services, and data is transferred via secure HTTP.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Coming Home</title>
      <link href="https://qmacro.org/blog/posts/2018/01/17/coming-home/"/>
      <updated>2018-01-17T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2018/01/17/coming-home/</id>
      <content type="html">
        <![CDATA[
      <p>I first encountered SAP in 1987, where, fresh out of university and following an induction course for new graduates at Esso Petroleum in London, I started work in the Database Support Group, which looked after everything related to the database management system that Esso ran on their IBM big iron mainframes. This system was IMS, and my first task was to create a backup and recovery suite for the project that was starting out on the floor above, a project that had  over 100 individual IMS databases. That was a lot of data, and a complex backup and recovery suite!</p>
<p>It turned out that the project was Esso's first implementation of SAP, in the form of R/2 release 4.1D. A short time later I joined the project and entered the (early) universe of SAP technology. This was before ABAP came along, which was actually fortunate, as I got to learn and use IBM's 370 assembler, in which R/2 was written. The design of the architecture, and the codebase underlying the application modules in R/2 was both fascinating and beautiful. (Incidentally it was from within the R/2 assembler framework that I took my online nickname &quot;qmacro&quot;). Combining that with the wonders of all things IBM mainframe (the MVS operating system with tools such as TSO, ISPF and JES2, IMS DB/DC, and of course JCL) and I was hooked.</p>
<p>Fast forward just over three decades. In that time, I've stayed with SAP technologies in roles as diverse as Basis Technician, Application Developer, Integration Expert, Trainer, Backend Programmer, Frontend Programmer, Consultant, Mentor, Troublecauser and Tea Maker, at end customers large and small, partners large and small, sometimes as a contractor and sometimes as a permanent employee. I've also spent a couple of periods at SAP as an external colleague, first in the 1990's on the IS-Oil project, and more recently on the UI5 team.</p>
<p><img src="/images/2018/01/3278.png" alt=""></p>
<p>My interest and passion for SAP technologies has only grown since those early days where my workstation was an IBM 3278 terminal.</p>
<p>SAP technology has changed, some technical directions have come and gone, others have stayed and gotten stronger. One lovely development which continues to grow is SAP's embrace of open source and open protocols, something that's close to my heart.</p>
<p>But what's remained most prominent across the years is the human aspect - the people at SAP are what have made a difference. I remember back in the late 1980's talking directly to the developers of the R/2 batch programs (most memorably in the RA - asset management - module) and exchanging ideas. I also remember site visits from heroes of mine such as Dr Alfred Klar who was at the heart of everything that SAP relied on in IMS terms.</p>
<p>Today is actually no different, which is wonderful. Just yesterday I was corresponding with core developers from the SAP Cloud Platform Workflow service team on nuances of the implications of an HTTP 302 response on POST requests. And last week I was enjoying a couple of craft beers with some of my all-time heroes from the UI5 team in Mannheim.</p>
<p>So with all that in mind, the next and best logical step for me in my career is to become part of the family.</p>
<p>I'm really happy and very proud to say that I'll be joining SAP's Developer Relations team next month, reporting to Thomas Grassl and working alongside some fabulous people. What's more, the recent announcement of the move of Thomas's team, along with the SAP Community, which I helped give birth to all those years ago, to the CTO organisation under Björn Goerke, makes things extra special.</p>
<p>Finally, it seems fitting to title this post &quot;Coming Home&quot;, as I think that's a good description of what I'm doing.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Discovering SCP Workflow</title>
      <link href="https://qmacro.org/blog/posts/2018/01/16/discovering-scp-workflow/"/>
      <updated>2018-01-16T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2018/01/16/discovering-scp-workflow/</id>
      <content type="html">
        <![CDATA[
      <p>The SAP Cloud Platform Workflow service is a key component in the next generation of enterprise solutions - allowing us to coordinate processes and activities across cloud and on-premise systems. It's a relatively young service, and I thought it would be worth digging into it a little bit to learn more.</p>
<p>I've written a series of blog posts in <a href="https://people.sap.com/dj.adams">my (old) space on the SAP Community</a>; here's a quick list of them for reference. While they're hopefully digestible individually, they sort of follow a logical sequence, so if you have the time and inclination, you might want to read them in order.</p>
<h2>Blog post series</h2>
<p>Part 1: <a href="https://blogs.sap.com/2018/01/08/discovering-scp-workflow-the-monitor/">The Monitor</a> - notes on the workflow monitor app that is part of the SAP Cloud Platform Workflow service.</p>
<p>Part 2: <a href="https://blogs.sap.com/2018/01/14/discovering-scp-workflow-instance-initiation/">Instance Initiation</a> - an exploration of the part of the SCP Workflow API that deals with workflow instances, looking at how we initiate a new workflow instance, and paying particular attention to how we request, and then use, a cross site request forgery (XSRF) token.</p>
<p>Part 3: <a href="https://blogs.sap.com/2018/01/16/discovering-scp-workflow-using-postman/">Using Postman</a> - an explanation of how I use Postman to explore the Workflow API, making the most of some of Postman’s great features.</p>
<p>Part 4: <a href="https://blogs.sap.com/2018/01/17/discovering-scp-workflow-service-proxy/">Service Proxy</a> - the presentation of a small proxy service I wrote to handle the minutiae of initiating a new workflow instance.</p>
<p>Part 5: <a href="https://blogs.sap.com/2018/01/18/discovering-scp-workflow-workflow-definition/">Workflow Definition</a> - a look at the simple (beer recommendation) scenario I came up with to trial a workflow definition, and that workflow definition itself.</p>
<p>Part 6: <a href="https://blogs.sap.com/2018/01/20/discovering-scp-workflow-user-tasks/">User Tasks</a> - an examination of user tasks within the wider context of workflow definitions, along with task UIs and how they fit into the context of the My Inbox app.</p>
<p>Part 7: <a href="https://blogs.sap.com/2018/01/22/discovering-scp-workflow-component-startup/">Component Startup</a> - an investigation into how a task UI starts up, where it gets the right data to display, and how it interacts with the My Inbox &quot;host&quot; app.</p>
<p>Part 8: <a href="https://blogs.sap.com/2018/01/24/discovering-scp-workflow-recommendation-ui/">Recommendation UI</a> - a look at the specific task UI I wrote for the beer recommendation workflow.</p>
<p>Part 9: <a href="https://blogs.sap.com/2018/01/26/discovering-scp-workflow-script-tasks/">Script Tasks</a> - a look at what they are, and how you can use them to manipulate the context of a workflow from within a running instance.</p>
<p>Part 10: <a href="https://blogs.sap.com/2018/01/29/discovering-scp-workflow-service-tasks/">Service Tasks</a> - a brief excursion into calling other services from within a workflow, using the beer recommendation workflow scenario as an example.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Consumption-based SCP Pricing - Initial Thoughts</title>
      <link href="https://qmacro.org/blog/posts/2018/01/10/consumption-based-scp-pricing-initial-thoughts/"/>
      <updated>2018-01-10T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2018/01/10/consumption-based-scp-pricing-initial-thoughts/</id>
      <content type="html">
        <![CDATA[
      <p>Back in August 2017 I <a href="/blog/posts/2017/08/08/sap-cloud-platform-pricing/">made some observations on SAP Cloud Platform Pricing</a>. I had been somewhat underwhelmed by the clarity and flexibility, particularly for smaller projects and businesses.</p>
<p>This week saw the <a href="https://twitter.com/steinermatt/status/950297124461101056">announcement</a> of a brand new pricing approach and website for the SAP Cloud Platform (SCP), which, judging by the reaction, was a very welcome piece of news. To many, the key change is the introduction of a consumption-based pricing model, as an alternative to the existing subscription-based model. Not only that, but the website offers a pricing estimation calculator which, if I've done things right, shows that consumption-based costs for the small project I described in my earlier post are not unreasonable.</p>
<p>It's still early days but the situation looks much better. As well as the cost, which I'll get to shortly, there are improvements in the two areas that were causing concern last time I looked - clarity and flexibility.</p>
<p>The very fact that the consumption-based model allows you to pick what services you want, without having to perform mental gymnastics while looking at a complex PDF document (which still exists for the subscription-based model), is a big plus. There's also a guided section which shows which services are additionally required, if any, and lets you add those to the estimate. For example, the use of the Workflow service requires the Portal and Web IDE services. The fact that you can turn the dial up and down on units (number of users, site visits, etc) and see the estimate change accordingly, is great.</p>
<p><img src="/images/2018/01/Screenshot-2018-01-10-at-06.33.12.png" alt="estimate"></p>
<p>Moreover, as you can see from the estimate I quickly put together just now, to reflect Workflow and Business Rules services, the monthly cost is not scary. Of course, it could always be lower, but in the context of a real project and subsequent productive use, the fee is minor.</p>
<p>I've just scratched the surface here, and will be digging to this a little more over the coming weeks. There are few things I'd like to see already. For example, the estimate calculator itself is a little slow to load (I've just gone back to it and only have a busy spinner right now). And I saw somewhere that Business Rules is included when you choose the Workflow service, but I don't see this confirmed in the estimate summary.</p>
<p>Overall, I think this is a very good step in the right direction and gives SCP more than a fighting chance to compete. It's hard to consider a service if the usage costs are opaque and / or prohibitive. This new pricing announcement heralds changes that can only be seen as positive.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Things I do to make my work life better</title>
      <link href="https://qmacro.org/blog/posts/2017/08/30/things-i-do-to-make-my-work-life-better/"/>
      <updated>2017-08-30T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2017/08/30/things-i-do-to-make-my-work-life-better/</id>
      <content type="html">
        <![CDATA[
      <p>IT and consulting. Two words that can conjur up thoughts of magic, awe and wonder. But like any other business, it has its challenges and you need to have your wits about you to survive and grow. Here are five things that I strive to do in this context.</p>
<p><a name="learn"></a></p>
<h2><strong>Make time to learn</strong></h2>
<p>If there's one thing that's constant in IT and consulting, it's change. Yes, that's a cliché, but it's definitely true here. And unless you're happy becoming eventually obsolete, you need to keep learning. It doesn't come easy - days are busy, coffee breaks are a welcome relief where you can let your brain coast and process thoughts in the background, and in the evenings you're tired.</p>
<p>So plan in time for yourself to read. Have a focus on a certain topic or area, and make it your plan to work through all the material you can find. Set aside some &quot;time for me&quot; - it's not indulgent, it's a key aspect of being a good consultant. I'm an early riser, so after a run, I give myself 30 mins each morning to catch up on articles I've bookmarked.</p>
<p>Learning isn't just about reading of course, there's putting knowledge into practice too, and you have to make time for that as well. That might be at weekends if you find yourself with a bit of time on your hands, but it might just be as well while commuting, or an hour before the &quot;main&quot; day starts, say 0800-0900. Don't feel guilty - go for it. Nobody else is going to carve out the time for you.</p>
<p>(You may be interested to read this post I wrote about reading and learning: <a href="https://blogs.sap.com/2009/11/05/tech-skills-chat-with-jonerp-a-follow-on-story/">Tech Skills Chat with JonERP – A Follow-on Story</a>).</p>
<p><a name="email"></a></p>
<h2><strong>Don't be a slave to email</strong></h2>
<p>There are so many articles on this subject I don't need to go into detail here. But I wanted to share a few of things I do in this regard that work well for me.</p>
<p>First, though - let's talk about attitude. Resist the temptation to be influenced by people who expect you to respond to an email minutes after they've sent it. Email is not work. Work is work. Email is communication - and asynchronous communication at that. Don't let them dictate your activities, and don't treat your email like a to-do list, because it won't be <em>your</em> to-do items on there!</p>
<p>So, here are the things I do that I recommend you do too. First, turn off all email notifications and alerts on all your devices. They only serve to distract you from what you're trying to do.</p>
<p>Second, discipline yourself to process email a few times a day. Don't have the email client running at any other time. This may be hard to do at first, especially if you're relying on your email client to remind you of meetings and events. But if you turn off notifications and minimise the client, that may be good enough. A side effect of applying this discipline is that it will eventually teach your colleagues that discipline too, at least in terms of expectations. And you can always send them (a link to) a polite note like this one: <a href="/blog/posts/2015/07/03/email-discipline/">Email Discipline</a>.</p>
<p>Finally, build a rule to handle your incoming email, splitting it on whether you've been directly addressed (in the &quot;To:&quot; list) or not (in the &quot;Cc:&quot; list). Divert to a &quot;CC-Inbox&quot; folder those emails where you've only been CC'd,  and only check this folder once every two days or so.</p>
<p>If folks ask you do to something and they've not directly addressed you, that's bordering on rude. Resist the temptation to do it, and if they chase you on something, you can send them (a link to) a polite explanation like this one: <a href="/blog/posts/2014/11/14/addressing-emails/">Addressing Emails</a>.</p>
<p>Managing email is not only about managing yourself, but about managing others.</p>
<p><a name="meetings"></a></p>
<h2><strong>Set reasonable meeting expectations</strong></h2>
<p>There are as many articles on meetings as there are on emails, so I can be brief here too. Time is the most precious commodity. Some meetings are necessary, but they're the minority, especially if you're technical and have work to do. Here's what I do. Not everything all of the time, but when it feels appropriate.</p>
<p>If a meeting is longer than half an hour, ask if it can be shorter. Resist accepting meeting requests that are over an hour, or reply tentatively saying you can make the first hour. Meetings that have the &quot;luxury&quot; of more than 60 minutes tend to squander those minutes and be almost naturally more inefficient.</p>
<p>Don't accept meeting requests that lack information (such as dial in details, or an agenda). You can send the requester (a link to) a polite note like this one: <a href="/blog/posts/2017/05/10/meeting-request-details/">Meeting Request Details</a>.</p>
<p>If I'm working at a client, I allow myself up to a maximum of two 30 minute calls. I can absorb this time into an earlier start, a later finish, or some of my lunch, depending on how generous or hungry I'm feeling. If I'm working at a client and they're being billed for it, it's not appropriate to use that time for other work. You shouldn't do it, and your colleagues shouldn't expect you to either.</p>
<p>Finally, don't waste your time if a meeting doesn't start on time. I usually wait for up to 5 minutes into the call (sometimes 10 minutes if I'm feeling generous and can work on stuff while I wait) and if it hasn't started, I'll leave the call.</p>
<p><a name="lunch"></a></p>
<h2><strong>Make time for lunch</strong></h2>
<p>I try to step away from the keyboard at lunch. It doesn't work all the time, and sometimes it's because I am putting some of my learning into practice. But your brain needs time to process what it's been working on during the morning, and it's not going to be able to to if you're still in front of the screen.</p>
<p>Stepping away is a discipline I learned from practising the Pomodoro technique (see the post <a href="/blog/posts/2015/03/15/the-makers-schedule-restraint-and-flow/">The Maker's Schedule, Restraint and Flow</a>), and I do find it helps to re-find focus, even if you're not thinking about it explicitly.</p>
<p>Also, lunch time isn't fixed. My day starts early, which means lunch for me is around 1130. That's great, because when I get back from my lunch, others are just going, which means a little more peace than the rest of the day :-)</p>
<p><a name="people"></a></p>
<h2><strong>Remember it's the people that matter</strong></h2>
<p>If I'm honest, it's taken me a while to come to this conclusion. I've been fortunate recently to move into a position where I can look after a team of folks who are all amazing, technically and otherwise. And through my career hacking on SAP technology, it's been the <a href="https://twitter.com/qmacro/status/902434375010275328">people that matter</a>.</p>
<p>I try to think what I can do to help them. Not all the time, I'm not that saintly. But when I can, when I'm mindful of what's important, I try to make time. I've been in this business for three decades now, and it stands to reason that I probably have some wisdom to share, even if it's &quot;don't do that, I did, and it's not good&quot;.</p>
<p>There's this idea of being a 10x developer. I'm not sure if this is just mythical or metaphorical, but there's a simple truth in there which is that a good way for one person to scale is by making other folks better. And that's what I'm trying to learn to do now.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>SCP Business Rules Roadmap - 5 Observations</title>
      <link href="https://qmacro.org/blog/posts/2017/08/26/scp-business-rules-roadmap-5-observations/"/>
      <updated>2017-08-26T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2017/08/26/scp-business-rules-roadmap-5-observations/</id>
      <content type="html">
        <![CDATA[
      <p>I discovered the relatively new <a href="https://cloudplatform.sap.com/capabilities/integration/business-rules.html">Business Rules service</a> on the SAP Cloud Platform (SCP) through recent SAP Community posts from Christian Loos, and from Murali Shanmugham. If you haven't read Murali's series &quot;<a href="https://blogs.sap.com/2017/07/31/implementing-a-user-self-registration-scenario-using-workflow-and-business-rules-in-sap-cloud-platform-part-1/">Implementing a user self-registration scenario using Workflow and Business rules in SAP Cloud Platform</a>&quot;, introducing and combining the Workflow and Business Rules services, you should do.</p>
<p><strong>Roadmap available</strong></p>
<p>I started to dig in to the Business Rules services this month, and liked what I saw. But there were things that were missing, in my opinion, so I've been eagerly awaiting an update to the roadmap. And this week we got one - Business Rules has its own roadmap:</p>
<p><a href="https://www.sap.com/documents/2017/08/2a8094b1-ce7c-0010-82c7-eda71af511fa.html">SAP Product Roadmap - SAP Cloud Platform Business Rules</a> (dated 22 Aug 2017)</p>
<p><strong>Observations</strong></p>
<p>It's been updated to reflect the next few quarters. I read through it this morning, and have some observations on what I read, which I wanted to share:</p>
<ol>
<li>While it may be early days (Business Rules only <a href="https://twitter.com/qmacro/status/895623419403939840">went GA</a> recently), this diagram shows how important the service is in the grand scheme of things:</li>
</ol>
<p><img src="/images/2017/08/Screen-Shot-2017-08-26-at-07.38.55.png" alt=""></p>
<p>SAP intends to establish a common Enterprise Rule Model, an abstraction for design time and runtime across the different platforms today (their SaaS offerings as well as classic ABAP stack based systems and S/4HANA). And the focus for this model is clearly on SCP.</p>
<ol start="2">
<li>Extracting business rules out of codebases seems like a novel idea, but it's what's been happening since even I started with SAP R/2 back in the 1980's. But then, and even over the last few decades, the rule sets - in this case table-based configuration - have still been coupled with the codebase in that the lifecycle has been governed by the IT processes that are designed (rightly so) to protect the core and are not particularly agile.</li>
</ol>
<p>The Business Rules service is the next step in that not only are rule sets extracted, but also the execution, in the form of the runtime(s), and access to that execution, is available as a set of API-based services in the cloud. This does indeed lead to agility, business empowerment, legacy preservation and cost savings, as well as readability and reasonability.</p>
<ol start="3">
<li>
<p>SAP Leonardo needs a posse. Machine Learning and Internet of Things is all very well, but without a set of core services to <em>do something</em> with the intelligence and the data, we're not going to get very far. The Business Rules service seems an ideal candidate for mixing into the strategy here.</p>
</li>
<li>
<p>Deprecation is a fact of software life, and we see it here with the HANA based decision tables and rules framework (HRF), in favour of the (to-be) all-encompassing Business Rules service. It's a bold move, but the right one if we're to reach any sort of standardised business rule authoring, storage and processing across the wider SAP ecosystem.</p>
</li>
<li>
<p>Still missing right now is some sort of transport mechanism. Right now, even though the product is GA, there's no way I can see to manage the design time artifacts and transport them through DEV/TST/PRD tiers. There's the ability to manage rules from an active/inactive perspective in the repository, but that's still only within one subaccount. I even looked at the network calls behind the scenes to see what would be needed to build a DIY rule set extractor. But it was pretty complex and I wanted to go out for a run, so I shelved that idea :-)</p>
</li>
</ol>
<p>So in Q3/2017 there are plans for a &quot;REST API for SAP Enterprise Rule Model&quot;. I am interpreting that as what I'm looking for: to be able to manage the lifecycle and transport of artifacts across the landscape. Here's hoping!</p>
<p><strong>Final thoughts</strong></p>
<p>When I first came across the Business Rules service, I did wonder in some respects what purpose an extracted form of logic processing would serve. But on reflection, it's clear. Along with managing workflow (lowercase &quot;w&quot;), managing decisions which belong in the business is a key cornerstone of any successful organisation. It's early days for the service, and along with the missing transport mechanisms the UI is still a work in progress, I think, but it's definitely good enough for now, and I'm keeping an eye on things for sure.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>SAP Cloud Platform Pricing</title>
      <link href="https://qmacro.org/blog/posts/2017/08/08/sap-cloud-platform-pricing/"/>
      <updated>2017-08-08T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2017/08/08/sap-cloud-platform-pricing/</id>
      <content type="html">
        <![CDATA[
      <p>I'm looking into the <a href="https://cloudplatform.sap.com/pricing.html">pricing for SAP Cloud Platform services</a> and, well to be honest, not particularly liking what I see.</p>
<p>Recently I've been pleasantly encouraged by new services such as Workflow and Business Rules becoming available on the (free) trial cloud platform, which is great. I get to learn about the features and try things out. Encouraged by what I find, even in these services' early days, I decide to inform myself of how much an organisation would have to pay for these services.</p>
<p>So I follow the links and end up in the <a href="https://cloudplatform.sap.com/pricing.html">SAP Cloud Platform Pricing &amp; Packaging</a> area, which is a little bit too high level for what I'm looking for. Fortunately, I think, there's a link to a (PDF) <a href="https://cloudplatform.sap.com/content/dam/website/skywalker/en_us/PDFs/SAP_Cloud_Platform_Pricing_May2017.pdf">pricing document</a> (the URL for this particular resource suggests a date of May 2017).</p>
<p>(Update 11 Aug: SAP has removed that May 2017 PDF and replaced it with a new one with a resource name containing something that looks almost but not quite like a date, so I can't tell what it is: <a href="https://cloudplatform.sap.com/content/dam/website/skywalker/en_us/PDFs/SAP_Cloud_Platform_Pricing_82017.pdf">SAP-Cloud-Platform-Pricing-82017</a>)</p>
<p>(Update 31 Aug: Seems this new pricing PDF has disappeared, and also the link from the overview pricing page has been removed)</p>
<p>(Update 01 Sep: Another new pricing PDF appeared today! <a href="https://cloudplatform.sap.com/content/dam/website/skywalker/en_us/PDFs/SAP_CP_Pricing_September_2017.pdf">SAP-CP-Pricing-September-2017</a>)</p>
<p>Let's say I'm interested in putting together a small project using the Workflow service and also the Business Rules service, for a small department - about 25 users. I'm going to leave out any thoughts of storage and DB processing for now, and focus on the business services, but will want to deploy some integration scenarios to interface with my existing systems.</p>
<p>Here are my observations when trying to figure out what it will cost.</p>
<p>The main pricing page is not much use, because it doesn't tell me whether the Workflow service and the Business Rules service are included in any of the packages. I do note, however, that the &quot;for medium business&quot; package versions are perhaps what I'm looking for, as they're &quot;perfect for midsized businesses or departments&quot;. While looking at the costs for these medium business packages, I see that the &quot;multiple application edition&quot; is &quot;now&quot; €59 / user / month, not much more than the &quot;single application edition&quot; at €39 / user / month. Has there been a price drop? Let's see.</p>
<p>I start reading the pricing document PDF and see that instead of €59 / user / month, the &quot;multiple application edition&quot; is twice the price, at €118 / user / month. I guess (that's all I can do) that the &quot;now&quot; on the website does denote a price drop. Good. A 100% jump to go from one application to two is a little steep.</p>
<p>So what about the specifics? The high level info is OK, but I need detail. I jump to the &quot;Table 1&quot; which gives me some more info. The &quot;Enterprise Package&quot; (sic) pricing looks much more than I'd like to consider shelling out for my department (starting at €1,500/month, through to €15,000/month), so I stay with the &quot;Medium Business Packages&quot; and see that there's a minimum number of users (10). That's OK, I have 25.</p>
<p><img src="/images/2017/08/Screen-Shot-2017-08-08-at-07.50.14.png" alt=""></p>
<p>In examining the first part of Table 1, I notice that it's only the &quot;multiple application edition&quot; that will allow me to partake of the Integration services. So I'm already forced to go down that route (even for a single application). Hmm. Even if I jump back into the Enterprise Package options, I can't take the €1,500/month route, I have to start with €4,000/month &quot;professional edition&quot; to get Integration.</p>
<p>As an aside, I had been very interested in the API Management service, but as it stands with pricing right now, the only option I have to use that service is to go for broke and shell out €15,000/month for the Enterprise Package &quot;premium edition&quot;. No thanks.</p>
<p>Time to turn my attention to the Workflow and Business Rules services, in which I'm mostly interested. I scroll down Table 1 and don't find them anywhere. All I see is &quot;Add a-la-carte-Resources&quot;, so I jump further down the document to &quot;A-la-carte Services&quot; (sic) and find the Workflow service, thus: &quot;Monthly Tiered Fee, Min. 100 users, €1.75-€3/user/month&quot;. Ouch. I have to pay monthly for 100 users, even though I have only 25? And what's the difference between €1.75 and €3? It doesn't say.</p>
<p>Let's look for the Business Rules service. It's pretty new on the scene, and ... yes, as I thought - pricing is lagging behind. No mention of this service at all in either the pricing overview page or in this detailed pricing document. Oh dear.</p>
<p>To put the final nail in the coffin for this coffee time endeavour, I scroll back up, trying (in vain) to see if I've missed anything on the Business Rules service. No, I haven't (tho it's not GA yet). But what I do notice is that the a-la-carte options ... aren't even a possibility for customers going for per-user pricing: Neither of the Medium Business Packages offer the possibility of adding a-la-carte services. So I have to abandon my plans to go for a Medium Business Package route and consider the Enterprise Package route instead. That's crazy.</p>
<p>The SAP Cloud Platform is growing, going from strength to strength. And we're growing with it, businesses and consultants alike. But SAP isn't doing themselves any favours, by not making it easy to commit to championing these platform services and including them in demos and proof of concept solutions. Without clear, transparent, simple and reasonable pricing, it seems as though SAP are leaning against the door that we're trying to lever open.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Fix Blink</title>
      <link href="https://qmacro.org/blog/posts/2017/07/18/fix-blink/"/>
      <updated>2017-07-18T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2017/07/18/fix-blink/</id>
      <content type="html">
        <![CDATA[
      <p>If you want to get rid of the rather distracting blinking text (&quot;Supported browser versions&quot;) in the timesheet system, use this bookmarklet. Assuming you're using the Chrome browser (if you care about standards, security and performance why would you not be?), do this:</p>
<p><strong>Step 1: Make sure your bookmark bar is visible</strong></p>
<p>See the help article <a href="https://support.google.com/chrome/answer/95745?hl=en-GB">How to use the bookmarks bar</a> for more details on this.</p>
<p><strong>Step 2: Drag this link to the bookmark bar</strong></p>
<p><a href="javascript:(function(){ blinkeffect = function() {};})();">Fix Timesheet Blink</a></p>
<p>It's called a &quot;bookmarklet&quot; and is a bit of JavaScript code.</p>
<p><strong>Step 3: Click the bookmarklet when you're in the Timesheet</strong></p>
<p>Whenever you start up the timesheet system, click the bookmarklet once you're in ... and breath a sigh of relief.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Meeting Request Details</title>
      <link href="https://qmacro.org/blog/posts/2017/05/10/meeting-request-details/"/>
      <updated>2017-05-10T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2017/05/10/meeting-request-details/</id>
      <content type="html">
        <![CDATA[
      <p>Meetings are a fact of business life. Some are necessary, some less so. But in all cases, meetings can be improved by having a clear understanding of the intended discussion topics and the desired outcome up front.</p>
<p>This can easily be described in the meeting request itself, allowing the invited participants to prepare properly and share a common purpose with the others.</p>
<p>A meeting request with nothing in the description is not a meeting request, it's just a request for time, which is the most precious commodity. We can fix this by ensuring there's something in the body covering the topic and those outcomes.</p>
<p>Let's do that.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Google Cloud Functions + Sheets + Apps Script + Actions On Google = WIN</title>
      <link href="https://qmacro.org/blog/posts/2017/04/30/google-cloud-functions-+-sheets-+-apps-script-+-actions-on-google-win/"/>
      <updated>2017-04-30T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2017/04/30/google-cloud-functions-+-sheets-+-apps-script-+-actions-on-google-win/</id>
      <content type="html">
        <![CDATA[
      <p>Sometimes, a perfect storm of technology comes along. I'd recently been teaching myself about <a href="https://cloud.google.com/functions/">Google Cloud Functions</a>, and had created a function to service our <a href="https://untappd.com/user/qmacro">Untappd</a> beer searches in the #craftbeer channel for our organisation's Slack community. It replaced an ageing PHP script that I'd sellotaped together and had been hosting on my website. I now don't have to worry about hosting it, and it's a lot faster too.</p>
<p>Roll on a few weeks and I start to hear about <a href="https://developers.google.com/actions/">Actions on Google</a>, <a href="https://api.ai/">API.AI</a> and the <a href="https://assistant.google.com/">Google Assistant</a> infrastructure. Cut to today, and I'm so enamoured with how the platform is panning out that I've already bought a Google Home device and I'm trying out my own test actions already[^n].</p>
<p>I'm a big fan of the Google Apps platform, <a href="/tag/appsscript/">in particular Apps Script</a>. The combination of server-side JavaScript with the rich access to the Apps platform and data makes it very easy to build and deliver very useful services. I put together the <a href="/blog/posts/2013/10/04/sheetasjson-google-spreadsheet-data-as-json/">SheetAsJSON</a> service back in 2013 and I, along with others, still use it today.</p>
<p>So it wasn't unusual for me to think of Apps and Apps Script as a natural set of tools in building out some Actions on Google functionality. I had watched the recording of the excellent session <a href="https://www.youtube.com/watch?v=7e0RGIul8Kk">Extending the Google Assistant with Actions on Google (Google Cloud Next '17)</a> with Guillaume Laforge and Brad Abrams and thought that their example action - a conference helper to assist with discovering topics and sessions - was not only useful, but also ideal for taking my learning to the next level. I studied the content carefully and came up with my own version. Theirs was using an API endpoint that looked like this: <code>http://cloudnext.withgoogle.com/api/v1/...</code>, and is represented by the &quot;Next&quot; box in this slide (from the session):</p>
<p><img src="/images/2017/04/Screen-Shot-2017-04-30-at-09.09.26.png" alt=""></p>
<p>If I was to build my own version, I'd have to come up with a service of my own. This is where the Apps platform and Apps Script came in. First, conference session data lends itself to being marshalled into rows and columns, and at least for me, seeing data in front of me in a structured form really helps. So grabbing the data for a conference and putting it into a spreadsheet was the logical first step. But it only got better from there.</p>
<p>Spreadsheets are about storing and managing data, but that data and management is dynamic. Having calculated values is a completely natural thing, and the spreadsheet model of values dependent on other values is powerful, especially when you want to manipulate the data, say, for testing and discovery purposes. Moreover, for developing the natural language that you want for your action's persona, it's a good way of setting up data circumstances that warrant a particular figure of speech or turn of phrase in the response you're building.</p>
<p>So I stored the conference data for my version of the helper in a Google spreadsheet, enhanced it with some calculated values, and then wrote some simple Apps Script to provide an API to that data set. So that combination became the equivalent to the &quot;Next&quot; box in the slide shown earlier.</p>
<p>Here's a demo of my helper in action, including a look at the spreadsheet and how the data is surfaced in speech:</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/98SNObLdZH8" frameborder="0" allowfullscreen></iframe>
<p>If you're curious to see what the Apps Script based API produces, here's an example from the call to retrieve the topics (ie the one called to be able to fulfil the 'list-topics' intent):</p>
<p><img src="/images/2017/04/Screen-Shot-2017-04-30-at-16.49.44.png" alt=""></p>
<p>Note that the topics (Data Science, Security, Chrome OS and so on) are returned in a map, where the properties are the topics and the values are the lists of sessions for each of those topics. The data thus retrieved is stored in the relevant context, so that once the user has heard about the topics available and wants to explore the related sessions, the data is available immediately without a further call needed to the service API.</p>
<p>Anyway, I'll leave it there for now. The writing of this post was spurred on by <a href="https://twitter.com/erickoleda">Eric Koleda</a> who <a href="https://twitter.com/qmacro/status/857992647763517441">asked me to share a demo</a> - thanks for the prompting, Eric!</p>
<p>If there's interest, there's a lot to talk about in future posts. Some topics that come to mind are:</p>
<ul>
<li>using speech adjunct functions for a more human and random approach to responses</li>
<li>using other helper functions to properly enunciate lists and single / multiple values</li>
<li>generating entity data in the spreadsheet and uploading to API.AI</li>
<li>using meta entities (!)</li>
<li>managing contexts</li>
<li>dealing with the fact that &quot;in conversation, there are no errors&quot;</li>
<li>the structure of a typical fulfillment service</li>
<li>balancing API calls and where things are computed</li>
<li>the need (or not) to cause recalculations in the &quot;unattended&quot; spreadsheet</li>
<li>testing approaches</li>
<li>the development, testing and deployment workflow that I've put together, that works well for me</li>
</ul>
<p>[^n]: One particularly irksome issue right now is that to get actions to work, I have to switch the Home device to US English, which just doesn't feel right ... and the locale-related changes that come with that switch mean that temperatures that are consequently given in Farenheit don't mean anything to me ;-)</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>YABP - Yet Another Blogging Platform</title>
      <link href="https://qmacro.org/blog/posts/2017/04/29/yabp-yet-another-blogging-platform/"/>
      <updated>2017-04-29T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2017/04/29/yabp-yet-another-blogging-platform/</id>
      <content type="html">
        <![CDATA[
      <p>I've been blogging <a href="http://qmacro.blogspot.co.uk/2000_12_24_archive.html#1780991#1780991">since the end of 2000</a>. In that time, I've moved platform a few times. I've gone from Blogger/Pyra back in the beginning, through Moveable Type, the wonderful <a href="/blog/posts/2002/04/21/hello-blosxom/">Blosxom</a>, and more, ending up most recently with WordPress.</p>
<p>I discovered Ghost a while back, and am using it to host another blog of mine - <a href="http://langram.org/">Language Ramblings</a>. Its simplicity reminds me a lot of Blosxom, plus there's my composition language of choice built in - Markdown. So before embarking on some new blogging, I thought I'd change over from WordPress to Ghost, which, as you can see, I've done.</p>
<p>I've exported the content from my old platform and imported it here. I'm currently running the instance on a different port, locally on my server, and reverse-proxying the <code>/</code> path from my Apache install to it. There will be a few rough edges over the next few weeks, where I need to sort out relative paths for a lot of the URLs, so please bear with me. But I feel the effort will be worthwhile. The lack of friction I feel with the Ghost platform is definitely something I'm embracing.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Best practices for mobile reporting</title>
      <link href="https://qmacro.org/blog/posts/2017/02/27/best-practices-for-mobile-reporting/"/>
      <updated>2017-02-27T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2017/02/27/best-practices-for-mobile-reporting/</id>
      <content type="html">
        <![CDATA[
      <p>To put together a mobile reporting solution, there's a lot to consider. In this post, we show you how to start off and remain on the right track to deliver a solution that really works for your users.</p>
<p>Best practices in any technical endeavour apply to each and every stage and building a mobile reporting solution is no exception. Here, in Bluefin's Mobility, User Experience and Development Centre of Excellence (MUD CoE for short!) we find it useful to align our thinking with the flow mantra that SAP have popularised: Discover, Design, Develop, Deliver. (There's also a fifth &quot;D&quot;, but you can read about that in another post: <a href="/blog/posts/2017/01/12/debugging-sap-fiori-apps-the-fifth-%22d%22/">Debugging SAP Fiori apps - the fifth &quot;D&quot;</a>.)</p>
<p>Here are some best practices for you to consider when contemplating a mobile reporting solution, organised by the stages in that flow. Whether it's adopting a pre-built solution or rolling your own, these principles will keep you on the right track.</p>
<h2>Discover</h2>
<p>If you're going to make big decisions, make them up front, in the Discover phase. And if you're going to change your mind, it's least costly to do it at this stage. You haven't committed yet and therefore have the ultimate luxuries in decision making - the most time and the least pressure.</p>
<h3>1. Ask the hard questions</h3>
<p>Back in the late 1980's I was on an SAP system migration project (from R/2 to R/3) and a business analyst friend related to me some of the results of the &quot;reporting requirements analysis&quot; he'd carried out with the users. For one of the reports that had been designated &quot;must have&quot;, he had interviewed the report recipient to find out more about what they did with it. The response: &quot;I receive the report&quot;. When questioned what they did after that, he got: &quot;I put it in the bin&quot;.</p>
<p>The Discover phase is where you should start asking the hard questions. In the case of building a mobile reporting solution, those hard questions should be designed to qualify the mobile approach in or out. There's no point in doing it further down the line. Once the personas have been established, ask them: What do they actually need to do? (&quot;Look at the report while mobile&quot; is not an adequate response). Why do they need to do it on a mobile device? What manipulations do they expect to be able to perform?</p>
<p>Some data visualisations work well on small form factors, some don't. What's possible, and what you should attempt, are often two very different things. Understand the reasons behind the requirements before moving on to Design.</p>
<h3>2. Think &quot;online first&quot;</h3>
<p>Building solutions that work effectively offline is hard. Don't let anyone tell you differently. Yes, you can cache data on the client, but ensure you have calculated the cost-benefit ratio. How old can you allow the data to be? How much processing power does the client need to have to be able to perform aggregations locally? Does building data manipulation into the client restrict the choice of target device? Will you need to deliver and maintain separate OS-native versions of your reporting solution, or will you be able to embrace the Web-native philosophy and use the power of your backend systems into which you've poured a ton of enterprise budget as well as ton of enterprise data?</p>
<p>Finding the right balance between realtime and stale data, and juxtaposing that with the balance of client performance and flexibility is something you need to achieve. Make sure you do it, and do it up front.</p>
<h2>Design</h2>
<p>Discovery morphs eventually into design, which is equally as important. Once you have the outline solution, you need to refine it so that not only will it be useful, but deliverable too.</p>
<h3>3. Encourage the solution's use</h3>
<p>Leading a horse to water and making it drink are two separate things. So are making a reporting solution available and getting the users to engage with the data. Once you've identified the solution approach at a high level, you need to design it to be as engaging as possible. It's time to mention User Experience (UX), and in particular, to consider what aspects are required to make good UX a reality in the case of a mobile reporting solution.</p>
<p>Time-to-Insight is a term I've just made up, but it expresses one of the key aspects - and that is friction. Or, rather, the lack of it. How many clicks through a User Interface (UI) do my users need to get to the data they want to see, to find the insight that's waiting for them to discover?</p>
<p>Remove friction by implementing Single Sign On (SSO) and allowing them to personalise their reporting preferences, either explicitly or implicitly (by observing and learning from behaviour). Consider UI aspects beyond the actual reporting presentation software itself. In the case of the Fiori Launchpad, for example, there's a blurring of distinction for many when it comes to analytics and <a href="/blog/posts/2016/03/29/the-sap-fiori-launchpad-as-a-dashboard-for-my-running-kpis/">dashboards</a> - dynamic launch tiles can be enough for a user to satisfy some of their insight needs. Additionally, consider notifications at the device level, which serve to alert users to changes in data circumstances and nudge them towards the solution.</p>
<h3>4. Remain open to platform options</h3>
<p>Your IT department's device hardware policy may very well be a constraint in designing a mobile reporting solution, but in fact it's not as restrictive as you might first think. Have an Apple iPad only policy, or a Galaxy Tablet only policy? That doesn't mean the design of the solution needs to be iOS or Android native. When it comes to mobile, there are three general platform options: OS-native, Web-native and Hybrid. The general pros and cons of each have been compared many times before and I won't re-hash that old chestnut here.</p>
<p>Let the requirements defined in the Discovery phase drive this part of Design. If you have a choice, ask yourself first why you wouldn't start with Web-native. The other two options only serve to restrict the target audience for the second most valuable asset your company has (yes, I'm saying that the most valuable assets are the people, in case you hadn't realised the extent of how much old age has mellowed me).</p>
<p>Develop
You've moved down from 50,000 feet in discovery, through 10,000 feet in design, and now you're at ground level, ready to bring the solution to life. Here are a couple of things you must consider if you want to make your mobile reporting solution sing.</p>
<h3>5. Work out where your data resides</h3>
<p>The data that will power your reports has different aspects. Location: Where is the source of truth? Stability: How often does it change? Size: How much of it is there, and what are the aggregation requirements? Different parts of the data set you're using will look different across these aspects.</p>
<p>This means that you can - and must - consider the best way to manage that data. Can you preload and cache sets of values that don't change frequently? If so, how much can you afford to store on the mobile device, and how do you make the initial load painless? How much processing is required to present the data in a way that's meaningful to the user? Do you push aggregation and calculations to the server side, or rely on the device to process that locally? How does this link with users' understanding of &quot;works offline&quot;?</p>
<p>The answers to these questions should inform how the solution is developed, whether that's a solution based on standard tools, or a completely custom approach.</p>
<h3>6. Use adaptive techniques</h3>
<p>As likely as not, the question of &quot;what 'mobile' means&quot; will have surfaced in the Discovery or Design phase. If you've got to the Develop stage and it hasn't, that's a big warning sign meaning you may want to consider iterating back through those previous stages.</p>
<p>The mobile platform as a target for any application solution is naturally unstable. New devices are coming out all the time, with different capabilities and screen sizes. If you look carefully at the history of the SAP Fiori Design documentation, you'll notice that one of the 5 key principles was quietly changed, without so much as a browser alert message. &quot;Responsive&quot; became &quot;Adaptive&quot;, and signalled a subtle shift in the philosophy that drives how apps should respond to being executed on different devices.</p>
<p>An adaptive approach should be a key consideration in how the user interface (UI) is developed. A great example of how this can be achieved is by using the facilities presented by SAP's UI5 toolkit. The support for mobile devices, device detection, and dynamic view declarations go a long way towards helping you create a solution that works not just on one device, but many, now and into the future.</p>
<h2>Deliver</h2>
<p>It's almost time to let your users loose on your solution. Before you do, remember these two important points.</p>
<h3>7. Learn from your users</h3>
<p>This is where we can delight in the concept of &quot;meta&quot;, so wonderfully celebrated by that most mind-expanding of authors <a href="https://www.explainxkcd.com/wiki/index.php/917:_Hofstadter">Douglas Hofstadter</a>. Insight about insight is what this best practice is all about. Especially when you turn that meta-insight into action. When delivering the reporting solution, include a layer of usage analytics, so that you can learn about how your users are actually using the solution. What are they selecting? How are they navigating? What parts of the solution are they not using? What times of day are more popular than others?</p>
<p>We've used Google Analytics, embedded in a Fiori context via a plugin mechanism, to great effect. It doesn't have to be Google Analytics; it just needs to tell you what you need to know to take action to improve the solution over time.</p>
<h3>8. Protect your data</h3>
<p>If data is your second most valuable asset, you need to protect it. This means finding the right balance between low-friction and security when it comes to data access - not getting in the way of the right people, and totally getting in the way of the wrong people. This is where the delivery of your solution must coincide with the security policies that your organisation already has.</p>
<p>If you have an OS-native solution, or a Hybrid based solution, you can bind the apps into the deployment and management mechanisms already in place for your mobile devices. If you have a Fiori-based solution, you could consider adopting the SAP Fiori Client, or a derivative thereof (with Kapsel), to participate at this level. If you have a purely Web-native solution, then you can go the Hybrid route or consider plugging in a timeout mechanism that will remove cached data and navigate away from where the user was. This mechanism can be bound into the overall reporting solution in a straightforward manner that is pretty much independent of the actual solution implementation.</p>
<p>There's a lot to consider in any solution, but particularly, the combination of UX, data that is to provide insights, mobility and devices that are somewhat out of your control is a heady mixture that can cause headaches. As long as you bear these best practices in mind, you know at least you're building in the right direction.</p>
<p>As Buzz Lightyear might say if he were building a mobile reporting solution: &quot;To insight, and beyond!&quot;.</p>
<hr>
<p><a href="http://www.bluefinsolutions.com/insights/dj-adams/february-2017/best-practices-for-mobile-reporting">Originally published on the Bluefin Solutions website</a></p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>The beauty of recursion and list machinery</title>
      <link href="https://qmacro.org/blog/posts/2017/02/19/the-beauty-of-recursion-and-list-machinery/"/>
      <updated>2017-02-19T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2017/02/19/the-beauty-of-recursion-and-list-machinery/</id>
      <content type="html">
        <![CDATA[
      <p>There are beautiful patterns inherent in the use of recursion that I've seen in my attempts to reboot my brain with a new, more functionally focused way of thinking about programming.</p>
<p>This post explores one particular pattern that is inherent in how recursion is often expressed in some functional languages, and finishes with the alternative based on what I'm going to call &quot;list machinery&quot; - mechanisms within a language that provide powerful processing abstractions over structures such as lists.</p>
<h1><a name="initialrecognition"></a>Initial recognition</h1>
<p>Erik Meijer, whom I'll mention properly in a moment, uses a phrase &quot;if you stare long enough at it ...&quot;. This really appeals to me, because it expresses the act of focus and concentration in a wonderfully casual way. I've stared at this stuff long enough for it to become something tangible, something recognisable, and hopefully there's useful content here for you to stare at too.</p>
<h2>Introduction via Haskell</h2>
<p>It was my son <a href="http://jcla1.com">Joseph</a> that introduced me to the concept that has intrigued me since the first day I saw it. Proficient in many different languages, he was showing me some solutions to <a href="(https://www.youtube.com/watch?v=UIUlFQH4Cvo&amp;list=PLTA0Ta9Qyspa5Nayx0VCHj5AHQJqp1clD)">Project Euler</a> challenges that he'd written in Haskell. They involved a fascinating approach using pattern matching. Determining the resulting value of something based upon a list of possible matches on the data being processed. It involved expressions involving the symbols <code>x</code> and <code>xs</code>. This is very abstract, but it will become more concrete shortly.</p>
<h2>C9 Lectures</h2>
<p>The next time I encountered this pattern matching technique was in a series of lectures by the inimitable Erik Meijer. These lectures are on functional programming techniques, and the series is called &quot;<a href="https://www.youtube.com/watch?v=UIUlFQH4Cvo&amp;list=PLTA0Ta9Qyspa5Nayx0VCHj5AHQJqp1clD">Programming in Haskell</a>&quot;, although the concepts themselves are explained in terms of other languages (C#, LINQ) too. I thoroughly recommend you spend some time enjoying them. One thing that Erik said a lot was &quot;x over xs&quot;, which is expressed as <code>x::xs</code>.</p>
<p>Being somewhat intimidated by the M-word (monad), I have avoided Haskell so far, although my interest in functional programming in other languages (such as in Clojure, and with Ramda in JavaScript) has grown considerably ... I presented at <a href="https://sessioncatalog.sapevents.com/go/agendabuilder.sessions/?l=133&amp;sid=37706_0&amp;locale=en_US">SAP TechEd EMEA</a> and also at <a href="https://twitter.com/qmacro/status/802108634255806465">UI5con</a>, both in 2016, on functional programming techniques in JavaScript.</p>
<h2>Elm</h2>
<p>And now, learning <a href="http://elm-lang.org/">elm</a>, I re-encounter these pattern-matching patterns again. I think it's because, at least to my naive mind, elm seems to reflect a lot of concepts from Haskell (and from Clojure, for that matter). The patterns are expressed nicely in an online book &quot;<a href="https://learnyouanelm.github.io/">Learn You an Elm</a>&quot;; the book is very much a work-in-progress but definitely worth a read even at this early stage.</p>
<p>The examples in this post will be in elm.</p>
<h1>Subsequent understanding</h1>
<p>It turns out that the wonderfully succinct expression <code>x::xs</code> represents one of the core concepts in functional programming. A list can be seen in two parts - the head, and the tail. The first element, and the rest of the elements. So <code>x</code> represents the head of a list, and <code>xs</code> represents the tail. And the <code>::</code>? That represents the concept of &quot;cons&quot;, which has <a href="https://en.wikipedia.org/wiki/Cons">its own page on Wikipedia</a> but I'm going to call &quot;prepend&quot; for brevity.</p>
<h2>No loops</h2>
<p>One thing to bear in mind from the outset is that in functional programming, there are no loops. Not as you or I might understand them, at least. But if you think of a list of items that you want to process &quot;in a loop&quot;, the concept of &quot;x over xs&quot; is what you need.</p>
<p>If you want to transform a list, by applying some function to [each element in] that list, here's how it goes, using that concept. Remembering that functional programming is less about describing the 'how', and more about stating the 'what', we can say that the new list is the result of the function applied to the head of the list (an individual element), combined with the result of the function applied to the tail of the list (a smaller list).</p>
<p>And the function applied to the tail of the list is the result of the function applied to the head of that list, combined with the function applied to the tail of that same list.</p>
<p>And so it goes on, until there are no more elements in the (ever decreasing) tail to which the function must be applied.</p>
<p>The function is called recursively in this fashion.</p>
<p>Here's an example. If we have a list <code>[1,2,3,4,5]</code> and want to compute the sum of all the elements in that list (15), this is what the pattern matching approach looks like.</p>
<pre class="language-elm"><code class="language-elm"><span class="token hvariable">sum</span> <span class="token operator">:</span> <span class="token constant">List</span> <span class="token hvariable">number</span> <span class="token operator">-></span> <span class="token hvariable">number</span><br><span class="token hvariable">sum</span> <span class="token hvariable">list</span> <span class="token operator">=</span><br>  <span class="token keyword">case</span> <span class="token hvariable">list</span> <span class="token keyword">of</span><br>    <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">-></span> <span class="token number">0</span><br>    <span class="token punctuation">(</span><span class="token hvariable">x</span><span class="token operator">::</span><span class="token hvariable">xs</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token hvariable">x</span> <span class="token operator">+</span> <span class="token hvariable">sum</span> <span class="token hvariable">xs</span></code></pre>
<p>Calling the function on the list gives us what we're looking for:</p>
<pre class="language-elm"><code class="language-elm"><span class="token hvariable">sum</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><br><span class="token comment">--> 15</span></code></pre>
<p>Let's extract the core pattern matching approach here, in the <code>case</code> expression:</p>
<ul>
<li>
<p><code>[]</code> matches an empty list. To be useful (ie not go on forever), recursion needs a base case. This is the base case.</p>
</li>
<li>
<p><code>(x::xs)</code> is a pattern that matches two parts - the head and the tail of the list. If the earlier <code>[]</code> didn't match, then we're going to have at least one element, matched into <code>x</code>, and any further elements, if they exist, are matched into <code>xs</code>.</p>
</li>
</ul>
<p>(For those of you who, like me, are not steeped in strongly typed languages, the question &quot;what happens if we don't pass a list at all, just, say, a string?&quot; doesn't even come up, as the elm compiler won't allow that to happen.)</p>
<p>The sum of an empty list of numbers - the base case - is zero, clearly. The sum of a non empty list of numbers is where we see the recursive nature of the definition: it's the first number added to the sum of the rest of the numbers. And while contemplating this beautiful simplicity, consider also that this is an example of how a functional approach to programming is declarative, rather than imperative. Rather than explaining <em>how</em> to compute the sum (which we'd traditionally do with a loop and some variable to accumulate the final value), we're just saying <em>what</em> it is.</p>
<h2>Further pattern examples</h2>
<p>Let's examine a few more instances of this pattern matching. I'm going for quite a few examples, so you can stare at them all for a while.</p>
<h3>Factorial</h3>
<p>First, how about calculating factorials:</p>
<pre class="language-elm"><code class="language-elm"><span class="token hvariable">factorial</span> <span class="token operator">:</span> <span class="token constant">Int</span> <span class="token operator">-></span> <span class="token constant">Int</span><br><span class="token hvariable">factorial</span> <span class="token hvariable">n</span> <span class="token operator">=</span><br>  <span class="token keyword">case</span> <span class="token hvariable">n</span> <span class="token keyword">of</span><br>    <span class="token number">0</span> <span class="token operator">-></span> <span class="token number">1</span><br>    _ <span class="token operator">-></span> <span class="token hvariable">n</span> <span class="token operator">*</span> <span class="token hvariable">factorial</span> <span class="token punctuation">(</span><span class="token hvariable">n</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><br><br><span class="token hvariable">factorial</span> <span class="token number">5</span><br><span class="token comment">--> 120</span></code></pre>
<p>We have the same approach here: matching the base case, where n is zero, and then declaring that the factorial of n is just n multiplied by the factorial of n - 1. In this particular example of pattern matching, we're not interested in capturing the matched number (as we already have it in n), hence the <code>_</code> in the pattern.</p>
<h3>Length</h3>
<p>How about calculating the length of a list? That's simple:</p>
<pre class="language-elm"><code class="language-elm"><span class="token hvariable">length</span> <span class="token operator">:</span> <span class="token constant">List</span> <span class="token hvariable">a</span> <span class="token operator">-></span> <span class="token constant">Int</span><br><span class="token hvariable">length</span> <span class="token hvariable">list</span> <span class="token operator">=</span><br>  <span class="token keyword">case</span> <span class="token hvariable">list</span> <span class="token keyword">of</span><br>    <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">-></span> <span class="token number">0</span><br>    <span class="token punctuation">(</span>_<span class="token operator">::</span><span class="token hvariable">xs</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token hvariable">length</span> <span class="token hvariable">xs</span><br><br><span class="token hvariable">length</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><br><span class="token comment">--> 5</span></code></pre>
<p>Again, we see the same pattern.</p>
<h3>Reverse</h3>
<p>This time we'll use the pattern matching approach to produce the reverse of a list.</p>
<pre class="language-elm"><code class="language-elm"><span class="token hvariable">reverse</span> <span class="token operator">:</span> <span class="token constant">List</span> <span class="token hvariable">a</span> <span class="token operator">-></span> <span class="token constant">List</span> <span class="token hvariable">a</span><br><span class="token hvariable">reverse</span> <span class="token hvariable">list</span> <span class="token operator">=</span><br>  <span class="token keyword">case</span> <span class="token hvariable">list</span> <span class="token keyword">of</span><br>    <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">-></span> <span class="token punctuation">[</span><span class="token punctuation">]</span><br>    <span class="token punctuation">(</span><span class="token hvariable">x</span><span class="token operator">::</span><span class="token hvariable">xs</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token hvariable">reverse</span> <span class="token hvariable">xs</span> <span class="token operator">++</span> <span class="token punctuation">[</span><span class="token hvariable">x</span><span class="token punctuation">]</span><br><br><span class="token hvariable">reverse</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><br><span class="token comment">--> [5,4,3,2,1]</span></code></pre>
<p>This time, the base case - an empty list - results in an empty list. Otherwise we take the head and prepend the reverse of the tail to it, recursively.</p>
<h3>Take</h3>
<p>Now let's define our own <code>take</code> function, a common facility found in functional languages that are (naturally) list-oriented. The function returns the first n elements of a list.</p>
<pre class="language-elm"><code class="language-elm"><span class="token hvariable">take</span> <span class="token operator">:</span> <span class="token constant">Int</span> <span class="token operator">-></span> <span class="token constant">List</span> <span class="token hvariable">a</span> <span class="token operator">-></span> <span class="token constant">List</span> <span class="token hvariable">a</span><br><span class="token hvariable">take</span> <span class="token hvariable">n</span> <span class="token hvariable">list</span> <span class="token operator">=</span><br>  <span class="token keyword">if</span> <span class="token hvariable">n</span> <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token keyword">then</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><br>  <span class="token keyword">else</span> <span class="token keyword">case</span> <span class="token hvariable">list</span> <span class="token keyword">of</span><br>    <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">-></span> <span class="token punctuation">[</span><span class="token punctuation">]</span><br>    <span class="token punctuation">(</span><span class="token hvariable">x</span><span class="token operator">::</span><span class="token hvariable">xs</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token hvariable">x</span> <span class="token operator">::</span> <span class="token hvariable">take</span> <span class="token punctuation">(</span><span class="token hvariable">n</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token hvariable">xs</span><br><br><span class="token hvariable">take</span> <span class="token number">3</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><br><span class="token comment">--> [1,2,3]</span></code></pre>
<p>Here we have something extra. There are two base cases - where the list is empty, but also where the number of elements to take is zero or less. But otherwise the pattern is the same.</p>
<h3>Member</h3>
<p>This time, we're going to need the <code>if then else</code> expression to declare the recursive definition for a function that returns whether an element is a member of a list.</p>
<pre class="language-elm"><code class="language-elm"><br><span class="token hvariable">member</span> <span class="token operator">:</span> <span class="token hvariable">a</span> <span class="token operator">-></span> <span class="token constant">List</span> <span class="token hvariable">a</span> <span class="token operator">-></span> <span class="token constant">Bool</span><br><span class="token hvariable">member</span> <span class="token hvariable">a</span> <span class="token hvariable">list</span> <span class="token operator">=</span><br>  <span class="token keyword">case</span> <span class="token hvariable">list</span> <span class="token keyword">of</span><br>    <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">-></span> <span class="token constant">False</span><br>    <span class="token punctuation">(</span><span class="token hvariable">x</span><span class="token operator">::</span><span class="token hvariable">xs</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token keyword">if</span> <span class="token hvariable">a</span> <span class="token operator">==</span> <span class="token hvariable">x</span> <span class="token keyword">then</span> <span class="token constant">True</span> <span class="token keyword">else</span> <span class="token hvariable">member</span> <span class="token hvariable">a</span> <span class="token hvariable">xs</span><br><br><span class="token hvariable">member</span> <span class="token number">3</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><br><span class="token comment">--> True</span><br><br><span class="token hvariable">member</span> <span class="token number">6</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><br><span class="token comment">--> False</span></code></pre>
<p>If the list is empty - the base case - then the answer is clearly going to be False. Otherwise we check to see if the head of the list is the same as the element to find, and if it is, then the answer is True; otherwise we recurse with the tail of the list.</p>
<h3>Maximum</h3>
<p>Finally, here's a definition of a function that will return the maximum value in a list. Note here that the function's type signature uses the <code>comparable</code> type.</p>
<pre class="language-elm"><code class="language-elm"><span class="token hvariable">maximum</span> <span class="token operator">:</span> <span class="token constant">List</span> <span class="token hvariable">comparable</span> <span class="token operator">-></span> <span class="token hvariable">comparable</span><br><span class="token hvariable">maximum</span> <span class="token hvariable">list</span> <span class="token operator">=</span><br>  <span class="token keyword">case</span> <span class="token hvariable">list</span> <span class="token keyword">of</span><br>    <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">-></span> <span class="token hvariable">Debug.crash</span> <span class="token string">"Maximum of empty list?!"</span><br>    <span class="token punctuation">[</span><span class="token hvariable">x</span><span class="token punctuation">]</span> <span class="token operator">-></span> <span class="token hvariable">x</span><br>    <span class="token punctuation">(</span><span class="token hvariable">x</span><span class="token operator">::</span><span class="token hvariable">xs</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token keyword">let</span> <span class="token hvariable">m</span> <span class="token operator">=</span> <span class="token hvariable">maximum</span> <span class="token hvariable">xs</span><br>      <span class="token keyword">in</span> <span class="token keyword">if</span> <span class="token hvariable">x</span> <span class="token operator">></span> <span class="token hvariable">m</span> <span class="token keyword">then</span> <span class="token hvariable">x</span> <span class="token keyword">else</span> <span class="token hvariable">m</span><br><br><span class="token hvariable">maximum</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><br><span class="token comment">--> 5</span></code></pre>
<p>Here we see another construct - the 'let expression', similar to how 'let' is used in Clojure for bindings. It allows the creation of short-lived values, similar to scope-limited variables in other languages. What we're saying for this last pattern case <code>(x::xs)</code> is that we want to calculate the maximum of the tail of the list and assign that to <code>m</code>, and then in the context of that, check whether the head of the list is greater than that or not.</p>
<p>Elm has a builtin function <code>max</code> that will return the maximum of two comparables. The &quot;Learn You an Elm&quot; book points out that this can allow us to be even more succinct in our maximum function, like this:</p>
<pre class="language-elm"><code class="language-elm"><span class="token hvariable">maximum_</span> <span class="token operator">:</span> <span class="token constant">List</span> <span class="token hvariable">comparable</span> <span class="token operator">-></span> <span class="token hvariable">comparable</span><br><span class="token hvariable">maximum_</span> <span class="token hvariable">list</span> <span class="token operator">=</span><br>  <span class="token keyword">case</span> <span class="token hvariable">list</span> <span class="token keyword">of</span><br>    <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">-></span> <span class="token hvariable">Debug.crash</span> <span class="token string">"Maximum of empty list?!"</span><br>    <span class="token punctuation">[</span><span class="token hvariable">x</span><span class="token punctuation">]</span> <span class="token operator">-></span> <span class="token hvariable">x</span><br>    <span class="token punctuation">(</span><span class="token hvariable">x</span><span class="token operator">::</span><span class="token hvariable">xs</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token builtin">max</span> <span class="token hvariable">x</span> <span class="token punctuation">(</span><span class="token hvariable">maximum_</span> <span class="token hvariable">xs</span><span class="token punctuation">)</span><br><br><span class="token hvariable">maximum_</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><br><span class="token comment">--> 5</span></code></pre>
<p>Wonderful.</p>
<h1>List machinery</h1>
<p>I've talked at length about recursion, and perhaps you too can see the beauty therein.</p>
<p>So what about list machinery? Again, following the 'what not how' philosophy, let's look at a little bit of list machinery in the form of the swiss army chainsaw function <code>reduce</code>, which in elm (and other languages) is known as <code>foldl</code> - for &quot;fold-left&quot;.</p>
<p>We'll re-implement the <code>maximum</code> function with <code>foldl</code> and the <code>max</code> builtin function:</p>
<pre class="language-elm"><code class="language-elm"><span class="token hvariable">maximum_</span> <span class="token operator">:</span> <span class="token constant">List</span> <span class="token hvariable">comparable</span> <span class="token operator">-></span> <span class="token hvariable">comparable</span><br><span class="token hvariable">maximum_</span> <span class="token hvariable">list</span> <span class="token operator">=</span><br>  <span class="token hvariable">List.foldl</span> <span class="token builtin">max</span> <span class="token number">0</span> <span class="token hvariable">list</span><br><br><span class="token hvariable">maximum_</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><br><span class="token comment">--> 5</span></code></pre>
<p>The <code>foldl</code> function reduces a list by applying a function in turn to each of the elements. The function to apply should have two parameters - the first to accept the accumulated value and the second to accept the list element being folded over. So here, the function to apply is <code>max</code>, which takes two arguments, and the initial value for any maximum comparison (of positive numbers, at least) should be zero.</p>
<p>Perhaps more wonderful even than the recursive version? Remember that we're processing each element of a list, without any concern as to how that processing happens - we leave that to the language's list machinery to deal with for us.</p>
<p>And to finish, how about using <code>foldl</code> to reverse a list, so we can contrast it with the recursive definition earlier?</p>
<pre class="language-elm"><code class="language-elm"><span class="token hvariable">List.foldl</span> <span class="token punctuation">(</span><span class="token operator">::</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><br><span class="token comment">--> [5,4,3,2,1]</span></code></pre>
<p>(The cons function <code>::</code> can be used in function position by surrounding it in brackets.)</p>
<p>Gosh. Worthy of a long stare. Don't you think?</p>
<p><strong>Postscript:</strong></p>
<p>A day after publishing this post, I find myself at <a href="http://www.lambdalounge.org.uk/">Lambda Lounge</a> in Manchester this evening, hosted at <a href="https://madlab.org.uk/">MadLab</a>, where we're learning about <a href="http://elixir-lang.org/">Elixir</a>, a dynamic functional language on the Erlang OTP platform, and a short way into the session, this sample is presented to us:</p>
<pre class="language-elixir"><code class="language-elixir"><span class="token keyword">defmodule</span> <span class="token module class-name">Factorial</span> <span class="token keyword">do</span><br>  <span class="token keyword">def</span> <span class="token function">of</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token attr-name">do:</span> <span class="token number">1</span><br>  <span class="token keyword">def</span> <span class="token function">of</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token attr-name">do:</span> n <span class="token operator">*</span> <span class="token function">of</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><br><span class="token keyword">end</span><br><br><span class="token module class-name">Factorial</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><br><span class="token operator">/</span><span class="token operator">/</span>> <span class="token number">120</span></code></pre>
<p>While the Elixir syntax may be less familiar to us right now, I'm guessing that the approach here, that we've examined in this post, jumps off the page in a rush of familiarity. Within the <code>Factorial</code> module, we have a couple of definitions of the <code>of</code> function, which are used in the same pattern matching way. And we can see the base case defined thus:</p>
<pre class="language-elixir"><code class="language-elixir"><span class="token keyword">def</span> <span class="token function">of</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token attr-name">do:</span> <span class="token number">1</span></code></pre>
<p>and the recursive call:</p>
<pre class="language-elixir"><code class="language-elixir"><span class="token keyword">def</span> <span class="token function">of</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token attr-name">do:</span> n <span class="token operator">*</span> <span class="token function">of</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span></code></pre>
<p>Lovely.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Reaching out to the new new kingmakers</title>
      <link href="https://qmacro.org/blog/posts/2017/02/13/reaching-out-to-the-new-new-kingmakers/"/>
      <updated>2017-02-13T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2017/02/13/reaching-out-to-the-new-new-kingmakers/</id>
      <content type="html">
        <![CDATA[
      <p>Here's an insider's view from last week’s SAP Developer Advisory Board two day face-to-face meeting in Miami, USA. Here, the message was loud and clear: SAP's commitment to connect with developers inside and outside the ecosphere is as strong as ever.</p>
<p>In April 2014, I was honoured to be <a href="http://web.archive.org/web/20180410105309/http://www.bluefinsolutions.com/about-us/news-and-media/press-releases/bluefin-solutions-dj-adams-joins-saps-developer">elected to SAP's Developer Advisory Board</a>. We met for a series of sessions over Thursday and Friday last week in Miami, USA. A long way to go for many of us but definitely worth the trip. It was evident from the diverse discussions that not only does SAP take developers seriously, it also recognises that there's an army of folks who may write the odd line of code or declarative configuration but whose main focus is on wiring up pieces of technology and making them work together.</p>
<h2>Development and devops</h2>
<p>Until a better word comes along, I'm going to wave my arms in the air and use &quot;devops&quot; to describe this sort of activity. Devops, or &quot;developer operations&quot;, is traditionally a representation of three related practices: Development, Quality Assurance and Operations.</p>
<p>In the SAP ecosphere especially, if you look at the sets of activities required to wind up and keep the right combination of spinning tops humming in tune, there's also another practice that we need to recognise, and that is the care and attention of systems and services, integrated between cloud and on-premise. I'm thinking particularly of course of the services within, and connected to, the SAP Cloud Platform (née HANA Cloud Platform).</p>
<h2>The new kingmakers</h2>
<p>In 2013 Stephen O'Grady's book <a href="http://redmonk.com/sogrady/2013/01/09/the-new-kingmakers-the-book/">The New Kingmakers</a> was released. The book and the phrase &quot;developers are the new kingmakers&quot; resounded clear and true, waking many up to the reality that programming wasn't like laying bricks or pouring concrete; rather, it was the lifeblood of the virtual structures upon which businesses are built and run, a lifeblood that, if treated like a commodity or as a cost, would start to go off.</p>
<h2>The new new kingmakers</h2>
<p>So who are the &quot;new new kingmakers&quot;? They're the same folks that they always were - the quiet, often unsung army of people building and maintaining software that both balances and differentiates organisations. But alongside, there are folks that build, but in a different way.</p>
<p>They're the ones that connect up - both physically and virtually - the complex machinery, much like a sound engineer creates the right combination of instruments, and the MIDI-based timing coordination between them. The developers write the music, whereas the engineers, the devops folks, make it possible and get the tracks recorded.</p>
<h2>The conversational landscape</h2>
<p>SAP is acutely aware there's a landscape in which conversations with the kingmakers need to to take place. That landscape is as varied as the landscape on any planet; flora, fauna, mountains, seas, deserts and everything inbetween. SAP's software and service offering is growing year on year.</p>
<p>Even a single area such as the SAP Cloud Platform has its own diverse language and tech ecosphere, with areas as different as the Cloud Foundry meta-platform (with &quot;BYOL&quot; - bring your own language) and the cloud integration and API management facilities.</p>
<p>SAP's Developer Relations team has already made great strides over the past few years in recognising what the landscape looks like, who and where the kingmakers are, and what they need to remain kingmakers. The team is also very conscious of other organisations' initiatives (such as those from Google, Amazon and the like), how they reach out to the communities, and perhaps critically, how they find, attract and properly welcome net new developers and devops folks alike.</p>
<h2>The next decade</h2>
<p>SAP has been cultivating and growing technologies for over four decades (and I've been happily embracing some - not all - of them for three of those four decades). If you'd said to folks fifteen years ago that they'd eventually adopt a REST-informed approach to integration, they'd have laughed at you. Similarly, open sourcing a major piece of technology (OpenUI5), and making JavaScript a first class language in the SAP ecosphere - all almost entirely unimaginable only ten years ago.</p>
<p>With these changes, SAP continues to mature. Moreover SAP is remembering that the people who make businesses work - the new new kingmakers - are more important than ever.</p>
<p>And that makes me very happy.</p>
<hr>
<p><a href="http://web.archive.org/web/20180410105309/http://www.bluefinsolutions.com/insights/dj-adams/february-2017/reaching-out-to-the-new-new-kingmakers">Originally published on the Bluefin Solutions website</a></p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Debugging SAP Fiori apps - the fifth &quot;D&quot;</title>
      <link href="https://qmacro.org/blog/posts/2017/01/12/debugging-sap-fiori-apps-the-fifth-&quot;d&quot;/"/>
      <updated>2017-01-12T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2017/01/12/debugging-sap-fiori-apps-the-fifth-&quot;d&quot;/</id>
      <content type="html">
        <![CDATA[
      <p>It's all very well designing and building a delightful Fiori app. But what about the long tail - supporting that app through its lifetime, with fixes and changes that come along? There's a fifth &quot;D&quot; to the SAP Fiori development mantra, and that &quot;D&quot; is for &quot;Debugging&quot;.</p>
<h2>The mantra</h2>
<p>In the SAP Fiori world, there's a mantra which generally goes like this:</p>
<p>Discover -&gt; Design -&gt; Develop -&gt; Deploy</p>
<p>These four &quot;D&quot; words represent the progressive stages of bringing new functionality into the world, starting with Design Thinking principles, iterating on prototypes early on, building a stable first version and moving it to production. You can read more about this mantra, relating to SAP's User Experience as a Service, in <a href="/blog/posts/2015/11/25/digital-devolution-in-local-authorities-putting-people-first/">Digital devolution in local authorities - Putting people first</a>.</p>
<p>However, there's a fifth &quot;D&quot; word that is crucial. That word is &quot;Debugging&quot;, representing activities that kick in around &quot;Develop&quot; and live well beyond &quot;Deploy&quot;.</p>
<h2>Debugging is positive</h2>
<p>Don't get put off by the knee-jerk negative connotations that the word &quot;debugging&quot; might conjure up. Sure, it represents the act of diagnosing and fixing problems with code, with apps, especially those already in production. But it also represents the more positive aspects of being able to thoroughly understand an app from the inside, behind the scenes.</p>
<p><img src="/images/2017/01/bug.jpg" alt=""></p>
<p>Not only to be able to support it and to address issues, but also to have the wherewithal to properly extend and enhance it, introducing new features in a sane and safe way, sympathetic to the existing design, architecture and codebase.</p>
<h2>Complex vs complicated</h2>
<p>SAP Fiori apps can be complex beasts. This complexity comes at different levels. While the Fiori design language demands simplicity of user experience, realising that minimal user interface is far from simple; it's not magic that causes a swan to glide effortlessly and smoothly across the water, it's a combination of muscle coordination, fluid dynamics and, well, pretty furious paddling under the surface.</p>
<p>Another level of complexity is in the implementation itself. UI5, the industrial strength HTML5 toolkit with which Fiori apps are built, is commonly referred to as being &quot;enterprise grade&quot;. What that means is that it has a set of features and facilities that are key to creating business apps that can go global: Support for the Model-View-Controller development approach, data binding, internationalisation, control hierarchies and asynchronous network requests to satisfy business data consumption are just some of the ingredients that make Fiori apps what they are today. Moreover, these ingredients make for complex scenarios under the hood.</p>
<p>There's a difference between complex and complicated. By the nature of what is being achieved by building rich business apps that run in the browser and reach back into SAP systems to transact, lots of things have to be properly orchestrated. But that's different to complicated. Any fool can build something complicated - to paraphrase a famous quote that's often attributed to Mark Twain:</p>
<blockquote>
<p>&quot;I didn't have time to build a simple app, so I built a complicated one&quot;.</p>
</blockquote>
<p>Building something complicated is not the same as building something that is inherently complex.</p>
<h2>Debugging tools</h2>
<p>With traditional ABAP-based apps that run in SAPGUI, it became second nature long ago to enter &quot;/h&quot; in the OK-code field and jump into debug mode. The ABAP debugger tools have improved considerably over the decades and we've come to expect not only facilities to help us wade through and find what we're looking for, but also (and perhaps more importantly) for folks in development and support teams to understand what they're looking at and to be able to find their way around behind the curtain.</p>
<p>So it is also with HTML5-based SAP Fiori and UI5 apps today. What facilities do we have at our disposal to help us navigate the complexities of a modern business app?</p>
<p>Well, for a start we have the excellent UI5 Software Development Kit (SDK). Even from early versions it has been rich in documentation, samples and more. All debugging endeavours should start with a reference guide, the &quot;sine qua non&quot; that acts as a backstop, definitive documentation and final arbiter of how things work, or should be working.</p>
<p>Then we have built-in tools. Chrome is an incredible feat of engineering, providing near unrivalled development and debugging facilities for the creation and support of HTML5-based apps. It also has a pretty fine browser built in*! Time taken to teach oneself about features of the Chrome Developer Tools is time well spent.</p>
<p>Furthermore, the UI5 runtime itself has some rather good facilities for debugging, notably the UI5 Inspector tool, which can be summoned easily in any running Fiori app.</p>
<h2>The knowledge</h2>
<p>What binds the reference material with what the tools can tell you is something else, though. A knowledge and general understanding of how UI5 and Fiori apps tick. How they are loaded, form themselves into functionality in the browser, and bring data and UI to life on the screen.</p>
<p>A painter doesn't pick up a brush and wield it like an axe against the canvas (well perhaps some do, but that's another story). They hone their skills and perfect their understanding of how their movements influence the brush, how the brush touches the canvas, and how the colours glide and combine.</p>
<h2>Debugging is a conversation</h2>
<p><a href="https://www.sap-press.com/sap-fiori-and-sapui5_4305/"><img src="/images/2017/01/debugging-book-cover.jpg" alt="Debugging book cover"></a></p>
<p>I find that debugging a Fiori app is like having a conversation. A conversation with the control flow, a conversation with the mechanics of the runtime and often a(n imaginary) conversation with whoever was responsible for building the app. Understanding how to have that conversation is key.</p>
<p>So I was delighted when SAP Press gave me an opportunity to write a short guide to help us orientate ourselves with what we find under the surface of a Fiori app. That orientation is designed to show us how to use the tools available and have good debugging conversations with the runtime. It's in the form of an E-Bite, and is available now from their website:</p>
<p><a href="https://www.sap-press.com/sap-fiori-and-sapui5_4305/">SAP Fiori and SAPUI5: Debugging The User Interface</a></p>
<h2>Start now</h2>
<p>If you can see a Fiori app in your browser (I'm going to assume it's Chrome - if you're at all concerned with standards, security and reliability, why would you be running anything else?) then you're ready to start your debugging conversation.</p>
<p>Open up a separate window with the UI5 SDK, invoke the Chrome Developer Tools, and bring up the UI5 Inspector. And maybe even grab a copy of the E-Bite :-) Then you're ready to begin your debugging conversation. Start with &quot;hello&quot; and have a look around. You won't regret it.</p>
<p>* <em>Yes, for those geeks amongst you, this is an oblique reference to the traditional description of the Emacs editor: &quot;A fully featured operating system, lacking only a decent editor&quot;.</em></p>
<hr>
<p><a href="http://web.archive.org/web/20180509233210/http://www.bluefinsolutions.com/insights/dj-adams/january-2017/debugging-sap-fiori-apps-the-fifth-d">Originally published on the Bluefin Solutions website</a></p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Excluding with vim&#39;s wildignore</title>
      <link href="https://qmacro.org/blog/posts/2016/12/27/excluding-with-vim&#39;s-wildignore/"/>
      <updated>2016-12-27T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2016/12/27/excluding-with-vim&#39;s-wildignore/</id>
      <content type="html">
        <![CDATA[
      <p>I found it more difficult than usual to get the <code>wildignore</code> setting working properly in vim, so I thought I'd document it here.</p>
<p>The <code>wildignore</code> setting is used in conjunction with the <code>path</code> and other settings such as <code>wildmenu</code>, and supposedly can be used to specify filename patterns that should be ignored when searching for files, for example using the <code>find</code> command.</p>
<p>I'm running a fairly modern version of vim (7.4) compiled with the <code>+wildignore</code> option:</p>
<pre class="language-shell"><code class="language-shell">dj@pipetree ~ $ <span class="token function">vim</span> <span class="token parameter variable">--version</span> <span class="token operator">|</span> <span class="token function">grep</span> wildignore<br>+cscope          +lispindent      +python3         +wildignore<br>dj@pipetree ~ $</code></pre>
<p>but specifying a pattern such as this:</p>
<pre class="language-vim"><code class="language-vim"><span class="token keyword">set</span> <span class="token builtin">wildignore</span><span class="token operator">=</span>node_modules<span class="token operator">/</span><span class="token operator">*</span><span class="token operator">*</span></code></pre>
<p>or variations thereof, such as</p>
<pre class="language-vim"><code class="language-vim"><span class="token keyword">set</span> <span class="token builtin">wildignore</span><span class="token operator">=</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">/</span>node_modules<span class="token operator">/</span><span class="token operator">*</span><span class="token operator">*</span></code></pre>
<p>or even</p>
<pre class="language-vim"><code class="language-vim"><span class="token keyword">set</span> <span class="token builtin">wildignore</span><span class="token operator">=</span><span class="token operator">*</span><span class="token operator">*</span>node_modules<span class="token operator">*</span><span class="token operator">*</span></code></pre>
<p>didn't have the desired effect. I'm wanting to exclude content from that folder (and the subfolders contained there) as they don't form part of the codebase I'm working on in my JavaScript projects.</p>
<p>What works for me is</p>
<pre class="language-vim"><code class="language-vim"><span class="token keyword">set</span> <span class="token builtin">wildignore</span><span class="token operator">=</span><span class="token operator">/</span>home<span class="token operator">/</span><span class="token keyword">dj</span><span class="token operator">/</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">/</span>node_modules<span class="token operator">/</span><span class="token operator">*</span><span class="token operator">*</span></code></pre>
<p>In other words, an absolute path (I've tried using the tilde too, to no avail).</p>
<p>This is good enough for me, but it does irk me that something that should be so simple ... isn't.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Better collaboration through chemistry</title>
      <link href="https://qmacro.org/blog/posts/2016/11/03/better-collaboration-through-chemistry/"/>
      <updated>2016-11-03T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2016/11/03/better-collaboration-through-chemistry/</id>
      <content type="html">
        <![CDATA[
      <p>Well actually it's not chemistry but I couldn't resist an oblique reference to a floppy disk album cover from 1996 (I'll leave you to work out to what I'm referring). I'm working alongside a client, helping them with their Fiori transformation. Stepping back for a second, I realise that how we're collaborating is rather effortless and delivers much more value because of the tools we're using and the approaches we're taking. Read on to find out what these are.</p>
<p>dj-Better-collaboration-through-chemistry-content.jpgCollaboration works best when you're in the same room, working together, and there's low friction between you and the tasks that you're trying to carry out. This is often not how it works in reality, however. Demands on time and location mean that you're often working together, but remotely.</p>
<p><img src="/images/2016/11/landscape.jpg" alt=""></p>
<p>Moreover, the tools you use often hinder rather than help along the processes you're trying to follow.
With today's cloud-based offerings, an awareness of best practices and a good dose of common sense and organisation, this reality can be improved considerably.</p>
<h2>Fiori transformation</h2>
<p>In this case, the collaboration was centred around the client's Fiori transformation activities. Moving towards a user-centric view of business processes means embracing Fiori, as a philosophy and as a platform. The best way to make that successful is to find the appropriate balance between standard and custom, bringing about the right solution for each of those business process. Here, this meant adapting standard SAP Fiori apps and extending them to fit. It also meant extending the Fiori Launchpad itself with features that were essential to the client.</p>
<p>In turn, this implied using the right tools to extend and test Fiori apps, employing best practices, and embracing the developer workflow that teams outside the SAP developer ecosphere, especially those in the open source world, have enjoyed for a long time. Workflow that includes automatic code checking (also known as linting), distributed source code control, feature branch based development, and peer-to-peer code reviews.</p>
<h2>A bird's eye view</h2>
<p>Before diving in, let's circle around in the cool autumn air and examine the building blocks of the solution from above.</p>
<p><img src="/images/2016/11/building-blocks.jpg" alt="solution"></p>
<p>(If you haven't guessed already, Workstation 1 represents a client team member and Workstation 2 represents a Bluefin team member.)</p>
<p>In the client's on-premise part of the landscape, we have the usual suspects - a backend ECC system fronted by what we used to call the Gateway system but which we refer to now as the Frontend server, as it contains the UI Add-On supplying the Fiori infrastructure too. In addition to that, we have the HANA Cloud Connector (HCC) connecting outwards to the HANA Cloud Platform to create a secure tunnel.</p>
<p>In the cloud, there's the HANA Cloud Platform (HCP) which provides (amongst many other services) the Web IDE, my number one tool of choice for Fiori implementations. There's some reverse proxy and routing magic that is represented by destination definitions too, allowing connections from services on HCP to be made to on-premise systems via the HCC. In the context of the Web IDE, there are two functions that these connections enable: Consumption of OData services, and access to the repository of Fiori app artifacts.</p>
<p>There are also non-SAP services we're using. The first is GitHub, as the master repository for our Fiori artifacts and the changes that we're making to them, and perhaps just as importantly as the place where we manage development tasks, organise work into feature branches and perform code reviews. Then there's the collaboration and communication tool that's taking the world by storm: Slack. It's like IRC for the 21st century, and is - dare I say it? - a game-changer. And finally Trello, where we coordinate the overall tasks at a higher level of granularity, including those not specific to development. The biggest benefit of Trello is the immediacy - from idea to onboarding the team to ideas capture in literally seconds.</p>
<h2>Developer workflow and the right tools</h2>
<p>In a working session that takes place usually face to face, we plan the overall work items and record them in Trello, great board-style team collaboration in a software-as-a-service mould. The interface is simple - boards, with lists of cards that you can drag around, assign and decorate with other metadata. Once we've done this, it's often the last time the team will be together in person for days or weeks on end.</p>
<p><img src="/images/2016/11/trello.jpg" alt="Trello board"></p>
<p>A lot of these cards in Trello are then translated into tasks in GitHub, stored on the private repository that represents the software artifacts of the project. These tasks are then assigned (sometimes self-assigned) and work is started upon them. Tasks represent either features or bug fixes; they're the same thing from a workflow perspective - a piece of development that needs doing, then reviewing, then being accepted into the collection of artifacts that will make their way eventually to test and production systems.</p>
<p>A feature branch is created in GitHub to contain that work and this branch is pulled into the Web IDE where we spend most of our working day. The integration that the Web IDE offers with git-based source code control systems is ideal (and as of this month it's got even better, with additional access to on-premise git repository systems). Work is done and tested locally in the test harnesses that the Web IDE offers, connecting to the on-premise frontend server to access the OData services upon which the Fiori apps rely.</p>
<p>All this time, communication is taking place in Slack in a private channel dedicated to the members of the extended team which includes both client and Bluefin folks. This Slack-based communication is enhanced by integrations with GitHub and Trello - events in these two systems (such as the opening or closing of a merge request) are posted into the conversation flow.</p>
<p><img src="/images/2016/11/slack.jpg" alt="Slack"></p>
<p>Work continues in the Web IDE, using facilities such as linting (to catch style and syntax errors at design time) and the extension wizards which make adding extensions to SAP Fiori apps pretty straightforward.</p>
<p>Once a piece of work is ready, it's pushed back to GitHub where a request to merge code upstream is made. This triggers a code review process between the members of the team. A feature branch may also be pulled back into the local repository of another team member's Web IDE for them to be able to test out the changes while keeping their work intact and separate. We have our business analysts do this too (they have Web IDE accounts as well) - they can try out the changes directly on the HCP before we continue.</p>
<p><img src="/images/2016/11/github.jpg" alt="GitHub"></p>
<p>Based on the code review itself, further code changes may be necessary to address issues highlighted but once they've been made and the review is done, the code is merged into the so-called &quot;master&quot; branch which will eventually make its way back to the on-premise frontend server to be deployed through the SAP system landscape in more traditional SAP methods.</p>
<p>The overarching mantra for code changes, feature branches and merge requests in this new world of feature branch based development is: &quot;Master is always deployable&quot;, meaning that anything you merge into master must be tested and reviewed because it could be deployed to production at any time!</p>
<h2>Remote access</h2>
<p>One great feature of the combination of the Web IDE and destinations defined in HCP is that the secure access allowed to specific on-premise SAP systems via the HCC is all one needs to partake in this collaboration. I use my own instance of the Web IDE, as do my client colleagues. And we do that from wherever we are. No VPN is required which means that the cloud philosophy and software-as-a-service thereupon is really working well for us. The security and connectivity is managed where it should be - not on my laptop, but in a secure location on SAP's servers.</p>
<h2>The future is here now</h2>
<p>I've only scratched the surface of detail here. Perhaps you'll be intrigued enough to go and find out for yourself how services such as these can massively improve collaboration and productivity, and how a developer workflow that embraces today's approaches is the right way forward for the Fiori revolution. Maybe you'll investigate what modern communication tools like Slack can do for you and your partners. Hopefully you'll see that using the zero-install HCP-based Web IDE is the right direction for you and your Fiori initiatives.</p>
<p>If there's one thing you take away from this post, it should perhaps be this: the future is here now, and it's there for you to embrace. Go for it.</p>
<hr>
<p><a href="http://web.archive.org/web/20180227042724/http://www.bluefinsolutions.com/insights/dj-adams/november-2016/better-collaboration-through-chemistry">Originally published on the Bluefin Solutions website</a></p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>F3C Parts 9 and 10 - Functors</title>
      <link href="https://qmacro.org/blog/posts/2016/10/19/f3c-parts-9-and-10-functors/"/>
      <updated>2016-10-19T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2016/10/19/f3c-parts-9-and-10-functors/</id>
      <content type="html">
        <![CDATA[
      <p>FunFunFunction Videos: <a href="https://www.youtube.com/watch?v=YLIH8TKbAh4&amp;index=9&amp;list=PL0zVEGEvSaeEd9hlmCXrk5yUyqUag-n84">Functors - FunFunFunction #10</a> and <a href="https://www.youtube.com/watch?v=DisD9ftUyCk&amp;list=PL0zVEGEvSaeEd9hlmCXrk5yUyqUag-n84&amp;index=10">Functors: I was WRONG! - FunFunFunction #11</a> (yes, the sequence numbers are a bit mixed up, don't worry though)</p>
<p>(This post is part of the <a href="/f3c/">F3C</a> series)</p>
<p>There are two videos in the series. In the first, MPJ explores what functors are, and based on material in the blogosphere, makes some statements that aren't quite accurate. So he follows up with a second video correcting those statements, which I think was an excellent way to fix things. There's a lot to be said for learning by watching other people learn.</p>
<p>There's quite a bit to take in from these two videos on functors, so here's my summary of functor essentials:</p>
<ul>
<li>
<p>a functor is a type -- for us, an object or container -- that has a <code>map</code> method[^n]</p>
</li>
<li>
<p>this container can contain elements of any type</p>
</li>
<li>
<p>the <code>map</code> method tranforms the elements, by applying the supplied function to each of them[^n]</p>
</li>
<li>
<p>while the elements are transformed, the structure of the container remains intact</p>
</li>
<li>
<p>the result is a new functor</p>
</li>
</ul>
<p>As MPJ points out, the most common functor in our context is JavaScript's <code>Array</code>. Here it is in action[^n]:</p>
<pre class="language-javascript"><code class="language-javascript"><span class="token punctuation">[</span><span class="token string">"the"</span><span class="token punctuation">,</span> <span class="token string">"quick"</span><span class="token punctuation">,</span> <span class="token string">"brown"</span><span class="token punctuation">,</span> <span class="token string">"fox"</span><span class="token punctuation">,</span> <span class="token string">"jumps"</span><span class="token punctuation">,</span> <span class="token string">"over"</span><span class="token punctuation">,</span> <span class="token string">"the"</span><span class="token punctuation">,</span> <span class="token string">"lazy"</span><span class="token punctuation">,</span> <span class="token string">"dog"</span><span class="token punctuation">]</span><br>  <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=></span> x<span class="token punctuation">.</span>length<span class="token punctuation">)</span><br>  <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=></span> x <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span><br><span class="token comment">// [false, false, false, false, false, true, false, true, false]</span></code></pre>
<p>The point of the second <code>map</code> in the example is to show that what is returned by the first <code>map</code> is indeed a functor -- another <code>Array</code>, in fact -- over which we can call <code>map</code> again.</p>
<p>While <code>Array</code> is the most obvious functor, MPJ points out that some implementations of Promises are functors, as are Streams (the latter is the subject of the next episode in this series). There's a Promise example, but it's not quite right - there are a couple of bracket-related typos. Here's what I think it should look like instead:</p>
<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">import</span> Promise <span class="token keyword">from</span> <span class="token string">'bluebird'</span><br><br><span class="token keyword">const</span> whenDragonLoaded <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span><br>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">[</span><br>      <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> ‘Fluffykins’<span class="token punctuation">,</span> <span class="token literal-property property">health</span><span class="token operator">:</span> <span class="token number">70</span>  <span class="token punctuation">}</span><br>  <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><br><span class="token punctuation">}</span><span class="token punctuation">)</span><br><span class="token keyword">const</span> names <span class="token operator">=</span> <br>    whenDragonLoaded<br>        <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">dragon</span> <span class="token operator">=></span> dragon<span class="token punctuation">.</span>name<span class="token punctuation">)</span><br>        <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">name</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>
<p>One thing I was slightly unsure of in correcting the brackets was replacing the curly braces (the ones that wrapped the object literal in the <code>resolve</code> call) with square brackets. At one level it is fine - the curly braces were simply not syntactically correct. But I felt as though adding the &quot;container&quot; syntax I was &quot;helping&quot; the Promise be a functor. Moreover, in one of the articles on JavaScript Promises that I read, I picked up the sentiment that doing exactly this was deemed bad practice. Anyway, I'm sure things will become clearer here as I explore further.</p>
<p>[^n]: (although it doesn't have to be called that, I guess - the method name could be different, but have the same effect)
[^n]: &quot;lifting&quot; the function into the container
[^n]: I'm deliberately using small, generic variable names, as that's what functional programming suggests to me - making things simple and generic means I don't want to inadvertently attach &quot;contextual baggage&quot; with variable names that mean something only in one context</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>F3C Part 8 - Promises</title>
      <link href="https://qmacro.org/blog/posts/2016/10/16/f3c-part-8-promises/"/>
      <updated>2016-10-16T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2016/10/16/f3c-part-8-promises/</id>
      <content type="html">
        <![CDATA[
      <p>FunFunFunction Video: <a href="https://www.youtube.com/watch?v=2d7s3spWAzo&amp;index=8&amp;list=PL0zVEGEvSaeEd9hlmCXrk5yUyqUag-n84">Promises - Part 8 of Functional Programming in JavaScript</a></p>
<p>(This post is part of the <a href="/f3c/">F3C</a> series)</p>
<p>This video episode was recorded over a year ago. Since that time, a native implementation of Promises is available in my scratchpad of choice, (the developer tools console of) Google Chrome. So there's no requirement for us to use <code>babelify/polyfill</code> or other similar techniques, we can just go ahead and say:</p>
<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>
<p>and get</p>
<pre class="language-javascript"><code class="language-javascript">Promise <span class="token punctuation">{</span><span class="token punctuation">[</span><span class="token punctuation">[</span>PromiseStatus<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token string">"pending"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>PromiseValue<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">}</span></code></pre>
<p>Because of this, it would seem that many of the implementation related <a href="https://github.com/mattdesl/promise-cookbook#pitfalls">pitfalls detailed in the Promise Cookbook</a>, to which MPJ refers in his video description, are no longer relevant. Which is a good thing.</p>
<p>Like recursion, asynchronous programming in general and promises in particular make me stop and think. There's an uphill element to thinking about asynchronous tasks, and chaining them together. So I reflected a little longer than normal on what I'd learned from this video. Moreover, I'd been intrigued by what MPJ had mentioned in the video, multiple times, about <strong>composability</strong>.</p>
<p>I have a general understanding about function composition from my relationship with Clojure. But following the video, I explored some other material, including a talk from Full Stack Toronto: <a href="https://www.youtube.com/watch?v=v6oFo_Uajwk">Reduce Complexity with Functional JS by @frontvu</a>. This talk gives a very brief introduction to some of the key concepts of functional programming, and includes this implementation of a <code>compose</code> function:</p>
<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">compose</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br>  <span class="token keyword">var</span> funcList <span class="token operator">=</span> arguments<span class="token punctuation">;</span><br>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br>    <span class="token keyword">var</span> args <span class="token operator">=</span> arguments<span class="token punctuation">;</span><br>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> funcList<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">--</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br>        args <span class="token operator">=</span> <span class="token punctuation">[</span>funcList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span><br>      <span class="token punctuation">}</span><br>      <span class="token keyword">return</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><br>  <span class="token punctuation">}</span><span class="token punctuation">;</span><br><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>
<p>This allows us then to do something like this:</p>
<pre class="language-javascript"><code class="language-javascript"><span class="token function">compose</span><span class="token punctuation">(</span><span class="token parameter">n</span> <span class="token operator">=></span> n <span class="token operator">*</span> n<span class="token punctuation">,</span> <span class="token parameter">n</span> <span class="token operator">=></span> <span class="token operator">++</span>n<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><br><span class="token comment">// 36</span></code></pre>
<p>In other words, we're composing a couple of functions (the anonymous increment and square functions here) to form a new function.</p>
<p>This is similar to <a href="https://clojuredocs.org/clojure.core/comp">Clojure's native composition function</a> <code>comp</code>. There are many examples of how <code>comp</code> can be used, but my favourite one, beautifully simple, is this:</p>
<pre class="language-clojure"><code class="language-clojure"><span class="token punctuation">(</span><span class="token keyword">filter</span> <span class="token punctuation">(</span><span class="token keyword">comp</span> not zero?<span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token number">1</span> <span class="token number">0</span> <span class="token number">2</span> <span class="token number">0</span> <span class="token number">3</span> <span class="token number">0</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><br><span class="token comment">;;=> (1 2 3 4)</span></code></pre>
<p>Anyway, back to promises in JavaScript. In the light of this reflection on <code>comp</code> and <code>compose</code>, the point that MPJ was making about promises being composable makes sense. We can think of function composition as chaining functions together, in a similar way to the Unix pipeline idea - the output of one function gets fed into the input of the next. It's almost so simple as to be too hard to understand.</p>
<p>I had found myself on a journey to the centre of the earth just to understand function composition, whereas it had been sitting there innocently in front of me all this time. The ability to string promises together, passing promises and values through the <code>then</code> chain, is pretty damn powerful. Add to that the ability to treat a list of functions the way that <code>Promises.all</code> gives us, and there's a compelling argument for getting to know more about promises right there.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>F3C Part 7 - Recursion</title>
      <link href="https://qmacro.org/blog/posts/2016/10/04/f3c-part-7-recursion/"/>
      <updated>2016-10-04T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2016/10/04/f3c-part-7-recursion/</id>
      <content type="html">
        <![CDATA[
      <p>FunFunFunction Video: <a href="https://www.youtube.com/watch?v=k7-N8R0-KY4&amp;list=PL0zVEGEvSaeEd9hlmCXrk5yUyqUag-n84&amp;index=7">Recursion - Part 7 of Functional Programming in JavaScript</a></p>
<p>(This post is part of the <a href="/f3c/">F3C</a> series)</p>
<p>&quot;Recursion is when a function calls itself, until it doesn't&quot; -- MPJ</p>
<p>While superficially flippant, this definition is rather accurate and succinct. It's what I'm going to adopt when explaining it at a high level to someone new.</p>
<p>I think there are two levels to understanding recursion. The first is at the theory level. There has to be a way for the repeat calling to end, either a base case, as was shown in the countdown example, or a situation where the function runs out of data to process, as was shown in the animals hierarchy example.</p>
<p>The second is at the practice level. I've sometimes found it cognitively difficult to &quot;see&quot; the recursive pattern and how it might apply in a solution. It helps to visualise what's happening, and so that's what we'll do here with the animals hierarchy example.</p>
<p>The following is the same code that was shown in the video, but with some extra counting and logging:</p>
<pre class="language-javascript"><code class="language-javascript"><br><span class="token keyword">let</span> calls <span class="token operator">=</span> <span class="token number">0</span><br><span class="token keyword">let</span> <span class="token function-variable function">makeTree</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">categories<span class="token punctuation">,</span> parent<span class="token punctuation">,</span> level</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span><br><br>  calls<span class="token operator">++</span><br>  level<span class="token operator">++</span><br><br>  <span class="token keyword">let</span> node <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><br>  <span class="token keyword">let</span> children <span class="token operator">=</span> categories<br>    <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">c</span> <span class="token operator">=></span> c<span class="token punctuation">.</span>parent <span class="token operator">===</span> parent<span class="token punctuation">)</span><br><br>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><br>    level<span class="token punctuation">,</span><br>    parent<span class="token punctuation">,</span> <span class="token string">'->'</span><span class="token punctuation">,</span><br>    children<span class="token punctuation">.</span>length<br>    <span class="token operator">?</span> children<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">c</span> <span class="token operator">=></span> c<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">", "</span><span class="token punctuation">)</span><br>    <span class="token operator">:</span> <span class="token string">"none"</span><span class="token punctuation">)</span><br><br>  children<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">c</span> <span class="token operator">=></span> node<span class="token punctuation">[</span>c<span class="token punctuation">.</span>id<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">makeTree</span><span class="token punctuation">(</span>categories<span class="token punctuation">,</span> c<span class="token punctuation">.</span>id<span class="token punctuation">,</span> level<span class="token punctuation">)</span><span class="token punctuation">)</span><br><br>  <span class="token keyword">return</span> node<br><span class="token punctuation">}</span><br><br>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token function">makeTree</span><span class="token punctuation">(</span>categories<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><br>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>calls<span class="token punctuation">,</span> <span class="token string">'calls'</span><span class="token punctuation">)</span></code></pre>
<p>The variable <code>calls</code> is used simply to count how many times the <code>makeTree</code> function is called. There's now a 3rd parameter <code>level</code> in the <code>makeTree</code> function signature which we seed with the value '0'; it's incremented each time the function calls itself, so we can count how deep the rabbit hole goes.</p>
<p>This is what the output looks like:</p>
<pre><code>1 null '-&gt;' 'animals'
2 'animals' '-&gt;' 'mammals'
3 'mammals' '-&gt;' 'cats, dogs'
4 'cats' '-&gt;' 'persian, siamese'
5 'persian' '-&gt;' 'none'
5 'siamese' '-&gt;' 'none'
4 'dogs' '-&gt;' 'chihuahua, labrador'
5 'chihuahua' '-&gt;' 'none'
5 'labrador' '-&gt;' 'none'
{
  &quot;animals&quot;: {
    &quot;mammals&quot;: {
      &quot;cats&quot;: {
        &quot;persian&quot;: {},
        &quot;siamese&quot;: {}
      },
      &quot;dogs&quot;: {
        &quot;chihuahua&quot;: {},
        &quot;labrador&quot;: {}
      }
    }
  }
}
9 'calls'
</code></pre>
<p>The main structure is the same. And clearly there are 9 calls. That makes sense, because there are 9 candidate parents (including <code>null</code>, from the initial call).</p>
<p>We can also see how many levels the recursion descends (5), and how it ascends too, from the last feline parent candidate 'siamese' at level 5, back up to the 'dogs' parent candidate at level 4.</p>
<p>This is what it looks like visually:</p>
<pre><code>1                   null
                     |
2                  animals
                     |
3                  mammals
                     |
            +--------+--------+
            |                 |
4         cats               dogs
            |                 |
       +---------+       +---------+
       |         |       |         |
5   persian  siamese  chihuahua labrador
       |         |       |         |
     (none)    (none)  (none)    (none)
</code></pre>
<p>(The fact that there are no children belonging to any of the candidate parent nodes at level 5 is represented by <code>(none)</code>).</p>
<p>And there you have it. Practice thinking about recursion, and how it applies to problems like this.</p>
<p>Oh yes, and there's also something I wanted to say about tail call optimisation, but there isn't space here to do any justice to it. Perhaps a subject for a later post. In the meantime, remember the immortal and recursive suggestion from <a href="http://scarfolk.blogspot.co.uk/">Scarfolk Council</a>: &quot;For more information, please reread&quot;.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>F3C Part 6 - Currying</title>
      <link href="https://qmacro.org/blog/posts/2016/10/03/f3c-part-6-currying/"/>
      <updated>2016-10-03T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2016/10/03/f3c-part-6-currying/</id>
      <content type="html">
        <![CDATA[
      <p>FunFunFunction Video: <a href="https://www.youtube.com/watch?v=iZLP4qOwY8I&amp;index=6&amp;list=PL0zVEGEvSaeEd9hlmCXrk5yUyqUag-n84">Currying - Part 6 of Functional Programming in JavaScript</a></p>
<p>(This post is part of the <a href="/f3c/">F3C</a> series)</p>
<p>The &quot;what&quot; part of currying is quite straightforward. The &quot;why&quot; takes a little more time to understand, but once you do, it's a big &quot;aha&quot; moment.</p>
<p>Currying is the process of taking a function that expects multiple arguments, and turning that into a sequence of functions, each of which takes only a single argument and produces a function that is expecting the next argument. This sequence ends with a function that takes the final argument and produces the value that the original function was designed to emit.</p>
<p>It's not immediately apparent why you'd want to do this. This particular aspect of functional programming has probably remained more of a mystery in the JavaScript world mostly because the facility is simply not available in the core language implementation, and therefore folks aren't as readily versed in its usage.</p>
<p>But if you've started to embrace functional programming in JavaScript and have already enjoyed creating &quot;helper&quot; functions that you can then use (in a composition sense) in other higher-order functions, the reason why currying is useful is clearer.</p>
<p>Useful is a plain word. In MPJ's example, using the <code>curry</code> facility provided by the <a href="https://lodash.com/">Lodash</a> library to enhance the way <code>filter</code> is employed, is actually quite beautiful. His exclamation &quot;wow&quot; (I heard it in lower case) should perhaps have been more &quot;WOW&quot;.</p>
<p>Here's the relevant section of the example code:</p>
<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">let</span> hasElement <span class="token operator">=</span><br>  _<span class="token punctuation">.</span><span class="token function">curry</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">element<span class="token punctuation">,</span> obj</span><span class="token punctuation">)</span> <span class="token operator">=></span> obj<span class="token punctuation">.</span>element <span class="token operator">===</span> element<span class="token punctuation">)</span><br><br><span class="token keyword">let</span> lightningDragons <span class="token operator">=</span><br>  dragons<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token function">hasElement</span><span class="token punctuation">(</span><span class="token string">'lightning'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>
<p><code>hasElement</code> is the helper function that is used to dynamically filter the data we're looking for. It has a common pattern (&quot;does a particular property have a particular value?&quot;). But the original (pre-currying) invocation was a little cumbersome:</p>
<pre class="language-javascript"><code class="language-javascript">dragons<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=></span> <span class="token function">hasElement</span><span class="token punctuation">(</span><span class="token string">'lightning'</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>
<p>With the new ES6 syntax we're already reducing the amount of code using the fat arrow syntax. But with currying, we can reduce it even further, not with syntax, but by embracing currying and <a href="https://en.wikipedia.org/wiki/Partial_application">partial application</a>. Moreover, we get even closer to saying what we want, rather than how to get it.</p>
<p>One thing that occurred to me, that MPJ didn't mention explicitly (perhaps it was too obvious), is the order of the parameters in the <code>hasElement</code> function. They're deliberately set that way round, so that currying will work well for us. If you stare long enough at the example code, you'll realise that this is because of what's going on:</p>
<ul>
<li>calling <code>hasElement('lightning')</code>, with only a value for the <code>element</code> parameter, returns a function</li>
<li>this intermediate function expects a further single argument - an object, for the <code>obj</code> parameter</li>
<li>what serendipity! the <code>filter</code> function is going to do exactly this - call the intermediate function, passing each object in the <code>dragons</code> array</li>
</ul>
<p>For more on the order of parameters, and a generally very entertaining talk, I recommend Brian Lonsdorf's &quot;<a href="https://www.youtube.com/watch?v=m3svKOdZijA">Hey Underscore, You're Doing It Wrong!</a>&quot;.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>F3C - A FunFunFunction Companion Series</title>
      <link href="https://qmacro.org/blog/posts/2016/10/02/f3c-a-funfunfunction-companion-series/"/>
      <updated>2016-10-02T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2016/10/02/f3c-a-funfunfunction-companion-series/</id>
      <content type="html">
        <![CDATA[
      <p>I came across a great YouTube video series on functional programming. It's by <a href="http://twitter.com/mpjme">Mattias P Johansson</a> (&quot;MPJ&quot; for short), whose YouTube channel is <a href="https://www.youtube.com/channel/UCO1cgjhGzsSYb1rsB4bFe4Q">funfunfunction</a>. Before you do anything else, including reading on, go over there and subscribe to his channel, the videos are excellent.</p>
<p>Back? Good. The series on functional programming is a playlist on MPJ's channel, called &quot;<a href="https://www.youtube.com/playlist?list=PL0zVEGEvSaeEd9hlmCXrk5yUyqUag-n84">Functional programming in JavaScript</a>&quot;. I thought it might be a nice exercise to summarise each of the videos in a series of posts here, sort of like a companion guide (hence the name &quot;F3C&quot; - &quot;FunFunFunction Companion&quot;).</p>
<p>I don't want to take away from the absolutely great videos themselves, you should watch them again and again. Rather, I wanted to try to present the key messages from each video in the series in posts over here. My intention is to keep the posts short (up to 500 words) and to the point, and perhaps include some code of my own.</p>
<p>This sounds to me like a good idea right now, perhaps it might not be such a good idea later on, we'll see.</p>
<p>(Warning: I interchange the words &quot;array&quot; and &quot;list&quot; in a reckless fashion throughout this series, as well as &quot;object&quot; and &quot;map&quot; (the type of data structure); don't worry though, treat them as the same things).</p>
<p>Oh, and if you're in the SAP developer ecosphere and attending SAP TechEd EMEA in Barcelona this year (08-10 Nov) - you might want to come along to my session DEV219: &quot;<a href="https://sessioncatalog.sapevents.com/go/agendabuilder.sessions/?l=133&amp;sid=37706_0&amp;locale=en_US">Building More Stable Business Apps with Functional Techniques in JavaScript</a>&quot;.</p>
<p><a href="/blog/posts/2016/10/02/f3c-part-1-higher-order-functions/">Part 1 - Higher-order functions</a></p>
<p><a href="/blog/posts/2016/10/02/f3c-part-2-map/">Part 2 - Map</a></p>
<p><a href="/blog/posts/2016/10/02/f3c-part-3-reduce-basics/">Part 3 - Reduce basics</a></p>
<p><a href="/blog/posts/2016/10/02/f3c-part-4-reduce-advanced/">Part 4 - Reduce advanced</a></p>
<p><a href="/blog/posts/2016/10/02/f3c-part-5-closures/">Part 5 - Closures</a></p>
<p><a href="/blog/posts/2016/10/03/f3c-part-6-currying/">Part 6 - Currying</a></p>
<p><a href="/blog/posts/2016/10/04/f3c-part-7-recursion/">Part 7 - Recursion</a></p>
<p><a href="/blog/posts/2016/10/16/f3c-part-8-promises/">Part 8 - Promises</a></p>
<p><a href="/blog/posts/2016/10/19/f3c-parts-9-and-10-functors/">Parts 9 &amp; 10 - Functors</a></p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>F3C Part 5 - Closures</title>
      <link href="https://qmacro.org/blog/posts/2016/10/02/f3c-part-5-closures/"/>
      <updated>2016-10-02T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2016/10/02/f3c-part-5-closures/</id>
      <content type="html">
        <![CDATA[
      <p>FunFunFunction Video: <a href="https://www.youtube.com/watch?v=CQqwU2Ixu-U&amp;list=PL0zVEGEvSaeEd9hlmCXrk5yUyqUag-n84&amp;index=5">Closures - Part 5 of Functional Programming in JavaScript</a></p>
<p>(This post is part of the <a href="/f3c/">F3C</a> series)</p>
<p>Functions have a signature (the parameters) and the body. The body is defined in a block, traditionally in curly braces[^n]. This block defines a scope, directly relating to the body of the function. In other words, it's function scope.</p>
<p>JavaScript has support for closures. This is a powerful feature, which gives function bodies dynamic access to data in the surrounding scope. Or scopes. I had been wondering about whether this access extended to the next outer level only, but in fact, it's access all the way down (or up?). Consider this:</p>
<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string">"Something"</span><br><span class="token keyword">function</span> <span class="token function">deep</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br>  <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token string">"The Universe"</span><br>  <span class="token keyword">function</span> <span class="token function">deeper</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br>    <span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token string">"Everything"</span><br>    <span class="token keyword">function</span> <span class="token function">deepest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">+</span> <span class="token string">", "</span> <span class="token operator">+</span> b <span class="token operator">+</span> <span class="token string">" and "</span> <span class="token operator">+</span> c<span class="token punctuation">)</span><br>    <span class="token punctuation">}</span><br>    <span class="token function">deepest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><br>  <span class="token punctuation">}</span><br>  <span class="token function">deeper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><br><span class="token punctuation">}</span><br>a <span class="token operator">=</span> <span class="token string">"Life"</span><br><span class="token function">deep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><br><span class="token comment">// => Life, The Universe and Everything</span></code></pre>
<p>The <code>deepest</code> function has access to not only <code>c</code>, but <code>b</code> and <code>a</code> also.</p>
<p>Using closures is such a natural part of JavaScript, if you're not too familiar, you just have to practice and get them under your skin. In languages that don't support closures, you can end up with a lot of explicit signatures and passing of data to callbacks, which can get messy and over-busy. So closures are also good for reducing the footprint of your code, which we know already means fewer chances for bugs.</p>
<p>[^n]: Although with single-expression bodies introduced with the ES6 fat arrow, we don't need the curly braces.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>F3C Part 4 - Reduce advanced</title>
      <link href="https://qmacro.org/blog/posts/2016/10/02/f3c-part-4-reduce-advanced/"/>
      <updated>2016-10-02T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2016/10/02/f3c-part-4-reduce-advanced/</id>
      <content type="html">
        <![CDATA[
      <p>FunFunFunction Video: <a href="https://www.youtube.com/watch?v=1DMolJ2FrNY&amp;index=4&amp;list=PL0zVEGEvSaeEd9hlmCXrk5yUyqUag-n84">Reduce advanced - Part 4 of Functional Programming in JavaScript</a></p>
<p>(This post is part of the <a href="/f3c/">F3C</a> series)</p>
<p>Reduce is powerful, much more than its siblings. You can use it not only to sum values (the classic &quot;hello world&quot; example for <code>reduce</code>), but also to build up a complex end result that may look nothing like what you started with, i.e. the list you are calling <code>reduce</code> upon. It's a mistake to think of <code>reduce</code> in terms of what that word means in English; you're not necessarily making something smaller than what you started with, you can make pretty much anything, of any size[^n].</p>
<p>As well as function composition (slotting functions into each other), another common style in functional programming is function chaining. The binding together of small functions that operate on data one after the other[^n].</p>
<p>The example that MPJ uses in this video is a good illustration of chaining. Aside from the call to <code>console.log</code>, the entire program is a single statement - an assignment of a value to the <code>output</code> variable:</p>
<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">var</span> output <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token string">'data.txt'</span><span class="token punctuation">,</span> <span class="token string">'utf8'</span><span class="token punctuation">)</span><br>  <span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><br>  <span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><br>  <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">line</span> <span class="token operator">=></span> line<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'\t'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><br>  <span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">customers<span class="token punctuation">,</span> line</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span><br>    <span class="token operator">...</span><br>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>
<p>What MPJ doesn't say explicitly, but is one of the reasons why this approach is so powerful and simple, is that each of these functions take input, and produce <em>new</em> output. There's no mutation of state. This means that there is less to go wrong. Further, apart from <code>trim</code>, all functions produce or operate on lists:</p>
<p><code>split</code> operates on a string and produces a list
<code>map</code> operates on a list and produces another list
<code>reduce</code> operates on a list and produces ... well, whatever you want</p>
<p>Notice that this part: <code>map(line =&gt; line.split('\t'))</code> actually produces a list ... of lists.</p>
<p>[^n]: It may help to think of reduce by its other common name, in other languages: &quot;fold&quot;, a name which signifies the action of executing the callback function on each element in turn.</p>
<p>[^n]: This reminds me of the Unix philosophy of small programs doing one thing well, connected and passing data via a series of pipes.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>F3C Part 3 - Reduce basics</title>
      <link href="https://qmacro.org/blog/posts/2016/10/02/f3c-part-3-reduce-basics/"/>
      <updated>2016-10-02T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2016/10/02/f3c-part-3-reduce-basics/</id>
      <content type="html">
        <![CDATA[
      <p>FunFunFunction Video: <a href="https://www.youtube.com/watch?v=Wl98eZpkp-c&amp;list=PL0zVEGEvSaeEd9hlmCXrk5yUyqUag-n84&amp;index=3">Reduce basics - Part 4 of Functional Programming in JavaScript</a></p>
<p>(This post is part of the <a href="/f3c/">F3C</a> series)</p>
<p>Higher-order functions <code>map</code>, <code>filter</code> and <code>reject</code> perform list transformations, where each time, the end result is still a list. <code>find</code> is a related function which is designed to return just a single element.</p>
<p><code>reduce</code> is a related higher order function, but the shape of the end result is whatever you want it to be. It's like the swiss army chainsaw of list transformations. Unlike the functions above, <code>reduce</code> takes <em>two</em> parameters. As well as the callback function, it takes a starting value, which - after the accumulation that takes place when processing each of the list's elements - becomes the end result.</p>
<p>The starting value can be any &quot;shape&quot; - a scalar, an array, or an object.</p>
<p>This means that if <code>map</code>, <code>filter</code>, <code>reject</code> or similar functions don't do what you need, you can write your own using <code>reduce</code>. A common fun exercise is implementing those functions with <code>reduce</code>, too.</p>
<p>Let's reimplement <code>reject</code>, this time using <code>reduce</code>:</p>
<pre class="language-javascript"><code class="language-javascript"><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">reject</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">pred</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">l<span class="token punctuation">,</span> x</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span><br>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> <span class="token function">pred</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span> l<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><br>    <span class="token keyword">return</span> l<span class="token punctuation">;</span><br>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br><span class="token punctuation">}</span></code></pre>
<p>The function implementation transforms the given array (in <code>this</code>) with <code>reduce</code>. Here the starting value is <code>[]</code>, an empty array, and we use similar logic with the passed-in predicate function to determine whether each element should be accumulated into the starting value or not.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>F3C Part 2 - Map</title>
      <link href="https://qmacro.org/blog/posts/2016/10/02/f3c-part-2-map/"/>
      <updated>2016-10-02T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2016/10/02/f3c-part-2-map/</id>
      <content type="html">
        <![CDATA[
      <p>FunFunFunction Video: <a href="https://www.youtube.com/watch?v=bCqtb-Z5YGQ&amp;list=PL0zVEGEvSaeEd9hlmCXrk5yUyqUag-n84&amp;index=2">Map - Part 2 of Functional Programming in JavaScript</a></p>
<p>(This post is part of the <a href="/f3c/">F3C</a> series)</p>
<p>Moving on from the higher-order function <code>filter</code> in the previous video, another higher-order function is introduced: <code>map</code>. <code>map</code> is <em>similar</em> to <code>filter</code> in that it also works on an array, producing another array. It is <em>different</em> to <code>filter</code> in that the function passed in should output elements for the array being produced, rather than boolean values that dictates the presence of elements in the new array.</p>
<p>So <code>map</code> &quot;transforms&quot; arrays. Compared to the imperative version of producing a list of animal names, the functional version with <code>map</code> is an awful lot shorter. It gets even shorter with the introduction of ES6 <a href="https://hacks.mozilla.org/2015/06/es6-in-depth-arrow-functions/">arrow functions</a>. Shorter code means less surface area for bugs, but it also improves the readability, and arrow functions help with this too.</p>
<p>Further, as the functions are so short, embellishing them with &quot;meaningful names&quot; for the parameters actually detracts from that readability, so as is often the style with functional programming elsewhere, short parameter names can be used to good effect.</p>
<p>The shortest version that MPJ comes up with is 39 characters, but there are extraneous brackets around the parameter that we can remove, reducing it even further:</p>
<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">var</span> names <span class="token operator">=</span> animals<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=></span> x<span class="token punctuation">.</span>name<span class="token punctuation">)</span></code></pre>
<p>Lovely.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>F3C Part 1 - Higher-order functions</title>
      <link href="https://qmacro.org/blog/posts/2016/10/02/f3c-part-1-higher-order-functions/"/>
      <updated>2016-10-02T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2016/10/02/f3c-part-1-higher-order-functions/</id>
      <content type="html">
        <![CDATA[
      <p>FunFunFunction Video: <a href="https://www.youtube.com/watch?v=BMUiFMZr7vk&amp;list=PL0zVEGEvSaeEd9hlmCXrk5yUyqUag-n84&amp;index=1">Higher Order Functions - Part 1 of Functional Programming in JavaScript</a></p>
<p>(This post is part of the <a href="/f3c/">F3C</a> series)</p>
<p>Functional programming makes you a better programmer because you're going to be writing less code. Less code because you're able to reuse more, and also because you're not having to write 'mechanics'. You're writing more <em>what</em> you want, rather than <em>how</em> to get it. There are fewer bugs too, not only simply because there's less code, but that code is easier to reason about.</p>
<p>Functions are values. They can be passed around in variables and &quot;slotted into each other&quot;. Functions that take functions as arguments are called higher-order functions. Functions that produce other functions as results are also higher-order functions. Composability is an aspect of functional programming, in that small, simple functions can be combined. A small enough function with no cognitive or contextual baggage is more likely to be reusable, too.</p>
<p>The filter function (<code>Array.prototype.filter</code>) is shown as an example of a higher order function. Its use, to filter an array of animals, is compared to the imperative approach to do the same thing. This latter approach is more difficult to reason about, because there's more code, and more going on. What's not said explicitly is that in the imperative version, there are more variables whose values change. This mutable state in general brings about risks of bugs, and makes code harder to reason about and also to debug.</p>
<p>MPJ mentions the function <code>reject</code> which he mistakenly attributes as a standard function on <code>Array</code>s. There isn't one (you can employ a functional programming library such as lodash or underscore to get it), but I thought I'd have a go at writing one.</p>
<p>Given the <code>animals</code> array in the video, here's how one might go about adding a <code>reject</code> function, and using it:</p>
<pre class="language-javascript"><code class="language-javascript"><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">reject</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">pred</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br>    <span class="token keyword">return</span> <span class="token operator">!</span> <span class="token function">pred</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><br>  <span class="token punctuation">}</span><span class="token punctuation">)</span><br><span class="token punctuation">}</span></code></pre>
<p><code>reject</code> is a (higher-order) function that take a function as its argument. I'm using the parameter <code>pred</code> here for this; the word &quot;predicate&quot; is often used to describe this sort of function (one that returns a boolean, often used in this sort of context). The array upon which <code>reject</code> is made to operate (represented by <code>this</code>) is filtered, and the predicate function is used to determine whether each array element remains or not. Note the negation (<code>!</code>) as here we want to throw away, rather than keep elements that pass the predicate test.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>The Fiori revolution - disruption at its best</title>
      <link href="https://qmacro.org/blog/posts/2016/09/28/the-fiori-revolution-disruption-at-its-best/"/>
      <updated>2016-09-28T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2016/09/28/the-fiori-revolution-disruption-at-its-best/</id>
      <content type="html">
        <![CDATA[
      <p>SAP Fiori has heralded and enabled a revolution in the User Experience (UX) for enterprises the world over. There's plenty of disruption here that you can harness, disruption that will give you a better chance in this ever increasingly digital era. This post examines three disruptive aspects of Fiori, and why they're important.</p>
<p>I'm an SAP dinosaur, and not ashamed to admit it. I embraced S/370 assembler, and was bathed in the glow of the green screen 3278 terminals that I used with SAP R/2 a long time ago. Even today I dream of a return to punched cards and Job Control Language.</p>
<p><img src="/images/2016/09/fiori.jpg" alt="SAP Fiori"></p>
<p>But that's not going to happen, and apart from some odd exceptions (like me), the world breathes a sigh of relief. Joking aside, there's a revolution that's been gathering pace since mid 2013, when SAP Fiori arrived on the scene. We've covered many aspects of Fiori on our website already, so feel free to inform yourself if you haven't done already. What I want to talk about are aspects of that revolution which, if embraced, are disruptive enough to help your organisation move forward as you digitally transform your business and step into the next decade.</p>
<p>First a bit of context, to set the scene. Over the years, SAP have introduced many initiatives to address the lot of the user, but they've been technology driven, sometimes inspirational, sometimes challenging, and often disjointed. SAP Fiori is different, as it's design driven, with the user -- the consumer -- front and centre. The realisation, in the form of technology and platform, is secondary. So Fiori is very appropriate as the right initiative to embrace and disrupt when it comes to people.</p>
<h2>Seamless consumer interactions</h2>
<p>The Fiori Launchpad is an important component in the Fiori universe, allowing direct and realtime visibility of KPIs, and consumption of apps, in one place (across all devices blah blah, yep, we know the score). Look one level up from the Launchpad, and consider what you see. The Launchpad, as well as the well-designed app-based approach to consuming functionality, is suitable and available for your business partners as well as your internal departments. Imagine that!</p>
<p>Why keep the goodness of all that Fiori has to offer to yourselves? Spread the love to your customers and suppliers, and they're more likely to reciprocate. How often have you gritted your teeth before launching into some old style portal, at your desk, just to check on the progress of an order or invoice?</p>
<p>What's more, with the power of the SAP HANA Cloud Platform, Portal Service, you can even move away from the tile-based approach, while still benefitting from all the design goodness, by building freestyle sites that are both fit for purpose but also espouse the Fiori best practices for app-level interaction.</p>
<h2>Connected systems</h2>
<p>SAP Fiori is here, and it's here to stay. Not only for what we traditionally think of in terms of SAP ERP systems, but also for other products - Ariba, Concur, Lumira to name but three. Gradually, the Fiori revolution is coming to these systems.</p>
<p>The architecture for Fiori is based largely on the concept of a &quot;frontend server&quot;, which as the name suggests, abstracts away the nuances of whatever SAP systems sit behind it - ECC, CRM, SRM and more. So we have connected systems and processes through a uniform interface. Dissonance and impedance that normally arise through context switching and different user interfaces can melt away.</p>
<p>It's not only SAP systems that can participate in this connected state. The toolkit that powers Fiori, UI5, <a href="/blog/posts/2014/02/14/the-essentials-sapui5-openui5-and-fiori/">comes in two flavours</a> - one with an associated SAP licence, the other with an Apache 2.0 open source licence. The latter, named OpenUI5, means that you can safely and legitimately provide a Fiori look and feel for your non-SAP systems too, further harmonising the experience across your enterprise.</p>
<h2>Realtime insights</h2>
<p>I've hinted at this disruption already. Yes, we all know about the realtime dashboards from the BI stable. There are plenty of tools over there that can give you insights into data in realtime. But it's &quot;over there&quot;. There's a disconnect, a cognitive gap when you switch from your transactional tools to your analytical ones.</p>
<p>With Fiori, and the infrastructure that comes with it (the Launchpad, the Overview Page concept, Smart Business and more) that gap disappears. Your users (and partners for that matter) can move from insight to action in one smooth transition, because both are in the same place, on the same page (for examples of this, see <a href="/blog/posts/2016/03/29/the-sap-fiori-launchpad-as-a-dashboard-for-my-running-kpis/">The SAP Fiori Launchpad as a dashboard for my running KPIs</a>).</p>
<h2>Closing thoughts</h2>
<p>I've worked with SAP technologies for 30 years, and I suggest that never before has there been such an opportunity, with joined up technology initiatives, for SAP customers to embrace and make their own, to move themselves forward and beyond where they are right now. Yes, I hear you say, it's only a frontend. OK, fair point. But it's seamless, connected and live. Most importantly though, it's focused on people - you, your users, and your business partners. Systems and business processes don't make a difference. People do.</p>
<hr>
<p><a href="http://web.archive.org/web/20180227042729/http://www.bluefinsolutions.com/insights/dj-adams/september-2016/fiori-revolution-disruption-at-its-best">Originally published on the Bluefin Solutions website</a></p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Community and Collaboration at SAP Inside Track Manchester</title>
      <link href="https://qmacro.org/blog/posts/2016/09/27/community-and-collaboration-at-sap-inside-track-manchester/"/>
      <updated>2016-09-27T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2016/09/27/community-and-collaboration-at-sap-inside-track-manchester/</id>
      <content type="html">
        <![CDATA[
      <p>Earlier this month, around 40 folks gathered for a two day event in Manchester's Northern Quarter for SAP Inside Track Manchester 2016. Read on to find out more about this event and others like it, and how the days played out.</p>
<p>SAP Inside Tracks are community-organised events for like minded people to come together to share knowledge on SAP related subjects. These subjects are commonly of a technical nature, but the range is far and wide overall. Beyond knowledge sharing, the events are a great opportunity to network and build local communities. Think &quot;unconference&quot; rather than &quot;conference&quot; and you won't go far wrong!</p>
<h2>The event</h2>
<p>The events have been taking place across the globe for a number of years; take a look at the dedicated <a href="http://web.archive.org/web/20180227043737/http://scn.sap.com/community/events/inside-track">SAP Inside Track space on the SAP Community Network</a> for more information. This is the fourth time we've run the event in the north of England ... in 2013 we held it in Manchester, in 2014 and 2015 we were graciously hosted by the folks at Sheffield Hallam University, and this year we returned to our roots, running SAP Inside Track Manchester, or &quot;sitMAN&quot;,  in the birthplace of the industrial revolution and the true home of computing! This time around the excellent Manchester Digital Laboratory - <a href="http://web.archive.org/web/20180227043737/https://madlab.org.uk/">MadLab</a> to most people - was our host, not only for the two days of sessions but also for the evening event at the end of the first day.</p>
<h2>The sessions</h2>
<p>In the run up to the event, attendees submit session proposals, which are then organised into one ormore streams shortly before the start. Our event had a good mix of content on Day 1, covering the HANA Cloud Platform (HCP), the Internet of Things (IoT), User Experience, SAP S/4HANA, BI, Security, UI5 and more.</p>
<p>Sourced from the community - the attendees themselves - the session topics are based upon whatever someone wants to talk about. This brings a really interesting dynamic to the event. For example, beyond the technical topics already mentioned, we also discussed ways to tackle the mountain of email under which we all find ourselves.</p>
<p><img src="/images/2016/09/madlab-manchester.png" alt="The attendees at MadLab in Manchester"></p>
<p>Day 2 is normally given over to an all day hands-on workshop. This time, we ran it on building custom tiles on the Fiori launchpad. Sounds familiar? Of course - it was related to what we presented in our Bluefin webinar event <a href="http://web.archive.org/web/20180227043737/http://www.bluefinsolutions.com/events/the-sap-fiori-launchpad-as-a-human-centric-dashboa">The SAP Fiori Launchpad as a Human-Centric Dashboard</a> from earlier this year.</p>
<h2>The evening event</h2>
<p>As has now become tradition at sitMAN, we finished off Day 1 in style, with an organised beer tasting seminar run by <a href="https://twitter.com/thebeermoth">The Beermoth</a>, a most excellent purveyor of fine beers just round the corner from MadLab. Thence we naturally furthered our exploration of all things beer in nearby classic pubs, from Port Street Beer House, through the Marble Arch, Smithfield Tavern and beyond. Building and sharing SAP tech knowledge is thirsty work, you know!</p>
<h2>The sponsors</h2>
<p>Most SAP Inside Track events are free to attend, or there's a nominal fee. Our sitMAN event was free. But the venue hire and beer seminar wasn't, so it's only right to thank the sponsors of the event, without whom it couldn't have happened. Our very own Bluefin Solutions, ITelligence, Resulting IT and Zoedale Ltd - please stand up and be counted, and accept our thanks again for helping make this happen. Of course, the event doesn't just happen of its own accord; there's a core set of folks behind the scenes who do a lot of the organising, so many thanks are due there also!</p>
<h2>Wrapping up</h2>
<p>SAP Inside Tracks are essentially grass roots events, and this one was no exception. No pomp, circumstance or ceremony, just plain old community spirit and down to earth practicality, and above all, a willingness to participate and share knowledge and stories. So the final thanks should go to the attendees who not only turned up, but took part and made the two days a great success. Until next year, happy hacking!</p>
<hr>
<p><a href="http://web.archive.org/web/20180227043737/http://www.bluefinsolutions.com/insights/dj-adams/september-2016/community-and-collaboration-at-sap-inside-track-ma">Originally published on the Bluefin Solutions website</a></p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Understanding the SAP Fiori Cloud Edition</title>
      <link href="https://qmacro.org/blog/posts/2016/07/14/understanding-the-sap-fiori-cloud-edition/"/>
      <updated>2016-07-14T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2016/07/14/understanding-the-sap-fiori-cloud-edition/</id>
      <content type="html">
        <![CDATA[
      <p>The SAP Fiori Cloud Edition is upon us. What is it? How does it work, and what benefits does it bring? Find out answers to these questions, and more, in this overview of SAP's offering of Fiori in the cloud.</p>
<p>The SAP Fiori Cloud Edition is here. Actually, perhaps I should call it &quot;SAP Fiori, cloud edition&quot; or even &quot;SAP Fiori, cloud service&quot; - the name keeps changing, but thankfully the service is the same.</p>
<p>It was made generally available (GA) at the end of the first quarter of this year, and is definitely something you should be looking at for your Fiori journey.</p>
<h2>What is it?</h2>
<p>So first of all, what is it? Well, it is pretty much exactly what it says it is - it's Fiori, in the cloud. But to understand what that actually means, let's step back and look at Figure 1 - a simplified diagram of a typical on-premise architecture that includes Fiori in a traditional ABAP stack context.</p>
<p><img src="/images/2016/07/on-prem-fiori.png" alt=""></p>
<p><em>Figure 1: Simplified architecture for on-premise Fiori</em></p>
<p>As we know, Fiori is many things, including SAP's strategic approach to User Experience (UX) across all products, a series of detailed design guidelines, and a collection of actual apps. To be able to install and make those apps available for users in your organisation, you need a number of components. One is SAP Gateway, providing the backend enablement for OData as well as the frontend exposure as consumable OData services. The other is the SAP UI Add-On for Netweaver, providing the infrastructure for Fiori - the Launchpad and related shell services, the UI5 runtime, and more.</p>
<p>In addition, the Fiori apps you choose to implement must be installed... and they're installed on the same server as the UI Add-On and the frontend Gateway components (there's a backend OData component to each Fiori app also, but we'll leave that for now).</p>
<p>The usual recommended approach is to have a &quot;frontend server&quot; containing the UI Add-On and the frontend Gateway components, and acting as a container to hold the Fiori apps themselves. If you've already installed a Gateway hub from pre-Fiori days, that's great and an ideal candidate for becoming such a frontend server.</p>
<p>But if you haven't, and want to get started with Fiori, then you'd normally need to install, configure and maintain a standard tiering (development, test &amp; production) of ABAP stack systems to act as that frontend server. That comes with capital and expense costs as with any new SAP server install, not to mention the long term maintenance.</p>
<p>With SAP Fiori Cloud Edition, this requirement goes away. The services that would normally be provided by the frontend server are made available to you and your users, in the cloud - on the SAP HANA Cloud Platform, to be precise.</p>
<h2>How does it work?</h2>
<p>Figure 2 shows the same Fiori context as we saw in Figure 1, but instead of the on-premise frontend server, the SAP Fiori Cloud Edition services are employed.</p>
<p><img src="/images/2016/07/cloud-edition.png" alt=""></p>
<p><em>Figure 2: SAP Fiori Cloud Edition removes the need for a frontend server.</em></p>
<p>The entire Fiori infrastructure, including the Launchpad, the UI5 runtime, and the Fiori apps themselves, are provided as part of this cloud service.</p>
<p>Also included is the HANA Cloud Integration OData Provisioning service, known as &quot;HCP, OData provisioning&quot;. This is what was previously known as Gateway as a Service (GWaaS). HCP, OData provisioning provides the equivalent services that the OData components on a frontend server would normally provide (the rightmost Gateway box in Figure 1, that is): Connect to the backend server to coordinate the calls to the OData enablement ABAP classes, and expose the results in an OData shape and colour.</p>
<p>Finally, with SAP Cloud Identity (represented by the &quot;Auth&quot; box in Figure 2) connected to an on-premise identity provider (represented by the &quot;IdP&quot; box), you have everything you need to get going with Fiori, without the up front capital investment, server landscape extension, and continued maintenance.</p>
<p>Moreover, you don't need to install or maintain the apps themselves, that's also done for you.</p>
<h2>What are the catches?</h2>
<p>Well, there are no catches per se, but there are some important points of which to be aware. Going into any new SAP software offering without prior knowledge is never a good idea, so here goes:</p>
<p>Backend OData components are still required: The backend enablement components of any given Fiori app are still required, of course - to provide the frontend Fiori app logic with the data and functions from your backend systems of record. This is the leftmost &quot;Gateway&quot; box in both Figure 1 and Figure 2. If you're running on a 7.40 or above ABAP stack, you have these components anyway.</p>
<p>You'll need cloud connectivity: Obviously you'll need to connect your on-premise systems to the cloud. Fear not, this is the domain of the SAP HANA Cloud Connector (HCC, as shown in Figure 2). It's a small Java application that runs within your on-premise environment and connects outwards forming a secure tunnel to the HANA Cloud. You add whitelist entries to allow access from the SAP HANA Cloud Platform to resources in your on-premise landscape - those will be the Gateway endpoints in your backend systems.</p>
<p>Not all apps are available yet: Each Fiori app that is made available in the SAP Fiori Cloud Edition offering undergoes a series of tests and checks, in a provisioning process that ends up with that app available for consumption within the context of the service. This means that not all apps are available right now - but there's a new filter option within the SAP Fiori Apps Library (see Figure 3) that will show you which ones are.</p>
<p><img src="/images/2016/07/apps-filter.png" alt=""></p>
<p><em>Figure 3: The &quot;SAP Fiori apps on SAP HCP (SAP Fiori, cloud edition)&quot; filter.</em></p>
<p>You may need to consider bandwidth: Your users connect to your on-premise network will be going out to the cloud to consume the Fiori apps. You may need to consider the bandwidth requirements for this, if you only have a minimal Internet connection. Then again, if you happen to already have a Gateway hub system on-premise, some of the traffic can be kept within the on-premise network to improve latency and save round trips to the cloud.</p>
<p>Is SAP Fiori Cloud Edition for you?
Of course, only you can decide that, it depends on a lot of factors. But there's certainly a compelling argument based on the benefits of service-based application consumption from the cloud, benefits which include reduced landscape complexity, maintenance and capital cost. SAP Fiori Cloud Edition has an associated subscription price, but when comparing to traditional on-premise related costs, it can make a lot of sense.</p>
<p>To help make the decision, SAP offers a demo version of the Cloud Edition, where you can pretty much try out all the features, including app extensibility. It's definitely worth exploring, especially as there's no direct cost associated with that!</p>
<p>One of the stumbling blocks we see with Fiori is the requirement for &quot;yet more infrastructure&quot;. This is, for me, the biggest selling point for SAP Fiori Cloud Edition. Rather than have a project weighed down by the requirements to get a frontend server up and running and at the right patch levels for Fiori, UI5 and the apps themselves - and to maintain those components at the appropriate patch levels too - you can concentrate on the real task in hand, bringing the beauty and simplicity of Fiori, powered by that awesome toolkit UI5, to your business.</p>
<p>See you in the cloud!</p>
<hr>
<p><a href="http://web.archive.org/web/20180322133257/http://www.bluefinsolutions.com/insights/dj-adams/july-2016/understanding-the-sap-fiori-cloud-edition">Originally published on the Bluefin Solutions website</a></p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Top 10 misconceptions about Fiori</title>
      <link href="https://qmacro.org/blog/posts/2016/07/12/top-10-misconceptions-about-fiori/"/>
      <updated>2016-07-12T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2016/07/12/top-10-misconceptions-about-fiori/</id>
      <content type="html">
        <![CDATA[
      <p>As SAP Fiori matures as a concept, as a series of apps and as SAP's approach to UX across all its products, so grow the number of misconceptions about what it is, and what it isn't. In this post, I address the top ten misconceptions and misunderstandings about what has been called <a href="/blog/posts/2015/03/02/can-i-build-a-fiori-app-yes-you-can!/">a state of mind</a>.</p>
<h2>1. Fiori apps are from SAP, everything else is not-quite-Fiori</h2>
<p><a href="https://blogs.sap.com/2014/03/04/building-sap-fiori-like-uis-with-sapui5-in-10-exercises/">In the early days</a>, the idea existed that there were SAP Fiori apps, and Fiori-like apps. Both these phrases were used, to distinguish those built by SAP and those not built by SAP. It's clear that this distinction was actually irrelevant, in the light of what defines a Fiori app. You can say many things about Fiori apps, but certainly not &quot;they must be built by developers at SAP&quot;.</p>
<p>With the <a href="https://experience.sap.com/fiori-design/">SAP Fiori Design Guidelines</a> and <a href="https://www.bbc.co.uk/cult/hitchhikers/guide/tea.shtml">a nice hot cup of tea</a>, you have everything you need to design and build your own Fiori apps.</p>
<p><img src="/images/2016/07/wyse-terminal.png" alt="Wyse terminal"></p>
<h2>2. Fiori is a set of technologies</h2>
<p>This is not quite correct. The Fiori concept lives at the User Experience (UX) level, and in theory you can create a Fiori app, that is constrained and informed by the Design Guidelines, with any technology.</p>
<p>Once you descend to the User Interface (UI) level - where the rubber meets the road, so to speak - you can choose to develop your Fiori apps in any editor, with any workflow, using any toolkit or framework (and yes, sometimes I develop Fiori apps using vim on my antique Wyse serial terminal). But the end result must conform to the design language that is Fiori.</p>
<h2>3. Fiori requires the SAPUI5 toolkit</h2>
<p>While all Fiori apps so far from SAP have been built with this awesome toolkit, of which I am a huge fan, it's not at all true to say that SAPUI5 is a prerequisite for an app to be classed as Fiori.</p>
<p>Look at the <a href="http://web.archive.org/web/20170617185038/http://www.bluefinsolutions.com/insights/nathan-adams/may-2016/what-will-sap-apple-s-partnership-bring-to-the-ent">recent partnership announcement between SAP and Apple</a>, to develop OS-native Fiori apps for Apple devices. While this is not much of a departure for the Design Guidelines (there are new iOS specific design language elements that incorporate Apple's iOS Human Interface Guidelines), the technology stack for the frontend development is rather different.</p>
<h2>4. Without SAP Gateway, it's not Fiori</h2>
<p>One could think about this in terms of OData, but we'll come to that in a second. SAP Gateway is the product name for the OData server implementation for the ABAP stack. And yes, of course there are plenty of Fiori apps that consume OData services that reside on ABAP stack systems. But there are even more Fiori apps that consume OData services that are not served by Gateway - they're served by the Extended Services part of the HANA platform, because those OData services reside directly on the HANA platform. So Gateway is not involved there.</p>
<p>If an app interacts with a backend using another type of protocol (i.e. other than OData), is it Fiori? Well yes. Fiori is about the beautiful swan on the water surface, not about the paddling underneath. There are guidelines internally at SAP that relate to the use of OData, but these are more of a technical nature.</p>
<h2>5. You can't build a Fiori app without Design Thinking first</h2>
<p>Design Thinking is a very useful step in the Discover phase of any development, Fiori or otherwise. It's cost effective too - any changes at this stage are a lot less expensive to implement than when in the Develop or Deploy phase.</p>
<p>Moreover, while the Fiori Design Guidelines structure themselves around the concepts of personas, roles and tasks, Design Thinking is only one way of determining the input that will influence the outcome of the Design phase. So you don't need Design Thinking on your way to building a Fiori app, but it helps an awful lot.</p>
<h2>6. All Fiori apps are mobile by design</h2>
<p>One of the key design principles described in the Fiori Design Guidelines was &quot;Responsive&quot; (the others are Role-Based, Coherent, Simple and - my favourite - Delightful). This changed recently to &quot;Adaptive&quot;.</p>
<p>The subtle difference expresses the point that while many Fiori apps are designed to work across all devices, some, from a practical perspective, are really not suited. Look at some of the SAP S/4HANA Fiori apps, especially those that present a complex grid view of information, and you'll understand why. So yes, while many Fiori apps are mobile-ready, not all of them are designed to be.</p>
<h2>7. Without the Launchpad, it's not Fiori</h2>
<p>The SAP Fiori Launchpad is an important component in the complete Fiori experience. It's the starting point for users in many cases, is available on-premise and in the cloud, and is much more than simply a menu of options. But the idea of Fiori exists above any one component, and the very fact that you can set up Fiori apps to be launched in &quot;standalone mode&quot;, i.e. without the need to access it from the Launchpad, shows us that the Launchpad is not essential.</p>
<p>Take this one step further - wrapping a Fiori app with Kapsel for a hybrid experience on a mobile device - and again, you have a Fiori app, but no Launchpad.</p>
<h2>8. You need developers with super web development skills</h2>
<p>Let's look at this from a practical point of view, and how Fiori apps are most commonly built today. Of course, more skill and experience is almost always welcome, but when building Fiori apps, what's essential? Yes, knowledge of HTML5 (HTML, CSS and JavaScript) is very important, but the importance of those &quot;raw&quot; skills pales into insignificance compared to the importance of knowing the toolkit that SAP use to build their Fiori apps, and that we do too - SAPUI5.</p>
<p>SAPUI5 is an abstraction level above HTML5, and while it would be foolish to try and wield SAPUI5 without knowing about HTML5, the key skills you should be looking for in a potential frontend developer are those pertaining to SAPUI5.</p>
<h2>9. I can manage my Fiori developers just like I do my ABAP developers</h2>
<p>This is a misunderstanding that can be costly. Developing in ABAP means working inside the confines of the ABAP stack, the R/3 architecture that is the basis for your ECC, CRM and SRM systems to name a few. Within these walls, the complete developer workflow is defined and encoded in concrete. Code completion, syntax checking, unit testing, version control and software logistics - everything is handled for you (some would say &quot;done <em>to</em> you&quot;!) on the ABAP stack.</p>
<p>This will continue for the ABAP-based OData services you might want to build. But in the non-proprietary world outside, the choice of tools and developer workflows can be bewildering. You have all the advantages and all the disadvantages that total freedom brings. Make sure you have all bases covered.</p>
<h2>10. ABAP developers aren't the right fit for becoming Fiori developers</h2>
<p>Just to qualify this statement somewhat - of course, in an ABAP stack environment, it's likely that there will be ABAP development for the backend part of a Fiori app. But here I'm talking about the assumption that ABAP developers can't make good frontend Fiori developers - can't transition to the skillsets and technologies required to build <a href="/blog/posts/2012/05/07/sapui5-the-future-direction-of-sap-ui-development/">outside-in apps</a> that run in browsers.</p>
<p>That's nonsense. For me, there's no such thing as &quot;an ABAP developer&quot;. Yes, there are developers that write ABAP, but restricting oneself to a single language is limiting in all sorts of ways. A good developer learns new languages and techniques to stay sharp. The skills, discipline and business knowledge that a good ABAP developer has are more than translatable to the newer world of Fiori development.</p>
<p>Not everyone will want to transition, and a &quot;full-stack&quot; developer is neither better nor worse than developers separately focused on backend and frontend.</p>
<p>But, heck - I started my SAP career writing SAP applications in mainframe assembler, then ABAP, and now JavaScript &amp; SAPUI5. If I can do it, what's stopping you?</p>
<hr>
<p><a href="http://web.archive.org/web/20180119183817/http://www.bluefinsolutions.com/insights/dj-adams/july-2016/top-10-misconceptions-about-fiori">Originally published on the Bluefin Solutions website</a></p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>FOFP 2.1 A look at filter</title>
      <link href="https://qmacro.org/blog/posts/2016/05/04/fofp-2.1-a-look-at-filter/"/>
      <updated>2016-05-04T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2016/05/04/fofp-2.1-a-look-at-filter/</id>
      <content type="html">
        <![CDATA[
      <p>Part of the <a href="/blog/posts/2016/05/03/fofp-fundamentals-of-functional-programming/">Fundamentals of Functional Programming</a> document.</p>
<p>Prev: <a href="/blog/posts/2016/05/03/fofp-1.5-creating-functions">FOFP 1.5 Creating functions</a></p>
<p>We've already seen our first higher-order function, <code>map</code>, in action. A close sibling is <code>filter</code>.</p>
<p><code>filter</code> has the same pattern as <code>map</code>, in that it works on an Array, and applies the supplied function to each element of that Array in turn. In this case though, the function acts as a predicate, and only those elements for which the predicate evaluates to true are kept. The others are discarded, leaving you with a shorter collection.</p>
<h2>Taking the odd ones</h2>
<p>Let's explore with a simple example based on our short list of numbers:</p>
<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">var</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre>
<p>If we were only interested in the odd numbers, we could do this:</p>
<pre class="language-javascript"><code class="language-javascript">nums<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> x <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><br><span class="token comment">// [1, 3, 5]</span></code></pre>
<p>Pretty simple. Like we did with <code>map</code>, we could use a pre-defined (i.e. named) function instead:</p>
<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">is_odd</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> x <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><br><br>nums<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>is_odd<span class="token punctuation">)</span><br><span class="token comment">// [1, 3, 5]</span></code></pre>
<h2>Declarative style</h2>
<p>Notice that the program is starting to become easier to read, the more we move away from the mechanical nature of the imperative style of programming towards a more declarative style.</p>
<p>And it doesn't end there. If we wanted to take the numbers we'd filtered our list down to (1, 3 and 5) and transform them, all we'd need to do is chain calls together ... remember that <code>map</code> and <code>filter</code> both consume and produce lists. Remembering our <code>times</code> function from <a href="/blog/posts/2016/05/03/fofp-1.5-creating-functions/">FOFP 1.5</a>, we could form a chain like this:</p>
<pre class="language-javascript"><code class="language-javascript">nums<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>is_odd<span class="token punctuation">)</span><br>    <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token function">times</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><br><span class="token comment">// [4, 12, 20]</span></code></pre>
<p>Now that we've seen <code>map</code> and <code>filter</code>, it's time to have a look at their somewhat more powerful sibling, <code>fold</code>.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>FOFP Fundamentals of functional programming</title>
      <link href="https://qmacro.org/blog/posts/2016/05/03/fofp-fundamentals-of-functional-programming/"/>
      <updated>2016-05-03T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2016/05/03/fofp-fundamentals-of-functional-programming/</id>
      <content type="html">
        <![CDATA[
      <p><em>This document is for me to use during, and to distribute after, a lecture at Manchester's Xaverian College, where I'm very honoured to be able to help introduce some core concepts in functional programming, in my role as STEM Ambassador.</em></p>
<p><em>I'm writing it in draft mode in public, as a sort of experiment. <a href="mailto:qmacro@gmail.com?Subject=FOFP%20Feedback">Feedback</a> gratefully accepted!</em></p>
<p><strong>Part 1 - First-class functions, list processing and higher-order functions</strong></p>
<p><a href="/blog/posts/2016/05/03/fofp-1.1-introduction">Introduction</a></p>
<p><a href="/blog/posts/2016/05/03/fofp-1.2-trying-things-out">Trying things out</a></p>
<p><a href="/blog/posts/2016/05/03/fofp-1.3-some-basic-list-processing">Some basic list processing</a></p>
<p><a href="/blog/posts/2016/05/03/fofp-1.4-a-different-approach-with-map/">A different approach with map</a></p>
<p><a href="/blog/posts/2016/05/03/fofp-1.5-creating-functions">Creating functions</a></p>
<p><strong>Part 2 - More higher order functions</strong></p>
<p><a href="/blog/posts/2016/05/04/fofp-2.1-a-look-at-filter">A look at filter</a></p>
<p>Transforming with fold (aka reduce)</p>
<p><strong>Part 3 - Different syntaxes and languages</strong></p>
<p>JavaScript and ES6</p>
<p>Fat arrows and more concise function definitions</p>
<p>Our examples in Clojure</p>
<p><strong>Part 4 - Classic list processing</strong></p>
<p>(To cover lists, head+tail / first+rest and recursion)</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>FOFP 1.5 Creating functions</title>
      <link href="https://qmacro.org/blog/posts/2016/05/03/fofp-1.5-creating-functions/"/>
      <updated>2016-05-03T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2016/05/03/fofp-1.5-creating-functions/</id>
      <content type="html">
        <![CDATA[
      <p>Part of the <a href="/blog/posts/2016/05/03/fofp-fundamentals-of-functional-programming/">Fundamentals of Functional Programming</a> document.</p>
<p>Prev: <a href="/blog/posts/2016/05/03/fofp-1.4-a-different-approach-with-map">FOFP 1.4 A different approach with map</a></p>
<p>In our previous example, we defined a helper function <code>square</code> and used it like this:</p>
<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">square</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br>  <span class="token keyword">return</span> x <span class="token operator">*</span> x<span class="token punctuation">;</span><br><span class="token punctuation">}</span><br><br>nums<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>square<span class="token punctuation">)</span><br><span class="token comment">// [1, 4, 9, 16, 25]</span></code></pre>
<h2>Helper functions</h2>
<p>Let's go one step further and write something that will produce helper functions for us. We'll move away from squaring numbers, but stay on the simple theme of increasing integers.</p>
<p>Consider this:</p>
<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">times</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br>  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br>    <span class="token keyword">return</span> x <span class="token operator">*</span> n<span class="token punctuation">;</span><br>  <span class="token punctuation">}</span><br><span class="token punctuation">}</span></code></pre>
<p>What's going on? We have a function, which is returning a function. Yes, it's that higher-order nature again. Here we're defining a function that takes a multiple <code>n</code>. The scope defined by that function's block (the outermost <code>{...}</code>) closes over the value passed for <code>n</code>, creating a so-called &quot;closure&quot;, with the value forged into the inner function that's returned.</p>
<p>The inner function also expects a value <code>x</code> that will be multiplied by that value of <code>n</code>.</p>
<p>Let's have a look at how we might use that:</p>
<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">var</span> double <span class="token operator">=</span> <span class="token function">times</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br><span class="token keyword">var</span> triple <span class="token operator">=</span> <span class="token function">times</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>So take <code>triple</code>. What is it that we have, as a result of calling <code>times(3)</code>? Well, we have a function expecting an argument:</p>
<pre class="language-javascript"><code class="language-javascript"><span class="token function">triple</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><br><span class="token comment">// 18</span></code></pre>
<p>So really, with <code>times</code>, we have a function, that takes a value, and produces a function, that takes a value, that produces a value. If you're familiar with type signatures at all, for example from Haskell, you'd represent this like so:</p>
<pre><code>f :: a -&gt; (a -&gt; a)
</code></pre>
<p>or simply:</p>
<pre><code>f :: a -&gt; a -&gt; a
</code></pre>
<h2>Partial application</h2>
<p>You could even use <code>times</code> like this:</p>
<pre class="language-javascript"><code class="language-javascript"><span class="token function">times</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><br><span class="token comment">// 12</span></code></pre>
<p>In some ways, our simple <code>times</code> function embodies some of the essence of partial application [4.12.1.4]. Calling <code>times</code> with a single argument:</p>
<pre class="language-javascript"><code class="language-javascript"><span class="token function">times</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span></code></pre>
<p>is a partial application, and results in a function which is waiting for the second argument:</p>
<pre><code>&lt;function-produced-by-times(3)&gt;(4)
</code></pre>
<h2>Using helpers</h2>
<p>Now we have everything we need to use <code>map</code> to process our list, with a helper function:</p>
<pre class="language-javascript"><code class="language-javascript">nums<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token function">times</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><br><span class="token comment">// [2, 4, 8, 8, 10]</span></code></pre>
<p>Neat!</p>
<p>Next: <a href="/blog/posts/2016/05/04/fofp-2-1.a-look-at-filter">FOFP 2.1 A look at filter</a></p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>FOFP 1.4 A different approach with map</title>
      <link href="https://qmacro.org/blog/posts/2016/05/03/fofp-1.4-a-different-approach-with-map/"/>
      <updated>2016-05-03T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2016/05/03/fofp-1.4-a-different-approach-with-map/</id>
      <content type="html">
        <![CDATA[
      <p>Part of the <a href="/blog/posts/2016/05/03/fofp-fundamentals-of-functional-programming/">Fundamentals of Functional Programming</a> document.</p>
<p>Prev: <a href="/blog/posts/2016/05/03/fofp-1.3-some-basic-list-processing">FOFP 1.3 Some basic list processing</a></p>
<p>In our second attempt at basic list processing, we used the Array object's <code>push</code> function. There are other functions that operate on Array objects like our <code>nums</code> list. JavaScript has a set of functions that are often talked about together, and which take us into the realms of functional programming.</p>
<h2>Higher-order functions</h2>
<p>These functions are <code>map</code>, <code>filter</code> and <code>reduce</code>.</p>
<p>They're known as &quot;higher-order functions&quot;, because they take functions as arguments - elevating functions to being first-class, as we discussed earlier.</p>
<p>Let's start with <code>map</code>, and see how we might improve upon our earlier attempts. The <code>map</code> function operates on an Array, and takes a function. It iterates over the elements of the Array, and for each of those elements, it calls the supplied function, passing the element. It builds a new Array, with the results of these calls, leaving the original Array unchanged.</p>
<p>Think of it as &quot;mapping&quot; the function over the elements of the list.</p>
<h2>Using map</h2>
<p>Here's an example:</p>
<pre class="language-javascript"><code class="language-javascript">squares <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br>  <span class="token keyword">return</span> x <span class="token operator">*</span> x<span class="token punctuation">;</span><br><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br><span class="token comment">// [1, 4, 9, 16, 25]</span></code></pre>
<p>That's rather neat! Much less mechanical, and no helper variables in sight. And we can re-run this as many times as we like, with no fear of <code>nums</code> being mutated, or data &quot;growing&quot; inside <code>squares</code>.</p>
<p>Let's have a look at the argument passed to <code>map</code>, inside this bit:</p>
<pre class="language-javascript"><code class="language-javascript">nums<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>It's a function. An anonymous function, created in-line within that call:</p>
<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br>  <span class="token keyword">return</span> x <span class="token operator">*</span> x<span class="token punctuation">;</span><br><span class="token punctuation">}</span></code></pre>
<p>This is a common pattern. You could also define a named function, and then use that named function, like this:</p>
<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">square</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br>  <span class="token keyword">return</span> x <span class="token operator">*</span> x<span class="token punctuation">;</span><br><span class="token punctuation">}</span><br><br>nums<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>square<span class="token punctuation">)</span><br><span class="token comment">// [1, 4, 9, 16, 25]</span></code></pre>
<p>So we have <code>map</code>, a higher-order function, treating functions like our anonymous one (and its equivalent named function <code>square</code>) as first-class objects[^1].</p>
<h2>Function chaining</h2>
<p>You may be familiar with the Unix approach of small programs each focusing on doing one task, and being joined together in a data processing pipeline. If you are, you might see the beginnings of a similar possibility here.</p>
<p>Notice that <code>map</code> just produces a new Array, for you to look at, catch and store in a variable, or even allow to fall to the floor and disappear. So we could just as easily feed the output of that <code>map</code> into the input of another function that worked on Arrays - perhaps one of <code>map</code>'s siblings <code>filter</code> or <code>reduce</code>. We'll take a look at that later.</p>
<p>Next: <a href="/blog/posts/2016/05/03/fofp-1.5-creating-functions">FOFP 1.5 Creating functions</a></p>
<p>[^1]: This is &quot;objects&quot; with no object-oriented nuances. Simply &quot;things&quot;.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>FOFP 1.3 Some basic list processing</title>
      <link href="https://qmacro.org/blog/posts/2016/05/03/fofp-1.3-some-basic-list-processing/"/>
      <updated>2016-05-03T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2016/05/03/fofp-1.3-some-basic-list-processing/</id>
      <content type="html">
        <![CDATA[
      <p>Part of the <a href="/blog/posts/2016/05/03/fofp-fundamentals-of-functional-programming/">Fundamentals of Functional Programming</a> document.</p>
<p>Prev: <a href="/blog/posts/2016/05/03/fofp-1.2-trying-things-out">FOFP 1.2 Trying things out</a></p>
<p>Let's explore the difference between imperative and functional programming approaches with the simple processing of a list of integers 1, 2, 3, 4, 5. We want to turn them into their &quot;squared&quot; equivalents 1, 4, 9, 16, 25.</p>
<p>Create a list of integers, using the array literal syntax, like this:</p>
<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">var</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre>
<h2>First attempt</h2>
<p>A typical imperative approach to creating the squares might look like this:</p>
<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">var</span> i<span class="token punctuation">;</span><br><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br>  nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><br><span class="token punctuation">}</span><br><span class="token comment">// 25</span></code></pre>
<p>This pattern is very familiar. And it's very mechanical. We're giving very precise instructions on how to achieve the goal.</p>
<p>There's nothing wrong with that per se. It's just a little, well, <em>mechanical</em>. And even in this trivial example, there are a number of things that will tax us:</p>
<ul>
<li>
<p>we are iterating through the list of integers in <code>nums</code> using an array index lookup. For that we need to declare and maintain a variable <code>i</code>, initialising it to zero at the outset (<code>i = 0</code>), and incrementing it by one each time around the loop (<code>i++</code>). So we have to keep that state in our head as we read, or (worse) want to modify that code.</p>
</li>
<li>
<p>we have to address the number of items in the list (<code>nums.length</code>) explicitly, so as to be able to finish the looping when we reach the end of the list.</p>
</li>
<li>
<p>inside the loop, we have to use the array index explicitly (<code>[i]</code>) each time we want to refer to the value of the list item currently being processed. This just adds to the cognitive noise that we have to deal with, on top of remembering that <code>i</code> is changing each time.</p>
</li>
<li>
<p>The <code>for</code> statement actually evaluates to something, which we see here is 25 - the last value computed inside the block. Sort of makes sense, but only a little.</p>
</li>
</ul>
<p>So after executing this, we have what (we think) we wanted:</p>
<pre class="language-javascript"><code class="language-javascript">nums<br><span class="token comment">// [1, 4, 9, 16, 25]</span></code></pre>
<p>But perhaps the biggest problem is that if we run this a second time, we don't get the same result:</p>
<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">var</span> i<span class="token punctuation">;</span><br><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br>  nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><br><span class="token punctuation">}</span><br><span class="token comment">// 625</span></code></pre>
<p>625? What's going on? Well notice that we're mutating values inside the <code>nums</code> list. So after the first time, the values inside <code>nums</code> are the squares, i.e. 1, 4, 9, 16 and 25. So when we run it again, we're squaring those values, with these results:</p>
<pre class="language-javascript"><code class="language-javascript">nums<br><span class="token comment">// [1, 16, 81, 256, 625]</span></code></pre>
<p>Ouch.</p>
<p>Because state is being mutated, the program becomes harder to follow, harder to reason about.</p>
<h2>Second attempt</h2>
<p>So let's have another crack at this. Instead of mutating the values inside <code>num</code>, we'll produce the output in another list, and keep the original list untouched. Before we start, let's put our input back to what it was:</p>
<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">var</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre>
<p>Now we'll create a new empty array <code>squares</code>, and push each square value into that inside the loop:</p>
<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">var</span> i<span class="token punctuation">;</span><br><span class="token keyword">var</span> squares <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><br><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br>  squares<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br><span class="token punctuation">}</span><br><span class="token comment">// 5</span></code></pre>
<p><em>Those eagle-eyed readers among you will perhaps be wondering about the value <code>5</code> here. It's not the same as what we had earlier. But it's consistent, in that it's the value of the last-executed statement inside the loop. Before, that was the result of a multiplication. Here, it's the result of a call to <code>push</code>, which returns the new length of the array being operated upon.</em></p>
<p>Anyway, after execution, <code>nums</code> is still what it was, and the output values are now to be found in <code>squares</code>:</p>
<pre class="language-javascript"><code class="language-javascript">squares<br><span class="token comment">// [1, 4, 9, 16, 25]</span></code></pre>
<p>That's an improvement. We have to be a bit careful if we want to re-run the code, because we need to make sure we include the initialising of the <code>squares</code> array before the loop, so as not to end up with this situation:</p>
<pre class="language-javascript"><code class="language-javascript">squares<br><span class="token comment">// [1, 4, 9, 16, 25, 1, 4, 9, 16, 25]</span></code></pre>
<p>But the improvement comes at a cost - yet more stuff to hold in your head, this time about the <code>squares</code> array.</p>
<p>Next: <a href="/blog/posts/2016/05/03/fofp-1.4-a-different-approach-with-map">FOFP 1.4 A different approach with map</a></p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>FOFP 1.2 Trying things out</title>
      <link href="https://qmacro.org/blog/posts/2016/05/03/fofp-1.2-trying-things-out/"/>
      <updated>2016-05-03T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2016/05/03/fofp-1.2-trying-things-out/</id>
      <content type="html">
        <![CDATA[
      <p>Part of the <a href="/blog/posts/2016/05/03/fofp-fundamentals-of-functional-programming/">Fundamentals of Functional Programming</a> document.</p>
<p>Prev: <a href="/blog/posts/2016/05/03/fofp-1.1-introduction">FOFP 1.1 Introduction</a></p>
<p>To start exploring some of the fundamental concepts of functional programming, you don't need anything more than you've probably already got. Of course, there are &quot;more&quot; functional languages such as Haskell, Standard ML, and various dialects of Lisp, such as Scheme, Common Lisp and Clojure. But there's a language that's pretty ubiquitous and that has some very good support for core functional programming concepts.</p>
<h2>JavaScript in Chrome</h2>
<p>That language is JavaScript, and it's everywhere because it's available in all the major browsers. It's likely that you have a browser on your PC or laptop, so let's see how you can get started immediately with a simple interactive environment in which we can experiment. We'll choose the Chrome browser, not because it's fast or standards compliant, or even because it's from Google, but because it has a super set of developer tools that is worth getting to know.</p>
<p>One of those developer tools is the console - where you can enter JavaScript and have it executed immediately. This concept of a feedback loop made out of an interactive prompt with immediate execution is commonly known as a REPL, which stands for Read, Evaluate, Print, Loop: It reads your input, evaluates it, prints the result of the evaluation and then loops around to read your next input.</p>
<h2>Getting ready to explore</h2>
<p>Open up Google Chrome, and in a new tab, open up the Developer Tools using either the menu as shown, or using Ctrl-Shift-I (or Cmd-Shift-I on a Mac), or F12.</p>
<p><img src="/images/2016/05/developertools.png" alt=""></p>
<p>You'll see something like this:</p>
<p><img src="/images/2016/05/elements.png" alt=""></p>
<p>The developer tools have opened up next to the tab you're on. Choose the &quot;Console&quot; entry in the menu at the top, to switch to the console, or REPL. You may see some error messages relating to the tab that's open (even a simple &quot;new&quot; tab), but you can ignore them[^2]. You might also want to detach the developer tools using the &quot;Dock side&quot; option (press the three vertical dots to get this menu) - choose the double-pane icon &quot;undock into separate window&quot;.</p>
<p><img src="/images/2016/05/menu.png" alt=""></p>
<p>At this stage, you're ready to explore.</p>
<p>Next: <a href="/blog/posts/2016/05/03/fofp-1.3-some-basic-list-processing">FOFP 1.3 Some basic list processing</a></p>
<p>[^2]: You can clear the console, and therefore remove the errors, with Ctrl-L (or Cmd-L on a Mac).</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>FOFP 1.1 Introduction</title>
      <link href="https://qmacro.org/blog/posts/2016/05/03/fofp-1.1-introduction/"/>
      <updated>2016-05-03T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2016/05/03/fofp-1.1-introduction/</id>
      <content type="html">
        <![CDATA[
      <p>Part of the <a href="/blog/posts/2016/05/03/fofp-fundamentals-of-functional-programming/">Fundamentals of Functional Programming</a> document.</p>
<p>This document introduces some fundamental building blocks in the functional programming world.</p>
<h2>A definition</h2>
<p>Just so we start out on the same page, let's come up with a working definition of what functional programming is. It's a style of programming - a programming paradigm, where computation is brought about by the evaluation of functions. There's also an emphasis on immutability which means that changing state is positively discouraged. While some programming languages are imperative (&quot;do this, do that&quot;), functional programming can be seen as declarative, with expressions, rather than statements, being key building blocks in the programs you write.</p>
<p>There are languages that are designed to be entirely functional, such as Haskell, and languages that are &quot;multi-paradigm&quot;, such as Python. Many of these multi-paradigm languages support functional programming concepts. Even languages that are traditionally and strongly object-oriented (another programming paradigm) are exploring the functional space, such as Java, with the advent of lambda expressions in Java 8.</p>
<h2>Functions</h2>
<p>As you might guess, functions are a key component of a language that supports functional programming. For now, let's think of a function as simply a mechanism that takes an input value and produces an output value. If we had a function that doubled a number, we'd describe it generally like this:</p>
<pre><code>f : a -&gt; b
</code></pre>
<p>where you would pass a value represented by <code>a</code> to a function <code>f</code>, which would produce value <code>b</code> as a result. In other words, when <code>f</code> is applied to <code>a</code>, it produces <code>b</code>. This is known as function application [4.12.1.3].</p>
<p>We'll come back to functions in a second. Let's look at other key components that make up the fundamental building blocks of a language.</p>
<h2>Building blocks</h2>
<p>In many languages you'll find integers, floating point numbers, characters and strings[^1], that we use to hold values in our programs. These simple, single types are sometimes known as scalar values - single units of data. But there are also structures that contain multiple values. Typical structures here are lists, also known as arrays or vectors, and maps, also known as hashes, or associative arrays, containing pairs of names and values.</p>
<p>All these types are known as being first-class, meaning that they can be used as input to, and be produced as output from, functions.</p>
<h2>Functions are first-class</h2>
<p>In functional programming, functions are first-class too. This means that functions can also be passed as input to other functions, and that functions can produce other functions as output [4.12.1.2].</p>
<p>Next: <a href="/blog/posts/2016/05/03/fofp-1.2-trying-things-out">Trying things out</a></p>
<p>[^1]: Some might argue that strings are not scalar, but complex structures. But that's for another time.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Language minutiae and learning to SWIM</title>
      <link href="https://qmacro.org/blog/posts/2016/04/14/language-minutiae-and-learning-to-swim/"/>
      <updated>2016-04-14T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2016/04/14/language-minutiae-and-learning-to-swim/</id>
      <content type="html">
        <![CDATA[
      <p>Further to <a href="http://langram.org/2016/04/12/enlightenment-in-action/">Enlightenment in action</a>, here's a tiny bit more light that I discovered on my journey up to Newcastle this morning.</p>
<p>I solved 4Clojure puzzle 100 (<a href="https://www.4clojure.com/problem/100">Least Common Multiple</a>) with this code:</p>
<pre class="language-clojure"><code class="language-clojure"><span class="token punctuation">(</span><span class="token keyword">fn</span> <span class="token punctuation">[</span>&amp; args<span class="token punctuation">]</span><br>  <span class="token punctuation">(</span><span class="token keyword">let</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>x &amp; xs<span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token keyword">reverse</span> <span class="token punctuation">(</span><span class="token keyword">sort</span> args<span class="token punctuation">)</span><span class="token punctuation">)</span><br>        are-divisors? <span class="token punctuation">(</span><span class="token keyword">fn</span> <span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token keyword">zero?</span> <span class="token punctuation">(</span><span class="token keyword">reduce</span> <span class="token operator">#</span><span class="token punctuation">(</span><span class="token keyword">+</span> %<span class="token number">1</span> <span class="token punctuation">(</span><span class="token function">mod</span> n %<span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token number">0</span> xs<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><br>    <span class="token punctuation">(</span><span class="token keyword">->></span> <span class="token punctuation">(</span><span class="token keyword">iterate</span> <span class="token punctuation">(</span><span class="token keyword">partial</span> + x<span class="token punctuation">)</span> x<span class="token punctuation">)</span><br>         <span class="token punctuation">(</span><span class="token keyword">filter</span> are-divisors?<span class="token punctuation">)</span><br>         first<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>
<p>I'm not a mathematician, so forgive me, but my approach to the solution was to take the largest of the numbers supplied, and build a lazy sequence of its multiples, (e.g. starting with 7 it would be 7, 14, 21, 28 etc). The first number in that sequence that had the rest of the numbers as factors was the answer.</p>
<p>Expressing that in Clojure, I first marshalled the input and prepared a function that I could use in the main part of the resolution. In the <code>let</code> binding, I split the input numbers into a single scalar - the greatest of them - and a sequence of the rest of them. Then I defined a function on the fly to close over that &quot;rest&quot; sequence (represented by the <code>xs</code> var) and determined whether those numbers were divisors of a given number <code>n</code>.</p>
<p>Looking in detail at this function, here's what I was expressing:</p>
<ul>
<li>fold over the list of numbers: <code>(reduce ... 0 xs)</code></li>
<li>in each case, calculate the modulo of <code>n</code> divided by that number</li>
<li>by wrapping this in a <code>reduce</code>, add up the total of the modulo results: <code>#(+ %1 (mod n %2))</code></li>
<li>look to see if the total was zero, which would represent the fact that all the numbers were indeed divisors: <code>(zero? ...)</code></li>
</ul>
<p>Neat enough, I thought.</p>
<p>But the nature of this is <em>slightly</em> mechanical ... I wanted to know whether every number was a divisor, and did that with maths (deriving a modulo total and checking for zero). So while I was doing well, I didn't entirely Say What I Mean (SWIM).</p>
<p>Looking at someone else's solution, I discovered the predicate function <code>every?</code> that was perfect, and would allow me to SWIM better.</p>
<p>Here's my definition:</p>
<pre class="language-clojure"><code class="language-clojure"><span class="token punctuation">(</span><span class="token keyword">fn</span> <span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token keyword">zero?</span> <span class="token punctuation">(</span><span class="token keyword">reduce</span> <span class="token operator">#</span><span class="token punctuation">(</span><span class="token keyword">+</span> %<span class="token number">1</span> <span class="token punctuation">(</span><span class="token function">mod</span> n %<span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token number">0</span> xs<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>
<p>and here's a version using <code>every?</code>:</p>
<pre class="language-clojure"><code class="language-clojure"><span class="token punctuation">(</span><span class="token keyword">fn</span> <span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token keyword">every?</span> <span class="token operator">#</span><span class="token punctuation">(</span><span class="token keyword">zero?</span> <span class="token punctuation">(</span><span class="token function">mod</span> n %<span class="token punctuation">)</span><span class="token punctuation">)</span> xs<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>
<p>Yes, it's shorter, which is nice, but the difference is striking. With this version, I'm now saying: &quot;<em>is every modulo of <code>n</code>, and the numbers under test, zero?</em>&quot;</p>
<p>One small step closer to a more natural ability to Say What I Mean.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Finding a wonderland number</title>
      <link href="https://qmacro.org/blog/posts/2016/04/13/finding-a-wonderland-number/"/>
      <updated>2016-04-13T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2016/04/13/finding-a-wonderland-number/</id>
      <content type="html">
        <![CDATA[
      <p>I came across a simple puzzle this evening, on <a href="https://github.com/gigasquid/wonderland-clojure-katas">Wonderland Clojure Katas</a>. My brain is half dead from starting work extra early and slogging through the day, but I wanted to include a tiny bit of Clojure recreation this evening, before the day was out.</p>
<p>Pretty much at random, I picked the <a href="https://github.com/gigasquid/wonderland-clojure-katas/tree/master/wonderland-number">wonderland-number</a> puzzle where you have to find number with particular properties. In a way, the puzzle is similar to the ones you can find on <a href="https://projecteuler.net/">Project Euler</a>.</p>
<p>The problem statement is simple. It's about finding a <a href="https://en.wikipedia.org/wiki/Cyclic_number">Cyclic number</a>, thus:</p>
<ul>
<li>it has six digits</li>
<li>if you multiply it by 2,3,4,5, or 6, the resulting number has all the same digits in at as the original number. The only difference is the position that they are in</li>
</ul>
<p>As I'm tired, it was quite nice to be able to apply the philosophy of building up from small blocks to reach the solution. So, here goes.</p>
<p><strong>Step 1 - Getting the digits of a number</strong></p>
<p>We're going to be comparing digits of a number, so let's have a function that will return a sequence of digits for a given number:</p>
<pre class="language-clojure"><code class="language-clojure"><span class="token punctuation">(</span><span class="token keyword">defn</span> digits <span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token keyword">map</span> <span class="token operator">#</span><span class="token punctuation">(</span><span class="token keyword">-</span> <span class="token punctuation">(</span><span class="token keyword">int</span> %<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token char">\0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">str</span> n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>
<p>The <code>str</code> function calls <code>.toString</code> on its argument, here turning a number into a string, and therefore, more importantly, a sequence that we can <code>map</code> over.</p>
<p>The anonymous function we're using in the map simply converts the char value of each of the string characters to their numeric equivalents. (I do find converting a string representing a digit to its numeric value equivalent a little clunky in Clojure, having a background in scripting languages that make that more seamless. Perhaps I'm missing something. But I digress.)</p>
<p>Let's try it out:</p>
<pre class="language-clojure"><code class="language-clojure">scratchpad.core=> <span class="token punctuation">(</span><span class="token function">digits</span> <span class="token number">12401</span><span class="token punctuation">)</span><br><span class="token punctuation">(</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">4</span> <span class="token number">0</span> <span class="token number">1</span><span class="token punctuation">)</span></code></pre>
<p><strong>Step 2 - A unique set of digits</strong></p>
<p>We actually want a unique set of digits, so we can better compare them:</p>
<pre class="language-clojure"><code class="language-clojure"><span class="token punctuation">(</span><span class="token keyword">def</span> digit-set <span class="token punctuation">(</span><span class="token keyword">comp</span> set digits<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>
<p>Simply <a href="https://clojuredocs.org/clojure.core/comp">composing</a> the function <code>set</code> with our new <code>digits</code> function does the trick.</p>
<p>Let's try it out:</p>
<pre class="language-clojure"><code class="language-clojure">scratchpad.core=> <span class="token punctuation">(</span><span class="token function">digit-set</span> <span class="token number">12401</span><span class="token punctuation">)</span><br><span class="token operator">#</span><span class="token punctuation">{</span><span class="token number">0</span> <span class="token number">1</span> <span class="token number">2</span> <span class="token number">4</span><span class="token punctuation">}</span></code></pre>
<p><strong>Step 3 - Multiple results</strong></p>
<p>So now we want to generate the list of results of multiplying the number under test with 2, 3, 4, 5 and 6. We want those results as digit sets. Here goes:</p>
<pre class="language-clojure"><code class="language-clojure"><span class="token punctuation">(</span><span class="token keyword">defn</span> mult-result <span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token keyword">map</span> <span class="token operator">#</span><span class="token punctuation">(</span><span class="token function">digit-set</span> <span class="token punctuation">(</span><span class="token keyword">*</span> n %<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">range</span> <span class="token number">2</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>
<p>All we're doing is folding (with <code>map</code>) an anonymous function over the <code>range</code> of &quot;multiplier&quot; numbers 2 through 6 inclusive. And this anonymous function multiplies the number under test with the particular multiplier being folded over, and produces a digit set from the result.</p>
<p>Let's try it out:</p>
<pre class="language-clojure"><code class="language-clojure">scratchpad.core=> <span class="token punctuation">(</span><span class="token function">mult-result</span> <span class="token number">123456</span><span class="token punctuation">)</span><br><span class="token punctuation">(</span><span class="token operator">#</span><span class="token punctuation">{</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">4</span> <span class="token number">6</span> <span class="token number">9</span><span class="token punctuation">}</span> <span class="token operator">#</span><span class="token punctuation">{</span><span class="token number">0</span> <span class="token number">3</span> <span class="token number">6</span> <span class="token number">7</span> <span class="token number">8</span><span class="token punctuation">}</span> <span class="token operator">#</span><span class="token punctuation">{</span><span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span> <span class="token number">8</span> <span class="token number">9</span><span class="token punctuation">}</span> <span class="token operator">#</span><span class="token punctuation">{</span><span class="token number">0</span> <span class="token number">1</span> <span class="token number">2</span> <span class="token number">6</span> <span class="token number">7</span> <span class="token number">8</span><span class="token punctuation">}</span> <span class="token operator">#</span><span class="token punctuation">{</span><span class="token number">0</span> <span class="token number">3</span> <span class="token number">4</span> <span class="token number">6</span> <span class="token number">7</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>
<p><strong>Step 4 - Checking the digits are the same</strong></p>
<p>The last thing we have to do is check whether the digits are the same in each of the multiplier cases.</p>
<pre class="language-clojure"><code class="language-clojure"><span class="token punctuation">(</span><span class="token keyword">defn</span> same-digits? <span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token keyword">apply</span> = <span class="token punctuation">(</span><span class="token function">mult-result</span> n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>
<p>Using <code>apply</code> with a function allows that function to be used with the contents of the sequence supplied, rather than with the sequence itself. So the <code>=</code> function operates on the multiple arguments that are the elements of the sequence produced by <code>(mult-result n)</code>. The function name ends with a question mark in the tradition for Clojure predicate functions that return true or false.</p>
<p>Let's try it out:</p>
<pre class="language-clojure"><code class="language-clojure">scratchpad.core=> <span class="token punctuation">(</span><span class="token function">same-digits?</span> <span class="token number">123456</span><span class="token punctuation">)</span><br><span class="token boolean">false</span></code></pre>
<p><strong>Step 5 - Profit</strong></p>
<p>Now we have all we need, and can use the <code>same-digits?</code> function as a predicate in calling <code>filter</code> on the six digit numbers:</p>
<pre class="language-clojure"><code class="language-clojure">scratchpad.core=> <span class="token punctuation">(</span><span class="token keyword">first</span> <span class="token punctuation">(</span><span class="token keyword">filter</span> same-digits? <span class="token punctuation">(</span><span class="token keyword">range</span> <span class="token number">100000</span> <span class="token number">1000000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><br><span class="token number">142857</span></code></pre>
<p>Result!</p>
<p>So there are undoubtedly better ways of approaching this puzzle, but I wanted to illustrate the bottom-up approach of computing that Clojure, and functional programming in general lends itself rather well to. And on the occasions when you're tired and can only think in small chunks, it's ideal :-)</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Enlightenment in action</title>
      <link href="https://qmacro.org/blog/posts/2016/04/12/enlightenment-in-action/"/>
      <updated>2016-04-12T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2016/04/12/enlightenment-in-action/</id>
      <content type="html">
        <![CDATA[
      <p>One of the ideas that Clojure embraces is this <a href="http://www.cs.yale.edu/homes/perlis-alan/quotes.html">Perlism</a>:</p>
<blockquote>
<p>It is better to have 100 functions operate on one data structure than 10 functions on 10 data structure</p>
</blockquote>
<p>This makes a lot of sense. But it also is clear that the language, as a set of functions and features, is large. Of course, at a low level, the language is very small; but the layers that have been built to operate on data structures have a depth that I haven't yet mastered.</p>
<p>It's not a case of the layers or functions being too complicated ... rather, I just haven't discovered everything that's possible yet. And when I haven't, I am resorting to mechanical solutions. I suppose this is simply a part of the journey, and while building a mechanical solution to a problem is irksome, it's educational, especially when you are shown something so much more succinct.</p>
<p><strong>An example</strong></p>
<p>Here's one example, a solution to 4Clojure problem 63 &quot;<a href="https://www.4clojure.com/problem/63">Group a Sequence</a>&quot;. A fairly straightforward challenge, but one that I couldn't see an obviously neat way of solving. (Note that the rules prevented the use of the <code>group-by</code> function, with which it would have been a cinch to solve, of course!).</p>
<p><em>A clean but mechanical approach</em></p>
<p>Here's what I ended up with:</p>
<pre class="language-clojure"><code class="language-clojure"><span class="token punctuation">(</span><span class="token keyword">fn</span> p63 <span class="token punctuation">[</span>f xs<span class="token punctuation">]</span><br>  <span class="token punctuation">(</span><span class="token keyword">loop</span> <span class="token punctuation">[</span>elements xs<br>         result <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">]</span><br>    <span class="token punctuation">(</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">empty?</span> elements<span class="token punctuation">)</span><br>      result<br>      <span class="token punctuation">(</span><span class="token keyword">let</span> <span class="token punctuation">[</span>element <span class="token punctuation">(</span><span class="token keyword">first</span> elements<span class="token punctuation">)</span><br>            value <span class="token punctuation">(</span><span class="token function">f</span> element<span class="token punctuation">)</span><br>            values <span class="token punctuation">(</span><span class="token keyword">or</span> <span class="token punctuation">(</span><span class="token function">result</span> value<span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><br>        <span class="token punctuation">(</span><span class="token keyword">recur</span> <span class="token punctuation">(</span><span class="token keyword">rest</span> elements<span class="token punctuation">)</span><br>               <span class="token punctuation">(</span><span class="token keyword">assoc</span> result value <span class="token punctuation">(</span><span class="token keyword">conj</span> values element<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>
<p>In one way, I'm happy, because it's using the <code>loop/recur</code> construction (tail recursion idiom), with the &quot;<a href="http://langram.org/tag/firstrest/">first/rest</a>&quot; pattern, and it's not mutating any state. And I typed this in directly and it solved the puzzle first time :-)</p>
<p>But there's a mechanical nature to it. Here's what it does, generally:</p>
<ul>
<li>starts a <code>loop</code> with the elements given, and an empty result map</li>
<li>if there are no elements, it just returns whatever's in the result map at that time</li>
<li>otherwise it takes the first element, calculates the result of applying the function to that element, and retrieves the current values for that result key (defaulting to an empty vector if there aren't any yet)</li>
<li>then in the body of the <code>let</code> binding it simply <code>recur</code>s with the <code>rest</code> of the elements (all but the <code>first</code>), setting the value for the <code>result</code> var to be that plus the addition of the calculated value in the right place in the map</li>
</ul>
<p><em>A neater approach</em></p>
<p>Here's the solution from another 4Clojure user that I'm following (and I am learning a great deal from them, whoever they are!):</p>
<pre class="language-clojure"><code class="language-clojure"><span class="token punctuation">(</span><span class="token keyword">fn</span> <span class="token punctuation">[</span>f s<span class="token punctuation">]</span><br>  <span class="token punctuation">(</span><span class="token keyword">apply</span> merge-with concat <span class="token punctuation">(</span><span class="token keyword">map</span> <span class="token operator">#</span><span class="token punctuation">(</span><span class="token keyword">hash-map</span> <span class="token punctuation">(</span><span class="token function">f</span> %<span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">[</span>%<span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>
<p>Wow. The power of this solution, and the secret of its brevity, is the <code>merge-with</code> function, which is documented thus:</p>
<p><em>Returns a map that consists of the rest of the maps conj-ed onto the first.  If a key occurs in more than one map, the mapping(s) from the latter (left-to-right) will be combined with the mapping in the result by calling (f val-in-result val-in-latter).</em></p>
<p>This was exactly the right thing. The <code>(map #(hash-map (f %1) [%1]) s)</code> form simply returned a flat list of hash-maps with the keys being the result of applying the given function to the element, and the values being the elements themselves. Beautifully simple, in the philosophy of focusing on performing just one task.</p>
<p>And then the myriad hash-maps were gathered together with <code>merge-with</code> using the <code>concat</code> function to resolve same-key clashes (in other words, &quot;just group them together&quot;).</p>
<p>Taking the first of the puzzle's unit tests as an example, here's what stage one (pre <code>merge-with</code>) looks like. This:</p>
<pre class="language-clojure"><code class="language-clojure"><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">fn</span> <span class="token punctuation">[</span>f s<span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token keyword">map</span> <span class="token operator">#</span><span class="token punctuation">(</span><span class="token keyword">hash-map</span> <span class="token punctuation">(</span><span class="token function">f</span> %<span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">[</span>%<span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> s<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">#</span><span class="token punctuation">(</span><span class="token keyword">></span> % <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">3</span> <span class="token number">6</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre>
<p>produces this:</p>
<pre class="language-clojure"><code class="language-clojure"><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token boolean">false</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">}</span> <span class="token punctuation">{</span><span class="token boolean">false</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">}</span> <span class="token punctuation">{</span><span class="token boolean">true</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">}</span> <span class="token punctuation">{</span><span class="token boolean">true</span> <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>
<p>Then applying the <code>merge-with concat</code> we get the result:</p>
<pre class="language-clojure"><code class="language-clojure"><span class="token punctuation">{</span><span class="token boolean">false</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token boolean">true</span> <span class="token punctuation">(</span><span class="token number">6</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre>
<p>Lovely. I'm still on my journey to enlightenment, and am enjoying learning about functions such as <code>merge-with</code> on the way.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>&quot;fiux2&quot; Week 7 - Build Your Own SAP Fiori App</title>
      <link href="https://qmacro.org/blog/posts/2016/04/10/&quot;fiux2&quot;-week-7-build-your-own-sap-fiori-app/"/>
      <updated>2016-04-10T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2016/04/10/&quot;fiux2&quot;-week-7-build-your-own-sap-fiori-app/</id>
      <content type="html">
        <![CDATA[
      <p>(See first post in this series — <a href="/blog/posts/2016/03/04/fiux2-the-opensap-fiori-course-2016-edition/">“fiux2″ – The openSAP Fiori Course – 2016 Edition</a> — for links to the other posts).</p>
<p>We’re into week 7, the final week of this openSAP course “Build Your Own SAP Fiori App in the Cloud – 2016 Edition”. As we’re in the midst of building our app for the Develop Challenge, this final week is deliberately short, with only two units.</p>
<p><strong>Unit 1 “End-to-End Development Scenario”.</strong> If you’ve seen a demo of the SAP Web IDE before, in particular for generating and subsequently editing an app from a template, you’ll be already familiar with a lot of the content of this unit. I’m all for repeating information and demos for learning and for strengthening the neurons, but I honestly didn’t find anything significantly new here. I think perhaps the intention is to show a final end-to-end scenario, where each course participant should now be comfortable with the details and nuances for each part along the way.</p>
<p>There was one part which touched on some of the features of the git functionality in the Web IDE, along with a brief view of how that then is exposed in the SAP HANA Cloud Platform, but I’d like to have seen this in the context of a non-master branch.</p>
<p><strong>Unit 2 “End-to-End Administration Scenario”.</strong> In many ways, this is the other side of the coin to the development of UI5-powered apps for Fiori scenarios. While Unit 1 covers this development, this unit briefly covers what’s possible in the context of the setting for these apps – the SAP Fiori Launchpad. Specifically, this is for the cloud-based Launchpad, as provided by the SAP HANA Cloud Portal services of the HANA Cloud Platform .</p>
<p>It’s a shame that the content of this unit is out of date, at least visually.</p>
<p><img src="/images/2016/04/Screen-Shot-2016-04-10-at-13.28.42.png" alt="image"></p>
<p>The SAP Fiori configuration cockpit changed a while ago, and looks nothing like what’s shown in this unit. There was a brief disclaimer message during the video, but that doesn’t really help that much. That said, the actual functionality has not changed much, and with the availability of the cloud-based Launchpad in the HCP trial accounts, it’s quite easy for you to explore it yourself.</p>
<p>In fact, because there are some complex relationships possible between the building blocks such as tiles, groups, catalogues and role, it’s better anyway to have a play around and try to get something working that makes sense to you. This is a great example of where theory is not everything – getting the mechanisms under your fingernails and the ideas embedded into your understanding is key here.</p>
<p>One feature that was highlighted was the “dynamic” tile type. This is close to my heart, especially in the light of our upcoming lunchtime webinar on 26 Apr:</p>
<p><a href="http://www.bluefinsolutions.com/events/the-sap-fiori-launchpad-as-a-human-centric-dashboa">The SAP Fiori Launchpad as a Human-Centric Dashboard</a></p>
<p>where we explore the possibilities that are presented to us by the SAP Fiori Launchpad and its features such as the different tile types.</p>
<p>Finally, there was a nice touch after the instructor added the details for the dynamic tile – specifically the Number Unit value “Notebooks”:</p>
<p><img src="/images/2016/04/Screen-Shot-2016-04-10-at-14.23.34.png" alt="image"></p>
<p>“Wait!” I hear you say. “That’s static text – what about consuming this in different languages?”.</p>
<p>And the openSAP course folks must have pre-empted that thought. Directly following this was a short section on the Translations service within the configuration cockpit. In a similar way to how you handle internationalisation (i18n) resources for a Fiori app using the UI5 detection and resourcing mechanisms, so you also can manage property files of name/value pairs for text elements.</p>
<p>Here’s a screenshot of what this looks like, slightly beyond where this unit’s video ended:</p>
<p><img src="/images/2016/04/Screen-Shot-2016-04-10-at-14.25.15.png" alt="image"></p>
<p>Here, I’ve added and activated a German locale for my Launchpad, which means I’d see the translated texts when consuming the Launchpad site in German, say, by adding the sap-language=de parameter in the URL.</p>
<p>Anyway, as I mentioned earlier – the best way for you to learn more is to get going on your trial account and play around. Have fun!</p>
<div class="entry-content"> 
</div> 

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>4Clojure Puzzle 66</title>
      <link href="https://qmacro.org/blog/posts/2016/04/08/4clojure-puzzle-66/"/>
      <updated>2016-04-08T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2016/04/08/4clojure-puzzle-66/</id>
      <content type="html">
        <![CDATA[
      <p>In my quest to teach myself more Clojure, I'm solving puzzles. Puzzles from websites such as <a href="http://projecteuler.net">Project Euler</a> and <a href="http://www.adventofcode.com">Advent of Code</a>. More recently I've been plugging away at puzzles on <a href="https://www.4clojure.com">4Clojure</a>.</p>
<p>One of the nice things about 4Clojure is that you can &quot;follow&quot; other users, the practical upshot of which is that when you provide a correct solution for a given puzzle, you can look at the solutions from your followers too. I'm following five users, and often their solutions are delightfully different to mine - sometimes simpler, sometimes more elegant, sometimes using an approach I'd never thought of, and sometimes all of the above.</p>
<p><strong>Learning by Doing</strong></p>
<p>I gave a talk last month at the <a href="http://www.lambdalounge.org.uk">Manchester Lambda Lounge</a>. It was titled &quot;<a href="https://docs.google.com/presentation/d/176SJNJEjkri4u18pxMg5hT72xFQturmMG4CoNoKBxb0/edit#slide=id.p">Learning by Doing - Beginning Clojure by Solving Puzzles</a>&quot;. I talked through my approaches to solving a few puzzles, sharing my thought processes with the other members of the group. It was fun, and educational - certainly for me!</p>
<p>The theme running through the talk turned out to be &quot;everything is a list&quot;. There's a lot to say on this, but I'll limit it here to suggest that in building solutions, it's possible to think in terms of lists, of sequences, and functions that operate thereon. Intertwined with this was my attempt to not mutate any state, and not to approach problems mechanically ... avoiding the <em>how</em>, and focusing on the <em>what</em>.</p>
<p><strong>4Clojure 66</strong></p>
<p>So here's my approach to solving the 4Clojure problem number 66 &quot;<a href="https://www.4clojure.com/problem/66">Greatest Common Divisor</a>&quot;. Please bear in mind it's not the most efficient or elegant. I just wanted to share my thinking. It's the sort of thing I'd like to read if I was exploring a new language, to see different possible ways of thinking computationally.</p>
<p>You can read the <a href="https://www.4clojure.com/problem/66">puzzle statement</a> over on the 4Clojure site. One of the test cases looks like this:</p>
<pre class="language-clojure"><code class="language-clojure"><span class="token punctuation">(</span><span class="token keyword">=</span> <span class="token punctuation">(</span><span class="token function">__</span> <span class="token number">1023</span> <span class="token number">858</span><span class="token punctuation">)</span> <span class="token number">33</span><span class="token punctuation">)</span></code></pre>
<p>We'll use this as a basis for our direction. In this test case, as in all of them, we need to define a function that will sit where the <code>__</code> placeholder is, so that the whole expression, or form, is true. So we need a function that takes two arguments (1023 and 858) and returns 33 as the greatest common divisor.</p>
<p><strong>Where we'll get to</strong></p>
<p>Here's the complete solution which we'll be working our way towards:</p>
<pre class="language-clojure"><code class="language-clojure"><span class="token punctuation">(</span><span class="token keyword">fn</span> <span class="token punctuation">[</span>&amp; args<span class="token punctuation">]</span><br>  <span class="token punctuation">(</span><span class="token function">letfn</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token function">common-div</span> <span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token keyword">zero?</span> <span class="token punctuation">(</span><span class="token keyword">reduce</span> + <span class="token punctuation">(</span><span class="token keyword">map</span> <span class="token operator">#</span><span class="token punctuation">(</span><span class="token function">mod</span> % i<span class="token punctuation">)</span> args<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><br>    <span class="token punctuation">(</span><span class="token keyword">->></span> <span class="token punctuation">(</span><span class="token keyword">range</span> <span class="token punctuation">(</span><span class="token keyword">apply</span> min args<span class="token punctuation">)</span> <span class="token number">0</span> -<span class="token number">1</span><span class="token punctuation">)</span><br>         <span class="token punctuation">(</span><span class="token keyword">filter</span> common-div<span class="token punctuation">)</span><br>         first<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>
<p><strong>A helper function</strong></p>
<p>Breaking the problem down, it would be good to have a function that told me whether a given number was a divisor of some other numbers. So in a <code>letfn</code> binding I defined a function <code>common-div</code> which did exactly that. The function was defined to close over the <code>args</code> to the main (outer) function, i.e. in this particular test case, 1023 and 858.</p>
<p>This <code>common-div</code> function works out whether the number supplied, <code>i</code>, divides evenly into the numbers in <code>args</code>. It does this by mapping an anonymous function <code>#(mod % i)</code> over the <code>args</code>. This anonymous function returns the modulo, or remainder, of dividing the number(s) by <code>i</code>. If the numbers are all evenly divisible, then this should produce a list of zeros, like this:</p>
<pre><code>scratchpad.core=&gt; (def args [1023 858])
#'scratchpad.core/args
scratchpad.core=&gt; (def i 3)
#'scratchpad.core/i
scratchpad.core=&gt; (map #(mod % i) args)
(0 0)
</code></pre>
<p>And folding over this list of remainders, using <code>reduce</code>, with the addition function, should produce zero, if <code>i</code> is a common divisor:</p>
<pre><code>scratchpad.core=&gt; (reduce + (map #(mod % i) args))
0
</code></pre>
<p><strong>Finding the answer</strong></p>
<p>Now we have such a helper function, we can rattle through the puzzle. Inside our <code>letfn</code> binding we start with a threading macro (<code>-&gt;&gt;</code>) which simply allows us to write a sequence of functions in a way that's arguably more readable. What we want to 'thread' is a list of numbers, ranging from the lower of the two <code>args</code> down to 1 inclusive. So in this case we want a range from 858 to 1.</p>
<pre><code>scratchpad.core=&gt; (range (apply min args) 0 -1)
(858 857 856 ... 1)
</code></pre>
<p>The <code>apply</code> here is doing a similar thing to what it does in JavaScript. If we called <code>min</code> with the <code>args</code> directly, we'd get this:</p>
<pre><code>scratchpad.core=&gt; (min args)
[1023 858]
</code></pre>
<p>because min treats <code>args</code> as a single entity (the list of two numbers ... actually a vector in this case). The function <code>apply</code> applies the given function to the content of the list, breaking them out of that list:</p>
<pre><code>scratchpad.core=&gt; (apply min args)
858
</code></pre>
<p>This list produced by <code>range</code> is passed into the <code>filter</code> function which is using our <code>common-div</code> function we defined earlier, which should result in a much shorter list of those numbers that divide evenly into the two <code>args</code>, i.e. <code>(33 11 3 1)</code>.</p>
<p>And because we're working backwards down to 1, the first number in this filtered list we come across is the one we want: 33. Bingo!</p>
<p><strong>Final thoughts</strong></p>
<p>As I mentioned at the outset, this is not necessarily the most efficient solution. But it shows that you can think in terms of lists, with logic that doesn't require any mutation of state. It becomes simply an expression that evaluates to an answer. It's a different way of thinking, but I like it very much.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>&quot;fiux2&quot; Week 6 - Extend SAP Fiori Apps</title>
      <link href="https://qmacro.org/blog/posts/2016/04/05/&quot;fiux2&quot;-week-6-extend-sap-fiori-apps/"/>
      <updated>2016-04-05T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2016/04/05/&quot;fiux2&quot;-week-6-extend-sap-fiori-apps/</id>
      <content type="html">
        <![CDATA[
      <p>(See first post in this series — <a href="/blog/posts/2016/03/04/fiux2-the-opensap-fiori-course-2016-edition/">“fiux2″ – The openSAP Fiori Course – 2016 Edition</a> — for links to the other posts).</p>
<p>Well we’re on to the penultimate week of learnings, in the midst of the Design Challenge Peer Review due in at the end of this week, and at the start of the Develop Challenge. Phew! Let’s take a look at the units this week.</p>
<p><strong>Unit 1 “Introduction to SAP Fiori Extensibility with SAPUI5″.</strong> This was quite a good overview of the different extension capabilities with SAP Fiori. It’s an introduction, so I didn’t expect to get a deep dive, but in fact the presentation of the extension concept, within the time and slide contents constraints, was a good one. It explained the way that an extension project starts out lean, a “delta” with the parent (or “original”) application, and then builds, as extensions are added. The slideware was good too – a clear and meaningful build up of the Component.js file.</p>
<p>While the <a href="https://sapui5.hana.ondemand.com/#docs/guide/a264a9abf98d4caabbf9b027bc1005d8.html">extension concept of the SAPUI5 toolkit</a> supports the core extension capabilities at the developer level, it was also interesting to see the <a href="https://sapui5.hana.ondemand.com/test-resources/sap/ui/rta/RuntimeAdaptationDemoApp.html?sap-rta-mock-lrep=true">Runtime Adaptation</a> classed, along with general user-level customising possibilities, within the general extension umbrella. And rightly so. The Runtime Adaptation is quite an achievement; while still a relatively young concept and section of the SAPUI5 toolkit, it’s definitely worth having a look. You could almost see it as “Personas for Fiori”. Now how does <em>that</em> mess with your current pigeon-holing of tactical and strategic UX technologies? :-)</p>
<p>There were a couple of things that I wanted to draw your attention to with the extension concept, lest misunderstanding were to take hold:</p>
<ul>
<li>You can extend views with replacements (if there were no appropriate extension points for you to use), extensions (using the available extension points) and modifications. In this latter category, the slides say you can “modify certain properties like visibility”. Actually, right now, <a href="https://sapui5.hana.ondemand.com/#docs/guide/aa93e1c6953a41b48cd912a7331eadee.html">you can modify <em>only</em> the visible property</a>, no others.</li>
<li>You can also extend controllers, where the slide says that you can “override standard controller functions such as lifecycle methods”. There’s an important distinction between the word “override” (replace) and “merge” – a word that the instructor actually used but wasn’t on the slide. With the lifecycle methods, your custom “replacement” method doesn’t actually override the equivalent lifecycle method, it is merged, and either runs before or runs after, depending on the method. This is actually what you want, but it’s not “override”.</li>
</ul>
<p>Caveat developer!</p>
<p><strong>Unit 2 “Extensibility with SAP Web IDE – SAP Fiori Cloud Example”.</strong> This unit is definitely worthwhile and a very quick walkthrough of what you can do yourself too. Last year at SAP TechEd EMEA, I was lucky enough to co-present a number of SAP Fiori related workshops (see “<a href="/blog/posts/2015/11/03/speaking-at-sap-teched-emea-2015/">Speaking at SAP TechEd EMEA 2015</a>“). One of them was to have the participants walk through extending an app in the Fiori Cloud Edition, just like the instructor did in this unit. You can do it yourself too now – just visit the <a href="https://www.sapfioritrial.com/">SAP Fiori Demo Cloud Edition</a> home and follow your nose. There’s also an exercise following this unit which will take you through something similar.</p>
<p>With extensions, we have many questions to answer. Why, how, what and where, for starters. The “why” is simple – because you want to have the app meet your specific business needs and nuances. The “how” is what this unit covers at a high level: the extension concept in general, along with the great support in the SAP Web IDE.</p>
<p>But it’s the “what” and “where” that will most likely cause the new SAP Fiori developer to scratch their head. What can I extend, and where do I find it? Well this is partially answered in the details section of each SAP Fiori app in the <a href="https://fioriappslibrary.hana.ondemand.com/sap/fix/externalViewer/">Fiori Apps Library</a>. But knowing how an app is generally structured, and knowing specifically how your particular app is structured, is a level of detail and understanding much deeper than that.</p>
<p>And what, I hear you say, is the meaning of the S2, S3 and S4 view names? These are artifacts of the original SAP Fiori development approach within SAP, with S2 being the master view of a Master-Detail application, S3 being the detail, and so on. Getting inside the mind and the development context of the developer(s) that wrote the code you’re trying to modify (whether that’s SAP Fiori or something completely different) is something you should try to do as it will make a big difference.</p>
<p><img src="/images/2016/04/Screen-Shot-2016-04-04-at-07.57.57.png" alt="image">Oh yes, one more thing – the instructor added an event for the camera button he added to the S4 view. The event he chose from the list was “tap”, which was right next to “press” in the list. Unfortunately <a href="https:/sapui5.hana.ondemand.com/#docs/api/symbols/sap.m.Button.html#event:tap">the Button control’s “tap” event has been deprecated</a> since 1.20 (in favour of the “press” event), but as (a) the SAP Web IDE didn’t highlight this (yet!) and (b) the clock on the instructor’s screen showed just after 5 o’clock in the morning, we can overlook this ;-)</p>
<p><strong>Unit 3 “Introduction to Enabling SAP Fiori for Mobile”.</strong> There’s a ton of stuff that SAP (and Sybase) have developed in the area of mobile app creation, deployment and management. I’m sure I’m not the only one somewhat dazzled by the oncoming headlights of so much traffic in this area. So if for no other reason than to summarise where SAP stands today with respect to their direction and strategy in this area, this unit serves us well.</p>
<p>In a conversation last month, I was rather surprised to hear that there were some people who had not heard of the term “hybrid” in the context of mobile apps. This unit clears that up for folks, and explains what hybrid means. This word for me will forever have one of its original meanings from its Greek roots (ὕβρις) – where it was used to describe the mythical <a href="https://en.wikipedia.org/wiki/Chimera_(mythology)">Chimaera</a>, made up of three different species of animal – and was an insult (think “hubris”) to each one. I wonder if SAP considered this in the Hybris context?</p>
<p>Anyway, the unit actually covers a lot of ground, at a high level, contextualising SAP Mobile Services (SAPms), Apache Cordova (nee PhoneGap), Kapsel, the SAP Fiori Client and much more besides. This is the sort of unit where you’ll want to review the slides again later to make sure you’ve built the right set of pigeonholes in your brain to store the flood of information that you know is going to come your way.</p>
<p>One concept that was mentioned but never really expanded upon was the offline OData feature. That alone perhaps could have taken up a whole unit, a whole week, or (in depth) a whole course, but it would have been good for the participants to learn, even at a high level, what was possible.</p>
<p><strong>Unit 4 “Extending an SAP Fiori App for Mobile – Use Case”.</strong> Enough theory, how about some practical demonstration? And this unit delivers that. It continues the app from Unit 2 earlier in the week, and adds code to the event handler created then. It’s sometimes difficult to keep up with dry material, so to see something in action is a nice diversion. It also shows that not everything is always perfect – even the happy path that the demonstration was following was marred slightly by some network issues (it looked like the mobile device momentarily dropped off the wifi network).</p>
<p>It would have been nice to dig a little deeper into the background behind the Hybrid Application Toolkit (HAT) settings, especially the connection between the workstation-local resources and the configuration in these settings (see screenshot).</p>
<p><img src="/images/2016/04/Screen-Shot-2016-04-05-at-07.09.29.png" alt="image"></p>
<p>I’m thinking, however, that this is covered in the companion course “Developing Mobile Apps with SAP HANA Cloud Platform”.</p>
<p><strong>Unit 5 “Cloud Extensions with SAP SuccessFactors”.</strong> If there ever was a unit that was full to bursting with a demo that makes you want to know more about absolutely everything, this unit comes close. Even at the longer length of 25 mins, this unit’s video only managed to scratch the surface of extending SAP SuccessFactors with an embedded UI5 app.</p>
<p>Looking past the clear signs of multiple SAP teams working on different parts of SAP’s cloud strategy as a whole, I can’t help but marvel at where they’ve got to. Yes, a pedant like me can spot some inconsistencies and things that don’t look right to the eye. There are also many questions relating to how things really connect and are authenticated, but on the whole, it was a good illustration of some of the core building blocks of the PaaS that HCP is.</p>
<p>I’m really glad that the example the instructor chose was consuming an OData service, via the Destinations facility of HCP. The backend exposing this OData service was marked as “odata_gen” – just like you’d mark any non-SAP (AS ABAP stack) OData service like Northwind.</p>
<p><img src="/images/2016/04/Screen-Shot-2016-04-05-at-17.36.12.png" alt="image"></p>
<p>I did wonder somewhat about the use of the URL in the Widget specification – it was supposed to be the URL of the app on HCP, but instead was another one with “demo2″ in the first part. Ah well, let’s put that down to slightly disjointed end-to-end demos.</p>
<p>Of course, like before, this packed unit was really just a taster for a full blown openSAP course. This time it’s “<a href="https://open.sap.com/courses/hanacloud3-1/">Extending SAP Products with SAP HANA Cloud Platform</a>“.</p>
<p>Finally, did you notice the use of <a href="https://en.wikipedia.org/wiki/OpenSocial">OpenSocial</a>? Here’s another example of SAP adopting open protocols and standards, like HTTP and OData. OpenSocial defines a component hosting environment and a set of APIs, and SAP use it to enable the mashup of different components (such as extensions) to run within the same document object model (web page). This continues to give me confidence and encourages me to invest time and effort learning about the technologies and uses thereof in this space, as I know I’m less likely to be going down a path that leads nowhere.</p>
<p>Well, that’s the last main unit of this week. There was, as usual, the video blog update for this week, which I enjoyed. What struck me was the necessity to lead the course participants through architectural structures such as the one described in this diagram:</p>
<p><img src="/images/2016/04/Screen-Shot-2016-04-05-at-17.58.27.png" alt="image"></p>
<p>The cloud, with SaaS, PaaS and more, does mean that the on-premise landscape is simplified, but doesn’t mean that the architectures in general are simplified. Far from it. With tenants, accounts, trial and production platforms in the cloud, and connections to on-premise systems and even other cloud systems, it’s only going to get more complex.</p>
<p>And the final word goes to Bob, in the video update: “<em>make sure you continue using Google Chrome</em>“. What a refreshing change to SAP’s requirement from the bad old days, when it explicitly required you to use that disaster of a “web browser”, Internet Explorer. Onwards and upwards!</p>
<p></p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>&quot;fiux2&quot; Week 5 - Enhance an SAP Fiori Master Detail App</title>
      <link href="https://qmacro.org/blog/posts/2016/03/31/&quot;fiux2&quot;-week-5-enhance-an-sap-fiori-master-detail-app/"/>
      <updated>2016-03-31T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2016/03/31/&quot;fiux2&quot;-week-5-enhance-an-sap-fiori-master-detail-app/</id>
      <content type="html">
        <![CDATA[
      <p>(See first post in this series — <a href="/blog/posts/2016/03/04/fiux2-the-opensap-fiori-course-2016-edition/">“fiux2″ – The openSAP Fiori Course – 2016 Edition</a> — for links to the other posts).</p>
<p>So week 5 came and went rather quickly – perhaps it was the Bank Holiday weekend! This week sees the introduction of the Develop Challenge, as well as the main content of this week – looking at more advanced features of the SAP Web IDE. Let’s review the units.</p>
<p><strong>Unit 1 “Enhancing Your SAP Fiori App with the Layout Editor”.</strong> This was a good introduction to the Layout Editor – an alternative way to edit Fiori app views. The Layout Editor is an accomplished piece of software, especially when you consider it’s running in the browser. I wouldn’t say it is my first choice for editing view definitions, but for the occasional user, it might be just the right thing. (There’s an argument that says occasional users shouldn’t be messing around with the innards of Fiori apps, but I’ll leave that for another day).</p>
<p>It’s interesting to remember that one of the reasons why such a thing as the Layout Editor is possible (and indeed the view part of the extension concept). Views in UI5 can be defined imperatively, in JavaScript, or they can be defined declaratively in JSON, HTML or XML. All three of these declarative formats are much easier to parse and manipulate programmatically – which is what the Layout Editor is doing.</p>
<p>The format of choice for Fiori apps is XML – I wrote an introduction to XML views, contrasting them to their (then-more-popular) JavaScript equivalents, in a post as part of a series (<a href="http://scn.sap.com/community/developer-center/front-end/blog/2013/10/16/mobile-dev-course-w3u3-rewrite--intro">Mobile Dev Course W3U3 Rewrite</a>) on the SAP Community Network back in 2013: <a href="http://scn.sap.com/docs/DOC-49095">Mobile Dev Course W3U3 Rewrite – XML Views – An Intro</a>. If you’re still trying to decide what format to use, XML should be where you start – simple as that.</p>
<p>Anyway, take a look at this unit to find out more about the Layout Editor. Moreover, if you haven’t used it yourself, there’s a related exercise which goes into great detail – including data binding. The 34-page exercise document is called “Enhance Your SAP Fiori App with the Layout Editor” and it sits between this unit and the next.</p>
<p><strong>Unit 2 “Develop Challenge: Build Your Own App with Peer Review”.</strong> Can you say “meta-course”? This unit merely covered the details of the Design Challenge. That said, “merely” doesn’t really do justice to this unit, or the information imparted.</p>
<p>There’s a lot packed into this course, including two major hands-on activities – the Design Challenge and the Develop Challenge, with their respective peer review activities to boot. I’m struggling a little to keep up with what’s required, especially as I’m dipping in and out of the course material when I have time.</p>
<p>So while this unit helps, I’m still a bit confused – particularly about when the peer review for the Design Challenge is to start. That confusion was increased by the deadline extension given for this challenge (<a href="/undefined/">that I mentioned last week</a>). But perhaps I’m just getting old. I checked my Study submitted via Build / Splash, but have had no peer feedback yet. Nor have I had any prompting to start the peer review (we all get 5 submissions to review).</p>
<p>Update – I did some digging around, and you can now get to the peer review section within the Design Challenge section, as shown here:</p>
<p><img src="/images/2016/03/Screen-Shot-2016-03-31-at-08.43.06.png" alt="image"></p>
<p>So don’t wait for any prompts or emails – just go there and start!</p>
<p><strong>Unit 3 “Other Considerations in Building an SAP Fiori App”.</strong> Well this was certainly a challenging unit! Challenging for the audience (it was a sudden slip off the relaxing poolside into the deep water), for the presenter (squeezing that much content into a 15 minute video was clearly a struggle) and challenging for the course as a whole, because while extremely important, it didn’t really fit into the flow of where this course has come from.</p>
<p>As a small example, one of the slides showed a snippet of a key artifact in any Fiori app – the Component.js file (unfortunately written on the slide as Component<strong>s</strong>.js). To understand the context, the audience would have to have some non-trivial knowledge of UI5 development. This is coming (in a course starting in April, hurray!) but we’re not there yet.</p>
<p>It was like a whirlwind tour of lots of small performance and security related topics, which if done properly, could be expanded into a 3 or 4 day course :-) So in that sense, it was useful to impart. But I wonder how much of that information was really understood?</p>
<p>This unit talked about OData Choreography – a phrase I like – but it also had a couple of questionable pieces of advice, at least in my view. If you want only three properties of an entity rather than the three hundred it normally sports, you were advised to create another OData service. That’s not what I’d do – rather, I’d use the power of the OData protocol and use the query string option “<a href="http://www.odata.org/documentation/odata-version-2-0/uri-conventions/">$select</a>” to return just the properties I needed.</p>
<p>I also do baulk somewhat at the recommendation to use <a href="http://www.odata.org/documentation/odata-version-2-0/batch-processing/">$batch</a>. In a TLS (ie HTTPS) context, URI security is fine, and while increasing performance (by batching up multiple requests), batching makes the application mechanics more opaque and difficult to support and debug. The approach also flies in the face of the architectural style that has informed the OData protocol as a whole – REpresentational State Transfer (REST). Don’t mask resource identifiers (URIs) and hide them where they don’t belong!</p>
<p>Finally, it would have been nice to hear a more compelling explanation of the reasonings behind the “one app / one service” rule. But perhaps that’s coming later.</p>
<p>All in all this unit was a useful, if slightly inconguent, poke in the ribs for the attendees to let them know it’s not just point-and-click in the Web IDE Layout Editor. I guess my comment about occasional users earlier in this post is relevant here too :-)</p>
<p><strong>Unit 4 “Creating an SAP Fiori App with a Smart Template”.</strong> The combination of OData, annotations, and Smart Templates is a powerful one. We had a brief introduction to Smart Templates in <a href="/blog/posts/2016/03/17/fiux2-week-3-get-ready-to-create-your-first-app/">week 3</a> so I need not dwell on them too much again here.</p>
<p>Suffice it to say that this unit showed a pretty impressive demo – a happy path demo, but a good one nevertheless. One of the things that stood out from the slide notes, and brought up by the presenter, was that with Smart Templates, there are “NO modifications”. I’ve yet to find out what that really implies; read-only code sometimes goes hand-in hand with auto-generation, but I’m pretty certain that what we’re going to end up with is something workable. The UI5 toolkit itself does a lot of the heavy lifting here, so it’s not as if there’s a ton of code that’s being emitted.</p>
<p>It’s definitely an extremely interesting area, and one to watch and learn more about.</p>
<p><strong>Unit 5 “Introduction to SAP Fiori Overview Page”.</strong> Pretty much a continuation of the previous unit, here we move on to another concrete artifact from the “smart” stable – the Overview Page, or OVP.</p>
<p><img src="/images/2016/03/Screen-Shot-2016-03-30-at-18.02.54.png" alt="image"></p>
<p>You can’t help but be impressed by and attracted to this lovely combination of practical and visually appealing functionality. It’s a cross between the Fiori Launchpad and functions and features of Fiori apps, all on a single page.</p>
<p>But perhaps what’s most impressive is the way that the OVP plugin works and embeds itself seamlessly into the Web IDE. The generation of the core OVP example was impressive, but what really took my fancy was the addition, in the demo, of actual cards, via further wizards. When you consider the different teams that have been involved, it’s a great example of the tip of a complex iceberg, both technically and organisationally at SAP. Nice work, teams!</p>
<p>By the way – if this sort of UI presentation appeals to you, you may be interested in a free 1-hour webinar I’m involved in on 26 Apr. For more information, see the event’s homepage:</p>
<p><a href="http://www.bluefinsolutions.com/events/the-sap-fiori-launchpad-as-a-human-centric-dashboa">The SAP Fiori Launchpad as a Human-Centric Dashboard</a></p>
<p>and maybe I’ll see you there!</p>
<p><strong>Unit 6 “Deploying Your App”.</strong> This was the last main unit of this week’s course content, and covered, at a high level, what you do next after building your Fiori app. Basically there are a couple of main options – a deployment to a Fiori Launchpad site on the HCP cloud portal, or a deployment to an ABAP stack backend SAP system. There was another option shown in the slide and in the demo, to “clone <em>to</em> a git repository”. I can only think there was a little bit of confusion here – git clone goes the other way – creating (pulling) a copy of an existing repository, not instantiating (pushing) a new repository.</p>
<p>But we’ll gloss over that for now, especially as the key git parts of the workflow – when deploying to HCP – were actually shown. There are some gotchas with the git workflow when it comes to using different branches (which you should be doing during development). You may be interesting in this screencast I recorded showing you the challenge, and the solution: “<a href="https://www.youtube.com/watch?v=OtCt8lQAttA">SAP HCP, git, and Feature Branches</a>“.</p>
<p>It was good to see the relationship between the app itself, the portal FLP site, HCP along with the roles, even though it was a very quick high level overview. Almost directly after the video was recorded (mid Dec 2015) some improvements have been made to this area, notably, with SAP Web IDE release 1.19, the ability to specify <em>which</em> FLP site you want to deploy the app to. You can have multiple FLP sites in your HCP portal account, and the ability to specify the right target site is key. See “<a href="https://help.hana.ondemand.com/webide/frameset.htm?b075d767e91f422b8b4be4e8c6fd5ab7.html">Registering Applications to SAP Fiori Launchpad</a>” documentation for more details.</p>
<p>One thing that struck me as a little odd was the tile definition demo. After the Tile Configuration part of the wizard was complete, we looked at the tile in the FLP, but it had different text (title and subtitle) to what had been defined. I can only think that this might have been the product of a video splice … and serves as a reminder of how hard it is to create even one tutorial video, let alone multiple series! (I speak from first hand here). So my hat goes off to the teams that turn out such great content for all these openSAP courses.</p>
<p>For some of the audience, it might have been worth just spending a bit of time explaining the BSP Application connection, when the deployment to an ABAP repository was shown. Of course, there isn’t a connection – you’re not travelling back in time to the Business Server Pages technology arena; rather, it’s just that the storage container for a BSP Application was deemed “good enough” to contain all the artifacts of a Fiori app – it being a web app after all.</p>
<p>On the subject of deployment, this time to the FLP, it would have also been nice to mention the difference between the “webapp” folder and the “dist” folder created in such circumstances. But perhaps that will come up in another course.</p>
<p>Despite these gaps, it was a good overview unit that completed the picture.</p>
<p>Post Script: one of the self-test questions for this unit rather unfortunately suffered from perhaps being set by someone other than the person who wrote or presented the unit video content; there isn’t a single “correct process for deploying an SAP Fiori app to the cloud Launchpad”, and the officially correct answer doesn’t reflect the procedure that was shown in the video. Ah well, it’s only a self-test :-)</p>
<p>That’s about it for this week – see you next time!</p>
<p></p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>The SAP Fiori Launchpad as a dashboard for my running KPIs</title>
      <link href="https://qmacro.org/blog/posts/2016/03/29/the-sap-fiori-launchpad-as-a-dashboard-for-my-running-kpis/"/>
      <updated>2016-03-29T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2016/03/29/the-sap-fiori-launchpad-as-a-dashboard-for-my-running-kpis/</id>
      <content type="html">
        <![CDATA[
      <p>I'm a hobby runner, and love stats. I've been experimenting with using the SAP Fiori Launchpad to surface some key performance indicators - literally! Read on to find out how I went about it, and how the SAP Fiori Launchpad could do something similar for you.</p>
<p>I started running <a href="/blog/posts/2015/01/03/running:-2014-in-review-and-some-clojure/">a couple of years ago</a>, and as well as being pushed on by the promise of adrenaline and endorphins, I'm also driven by the stats. How far have I run this week, and this year to date? How does that compare to this time last year? What are my highlights, my averages, and total distances?</p>
<h2>Stats and KPIs</h2>
<p>Originally opting for a Garmin Forerunner 110 running watch (with companion heart rate monitor strap), I now use a TomTom Runner Cardio. Both watches deliver similar functionality, which includes GPS-tracking (and therefore also distance, pace &amp; elevation) and heart rate monitoring. Both watches therefore spit out a ton of data, which I have automatically uploaded to Endomondo, a sports tracking website, but I also maintain a Google spreadsheet with the stats. This is partly to remain somewhat independent of any particular sports tracking site, but also because the <a href="https://developers.google.com/apps-script/">Google Apps Script</a> platform allows me to build functions to make that data useful.</p>
<p>For example, I can expose spreadsheet data as JSON via my <a href="/blog/posts/2013/10/04/sheetasjson-google-spreadsheet-data-as-json/">SheetAsJSON</a> mechanism I created and wrote about back in 2013. Useful on its own, but when combined with the power of the SAP Web IDE templating for example, even better - see the video SAP Fiori Rapid Prototyping: SAP Web IDE and Google Docs below for more information on this.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/jAp_nGqOT_c" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe>
<h2>The SAP Fiori Launchpad</h2>
<p>I'm a big fan of the new User Experience (UX) that SAP is bringing to the world, in the shape of UI5 powered layers. The most obvious is of course the layer of Fiori goodness, but there's also the Fiori Launchpad (FLP) from where Fiori apps are served. I think we're just scratching the surface of this new lightweight portal. The tile concept, with the related tile groups, intents, catalog and role mechanisms is not only well thought out but also flexible enough for many situations - not just merely exposing apps to users.</p>
<p>I decided to combine the KPIs that I'm collecting from my running, and expose them in an FLP. It's early days, but already the visual at-a-glance layout is appealing, and with the responsive nature of the FLP (thanks to UI5) I can have it in my pocket too.</p>
<p><img src="/images/2016/03/running-kpis.jpg" alt="My running KPIs in an SAP Fiori launchpad"></p>
<p>The figures you see in this screenshot are taken live and direct from the Google spreadsheet I mentioned earlier. The pointers to the values are set in the configuration of dynamic tiles in the FLP site I've created in my trial version of the SAP HANA Cloud Portal. So after I've finished a run and maintained the line of data in my spreadsheet, the aggregated information finds its way here automatically.</p>
<p>Now, I just happen to use a Google spreadsheet because I personally value the power and simplicity that the Google Apps platform and infrastructure has to offer. But if you have your data somewhere else, that's no problem. Of course, in a business context this is most likely going to be inside one or more of your SAP systems. And that's the simplest case. But with the flexible nature of the FLP, built on open standards such as HTTP, it's really only your imagination that is the limit.</p>
<h2>Upcoming webinar</h2>
<p>If this has whetted your appetite for more information on using the SAP Fiori Launchpad as a dashboard for personal or work related information, and you want to find out more about dynamic tiles and what else is possible, you'll want to attend our webinar next month:</p>
<p><a href="http://web.archive.org/web/20180217153807/http://www.bluefinsolutions.com/events/the-sap-fiori-launchpad-as-a-human-centric-dashboa">The SAP Fiori Launchpad as a Human-Centric Dashboard</a></p>
<p>It's an hour at lunchtime (GMT) on 26 April, free to attend, and may just be what you're looking for. See you there!</p>
<hr>
<p><a href="http://web.archive.org/web/20180308194627/http://www.bluefinsolutions.com/insights/dj-adams/march-2016/the-sap-fiori-launchpad-as-a-dashboard-for-my">Originally published on the Bluefin Solutions website</a></p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Quick HCP title hack with the Navigation Manager</title>
      <link href="https://qmacro.org/blog/posts/2016/03/28/quick-hcp-title-hack-with-the-navigation-manager/"/>
      <updated>2016-03-28T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2016/03/28/quick-hcp-title-hack-with-the-navigation-manager/</id>
      <content type="html">
        <![CDATA[
      <p>One of the great things about the new SAP is that it has embraced open standards and protocols, and is building the UX and UI present and future on HTML5. A by-product of that is the ability to see how they’re building things and make, or suggest, changes.</p>
<p>At SAP Inside Track Sheffield last year, one of the sessions I gave was “Fixing up a nicer HCP Destinations table”, where I showed the power of UI5 introspection and the Chrome Developer Tools that enabled us to modify the surface upon which we were standing, to improve things. I re-recorded my session as a video here, in case you’re interested:</p>
<iframe allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/d8P2bV6clXI" width="560"></iframe>
<p><strong>Fixing the HCP cockpit titles</strong></p>
<p>Anyway, there’s something else that’s been niggling me a bit while using the HANA Cloud Platform (HCP) cockpit. And that’s the inability to see which tabs in my Chrome browser are open at what particular areas of the cockpit. Due to the way each location’s title text is structured, all the tabs look the same – at least at the start. It’s only when you hover over them you see what a given tab contains.</p>
<p>Here’s an example:</p>
<p><img src="/images/2016/03/Screen-Shot-2016-03-28-at-11.42.06.png" alt="image"></p>
<p>It’s only when hovering over the first tab that I see that it’s showing the HTML5 Applications part of the cockpit. If I’m looking to switch to that tab, the search for the correct one is painful.</p>
<p>So I wanted to take a quick look to see where this title was being set, and when. I used the Chrome Developer Tools’ DOM breakpoints feature to halt when the <code>title</code> element was changed:</p>
<p><img src="/images/2016/03/Screen-Shot-2016-03-28-at-11.46.08.png" alt="image"></p>
<p>This led me to a section of the HCP cockpit code that inside the Navigation Manager (cockpit.core.navigation.NavigationManager), in a function called “navigate”. This is what the code that sets the title looks like (I took the liberty of formatting it a little bit better for readability):</p>
<p><img src="/images/2016/03/Screen-Shot-2016-03-28-at-11.49.41.png" alt="image"></p>
<p>You can see how the title string is constructed – with the most significant part (<code>current.navigationEntry.getTitle()</code>) buried deep within it.</p>
<p>A small change to this code, so it looks like this:</p>
<p><img src="/images/2016/03/Screen-Shot-2016-03-28-at-11.49.54.png" alt="image"></p>
<p>brings the most significant part to the front, meaning that now I can see what tab contains what HCP cockpit feature – at a glance:</p>
<p><img src="/images/2016/03/Screen-Shot-2016-03-28-at-11.30.28.png" alt="image"></p>
<p>I think that’s a nice improvement. Personally, I’d love to see this make it into a future release. What do you think?</p>
<p></p>
<p></p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>&quot;fiux2&quot; Week 4 - Create Your First SAP Fiori App</title>
      <link href="https://qmacro.org/blog/posts/2016/03/24/&quot;fiux2&quot;-week-4-create-your-first-sap-fiori-app/"/>
      <updated>2016-03-24T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2016/03/24/&quot;fiux2&quot;-week-4-create-your-first-sap-fiori-app/</id>
      <content type="html">
        <![CDATA[
      <p>(See first post in this series — <a href="/blog/posts/2016/03/04/fiux2-the-opensap-fiori-course-2016-edition/">“fiux2″ – The openSAP Fiori Course – 2016 Edition</a> — for links to the other posts).</p>
<p>Well we’re pretty much at the half-way point in this course, and it’s going well. This week sees the end of the deadline extension for the Design Challenge that I <a href="/blog/posts/2016/03/17/fiux2-week-3-get-ready-to-create-your-first-app/">wrote about in Week 3</a>, but mainly is about introducing the course attendee to some basic hands on with the SAP Web IDE. Let’s have a look at how this unit went.</p>
<p><strong>Unit 1 “Introduction to SAP Web IDE”.</strong> I’m guessing that the majority of this course’s attendees may well have some familiarity with SAP’s now-flagship interactive development environment (IDE). It had an interesting genesis, growing from an initial offering called App Designer, which, remained a young product but seemed like it might be aiming to become, for UI5, what the Microsoft tools were for Visual Basic. There was also App Builder, which one might say was a competing product, from the Sybase stable. And how can we forget the tools and accelerators for various workstation versions of Eclipse.</p>
<p>What came out of that cloud of dust is what is becoming a very fine product indeed – the SAP Web IDE. Technically based upon Eclipse, but Orion – meaning the offering can be cloud-based, which it is. That said, there are the occasional releases of personal versions to run on one’s workstation, but of course these are still web-based – you’re just running Orion locally.</p>
<p>This is not a new concept. While today no-one bats an eyelid when we talk of running web servers locally on our laptops, it was a big “aha” moment for me and many others back in the 1990’s when one of my all time heroes Jon Udell wrote about the concept in Byte magazine a long long time ago now. There’s an online version of the article here: <a href="http://jonudell.net/dhttp/dhttp.html">Distributed HTTP</a>.</p>
<p>Anyway, I won’t go into all the features of the Web IDE here – find out for yourself in this unit. You’re not attending the course? Get that sorted now!</p>
<p><strong>Unit 2 “SAP Web IDE App Development Basics”.</strong> This unit covered the basics in terms of what features the Web IDE has to support the end-to-end process described in Unit 1 – Prototype – Develop – Test – Package &amp; Deploy – Extend.</p>
<p>One of the challenges when developing UI5 and Fiori apps is the data. Where is it, what does the structure look like, and is it actually available at all yet? The mock data services within the Web IDE go a long way towards smoothing over the answers to these questions. Often you’ll be developing an app before a backend OData service is even available. Perhaps that’s your modus operandi anyway. And even if the OData service is built, there may be no actual data to test with. With the mock data services you can mock your backend very nicely. See the last unit of this week (towards the end of this post) for more content on mock data services.</p>
<p>And with the Web IDE you have many of the facilities you’d expect in other IDEs – code completion, the ability to lint and beautify, integration with source code control (in the form of git, of course) and more.</p>
<p>As a (very) long time <a href="https://en.wikipedia.org/wiki/Vim_(text_editor)">vim</a> user, I have to say that an IDE (rather than “just” an editor), and one in the cloud, is a concept that doesn’t come naturally to me. But what the Web IDE offers is too good to ignore, so it’s become my companion working environment of choice. And I recommend it to clients and colleagues alike if they’re wanting to start on their Fiori journey.</p>
<p>**Unit 3 “Creating Your First SAP Fiori App with SAP Web IDE Templates”. **One of the reasons why the Web IDE is my companion working environment is covered in this unit: App starter templates and reference apps. I built my own starter templates a good while ago for my own development workflow, but I don’t maintain them, and there’s only a couple of them. With the templates available in the Web IDE, you can hit the ground running and have a working basic app in a matter of minutes.</p>
<p>And the templates are maintained too; this means that as the best practices improve, and the maturing of UI5 continues, there are differences in approach that you want to make sure you capture. With the plugin based architecture of the Web IDE, you can even build your own templates. As an experiment, a good while ago now when this was quite new, I created a custom template that allowed you to get started quickly with test data from a Google spreadsheet: <a href="https://www.youtube.com/watch?v=jAp_nGqOT_c">SAP Fiori Rapid Prototyping: SAP Web IDE and Google Docs</a>.</p>
<iframe allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/jAp_nGqOT_c" width="420"></iframe>
<p>An equally good reason to look at what the Web IDE has to offer are the reference apps. These are full blown apps that are a great source of wonderment – audited source code that covers myriad functions and mechanisms in real Fiori apps. You either enjoy reading source code or you don’t. If you do, you’re in for a treat. If you don’t, grasp the nettle and at least have a go. I’ve always maintained that reading other people’s source code is educational (sometimes to see how <em>not</em> to do something!). And here’s no exception. The world of SAP development is changing – use these resources to give yourself a leg up. And SAP – more of this please!</p>
<p><strong>Unit 4 “Enhancing Your SAP Fiori App with SAP Web IDE”.</strong> This was a fairly straightforward unit, where the instructor takes us through a couple of examples of enhancing existing SAP Fiori apps. Rather than use the visual editor, we are shown the regular editor where the view is modified by adding XML elements as shown in the screenshot from the video below. This is fine, and my preferred modus operandi.</p>
<p><img src="/images/2016/03/Screen-Shot-2016-03-24-at-07.30.11.png" alt="image"></p>
<p>But I do wonder if attendees are thinking: “how would I <em>know</em> that I could or should place an <attributes> element there, and within that element, an <ObjectAttribute>. And what about the capitalisation? Well, for those who can’t wait for the coming weeks, where I suspect, or hope, that this is covered in a little bit more detail, here are a couple of pointers:</p>
<ol>
<li>
<p>If an XML element starts with a capital letter, it represents a control. For example, we see on line 6 in the screenshot, an <ObjectHeader>.</p>
</li>
<li>
<p>If you look at the reference for this Object Header control in the excellent Explored app within the UI5 SDK – <a href="https://sapui5.hana.ondemand.com/explored.html#/entity/sap.m.ObjectHeader/samples">sap.m.ObjectHeader</a> – you’ll see in the Aggregations tab a list of aggregations. And there you’ll find the “attributes” aggregation, which contains entities of type “ObjectAttribute”. And these are the children that can be placed inside the “attributes” aggregation.</p>
</li>
<li>
<p>So yes, you guessed it – whereas controls are represented as XML elements with capitalised names, aggregations are represented by XML elements starting with lowercase letters. So <attributes> here in line 9 is the start of the list of Object Attributes within the “attributes” aggregation belonging to the Object Header control.</p>
</li>
</ol>
<p><img src="/images/2016/03/Screen-Shot-2016-03-24-at-07.39.34.png" alt="image"></p>
<p>I’m sure that this sort of information will be covered in much more detail in the upcoming openSAP course on SAPUI5 – watch this space! :-)</p>
<p><strong>Unit 4 “Testing an App with Mock Data”.</strong> Ahh, a pain point in every developer’s workflow – “Where do I get the data to test?” “When will the backend service be ready?” “Can I start development sooner?”.  Well with the mock data service things are a lot smoother than you might imagine.</p>
<p>It’s definitely worth studying the Web IDE features explained in this unit. While the OData Model Editor is still something I’d like to see improved (adding some visual aspects to the <em>editing</em> process, rather than still having to edit at the rather verbose EDMX level), it’s still a great first step, especially with the visual display of the entities and their relationships:</p>
<p><img src="/images/2016/03/Screen-Shot-2016-03-24-at-07.50.59.png" alt="image"></p>
<p>It’s a shame that this wasn’t shown in this unit.</p>
<p>What was shown is the the Mock Data Editor is definitely easy to use and a great boost to your testing workflow. If you’re going to invest some time on this week’s content, this unit is where you should focus your efforts.</p>
<p>And with that, week 5 is just about to start. See you next time!</p>
<p></p>
<p></p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>&quot;fiux2&quot; Week 3 - Get Ready to Create Your First App</title>
      <link href="https://qmacro.org/blog/posts/2016/03/17/&quot;fiux2&quot;-week-3-get-ready-to-create-your-first-app/"/>
      <updated>2016-03-17T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2016/03/17/&quot;fiux2&quot;-week-3-get-ready-to-create-your-first-app/</id>
      <content type="html">
        <![CDATA[
      <p>(See first post in this series — <a href="/blog/posts/2016/03/04/fiux2-the-opensap-fiori-course-2016-edition/">“fiux2″ – The openSAP Fiori Course – 2016 Edition</a> — for links to the other posts).</p>
<p>It’s around this time of the week that the changeover between each week’s worth of content happens. Week 3 of the <a href="http://open.sap.com/courses/fiux2">Build Your Own SAP Fiori App in the Cloud – 2016 Edition</a> course has just come to a close, so it’s time for me to write down my thoughts.</p>
<p>This week’s content was shorter than usual. Deliberately so, to give the attendees a better chance at completing the Design Challenge, which started in Unit 7 of Week 2 (see my comments for that unit in <a href="/blog/posts/2016/03/08/fiux2-week-2-design-your-first-sap-fiori-app/">the previous post in this series</a>). There were only three units, so let’s have a look at those first, and then finish with a few observations on the Design Challenge.</p>
<p><strong>Unit 1 “Anatomy of SAP Fiori Apps”.</strong> I enjoyed this unit very much, as it really started to explain well how the rubber hits the road. At some stage, UX needs to turn into UI and become real. Using a combination of the excellent <a href="https://experience.sap.com/fiori-design/">SAP Fiori Design Guidelines</a> and the actual controls in the UI5 toolkit itself (see <a href="https://sapui5.hana.ondemand.com/explored.html">the Explored app</a> for a great showcase of many of them) – advice and building blocks in harmony – is a great way to get started on your Fiori app development journey.</p>
<p>Understanding the anatomy of a Fiori app – from small controls such as Buttons to larger concepts such as the floorplans, and everything in between, can make the difference between creating a Fiori app, and a Fiori-like app. Here, I refer to Fiori-like as using the building blocks, but not in the right way.</p>
<p>**Unit 2 “Introduction to SAPUI5 and OData”. **At less than 10 mins long, this unit was very short indeed, only providing a very high level introduction to two of the most important topics in Fiori – UI5 and OData. One of the aspects of the openSAP courses I’ve become used to was the way the instructors often squeezed as much out of each slide’s content as possible. In this unit, I felt a lot of the detail was skipped.</p>
<p>That said, if it hadn’t have been skipped, I could imagine the unit being four times as long or more. There is more on OData coming later in this course, so let’s hope that they dig in a little more. OData is a fascinating topic, not least because it’s REST-informed, based on an architectural style that I <a href="http://www.sdn.sap.com/irj/scn/go/portal/prtroot/docs/library/uuid/ea8db790-0201-0010-af98-de15b6c1ee1a?overridelayout=true">worked</a> <a href="https://scn.sap.com/people/dj.adams/blog/2004/06/24/forget-soap--build-real-web-services-with-the-icf">hard</a> in the past trying to convince SAP of its merits :-)</p>
<p><img src="/images/2016/03/Screen-Shot-2016-03-16-at-23.00.42.png" alt="image">](http:/www.sdn.sap.com/irj/scn/go/portal/prtroot/docs/library/uuid/ea8db790-0201-0010-af98-de15b6c1ee1a?overridelayout=true)</p>
<p><em>An old post on SCN from 2004 – “<a href="http://www.sdn.sap.com/irj/scn/go/portal/prtroot/docs/library/uuid/ea8db790-0201-0010-af98-de15b6c1ee1a?overridelayout=true">Real Web Services with REST and ICF</a>” – where I expounded on the virtues of the REpresentational State Transfer (REST) based approach to data services … and was slightly disowned by SAP ;-)</em></p>
<p>**Unit 3 “Introduction to Annotations and Smart Templates”. **This was a very interesting unit, not least because of the implications and the reasoning behind augmenting the metadata with extra semantics. I’ve written about semantic information before (see <a href="/blog/posts/2015/07/06/semantic-pages/">Semantic Pages</a>, a post in the <a href="/2015/07/04/30-days-of-ui5/">30 Days of UI5</a> series). This time it’s about adding extra information to the OData metadata to enable a more rapid construction – in some cases automatic – of UI5 based application components. A control, or set of controls, that can understand the data that is bound to it, is capable of more than acting passively.</p>
<p>There’s a lot driving the concept of annotations and their use in smart controls and templates, not least SAP’s need to produce yet more SAP Fiori apps, more quickly and more reliably. Finding a way for apps, or parts of apps, to write themselves, is going to help that process.</p>
<p>One thing that made me smile was the lovely conflict between Unit 2’s statement “<em>OData model is based on … JSON</em>” and Unit 3’s statement “<em>OData is based on XML</em>“.</p>
<p>Of course, we all know that it’s based on both. JSON and XML just happen to be used to provide the format for the payload – there are different formats that the OData standard describes. But OData is also a protocol. Don’t let this confusion confuse you – OData is about more than representing data, it’s about describing operations upon that data too. The XML representation originates from the Atom Syndication Format (<a href="http://www.rfc-base.org/rfc-4287.html">RFC4287</a>) – this informs the “format” part of OData. The operations originate from the Atom Publishing Protocol (<a href="http://www.rfc-base.org/rfc-5023.html">RFC5023</a>) – this informs the “protocol” part of OData.</p>
<p><strong>Design Challenge</strong></p>
<p>And what of the Design Challenge? First, the deadline has just been extended by a week due to some system problems that were encountered. I think that’s a pretty generous extension, well done again openSAP folks for reacting in the right way. I’m on holiday this week and got some earache from M for working some late night and early morning hours to get the submission in before today. Oh well :-)</p>
<p>As the deadline has been extended, I have to be careful not to give anything away here. But I can certainly make a few observations of my own. I’d say, all told, with putting together each of the deliverables for the challenge, doing the screen mockups and then using the online tools to create a prototype and then a study, it took a good few hours, not counting the idle time mulling over what problem I wanted to solve and persona for whom I wanted to address the needs.</p>
<p>I think it was because I’m not actually that used to the formal process, so things weren’t as smooth as they might be next time. This is part of the point, I guess – getting us used to the Design Thinking methodology and learning about the process by being persuaded to address each step in turn. Although I think it was a valuable exercise, there is something in me that is ready to admit that I already had the design of the app in my head, and extrapolated backwards a little bit into the discover and design. But who said it was a linear flow? :-)</p>
<p></p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>The evolution of the SAP community</title>
      <link href="https://qmacro.org/blog/posts/2016/03/10/the-evolution-of-the-sap-community/"/>
      <updated>2016-03-10T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2016/03/10/the-evolution-of-the-sap-community/</id>
      <content type="html">
        <![CDATA[
      <p>This week, the new SAP Mentors Advisory Board has been formed, and I am very honoured to have been elected as a member. In this post, I take my own brief look at how the SAP community as a whole has evolved over the years.</p>
<p>Two significant community events are taking place this week. On Friday, there's the inaugural conference for UI5 aficionados - <a href="http://web.archive.org/web/20180227043449/https://wiki.scn.sap.com/wiki/display/events/UI5con+2016+-+Frankfurt">UI5con 2016</a> in Frankfurt, which dovetails with SAP Inside Track Frankfurt. The other event was the announcement of the new <a href="http://web.archive.org/web/20180227043449/http://scn.sap.com/community/sap-mentors/blog/2016/03/09/introducing-the-new-sap-mentors-advisory-board-2016-2018">SAP Mentors Advisory Board for 2016-2018</a> at the start of the week.</p>
<p><img src="/images/2016/03/sap-mentors-advisory-board.jpg" alt="SAP Mentors Advisory Board slide"></p>
<p>For me, these events represent a couple of significant strands of community development within the SAP ecosphere.</p>
<h2>What is a community?</h2>
<p>What is a community, and how do they come about? Well, to answer that from an SAP ecosphere perspective, one might go back to the early 1990s, when the Internet was growing stronger by the day, but the Web was only a very young thing. In those days people communicated on the Internet mostly by group discussions facilitated either by the Network News Transport Protocol (NNTP) - a technology that has sadly all but disappeared along with others such as Gopher and WAIS - or email, specifically the trusty mailing list mechanism. There were no such thing as web forums and the SAP Community Network (SCN) wasn't even a twinkle in anyone's eye.</p>
<h2>From SAP-R3-L to the SAP Community Network</h2>
<p>In 1995 <a href="https://blogs.sap.com/2005/07/04/the-sap-developer-community-10-years-ago/">two mailing lists were formed</a>, independently and without knowledge of one another. One was called &quot;sapr3-list&quot;, created by Bryan Thorp in Canada, and the other was called &quot;merlin&quot;, created by me. The former list was focused specifically on R/3, whereas merlin still covered R/2 as well as R/3. Running and moderating a mailing list took a lot of effort, so Bryan and I were very happy to receive the superb offer of help from the Massachusetts Institute of Technology (MIT) - an SAP customer - and the lists merged to form the now-venerable SAP-R3-L, a name that still conjures up distant but happy memories for us.</p>
<p><img src="/images/2016/03/sap-r3-l-instructions.jpg" alt="Some instructions from the listserv-based SAP-R3-L mailing list"></p>
<p>Then in late 2002 I got involved with SAP and O'Reilly (for whom I'd <a href="/about/#books">written a book</a> and was in the middle of writing a second), to work on an online forum style community space. We debated, discussed and planned the initial shape, style, spirit and indeed seed content for it, and in early 2003 it was born - the SAP Developer Network (SCN). In the early days we collaborated upon and wrote as much content as we could. One of the SAP contacts was Mark Finnern, now a good friend, and along with another good friend Piers Harding, and others, we worked on growing the community within the SDN.</p>
<p>And as you can guess, SDN eventually became SCN - the SAP Community Network - incorporating other previously satellite communities that had grown around what had been originally a more developer-focused one.</p>
<p>As you may know, Mark went on to found the <a href="http://web.archive.org/web/20180227043449/http://scn.sap.com/docs/DOC-23155">SAP Mentor programme</a>, which today is stronger than ever. So strong, in fact, that we find ourselves back where we started with this post, which is in the context of the newly formed SAP Mentors Advisory Board. This has been set up to nurture and guide the SAP Mentors engagement and activities into the next phase of its programme life.</p>
<h2>SAP Inside Track and UI5con</h2>
<p>So what about UI5con? SAP's adventures in open source and open protocols began a long time ago, when the Linux Lab was formed at SAP to investigate whether running R/3 on Linux was viable. The members of that little group contributed significant content to the Linux kernel codebase, especially in the area of memory management. SAP's fate with open source was sealed - with possibly the most significant recent event being the <a href="/blog/posts/2014/02/14/the-essentials-sapui5-openui5-and-fiori/">open sourcing of UI5</a>, of course!</p>
<p>Fast forward to the present, and we see SAP presence at <a href="/blog/posts/2015/07/24/spreading-the-ui5-message/">many open and public events</a>, such as the Open Source Convention (OSCON), where for example <a href="/blog/posts/2014/07/22/openui5-tutorial-at-oscon-2014/">in 2014 we gave a workshop on OpenUI5</a>, and FOSDEM, where last year we engaged with the most critical of hackers to <a href="/blog/posts/2015/02/02/openui5-at-fosdem-2015/">evangelise this awesome toolkit</a> (which as you know, I hope, is the engine that's powering the Fiori revolution).</p>
<p>And so it was inevitable, due to the popularity and interest in UI5, that UI5con was born, in discussions, planning and dreaming over the last 12 months. It takes place this Friday, and there are some really great speakers lined up <a href="http://web.archive.org/web/20170617191822/http://www.bluefinsolutions.com/insights/sean-campbell/february-2016/bluefin-at-the-frontend-of-frontend">including some of my heroes from Bluefin</a> of course!</p>
<p>This inaugural UI5con event is cohabiting time and space with perhaps what can be seen as the grandfather of modern SAP community events - SAP Inside Track. Born in 2009 in London, it has now seen countless instances that are now run all over the world - in places as exotic as the Carribean, Istanbul, Hyderabad and even Manchester! If you're in the SAP space, and want to learn from colleagues and take the next steps in building out your network, I'd strongly recommend you check out the SAP Inside Track movement and get involved. It is the classic community event, run by the community, for the community.</p>
<p>SAP Inside Track isn't the only event type - there are plenty of others. In particular I'd like to call out the <a href="https://groups.community.sap.com/t5/sap-codejam/gh-p/code-jam">SAP Code Jam</a> events, which again take place all around the world, and on an even more frequent basis than the Inside Tracks.</p>
<h2>The Future</h2>
<p>The future of the SAP community, as a whole, looks in very good shape. With the SAP Mentors Advisory Board on the one hand, and the self-organising community events such as Inside Tracks and Code Jams, and of course now with the excellent openSAP Massive Open Online Course (MOOC) platform - there are so many opportunities to learn from, get involved with and shape our community into what it should be for the next 20 years. See you online!</p>
<hr>
<p><a href="">Originally published on the Bluefin Solutions website</a></p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>&quot;fiux2&quot; Week 2 – Design Your First SAP Fiori App</title>
      <link href="https://qmacro.org/blog/posts/2016/03/08/&quot;fiux2&quot;-week-2-design-your-first-sap-fiori-app/"/>
      <updated>2016-03-08T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2016/03/08/&quot;fiux2&quot;-week-2-design-your-first-sap-fiori-app/</id>
      <content type="html">
        <![CDATA[
      <p>(See first post in this series — <a href="/blog/posts/2016/03/04/fiux2-the-opensap-fiori-course-2016-edition/">“fiux2″ – The openSAP Fiori Course – 2016 Edition</a> — for links to the other posts).</p>
<p>Well, the weeks certainly come around fast in these <a href="http://open.sap.com">openSAP</a> courses, and so we find ourselves on Week 2 of the <a href="http://open.sap.com/courses/fiux2">Build Your Own SAP Fiori App in the Cloud – 2016 Edition</a>. Here’s a quick run down of what was covered, with some thoughts from me.</p>
<p><strong>Unit 1</strong> <strong>“SAP Fiori 2.0 Overview”.</strong> This first unit gave a nice overview and introduction to the SAP Fiori 2.0 concepts. Yes, Fiori 2.0 is still conceptual in parts, but we’re already seeing practical output, in the form of the very real <a href="https://sapui5.netweaver.ondemand.com/#docs/guide/c64ef8c6c65d4effbfd512e9c9aa5044.html">Overview Page</a> mechanism, for example. There are plenty of new concepts for Fiori in the 2.0 design, such as the Viewport, the Control Space and the Copilot.</p>
<p>Some of these concepts are not new, but they don’t have to be; in fact one of the key tenets of Design Thinking, introduced in Unit 2, is “Build on the ideas of others”. I rather think that some of the ideas have been taken from the Dashboard concept that Nat Friedman built a good while ago – I <a href="/?s=dashboard">wrote a few posts on Dashboard</a> back in 2003 and then later that decade.</p>
<p><strong>Unit 2</strong> <strong>“Introduction to Design Thinking”</strong>. This content isn’t new, in fact the openSAP folks stated that it’s the same content as last year’s course. Nevertheless it was worth a brief re-introduction to set the scene for the design principles that are to come in Unit 3. The thing with Design Thinking, at least for me, is that it’s all pretty obvious in theory, but putting it into practice requires effort.</p>
<p>I think the concepts around the pre-build phases of app delivery still need to be successfully and firmly landed in some organisations. Further, there’s a fine balance to be had between not letting technology (and developers) drive solutions, and designing something that would require a great deal of effort to implement. We have the tools (and the design principles) and know how to use them, so we should use that knowledge to inform the process.</p>
<p><strong>Unit 3 “The SAP Fiori Design Guidelines”</strong>. Anyone who’s looked into SAP Fiori UX is likely to be at least lightly acquainted with these, either at 30000 feet – with the 5 principles (Role-Based, Responsive, Simple, Coherent and Delightful) – or at ground level with the practical <a href="https://experience.sap.com/fiori-design/">implementation advice in the online documentation</a>. But as this course is soon to introduce the first hands-on element (designing an app), it’s valid to re-introduce them at this stage, if not to set a level knowledge playing field for all participants.</p>
<p>I did like the explicit calling out of the concept of “Fiori-like” towards the end of this unit. Design is not black and white, and there’s been a long-standing question over whether non-SAP folks could call their apps “Fiori”, or whether they had to say “Fiori-like”. I’ve maintained the position that if the design guidelines were followed, then they were “Fiori”, not just “Fiori-like”. That said, with the title of the course we put together gave in the early days (three years ago!) – “<a href="http://scn.sap.com/community/developer-center/front-end/blog/2013/10/06/building-sap-fiori-like-uis-with-sapui5">Building SAP Fiori-like UIs with SAPUI5</a>“, things weren’t so clear-cut :-)</p>
<p><strong>Unit 4 “SAP Fiori Decomposition and Recomposition”</strong>. You might be forgiven for thinking that this process is a somewhat over-formalisation of what appears to be straightforward: The extraction of functionality from the “kitchen-sink” transaction-based approach of the traditional SAP experience into smaller role and task focused applications, sometimes combining functionality from previously separate transactions. Sure, that’s what it is.</p>
<p>But it’s more than that, I think, when seen as a complete process. The functionality being extracted is predominantly being extracted from a proprietary context, and reconstituted into a neutral, platform-independent and responsive context. We’ve been stuck too long in the world of proprietary, tethered too much to the desktop with SAP because of the Microsoft disease that has set hold in enterprises in the last couple of decades or more. So SAP targets that market and the only real experience for many has been SAPGUI for Windows, an experience that is so far from being portable it became one of the catalysts for Fiori. Recomposing functionality into the context of the one true native platform – the Web, is a great move for SAP.</p>
<p><strong>Unit 5 “The Importance of Prototyping”.</strong> Like Design Thinking but perhaps less so, prototyping phases are sometimes difficult to bring about and get the most out of, especially when deadlines and budgets are tight. Organisations need to work out the value for themselves for the Discover and Design phases, rather than just focus on the Develop and Deploy phases … especially those that involve the business.</p>
<p><img src="/images/2016/03/Screen-Shot-2016-03-07-at-07.48.08.png" alt="image"></p>
<p>There’s a leap of faith that’s required, and we’re all responsible for helping make that happen.</p>
<p>On mockups and protoyping, especially in the early stages, I’m a fan of the simplest thing that could possibly work, which is pencil and paper. Low cost, discardable, and folks aren’t distracted by debating what colour a button should be.</p>
<p>Moving into the benefits of the later stages of prototyping, I’m reminded of one of the founding beliefs of the Internet Engineering Task Force (IETF) – one of the bodies that maintain standards that mean that we can all simply take the Internet and all its children (such as the Web) for granted. This belief is “general consensus and running code” (<a href="https://www.ietf.org/tao.html#rfc.section.2">from the Tao of IETF</a>). Showing a working model of something you’re trying to convey is very valuable indeed.</p>
<p>(I did take issue with the stated “correct” answer to one of the self-test questions on this unit: Q “How can app implementation be inexpensive?”  A: “If enough iteration, prototyping and validation is done beforehand”. That might mean the UX is right, but it doesn’t imply that making that UX happen is easy!)</p>
<p><strong>Unit 6 “Prototyping 101 Using SAP Splash and Build”</strong>. Following on from my comments earlier about adoption and landing of the Discover and Design phases, this unit contained an overview of the two tools that help to support those stages – Splash and Build respectively. It’s a longer than usual unit with 25 mins of video, but worth watching if you haven’t already seen or played with these tools.</p>
<p>The tools themselves are already very accomplished, but I do wonder how much the studies have actually been employed thus far. It’s partially a circular situation – the tools won’t be used unless Discover and Design are more strongly adopted, and the adoption has a better chance of taking hold if tools like this deliver on their promise.</p>
<p>One of the things that caught me eye (that hadn’t been available in the early-access I’d had to Splash a while ago) is the <a href="https://www.experiencesplash.com/splashapp/gallery">Gallery</a> of existing designs. I’m looking forward to browsing through, and seeing how they complement the Fiori Design Guidelines.</p>
<p><strong>Unit 7 “Design Challenge”</strong>. The last unit of this week sees the start of the first of the two practical portions of this course. This is the design challenge, where we must put into practice what we’ve learned this week – covering the Discovery and Design phases of the end to end process, including use of Splash and Build. Giving and receiving feedback from course peers is also involved, which is a nice way to scale this, and also an opportunity for me to see feedback stats in these tools that has come from someone other than me!</p>
<p>This design challenge lasts two weeks, which means that although there’s an assignment to complete this week, there isn’t one next week – so that we have time to complete the first part of the challenge (submitting the design mockups) without needing to spend more time than budgeted for this course. A nice move.</p>
<p>—</p>
<p>There’s one more aspect of this course that I wanted to mention last time but didn’t get round to it. At the end of each week, there’s a “just in time” video blog entry which gives the course creators and instructors a chance to impart last minute information and changes. I like this aspect, and the relaxed nature of how it’s presented. Indeed, with the contents of this course being based on software-as-a-service products in the cloud, and with the changes that happen on a monthly basis, it’s a good idea.</p>
<p>And on this note of constant change, I’ll leave you with one thought from Martin Fowler. I was reminded of this wisdom via <a href="https://twitter.com/sufw/status/707105718403371008">Sascha Wenninger’s tweet this morning</a>: “If it hurts, do it more often” :-)</p>
<p>(For links to commentary for further weeks, see the first post in this series: <a href="/blog/posts/2016/03/04/fiux2-the-opensap-fiori-course-2016-edition/">“fiux2″ – The openSAP Fiori Course – 2016 Edition</a>.)</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>&quot;fiux2&quot; - The openSAP Fiori Course - 2016 Edition</title>
      <link href="https://qmacro.org/blog/posts/2016/03/04/&quot;fiux2&quot;-the-opensap-fiori-course-2016-edition/"/>
      <updated>2016-03-04T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2016/03/04/&quot;fiux2&quot;-the-opensap-fiori-course-2016-edition/</id>
      <content type="html">
        <![CDATA[
      <p><em>Links to the rest of the series:</em></p>
<p><a href="/blog/posts/2016/03/08/fiux2-week-2-design-your-first-sap-fiori-app/">“fiux2″ Week 2 – Design Your First SAP Fiori App<br>
</a>
<a href="/blog/posts/2016/03/17/fiux2-week-3-get-ready-to-create-your-first-app/">“fiux2″ Week 3 – Get Ready to Create Your First App<br>
</a> <a href="/undefined/">“fiux2″ Week 4 – Create Your First SAP Fiori App<br>
</a> <a href="/blog/posts/2016/03/31/fiux2-week-5-enhance-an-sap-fiori-master-detail-app/">“fiux2″ Week 5 – Enhance an SAP Fiori App<br>
</a> <a href="/2016/04/05/fiux2-week-6-extend-sap-fiori-apps/">“fiux2″ Week 6 – Extend SAP Fiori Apps</a><br>
<a href="/blog/posts/2016/04/10/fiux2-week-7-build-your-own-sap-fiori-app/">“fiux2″ Week 7 – Build Your Own SAP Fiori App</a></p>
<p>I’ve written about the <a href="http://open.sap.com">openSAP</a> Massive Open Online Courses (MOOC) system in the past. I’m a big fan, particularly for the way the folks run the ship. They are “open” in the best possible ways.</p>
<p>Anyway, last week saw the start of the much anticipated 2016 Edition of the course “<a href="https://open.sap.com/courses/fiux2">Build Your Own SAP Fiori App in the Cloud</a>“, aka “fiux2″. I’m enrolled and have just completed the first week, as many of my colleagues have too.</p>
<p>I’m a great believer in learning and re-learning subjects, especially from different sources. Even if you feel you know a good chunk of a given topic, learning with new material, and from different angles, will give you not only knowledge reinforcement but also new nuggets which are therefore also more easily digestible. If only for this reason, I’d recommend this course to you. The time commitment isn’t unreasonable, there’s hands-on, and even a competition!</p>
<p><img src="/images/2016/03/Screen-Shot-2016-03-04-at-16.42.23.png" alt="image"></p>
<p>And in case you need a little bit more convincing, I thought it might be fun and perhaps useful to write a short post each week, describing what we learned. So here goes with Week 1.</p>
<p><strong>Week 1 – Get to Know SAP Fiori UX</strong></p>
<p>A gentle start to the content this week, with a balance of marketing (you knew it was going to come, best to get it over with in the first week) and a 30,000 feet view of the UX strategy. If you’ve followed the SAP Fiori UX revolution at all, it should all be fairly familiar to you. We also covered the SAP HANA Cloud Platform (HCP) and the key role it plays in the extension concept generally, and in particular for Fiori apps.</p>
<p>Within the context of HCP and the cloud centric approach we looked at various tools that are available for different stages in the Fiori app journey, from discovery (Splash), through design (Build) to development (WebIDE). There was also mention of the Rapid Development Solution (RDS) available, and the wealth of documentation that was to be had.</p>
<p>We looked at SAP Fiori in the cloud, with a specific focus on Fiori-as-a-Service (FaaS) and the HANA Cloud Portal, where you can build sites including Launchpad-specific landing pages.</p>
<p>Finally the focus ended upon S/4HANA and how Fiori UX fits directly as the strategic way forward. Now I think it’s fair to say that the statement “SAP Fiori is the default user experience for S/4HANA”, but If I’m not mistaken, one of the lecturers gave the impression that it’s the <em>only</em> user experience. Yep, here, in Week 01 Unit 06:</p>
<p><em>“We provide Fiori, and Fiori is the default user experience for S/4HANA. There’s no other user experience there.We’re not using SAP GUI, we’re barely using any other user experience like NetWeaver business client.”</em></p>
<p>Now, that’s not quite true, is it? S/4HANA, architecturally, is still based upon an ABAP Stack system, which means the venerable R/3 architecture is still in play. Yes of course we have HANA underneath and Fiori on top, but in the middle we still have DISP+WORK and all the wonderful SAPGUI and ABAP goodness that we know and love. And while there are huge inroads made already in the new Simplified suite, there’s always SAPGUI.</p>
<p>I’ll just put that down to the lecturer’s excitement and enthusiasm :-)</p>
<p>Overall, it was worth the hour or three invested in watching the videos**. And the assignment at the end of this week was pretty straightforward, as long as you were prepared for translating marketing speak into specific questions.</p>
<p>I’ll leave you with one thought, which we may well pick up in week 2. Here’s a screenshot, from one of the slides of an S/4HANA Fiori app:</p>
<p><img src="/images/2016/03/Screen-Shot-2016-03-04-at-16.29.35.png" alt="image"></p>
<p>In relation to the Fiori 2.0 designs, which are being introduced in week 2, there were some <a href="https://twitter.com/fredverheul/status/705489908769619968">comments on Twitter</a> today about the perceived complexity of the newer apps. I think we’re already seeing complexity here, but I don’t think it’s necessarily the end of the world. Some things <strong>do</strong> require you to see more information. Not everything is as simple as approving a purchase requisition or booking leave.</p>
<p>**I’d recommend the openSAP mobile app (available for <a href="https://play.google.com/store/apps/details?id=de.xikolo.opensap&amp;hl=en">Android</a> and <a href="https://itunes.apple.com/us/app/opensap/id834570899?mt=8">iOS</a>) which now works properly – i.e. it doesn’t immediately crash when you try to download content to watch offline.</p>
<p></p>
<p></p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Building blocks of language, structure and thought</title>
      <link href="https://qmacro.org/blog/posts/2016/01/31/building-blocks-of-language-structure-and-thought/"/>
      <updated>2016-01-31T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2016/01/31/building-blocks-of-language-structure-and-thought/</id>
      <content type="html">
        <![CDATA[
      <p>As I travel on my path to perhaps what I deem as some sort of enlightenment, back in time via Clojure to one of the great ancestors of language, structure and computational thought (Lisp), I continue to come across a simple theme.</p>
<p><strong>Building Blocks</strong></p>
<p>That theme is the concept of basic building blocks with which vast cathedrals can be constructed. Those building blocks are, in Lisp terms at least, <code>car</code>, <code>cdr</code> and <code>cons</code>.</p>
<p>One of my companions on this path is Daniel Higginbotham's <a href="http://www.amazon.co.uk/Clojure-Brave-True-Ultimate-Programmer/dp/1593275919/">Clojure for the Brave and True</a>. In Part II, covering Language Fundamentals, Clojure's abstractions, or interfaces, are discussed. One of the Clojure philosophies is that the abstraction idea allows a simplified collection of functions that work across a range of different data structures. Abstracting action patterns from concrete implementations allows this to happen. This is nicely illustrated with a look the <code>first</code>, <code>rest</code> and <code>cons</code> functions from the sequence (or 'seq') abstraction.</p>
<p>There's a close parallel between <code>first</code>, <code>rest</code> &amp; <code>cons</code> in Clojure and <code>car</code>, <code>cdr</code> &amp; <code>cons</code> in other Lisps such as Scheme. And there's an inherent and implicit beauty in a collection of constructs so simple yet collectively so powerful. You can read about the origins of the terms <a href="https://en.wikipedia.org/wiki/CAR_and_CDR"><code>car</code> and <code>cdr</code> on the Wikipedia page</a>, which have a depth and a degree of venerability of their own. Essentially both sets of functions implement a linked list, which can be simply illustrated, as shown in the book and elsewhere, as a sequence of connected nodes, like this:</p>
<pre><code>node1              node2              node3
+--------------+   +--------------+   +--------------+
| value | next |--&gt;| value | next |--&gt;| value | next |
+--------------+   +--------------+   +--------------+
    |                  |                  |
    V                  V                  V
  &quot;one&quot;              &quot;two&quot;              &quot;three&quot;
</code></pre>
<p><strong>Implementing a linked list</strong></p>
<p>Daniel goes on to show how such a linked list of nodes like this, along with the three functions, can be simply implemented in, say, JavaScript. Given that these nodes could be represented like this in JavaScript:</p>
<pre class="language-javascript"><code class="language-javascript">node3 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">"three"</span><span class="token punctuation">,</span> <span class="token literal-property property">next</span><span class="token operator">:</span> <span class="token keyword">null</span> <span class="token punctuation">}</span><br>node2 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">"two"</span><span class="token punctuation">,</span> <span class="token literal-property property">next</span><span class="token operator">:</span> node3 <span class="token punctuation">}</span><br>node1 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">"one"</span><span class="token punctuation">,</span> <span class="token literal-property property">next</span><span class="token operator">:</span> node2 <span class="token punctuation">}</span></code></pre>
<p>then the <code>first</code>, <code>rest</code> and <code>cons</code> functions could be implemented as follows:</p>
<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">first</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> n<span class="token punctuation">.</span>value<span class="token punctuation">;</span> <span class="token punctuation">}</span><br><span class="token keyword">function</span> <span class="token function">rest</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> n<span class="token punctuation">.</span>next<span class="token punctuation">;</span> <span class="token punctuation">}</span><br><span class="token keyword">function</span> <span class="token function">cons</span><span class="token punctuation">(</span><span class="token parameter">newval<span class="token punctuation">,</span> n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">value</span><span class="token operator">:</span> newval<span class="token punctuation">,</span> <span class="token literal-property property">next</span><span class="token operator">:</span> n <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre>
<p>With those basic building blocks implemented, you can even build the next level, for example, he shows that map might be implemented thus:</p>
<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">s<span class="token punctuation">,</span> f</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br>  <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br>    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><br>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><br>    <span class="token keyword">return</span> <span class="token function">cons</span><span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token function">first</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">map</span><span class="token punctuation">(</span><span class="token function">rest</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br>  <span class="token punctuation">}</span><br><span class="token punctuation">}</span></code></pre>
<p>To me, there's a beauty there that is twofold. It's implemented using the three core functions we've already seen, the core atoms, if you will. Moreover, there's a beauty in the recursion and the &quot;first and rest pattern&quot; I touched upon earlier in &quot;<a href="https://langramblog.wordpress.com/2015/10/19/a-meditation-on-reduction/">A meditation on reduction</a>&quot;.</p>
<p><strong>Using the building blocks</strong></p>
<p>Let's look at another example of how those simple building blocks are put together to form something greater. This time, we'll take inspiration from a presentation by Marc Feeley: &quot;<a href="http://churchturing.org/y/90-min-scc.pdf">The 90 minute Scheme to C compiler</a>&quot;. In a slide on tail calls and garbage collection, the sample code, in Scheme (a dialect of Lisp), is shown with a tail call recursion approach thus:</p>
<pre class="language-scheme"><code class="language-scheme"><span class="token punctuation">(</span><span class="token keyword">define</span> f<br>  <span class="token punctuation">(</span><span class="token keyword">lambda</span> <span class="token punctuation">(</span><span class="token lambda-parameter">n x</span><span class="token punctuation">)</span> <br>    <span class="token punctuation">(</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">=</span> n <span class="token number">0</span><span class="token punctuation">)</span> <br>        <span class="token punctuation">(</span><span class="token builtin">car</span> x<span class="token punctuation">)</span> <br>        <span class="token punctuation">(</span><span class="token function">f</span> <span class="token punctuation">(</span><span class="token operator">-</span> n <span class="token number">1</span><span class="token punctuation">)</span> <br>           <span class="token punctuation">(</span><span class="token builtin">cons</span> <span class="token punctuation">(</span><span class="token builtin">cdr</span> x<span class="token punctuation">)</span> <br>                 <span class="token punctuation">(</span><span class="token operator">+</span> <span class="token punctuation">(</span><span class="token builtin">car</span> x<span class="token punctuation">)</span> <br>                    <span class="token punctuation">(</span><span class="token builtin">cdr</span> x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>
<p>If you stare long enough at this you'll realise two things: It really only uses the core functions <code>car</code> (<code>first</code>), <code>cdr</code> (<code>rest</code>) and <code>cons</code>. And it's a little generator for finding the Nth term of the Fibonacci sequence:</p>
<pre class="language-scheme"><code class="language-scheme"><span class="token punctuation">(</span><span class="token function">f</span> <span class="token number">20</span> <span class="token punctuation">(</span><span class="token builtin">cons</span> <span class="token number">1</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">; => 10946</span></code></pre>
<p>I love that even the example call uses <code>cons</code> to construct the second parameter.</p>
<p>I read today, in &quot;<a href="https://medium.com/backchannel/farewell-marvin-minsky-1927-2016-54d4bce913d8">Farewell, Marvin Minsky (1927–2016)</a>&quot; by Stephen Wolfram, how Marvin said that &quot;programming languages are the only ones that people are expected to learn to write before they can read&quot;. This is a great observation, and one that I'd like to think about a bit more. But before I do, I'd at least like to consider that studying the building blocks of language helps in reading, as well as writing.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>The future of app building on the SAP HANA Cloud Platform</title>
      <link href="https://qmacro.org/blog/posts/2016/01/26/the-future-of-app-building-on-the-sap-hana-cloud-platform/"/>
      <updated>2016-01-26T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2016/01/26/the-future-of-app-building-on-the-sap-hana-cloud-platform/</id>
      <content type="html">
        <![CDATA[
      <p>The SAP HANA Cloud Platform, or HCP for short, is multi-faceted, and you need to realise that now. Here's my take on one particular facet. Read on to find out what that is, and for a link to an episode of The HANA Effect podcast where I discuss this and more.</p>
<p>As it might be too obvious to compare it with the multi-faceted nature of a diamond, I'm going to compare HCP instead with the trusty 20-sided die that played a big part in my youth, as the random number generator for role playing games such as Dungeons &amp; Dragons.</p>
<p><img src="/images/2016/01/20-sided-die.png" alt="20 sided die"></p>
<p>So in the context of SAP and the cloud, I roll the die, and land a 20. Let's look up what that translates to. Ah yes, the Java runtime on HCP. As the documentation says:</p>
<p><em>&quot;You can develop applications for SAP HANA Cloud Platform just like for any application server. SAP HANA Cloud Platform applications can be based on the Java EE Web application model. You can use programming logic that is well-known to you, and benefit from the advantages of Java EE, which defines the application frontend. Inside, you can embed the usage of the services provided by the platform.&quot;</em></p>
<p>This already counts for a lot on your scorecard - let's look at why.</p>
<h2>Expanding the SAP application ecosphere</h2>
<p>The nature of the <a href="/blog/posts/2012/05/07/sapui5-the-future-direction-of-sap-ui-development/">UI5 toolkit</a> and the architecture behind how Fiori apps are built already open up the SAP application ecosphere to the wider world of application developers, due to the adoption of open standards plus a language and programming model (HTML5) that is well-known to large groups of non-SAP developers.</p>
<p>In the same way, this Java Enterprise Edition (EE) Web application model that is supported by HCP opens up the platform to many a talented group of developers who may not know much about, say, ABAP and traditional R/3 architecture, but can certainly build apps that can now, in the context of your cloud or hybrid SAP landscape, add value and turn innovative business ideas into reality.</p>
<p>SAP embraced Java a long time ago, and now that relationship has matured, we see a couple of things: SAP's investment in the Java Virtual Machine (JVM), and in the Java development and runtime ecosphere. Let's examine the first of these two.</p>
<h2>The JVM</h2>
<p>Like the mythical centaur, the HCP has two hearts, one of which is the JVM - the target runtime platform for those Java applications that we're contemplating right now.</p>
<p>Java is a language that compiles to bytecode, an instruction set for the Java virtual machine (VM) which is the equivalent of machine code for an actual machine. And I would posit that it is not only the adoption of Java as a language specification amongst enterprises the world over, but also the ubiquity of Java's runtime environment, the JVM, where Java applications can run, that is behind the real success of this language and community. (There's a parallel here with web browsers being a hugely distributed platform for executing JavaScript, but that's a story for another time).</p>
<p>In fact, I would suggest that rather than just Java per se, it's actually the JVM as a target runtime that makes SAP's HCP shine as a platform for business applications. And here's why.</p>
<h2>Beyond Java</h2>
<p>The ubiquity of the JVM has not unsurprisingly attracted language developers to view it as a runtime platform for their particular languages. Today it's not just applications written in Java that can run on the JVM. There are many languages, some of them rather important, that compile to Java bytecode, and therefore - as far as the JVM is concerned, are equal execution candidates. You can peruse these <a href="https://en.wikipedia.org/wiki/List_of_JVM_languages">JVM languages on Wikipedia</a>, but here are a few that come to mind:</p>
<p>Clojure - a dialect of Lisp which champions functional programming and immutability.</p>
<p>Scala - an object oriented language with functional programming aspects.</p>
<p>JRuby &amp; JPython - JVM versions of the well-known Ruby and Python languages.</p>
<p>Functional programming is a particular focus of mine right now, for many reasons (one being the ability to build solid code where whole classes of errors just don't exist), and so I have already been experimenting with Clojure apps on the HCP platform. But more generally, if your enterprise has different teams of developers -- it's not atypical to see &quot;SAP developer teams&quot; and &quot;others&quot; -- the SAP HANA Cloud Platform may be the shared runtime catalyst for closer collaboration and mindshare for your next generation of enterprise applications.</p>
<h2>Final word</h2>
<p>At SAP TechEd EMEA 2015 in Barcelona, I had the honour of talking to SAP's Jeff Word, as a guest on his show <a href="http://web.archive.org/web/20180302075837/http://hana.sap.com/customers/hana-effect-podcast.html">The HANA Effect</a>. We discussed HCP, these JVM related considerations, functional programming, and more. If you're interested in hearing the show and finding out more about the future of HCP-powered development, head on over to our podcast episode 38 &quot;Proudly hacking since 1987&quot; and have a listen. The future of SAP enterprise applications is a good place!</p>
<hr>
<p><a href="http://web.archive.org/web/20180302075837/http://www.bluefinsolutions.com/insights/dj-adams/january-2016/the-future-of-app-building-on-the-sap-hana-cloud-p">Originally published on the Bluefin Solutions website</a></p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Digital devolution in local authorities - putting people first</title>
      <link href="https://qmacro.org/blog/posts/2015/11/25/digital-devolution-in-local-authorities-putting-people-first/"/>
      <updated>2015-11-25T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2015/11/25/digital-devolution-in-local-authorities-putting-people-first/</id>
      <content type="html">
        <![CDATA[
      <p>In a couple of weeks' time, Bluefin Solutions is running a <a href="http://web.archive.org/web/20180227042615/http://www.bluefinsolutions.com/events/delivering-digital-devolution-in-local-authorities">one day event</a> on delivering digital devolution in local authorities. If you look closely there's a clear user-centric pattern that is emerging.</p>
<h2>A people-centric pattern</h2>
<p>Looking at the event location, and the subjects that our guest speakers are going to talk upon, there's a pattern that emerges quite clearly. When you add in the Design Thinking workshops which are part of the day, the pattern becomes almost too obvious to state.</p>
<p>That pattern is people-centricity. All our guest local authority speakers are talking on subjects that have people &amp; their activities first and foremost: &quot;citizen engagement&quot;, &quot;mobile&quot;, &quot;employee revolution&quot;. The digital devolution will be about putting people first. Citizens and staff alike. Hey - staff are citizens too! So we're just talking sets and supersets of people generally, right?</p>
<h2>The user experience revolution</h2>
<p>It's unlikely to have escaped your notice that the consumerisation of IT has matured into something more tangible, especially in the SAP-flavoured software space. The tired user interface that we know and love, SAPGUI, is being slowly but surely replaced by a renewal of the whole user experience, or &quot;UX&quot;, as I talked about earlier this week in my UK &amp; Ireland SAP User Group Conference session &quot;Can I build a Fiori app? Yes you can!&quot;.</p>
<p>This renewal has been represented by the arrival of <a href="/blog/posts/2014/02/14/the-essentials-sapui5-openui5-and-fiori/">SAP Fiori</a>, that entered the scene in 2013 and since then has gone from strength to strength, not only as a set of apps (that has grown from an initial 25 to over 600 today) but also as a rich collection of standards &amp; best practice approaches. Perhaps most pertinently, however, we see SAP Fiori as being the vanguard, the herald, of a whole new focus on design, on how the user can be best served, and on a surprisingly refreshing &quot;prequel&quot; to the process of building great apps.</p>
<h2>The UX prequel</h2>
<p>Today, SAP is not your father's, or your mother's SAP. It's not even your grandparents' SAP. It's an organisation with a focus on the person like never before. The user. And in our context, the citizen. SAP's Chief Design Officer (they have a Chief Design Officer!) has championed Design Thinking, driven the Fiori revolution, and with his teams, has spearheaded a new breed of toolset and workflow that kicks in before a single line of user interface code is written.</p>
<p>That toolset and workflow is embodied in SAP's UX-as-a-Service (UXaaS), and can best be contextualised within the Discover - Design - Develop - Deploy diagram that represents what UXaaS covers.</p>
<p>There are two key points here for me and for you.</p>
<ul>
<li>The UX prequel allows us to stop and think about what we really want, what our people really need, to be happy, effective and efficient. This takes place initially in the Discover phase, then the Design phase, with tools such as Splash and BUILD</li>
<li>The person outline in the centre of the diagram isn't there by accident. The UX prequel, and the subsequent story of development and deployment, is centred around the person.
And that's what, at least for me, Digital Devolution is all about. Putting people first.</li>
</ul>
<p>Oh, but what about the location of our event, you ask? Well, that's people centric too. Manchester Central Library has undergone a wonderful transformation recently and is now pretty much fully re-opened to the public. A public that can bootstrap itself to better and higher things with the knowledge and community within, as is true for libraries across the country. But you guessed that already, right?</p>
<p><a href="http://web.archive.org/web/20180227042615/http://www.bluefinsolutions.com/events/delivering-digital-devolution-in-local-authorities">Come along to the library</a> in a couple of weeks and find out more.</p>
<hr>
<p><a href="http://web.archive.org/web/20180227042615/http://www.bluefinsolutions.com/insights/dj-adams/november-2015/digital-devolution-putting-people-first">Originally published on the Bluefin Solutions website</a></p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Impromptu JS session at UKISUG15</title>
      <link href="https://qmacro.org/blog/posts/2015/11/23/impromptu-js-session-at-ukisug15/"/>
      <updated>2015-11-23T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2015/11/23/impromptu-js-session-at-ukisug15/</id>
      <content type="html">
        <![CDATA[
      <p>We’re hearing a lot about Fiori at <a href="https://www.sapusers.org/connect/2015/">#UKISUG15</a> this year, of course. Many of you (perhaps especially those reading this) realise that Fiori is built using the power of HTML5, and specifically with the <a href="https://sapui5.hana.ondemand.com/">UI5</a> toolkit. This means, amongst other things, JavaScript.</p>
<p>I was talking to my friend and colleague and fellow SAP Mentor <a href="https://twitter.com/boobboo">Chris Kernaghan</a> on the evening of Day 1 about levelling up in JavaScript, and had planned to go through some JavaScript goodness with him during the conference. But then I thought it might be fun for others to come along too. So here’s the (rough) plan:</p>
<p>– meet at the <a href="http://www.bluefinsolutions.com">Bluefin Solution</a> stand on the show floor on Tue 24 Nov (last day of #UKISUG15) at 1300 (should give you time to grab a bit of lunch first) if you’re interested in coming along (that’s TODAY, folks!)</p>
<p>– we’ll find (or will have found) a room to use – probably Level 5 Hall 8b (the SAP Mentors Track room)</p>
<p>– the session will be between 30 and 45 mins max</p>
<p>This session will be for those already with some basic JavaScript skills, and / or those interested in using JavaScript to manipulate data inside an SAP Fiori app. Even if you have no JavaScript skills, you might find it interesting. And if you don’t, you can always just laugh at me.</p>
<p>The session is titled “<strong>Programming in a more functional style in JavaScript</strong>” and we’ll go through handling and manipulating data from a running Fiori app. Handling and manipulating data like this is a common use case. Becoming more familiar with doing this will help you build your skills and confidence in the future normal of SAP frontend development. Learning to do this in a functional way will give you a basis to write more solid and reliable code.</p>
<p>See you at the Bluefin stand at 1300 today!</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Speaking at SAP TechEd EMEA 2015</title>
      <link href="https://qmacro.org/blog/posts/2015/11/03/speaking-at-sap-teched-emea-2015/"/>
      <updated>2015-11-03T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2015/11/03/speaking-at-sap-teched-emea-2015/</id>
      <content type="html">
        <![CDATA[
      <p><img src="/images/2015/11/Screen-Shot-2015-11-03-at-09.36.37.png" alt="image"></p>
<p>I’m looking forward to a packed set of days next week in Barcelona, where <a href="events.sap.com/teched-2015-emea/en/home">SAP TechEd EMEA 2015</a> is taking place. It’s packed in many ways: so much to share, so much to learn, so many people to meet and re-meet, so many kilometres to walk in the convention centre, and so much coffee.</p>
<p>I’m involved in a number of activities during the event. I’m co-presenting a number of hands-on sessions relating to SAP HANA Cloud Platform (HCP) and the SAP Web IDE, Fiori, and of course the fantastic UI5 toolkit. Here’s a quick summary (in my own words):</p>
<p><a href="https://sessioncatalog.sapevents.com/go/agendabuilder.sessions/?l=112&amp;sid=26128&amp;locale=en_US"><strong>UX260 Experience SAP Fiori on SAP HANA Cloud Platform</strong></a><br>
SAP HANA Cloud Platform (HCP) is changing the Fiori landscape in so many ways, by offering features and services all the way from development, through connectivity &amp; deployment, to exposure to end users. This session gives you hands-on experience at the places where Fiori and HCP meet.</p>
<p><a href="https://sessioncatalog.sapevents.com/go/agendabuilder.sessions/?l=112&amp;sid=26248&amp;locale=en_US"><strong>UX261 Extend a Fiori App with SAP Web IDE based on beautiful Fiori Reference Apps</strong></a><br>
The key to the present and future success of Fiori in your organisation is the correct adoption of best practices, both from a general development perspective and also from an extension perspective (for standard SAP delivered Fiori apps). There’s a lot to get wrong, but a ton of help for you to get it right. This session shows you what and how.</p>
<p><a href="https://sessioncatalog.sapevents.com/go/agendabuilder.sessions/?l=112&amp;sid=25640&amp;locale=en_US"><strong>UX262 Building SAPUI5 Applications using SAP Web IDE</strong></a><br>
The SAP Web IDE is the cloud-based IDE that can. From a standing start not too long ago, it’s progressed into an impressive set of features, not least those involving the templating and plugin system. This (4hr) hands-on session, which is being given twice next week, covers these subjects and more in particular the rather exciting Runtime Adaptation (RTA) features of UI5. Oh yes!</p>
<p>In addition to these hands-on sessions, I’m taking part in a couple of <a href="http://events.sap.com/teched/en/live">SAP TechEd Live Studio</a> events – I’m interviewing one of my heroes on SAP Development Tools (and in particular those available on HCP), and taking part in a live panel discussion on developer engagement. Stay tuned!</p>
<p></p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Celebrating the engine of the Fiori revolution - the 30UI5 ebook</title>
      <link href="https://qmacro.org/blog/posts/2015/10/20/celebrating-the-engine-of-the-fiori-revolution-the-30ui5-ebook/"/>
      <updated>2015-10-20T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2015/10/20/celebrating-the-engine-of-the-fiori-revolution-the-30ui5-ebook/</id>
      <content type="html">
        <![CDATA[
      <p>Last month saw the milestone release of 1.30 of SAP's UI5 toolkit, the engine that is powering the vast majority of the Fiori User Experience (UX) revolution. For SAP TechEd 2015 we're releasing a downloadable electronic version of the &quot;30 Days of UI5&quot; series of blog post written to celebrate that.</p>
<p><strong>UPDATED: 09 Nov 2015 - <a href="https://www.amazon.co.uk/gp/product/B017MOJEWG">Now available as a Kindle version on Amazon!</a></strong></p>
<p>Last month, I wrote about our &quot;30 Days of UI5&quot; series of blog posts in <a href="/blog/posts/2015/09/09/the-advent-of-ui5-1.30-and-what-it-means-for-us/">The advent of UI5 1.30 and what it means for us</a>. It was a joint effort between a number of our developer community team members, and SAP colleagues too. It exists in its original form as <a href="/blog/posts/2015/07/04/welcome-to-30-days-of-ui5!/">a series of 30 blog posts</a>, but for SAP TechEd 2015 we're releasing the series as a complete electronic version, for your reading pleasure!</p>
<p>It seems fitting to release it right now. While I'm not at <a href="http://web.archive.org/web/20170915091005/http://events.sap.com/teched-2015-usa/en/home">SAP TechEd USA in Las Vegas</a> (except in spirit, as I seem to have appeared* in the hallways of the SAP TechEd convention centre, *blush*) I know that there will be plenty of transactional and application eye candy on screens all around the place.</p>
<p><img src="/images/2015/10/DJ-Adams-Developer-Heros-banner.jpg" alt="a pic of me on a banner at TechEd - photo courtesy of Jason Cao - thanks"></p>
<p>And you can bet your bottom dollar that much of it will be powered by the engine of that Fiori revolution - SAP's UI5 toolkit.</p>
<p>So to celebrate that, to thank the super teams of developers and designers at SAP who have nurtured UI5 from the ground up, and to share with you some hopefully interesting and intricate aspects of that toolkit, it seems appropriate to release the series as a downloadable whole. As a bonus, it has a great foreword from one of the core UI5 developers Andreas Kunz, with some great history of where UI5 came from. Worth the download alone!</p>
<p>First up, for SAP TechEd USA in Las Vegas this week, we have the PDF version. It's less than 100 pages, so go nuts, buy some ink, print it off, and enjoy a relaxing soak in the bath with it.</p>
<p>If you're more of a Kindle person, then we'll be releasing a version for you in time for <a href="http://web.archive.org/web/20170915091005/http://events.sap.com/teched-2015-emea/en/home">SAP TechEd EMEA</a> in Barcelona in November, so watch this space! UPDATE: <a href="https://www.amazon.co.uk/gp/product/B017MOJEWG">Now available!</a></p>
<p>So, without further ado, the PDF version of 30 Days of UI5 is available here: <a href="https://drive.google.com/file/d/0B-Assa05Fog5X1BjU1gtNnZtNDg/view?usp=share_link&amp;resourcekey=0-Af3eCjLKdWq1hK-1j-t66w">30 Days of UI5 - PDF Version</a>.</p>
<hr>
<p><a href="http://web.archive.org/web/20170915091005/http://www.bluefinsolutions.com/insights/dj-adams/october-2015/celebrating-the-engine-of-the-fiori-revolution-the">Originally published on the Bluefin Solutions website</a></p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>My journey to Clojure</title>
      <link href="https://qmacro.org/blog/posts/2015/10/19/my-journey-to-clojure/"/>
      <updated>2015-10-19T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2015/10/19/my-journey-to-clojure/</id>
      <content type="html">
        <![CDATA[
      <p>I'm learning Clojure. Slowly, but hopefully surely. Clojure is a Lisp, which I like saying, because it makes me sound as though I know what I'm talking about and that my language experience is as old as the hills. Perhaps the only thing that is valid there is that I'm old. But anyway.</p>
<p>Actually, one of the things about Clojure that appeals to me is that it is a Lisp. One of the books I remember buying when I was still in my early teens was <a href="http://people.csail.mit.edu/phw/Books/AITABLE.HTML">Artificial Intelligence</a> by Patrick Henry Winston. I still have it, a second printing from 1979. While I didn't understand very much of it, I was somewhat mesmerised by the Lisp forms, written in all caps and with beautiful bracket symmetry. Lisp cropped up again for me a few years later, in the amazing book <a href="https://en.wikipedia.org/wiki/G%C3%B6del,_Escher,_Bach">Gödel, Escher, Bach</a> by Douglas Hofstadter, and it was equally mesmerising.</p>
<p>So when I finally discovered Clojure, I decided to delve beneath the shimmering surface that had heretofore had me transfixed, and experience the beauty from within.</p>
<p>One of the recurring patterns emerging from what I read, even at that early stage, was that of &quot;head and tail&quot;. This is alternatively known as &quot;first and rest&quot;, or, going back to early Lisp origins, &quot;<a href="https://en.wikipedia.org/wiki/CAR_and_CDR">CAR and CDR</a>&quot;. Given a sequence, the idea is that you can get hold of the first item, and everything but the first item (the rest), as two separate addressable entities. You do something with the first item, and then repeat the process where the sequence becomes what you had just before identified as the rest.</p>
<p>There's something appealingly simple in this pattern, not just because it's something that we can all immediately understand, but also because there's an unspoken truth that is about the general approach of sequential data structures, and data structure processing in general. It can perhaps be summed up nicely in an epigram from <a href="https://en.wikipedia.org/wiki/Alan_Perlis">Alan Perlis</a> thus:</p>
<p>&quot;<em>It is better to have 100 functions operate on one data structure than 10 functions on 10 data structures.</em>&quot;</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Give me a browser, and I&#39;ll give you the world</title>
      <link href="https://qmacro.org/blog/posts/2015/09/28/give-me-a-browser-and-i&#39;ll-give-you-the-world/"/>
      <updated>2015-09-28T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2015/09/28/give-me-a-browser-and-i&#39;ll-give-you-the-world/</id>
      <content type="html">
        <![CDATA[
      <p>With the cloud, not only are apps and systems going virtual, but also developer workflows. It might seem obvious in hindsight, but a Web-only developer workflow is possible right now, and it works. Read on to find out what this means for you.</p>
<h2>The past and the future</h2>
<p>Way back in the mists of time, at an SAP TechEd conference in the early 2000s, I saw the future. It was in the shape of a small box, with a credit card sized slot, and it was then billed as the <a href="https://en.wikipedia.org/wiki/JavaStation">JavaStation</a>. It was a small network computer from Sun.</p>
<p>The idea of a network computer wasn't exactly new, and wasn't that different to the <a href="https://en.wikipedia.org/wiki/X_terminal">X terminal</a> concept. What completely bowled me over was the seemingly magic session managment, that was based around a physical credit card sized identity module. You could &quot;hot-remove&quot; it from the JavaStation you were at, walk over to another, insert it, and see your session recreated instantly on that new network computer.</p>
<p>It must have made a lasting impression on me, because I can still remember the experience as if it was yesterday. As I <a href="http://radar.oreilly.com/2005/11/burn-in-7-dj-adams.html">cut my young computing teeth</a> on terminal-based computing, and indeed built my own X terminals for kicks, I was no stranger to the power and utility of the computing architecture of the day - minicomputers and mainframe computers housed in some remote facility, to which you were connected via a generic interface (a <a href="https://en.wikipedia.org/wiki/VT100">VT100</a> or <a href="https://en.wikipedia.org/wiki/IBM_3270">3270</a> type terminal, or an X terminal) that itself had little relevant computing horsepower - just enough to achieve connectivity and display.</p>
<h2>The present and the future</h2>
<p>Fast forward to today, with the <a href="http://web.archive.org/web/20180227044007/http://hcp.sap.com/index.html">SAP HANA Cloud Platform</a> (HCP) rapidly becoming the goto platform for new apps, and extensions to existing apps, and the meeting point for on-premise and other cloud systems.</p>
<p>One of the subscriptions available within this Platform-as-a-Service (PaaS) offering is the <a href="http://web.archive.org/web/20180227044007/http://hcp.sap.com/developers/TutorialCatalog/wide100_01_getting_sap_web_ide.html">SAP Web IDE</a> - a still relatively young but already very accomplished Interactive Development Environment (IDE). While not everyone's current primary environment for experimentation and development, it is already far beyond just being a serviceable tool for building apps. If you step back and look at the bigger picture that SAP has for its cloud platform offering as a whole, the SAP Web IDE is an incredibly important artifact on the roadmap that SAP envisions (briefly: on premise standard, custom extensions and new apps in the cloud).</p>
<p>And when you couple the SAP Web IDE with some of the other facilities that come as standard with SAP HCP - such as a git repository server for source code management, automatic deployment mechanisms, and the <a href="http://web.archive.org/web/20180227044007/https://help.hana.ondemand.com/help/frameset.htm?e4f1d97cbb571014a247d10f9f9a685d.html">Destinations</a> facility within the wider connectivity services, you have everything you need to build non-trivial apps that reach out to SAP and non-SAP systems. Furthermore, significant facilities within the SAP Web IDE are being added on a regular basis.</p>
<h2>SAP Inside Track Sheffield 2015</h2>
<p>And so the story turns to an event earlier this month - <a href="http://web.archive.org/web/20180227044007/http://bit.ly/sitsheff">SAP Inside Track Sheffield</a>. On Day 2 of this event, I led an all day workshop on Fiori and UI5 development (if you're interested, I've made the exercise document available here: <a href="https://docs.google.com/document/d/1NiCQoyv05IwIZxsV21Vw6ZM_2R5Wd_n0uxjK2h3a7UE/">Fiori Products App Development Workshop - Exercise Document</a>).</p>
<p>The facilities at Sheffield Hallam University, our awesome hosts for the event (thanks to Steve Lofthouse), were great, and even extended to proper classrooms for the breakout sessions and workshop. On the day of the workshop, I arrived to set up. We had been given optional access to the PCs in the classroom - student PCs and an instructor PC at the front. These PCs were run of the mill, nothing wrong with them per se, although they were less than ideal as usable workstations, in that they were running Microsoft Windows, in lieu of a proper operating system. But what they all did have was a modern web browser - Chrome.</p>
<p>SAP HCP administration, and access to all HCP's facilities, is via a cockpit that is web based (and built on UI5, of course). The SAP Web IDE is also browser based (and also built with UI5, along with <a href="http://web.archive.org/web/20180227044007/https://wiki.eclipse.org/Orion">Orion</a>).</p>
<p>I'd never used this particular instructor PC before, nor had the workshop attendees ever used the student PCs in front of them. But all they needed was to fire up Chrome and connect to their HCP trial accounts, from where they could manage their app software, define destinations, access reference source code on Github, and use the SAP Web IDE to develop, test and then deploy their solutions to the workshop exercises. And inevitably (and intentionally) debug those apps, in flight, too (using the super powerful <a href="http://web.archive.org/web/20180307085258/https://developers.google.com/web/tools/chrome-devtools/">Chrome Developer Tools</a>).</p>
<h2>Developer workflow and productivity</h2>
<p>While we weren't working on JavaStations, we were enjoying the equivalent power and approach that those early network computers championed. Our whole development workflow, even my own workshop design, preparation and documentation, was all done from a single facility - a web browser. Granted, that web browser instance was mostly on my laptop, but that's just because that's the workstation to which I have closest physical access.</p>
<p>But I've tweaked and extended the workshop on various machines over the workshop's history, and used different machines to deliver it too. The link between my work, my environment and the physical machine I happen to be using is very loose; I can switch between web browsers on different machines as easily (perhaps not as magically) as was demonstrated with the JavaStation session management facilities.</p>
<p>With the advent of the cloud, combined with the web, developer workflow is changing, and developer productivity for many of your SAP projects, in the context of HCP and SAP's strategic direction for itself and its customers (you and me), is moving towards this idea of a modern take on the network computer. I'd argue that for many SAP Fiori extension projects, to take a relevant example of the work that goes on today, all one needs is a browser.</p>
<p>Embrace what HCP has to offer, understand what SAP's direction is in this regard, and ready yourself for the cloud, the new mainframe, with the simpler workstation software requirements that go hand in hand with that. Developer workflows that exist entirely in the cloud are here today.</p>
<hr>
<p><a href="http://web.archive.org/web/20180227044007/http://www.bluefinsolutions.com/insights/dj-adams/september-2015/give-me-a-browser,-and-i-ll-give-you-the-world">Originally published on the Bluefin Solutions website</a></p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>The advent of UI5 1.30 and what it means for us</title>
      <link href="https://qmacro.org/blog/posts/2015/09/09/the-advent-of-ui5-1.30-and-what-it-means-for-us/"/>
      <updated>2015-09-09T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2015/09/09/the-advent-of-ui5-1.30-and-what-it-means-for-us/</id>
      <content type="html">
        <![CDATA[
      <p>SAP's UI5 toolkit, the main technical foundation for SAP's User Experience (UX) revolution, has reached a milestone release. While 1.30 is just another step up from the previous public release of 1.28, for me it represents a transition towards a maturity that is built upon a solid foundation. In this post, I pick out five innovations that show why.</p>
<p>UI5 started out inside SAP back in late 2008, and it has been available to us as customers and partners since around 2012 (<a href="/blog/posts/2012/05/07/sapui5-the-future-direction-of-sap-ui-development/">I wrote about an early 1.2 beta version back then</a>). By now most, if not all of us, should be aware of SAP Fiori UX and what it represents. The growth of the Fiori application design patterns and implementations has been nothing short of stellar. And its technical success is all down to the UI5 toolkit that is lovingly nurtured and tended by an awesome group of modest heroes in SAP.</p>
<h2>30 Days of UI5</h2>
<p>To celebrate the advent of UI5 1.30, I set a goal of building a series of 30 daily blog posts on UI5.</p>
<p>With the help of of friends and colleagues here at Bluefin and also at SAP, this goal was reached, and exists in the form of a blog post series called <a href="/blog/posts/2015/07/04/welcome-to-30-days-of-ui5!/">30 Days of UI5</a>, or &quot;30UI5&quot; for short. I've written more about this in my post <a href="/blog/posts/2015/08/06/building-blocks-for-the-future-normal/">Building blocks for the future normal</a>, where you can read more about UI5 in the context of S/4HANA. Otherwise, just head on over to the series and take your pick from the titles. Some are technical, others less so. The final post in the series is by Sam Yen, SAP's Chief Design Officer. Titled <a href="/blog/posts/2015/08/02/the-origin-of-becoming-a-fundamental-enabler-for-fiori/">The origin of becoming a fundamental enabler for Fiori</a>, it gives some great insight into the origins of UI5 and Fiori.</p>
<h2>What 1.30 means for us</h2>
<p>To explain what the advent of 1.30 means for us, for you, and for SAP's continued UX revolution, we'll have a brief look at some of the recent innovations. Here's my top 5 list of innovations and why they're important. You can find links to these and more from the <a href="http://web.archive.org/web/20180318121556/https://openui5.hana.ondemand.com/#docs/guide/99ac68a5b1c3416ab5c84c99fefa250d.html">What's New page for the 1.30 release</a>.</p>
<h3>Open Development</h3>
<p>Perhaps this innovation is the least obvious. Let's take a look at the context of the 1.30 stable release announcement. It appeared yesterday on the OpenUI5 blog: <a href="http://web.archive.org/web/20180318121556/http://openui5.tumblr.com/post/128558808832/new-stable-release-openui5-130">New stable Release: OpenUI5 1.30</a>. SAP open-sourced the UI5 toolkit back in 2013. But this act was no empty gesture; the UI5 codebase that powers our enterprise <a href="/blog/posts/2015/08/06/building-blocks-for-the-future-normal/">future normal</a> continues to be developed in full view, and in cooperation with customers, partners and developers. And 1.30 was available first in the open source flavour. What does that mean for us? Innovation and scrutiny of the highest degree, bringing a quality and thoroughness that can only be achieved by such an open process.</p>
<h3>Asynchronous Resource Loading</h3>
<p>This is a general innovation that sees the UI5 toolkit move towards an &quot;asynchronous-first&quot; loading approach for resources such as views and controllers. Performance is a key foundational aspect of the UX revolution, and alongside the existing network traffic improvement techniques such as JavaScript minification and the &quot;preload&quot; mechanism (compression of all application resources into a single file), asynchronous loading will sharpen up the performance of Fiori apps, resulting in happier users. For more info, see the 30UI5 post <a href="/blog/posts/2015/07/27/an-introduction-to-sap.ui.define/">An introduction to sap.ui.define</a>.</p>
<h3>OData Meta Model</h3>
<p>One aspect of OData that differentiates it from other data sources is that it's server-side based, rather than client-side based. But another aspect is that the data represented comes complete with metadata and annotations. An OData service bristles with knowledge about itself and details about the entities that it exposes. So much so that it is possible to take advantage of this in applications, where developers can use UI5 features such as the <a href="http://web.archive.org/web/20180318121556/https://openui5.hana.ondemand.com/#docs/guide/341823349ed04df1813197f2a0d71db2.html">OData Meta Model mechanism</a>, and the <a href="http://web.archive.org/web/20180318121556/https://openui5.hana.ondemand.com/#docs/guide/dbec058964f545e4bb3b7e9fbaa0602d.html">Annotation Helper</a> to use metadata expressions to enhance aspects of data binding. The result is that building helper and formatting functions in Fiori apps becomes simpler and more declarative, with fewer moving parts and fewer places for things to go wrong.</p>
<h3>The Semantic Page control</h3>
<p>The standard SAP Fiori apps are built upon a scaffolding layer that provides consistency of architecture, function and design. This scaffolding layer is, however, internal-only, (deliberately) undocumented and not recommended for customer use. This doesn't mean we can't build SAP Fiori apps ourselves, <a href="/blog/posts/2015/03/02/can-i-build-a-fiori-app-yes-you-can!/">far from it</a>. But it does mean that it's pending deprecation might leave us bereft of good technical support for building apps with that consistent design. This Semantic Page control and its relations are the first steps to providing a proper replacement for the monolithic scaffolding mechanisms, resulting in the possibility of a more standardised approach to realising Fiori designs in customer scenarios. For more info, see the 30UI5 post <a href="/blog/posts/2015/07/06/semantic-pages/">Semantic Pages</a>.</p>
<h3>Great tutorials</h3>
<p>Version 1.30 sees a family of great <a href="http://web.archive.org/web/20180318121556/https://openui5.hana.ondemand.com/#docs/guide/8b49fc198bf04b2d9800fc37fecbb218.html">tutorials</a> available within the Software Development Kit (SDK) itself. Beyond the obligatory Hello World! tutorial, there is a <a href="http://web.archive.org/web/20180318121556/https://openui5.hana.ondemand.com/#docs/guide/3da5f4be63264db99f2e5b04c5e853db.html">35-step Walkthrough</a> that takes the reader through many of the key aspects of developing with UI5, a new 17-step tutorial on <a href="http://web.archive.org/web/20180318121556/https://openui5.hana.ondemand.com/#docs/guide/1b6dcd39a6a74f528b27ddb22f15af0d.html">Navigation and Routing</a> which has long been anticipated, and a 15-step <a href="http://web.archive.org/web/20180318121556/https://openui5.hana.ondemand.com/#docs/guide/e5310932a71f42daa41f3a6143efca9c.html">Data Binding</a> tutorial. While in the past developers had to make the most of the scattered examples throughout the SDK to learn, or infer, best practices, there is now no excuse for not knowing how to do things, and how to do them right. With these tutorials, your Fiori developers are now equipped with the right knowledge to build robust applications and custom extensions in your organisation.</p>
<p>UI5 1.30 is here now, already available in the form of OpenUI5 <a href="http://web.archive.org/web/20180318121556/http://openui5.tumblr.com/post/125924070522/use-a-specific-version-of-openui5-from-our-cdn">through the CDN</a>, and coming to a frontend server near you in the form of SAPUI5 soon. You can track availability of SAPUI5 through the <a href="http://web.archive.org/web/20180318121556/https://sapui5.hana.ondemand.com/versionoverview.html">Maintenance Status page</a>. Get ready to embrace the innovations and make them work for your organisation!</p>
<hr>
<p><a href="http://web.archive.org/web/20180318121556/http://www.bluefinsolutions.com/insights/dj-adams/september-2015/the-advent-of-ui5-1-30-and-what-it-means-for-us">Originally published on the Bluefin Solutions website</a></p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Cookies</title>
      <link href="https://qmacro.org/blog/posts/2015/08/09/cookies/"/>
      <updated>2015-08-09T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2015/08/09/cookies/</id>
      <content type="html">
        <![CDATA[
      <p>This site uses cookies. If you don’t like that, or don’t understand that, then please: Get. Off. The. Web. If you can’t be bothered to check out how the web works, or can’t be bothered to look up the specifications, or if you don’t even know what an RFC is, and are nevertheless expecting one of those silly “this site uses cookies” messages, then please Do. Not. Proceed. Leave this website, and stop using the web entirely. Thank you.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Building blocks for the future normal</title>
      <link href="https://qmacro.org/blog/posts/2015/08/06/building-blocks-for-the-future-normal/"/>
      <updated>2015-08-06T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2015/08/06/building-blocks-for-the-future-normal/</id>
      <content type="html">
        <![CDATA[
      <p>S/4HANA is here. It's now. It's cloud ready, HANA powered, and has an awesome user experience in the form of SAP Fiori. SAP Fiori is powered by the UI5 toolkit. To successfully understand and embrace the future normal of SAP, it's important to ensure that understanding, that embrace, is built upon firm foundations.</p>
<h2>30 Days of UI5</h2>
<p>I've just finished curating and contributing to a series called <a href="/blog/posts/2015/07/04/welcome-to-30-days-of-ui5!/">30 Days of UI5</a>. It is a set of 30 daily blog posts on the subject of UI5, the toolkit that powers SAP Fiori UX. The posts were written not only by me, but also by some of my illustrious Bluefin Solutions colleagues such as John Murray, Sean Campbell, James Hale, John Appleby, Chris Choy, Nathan Adams and Jon Gregory. Not only  that, we had some great contributions from our SAP colleagues Thilo Seidel and SAP's Chief Design Officer Sam Yen. Awesome work.</p>
<p>UI5, in its original SAP-licenced flavour &quot;SAPUI5&quot;, and the open sourced flavour &quot;OpenUI5&quot;, was born in late 2008, and has reached a level of maturity today to the extent that a milestone release, 1.30, is <a href="http://web.archive.org/web/20181218131147/http://openui5.tumblr.com/post/121579731137/first-preview-of-openui5-130">imminent</a> (hence the 30 days idea!). But more importantly than this age-based and version-based maturity is the simple fact that UI5 powers the Fiori revolution.</p>
<h2>The future normal</h2>
<p>&quot;Yes, <em>yawn</em>, <a href="/blog/posts/2014/02/14/the-essentials-sapui5-openui5-and-fiori/">we all know that</a>&quot;, I hear you say. Maybe you do. I've been saying it often enough, and I'm still proud of the designers and developers at SAP who have made this happen and continue to make it happen. But perhaps what's even more important to realise is what that means for us, for me and for you, in the context of SAP Fiori and more specifically in the context of S/4HANA, the future normal.</p>
<p>Step back in time with me for a second, to R/2. If that's too far, let's just go back to R/3. If that's too far, let's look at your SAP systems today. What are they capable of? How malleable is the UI layer, how can you imagine modifying or extending it to suit your business processes? The answer may  depend somewhat on the particular technology involved (classic dynpro, web dynpro, or even the  Persona layer you're using), but the point is, you've become innately aware of how the UI layer can  be stretched and improved - where it stretches naturally, and where it stresses and breaks.</p>
<h2>What's different?</h2>
<p>With the future normal, that is changing for your business users. With a complete Fiori-based frontend, the rules of the game are different. Different in what can be achieved, different in how things can be achieved, and different in how things should be achieved.</p>
<p>What does that mean? Well, the mechanics are fundamentally different. <a href="/blog/posts/2012/05/07/sapui5-the-future-direction-of-sap-ui-development/">Outside-in applications</a> written in UI5, the toolkit supplying the power, the libraries, the design and the runtime for Fiori are a different prospect, a different platform, and a different context for your developers and your design teams. But there's more. Not only do we have a change in technology, in particular in relation to <a href="http://web.archive.org/web/20180227042457/https://sapui5.netweaver.ondemand.com/sdk/#docs/guide/a264a9abf98d4caabbf9b027bc1005d8.html">extending existing SAP-supplied apps</a>, but there's also a understandably strict set of  SAP Fiori design guidelines, painstakingly put together, and followed by the application builders. <a href="/blog/posts/2015/03/02/can-i-build-a-fiori-app-yes-you-can!/">Fiori's philosophy</a> includes a different way at looking at applications and how they should exist and  relate. And implicitly, how they should be extended and copied.</p>
<h2>A foundational understanding</h2>
<p>Understanding anything fully starts with the foundations. Understanding the future normal of SAP starts with Fiori and UI5, at least, looking at it through the eyes of your business process owners and users.</p>
<p>And it just so happens that we have an upcoming event tuned to exactly that <a href="http://web.archive.org/web/20180227042457/http://www.bluefinsolutions.com/Events/S-4HANA-Understanding-the-future-normal/">S/4HANA: Understanding the future normal</a> :-) It's free, there's breakfast and coffee, and there are still some spaces left. So see you there!</p>
<hr>
<p><a href="http://web.archive.org/web/20180227042457/http://www.bluefinsolutions.com/insights/dj-adams/august-2015/building-blocks-for-the-future-normal">Originally published on the Bluefin Solutions website</a></p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>The origin of becoming a fundamental enabler for Fiori</title>
      <link href="https://qmacro.org/blog/posts/2015/08/02/the-origin-of-becoming-a-fundamental-enabler-for-fiori/"/>
      <updated>2015-08-02T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2015/08/02/the-origin-of-becoming-a-fundamental-enabler-for-fiori/</id>
      <content type="html">
        <![CDATA[
      <p><strong><a href="/blog/posts/2015/07/04/30-days-of-ui5/">30 Days of UI5</a> — Day 30 by <a href="https://twitter.com/uxsamyen">Sam Yen</a>, Chief Design Officer, SAP</strong></p>
<p>Not too long ago, before Fiori was Fiori, SAP had tried several times to refresh the user experience.  I’m aware of over 20 different UI technologies that we have used since the release of R/3.  As mobility was sweeping into the enterprise, SAP adopted a native mobile development approach.  At the time, many believed that this was an opportunity to create modern experiences with modern UI technologies (primarily iOS at the time) and development environments to refresh the SAP User Experience.</p>
<p>The first mobile apps showed promise, but as we started to roll out more and more, quality suffered.  The experience of some of the native apps were good, some bad.  We noticed a lot of creativity in building different ways to do the same things.  This came to a head when some of our large customers evaluated SAP’s mobile app portfolio as a whole and were not happy about this experience.</p>
<p>Design consistency was one thing.  Also, we considered the full lifecycleof these apps. Currently, there are over a thousand permutations of android software and hardware configurations in the market today.  Even Apple now has several versions of screen sizes and resolutions to support from tablets, phones, and now watches.  Cost of development, support, and ownership pointed to a modern, but scalable approach.  We made a decision to go with a responsive HTML5 approach.</p>
<p>Luckily, SAP had been developing HTML5 controls at that time.  As with other HTML5 libraries at the time, UI5 was separated between the desktop controls and the mobile controls.  We took the decision to combine the best of what we had and create a responsive UI5 control set for Fiori.</p>
<p>I may have understated the part about our customers being unhappy about the user experience.  It was escalated to the highest levels and we were under tremendous pressure to demonstrate to customers that this new concept would fly – quickly.  We had 6 days, 144 hours to be exact, to demonstrate to internal stakeholders the both the desirability and feasibility of our approach.  I’ll never forget Stefan Beck and the UI5 team walking down the halls of Walldorf to our war room saying that, “the UI5 team will support you.”</p>
<p><img src="/images/2018/02/section1-1-300x197.png" alt=""></p>
<p>That was the beginning.  Since then UI5 and the team behind the technology have expanded much beyond a mere set of controls.  The team has helped to develop a programming model that is open and designed to scale for the enterprise.  It is part of growing set of tools to make UI development both efficient and scalable both for SAP and the industry.</p>
<p>Looking forward we’ll start to augment our responsive design approach to also leverage native, on-device capabilities.  Analytics will become more of an area of focus.  I have said many times that I feel my role as Chief Design Officer is to change the perception of SAP’s user experience. Fiori has done much for SAP to start that perception change, but I am acutely aware that we are only just beginning on our journey.  I also feel that SAP’s journey is also the same journey that the entire IT industry will need to follow to bring great experiences to our users.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Revisiting the XML Model</title>
      <link href="https://qmacro.org/blog/posts/2015/08/01/revisiting-the-xml-model/"/>
      <updated>2015-08-01T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2015/08/01/revisiting-the-xml-model/</id>
      <content type="html">
        <![CDATA[
      <p><strong><a href="/blog/posts/2015/07/04/30-days-of-ui5/">30 Days of UI5</a> — Day 29 by <a href="//qmacro.org/about/">DJ Adams</a></strong></p>
<p><img src="/images/2018/02/Screen-Shot-2015-08-01-at-11.56.50.png" alt=""></p>
<p>It’s been more than a couple of years since I first had a look at XML data in the context of UI5. In my “<a href="https://www.youtube.com/watch?v=wZUXz5f1CHI">Re-presenting my site with SAPUI5</a>” video <a href="https://github.com/qmacro/sapui5bin/blob/master/blogui/resources/blogarchive.controller.js#L9-L10">I used an XML Model to load the XML feed</a> of my weblog into a UI5 app (gosh, <a href="https://github.com/qmacro/sapui5bin/tree/master/blogui/resources">JavaScript views</a>!).</p>
<p>The XML Model mechanism proved very useful this week on a project, and I thought I’d re-examine some of its features. Everyone knows about the JSON and OData Model mechanisms; at least in my UI5 conversations, I don’t hear folks talk about the XML Model much. So I thought I’d give it some love here.</p>
<p>The <a href="https://openui5.hana.ondemand.com/#docs/api/symbols/sap.ui.model.xml.XMLModel.html">API reference documentation for the XML Model</a> is a little dry. As Frank Zappa once said, “<em>The computer can’t tell you the emotional story. It can give you the exact mathematical design, but what’s missing is the eyebrows</em>“. We need to look elsewhere for the emotional story, for the eyebrows; and I think a nice place might be the <a href="https://openui5.hana.ondemand.com/test-resources/sap/ui/core/qunit/XMLModel.qunit.html">QUnit tests for the XML Model</a>.</p>
<p><strong>Learning from the QUnit sources</strong></p>
<p>Let’s have a look at the source, and see what we can learn. There are actually a couple of QUnit test files; we’ll have a look at just one of them – <a href="https://github.com/SAP/openui5/blob/48324c5fd9ed365620bc49b32c4046aa76269bc7/src/sap.ui.core/test/sap/ui/core/qunit/XMLModel.qunit.html">XMLModel.qunit.html</a>. We’ll just examine the setup and a couple of tests to see what we can find – what we can expect to be able to do with an XML Model. You can explore the rest of the QUnit test files on your own.</p>
<p>At the start of XMLModel.qunit.html, <a href="https://github.com/SAP/openui5/blob/48324c5fd9ed365620bc49b32c4046aa76269bc7/src/sap.ui.core/test/sap/ui/core/qunit/XMLModel.qunit.html#L31-L46">a couple of XML Models are instantiated with some test data</a> as follows:</p>
<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">var</span> testdata <span class="token operator">=</span> <span class="token string">"&lt;teamMembers>"</span> <span class="token operator">+</span><br>  <span class="token string">"&lt;member firstName=\"Andreas\" lastName=\"Klark\">&lt;/member>"</span> <span class="token operator">+</span><br>  <span class="token string">"&lt;member firstName=\"Peter\" lastName=\"Miller\">&lt;/member>"</span> <span class="token operator">+</span><br>  <span class="token string">"&lt;member firstName=\"Gina\" lastName=\"Rush\">&lt;/member>"</span> <span class="token operator">+</span><br>  <span class="token string">"&lt;member firstName=\"Steave\" lastName=\"Ander\">&lt;/member>"</span> <span class="token operator">+</span><br>  <span class="token string">"&lt;member firstName=\"Michael\" lastName=\"Spring\">&lt;/member>"</span> <span class="token operator">+</span><br>  <span class="token string">"&lt;member firstName=\"Marc\" lastName=\"Green\">&lt;/member>"</span> <span class="token operator">+</span><br>  <span class="token string">"&lt;member firstName=\"Frank\" lastName=\"Wallace\">&lt;/member>"</span> <span class="token operator">+</span><br>  <span class="token string">"&lt;/teamMembers>"</span><span class="token punctuation">;</span><br><br><span class="token keyword">var</span> testdataChild <span class="token operator">=</span> <span class="token string">"&lt;pets>"</span> <span class="token operator">+</span><br>  <span class="token string">"&lt;pet type=\"ape\" age=\"1\">&lt;/pet>"</span> <span class="token operator">+</span><br>  <span class="token string">"&lt;pet type=\"bird\" age=\"2\">&lt;/pet>"</span> <span class="token operator">+</span><br>  <span class="token string">"&lt;pet type=\"cat\" age=\"3\">&lt;/pet>"</span> <span class="token operator">+</span><br>  <span class="token string">"&lt;pet type=\"fish\" age=\"4\">&lt;/pet>"</span> <span class="token operator">+</span><br>  <span class="token string">"&lt;pet type=\"dog\" age=\"5\">&lt;/pet>"</span> <span class="token operator">+</span><br>  <span class="token string">"&lt;/pets>"</span><span class="token punctuation">;</span></code></pre>
<p><strong>setXML and setData</strong></p>
<p>The <a href="https://github.com/SAP/openui5/blob/48324c5fd9ed365620bc49b32c4046aa76269bc7/src/sap.ui.core/test/sap/ui/core/qunit/XMLModel.qunit.html#L48-L53">XML data is added to the XML Models</a> with the setXML function:</p>
<pre class="language-javascript"><code class="language-javascript">	<span class="token keyword">var</span> oModel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">sap<span class="token punctuation">.</span>ui<span class="token punctuation">.</span>model<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>XMLModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br>	oModel<span class="token punctuation">.</span><span class="token function">setXML</span><span class="token punctuation">(</span>testdata<span class="token punctuation">)</span><span class="token punctuation">;</span><br>	sap<span class="token punctuation">.</span>ui<span class="token punctuation">.</span><span class="token function">getCore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setModel</span><span class="token punctuation">(</span>oModel<span class="token punctuation">)</span><span class="token punctuation">;</span><br><br>	<span class="token keyword">var</span> oModelChild <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">sap<span class="token punctuation">.</span>ui<span class="token punctuation">.</span>model<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>XMLModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br>	oModelChild<span class="token punctuation">.</span><span class="token function">setXML</span><span class="token punctuation">(</span>testdataChild<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>This is different to the setData function, which is also present on the JSON Model, with an equivalent semantic. Here in the XML Model, the <a href="https://openui5.hana.ondemand.com/#docs/api/symbols/sap.ui.model.xml.XMLModel.html#setData">setData</a> function would be expecting an <strong>XML encoded data object</strong>, not a literal string containing XML.</p>
<p>As an example, if we have a variable containing some XML string like this:</p>
<pre class="language-javascript"><code class="language-javascript">xmlstring <span class="token operator">=</span> <span class="token string">"&lt;root>&lt;name>DJ&lt;/name>&lt;/root>"</span></code></pre>
<p>then we could either set it on an XML Model with setXML, like this:</p>
<pre><code>m = new sap.ui.model.xml.XMLModel()
=&gt; sap.ui.d…e.C.e…d.constructor {mEventRegistry: Object, mMessages: Object, id: &quot;id-1438428838337-6&quot;, oData: Object, bDestroyed: false…}

m.setXML(xmlstring)
=&gt; undefined

m.getProperty(&quot;/name&quot;)
=&gt; &quot;DJ&quot;
</code></pre>
<p>or with setData, creating an XML encoded data object, like this:</p>
<pre><code>m = new sap.ui.model.xml.XMLModel()
=&gt; sap.ui.d…e.C.e…d.constructor {mEventRegistry: Object, mMessages: Object, id: &quot;id-1438428927599-7&quot;, oData: Object, bDestroyed: false…}

m.setData(new DOMParser().parseFromString(xmlstring, &quot;text/xml&quot;))
=&gt; undefined

m.getProperty(&quot;/name&quot;)
=&gt; &quot;DJ&quot;
</code></pre>
<p><strong>A couple of tests</strong></p>
<p>Then we’re off on the tests. There are <a href="https://github.com/SAP/openui5/blob/48324c5fd9ed365620bc49b32c4046aa76269bc7/src/sap.ui.core/test/sap/ui/core/qunit/XMLModel.qunit.html#L61-L71">a couple of tests to check getProperty</a>, the first using a relative context binding:</p>
<pre class="language-javascript"><code class="language-javascript">	<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"test model getProperty with context"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><br>		<span class="token keyword">var</span> oContext <span class="token operator">=</span> oModel<span class="token punctuation">.</span><span class="token function">createBindingContext</span><span class="token punctuation">(</span><span class="token string">"/member/6"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br>		<span class="token keyword">var</span> value <span class="token operator">=</span> oModel<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"@lastName"</span><span class="token punctuation">,</span> oContext<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// relative path when using context</span><br>		<span class="token function">equal</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> <span class="token string">"Wallace"</span><span class="token punctuation">,</span> <span class="token string">"model value"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br>	<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br><br><br>	<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"test model getProperty"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><br>		<span class="token keyword">var</span> value <span class="token operator">=</span> oModel<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"/member/6/@lastName"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br>		<span class="token function">equal</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> <span class="token string">"Wallace"</span><span class="token punctuation">,</span> <span class="token string">"model value"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br>	<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>What we can see here already is that we can access XML attribute values (“lastName” in this case) with the XPath @ accessor. As an aside, the use of the optional second oContext parameter in the getProperty call is something one doesn’t see very much, but is extremely useful.</p>
<p><strong>Element content retrieval</strong></p>
<p>The rest of the file contain a load of other tests, all useful reading material, from the rare-to-see <a href="https://github.com/SAP/openui5/blob/48324c5fd9ed365620bc49b32c4046aa76269bc7/src/sap.ui.core/test/sap/ui/core/qunit/XMLModel.qunit.html#L83">use of the unbindProperty</a> function to <a href="https://github.com/SAP/openui5/blob/48324c5fd9ed365620bc49b32c4046aa76269bc7/src/sap.ui.core/test/sap/ui/core/qunit/XMLModel.qunit.html#L174-L195">aggregation bindings that are comfortable to use</a>.</p>
<p>One thing that we have to wait until <a href="https://github.com/SAP/openui5/blob/48324c5fd9ed365620bc49b32c4046aa76269bc7/src/sap.ui.core/test/sap/ui/core/qunit/XMLModel.qunit.html#L197-L211">test 15</a> to see is the use of element content:</p>
<pre class="language-javascript"><code class="language-javascript"><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"test XMLModel XML constructor"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><br><br>  <span class="token keyword">var</span> testModel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">sap<span class="token punctuation">.</span>ui<span class="token punctuation">.</span>model<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>XMLModel</span><span class="token punctuation">(</span><br><br>  <span class="token punctuation">)</span><span class="token punctuation">;</span><br>  testModel<span class="token punctuation">.</span><span class="token function">setXML</span><span class="token punctuation">(</span><span class="token string">"&lt;root>"</span> <span class="token operator">+</span><br>    <span class="token string">"&lt;foo>The quick brown fox jumps over the lazy dog.&lt;/foo>"</span> <span class="token operator">+</span><br>    <span class="token string">"&lt;bar>ABCDEFG&lt;/bar>"</span> <span class="token operator">+</span><br>    <span class="token string">"&lt;baz>52&lt;/baz>"</span> <span class="token operator">+</span><br>    <span class="token string">"&lt;/root>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br>  <span class="token function">equal</span><span class="token punctuation">(</span>testModel<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"/foo"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"The quick brown fox jumps over the lazy dog."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br>  <span class="token function">equal</span><span class="token punctuation">(</span>testModel<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"/bar"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"ABCDEFG"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br>  <span class="token function">equal</span><span class="token punctuation">(</span>testModel<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"/baz"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">52</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br><br><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>Until now we’ve only seen examples of XML where the data is stored in attributes. What about the more classic case of text nodes, like this example XML here?</p>
<p>Well, as we can see, a simple call to getProperty will do what we want. If we’re XPath inclined, we could even add the text() specification like this:</p>
<pre><code>testModel.getProperty(&quot;/bar/text()&quot;)
=&gt; &quot;ABCDEFG&quot;
</code></pre>
<p>and still get what we expect.</p>
<p><strong>Ending where we started</strong></p>
<p>And of course, to round things off, we can always get back to an <strong>XML encoded data object</strong> with getObject, like this:</p>
<pre><code>testModel.getObject(&quot;/bar&quot;)
=&gt; &lt;bar&gt;ABCDEFG&lt;/bar&gt;
</code></pre>
<p>(that result is indeed an object), in a similar way to how we retrieve the whole object from the model:</p>
<pre><code>testModel.getData()
=&gt; #document
   &lt;root&gt;
    &lt;foo&gt;The quick brown fox jumps over the lazy dog.&lt;/foo&gt;
    &lt;bar&gt;ABCDEFG&lt;/bar&gt;
    &lt;baz&gt;52&lt;/baz&gt;
  &lt;/root&gt;
</code></pre>
<p>The XML Model is a powerful ally, and the QUnit tests are a rich source of information about it. Spend a coffee break looking through the sources, you won’t be disappointed!</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>UI5 Version Info</title>
      <link href="https://qmacro.org/blog/posts/2015/07/31/ui5-version-info/"/>
      <updated>2015-07-31T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2015/07/31/ui5-version-info/</id>
      <content type="html">
        <![CDATA[
      <p><strong><a href="/blog/posts/2015/07/04/30-days-of-ui5/">30 Days of UI5</a> — Day 28 by <a href="//qmacro.org/about/">DJ Adams</a></strong></p>
<p><img src="/images/2018/02/Screen-Shot-2015-07-31-at-13.04.22-624x312.png" alt=""></p>
<p>Yesterday Peter Müßig from the UI5 team at SAP in Walldorf <a href="https://twitter.com/pmuessig/status/626649315235229696">announced</a> the multi-version capability for SAPUI5.</p>
<p>He also documented the details in a post on the SAP Community Network here: “<a href="http://scn.sap.com/community/developer-center/front-end/blog/2015/07/30/multi-version-availability-of-sapui5">Multi-Version availability of SAPUI5</a>“. Shortly after, the <a href="https://twitter.com/OpenUI5/status/626658243071315968">announcement</a> was also made that this would also be available for OpenUI5.</p>
<p>This is great news, and something that we’ve been waiting for now for a while. It makes perfect sense, and the ability to select a particular runtime version via a part of the bootstrap URL’s path info is very nice. It’s something I do locally on my workstation anyway, and I also have a ‘latest’ symbolic link that I ensure points to the latest copy of the runtime or SDK that I have locally.</p>
<p>Along with the announcement came a link to a simple <a href="https://sapui5.hana.ondemand.com/versionoverview.html">SAPUI5 Version Overview</a> page, built in UI5. It looks like this:</p>
<p><img src="/images/2018/02/Screen-Shot-2015-07-31-at-13.11.42-624x330.png" alt=""></p>
<p>And if you look under the covers, you’ll see a single-file app, with a lot of custom CSS, some JavaScript view stuff going on, and the retrieval of a couple of JSON resources containing the <a href="https://sapui5.hana.ondemand.com/versionoverview.json">version overview info</a> and the data from the <a href="https://sapui5.hana.ondemand.com/neo-app.json">neo-app.json</a> file that is present in the HCP platform and which describes routes to destinations, which include the SAPUI5 runtime services, now available at different paths for different versions.</p>
<p>You’ll also see some <a href="https://github.com/qmacro/ui5versioninfo/blob/master/versionoverview.html#L207-L263">complex manipulation and merging of those two datasets</a>, and <a href="https://github.com/qmacro/ui5versioninfo/blob/master/versionoverview.html#L298-L308">the mix of UI5 controls with raw HTML header elements</a>.</p>
<p><img src="/images/2018/02/Screen-Shot-2015-07-31-at-13.22.44-169x300.png" alt=""></p>
<p>The result is an app that looks OK on the desktop but doesn’t look that well on a smartphone, as you can see above.</p>
<p>So I spent some time on the train down from Manchester to London early this morning to see what I could do.</p>
<p>I wanted to address a couple of things:</p>
<ul>
<li>have the smartphone as the target device, rebuilding the UI with an App control</li>
<li>improve the binding, to a single data collection</li>
</ul>
<p>The UI part was straightforward. I used my MVC technique (see <a href="/blog/posts/2015/07/21/mvc-model-view-controller-minimum-viable-code/">MVC – Model View Controller, Minimum Viable Code</a> from earlier in this series) to define a new View, declaratively in XML. I used an App control with a couple of Pages, and a simple controller for the view which handled all the view lifecycle and user-generated events, as well as being the container for the formatter functions.</p>
<p>I also used some of my favourite JavaScript functions to bind together the disparate data into a nice cohesive single array of maps. I left the original data manipulation as it was, and then grabbed what it produced to make my array. I could then bind the List in UI to this single array, and then confer the right binding context to the second Page for a selected item from the array.</p>
<p>I’ve created a small Github repo <a href="https://github.com/qmacro/ui5versioninfo">ui5versioninfo</a> with the files. It contains a local snapshot of the two source JSON files (<a href="https://github.com/qmacro/ui5versioninfo/blob/master/neo-app.json">neo-app.json</a> and <a href="https://github.com/qmacro/ui5versioninfo/blob/master/versionoverview.json">versionoverview.json</a>), the original <a href="https://github.com/qmacro/ui5versioninfo/blob/master/versionoverview.html">versionoverview.html</a> that produces the UI we saw earlier, and a new file, called <a href="https://github.com/qmacro/ui5versioninfo/blob/master/new.html?ts=2">new.html</a>, which is my quick attempt addressing those things above.</p>
<p>Here’s what the result looks like:</p>
<p><img src="/images/2018/02/versioninfo.gif" alt="versioninfo"></p>
<p>I’ve tried to use some UI5 design and control best practices, while <a href="https://github.com/qmacro/ui5versioninfo/blob/master/new.html?ts=2#L15-L92">defining the UI in XML</a>. I’ve added some <a href="https://github.com/qmacro/ui5versioninfo/blob/master/new.html?ts=2#L191-L209">functional programming style data merging</a> to take place after the original manipulation, and a <a href="https://github.com/qmacro/ui5versioninfo/blob/master/new.html?ts=2#L211-L259">small controller</a> with the requisite functions for event handling and formatting.</p>
<p>I took the screencast of the “finished” attempt on the tube from London Euston to Chiswick this morning, so it really was a rush job. But I think that it’s worth thinking about how we can improve this useful resource. How would you improve it?</p>
<p></p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>A non-techie PM&#39;s view of UI5</title>
      <link href="https://qmacro.org/blog/posts/2015/07/30/a-non-techie-pm&#39;s-view-of-ui5/"/>
      <updated>2015-07-30T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2015/07/30/a-non-techie-pm&#39;s-view-of-ui5/</id>
      <content type="html">
        <![CDATA[
      <p><strong><a href="/blog/posts/2015/07/04/30-days-of-ui5/">30 Days of UI5</a> — Day 27 by <a href="https://twitter.com/jongregs">Jon Gregory</a></strong></p>
<p><img src="/images/2018/02/branches.png" alt=""></p>
<p>I’m mid-flight in my first UI5/Gateway project, working with a great team of developers who have all contributed to this <a href="/blog/posts/2015/07/04/30-days-of-ui5/">30 Days of UI5 series</a>. As a non-techie Project Manager embarking on mobile development for the first time, I thought I’d share some of my experiences and tips.</p>
<p><strong>This isn’t regular SAP configuration – this is mobile development.</strong></p>
<p>My experience of SAP to date has been in software modules – EPM, BW, CRM, for example. It’s easy to think of a UI5/Gateway project in the same way because they’re SAP products, but putting the name to one side, the difference between enterprise software and mobile development is huge.</p>
<p>This is obvious to those familiar with mobile development, but not so obvious to those new to this area. Prior to embarking on any UI5 project, get hold of case studies, project plans, artefacts, lessons learned and people that have delivered UI5 applications to get an understanding of how to set your project up for success. If you’re experience is largely in enterprise software projects, this is going to be very different :-)<strong>.</strong></p>
<p><strong>Nail your branch &amp; review strategy early on</strong></p>
<p>At the beginning of the project, work with your team to develop a branch &amp; review strategy. Agree a process for matching short-lived feature branches to tasks, for reviewing code prior to any merging, and also ensure that development branches are tidy and up to date – that is, delete any old branches, or branches that are no longer needed.</p>
<p>A friend told me a story of a time when he was working in a fast moving and experienced frontend/toolkit development team. He’d had a scattering of branches lying around his local repo, and a Ukranian colleague, in a thick accent, speaking German, reprimanded him gently but firmly: “What are all these branches doing clogging up your workspace and your brain? Get rid of them!”.</p>
<p><strong>Allow enough time for planning – agile doesn’t excuse poor process</strong></p>
<p>I found it’s easy to run in to development with a bunch of user stories and little else. Although UI5 lends itself to agile development, there still needs to be adequate time allocated to planning sprints, and also fundamental architecture design, not only for the UI itself, but for the data design and integration. Factor this in to your plans from the very beginning and don’t budge – if anything should give as a result of time, cost or scope constraints, it mustn’t be the preparation that goes in to making sprints a success.</p>
<p><strong>Embrace it</strong></p>
<p>Working with UI5, I’ve discovered methods of project delivery that are entirely different from the standard Waterfall/ASAP approach so often adopted in enterprise software projects. I’ve also found it hugely rewarding to see an intuitive, easy to use application come to life and, more importantly, so has our customer (case study is in progress – more on that soon).</p>
<p>So in summary, my advice is:</p>
<ul>
<li>Forget about normal SAP – walk in with an open mind</li>
<li>Set out development processes with your team from day one</li>
<li>Plan, plan, plan</li>
<li>Enjoy it!</li>
</ul>
<p>I’d be really interested to hear about other experiences of managing or coordinating UI5/Gateway projects, and listen to any advice you may have.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>UI5 - looking back and forward</title>
      <link href="https://qmacro.org/blog/posts/2015/07/29/ui5-looking-back-and-forward/"/>
      <updated>2015-07-29T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2015/07/29/ui5-looking-back-and-forward/</id>
      <content type="html">
        <![CDATA[
      <p><strong><a href="/blog/posts/2015/07/04/30-days-of-ui5/">30 Days of UI5</a> — Day 26 by <a href="//qmacro.org/about/">DJ Adams</a></strong></p>
<p><img src="/images/2018/02/Screen-Shot-2015-07-29-at-07.33.30-624x255.png" alt=""></p>
<p>It was in the spring of 2012 when I wrote this piece about the new kid on the block, SAPUI5:</p>
<p><a href="http://www.bluefinsolutions.com/insights/blog/sap_ui_5_the_future_direction_of_sap_ui_development/">SAPUI5 – The Future direction of SAP UI Development?</a></p>
<p>The fledgling toolkit had been released at version 1.2 earlier that year, and while it had clearly been in gestation for a while inside SAP, it was still new and raw enough to make folks wonder what it was all about. More than the newness or the rawness was how it was different, how it changed the rules. And what made it even more interesting was the fact that while SAP had changed a lot of rules since the 80s, this time, it was SAP embracing common practices and growing standards outside its own development ecosphere. And that was a good thing.</p>
<p>So SAPUI5 was not just a toolkit, it was more than that. It was arguably the poster child for how SAP was changing, changing to embrace, adopt and build upon open standards and protocols.</p>
<p>Of course, that had been happening for a while, most notably, <a href="https://vimeo.com/36828893">at least in my opinion</a>, by the introduction of the Internet Communication Manager (and corresponding user-space Internet Communication Framework) to the R/3 architecture, allowing SAP systems to speak HTTP <em>natively</em>. And there was OData, which SAP adopted as a REST-informed protocol and format for the next generation of business integration. It had been a long time coming; the journey from service-orientation to resource-orientation starting from the mid 2000’s — with posts like this: “<a href="http://scn.sap.com/people/dj.adams/blog/2004/06/24/forget-soap--build-real-web-services-with-the-icf">Forget SOAP – Build Real Web Services with the ICF</a>” :-) — was long and arduous.</p>
<p>So it was met by some with trepidation, wonder, cynicism even. But the rise and rise of UI5’s success has been undeniable. Success not only in becoming the engine powering the first SAP Fiori UX revolution, but also in the move towards a more open and outward facing development approaches.</p>
<p>The UI5 teams of designers and developers themselves, in Walldorf and around the world, have open software and standards in their DNA. UI5 itself has been open sourced. The development standards and processes are, out of necessity, different. And we can see that first hand. Just look at the home of UI5 on the web – at <a href="https://github.com/SAP/openui5">https://github.com/SAP/openui5</a>. Github!</p>
<p><img src="/images/2018/02/Screen-Shot-2015-07-29-at-07.18.18.png" alt=""></p>
<p>The development process is there for us to see, warts and all. The smallest changes are being done, in public. Look at the one authored 11 hours ago in this screenshot. It’s a <a href="https://github.com/SAP/openui5/commit/78d6ed4df73ef497241a36e30a67145596df2b35">simple improvement for variable declaration</a> in the code for the Message Popover control in the sap.m library. It doesn’t matter what it is, what matters is that it’s open. For us all to see, scrutinise, and most importantly, learn from.</p>
<p>UI5 powers SAP Fiori, the services of their cloud offerings (for example in the form of the Web IDE, written in UI5) and of course the S/4HANA business suite. It’s destined to become a part of <a href="http://www.bluefinsolutions.com/insights/dj-adams/august-2015/building-blocks-for-the-future-normal">the future normal</a>. It’s a toolkit with a strong pedigree, a toolkit that is not perfect (I can’t think of any software that is) but a toolkit with passionate folks behind it. It’s gaining some adoption outside of the SAP ecosphere too, and in some cases is almost becoming part of the furniture – not the focus of energy, but the enabler of solutions. It Just Works(tm) and gets out of the way. That for me is a sign of growing maturity.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>The experimental Client operation mode</title>
      <link href="https://qmacro.org/blog/posts/2015/07/28/the-experimental-client-operation-mode/"/>
      <updated>2015-07-28T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2015/07/28/the-experimental-client-operation-mode/</id>
      <content type="html">
        <![CDATA[
      <p><strong><a href="/blog/posts/2015/07/04/30-days-of-ui5/">30 Days of UI5</a> — Day 25 by <a href="//qmacro.org/about/">DJ Adams</a></strong></p>
<p><img src="/images/2018/02/Screen-Shot-2015-07-28-at-12.53.45-300x191.png" alt=""></p>
<p>A few months ago a preview release of 1.28 was made available. In <a href="http://openui5.tumblr.com/post/113243652527/new-openui5-preview-release-1-28">the blog post that accompanied it</a>, a number of the new features were introduced. Without much fanfare, certainly without any cool looking screenshots, the experimental “Client” operation mode was announced for the OData Model mechanism.</p>
<p><strong>OData Model – Server-side</strong></p>
<p>The OData Model is special, in that it is <a href="https://openui5.hana.ondemand.com/#docs/guide/e1b625940c104b558e52f47afe5ddb4f.html">classified</a> as a server-side model, unlike its client-side siblings such as the JSON Model or the XML Model (or the Resource Model, for that matter). This means that the data “home” is seen as the server, rather than the client (the browser). Consequently, any operations on that data, even read-only operations such as sorting and filtering, take place on the server. That means extra network calls. <a href="https://en.wikipedia.org/wiki/Fermat%27s_Last_Theorem#Fermat.27s_conjecture">There are truly marvellous advantages also, which the margin [of this post] is too narrow to contain. </a></p>
<p>There are circumstances, even when dealing with entity sets in OData services, where sorting and filtering could and should take place on the client, rather than on the server. To this end, 1.28 brought an initial experimental feature to the OData Model mechanism – the <a href="https://openui5.hana.ondemand.com/#docs/api/symbols/sap.ui.model.odata.OperationMode.html">OData Operation Mode</a>.</p>
<p><strong>Operation Mode</strong></p>
<p>The Operation Mode joins a small but important set of modes relating to the OData Model mechanism. By default, the Operation Mode is “Server”. But it can be set to “Client”, which causes all data to be loaded from the server and for subsequent sorting and filtering operations to be performed in the client, without further network calls. As the blog post mentions, this only really makes sense as long as there isn’t a ton of data.</p>
<p>Note that the Operation Mode is related to the OData Model mechanism instantiation in that it is the <em>default</em> for that model instance. You actually specify the mode for a binding, as shown in the code snippet in the blog post:</p>
<pre class="language-javascript"><code class="language-javascript">oTable<span class="token punctuation">.</span><span class="token function">bindRows</span><span class="token punctuation">(</span><span class="token punctuation">{</span><br>   <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">"/Product_Sales_for_1997"</span><span class="token punctuation">,</span><br>   <span class="token literal-property property">parameters</span><span class="token operator">:</span> <span class="token punctuation">{</span><br>      <span class="token literal-property property">operationMode</span><span class="token operator">:</span> sap<span class="token punctuation">.</span>ui<span class="token punctuation">.</span>model<span class="token punctuation">.</span>odata<span class="token punctuation">.</span>OperationMode<span class="token punctuation">.</span>Client<br>   <span class="token punctuation">}</span><br><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p><strong>Experiment!</strong></p>
<p>This experimental feature was crying out for … well, experimentation. So I threw together an MVC (<a href="/blog/posts/2015/07/21/mvc-model-view-controller-minimum-viable-code/">model view controller, minimum viable code</a>) based app to test it out. Here’s the result:</p>
<p><img src="/images/2018/02/clientoperationmode.gif" alt="client operation mode"></p>
<p>Here we have a test app with a List, where the items aggregation is bound to the Categories entity set in the public Northwind OData service at <a href="http://services.odata.org/V2/Northwind/Northwind.svc/">http://services.odata.org/V2/Northwind/Northwind.svc/</a>.</p>
<p>Note that the Operation Mode is only available on <a href="https://openui5.hana.ondemand.com/#docs/api/symbols/sap.ui.model.odata.v2.ODataModel.html#constructor">the v2 version of the OData Model mechanism</a>, so that’s what I’m using here.</p>
<p>Initially the binding to the List’s items aggregation is with the (default) value of “Server” for the Operation Mode. You can see the network calls that are made to ask the OData service to return the entities in a specific order (with the $orderby OData parameter) each time I hit the sort button, which is toggling between ascending and descending sorting of the category names.</p>
<p>But then, in the console, I grab the List, and re-bind the items aggregation, to the same path (“/Categories”) but in “Client” Operation Mode. The result is that a new call is made to fetch the entities to satisfy that (new) binding, but further sorts are done entirely on the client – there are no more network calls made.</p>
<p>I’d call that experiment a success, and I’m looking forward to developments in this area. Nice work, UI5 team!</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>An introduction to sap.ui.define</title>
      <link href="https://qmacro.org/blog/posts/2015/07/27/an-introduction-to-sap.ui.define/"/>
      <updated>2015-07-27T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2015/07/27/an-introduction-to-sap.ui.define/</id>
      <content type="html">
        <![CDATA[
      <p><strong><a href="/blog/posts/2015/07/04/30-days-of-ui5/">30 Days of UI5</a> — Day 24 by <a href="//qmacro.org/about/">DJ Adams</a></strong></p>
<p><img src="/images/2018/02/Screen-Shot-2015-07-27-at-11.04.02.png" alt=""></p>
<p>If you’ve followed <a href="/blog/posts/2015/07/04/30-days-of-ui5/">this series</a> you’ll have come across the <a href="/2015/07/07/openui5-walkthrough/">OpenUI5 Walkthrough</a>, a “a great multi-step walkthrough of many of the features and practices of UI5 development”.</p>
<p>In Step 5 of the walkthrough, on “Controllers”, we’re introduced to something that looks unfamiliar. Especially to those who have written large numbers of controllers thus far, for example. The way the XML View’s Controller is defined is … different. Step 5 doesn’t say much specifically about how this works, but Step 6, on “Modules”, does.</p>
<p>This is what the Controller source code looks like:</p>
<p><img src="/images/2018/02/Screen-Shot-2015-07-27-at-10.13.53-624x433.png" alt=""></p>
<p>So what’s happening here?</p>
<p>Well, what’s happening is that we’re seeing the beginning of a migration to an Asynchronous Module Definition (AMD) style mechanism. And the principle vehicle for this is a new function sap.ui.define, which was introduced to the world in 1.28 (1.27 internally).</p>
<p>There’s already some API documentation for this experimental new way to define modules that you can read in the API reference guide for sap.ui.define itself. There you’ll see how there’s a transition planned away from synchronous, and towards asynchronous loading. You’ll see for example that the optional fourth parameter “bExport” of sap.ui.define is there to support that transition.</p>
<p>While there’s plenty to read there, let’s just take a quick look at what it means for those like us at the UI5 coalface. We’ll take the code in the screenshot above as an example:</p>
<p>Instead of calling something like this …</p>
<pre class="language-javascript"><code class="language-javascript">sap<span class="token punctuation">.</span>ui<span class="token punctuation">.</span>core<span class="token punctuation">.</span>mvc<span class="token punctuation">.</span>Controller<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token string">"your.name.here"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  <br>  <span class="token comment">// your controller logic here </span><br><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>… we can use the new more generic sap.ui.define to first of all declare dependencies and then define the factory function that becomes the controller, in this case. Let’s take a look at the code and examine it line by line:</p>
<p><img src="/images/2018/02/Screen-Shot-2015-07-27-at-10.42.52-624x278.png" alt=""></p>
<p><strong>1-14</strong>: The call to sap.ui.define extends across all the lines here; and we can see that out of the four total possible parameters described in the API reference, only two are used: the optional list of dependencies (represented here by the array) and the factory function that has a single statement returning an extended controller.</p>
<p><strong>2-3</strong>: These are the dependencies. We’re defining a Controller, so we’ll want to extend UI5’s core controller (in the same way that we often do, such as in the example earlier). For that, we have a dependency on sap.ui.core.mvc.Controller. We’re also using the Message Toast’s “show” function, so we declare a dependency on sap.m.MessageToast. Note that the dependencies are expressed as resource paths (with the .js suffix omitted of course).</p>
<p><strong>4</strong>: The second parameter passed in the call to sap.ui.define is the factory, and we can see the function definition start here. Note that each dependency reference is given to this factory function, in the same order that they’re declared in the dependency list. By convention, the most significant part of the resource path name is used for the parameter name (for example “Controller” for sap.ui.more.mvc.Controller).</p>
<p><strong>5</strong>: The call to “use strict” is not specifically a feature of the new module definition syntax, but it is significant in that there is growing focus on JavaScript syntax correctness and linting. For more on this, see another post in this series: “<a href="/blog/posts/2015/07/19/ui5-and-coding-standards/">UI5 and Coding Standards</a>“.</p>
<p><strong>7-12</strong>: The rest of the source code looks fairly familiar. There’s one exception though, and it’s a result of the dependency mechanism described earlier. The function has “Controller” and “MessageToast” available to it, and so we can and should use these to refer to the sap.ui.core.mvc.Controller and sap.m.MessageToast resources throughout. This is nice, and makes for slightly neater code too.</p>
<p>It’s early days for the new define mechanism, and there’s clearly a journey ahead for those in the core UI5 team looking after fundamental module and dependency loading and management mechanisms. But even at this early stage, it’s worth paying attention to the direction UI5 is going in this regard, and start to experiment. I know I will be!</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Taming the Resource Model Files</title>
      <link href="https://qmacro.org/blog/posts/2015/07/26/taming-the-resource-model-files/"/>
      <updated>2015-07-26T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2015/07/26/taming-the-resource-model-files/</id>
      <content type="html">
        <![CDATA[
      <p><strong><a href="/blog/posts/2015/07/04/30-days-of-ui5/">30 Days of UI5</a> — Day 23 by <a href="http://twitter.com/lxinspc">Nathan Adams</a></strong></p>
<p>UI5’s support for multiple-languages, out of the box (see the post “<a href="/blog/posts/2015/07/16/multi-language-support-out-of-the-box-ui5s-pedigree/">Multi-language support out of the box – UI5’s pedigree</a>” in this series) is impressive and easy to use. Creating a message resource bundle in your Component.js file is straightforward, especially if picking up the user’s language preferences in the browser.</p>
<p>What can be less straightforward though is organising these files into something manageable, for plenty of projects, your i18n file might be on the small side, but it’s pretty easy to build up a large file. An application I’m currently working on, which perhaps has only 50% of its views defined, already has just 100 definitions in the i18n file. (A quick look at the Fiori My Travel Expenses App v2 shows there are around 1000 lines, and about 500 definitions in the resource file and whilst reasonably well documented with comments – you may well be hunting for usage of a text).</p>
<pre><code>#XBUT,20: Button that distributes (shares) the total amount evenly between all attendees

DISTRIBUTE_EVENLY=Distribute Amounts Evenly

#XBUT,20: add internal attendee button  
ADD_INTERNAL_ATTENDEE=Add Internal Attendee

#XBUT,20: add external attendee button  
ADD_EXTERNAL_ATTENDEE=Add External Attendee

#XFLD,20: FirstName – LastName in the right order, e.g. EN: Smith, John  
ATTENDEE_FULLNAME_ARTIFACT={1}, {0}

#XTIT: title of Add Internal Attendees select dialog  
INTERNAL_ATTENDEES_TIT=Add Internal Attendees

#XTIT: title of Add External Attendees dialog  
EXTERNAL_ATTENDEES_TIT=Add External Attendees
</code></pre>
<p><em>Example of a Fiori Resource Model file from ‘My Travel Expenses’</em></p>
<p>Before we dive into the structure of the key value pairs of the file though, it’s worth thinking about if one file for all your texts makes sense. In the majority of cases, you really wouldn’t want to add further complexity by adding more files. in my experience though, there are some cases where creating additional resource files may be useful.</p>
<ul>
<li>You may have texts which are more prone to change, perhaps email / telephone contact details in messages; putting these into a separate file might make sense to de-risk the process of updating them when they need to change</li>
<li>Common elements across a suite of applications</li>
<li>Master data texts, if you have a lot of these, then consider separate files for them</li>
<li>You may have texts, or elements of texts which don’t need translation, and you want to keep consistent across all languages (that email example above, you don’t want to update that in multiple language files every time)</li>
<li>Lastly just like code – if it’s too long, break it up. Large app with 100’s if not 1000’s of terms? Split it up, maybe by view, or group of views.</li>
</ul>
<p>As we move on into the structure of these files, it might not seem to be important (you can always search for a term in your chosen IDE after all), but like all good coding practices, structure can be immensely helpful in the following regards</p>
<ul>
<li>Identifying gaps in language files becomes easier – so you don’t discover in the first round of translation that you had some texts hardcoded into your XML views</li>
<li>Making changes to texts, when a change is requested becomes a lot easier</li>
<li>When sending out for translation, identifying which text is which becomes easier</li>
<li>Because the file can be more easily understood, then it becomes an easier artefact to distribute, potentially removing the need for conversion back and forth between spreadsheets</li>
</ul>
<p>How you choose to organise the language file is a matter of preference, however in my experience there are two key things I like to highlight and organise in the language file:</p>
<ul>
<li>Common terms</li>
<li>Terms organised by View or Fragment / Control / Property</li>
</ul>
<p>I’ll define all the common terms at the beginning of my language file. My preference for all my keys, is to use a dot notation to specify them (as it lines up nicely with identification of components). So here’s an example</p>
<pre><code>#Common Terms
common.thing=Foo
common.items=Items
common.add=Add
...
</code></pre>
<p>Thing is though, common terms feel like something I should have in my application; you want to make sure that when you call a thing, <code>Foo</code> it’s always a <code>Foo</code> and when it’s requested to change to <code>Bar</code> I can change the common term, and my job is done. In practice though, this never really works. Why? Well I might be able to define those common terms, but in the majority of cases I always need to fit them into a longer text, such as <code>Create a Foo</code> or <code>Delete Foos</code>.</p>
<p>OK so maybe I can define some common texts, and do some clever pre-processing with Grunt to expand placeholders in my text, or do the same when I load the resource file</p>
<pre><code>#Specifc Terms (pre-process)
master.things.addThing=Add {common.thing}
master.things.deleteThings=Delete {common.thing}s
</code></pre>
<pre><code>#Specific Terms (post-process)
master.things.addThing=Add Foo
master.things.deleteThings=Delete Foos
</code></pre>
<p>Nice? Well not really, it’s not a great practice to make longer texts out of shorter texts. Consider the need to correctly handle plurals or other modifications you might require. Let’s say we can have <code>Foos</code> but it’s not <code>Bars</code> but <code>Baren</code> then my nice easy change above isn’t going to work. Then other languages might not have the same syntactic structures, and I could finish up chasing my tail trying to get it right across all languages, or finishing up like those pre-recorded train announcements made up of single recorded chunks – they work, but just sound awful.</p>
<p>There is one valid place for common terms, and you might therefore still want to define them in your main i18n file (or even a separate one you don’t load). That’s as a glossary to help those maintaining the file. Adding <code>common.thing=Foo</code> to the head of the file, even if never used will help those coming along after to understand how things are referred to. It’s a good UX practice, and fundamental to building a consistent experience.</p>
<p>So most of my definitions though, will be very specific to a view or fragment, and therefore, I like to identify these, in this manner, with the application as an implied root. If I’m developing a Split App, which has for example the following views</p>
<ul>
<li>Tasks (Master)</li>
<li>Services (Master)</li>
<li>Rounds (Detail)</li>
<li>Details (Fragment used in Rounds)</li>
</ul>
<p>then I’ll structure my language file, very specifically to reference the view, the control(s) in the view, and where appropriate the property. Which might result in something like.</p>
<pre><code>#Master views
#Tasks
master.tasks.title=Maintenance Tasks
#Services
master.services.title=Active Services
master.services.toolbar.button.add=Add Service
master.services.toolbar.button.delete=Delete Services
#Detail Views
#Rounds
detail.rounds.title=Round Definition
detail.rounds.tabBar.tab.details=Details
detail.rounds.tabBar.tab.vehicles=Vehicles
#Rounds / Vehicles fragment
detail.rounds.fragment.vehicles.column.title.service=Service
detail.rounds.fragment.vehicles.column.title.capacity=Capacity
...
</code></pre>
<p>Admittedly this is quite a verbose approach, and it requires a little discipline to use, but the advantages are plain to see – I immediately get a sense of where a text might appear in the user interface, I also can get a sense of if anything is missing (for example I’d expect every view to have a <code>{view}.title</code> attribute.</p>
<p>By taking a structured approach to the language file, it also makes it easier to set up controls with bindings to the language file, as there is no need to try and think of a name. It goes without saying that you should be building your xml views with bindings for texts from the very start of development – no one wants to go back and to add them all in at a later date (if you do, that’s precious velocity you’re wasting).</p>
<p>Who thought such a straightforward flat structured concept could require so many considerations?</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Merging lists with UI5</title>
      <link href="https://qmacro.org/blog/posts/2015/07/25/merging-lists-with-ui5/"/>
      <updated>2015-07-25T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2015/07/25/merging-lists-with-ui5/</id>
      <content type="html">
        <![CDATA[
      <p><strong><a href="/blog/posts/2015/07/04/30-days-of-ui5/">30 Days of UI5</a> — Day 22 by <a href="https://uk.linkedin.com/pub/christopher-choy/53/21/b71">Chris Choy</a></strong></p>
<p>Whilst recently developing a custom UI5 app with an SAP PI backend, I came across some useful mechanisms. My aim was to merge 2 sets of data from 2 service calls into an Object List Item.  Having already bound one set of data my XML View my initial thought was to perhaps use a formatter and pass in 2 arrays of objects and manipulate the data within the Formatter.js file. As you probably guessed, this simply didn’t work, I should mention that both service calls return data in a JSON format rather than standard OData. My next approach was to manipulate the 2 arrays in the View’s controller and merge them both into a new sorted array assigning it to the Component’s Model. One of the benefits of doing this is that you can define your own attribute names and data which is then globally accessible within the app.</p>
<p>Using the code below you can specify a path to set your new data:</p>
<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">this</span><span class="token punctuation">.</span>oModel<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"/newPath"</span><span class="token punctuation">,</span> mergedArray<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>One other related issue was the searching of specific object attributes within an array of objects. The context of this search was to allow a user to select an item from an Object List Item and load additional data in a new View. Having already passed the relevant parameters within my Router it was jQuery to the rescue. The jQuery.grep function allows you to perform wildcard search on an array of attributes without the need to manually loop through each element. By passing an array as an argument a test against a defined index is performed returning all the entries that satisfy the function as a new array.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">var</span> aResult <span class="token operator">=</span> $<span class="token punctuation">.</span><span class="token function">grep</span><span class="token punctuation">(</span>dataArray<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <br>  <span class="token keyword">return</span> e<span class="token punctuation">.</span>attributeName<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"searchAttribute"</span><span class="token punctuation">,</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span> <br><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>One last interesting mechanism used was the storing of hidden Custom Data objects within an XML View. Using the following:</p>
<pre><code>xmlns:app=&quot;http://schemas.sap.com/sapui5/extension/sap.ui.core.CustomData/1&quot; 

&lt;ObjectListItem 
  title=”List” 
  app:key=&quot;{hiddenKey}&quot; /&gt;
</code></pre>
<p>you can access the Custom Data object using the data() method within the Controller of your View.</p>
<p>For additional information checkout the following links <a href="http://api.jquery.com/jquery.grep/">jQuery.grep</a> and <a href="http://help.sap.com/saphelp_uiaddon10/helpdata/en/91/f0c3ee6f4d1014b6dd926db0e91070/content.htm">CustomData objects</a>.</p>
<p></p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Spreading the UI5 Message</title>
      <link href="https://qmacro.org/blog/posts/2015/07/24/spreading-the-ui5-message/"/>
      <updated>2015-07-24T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2015/07/24/spreading-the-ui5-message/</id>
      <content type="html">
        <![CDATA[
      <p><strong><a href="/blog/posts/2015/07/04/30-days-of-ui5/">30 Days of UI5</a> — Day 21 by <a href="//qmacro.org/about/">DJ Adams</a></strong></p>
<p><img src="/images/2018/02/Screen-Shot-2015-07-24-at-14.17.50-300x273.png" alt="Michael Graf at OSCON"></p>
<p>Photo by Janina Blaesius</p>
<p>If you’re reading this post, or this <a href="/blog/posts/2015/07/04/30-days-of-ui5/">whole series</a>, it’s very likely that you already know something about UI5. Whether that’s coming from the SAP enterprise angle with the SAPUI5 flavour, or from the Open Source angle with the OpenUI5 flavour. But there are plenty of other souls out there that are still missing the UI5 salvation :-). And so I thought I’d briefly review the sorts of activities that have been happening over the last couple of years as far as evangelism, education, and advocacy are concerned.</p>
<p>This is very timely, as this year’s OSCON has just finished in Portland, and a couple of UI5 team members <a href="http://twitter.com/blaesiusj">Janina Blaesius</a> and <a href="http://twitter.com/michadelics">Michael Graf</a> were there with a session on OpenUI5 : “<a href="http://www.oscon.com/open-source-2015/public/schedule/detail/44897">No more web app headaches</a>“. Good work folks! OSCON is O’Reilly’s Open Source Convention, a venerable conference that I’ve been lucky enough to attend and speak at on and off since 2001. Last year, I co-presented <a href="/blog/posts/2014/07/22/openui5-tutorial-at-oscon-2014/">a tutorial session on OpenUI5</a> at OSCON with <a href="http://twitter.com/akudev">Andreas Kunz</a> and <a href="http://twitter.com/frdcbrg">Frederic Berg</a> – two more heroes from the same UI5 team as Janina and Michael.</p>
<p>Not only that, but the <a href="https://twitter.com/learnui5/status/616904925533085696">great news</a> is that at the EU version of OSCON, taking place in Amsterdam in October this year, there’s another session “<a href="http://www.oscon.com/open-source-eu-2015/public/schedule/detail/44358">Don’t Disconnect Me! The challenges of building offline-enabled web apps</a>” by another mighty UI5 team combo of <a href="http://twitter.com/learnui5">Christiane Kurz</a> and <a href="https://twitter.com/matthiaso">Matthias Oßwald</a>. Awesome!</p>
<p>And even if you omit the usual suspect conferences such as SAP TechEd, there’s plenty more, far too much to list in this single post. But here’s a quick selection:</p>
<p>FOSDEM : <a href="http://openui5.tumblr.com/post/109970790097/openui5-fosdem2015">OpenUI5 at FOSDEM 2015</a></p>
<p>Mastering SAP : <a href="/blog/posts/2015/02/16/speaking-at-mastering-sap-technologies/">Speaking at Mastering SAP Technologies</a></p>
<p>SAP Arch &amp; Dev : <a href="/blog/posts/2014/10/19/speaking-at-the-sap-architect-developer-summit/">Speaking at the SAP Architect &amp; Developer Summit</a></p>
<p>Fluent : <a href="http://openui5.tumblr.com/post/118284419852/openui5-at-fluent-conference-2015">OpenUI5 at Fluent Conference 2015</a></p>
<p>JSNext : <a href="http://openui5.tumblr.com/post/103713246852/openui5-jsnext-bulgaria">OpenUI5 at JSNext Bulgaria</a></p>
<p>DevoxxUK : <a href="http://openui5.tumblr.com/post/92525303842/devoxxuk-one-does-like-to-code">DevoxxUK – One does like to code!</a></p>
<p>SAP Inside Track : <a href="http://wiki.scn.sap.com/wiki/display/events/SAP+Inside+Track+Manchester+2013">SAP Inside Track Manchester</a>, <a href="http://scn.sap.com/community/events/inside-track/blog/2014/05/02/sap-inside-track-sheffield--uk">SAP Inside Track Sheffield – UK</a></p>
<p>SAP CodeJam : <a href="http://scn.sap.com/community/events/codejam/blog/2014/08/15/sap-codejam-liverpool--openui5">SAP CodeJam Liverpool – OpenUI5</a></p>
<p>Bacon : <a href="http://openui5.tumblr.com/post/86396421637/openui5-bacon-conference">OpenUI5 at BACON Conference</a></p>
<p>In September there’s another <a href="http://wiki.scn.sap.com/wiki/display/events/SAP+Inside+Track+Sheffield+2015">SAP Inside Track in Sheffield</a>, where there will be talks on UI5 of course (well, I’m going! ;-) and a whole second day dedicated to <a href="https://www.eventbrite.co.uk/e/sap-ui5-mentorhack-sheffield-tickets-17495880650">learning and hacking with UI5</a>.</p>
<p>I’m sure I’ve missed out some UI5 activities, so please let me know of others that have happened. And perhaps more importantly, let me know of any that are coming up, especially any that you’re planning, and I can add them here. Share &amp; enjoy!</p>
<p></p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Fragments and Minimum Viable Code</title>
      <link href="https://qmacro.org/blog/posts/2015/07/23/fragments-and-minimum-viable-code/"/>
      <updated>2015-07-23T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2015/07/23/fragments-and-minimum-viable-code/</id>
      <content type="html">
        <![CDATA[
      <p><strong><a href="/blog/posts/2015/07/04/30-days-of-ui5/">30 Days of UI5</a> — Day 20 by <a href="//qmacro.org/about/">DJ Adams</a></strong></p>
<p>In an earlier post in this series, <a href="/blog/posts/2015/07/21/mvc-model-view-controller-minimum-viable-code/">MVC – Model View Controller, Minimum Viable Code</a>, I showed how you could write a single-file UI5 app but still embrace and use the concepts of Model View Controller, having separate controller definitions and declarative XML Views. I also mentioned you could use XML Fragments in this way too, and <a href="https://twitter.com/Qualiture/status/623467858652200960">Robin van het Hof asked</a> if I could explain how. So here we go, thanks Robin!</p>
<p>If we take the code from the previous post and run it, we end up with a UI that looks like this:</p>
<p><img src="/images/2018/02/Screen-Shot-2015-07-21-at-17.33.38-624x420.png" alt=""></p>
<p>Let’s add some behaviour to the Button so that it instantiates and opens a Dialog control. We’ll define this Dialog control in an XML Fragment.</p>
<p>In the same way that we defined the XML View, we’ll define the XML Fragment inside a script element, this time with a “ui5/xmlfragment” type, like this:</p>
<p><img src="/images/2018/02/Screen-Shot-2015-07-21-at-17.43.19-624x277.png" alt=""></p>
<p>It’s a standard XML Fragment definition, and even though it only contains a single root control –the Dialog — I’m using the Fragment Definition wrapper explicitly anyway (as I think it’s good practice).</p>
<p>When we press the Button, we want this Dialog to appear, like this:</p>
<p><img src="/images/2018/02/Screen-Shot-2015-07-21-at-17.39.49-624x422.png" alt=""></p>
<p>So let’s rewrite the handler “onPress” which is attached to the Button’s press event, so it now looks like this:</p>
<p><img src="/images/2018/02/Screen-Shot-2015-07-21-at-17.42.59-624x488.png" alt=""></p>
<p>This is a common pattern for fragments, so let’s examine the code line by line:</p>
<p><strong>48</strong>: We’re going to be storing a reference to the Dialog fragment’s instance in a controller variable “_oDialogFragment” so we declare it explicitly, mostly to give those reading our code a clue as to our intentions.</p>
<p><strong>51-56</strong>: Ensuring we only instantiate the Dialog once, we use the sap.ui.xmlfragment call, with the fragmentContent property, passing the content of the fragment script with jQuery’s help (remember, the name of the fragment script is “dialog”). Once instantiated we <a href="http://stackoverflow.com/a/24640317/384366">add it as a dependent</a> to the current XML View.</p>
<p><strong>57</strong>: At this stage we know we have a Dialog ready, so we just open it up.</p>
<p><strong>60-62</strong>: The onClose function handles the press event of the “Close” Button in the Dialog’s buttons aggregation.</p>
<p>And that’s pretty much it. Use script elements to embed XML Views and Fragments, and use sap.ui.xmlview and sap.ui.xmlfragment to instantiate them, with jQuery to grab the actual content.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>A Short UI5 Debugging Journey</title>
      <link href="https://qmacro.org/blog/posts/2015/07/22/a-short-ui5-debugging-journey/"/>
      <updated>2015-07-22T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2015/07/22/a-short-ui5-debugging-journey/</id>
      <content type="html">
        <![CDATA[
      <p><strong><a href="/blog/posts/2015/07/04/30-days-of-ui5/">30 Days of UI5</a> — Day 19 by <a href="//qmacro.org/about/">DJ Adams</a></strong></p>
<p>In an earlier post in this <a href="/blog/posts/2015/07/04/30-days-of-ui5/">series</a>, entitled “<a href="/2015/07/18/the-ui5-support-tool-help-yourself/">The UI5 Support Tool – Help Yourself!</a>“, we looked at the Support Tool, examining the information available in the Control Tree. In particular we looked at the Properties and Binding Infos tabs. While exploring the new UI5 1.30 features with the Explored app, I re-noticed a small addition to the Explored UI – a Button that allowed me to switch to full screen mode to view control samples.</p>
<p><img src="/images/2018/02/fullscreentoggle-624x349.gif" alt="Fullscreen toggle example"></p>
<p>I thought it would be fun to use the Support Tool and other debugging techniques to see what was exactly happening in the Explored app when we toggled that control.</p>
<p><strong>Identifying the Button</strong></p>
<p>First, we need to identify the Button control – by its ID. We can use a context menu feature of Chrome which will open up the Developer Tools: Right-click on the Button and select Inspect Element. This will show us the ID in the highlighted sections in the screenshot:</p>
<p><img src="/images/2018/02/Screen-Shot-2015-07-20-at-09.13.22-624x329.png" alt=""></p>
<p>Here, the full ID highlighted is “__xmlview2–toggleFullScreenBtn-img”, as we right clicked on the image part of the Button. Go up a couple of levels in the HTML element hierarchy and you’ll see the button tag with an ID without the “-img” suffix. That’s what we want.</p>
<p><strong>Stopping at the Press Event</strong></p>
<p>We could at this stage <a href="http://mtg.wikia.com/wiki/Instant">play an instant</a> and use sap.ui.getCore().byId to get a handle on the control with this ID. But instead let’s look at the Support Tool and how it can expose event breakpoints.</p>
<p>Opening the Support Tool, and the Control Tree section within, we can search for the ID “__xmlview2–toggleFullScreenBtn”. When we find it, we can switch to the Breakpoints tab and set a breakpoint for the firePress function (as that is what will be happening when we press the Button – a “press” event will be fired):</p>
<p><img src="/images/2018/02/Screen-Shot-2015-07-20-at-09.18.35-624x220.png" alt=""></p>
<p>Now when we press the Button, we land inside Breakpoint.js:</p>
<p><img src="/images/2018/02/Screen-Shot-2015-07-20-at-09.22.29-624x329.png" alt=""></p>
<p><strong>Finding the Event Handler</strong></p>
<p>Now that we’re here, there’s plenty to explore, but let’s cut to the chase and look at the Button instance. In particular, we’ll look at an internal property “mEventRegistry” which is a map that holds the functions to be called when specific events are fired. Remember that this is an internal property, which we can’t use, or rely upon, when <em>building</em> apps (for more details on this, see the post “<a href="/blog/posts/2015/07/04/javascript-dos-and-donts-for-ui5/">JavaScript Do’s and Don’ts in UI5</a>” in this series). But we’re not building, we’re debugging, so all bets are off.</p>
<p>The ‘this’ here is the Button control instance, and so we can see that the “this.mEventRegistry” map has an entry for “press”:</p>
<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">this</span><span class="token punctuation">.</span>mEventRegistry<br><span class="token operator">-</span><span class="token operator">></span> Object <span class="token punctuation">{</span><span class="token literal-property property">press</span><span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre>
<p>Looking at this single entry in the array for the “press” event, we can see that the function handler is in a controller (surprise surprise):</p>
<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">this</span><span class="token punctuation">.</span>mEventRegistry<span class="token punctuation">[</span><span class="token string">"press"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fFunction<br><span class="token operator">-</span><span class="token operator">></span> sap<span class="token punctuation">.</span>ui<span class="token punctuation">.</span>controller<span class="token punctuation">.</span><span class="token function">onToggleFullScreen</span><span class="token punctuation">(</span>oEvt<span class="token punctuation">)</span></code></pre>
<p>Unless you’re using an older version of Chrome, you should be able to click on the function name to bring you to the “onToggleFullScreen” function definition:</p>
<p><img src="/images/2018/02/Screen-Shot-2015-07-20-at-09.29.55-624x222.png" alt=""></p>
<p>Nice!</p>
<p><strong>Examining What Happens</strong></p>
<p>We can now put a breakpoint on line 163 (which I had done already before taking the screenshot above) and hit continue, to be able to then step into what this function calls (the updateMode function) when the stack gets here. This is what the updateMode function looks like:</p>
<p><img src="/images/2018/02/Screen-Shot-2015-07-20-at-09.34.58-624x237.png" alt=""></p>
<p>It sets the Split App’s <a href="https://openui5.hana.ondemand.com/#docs/api/symbols/sap.m.SplitAppMode.html">mode</a> to the appropriate value (the default of “ShowHideMode”, or “HideMode” for the full screen effect). It also modifies the containing <a href="https://openui5.hana.ondemand.com/#docs/api/symbols/sap.m.Shell.html#getAppWidthLimited">Shell</a> control’s appWidthLimited property so that a real full screen effect can be properly achieved.</p>
<p>So that’s it! If you can become comfortable helping yourself with these tools, you’ll be a better UI5 developer.</p>
<p></p>
<p></p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>MVC - Model View Controller, Minimum Viable Code</title>
      <link href="https://qmacro.org/blog/posts/2015/07/21/mvc-model-view-controller-minimum-viable-code/"/>
      <updated>2015-07-21T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2015/07/21/mvc-model-view-controller-minimum-viable-code/</id>
      <content type="html">
        <![CDATA[
      <p><strong><a href="/blog/posts/2015/07/04/30-days-of-ui5/">30 Days of UI5</a> — Day 18 by <a href="//qmacro.org/about/">DJ Adams</a></strong></p>
<p><img src="/images/2018/02/Screen-Shot-2015-07-19-at-18.58.14-1.png" alt="View and controller screenshot"></p>
<p>The solid Model View Controller implementation in UI5 forces the separation of concerns. The logical place for models, views and controllers are files, in (usually) separate folders. Views, with specific file extensions, in a folder that’s usually called “views”, and controllers, with specific file extensions, in a folder called “controllers”. And models elsewhere too.</p>
<p>This means that if you’re wanting to try something out quickly, and it’s a little bit more than a Hello World construction, then you’re off creating files and folders from the start before you can properly start thinking about the actual app idea you want to explore.</p>
<p>That is, unless you use a “Minimum Viable Code” technique. I like to think that it’s due to a combination of the three great virtues of a programmer (<a href="http://c2.com/cgi/wiki?LazinessImpatienceHubris">laziness, impatience and hubris</a>) that led to this approach :-).</p>
<p>Creating a folder structure and getting the right files in place does not go well with the “quickly” part of “try something out quickly”. Trying something out, for me, means ideally using just a single file. It’s fast, you can see everything in one place, and you’re not creating unnecessary clutter. But when I want to try something out also, I also want to ensure that the code I write is clean and separated. Which for me implies declarative views and fragments in XML.</p>
<p>Luckily, for nearly all of the cases where I’ve wanted to try something out, I’ve found that this single file technique works well. I can have one or more views, and fragments, all declared in XML, and one or more controllers too. And within that space I can declare models too.</p>
<p>Here’s how it works:</p>
<ul>
<li>I start out with a skeletal index.html with a UI5 bootstrap already there, and the HTML body element defined properly</li>
<li>I add a simple triple (or <a href="http://www.beeradvocate.com/beer/style/58/">tripel</a>)  of : view, corresponding controller, and what I call ‘startup code’</li>
<li>I can then add controls to the view, functions to the controller, and off I go</li>
<li>I use jQuery to identify the XML views and fragments, and construct the view instances in UI5 that way</li>
</ul>
<p>And here’s an example:</p>
<p><img src="/images/2018/02/Screen-Shot-2015-07-19-at-18.09.27-725x1024.png" alt="MVC code"></p>
<p>Here’s a brief rundown of what you see:</p>
<p><strong>9-16</strong>: This is the UI5 bootstrap, nothing unusual here</p>
<p><strong>18-28</strong>: Here we have a script element that is of a made-up type “ui5/xmlview”. This could be pretty much anything, as long as the browser doesn’t try to process it. It’s a technique used in templating systems. This contains some XML, which as you can see is a small but perfectly formed view definition (which incidentally conforms to the <a href="/blog/posts/2015/07/19/ui5-and-coding-standards/">UI5 Coding Standards explained in a previous post</a> in this series.</p>
<p><strong>31-36</strong>: This is the local controller definition, which is referenced in the View’s controllerName attribute (in line 20). It has the onPress handler for the Button’s press event.</p>
<p><strong>38-40</strong>: This is the startup code. It instantiates the XML View, getting the value for the viewContent property via jQuery from the script element we saw earlier, and then simply places that View in the body, via the “content” ID, as usual.</p>
<p>And that’s pretty much it. You can add as many views as you want using the script element technique; I also use this technique for fragments too, and specify a made-up type of “ui5/xmlfragment” instead.</p>
<p>It’s a great way to write simple one-file applications, especially for prototyping. I have written snippets to help me with this. I have been somewhat fickle when it comes to editors, so have left a trail of semi-finished snippet libraries for Sublime (<a href="https://github.com/qmacro/SublimeUI5">SublimeUI5</a>) and Atom (<a href="https://github.com/qmacro/ui5-snippets">ui5-snippets</a>), but have finally come full circle to my first love, vim. <a href="https://www.youtube.com/watch?v=nN1PYHa-YXQ">Here’s a quick screencast</a> of using my snippets in vim (powered by <a href="https://github.com/SirVer/ultisnips">UltiSnips</a>) to create a Minimum Viable Code MVC style app:</p>
<iframe allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/nN1PYHa-YXQ" width="560"></iframe>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>UI5 and Fiori - The Story of Open and Free</title>
      <link href="https://qmacro.org/blog/posts/2015/07/20/ui5-and-fiori-the-story-of-open-and-free/"/>
      <updated>2015-07-20T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2015/07/20/ui5-and-fiori-the-story-of-open-and-free/</id>
      <content type="html">
        <![CDATA[
      <p><strong><a href="/blog/posts/2015/07/04/30-days-of-ui5/">30 Days of UI5</a> — Day 17 by <a href="https://twitter.com/applebyj">John Appleby</a></strong></p>
<p>DJ kindly asked me to write a blog for his 30 days of UI5 series to celebrate version 1.30 of UI5. My immediate reaction was what, me, what do I have to add to this subject?</p>
<p>I then realized that I had a little part in the UI5 story thus far and folks might enjoy the story, and the update, of how Fiori became Freeori.</p>
<p>It all started with a late night phone call with Den Howlett, where we discussed, as we sometimes do, the state of the SAP Union.</p>
<p>We became engrossed in a conversation about the new Workday version that had just been released, with its responsive and modern user experience, and wondered how SAP could compete in UX quality. To that end, SAP had recently released Fiori but adoption was poor with just a handful of users navigating the complex licensing policy around it.</p>
<p>At that time, it was necessary to pay for core SAP licenses, Gateway integration licenses and separate Fiori licenses. There were some pros to this – the paid nature of Fiori meant that Fiori was getting development dollars, but it wasn’t getting adoption. Without adoption of a modern user experience, SAP would be in trouble in the mid-term.</p>
<p>From that conversation came a blog <a href="http://diginomica.com/2014/02/05/sap-fiori-freeori">Should SAP Fiori be Freeori?</a> which framed the conversation in a way we believed SAP would understand. That was key to our argument – we believed that Fiori was the solution to renovating the SAP user experience and that charging for it would risk SAP’s long-term future.</p>
<p><strong>What happened next?</strong></p>
<p>Geoff Scott, CEO of ASUG chimed in with<a href="http://www.asugnews.com/article/time-for-a-ux-revolution-not-evolution">Time for a UX Revolution, Not Evolution</a> and then Chris Kanaracus, that time at IDG, now working at ASUG, continued the discussion with <a href="http://www.pcworld.com/article/2143980/sap-users-rattle-sabers-over-charges-for-userfriendly-fiori-apps.html">SAP users rattle sabers over charges for user-friendly Fiori apps</a> and did a fantastic job of rallying the user groups and getting great quotes from the ecosystem:</p>
<p><em>&quot;DSAG’s position is clear. We say [Fiori] must be part of standard maintenance&quot;</em> – Andreas Oczko, DSAG Vice Chairman</p>
<p><em>&quot;In a cloud world, you’d expect Fiori to be part of the upgrade cycle&quot;</em> – Ray Wang, Constellation Research</p>
<p>Dennis then put the hammer in with <a href="http://diginomica.com/2014/04/15/sap-fiori-freeori-discussion-heats">The SAP Fiori or Freeori discussion heats up</a>, comparing a potential $5-700m one time sale with Fiori to the risk of losing lucrative support revenues.</p>
<p>I received a few back-channel messages about this, suggesting that things would move, and sure enough, SAP opened up the Fiori product to all customers at no charge. What incredible news.</p>
<p><strong>What does this look like one year on?</strong></p>
<p>The concern my colleagues at SAP had was that charging for Fiori ensured that there was attention to the development. However the reverse hasn’t caused an issue. On the contrary, Fiori has more investment and Sam Yen’s User eXperience group have gone from strength to strength.</p>
<p>SAP S/4HANA has been released and Fiori is at the center of the user experience. The core UI5 and Fiori technologies have significant investments and with <a href="https://openui5.hana.ondemand.com/">UI5 1.30</a> we see new functionality – just check out the <a href="https://openui5beta.hana.ondemand.com/#releasenotes.html">release notes</a> to see the extent! They include a focus on performance improvements and new page styles.</p>
<p>Personally, I’m incredibly proud of the individuals in the SAP ecosystem who have worked on this. The impact of renovating the SAP User eXperience shouldn’t be underestimated.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>UI5 and Coding Standards</title>
      <link href="https://qmacro.org/blog/posts/2015/07/19/ui5-and-coding-standards/"/>
      <updated>2015-07-19T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2015/07/19/ui5-and-coding-standards/</id>
      <content type="html">
        <![CDATA[
      <p><strong><a href="/blog/posts/2015/07/04/30-days-of-ui5/">30 Days of UI5</a> — Day 16 by <a href="//qmacro.org/about/">DJ Adams</a></strong></p>
<p><img src="/images/2018/02/Screen-Shot-2015-07-19-at-07.09.23.png" alt="Y-U-NO meme"></p>
<p>At one end of the spectrum, coding standards can be regarded as <a href="https://jaxenter.com/power-ten-nasas-coding-commandments-114124.html">essential</a>. At the other, they’re the subject of many a passionate debate, second perhaps only to the Vim vs Emacs <a href="https://en.wikipedia.org/wiki/Editor_war">editor wars</a>.</p>
<p>I’ll provide some caution by starting with one of my favourite quotes from Andrew Tanenbaum:</p>
<p><em>“The nice thing about standards is that there are so many of them to choose from”.</em></p>
<p><strong>Use of standards</strong></p>
<p>As software projects scale up, coding standards make more and more sense. On a <a href="https://www.endomondo.com/users/1074038/workouts/555294655">recent run</a>, I listened to the JavaScript Jabber podcast “<a href="http://devchat.tv/js-jabber/162-jsj-eslint-with-jamund-ferguson">JSJ ESLint with Jamund Ferguson</a>“. There was a great discussion about ESLint, and it was interesting to see the different perspectives on imposed coding standards, from “it restricts my freedom of expression” to “it makes teams more efficient as they work more as one”. I think those two perspectives slot roughly onto the scale spectrum. If it’s just you developing, then by all means use whatever style you feel like using. But if you’re part of a larger team whose members have to work with each other’s code, imposed coding standards do make a lot of sense.</p>
<p>The OpenUI5 project has some coding <a href="https://github.com/SAP/openui5/blob/master/CONTRIBUTING.md#contribute-code">contribution guidelines</a> as well as <a href="https://github.com/SAP/openui5/blob/master/.eslintrc">ESLint rules</a>, well worth checking out, and pretty important if you want to contribute to UI5. It’s also worth considering them for your own UI5 applications. One advantage of adopting the OpenUI5 project’s guidelines and rules is that when you cross the path from your codebase into the underlying UI5 toolkit, the transition won’t be as jarring.</p>
<p><strong>Example XML View</strong></p>
<p>The ESLint rules, and ESLint in general would cause this post to be a lot longer than I want, so instead I’ll look at some non-JavaScript conventions that I like to try and impose, at least upon myself. In particular I’ll look at the style for XML View definitions. Here’s part a sample XML View, which I’ll use to illustrate the style for which I strive. Note that the “»” character represents a tab (I have the list mode turned on in my editor to <a href="http://vimcasts.org/episodes/show-invisibles/">show invisibles</a>).</p>
<p><img src="/images/2018/02/Screen-Shot-2015-07-19-at-09.40.55.png" alt="sample code"></p>
<p>In the following, each prefix represents the line number(s) to which I’m referring.</p>
<p><strong>1</strong>: The correct namespace for a <a href="https://openui5.hana.ondemand.com/#docs/api/symbols/sap.ui.core.mvc.View.html">View</a> is “sap.ui.core.mvc”, not “sap.ui.core” as you might have seen in older documentation and code examples.</p>
<p><strong>2</strong>: The controllerName attribute should be the first attribute for the View element. If there is no controller then obviously this attribute won’t be present. It just makes it slightly quicker to look for the controller reference if it’s going to be consistently in the same place.</p>
<p><strong>3-5</strong>: All the namespace declarations should be in a contiguous chunk. There are other attributes that might appear for a View element, that’s fine, as long as they’re not interspersed amongst the namespace declarations. Ensure any other attributes appear before the namespace declarations. Also, don’t specify a namespace declaration unless you’re going to use it. (In this example, I’m using all of them; you just can’t see the use of the “core” here as it’s on line 60, not in the screenshot).</p>
<p><strong>5</strong>: The default XML namespace for any given XML View should be the one that is dominant in the file, or “sap.m”. If you’re building responsive UI5 apps, you’re going to need a good reason for “sap.m” <em>not</em> to be the dominant library. Also, it should be the last attribute in the View element, with a closing angle bracket directly following. (Unlike the use of other angle-bracket powered markup (such as HTML) in UI5, this is a rule that can be applied consistently. With the UI5 bootstrap in HTML, I like to have the closing angle bracket on a separate line, in the ‘prefix-comma’ style from ABAP and other code, so I can add further data attributes without causing diff confusion.)</p>
<p><strong>1-5, 6-7, 11-13 etc</strong>: All attributes should appear on lines of their own, indented appropriately.</p>
<p><strong>13</strong>: When closing an element directly (like this: <element /> rather than this: <element>…</element>), a space should be used before the closing “/&gt;”.</p>
<p><strong>8, 17, 22, 29, etc</strong>: All aggregation elements should be used explicitly. Don’t omit implicit default aggregations for controls; instead, specify them. In this example, I’m using a sap.m.Page control, with the “subHeader” and “content” aggregations. While the “subHeader” aggregation must be specified explicitly anyway, the “content” aggregation is default and doesn’t need to be, but I do anyway. The same goes for the sap.m.List control’s “items” aggregation.</p>
<p><strong>18</strong>: Contrary to the rule about attributes being on their own separate lines, there’s an exception to this which is for the id attribute. If it exists, put it on the same line as the opening part of the control’s element.</p>
<p><strong>25</strong>: Unless there’s a good reason not to, create the names for your event handler functions using an “on” prefix (like here: “onSelect”). This way they’re consistent with the builtin view lifecycle event functions such as “onInit”.</p>
<p><strong>31-34</strong>: When writing complex embedded binding syntax, put each property of the map on a separate line, in the same way you’d write a map in JavaScript. Use spaces before and after the colons.</p>
<p><strong>1-34</strong>: Use double quotes throughout; the only place you’ll then use single quotes is within embedded binding syntax. Also … I know this is the subject of much debate, but the OpenUI5’s project standard specifies tabs for indentation. It came as a shock to me at first, but I have now embraced it :-)</p>
<p><strong>Conclusion</strong></p>
<p>I have no doubt caused some outrage to some of you, but hopefully just as much agreement with others. For me, this sample XML View is easy to read, a lot easier than some of the Fiori views that are generated from templates, for example. What are your standards?</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>The UI5 Support Tool - Help Yourself!</title>
      <link href="https://qmacro.org/blog/posts/2015/07/18/the-ui5-support-tool-help-yourself!/"/>
      <updated>2015-07-18T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2015/07/18/the-ui5-support-tool-help-yourself!/</id>
      <content type="html">
        <![CDATA[
      <p><strong><a href="/blog/posts/2015/07/04/30-days-of-ui5/">30 Days of UI5</a> — Day 15 by <a href="//qmacro.org/about/">DJ Adams</a></strong></p>
<p><img src="/images/2018/02/Screenshot-2015-07-18-at-12.12.33.png" alt="part of the Support Tool Menu"></p>
<p>Building anything but the most trivial native apps (that’s web native, of course) is not an easy ride. There are so many factors to get right. Debugging one of these apps can be just as tough.</p>
<p>The UI5 toolkit supports many features that make building and debugging easier. One of these is the support for the separation of concerns in the form of Model-View-Controller (MVC) mechanisms. Another is the ability to use a declarative approach to define your views (no moving parts), in XML, HTML or JSON; furthermore, you can use the subview and fragment concepts to divide and conquer complexity and embrace reuse.</p>
<p><strong>The Support Tool</strong></p>
<p>The particular feature I wanted to talk briefly about in this post though is the Support Tool, alternatively known as “UI5 <a href="https://openui5.hana.ondemand.com/#docs/guide/6ec18e80b0ce47f290bc2645b0cc86e6.html">Diagnostics</a>“, or even “the claw hand thing”. This last nickname comes from the fact that you invoke the support tool from a challenging key combination: Ctrl-Alt-Shift-S.</p>
<p>There’s also the Support Tool’s little brother, invoked with Ctrl-Alt-Shift-P, which is a model popup giving you a summary of the runtime context, and giving you the chance to turn on some debugging information.</p>
<p>You can see a shot of this here. (You can also turn on debugging via a URL query parameter <a href="https://openui5.hana.ondemand.com/#docs/guide/c9b0f8cca852443f9b8d3bf8ba5626ab.html">sap-ui-debug=true</a>.)</p>
<p><img src="/images/2018/02/Screenshot-2015-07-18-at-12.15.31.png" alt="the Support Tool's little brother"></p>
<p>Sometimes this is all you need, especially if you want to see the UI5 version in operation, or turn on debug sources.</p>
<p>But the Support Tool is a super, multi-faceted mechanism which has proved invaluable over the years. It sports a large number of features, too many to cover here, so we’ll just have a brief look at one of them (arguably the most important) – the Control Tree:</p>
<p><img src="/images/2018/02/Screenshot-2015-07-18-at-12.23.12.png" alt="the control tree"></p>
<p>On the left hand side there’s a super useful display of the app’s control hierarchy. This alone is worth the cost (<a href="http://openui5.org/">ahem</a>) of the Support Tool.</p>
<p><img src="/images/2018/02/Screenshot-2015-07-18-at-12.39.15.png" alt="The Matrix"></p>
<p>Imagine being able to peer into the internal structure of a building, or having <a href="https://en.wikipedia.org/wiki/X-Ray_Spex">X-Ray Specs</a> and being able to see your skeleton, or sitting in front of a monitor in The Matrix and seeing the world behind the curtain. This is what you get with the Control Tree.</p>
<p>UI5 apps can have complex UI structures. Fiori apps especially so. Controls within controls, <a href="http://www.azlyrics.com/lyrics/rush/naturalscience.html">wheels within wheels in a spiral array, a pattern so grand and complex</a>.  With the Control Tree you can see and grok this structure very quickly. Note you can view at a glance what the control actually is, what it contains &amp; what contains it, and what its ID is.</p>
<p>But that’s not all. On the right hand side, for a selected control (for example the Page control in the screenshot above), you can see all the properties of that control and from where in the control inheritance they come. You can modify the values for those properties and see the effect immediately, and even set breakpoints for each time the value for a particular property is read (G – get) or written (S – set).</p>
<p>Select the Binding Infos tab and see what bindings exist. You can see information on what model a binding is from, what type of binding it is, and of course the binding path. Here we can see some of the binding info for the List control in an app:</p>
<p><img src="/images/2018/02/Screenshot-2015-07-18-at-12.50.26.png" alt="binding info for List control"></p>
<p>For you eagle-eyed readers, the model name here — “entity” — is the name of the domain model in this app example. Often the domain model is the unnamed model, but here it has a name. Can anyone guess what this (publically available) app is?</p>
<p>There’s so much to discover with the Control Tree and the rest of the Support Tool, I recommend you hit Ctrl-Alt-Shift-S the next time you’re running a UI5 apps, and start exploring.</p>
<p><strong>Finishing off</strong></p>
<p>Let’s finish this post off with a quick piece of trivia and a tip. If you’ve had the Chrome Developer Tools open and then open the Support Tool, you’ll notice a ton of new messages in the console, and it’s a lot more verbose. This is because when the Support Tool starts up, it sends a message to the <a href="https://openui5.hana.ondemand.com/#docs/api/symbols/jQuery.sap.log.html">logger</a> to crank the logging output <a href="https://en.wikipedia.org/wiki/Up_to_eleven">up to 11</a>.</p>
<p>By default, the log level is set to 1 (“ERROR”). If you’re running the app with debugging on, that level is 4 (“DEBUG”). But opening the Support Tool causes this to be set to 6 (“ALL”). You can turn that down again with the jQuery.sap.log.setLevel function. Otherwise, LOG ALL THE THINGS!!1!</p>
<p></p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Speeding up your UI5 app with a Component preload file</title>
      <link href="https://qmacro.org/blog/posts/2015/07/17/speeding-up-your-ui5-app-with-a-component-preload-file/"/>
      <updated>2015-07-17T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2015/07/17/speeding-up-your-ui5-app-with-a-component-preload-file/</id>
      <content type="html">
        <![CDATA[
      <p><strong><a href="/blog/posts/2015/07/04/30-days-of-ui5/">30 Days of UI5</a> — Day 14 by <a href="http://jmurray.me/">John Murray</a></strong></p>
<p>In this post we’ll be looking at how you can speed up the load times of your UI5 applications by using a Component preload file. Those of you who are familiar with SAP Fiori applications will probably already know what a Component preload file is, however those of you who aren’t will almost definitely have all seen a reference to this file before. This file is referenced in an error message that appears in the console whenever you load a UI5 app, which is lacking a Component preload file.</p>
<p><img src="/images/2018/02/Screen-Shot-2015-07-14-at-20.54.47-624x31.png" alt="Chrome preload error"></p>
<p><strong>So just what is this preload file and why should I care?</strong></p>
<p>The preload file is essentially all of the files which make up your application, so that’s the Component itself, Controllers, Views, Fragments and so on, all compressed and inserted into one file, the preload file. If this file exists then UI5 will only load that file, and it won’t load of all of the other various files which it ordinarily would have done. The error we saw earlier is caused because UI5 looks for a preload file early in the execution flow, but of course did not find one, and so carried on loading all of the files individually.</p>
<p>Now that we’ve cleared up what the file actually is, and why that error appears, just why should exactly should we worry about it? After all we’ve ignored that error up until now and all our apps have worked just fine. Well, the reason we should care is that it dramatically decreases page load time. This is due to the app only having to make one call to get the preload file, rather than all of the individual calls for each file, but also because in the preload file the code is “minified”, which means the file size is also very small relative to the full size individual files. This is especially important when developing UI5 applications which are to be used over a mobile data connection, where size has a very large impact on initial load performance. As an anecdotal example, on the simple UI5 app which I have just created a preload file for my initial load time went from 8-9 seconds down to 3-4 seconds, which is tremendous improvement!</p>
<p><strong>Sounds great! So how can I make a preload file for my UI5 app?</strong></p>
<p>For this next section you will need to have installed on your machine <a href="https://nodejs.org/">NodeJS</a>, <a href="https://www.npmjs.com/">npm</a> and <a href="http://gruntjs.com/">Grunt</a>. If you don’t know how to install and use these things then do <a href="http://twitter.com/johnbmurray">reach out to me on Twitter</a>.</p>
<p>After you have all of the above installed, you’ll need to create a <code>package.json</code> file in your UI5 app’s root directory. Open the file up and paste in the contents below and don’t forget to edit them accordingly:</p>
<pre class="language-javascript"><code class="language-javascript"><span class="token punctuation">{</span><br>  <span class="token string-property property">"name"</span><span class="token operator">:</span> <span class="token string">"barcode-test"</span><span class="token punctuation">,</span><br>  <span class="token string-property property">"version"</span><span class="token operator">:</span> <span class="token string">"0.0.1"</span><span class="token punctuation">,</span><br>  <span class="token string-property property">"description"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span><br>  <span class="token string-property property">"main"</span><span class="token operator">:</span> <span class="token string">"index.html"</span><span class="token punctuation">,</span><br>  <span class="token string-property property">"author"</span><span class="token operator">:</span> <span class="token string">"John Murray"</span><span class="token punctuation">,</span><br>  <span class="token string-property property">"license"</span><span class="token operator">:</span> <span class="token string">"Apache License, Version 2.0"</span><span class="token punctuation">,</span><br>  <span class="token string-property property">"devDependencies"</span><span class="token operator">:</span> <span class="token punctuation">{</span><br>    <span class="token string-property property">"grunt"</span><span class="token operator">:</span> <span class="token string">"^0.4.5"</span><br>  <span class="token punctuation">}</span><br><span class="token punctuation">}</span></code></pre>
<p>After creating and saving this file, install the <a href="https://github.com/SAP/grunt-openui5">Grunt OpenUI5 tools</a> which are made by the UI5 team at SAP. To install these tools open a terminal session in your UI5 root directory and run this command ‘npm install grunt-openui5 –save-dev’. This will download and install the tools, and also add them to the “devDependencies” section of your ‘package.json’ file.</p>
<p>Next, again in the UI5 app root directory, create a file called ‘Gruntfile.js’. Into this file copy and paste the contents below, and we’ll go through what it all means in a moment.</p>
<pre class="language-javascript"><code class="language-javascript">module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">grunt</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br><br>  <span class="token comment">// Project configuration.</span><br>  grunt<span class="token punctuation">.</span><span class="token function">initConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span><br>    <span class="token literal-property property">pkg</span><span class="token operator">:</span> grunt<span class="token punctuation">.</span>file<span class="token punctuation">.</span><span class="token function">readJSON</span><span class="token punctuation">(</span><span class="token string">'package.json'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><br>    <span class="token literal-property property">openui5_preload</span><span class="token operator">:</span> <span class="token punctuation">{</span><br>      <span class="token literal-property property">component</span><span class="token operator">:</span> <span class="token punctuation">{</span><br>        <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">{</span><br>          <span class="token literal-property property">resources</span><span class="token operator">:</span> <span class="token punctuation">{</span><br>            <span class="token literal-property property">cwd</span><span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span><br>            <span class="token literal-property property">prefix</span><span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span><br>            <span class="token literal-property property">src</span><span class="token operator">:</span> <span class="token punctuation">[</span><br>              <span class="token string">'webapp/**/*.js'</span><span class="token punctuation">,</span><br>              <span class="token string">'webapp/**/*.fragment.html'</span><span class="token punctuation">,</span><br>              <span class="token string">'webapp/**/*.fragment.json'</span><span class="token punctuation">,</span><br>              <span class="token string">'webapp/**/*.fragment.xml'</span><span class="token punctuation">,</span><br>              <span class="token string">'webapp/**/*.view.html'</span><span class="token punctuation">,</span><br>              <span class="token string">'webapp/**/*.view.json'</span><span class="token punctuation">,</span><br>              <span class="token string">'webapp/**/*.view.xml'</span><span class="token punctuation">,</span><br>              <span class="token string">'webapp/**/*.properties'</span><br>            <span class="token punctuation">]</span><br>          <span class="token punctuation">}</span><span class="token punctuation">,</span><br>          <span class="token literal-property property">dest</span><span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span><br>          <span class="token literal-property property">compress</span><span class="token operator">:</span> <span class="token boolean">true</span><br>        <span class="token punctuation">}</span><span class="token punctuation">,</span><br>        <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token boolean">true</span><br>      <span class="token punctuation">}</span><br>    <span class="token punctuation">}</span><br>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br><br>  grunt<span class="token punctuation">.</span><span class="token function">loadNpmTasks</span><span class="token punctuation">(</span><span class="token string">'grunt-openui5'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br><br><span class="token punctuation">}</span></code></pre>
<p>This is quite a simple example but it will suffice in most use cases. What we are doing here first of all is reading in the ‘package.json’ file created earlier which provides the dependency list. Then we are setting the configuration options for ‘openui5_preload’ which is the specific tool we are going to be using from the OpenUI5 toolset.</p>
<ul>
<li>The ‘cwd’ parameter allows you to provide a base directory for finding the files and the ‘prefix’ parameter lets you prefix all files with a path of your choosing; in this instance we are not using either of these parameters so we are leaving them blank.</li>
<li>The ‘src’ parameter lets you provide an array of paths, which it will use to try and match files in your directory and then for those matches it will minify and add them to the preload. I have all of my UI5 application files within a subdirectory called ‘webapp’ which is why my paths all begin with ‘webapp’. I have all my UI5 files located in this directory because I can then keep all of my other files and folders such as ‘node_modules’, PhoneGap config files, IDE folders, etc back in the root directory. I do this because it allows me to use this simple “get everything” approach you see above in the ‘src’ without worrying about accidentally including non-UI5 app files.</li>
<li>The ‘dest’ parameter specifies the path to the destination you wish to save the preload file. In this case we just want to save it in the same place as the <code>Component.js</code> file and therefore can leave it blank.</li>
<li>The ‘compress’ parameter sets whether or not you wish to minify the files as well as add them to the preload file. I would personally recommend always setting this to ‘true’ unless you have a good reason not to.</li>
<li>The ‘components’ parameter here with a value of ‘true’ sets the tool to automatically find all components and create a preload for each.</li>
</ul>
<p>Finally, we load the ‘grunt-openui5′ toolkit from the plugin as previously installed and specified in ‘package.json’.</p>
<p><em>For the full documentation and parameter list I’d recommend looking at the <a href="https://github.com/SAP/grunt-openui5">Grunt OpenUI5 tools</a> GitHub page.</em></p>
<p>That’s all the configuration set up, now it’s time to generate our preload file! Fire up a terminal session in the same directory as your ‘Gruntfile.js’ and run the following command ‘grunt openui5_preload’ and you should see the following output along with a ‘Component-preload.js’ file alongside your ‘Component.js’ file.</p>
<p><img src="/images/2018/02/Screen-Shot-2015-07-15-at-00.48.10-624x88.png" alt="preload generation output"></p>
<p><strong>Final thoughts</strong></p>
<p>Congratulations, you’ve just made your first preload file and are now well on the way to creating even better apps with UI5!</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Multi language support out of the box - UI5&#39;s pedigree</title>
      <link href="https://qmacro.org/blog/posts/2015/07/16/multi-language-support-out-of-the-box-ui5&#39;s-pedigree/"/>
      <updated>2015-07-16T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2015/07/16/multi-language-support-out-of-the-box-ui5&#39;s-pedigree/</id>
      <content type="html">
        <![CDATA[
      <p><strong><a href="/blog/posts/2015/07/04/30-days-of-ui5/">30 Days of UI5</a> — Day 13 by <a href="//qmacro.org/about/">DJ Adams</a></strong></p>
<p><img src="/images/2018/02/Screen-Shot-2015-07-14-at-18.10.05-624x415.png" alt="Message Page control"></p>
<p>I was browsing through the controls that were new with 1.28, using the OpenUI5 SDK’s Explored app’s filter-by-release feature, and came across the <a href="https://openui5.hana.ondemand.com/explored.html#/entity/sap.m.MessagePage/samples">Message Page</a> control.</p>
<p>What caught my eye was the text on the control. When you think about it, there aren’t that many controls that have default text on them.</p>
<p>Looking into how this would work in other locales (this control as you see it would only make immediate sense in English-speaking countries), and how the text was specified, led me down a path that ended up at a place that reminded me of OpenUI5’s pedigree. Born inside of SAP, the enterprise scale thinking permeates throughout the toolkit, and is very visible in this context.</p>
<p>In <a href="https://github.com/SAP/openui5/blob/831caa234d1f4813e201ddf91722835e7760ec95/src/sap.m/src/sap/m/MessagePage.js#L105-L116">the init function of MessagePage.js</a> you can see that the control’s text property is being set to the value of the MESSAGE_PAGE_TEXT property in the message resource bundle:</p>
<p><img src="/images/2018/02/Screen-Shot-2015-07-14-at-18.29.21-624x175.png" alt="init function source code"></p>
<p>This <a href="https://github.com/SAP/openui5/blob/2b3e49d661b285449f08d26d6a35440c59f7c8f4/src/sap.m/src/sap/m/messagebundle.properties#L552">MESSAGE_PAGE_TEXT property in the base resource file messagebundle.properties</a> has the value “No matching items found.”:</p>
<p><img src="/images/2018/02/Screen-Shot-2015-07-14-at-18.38.56-624x64.png" alt="looking for MESSAGE_PAGE_TEXT"></p>
<p>Even if you know only a little about how resource models work, you may realise that there’s more to it than this. There are actually 39 different translated versions of this base resource representing many languages (more specifically locales) into which this control (and other controls) have been translated:
<img src="/images/2018/02/Screen-Shot-2015-07-14-at-19.09.19-624x127.png" alt="looking at languages"></p>
<p>Let’s have a look at a few (with the second grep I’m omitting those that have Unicode encodings, because they’re hard to read):</p>
<p><img src="/images/2018/02/Screen-Shot-2015-07-14-at-19.13.36-624x109.png" alt="looking at languages, reduced"></p>
<p>And of course, not only does UI5’s pedigree extend to just translations, right-to-left (RTL) is also supported, out of the box.</p>
<p>Let’s bring this post to a close with a couple of examples. Don’t forget you can explicitly specify the language or locale with a special query parameter “sap-language” in the URL.</p>
<p>Here’s <a href="https://openui5.hana.ondemand.com/explored.html?sap-language=iw#/sample/sap.m.sample.MessagePage/preview">Hebrew</a> (“iw”), with RTL kicking in automatically:</p>
<p><img src="/images/2018/02/iw3-624x358.png" alt="RTL in Hebrew"></p>
<p>And to finish, how about <a href="https://openui5.hana.ondemand.com/explored.html?sap-language=fi#/sample/sap.m.sample.MessagePage/preview">another language</a>:</p>
<p><img src="/images/2018/02/Screen-Shot-2015-07-14-at-19.32.50-300x192.png" alt="Message page in Finnish"></p>
<p>(See what I did there? :-)</p>
<p></p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Base Classes in UI5</title>
      <link href="https://qmacro.org/blog/posts/2015/07/14/base-classes-in-ui5/"/>
      <updated>2015-07-14T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2015/07/14/base-classes-in-ui5/</id>
      <content type="html">
        <![CDATA[
      <p><strong><a href="/blog/posts/2015/07/04/30-days-of-ui5/">30 Days of UI5</a> — Day 12 by <a href="https://twitter.com/ThiloDev">Thilo Seidel</a></strong></p>
<p>Learning your way around UI5 can be hard sometimes. With the new tutorials and improved structure in the developer guide, help on the journey to UI5 mastery has got better over the last few months.</p>
<p>But if you really want understand the UI5 magic in all its depth you might want to dig a little deeper. For my part I can truly recommend going back to the roots to have a look into the UI5 base classes. They are properly lined up like a string of pearls building upon each other and forming the high level architectural blueprint of the toolkit as a whole.</p>
<p><img src="/images/2018/01/baseclasses.png" alt="baseclasses"></p>
<p>All UI5 base classes come with a set of metadata, basically simple json that may hold additional information describing the instance. In addition this metadata has an underlying metadata implementation that provides helper functions, validation logic and some more convenience.</p>
<p><strong>sap.ui.base.Object</strong></p>
<p>This “instance plus metadata” concept is introduced already with sap.ui.base.Object, the first in line and mostly everything you want to instantiate in UI5 will be inheriting from it. Its children are mostly workers like classes taking care of parsing, or basic data carrying objects like the event implementation.</p>
<p><strong>sap.ui.base.EventProvider</strong></p>
<p>While Object is only setting the stage, sap.ui.base.EventProvider is the first to actually have capabilities to share. And you might have guessed it from the name already: the Event Provider introduces eventing in UI5. With functions to attach, detach and fire events, its toolkit is only small compared to what is still to come. Nevertheless, it is the starting point for most of the key features in UI5. Model, Binding, Router, at the heart they are all “just” Event Providers.</p>
<p><strong>sap.ui.base.ManagedObject</strong></p>
<p>Next in line is a heavyweight champion when you compare it with its predecessor: the sap.ui.base.ManagedObject. It is the herald for all instances that later will be rendered as it introduces properties, aggregations and associations in the metadata. It will never be rendered, but it sets the stage and extends the metadata implementation adding getters and setters for the fields that are introduced. Moreover it allows for data binding and might even have its own model. The most prominent example is the Component.</p>
<p><strong>sap.ui.core.Element</strong></p>
<p>The first base class that might have a place in the DOM is the sap.ui.core.Element. It has to be said that the Element itself has normally no renderer on its own and therefore is not to be placed standalone into the DOM. But it is the class you want to use in aggregations of your own controls with the list item as one of its best known subclasses. It is the one that completes the metadata implementation for base classes.</p>
<p><strong>sap.ui.core.Control</strong></p>
<p>Last up for this journey through UI5 architecture is the sap.ui.core.Control with children that are full blown UI elements. The last few thing that are still missing are introduced now. Besides direct DOM placement and the renderer it is basically picking up the last pieces with the busy-state and ability to handle browser events. And of course, every real UI-control has learned from Control.</p>
<p><strong>sap.ui.core.Core</strong></p>
<p>This post gives just the briefest of UI5 architecture overviews, covering only the bare essentials. There is much more to discover in that respect and I highly recommend you check out the entire package from GitHub and go exploring. There are definitely some gems hidden deep in the UI5 repository. Just one more for now, the sap.ui.core.Core, her majesty itself. And you might have guessed it, humble as she is, she downgraded herself recently and finally is nothing more than a (Base) Object.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Handling Dates with the Date Picker</title>
      <link href="https://qmacro.org/blog/posts/2015/07/13/handling-dates-with-the-date-picker/"/>
      <updated>2015-07-13T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2015/07/13/handling-dates-with-the-date-picker/</id>
      <content type="html">
        <![CDATA[
      <p><strong><a href="/blog/posts/2015/07/04/30-days-of-ui5/">30 Days of UI5</a> — Day 10 by <a href="https://twitter.com/jameshale14">James Hale</a></strong></p>
<p><img src="/images/2018/02/30ui5-10-date-picker.jpg" alt="Date Picker control"></p>
<p>When creating applications, the experiences of the user should be one of the key considerations that drives build and development.  One aspect of this is the way that data is entered, saved and displayed to the user, which can drastically affect the usability of an application.</p>
<p>For this short post, we’re going to take a look at the <a href="https://openui5.hana.ondemand.com/explored.html#/entity/sap.m.DatePicker/samples">Date Picker</a>, which is an input control in the OpenUI5 library used for simple capture of dates from the user.  As we all know, dates can be somewhat of a nuisance to work with, especially when entering on small screens with particular formats.  This control aims to ease this with a calendar style view of dates to select from.</p>
<p>It’s a simple, yet effective, little control that allows users to quickly select dates with a familiar and quick to use calendar style view.  The control is also configurable to display different date formats based upon the <code>displayFormat</code> property, which can be useful when screen real estate is at a premium.</p>
<p>By using controls like the Date Picker with dedicated input mechanisms, we can all aim to make our applications easier to use within the day to day lives of users.</p>
<p>For additional controls focussed around date and time input, take a look at the <a href="https://openui5.hana.ondemand.com/explored.html#/entity/sap.m.DateRangeSelection/samples">Date Range</a> <a href="https://sapui5.hana.ondemand.com/sdk/explored.html#/entity/sap.m.DateRangeSelection/samples">Selection</a> control when working with time periods, as well as the <a href="https://openui5.hana.ondemand.com/explored.html#/entity/sap.m.DateTimeInput/samples">Date Time Input</a> when making forms that handle dates and times together.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Bootstrapping UI5 Locally and in the Cloud</title>
      <link href="https://qmacro.org/blog/posts/2015/07/12/bootstrapping-ui5-locally-and-in-the-cloud/"/>
      <updated>2015-07-12T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2015/07/12/bootstrapping-ui5-locally-and-in-the-cloud/</id>
      <content type="html">
        <![CDATA[
      <p><strong><a href="/blog/posts/2015/07/04/30-days-of-ui5/">30 Days of UI5</a> — Day 9 by <a href="//qmacro.org/about/">DJ Adams</a></strong></p>
<p><img src="/images/2018/02/Screen-Shot-2015-07-11-at-16.05.52.png" alt="Screenshot of files in a UI5 app directory"></p>
<p>Like many developers who find themselves building a lot with UI5, I find my working environment is mostly a local one, supplemented by activities in the cloud.</p>
<p><strong>Local Environment</strong></p>
<p>More precisely, while I often use the excellent <a href="http://scn.sap.com/docs/DOC-55465">SAP Web IDE</a> – for training, generating starter projects and custom Fiori work, my main development workflow is based upon tools that are local to my workstation. In my particular case, that’s most often my MacBook Pro running OSX, but sometimes a Debian-based environment running in a chroot on my Chromebook, courtesy of the awesome <a href="https://github.com/dnschneid/crouton">crouton</a> project. I use tools that work for me, that don’t get in the way of my flow, and at the bare essentials level, that means a decent editor (Vim or Atom), a local webserver (based on NodeJS), and a runtime platform that doubles as debugging, tracing and development (Chrome).</p>
<p><strong>Cloud Environment</strong></p>
<p>When I’m working in the cloud, specifically with the SAP Web IDE, the toolset is totally different. Not only that, but the bootstrapping of UI5 works slightly differently. In this short post, I wanted to explain what I do to flatten any speedbumps when transitioning between the two environments. The worst thing for me would be to have to alter my codebase slightly to take account of different runtime environments.</p>
<p><strong>Different UI5 Versions</strong></p>
<p>Locally, I maintain a variety of different UI5 versions, that I’ve picked up over the months and years. You never know when you’ll need to go back to a previous version, or even look through the complete history, to see how something has changed. This is what the contents my local ~/ui5/ folder look like:</p>
<p><img src="/images/2018/02/Screen-Shot-2015-07-11-at-16.37.15-624x545.png" alt="Screenshot of my ui5 directory"></p>
<p>I use the NodeJS-based static_server.js  script to serve files from this folder, as well as another folder which contains my UI5 projects. From here, I can access different UI5 versions by changing the location that the UI5 bootstrap looks. (Note that while I can and do often access older versions, I pretty much always develop against the latest version, unless there’s a good reason not to … access to older versions is almost always for reference purposes.)</p>
<p>Usually I specify “latest” in the URL, which refers to the symbolic link in the folder above, which (via the use of the small “setlatest” script) in turn points to whatever folder represents the latest unpacked zip:</p>
<p><img src="/images/2018/02/Screen-Shot-2015-07-11-at-16.10.56-624x75.png" alt="Screenshot showing relation of local URL and UI5 version"></p>
<p>If I want to refer to an older version, I do so like this:</p>
<p><img src="/images/2018/02/Screen-Shot-2015-07-11-at-16.11.11-624x75.png" alt="Screenshot of another relation between local URL and UI5 version"></p>
<p>The same approach with the URL path applies to the contents of the “src” attribute in the UI5 bootstrap:</p>
<p><img src="/images/2018/02/Screen-Shot-2015-07-12-at-08.50.35.png" alt="UI5 bootstrap with latest UI5 version"></p>
<p><strong>Harmonising Local and Cloud Bootrapping</strong></p>
<p>However, this doesn’t play well with the SAP Web IDE, at least not directly. So I’ve come up with an approach that minimises the fuss and disruption when taking a UI5 app repo that I’ve developed locally, and cloning it for use in the SAP Web IDE on the HANA Cloud Platform (HCP) environment, or vice versa.</p>
<p>Let’s look at an almost empty UI5 project folder that I’ve created locally:</p>
<p><img src="/images/2018/02/Screen-Shot-2015-07-11-at-16.22.18-624x191.png" alt="app directory structure showing symbolic link for resources"></p>
<p>In it, we have the index.html which contains a UI5 bootstrap that looks like this:</p>
<p><img src="/images/2018/02/Screen-Shot-2015-07-12-at-08.50.49.png" alt="UI5 bootstrap with relative reference to resources"></p>
<p>The “src” attribute refers to a resources folder in the same location as the containing index.html. The value of this attribute (“resources/sap-ui-core.js”) is pretty much the de facto standard for “the location of the UI5 runtime”, so it’s sensible to change this only if you have a very good reason, if not only because you’re starting a battle that you might not want to see through.</p>
<p>If you look at the folder listing above, you’ll see that this resources folder is actually a symbolic link to the resources folder in the “latest” UI5 version, as described earlier (yes, so we have a symbolic link following a symbolic link). So we’re bootstrapping whatever the latest version of UI5 is.</p>
<p>We’re not interested in having this in our UI5 application repo (it would be of no use in most other contexts) so in our .gitignore file, we exclude it:</p>
<p><img src="/images/2018/02/Screen-Shot-2015-07-11-at-16.23.26.png" alt="contents of .gitignore"></p>
<p>When we want to run the application in the HCP context, via SAP Web IDE, we use a mapping file that translates our bootstrap “src” attribute URL into a resource that is available globally on HCP. This mapping file is neo-app.json, and here, it contains this:</p>
<p><img src="/images/2018/02/Screen-Shot-2015-07-11-at-16.25.20.png" alt="contents of neo-app.json"></p>
<p>The path “resources” is mapped to the target “sapui5″ service at “/resources”. This means that the script element in our index.html can successfully resolve and bootstrap UI5 from the right place, with zero changes between my local environment and HCP.</p>
<p>With my “resources” symbolic link in place, along with the neo-app.json mapping, I can enjoy a smooth transition between local and cloud based development when I’m working on UI5 development with the latest version. It’s a simple technique; get it in place, and you could be looking at some happy productivity gains, without loss of any reference to older UI5 versions locally.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>User Notifications with the Message Popover</title>
      <link href="https://qmacro.org/blog/posts/2015/07/11/user-notifications-with-the-message-popover/"/>
      <updated>2015-07-11T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2015/07/11/user-notifications-with-the-message-popover/</id>
      <content type="html">
        <![CDATA[
      <p><strong><a href="/blog/posts/2015/07/04/30-days-of-ui5/">30 Days of UI5</a> — Day 8 by by <a href="http://twitter.com/saoirse_22">Sean Campbell</a></strong></p>
<p><img src="/images/2018/02/Screen-Shot-2015-07-09-at-21.12.19-300x298.png" alt="A selection of brightly coloured messages"></p>
<p>Giving an end user good feedback regarding their interaction with the application or the application’s interactions with the back end has always been a bit of a challenge in UI5. Until recently pretty much every developer had a different style of capturing and exposing messages, with many of us building our own message log solutions. This lost a level of the “Enterprise” uniformity that is often required for our applications.</p>
<p>In recent releases however SAP and OpenUI5 have provided a very robust and uniformed way of exposing these messages.</p>
<p>Now users can expect message to be shown in a clear and concise way, that is the same across all UI5 applications; no more are we hacking around arrays to provide our own message logs. From the bright colours to the simple click through to view a more detailed message, everything about this control has been aimed at the user who expects clear interactions, even Web Dynpro Java (WDJ) handled messages better than early UI5.</p>
<p>In the example below I have mocked up a couple of Buttons that trigger the Popover in its two “States”. I tend to lean towards the full Popover as its easy to see a full list of the most recent messages. However I can see good use cases, in mobile apps for example, where the condensed popover would be best. As shown in Day 3 of this series, on <a href="/blog/posts/2015/07/06/semantic-pages/">Semantic Pages</a>, the footer bar makes a nice place for the Button that controls the Popover.</p>
<p><a class="jsbin-embed" href="http://jsbin.com/somuxu/3/embed?html,js,output">JS Bin on jsbin.com</a><script src="http://static.jsbin.com/js/embed.min.js?4.1.2"></script></p>
<p>This control still isn’t perfect and there are a number of improvements I could see being added over the next few iterations but it is certainly a dramatic leap in the right direction for UI5 and user interaction. The ability to easily delete messages would be nice along with a way to prevent duplication on error.</p>
<p>A nice touch that can be done relatively simply is to alter the look and feel of the Button dependent upon the level of messages that have been posted. Those that have been following this series will have read DJ’s post on <a href="/blog/posts/2015/07/05/expression-binding/">Expression Binding</a> from Day 2 of this series. This would be a great way to derive the icon in the Button, to be based upon the “Highest” status message. Doing this gives the user feedback without them even opening the Message Popover and to me giving a user feedback at the earliest possible time is always going to give them the best experience.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>The App Descriptor</title>
      <link href="https://qmacro.org/blog/posts/2015/07/09/the-app-descriptor/"/>
      <updated>2015-07-09T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2015/07/09/the-app-descriptor/</id>
      <content type="html">
        <![CDATA[
      <p><strong><a href="/blog/posts/2015/07/04/30-days-of-ui5/">30 Days of UI5</a>  — Day 6 by <a href="https://twitter.com/ThiloDev">Thilo Seidel</a></strong></p>
<p>Writing your component based applications in UI5 you might be familiar with a long list of settings in your metadata section making you scroll down for hours before reaching the point where the first violin plays. This is not only annoying but in fact bad design as it means to mix static configuration in large amounts with actual code.</p>
<p>One way to solve this is the usage of a manifest file – one central asset that holds your entire application configuration. The UI5 creators have drawn inspiration from the W3C manifest for a web application concept that is currently under investigation and create an UI5 flavored version of it. The app descriptor in UI5 is basically a JSON file named manifest.json that is expected in the same folder your component lives in. All you need to do to get started is to add an attribute manifest with the value “json” to your component metadata.</p>
<p>Introduced in 1.28 in a basic version, with upcoming 1.30 it is even smarter. Beyond static configuration for packaging and deployment it even helps to save you some code, especially when it comes to model instantiation. The manifest itself is structured in namespaces of which we want to briefly look into sap.app and sap.ui5 for this case. More details and examples can be found in the <a href="https://openui5beta.hana.ondemand.com/#docs/guide/be0cf40f61184b358b5faedaec98b2da.html">1.30 documentation preview.</a></p>
<p><strong>sap.app:</strong></p>
<p>Mostly app specific attributes can be found here. You can also get set for your data model and resource bundle here. One property called ‘dataSources’ expects an object that holds the URL to your service, the service type and some additional settings if needed. A full blown service configuration would look like this:</p>
<p><img src="/images/2018/01/Screen-Shot-2015-07-07-at-19.51.14.png" alt="Screenshot of an sap.app stanza"></p>
<p>If you have more than one service you can simply add another object to this attribute. These can later be referenced by the given name. In addition we added the relative path to the i18n file here and will make use of this later as well.</p>
<p><strong>sap.ui5:</strong></p>
<p>This namespace is used for any configuration that can be used by the UI5 runtime directly. This counts for the routing configuration, but also for UI5 library dependencies and of course our case with the model instantiation.</p>
<p>For i18n it is pretty straightforward and a named i18n resource model (named “i18n”) will be created by the UI5 runtime. For the actual data model(s) you can also specify a name or keep it blank for an unnamed data model like this. Just set the datasource specified earlier and UI5 will handle the rest. The created models will be at your command as early as in the init function of your component.</p>
<p><img src="/images/2018/01/Screen-Shot-2015-07-07-at-19.54.22.png" alt="Screenshot of an sap.ui5 stanza"></p>
<p>To conclude this is only a snapshot of one little feature that is built into the new UI5 manifest, but showcases pretty well how this new file will ease your development routines, help to clean up your components and limit repetitive lines of code.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>OpenUI5 Walkthrough</title>
      <link href="https://qmacro.org/blog/posts/2015/07/07/openui5-walkthrough/"/>
      <updated>2015-07-07T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2015/07/07/openui5-walkthrough/</id>
      <content type="html">
        <![CDATA[
      <p><strong><a href="/blog/posts/2015/07/04/30-days-of-ui5/">30 Days of UI5</a>  — Day 5 by <a href="//qmacro.org/about/">DJ Adams</a></strong></p>
<p><img src="/images/2018/01/Screen-Shot-2015-07-04-at-11.03.14.png" alt="A tile with a link to sap.m.Explored">
Explored, before its promotion.</p>
<p>OpenUI5, like its twin sibling SAPUI5, has a great <a href="https://openui5.hana.ondemand.com/">SDK</a>.</p>
<p>The SDK contains plenty of example code snippets, especially in the Explored app. Up until version 1.20 the Explored app was “just another” app in the Demo Apps section, but after that it was (rightly) promoted to prominence at the top level of the SDK menu structure.</p>
<p>The latest addition to Explored is a set of <a href="https://openui5beta.hana.ondemand.com/explored.html#/entity/sap.m.tutorial.walkthrough/samples">code examples</a> that accompany a great multi-step <a href="https://openui5beta.hana.ondemand.com/#docs/guide/3da5f4be63264db99f2e5b04c5e853db.html">walkthrough</a> of many of the features and practices of UI5 development. A number of things are changing in release 1.30, including the introduction of the application descriptor, and a new way of defining modules. This walkthrough covers these topics and many others too. It’s well worth a look.</p>
<p>One thing that immediately caught my eye was when I selected the appropriate Explored sample that corresponded to Step 30 of the walkthrough, describing the <a href="https://openui5beta.hana.ondemand.com/#docs/guide/1ff250c2038849f5991209f7e6c36f1f.html">Debugging Tools</a> : the excellent UI5 Diagnostics Tool popped up out of nowhere!</p>
<p><img src="/images/2018/01/Screen-Shot-2015-07-04-at-11.11.43-300x112.png" alt="UI5 Diagnostics Tool screenshot"></p>
<p>(I’m a big fan of this tool; there’s so much information it offers, as a UI5 developer you can’t afford to ignore its help.)</p>
<p>I was curious as to how this automatic opening of the tool had been achieved, and a quick look at the appropriate webapp/Component.js asset in the <a href="https://openui5beta.hana.ondemand.com/explored.html#/sample/sap.m.tutorial.walkthrough.30/code">sample’s code section</a> gave me the answer:</p>
<pre class="language-javascript"><code class="language-javascript">jQuery<span class="token punctuation">.</span>sap<span class="token punctuation">.</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"sap.ui.core.support.Support"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <br><span class="token keyword">var</span> oSupport <span class="token operator">=</span> sap<span class="token punctuation">.</span>ui<span class="token punctuation">.</span>core<span class="token punctuation">.</span>support<span class="token punctuation">.</span>Support<span class="token punctuation">.</span><span class="token function">getStub</span><span class="token punctuation">(</span><span class="token string">"APPLICATION"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> oSupport<span class="token punctuation">.</span><span class="token function">openSupportTool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>Nice!</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Creating Native Applications with UI5</title>
      <link href="https://qmacro.org/blog/posts/2015/07/07/creating-native-applications-with-ui5/"/>
      <updated>2015-07-07T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2015/07/07/creating-native-applications-with-ui5/</id>
      <content type="html">
        <![CDATA[
      <p><strong><a href="/blog/posts/2015/07/04/30-days-of-ui5/">30 Days of UI5</a> – Day 4 by <a href="http://jmurray.me/">John Murray</a></strong></p>
<p><img src="/images/2018/01/download.jpeg" alt="PhoneGap:Build logo"></p>
<p>Whilst web apps are great, and suit the vast majority of situations perfectly, sometimes they just don’t quite cut the mustard. It is in these situations that we are presented with a difficult choice, do we take option A – Sacrifice the features which are specific to native applications for the sake of sticking with UI5 and the benefits that web apps bring? Or do we go with option B – Sacrifice UI5 and the web app benefits, instead going with native code, but then have access to all the features? Well, even in the not-so-distant past we would have to weigh up the pros and cons of each option and make our decision accordingly.</p>
<p>More recently, we were provided with an option C – Use <a href="http://phonegap.com/">PhoneGap</a> to make our application like a web app, using UI5 and an assortment of plugins to achieve our ends. However, this option was not without its own challenges and problems; you had to install libraries for all platforms you wished to build for, then structure everything in a rather precise manner, and to top it all off you then had to battle with the rather clunky command line interface. This did of course improve over time and after you had your setup and work flow down to a tee, but it was never smooth sailing. Thankfully though, we now have an option D!</p>
<p>Option D is <a href="https://build.phonegap.com">PhoneGap Build</a>, a service which takes everything that is great about standard PhoneGap and then removes everything that is bad about it, providing a fast and streamlined experience. This service is freely available, and will allow you to have a native version of your UI5 app up and running within minutes.</p>
<p>As an overview, you create your UI5 application as you would normally, except this time you also include a <em>config.xml</em> file in the root folder. It is this file which the Build service uses to create your application, you simply specify the location of your <em>index.html</em> file and reference any plugins you wish to use. You then zip up all of your code and upload it to their website, and it will automatically build a native app for Android, iOS and Windows Phone in a matter of minutes.</p>
<p>For more a more thorough getting started guide on all of this, I am currently writing an in depth blog series on my own website, the first part of which can be found here – <a href="http://jmurray.me/ui5-and-phonegap-first-steps-1-of-3/">UI5 and PhoneGap Build: First Steps</a>.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Semantic Pages</title>
      <link href="https://qmacro.org/blog/posts/2015/07/06/semantic-pages/"/>
      <updated>2015-07-06T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2015/07/06/semantic-pages/</id>
      <content type="html">
        <![CDATA[
      <p><strong><a href="/blog/posts/2015/07/04/30-days-of-ui5/">30 Days of UI5</a>  — Day 3 by <a href="//qmacro.org/about/">DJ Adams</a></strong></p>
<p><a href="http://www.bloomsbury.com/au/primer-of-greek-grammar-9780715612583/"><img src="/images/2018/01/download1-1.jpeg" alt="the cover of &quot;A Primer of Greek Grammar&quot; by Abbott and Mansfield"></a></p>
<p>(This book was a close companion in an earlier life.)</p>
<p>My degree in Latin and Greek is not entirely without foundation or reason, and it provides me with at least a small sense of origin when it comes to words. The 3rd declension noun <a href="https://en.wiktionary.org/wiki/%CF%83%E1%BF%86%CE%BC%CE%B1">σῆμα</a> conveys the idea of a mark, a sign, a token. It refers to “meaning”, essentially, and the use in modern languages of the word semantic often implies an abstraction, a layer that confers or allows meaning to be defined or carried.</p>
<p>What has that got to do with UI5 reaching release 1.30? Well, take a look at the fledgling <a href="https://openui5beta.hana.ondemand.com/explored.html#/entity/sap.m.semantic.SemanticPage/samples">Semantic Page</a>. It’s the root of a series of new controls that are perhaps set to encourage standardisation of Fiori UIs. The <a href="http://experience.sap.com/fiori-design/">SAP Fiori Design Guidelines</a> describe a rich set of controls, but more importantly they describe how those controls should be typically employed.</p>
<p>Floorplans such as the <a href="http://experience.sap.com/fiori-design/floorplans/split-screen/">Split Screen Layout</a> and the <a href="http://experience.sap.com/fiori-design/floorplans/full-screen/">Full Screen</a> are all fairly familiar to us. But consistency comes from attention to a more granular level of detail, and the UI designers are encouraged to place certain controls in standard places. A couple of examples: Action buttons belong in the bottom right (in the footer) of a page, while the new <a href="https://openui5.hana.ondemand.com/explored.html#/entity/sap.m.MessagePopover/samples">Message Popover</a> from 1.28 belongs in the bottom left.</p>
<p>When SAP created Fiori application developer teams across the world to build out <a href="fioriappslibrary.hana.ondemand.com/sap/fix/externalViewer/">the Fiori apps that we see available today</a>, it was almost inevitable that the different styles and approaches across teams and members would have resulted in a variety of structures, making it difficult to get the UX right, the UI consistent, and causing maintenance headaches. So SAP created scaffolding (sap.ca.scfld), a set of mechanisms that abstracted away a lot of the common boilerplate stuff allowing the developers to focus on the application logic (and preventing them from reinventing the boilerplate, slightly differently, every time). But this scaffolding was a little bit too monolithic, and I think the plan has been to phase it out.</p>
<p><img src="/images/2018/01/Screen-Shot-2015-07-05-at-20.49.53-300x231.png" alt="Semantic Page Master-Detail"></p>
<p>I’m also thinking that the alternative could involve this set of semantic controls. Take a look at the way the <a href="https://openui5beta.hana.ondemand.com/explored.html#/sample/sap.m.sample.SemanticPage/preview">Semantic Page Master-Detail sample</a> puts things in the appropriate place – at a semantically meaningful level of abstraction above the individual mechanics of a Page control’s aggregations, for example.</p>
<p>It’s similar in the <a href="https://openui5beta.hana.ondemand.com/explored.html#/sample/sap.m.sample.SemanticPageFullScreen/preview">Semantic Page Full Screen sample</a> too. To get a feel for this level of abstraction, <a href="https://openui5beta.hana.ondemand.com/explored.html#/sample/sap.m.sample.SemanticPageFullScreen/code">take a look</a> at how the aggregations are filled – nowhere in this XML view definition does it say <em>where</em> the semantic controls should go:</p>
<p><img src="/images/2018/01/Screen-Shot-2015-07-05-at-20.57.35.png" alt=""></p>
<p>What we seem to have so far is a small hierarchy of Page based controls, that looks like this:</p>
<pre><code>     SemanticPage 
          | 
    +----------------------+
    |                      | 
MasterPage          ShareMenuPage
                           |
                   +---------------+
                   |               |
               DetailPage    FullscreenPage
</code></pre>
<p>And there are <a href="https://openui5beta.hana.ondemand.com/index.html#docs/api/symbols/sap.m.semantic.html">plenty of semantic controls too</a>. It doesn’t replace the breadth of functionality that the scaffolding offered, but it’s a start, and it feels more modular. A namespace to watch!</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Expression Binding</title>
      <link href="https://qmacro.org/blog/posts/2015/07/05/expression-binding/"/>
      <updated>2015-07-05T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2015/07/05/expression-binding/</id>
      <content type="html">
        <![CDATA[
      <p><strong><a href="/blog/posts/2015/07/04/30-days-of-ui5/">30 Days of UI5</a>  — Day 2 by <a href="//qmacro.org/about/">DJ Adams</a></strong></p>
<p><img src="/images/2018/01/Screen-Shot-2015-07-05-at-13.34.07.png" alt="Expression Binding samples"></p>
<p>The expression binding feature was <a href="https://openui5.hana.ondemand.com/#docs/guide/99ac68a5b1c3416ab5c84c99fefa250d.html">introduced with version 1.28</a>, and allows logic to be included directly in an embedded binding. It’s a very useful feature, but a double edged sword that should be wielded with care.</p>
<p>Before expression bindings, any embedded binding that required a condition to be checked, or a calculation to be made, or a reformatting to happen, needed a reference to a formatter function that would either be in a dedicated formatter module (common), or in the controller (less common). When using XML views, for example, the Model-View-Controller philosophy remained strong, in that any imperative computation remained separate from the pure declarative UI definitions.</p>
<p>But in practice you find yourself creating a <em>lot</em> of formatter functions. Yes, some of them could be probably be refactored, and if you had time, you could probably find that library of common formatter functions that you’d been half building in your copious free time. Regardless, you end up with a lot of helper functions, small and large, that sometimes become a maintenance burden.</p>
<p>Enter expression bindings. If you’re prepared to add sugar and milk to your coffee, if you’re prepared to sacrifice the absolute purity of MVC for the sake of brevity, then expression bindings can be your friend.</p>
<p>Here’s an <a href="http://jsbin.com/wivuku/18/edit">example</a>:</p>
<p><a class="jsbin-embed" href="http://jsbin.com/wivuku/18/embed?html,js,output">JS Bin on jsbin.com</a><script src="http://static.jsbin.com/js/embed.min.js?4.1.2"></script></p>
<p>The greeting is created in three different ways. First, we use a function inside a formatter. Then, we use the same function but in the controller that is linked to the view (note the dot prefix in the value of the formatter property, specifying that the function is to be found in the controller). Finally, we have the same example in an expression binding, directly in the view.</p>
<p>Those who have had their coffee already today (milk and sugar optional) may have noticed something unusual in the expression binding example. Instead of having the literal “Good” outside of the embedded binding curly brackets, like this:</p>
<pre class="language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Input</span><br>  <span class="token attr-name">enabled</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span> <br>  <span class="token attr-name">description</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Expression<span class="token punctuation">"</span></span> <br>  <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Good {= ${/now}.getHours() > 11 ? 'afternoon' : 'morning'}<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre>
<p>… it’s like this, instead:</p>
<pre class="language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Input</span> <span class="token attr-name">enabled</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><br>  <span class="token attr-name">description</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Expression<span class="token punctuation">"</span></span><br>  <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>{= 'Good ' + (${/now}.getHours() > 11 ? 'afternoon' : 'morning')}<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre>
<p>(Note the extra parentheses in this version).</p>
<p>This is because, currently, any literal string outside of the curly braces is rejected by the runtime.</p>
<p>Anyway, expression bindings are here, and they may be the sort of thing that you’re looking for. Possibly exactly what you’re looking for, if you’re considering <a href="https://openui5.hana.ondemand.com/#docs/guide/5ee619fc1370463ea674ee04b65ed83b.html">XML Templating</a>. But that’s a post for another time.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Lightweight notifications with the Message Strip</title>
      <link href="https://qmacro.org/blog/posts/2015/07/04/lightweight-notifications-with-the-message-strip/"/>
      <updated>2015-07-04T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2015/07/04/lightweight-notifications-with-the-message-strip/</id>
      <content type="html">
        <![CDATA[
      <p><strong><a href="/blog/posts/2015/07/04/30-days-of-ui5/">30 Days of UI5</a> — Day 11 by <a href="//qmacro.org/about/">DJ Adams</a></strong></p>
<p><img src="/images/2018/02/Screenshot-2015-06-23-at-22.26.53.png" alt="Message Strip control"></p>
<p>The <a href="https://openui5beta.hana.ondemand.com/explored.html#/entity/sap.m.MessageStrip/samples">Message Strip</a> is a nice new control with 1.30. It’s in the main (sap.m) library of controls, and for me, appeals because it bridges the gap between no message at all, and a modal dialog box which is sometimes too heavyweight.</p>
<p>(If you’re wondering about the <a href="https://openui5.hana.ondemand.com/#docs/api/symbols/sap.m.MessageToast.html">Message Toast</a> control, don’t forget that this lighter weight mechanism should only be used for “less important” messages such as informational messages on the successful completion of a step).</p>
<p>The nice thing about the way that this has been designed is actually its simple, perhaps restrictive nature. A nature that will give apps a better chance of having consistent messaging. The possible <a href="https://openui5.hana.ondemand.com/#docs/api/symbols/sap.ui.core.MessageType.html">message types are defined in the core</a>, and are displayed visually differently, via colour and icons. There’s an optional close button, and an optional link that is always displayed at the end of the message text. Pretty simple and neat.</p>
<p>And that’s about it, which in most cases, is all that will be needed, to display a useful short message in line within the application UI, especially in the context of desktop based UI designs. If you want to manage messages in a more complete way, you might want to take a look at the <a href="https://openui5beta.hana.ondemand.com/explored.html#/entity/sap.m.MessagePopover/samples">Message Popover</a>. But don’t dismiss the new Message Strip, it may just be what you’re looking for.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>JavaScript Do&#39;s and Don&#39;ts for UI5</title>
      <link href="https://qmacro.org/blog/posts/2015/07/04/javascript-do&#39;s-and-don&#39;ts-for-ui5/"/>
      <updated>2015-07-04T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2015/07/04/javascript-do&#39;s-and-don&#39;ts-for-ui5/</id>
      <content type="html">
        <![CDATA[
      <p><strong><a href="/blog/posts/2015/07/04/30-days-of-ui5/">30 Days of UI5</a>  — Day 7 by <a href="//qmacro.org/about/">DJ Adams</a></strong></p>
<p><img src="/images/2018/02/Screen-Shot-2015-07-04-at-10.00.14.png" alt="Screenshot of coding issues menu item"></p>
<p>In recent versions of the SDK you’ll find a new section called “<a href="https://openui5.hana.ondemand.com/#docs/guide/030fcd14963048218488048f407f8f34.html">Coding Issues to Avoid</a>“. It’s great to see this take shape and start to become formalised. Some of them are obvious, at least to some folk, but it’s always helpful to have a reference.</p>
<p>Let’s have a look at a couple of the Do’s and Don’ts here.</p>
<p>The top item on my list is “Don’t use private and protected methods or properties of UI5″. Far too often, I see code that refers to internal properties of UI5 controls, especially to the arrays and maps that are managed internally (for the aggregations, for example). I think it’s fair to say that 98% of the time, the use here is totally wrong, and there’s a public API to give you what you want. There have been a couple of instances in the past where I’ve seen something for which there appeared no equivalent ‘legal’ alternative, but that could be down to API maturity, or lack of documentation.</p>
<p>Related to this item is almost the antithesis, which is to use (create) properties that inadvertently clobber properties of the same name in an existing context. A great example of this is within a controller definition. There’s a nice pattern, which can be seen in many places including the reference apps in the SAP Web IDE, where in any given controller you would create controller properties to refer to the related view, and often the domain or view properties model, in the init event, like this:</p>
<pre class="language-javascript"><code class="language-javascript">sap<span class="token punctuation">.</span>ui<span class="token punctuation">.</span><span class="token function">controller</span><span class="token punctuation">(</span><span class="token string">"local.controller"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><br><br>  <span class="token literal-property property">_oView</span> <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span><br> <br>  <span class="token function-variable function">onInit</span> <span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br>    <span class="token keyword">this</span><span class="token punctuation">.</span>_oView <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br>  <span class="token punctuation">}</span><span class="token punctuation">,</span><br> <br>  <span class="token function-variable function">onSomeEvent</span> <span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">oEvent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br>    <span class="token operator">...</span><br>    <span class="token keyword">this</span><span class="token punctuation">.</span>_oView<span class="token punctuation">.</span><span class="token function">someFunction</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br>    <span class="token operator">...</span><br>  <span class="token punctuation">}</span><br><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>But sometimes the developer, averse to underscores, will write it like this:</p>
<pre class="language-javascript"><code class="language-javascript">sap<span class="token punctuation">.</span>ui<span class="token punctuation">.</span><span class="token function">controller</span><span class="token punctuation">(</span><span class="token string">"local.controller"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><br><br>  <span class="token literal-property property">oView</span> <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span><br> <br>  <span class="token function-variable function">onInit</span> <span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br>    <span class="token keyword">this</span><span class="token punctuation">.</span>oView <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br>  <span class="token punctuation">}</span><span class="token punctuation">,</span><br> <br>  <span class="token function-variable function">onSomeEvent</span> <span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">oEvent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br>    <span class="token operator">...</span><br>    <span class="token keyword">this</span><span class="token punctuation">.</span>oView<span class="token punctuation">.</span><span class="token function">someFunction</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br>    <span class="token operator">...</span><br>  <span class="token punctuation">}</span><br><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>What actually happens is that the call to</p>
<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">this</span><span class="token punctuation">.</span>oView <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>is clobbering the internal property oView of ‘this’ (the controller), which is pointing at the view it’s related to. Luckily what it’s being clobbered with in this small (underscore-less) antipattern is another reference to the view itself, so not much immediate harm done, but it’s not entirely safe or future proof.</p>
<p>Another interesting best practice described in this section of the SDK relates to internationalisation (i18n). What one should do is to use placeholders (such as {0}) in more complete sentences in translateable resources. What one often finds is that application texts are fragmented into short phrases and built up with concatenation, along with variables.</p>
<p>The problem is that sentence structure varies across languages – as described in the “Don’t” example in this section, a typical example is where the verb goes. It’s better to avoid programmatic text construction, and leave it to the translation experts. Go long, and go home.</p>
<p>Anyway, have a look at the rest of this <a href="https://openui5.hana.ondemand.com/#docs/guide/030fcd14963048218488048f407f8f34.html">JavaScript Code Issues</a> section in the SDK, plus there’s a <a href="https://openui5.hana.ondemand.com/#docs/guide/9d87f925dfbb4e99b9e2963693aa00ef.html">CSS Styling Issues</a> section too!</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Welcome to 30 Days of UI5!</title>
      <link href="https://qmacro.org/blog/posts/2015/07/04/welcome-to-30-days-of-ui5!/"/>
      <updated>2015-07-04T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2015/07/04/welcome-to-30-days-of-ui5!/</id>
      <content type="html">
        <![CDATA[
      <p><strong><a href="/blog/posts/2015/07/04/30-days-of-ui5/">30 Days of UI5</a> — Day 1 by <a href="//qmacro.org/about/">DJ Adams</a></strong></p>
<p><img src="/images/2018/01/OpenUI5_text_below_small.png" alt="OpenUI5 logo"></p>
<p>UI5, the collective short name for both SAPUI5 and OpenUI5, is soon to reach a milestone, with the release of 1.30. There’s already <a href="http://openui5.tumblr.com/post/121579731137/first-preview-of-openui5-1-30">a preview release available</a>.</p>
<p>The UI Development Toolkit for HTML5, to give it its proper long-form <a href="https://en.wikipedia.org/wiki/List_of_spacecraft_in_the_Culture_series">Culture-style name</a>, has come a long way in the last few years. It’s a multi-faceted tookit that shows pedigree, passion and influence from many directions. From the <a href="https://openui5.hana.ondemand.com/#test-resources/sap/ui/commons/demokit/Dialog.html">web dynpro inspired design roots</a>,  through the hard work and commitment from all the great designers and developers, to the exemplary responsive controls we have come to know and love in the sap.m library and beyond.</p>
<p><img src="/images/2018/01/opensource-168x300.png" alt="Message on London Transport sign"></p>
<p>And of course there’s <a href="http://scn.sap.com/community/developer-center/front-end/blog/2013/12/11/what-is-openui5-sapui5">the open sourcing of the toolkit</a>, a great move on SAP’s part, influenced not in a small way by many developers both external and internal to SAP. Many of the UI5 core team have open source in their blood, part of a new generation that is making SAP what it is today.</p>
<p>Where would SAP Fiori be without UI5? Nowhere. The engine behind the UX revolution that is powering today’s and tomorrow’s SAP applications (with S/4HANA) is UI5.</p>
<p>As Norman Cook might say, “<a href="https://open.spotify.com/album/6h3VY15qno2SJbgH2VuEnn">You’ve come a long way, baby</a>“.</p>
<p>So as a bit of fun, and to celebrate this version 1.30 milestone, here’s a series of 30 posts, one a day, on UI5 related topics. Small posts from me and some guest authors, designed to be read during a quick coffee break. Nothing earth shattering, but hopefully things that will whet your appetite for further reading, and perhaps bring to your attention features that you might not yet have had a chance to consider.</p>
<p>(This series is also available online, for the Kindle, at Amazon: <a href="https://www.amazon.co.uk/30-Days-UI5-Celebrating-milestone-ebook/dp/B017MOJEWG/">30 Days of UI5: Celebrating SAPUI5 and OpenUI5's milestone 1.30 release in Autumn 2015</a>.)</p>
<p><a href="https://www.goodreads.com/quotes/95859-share-and-enjoy-is-the-company-motto-of-the-hugely">Share and enjoy!</a></p>
<p><strong>The Series</strong></p>
<p>Day 1 – <a href="/blog/posts/2015/07/04/30-days-of-ui5/">Welcome to 30 Days of UI5!</a> by <a href="//qmacro.org/about/">DJ Adams</a> (this post)
Day 2 – <a href="/blog/posts/2015/07/05/expression-binding/">Expression Binding</a> by <a href="//qmacro.org/about/">DJ Adams</a>
Day 3 – <a href="/blog/posts/2015/07/06/semantic-pages/">Semantic Pages</a> by <a href="//qmacro.org/about/">DJ Adams</a>
Day 4 – <a href="/blog/posts/2015/07/07/creating-native-applications-with-ui5/">Creating Native Applications with UI5</a> by <a href="http://jmurray.me/">John Murray</a>
Day 5 – <a href="/blog/posts/2015/07/07/openui5-walkthrough/">OpenUI5 Walkthrough</a> by <a href="//qmacro.org/about/">DJ Adams</a>
Day 6 – <a href="/blog/posts/2015/07/09/the-app-descriptor-2/">The App Descriptor</a> by <a href="https://twitter.com/ThiloDev">Thilo Seidel</a>
Day 7 – <a href="/blog/posts/2015/07/04/javascript-dos-and-donts-for-ui5/">JavaScript Do’s and Don’ts for UI5</a> by <a href="//qmacro.org/about/">DJ Adams</a>
Day 8 – <a href="/blog/posts/2015/07/11/user-notifications-with-the-message-popover/">User Notifications with the Message Popover</a> by <a href="http://twitter.com/saoirse_22">Sean Campbell</a>
Day 9 – <a href="/blog/posts/2015/07/12/bootstrapping-ui5-locally-and-in-the-cloud/">Bootstrapping UI5 Locally and in the Cloud</a> by <a href="//qmacro.org/about/">DJ Adams</a>
Day 10 – <a href="/blog/posts/2015/07/13/handling-dates-with-the-date-picker/">Handling Dates with the Date Picker</a> by <a href="https://twitter.com/jameshale14">James Hale</a>
Day 11 – <a href="/blog/posts/2015/07/04/lightweight-notifications-with-the-message-strip/">Lightweight Notifications with the Message Strip</a> by <a href="//qmacro.org/about/">DJ Adams</a>
Day 12 – <a href="/blog/posts/2015/07/14/base-classes-in-ui5/">Base Classes in UI5</a> by <a href="https://twitter.com/ThiloDev">Thilo Seidel</a>
Day 13 – <a href="/blog/posts/2015/07/16/multi-language-support-out-of-the-box-ui5-s-pedigree/">Multi-language support out of the box – UI5's pedigree</a> by <a href="//qmacro.org/about/">DJ Adams</a>
Day 14 – <a href="/blog/posts/2015/07/17/speeding-up-your-ui5-app-with-a-component-preload-file/">Speeding up your app with a Component preload file</a>  by <a href="http://jmurray.me/">John Murray</a>
Day 15 – <a href="/blog/posts/2015/07/18/the-ui5-support-tool-help-yourself/">The UI5 Support Tool – Help Yourself!</a> by <a href="//qmacro.org/about/">DJ Adams</a>
Day 16 – <a href="/blog/posts/2015/07/19/ui5-and-coding-standards/">UI5 and Coding Standards</a> by <a href="//qmacro.org/about/">DJ Adams</a>
Day 17 – <a href="/blog/posts/2015/07/20/ui5-and-fiori-the-story-of-open-and-free/">UI5 and Fiori – The Story of Open and Free</a> by <a href="https://twitter.com/applebyj">John Appleby</a>
Day 18 – <a href="/blog/posts/2015/07/21/mvc-model-view-controller-minimum-viable-code/">MVC – Model View Controller, Minimum Viable Code</a> by <a href="//qmacro.org/about/">DJ Adams</a>
Day 19 – <a href="/blog/posts/2015/07/22/a-short-ui5-debugging-journey/">A Short UI5 Debugging Journey</a> by <a href="//qmacro.org/about/">DJ Adams</a>
Day 20 – <a href="/blog/posts/2015/07/23/fragments-and-minimum-viable-code/">Fragments and Minimum Viable Code</a> by <a href="//qmacro.org/about/">DJ Adams</a>
Day 21 – <a href="/blog/posts/2015/07/24/spreading-the-ui5-message/">Spreading the UI5 Message</a> by <a href="//qmacro.org/about/">DJ Adams</a>
Day 22 – <a href="/blog/posts/2015/07/25/merging-lists-with-ui5/">Merging Lists with UI5</a> by <a href="https://uk.linkedin.com/pub/christopher-choy/53/21/b71">Chris Choy</a>
Day 23 – <a href="/blog/posts/2015/07/26/taming-the-resource-model-files/">Taming the Resource Model Files</a> by <a href="http://twitter.com/lxinspc">Nathan Adams</a>
Day 24 – <a href="/blog/posts/2015/07/27/an-introduction-to-sap-ui-define/">An introduction to sap.ui.define</a> by <a href="//qmacro.org/about/">DJ Adams</a>
Day 25 – <a href="/blog/posts/2015/07/28/the-experimental-client-operation-mode/">The experimental Client operation mode</a> by <a href="//qmacro.org/about/">DJ Adams</a>
Day 26 – <a href="/blog/posts/2015/07/29/ui5-looking-back-and-forward/">UI5 – looking back and forward</a> by <a href="//qmacro.org/about/">DJ Adams</a>
Day 27 – <a href="/blog/posts/2015/07/30/ui5-a-non-techie-newbies-view/">A non-techie PM’s view of UI5</a> by <a href="https://twitter.com/jongregs/">Jon Gregory</a>
Day 28 – <a href="/blog/posts/2015/07/31/ui5-version-info/">UI5 Version Info</a> by <a href="//qmacro.org/about/">DJ Adams</a>
Day 29 – <a href="/blog/posts/2015/08/01/revisiting-the-xml-model/">Revisiting the XML Model</a> by <a href="//qmacro.org/about/">DJ Adams</a>
Day 30 – <a href="/blog/posts/2015/08/02/the-origin-of-becoming-a-fundamental-enabler-for-fiori/">The origin of becoming a fundamental enabler for Fiori</a> by <a href="https://twitter.com/uxsamyen">Sam Yen</a></p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Email Discipline</title>
      <link href="https://qmacro.org/blog/posts/2015/07/03/email-discipline/"/>
      <updated>2015-07-03T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2015/07/03/email-discipline/</id>
      <content type="html">
        <![CDATA[
      <p>If you’re wondering why I don’t reply to your email straight away, it’s because I try to discipline myself to email tasks generally twice a day. Once in the morning, and once again around lunchtime or in the early evening. This discipline is related to my attempts to be more focused upon, and more effective at the work I have to do. For background information, see my post <a href="/blog/posts/2015/03/15/the-maker's-schedule-restraint-and-flow/">The Maker’s Schedule, Restraint and Flow</a> and in particular the video from Scott Hanselman to which it refers.</p>
<p>If you need to get hold of me urgently (i.e. within hours), then give me a call. But be warned, I may not be able to answer immediately if I’m on a Pomodoro. Thanks!</p>
<p>(For more on email and work, see <a href="/blog/posts/2017/08/30/things-i-do-to-make-my-work-life-better/">Things I do to make my work life better</a>.)</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>JSON List Binding and maps</title>
      <link href="https://qmacro.org/blog/posts/2015/05/20/json-list-binding-and-maps/"/>
      <updated>2015-05-20T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2015/05/20/json-list-binding-and-maps/</id>
      <content type="html">
        <![CDATA[
      <p>This morning, on a long train journey up from near Reading to Barnsley, I was hacking on a UI5 app. I had a custom module to munge some JSON data into the shape I needed, and was binding the items aggregation of a List control to part of the resulting data structure.</p>
<p>In the developer console, I was examining the data structure in the JSON Model that was set on the List, and did a double-take. I’d mistakenly generated a map rather than an array, as the value of the property to which I wanted to bind the items aggregation. Naturally, I thought, it needed to be an array, but I had spotted that it was a map – the output of a nice little reduce function I was nicely proud of, with my functional JavaScript hat on (but that’s another story).</p>
<p>So I looked across to the app itself, expecting the List to be empty. But it wasn’t! It was showing exactly what I had expected to see, had the value of the property been an array. What was going on?!</p>
<p>After some digging, I found out. Introduced on 10 Dec 2014, within the 1.28.0 release, was a modest feature:</p>
<address>**[[FEATURE] sap.ui.model.json.JSONListBinding: iterate over maps](https://github.com/SAP/openui5/commit/38ab764601c061d5fbf256f8bb4703cd4ec89022)**  
 Enhance JSONListBinding to iterate over maps (by key), not just over  
 arrays (by index).</address>Interesting! A small modification to the JSON List Binding to treat the indices of a map as if they were of an array. After all, in JavaScript, arrays and maps are perhaps more closely related than one might think.
<p>I set about confirming what I’d found with a small test on Plunkr, “<a href="http://plnkr.co/edit/QQU4bPNb5Kg65vZ8vnad?p=preview">Aggregation Binding Test</a>“:</p>
<p><img src="/images/2015/05/Screen-Shot-2015-05-20-at-19.11.18.png" alt="image"></p>
<p>But don’t take my word for it – the author has also added a test to the <a href="https://openui5.hana.ondemand.com/test-resources/sap/ui/core/qunit/JSONListBinding.qunit.html">JSON List Binding QUnit tests</a>:</p>
<p><img src="/images/2015/05/Screen-Shot-2015-05-20-at-19.14.05.png" alt="image"></p>
<p>It makes sense to blur the distinction between maps and arrays when it comes to aggregation bindings; already I have a use for it, and I didn’t even know the feature had been implemented!</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>openSAP Experiences</title>
      <link href="https://qmacro.org/blog/posts/2015/04/22/opensap-experiences/"/>
      <updated>2015-04-22T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2015/04/22/opensap-experiences/</id>
      <content type="html">
        <![CDATA[
      <p>(Please <a href="#opensapupdate">see the update</a> from later the same day as I posted this, at the bottom.)</p>
<p>Don’t get me wrong, the openSAP initiative is excellent, free learning materials of high quality? Yes please and thank you! This instills a passion in me (and I’m sure many others) for (a) learning more and (b) trying to attain the highest achievement. In the case of openSAP, this means trying to attain high marks in the assignments.</p>
<p>Unfortunately, the question and answer sections of the weekly assignments sometimes get in the way of that, in that the questions and / or answers are ambiguous. The current openSAP course “<a href="https://open.sap.com/courses/fiux1/">Build Your Own SAP Fiori App in the Cloud</a>“, has great content but the questions are dubious. Here are a couple of examples, that we’re <a href="https://twitter.com/qmacro/status/590774440969031680">discussing on Twitter right now</a>:</p>
<p>In the assignment for Week 2, there is the following question, with the 4 possible answers thus:</p>
<p><em>Within the context of SAP HANA Cloud Platform, where do applications run?</em><br>
<em>(a) In the HANA Database</em><br>
<em>(b) Inside the cockpit</em><br>
<em>(c) In an SAP HANA Cloud Platform account</em><br>
<em>(d) On the SCN community page of SAP HANA Cloud Platform</em></p>
<p>The officially correct answer has been marked as (c). But an account is not somewhere where code can be <em><strong>run</strong></em>. It’s not an execution environment. It’s an accounting, configuration, billing artifact. It’s the credentials, the units of computing allocated and allowed, it’s the sets of permissions for access to features and subscriptions and so on. It’s not an execution environment. So there’s no way that anything can <em><strong>run</strong></em>in the SAP HCP <em><strong>account.</strong></em> The nearest correct answer as far as I could see is (a). But that’s not entirely accurate. However, the ambiguity of this question and the possible answers force me to choose “the nearest that makes sense” which is (a), as (c) can certainly <em>not</em> be correct.</p>
<p>Another example is in the assignment for Week 3, where there’s the following question and 4 possible answers:</p>
<p><em>Which end-to-end application development phases are currently supported by SAP Web IDE?</em><br>
<em>(a) Prototyping, developing, testing, deploying, and extending</em><br>
<em>(b) Requirements management, prototyping, developing, testing, deploying, and extending</em><br>
<em>(c) Prototyping, developing, functionality testing, A\B testing, deploying, and extending</em><br>
*(d) Developing, testing, deploying, and extending *</p>
<p>The officially correct answer has been marked as (d).</p>
<p>The official download materials for this week contain, as usual, a complete transcript of all the units, the slides, and the videos. This is great in itself. Unfortunately, the official transcript records exactly what the instructor said, which is (starting at 00:02:22, bold emphasis mine):</p>
<p>*And we do so by <strong>covering the end-to-end application development lifecycle with one tool. And when we refer to the end-to-end application lifecycle development, we start from the prototyping of the application</strong>, then the development, the testing on the different devices of course, the packaging and the deployment into different application landscape and then later on after we released the application, also the extension of the application in order to customize it and make it suitable for the different scenarios and**customers. *</p>
<p>The slide related to this section looks like this:</p>
<p><img src="/images/2015/04/Screenshot-2015-04-22-at-08.35.41.png" alt="image"></p>
<p>See that tiny couple of words in a footnote in the bottom left? They say “*future innovation”. The instructor didn’t mention this, so if you didn’t see the slide or were watching on your smartphone (which I was) where it was too small to see, but were nevertheless intensely listening to her, and then reading the transcript to double check the facts, you would not have noticed this.</p>
<p>Now call me old fashioned, but if the transcript says that prototyping is supported, then I take it that prototyping is supported. But I don’t just take the transcript’s word for it … <strong>I do prototyping</strong> in the SAP Web IDE. I don’t use the Powerpoint-based kit, I build simple views in XML either by hand in the coding editor, or sometimes with the layout editor. So practically speaking, the SAP Web IDE does support prototyping, regardless of what is or is not said.</p>
<p>The challenge is not the course itself, the content, as I said, is great. The challenge is setting clear questions with unambiguous answers. Here are two occasions (and there have been others, on other openSAP courses in the past) where this is not the case.</p>
<p>I’m passionate about learning and sharing knowledge, and being the best I can be. Something like this where incorrect answers are given as the officially correct answers, does make me somewhat sad.</p>
<p>But one thing’s for certain: If you’re reading this and not participating in the course, head on over there right now and catch up with these great learning opportunities!</p>
<p><a href=""></a><strong>Update 21:30 on the same day:</strong></p>
<p>Now this is worth shouting about. Around 3 hours after I took part in the discussions on Twitter this morning and published this post, the regular weekly “Welcome to Week N” email arrived in my inbox as usual. But what was special was this section:</p>
<p><span style="text-decoration: underline;"><em>Weekly Assignments: Problematic Questions in Weeks 2 and 3</em></span>*Week 2: Within the context of SAP HANA Cloud Platform, where do applications run?**Week 3: Which end-to-end application development phases are currently supported by SAP Web IDE?**In both these cases, we realized that the questions were slightly misleading. You can *<em>find more information on the discussion forums for weeks 2 and 3. To ensure fairness toall our learners, we will assign full points for these questions to all learners who took the weekly assignments. Your scores will be adjusted at the end of the course.</em></p>
<p>This is the openSAP team directly and pretty much immediately addressing our concerns and worries, <em>within a few hours</em>. I cannot commend the openSAP team enough for this. Not primarily for addressing the issue (issues arise in all manner of contexts, that’s normal), but for being ultra responsive and in touch with the participants of the course <em>directly</em>.</p>
<p>Other MOOCs, heck, other educational institutions in general, please take note. <strong>The openSAP team shows how it’s done</strong>.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>This Week in Fiori (2015-16)</title>
      <link href="https://qmacro.org/blog/posts/2015/04/19/this-week-in-fiori-(2015-16)/"/>
      <updated>2015-04-19T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2015/04/19/this-week-in-fiori-(2015-16)/</id>
      <content type="html">
        <![CDATA[
      <p><img src="/images/2015/04/Screen-Shot-2015-04-19-at-09.45.08.png" alt="Ariba UX"></p>
<p>Greetings! It’s time yet again to share a few newsworthy items that caught my eye this week in the world of Fiori. Let’s get to it!</p>
<p><strong><a href="https://youtu.be/opbypeGLZd0">Ariba Total User Experience</a> by Ariba</strong>
We start out with something from earlier this month that just came to my attention via an article in SearchSAP – “<a href="http://searchsap.techtarget.com/news/4500244534/Ariba-unveils-major-overhaul-of-UI">Ariba unveils major overhaul of user interface</a>“. At this month’s Ariba Live conference Ariba revealed their new “Total User Experience” approach to improving the user experience for their products. And it comes as no great surprise to see that it is — as SAP have been saying it would be — aligned with the SAP Fiori UX approach. Here’s a tweet from Tridip Chakraborthy:</p>
<blockquote>
<p><a href="https://twitter.com/hashtag/AribaLIVE?src=hash">#AribaLIVE</a> Boom Woot Woot ! introducing the <a href="https://twitter.com/ariba">@ariba</a> <a href="https://twitter.com/hashtag/mobile?src=hash">#mobile</a> app <a href="https://twitter.com/hashtag/catalog?src=hash">#catalog</a> #<a href="https://twitter.com/hashtag/SAPFiori?src=hash">#SAPFiori</a> user interface paradigm shift <a href="https://twitter.com/hashtag/UX?src=hash">#UX</a> <a href="http://t.co/8XAZRzMkBJ">pic.twitter.com/8XAZRzMkBJ</a></p>
<p>— Tridip Chakraborthy (@tridipchakra) <a href="https://twitter.com/tridipchakra/status/586212694644011009">April 9, 2015</a></p>
</blockquote>
<script async="" charset="utf-8" src="//platform.twitter.com/widgets.js"></script>
<p>You can clearly see the huge similarities in UX design and approach even from this one photo. The SearchSAP article states that “the Ariba UI does not share code with Fiori, but uses the same stylesheets, giving it a similar look and feel”. In a post based on my keynote at Mastering SAP Technologies conference earlier this year, titled “<a href="http://www.bluefinsolutions.com/Blogs/DJ-Adams/March-2015/Can-I-build-a-Fiori-app-Yes-you-can!/">Can I build a Fiori app? Yes you can!</a>“, I’d written:</p>
<blockquote>
<p>If you think about it, that abstraction, that distinction between philosophy and practicality, is the one way SAP can continue to forge ahead with some sort of (eventually) unifying user experience strategy while at the same time dealing with the reality of products from differing sources, with differing frontends – Concur, Ariba, Lumira, and more.</p>
</blockquote>
<p>That abstraction is clearly in evidence here. I’d be really interested to see more details of how Ariba’s SAP Fiori UX “Total User Experience” looks under the hood, to discover how it ticks. It certainly looks great on the surface!</p>
<p><strong><a href="http://scn.sap.com/community/mobile/blog/2015/01/14/maximize-your-investment-in-sap-fiori-free-practitioners-forum-best-practices">SAP Fiori Practitioners Forum</a> by Katie Moser</strong>
Katie announced this back in January but I’ve only recently joined and I’m looking forward to getting involved and sharing best pratices with the other members. According to the post, this monthly forum is “designed to help you drive the successful deployment of SAP Fiori in your organisation”.</p>
<p>I understand that the sessions so far have been very useful. As we have all discovered already, Fiori is a multi faceted thing, and a place to discuss practicalities from design &amp; configuration through rollout and beyond, with like minded individuals is a great idea. (Note that it’s sensibly only open to those that have installed Fiori).</p>
<p><strong><a href="http://www.telerik.com/kendo-ui/sap-fiori-theme-html5-widgets">SAP Fiori Theme for Kendo UI</a> by Telerik</strong></p>
<p><img src="/images/2015/04/Screen-Shot-2015-04-19-at-11.18.16-244x300.png" alt="Screen Shot 2015-04-19 at 11.18.16"></p>
<p>Well not only do we have Ariba now embracing Fiori, but also a JavaScript UI framework by the name of <a href="http://www.telerik.com/kendo-ui">Kendo UI</a>. This framework is jQuery based, with <a href="https://angularjs.org/">AngularJS</a> integration and support for <a href="http://getbootstrap.com/">Bootstrap</a> and more. Unlike <a href="http://openui5.org">OpenUI5</a>, which is the version of SAPUI5 (that powers SAP Fiori UX) that SAP open sourced, Kendo UI is software that comes in the form of a 30-day free trial, with a purchase required after that.</p>
<p>I watched the short video demo and it’s an interesting prospect. It’s not exactly the same, but pretty close. If you’re like me, one who has pored over the controls in UI5 for a long time, things are not quite the same, although from a distance you could almost be forgiven for mistaking it for “the real thing” (how that is defined is another story).</p>
<p>It’s worth bearing in mind that no amount of styling of controls will make an app into a Fiori app; while the styling is incredibly important and goes along way to helping the developer build Fiori apps, it’s just one pillar that supports the whole Fiori UX approach. The other pillars are responsiveness, design patterns and the other constraints and that are well described in the <a href="http://experience.sap.com/fiori-guidelines/index.html">SAP Fiori Design Guidelines</a>.</p>
<p>Well that’s just about it for this week. Until next time, share and enjoy!</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>This Week in Fiori (2015-15)</title>
      <link href="https://qmacro.org/blog/posts/2015/04/14/this-week-in-fiori-(2015-15)/"/>
      <updated>2015-04-14T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2015/04/14/this-week-in-fiori-(2015-15)/</id>
      <content type="html">
        <![CDATA[
      <p><img src="/images/2015/04/Screen-Shot-2015-04-14-at-09.13.55-150x150.png" alt="Screen Shot 2015-04-14 at 09.13.55"></p>
<p>Well hello there folks. This week sees the start (for me) of a week off on holiday, but not before I put out this latest episode of TWIF for a quick roundup of things that caught my eye in the world of Fiori. If you have any stories to share, let me know!</p>
<p><strong><a href="http://sapinsider.wispubs.com/Assets/Articles/2015/April/SPI-SAP-Fiori-application-development-in-the-cloud">SAP Fiori Application Development in the Cloud</a> by Monika Kaiser &amp; Karl Kessler</strong>
The subtitle of this article in SAPinsider magazine is “Building, Deploying and Mobilizing Applications for Today’s Enterprises”. And as a great introduction, it certainly delivers on that. Not surprising given Karl’s pedigree in knowing about and writing about SAP technologies :-)</p>
<p>This is very much a getting started article, but where it scores is in the detailed and annotated set of screenshots that are useful for introducing folks to the whole process of building a Fiori app. Not generally, but specifically using SAP’s HANA Cloud tools, including the SAP HANA Cloud Platform, the SAP Web IDE and SAP Mobile Secure.</p>
<p>The article does remind me of the conversation I have with many developers at customers and partners as well as with individuals. It usually starts like this: “Q: Should I use SAP Web IDE as my main editor?” closely followed by “A: Well, it depends …”. There’s a mentality, or a mindset, amongst SAP developers that is hard to shake, because of decades of the same experience.</p>
<p>As ABAP developers, we’ve been used to having to use SE38, SE80, SE24 and the like. Having the tool question pre-answered for us. And many of us have waited on SAP’s every word, even in the dark days when Eclipse was recommended as <em>the</em> development platform. Now we have a choice, but many are looking to SAP for recommendations. And it makes some sense – SAP need to invest in building tools for the army of SAP programmers out there for many reasons. With the SAP Web IDE, they’ve landed with both feet on the ground, in that it’s not unpleasant to use and it comes with great productivity features that Just Work(tm). What’s more, no-one is saying that SAP Web IDE should be your <em>only</em> editor.</p>
<p>Yes, I know that SAP Web IDE is based upon Orion, but you’re not going to convince me that it’s the same thing. I use SAP Web IDE to start some projects off; I’ve even dabbled with the great plugin and templating system (see “<a href="https://www.youtube.com/watch?v=jAp_nGqOT_c">SAP Fiori Rapid Prototyping: SAP Web IDE and Google Docs</a>“), and the test offline version (see “<a href="https://www.youtube.com/playlist?list=PLfctWmgNyOIfF6gbmp_PZGNgn6YVJHfyU">SAP Web IDE Local Install – Up and Running</a>“). But I don’t religiously stay with that as my main development environment … for that, I prefer a combination of a local NodeJS based server and the Atom editor right now. Mostly because a lot of the time I’m developing, I’m on the move, with little or no Internet access.</p>
<p>Today we’re in a very nice situation where there are tools from SAP available, and we can choose to use them as much or as little as we see fit. For me that’s a great improvement on earlier periods. Take a look at this article if you haven’t seen the SAP Web IDE yet, and you can make your own mind up.</p>
<p><strong><a href="http://scn.sap.com/community/developer-center/front-end/blog/2015/04/07/sap-web-ide--the-simple-way-to-build-and-extend-sapui5-applications">SAP Web IDE: The Simple Way to Build and Extend SAPUI5 Applications</a> by Yaad Oren</strong>
While we’re on the subject of the SAP Web IDE, here’s an opportunity to learn more about it specifically from one of the many great folks involved in its development and nurturing.</p>
<p>It’s an hour long video, and includes a presentation from an SAP Web IDE user, PepsiCo.</p>
<p>(I wish SAP would make these videos available on YouTube too – I manage 95% of my viewing activities there, with playlists and “watch later”, and can sit down in front of the TV to catch up. Please, SAP?)</p>
<p><strong><a href="http://scn.sap.com/community/gui/blog/2015/04/08/user-experience-sessions-at-sapphire-now-2015-sap-screen-personas-fiori-ux-design-services/">User Experience sessions at SAPPHIRE NOW 2015</a> by Peter Spielvogel</strong>
I don’t normally talk much about Sapphire Now, I’m much more interested in <strong>SAP’s main annual event – SAP TechEd &amp;&amp; d-code</strong> :-) But of course, without the business, SAP, primarily a software and platform company that just happens to write business applications, would struggle to survive.</p>
<p>Yes, of course that was a troll, but I make no apologies for saying it. With huge emphasis on the User Experience (UX) you can expect plenty of sessions covering this topic and related topics too. The subtitle to Peter’s blog post is “SAP Screen Personas, Fiori UX, Design Services”. As you can imagine, being a conference focused on the business rather than the technology, on the surface rather than on the mechanics underneath the surface, you’re not going to find much in the way of the toolkit that <em>powers</em> Fiori – UI5. There are a total of 8 sessions that I could find, via the agenda builder, that mentioned SAPUI5. But that’s sort of the point. Much more important are the myriad sessions that Peter lists in his post, covering personalised user experiences with S/4HANA, SAP Screen Personas, SAP Fiori LaunchPad and more.</p>
<p>The UX topic is wide and varied, and while I will continue to loosely categorise SAP Fiori as a strategic approach and SAP Screen Personas as a tactical approach to UX, the fact is that with the LaunchPad becoming the new portal, and with businesses wanting access to more than what the current collection of SAP Fiori apps covers, there will be, for a long time, a hybrid solution to the overall user access and user experience to business data and processes.</p>
<p>What’s important is that we understand where SAP Screen Personas fits in, and with HTML5-based version 3 of the product (with JavaScript scripting support and more), just around the corner for all comers, we can easily imagine a cross-technology approach to all the tools required for a business user to carry out their responsibilities. With judicious use of theming and styling, we could move one step closer to that nirvana of a unified UX.</p>
<p></p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>This Week in Fiori (2015-14)</title>
      <link href="https://qmacro.org/blog/posts/2015/04/05/this-week-in-fiori-(2015-14)/"/>
      <updated>2015-04-05T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2015/04/05/this-week-in-fiori-(2015-14)/</id>
      <content type="html">
        <![CDATA[
      <p>Well hello again, this episode is brought to you from my woodstore at the bottom of the garden, where it’s actually warm enough to sit outside for the first time. The birdsong is prominent, I guess their user experience is improving with the ground softening and the worms and grubs becoming more accessible. Let’s go!</p>
<p><strong><a href="http://scn.sap.com/community/abap/blog/2015/04/01/fiori-notes-1-one-ux-to-rule-them-all">FIORI Notes 1 : One UX to Rule them All</a> by Wilbert Sison</strong>
This week saw a simple post by Wilbert summarising a few of the key places to visit on one’s journey to Fiori enlightenment: The <a href="http://demo-fioritrial.dispatcher.hana.ondemand.com/">Fiori Cloud Edition Trial</a>, the <a href="http://www.sap.com/fiori-apps-library">Fiori Apps Library</a> and the UI5 <a href="https://sapui5.netweaver.ondemand.com/sdk/explored.html">Explored</a> app within the SAPUI5 SDK (the more I ponder the name and the purpose and what it’s becoming, perhaps we should rename it from Explored to <em>Explorer</em>). What caught my eye with this post is that it was published in the <a href="http://scn.sap.com/community/abap/blog">ABAP Development</a> section of the SAP Community Network, and it also gave rise to a short discussion on UI access to HANA.</p>
<p>First, the place the post was published. Fiori, and by direct inference UI5, is a cornerstone technology for SAP’s product landscape. What this means in practical terms is that we as SAP technicians need to embrace UI5 as much as we embraced dynpro technologies in the past. It’s that big. Having given a 3 day course on Fiori, UI5 and Gateway/OData last week, with my co-presenter <a href="www.bluefinsolutions.com/Blogs/Lindsay-Stanger/">Lindsay Stanger</a>, to a collection of Web and ABAP developers (their own self-descriptions), it’s worth re-iterating the reality for many of us out there; many of us so-called ABAP developers. For me, the concept of an “ABAP developer” is somewhere between “meaningless” and “unneccessarily restricting”. Yes, there are developers out there that call themselves “<language> developers” or “<platform> developers”, and that is their perogative, but it’s an artificial constraint that is not helpful, and reminds me of “COBOL developer”. There will always be (in the forseeable future) demand for some COBOL skills, but is that the entirety of your outlook? If a mainframe dinosaur and ABAP developer like me can embrace UI5, so can you.</p>
<p>Then, there’s the question of UI, that came up in the comments to Wilbert’s post. It reminded me of a <a href="https://twitter.com/jhmoy/status/583069583495446528">great Twitter thread initiated by John Moy</a> where the frontend future for S/4 was discussed. I’ll leave it to you to enjoy reading that thread, but the takeaway for me was that people do understand that while wall-to-wall Fiori might be the vision, the reality will be different, particularly in the transition period while the Fiori app suites are constructed and made available. And for those of you pondering the earlier point about ABAP, and this one where SAPGUI and therefore dynpro is not going to disappear any time soon, think of COBOL again ;-)</p>
<p><strong>April New App Distribution via SAP Fiori Apps Library</strong>
The SAP Fiori Apps Library is lots of things rolled into one. It’s a nice talking point and focus for the Fiori pundits, an example of a publically accessible Fiori App (where, being Web native, the frontend source code is available for perusing and learning from), and a good source of information on current Fiori apps. And I don’t mean just human readable information, but machine readable data too. I’d exhorted SAP back in August last year (in <a href="/blog/posts/2014/08/31/this-week-in-fiori-2014-35/">TWIF episode 2014-35</a>) to make the data available, to supply “a machine readable dataset”. And that they have done, as of course the backend data source to the <a href="http://www.sap.com/fiori-apps-library">SAP Fiori Apps Library</a> tool.</p>
<p>This of course is an OData source, from a HANA backend, and rich in information. Not only is it useful for powering the Fiori Apps Library app itself, but also for our own data-based analysis. You might have seen my post from earlier this year, where I showed you how to pull data from this very OData source into a spreadsheet:</p>
<p><a href="/blog/posts/2015/01/09/fiori-app-data-into-a-spreadsheet-challenge-accepted/">Fiori App Data into a Spreadsheet? Challenge Accepted!</a></p>
<p>Thing is, while this data is valuable in and of itself, if you add a further dimension, time, it becomes perhaps even more valuable. What are the apps that are appearing over time, over the different waves? Are there any that are disappearing? Current total app count as of today is 541. Last month (an unscientifically and deliberately vague point in time, for now) it was 495. So that’s 46 new apps that have appeared (none disappeared, I also checked).</p>
<p><img src="/images/2015/04/Screenshot-2015-04-05-at-13.46.17.png" alt="image"></p>
<p>I think it might be a worthwhile exercise to pull this app data on a regular basis, for comparisons over time. So as a starter, I have an experimental spreadsheet, <a href="https://docs.google.com/spreadsheets/d/1ob-0M9Qn6duMVxC05A2w1ekxR8H3Nc-etb_Fz6Y_4z0/edit?usp=sharing">Fiori Apps Data</a>, with two snapshots, March and early April. I’ve added a few analysis tabs and one of the products is this breakdown of new apps by area, that I’ve titled “New Apps Distribution”.</p>
<p>Do you think this is useful? What other information can we work out with this new time dimension? How often do you think we should or could take a snapshot? Weekly? Daily? Could this be a community curated data set?</p>
<p>Answers on a postcard (or in the comments) please!</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>This Week in Fiori (2015-13)</title>
      <link href="https://qmacro.org/blog/posts/2015/03/28/this-week-in-fiori-(2015-13)/"/>
      <updated>2015-03-28T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2015/03/28/this-week-in-fiori-(2015-13)/</id>
      <content type="html">
        <![CDATA[
      <p>Well, another week has gone by, which means it must be time for This Week in Fiori! The Fiori juggernaut continues to rumble on, and this week was no exception. Let’s get to it!</p>
<p><strong><a href="https://open.sap.com/courses/fiux1">Build Your Own SAP Fiori App in the Cloud</a> by openSAP</strong>
This week saw the start of the new free course at openSAP, which, according to the description, is all about “building your own SAP Fiori app that’s just as delightful and user-friendly as any of the hundreds SAP has built directly”.</p>
<p>This is great news, especially for those of us who had signed up to the earlier course “Introduction to SAP Fiori UX” but had been rather disappointed that it had had nothing much to do with Fiori UX, and more to do with deployment and setup. I wrote about this in <a href="/blog/posts/2014/10/07/this-week-in-fiori-2014-40/">TWIF episode 2014-40</a>. A number of us did have a dialogue with the openSAP folks at the time, and I’m delighted to see our comments were taken on board – this new course looks to be what we have been waiting for.</p>
<p>So we’re into Week 1 of this new nine week course, and already in the last unit of Week 1 — Unit 5, Introduction to SAPUI5 and OData — we’re seeing JSON and XML on the slides, HTTP headers, and even a small glimpse at the superb UI5 toolkit, including a tiny controller and an XML View definition. This is more like it! Technical details on the slides.</p>
<p>Don’t get too excited, however. I spotted some errors in this unit that aren’t trivial. I’ve built courses before and I know how hard it is to get things consistent, but one thing you must do is be accurate. Here are some of the things I spotted:</p>
<p><em>“OData … is using SOAP and REST to communicate between systems”</em></p>
<p>OK, so first, REST isn’t a protocol, it’s an architectural style, so it is difficult to use a style to communicate between systems. But that is sort of forgivable, in that perhaps more accurately one could say that the OData protocol has RESTful tendencies. But SOAP? No. OData has nothing to do with SOAP, in fact, one could say that the OData protocol is orthogonal to SOAP.</p>
<p><em>“One of the most important libraries we have today is sap.ui.m”</em></p>
<p>I’m guessing that’s just a typo that found its way up through the layers to the actual presentation script. Because while there are libraries with the sap.ui prefix, there is no sap.ui.m. What the instructor is referring to is <a href="https://openui5.hana.ondemand.com/#docs/api/symbols/sap.m.html">sap.m</a>. The m originally stood for “mobile”, but now stands for “main”. The sap.m library is one of the main collections of responsive controls which are used to build Fiori apps. For more info, you might want to read “<a href="http://www.bluefinsolutions.com/Blogs/DJ-Adams/February-2014/M-is-for-responsive/">M is for ‘responsive’</a>“.</p>
<p><em>“We have a library [sap.ui.table] for table, and that provides me with the ability to create a table that is very rich in data but also responsive”</em></p>
<p>For responsive tables, you probably want to look at the <a href="https://openui5.hana.ondemand.com/explored.html#/entity/sap.m.Table/samples">sap.m.Table</a> control, rather than the sap.ui.table library, as the former is designed from the ground up to be responsive, whereas the latter is more for desktop apps.</p>
<p><em>MVC – View &lt;-&gt; Model data binding</em></p>
<p>In slide 13, there’s a classic MVC style diagram, but the data binding relationship between the view and the model seems to be shown as one way only:</p>
<p><img src="/images/2015/03/Screenshot-2015-03-28-at-14.12.27-300x47.png" alt="Screenshot 2015-03-28 at 14.12.27"></p>
<p>One of the many features of the powerful model mechanism and the data binding therein is that you can have two way binding. So I’d have drawn that arrow pointing both ways.</p>
<p><em>XML View definition</em></p>
<p>Being a stickler for accuracy (perhaps to the point of pedantry, of which I’m proud, not apologetic :-), this XML View definition on slide 14 is not quite accurate:</p>
<p><img src="/images/2015/03/Screenshot-2015-03-28-at-14.15.27.png" alt="Screenshot 2015-03-28 at 14.15.27"></p>
<p>The View is within the sap.ui.core.mvc namespace, not the sap.ui.core namespace, so the root element here should reflect that, like this:</p>
<pre><code>&lt;mvc:View xmlns:mvc=”sap.ui.core.mvc”
</code></pre>
<p><em>Router? Bueller?</em></p>
<p>So if I’m going all out, I might as well mention that one thing that I think slide 16 could have benefitted from is mention of the Router in the architecture overview diagram. I do appreciate that these slides may have come from a time before the Router concept was properly established, but the Router is an incredibly important part of any Fiori app, so it would have really helped to see it here.</p>
<p><img src="/images/2015/03/Screenshot-2015-03-28-at-14.21.38.png" alt="Screenshot 2015-03-28 at 14.21.38"></p>
<p>That said, now you know, you can go and find out more about it! :-)</p>
<p>Don’t get me wrong, I’m very excited about this course, and these issues can be ironed out now they’ve been surfaced. I’m looking forward very much to Week 2.</p>
<p><strong><a href="http://www.bluefinsolutions.com/About-us/News-and-Media/Events/Fiori-breakfast-event/">Fiori Breakfast Event</a> by <a href="https://twitter.com/callaghan001">Brenton O’Callaghan</a>, <a href="http://www.bluefinsolutions.com/Blogs/Lindsay-Stanger/">Lindsay Stanger</a> and me</strong>
On Tuesdsay morning this week in London, Brenton, Lindsay and I, along with other great Bluefin folks, ran a breakfast event all about Fiori. It was a really successful gathering, with business and technical attendees from SAP customer companies who were already, or were about to, or were just interested in embarking upon their Fiori journey. We had a special guest from one of our clients too, and to be honest, she stole the show :-)</p>
<p>It was clear from the event that people are realising that Fiori is not only here, it’s here to stay, and it’s a journey that is not just about new apps, but about a new SAP. If you’re reading this TWIF column, you already know that. It’s a genuinely exciting time for us as customers, partners and consultants, not only because of the UX aspect, but also because the present and future that is Fiori is based upon open technology standards that are right. SAP has grasped the nettle of user experience, and embraced the right tools and technologies. Good work!</p>
<p>Well that was rather a longer post than usual, so in the interests of keeping this to something you can read in a coffee break, I’ll leave it here, and wish you well. Until next time!</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>This Week in Fiori (2015-12)</title>
      <link href="https://qmacro.org/blog/posts/2015/03/20/this-week-in-fiori-(2015-12)/"/>
      <updated>2015-03-20T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2015/03/20/this-week-in-fiori-(2015-12)/</id>
      <content type="html">
        <![CDATA[
      <p><img src="http://scn.sap.com/community/image/2599/1.png?a=390268" alt=""></p>
<p>Greetings! Last week saw the return of the <a href="/category/twif/">This Week in Fiori</a> series, with a video from me and <a href="https://callaghan001.wordpress.com">Brenton</a>. More on that video shortly. Before last week, the previous episode had been in October last year. So much has happened in the Fiori world that it would be crazy to try and cover it all. Instead, over the next week or two, I’ll pick out some items that stand out.</p>
<p>So let’s get started with some picks for this week.</p>
<p><strong><a href="http://gregorbrett.blogspot.co.uk/2015/03/ive-just-watched-this-interesting-video.html">Filtering Fiori Apps by Release</a> by Gregor Brett</strong>
In last week’s video, we looked at the Fiori Apps Library app and found that it wasn’t easy to identify the latest apps. I mentioned that while the Fiori Apps Library app itself didn’t expose the information in that way, the data was actually available, and <a href="https://youtu.be/LanZx1W2yqI#t=18m10s">laid down a challenge</a> for anyone to make the app do just that.</p>
<p><img src="/images/2015/03/Screen-Shot-2015-03-20-at-16.03.06-248x300.png" alt="Screen Shot 2015-03-20 at 16.03.06"></p>
<p>Just a few days later the first response appeared – <a href="http://gregorbrett.blogspot.co.uk/2015/03/ive-just-watched-this-interesting-video.html">Gregor Brett came up with a nice solution</a>, which was to patch the running Fiori Apps Library app, adding a new View Settings Filter Item to the filterItems aggregation of the actual View Settings Dialog used in the app. The items within that new View Settings Filter Item were bound to a data collection that was already being exposed by the backend in the OData service, namely the Releases_EV collection, which gave information on Fiori Wave numbers and dates.</p>
<p>Bingo! Nice work Gregor.</p>
<p></p>
<p><strong><a href="http://scn.sap.com/community/fiori">The Fiori Community</a> by the SAP Community Network</strong>
Since the last episode of TWIF last year in October, SAP have <a href="http://scn.sap.com/community/fiori/blog/2015/02/25/sap-fiori--the-new-community-space-in-scn">created a new community</a> within the SAP Community Network for Fiori. There’s already a community for SAPUI5, but now there’s a specific community for Fiori. I spoke about this in my keynote at Mastering SAP Technologies last month, and it’s an interesting and important distinction that SAP are making.</p>
<p>If you think about it, Fiori as an umbrella term is gigantic. It could be seen as a lot of things to a lot of people. Separating out the technical underpinnings (UI5) from other aspects (Fiori application configuration, extension and maintenance, UX design, deployment and platform subjects, and more) was only going to be a matter of time, if only to make the subjects more manageable.</p>
<p>But also remember that future Fiori offerings from SAP may not be powered by UI5. Of course, all of the Fiori offerings now and in the near future are, including all the S/4HANA applications such as the SFIN set, but when you consider SAP’s purchases – Ariba, Concur and SuccessFactors to name but three – a unified UX strategy is not going to happen from re-engineering the whole UI/UX layer of those (previously) third party products.</p>
<p>Visit the new SAP Fiori community and have a look around. It looks like it’s here to stay :-)</p>
<p><strong><a href="http://scn.sap.com/community/fiori/blog/2015/03/11/architectural-consideration-when-planning-the-fiori-abap-frontend-server-fes">Planning the Fiori ABAP Frontend Server (FES) – Architecture Questions</a> by Jochen Saterdag</strong>
Getting your Fiori apps served to the frontend involves making the following things available: the OData services, the Fiori Launchpad, the Fiori app code (views, controller logic, and so on) and of course the UI5 runtime. SAP has been slowly but surely socialising the term “frontend server” to refer to a system that fulfils this role. I first heard the term from SAP Labs folks in Israel back in 2013 (see “<a href="http://scn.sap.com/people/dj.adams/blog/2013/10/03/an-amazing-36-hours-at-sap-labs-israel">An Amazing 36 Hours at SAP Labs Israel</a>“), and it’s becoming more pervasive these days. In modern parlance, perhaps, it’s now properly “become a thing”.</p>
<p>Of course, there are always considerations when planning such a server, and Jochen does a good job with this overview blog post. He answers some important questions, including whether you should use an existing PI system as the base for such a frontend server … the answer, clearly, is “no”.</p>
<p><strong><a href="http://www.bluefinsolutions.com/Blogs/DJ-Adams/March-2015/10-tips-to-get-you-started-on-your-Fiori-developme/">10 tips to get you started on your Fiori development journey</a> by me</strong>
Well, what’s the point of having your own blog post series if you can’t talk about your own content now and again? ;-) As I mentioned earlier, I<a href="/blog/posts/2015/02/16/speaking-at-mastering-sap-technologies/"> spoke at the great Mastering SAP Technologies Conference</a> in Feb this year. I wrote up my keynote into two blog posts, the second of which was a “top ten” style list. I’m sure there are many of you looking to embark upon this journey, so I thought I’d put together tips on what worked for me. If you’re interested in the first of the two posts, it’s “<a href="http://www.bluefinsolutions.com/Blogs/DJ-Adams/March-2015/Can-I-build-a-Fiori-app-Yes-you-can!/">Can I build a Fiori app? Yes you can!</a>“.</p>
<p>Well that’s about it for this week. See you next time!</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Making Information More Useful</title>
      <link href="https://qmacro.org/blog/posts/2015/03/17/making-information-more-useful/"/>
      <updated>2015-03-17T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2015/03/17/making-information-more-useful/</id>
      <content type="html">
        <![CDATA[
      <p>If you’re reading this, it’s because you’ve followed a “what is this?” type link from something I’ve written.</p>
<p>I recently wrote about trying to become more effective and efficent in “<a href="/blog/posts/2015/03/15/the-makers-schedule-restraint-and-flow/">The Maker’s Schedule, Restraint and Flow</a>” and in that post I referred to a video of a great talk by <a href="http://www.hanselman.com/">Scott Hanselman</a>, in which he talks (in the “<a href="https://youtu.be/IWPgUn8tL8s?t=33m9s">Conserve Your Keystrokes</a>” section) about preventing information getting lost and having less value, by being trapped in emails when it could be shared and repurposed.</p>
<p>So when I find myself replying to an email, and writing more than a few sentences, I’m trying instead to store that reply, that infomation, in a place where it will live longer, and have the chance to help folks other beyond the original email addressee. And after storing that information, <em>I just send a link to that place instead</em>.</p>
<p>Thanks for reading!</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>The Maker&#39;s Schedule, Restraint and Flow</title>
      <link href="https://qmacro.org/blog/posts/2015/03/15/the-maker&#39;s-schedule-restraint-and-flow/"/>
      <updated>2015-03-15T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2015/03/15/the-maker&#39;s-schedule-restraint-and-flow/</id>
      <content type="html">
        <![CDATA[
      <p>A few years ago Paul Graham published a short essay “<a href="http://www.paulgraham.com/makersschedule.html">Maker’s Schedule, Manager’s Schedule</a>“. It described succinctly how, and perhaps more importantly why calendar entry driven task scheduling, and in particular meetings, cause issues for makers. And I include myself and many of my colleagues within that “makers” general collective term.</p>
<p>Both the manager’s schedule and the maker’s schedule are important, but resonate differently and don’t mix. When making, building, creating things, solving problems, interruptions are disastrous, for all the reasons that Paul explains.</p>
<p>On the other side, time management, the proper organisation of tasks and working out what work to do, and how, doesn’t come for free. Managers and makers alike need skills in these areas. In order to build these skills, each one of us needs to understand that the areas actually exist, first of all. Email, phone calls, interruptions, the almost endless todo list and prioritisation issues are all things that we need to manage. And I recognise that I need to manage those things better. I use the Pomodoro Technique on occasion, but that’s just one tool. I also need to learn restraint. I need to resist the temptation to say “yes”, and to allow myself to be interrupted. If I get it right, I will find myself in <a href="http://en.wikipedia.org/wiki/Flow_%28psychology%29">flow</a> more often. And that’s the mode that makers – developers, in our context – work.</p>
<p>Since that original article on the Maker’s Schedule, I’ve come across many other great articles and videos, and I wanted to share a few of them with you here, as you may find them useful too.</p>
<p>Remember – saying “no”, creating situations where you’re less able to be interrupted, using task and time management techniques that work for you, that let you produce more (or less, but that’s the subject for another post), is what we <em>should</em> be doing. Don’t fall into the trap of thinking that just because your project manager thinks and works in 1 hour chunks of time, you need to do as well. Of course, real life has a habit of getting in the way, but don’t let that stop us trying to be our best.</p>
<p>Further viewing &amp; reading:</p>
<p><a href="https://www.youtube.com/watch?v=IWPgUn8tL8s&amp;feature=youtu.be">Scott Hanselman: It’s Not What You Read, It’s What You Ignore</a></p>
<p><a href="https://localizejs.com/blog/startup/developer-productivity-saying-no">Johnny Wu: Developer Productivity – The Art Of Saying “No”</a></p>
<p><a href="http://inboxpause.com/">Inbox Pause</a> (great as an idea as well as this implementation)</p>
<p><a href="http://pomodorotechnique.com/">The Pomodoro Technique</a></p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>This Week In Fiori (2015-11)</title>
      <link href="https://qmacro.org/blog/posts/2015/03/13/this-week-in-fiori-(2015-11)/"/>
      <updated>2015-03-13T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2015/03/13/this-week-in-fiori-(2015-11)/</id>
      <content type="html">
        <![CDATA[
      <p>Well hello again and welcome to TWIF readers old and new alike.</p>
<p>Last year I started the <a href="/category/twif/">“This Week In Fiori” (TWIF) series</a> looking at news, events and articles in the Fiori world. The last post (<a href="/blog/posts/2014/10/27/this-week-in-fiori-2014-43/">2014-43</a>) was in October 2014, written by Brenton O’Callaghan.</p>
<p>The Fiori world is growing and spinning even faster, and Brenton and I decided it was time to pick up where we left off. To get the ball rolling, we recorded a half-hour session at the end of this week, looking at some news in the Fiori world. This time we took a more technical flavour, remembering that Fiori is UX, but built ultimately built with UI (see “<a href="http://www.bluefinsolutions.com/Blogs/DJ-Adams/March-2015/Can-I-build-a-Fiori-app-Yes-you-can!/">Can I Build A Fiori App? Yes You Can!</a>” for more on Fiori UX vs UI) – there are always two sides to any single coin.</p>
<p>If you have any news, or any suggestions for future TWIF episode topics, just let us know!</p>
<p>Here’s this week’s episode. Thanks Brenton!</p>
<iframe allowfullscreen="" frameborder="0" height="352" src="https://www.youtube.com/embed/LanZx1W2yqI?feature=oembed" width="625"></iframe>
<p>Share &amp; enjoy!</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Why I&#39;m Staying Close to UI5</title>
      <link href="https://qmacro.org/blog/posts/2015/03/09/why-i&#39;m-staying-close-to-ui5/"/>
      <updated>2015-03-09T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2015/03/09/why-i&#39;m-staying-close-to-ui5/</id>
      <content type="html">
        <![CDATA[
      <p>I recently came across an article by Greg Donaldson – “<a href="http://createsend.com/t/r-1D458A2147210E112540EF23F30FEDED">Why We Are Staying Clear of SAPUI5</a>“. Everyone is entitled to their opinions, and I do like challenges to assumptions and the status quo, so I enjoyed the article. I thought it would be worth responding with a similar piece, albeit with a slightly different title :-)</p>
<p>It would be an odd situation indeed for a unified consensus on any software, let alone software in this particular context – HTML5 development toolkits and frameworks, where, if you don’t have an opinion, you’re looked upon as an outsider. So I wanted to state before I start that there is no single correct answer, or even a single toolkit to rule them all, and Greg makes some important points.</p>
<p>I thought I’d look at the individual points that Greg made.</p>
<p><strong>“Proprietary framework, no thanks.”</strong></p>
<p>As a lot of folks already know, UI5 is far from proprietary. It is written and maintained by web developers that work for an enterprise software behemoth, but the key difference is that UI5 has been open sourced, as well as using many open source libraries itself. In the article there’s the contrast made between “proprietary” and “industry standard” as though they’re opposites. This is not the case. So I’m not sure whether the criticism being levelled at UI5 is about its proprietary nature (which is not the case) or about (not) being an industry standard. This latter point is debatable: A toolkit powering frontend software across the entire ERP landscape for SAP customers feels like a de facto industry standard to me. Yes, not every company has adopted Fiori, but for one that drives its business on SAP products, UI5 is a likely software component.</p>
<p>I’m curious about the “SAP quirks” phrase which is also mentioned in this point. I’m not sure which quirks are being referred to, but if industrial strength design, MVC, internationalisation, automatic support for RTL languages, client and server side model support and an accomplished data binding system are SAP quirks, then yes please!</p>
<p>Further, AngularJS is mentioned as a framework with a huge community behind it. From what I can see, that community is fracturing, due to the major upheaval in (re)design between the 1.x and 2.x versions. That’s not to say that this couldn’t happen to UI5, but it’s actually happening right now with that framework.</p>
<p><strong>“SAP Backend Upgrade?”</strong></p>
<p>To do UI5-based apps “properly”, or “the SAP way”, then this is true; if you don’t already have a Gateway system in your ABAP stack landscape, then you’ll need one and also the UI2 add-in with which the UI5 runtime is supplied.</p>
<p>In my experience, however, it’s increasingly less common for an enterprise to not have a Gateway system somewhere; and with NetWeaver 7.40 you get the components built in as standard anyway. Further, installing Gateway components is often a coffee time activity.</p>
<p>But not wanting to over-trivialise this important original point, I wanted to point out the alternative; an alternative that is the most likely scenario anyway for a non-UI5 deployment such as AngularJS: a separate web server. You can just as easily host and serve your UI5 based applications, along with the UI5 runtime, from a web server of your choice. Then accessing the backend becomes the same task as if you’d chosen a different (non-UI5) framework.</p>
<p>And on the subject of accessing the backend, the point that was made about “remote enabled functions” does intrigue me. One of the advantages of UI5 is that it supports OData, an open standard, by the way, and one of the advantages of OData in turn is that it is a server-side model.</p>
<p>Calling remote function modules in this day and age is certainly possible and sometimes the only choice, but you’re not going to take advantage of server-side heavy lifting when it comes to data integration with your frontend. I’ve built Web-based apps with SAP remote function calls since the 90s, so I have the scars :-) Not only that, but the data abstraction model presented by the RFC approach is somewhat orthogonal to modern web based app data mechanisms.</p>
<p><strong>“Browser Support”</strong></p>
<p>This is of course always an interesting issue, but as an individual developer, and as a member of a development team, I prefer a solid statement about a well defined set of modern browsers which are supported by the toolkit I use, rather than have to do that job myself and deal with the vagaries that present themselves on a daily basis. Of course, rolling your own gives more flexibility, but it’s often more work.</p>
<p>And at least for the clients that I work at, the fact that (a) the browser choice is usually somewhat controlled anyway, and (b) the fact that in the BYOD context people even choose (choose!) to bring Windows phones, which are supported by UI5, underlines that choice for me.</p>
<p><strong>“Frontend Developers Don’t Care”</strong></p>
<p>At the risk of appearing obtuse, I’m going to absolutely disagree with this statement :-) Frontend developers <em>do</em> care; they care about the quality of the software they work with, about how and whether the toolkit they use <a href="http://www.bluefinsolutions.com/Blogs/DJ-Adams/March-2015/Can-I-build-a-Fiori-app-Yes-you-can!/">does the job without getting in the way</a>. Of course, this caring, this obsessive compulsion to be using the right framework and doing the right thing may mean that for some developers the choice is something other than UI5.</p>
<p>And that would be fine. There is no one piece of software that fits all requirements or circumstances, in any context. In the past I have used jQueryUI, JQTouch, AngularJS and other frameworks. And I would never rule them out for future projects. But right now, I’m investing time and effort in UI5, because it’s open source, it’s enterprise ready, it’s been designed &amp; built and is maintained by committed, passionate designers and developers just like you and me (well, a lot more competent than me) and it is also fully in tune with SAP’s technology directions.</p>
<p>Skills in UI5 are going to be useful not only for building out the current and next generation of proper outside-in apps, but also for supporting the deployments, customisations and extensions for Fiori. A nice side effect at which one should not sniff.</p>
<p></p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Can I build a Fiori app? Yes you can!</title>
      <link href="https://qmacro.org/blog/posts/2015/03/02/can-i-build-a-fiori-app-yes-you-can!/"/>
      <updated>2015-03-02T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2015/03/02/can-i-build-a-fiori-app-yes-you-can!/</id>
      <content type="html">
        <![CDATA[
      <p>This started out as an essay as preparation for my keynote at Mastering SAP Technologies in Johannesburg, Feb 2015. I've split it out into two parts, the second of which will give you 10 tips to get you started on your Fiori development journey</p>
<p>In Feb 2015 <a href="https://www.theeventfulgroup.com/">The Eventful Group</a> ran a great conference in Johannesburg - <a href="http://www.masteringsap.co.za/tech">Mastering SAP Technologies</a>. I was honoured to have been invited as a speaker, and I gave a keynote on the first day; the keynote was <a href="/blog/posts/2015/02/16/speaking-at-mastering-sap-technologies/">one of three items</a> I was contributing to the agenda.</p>
<h2>The philosophy of Fiori</h2>
<p>The title of this piece is in two parts. If we're not careful it could be a very short piece, because I've already given you the answer in the second part - &quot;Yes!&quot;. What else do you need to know?</p>
<p>Well, let's start with some assumptions. I'm going to assume that, at least to a greater or lesser extent, you're possibly a developer, or at least are of a technical nature ... otherwise, you may want to stop reading now ;-). And that you're wondering about Fiori. What it is, how it works, what the component parts are, and how you put a Fiori app together.</p>
<p>You might be faced with the exciting yet terrifying prospect of building one from scratch; you might be more in the game of modifying and extending existing standard SAP Fiori apps. And you'd be in a good place; Fiori is a huge part, some might argue the single most important part, of SAP's frontend future.</p>
<h3>Some definitions</h3>
<p>In order to work out why the answer to the question is &quot;yes&quot;, let's back up a bit and start with a few definitions. Let's have a look at what Fiori means, what it represents.</p>
<h4>Philosophy</h4>
<p><img src="/images/2015/03/Can-I-build-a-Fiori-app-1.jpg" alt="VA01, with the kitchen sink. Not Fiori"></p>
<p>It's a philosophy. It's a novel approach to work where the focus is not on a thousand features, the focus is on a particular undertaking that a business person, wearing a particular hat, needs to complete. It's about moving from a transaction oriented view of work to a role and task oriented view. Perhaps you've seen the 1-1-3 concept in early Fiori documentation - one user, one use case, three screens.</p>
<h4>User experience</h4>
<p>It's user experience. UX, as the hip designer kids say these days. This is pretty closely related to the 1-1-3 concept. Three screens. What do those screens look like? It's not about the colours, but it <em>is</em> about what a user sees, and perhaps just importantly what a user doesn't see. It's also about how a user navigates through the task at hand, and also how they become familiar with visual paradigms so that when they move from one task, say, approving a purchase order, to another, such as managing a product, things are familiar, and they know what to expect.</p>
<p><img src="/images/2015/03/Can-I-build-a-Fiori-app-2.jpg" alt="PO approval, Fiori reference app"></p>
<p><img src="/images/2015/03/Can-I-build-a-Fiori-app-3.jpg" alt="Manage product, Fiori reference app"></p>
<h4>Cross platform</h4>
<p>It's cross platform. And that means written for the One True Platform, i.e. the web. Web native. So it runs on different devices, with varying screen sizes. Desktops, tablets, smartphones. Even Windows phones! If that's not cross platform, then I don't know what is.</p>
<p>So I've got this far and our conclusion must be that Fiori is actually a state of mind.</p>
<p><img src="/images/2015/03/Can-I-build-a-Fiori-app-4.jpg" alt="Fiori is a state of mind"></p>
<p>There are these vague but well-meaning notions that describe pretty well the &quot;how&quot; and the &quot;why&quot; but what we haven't really covered is the &quot;what&quot;.</p>
<h3>The distinction between UX and UI</h3>
<p>But that's partly the point. I used the phrase UX, and specifically UX. Not UI. There's a distinct difference between the general notions of user experience, and how that user experience is realised. At some stage, in every computing context, you're going to have to come down to bare metal.</p>
<p>And in our case, that bare metal is at the UI layer. There's also the data layer, don't worry, I haven't forgotten about that. But let's just concentrate on the frontend for now.</p>
<p>Have you noticed the subtle distinctions that SAP are making with regards to Fiori UX and UI? I outlined that distinction in a blog post around this time last year: The essentials: SAPUI5, OpenUI5 and Fiori. Now SAP are underlining that distinction by creating a brand new community in the SAP Community Network, specifically for Fiori. There's already a community for UI5, but now there's a separate community for Fiori. And that's sort of the the point I'm trying to make.</p>
<p>Before we get down to UI5, let's just consider this abstraction we know and already have started to love, called Fiori. It could be realised with all sorts of different technologies. If you think about it, that abstraction, that distinction between philosophy and practicality, is the one way SAP can continue to forge ahead with some sort of (eventually) unifying user experience strategy while at the same time dealing with the reality of products from differing sources, with differing frontends - Concur, Ariba, Lumira, and more.</p>
<p>Don't hold your breath, they haven't even managed to get login working properly and cleanly on their service portal even after more than a decade ;-) But the thought and the focus and the intention is very much there.</p>
<h2>Getting down to it</h2>
<p>So Fiori is technology agnostic, and deliberately so. But at some point you're going to want to actually build something, so let's start to descend through the clouds down to reality.</p>
<p>We know the runtime platform for Fiori is the Web. That means HTML5.</p>
<p><img src="/images/2015/03/Can-I-build-a-Fiori-app-5.jpg" alt="The HTML5 logo"></p>
<p>HTML, CSS, JavaScript. But cross platform at this level only tells us half the story. Where's the data coming from? An SAP backend system. You could say it's &quot;cross backend&quot; too. ABAP and HANA stacks are the source for the business data and functions that power Fiori apps, made available via a unifying layer, which we'll look at shortly.</p>
<p>So, let's get to to it.</p>
<p>Right now, practically speaking, to build a Fiori app, you need three things: UI5, OData, and Nothing Else. (with sincere apologies to the late, great, Douglas Adams).</p>
<h3>UI5</h3>
<p>Let's start with UI5. UI5 is a toolkit for building client-side apps that run in the browser. There are of course other libraries, toolkits and frameworks out there that are in the same space, but this one is special. This one is from SAP, so it's industrial strength, enterprise ready, full of features, and a large part of it has been designed and built from the ground up for Fiori. What sort of features is it full of?</p>
<p><img src="/images/2015/03/Can-I-build-a-Fiori-app-6.jpg" alt="The UI5 logo"></p>
<h4>UI5 features</h4>
<p>Well, full support for Model-View-Controller, for a start. Fiori apps can be complex beasts, and adopting an MVC approach to your code design is almost a must, if you want to survive with your hair intact.</p>
<p>And then there's a very accomplished data model mechanism for client and server side models, with a rather powerful binding system.</p>
<p>Need to write apps that work in different languages, some of them right-to-left? Got that covered. Need to make your apps extensible? Yep, got that covered. Need to build your views declaratively? Yep. Want to construct your complex designs in a componentised way, with routing in between? Yep. You get the picture.</p>
<p>And have I mentioned JavaScript? Well of course not, it almost goes without saying. JavaScript is the water that flows through the channels in the browser; for many, it's the new assembler, the new ultimate compilation target. And UI5 is a JavaScript toolkit.</p>
<h4>JavaScript</h4>
<p>There's a lot of navel gazing out there right now about web toolkits and frameworks not being &quot;native&quot; enough, not being JavaScript-y enough. Frankly, I don't understand that. The whole point of a framework, of a toolkit, is to make you more productive. And to do that by providing abstractions and mechanisms that allow you to get things done, to build responsive user interfaces and interact with data in backend systems, while not tripping you up or getting in your way.</p>
<p>So to build with UI5 is to build using JavaScript, but it's not the full story. It's understanding and properly wielding MVC. It's understanding how to build applications where your application logic is separated from your view definitions. And it's understanding where the joins are. It's also understanding how to build an application that allows a user to get on with the task in hand. They have a role, they have a task to perform, and they want to carry it out with as little fuss as possible.</p>
<p>But it's also understanding where the data comes from, and where the frontend meets the backend.</p>
<h3>OData</h3>
<p>And that's where OData comes in. OData is a protocol and a format. Folks like to say that OData came from Microsoft, but the truth is actually a lot more interesting. It came from RSS, or rather, from the broken community that was borne out of a specific person trying to own the space (and failing).</p>
<h4>History</h4>
<p>The Atom syndication format was a potential replacement for what we knew and loved as RSS. It was designed to represent things. Blog post things, initially. Collections of things, feeds of entries, sets of entities. And then came a RESTful protocol to go hand in hand with that syndication format - the Atom Publishing Protocol. This protocol, APP for short, gave us the ability to manipulate those things, those entries, those entities. Create them, read them, update them, delete them, and query for them. Sounds familiar? Yes, of course, I'm describing the OData CRUD+Q operations.</p>
<h4>WS-Deathstar</h4>
<p>SAP adopted OData as a standard a few years ago, when they finally saw the light, and started looking for something to counter the onset of the WS-Deathstar syndrome, that was being brought on by the sheer weight of complexity that enterprise web services was imposing on the stack.</p>
<p><img src="/images/2015/03/Can-I-build-a-Fiori-app-7.jpg" alt="WS-Deathstar"></p>
<p>It's as near to a REST framework as they could manage; although, in fact, there's no such thing as a REST framework. Like Fiori, REST is an approach, an architectural style, a philosophy, as much as anything else.</p>
<h2>Your journey</h2>
<p>So where does that leave us? At a high level, we need to know about UI5 and OData. But there's more to it than that. Not to mention the question of whether you want to become a &quot;full stack&quot; Fiori developer, or just a frontend developer, or even just a backend developer. And if a backend developer, a full stack backend developer, or someone who focuses on &quot;just&quot; the business logic, or &quot;just&quot; the OData parts. There isn't enough time to cover all of that, but I'm sure you can extrapolate downwards into the data roots.</p>
<p>But for your journey to become a Fiori app developer, knowing you need UI5 skills is not enough. UI5 is a large and multi-faceted thing. How do you wield it? How do you work out what bits you need to master? And the same goes for OData.</p>
<p>If you're wanting to take your first steps on that journey, then I encourage you to read 10 tips to get you started on your Fiori development journey.</p>
<h2>Conclusion</h2>
<p>Fiori is a great initiative, and it's supported right now at the bare metal level with a superb toolkit, UI5. That toolkit has had years and years of passion, love, experience (and blood sweat and tears) baked into it by people far more talented than I am. So I do the only sensible thing, and embrace all that hard work and put it to work for me. You can too.</p>
<hr>
<p><a href="https://web.archive.org/web/20180227042609/http://www.bluefinsolutions.com/insights/dj-adams/march-2015/can-i-build-a-fiori-app-yes-you-can!">Originally published on the Bluefin Solutions website</a></p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>10 tips to get you started on your Fiori development journey</title>
      <link href="https://qmacro.org/blog/posts/2015/03/02/10-tips-to-get-you-started-on-your-fiori-development-journey/"/>
      <updated>2015-03-02T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2015/03/02/10-tips-to-get-you-started-on-your-fiori-development-journey/</id>
      <content type="html">
        <![CDATA[
      <p>A developer's journey to a new set of technologies is a very personal one, but there are definitely a few pointers that I can give you based upon my own experience.</p>
<p>Following on from my previous post <a href="/blog/posts/2015/03/02/can-i-build-a-fiori-app-yes-you-can!/">Can I build a Fiori app? Yes you can!</a> here's a top ten list of tips for the next steps on your journey to become a Fiori developer.</p>
<br/>
1. [Study the SAP Fiori design guidelines](#study-the-sap-fiori-design-guidelines)
1. [Get to know the sap.m library in UI5](#get-to-know-the-sapm-library-in-ui5)
1. [Understand components and routing](#understand-components-and-routing)
1. [Embrace MVC and declarative views](#embrace-mvc-and-declarative-views)
1. [Start using the WebIDE](#start-using-the-webide)
1. [Set up your local development environment now](#set-up-your-local-development-environment-now)
1. [Make Northwind your new friend](#make-northwind-your-new-friend)
1. [Learn how to wield Chrome Developer Tools & the UI5 Support Tool](#learn-how-to-wield-chrome-developer-tools---the-ui5-support-tool)
1. [Master data binding](#master-data-binding)
1. [Study existing Fiori apps](#study-existing-fiori-apps)
<h2>Study the SAP Fiori design guidelines</h2>
<p>Read the content of <a href="https://experience.sap.com/fiori-design/">SAP Fiori Design Guidelines</a> website. And then read it again. Fiori apps are successful at a UX level because of the consistent design that abounds.</p>
<p>The design didn't just happen by accident - Fiori apps don't look the way they do for a random reason. They're not immediately recognisable by pure chance. Everything, from the pixel-perfect precision of the design and the space between the design, is deliberate. Get that under your skin. Understand what the different application types are; know what a master/detail pattern is and what it's used for; get to grips with patterns and controls. Appreciate the use of filters, the placement of action buttons, and the subtleties of responsive design. And remember: often, less is more.</p>
<h2>Get to know the sap.m library in UI5</h2>
<p>First, a factoid. The first real customers of the <a href="https://sapui5.hana.ondemand.com/sdk/">UI5 toolkit</a>, and specifically the <a href="https://sapui5.hana.ondemand.com/sdk/#docs/api/symbols/sap.m.html">sap.m library</a> and the controls therein (sap.m is one of the many libraries within the UI5 toolkit), were the internal teams of Fiori developers at SAP. They'd been tasked with building the first few waves of Fiori apps, and needed controls to satisfy the app designs. They needed visual building blocks with which to construct clean and consistent apps.</p>
<p>The superstars on the UI5 team in Walldorf and elsewhere - the designers and developers - built out the controls inside the sap.m library, specifically with those Fiori developer teams in mind. Fiori is built with controls in the sap.m library.</p>
<p>Yes, of course, there are other controls that are also utilised, such as those in the sap.ui.layout library. And those are super important too (for an example, see the Grid control in this post: <a href="/blog/posts/2015/02/23/ui5-features-for-building-responsive-apps/">UI5 features for building responsive Fiori apps</a>).</p>
<p>But the visible building blocks that are used to construct a Fiori app come from the sap.m library. These days the &quot;m&quot; stands for &quot;main&quot;; originally it stood for &quot;mobile&quot;, as a reference to the responsive nature of these controls.</p>
<p>How do you go about getting to know sap.m library controls? Start with the <a href="https://sapui5.hana.ondemand.com/sdk/explored.html">Explored app in the UI5 SDK</a>; it's a super resource that gives you real examples of how the controls can and should be used, and you can say &quot;show me the code&quot; too.</p>
<h2>Understand components and routing</h2>
<p>These two concepts from the UI5 toolkit are essential for building non-trivial apps properly. Arguably, you can build Fiori apps without these two concepts, but you won't be able to include them in the Fiori Launchpad, and you won't be able to navigate to them from other Fiori apps.</p>
<p>The Component concept is fairly straightfoward, but the implications are subtle and wide-ranging. The essential mantra is &quot;think local, not global&quot;. A proper Fiori app should be self-contained, not refer to global mechanism such as the UI5 runtime core and the central event bus. Each component has its own event bus, as well as its own router and routing definitions.</p>
<p>If you examine the details of the app that accompanies the UI5 Application Best Practices guide in the SDK, you'll find examples of how to build using Components and routing.</p>
<h2>Embrace MVC and declarative views</h2>
<p>We've already come across MVC so I don't need to say too much there. So what do you need to do? Learn how the structure of an app is built, using screen-sized and invisible controls, and how the views within that structure are related to each other and to their controllers.</p>
<p>And love it or loathe it, XML is in your future. All standard SAP Fiori apps have their views defined declaratively in XML. And you'll quickly find out why - it's the most concise, efficient and clean way to do it. Not a fan of XML? Get over it.</p>
<h2>Start using the WebIDE</h2>
<p>Everyone will have their favourite editor, their favourite development environment in which they're most productive and where they can comfortably build Fiori apps. Sublime Text, vim, WebStorm, Atom, even (for the masochists) Eclipse!</p>
<p>SAP's WebIDE might not be that favourite environment. But it's got a lot of things going for it, and you don't have to make it your <em>main</em> environment.</p>
<p>Use the WebIDE to kick start your Fiori development journey. Extract and examine the reference apps, which have been placed there by the folks in the Fiori Implementation Experience (FIX) team.</p>
<p>Begin developing a new Fiori app from one of the starter templates, or even starting from one of the reference apps. A Fiori app has a lot of moving parts; if you're just starting out, getting help getting those moving parts going and working well together is worth a lot.</p>
<h2>Set up your local development environment now</h2>
<p>If you've developed in the past within the soft padded walls of an ABAP stack, you've had everything done for you. Or done to you, depending on your perspective. You didn't have to think about your editor, about version control, about syntax highlighting and linting, or even about serving your app up for testing.
study-existing-fiori-apps
That was (and remains) the old world. Developing apps for the web is new. This is not some inside-out based development where you create your UIs inside of an ABAP stack and then push them out to be rendered in the target browser. This is grown-up outside-in development where you're developing directly for the new runtime - the browser.</p>
<p>There are plenty of guides showing how you can set your own development environment up and get your development workflow going. Find one that suits you and get going with it as soon as you can.</p>
<h2>Make Northwind your new friend</h2>
<p>Northwind is the well-known reference OData service that's out there and available. This tip is not necessarily about the <a href="http://services.odata.org/">Northwind OData service</a> per se; it's more about making yourself (a) familiar with OData and how it works, and (b) doing that in a way that's independent of any backend SAP system. In light of this, getting to know the Mock Data Server mechanism, which is also part of the UI5 toolkit, is also essential.</p>
<p>Yes of course you're going to want to build Fiori apps that consume data from an SAP backend, and that also means OData. But that can sometimes be quite an expensive goal in the early days; it might be that the OData service isn't ready, or you haven't got access to it, or you're just on a train trying to get something done in your local development environment and can't get connected to that backend OData service. You can accelerate your journey along the Fiori development learning curve by being independent of any specific backend system. By being self-contained.</p>
<h2>Learn how to wield Chrome Developer Tools &amp; the UI5 Support Tool</h2>
<p>Building ABAP based solutions, you'll know that the debugger is a powerful ally. The <a href="https://developer.chrome.com/docs/devtools/">Chrome Developer Tools</a>, along with the UI5 Support Tool are the equivalent, and more, in this new world.</p>
<p>You're using Chrome, right? That pretty much goes without saying; it's just as if not more important than your editor; in fact, it is <em>becoming</em> the editor.</p>
<p><img src="/images/2015/03/ui5-support-tool.jpg" alt="The UI5 support tool"></p>
<p>Get to know how to wield the superb development, debugging and tracing features of the Chrome Developer Tools; understand what the UI5 Support Tool can offer you. If you do nothing else today, hit Ctrl-Alt-Shift-S on a running Fiori app and have a look at the Control Tree panel.</p>
<h2>Master data binding</h2>
<p>Data binding is where the frontend meets the backend. Master it. Understand the nuances of object, property and aggregation bindings; learn the subtleties and features of complex embedded binding syntax, how to specify sorting, filtering, grouping, formatting and factory functions.</p>
<p>A lot of what you might think is achieved through imperative code in controllers is in fact achieved through declarative binding. Don't be scared of it, it wants to be your friend. One thing I'll say here, which is only partly true but something that will help you as you bear it in mind: If you find yourself making explicit OData calls exclusively, it is possibly a bad code smell. Not all the time, but there's a chance.</p>
<h2>Study existing Fiori apps</h2>
<p>This tip of course is possibly the most important, and the most generic. If you want to learn, improve your skills in, or eventually master something, the one thing you cannot afford to avoid is reading. Looking at existing examples of what you're trying to learn to build. Understand how to get at the non-minified sources of standard SAP Fiori apps. Look at the templates and the reference apps in the WebIDE.</p>
<p>Make your breaks work for you by poring over other people's code while you pour the hot water over your ground coffee. And yes, not everything you read will be great examples of the Fiori app art. Remember that the folks who wrote the Fiori apps are just like you and me; they've just had a bit of a head start, that's all. It won't all be gold standard code. But even the bad code is useful to read; find patterns and anti-patterns and learn from those.</p>
<h2>Conclusion</h2>
<p>Of course, if you ask others how you go about learning to build Fiori apps, it's likely that they'll have other tips too. But I'm pretty sure that these will be the common denominators. And they're all things that have helped me on my journey. Happy travels!</p>
<hr>
<p><a href="http://web.archive.org/web/20180322124721/http://www.bluefinsolutions.com/insights/dj-adams/march-2015/10-tips-to-get-you-started-on-your-fiori-developme">Originally published on the Bluefin Solutions website</a></p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>UI5 features for building responsive apps</title>
      <link href="https://qmacro.org/blog/posts/2015/02/23/ui5-features-for-building-responsive-apps/"/>
      <updated>2015-02-23T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2015/02/23/ui5-features-for-building-responsive-apps/</id>
      <content type="html">
        <![CDATA[
      <p>To build a Fiori app, there are a number of considerations to take into account. One of these considerations is the responsive nature of the app; it should work on different devices (desktops, tablets and smartphones) and act - &quot;respond&quot; - appropriately on each. The UI5 toolkit, with which SAP builds its Fiori apps, has a number of features that help you in this regard. Read on to learn more about what they are.</p>
<h2>Introduction</h2>
<p>Building responsive apps in UI5 starts with using appropriate controls. The majority of the controls that were created from the ground up to be responsive are to be found in the <a href="https://openui5.hana.ondemand.com/#docs/api/symbols/sap.m.html">sap.m library</a>. The &quot;m&quot; in &quot;sap.m&quot; originally stood for &quot;mobile&quot; but now stands for &quot;main&quot;, reflecting the key focus on responsive design for the UI5 toolkit.</p>
<p>But using these controls is just the start. Making an app properly responsive means paying close attention to the device capabilities and making design and runtime decisions appropriately. This document outlines some of the main facilities in this regard. The examples are mostly based upon the <a href="https://openui5.hana.ondemand.com/explored.html">Explored app</a> in the UI5 SDK.</p>
<h2>Split app</h2>
<p>The Split App (<a href="https://openui5.hana.ondemand.com/#docs/api/symbols/sap.m.SplitApp.html">sap.m.SplitApp</a>) &quot;maintains two NavContainers if runs in tablet and one NavContainer in smartphone. The display of master NavContainer depends on the portrait/landscape of the device and the mode of SplitApp&quot;. In other words, it does different things depending on the device.</p>
<p>You can see this in action if you examine the control tree when running on a non-phone and when running on a smartphone.</p>
<p><img src="/images/2015/02/UI5-features-for-building-responsive-Fiori-apps-1.jpg" alt=""></p>
<p>These screenshots are from the UI5 Support tool's control tree display for the Explored app, which <a href="https://github.com/SAP/openui5/blob/master/src/sap.ui.demokit/src/sap/ui/demokit/explored/view/app.view.js#L17">uses a Split App control</a> within the view that is returned from the <a href="https://web.archive.org/web/20180119183423/https://github.com/SAP/openui5/blob/master/src/sap.ui.demokit/src/sap/ui/demokit/explored/Component.js#L115">Component's createContent method</a>.</p>
<h2>Device model</h2>
<p>Often declared on a Component during initialisation (or in the createContent method), this is a client-side (JSON) model with pre-defined boolean values relating to device information returned from the Device API. These values can be used in declarative views to set control visibility depending on the device, for example.</p>
<p>In the Explored app, the device model is declared and set in the <a href="https://web.archive.org/web/20180119183423/https://github.com/SAP/openui5/blob/master/src/sap.ui.demokit/src/sap/ui/demokit/explored/Component.js#L143">Component's createContent method</a>. It is used declaratively, for example, to control whether the Icon Tab Filters are initially expanded or collapsed <a href="https://web.archive.org/web/20180119183423/https://github.com/SAP/openui5/blob/master/src/sap.ui.demokit/src/sap/ui/demokit/explored/view/entity.view.xml#L61">in the entity view</a>.</p>
<h2>Device API</h2>
<p>UI5 has a <a href="https://openui5.hana.ondemand.com/#docs/api/symbols/sap.ui.Device.html">device API</a> which can be queried to find out the device type and more. The API is used to build the values in the Device Model, but also used directly in controller logic. An example of this direct use can be seen in the <a href="https://web.archive.org/web/20180119183423/https://github.com/SAP/openui5/blob/master/src/sap.ui.demokit/src/sap/ui/demokit/explored/view/sample.controller.js#L31">sample controller</a>.</p>
<h2>Grid layout</h2>
<p>The <a href="https://openui5.hana.ondemand.com/#docs/api/symbols/sap.ui.layout.Grid.html">Grid</a> mechanism is a control that is found not within the sap.m library, but within the <a href="https://openui5.hana.ondemand.com/#docs/api/symbols/sap.ui.layout.html">sap.ui.layout</a> library. It &quot;is a layout which positions its child controls in a 12 column flow layout. Its children can be specified to take on a variable amount of columns depending on available screen size&quot;.</p>
<p><img src="/images/2015/02/UI5-features-for-building-responsive-Fiori-apps-2.jpg" alt=""></p>
<p>Using the Grid control, and specifying layout data within the <a href="https://openui5.hana.ondemand.com/#docs/api/symbols/sap.ui.core.LayoutData.html">layoutData</a> aggregation of each control you place within the Grid, you can define once, for multiple screen size scenarios, a flexible flow based layout that will respond as the screen size alters.</p>
<p>In the Explored app, the <a href="https://openui5.hana.ondemand.com/explored.html#/sample/sap.ui.layout.sample.GridTiles/preview">Grid - Tile-based Layout sample</a> shows how the Grid works. A number of tiles (in the form of Object List Item controls) are defined within the Grid. Each of them has layout data specified either via the Grid's defaultSpan property or specifically with the span property of an aggregated GridData control. This layout data specifies how many of the 12 columns a control should span, in large (L), medium (M) and small (S) screen circumstances.</p>
<p>In the sample referenced above, the smaller tiles have layout data of &quot;L4 M6 S6&quot;, meaning that on a large screen each will span 4 columns (meaning there will be three on any given row), otherwise they'll span 6 columns (meaning there will be two on any given row). The larger tiles (the &quot;Deskjet Super Highspeed&quot; and the &quot;Power Projector 4713&quot; in the screenshots below) have layout data of &quot;L6 M12 M12&quot;, meaning that on a large screen each will span 6 columns (two on any given row) and on medium and small screens each will span 12 columns (one on any given row). You can see the effect here:</p>
<p><img src="/images/2015/02/UI5-features-for-building-responsive-Fiori-apps-3.jpg" alt=""></p>
<p>For more information on the 12 column grid, see Johannes Osterhoff's post <a href="https://web.archive.org/web/20180119183423/http://experience.sap.com/basics/post-123/">Responsive Web Design</a>.</p>
<h2>Control visibility</h2>
<p>In many cases, simply turning off the display of a control, or part of a control, is all that's needed to improve the way an app is displayed on different sized devices. Controls inherit from sap.ui.core.Control which has a visible property. With this, you can turn off the display of pretty much any control programmatically.</p>
<p>One technique is to do this imperatively, in a controller function, depending on circumstances. Alternatively, and this is often used in conjunction with properties in the Device Model, you can do it declaratively, in the view definitions. An example of this is for the navButton of a Page control that is aggregated (via a View) into the detailPages of the Explored app's Split App.</p>
<p>The Page in question is the &quot;Not Found&quot; page, shown when (usually via direct URL manipulation) the specified control cannot be found:</p>
<p><img src="/images/2015/02/UI5-features-for-building-responsive-Fiori-apps-4.jpg" alt=""></p>
<p>The navButton is the left-arrow shown here. When running on a desktop or tablet, there's no need to display a navButton to navigate back to the master, as the master is still on show (the Split App is displaying it in the left hand third of the screen). But on a smartphone, with a single Nav Container, only either a detail page or a master page is shown, meaning that some sort of button is required to navigate back to the master if a detail page is shown.</p>
<p>This is achieved by binding the value for the Page control's showNavButton property, which is to be a boolean, to the (boolean) value of the isPhone property of our Device Model, which, by dint of the value derived from the Device API, will cause the navButton to be shown on a smartphone but not on a desktop or tablet. You can see this in the <a href="https://web.archive.org/web/20180119183423/https://github.com/SAP/openui5/blob/master/src/sap.ui.demokit/src/sap/ui/demokit/explored/view/notFound.view.xml#L9">notFound.view.xml definition</a>.</p>
<h2>Minimum screen width</h2>
<p>When designing responsive Table controls, each Column control can be declared with a minimum screen width that is required have the values in that column. If the minimum width is not met, the column is not displayed.</p>
<p>In the Explored app, the Description column in the Samples Icon Tab Filter is subject to a <a href="https://web.archive.org/web/20180119183423/https://github.com/SAP/openui5/blob/master/src/sap.ui.demokit/src/sap/ui/demokit/explored/view/entity.view.xml#L104">minScreenWidth value of &quot;Tablet&quot;</a> (a pre-defined device size), below which it is not displayed. Here we can see the display with and without the column:</p>
<p><img src="/images/2015/02/UI5-features-for-building-responsive-Fiori-apps-5.jpg" alt=""></p>
<h2>Popin columns</h2>
<p>Instead of the display of a column being simply supressed, it can be &quot;popped in&quot; instead. This means that it will be displayed underneath the rest of the columns, still within the logical row / record display. The popin behaviour will kick in if the minimum screen width for a Column is not met.</p>
<p>In the Explored app, a control's properties are displayed in a &quot;Properties&quot; Icon Tab Filter. Two Column controls in the Table have values specified for the demandPopin property - those for Description and Since. If the restricted width requires, the Description column will be popped in (demandPopin=&quot;true&quot;), and the Since column will disappear (demandPopin=&quot;false&quot;):</p>
<p><img src="/images/2015/02/UI5-features-for-building-responsive-Fiori-apps-6.jpg" alt=""></p>
<p>With the related Column property popinDisplay you can control how the popped in column should appear.</p>
<h2>Factories</h2>
<p>Sometimes a declarative approach to handling responsive design isn't enough, and you need to fork the design depending on what device the app is running on. An example of where you might want to do this is in the display of items in a list. On a device with enough screen real estate you might want to use an <a href="https://openui5.hana.ondemand.com/#docs/api/symbols/sap.m.ObjectListItem.html">Object List Item</a> as a template for each item. Used on a smartphone, this control will mean that you may only get a small number of items displayed before you have to scroll. More appropriate might be a control that takes up less vertical space, such as a <a href="https://openui5.hana.ondemand.com/#docs/api/symbols/sap.m.StandardListItem.html">Standard List Item</a>.</p>
<p>Instead of a template, you can use a specify a factory function in the aggregation binding of a control. You can then implement this factory function to use the Device API to determine the current device type, and dynamically return the control appropriate for that device.</p>
<p>While the Explored app doesn't use factory functions, there is an example in the upcoming OpenUI5 Course that shows how they're used. In Episode 6 &quot;Custom Sorting, Factory Functions and XML Fragments&quot;, a factory function is used to return a different item template depending on the category of the item in the data. The reference to this factory function is made declaratively in the embedded binding of the List control's items aggregation.</p>
<h2>Pre-defined device sizes</h2>
<p>When specifying screen sizes for the minScreenWidth property, for example, you can use various standard CSS size references. There is also, however, a <a href="https://openui5.hana.ondemand.com/#docs/api/symbols/sap.m.ScreenSize.html">Screen Size enumeration</a> which abstracts some standard sizes away for you. It is one of these enumerations - Tablet - that is used throughout the Explored app's <a href="https://web.archive.org/web/20180119183423/https://github.com/SAP/openui5/blob/master/src/sap.ui.demokit/src/sap/ui/demokit/explored/view/entity.view.xml">entity view declaration</a>.</p>
<h2>Summary</h2>
<p>As you can see, the responsive features and facilities offered by the UI5 toolkit are many and varied, but at the end of the day it is up to you as a designer and / or developer to wield these features in the most appropriate way possible, to implement your responsive Fiori apps.</p>
<p>Share and enjoy!</p>
<hr>
<p><a href="https://web.archive.org/web/20180119183423/http://www.bluefinsolutions.com/insights/dj-adams/february-2015/ui5-features-for-building-responsive-fiori-apps">Originally published on the Bluefin Solutions website</a></p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Speaking at Mastering SAP Technologies</title>
      <link href="https://qmacro.org/blog/posts/2015/02/16/speaking-at-mastering-sap-technologies/"/>
      <updated>2015-02-16T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2015/02/16/speaking-at-mastering-sap-technologies/</id>
      <content type="html">
        <![CDATA[
      <p>Next week I’m travelling to Johannesburg, to attend and speak at the <a href="http://www.masteringsap.co.za/tech">Mastering SAP Technologies conference</a>. It’s a great honour to have been invited, and I’m excited at the prospect of the topics covered in the <a href="http://www.masteringsap.co.za/tech/agenda">agenda</a>.</p>
<p>I’m continuing my journey spreading the word about Fiori and UI5. Last November I was in Sydney giving a locknote, a workshop and speaking at an executive lunch, at the <a href="/blog/posts/2014/11/28/the-inaugural-sap-architect-developer-summit/">SAP Architect &amp; Developer Summit</a>. A couple of weeks ago it was a short trip to Brussels to speak about <a href="/2015/02/02/openui5-at-fosdem-2015/">OpenUI5 at FOSDEM</a>, and now at Mastering SAP I have three slots. Here’s the description of each of them.</p>
<p><strong><a href="http://lanyrd.com/2015/masteringsap/sdfyqz/">Keynote: Can I Build a Fiori App? Yes You Can!</a></strong></p>
<p>Fiori is not just the new UX-focused, role-based application paradigm from SAP, it’s also a set of technical constraints coupled with a rich but finite set of design patterns for UI. Most importantly it’s made possible by certain parts of the SAPUI5 toolkit that were specifically built with Fiori in mind. (In fact, the first customers of the sap.m library in SAPUI5 were the SAP Fiori developers themselves). This session tells you what you need to know to build a Fiori app.</p>
<p><strong><a href="http://lanyrd.com/2015/masteringsap/sdfyrb/">Tips &amp; Tricks from the Trenches of a Fiori/UI5 Developer</a></strong></p>
<p>Developing Fiori and UI5 apps with the UI5 toolkit is different than what you’re used to. Different generally because it’s HTML5 based, and different specifically because it’s UI5. Learn the tips and tricks that I use on a daily basis, and get to know how to drive, modify and extend Fiori/UI5 apps from the command line console of Chrome’s developer tools. Master UI5 debugging and maintenance from within the browser and get a step ahead.</p>
<p><strong><a href="http://lanyrd.com/2015/masteringsap/sdfyrc/">Workshop: Building an SAP Fiori-like App From (Almost) Scratch – Hands On!</a></strong></p>
<p>Starting from a skeleton app that has a structure but minimal content, and an OData or JSON data source, we build together a working Fiori app with SAPUI5. We cover bootstrapping the SAPUI5 toolkit, the Component-based approach to development, Model-View-Controller based development, XML views, navigation, data binding, model operations and more. This is similar to the Open Source Convention (OSCON) hands-on session I co-presented in Portland, June 2014, and the CD168 hands-on sessions I co-built &amp; co-presented at SAP TechEd in 2013 (which were sold out / overbooked many times).</p>
<p>Perhaps I’ll see some of you there. In any case, share &amp; enjoy!</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Fiori &amp; UI5 Related Videos</title>
      <link href="https://qmacro.org/blog/posts/2015/02/14/fiori-and-ui5-related-videos/"/>
      <updated>2015-02-14T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2015/02/14/fiori-and-ui5-related-videos/</id>
      <content type="html">
        <![CDATA[
      <p>I thought it would be worth collecting together a lightly annotated list of Fiori and UI5 public videos that I’ve published on <a href="https://www.youtube.com/user/qmacro99/">my YouTube channel</a>. (I say public, as there are quite a few OpenUI5 related videos still marked as private, waiting in the wings … watch this space!)</p>
<p><strong>2015</strong></p>
<p><a href="https://www.youtube.com/watch?v=B9FGqJFZbzQ">Fiori Apps Reference Data into a Spreadsheet</a> 09 Jan 2015<br>
Pulling the Apps info from the OData service used by the SAP Fiori Apps Library app into a Google spreadsheet. More info here: <a href="/blog/posts/2015/01/09/fiori-app-data-into-a-spreadsheet-challenge-accepted/">Fiori App Data into a Spreadsheet? Challenge Accepted!</a></p>
<p><strong>2014</strong></p>
<p><a href="https://www.youtube.com/watch?v=-8SIasBQc5U">YAML Model for UI5</a> 20 Dec 2014<br>
I scratched an itch and built a simple YAML Model implementation for UI5. More info here: <a href="https://github.com/qmacro/YAMLModel">https://github.com/qmacro/YAMLModel</a></p>
<p><a href="https://www.youtube.com/watch?v=JPy7TxLpILg">Creation &amp; Reload of UI5 UIs in the Chrome Developer Console</a> 24 Nov 2014<br>
Following <a href="http://lanyrd.com/2014/sap-architect-and-developer-summit/sdfyrf/">my workshop session</a> at the <a href="/blog/posts/2014/11/28/the-inaugural-sap-architect-developer-summit/">SAP Architect &amp; Developer Summit</a>, this screencast shows the creation of a quick UI, using the manual Chrome Developer Console techniques we learned, and the subsequent export and reload as XML. (I recorded this at Sydney airport on the way back from the summit).</p>
<p><a href="https://www.youtube.com/watch?v=jAp_nGqOT_c">SAP Fiori Rapid Prototyping: SAP Web IDE and Google Docs</a> 05 Nov 2014<br>
With the power of the SAP Web IDE and its plugin / template architecture, we can create custom templates that allow you to create Fiori apps based on all sorts of data sources, in this case, a Google Spreadsheet.</p>
<p><a href="https://www.youtube.com/playlist?list=PLfctWmgNyOIfF6gbmp_PZGNgn6YVJHfyU">SAP Web IDE Local Install – Up and Running</a> (3-video playlist) 27 Oct 2014<br>
SAP made available its Web IDE as a locally installable service in Oct 2014. This short series of videos shows you how to get up and running with it.</p>
<p><a href="https://www.youtube.com/watch?v=Hz3ZWWF0BFM">SAP Fiori &amp; UI5 Chat, Fri 17 Oct 2014</a> 17 Oct 2014<br>
Brenton O’Callaghan and I have a 30 min chat about SAP Fiori and the new, unofficial SAP Fiori App that gives information about the available SAP Fiori Apps.</p>
<p><a href="https://www.youtube.com/watch?v=laNprcrApKc">UI5 Icon Finder</a> 14 Sep 2014<br>
A very quick screencast of an “Icon Finder” app that remembers your own word associations you make, so you can more easily find the icons next time. See <a href="/blog/posts/2014/09/14/scratching-an-itch-ui5-icon-finder/">Scratching an itch – UI5 Icon Finder</a> for more info.</p>
<p><a href="https://www.youtube.com/watch?v=0UIyKoiZ-gE">OpenUI5 MultiComboBox First Look</a> 25 Jul 2014<br>
A first look at the sap.m.MultiComboBox in OpenUI5 version 1.22. Note that the addition of a key for the root element is not entirely necessary (but probably what you might want). I wrote more about this here <a href="/blog/posts/2014/07/26/keyed-vs-non-keyed-root-json-elements-ui5-binding/">Keyed vs Non-Keyed Root JSON Elements &amp; UI5 Binding</a>.</p>
<p><a href="https://www.youtube.com/watch?v=aVeQ4adHgaY">The SAP Fiori App Analysis application</a> 30 Jun 2014<br>
A short overview of the SAP Fiori App Analysis app, written itself as a Fiori style app. In this overview I show the source for the information (the SAP help documentation), mention how I convert the gathered spreadsheet data into a more easily consumable form, and explore the app a little bit too.</p>
<p><a href="https://www.youtube.com/watch?v=jjRc4AehSoA">DSON (Doge Serialized Object Notation) Model mechanism for UI5. So model, wow!</a> 06 Jun 2014<br>
A bit of fun for a Friday late afternoon, and it helped me to play about with extending existing client models in the sap.ui.model library set.</p>
<p><a href="https://www.youtube.com/watch?v=nRtocPEPLYI">Manipulating UI5 Controls from the Chrome Dev Console</a> 17 May 2014<br>
Just a quick screencast to show how easy it can be to find, grab, manipulate and create controls in a UI5 application from the Chrome Developer Console.</p>
<p><a href="https://www.youtube.com/watch?v=LuW_HT_c7xM">Simple Workflow App with UI5</a> 13 Apr 2014<br>
This is a quick screencast of the app I wrote for the basis of my chapter in the SAP Press book <a href="https://www.sap-press.com/practical-workflow-for-sap_3615/">Practical Workflow 3rd Edition</a>.</p>
<p><a href="https://www.youtube.com/watch?v=iZa4pEP3GZw">Coding UI5 in JSBin</a> 11 Apr 2014<br>
A quick recap of what we did during the UI5 Mentor Monday in March 2014, showing how easy it is to construct good looking UIs with UI5, and also the great facilities of JSBin – creating, viewing and sharing HTML CSS and JavaScript snippets with live rendering.</p>
<p><a href="https://www.youtube.com/watch?v=RJ8Kg14vhdE">Mocking Up the Payroll Control Center Fiori App</a> 14 Feb 2014<br>
There was a blog post on the Payroll Control Center Fiori app and I decided to mock the UI up directly. This video shows me doing that.</p>
<p><a href="https://www.youtube.com/watch?v=vDK4w8y7QmY">#UI5 Control on the Screen, Quick</a> 12 Feb 2014<br>
There was a conversation about how fast you could get a UI5 control on the screen. I decided to try to see how fast it could be.</p>
<p><a href="https://www.youtube.com/watch?v=Fgp_e3Uv5Xs">Using Gists on Github to share code</a> 09 Jan 2014<br>
This screencast relates to a document on SCN “<a href="http://scn.sap.com/docs/DOC-50988">Help Us To Help You – Share Your Code</a>” that describes how and why you should share your code that you want help with, using Gists on Github.</p>
<p><strong>2013</strong></p>
<p><a href="https://www.youtube.com/watch?v=ts0EogQZvS8">SublimeUI5 – Snippets &amp; Templates for SAPUI5/OpenUI5</a> 19 Dec 2013<br>
<a href="https://github.com/qmacro/SublimeUI5">SublimeUI5</a> is a package for Sublime Text 2 for developing SAPUI5 / OpenUI5 applications. There are two parts to it – a series of snippets and some basic application templates to help you quickly get started with complete MVC-based running apps. (I don’t maintain this package any more but you’re welcome to take it over!).</p>
<p><a href="https://www.youtube.com/watch?v=tfOO4szA2Bg">SAPUI5/Fiori – Exploration of an App</a> 22 Nov 2013<br>
An exploration of a custom Fiori app and the SAPUI5 controls that are used to build it. For the full context of this, see the 2-part <a href="https://www.youtube.com/playlist?list=PLfctWmgNyOIcae85Ytr6b_J1jgcDb4-JL">SAP CodeTalk – SAPUI5 and Fiori</a> playlist.</p>
<p><a href="https://www.youtube.com/watch?v=ItETo2R3kqI">SAP Fiori-style UI with SAPUI5</a> 06 Nov 2013<br>
This was a short video to show the sort of thing that attendees of our SAP TechEd 2013 Session CD168 “<a href="http://scn.sap.com/community/developer-center/front-end/blog/2013/10/06/building-sap-fiori-like-uis-with-sapui5">Building SAP Fiori-like UIs with SAPUI5</a>” would be building.</p>
<p><strong>2012</strong></p>
<p><a href="https://www.youtube.com/watch?v=wZUXz5f1CHI">Re-presenting my site with SAPUI5</a> 13 Dec 2012<br>
A short demo of an experiment I carried out to explore SAPUI5 and learn more about it. I really like the Shell component as a user interface paradigm and decided to see if I could re-present the content of my home page and weblog using SAPUI5 and specifically the Shell. It seemed to work out OK.</p>
<p><a href="https://www.youtube.com/watch?v=Obh2LW7CCKY">Stupid Firebase and SAPUI5 tricks</a> 14 Apr 2012<br>
Saturday evening hacking around with <a href="http://www.firebase.com">Firebase</a>, the command line, and an SAPUI5 Data Table. Fairly pointless but interesting nonetheless. Firebase uses websockets for realtime data streaming to your browser-based app, and you can interact with the JSON data with HTTP. Every piece of data has a URL. Now that’s nice.</p>
<p><a href="https://www.youtube.com/watch?v=yHVuWHNWK3I">SAPUI5 and OData</a> 12 Feb 2012<br>
I looked at the data binding support for OData based data sources (such as those exposed by SAP NetWeaver Gateway!) in the (then relatively) new SAPUI5 toolkit. I also wrote this up on SCN: “<a href="http://www.sdn.sap.com/irj/scn/weblogs?blog=/pub/wlg/28659">SAPUI5 says “Hello OData” to NetWeaver Gateway</a>“.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Morning Fiori Fix</title>
      <link href="https://qmacro.org/blog/posts/2015/02/09/morning-fiori-fix/"/>
      <updated>2015-02-09T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2015/02/09/morning-fiori-fix/</id>
      <content type="html">
        <![CDATA[
      <p>John Moy <a href="https://twitter.com/jhmoy/status/564656599361261570">tweeted</a> today about the Fiori App Reference Library showing duplicate entries recently. It’s something I’d noticed too, after checking the app following the publication of information on SCN about new Fiori apps on the post “<a href="http://scn.sap.com/community/erp/hcm/blog/2015/02/04/new-fiori-apps-for-hcm">New Fiori Apps for HCM</a>” last week.</p>
<p>I’m not 100%, so earlier this morning I needed a bit more time than usual to get my brain in gear. So with a coffee I decided to spend a few mins hacking the list display. It’s not a permanent solution of course, but at least demonstrates that there are <a href="https://fioriappslibrary.hana.ondemand.com/sap/fix/externalViewer/services/exparam.xsodata/Apps?$skip=0&amp;$top=100&amp;$orderby=appName%20asc&amp;$filter=substringof(%27leave%27,tolower(appName))&amp;$inlinecount=allpages&amp;$format=json&amp;$select=appName,PVFrontend">properties in the Apps entity</a> that can be used to distinguish the “duplicate” entries. Should be a quick fix (yes, pun intended!) for the Fiori Implementation eXperience folks to carry out.</p>
<p>Here’s a quick screencast as an animated GIF (why not?)</p>
<p><img src="/images/2015/02/fixappfix.gif" alt="image"></p>
<p>Right, on with the morning.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>OpenUI5 at FOSDEM 2015</title>
      <link href="https://qmacro.org/blog/posts/2015/02/02/openui5-at-fosdem-2015/"/>
      <updated>2015-02-02T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2015/02/02/openui5-at-fosdem-2015/</id>
      <content type="html">
        <![CDATA[
      <p>I just returned from <a href="http://fosdem.org">FOSDEM</a>, the conference for free and open source software developers that’s held annually in Brussels. It’s a super event that has a long pedigree already, and has managed to remain true to the hacker culture and spirit that pervades the open source world. Innovation, scrutiny, sharing and collaboration are the bywords of this culture.</p>
<p>I have attended FOSDEM a number of times over the years; in the early days in my capacity as a Jabber / XMPP programmer, and these days more generally, but this time it was specifically about <a href="http://openui5.org">OpenUI5</a>.</p>
<p><img src="/images/2015/02/IMG_20150202_080814.jpg" alt="image">SAP’s open sourced UI development toolkit for HTML5 is SAPUI5’s twin with an Apache 2.0 licence. SAPUI5 is the basis for SAP’s UI innovation and with what SAP Fiori apps are built. Although still relatively young, it’s a very accomplished toolkit, and one I was eager to share with the open source developer community at large.</p>
<p>I spoke on the subject of OpenUI5 in this talk:</p>
<p><a href="http://lanyrd.com/2015/fosdem/sdhcrp/">A Whirlwind Introduction to OpenUI5</a></p>
<p>and it was very well received; the room was packed and there was some great feedback. It wasn’t difficult talking about a product from such a great team, although to add extra spice, I’d decided not to use any slides, and instead, do some live coding on stage.</p>
<p><img src="/images/2015/02/IMG_20150202_080838.jpg" alt="image">I had deliberately set myself up for a fall, showing how difficult it can be to built hierarchies of controls in JavaScript, which then set the scene for my favoured approach of defining views declaratively, with XML being my favourite flavour in that vein. Luckily the audience seemed to appreciate the in-joke, and not everyone thought I was an idiot :-)</p>
<p><img src="/images/2015/02/IMG_20150202_080932.jpg" alt="image"></p>
<p>I’ve made the source code of the app I built on stage available on Github, in the <a href="https://github.com/qmacro/fosdem-2015-openui5">fosdem-2015-openui5</a> repository.</p>
<p>The SAP folks had an OpenUI5 booth at FOSDEM too which was staffed by a few of the real UI5 developers, so the conference attendees were able to learn first hand about the toolkit from the source. The booth saw a nice increase in traffic after my talk, which is a great sign.</p>
<p>SAP has had a presence at many conferences in the past few years, but this one resonates particularly with me, as some folks might think that the SAP and open source worlds are far apart. How wrong they are. Onwards!</p>
<p><em>Picture credits: Denise Nepraunig, Jan Penninkhof, Martin Gillet – thanks!</em></p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Atom, Snippets, Tabs and CSON parsing</title>
      <link href="https://qmacro.org/blog/posts/2015/01/19/atom-snippets-tabs-and-cson-parsing/"/>
      <updated>2015-01-19T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2015/01/19/atom-snippets-tabs-and-cson-parsing/</id>
      <content type="html">
        <![CDATA[
      <p>This morning on the train down from Manchester to Bristol I fired up the Atom editor and noticed that when trying to load a snippets file from my <a href="https://github.com/qmacro/ui5-snippets">ui5-snippets</a> package, I got an error:</p>
<p><img src="/images/2015/01/Screen-Shot-2015-01-19-at-08.18.19.png" alt="image"></p>
<p>Between Stafford and Wolverhampton I hacked around with the source, particularly the html.cson file that contained a number of UI5 snippets for HTML files. From where was this error message emanating, and why now?</p>
<p>Well, it seems that a few days ago, in <a href="https://github.com/atom/atom/releases/tag/v0.171.0">release 0.171.0</a>, Atom had moved from parsing CoffeeScript Object Notation (CSON) with <a href="https://github.com/bevry/cson">cson</a>, to parsing with <a href="https://github.com/groupon/cson-safe">cson-safe</a>. CSON is the format in which snippets can be written. Moving to cson-safe meant that the parser was rather stricter and was the source of the “<em>Syntax error on line 4, column 11: Unexpected token</em>” error.</p>
<p>By the time we’d got to Birmingham, I’d figured out what it was: tabs. In wanting to move in the direction of the <a href="https://github.com/SAP/openui5/blob/master/CONTRIBUTING.md#contribute-code">UI5 coding standards</a>, I’d started moved to tabs for indentation within the UI5 snippets, as you can see in <a href="https://github.com/qmacro/ui5-snippets/commit/d661a4b3132f50c99262972c85f48f69ad79e44a">this openui5 starter snippet</a>. While the original cson parser used by Atom was fine with real tabs in the snippet source file, cson-safe didn’t like them.</p>
<p><a href="https://github.com/qmacro/ui5-snippets/commit/260441b096b2f280fb81f91715182df153f65200">Switching the tabs to literal “\t” tab representations</a> (i.e. backslash then ‘t’) solved the issue.</p>
<h2></h2>
<p></p>
<p></p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Fiori App Data into a Spreadsheet? Challenge Accepted!</title>
      <link href="https://qmacro.org/blog/posts/2015/01/09/fiori-app-data-into-a-spreadsheet-challenge-accepted!/"/>
      <updated>2015-01-09T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2015/01/09/fiori-app-data-into-a-spreadsheet-challenge-accepted!/</id>
      <content type="html">
        <![CDATA[
      <p>In October last year, following <a href="https://www.youtube.com/watch?v=aVeQ4adHgaY">the original meta SAP Fiori App</a> ;-), SAP <a href="http://scn.sap.com/community/ux-rds/blog/2014/10/27/introducing-the-sap-fiori-apps-reference-library">announced</a> their own long-awaited <a href="http://www.sap.com/fiori-apps-library">SAP Fiori Apps Reference Apps Library</a>. At the time, <a href="www.bluefinsolutions.com/Blogs/Brenton-O-Callaghan/">Brenton</a> and I chatted about it in “<a href="https://www.youtube.com/watch?v=Hz3ZWWF0BFM">SAP Fiori &amp; UI5 Chat, 17 Oct 2014</a>“.</p>
<p>Today there was a <a href="http://scn.sap.com/community/ux-rds/blog/2014/10/27/introducing-the-sap-fiori-apps-reference-library#comment-555838">comment</a> in the announcement post, asking whether there was “<em>any way this information can be supported via a downloaded (into Excel perhaps)?  It would make sorting and filtering much easier</em>“.</p>
<p>Seeing as one of the technical guidelines for Fiori apps is the use of an OData service to supply the domain data, and I had a bit of time over lunch, the well known phrase “Challenge Accepted!” floated into my consciousness.</p>
<p>With the power of OData, JSON, Google Apps Script and the generally wonderful cloud productivity platform that is Google Apps, I set to work, and within a short amount of time, the challenge was completed.</p>
<p>Here’s a video with all the details. The spreadsheet is <a href="https://docs.google.com/spreadsheets/d/1ob-0M9Qn6duMVxC05A2w1ekxR8H3Nc-etb_Fz6Y_4z0/edit?usp=sharing">here</a>,</p>
<iframe allowfullscreen="" frameborder="0" height="469" src="https://www.youtube.com/embed/B9FGqJFZbzQ?feature=oembed" width="625"></iframe>
<p>Share and enjoy!</p>
<p></p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Running: 2014 in review, and some Clojure</title>
      <link href="https://qmacro.org/blog/posts/2015/01/03/running:-2014-in-review-and-some-clojure/"/>
      <updated>2015-01-03T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2015/01/03/running:-2014-in-review-and-some-clojure/</id>
      <content type="html">
        <![CDATA[
      <p>I enjoyed running in 2014 and logged each one via <a href="https://www.endomondo.com/profile/1074038">Endomondo</a>. This post is a random collection of thoughts about the running, the data and some simple analysis, in Clojure.</p>
<h2>Watches</h2>
<p><img src="/images/2015/01/garmin110.jpeg" alt="Garmin Forerunner 110"></p>
<p>I’ve been using a <a href="https://buy.garmin.com/en-GB/GB/watches-wearable-technology/wearables/forerunner-110/prod63511.html">Garmin Forerunner 110</a> watch which has been very good, on the whole, although the USB cable and connectivity left something to be desired.</p>
<p>I bought my wife Michelle a <a href="http://www.tomtom.com/en_gb/sports/running/products/runner-cardio-gps-watch/white-red/">TomTom Runner Cardio</a> for her birthday back in August, and have been intrigued by it ever since. And she bought me one for Christmas, so I’m trying that out for 2015. I went out on my first run of this year with it <a href="https://twitter.com/qmacro/status/551299062616817664">just this morning</a>, in fact.</p>
<h2>Run data</h2>
<p>But back to 2014. I completed 101 runs (1,281.22km) and they’re all logged in Endomondo. I don’t have the premium subscription, just the basic, but the features are pretty good. There’s an option to upload from the Garmin watch, via a browser plugin which (on this OSX machine) has become pretty flakey recently and now only works in Safari, but once uploaded, the stats for each run are shown rather nicely:</p>
<p><img src="/images/2015/01/Screen-Shot-2015-01-03-at-10.16.43.png" alt="A run on Endomondo"></p>
<p>Endomondo also offers simple statistics and charts, and a tabular overview of the runs, that looks like this:</p>
<p><img src="/images/2015/01/Screen-Shot-2015-01-03-at-10.19.25.png" alt="Tabular view of runs in Endomondo"></p>
<p>One thing that bothered me, at least with the free service, is that there was no option to download this data. So I paged through the tabular data, and copy/pasted the information into a Google Sheet, my favourite gathering-and-stepping-off point for a lot of my data munging.</p>
<p><img src="/images/2015/01/Screen-Shot-2015-01-03-at-11.31.28.png" alt="Running history in a Google Sheet"></p>
<p>If nothing else, as long as the data is largely two dimensional, I’ve found it’s a good way to visually inspect the data at 10000 feet. It also affords the opportunity for some charting action, so I had a look at my pace over the year, to see how it had improved. This is the result:</p>
<p><img src="/images/2015/01/Screen-Shot-2015-01-03-at-11.33.37.png" alt="Pace improvement in 2014"></p>
<p>The three peaks in Feb, Jun and Sep are a couple of initial runs I did with Michelle plus her first 8km in London (now she’s in double km figures and has a decent pace, I’m very proud of her).</p>
<h2>Some Analysis in Clojure</h2>
<p>I could have gone further with the analysis in the spreadsheet itself, but I’m also just starting to try and teach myself <a href="http://clojure.org/">Clojure</a>, and thought this would be a nice little opportunity for a bit of data retrieval and analysis.</p>
<h2>Exposing the data</h2>
<p><img src="/images/2015/01/Screen-Shot-2015-01-03-at-11.41.19-300x219.png" alt="image"></p>
<p>Of course, the first thing to do was to make the data in the Google Sheet available, which I did with my trusty <a href="/blog/posts/2013/10/04/sheetasjson-google-spreadsheet-data-as-json/">SheetAsJSON</a> mechanism. It <a href="http://bit.ly/qmacro-running-2014">returned</a> a nice JSON structure that contained all the data that I needed.</p>
<p>So now I had something that I could get Clojure to retrieve. Here follows some of what I did.</p>
<h2>Creating the project</h2>
<p>I’m using <a href="http://leiningen.org/">Leiningen</a>, which is amazing in a combined couple of ways: it Just Works(tm), and it uses Maven.  My only previous experience of Maven had me concluding that Maven was an absolute nightmare, but Leiningen has completely changed my mind. Although I don’t actually have to think about Maven at all, Leiningen does it all for me, and my hair is not on fire (for those of you wondering, Leiningen’s tagline is &quot;for automating Clojure projects without setting your hair on fire&quot;, which I like).</p>
<p>So I used Leiningen to create a new application project:</p>
<pre class="language-shell"><code class="language-shell">lein new app running-stats</code></pre>
<p>and used my joint-favourite editor (Vim, obviously, along with Atom), with some super Clojure-related plugins such as <a href="https://github.com/tpope/vim-fireplace">vim-fireplace,</a> to edit the core.clj file. (more on my Vim plugins another time).</p>
<p>Here’s a short exerpt from what I wrote:</p>
<p><img src="/images/2015/01/Screen-Shot-2015-01-03-at-12.51.47.png" alt="Screen Shot 2015-01-03 at 12.51.47"></p>
<p>Let’s look at this code step by step.</p>
<h2>Library use</h2>
<p>I’m using Clojure’s <a href="https://github.com/clojure/data.json">data.json</a> library (line 2) to be able to parse the JSON that my SheetAsJSON mechanism is exposing. I’m also using the <a href="https://github.com/dakrone/clj-http">clj-http</a> HTTP client library (line 3) to make the GET request. Finally I’m using the <a href="https://clojuredocs.org/clojure.walk">clojure.walk</a> library (line 4) for a really useful function later on.</p>
<p>I decided to churn through step by step, which is why you’re seeing this code in four chunks, each time using the def special form to create a var in the current namespace.</p>
<h2>Creating stats</h2>
<p>There’s stats (line 6), which has the value of the parsed JSON from the body of the response to the HTTP GET request. To unravel lines 6-9 we have to read from the inside outwards.</p>
<p>First, there’s the call to client/get in line 9 (the clj-http library is aliased as client in line 3). This makes the HTTP GET request and the result is a Persistent Array Map that looks something like this:</p>
<p>running-stats.core=&gt; <strong>(client/get &quot;http://bit.ly/qmacro-running-2014&quot;)</strong> {:cookies {&quot;NID&quot; {:discard false, :domain &quot;.googleusercontent.com&quot;, :expires #inst &quot;2015-07-05T12:23:49.000-00:00&quot;, :path &quot;/&quot;, :secure false, :value &quot;67=EUPTfvAv3U5Vofm1F3Fb_D9OjmwYS1yC3Ju-uvgostmqzKSNLHKHiHGMc-cwFBAES0R3qcLFQW7W75x6sZjSzein3H7Trxeg6Bk0wOJ0q-AaYXA0RxYw0-uEhR5ogaXg&quot;, :version 0}}, :orig-content-encoding nil, :trace-redirects [&quot;http://bit.ly/qmacro-running-2014&quot; &quot;https://script.googleusercontent.com/macros/echo?user_content_key=jmP [...] 5, :status 200, :headers {&quot;Server&quot; &quot;GSE&quot;, &quot;Content-Type&quot; &quot;application/json; charset=utf-8&quot;, &quot;Access-Control-Allow-Origin&quot; &quot;*&quot;, &quot;X-Content-Type-Options&quot; &quot;nosniff&quot;, &quot;X-Frame-Options&quot; &quot;SAMEORIGIN&quot;, &quot;Connection&quot; &quot;close&quot;, &quot;Pragma&quot; &quot;no-cache&quot;, &quot;Alternate-Protocol&quot; &quot;443:quic,p=0.02&quot;, &quot;Expires&quot; &quot;Fri, 01 Jan 1990 00:00:00 GMT&quot;, &quot;P3P&quot; &quot;CP=&quot;This is not a P3P policy! See http://www.google.com/support/accounts/bin/answer.py?hl=en&amp;answer=151657 for more info.&quot;&quot;, &quot;Date&quot; &quot;Sat, 03 Jan 2015 12:25:02 GMT&quot;, &quot;X-XSS-Protection&quot; &quot;1; mode=block&quot;, &quot;Cache-Control&quot; &quot;no-cache, no-store, max-age=0, must-revalidate&quot;}, :body &quot;{&quot;Year-2014&quot;:[{&quot;Date&quot;:&quot;2014-01-02T00:00:00.000Z&quot;,&quot;Description&quot;:&quot;First run of 2014&quot;,&quot;Distance&quot;:&quot;13.50 km&quot;,&quot;Time&quot;:&quot;1h:13m:51s&quot;,&quot;Avg_Speed&quot;:&quot;11.0 km/h&quot;,&quot;Avg_Pace&quot;:&quot;5:28 min/km&quot;,&quot;Avg_HR&quot;:168,&quot;Distance_Value&quot;:13.5,&quot;Pace_Value&quot;:&quot;1899-12-30T05:28:00.000Z&quot;,&quot;Pace_Val_Mins&quot;:5,&quot;Pace_Val_Secs&quot;:28,&quot;Pace_In_Secs&quot;:328,&quot;Month_of_Run&quot;:1},{&quot;Date&quot;:&quot;2014-01-05T00:00:00.000Z&quot;,&quot;Description&quot;:&quot;Wet and windy Copster Hill.&quot;,&quot;Distance&quot;:&quot;14.05 km&quot;,&quot;Time&quot;:&quot;1h:16m:31s&quot;,&quot;Avg_Speed&quot;:&quot;11.0 km/h&quot;,&quot;Avg_Pace&quot;:&quot;5:27 min/km&quot;,&quot;Avg_HR&quot;:169,&quot;Distance_Value&quot;:14.05,&quot;Pace_Value&quot;:&quot;1899-12-30T05:27:00.000Z&quot;,&quot;Pace_Val_Mins&quot;:5,&quot;Pace_Val_Secs&quot;:27,&quot;Pace_In_Secs&quot;:327,&quot;Month_of_Run&quot;:1},{&quot;Date&quot;:&quot;2014-01-08T00:00:00.000Z&quot;,&quot;Description&quot;:&quot;Brookdal [...]</p>
<p>Quite a bit of a result. Looking at the keys of the map, we see the following, which should be somewhat familiar to anyone who has made HTTP calls:</p>
<p>running-stats.core=&gt; <strong>(keys (client/get &quot;http://bit.ly/qmacro-running-2014&quot;))</strong> (:cookies :orig-content-encoding :trace-redirects :request-time :status :headers :body)</p>
<p>There we can see the :body keyword, which we use on line 8 as an accessor in this collection. With this, we get the raw body, a string, representing the JSON:</p>
<p>running-stats.core=&gt; <strong>(:body (client/get &quot;http://bit.ly/qmacro-running-2014&quot;))</strong> &quot;{&quot;Year-2014&quot;:[{&quot;Date&quot;:&quot;2014-01-02T00:00:00.000Z&quot;,&quot;Description&quot;:&quot;First run of 2014&quot;,&quot;Distance&quot;:&quot;13.50 km&quot;,&quot;Time&quot;:&quot;1h:13m:51s&quot;,&quot;Avg_Speed&quot;:&quot;11.0 km/h&quot;,&quot;Avg_Pace&quot;:&quot;5:28 min/km&quot;,&quot;Avg_HR&quot;:168,&quot;Distance_Value&quot;:13.5,&quot;Pace_Value&quot;:&quot;1899-12-30T05:28:00.000Z&quot;,&quot;Pace_Val_Mins&quot;:5,&quot;Pace_Val_Secs&quot;:28,&quot;Pace_In_Secs&quot;:328,&quot;Month_of_Run&quot;:1},{&quot;Dat [...]</p>
<p>Now we need to parse this JSON with the data.json library, which we do in line 7. This gives us something like this:</p>
<p>running-stats.core=&gt; <strong>(json/read-str (:body (client/get &quot;http://bit.ly/qmacro-running-2014&quot;)))</strong> {&quot;Year-2014&quot; [{&quot;Pace_Val_Secs&quot; 28, &quot;Distance_Value&quot; 13.5, &quot;Date&quot; &quot;2014-01-02T00:00:00.000Z&quot;, &quot;Month_of_Run&quot; 1, &quot;Description&quot; &quot;First run of 2014&quot;, &quot;Distance&quot; &quot;13.50 km&quot;, &quot;Avg_Speed&quot; &quot;11.0 km/h&quot;, &quot;Pace_Val_Mins&quot; 5, &quot;Pace_Value&quot; &quot;1899-12-30T05:28:00.000Z&quot;, &quot;Avg_Pace&quot; &quot;5:28 min/km&quot;, &quot;Time&quot; &quot;1h:13m:51s&quot;, &quot;Pace_In_Secs&quot; 328, &quot;Avg_HR&quot; 168} {&quot;Pace_Val_Secs&quot; 27, &quot;Distance_Value&quot; 14.05, &quot;Date&quot; &quot;2014-01-05T00:00:00.000Z&quot;, &quot;Month_of_Run&quot; 1, &quot;Description&quot; &quot;Wet and windy Cop [...]</p>
<p>which is eminently more useable as it’s another map.</p>
<p>Although it’s a map, the keys are strings which aren’t ideal if we want to take advantage of some Clojure idioms. I may be wrong here, but I found that converting the keys into keywords made things simpler and felt more natural, as you’ll see shortly.</p>
<h2>The Year-2014 data set</h2>
<p>Lines 11-13 is where we create the Year-2014 var, representing the data set in the main spreadsheet tab.</p>
<p>Looking up the “Year-2014″ key in the stats (line 13) gave me a vector, signified by the opening square bracket:</p>
<p>running-stats.core=&gt; <strong>(stats &quot;Year-2014&quot;)</strong> [{&quot;Pace_Val_Secs&quot; 28, &quot;Distance_Value&quot; 13.5, &quot;Date&quot; &quot;2014-01-02T00:00:00.000Z&quot;, &quot;Month_of_Run&quot; 1, &quot;Description&quot; &quot;First run of 2014&quot;, &quot;Distance&quot; &quot;13.50 km&quot;, &quot;Avg_Speed&quot; &quot;11.0 km/h&quot;, &quot;Pace_Val_Mins&quot; 5, &quot;Pace_Value&quot; &quot;1899-12-30T05:28:00.000Z&quot;, &quot;Avg_Pace&quot; &quot;5:28 min/km&quot;, &quot;Time&quot; &quot;1h:13m:51s&quot;, &quot;Pace_In_Secs&quot; 328, &quot;Avg_HR&quot; 168} {&quot;Pace_Val_Secs&quot; 27, &quot;Distance_Value&quot; 14.05, &quot;Date&quot; &quot;2014-01-05T00:00:00.000Z&quot;, &quot;Month_of_Run&quot; 1, &quot;Description&quot; &quot;Wet and windy Copster Hill.&quot;,</p>
<p>The vector contained maps, one for each run. Each map had strings as keys, so in line 12 I used the <a href="https://clojuredocs.org/clojure.walk/keywordize-keys">keywordize-keys</a> function, from clojure.walk, to transform the strings to keywords. Here’s an example, calling the function on the map representing the first run in the vector:</p>
<p>running-stats.core=&gt; <strong>(keywordize-keys (first (stats &quot;Year-2014&quot;)))</strong> {:Pace_Value &quot;1899-12-30T05:28:00.000Z&quot;, :Month_of_Run 1, :Distance_Value 13.5, :Distance &quot;13.50 km&quot;, :Avg_HR 168, :Avg_Pace &quot;5:28 min/km&quot;, :Pace_Val_Mins 5, :Pace_Val_Secs 28, :Date &quot;2014-01-02T00:00:00.000Z&quot;, :Description &quot;First run of 2014&quot;, :Time &quot;1h:13m:51s&quot;, :Avg_Speed &quot;11.0 km/h&quot;, :Pace_In_Secs 328}</p>
<p>I assigned the resulting value of this call to a new var Year-2014.</p>
<h2>Getting the HR values</h2>
<p>The Garmin Forerunner 110 measures heart rate (HR) via a chest strap, and an average-HR detail is available for each run:</p>
<p>running-stats.core=&gt; <strong>(:Avg_HR (first Year-2014))</strong> 168</p>
<p>There were a few runs where I didn’t wear the chest strap, so the value for this detail on those runs was a dash, rather than a number, in the running statistics on the Endomondo website, which found its way into the spreadsheet and the JSON.</p>
<p>running-stats.core=&gt; <strong>(count (filter (comp not number?) (map :Avg_HR Year-2014)))</strong> 6</p>
<p>Yes, six runs altogether without an average HR value. So to get the real average HR values, I just needed the ones that were numbers. I did this on lines 15-17.</p>
<p><em>By the way, composing with the <a href="https://clojuredocs.org/clojure.core/comp">comp</a> function sort of makes me go “wow”, because I figure this is revealing a bit of the simplicity, depth and philosophy that lies beneath the scratch mark I’ve just made in the surface of functional programming in general and Clojure in particular.</em></p>
<h2>Average HR</h2>
<p>I took the average of the HR values in line 21. This actually returned a Ratio type:</p>
<p>running-stats.core=&gt; <strong>(/ (reduce + HR-values) (count HR-values))</strong> 15292/95 running-stats.core=&gt; <strong>(type (/ (reduce + HR-values) (count HR-values)))</strong> clojure.lang.Ratio</p>
<p>This was interesting in itself, but I wanted a value that told me something, so I called the float function in line 20:</p>
<p>running-stats.core=&gt; <strong>(float (/ (reduce + HR-values) (count HR-values)))</strong> 160.96841</p>
<p>(Yes, I know taking the average of averages is not a great thing to do, but at this stage I’m more interested in my Clojure learning than my running HR in 2014).</p>
<h2>And more</h2>
<p>I did continue with my analysis in Clojure, but this post is already long enough, so I’ll leave it there for now. If you got this far, thanks for reading! I hope to teach myself more Clojure; there are some great resources online, and the community is second to none.</p>
<p>If you’re thinking of taking the plunge, I’d recommend it! I’ll leave you with a quote from <a href="http://swannodette.github.io/">David Nolen</a> at the end of his talk “<a href="http://youtu.be/AnzMEdC2FDk">Jelly Stains. Thoughts on JavaScript, Lisp and Play</a>” at JSConf 2012:</p>
<blockquote>
<p>“[Dan Friedman and William Byrd] got me realising there’s a lot more left to play with in Computer Science”.</p>
</blockquote>
<p>As I embark upon my journey in this direction, I realise that’s a very true statement. It’s like learning programming all over again, in a good way!</p>
<p></p>
<p></p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>DNA is still in our DNA</title>
      <link href="https://qmacro.org/blog/posts/2015/01/02/dna-is-still-in-our-dna/"/>
      <updated>2015-01-02T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2015/01/02/dna-is-still-in-our-dna/</id>
      <content type="html">
        <![CDATA[
      <p>Via <a href="https://twitter.com/aidanfeldman/status/551091071749353472">a tweet that was retweeted by Ben Nuttall</a>, I came across a recent article in the Independent “<a href="http://www.independent.co.uk/life-style/gadgets-and-tech/news/microsoft-to-replace-internet-explorer-with-new-streamlined-browser-9949448.html">Microsoft to replace Internet Explorer with new, streamlined browser</a>“. The article has some classic sentences that made me groan with displeasure, not least the lead:</p>
<blockquote>
<p>“Codenamed Spartan, the new app will look much more like competitors Chrome and Firefox”</p>
</blockquote>
<p>which completely misses the major point in that it’s not how IE <em>looks</em>, it’s how it <em>behaves</em>.</p>
<p>Anyway, the sentence that most caught my eye was this one:</p>
<blockquote>
<p>In the past the company has considered changing the name to separate the current browser from “negative perceptions that no long reflect reality”</p>
</blockquote>
<p>This very much reminds me of a passage from Douglas Adams’s Hitch Hiker’s Guide To The Galaxy, specifically from Episode 11:</p>
<blockquote>
<p>The problem of the five hundred and seventy-eight thousand million Lintilla clones is very simple to explain, rather harder to solve. Cloning machines have, of course, been around for a long time and have proved very useful in reproducing particularly talented or attractive – in response to pressure from the Sirius Cybernetics marketing lobby – particularly gullible people and this was all very fine and splendid and only occasionally terribly confusing. And then one particular cloning machine got badly out of sync with itself. Asked to produce six copies of a wonderfully talented and attractive girl called “Lintilla” for a Bratis-Vogen escort agency, whilst another machine was busy creating five-hundred lonely business executives in order to keep the laws of supply and demand operating profitably, the machine went to work. Unfortunately, it malfunctioned in such a way that it got halfway through creating each new Lintilla before the previous one was actually completed. <strong>Which meant, quite simply, that it was impossible ever to turn it off – without committing murder. This problem taxed the minds, first of the cloning engineers, then of the priests, then of the letters page of <em>’The Sidereal Record Straightener’</em>, and finally of <span style="text-decoration: underline;">the lawyers, who experimented vainly with ways of redefining murder, re-evaluating it, and in the end, even respelling it, in the hope that no one would notice.</span></strong></p>
</blockquote>
<p>Wonderful.</p>
<p></p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>The inaugural SAP architect and developer summit</title>
      <link href="https://qmacro.org/blog/posts/2014/11/28/the-inaugural-sap-architect-and-developer-summit/"/>
      <updated>2014-11-28T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2014/11/28/the-inaugural-sap-architect-and-developer-summit/</id>
      <content type="html">
        <![CDATA[
      <p>I was honoured to have been <a href="/blog/posts/2014/10/19/speaking-at-the-sap-architect-and-developer-summit/">invited to speak at</a> the inaugural <a href="https://web.archive.org/web/20180227044002/http://events.sap.com/au/sap-architect-and-developer-summit/en/home?bc=1%251%250">SAP Architect &amp; Developer Summit</a> which happened last week (20-21 Nov 2014) in Sydney. It was a fantastic event, mainly due to the people and the content, but also because it hit a sweet spot between different types of SAP developer events.</p>
<p>The summit was the first of its kind to be organised by SAP, and judging from the feedback from the attendees there and then, combined with my own experience, it was a huge success. It was held over a two day period in the centre of a hotbed of SAP architect and developer talent, with folks converging on the wonderful Australian Technology Park in Sydney from all over the region, plus various additions from the UK, USA and elsewhere.</p>
<p>The Australian Technology Park was almost the perfect setting, being based on a centre of technology (heavy transport and industry) from the last millenium, a centre that proudly displayed historical, and some still-working physical artifacts, reminding me a lot of the <a href="https://www.mosi.org.uk">Museum of Science &amp; Industry</a> back home in Manchester.</p>
<h2>The summit</h2>
<p>Falling directly after SAP TechEd Berlin, firmly within the SAP tech conference season, the summit attracted over 300 attendees. There were a number of reasons for this being a great event to attend – the style was a sweet-spot between different sized events, it was priced well, and the content was just right.</p>
<h3>Sweet spot</h3>
<p>There's the daddy of all SAP conferences, SAP TechEd &amp;&amp; d-code, and then at the other end of the scale there are grass roots community-organised types such as CodeJams and InsideTracks. While the former extends, with the InnoJam pre-event, to more or less a week, and the latter often being single-day affairs, this summit hit the sweet spot in between, finding a great balance between time and content.</p>
<h3>Price point</h3>
<p>This was one of those unusual events where the travel and accommodation costs, even for those relatively local, were more than the event itself. (Because I was speaking, SAP covered my costs – thank you!). This is significant; a price point of AUD 695.00 (around GBP 385.00) combined with the agenda means that it was hard to resist.</p>
<h3>People &amp; content</h3>
<p>The two most important ingredients of course for any event are the people and the content, often going together. Here are just a few of the hands-on workshop items from the <a href="https://web.archive.org/web/20180227044002/http://eventscontent.sapvirtualevents.com/content/dam/sapvep/customimages/au-sap-architect-and-developer-summit/SAP_Architect_and_Developer_Summit_Brochure_v2.pdf">agenda</a>:</p>
<br/>
* Developing SAP HANA Native Applications with SAP HANA Cloud Platform (Thomas Jung)
* Designing SAP Fiori Custom Applications (Kynan Jones & John Patterson)
* SQLScript – Push Code Down into SAP HANA to Achieve Maximum Performance (Rich Heilmann)
* Advanced OData Service Development with SAP Gateway (Mustafa Saglam)
* Build SAP HANA Cloud Applications which Integrate with On-Premise Systems (Chris Paine)
<p>With those sessions typical of the quality and content, given by those people, you know it's going to turn out well.</p>
<p>Just as significant as the agenda were the conversations to be had with the amazing folk that were there too. Trying to name them all would be an exercise in futility; suffice it to say that the large majority of what I’m going to call the “ANZ SAP Mob” (in reference to the “Dutch SAP Mafia”) were there, which for me was reason enough to attend. To be able to learn from conversations with these people was priceless.</p>
<h2>My contribution</h2>
<p>I was lucky enough to be able to contribute in three ways to this summit.</p>
<h3>Locknote</h3>
<p>I gave a keynote at the end of Day 1 (called a “locknote” – who knew?) entitled <a href="https://web.archive.org/web/20180227044002/http://lanyrd.com/2014/sap-architect-and-developer-summit/sdfyrd/">Fiori and UI5 Software Logistics, or: Are We in the Future Yet?</a>.</p>
<p>My aim was to convey the idea that in the SAP development world, we’ve been heretofore shielded from and largely unaware of one of the most important parts of software development – the artifacts.</p>
<p>You could perhaps think of artifacts as the tangible results of our mental machinations, a developer currency that we grow, discuss, exchange and share. And with the advent of Fiori and UI5 development, we should think explicitly about how we should nurture these artifacts to be the best we can make them, and in doing that, embrace tools available outside the traditional SAP developer ecosphere. Tools such as linters, editors, workflow mechanisms and source code control systems. In particular, I focused on git and <a href="https://guides.github.com/introduction/flow/index.html">Github Workflow</a>.</p>
<h3>Workshop</h3>
<p>On Day 2 I held a 2 hour hands-on workshop entitled <a href="https://web.archive.org/web/20180227044002/http://lanyrd.com/2014/sap-architect-and-developer-summit/sdfyrf/">Learn to Drive Fiori Applications from Underneath and Level Up!</a>.</p>
<p><img src="/images/2014/11/Workshop-booklet-screenshot-SAP-Architect-Developer-Summit.png" alt="Workshop booklet"></p>
<p>In this workshop I took the attendees (the workshop was fully booked!) through a Fiori application, from underneath, discovering it, controlling it, driving it and modifying it via the Chrome Developer Tools. There was a lot of content to get through but we managed it, not least due to the fact that everyone got on board with the approach and really did a great job in collaborating and keeping up with me. Thanks folks!</p>
<p>When I was preparing the workshop booklet, it took on a life of its own, so much so that it turned into a standalone 48-page mini-publication so that anyone who had it could follow through everything I wanted to teach, even after the workshop. And I’m making that workshop booklet available to everyone so that they can all benefit:</p>
<p><a href="https://docs.google.com/document/d/1OV-cJ7Xg-_ucdz1M3Wx-uwG4eG9i1ShmAM4xXEBYdj4/edit?usp=sharing&amp;pli=1">Workshop Booklet: Learn to Drive Fiori Applications from Underneath and Level Up!</a></p>
<p>If you would like to leave any feedback please go ahead and do that at the end of this post.</p>
<h3>Executive lunch</h3>
<p>On Day 1 there was an Executive Lunch event with folks from all around the Australia and NZ region. I spoke on the new development paradigm that Fiori and UI5 has ushered into the SAP developer world, and gave an impromptu demonstration on UI5 development, building a simple app as they ate their lunch :-)</p>
<h2>The future</h2>
<p>I hear that SAP ANZ are planning to run this event again next year, which is great. The aim is to attract more attendees, which is also great. But there's also a balance to be maintained; the synergy, the timing of two full days, the ability to talk to everyone, was, in my opinion, just right.</p>
<p>I’m really hoping that this event has a future, stays roughly true to this inaugural incarnation, and spreads to other areas around the globe. If one came to Europe, I’d sign up immediately and encourage my fellow SAP hackers to do the same.</p>
<p>Well done to all the team for organising this, and thanks to all the superheroes that attended and shared knowledge and experience. We are architects and developers. Learning from one another and sharing with one another is what we do.</p>
<hr>
<p><a href="https://web.archive.org/web/20180227044002/http://www.bluefinsolutions.com/insights/dj-adams/november-2014/the-inaugural-sap-architect-developer-summit">Originally published on the Bluefin Solutions website</a></p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Creation &amp; Reload of UI5 UIs in the Chrome Developer Console</title>
      <link href="https://qmacro.org/blog/posts/2014/11/24/creation-and-reload-of-ui5-uis-in-the-chrome-developer-console/"/>
      <updated>2014-11-24T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2014/11/24/creation-and-reload-of-ui5-uis-in-the-chrome-developer-console/</id>
      <content type="html">
        <![CDATA[
      <p>At the inaugural <a href="http://bit.ly/anzsummit">SAP Architect &amp; Developer Summit</a> last week, <a href="/blog/posts/2014/10/19/speaking-at-the-sap-architect-developer-summit/">one of the things that I did</a> was prepare and deliver a 2 hour hands-on workshop: “<a href="http://lanyrd.com/2014/sap-architect-and-developer-summit/sdfyrf/">Learn To Drive Fiori Applications From Underneath And Level Up!</a>“. This was a fun and successful workshop which focused on working within, and using the tools of, the powerful Chrome Developer Console. It triggered great conversations afterwards with some folks, including fellow SAP Mentor Matt Harding, who also <a href="https://twitter.com/mattharding/status/535968961221754880">tweeted</a>:</p>
<p><img src="/images/2014/11/Screen-Shot-2014-11-24-at-14.58.39.png" alt="image"></p>
<p>One of the strands of the conversation with Matt, Nigel James &amp; others was regarding the potential transient nature of the definition of views, or other smaller UI elements, created while working within the console. In the console you can quite easily build views in JavaScript (as the console is a JavaScript console!). Building machine readable, declarative views such as those based on XML or JSON is a little bit more cumbersome.</p>
<p>However, with a great feature of the UI5 Support Tool – Export to XML – we can indeed have our UI declared for us in XML, which is rather useful! Not only that, but we can then iterate by loading that generated XML back into Chrome.</p>
<p>While at SYD airport just now, waiting for my flight back home, I recorded a quick screencast to illustrate this. It shows the creation of a quick UI, using the manual console techniques we learned in my workshop. Then, the UI is exported as XML, which the Support Tool duly does for us, inside an XML View container. That exported XML View is then reloaded, and we can see of course that it is faithful to what was originally created.</p>
<iframe allowfullscreen="" frameborder="0" height="469" src="http://www.youtube.com/embed/JPy7TxLpILg?feature=oembed" width="625"></iframe>
<p>Share &amp; enjoy!</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Addressing Emails</title>
      <link href="https://qmacro.org/blog/posts/2014/11/14/addressing-emails/"/>
      <updated>2014-11-14T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2014/11/14/addressing-emails/</id>
      <content type="html">
        <![CDATA[
      <p>I use filters to manage my emails and auto-filter all incoming emails that have me only in the CC list, and not in the TO list, into a separate folder. I review emails in this folder no more frequently than every couple of days. This is common practice.</p>
<p>If you’re emailing a group of people and addressing them directly in the body of the email, you should think about making sure they’re in the TO list, not just the CC list. It’s common courtesy, and also you’ll probably get a reply quicker :-)</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>This Week in Fiori (2014-43)</title>
      <link href="https://qmacro.org/blog/posts/2014/10/27/this-week-in-fiori-(2014-43)/"/>
      <updated>2014-10-27T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2014/10/27/this-week-in-fiori-(2014-43)/</id>
      <content type="html">
        <![CDATA[
      <p>Hello everybody, Brenton here in for DJ this week. For those of you who don’t know me, I work in the Fiori and User experience space with DJ and I am a fellow SAPUI5/OpenUI5 advocate for a long time now. I focus more on the mobility side of things more than anything else but for me it’s all about bringing amazing solutions to end users and having a bit of fun while doing it :-)</p>
<p>So this week of course was the beginning of what I call TechEd season or now I suppose we have to call it d-code season. Last week saw SAP TechEd and d-code take place in the wonderful Venetian resort in Las Vegas. Now that I am starting to get over my jet lag, DJ asked me to jot down a few of the highlights for this edition of “This Week in Fiori”.</p>
<p><strong><a href="http://events.sap.com/teched/en/session/13492">SAP Executive Keynote from SAP TechEd &amp; D-code</a> by Steve Lucas</strong></p>
<p>The first mention has to go, of course, to the keynote with Steve Lucas. With a relaxed and developer focused atmosphere it was an incredibly enjoyable 75 minutes covering some of the amazing things that people are doing with SAP software. The reason it gets a special mention here is because it was (for me anyway) the first time I saw SAP Fiori on a watch. Steve introduces a real-time Fiori application on the HANA cloud platform which was integrated with and primarily used on Samsung’s latest smart watches. The demo is at about 59+ minutes for anybody interested. In fact, the entire keynote is well worth the time as it really brought to life some of SAP’s new technologies.</p>
<p><strong><a href="http://events.sap.com/teched/en/session/13578">SAP Fiori Launchpad Overview</a> by Aviad Rivlin</strong></p>
<p>Aviad does it again with this excellent overview of the SAP Fiori Launchpad in this voice-over session. Talking us through the Launchpad itself, it’s capabilities as well as an overview of how the launchpad could work in a Hybrid scenario where some functionality is based on-premise and some based in the cloud. Well worth a watch for anybody interested or working with the Launchpad.</p>
<p><strong><a href="http://events.sap.com/teched/en/session/13558">Unified Inbox with SAP Fiori</a> by Ramana Mohanbabu</strong></p>
<p>This was quite an interesting session I enjoyed covering the connection of the SAP Fiori Unified inbox to multiple systems to give an end user access to all of their SBWP items in a much more usable way.</p>
<p><strong><a href="http://events.sap.com/teched/en/session/13682">Swell Analytics</a> by Clint Vosloo and Chris Rae</strong></p>
<p>Although competing directly with myself and John Appleby during this years DemoJam I am always more than happy to give credit where it is most definitely due and these guys deserve it! They created an amazing application using OpenUI5 to identify, predict and rate the quality of swells for surfers (yes I said surfers!). Well worth a watch and shows off the awesome stuff you can build with OpenUI5. These are just 4 of the very many Fiori and OpenUI5 related sessions from Las Vegas that caught my eye. If I was to mention all of the sessions, you would get bored far quicker than I can type so I won’t even try. But please do check out the rest of the sessions covering all SAP’s new offerings from the HANA Cloud Platform (HCP), SAP Mobile Secure right through to the easy way developers can try all this out for themselves at <a href="http://hcp.sap.com/">hcp.sap.com</a>.</p>
<p>So all that is left for me to do is thank DJ for allowing me to post on some of my experiences from Las Vegas. TWIF is an excellent series and one I love reading each week! Comments most welcome as always!</p>
<p>Brenton.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>This Week in Fiori (2014-42)</title>
      <link href="https://qmacro.org/blog/posts/2014/10/19/this-week-in-fiori-(2014-42)/"/>
      <updated>2014-10-19T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2014/10/19/this-week-in-fiori-(2014-42)/</id>
      <content type="html">
        <![CDATA[
      <p><img src="/images/2014/10/Screen-Shot-2014-10-19-at-21.27.11-300x216.png" alt="Screen Shot 2014-10-19 at 21.27.11"></p>
<p>Well hello again, I’m back. I couldn’t miss <a href="http://en.wikipedia.org/wiki/42_(number)">the most significant week number</a>, now, could I? :-) And next week I have something special for you — the TWIF episode will be written by a guest author. Really excited about that! If you’re interested in becoming a guest writer for this series, get in touch! Ok, let’s get to it.</p>
<p><strong><a href="http://scn.sap.com/community/enterprise-portal/blog/2014/10/19/new-white-paper-sap-portal-and-sap-fiori--common-architecture">SAP Portal and SAP Fiori – Common Architecture</a> by Aviad Rivlin</strong>
Aviad has been at it again producing great content and bringing more clarity to this important subject. Although only a short post, it’s worth mentioning here, because it helps crystallise SAP’s intentions in this space (readers of this TWIF series have seen many mentions of this subject in the past) and also because it points to a whitepaper “<a href="https://scn.sap.com/docs/DOC-58843">SAP Enterprise Portal and SAP Fiori – Common Architecture Recommendations</a>” which is worth a read.</p>
<p><strong><a href="http://help.sap.com/saphelp_uiaddon10/helpdata/en/5d/bad3ee1b78427c98eb9fe68999b9a4/frameset.htm">What’s New in SAP Fiori Launchpad</a> by SAP</strong>
For the UI Add-On for NetWeaver, otherwise known as UI2, version 1.0 SPS 10 is now available. This is a layer of software that provides a lot of the Fiori services and infrastructure (yes, <a href="https://twitter.com/qmacro/status/523472656457531392">there’s more to Fiori than just UX</a>, you know ;-) including the UI5 runtime, the personalisation services and the Launchpad. While the individual Fiori apps are of course the main event, without this layer, without the Launchpad, the experience would be lacking something.</p>
<p>This What’s New document, in the UI2 section of help.sap.com, gives us a good overview on what have been the important areas of focus for SAP in the recent period. Notably, these areas are for Portal integration (the headerless mode) and performance. With performance, there have been various improvements, from moving the storage of personalisation information from an XML document to database tables (who thought using XML documents for storage of large amounts of data was a good idea?) to cacheing of target mappings in the browser. Nice!</p>
<p><strong><a href="https://demo-fioritrial.dispatcher.hana.ondemand.com/sap/hana/uis/clients/ushell-app/shells/fiori/FioriLaunchpad.html?sap-client=001">SAP Fiori, Demo Cloud Edition</a> by SAP</strong>
Well, it was a long time coming, and it’s still not ideal, but it’s THERE! An online, available, demo version of SAP Fiori. For folks to get a better feel for the Launchpad, for some of the apps, and to experience the UX first hand. Not only will this be great for all of that, but for those implementing their own Fiori apps, it will also serve as useful and hopefully always-available reference designs, alongside the SAP Fiori Design Guidelines I wrote about in <a href="/blog/posts/2014/07/09/this-week-in-fiori-2014-28/">TWIF episode 2014-28</a>.</p>
<p>Why not ideal? Well, it only contains a very small number of apps from the 300+ available, and the sample data is a little flat. Here are the apps available:</p>
<ul>
<li>ERP HCM - Approve Timesheets</li>
<li>Approve Leave Requests</li>
<li>My Benefits</li>
<li>My Leave Requests</li>
<li>My Paystubs</li>
<li>My Timesheet</li>
<li>ERP SD (Logistics) - Change Sales Orders</li>
<li>Check Price and Availability</li>
<li>Change Sales Orders</li>
<li>Track Sales Orders</li>
<li>ERP Accounting - My Spend</li>
<li>Customer Invoices</li>
<li>ERP Logistics (MM) - Approve Purchase Contracts</li>
<li>Approve Purchase Orders</li>
<li>Approve Requisitions</li>
<li>Order From Requisitions</li>
</ul>
<p>It’s early days for this demo, and I’m hoping to see a lot wider variety of apps available, along with more meaningful sample business data, in the next iteration. But until then, so far so good!</p>
<p><strong><a href="https://www.youtube.com/watch?v=Hz3ZWWF0BFM">SAP Fiori &amp; UI5 Chat, Fri 17 Oct 2014</a> by Brenton O’Callaghan and me</strong>
Earlier this year, Brenton and I ran a webinar “<a href="http://www.bluefinsolutions.com/About-us/News-and-Media/Events/Webinar-Understanding-SAP-Fiori/">Understanding SAP Fiori Webinar</a>” which was well received. I wrote it up in a post on SCN “<a href="http://scn.sap.com/community/developer-center/front-end/blog/2014/06/20/understanding-sap-fiori-webinar--the-directors-cut">The Director’s Cut</a>” and also on Bluefin’s website “<a href="http://www.bluefinsolutions.com/Blogs/DJ-Adams/July-2014/Webinar-more-Understanding-SAP-Fiori/">Webinar &amp; More: Understanding SAP Fiori</a>“, and in fact we’ll be running another SAP Fiori related webinar in December, watch this space!</p>
<p>Last Friday Brenton and I decided to sit down and shoot the breeze again on the subject of Fiori, this time looking at an SAP Fiori app that allows you to explore what Fiori apps are available. We looked at it from above, and from below, and had a great time doing so. It’s 30 mins long, so grab a cup of tea and a digestive biscuit and have a look: “<a href="https://www.youtube.com/watch?v=Hz3ZWWF0BFM">SAP Fiori &amp; UI5 Chat, Fri 17 Oct 2014</a>”</p>
<iframe allowfullscreen="allowfullscreen" frameborder="0" height="315" src="//www.youtube.com/embed/Hz3ZWWF0BFM" width="560"></iframe>
<p>Until next time, share &amp; enjoy!</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Speaking at the SAP Architect &amp; Developer Summit</title>
      <link href="https://qmacro.org/blog/posts/2014/10/19/speaking-at-the-sap-architect-and-developer-summit/"/>
      <updated>2014-10-19T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2014/10/19/speaking-at-the-sap-architect-and-developer-summit/</id>
      <content type="html">
        <![CDATA[
      <p>Next month, in Sydney, the inaugural <a href="http://events.sap.com/au/sap-architect-and-developer-summit/en/home?bc=1%251%250">SAP Architect &amp; Developer Summit</a> is taking place, on the 20th and 21st of November. This is quite an exciting direction for an SAP event; yes, we have <a href="http://www.sapdcode.com/">SAP TechEd &amp;&amp; d-code</a> (almost upon us) which caters for the developers and architects among us, but this short summit-style conference looks to be spot on in terms of content for the “non-suits”.</p>
<p>The agenda is packed with sessions I’m really looking forward to attending, and a huge list of amazing folks from the SAP world are there – many of them presenting. Check out the full agenda, available from <a href="http://events.sap.com/au/sap-architect-and-developer-summit/en/agendas3?bc=1%252%250">this page</a> to see what I mean.</p>
<p>I’m rather honoured to have been invited, and have a couple of speaking slots. I’ve added my sessions to <a href="http://lanyrd.com/2014/sap-architect-and-developer-summit/">the Lanyrd page for the conference</a>, so the links below will take you to the slots there:</p>
<p>On day 1, I’m giving the Locknote Address, which is at the end of the day’s sessions and just before the cocktails, so I’d better keep it short and to the point! — <a href="http://lanyrd.com/2014/sap-architect-and-developer-summit/sdfyrd/">Fiori &amp; UI5 Software Logistics, or: Are We In The Future Yet?</a></p>
<p>On day 2, I’m running a 2 hour hands-on workshop “<a href="http://lanyrd.com/2014/sap-architect-and-developer-summit/sdfyrf/">Learn to Drive Fiori Apps from Underneath and Level Up!</a>“. This should be a lot of fun, and revolves around mastering the perfect storm of Chrome’s Developer Tools and the UI5 toolkit and support mechanisms.</p>
<p>As well as the summit’s website itself, you can read more about the event on Thomas Jung’s post on SCN: “<a href="http://scn.sap.com/community/events/blog/2014/10/10/coming-down-under-see-you-at-sap-architect-and-developer-summit-in-sydney">Coming Down Under – see you at SAP Architect and Developer Summit in Sydney</a>“.</p>
<p>I’m really excited to be attending, not least because I’m finally going to meet some of my heroes from the Australia &amp; NZ SAP developer world. Sydney here I come!</p>
<p></p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>This Week in Fiori (2014-40)</title>
      <link href="https://qmacro.org/blog/posts/2014/10/07/this-week-in-fiori-(2014-40)/"/>
      <updated>2014-10-07T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2014/10/07/this-week-in-fiori-(2014-40)/</id>
      <content type="html">
        <![CDATA[
      <p><img src="/images/2014/10/Screen-Shot-2014-10-07-at-07.33.51-300x165.png" alt="Screen Shot 2014-10-07 at 07.33.51"></p>
<p>Another week, another set of Fiori links. Let’s get to it!</p>
<p><strong><a href="https://boma0d717969.hana.ondemand.com/sap/fix/externalViewer/">Fiori App Reference Library app</a>, via Luis Felipe Lanz</strong>
Well it was bound to happen, and I’m celebrating that. Luis tweeted a link to a lovely Fiori app, the <a href="https://boma0d717969.hana.ondemand.com/sap/fix/externalViewer/">Fiori App Reference Library</a>, which contains details on the 300+ Fiori apps so far. Of course, the original meta Fiori app, the <a href="https://code.bluefinsolutions.com/~dadams/FioriWebinar/AppAnalysis.html">SAP Fiori App Analysis application</a> (which I mentioned in <a href="/blog/posts/2014/08/01/this-week-in-fiori-2014-31/">TWIF 2014-31</a>) is still going strong – find out more about this in this 5 min video “<a href="https://www.youtube.com/watch?v=aVeQ4adHgaY">The SAP Fiori App Analysis application</a>“.</p>
<p>But what about this new app from SAP (rather than from me)? Well, there are a couple of parts of the URL (<a href="https://boma0d717969.hana.ondemand.com/sap/fix/externalViewer/">https://boma0d717969.hana.ondemand.com/sap/fix/externalViewer/</a>) that suggest to me that it’s possibly temporary, or still in development (there are some active <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/debugger">debugger</a> statements in there too), but apart from that, it’s a fine example of a classic Fiori app and uses a 1.24 runtime of UI5. I’m tempted to dig in right now and start exploring how it’s put together, but I’ll leave that for another time. I’ll just point out that the data it uses is from a <a href="https://boma0d717969.hana.ondemand.com/sap/fix/externalViewer/services/data.xsodata/">proper OData service</a> which is in itself more useful than you might think – an official machine-readable detailed list of Fiori apps from SAP. Let a thousand consumer apps bloom!</p>
<p><strong><a href="http://www.eventbrite.com/e/sap-codejam-eindhoven-river-rde-registration-12714089183">SAP CodeJam on RDE at Ciber NL</a> organised by Wim Snoep</strong>
SAP River RDE, or to give it its new name SAP Web IDE (hopefully it won’t change again :-) is an important topic to understand in the world of Fiori. It’s what many developers (although not all) will be using to manage Fiori apps from a creation and extension point of view. RDE has been a long time in gestation but today’s incarnation is very accomplished and those looking to understand what SAP’s approach to software management in the Fiori age is, need to spend some time investigating this.</p>
<p>One of the “Dutch SAP Mafia” members Wim organised an <a href="http://www.eventbrite.com/e/sap-codejam-eindhoven-river-rde-registration-12714089183">SAP CodeJam on RDE</a> which looked to be a great success. The developer ecosystem is not just about the languages (say, JavaScript) and frameworks[^n] (UI5) but also about the tools and environments within which one works. So this CodeJam was ideally suited to learning more about SAP’s environment. The day saw developers build Fiori applications in RDE, and I was happy to see that our TechEd hands-on session content <a href="http://scn.sap.com/community/developer-center/front-end/blog/2013/10/06/building-sap-fiori-like-uis-with-sapui5">CD168 Building SAP Fiori-like UIs with SAPUI5</a> — which was created for last year’s SAP TechEd events but has seen action ever since — was put to good use for this event too.</p>
<p>[^n]:actually one should refer to UI5 as a toolkit rather than a framework, for reasons too long and detailed to go into here :-)</p>
<p><strong><a href="http://open.sap.com/courses/fiori1">Introduction to SAP Fiori UX</a> by SAP</strong>
I’ve written about this course from Open SAP before, most recently in the previous TWIF episode <a href="/blog/posts/2014/09/28/this-week-in-fiori-2014-39/">TWIF 2014-39</a>. Well, I thought I’d give a quick update on my perspective … to say that I’ve abandoned the course. Fiori is a huge topic, and one can’t expect a single course to cover everything. But I did expect some UX content, as it’s an incredibly important aspect of the Fiori experience. Unfortunately I didn’t find any, and I noted that I <a href="https://twitter.com/ByteDoc/status/518806002314264577">wasn’t alone</a> in this regard either.</p>
<p>With the combination of this issue and the as yet unresolved issues from Week 2, I decided that give up on the course and I’d devote the time I’d allocated for study to other more UX/UI related matters, in particular by studying further the <a href="http://experience.sap.com/fiori-guidelines/index.html">SAP Fiori Design Guidelines</a> that I wrote about in <a href="/blog/posts/2014/07/09/this-week-in-fiori-2014-28/">TWIF 2014-28</a> along with details of the <a href="https://openui5.hana.ondemand.com/explored.html">latest responsive controls in the UI5 toolkit</a>. Whether you’re following the Open SAP course or not, I’d encourage you to do the same, too.</p>
<p>I must say that I’ve not given up on Open SAP as a whole – in fact I’m eagerly awaiting the next Fiori related course … now that Fiori installation and configuration is out of the way with this first course, it could be full steam ahead for the UX part!</p>
<p><strong>Update 20 Oct 2014</strong>: Since this post, there has been some discussion internally, on various email threads and also publically here and <a href="https://twitter.com/qmacro/status/523472656457531392">on Twitter</a>. And today SAP posted “<a href="http://scn.sap.com/community/opensap/blog/2014/10/20/help-shape-the-next-sap-fiori-ux-course">Help Shape the Next SAP Fiori Course</a>” which acknowledges the issues with the lack of UX content and solicits input to determine the content for the next course. Well done Open SAP! This is a conversation in action. I’d encourage you to go over to the <a href="https://www.sapsurvey.com/cgi-bin/qwebcorporate.dll?idx=8SCKQZ">survey</a> and add your thoughts.</p>
<p>Until next time, share &amp; enjoy!</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>This Week in Fiori (2014-39)</title>
      <link href="https://qmacro.org/blog/posts/2014/09/28/this-week-in-fiori-(2014-39)/"/>
      <updated>2014-09-28T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2014/09/28/this-week-in-fiori-(2014-39)/</id>
      <content type="html">
        <![CDATA[
      <p>Hello there folks. That time has come around again to pull together a few links on some of the Fiori related stories and articles this week. Let’s get right to it.</p>
<p><strong><a href="http://scn.sap.com/docs/DOC-57831">Transactional Fiori App Certification</a> by Chiranjivi R D</strong>
I touched on certification of Fiori apps in an earlier TWIF episode <a href="/blog/posts/2014/08/01/this-week-in-fiori-2014-31/">2014-31</a> where I pointed to a Partner Co-Innovation Workshop that mentioned certification of Fiori apps developed therein. Certification, at least to me, is not automatically a good thing. I’m strongly ambivalent (if that’s possible) on certification generally, of consultants specifically, and of apps particularly.</p>
<p>This week, this article on Fiori app certification was brought to my attention by friend and fellow SAP Mentor <a href="http://twitter.com/ttrapp">Tobias Trapp</a>. It’s all about the certification of transactional Fiori apps built by partners. With Fiori, there’s great emphasis on the UX principles, and rightly so. There are also of course also the Gateway and Business Suite add-ons too, but for me the primary goal for certification in this area must be how the Fiori app works from a user experience point of view. My general certification ambivalence is then given a run for its money here; I for one do think that without some kind of standards enforcement, the Fiori approach may be diluted. I’ve seen apps that are purportedly “Fiori” but just don’t feel right.</p>
<p>Only time will tell. What is your experience of custom Fiori apps? Have you seen Fiori apps that, well, aren’t?</p>
<p><strong><a href="http://scn.sap.com/community/gui/blog/2014/09/25/user-experience-sessions-at-teched-sap-screen-personas-fiori-ux-strategy-design-services">User Experience Sessions at TechEd: SAP Screen Personas, Fiori, UX Strategy, Design Services</a> by Peter Spielvogel</strong>
<a href="http://www.sapdcode.com/">SAP TechEd &amp;&amp; d-code</a>, arguably the most important event in SAP’s annual calendar, is fast approaching. Already, the Las Vegas edition … which I like to call the “warm up before the main European event” :-) … is less than a month away. I noted the Fiori related sessions in a previous TWIF episode <a href="/blog/posts/2014/08/31/this-week-in-fiori-2014-35/">2014-35</a> and just this week Peter Spielvogel from SAP writes this post detailing some of them. Ironically, he does this in the <a href="http://scn.sap.com/community/gui/blog">SAPGUI area</a> on the SAP Community Network (SCN).</p>
<p>I pointed out in TWIF 2014-35 that there didn’t appear to be enough Fiori related sessions (although some folks on Twitter are complaining that all they hear about in relation to TechEd is Fiori and HANA, c’est la vie) but I’m hopeful that there will be at least some coverage in the “hallway track” and in the Code Jams and hands-on activities that run throughout the week.</p>
<p>In particular, I’d encourage you to look out for the SAP Web IDE stuff. This is the new name for SAP River RDE, which has also some history in the Web Application ToolkiT (WATT) and prior to that the SAP App Designer. What ancestry already! While some of us like to build Fiori apps from the ground up (coding view elements directly in XML, with our UI5 stickers adorning our laptops) there are a great number of people who need guidance. Guidance in both forms – technical, and design (see the certification piece earlier). And for these folks, and those looking for the right tools to extend existing SAP Fiori apps, the SAP Web IDE is something not to miss.</p>
<p><a href="https://open.sap.com/courses/fiori1"><strong>Introduction to SAP Fiori UX – an update</strong></a>
I wrote about this course back at the beginning of August. Today, along with many thousands of co-participants, I’m well underway with the course materials, into Week 3. For those of you not taking part, here are the the topics covered:</p>
<ul>
<li>Week 1: SAP Fiori UX Basics</li>
<li>Week 2: SAP Fiori UX Deployment</li>
<li>Week 3: SAP Fiori UX Configuration</li>
<li>Week 4: Securing SAP Fiori UX</li>
<li>Week 5: SAP UI Tools</li>
<li>Week 6: Extending SAP Fiori UX</li>
<li>Week 7: Final Exam</li>
</ul>
<p>Despite these topic titles, I must admit to having expected a little more on the “UX” part of the title. So far, I don’t remember seeing any real Fiori screen, much less an analysis of how and why it might have been designed that way, and certainly nothing about what lies underneath (the controls in the UI5 toolkit). But it’s still relatively early days, and I haven’t given up hope.</p>
<p>One thing I’m also not giving up hope on is the approach Open SAP will have to rectifying incorrect “correct” answers to questions in the weekly assignments. For those of you on the course (and therefore with access to the discussion areas), <a href="https://open.sap.com/courses/fiori1/question/9e254a98-c309-40f2-b0ae-f1dbec2e0874">here’s an example</a> of where a question was asked, with the officially correct answer actually being incorrect. (There are other instances of this happening on the course too, but I think those are down to oversights rather than anything else.)</p>
<p>The answer in question, so to speak, related to the deployment steps for frontend and backend Fiori components, and whether they were the same. Of course, with the variations on system landscapes, ABAP and HANA stacks, and even the deployment tools themselves, the answer is “no”. But this has been marked as incorrect by Open SAP. While in the grand scheme of things this hardly matters, to those taking the course, it’s both a matter of principle and an area that one would feel strongly about, being the type of person taking the course, i.e. one that enjoys exacting detail.</p>
<p>I’m sure that the Open SAP folks will sort this out before the course is over.</p>
<p>Before leaving this subject, I would also like to point out that the course content has been rather dry so far. For example, this week’s lectures entail the long winded description of configuration (especially in the area of role assignments in PFCG), only backed up by static slides. Unless I missed it, I didn’t see any actual real live screencasts of configuration in action. I don’t know about you, but I can only take so many slides with theory on them, I need to see things in action. As one of my favourite TV characters likes to say, “let the dog see the rabbit”!</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>This Week in Fiori (2014-38)</title>
      <link href="https://qmacro.org/blog/posts/2014/09/21/this-week-in-fiori-(2014-38)/"/>
      <updated>2014-09-21T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2014/09/21/this-week-in-fiori-(2014-38)/</id>
      <content type="html">
        <![CDATA[
      <p>Hello again, I’m back again after a week off TWIF, a week where I managed to participate in two great events in the north of England. First, on Sat 13 Sep there was <a href="http://scn.sap.com/community/events/inside-track/blog/2014/05/02/sap-inside-track-sheffield--uk">SAP Inside Track Sheffield</a>, (organised by Tim Guest, Steve Lofthouse and others) where I presented a session on UI5.</p>
<p><img src="/images/2014/09/Screenshot-2014-09-21-at-21.19.54-300x149.png" alt="Screenshot 2014-09-21 at 21.19.54"></p>
<p>Then yesterday (Sat 20 Sep) there was <a href="http://scn.sap.com/community/events/codejam/blog/2014/08/15/sap-codejam-liverpool--openui5">SAP CodeJam Liverpool</a>, organised by Gareth Ryan. It was a UI5-themed day where I was totally honoured to work with Frederic Berg (one of the many UI5 heroes from Walldorf) taking the participants on an all-day introduction to building apps with UI5. We took a Fiori design led approach with the exercises and I would say that by the end of the day all the attendees had gained a good appreciation for UI5 and a decent understanding of the development approach. It was a lot of fun and very rewarding; not least because a couple of the participants were from the non-SAP developer ecosphere. Developer outreach, albeit small, in action!</p>
<p>Perhaps it’s worth pointing out again that SAP Fiori is powered by UI5. To properly understand SAP Fiori from a developer perspective, UI5 is an essential skill to have.</p>
<p>Anyway, on to this week’s picks.</p>
<p><strong><a href="http://www.sdn.sap.com/irj/scn/go/portal/prtroot/docs/library/uuid/40611a2f-ba23-3210-60b5-d26402db0f2e?QuickLink=index&amp;overridelayout=true&amp;59575491383848">How to launch “Web Dynpro ABAP” and “SAP GUI for HTML” Application Types from the SAP Fiori Launchpad</a> by Jennifer Cha</strong>
I’ve talked about the SAP Launchpad becoming the new portal a number of times in this TWIF series, but if you need more convincing, take a look at this step by step guide. SAP Fiori Launchpad started out live (in its previous “Launch Page” incarnation) as an initial access point to the Wave 1 ESS/MSS Fiori apps.</p>
<p>A lot has changed since then, not least the HTML5 architecture that powers it. But more importantly, the ability to make more available through this initial access point is increasing. SAP Fiori, part of SAP’s “New, Renew, Enable” strategy[^n], specifically the “Renew” part, is not going to cover the entire functional breadth of, say, your ECC system. So having the ability to expose more traditional transactions in the same context as the next generation approach makes some sense, even if it does, in my mind, dilute the purity of design :-)</p>
<p>[^n]:actually this strategy now has a fourth strand “Design Services”. More on that another time, perhaps.</p>
<p><strong><a href="https://www.youtube.com/watch?v=M_12F3JNKWA">SAP Fiori and Google Analytics</a> by Craig Gutjahr</strong>
The integration of Google Analytics and web apps is nothing new of course. But this short screencast is a nice reminder of what’s possible. The ability to track activity on a user basis, even on a page basis, is extremely valuable. Combine the detail that Google Analytics gives you, with the ability to explicitly send details on page views from your Fiori app (on a certain event in UI5, such as a navigation) and use that information for the next iteration of your app, focusing on roles and task-based activities, and you can build yourself a nice UX feedback loop.</p>
<p>By the way, there’s a nice example of sending explicit events to Google Analytics on Joseph Adams’s post “<a href="http://jcla1.com/blog/optimizing-google-analytics/">Optimizing page timings for Google Analytics</a>“.</p>
<p><strong><a href="http://scn.sap.com/community/mobile/blog/2014/09/19/the-power-of-design-thinking-in-fiori-application-development">The Power of Design Thinking in Fiori Application Development</a> by Sarah Lottman</strong>
This is a good short piece on, well, basically, talking to the user to work out what they need. I’m still not sure what design thinking is, over and above putting yourself in the users shoes and working out what they want, before developing stuff. Of course, this is very glib of me and I may have missed the mark, and the design process that Sarah describes is neither easy nor obvious. I myself am guilty of building software and then imposing that upon others, without having talked to them.</p>
<p>So perhaps the key takeaway is actually that one way to get design right is to use the building blocks that Sarah describes – persona creation, process and task flow mapping, and wireframing. Actually it’s often fun to skip wireframing and jump straight to throwing UI5 control declarations into an XML view structure and throwing it at the screen. Or is that just me?</p>
<p><strong>Jobs, Jobs, Jobs by Various</strong>
It was going to happen sooner or later. Actually it already started a while ago, but these days I’m noticing more and more job postings. Postings mentioning Fiori specifically, and postings mentioning UI5 specifically, in the title. Thing is, with Fiori and UI5 being relative new skills on the scene, there’s room for even more confusion than normal in this area.</p>
<p><img src="/images/2014/09/Screenshot-2014-09-21-at-21.01.18.png" alt="Screenshot 2014-09-21 at 21.01.18">]</p>
<p>Take a recent post on Twitter, advertising a position thus: “Architect – Mobile Web &amp; Fiori Job” at SAP in Bangalore (according to the link destination).</p>
<p>But reading the copy, the only mention of the word “Fiori” in the whole detail was in the title. Nowhere in the actual description. And the only mention of UI5 at all was as the last item in a list, almost an afterthought: “(JQM, Sencha, SAP UI5, etc)”.</p>
<p>I don’t understand what’s going on here. So I guess we have to just keep an eye on the details of what is actually being offered. And on that subject, keep an eye on the details on the other side of the fence too. In a previous episode (TWIF 2014-29) I noted seeing a claim of “five years plus of SAP Fiori focused delivery”. Remember, Fiori has existed for less than two years, UI5 for a bit more than that. Caveat, well, everyone.</p>
<p>That’s it for this week, thanks for reading, see you soon!</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Scratching an itch - UI5 Icon Finder</title>
      <link href="https://qmacro.org/blog/posts/2014/09/14/scratching-an-itch-ui5-icon-finder/"/>
      <updated>2014-09-14T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2014/09/14/scratching-an-itch-ui5-icon-finder/</id>
      <content type="html">
        <![CDATA[
      <p>There are a huge number of icons as standard in the UI5 library, both in the SAPUI5 and OpenUI5 flavours. Here’s the <a href="https://openui5.hana.ondemand.com/test-resources/sap/m/demokit/icon-explorer/index.html">Icon Explorer</a> from the SDK.</p>
<p><img src="/images/2014/09/Screenshot-2014-09-14-at-20.35.07.png" alt="image">One of the problems I have is that when I’m looking for an icon, the search term I have in my head is not necessarily going to match up with the name of the icon in the library.</p>
<p>For example, I might be looking for a “cog”, with the icon on the left in mind, but I’m not going to be able find it unless i use the term “action-settings”.</p>
<p>And in the light of the session I gave this weekend at <a href="http://scn.sap.com/community/events/inside-track/blog/2014/05/02/sap-inside-track-sheffield--uk">SAP Inside Track Sheffield</a> on “Quick &amp; Easy Apps with UI5″, where I focused on single-file apps, albeit with full MVC, I decided to hack together a little smartphone-focused app where I could search for icons, and add my own “aliases” so that next time I searched, the search would look at my aliases too.</p>
<p>It’s a very simple affair, and in this first version, is designed to use the <a href="http://diveintohtml5.info/storage.html">localStorage</a> mechanism in modern browsers so that you build up your own set of aliases. Perhaps a future version might share aliases across different users, so that we can crowdsource and end up with the most useful custom search terms.</p>
<p>Anyway, it’s available currently at <a href="http://pipetree.com/ui5/projects/iconfinder/">http://pipetree.com/ui5/projects/iconfinder/</a> and you can grab the sources from the <a href="https://github.com/qmacro/iconfinder">Github repo</a> (remembering that the whole point of this is it’s a single-file app!).</p>
<p><img src="/images/2014/09/Screenshot-2014-09-14-at-20.48.52.png" alt="image"></p>
<p>Here’s a short screencast of a version of it in action:</p>
<iframe allowfullscreen="" frameborder="0" height="315" src="//www.youtube.com/embed/laNprcrApKc" width="560"></iframe>
<p>Let me know what you think – is it useful? In any case, s<span style="line-height: 1.714285714; font-size: 1rem;">hare &amp; enjoy!</span></p>
<p></p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>This Week in Fiori (2014-36)</title>
      <link href="https://qmacro.org/blog/posts/2014/09/08/this-week-in-fiori-(2014-36)/"/>
      <updated>2014-09-08T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2014/09/08/this-week-in-fiori-(2014-36)/</id>
      <content type="html">
        <![CDATA[
      <p><img src="https://experience.sap.com/wp-content/themes/experience-main/fiori/img/Detail-Suggestion-SAP-Fiori-Guidelines-link.png" alt=""></p>
<p>When you write a series of weekly posts, you’re acutely aware of how fast the actual weeks fly by. And this last one was no exception. Lots of movement and activity in the SAP Fiori world … let’s get to it.</p>
<p><strong><a href="https://www.youtube.com/watch?v=6wJz-mams2Y">Introducing the New SuccessFactors UX based on SAP Fiori</a> by Sam Yen</strong>
This short video from Sam Yen, SAP’s Chief Design Officer, is worth watching, not least for the soundbites that help underline how important SAP Fiori is for SAP, and therefore for us as customers and partners. Here are a couple of them:</p>
<p><em>“Design has been named one of the five priorities of the entire company”</em></p>
<p><em>“Fiori is now the design direction for all of SAP’s solutions”</em></p>
<p>Clearly building the new SuccessFactors complete user experience upon SAP Fiori is a significant next step in this direction. Even if you’re not interested in any of the current SAP Fiori apps, be interested in SAP Fiori as a UX and UI technology. Not being interested is to miss out on one of the critical new generation platforms for enterprise apps in the SAP ecosphere.</p>
<p><strong><a href="http://scn.sap.com/community/mobile/blog/2014/09/08/take-part-in-the-sap-fiori-ux-design-challenge">Take Part in the SAP Fiori UX Design Challenge</a> by Susanne Busemann</strong>
Tomorrow sees the start of the OpenSAP course which I first mentioned in <a href="/blog/posts/2014/08/01/this-week-in-fiori-2014-31/">TWIF episode 2014-31</a> – the <a href="https://open.sap.com/course/fiori1">Introduction to SAP Fiori UX</a>. As an optional part of this course, a design challenge has been set.</p>
<p>If you don’t know already, a large part of the philosophy behind SAP Fiori is about the UX, as distinct from the UI. The UX you get from SAP Fiori is powered by the UI that is provided by the tremendously capable UI5 toolkit (see <a href="http://www.bluefinsolutions.com/Blogs/DJ-Adams/February-2014/The-essentials-SAP-UI5-OpenUI5-and-Fiori/">The Essentials – SAPUI5, OpenUI5 and Fiori</a> for more details on UI5 and its relationship with Fiori).</p>
<p>Even as a out and out developer, and primarily (or at least originally) a backend developer – a “data plumber”, I have found in my UI5 and Fiori development experience so far that prototyping the user experience is a important part of building great apps. So I’m happy to see that folks are encouraged to dip their toes in the design pool.</p>
<p>See you on the course!</p>
<p><strong><a href="http://scn.sap.com/people/aviad.rivlin/blog/2014/09/08/my-personal-ux-fiori-portal-cloud-cheat-sheet">My Personal Ux, Fiori, Portal, Cloud Cheat Sheet</a> by Aviad Rivlin</strong>
My friend and fellow SAP Mentor Aviad has appeared on TWIF before, specifically in <a href="/blog/posts/2014/07/26/this-week-in-fiori-2014-30/">TWIF 2014-30</a>, talking about the SAP Fiori Launchpad and the SAP Portal of course. This time he’s back, with a nice little set of links to great resources relating to Fiori, Portal and the cloud. It’s a super combination and not a little fascinating, for reasons I’ve mentioned before – there’s a convergence of SAP Fiori’s Launchpad with the older SAP Portal concepts, which is not unexpected as both serve similar functions.</p>
<p>Aviad intends to update the blog posts with new links as and when appropriate, so it’s definitely worth bookmarking.</p>
<p><strong><a href="http://scn.sap.com/community/enterprise-portal/blog/2014/09/05/sap-fiori-apllication-integration-with-sap-enterprise-portal">SAP Fiori Application Integration with SAP Enterprise Portal</a> by Ido Fishler</strong>
On the subject of SAP Fiori and SAP Portal, here’s another timely blog post on the SAP Community Network by Ido Fishler. He takes the reader through the steps required to get an SAP Fiori app integrated (via iView) into the SAP Enterprise Portal. Whether you’re running an SAP Portal or not, it’s definitely worth a read – the “exhaust-knowledge” alone is worth the price of a coffee for sure.</p>
<p>Well that’s all for now, folks. I’m off to document episode four of a rather exciting series I’m building on the subject of OpenUI5. Until next time, share and enjoy!</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>This Week in Fiori (2014-35)</title>
      <link href="https://qmacro.org/blog/posts/2014/08/31/this-week-in-fiori-(2014-35)/"/>
      <updated>2014-08-31T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2014/08/31/this-week-in-fiori-(2014-35)/</id>
      <content type="html">
        <![CDATA[
      <p><img src="/images/2014/08/f-300x273.jpg" alt=""></p>
<p>Hello and welcome to another episode in This Week in Fiori (TWIF) – for week 35, the last week in August already. This week it’s an all-SAP affair. Without further ado, let’s get to it.</p>
<p><strong><a href="http://help.sap.com/fiori_bs2013/helpdata/en/99/e464520e2a725fe10000000a441470/content.htm">Catalog of SAP Fiori Apps</a> by SAP</strong>
This has recently started to appear on people’s radar, and is a nice resource for summarising all the apps available so far. There are a lot of apps listed, and according to a rough calculation it looks like 370 apps are now listed.</p>
<p>I guess one issue with this catalog page is that it doesn’t really scale, from a human readable perspective, and you don’t get a feel for where the majority of the apps lie. For that, I’d of course recommend my <a href="https://code.bluefinsolutions.com/~dadams/FioriWebinar/AppAnalysis.html">SAP Fiori App Analysis Tool</a> that I mentioned in a previous TWIF episode (<a href="/blog/posts/2014/08/01/this-week-in-fiori-2014-31/">TWIF 2014-31</a>). This tool lists the apps that were available at the time the tool was built (313 of them), and I need to get round to add the new apps to the database. Of course, perhaps if I found a few of the right shaped tuits I might attempt to parse the source of this Catalog page. Ideally, SAP would supply a machine readable dataset. Please?</p>
<p>Here’s my rough calculation, by the way :-)</p>
<p><img src="/images/2014/08/cat-300x213.jpg" alt="cat"></p>
<p><strong><a href="http://sessioncatalog.sapevents.com/go/agendabuilder.sessions/?l=85&amp;locale=en_US&amp;selectedFilters=tag_0:0,tag_202:13848&amp;kw=">SAP Fiori Subtrack at SAP TechEd &amp; d-code</a> by SAP</strong>
The SAP TechEd conference season is starting soon and the excitement is building already. This year there’s a User Experience &amp; User Interface Development track[^n]. Within this track there’s an <a href="http://sessioncatalog.sapevents.com/go/agendabuilder.sessions/?l=85&amp;locale=en_US&amp;selectedFilters=tag_0:0,tag_202:13848&amp;kw=">SAP Fiori subtrack</a>, which is great to see (although not unexpected!). Here’s a quick glance of the sessions in this subtrack in Berlin:</p>
<p><img src="/images/2014/08/fiorisubtrack.jpg" alt="image"></p>
<p>Mini CodeJams, Code Reviews, Lectures and Hands-on Workshops. There are not as many as I’d like, but it’s a good start. Perhaps I’ll see you there?</p>
<p>[^n]:Ironically the SAP TechEd &amp;&amp; d-code site makes it very difficult for me as a user to use – following links within the Agenda Builder break fundamental browsing contracts and expectations, such as being unable to go back having selected a track or subtrack, for example. Bad UX at its best.</p>
<p>**<a href="http://scn.sap.com/docs/DOC-52555">Use Cases for Extending the UI of SAP Fiori Apps</a> by Clement Selvaraj
**One of the better (read: more comprehensive) PDF based documents to come out over the past few months, that has only just come to my attention, is this PDF-based detailed document on extending SAP Fiori apps. It takes a specific functional scenario (<a href="http://help.sap.com/fiori_bs2013/helpdata/en/20/c74c522565d330e10000000a44538d/frameset.htm">Report Quality Issue</a>) and walks the reader through a series of extension use cases. These use cases cover the extension concepts (extension points and controller hooks), and as a nice by-product, give the reader insight into a little bit of how a real SAP Fiori app is put together under the covers. For example, it highlights the Sn views (S2.view.xml, S3.view.xml, and so on) which my colleague Brenton and I covered in our <a href="http://www.bluefinsolutions.com/Blogs/DJ-Adams/July-2014/Webinar-more-Understanding-SAP-Fiori/">Understanding SAP Fiori Webinar</a> a couple of months ago. See the accompanying video screencast “<a href="https://www.youtube.com/watch?v=nM0ffI-GxGk">Understanding SAP Fiori</a>” for more details.</p>
<p>Well that’s it for now, thanks for reading. I hope you’re enjoying this TWIF series … do please let me know if there’s any way I can make things better, I’d love to hear from you. Until next time, share &amp; enjoy!</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>This Week in Fiori (2014-34)</title>
      <link href="https://qmacro.org/blog/posts/2014/08/23/this-week-in-fiori-(2014-34)/"/>
      <updated>2014-08-23T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2014/08/23/this-week-in-fiori-(2014-34)/</id>
      <content type="html">
        <![CDATA[
      <p><img src="/images/2014/08/Screenshot-2014-08-23-at-14.37.51.png" alt="Screenshot 2014-08-23 at 14.37.51"></p>
<p>Another week gone! I’m sitting in my “second living room”, <a href="http://northteapower.co.uk">North Tea Power</a>, drinking a fab coffee and sifting through the Fiori related articles that came to my attention this week. And just this morning there was a very interesting conversation on Twitter that I also want to bring to your attention; not only because it relates to Fiori, but also because it involves some of the key thinkers and doers in this space, folks that I respect greatly. So, let’s get to it.</p>
<p><strong><a href="http://help.sap.com/fiori_bs2013/helpdata/en/c1/804352b4e61b13e10000000a44176d/frameset.htm">Extensibility information for SAP Fiori</a> by SAP</strong>
In my 27 years hacking on SAP, I’ve seen the constant struggle between quality and quantity of SAP documentation. I cut my enterprise tech teeth on IBM mainframes – proprietary tech to the core, but my goodness did they have superb documentation, the quality and preciseness of which I’ve never seen since, to be honest. I’m sure I’m not the only one who’s had a love-hate relationship with SAP documentation, but having recently been on the other side of the fence (involved in <a href="http://help.sap.com/saphelp_uiaddon10/helpdata/en/5c/a68e6e62e6464a8103297fbc19cd9c/content.htm?frameset=/en/91/f0ed206f4d1014b6dd926db0e91070/frameset.htm">producing some documentation</a> recently) I do know it’s no easy task.</p>
<p>SAP Fiori is here to stay, as are the underlying tech layers; and we need to be prepared to embrace a new SAP software logistics world that is very different from the old but comfortable ABAP stack based one with which we’re familiar. Software logistics? Code management, version control, deployments, and extensions &amp; enhancements … not least those modification free ones that allow us to survive service pack updates and the like.</p>
<p>So it is with this in mind that I reviewed what extensibility documentation exists in the SAP Fiori space. While it touches many of the bases, it is still relatively sparse on detail, and still lacking in examples. Still, it is a start, and I encourage you to read it, if nothing else, to discover the areas that you need to know more about … and persuade SAP to write more on.</p>
<p><strong><a href="http://scn.sap.com/community/ui-technology/blog/2014/08/13/fiori-personas-and-beyond-selecting-the-best-ui-for-sap-processes">Fiori, Personas and beyond: selecting the best UI for SAP processes</a> by Chris Scott</strong>
This is a nicely considered post on the SAP Community Network that takes a step back from Fiori and encourages the reader to consider all the options for improving the overall user experience (UX). It highlights that there are options other than SAP Fiori of course, but more importantly it suggests, rightly, that the whole approach should be requirements driven, with a focus on improving process. Sure, this sounds obvious, but sometimes it’s easy to lose sight of the bigger picture when the tech is so compelling. It also goes some way to underline the basis of SAP Fiori UX strategy – task / function focused, according to role, rather than the more traditional feature-smorgasbord that we’re used to in the UI that we drive by entering transaction codes.</p>
<p><strong><a href="http://experience.sap.com/fiori-guidelines/FioriDesign/52_Fiori_Design-Prototyping-Kit.html">SAP Fiori Prototyping Kit</a> by SAP</strong>
In <a href="/blog/posts/2014/07/09/this-week-in-fiori-2014-28/">TWIF 2014-28</a>, I highlighted the <a href="http://experience.sap.com/wp-content/fiori-guidelines/">SAP Fiori Design Guidelines</a>. Bundled with these guidelines was a simple prototyping kit. The very fact that a prototyping kit exists suggests how important the user interface (UI) design process is if you want to produce good UX, and while there are different philosophies related to prototyping, a lowest-common-denominator approach is to mock stuff up with building blocks that represent UI component parts. The prototyping kit has these component parts, and has recently (this month) been updated. Definitely worth a download.</p>
<p>A useful side effect of tools like this is that we stand a better chance of producing appropriate and consistent, compatible “Fiori-like” UIs that don’t jar when switching from one app to the next.</p>
<p><strong><a href="https://twitter.com/grahamrobbo/status/503123365671219200">On UI5 and Fiori deployment and extensions</a> by The Usual Suspects on Twitter</strong>
A very interesting conversation came about on Twitter this morning, with UI5 and Fiori luminaries such as <a href="http://twitter.com/grahamrobbo">Graham Robinson</a>, <a href="http://twitter.com/jasper_07">John Patterson</a> and <a href="http://twitter.com/js1972">Jason Scott</a>. It was about non-standard (i.e. not SAP standard) development workflows, and included thoughts on Fiori development and extensibility.</p>
<p>As with many Twitter conversations, a lot of what was not said — due to the 140-char nature of the microblogging platform — was just as important (bringing a modern nuance to “reading between the lines”). My take on the conversation, and the thoughts in the minds of the participants, was that we need to keep a close eye on where SAP is going with tooling, and where we as individual developers want to go, how the paths are similar and how they’re different. Not everyone wants to use Eclipse, or even RDE, to develop and maintain Fiori applications. RDE – the River Development Environment – is of course a fabulous piece of engineering but it should never be a one-size-fits-all solution.</p>
<p>One of the wonderful side effects of SAP embracing open standards and open source is the freedom we have to choose the tools, and build the the tool chains and workflows with those tools, workflows that best suit the particular environment and circumstances of the client and the design / developer teams. I want to make sure we don’t lose sight of that side effect as time goes on.</p>
<p>Well that’s it for this week, until next time, share &amp; enjoy!</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>This Week in Fiori (2014-33)</title>
      <link href="https://qmacro.org/blog/posts/2014/08/17/this-week-in-fiori-(2014-33)/"/>
      <updated>2014-08-17T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2014/08/17/this-week-in-fiori-(2014-33)/</id>
      <content type="html">
        <![CDATA[
      <p><img src="/images/2014/08/Screen-Shot-2014-08-17-at-11.03.23.png" alt="Screen Shot 2014-08-17 at 11.03.23"></p>
<p>Hello again. Another week has passed, and the writing of this week’s TWIF should have found me in the Lake District, but alas due to circumstances too tedious to go into now, finds me about 90 miles south, back at home. Anyway, it’s the end of the week and therefore time for some Fiori links and commentary. Let’s get to them!</p>
<p><strong><a href="http://scn.sap.com/docs/DOC-57363">SAP Fiori Launchpad for Developers</a> by Steffen Huester and Olivier Keimel</strong>
In previous TWIF episodes I’ve mentioned the SAP Fiori Launchpad and its importance to the Fiori app ecosphere. It’s slowly becoming the new lightweight portal and rightly so. The SAP Fiori Launchpad has been designed to be cross platform (ABAP, HANA and Cloud stacks) and in true SAP style this design shows through in the form of abstraction layers — service adapters, the shell renderer and the application container. In fact, it’s the application container that might pique your interest, as we see that it can not only host UI5 apps (via the Component concept) but also Web Dynpro ABAP and SAP GUI for HTML apps.</p>
<p>This document, which applies to the User Interface Add-On 1.0 SPS 05 (am I the only one to still refer to this product as “UI2″?) is a great resource which explains the Launchpad architecture and includes some details, and do’s &amp; don’ts, on the <a href="https://sapui5.hana.ondemand.com/sdk/#docs/guide/170638b7a2b4424e8580fb473af6a3cd.html">Component based approach</a> to building and embedding apps. Yes, embedding – the Launchpad is a single HTML page (a resource with a URL typically ending “FioriLaunchpad.html”) into which UI5 apps, in the form of Components, are loaded.</p>
<p>One thing in this document that made me smile was a couple of references to the <a href="http://help.sap.com/saphelp_hanaplatform/helpdata/en/5c/a68e6e62e6464a8103297fbc19cd9c/content.htm?frameset=/en/d0/1cd0b7be7f441cb6c56ad4577b428c/frameset.htm&amp;current_toc=/en/d0/1cd0b7be7f441cb6c56ad4577b428c/plain.htm&amp;node_id=64">UI5 Application Best Practices guide</a> (also <a href="https://sapui5.hana.ondemand.com/sdk/#docs/guide/5ca68e6e62e6464a8103297fbc19cd9c.html">available in the SDK docu</a>) which is the work of my own hand :-)</p>
<p>**<a href="www.insidesap.com.au/in_depth/build-me-an-app-that-looks-just-like-fiori-developing-mobile-apps-with-sapui5">Build me an app that looks just like Fiori</a> by John Patterson
**This article only recently came to my attention. It was published a few days ago in Inside SAP but looking at some of the content towards the end (specifically about open sourcing), I think it was written a while ago. Nevertheless it’s a good read and worthy of attention now. (Also, randomly, it reminds me of the title of the film “<a href="http://en.wikipedia.org/wiki/Bring_Me_the_Head_of_Alfredo_Garcia">Bring Me the Head of Alfredo Garcia</a>“.)</p>
<p>Even now I come across folks who are still looking for a good explanation of Fiori, UI5 and the relationship between them, and also what UI5 offers. Sometimes I point them at my post “<a href="http://www.bluefinsolutions.com/Blogs/DJ-Adams/February-2014/The-essentials-SAP-UI5-OpenUI5-and-Fiori/">The essentials: SAPUI5, OpenUI5 and Fiori</a>” but also this article by John addresses that need nicely too.</p>
<p><span style="line-height: 1.714285714; font-size: 1rem;">(Warning, you need to complete a free signup to get to the content. Come on <a href="http://www.insidesap.com.au/">Inside SAP</a>, you can do better than that!)</span></p>
<p>**SAP Fiori Course Offerings by SAP
**In <a href="/blog/posts/2014/08/01/this-week-in-fiori-2014-31/">TWIF 2014-31</a> I mentioned that the OpenSAP MOOC is offering a free course “Introduction to SAP Fiori UX” starting in September this year. I thought I’d take a look at what SAP offers in the way of more traditional courses, relating to Fiori. This is what I found on the <a href="https://training.sap.com/gb/en/curriculum/fiori_uk-sap-fiori-uk/">SAP Fiori curriculum page</a>:</p>
<p><img src="/images/2014/08/Screen-Shot-2014-08-17-at-10.52.03.png" alt="image"></p>
<p><span style="line-height: 1.714285714; font-size: 1rem;">It’s still early days, I think, but it’s a fair representation of the skills required for Fiori:</span></p>
<ul>
<li>Design thinking (THINK1)</li>
<li>HTML5 &amp; SAPUI5 (SAPX04 and SAPX05)</li>
<li>Gateway (OData) (GW100)</li>
<li>Fiori Implementation &amp; Configuration (SAPX03)</li>
</ul>
<p>Note that the GW100 course covers OData from a Gateway perspective, i.e. the OData server product mechanism from SAP for the ABAP stack. There doesn’t seem to be coverage for the roughly equivalent OData server mechanism XSODATA on the HANA stack. With many of the SAP Fiori apps, specifically the analytical and factsheet ones*, requiring HANA as a backend, this seems to be a gap that should be filled sooner rather than later.</p>
<p>*See the <a href="https://code.bluefinsolutions.com/~dadams/FioriWebinar/AppAnalysis.html">SAP Fiori App Analysis tool</a> for more details</p>
<p><strong><a href="http://help.sap.com/fiori_bs2013/helpdata/en/a6/49c453110bcd46e10000000a44538d/content.htm?frameset=/en/9c/106a53e744e047e10000000a441470/frameset.htm&amp;current_toc=/en/9c/106a53e744e047e10000000a441470/plain.htm&amp;node_id=3">What’s New in SAP Fiori (Delivery July 2014)</a> by SAP</strong>
A nice coffee time read is this series of What’s New documents from SAP on the main SAP Fiori documentation site. The documents don’t go into too much detail but do have pointers to where more information is available; they nicely summarise some of the new features and changes that are delivered in the ever increasing number of waves.</p>
<p>This time, like last time (for the Delivery May 2014 edition), the What’s New covers Products, Infrastructure and Documentation. There again we have the significance and prominence of Fiori infrastructure, which of course includes the Launchpad, but also the set of layers between any given Fiori app and your backend SAP system. Worth keeping an eye on for sure.</p>
<p>Well that just about wraps it up for this week. Until next time, share &amp; enjoy!</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>This Week in Fiori (2014-32)</title>
      <link href="https://qmacro.org/blog/posts/2014/08/08/this-week-in-fiori-(2014-32)/"/>
      <updated>2014-08-08T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2014/08/08/this-week-in-fiori-(2014-32)/</id>
      <content type="html">
        <![CDATA[
      <p><img src="/images/2014/08/Screen-Shot-2014-08-08-at-18.53.49-300x168.png" alt="image"></p>
<p>Here we are, another week into the new Fiori flavoured world, and as always, there are things to talk about and posts to mention. While it’s been a relatively quiet week there have still been various “announcements” that company X or company Y is now supporting SAP Fiori, or have a Fiori related offering which involves design, prototyping or deployment.</p>
<p>While the glass-half-empty folks might point out that this is a lot of marketing and bandwaggoning, I like to think of it as a good sign that as well as already being everything from a design philosophy (“Fiori”) to a product (“SAP Fiori”), it’s also gaining traction and mindshare in the wider ecosystem and becoming a definite context for engagement.</p>
<p>Ok, let’s get to the pointers for this week.</p>
<p><strong><a href="http://scn.sap.com/docs/DOC-51167">Build SAP Fiori-like UIs with SAPUI5</a> by Bertram Ganz</strong>
While working as a member of the core UI5 team at SAP in Walldorf in 2013/2014, I was privileged to take part in the creation and presentation of SAP TechEd session CD168 “Building SAP Fiori-like UIs with SAPUI5″ with a number of UI5 heroes like Thomas Marz, Frederic Berg, Bertram Ganz and Oliver Graeff. <a href="http://scn.sap.com/community/developer-center/front-end/blog/2013/10/06/building-sap-fiori-like-uis-with-sapui5">I wrote about the CD168 session</a> in a post on the SAP Community Network and since the delivery of the session at the SAP TechEd events 2013, the slides, detailed exercise document and exercise solutions have been made available via Bertram’s post.</p>
<p>Even though it was posted back in January this year, it’s still an important post for a couple of reasons. First, the material is very comprehensive and takes you from a very basic and raw application all the way through to a rather accomplished Fiori application, introducing many features of UI5 that are key to Fiori applications along the way. But also, it shows us that designing and building Fiori applications is not just in SAP’s hands – it can be in <em>your</em> hands too. Fiori is a concept big enough to share.</p>
<p>If you haven’t already, take a look at this content to get a feel for what it’s like to build Fiori apps. It’s a pretty decent set of materials, and I’m very proud to be a co-author.</p>
<p><strong><a href="http://experience.sap.com/topic/why-pie-charts-are-not-in-sap-fiori-charting-library/">Why Pie Charts are not in SAP Fiori Chart Library</a> by Vincent Monnier</strong>
Like the reference to <a href="http://scn.sap.com/people/kai.richter/blog/2014/06/30/the-fiori-design-principles">The Fiori Design Principles</a> in the first post in this series back in week 27 (<a href="/blog/posts/2014/07/02/this-week-in-fiori-2014-27/">TWIF 2014-27</a>), this post by a designer at SAP highlights that as well as development and the thought processes behind building software, there’s also <em>design</em> and the thought processes behind building a great experience … both of these things go into Fiori.</p>
<p>This is a relatively short post that highlights out some of the general downsides to pie charts and points to some further reading. But it’s the fact that the design process has been gone through and also shared with the wider community that is interesting. In fact, if nothing else, use this as a pointer to the whole <a href="https://experience.sap.com/">SAP User Experience Community</a> site. And if you want to know more about charts in SAP Fiori, see <a href="http://experience.sap.com/fiori-guidelines/FioriPatterns/21_Fiori_Patterns-Charts.html">the chart section in the SAP Fiori Guidelines</a>.</p>
<p><strong><a href="https://sapui5.hana.ondemand.com/sdk/explored.html">The UI5 Explored App</a> by the UI5 Team</strong>
The toolkit on which Fiori apps are built is UI5 (UI5 is the generic term I use for both the SAP licenced version SAPUI5 and the open source licenced version OpenUI5 … see <a href="http://www.bluefinsolutions.com/Blogs/DJ-Adams/February-2014/The-essentials-SAP-UI5-OpenUI5-and-Fiori/">The Essentials – SAPUI5, OpenUI5 and Fiori</a> for more info). The UI5 <a href="https://sapui5.hana.ondemand.com/sdk/">Software Development Kit</a> (SDK) includes a large amount of documentation and example code, and part of that is known as the Explored App. It started out life specifically to showcase and provide example best practice approaches for controls in the responsive “sap.m” library, but has graduated to being a top level menu section within the SDK and covers controls beyond “sap.m” now too.</p>
<p>(As with the CD168 tutorial materials, I am also proud to have had a hand in building the Explored App too ;-)</p>
<p>With the <a href="https://sapui5.hana.ondemand.com/sdk/explored.html">Explored App</a> you can, well, explore many features and functions within UI5, a good number of which are used to build Fiori applications, and you’ll start to recognise component parts, building blocks that are used and reused to provide features such as search, lists, buttons, dialogs, and so on. Let’s pick one – the <a href="http://localhost:8888/sapui5/latest/explored.html#/entity/sap.m.IconTabBar/samples">IconTabBar</a>. In context, it typically looks like the lower half of this screenshot:</p>
<p><img src="/images/2014/08/Screen-Shot-2014-08-08-at-18.40.32.png" alt="image"></p>
<p><span style="line-height: 1.714285714; font-size: 1rem;">The IconTabBar is used to contain a number of tabbed sections, with the selection for each of the sections typically being round icons. The design changed slightly between SAP Fiori Wave 4 and 5, now there’s more info shown in place of the icons.</span></p>
<p>Have a look around and see what Fiori building blocks you can recognise!</p>
<p>Well, the train is almost at Manchester Piccadilly now so this brings this week’s roundup to a close. As always, thanks for reading, and remember you can access the whole series with this TWIF category link: <a href="/category/twif/">/category/twif/</a>.</p>
<p>Share and enjoy!</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>This Week in Fiori (2014-31)</title>
      <link href="https://qmacro.org/blog/posts/2014/08/01/this-week-in-fiori-(2014-31)/"/>
      <updated>2014-08-01T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2014/08/01/this-week-in-fiori-(2014-31)/</id>
      <content type="html">
        <![CDATA[
      <p><img src="/images/2014/08/Screen-Shot-2014-08-01-at-18.42.49-300x214.png" alt="SAP UX Explorer"></p>
<p>Well, yet another week has gone by and we have new Fiori related content to consume. And I was reminded of that early this morning after seeing a <a href="https://twitter.com/c821311/status/495067577735864321/photo/1">tweet and a screenshot from Tony de Thomasis showing SAP Fiori for TDMS 4.0</a> – the scope of SAP Fiori apps is indeed widening further. The tweet prompted me to think about reviewing the data for my online <a href="https://code.bluefinsolutions.com/~dadams/FioriWebinar/AppAnalysis.html">SAP Fiori App Analysis tool</a>** with a view to updating it. Do you find it useful? Let me know in the comments or via Twitter (I’m <a href="http://twitter.com/qmacro">@qmacro</a>).</p>
<p>**the data is hand-gathered, see <a href="http://youtu.be/aVeQ4asHgaY">The SAP Fiori App Analysis application</a> for some background. Ideally SAP could make this data available and keep it up to date for us, right?</p>
<p>Anyway, on to the picks for this week.</p>
<p><strong><a href="https://open.sap.com/course/fiori1">OpenSAP’s Introduction to SAP Fiori UX</a>, by Prakalp Phadnis, Elizabeth Thorburn &amp; Jamie Cawley</strong>
Well, that didn’t take long! SAP’s extremely popular and successful Massive Open Online Courses (MOOC) system “OpenSAP” is offering a free course on SAP Fiori. Specifically, Fiori User Experience (UX). After all, UX is at the heart of a lot of what the Fiori philosophy is about.</p>
<p>I’ve said in the past that Fiori is “many things, including a state of mind”. I’m hoping that this course, which promises lessons on fundamentals, latest features, installation, configuration and best practices for extensibility, will instill in the attendee a sense of what good looks like, and help to prevent possible dilution of the Fiori concepts.</p>
<p><strong><a href="http://scn.sap.com/community/mobile/blog/2014/07/29/the-sap-fiori-launchpad-has-been-added-to-the-ux-explorer">The SAP Fiori Launchpad has been added to the UX Explorer!</a> by Elizabeth Thorburn</strong>
In <a href="pipetree.com/2014/07/this-week-in-fiori-2014-30/">last week’s TWIF installment</a> I mentioned the functional proximities of the SAP Fiori Launchpad and the SAP Portal, in reference to a post by Aviad Rivlin. This week SAP have taken another step towards surfacing info about the important Launchpad, by including it in the UX Explorer.</p>
<p>With the <a href="https://uxexplorer.hana.ondemand.com/index.html">UX Explorer</a> you can find out about different User Interface (UI) and UX products and technologies from SAP. While the current content for the Launchpad isn’t overwhelming, it is there, which is a start. And there’s a couple of things that stood out for me: It stated loud and clear that the Launchpad was built using SAPUI5 (yay for the teams and my extended family in Walldorf!) and is most definitely marked as “strategic” as relating to relevance for SAP’s own application development.</p>
<p>Elizabeth is one of the tutors on the Introduction to SAP Fiori UX course, by the way.</p>
<p><strong><a href="http://scn.sap.com/blogs/SAPPSA_Jeffrey/2014/07/28/partner-co-innovation-workshop--build-your-own-fiori-app">Partner Co-Innovation Workshop – Build Your Own Fiori App</a> by Jeffrey D’Silva</strong>
For me this post is a bittersweet one. The SAP Co-Innovation labs are running a 3-day workshop for partners, covering design thinking, Fiori design principles, UI5 controls and more, culminating in the attendees building an app. It’s not clear to me after reading the agenda and the description whether the app will be a mockup only (as detailed in the agenda) or complete and fully certified (as detailed in the description). My guess is that with two of the three days taken up with design (and rightly so), the result will be nearer a working mockup than something that has already reached SAP certification.</p>
<p>But here’s the thing: SAP Fiori and the underlying technologies (UI5 and OData) are the fundamental building blocks of much of SAP’s application future. So it’s not only important for SAP themselves and SAP partners, <strong>but for SAP customers too</strong>. What customers were (and still are) building and extending in the land of classic and web dynpro, the approaches and techniques used, and the tools and platforms relied upon, will be slowly but surely be superseded by Fiori, UI5 and OData flavoured equivalents.</p>
<p>Customers, ready thyself for Fiori flavoured development! And by that, I mean a different approach to source code control, version management, extensibilty, and more, as well as design and build techniques and libraries.</p>
<p>That’s it for this week, have a great weekend, and as always, share &amp; enjoy!</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>This Week in Fiori (2014-30)</title>
      <link href="https://qmacro.org/blog/posts/2014/07/26/this-week-in-fiori-(2014-30)/"/>
      <updated>2014-07-26T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2014/07/26/this-week-in-fiori-(2014-30)/</id>
      <content type="html">
        <![CDATA[
      <p><img src="https://lh3.googleusercontent.com/-8Hsq77ogdog/U8sByTTcXDI/AAAAAAAAT6c/kJpV3R-Z_cg/w694-h1232-no/20140719_164212.jpg" alt="">Well what a week that was. I spent it in Portland, Oregon, which for me being a fan of great coffee and great craft beer, was a fantastic city to be in. It was in Portland that O’Reilly’s Open Source Convention (OSCON) was held, and I was there helping SAP tell the world about OpenUI5 – you can read more about that in this post: “<a href="/blog/posts/2014/07/22/openui5-tutorial-at-oscon-2014/">OpenUI5 Tutorial at OSCON 2014</a>“. As usual, there’s lots to talk about, so let’s get going with this week’s <a href="/category/twif/">TWIF</a> picks.</p>
<p><strong><a href="http://www.computerworld.com/s/article/9249924/Oracle_ships_nearly_60_mobile_apps_for_JD_Edwards">Oracle Ships Nearly 60 Mobile Apps for JD Edwards</a> by Chris Kanaracus</strong>
What’s interesting about this news is that there are many parallels with the SAP Fiori initiative. The apps that Oracle has released are free, and they’re task focused. One of the underlying design principles of Fiori is that the apps are task based – a person with a given role needs to perform a specific task. This not only makes the apps simpler, but it makes them more appropriate for mobile use, where often the available focus time is shorter than when you’re sitting in an office. And of course, after the pressure from customers, SAP Fiori apps are free too.</p>
<p>Finally, depending on your perspective, the fact that these apps are available in app stores is either a net positive or negative. For me, the appeal of Fiori is that it’s (a) cross-platform/device, rather than restricted to mobile devices and (b) hackable. This latter feature is why SAP applications, in my opinion, have been so successful in incarnations going right back to R/2, where I started – the source code is available to copy or modify.</p>
<p>**<a href="http://scn.sap.com/community/enterprise-portal/blog/2014/06/23/sap-enterprise-portal-74-sp7-sap-fiori-design-in-the-sap-enterprise-portal">SAP Enterprise Portal 7.4 SP7 – SAP Fiori Launchpad on the SAP Portal and more</a> by Aviad Rivlin
**It’s no secret that the SAP Fiori Launchpad and the SAP Portal both operate in a similar space – high level consolidated access to functions and applications in SAP backend systems. There’s a some confusion over SAP’s strategy in this area, and a lot of questions exist. From my perspective, the two initiatives are converging, from both technical and functional points of view. This post goes some way to help further clarify, or at least give some background to SAP’s attempt at aligning the user experience of both Portal and Fiori Launchpad.</p>
<p><strong><a href="http://scn.sap.com/community/rapid-deployment/blog/2014/07/23/more-fiori-new-updates-to-sap-fiori-rapid-deployment-solutions">More Fiori! New Updates to SAP Fiori Rapid Deployment Solutions</a> by Bob Caswell</strong>
In <a href="/blog/posts/2014/07/09/this-week-in-fiori-2014-28/">TWIF 2014-28</a> I wrote about the Rapid Deployment Solutions (RDS) that SAP brought out earlier this year in the Fiori arena. This week there’s an update to the solutions that SAP offer, with more apps covered, a greater emphasis on user experience adoption, and perhaps most significantly for me, an added focus on Gateway. SAP Fiori apps are nothing without OData, and for the ABAP stack, the SAP Gateway product is essential.</p>
<p><strong><a href="https://www.youtube.com/watch?v=0UIyKoiZ-gE">OpenUI5 MultiComboBox First Look</a> by me</strong>
Remembering that SAP Fiori apps are built with OData on the backend and with UI5 on the frontend, I thought I’d end this week’s TWIF with a link to a short (12min) video that explores a specific UI5 control from the sap.m library.</p>
<p>Just before OSCON, <a href="http://openui5.tumblr.com/post/91942465212/new-release-openui5-1-22">version 1.22 of OpenUI5 was released</a>. This was a huge release with many new features. OpenUI5 is the Open Source version of SAPUI5 upon which SAP Fiori apps are built, of course. And specifically SAP Fiori apps, being responsive by design, are built with controls from the UI5 library that contains the responsive controls, namely sap.m. This library gained a number of new controls in the 1.22 release, and this video explores just one of them – the sap.m.MultiComboBox control. Even if you’re non-technical, this video will hopefully give you an insight into the small but perfectly formed building blocks of SAP Fiori apps.</p>
<p>Well that just about wraps it up for this week. Until next time, share and enjoy!</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Keyed vs Non-Keyed Root JSON Elements &amp; UI5 Binding</title>
      <link href="https://qmacro.org/blog/posts/2014/07/26/keyed-vs-non-keyed-root-json-elements-and-ui5-binding/"/>
      <updated>2014-07-26T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2014/07/26/keyed-vs-non-keyed-root-json-elements-and-ui5-binding/</id>
      <content type="html">
        <![CDATA[
      <p>In a screencast this week (<a href="https://www.youtube.com/watch?v=0UIyKoiZ-gE">OpenUI5 MultiComboBox First Look</a>) I explicitly used the model mechanism’s requestCompleted event to get to the model data and manipulate it, adding a key to the root array. Initially the data looked like this:</p>
<p><img src="/images/2014/07/Screen-Shot-2014-07-26-at-14.20.21.png" alt="image"></p>
<p>and I added a key to this root array so it looked like this:</p>
<p><img src="/images/2014/07/Screen-Shot-2014-07-26-at-14.23.44.png" alt="image"></p>
<p>I did this programmatically in the requestCompleted event of the model mechanism, as you can see in the <a href="https://gist.github.com/qmacro/973aea751b00654b399a#file-multicombobox-html-L38">Gist for the MultiComboBox.html file, specifically starting at line 38</a>:</p>
<pre class="language-javascript"><code class="language-javascript">oModel<span class="token punctuation">.</span><span class="token function">attachEventOnce</span><span class="token punctuation">(</span><span class="token string">'requestCompleted'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">oEvent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br>	<span class="token keyword">var</span> oModel <span class="token operator">=</span> oEvent<span class="token punctuation">.</span><span class="token function">getSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br>	oModel<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">{</span><br>		<span class="token string-property property">"ProductCategories"</span> <span class="token operator">:</span> oModel<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><br>	<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
</div>However, while fun and interesting, I want to point out that this is not absolutely necessary. The model will still support an unkeyed root element such as this array, as shown in the first screenshot above. You can see how this is done in the [Gist for the MultiComboBox-without-Keyed-Root.html file](https://gist.github.com/qmacro/973aea751b00654b399a#file-multicombobox-without-keyed-root-html) – the difference is we don’t need to manipulate the data in the requestCompleted event and the binding for the MultiComboBox items aggregation looks like this:
<pre><code>{/}
</code></pre>
<p>rather than this:</p>
<pre><code>{/ProductCategories}
</code></pre>
<p>Of course, having an unkeyed root element means that you can’t have anything else in that JSON source, which may cause you issues further down the line. But it’s not critical for this example.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>OpenUI5 Tutorial at OSCON 2014</title>
      <link href="https://qmacro.org/blog/posts/2014/07/22/openui5-tutorial-at-oscon-2014/"/>
      <updated>2014-07-22T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2014/07/22/openui5-tutorial-at-oscon-2014/</id>
      <content type="html">
        <![CDATA[
      <p>This week finds me in Portland, Oregon, for O’Reilly’s Open Source Convention (<a href="http://www.oscon.com/oscon2014">OSCON</a>), an amazing conference with a wonderfully diverse range of topics (<a href="http://www.oscon.com/oscon2014/public/schedule/grid/public">over 20 of them</a>). I attended OSCON as a speaker in the early 2000’s and, along with an old friend and colleague <a href="http://www.piersharding.com/blog/">Piers Harding</a>, talked about SAP and Open Source, and I’m very happy to be coming back to OSCON as part of an extended SAP team to talk about SAP and Open Source topics.</p>
<p><img src="https://pbs.twimg.com/media/BtFH0SnCUAAZ1Ev.jpg" alt="">This year SAP is an <a href="http://www.oscon.com/oscon2014/public/content/sponsors">OSCON Gold Sponsor</a> and there are a number of sessions that are related to that. One of these was a 3.5 hour tutorial on <a href="http://openui5.org">OpenUI5</a></p>
<p><strong><a href="http://www.oscon.com/oscon2014/public/schedule/detail/35988">Discover OpenUI5 – The New Web UI Library from SAP</a></strong></p>
<p>We (Andreas Kunz, Frederic Berg and me) presented this tutorial which was based on an updated version of some work we and other UI5 team members had previously prepared for SAP TechEd. It was a lot of fun, and hopefully, educational for the attendees.</p>
<p>Of course, being Open Source related, we’ve made the session material (slides), comprehensive exercise document, the starter project and all the solutions to the exercises available. We collaborated on a Github repo, and it’s all there:</p>
<p><strong><a href="https://github.com/BluefinSolutions/OpenUI5-OSCON-2014">https://github.com/BluefinSolutions/OpenUI5-OSCON-2014</a></strong></p>
<p>So have at it, see how you get on, and spread the OpenUI5 love.</p>
<p>Share &amp; enjoy!</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>This Week in Fiori (2014-29)</title>
      <link href="https://qmacro.org/blog/posts/2014/07/18/this-week-in-fiori-(2014-29)/"/>
      <updated>2014-07-18T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2014/07/18/this-week-in-fiori-(2014-29)/</id>
      <content type="html">
        <![CDATA[
      <p><img src="/images/2014/07/Screen-Shot-2014-07-19-at-08.59.33-300x213.png" alt="My Spend"></p>
<p>I’m currently writing this episode of This Week in Fiori (TWIF) on a flight from Manchester via Philadelphia to Portland for O’Reilly’s Open Source Convention <a href="http://www.oscon.com/oscon2014">OSCON</a>. It’s a super conference on all things Open Source and I can heartily recommend it.</p>
<p>Back in 2001, 2002 and 2003 I attended OSCON and spoke on the subject of SAP and Open Source. 2014 has come round and I’m back, this time on the subject of <a href="http://openui5.org/">OpenUI5</a>, the Open Sourced version of SAP’s UI5 toolkit. Along with a couple of friends &amp; SAP colleagues Andreas Kunz and Frederic Berg, we’re giving a tutorial on the subject: <a href="http://www.oscon.com/oscon2014/public/schedule/detail/35988">Discover OpenUI5 – The New Web UI Library from SAP</a>, as well as a presentation.</p>
<p>So I’d like to start the week by giving a couple of pointers to background material (“UI5 Credits” and “The Essentials”), to help you get a good idea of the Open Source software upon which UI5 is built. And of course, it’s upon UI5 that SAP Fiori apps are built.</p>
<p><strong><a href="https://sapui5.hana.ondemand.com/sdk/#credits.html">UI5 Credits</a> by the UI5 team</strong>
This part of the UI5 Software Development Kit (SDK) lists the libraries, toolkits and other software in the Open Source domain that are used to power parts of UI5.</p>
<p><strong><a href="http://www.bluefinsolutions.com/Blogs/DJ-Adams/February-2014/The-essentials-SAP-UI5-OpenUI5-and-Fiori/">The Essentials: SAPUI5, OpenUI5 and Fiori</a> by me</strong>
If you’re interested in finding out more about the relationships between SAPUI5, OpenUI5 and Fiori, this short post should clear things up.</p>
<p><strong><a href="http://scn.sap.com/community/mobile/blog/2014/07/13/updated-version-of-the-sap-fiori-client-available">Updated Version of SAP Fiori Client</a> by John Wargo</strong>
The SAP Fiori Client is a hybrid app for specific mobile devices (such as those running Android and iOS), designed specifically to run SAP Fiori apps. Built using Cordova (PhoneGap), it’s a hybrid app in that it is an OS-native install, but is effectively a shell around a browser core, which then acts as the runtime SAP Fiori as usual.</p>
<p>The SAP Fiori Client was designed with performance in mind; amongst other things; for example, it caches the runtime to reduce startup costs. Since the initial release there’s been an update, described in this post. The update contains bug fixes and relatively minor new functionality, but it’s a good sign that maintenance is ongoing. The SAP Fiori Client is definitely worth a look.</p>
<p><strong><a href="http://scn.sap.com/community/mobile/blog/2014/07/16/the-sap-fiori-fit-part-1--your-fiori-strategy">The SAP Fiori Fit: Part 1 – Your Fiori Strategy</a> by Molly Maple</strong>
This is a nicely balanced piece in the SAP Mobile section of the SAP Community Network site. It talks about what SAP Fiori is (a “UX toolkit”) and what it isn’t (a “mobile platform”). It talks about the orthogonal styles of application delivery: Function-oriented (found in the traditional “dynpro-style” apps) and task-oriented (exemplified by the SAP Fiori apps themselves). And it covers some of the current benefits and shortcomings of Fiori when compared to the SAP Mobile Platform.</p>
<p><strong><a href="http://sapinsider.wispubs.com/Assets/Q-and-As/2014/July/QA-with-Jeremy-Masters-on-HR-Renewal-Fiori-and-ESS-MSS">HR Renewal &amp; SAP Fiori Q&amp;A Transcript</a> by Jeremy Masters</strong>
SAPInsider ran a recent Q&amp;A session focused on HR Renewal, Employee Self Service / Manager Self Service (ESS/MSS) and SAP Fiori. Being a chat-based Q&amp;A the questions and answers are all available. Folks asked about the ease of implementation, about the relationship with, and future demise of WebDynpro, and of course the Portal conundrum, made more interesting by the arrival of <a href="http://www.bluefinsolutions.com/Blogs/DJ-Adams/February-2014/The-essentials-SAP-UI5-OpenUI5-and-Fiori/">SAP Fiori’s Launchpad</a>. Reading this Q&amp;A gives you a good insight into what your peers are really thinking.</p>
<p>Of course, I have to take some slight exception to one of Jeremy’s answers regarding a reference to “web services” and Gateway :-)  Yes, OData has the concept of a service document, and it’s on the web (HTTP) but the specific phrase “web services” conjures up something altogether more complex and heavyweight (and less RESTful).</p>
<p>Well that just about wraps it up for this week. And while I’m thousands of feet over the Atlantic, currently somewhere due south of Iceland, I wanted to leave you with an observation: It seems that each week, new companies and offerings are appearing in the SAP Fiori arena. Webinars (yep, we hosted a webinar on <a href="http://www.bluefinsolutions.com/Blogs/DJ-Adams/July-2014/Webinar-more-Understanding-SAP-Fiori/">Understanding SAP Fiori</a> last month), demonstrations, Q&amp;A sessions, fixed price implementation services and offers of free prototyping.</p>
<p>The best I saw this week was a statement from an SAP technology consulting company in the US, where the SAP Fiori practice lead claimed to have “five years plus of SAP Fiori focused delivery”. Seeing as SAP Fiori has been around for less than two years, that’s quite impressive! :-)</p>
<p></p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>This Week in Fiori (2014-28)</title>
      <link href="https://qmacro.org/blog/posts/2014/07/09/this-week-in-fiori-(2014-28)/"/>
      <updated>2014-07-09T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2014/07/09/this-week-in-fiori-(2014-28)/</id>
      <content type="html">
        <![CDATA[
      <p><img src="/images/2014/07/Screen-Shot-2014-07-09-at-07.26.411-300x255.png" alt="SAP Fiori App Analysis tool"></p>
<p>Already a week has passed since my <a href="/blog/posts/2014/07/02/this-week-in-fiori-2014-27/">first post in this series</a> and the Fiori related content is increasing. A lot of that is technical, as folks get to grips with the configuration and development mechanisms that underpin Fiori. Perhaps I’ll have a technical “This Week in Fiori” (TWIF) post next time, but for now, here are some more articles, along with some observations.</p>
<p>**<a href="http://www.mobilemarketportal.com/mobile-platform/articles/383045-sap-fiori-brings-out-four-tools-improve-user.htm">SAP Fiori Brings Out Four Tools To Improve User Experience</a> by Steve Anderson
**The thing that struck me about this article is that the <a href="http://www.news-sap.com/sap-fiori-apps-rapid-deployment/">tools</a> that Steve writes about – rapid deployment solutions, proof of concept services, and design thinking – implicitly underline the fact that User Experience (UX) has really arrived in the SAP world of enterprise software. UX has stopped just being a natural by-product of application design, as it might be when dynpro-oriented applications are built with a transactional focus; it’s now an explicit and important part of the overall process.</p>
<p>**<a href="http://scn.sap.com/docs/DOC-56438">SAP Fiori UX – Apps Overview with Screenshots</a> by Oliver Lehmann
**This is a link to a great PDF-based resource containing details of the current SAP Fiori applications, of which there are over 300 (313 to be precise – see the “<a href="http://www.bluefinsolutions.com/Blogs/DJ-Adams/July-2014/Webinar-more-Understanding-SAP-Fiori/">Webinar &amp; More: Understanding SAP Fiori</a>” link below). With the organisation by Line of Business (LoB) category, and role, and plenty of screenshots, it’s extremely useful as a visual reference, especially if you haven’t seen may of the SAP Fiori apps in action yet.</p>
<p>**<a href="http://experience.sap.com/wp-content/fiori-guidelines/">SAP Fiori Design Guidelines</a>
**Talking of great resources, one not to miss is this set of (beta) design guidelines for Fiori from SAP. I spent 6 months working as a member of the core UI5 team at SAP Walldorf in 2013/2014 and in my time there I really got to appreciate the tremendous passion, the effort and the attention to detail that the design and development teams have and exhibit on a daily basis. A lot of this detail, essential in making the SAP Fiori UX what it is today, has been collated and made available in a very easy to follow guidelines. As we move from “SAP Fiori” to “Fiori” and start to build our own apps, these guidelines will play an important role.</p>
<p><strong><a href="http://www.bluefinsolutions.com/Blogs/DJ-Adams/July-2014/Webinar-more-Understanding-SAP-Fiori/">Webinar &amp; More: Understanding SAP Fiori</a> by me</strong>
A few weeks ago, Brenton O’Callaghan and I hosted a public <a href="http://www.bluefinsolutions.com/About-us/News-and-Media/Events/Webinar-Understanding-SAP-Fiori/">Bluefin Solutions webinar “Understanding SAP Fiori”</a> which was very well attended and fun to do. I wrote up some details in a followup post here, which you may find interesting. In particular, I’d like to draw your attention to a couple of things: there’s the <a href="https://code.bluefinsolutions.com/~dadams/FioriWebinar/AppAnalysis.html">SAP Fiori App Analysis tool</a> that I wrote (itself a Fiori style app) which helps you explore the details of the currently available SAP Fiori apps, all 313 of them; it’s accompanied by a <a href="https://www.youtube.com/watch?v=aVeQ4adHgaY">short explanatory video</a> too. Then there’s all the stuff that Brenton and I didn’t manage to cover, in particular a deep dive into some of the details of an SAP Fiori application’s architecture. We recorded this as a sort of “Director’s Cut” video “<a href="https://www.youtube.com/watch?v=nM0ffI-GxGk">Understanding SAP Fiori</a>” as a follow on to the webinar itself.</p>
<p>So that’s it for this week, until next time – share &amp; enjoy!</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Webinar and more - Understanding SAP Fiori</title>
      <link href="https://qmacro.org/blog/posts/2014/07/02/webinar-and-more-understanding-sap-fiori/"/>
      <updated>2014-07-02T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2014/07/02/webinar-and-more-understanding-sap-fiori/</id>
      <content type="html">
        <![CDATA[
      <p>On Thursday 19 June, <a href="https://web.archive.org/web/20171006213802/http://www.bluefinsolutions.com/Blogs/Brenton-O-Callaghan/">Brenton O'Callaghan</a> and I hosted a free, hour-long webinar entitled &quot;Understanding SAP Fiori&quot;. We followed it up with a &quot;Director's Cut&quot; deep dive video into some of the topics that we didn't have time for. This blog post summarises what we covered.</p>
<h2>SAP Fiori &quot;now included&quot;</h2>
<p>As you may well have heard, SAP announced earlier last month at Sapphire that, along with SAP Personas, SAP Fiori is <a href="https://web.archive.org/web/20170915090856/http://www.news-sap.com/sapphire-now-sap-fiori-user-experience/">&quot;now included&quot; within the underlying licences for SAP software</a>.</p>
<p>This is a significant milestone in both SAP's openness to customer &amp; partner concerns and also in its drive to renew, nay overhaul, the user experience (UX) for its business software. The significance did not go underappreciated, especially as our very own <a href="https://web.archive.org/web/20170915090856/http://www.bluefinsolutions.com/Blogs/John-Appleby/">John Appleby</a>, was a <a href="https://diginomica.com/sap-fiori-freeori">key participant in the conversations to free SAP Fiori</a>.</p>
<h2>Understanding SAP Fiori</h2>
<p>Our webinar &quot;Understanding SAP Fiori&quot; covered, in equal parts:</p>
<br/>
<ul>
<li>an overview of the current application offerings</li>
<li>a live demonstration based on the latest ERP on HANA trial</li>
<li>coverage of the overall architecture of SAP Fiori plus a dive down to application level</li>
<li>a Q&amp;A session</li>
</ul>
<h2>Application availability &amp; distribution</h2>
<p>SAP Fiori was released around this time last year, with 25 Employee Self Service / Manager Self Service (ESS/MSS) applications in Wave 1. Since then a number of Waves have been delivered along with improvements to the general UI infrastructure that supports them, most significantly the move to the SAP Launchpad (which is also <a href="https://blogs.sap.com/2014/06/23/sap-enterprise-portal-74-sp7-sap-fiori-design-in-the-sap-enterprise-portal/">converging with SAP Enterprise Portal technology</a>).</p>
<p>There are now over 310 applications covering the three core SAP Fiori application archetypes - Transactional, Analytical and Factsheet.</p>
<p><img src="/images/2014/07/Webinar-More-Understanding-SAP-Fiori-1.jpg" alt="Distribution of apps across the three SAP Fiori archetypes"></p>
<p>Note that only Transactional applications can be powered by non-HANA database platforms; the Analytical and Factsheet applications require SAP HANA.</p>
<p>There's a growing coverage of applications for various sectors of the SAP business application spectrum. To take the Enterprise Resource Planning (ERP) sector as an example, there are applications for Financials, Travel Management, Retail, Production Planning &amp; Control, Project System, Materials Management, Sales &amp; Distribution, Logistics Execution, Quality Management, Plant Maintenance, Global Trade Management, Human Capital Management, Insurance and a number of new SAP Smart Business applications.</p>
<p>To explore this information and more, you might be interested to try out the SAP Fiori App Analysis application, something simple that I built to help prepare for the webinar. It is an SAP Fiori style app itself which allows you to explore the SAP Fiori application offerings; a relationship which will perhaps bring a smile to the faces of those fans of Douglas Hoftstadter and his writings about &quot;<a href="https://en.wikipedia.org/wiki/Meta">meta</a>&quot;.</p>
<p><img src="/images/2014/07/Webinar-More-Understanding-SAP-Fiori-2.jpg" alt="The SAP Fiori App Analysis app"></p>
<h2>Application architecture</h2>
<p>The architecture for SAP Fiori is nothing brand new, at least not in significant areas. SAP Fiori is, at its barest essentials, the combination of <a href="/blog/posts/2012/05/07/sapui5-the-future-direction-of-sap-ui-development/">SAPUI5</a> and <a href="https://blogs.sap.com/2012/11/13/odata-everywhere/">OData</a> (via <a href="/blog/posts/2011/02/01/project-gateway.-a-call-to-arms.-or-at-least-to-data./">Gateway</a>). But because SAP Fiori and everything that it embodies -- from <a href="https://experience.sap.com/fiori-design/">design patterns</a>, to development principles, the use of HTML5 for client side execution and a unified API for backend (read-write) consumption -- is essentially a significant part of SAP's future application development direction, and arguably much greater than the sum of its parts, it's essential that we as customers and partners understand how Fiori ticks.</p>
<p>Note that I said &quot;Fiori&quot; and not &quot;SAP Fiori&quot;, because we can and should develop Fiori applications too. We can already extended and enhance existing SAP Fiori applications; the next logical step (one that some of us have taken already) is to build our own. Fiori is not just a pretty sticking plaster over SAP's core, it is a model of how applications could and should be developed in the future. Our ABAP-based skills are not side-lined, indeed quite the contrary: Aside from the more obvious point that OData services powered by Gateway are written in ABAP, the software logistics, standards, processes and procedures that have been refined over the years apply equally to the application lifecycles in the new Fiori context.</p>
<p>Deep dive into SAP Fiori application architecture
An hour isn't long enough to cover everything we wanted to say in this initial SAP Fiori webinar. So Brenton and I sat down the next day, in the Smallest Office In The World (reminiscent of the office that Sam Lowry is given in the classic film Brazil) and recorded a &quot;Director's Cut&quot; extension to the webinar itself (which we didn't record).</p>
<p>This was a deep dive into SAP Fiori application architecture, and covers lots of low level detail on how an SAP Fiori application ticks. We look into the general architecture of applications and focus specifically on one, the Approve Purchase Contracts transactional application. Grab a coffee and a biscuit and let us guide you through the new world; even if you're predominantly functionally focused, you will still get an understanding of the patterns and approaches that the SAP developer teams have taken for our application future.</p>
<p>If you attended the webinar (it was well attended!), I hope you enjoyed it and found it useful. If you didn't, I hope at least that this post gave you some insight, and I'd encourage you to watch the deep dive video and explore the SAP Fiori application offerings with the SAP Fiori App Analysis application.</p>
<p>Until then, share and enjoy!</p>
<hr>
<p><a href="https://web.archive.org/web/20170915090856/http://www.bluefinsolutions.com/insights/dj-adams/july-2014/webinar-more-understanding-sap-fiori">Originally published on the Bluefin Solutions website</a></p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>This Week in Fiori (2014-27)</title>
      <link href="https://qmacro.org/blog/posts/2014/07/02/this-week-in-fiori-(2014-27)/"/>
      <updated>2014-07-02T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2014/07/02/this-week-in-fiori-(2014-27)/</id>
      <content type="html">
        <![CDATA[
      <p><img src="/images/2014/07/fiori.png" alt="SAP Fiori"></p>
<p>The interest in SAP Fiori and the User Experience (UX) renewal at SAP is growing week on week. Ever since the launch of SAP Fiori Wave 1 back in summer 2013, with 25 Employee Self Service / Manager Self Service (ESS/MSS) apps, the momentum has been growing. Not surprising, given these things:</p>
<ul>
<li>the successful growth of SAP’s HTML5 tookit “UI5″, in both its guises: SAPUI5 and OpenUI5</li>
<li>the fact SAP Fiori is “the future direction of the SAP experience” according to SAP’s Chief Design Officer (CDO) Sam Yen (see later)</li>
</ul>
<p>Moreover, with the announcement at Sapphire 2014 in Orlando this year that SAP Fiori, along with SAP Personas, are <a href="http://www.news-sap.com/sapphire-now-sap-fiori-user-experience/">now included</a> in the existing licence and no extra fees are applicable, that interest has changed gear completely. As a result, there are plenty of articles to read; I thought I’d share my top picks of articles and posts that are doing the rounds right now.</p>
<p><strong><a href="http://sapinsider.wispubs.com/Assets/Articles/2014/April/SPI-how-SAP-is-reinventing-the-user-experience">How SAP is Reinventing the User Experience</a> by Sam Yen.</strong>
This is a Q&amp;A style interview with Sam that was done a couple of months back, but it’s a must-read not only given the recent Sapphire announcements, but also because it underlines the clarity of statement for SAP’s UX and User Interface (UI) direction. Regarding strategy, Sam states: “<em>With SAP Fiori, we’re able to say ‘This is the future direction of the SAP experience’. All SAP solutions are going to be converging in this direction</em>“. This nicely echoes a piece I wrote in 2012 – “<a href="http://uxcoxygen.com/news/sapui5-is-the-future-direction-for-sap-ui-development">SAPUI5 – The Future Direction of SAP UI Development?</a>” … around a year before SAP Fiori was announced. It was clear from the state and potential of the UI5 toolkit even back then that the HTML5-based outside-in UI paradigm at SAP was here to stay.</p>
<p><strong><a href="http://scn.sap.com/community/ui-technology/blog/2014/06/28/becoming-simple-takes-focus--now-fiori-personas-are-free--how-do-you-target-your-ux-efforts">Becoming Simple takes focus – now Fiori and Personas are free – how do you target your UX efforts?</a> by Jocelyn Dart.</strong>
This is a good in-depth piece which talks about UX, a subject relatively unknown in the SAP world until recently. There’s an interview with two folks in the SAP UX space, one coming from SAP’s <a href="http://design-co-innovation.tumblr.com/">Design and Co-innovation</a> centre and information on SAP’s UX Advisory service, which is designed to help customers shape their design skills and strategy.</p>
<p>**<a href="http://scn.sap.com/community/higher-education-and-research/blog/2014/06/30/fiori-changes-perception-of-campus-life">Fiori Changes Perception of Campus Life!</a> by Rob Jonkers.
**Earlier this year I flew to SAP Labs Palo Alto to attend a board meeting in my role as a member of the <a href="http://board.sapdevcenter.com/">SAP Developer Advisory Board</a>. While there, I chanced to meet some of the members of HERUG – the Higher Education &amp; Research User Group. This is an interesting and well established group within the SAP ecosphere, and they have their own focus, goals and direction. But what makes them part of the ecosphere is their common interest in UX and this post captures that very well. The breadth of functional coverage for Fiori is huge.</p>
<p><strong><a href="http://scn.sap.com/people/kai.richter/blog/2014/06/30/the-fiori-design-principles">The Fiori Design Principles</a> by Kai Richter.</strong>
In my role as an SAP Mentor I’m lucky enough to be able to attend and sometimes speak at some internal events, one of which was DKOM last year, where I saw Kai Richter speak. Kai is part of a large team of designers at SAP who are responsible for the UX that SAP Fiori brings. The members of the UI5 development and design teams are heroes of this new SAP era. This is a short article but captures nicely the principles and the essence of what Fiori means from a chief designer’s perspective.</p>
<p><span style="line-height: 1.714285714; font-size: 1rem;">If you have any must-read Fiori articles, let me know! </span></p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>SAP Mentor Monday on UI5 - Links</title>
      <link href="https://qmacro.org/blog/posts/2014/03/24/sap-mentor-monday-on-ui5-links/"/>
      <updated>2014-03-24T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2014/03/24/sap-mentor-monday-on-ui5-links/</id>
      <content type="html">
        <![CDATA[
      <p>Today I was privileged to host a <a href="http://scn.sap.com/community/developer-center/front-end/blog/2014/02/13/public-sap-mentor-monday-on-ui5-with-andreas-kunz">public SAP Mentor Monday on UI5, with Andreas Kunz as special guest</a>. This is a collection of links that were mentioned in the session.</p>
<p>Session</p>
<ul>
<li>The recorded session is available here: <a href="https://sap.na.pgiconnect.com/p29jabkxccv/"><span style="color: blue;"><span>https://sap.na.pgiconnect.com/<wbr></wbr>p29jabkxccv/</span></span></a></li>
</ul>
<p>General</p>
<ul>
<li>SAPUI5, OpenUI, Fiori – what these are, and how they’re related: “<a href="http://www.bluefinsolutions.com/Blogs/DJ-Adams/February-2014/The-essentials-SAP-UI5-OpenUI5-and-Fiori/">The essentials: SAPUI5, OpenUI5 and Fiori</a>“</li>
</ul>
<p>SAPUI5</p>
<ul>
<li>Home: <a href="http://scn.sap.com/community/developer-center/front-end">The ‘front-end’ area on the SAP Community Network</a> (SCN)</li>
<li>Docu: The <a href="https://sapui5.hana.ondemand.com/sdk/">SAPUI5 SDK</a> contains a developer guide, controls overview, demo apps, an API reference and more</li>
<li>Discussion: The majority of SAPUI5 related discussions take place on SCN: <a href="http://scn.sap.com/community/developer-center/front-end/content">http://scn.sap.com/community/developer-center/front-end/content</a></li>
</ul>
<p>OpenUI5</p>
<ul>
<li>Home: OpenUI5’s home is on Github: with <a href="https://github.com/SAP/openui5">Code</a>, <a href="https://github.com/SAP/openui5/issues?state=open">Issues</a> and <a href="http://sap.github.io/openui5/">Home Pages</a>; there’s also <a href="http://openui5.tumblr.com/">a fledgling blog</a> on Tumblr</li>
<li>Docu: In parallel to the SAPUI5 SDK, there’s an <a href="https://openui5.hana.ondemand.com/">OpenUI5 SDK</a> that also has the same content structure: developer guide, controls overview, demo apps, an API reference and more</li>
<li>Discussion: There’s <a href="http://stackoverflow.com/questions/tagged/ui5%20or%20sapui5%20or%20openui5">technical Q&amp;A that goes on on Stack Overflow</a>, as well as a <a href="https://twitter.com/search?q=ui5%20OR%20sapui5%20OR%20openui5&amp;src=typd">healthy stream of chat on Twitter</a></li>
</ul>
<p>JSBin</p>
<ul>
<li>As you saw on the call, <a href="http://jsbin.com">JSBin</a> is a super environment for trying out, prototyping and sharing snippets and small apps for #UI5 and more</li>
<li>It also has that great <a href="http://remysharp.com/2013/11/14/what-is-codecasting/">codecasting facility</a> that we tried out*</li>
</ul>
<p><span style="line-height: 1.714285714; font-size: 1rem;">*I realise now why the people watching the codecast as well got “No data” later on in their binding display – it’s because I wasn’t using a proxy prefix for the OData service, I was using my Chrome Canary which by default opens with web security disabled, so it just worked for me. More on that in another post!</span></p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Paying IT Forward Links</title>
      <link href="https://qmacro.org/blog/posts/2014/03/20/paying-it-forward-links/"/>
      <updated>2014-03-20T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2014/03/20/paying-it-forward-links/</id>
      <content type="html">
        <![CDATA[
      <p>Today I recorded another SAP CodeTalk session with Ian Thain, this time on the topic of teaching kids computational thinking, teaching them to code: <a href="https://www.youtube.com/watch?v=o0CvsQxI6Nw">Paying IT Forward … IT Does Compute</a>.</p>
<iframe allowfullscreen="" frameborder="0" height="315" src="//www.youtube.com/embed/o0CvsQxI6Nw" width="560"></iframe>
<p>Here’s a quick list of links to the activities and organisations we mentioned in the talk.</p>
<p><a href="https://www.codeclub.org.uk/">CodeClub</a></p>
<p><a href="http://coderdojo.com/">CoderDojo</a> (Our <a href="http://mcrcoderdojo.org.uk/">Manchester CoderDojo</a>, is hosted at the fantastic <a href="http://www.thesharpproject.co.uk/">Sharp Project</a>)</p>
<p><a href="http://youngrewiredstate.org">Young Rewired State</a></p>
<p><a href="http://www.stemnet.org.uk/">STEMnet</a></p>
<p>And if you need any more convincing about our computational future, you may be interested in this TEDx talk on “<a href="http://www.youtube.com/watch?v=-gvOCaExeK0">Our Computational Future</a>“.</p>
<p>Share and enjoy!</p>
<p></p>
<p></p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>OpenUI5 CodeTalk Links</title>
      <link href="https://qmacro.org/blog/posts/2014/03/18/openui5-codetalk-links/"/>
      <updated>2014-03-18T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2014/03/18/openui5-codetalk-links/</id>
      <content type="html">
        <![CDATA[
      <p>I was honoured to be a guest again on SAP CodeTalk with Ian Thain. <a href="https://www.youtube.com/watch?v=IEXNLHn9Yus">This time we talked about OpenUI5 </a>- the open source version of SAPUI5, SAP’s UI development toolkit for HTML5.</p>
<p><iframe allowfullscreen="" frameborder="0" height="315" src="//www.youtube.com/embed/IEXNLHn9Yus" width="560"></iframe></p>
<p>Here are the links to what was mentioned.</p>
<p>Near the start of the recording, Ian mentioned our previous 2-part <a href="http://www.youtube.com/playlist?list=PLfctWmgNyOIcae85Ytr6b_J1jgcDb4-JL">SAP CodeTalk on SAPUI5 and Fiori</a>.</p>
<p>I talked about the differences between SAPUI5, OpenUI5 and where they fit with Fiori. Here’s a post explaining that in more detail: “<a href="http://www.bluefinsolutions.com/Blogs/DJ-Adams/February-2014/The-essentials-SAP-UI5-OpenUI5-and-Fiori/">The essentials: SAPUI5, OpenUI5 and Fiori</a>“.</p>
<p>You can compare what’s available in SAPUI5 and OpenUI5 by looking at their respective API references: <a href="https://sapui5.hana.ondemand.com/sdk/#docs/api/symbols/sap.html">SAPUI5 API Reference</a> and <a href="https://openui5.hana.ondemand.com/#docs/api/symbols/sap.html">OpenUI5 API Reference</a>.</p>
<p>Andreas Kunz’s post on SCN “<a href="http://scn.sap.com/community/developer-center/front-end/blog/2013/12/11/what-is-openui5-sapui5">What is OpenUI5 / SAPUI5?</a>“, published when the open sourcing announcement was made. Just before the announcement was made, Jan Penninkhof’s post “<a href="http://scn.sap.com/community/developer-center/front-end/blog/2013/11/20/reasons-why-sap-should-open-source-sapui5">13 reasons why SAP should open-source SAPUI5</a>” was published.</p>
<p>OpenUI5’s “home” on the web is Github: <a href="http://sap.github.io/openui5/">http://sap.github.io/openui5/</a>. There’s also a fledgling blog at <a href="http://openui5.tumblr.com">http://openui5.tumblr.com</a> with an inaugural “<a href="http://openui5.tumblr.com/post/79478900762/were-open">We’re open!</a>” post.</p>
<p>Bug reporting for OpenUI5 is possible via Github issues, please read the “<a href="http://sap.github.io/openui5/bugreports.html">Report a Bug</a>” page for more info.</p>
<p>Technical (programming-related) Q&amp;A is active under the <a href="http://stackoverflow.com/questions/tagged/ui5%20or%20sapui5%20or%20openui5">‘sapui5′ tag on Stack Overflow</a> (even though the questions are mostly independent of whether it’s SAPUI5 or OpenUI5).</p>
<p>Recently the <a href="http://scn.sap.com/community/developer-center/front-end/blog/2014/03/04/small-steps-openui5-toolkit-now-in-jsbincom">OpenUI5 library was added to the list of selectable libraries in JSBin</a>, and there is a small but growing <a href="https://github.com/ui5org/ui5templates/blob/master/README.md">list of templates for JSBin based snippets</a> too (contributions welcome!)</p>
<p>Last but not least, there’s a <a href="http://scn.sap.com/community/developer-center/front-end/blog/2014/02/13/public-sap-mentor-monday-on-ui5-with-andreas-kunz">Public SAP Mentor Monday webinar this coming Mon 24 Mar 2014 on UI5, with special guest Andreas Kunz</a>. Come along and attend, all are welcome!</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>The essentials - SAPUI5, OpenUI5 and Fiori</title>
      <link href="https://qmacro.org/blog/posts/2014/02/14/the-essentials-sapui5-openui5-and-fiori/"/>
      <updated>2014-02-14T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2014/02/14/the-essentials-sapui5-openui5-and-fiori/</id>
      <content type="html">
        <![CDATA[
      <p>The SAP User Interface (UI) and User Experience (UX) revolution is truly underway. There are some tactical solutions out there, but the chief strategic solution that SAP is basing its UI/UX future on is UI5.</p>
<p>UI5. Otherwise known as SAPUI5. But what about OpenUI5? Plus, because no doubt you've heard the word &quot;Fiori&quot; in the same sentence as UI5, where does SAP Fiori fit in? Read on to find out this, and more.</p>
<p>Note that throughout this post, I'm also deliberately using the term UI5, and have been doing in forums on the SAP Community Network, in answers on <a href="https://stackoverflow.com/questions/tagged/sapui5+or+sapui5+or+sapui5?tab=Newest">Stack Overflow</a> and elsewhere for a while now. It's a useful (and short!) umbrella term that encompasses a number of things, all related.</p>
<h2>SAPUI5</h2>
<p>SAPUI5 is the name of the toolkit that SAP has been building for the past three or so years. You'd be forgiven surprise at the length of time it's existed, because it's only really started to gain attention for the last year or so. I <a href="/blog/posts/2012/05/07/sapui5-the-future-direction-of-sap-ui-development/">wrote about SAPUI5 in May 2012</a>, describing it as &quot;the future direction of SAP UI development&quot;, and I stand by my prediction. And the official name? In the same way that the characters in Iain M Banks' masterful science fiction series about The Culture have very long names, and practical short ones too, the official name for SAPUI5 is the &quot;UI Development Toolkit for HTML5&quot; ... which is why most people do refer to it as SAPUI5.</p>
<p>SAPUI5 is a series of core and functionally focused libraries and a runtime environment. The core provides essential services such as module loading and management, eventing, navigation, data management and various application development concepts (such as Model-View-Controller). The libraries provide collections of controls that are used as UI building blocks in apps – tables, lists, date-pickers, input fields and forms, buttons, and so on. Some controls are simple (like the Button), others are more complex (like the Shell, or the Table), but all work together to provide the interactive components from which applications can be built.</p>
<p>The applications that are built with SAPUI5 are applications that run in the browser. They are HTML5, JavaScript and CSS based. When you invoke an app, the application itself is dowloaded to the browser, along with the SAPUI5 runtime.</p>
<p>There's a theming concept for the controls within SAPUI5 which is why you might have seen different designs in screenshots. The dominant theme so far for desktop-focused controls was &quot;Gold Reflection&quot;, where the dominant theme for mobile and responsive controls is &quot;Blue Crystal&quot;. You will see a convergence on Blue Crystal for desktop-focused controls – in fact, if you examine the latest <a href="https://sapui5.hana.ondemand.com/">SAPUI5 Software Development Kit (SDK) documentation</a>, you'll notice that this has already happened; the desktop-focused SAPUI5 controls (with which the SDK itself is built) are now themed with Blue Crystal.</p>
<h2>OpenUI5</h2>
<p>OpenUI5 is SAPUI5's sibling. While the use of SAPUI5 is subject to an SAP licence, OpenUI5 is Open Source. This is a big deal, and very important for many reasons, best left for another post. Suffice it to say that in December 2013 SAP surprised us all by open sourcing UI5. The fact that they actually open sourced it wasn't so much of a surprise, <a href="https://blogs.sap.com/2013/11/20/reasons-why-sap-should-open-source-sapui5/">many of us outside and inside of SAP were lobbying for it to happen</a>. What surprised us was how quickly they turned it around (well done SAP!).</p>
<p><a href="https://openui5.hana.ondemand.com">OpenUI5 has its own SDK</a>, and its <a href="https://sap.github.io/openui5">own presence on the web on GitHub</a>, which is currently the most important place for Open Source projects such as this. SAP has a way to go yet in fully embracing all of the Open Source concepts, but it's getting there, and the all important first step has already been taken. SAP and developers like me can start to more properly engage with Open Source developers outside the SAP ecosphere, developers with skills and expertise in UI/UX and many other areas. One of the ways SAP will continue to be relevant is by reaching out in this direction.</p>
<p>There are a number of differences between OpenUI5 and SAPUI5, mostly related to libraries that are currently missing from the Open Source version. But the essentials (sap.ui, sap.m) are there. If you've written a UI5 powered app, as long as it doesn't use charting, for example, there's a good chance that you can just switch the toolkits and it will still work. Of course, there's more to the detail, but that gives you a rough idea.</p>
<h2>Fiori</h2>
<p>Aaahh, Fiori. Let a thousand meanings bloom! What Fiori is and isn't, is again the subject for a long post of its own. But it's important to include Fiori here in this rundown, because of its close relation to UI5.</p>
<p>SAP Fiori is a series of app suites, being introduced in waves. The apps in these waves are written by SAP app developers. But Fiori is also a development approach, a design approach, which has a number of soft constraints. And when an app is built to conform to those constraints, it exhibits Fiori-like features: simple and recognisable design, easy to use, a role-based approach, and following one of a core set of UI patterns.</p>
<p>And crucially, Fiori apps are built with UI5. More specifically, they use specific libraries from the UI5 toolkit, the most significant one by far being &quot;sap.m&quot;. The &quot;m&quot; in &quot;sap.m&quot; stands for &quot;mobile&quot;, but as we know, <a href="/blog/posts/2014/02/09/m-is-for-'responsive'/">responsive is the new mobile</a>, and this is essential in ensuring that Fiori apps run on all devices – smartphones, tablets and desktops, as the sap.m UI5 controls are designed from the ground up to work responsively.</p>
<p>So putting these two observations together – that Fiori is a design and development approach and set of constraints, and Fiori apps are built with UI5, it stands to reason that you too, as an SAP customer, can build your own Fiori apps. With some expert help and guidance, you can join in the UI/UX renewal yourself and if SAP don't offer an app that suits your requirements, you can build one yourself. Not only that, but if you build it right, it will happily live and run inside the Fiori Launchpad alongside the SAP-delivered apps.</p>
<p>So there you have it. Hopefully if you've read this far, you'll have a better understanding of the terms, and how what the terms represent relate to each other. You may like to know that there's a <a href="https://blogs.sap.com/2014/02/13/public-sap-mentor-monday-on-ui5-with-andreas-kunz/">public SAP Mentor Monday session on UI5</a> that I'm arranging and hosting on Mon 24 Mar 2014. I'll be joined by special guest Andreas Kunz, from the UI5 development team in Walldorf. All are welcome.</p>
<p>And if you'd like to hear more about SAP's open sourcing of UI5, or Fiori development, leave me a comment below!</p>
<hr>
<p><a href="https://web.archive.org/web/20180119173657/http://www.bluefinsolutions.com/insights/dj-adams/february-2014/the-essentials-sap-ui5-openui5-and-fiori">Originally published on the Bluefin Solutions website</a></p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>M is for &#39;responsive&#39;</title>
      <link href="https://qmacro.org/blog/posts/2014/02/09/m-is-for-&#39;responsive&#39;/"/>
      <updated>2014-02-09T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2014/02/09/m-is-for-&#39;responsive&#39;/</id>
      <content type="html">
        <![CDATA[
      <p>Even if you count the well-meant but ultimately misguided initial attempt at pre-smartphone mobile interactivity, in the form of WAP and WML, the rise of mobile focused activity has been nothing short of inexorable.</p>
<p>What was the cause of WAP and WML's failure? For many, it was that the application protocol (WAP) and markup language (WML) were custom designed for specific target devices. Mobile phones. Mobile phones turned into smartphones, Edge turned into 3G; essentially, the device in our pocket became a pretty well-connected small computer.</p>
<p>Now, I've nothing against applications that are written and delivered for specific platforms such as the current iOS, Android, Blackberry and FirefoxOS (I saw the latter in evidence at <a href="https://archive.fosdem.org/2014/">FOSDEM</a>, the Free and Open-Source Developers' European Meetup in Brussels last weekend). But it does occur to me that this is, in a way, hedging your bets and doubling (at least) your development efforts. Of course, you may have guessed by now that what I'm thinking of is HTML5. The Web. Browsers on our smartphones, whether native or embedded within a hybrid container such as Cordova (née PhoneGap) are extremely capable and in many ways the same as what we have on our other, larger devices - tablets and desktops.</p>
<p>And indeed there's the thing that brings us back to the title of this post, and the word 'responsive'. What do all the platforms (smartphone, tablet, desktop) have in common? You can build an app, once, and have it run on all these platforms, where it will reform itself: User interface (UI) elements being rearranged, wide columnar displays collapsing into more appropriate structures, and touch-related navigation mechanisms appearing or disappearing. How do you do that? You build for the Web. Yes, capital 'W'. It's that important, and always has been. Build for the Web, use modern techniques so that your application looks, feels and works 'just right' regardless of the form factor of the device you users happen to be accessing it upon.</p>
<p>Guess what? That's exactly what SAP is doing with SAP Fiori. In large-scale efforts to renew the User Experience (UX) of the backend business suite functionality, SAP has adopted this very approach. Run a SAP Fiori app on a smartphone, on a tablet, on your desktop, and you will see what I mean. Moreover, build your own Fiori apps, and as long as you follow certain design and technical guidelines - which the SAP Fiori app developers inside SAP have been following - your apps will respond the same too.</p>
<p>Look under the hood of the SAP Fiori apps and you'll see the UI engine that is powering it all: <a href="/blog/posts/2012/08/07/sapui5-the-future-direction-of-sap-ui-development/">SAPUI5</a>. SAPUI5 is a large toolkit that contains, amongst other things, a number of control libraries, one of which is 'sap.m'. The 'm' originally stood for mobile, but it stands for a whole lot more in reality. This 'sap.m' library contains the UI controls, the building blocks, from which the SAP Fiori apps are built. And these controls are all designed and written from the ground up to be responsive. So that they 'do the right thing' on whatever platform you use them.</p>
<p>So consider taking a leaf out of SAP's book when thinking about your mobile strategy. Don't think 'mobile', think 'responsive'.</p>
<hr>
<p><a href="https://web.archive.org/web/20180227043417/http://www.bluefinsolutions.com/insights/dj-adams/february-2014/m-is-for-responsive">Originally published on the Bluefin Solutions website</a></p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Alt-K: Reading Notes</title>
      <link href="https://qmacro.org/blog/posts/2014/02/05/alt-k:-reading-notes/"/>
      <updated>2014-02-05T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2014/02/05/alt-k:-reading-notes/</id>
      <content type="html">
        <![CDATA[
      <p>With my Kindle, and the <a href="https://chrome.google.com/webstore/detail/send-to-kindle-for-google/cgdjpilhipecahhcilnafpblkieebhea">Send to Kindle Chrome extension</a>, I have a nice workflow for saving stuff (with a quick alt-k keypress) to read later. The nice thing about the way the Kindle displays new articles is that there’s a “new” tag, until you’ve read it, and once you’ve read it, it floats away to the top (where I can find it, review what I’ve read, and remove it). So here’s a quick rundown of the stuff I read this early evening on a break. If it’s in this list, it’s recommended.</p>
<p><a href="http://www.nczonline.net/blog/2014/01/07/how-to-be-a-mentor/">How to be a mentor</a>: A thoughtfully written post with a lot of good suggestions for guiding a mentee along the right path. Let mentees set the agenda for meetings; allow them the occasional mistake (great learning); help them to help themselves by providing strategies for discovering the solution, rather than direct answers; use your experience to help them sort the wheat from the chaff as far as online content is concerned.</p>
<p><a href="http://scn.sap.com/thread/3478913">Getting access to SAP Fiori trial: many obstacles</a>: Unfortunately the obstacle phenomenon is not a new thing; SAP seem to constantly struggle to make easy the things that should be easy. And in this case it’s commercially disadvantageous for them, hindering customer from trialling Fiori. This is one example of many instances where SAP really need to get a grip and learn from other presences on the Web (<a href="https://twitter.com/qmacro/status/431090009358475264">another is the SAP ID Service</a>, but that’s a story for another time).</p>
<p><a href="http://blog.hedges.net/2014/01/20/why-you-dont-need-an-enterprise-service-bus-esb/">Why you don’t need an Enterprise Service Bus (ESB)</a>: This article made me smile, as it’s a simple piece but has a very strong impact. There are too many architecture astronauts out there (I for one have had my share of overengineered, overcomplex and underthought designes pushed in my face from them in my career) and I can imagine this piece being a lovely little wake up call to all those who have seen the classic “ESB icon [seemingly] pre-painted on their whiteboards”.</p>
<p><a href="http://www.opendemocracy.net/ourkingdom/adam-ramsay/many-languages-native-to-britain">The many languages native to Britain</a>: A fascinating piece, not only because of the myriad languages that are still alive within our shores (and beyond, it seems) but also because of the difficulty (futility?) in classification. What is a language, what is a dialect? What is native and what is immigrant? When do these classifications change? Who says? (Joseph – this is the piece I was telling you about).</p>
<p><a href="http://www.gamezebo.com/news/2014/01/20/king-has-trademarked-word-candy-and-youre-probably-infringing">King has trademarked the word CANDY (and you’re probably infringing)</a>: I read this piece probably with my mouth wide open. It beggars belief that the US Trademark Office bureaucrats are stupid enough to cause this to happen. It’s one thing for a greedy and self-centred games company to apply for a trademark like them (good luck to them, bold as brass and all) but it’s another for the ridiculous request to be granted. Good grief.</p>
<p><a href="http://stackoverflow.com/about">Stack Overflow’s About Page</a>: I’ve recently started to become active on Stack Overflow in the UI5 area, in the light of OpenUI5 and our reachout to the wider non-SAP developer ecosphere(s). The reason Stack Overflow is such a success is because of the quality of its content, and the reason for the content quality is the conduct expected. This conduct is explained concisely in the About page, and there’s more information in the <a href="stackoverflow.com/help">Help</a> sections too. After struggling with SCN’s software for years, and trying to decipher hazy and incomplete questions so that I might answer them, it looks like Stack Overflow will be a breath of fresh air.</p>
<p>So there you have it. I really enjoyed each of these articles, perhaps you’ll find something there too.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Meta education - or teaching the teachers</title>
      <link href="https://qmacro.org/blog/posts/2014/01/07/meta-education-or-teaching-the-teachers/"/>
      <updated>2014-01-07T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2014/01/07/meta-education-or-teaching-the-teachers/</id>
      <content type="html">
        <![CDATA[
      <p>I'm currently involved in a number of initiatives relating to <a href="/blog/posts/2013/02/14/our-computational-future/">our computational future</a>, and am passionate about teaching coding and data skills to children (see below for some links).</p>
<p>I have a great relationship with colleges in Manchester and next month, with my STEMnet Ambassador hat on, I'll be spending a morning with a group of 24 ICT/Computing teachers from high schools and colleges in the area, to teach them about the Raspberry Pi.</p>
<p>But, what exactly should we be teaching the teachers, to help them educate our kids for our computational future?</p>
<h2>The Raspberry Pi</h2>
<p><img src="/images/2020/03/pi4.png" alt="Raspberry Pi model 4"></p>
<p>A Raspberry Pi is a small, cheap, fully functional computer, slightly bigger than a credit card. It has, in some ways, revolutionised, or perhaps re-invigorated the grass roots computer club style enthusiasm that we experienced decades ago, when the first 8-bit microcomputers such as the Acorn Atom, Sinclair ZX81 and Commodore VIC 20 appeared on the scene. It is to many the perfect platform for a new generation of software and hardware hackers alike (there are many ways you can easily interface the Pi with external devices such as sensors and switches) for a number of reasons:</p>
<br>
<ul>
<li>Low price: it's not unreasonable to consider, say, installing a Pi as part of a <a href="https://www.bbc.co.uk/blogs/natureuk/entries/f6536e17-ac34-3190-918f-3e198d631b5b">bird monitoring system in a bird box outside</a></li>
<li>Hardware availability: the <a href="https://web.archive.org/web/20180324003438/http://pi.cs.man.ac.uk/interface.htm">PiFace digital interface</a> makes it very easy to connect the computer up to the real world</li>
<li>Excellent software: the operating system of choice for the Pi is GNU/Linux; an open, free, fully functional operating system (OS) and development environment that has none of the disadvantages of that 'other' OS from Redmond</li>
</ul>
<p>There are various distributions of GNU/Linux available for the Pi, and they're super-easy to install onto the SD card which functions as the Pi's hard disk equivalent. With these distributions come many software packages over and above the operating system itself. These packages include programming environments such as <a href="https://scratch.mit.edu">Scratch</a>, technical computing software systems such as the <a href="https://wolfram.com/raspberry-pi/">Wolfram language &amp; Mathematica</a>, and various languages.</p>
<p>There are almost too many languages to mention, and those are just the ones that come out of the box! In a session with a class of students at <a href="https://www.xaverian.ac.uk">Xaverian 6th Form College</a> that I ran late last year a group were interested in using Pascal on the Pi, as they were studying that language. Pascal wasn't immediately available, but <a href="https://freepascalanswers.wordpress.com/2012/01/14/get-free-pascal-in-debian/">with a single line we retrieved and installed a free Pascal compiler</a> and they were up and running less than a minute later. But for teaching, I reach for Python more often than not. It's a wonderful language: calm, precise, flexible, and one with which you can learn and write code in different styles (such as procedural, object-oriented, and functional).</p>
<h2>The challenge</h2>
<p>So the session next month is to teach the teachers about the Pi – what it can do, and how can it be used in lessons and for coursework.</p>
<p>The key thing to remember that the Pi is a means to an end, not necessarily an end in itself. On a few occasions I've picked up the sentiment &quot;OK, we now have some Raspberry Pis – education job done!&quot; Unfortunately that's not entirely the case. At one level, giving the kids confidence to pick up a circuit board, connect it up and boot an operating system is a great thing to do. But what to do once that achievement has been unlocked? My aim is to help teach children computational thinking, to be able to survive and flourish in our data-driven future, and that means learning analytical, data and programming skills. That doesn't necessarily mean dry science - in fact, far from it. Computational thinking involves rigor, but it also involves creative thinking and problem solving. Computing is to be found all along a wide spectrum, with science at one end and art at the other.</p>
<p>And this is exactly where the teachers need our help. They need to understand what the Pi is capable of, what Linux makes available to them, what they can use it for, how to involve it in lessons. They're hungry to learn, with a view to passing that knowledge on to our kids. Sometimes, starting with a blank piece of paper is the hardest thing – some direction is needed. That's where we come in. Here are my thoughts and plans of what I'm going to share with them on that day next month. The challenge is always the same: so much to show, so little time. So the focus has to be the best it can be:</p>
<br/>
<ul>
<li>General hardware and OS setup</li>
<li>Hardware interfacing aspects (e.g. with the PiFace)</li>
<li>Linux features such as background jobs, multi-user capabilities, etc</li>
<li>An overview of programs available out of the box</li>
<li>Teaching problem solving with environments such as Scratch and Python.</li>
</ul>
<p>Scratch and Python are examples of languages where computing can be made an integral part of the problem solving process. In the past, with Scratch, I've taken primary school kids through the process of prime number determination with Scratch (they'd just learned about the concept of primes in class), and given secondary school kids a taste of games programming and 2D mechanics. I've used Python with kids as a language to solve math’s puzzles such as those presented on <a href="https://projecteuler.net">Project Euler</a>.</p>
<h2>What do you think?</h2>
<p>But as perhaps a person in business, what do YOU think? What skills do you think we should be teaching our kids so that they have the best chance of survival in the future? If computational thinking is &quot;the fourth R&quot; (after reading, writing and arithmetic), what do you think they would benefit from in relation to the world of business? For me, teaching kids how to use MS-Word and MS-Excel as the pinnacle of the computing curriculum is just not good enough. I'd love to know your thoughts.</p>
<h2>Links</h2>
<ul>
<li><a href="https://www.youtube.com/watch?v=-gvOCaExeK0">Our computational future: DJ Adams at TEDxOldham</a></li>
<li><a href="https://vimeo.com/75229099">Young Rewired State 2013 at Manchester Digital Laboratory</a></li>
<li><a href="https://diginomica.com/kids-code-computational-future-dj-adams">Kids, code and our computational future with DJ Adams</a></li>
<li><a href="/blog/2012/12/codeclub-and-becoming-a-stem-ambassador/">CodeClub and becoming a STEM Ambassador</a></li>
<li><a href="https://web.archive.org/web/20200921185124/http://www.lizhannaford.com/coding/my-seven-year-old-daughters-first-ever-coderdojo-manchester-madlabuk/">My seven year old daughter’s first ever CoderDojo – at Manchester's MadLab</a></li>
<li><a href="https://mcrcoderdojo.org.uk/jingle-tangerines/">Jingle tangerines!</a></li>
<li><a href="/blog/2013/04/codeclub-thoughts/">CodeClub thoughts</a></li>
</ul>
<hr>
<p><a href="https://web.archive.org/web/20180327085332/http://www.bluefinsolutions.com/insights/dj-adams/january-2014/meta-education-or-teaching-the-teachers">Originally published on the Bluefin Solutions website</a></p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Quick hack: Calendar Inviter</title>
      <link href="https://qmacro.org/blog/posts/2014/01/02/quick-hack:-calendar-inviter/"/>
      <updated>2014-01-02T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2014/01/02/quick-hack:-calendar-inviter/</id>
      <content type="html">
        <![CDATA[
      <p>Working in different organisations sometimes means having different email addresses and calendars. Currently I have two Outlook instances I have to manage (one for <a href="http://www.bluefinsolutions.com">Bluefin</a> and one for a client) on top of my Google-based personal calendar.</p>
<p>Keeping them in sync is a struggle that I avoid, but there’s recently been a specific case where I do want to make the effort, and that’s time / location scheduling – where I’ll be, on what days. This information needs to be in all calendars, to share with work colleagues, and for my own sanity (I see my Google calendar as my master instance in this case).</p>
<p><img src="/images/2014/01/calendars.jpg" alt="image">So I wrote a quick Google Apps Script hack to allow me to quickly specify the where/when events in a particular Google calendar that I maintain (called “Work”), and then have those events distributed, via invitations, to my other Outlook identities. It’s not very sophisticated – all it does is look through the Work calendar for all-day events matching a certain title pattern, then look at the guest list; if the emails I want to share the event with are not already on the list, they’re added, and invites are sent.</p>
<p>Because of <a href="https://code.google.com/p/google-apps-script-issues/issues/detail?id=574">an issue with the CalendarService component of Google Apps Script</a> (that’s been open since May 2011!) you can’t directly cause invites to be sent to new guests that you add to an existing event. So one workaround is to create the calendar invitation (ICS file) yourself and email it. It’s pretty simple (and Romain Vialard <a href="https://code.google.com/p/google-apps-script-issues/issues/detail?id=574#c2">has an example</a> in the commentary on the issue).</p>
<p>Actually creating the ICS file myself was a solution to not one but two issues. The ICS files that are auto-generated by Google Calendar when you add a guest via the UI contain entries like this for all-day events:</p>
<p>DTSTART;VALUE=DATE:20140305<br>
DTEND;VALUE=DATE:20140306</p>
<p>Unfortunately Outlook makes an incorrect guess as to the timezone for these dates, based on its own timezone, and when the recipient calendar is in a different timezone than the originating event (in my case UTC and UTC+1), it causes the replicated entry to be skewed by an hour, causing the all-day event to span the wrong days! So being in control of the ICS content generation means I can be more explicit which in turn means that Outlook doesn’t get it wrong.</p>
<p>DTSTART:20140305T000000Z<br>
DTEND:20140306T000000Z</p>
<p>So that’s it. <a href="https://gist.github.com/qmacro/8219400">I’ve made the script available as a Gist</a> on Github and here’s a screenshot of some typical results.</p>
<p><img src="/images/2014/01/log.jpg" alt="image"></p>
<p>Share &amp; enjoy!</p>
<p></p>
<p></p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>SAP UK &amp; Ireland User Group Conference - Demo Jam!</title>
      <link href="https://qmacro.org/blog/posts/2013/11/27/sap-uk-and-ireland-user-group-conference-demo-jam!/"/>
      <updated>2013-11-27T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2013/11/27/sap-uk-and-ireland-user-group-conference-demo-jam!/</id>
      <content type="html">
        <![CDATA[
      <p>The conference season for this year is almost at an end. But it’s not complete without the <a href="http://www.sapusers.org/conference/">annual UK &amp; Ireland SAP User Group Conference</a>, held this year in Birmingham, from Sunday 24 to Tuesday 26 Nov. With a range of exhibitors and attendees, from customers, partners, consultancies and more, it always makes for an interesting time with wide-ranging topics. It’s different from SAP TechEd in that the focus is less on technology and platform and more on the customer.</p>
<p>But this is exactly where the Demo Jam competition this year took me – the intersection between customer and technology, in other words, the user experience (UX).</p>
<p>The Demo Jam is an event within this conference and other conferences (such as SAP TechEd) where there are a series of teams giving short sharp bursts of presentation. There are simple rules: Live, no slides, and over in 5 mins. And a winner is voted by the audience with the help of a “clapometer”. It’s a bit of fun, but also has a serious side to it: The aim is to wow the audience with something relevant.</p>
<p>This year there were four teams due to participate but unfortunately one had to drop out at the last minute. To cut a long story short, I got a call on the Friday before the Sunday conference start asking if I could step in, put something together and take the place of the team that had dropped out.</p>
<p>Already with fairly full plans for the weekend, I found some space on Sunday (I was only going to be attending the conference on Monday) and thought about what I could do. With my current work at the SAP Mothership (i.e. Walldorf) with the SAPUI5 / Fiori teams, the answer came quite quickly: Show the audience what makes SAP Fiori apps tick, what’s under the hood … by building an SAP Fiori-like UI live on stage in 5 mins.</p>
<p>An updated version of an old TV / stage adage goes something like this:</p>
<p><em>“Never work with children or animals, or do live coding, unless you’re a fool”.</em></p>
<div class="wp-caption alignright" id="attachment_1561" style="width: 310px">![image](/images/2013/11/ukisug13-demojam-1.jpg)Photo by @timoelliott
</div>Being a fool, and with no children or animals around, I went for the third option and wrote XML in front of hundreds of people, instantiating SAPUI5 controls and building an SAP Fiori-like app before their eyes (classic design – master/detail showing sales orders and details). It was made slightly more “interesting” than it might otherwise have been by the fact that my hands were really cold, and fingers inflexible (I’d recently arrived and it had been very cold outside) – not ideal for typing under pressure.
<p>The key thing I wanted to get across was that there was no mystery around SAP Fiori; apps are created from building blocks like everything else – in this case building blocks in the SAPUI5 framework. It’s important to help folks understand what Fiori is, what it isn’t, and what it might be. A major part (but by no means the entire part) of what it is … is a set of applications <a href="http://www.bluefinsolutions.com/Blogs/DJ-Adams-(1)/May-2012/SAPUI5-The-Future-direction-of-SAP-UI-Developmen/">built in an outside-in fashion using a modern UI framework (SAPUI5)</a> that has a super design pedigree and which for its young age is extremely accomplished already.</p>
<p>The majority of the audience had heard of Fiori, which was great, and hopefully after my Demo Jam entry they understand a little bit more of what makes Fiori apps tick, and are better armed to ask the right questions and make the right decisions.</p>
<div class="wp-caption alignleft" id="attachment_1562" style="width: 235px">![image](/images/2013/11/ukisug13-demojam-3.jpg)With the trophy
</div>I was totally honoured to be part of Demo Jam this year, the other entries were great (everything from immersive virtual reality with big data, through automated training solutions to compliance systems) but perhaps largely due to [eddies in the space time continuum](http://en.wikiquote.org/wiki/The_Hitchhiker's_Guide_to_the_Galaxy#Chapter_2_3), I won!
<p><a href="/images/2013/11/ukisug13-demojam-3.jpg"></a></p>
<p>In a way, the fact that I only had a few hours to come up with something and prepare my entry made it quite a fun experience … and I’m already looking forward to seeing the entries next year!</p>
<p></p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>SheetAsJSON - Google Spreadsheet Data as JSON</title>
      <link href="https://qmacro.org/blog/posts/2013/10/04/sheetasjson-google-spreadsheet-data-as-json/"/>
      <updated>2013-10-04T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2013/10/04/sheetasjson-google-spreadsheet-data-as-json/</id>
      <content type="html">
        <![CDATA[
      <p>This is a short post to explain how to expose a 'typical' Google spreadsheet (rows of columnar data, with first header row) as JSON, via HTTP. It might sound somewhat esoteric but believe me it’s helped me and others out quite a bit in the past.</p>
<p>If you’ve got a sheet and want to consume that from a web app, for example, via JSON or JSONP, or just want a different way of getting data out of a spreadsheet for further processing in the environment of your choice (that has a JSON parser) then this could be useful for you.</p>
<p>The idea is that you have a base URL and append a query string, supplying values for two parameters: the id of the spreadsheet and the name of the sheet within the spreadsheet. For example, for this sheet, the value for <code>id</code> would be</p>
<p>0AuAssa05Fog5dGc5WVNRbFZDcWJCLVY2V2NidWFKeXc</p>
<p>and the value for <code>sheet</code> would be</p>
<p>Sheet1</p>
<p><img src="//qmacro.org/content/images/2013/10/sheet1.png" alt=""></p>
<p>The exposure is via a Google Apps Script, which uses a couple of Apps Script APIs from the <a href="https://developers.google.com/apps-script/reference/spreadsheet/">Spreadsheet</a> and <a href="https://developers.google.com/apps-script/reference/content/">Content</a> services. The script, <a href="https://script.google.com/d/143u0RLuppsmYJ0B3wzo6i0jZYSfIFV2NLJMHPM-Sqczpr9bLwdffc-Wx/edit?usp=sharing">SheetAsJSON</a>, runs as a <a href="https://developers.google.com/apps-script/execution_web_apps">web app</a>, which puts a few requirements on the script itself.</p>
<p>It must implement a doGet method (for HTTP GET). It must be versioned (only versions of scripts can be deployed):</p>
<p><img src="//qmacro.org/content/images/2013/10/version.png" alt=""></p>
<p>It must also be deployed as a web app and made available for others (or just yourself) to execute:</p>
<p><img src="//qmacro.org/content/images/2013/10/deploy-268x300.png" alt=""></p>
<p>As you can see in the above screenshot, you also need to make sure the script is authorised to run. See the <a href="https://developers.google.com/apps-script/">Google Apps Script documentation</a> for more details.</p>
<p>The <a href="https://script.google.com/d/143u0RLuppsmYJ0B3wzo6i0jZYSfIFV2NLJMHPM-Sqczpr9bLwdffc-Wx/edit?usp=sharing">script source is here</a>, and contains just a handful of functions which I’ll briefly describe here.</p>
<p><strong>doGet</strong>: Creates a text output object, grabs the id and sheet query parameter values, opens the spreadsheet, reads the header and data records (via readData_), setting them as an array of objects in the data['records'] element, and then returns the content, pausing for a second only to work out whether JSONP or JSON was required, and returning the content and the content-type appropriately.</p>
<p><strong>readData_</strong>: Goes and reads the header row via getHeaderRow_, and then the data rows via getDataRows_. It replaces any whitespace in the header values with underscores.</p>
<p><strong>getHeaderRow_</strong>: Grabs the first row of the sheet, with the intention of treating the content of each cell in that row as the property names of the data objects.</p>
<p><strong>getDataRows_</strong>: Grabs the rest of the rows of the sheet, creating JavaScript objects with properties one for each column.</p>
<p>Yes, it’s perhaps over-simple in places, but it works for me, and may work for you too.</p>
<p>So with that in mind, let’s say we use the &quot;Typical Spreadsheet&quot; shown in the screenshot above, and take its id and the name of the first and only sheet. When we append the query parameters appropriately onto the web app’s URL for this particular instance of the script (mine), we get:</p>
<p><span style="color: #ff6600;">https://script.google.com/macros/s/AKfycbxOLElujQcy1-ZUer1KgEvK16gkTLUqYftApjNCM_IRTL3HSuDk/exec</span>?<span style="color: #339966;">id=0AuAssa05Fog5dGc5WVNRbFZDcWJCLVY2V2NidWFKeXc</span>&amp;<span style="color: #0000ff;">sheet=Sheet1</span></p>
<p>which will return this:
<img src="//qmacro.org/content/images/2013/10/json.png" alt=""></p>
<p>Note that there’s a redirect which means the final URL you see in the URL bar is not the one above. Note also that the formatting in my browser is down to the great Chrome extension &quot;<a href="https://chrome.google.com/webstore/detail/jsonview/chklaanhfefbnpoihckbnefhakgolnmc?hl=en">JSONView</a>&quot;.</p>
<p>Share and enjoy!</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>#YRS2013 Hacks on Github</title>
      <link href="https://qmacro.org/blog/posts/2013/08/10/yrs2013-hacks-on-github/"/>
      <updated>2013-08-10T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2013/08/10/yrs2013-hacks-on-github/</id>
      <content type="html">
        <![CDATA[
      <p>Well we’re in the midst of the <a href="https://youngrewiredstate.org/static/festival-of-code.html">Young Rewired State Festival Of Code</a> weekend here at the Custard Factory in Birmingham and one of the amazing by-products of all the hacking is the power of Open Source and the awareness and use of <a href="http://github.com">Github</a> — the latter is largely down to great work by <a href="http://heyashleyashley.com">Ashley Williams</a> and others this week, running git and Github workshops for the kids during the week in various centres, including ours (<a href="http://madlab.org.uk">MadLab</a>).</p>
<h3>Github Commit Data</h3>
<p>Anyway, I was curious and so put together a spreadsheet tracking <a href="http://hacks.youngrewiredstate.org/events/YRS2013">all of the 2013 hacks</a> that had declared a Github repo in their information pages. <a href="http://www.pipetree.com/~dj/2013/08/yrs2013/commits.html">You can see</a> that there are a massive number of kids not only hacking code but sharing it with the world:</p>
<div class="wp-caption alignnone" id="attachment_1533" style="width: 510px">![image](/images/2013/08/hacks.png)#YRS2013 Hacks on Github
</div>(see the interactive graph here: [http://www.pipetree.com/~dj/2013/08/yrs2013/commits.html](http://www.pipetree.com/~dj/2013/08/yrs2013/commits.html))
<p>I wrote some <a href="https://developers.google.com/apps-script/">Google Apps Script</a> to poll the <a href="http://developer.github.com/v3/">Github API</a>, pulling commit info, and writing it to a Google spreadsheet.</p>
<h3>Visualise It Yourself</h3>
<p>I’ve also made the data available as JSON (again, using the power of a little Google Apps Script), as I know that you can do a lot better than me visually. The data is here:</p>
<p><a href="http://bit.ly/YRS2013HacksOnGithub">http://bit.ly/YRS2013HacksOnGithub</a></p>
<p>so please be my guest and put some more visualisations together. Let’s see who can come up with the nicest representation this weekend.</p>
<h3>Source Code</h3>
<p>The Google Apps Script source code that I used for this is available via a couple of gists on Github:</p>
<p><a href="https://gist.github.com/qmacro/6199968">https://gist.github.com/qmacro/6199968</a> – retrieve and store commit counts</p>
<p><a href="https://gist.github.com/qmacro/6199973">https://gist.github.com/qmacro/6199973</a> – expose a sheet as JSON</p>
<p></p>
<p>Share &amp; Enjoy!</p>
<p></p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>CodeClub Thoughts</title>
      <link href="https://qmacro.org/blog/posts/2013/04/18/codeclub-thoughts/"/>
      <updated>2013-04-18T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2013/04/18/codeclub-thoughts/</id>
      <content type="html">
        <![CDATA[
      <p>I’ve been a <a href="http://www.codeclub.org.uk">CodeClub</a> leader for a while now at my local primary school, <a href="http://www.woodhouses.oldham.sch.uk">Woodhouses Voluntary Controlled Primary School</a>, in Manchester. The club is after school on Friday afternoons and each session runs for an hour. We’re taking a break brought on by the Easter holidays, and I’m on holiday this week too, so I thought I’d put some thoughts together on how it’s gone so far. Overall, it’s been a fantastic experience, if slightly chaotic and exhausting (in a good way) at times. The rewards of seeing enthusiasm and interest in the CodeClubbers, and above all their progress, have been great.</p>
<p>After registering my interest as a volunteer last year, I didn’t get round to contacting a school until December, where I approached Woodhouses Primary, as it was in the village where I lived. I’d got my CRB check done back in September, via <a href="http://www.stemnet.org.uk">STEMnet</a>, as advised by CodeClub, and that was a very straightforward process. In fact, I’m as much <a href="/blog/posts/2012/12/05/codeclub-and-becoming-a-stem-ambassador/">involved as a STEMnet Ambassador</a> now as I am a CodeClub leader. Definitely worth looking into!</p>
<p>The <a href="http://www.codeclub.org.uk">CodeClub website</a> had some great <a href="http://www.codeclub.org.uk/start-a-club/volunteers">resources</a> to help build a case to put to a school, and good notes for volunteers on what to do, what to expect and even ideas on what to say (if you were unsure). I arranged a meeting with the Headteacher and Year 6’s Form teacher, and as soon as I explained what it was, how it worked, and that it was free, the deal was done. The following week I stood up in front of Year 5 and Year 6 children with <a href="https://docs.google.com/presentation/d/1JvXiFUEf8oxHXwwKtnDBqOd3PhnDau5G_37fAlBQpQ0/edit?usp=sharing">some simple slides</a> and explained what programming was all about. At the end, when I asked who might be interested in becoming a member of an after-school CodeClub, there were a lot of raised hands!</p>
<p>The school decided to restrict the availability to Year 6 children only, because of sheer numbers, and to give the Year 5 children something to look forward to! After all was said and done, I ended up with a total of 13 CodeClubbers.</p>
<p>Here are some bite-sized thoughts on my experience so far.</p>
<ul>
<li><strong>Hardware</strong>: I was somewhat (pleasantly) surprised that the school had enough laptops and desktops to go round. However, they were, understandably, in pretty poor shape, many suffering from performance issues, Windows update issues, and some would randomly refuse to boot.</li>
<li><strong>Access</strong>: Further, each child had their own login, with restricted access. This meant that I had to get admin access to each of the machines to be able to install Scratch. This went well, generally, although some of the installs ended up with no icon on the child’s desktop, meaning we had to go and find the Scratch executable (c:Program Files…) to start it up in some cases.</li>
<li><strong>Saving</strong>: children each had their own area (network-served home directory) to save files, so we use that to save their Scratch work each week. Access to the Web was possible, but via a proxy, the credentials to which have remained somewhat elusive, so we haven’t shared any projects on MIT’s Scratch community site yet. At least, not by direct upload from the Scratch environment (there are proxy and other config parameters you can set if you know the details).</li>
<li><strong>Time</strong>: There were already a number of after school clubs active, but a Friday slot was free. This was ideal, as for me it meant I could choose that slot as the least likely time to impact my day job (more on that later) – I travel with work sometimes, but Friday is the day I’m most likely to be in Manchester. “After school” does not equate to “after work”, as the former starts usually around 15:15!</li>
<li><strong>Setup</strong>: Some setup time each week is essential, to get the laptops out, arrange the desks and chairs, and get the worksheets ready (having a last look at the task in hand yourself, too!). So I try to arrive at 15:00 for a 15:15 CodeClub start. This also gives me time to think about what the key characteristics of the project are, so I can bind in some emphasis of those points during the session.</li>
<li><strong>Materials</strong>: CodeClub has done a great job of putting materials together for the leaders. There are volunteers that put together projects on a term by term basis. Term 1 is Scratch-based, and what I’m teaching. For Term 1 there are three sets of three projects (i.e. 9 in total), and each project is about the size of a single CodeClub session. Some children finish sooner, others need more than a single session (this does get challenging sometimes, see later). There’s a <a href="http://codeclub-assets.s3.amazonaws.com/public/codeclub-whackawitch.pdf">sample project available on the CodeClub website</a>.</li>
<li><strong>Belonging</strong>: There are non-programming resources in the CodeClub materials – such as name badges, door signs and so on. These are wonderful, especially with the CodeClub branding, and I’ve used these to good effect to create a sense of club-style belonging. And as the CodeClub-supplied materials suggest, name badges are ideal for helping you remember each child’s name! A sense of belonging is heightened when you give children little tasks that they can own; I have a badge monitor (distributing and collecting them before and after each session), a door-sign monitor, and so on. And of course, getting them to start and end each session with an almighty “CodeClub” cry is as bonding as it is deafening!</li>
<li><strong>Ratio</strong>: CodeClub recommended around 10 children per volunteer. There’s only me at Woodhouses CodeClub so far, and I have 13. I would agree with CodeClub’s recommendation. While I’m just about coping, it does get a little hectic sometimes, as there are always plenty of questions, the children go at different paces, and it’s sometimes hard to get the balance right between spending quality time on an answer with one child and covering as many questions as possible in the shortest time. Overall, I’ve found that you soon get to recognise those that need more help generally, and those that are more independent. Bear that in mind, and above all, use praise a lot. It really boosts their confidence which in turn edges them further along the continuum from reliance towards independence.</li>
<li><strong>Space</strong>: One thing that caught me completely by surprise was room logistics. The room we have at Woodhouses is long but narrow, and the way the desks and chairs are arranged (there’s only one way, really) means that when the children are in the chairs, it’s quite difficult sometimes for an adult-sized person to squeeze past. This becomes a real issue when you’re trying to flit between as many children as you can answering questions and helping out. If you can bear this in mind when arranging the table logistics, it will help you a lot more than you think.</li>
<li><strong>Enthusiasm</strong>: Year 6 children are excitable and their enthusiasm shows itself in ways that we might initially think are disruptive and chaotic. With the graphical nature of Scratch, this chaos is extended into the projects themselves, with more or less every child wanting to use a different name, character or sprite costume for the project protagonists. Embrace it, don’t fight it. The only thing you should do is be consistent in the naming, so for example the two characters in the first project are a cat called Felix and a mouse called Herbert. What’s certain is that in many cases you’ll neither have cats or mice, nor the names Felix &amp; Herbert. But use ‘Felix’ and ‘Herbert’ consistently when you’re explaining things and the children will naturally translate into whatever they have.</li>
<li><strong>Co-Working</strong>: Some children like to work together, others like to work alone. But for any emergency logistical reasons (laptop won’t boot) you can put them together and they won’t mind. Some children are also keen to help out, so embrace that and give them tasks (e.g. help the child next to them find the right sprite costume) and they will thank you for it.</li>
<li><strong>Checkboxes</strong>: Each project worksheet has checkboxes that are designed to be checked off as each child completes that part (one worksheet per child). I forgot to specify that the children should come with pencils or pens on the first session, with the result that some of them, after an interruption, couldn’t find where they’d got to, and it took a little bit of time to work out where they were. So make sure they bring pencils to tick off each section as they do it. It helps them, but it also helps you when coming to answer a question.</li>
<li><strong>Extras</strong>: Be prepared, or be ready to think on your feet. There’s a couple of girls that work together in our CodeClub, and they’re super keen and also very very competent. They just “get it” (e.g. I found myself explaining things to them with the use of the standard Scratch XY Coordinate stage background, possibly too advanced for some, and they loved it). They’re starting to consistently finish the projects before the end of the CodeClub session. There are great ‘bonus’ tasks on the project handouts, which faster children can do, but I found myself having to give them completely new extra tasks to do to satisfy their hunger for learning and experimentation. So play around with Scratch yourself in between CodeClub sessions and you’ll be more readily able to come up with new small tasks at the drop of a hat.</li>
<li><strong>Flexibility</strong>: Be flexible and creative, too. I discovered that some of the desktop machines had faulty speakers, so the sounds that some of the characters were to make were no good. Rather than have the children disappointed, I encouraged them to “hack” the project by getting the characters to “say” or “think” (speech/thought bubbles) something instead. They loved it, as they were doing something special.</li>
<li><strong>Assets</strong>: One of the early Scratch projects involves image and sound asset files that are not part of the standard Scratch installation. They are, instead, supplied in the files made available for the CodeClub leaders. This is great, but one mistake I made was not loading the assets onto the laptops before the start of that project session, which meant that some time was wasted distributing them on a USB stick. So remember to check what the project requirements are before you start!</li>
<li><strong>Coordination</strong>: The biggest challenge for me as the only volunteer (somewhat exacerbated by having 13 children) is that the varied pace of progress means that some children are finishing off the previous week’s project while others are starting the new one. This, combined with the room logistics, has been the toughest challenge for me. Keeping track of who is doing what, and therefore in what context to answer each question, is hard. What I want to avoid at all costs is for someone to get bored, either waiting for me to get round to answering their question, or because they’ve finished something and are waiting for new instruction. I’m not sure there’s an easy answer to this except perhaps to recruit a second volunteer (I’m in the process of doing that now!).</li>
<li><strong>Certificates</strong>: One of the highlights for me has been the reward of Level 1 certificates for those children who’d managed to complete all three projects of Level 1 before Easter. Again, the CodeClub materials are fantastic and a nice A4 landscape certificate with the child’s name hand-written on it and handed out in assembly can only be a good thing, not only for the recipients, but for CodeClub and programming in general.</li>
<li><strong>Highlights</strong>: As well as the specific highlights like certificate awards, there are many weekly highlights for me. Here’s just one example. A child, who’d enthusiastically suggested “Binary!” as a programming language in answer to one of my questions in the talk to Years 5 &amp; 6 (and who could deny him that answer?) came up to me at the end of the second session and said something that completely made all the effort worthwhile: He had an idea to combine some of the code from the previous week’s project (attaching a sprite, with a couple of costumes, to the mouse pointer and changing costumes when clicked) with what he’d built that afternoon to make the game even better. It was a super moment for me, as he’d independently figured out a way to make the game better by “hacking” it (and yes, this is “hacking” in the proper sense, not the ignorant way the popular media use the word) – and using code from different sources.</li>
<li><strong>Scratch</strong>: This may sound obvious, but embrace Scratch and the projects that CodeClub offer. Do them yourself, to get not only a better understanding and appreciation of Scratch itself, but also to get the project – its goals, purpose, challenges and flavours – into your head. It makes it a lot easier to lead the session this way. I was initially skeptical of Scratch, but the key point to remember about that skepticism is that it was formed before I used Scratch properly. I was completely wrong to be skeptical. It’s an excellent learning environment – a design-time and run-time in one single executable, and a single interface too. It’s got the right balance between syntax, graphics, ease-of-use and capabilities, and is absolutely ideal for teaching coding to primary school children. Yes, I would like to teach Python too, but Scratch is excellent in what it delivers.</li>
<li><strong>Collaboration</strong>: The first project from CodeClub comes with a series of step-by-step instructions that you can use to lead the children through their first discovery of the Scratch environment. I used this in the first session, in fact I extended it into a complete discovery hour. It worked really well. I did something in Scratch – something small and bite-sized – and then the children followed suit and did the same thing themselves on their laptops or desktops. It got them used to the interface, but even more importantly, the side-effects of turning it into a Q&amp;A were very valuable. “How might we do this?”, “What do you think would happen if we did that?” and so on. The engagement factor was very high. So much so that for the next scheduled session, I’ve prepared an “off piste” project that we’ll do in collaborative mode, with me guiding them through a complete session to build a maths quiz game. And yes, for the ones running at a more rapid pace, I’ve got some ‘bonus’ bits that we can cover separately.</li>
<li><strong>Employer</strong>: Finally, some thoughts about how you might do this after school if you have a full time job. I’m lucky in that my job involves programming and that I work for a forward thinking company – <a href="http://www.bluefinsolutions.com">Bluefin Solutions</a>. They already knew of my work with STEMnet, and of course being a company with the highest number of <a href="http://scn.sap.com/docs/DOC-23155">SAP Mentors</a>, were already aware of the positive benefits of contributing back into communities. With a positive attitude towards social responsibility and an inherent interest in technology (a core competence) it was almost a no-brainer. Bluefin have supported me in my efforts thus far, and are being open minded and flexible (thanks folks!). I wrote a blog post on Bluefin’s “Insights” section about CodeClub and related subjects: “<a href="http://www.bluefinsolutions.com/insights/blog/our_computational_future/">Our Computational Future</a>“. If you can approach your employer and explain the benefits of CodeClub not only from a immediate payback view but also from a longer-term perspective you’re in with a chance of succeeding. As an early bird, my working day starts well before most people’s, so I manage to get things done to such a degree that switching to CodeClub on a Friday afternoon is workable. If you have flexible hours, then so much the better.</li>
</ul>
<p>One final thought: If you’re wondering whether to take the plunge and become a CodeClub volunteer, just go for it. The support is great, the community is growing, the time logistics will sort themselves out, and the rewards are unlimited. Go for it!</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Review of Dark Reserve Nr 3 from Lovibonds</title>
      <link href="https://qmacro.org/blog/posts/2013/04/05/review-of-dark-reserve-nr-3-from-lovibonds/"/>
      <updated>2013-04-05T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2013/04/05/review-of-dark-reserve-nr-3-from-lovibonds/</id>
      <content type="html">
        <![CDATA[
      <p><img src="/images/2013/04/dark-reserve-nr-3.jpg" alt="Dark Reserve Nr 3"></p>
<p>Lovibonds. Why does that name ring a bell? Apart from representing a long tradition of brewing, which we'll dive into in a moment, it is also a name well known throughout the brewing and food science industries, as the surname of the inventor of the <a href="http://tintometer.de/">Tintometer</a>. Used in brewing and many other industries, the Tintometer is a device for measuring and classifying liquids by colour, and was invented in the 19th century by Joseph William Lovibond. The Tintometer classification and colour scale system is still used today by brewers to buy their malt. (You'll no doubt be pleased to know that, according to the Tintometer Group website, their modern digital water test equipment and liquid colour test instruments are, ahem, waterproof.)</p>
<p>But before we go any further, let's get to the bottom of the Lovibonds name as it applies to the brewing company. Jeff Rosenmeier is the current proprietor and owner of Lovibonds Brewery. Originally from the States, and a software engineer (there's hope for me yet!), Jeff came to Henley-on-Thames, already bitten by the brewing bug and looking for a site for his expanding brewing ventures, came across the site that had originally belonged to John Lovibond &amp; Sons Brewers and Merchants, and took over the name. Yes, that Lovibond. John Locke Lovibond was the father of Joseph William and three other sons who set up a brewing partnership in 1872. So the name Lovibond is almost literally steeped in brewing history and science.</p>
<p>Transitioning into its second incarnation, the Lovibonds brewing respect has only grown. With a handful of year-round brews, limited releases, specials and prototypes, the quality of their beers is becoming well known. I'm here at Port Street Beer House with a Dark Reserve Nr 3 in my glass. The person next to me has already picked up the aroma of bourbon. Jack Daniels, to be precise. This is a porter aged in Tennessee whiskey barrels. Dark brown with a brief tan head, you can almost sense the wet wooden barrel innards, imparting vanilla, nuts and raisins. The body is not as heavy as one might expect, and along with the malty mouthful there's a dark chocolate and bitter, almost sour finish, with some brown sugar sweetness towards the bottom of the glass. It's a strong one – at 7.4%, but the sample disappeared fairly quickly and it didn't feel like I was drinking something that potent. The sourness and relative lightness definitely added to the appeal, and the drinkability.</p>
<p>Port Street Beer House is currently running a <a href="http://www.portstreetbeerhouse.co.uk/events/festival-of-britains-beers-2013-monday-25th-march-sunday-7th-april">Festival Of Britain(s Beers)</a> and have brought together a great collection of British brewing talent. Lovibonds is a worthy member of this collection, and have earned their place at the taps with this excellent brew. The Festival is on until this Sunday 7th April, so get yourself down there before this Dark Reserve is gone. Quick!</p>
<br />
<ul>
<li>Brewer: Lovibonds</li>
<li>Brew: Dark Reserve Nr 3</li>
<li>Style: Porter</li>
<li>ABV: 7.4%</li>
</ul>
<hr>
<p><a href="https://www.portstreetbeerhouse.co.uk/blog/review-dark-reserve-no-3">Originally published on the Port Street Beer House website</a></p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Functional Python - Itertools Exploration</title>
      <link href="https://qmacro.org/blog/posts/2013/04/01/functional-python-itertools-exploration/"/>
      <updated>2013-04-01T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2013/04/01/functional-python-itertools-exploration/</id>
      <content type="html">
        <![CDATA[
      <p>Well, time passes, and my <a href="www.pipetree.com/tag/30days/">30days challenges</a> are continuing. <a href="/blog/posts/2013/01/02/30-days-challenges/">January: no Twitter</a>, <a href="/2013/02/02/30-day-challenge-no-beer/">February: no beer</a>, and the month just passed, March: Meditation. I didn’t do too well on the meditation front, but that hasn’t put me off. I’ll reflect on that perhaps another time.</p>
<p>Now it’s a new month, and a new challenge. Although I don’t see it so much of a challenge, but something I want to use the challenge mechanism to complete. In my activities with <a href="http://www.codeclub.org.uk">CodeClub</a> and the <a href="http://madlab.org.uk/content/tag/coderdojo/">MadLab U-18 CoderDojo</a> activities I’ve a refreshed interest in coding at the core, and have been looking at and using Scratch and Python in earnest. And in wondering and discussing how to present approaches to coding, and in particular some Python idioms (for example, see <a href="https://plus.google.com/110526626182299357893/posts/GcjBjjY1kNK">this question on ‘pedestrian’ vs ‘functional’ approaches</a>), I’m developing a keen interest in the functional programming features in Python. I was particularly taken by this video: <a href="http://www.youtube.com/watch?v=EnSu9hHGq5o">http://www.youtube.com/watch?v=EnSu9hHGq5o</a> and did some more research, combining what I was learning with the functions map, filter and reduce, also of course available in many other languages.</p>
<p>All roads seemed to lead to <a href="http://docs.python.org/2/library/itertools.html">itertools</a>, a Python library that “implements a number of iterator building blocks inspired by constructs from APL, Haskell and SML”. So this month I’d like to investigate the functions in this library, one at a time. I’m not sure what that investigation will look like, but I know I’d like to have a look at each one in turn, find examples of how they might be used, and write a little bit about them. The writing part is interesting; I felt that this WordPress-based blog was slightly too formal (and cumbersome?) for what I wanted, and hankered after a Wiki-based environment, with minimal edit friction and the ability to build document and page structure relationships dynamically. I’d had one on this host a (very) long time ago, called “space”*, and it was a <a href="http://moinmo.in/">MoinMoin</a> powered one. That’s Python-based, and it served me well, so I’ve just installed a new instance. I’ll use that to help me on my itertools voyage of discovery. Wish me bon voyage!</p>
<p>* Gosh, there are a few references to “space” still around in code, such as <a href="https://github.com/bentglasstube/blosxom-plugins/blob/master/wikiwordish-v2i0b4">here</a>!</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Our computational future</title>
      <link href="https://qmacro.org/blog/posts/2013/02/14/our-computational-future/"/>
      <updated>2013-02-14T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2013/02/14/our-computational-future/</id>
      <content type="html">
        <![CDATA[
      <p>If you're reading this blog post, chances are that you're aware of, or directly involved in the Information Technology (IT) industry in the UK. Whether that's as a means to an end (you're a business user), or an end in itself (like me, you're a technologist), the IT industry is a critical platform for building out the next few decades.</p>
<h2>The pace of innovation</h2>
<p>The pace of innovation is not slowing. In fact it is accelerating -- rather like an Osborne 1 might do if you threw it out of the window of Larry Ellison's Gulfstream Jet. Is there a terminal velocity for innovation? I'm not sure. But while the rareified atmosphere is a boost to the Osborne 1's progress, there's a danger back down here on terra firma that a similar rareified atmosphere will hinder the progress of innovation: IT skills. Or rather, their waning nature.</p>
<h2>Teaching IT skills</h2>
<p>I was fortunate; as a schoolboy, the simple, cryptic prompt on a teletype held me in a vice-like grip of fascination that has never let go. I didn't need to be taught IT skills; I taught myself, spurred on by wonder and novelty, in a time when you could devour almost everything that popular computing at the time had to offer.</p>
<p>Today, children in the UK are unlucky in the sheer abundance, the omnipresence of computing machinery. Laptops, games consoles, smartphones and programmable LEGO. And what do we as a nation do? We teach them how to use Microsoft Word and Excel, we place importance on the ability to turn out a well formatted letter, or the skill in navigating the complexities of Excel's myriad functions. In and of itself that's not a bad thing, except when that's the only thing that's taught.</p>
<h2>Builders, not users!</h2>
<p>What are we building? A nation of users? We should be building a nation of builders! Of makers! Is our destiny to be the IT service industry isle par excellence? Because that's the way we're headed if we're not careful.</p>
<p>Our nation has been one of innovators, of inventors, of leaders. If we continue to use the ICT education opportunities to teach our children how to do slide transitions in Powerpoint, how to put headers and footers on documents or how to plot a pie chart from a series of figures, how does that stack up for the future? Instead of teaching children to attain basic computer driving licences, how about teaching them something that will give them a better chance to both understand and - more importantly -- shape the world of computing, which has an ever increasing sphere and relevance to industry today.</p>
<h2>Computational thinking</h2>
<p>Computational thinking is a term that I was first introduced to by Jon Udell. It encompasses logical thinking, precision, creativity and rigour, and embodies all that we should be teaching our children for them to grow up capable and ready for the IT age. Not as people who know how to put together a forecast and graph it, but as people who understand how systems work, how to take advantage of the data tsunami that's coming our way, and, crucially, how to stay in control.</p>
<p>A recent (Feb 2013) Department for Education study &quot;Computing - Programmes of study for Key Stages 1-4&quot; examines what a high quality computing education looks like, describes aims and attainment targets, and sets out subject content across Key Stages 1 to 4. This study resonates well with the ideas of computational thinking, and describes the aim of the National Curriculum as ensuring that all pupils can understand and apply the principles of logic, algorithms, computational analysis, and at the same time can be creative and confident in their approaches.</p>
<h2>CodeClub and STEMnet</h2>
<p>So with the desire to share my interests and passions, and having in mind the the concepts of computational thinking, I joined CodeClub as a volunteer, and am about to start our local primary school's first after-school programming club with Year 6 children. The current CodeClub curriculum is based on Scratch, which is a great learning environment for programming, in more ways than I initially imagined (Scratch itself, interestingly, is based on Squeak). Furthermore I have become a STEM Ambassador, and my role in the Greater Manchester area is currently speaking to pupils on IT, helping schools shape their computing curriculum, and showing them how to take advantage of recent innovations such as the Raspberry Pi.</p>
<h2>The future</h2>
<p>I display my STEMNET and CodeClub links proudly on my Bluefin Solutions email signature. It reminds me of my past, and of my future. What about our future? What about the future of our children's education and careers, and therefore also of our industry? If nothing else, I hope this post has made you aware of the gap between what our children are being taught and what they really need to know, and aware of the organisations that exist and are trying to do something about it. Wish me luck - I'm off to play my small part in helping build tomorrow's builders.</p>
<p><em>This blog post was first published on 14 February 2013. Since writing this, I had the opportunity to speak on this subject at a TEDx event – <a href="https://web.archive.org/web/20180227044413/http://www.tedxoldham.com/speakers/dj/">TEDx Oldham, in Oct 2013</a>. The talk was recorded and is available on YouTube - <a href="https://www.youtube.com/watch?v=-gvOCaExeK0">Our Computational Future: DJ Adams at TEDxOldham</a>.</em></p>
<hr>
<p><a href="https://web.archive.org/web/20180227044413/http://www.bluefinsolutions.com/insights/dj-adams/february-2013/our-computational-future">Originally published on the Bluefin Solutions website</a></p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>30 Day Challenge: No Beer!</title>
      <link href="https://qmacro.org/blog/posts/2013/02/02/30-day-challenge:-no-beer!/"/>
      <updated>2013-02-02T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2013/02/02/30-day-challenge:-no-beer!/</id>
      <content type="html">
        <![CDATA[
      <p>Well goodness me it’s already February. January went by very fast indeed, and it turns out I managed my <a href="/blog/posts/2013/01/02/30-days-challenges/">January challenge (no Twitter)</a> very well.</p>
<p>I uninstalled my Twitter clients (Tweetdeck for Chrome and Tweakdeck on my Android phone). I didn’t log into them at all. I was still authenticated with Twitter on the website* and visited<a href="http://twitter.com"> twitter.com</a> a couple of times to check something. No interaction, discussion or link saving, though.</p>
<p>So I’d say it was a big success. I did miss the interaction quite a bit – I missed the community of friends and colleagues (especially the SAP community) who have a big presence there. I missed the interaction and the sometimes thought provoking discussions. But on the flip side, I did <em>read</em> a lot more; in other words, I used the time that I might otherwise be staring blurry-eyed at the columns of tweets, and read a lot of stuff I’d <a href="http://www.instapaper.com">Instapaper</a>‘d. It was great.</p>
<p>In the latter half of the month I’d more or less forgotten about Twitter and had got to grips with <a href="https://plus.google.com/u/0/110526626182299357893/posts">Google+</a>. It’s still no replacement for Twitter (mostly because of the people) but it’s a great platform — indeed, <a href="http://www.chrisbrogan.com/social-backplane/">a social backplane</a> — and I’ll continue to spend more time there.</p>
<ul>
<li>until this morning, oddly enough, when I got an email to say that Twitter had reset my password. Odd.</li>
</ul>
<p>I know the idea of the 30 day challenges was not to attempt a full year of “no this, no that”; rather, there are some “do more of this, start doing that” elements too. But for February I’m attempting to drink no beer. That will indeed be a challenge, as <a href="https://untappd.com/user/qmacro">I’m a big fan of craft beer</a>, as many people know. It’s not that I’m avoiding alcohol altogether; I’ll allow myself a glass of wine here, a dram of whiskey there. It’s the beer that will be absent. As I drove out of work last night I’d mentioned to the inimitable <a href="https://plus.google.com/u/0/110317969553719519075/posts">Jamal Walsh</a> that I was embarking on this challenge, and having just finished his dry January. gave me a tag-team style high five. Wish me luck!</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>30 Days Challenges</title>
      <link href="https://qmacro.org/blog/posts/2013/01/02/30-days-challenges/"/>
      <updated>2013-01-02T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2013/01/02/30-days-challenges/</id>
      <content type="html">
        <![CDATA[
      <p>Inspired by Matt Cutts and his <a href="http://www.mattcutts.com/blog/type/30-days/">30 Days Challenges</a>, I’ve decided to have a go myself, instead of setting any specific (and year-long-lasting, doomed-to-failure) New Year Resolutions. The challenges I have in mind are similar or the same to some Matt completed: Some of them are about doing something regularly, others are about not doing something, and others still are about using the 30 day period to achieve a specific goal.</p>
<p>So my first 30-day challenge is to take a break from Twitter.</p>
<p>I’ve been toying with this idea for a while. It’s not an attempt to be online less and interacting socially less. The thoughts were initially triggered with the nosedive Twitter’s standing took in the developer community when they poked a blunt stick in the faces of some of the very developers that helped Twitter succeed, by changing the API usage terms. But it’s also to do with my interest in Google+, and wanting to see that platform and community succeed. I like the idea of Google+ and despite it only having a read-only API for now, I’m encouraged by the direction in which it’s being grown.</p>
<p>It’s not going to be easy to take 30 days off Twitter, that’s for sure. Many of my friends and work colleagues hang out on Twitter and I get a lot of Instapaper fodder there too. But perhaps a move to Google+ will help me make my mind up once and for all whether it’s a viable new platform to replace what I use Twitter for. I’m not expecting other people to make the move, or at least give Google+ a try, but if they do, that’s great.</p>
<p>Ok, so today I tweeted “<a href="https://twitter.com/qmacro/status/286442992393404416">I’m intending this to be my last (non-automated!) Tweet for January</a>“. Off we go!</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Review of Fourth Dementia Old Ale from Kuhnhenn Brewing Company</title>
      <link href="https://qmacro.org/blog/posts/2012/12/17/review-of-fourth-dementia-old-ale-from-kuhnhenn-brewing-company/"/>
      <updated>2012-12-17T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2012/12/17/review-of-fourth-dementia-old-ale-from-kuhnhenn-brewing-company/</id>
      <content type="html">
        <![CDATA[
      <p><img src="/images/2012/12/fourth-dementia-old-ale.jpg" alt="Fourth Dementia Old Ale"></p>
<p>Just over one week to go before Christmas, and the shoppers in Manchester are in full swing, dashing round town, bags in hands, pensive thoughts on faces. A few spouses are holed up here at Port Street Beer House enjoying some peace and quiet, and some great beers. A lot of darkness in glasses, the cold weather is properly upon us. Dark nights, dark ales. Heavy beers to warm us slowly from our core outwards. And with that context in mind, I'm about to have my personal and loose definition of ‘beer' stretched a little bit.</p>
<p>Nestling at the bottom of one of the fridges behind the bar is a brown bottle with a black label and, with that label announcing &quot;Kuhnhenn Brewing Company, 4th D Olde Ale, 13.5% ABV, aged for 9 months&quot;, quite possibly dark secrets. Sitting down at the table, I'm taken completely off track, although not unexpectedly. This old ale sits in the glass like liquid mahogany, barely a trace of head, and what head there was after pouring has quickly dissipated and become a tan ring round the glass. Before I even get the brew to my lips, my nose is hit by the heady raisin, rum and bourbon tones which are as sweet as they are boozy. This is very clearly a sipping beer – hardly any carbonation, and very heavy. So I ready myself for the first sip … and it's like a Cadbury's Caramel heavily diluted with bourbon and black cherry liqueur. Gosh. The mouthfeel is just the same, a syrupy malt lacing that fades delightfully turning from obvious sweet to muscovado.</p>
<p>This Old Ale, properly called &quot;Fourth Dementia Olde Ale&quot;, is from the Kuhnhenn microbrewery, in Warren, Michigan, a town due north of Detroit. Looking at <a href="http://www.kbrewery.com/beer.html">the beers on offer</a>, this dark, strong malty and caramel ale fits right in, with Imperial Creme Brulee Java Stout, Bourbon Barrel Barley Wine, Sticke Alt and Hairy Cherry coming from the same stable. That stable was originally a family run hardware store, and when faced with the prospect of losing out to a larger hardware chain that had moved into the area, the Kuhnhenn family, specifically two brothers Bret and Eric, decided to turn their home brewing know-how into a brewery business and reinvent themselves. It wasn't as unusual a transition as you might expect: Eric had been bitten by the home brewing bug at college, and selling home brewing supplies had eventually become a significant part of their hardware business. Having made the transition to a full brewing business, Kuhnhenn's is now a highly industrious eight barrel microbrewery.</p>
<p>The folks at Port Street Beer House have a knack for sourcing beer from passionate brewers, and this is no exception. If you're passing by, or wanting an escape from the cold outside (or the heat and chaos inside the myriad shopping areas) come in and spend a half hour getting to know this old and dark ale. You won't regret it. And you'll leave with a warm glow from within, like so many Ready-Brek kids of yore, but with a smile on your face.</p>
<br />
<ul>
<li>Brewer: Kuhnhenn Brewing Company</li>
<li>Brew: Fourth Dementia Ole Ale</li>
<li>Style: Old Ale</li>
<li>ABV: 13.5%</li>
</ul>
<hr>
<p><a href="https://www.portstreetbeerhouse.co.uk/blog/review-kuhnhenn-brewing-company-fourth-dementia-old-ale-by-dj-adams">Originally published on the Port Street Beer House website</a></p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>CodeClub and becoming a STEM Ambassador</title>
      <link href="https://qmacro.org/blog/posts/2012/12/05/codeclub-and-becoming-a-stem-ambassador/"/>
      <updated>2012-12-05T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2012/12/05/codeclub-and-becoming-a-stem-ambassador/</id>
      <content type="html">
        <![CDATA[
      <p><a href="http://www.codeclub.org.uk/">CodeClub</a> is a nationwide network of volunteer-led after-school coding clubs, and its mission is to give every child in the UK the chance to learn to code. When CodeClub started earlier this year, I registered my interest as a volunteer.</p>
<p>I didn’t have any particular school in mind, but in any case, in order to have the chance to run a coding club, I needed to get a CRB check, and <a href="http://www.codeclub.org.uk/getting-started/volunteers">CodeClub’s getting-started page</a> directed me towards the <a href="http://www.stemnet.org.uk/content/ambassadors">STEM Ambassadors Programme</a> where a lot of support for, and financing of the CRB check process was available.</p>
<p>I duly attended the STEM induction session at Manchester’s <a href="http://www.mosi.org.uk/">Museum Of Science &amp; Industry (MOSI)</a>. MOSI are the STEM network account holders for Greater Manchester and there’s a great team there. Since my induction, resulting in me and the other attendees becoming STEM Ambassadors, I’ve become more involved with STEM activities, recently helping schools and teachers learn about the Raspberry Pi and form course ideas around it.</p>
<p>There was a recent evening event held at Manchester University where teachers from schools all around the North West gathered with Manchester University staff, MOSI/STEM folks and STEM Ambassadors to help each other learn about the Pi, and also about the PiFace – a shield with easy to use screw-terminal based physical interfaces for connections to and from the real world (Internet Of Things here we come!), invented by the University’s own Dr Andrew Robinson. We covered Scratch- and Python-based programming with the PiFace. Great fun.</p>
<p>Based on connections I made at that evening event, I followed up with the Raspberry Pi theme to visit a couple of Sixth Form Colleges in Manchester: Xaverian, and Pendleton (part of Salford City College). I took a Pi with me, along with lots of cables, and a serial terminal (yes, <a href="/blog/posts/2012/07/15/serial-interest-in-the-raspberry-pi/">that one</a>). I also took a few slides that I put together to explore loop constructs in different languages, and finally a suitcase full of career memories. I wrote my visits up on the STEMnet site: <a href="http://networking.stemnet.org.uk/blog/raspberry-pi-and-manchester-colleges">Raspberry Pi and Manchester Colleges</a>. There’s also a news article on Xaverian’s website about my visit: “<a href="http://www.xaverian.ac.uk/news/raspberrypi-216.html">A Taste Of Raspberry Pi!</a>”</p>
<p>I’m currently helping a Manchester school put together a Python programming course, based again around the Raspberry Pi. The whole STEM experience is rewarding and fun in equal measure. While I haven’t any spare time for a CodeClub club at the moment, I’m so glad I volunteered, as I probably wouldn’t have discovered STEM otherwise. I’m in contact with other CodeClub volunteers in Manchester – we’re having a meetup later this month, and haven’t ruled it out. But for now, there’s plenty to do as a STEM Ambassador. Thanks CodeClub!</p>
<p></p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>The Silent Club and Recharging Alone</title>
      <link href="https://qmacro.org/blog/posts/2012/11/25/the-silent-club-and-recharging-alone/"/>
      <updated>2012-11-25T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2012/11/25/the-silent-club-and-recharging-alone/</id>
      <content type="html">
        <![CDATA[
      <p>A month back, <a href="http://twitter.com/hubmum">Emma Mulqueeny</a> <a href="http://mulqueeny.wordpress.com/2012/10/24/the-silent-club/">wrote about her Silent Club</a>. It’s not really a club – there is no explicit membership to speak of, there are no meetings, there isn’t even a website (although there is a Tumblr blog – more on that later). So what’s it all about? It’s about a loosely coupled collection of individuals who find strength in being quiet on their own for a while. Emma talks of finding a quiet spot amidst the hustle and bustle of Waterloo station. I can see exactly what she means – it’s almost as if the chaos and noise from the station make for an even greater contrast to her silent and solitary thoughts, enhancing the effect.</p>
<p>Go back about a year, and I was learning from my friend and <a href="http://scn.sap.com/community/sap-mentors">SAP Mentor</a> colleague, the ever erudite <a href="http://twitter.com/thorstenster">Thorsten Franz</a>, about <a href="http://www.myersbriggs.org/my-mbti-personality-type/mbti-basics/">MBTI</a> types. In particular, I was trying to figure out the real difference between I (introvert) and E (extrovert) types. In one sentence, Thorsten made it really clear for me, and I’ve remembered the test ever since. He said “Do you recharge alone, or in a group?” That nailed it. For me, if I have a day where I can’t get a quiet moment or three to myself to sort through my thoughts, I feel unbalanced, and the chaos and randomness of the day remains, rather than gets a chance to find the channel to flow evenly away. Yes, I’m happy in a crowd, happy presenting and waving my arms about. But I value time to myself and it’s that time that I need to recharge.</p>
<p>So I can completely understand the reasons for the Silent Club. Emma has gone one step further than the recharging event, by making it possible, but not mandatory, to wrap one’s thoughts up into a short letter or postcard which can be sent to a PO box address, where she will scan them and publish them at <a href="http://thesilentclub.tumblr.com">http://thesilentclub.tumblr.com</a>. If you’re the sort of person who values drawing a line under your thoughts, or need to have a specific end to the recharge cycle, then this sounds ideal.</p>
<p>I guess I can say that I’ve been a practising member of the Silent Club for a while, I just didn’t know it. So thank you Emma for forming something so neat, simple and well-formed around a subject that is close to my heart.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Review of Norwegian Wood from Haandbryggeriet</title>
      <link href="https://qmacro.org/blog/posts/2012/08/30/review-of-norwegian-wood-from-haandbryggeriet/"/>
      <updated>2012-08-30T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2012/08/30/review-of-norwegian-wood-from-haandbryggeriet/</id>
      <content type="html">
        <![CDATA[
      <p><img src="/images/2012/08/norwegian-wood.jpg" alt="Norwegian Wood"></p>
<p>Haandbryggeriet – what a mouthful, and we haven't even got to the name of the brew yet! Actually, when you break it down, this name is from two Norwegian words and simply translates to &quot;Hand Brewery&quot; – in other words, an extremely small scale operation. Four guys, working on a voluntary basis, brewing by hand in a small building in Drammen, southwest of Oslo. At this scale, and with the enthusiasm that oozes from the pages of their modest <a href="http://haandbryggeriet.net/">website</a>, it's clear that the brewers are fantastic amateurs, in the original, complimentary sense of the word – working the brewery for the love of it. (If you're curious about this reclaiming of the word ‘amateur', read Paul Graham's essay &quot;What Business Can Learn From Open Source&quot; here: <a href="http://paulgraham.com/opensource.html">http://paulgraham.com/opensource.html</a>.)</p>
<p>For a small operation, Haandbryggeriet has certainly produced a wide range of beers – from a wheat stout called &quot;Dark Force&quot;, through an Akevitt barrel aged porter, to a hop-free Gruit beer made with herbs, brewed as a guest beer in cooperation with the de Molen bewery.</p>
<p>Norwegian Wood is a Haandbryggeriet beer available at Port Street Beer House on tap, and is brewed all year round. It's a traditional Norwegian beer that has been recreated in memory of the farm brews that abounded when old laws required them to produce ale (farms were sometimes confiscated and went to the church and the king if they didn't). In fulfilling their requirements, the farms usually kilned the malt over an open fire, giving each brew a smokiness that has been recreated here. The brew was enhanced with the traditional spice for all Norwegian beer at the time – juniper. The juniper spice comes not only from the berries themselves, but also from the twigs that are placed in the mash tun.</p>
<p>So many miles and years away from these traditional Norwegian farms, I sit here with a serving of Norwegian Wood. As I observe the hazy copper colour and the fading creamy head, there's an intense aroma of pine and smokiness. Not an unpleasant or strong smokiness, but something more subtle, akin to pipe tobacco. There's a taste of pine and a hint of cooked juniper berries, and rather than smoky, the flavour is more nutty and slightly sticky sweet, with an undercurrent of charcoal or cinder. The first sips also had a fruitiness about them but towards the bottom of the glass this had been replaced with a decent hint of malt that was very pleasant.</p>
<p>Haandbryggereit brews Norwegian Wood with smoked malt from Germany, along with other malts including crystal and chocolate. There's a wealth of aromas and flavours in a small glass of this traditional ale, and the smokiness is by no means the dominant feature. I wouldn't describe myself as a fan of smoked beer in the classic &quot;Rauchbier&quot; sense, but I definitely would order this again. With pine, hazelnuts, juniper and cinder in there, this beer is not only a mouthful to pronounce, but a very pleasant mouthful to enjoy.</p>
<br />
<ul>
<li>Brewer: Haandbryggeriet</li>
<li>Brew: Norwegian Wood</li>
<li>Style: Traditional Ale</li>
<li>ABV: 6.5%</li>
</ul>
<hr>
<p><a href="https://www.portstreetbeerhouse.co.uk/blog/review-haandbryggeriet-norwegian-wood-by-dj-adams">Originally published on the Port Street Beer House website</a></p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Recent Interests</title>
      <link href="https://qmacro.org/blog/posts/2012/08/03/recent-interests/"/>
      <updated>2012-08-03T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2012/08/03/recent-interests/</id>
      <content type="html">
        <![CDATA[
      <p>I fed the latest posts from this weblog to Wordle and this is what it came up with as a representation of my recent interests.</p>
<p><a href="http://www.wordle.net/show/wrdl/5540152/My_Recent_Interests" title="Wordle: My Recent Interests"><img src="http://www.wordle.net/thumb/wrdl/5540152/My_Recent_Interests" alt="Wordle: My Recent Interests"></a></p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Serial interest in the Raspberry Pi</title>
      <link href="https://qmacro.org/blog/posts/2012/07/15/serial-interest-in-the-raspberry-pi/"/>
      <updated>2012-07-15T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2012/07/15/serial-interest-in-the-raspberry-pi/</id>
      <content type="html">
        <![CDATA[
      <p><a href="http://jcla1.com">Joseph</a> and I took delivery of our <a href="http://raspberrypi.org">Raspberry Pi</a> earlier this year, and today attended the <a href="http://madlab.org.uk/content/manchester-raspberry-jam/">Manchester Raspberry Jam</a> held at <a href="http://madlab.org.uk">Madlab</a>, a group of Raspberry Pi enthusiasts getting together to share experiences of this micro computer that seems to have re-kindled the hacking passion of 30 years ago. I say 30 years ago because the last time I remember this sort of passion and interest was when I used to attend a local computer club, where members showed their latest hardware and software projects based on micros like the <a href="/blog/posts/2005/11/26/acorn-atom-and-my-start-in-computing/">Acorn Atom</a> and others of that era. Home-made cases, low-level programming and soldering were the norm, and are the norm again.</p>
<p>One of my interests is retrocomputing, in particular, serial terminals. I had a great collection of them a while ago (VT320s, VT330+s, VT420s, and various Wyse models) all connected to multiple serial ports in the back of a Linux box (the serial signals actually running over Cat5 and re-converted at the patch-panel end, but that’s another story). Sadly I no longer have any of these terminals (another story again) but my friend <a href="http://se71.org">Robert Shiels</a> recently donated a <a href="https://twitter.com/qmacro/status/221552947266453505">Wyse WY-30</a> to me. Joseph and I decided to bring it along to the Raspberry Jam and do a show-n-tell on connecting it up to the Pi. The ultimate goal is to have a standalone serial terminal, good looking enough and retro enough to have in the living room, with a Raspberry Pi actually inside it, with a serial cable connection to connect, and a wifi adapter to hop on to the local network and from then on to the Internet. A silent, 80×24 green screen connection to life, the universe and everything.</p>
<p><strong>Making the serial connection</strong></p>
<p><img src="/images/2012/07/20120715_1050171-1024x768.jpg" alt="Raspberry Pi"></p>
<p>First things first. The Pi has 2 rows of general purpose input / output (GPIO) pins at 3.3V (top left in the picture), but that means that we can’t use an RS232 serial connection directly as the voltage levels are too high. Rather than build or buy a converter, we used a simpler method. Most modern Linux distributions, including Debian Squeeze, provide support for USB serial ports, so getting hold of a USB serial cable was the first job. This connects to one of the USB ports on the Pi, and has a 9 pin D serial connector on the other end.</p>
<p>Booting up the Pi with the USB serial cable connection shows this:</p>
<pre><code>raspberrypi kernel: usbserial: USB Serial Driver core
raspberrypi kernel: USB Serial support registered for pl2303
raspberrypi kernel: pl2303 1-1.3:1.0: pl2303 converter detected
raspberrypi kernel: usb 1-1.3: pl2303 converter now attached to ttyUSB0
</code></pre>
<p>Aha! ttyUSB0. This means we have a device handle that we can use.</p>
<p>Connecting the USB serial cable to the terminal won’t work directly; we need to have the RX and TX connections reversed (so that RX sends to TX and vice versa). A handy null-modem cable will sort this out for us. So at this point we have Pi USB -&gt; serial connector -&gt; null-modem cable -&gt; terminal.</p>
<p><strong>Getting the login prompt</strong></p>
<p>Connecting the terminal to the USB serial port is one thing; getting a login prompt on it requires more work. This is where the lowly ‘getty’ (from ‘get teletype’) program comes in. Getty is from a long-gone era of physical teletypes and text terminals, and is used to manage these terminals by listening for a connection, displaying a login prompt, and running the login program to authenticate a user.</p>
<p>Getty needs to know a few things: what serial port to listen for a connection on, what speed the connection is expected to be at, and what terminal type the remote terminal is.</p>
<p>The invocation of getty we will use (as root) is this:</p>
<pre><code>/sbin/agetty -L ttyUSB0 19200 wy30
</code></pre>
<p>(I’m actually using agetty here, an alternative getty program with some useful extra features).</p>
<p>This says: listen on ttyUSB0 for a connection, at baud rate 19200, don’t bother with carrier detect (i.e. force the line to be local), and set the terminal type to be wy30.</p>
<p>If you’ve got the serial cable connection right, and you’ve configured the terminal settings to be 19200 (at 8N1, i.e. 8 bits, no parity, 1 stop bit), you should see this on the terminal:</p>
<p><img src="/images/2012/07/IMG_20120708_131014.jpg" alt="Login prompt on the WY-30"></p>
<p>Wonderful!</p>
<p>One thing you probably want is to have getty listen out for a serial terminal connection all the time, from boot. To do this, add a line to /etc/inittab like this:</p>
<pre><code>T0:23:respawn:/sbin/agetty -L ttyUSB0 19200 wy30
</code></pre>
<p>This means you can disconnect and reconnect on your terminal at will.</p>
<p><strong>Adapting the terminal settings</strong></p>
<p>Arguably the most common terminal standard is VT100. This came from the DEC terminals of yore, and through popularity became the de facto standard that OEM terminals emulated, and it’s what software terminals such as <a href="http://www.chiark.greenend.org.uk/~sgtatham/putty/">PuTTY</a> will emulate for you too. The Wyse WY-30 that we have has a terminal standard, or ‘personality’ which is ‘WY30+’. It will also emulate TVI910+, TVI925 and ADDS A2. Not a VT100. So that’s why we specify ‘wy30′ on the getty invocation.</p>
<p>But that specification won’t work unless the Pi knows how to speak WY30, and for that, the terminfo database is used. Terminfo is a library of escape sequences for manipulating display terminals. Moving the cursor around, clearing the screen, that sort of thing. Termcap is a similar library that predates terminfo.</p>
<p>The Debian Squeeze distribution that was put together for the Pi doesn’t include the terminfo database, but a quick apt-get invocation later, and we have it:</p>
<pre><code>sudo apt-get install ncurses-term
</code></pre>
<p>Now we have the wy30 entry in the database, as a file ‘wy30′ in /usr/share/terminfo/w/.</p>
<p>With the file containing the appropriate escape codes to control a Wyse WY-30 terminal available in terminfo, and the specification of ‘wy30′ in the getty call, we have all we need to start a productive session on the serially attached terminal.</p>
<p>Rebooting to check that the init spawning of getty is working correctly, and we can log in at our Wyse terminal and use tools such as top, vim, tmux and others that manipulate the screen, without problem.</p>
<p><img src="/images/2012/07/20120715_105411.jpg" alt="Vim running in a tmux session"></p>
<p>Success!</p>
<p></p>
<p></p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>SAPUI5 - the future direction of SAP UI development?</title>
      <link href="https://qmacro.org/blog/posts/2012/05/07/sapui5-the-future-direction-of-sap-ui-development/"/>
      <updated>2012-05-07T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2012/05/07/sapui5-the-future-direction-of-sap-ui-development/</id>
      <content type="html">
        <![CDATA[
      <p><em>Update: Things in the SAPUI5 world have certainly moved on since I wrote this introductory article over 18 months ago, and all for the better. SAPUI5 is here to stay. It powers the SAP Fiori application sets, has been a tremendous success for such a new UI framework (and paradigm at SAP). What’s more - this month SAPUI5 has been open sourced, after much pressure and desire from developers internal and external alike.</em></p>
<p><em>So to find out more about this framework that's been maturing for those 18 months, have a look at the <a href="https://openui5.hana.ondemand.com/topic/Documentation">DemoKit</a>, the <a href="https://web.archive.org/web/20171111195537/http://scn.sap.com/community/developer-center/front-end/blog/2013/12/11/what-is-openui5-sapui5">post announcing that SAPUI5 was going open source (OpenUI5)</a>, and the <a href="https://web.archive.org/web/20171111195537/http://sap.github.io/openui5/">OpenUI5 home page</a>. The developers amongst you ought to visit <a href="https://web.archive.org/web/20171111195537/http://scn.sap.com/community/developer-center/front-end">SAPUI5’s home on the SAP Community Network</a>, where you'll find lots of content such as a series of posts from me covering an in-depth analysis and re-write of an SAPUI5 application: <a href="https://web.archive.org/web/20171111195537/http://scn.sap.com/community/developer-center/front-end/blog/2013/10/16/mobile-dev-course-w3u3-rewrite--intro">Mobile Dev Course W3U3 Rewrite</a>.</em></p>
<p><em>But don’t go there just yet – have a read of this post, which will put SAPUI5 into context for you.</em></p>
<p>Heard of SAP's &quot;User Interface Development Toolkit for HTML5&quot;? No? Thought not. How about &quot;SAPUI5&quot;? Ah, that's more like it.</p>
<p>SAP's User Interface Development Toolkit for HTML5 - aka SAPUI5 - is a very recent offering from SAP that, despite being an absolute mouthful when you use its official product name, is something that I suspect we will be hearing a lot more about in the next 12 months.</p>
<h2>The SAP UI experience</h2>
<p>When you think of the SAP user interface experience, what comes to mind? The venerable SAPGUI? The edgy NetWeaver Business Client? Some browser-based but ultimately and unmistakeably SAP flavoured HTML experience? For many of us, it's &quot;all of the above&quot;. When you consider all of these approaches, and the technologies that power them, there's a single theme that emerges: the theme of &quot;Inside-Out&quot;. Classic dynpros, WebDynpro for Java, WebDynpro for ABAP, Business Server Pages and (gasp) home-brew solutions based on a custom set of templates are all technologies where the user experience is designed, built and pushed out from the inside of an SAP system, and exposed to the outside in the last-mile of user connectivity. That's served us well, but there's a sea-change ahead.</p>
<h2>From inside-out to outside-in</h2>
<p><em>&quot;SAPUI5 supports application developers in creating fast and easy User Interface Applications based on HTML5 and JavaScript.&quot;</em></p>
<p>That's from the SAPUI5 homepage on SAP's Developer Centre. I'll translate, and add an observation that may go otherwise unnoticed: SAPUI5 is a framework and a series of libraries that front-end developers can use to build compelling, non-clunky (but still SAP-focused) genuine HTML5-based applications. It's a framework that embraces (well, includes, actually) the ever popular jQuery, and has more UI controls than you can shake a stick at. It has a core UI layout called the &quot;Shell&quot; which is an implementation of what we might traditionally call a dynpro frame, a sort of meta-component which is as good-looking as it is flexible and adaptable.</p>
<p>So what might go unnoticed? The fact that this is SAP's first major UI venture which adopts - by design - an &quot;Outside-In&quot; approach.</p>
<h2>What does that mean, and why is it significant?</h2>
<p>Outside-In? What does that mean? It means that rather than have your UI construction weighed down and otherwise restricted by unnecessary, irrelevant and somewhat proprietary tech in the SAP system, you can approach your new applications with a fresh, unfettered and ultimately independent flexibility. Build your applications in the context of today's UI runtimes (i.e. build in HTML5 for the browser), and support your applications with data and functionality in your backend SAP systems as and when required. Build from the outside, and connect into SAP when appropriate.</p>
<p>What else does that mean? It means for SAP the ability to reach out to the otherwise non-SAP developers out there, the myriad mobile &amp; desktop app-shop developer teams that are experts in constructing solid and user-focused applications. If SAP are to get anywhere near attaining the goal of reaching one billion users, then this is an approach that becomes absolutely necessary.</p>
<p>Last year I attended SAP TechEd in Madrid, and this year I had the privilege of giving a session at SAP's internal Developer Kick-Off Meeting (DKOM) in Karlsruhe, Germany. What I observed at both events was that in the majority of presentations and sessions that I attended, SAPUI5 was being used for the presentation layer. It seems already to have become the &quot;goto UI framework&quot; for SAP development. And why not? It's exactly the right approach, allowing front-end and back-end developers to shine. And if you're both, then that's ok too - as the SAPUI5 framework is relatively easy to get to grips with, especially if you have already had exposure to modern client-side JavaScript programming.</p>
<p>Finally, the significance is exponentially enhanced by the fact that out of the box, SAPUI5 supports data bindings for raw XML, JSON ... and OData. And we all know what that means, right? As the maturing lingua franca of SAP's API landscape, SAP NetWeaver Gateway's support of OData as the data-centric consumption protocol becomes a powerful ally of a UI framework built with the right focus from the get-go. The blog post</p>
<p><a href="https://blogs.sap.com/2012/02/13/sapui5-says-hello-odata-to-netweaver-gateway/">SAPUI5 says 'Hello OData' to NetWeaver Gateway</a> on the SAP Community Network shows how easy consumption of Gateway-exposed OData can be from SAPUI5.</p>
<h2>So what's the catch?</h2>
<p>SAPUI5 is in early beta. It was released (Beta runtime 1.2.0) on the SAP Developer Network on 8th Feb this year as a standalone package for trial. As betas go, this release is extremely impressive. Tons of documentation, interactive examples, and a very complete set of components. So complete in fact that the biggest criticism so far seems to be that the framework is rather large. That's partly because none of the code has been minified (automatically re-written to be a lot more compact - something very typical in the browser-based JavaScript world where network latency and bandwidth are significant factors).</p>
<p>The next release is scheduled to be bundled as part of SAP's Platform-as-a-Service (PaaS) offering codenamed &quot;Neo&quot;. There will be a standalone product, but the focus is on Neo first. They are still working on a mobile version, and there's no date for that yet.</p>
<p>So if you're looking at SAPUI5 for your future user interface requirements, you're on the right track, but are going to be an early adopter.</p>
<h2>Final thoughts</h2>
<p>SAPUI5 is here already, and among the early adopters in the wider SAP geek community, it is receiving significant (and deserved) attention. What's more, the product team behind it is approaching the framework's growth in exactly the right way - by actively engaging the developers. It's early days, but I totally applaud SAP's direction and efforts thus far. If you're interested in rapid deployment of prototype, ad-hoc and full blown productive apps powered by your timeless SAP infrastructure, keep an eye on SAPUI5.</p>
<hr>
<p><a href="https://web.archive.org/web/20171111195537/http://www.bluefinsolutions.com/insights/dj-adams/january-2014/sapui5-the-future-direction-of-sap-ui-developmen">Originally published on the Bluefin Solutions website</a></p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Two tools for Gateway trial host nplhost</title>
      <link href="https://qmacro.org/blog/posts/2012/04/17/two-tools-for-gateway-trial-host-nplhost/"/>
      <updated>2012-04-17T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2012/04/17/two-tools-for-gateway-trial-host-nplhost/</id>
      <content type="html">
        <![CDATA[
      <p>The <a href="http://scn.sap.com/community/netweaver-gateway">SAP NetWeaver Gateway</a> trial system is a great way to get your hands on all that OData and HTTP goodness. There are a couple of tools that I find myself re-installing when I build a new copy of the VM + trial – multitail and screen.</p>
<p><a href="http://www.vanheusden.com/multitail/">Multitail</a> is something I mentioned on my <a href="/undefined/">Enterprise Geeks slot with Craig Cmehil</a> and allows you to tail more than one file at once. Very useful for keeping an eye on all those log files in the instance work directory!</p>
<p>And <a href="http://en.wikipedia.org/wiki/GNU_Screen">screen</a> is one of those great utilities that I put in the same class as putty and vim: absolutely essential. It allows you to maintain multiple persistent sessions on a remote *nix host. Great for disconnecting and reconnecting (especially on dodgy ‘net connections) and being able to continue exactly where you left off.</p>
<p>I realised that people might benefit from these too, so I thought I’d offer them for you to download in binary form, so you can avoid going through the hassle of firing up the package manager and wrestling with repositories and dependencies, or building from source. I built them from source on an 64bit SUSE Linux VM ‘nplhost’ straight from SAP, so they should work if you’re using the same as the standard VM recommended for the trial. If you’ve decided on a Windows VM to run Gateway, then you’re out of luck, in more ways than one :-)</p>
<p>They’re available here: <a href="http://www.pipetree.com/~dj/2012/04/nplhost/">http://www.pipetree.com/~dj/2012/04/nplhost/</a></p>
<p><img src="/images/2012/04/nplhost.png" alt="image"></p>
<p>Download them to npladm’s home directory to run them from there. Don’t forget to (a) chmod +x each of the binaries, and (b) rename the _ to .  for each of the dotfiles.</p>
<p>Share and enjoy!</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>On Enterprise Geeks Podcast</title>
      <link href="https://qmacro.org/blog/posts/2012/04/16/on-enterprise-geeks-podcast/"/>
      <updated>2012-04-16T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2012/04/16/on-enterprise-geeks-podcast/</id>
      <content type="html">
        <![CDATA[
      <p>Last month at SAP DKOM, where I rediscovered <a href="/blog/posts/2012/04/01/the-developer-connection-connect-like-never-before/">SAP’s Developer Connection</a>, I bumped into an old friend, <a href="https://wiki.sdn.sap.com/wiki/display/profile/Craig+Cmehil">Craig Cmehil</a>. Craig is one part of the <a href="http://enterprisegeeks.com/blog/about/">Enterprise Geeks</a>, a loose collective of geeks and hackers whose friendships were formed in the SAP space. The Enterprise Geeks are famous for their podcasts, and I was very honoured to be a guest on that very show.</p>
<p>Here’s the post: “<a href="http://enterprisegeeks.com/blog/2012/04/16/dj-adams-and-a-trip-down-technology-lane/">DJ Adams and a trip down technology lane</a>“. If you’re after the audio file directly, it’s <a href="http://enterprisegeeks.com/blog/podcasts/eGeeks_DJAdams_March_2012.m4a">here</a>.</p>
<p>I had a lot of fun. Thanks Craig!</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Firebase and SAPUI5</title>
      <link href="https://qmacro.org/blog/posts/2012/04/15/firebase-and-sapui5/"/>
      <updated>2012-04-15T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2012/04/15/firebase-and-sapui5/</id>
      <content type="html">
        <![CDATA[
      <p>I took a look at <a href="http://www.firebase.com">Firebase</a> this weekend, approaching it within the context of the relatively new concept of “backend as a service” (BaaS) as exemplified by <a href="http://parse.com">Parse</a> and others. Add server-side storage to your HTML application. Parse has a focus on the mobile app platform, whereas Firebase is a more generalised service. But that’s not the only difference.</p>
<p><strong>Everything is a resource</strong></p>
<p>There’s an idea that has been a long time in gestation – the idea of a loose coupling of data storage, front end apps, and backend command line environments. Firebase, an offering still in beta, <a href="http://www.firebase.com/faq.html">with some features pending</a>, has come along and seems to be delivering that. With style. Style not only in the actual UX, but in the design approach. In a recent talk on <a href="http://scn.sap.com/community/netweaver-gateway">SAP NetWeaver Gateway</a> at the SAP Developers Kick-Off Meeting (<a href="http://www.youtube.com/watch?v=6Opmj8M_tBw">DKOM</a>) in Karlsruhe, I had a slide that simply said:</p>
<blockquote>
<p>Everything is a resource</p>
</blockquote>
<p>This is a key tenet that underpins the values of REST and related directions in information architecture: that if a piece of data (or, indirectly, a business function, for that matter) is important, you should give it a name, an address – <a href="/blog/posts/2009/06/29/information-vs-behaviour/">make it a first class citizen on the web</a>. From there, everything else follows. You can manipulate it, you can describe it, and you can link to it.</p>
<p>With Firebase, each piece of JSON data you store in the backend gets its own URL. Each object, array, element and attribute is automatically given an address, as you create them. You can manipulate the data via the <a href="http://www.firebase.com/docs/">Javascript library</a>, through a <a href="http://www.firebase.com/docs/rest-api.html">REST API</a> and also through a lovely graphical debugger that looks like this:</p>
<div class="wp-caption alignnone" id="attachment_1401" style="width: 310px">![image](/images/2012/04/FirebaseGraphicalDebugger.png)Firebase Graphical Debugger
</div>**Firebase Graphical Debugger**
<p>With the debugger you can manipulate the data directly too. What I’m guessing, through the way that the Debugger operates, is that the Debugger itself is powered by Firebase. When data in the data set that you’re viewing is changed – whether that change is initiated via the REST API or activity in a Firebase-powered application, the view in the debugger is automatically updated to show that change.</p>
<p><strong>Event system</strong></p>
<p>Which brings me on to the other part of Firebase that’s important – the event system. Reading data from Firebase in your Javascript application is done by attaching asynchronous callbacks to a data location. These callbacks are triggered on data events like ‘value’, ‘child_added’, ‘child_changed’ and so on. So a very simple setup to be able to show when a new record was added to a dataset would be as simple as:</p>
<ul>
<li>Instantiating a new Firebase object, pointing to the URL of the data set</li>
<li>Associating a callback function to the ‘child_added’ event, to receive, unpack and use the new record</li>
</ul>
<p>Like this:</p>
<pre><code>var dataRef = new Firebase('http://demo.firebase.com/[...]299148/[...]QULZ4snBB/');
dataRef.on('child_added', function(snapshot) { var data = snapshot.val(); // ... }
</code></pre>
<p><strong>Screencast: Stupid Firebase and SAPUI5 Tricks</strong></p>
<p>On Saturday evening I had a little hack around, and found developing with Firebase fun as well as interesting. I put together a little screencast “<a href="http://www.youtube.com/watch?v=Obh2LW7CCKY">Stupid Firebase and SAPUI5 tricks</a>“. I have been investigating the <a href="http://www.sdn.sap.com/irj/sdn/index?rid=/webcontent/uuid/20a34ae7-762d-2f10-c994-db2e898d5f70">SAP UI Development Toolkit for HTML5</a> (aka SAPUI5) for a short while now, and thought it would be an interesting exercise to hook up some data events powered by Firebase with an SAPUI5 <a href="http://www.pipetree.com/~dj/sapui5/demokit/#docs/api/symbols/sap.ui.table.DataTable.html">DataTable</a>. And throw my favourite environment – the Unix command line – into the mix too.</p>
<iframe allowfullscreen="" frameborder="0" height="315" src="http://www.youtube.com/embed/Obh2LW7CCKY" width="560"></iframe>  
    
 As I didn’t speak over the screencast, I thought I’d provide an annotation here.
<ol>
<li>We start out with a view of the Firebase Graphical Debugger showing a data set at a given URL. The data set contains a number of nodes, each node has an identifier which is used in forming that node’s unique URL</li>
<li>On the Unix command line, I use <a href="http://curl.haxx.se">cURL</a> – a great command line HTTP client – to effectively remove the data, by making an HTTP PUT to the data set’s URL, supplying an empty JSON stucture as the payload. As you can see, the data disappeared immediately in the Graphical Debugger, as the event triggered the Javascript function to remove the data from the display to reflect the snapshot stored at the backend</li>
<li>A simple SAPUI5 DataTable is revealed in another window, empty, with three columns for some data we’re going to see appear there; data based on the standard Apache access log (source IP address, relative path of URL requested, and status code)</li>
<li>We go back to the Unix command line, and use a combination of tail, perl and some core bash shell features to pull some data out of my web server’s access log, turn it into JSON, and make HTTP POST requests to the data set stored by Firebase</li>
<li>Before we actually complete and execute that command pipeline, we have a quick look at the SAPUI5 and Firebase Javascript behind the DataTable, showing the relationship between the DataTable fields and what we’re expecting in the ‘child_added’ Firebase data event</li>
<li>Finally we execute the command pipeline and see immediately that not only the Graphical Debugger is updated to show the records that were added to the data set at that URL, but also the DataTable receives the data as intended.</li>
</ol>
<p>There really is little merit in this experiment; what was important for me was to see Firebase in action, and to learn something about the philosophy of the framework. I really liked what I’ve seen so far.</p>
<p>As I mentioned at the start, there are some features still missing from Firebase – most notably security. So you’re completely at liberty right now to read those URLs from the screencast and start hacking with my demo data. But why do that? Better to get yourself down to the <a href="http://www.firebase.com/tutorial/">Firebase tutorial pages</a> and build some samples for yourself.</p>
<p>Share and enjoy!</p>
<p></p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>The Developer Connection: Connect Like Never Before</title>
      <link href="https://qmacro.org/blog/posts/2012/04/01/the-developer-connection:-connect-like-never-before/"/>
      <updated>2012-04-01T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2012/04/01/the-developer-connection:-connect-like-never-before/</id>
      <content type="html">
        <![CDATA[
      <p>At SAP TechEd Madrid (November last year) I wrote about the <a href="/blog/posts/2011/11/10/the-developer-renaissance/">Developer Renaissance</a>, covering my interview with Aiaz Kazi from the Technology &amp; Innovation Platform, and SAP’s re-focus on developers.</p>
<p>This week I had the great honour of being invited to, and <a href="http://www.flickr.com/photos/finnern/6880455744/">speaking at</a> SAP <a href="http://www.youtube.com/watch?v=6Opmj8M_tBw">DKOM</a> (Development Kick-Off Meeting) in Karlsruhe. It was a truly great event – thousands of SAP developers attending many tracks and sessions on everything from Analytics, through Database &amp; Technology, to Cloud, and more besides. As I sit here in Frankfurt airport on my way home, I’ve been reflecting on perhaps the best single takeaway from this event. Yes the content of the talks was great (and I enjoyed giving my session on SAP NetWeaver Gateway too). Yes the venue and organisation was second to none. Yes it was great to see the SAP Mentor wolfpack and our illustrious leader Mark Finnern.</p>
<p>But most of all, I saw, felt, and experienced something that I last remember from over 20 years ago in my SAP career: <em>The Developer Connection</em>.</p>
<p>Back in the day, when I was (more) innocent, certainly a lot younger, and waist-deep in IBM mainframe tech, I moved around implementing and supporting R/2 installations in the UK and Europe. Esso Petroleum in London, Deutsche Telekom in Euskirchen, and so on. In those days you could catch up with all the OSS notes on your favourite topics over a couple of coffees. Most importantly however, you had connections to the developers at SAP who were building and shipping the code that you were implementing. We knew each other’s names, and in many cases, shared phone numbers or email addresses too. There was a strong bond between customers and developers – and we worked together to make the software better.</p>
<p>That connection lost its way over the next few years, when SAP (consciously or unconsiously) built barriers between us. It became almost impossible in some cases to even find out the name of the developer or team responsible, let alone contact them directly.</p>
<p>Well – that connection is back. And better than ever before. Both at SAP TechEd Madrid, and this week at DKOM, developers were coming and saying hello. Developers who are building the great stuff we’re exploring and using, like <a href="http://www.sdn.sap.com/irj/sdn/index?rid=/webcontent/uuid/20a34ae7-762d-2f10-c994-db2e898d5f70">SAPUI5</a> and <a href="http://scn.sap.com/community/netweaver-gateway">NetWeaver Gateway</a>. People like you and me. We are connecting again. I think there are a number of reasons for this.</p>
<p>First, there’s the amazing community called the <a href="http://scn.sap.com/welcome">SAP Community Network</a> (SCN – although for me it will always be the SAP Developer Network – SDN) that brings together developers from all sources. Then there’s SAP’s re-focus on developers, and the corresponding coupling of empowerment and responsibility that SAP is giving directly to those developers. Further, there’s the inexorable turning inside out manoeuvre that SAP began a few years ago now, moving cautiously at first but now gathering pace as more and more technology directions that SAP are following are from outside the SAP universe, not inside. SAP developers naturally are connecting with the wider development community in general.</p>
<p>Whatever the reason, it’s a great sign that the future looks exciting for SAP development as a whole. Connections, collaboration and cooperation is returning. The Developer Connection is here again.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>SAPUI5 Powered SCN Forum Finder</title>
      <link href="https://qmacro.org/blog/posts/2012/03/25/sapui5-powered-scn-forum-finder/"/>
      <updated>2012-03-25T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2012/03/25/sapui5-powered-scn-forum-finder/</id>
      <content type="html">
        <![CDATA[
      <p>With the advent of the new <a href="http://www.sdn.sap.com/irj/scn">SAP Community Network</a> platform, people have been wondering where the old SDN forums have gone. To this end, there’s a very useful “<a href="http://scn.sap.com/docs/DOC-18971">Forum Finder for the New SCN</a>” which details the forum names, along with links to their new URL homes.</p>
<p>I thought it would be a nice exercise to take one of the <a href="http://www.sdn.sap.com/irj/sdn/index?rid=/webcontent/uuid/20a34ae7-762d-2f10-c994-db2e898d5f70">SAPUI5</a> controls for a spin, namely the <a href="http://www.pipetree.com/~dj/sapui5/demokit/#docs/api/symbols/sap.ui.commons.SearchField.html">SearchField</a>. It has a great many options, and wraps some jQuery functions to provide a comfortable way to expose ‘intellisense’ style results as you type. It’s over there on the right, in the sidebar.</p>
<div class="wp-caption alignnone" id="attachment_1378" style="width: 374px">![image](/images/2012/03/forumsearch1.png)SDN Forum Search
</div>From the Javascript, here’s the instantiation:
<p>var oSdnSearch = new sap.ui.commons.SearchField(&quot;sdnSearch&quot;, { startSuggestion: 2, search: function (oEvent) { var topic = oEvent.getParameter(&quot;query&quot;); window.open(oSdnAreaMap[topic], '_blank'); }, suggest: doSuggest });</p>
<p>Simple as that. I’ve pulled the SDN Forum names and URLs into an object oSdnAreaMap, and have a doSuggest() function that handles the suggest event by deriving matches and filling the search results.</p>
<p>This was a short hack started on the hotel room balcony and finished off in the airport. One thing I haven’t got to the bottom of yet is controlling the number of displayed matches. Hope to get that nailed down soon.</p>
<p><strong>Update 30 Mar 2012</strong></p>
<p>After some collaboration with <a href="http://twitter.com/esjewett">Ethan Jewett</a> I’ve put the <a href="https://github.com/qmacro/sdnforumsearch">code on github</a>, and it now also matches anywhere in the string, rather than the match being anchored at the start. Share and enjoy!</p>
<p>**<br>
**</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>New Omniversity Course Video!</title>
      <link href="https://qmacro.org/blog/posts/2012/03/15/new-omniversity-course-video!/"/>
      <updated>2012-03-15T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2012/03/15/new-omniversity-course-video!/</id>
      <content type="html">
        <![CDATA[
      <p>As I <a href="/blog/posts/2012/01/25/sap-icf-course-marketing-video/">mentioned earlier this year</a>, we were going to create a new video for my course “<a href="https://docs.google.com/document/pub?id=1lX_X95LIaNBxlOsXxO_DFxYZfz4AxGyennxMNKIaaJE">Web Programming with SAP’s Internet Communication Framework</a>” at the <a href="http://omniversity.madlab.org.uk">Omniversity</a> of Manchester at <a href="http://madlab.org.uk">Madlab</a>. And we did! Boy, was it fun. <a href="http://vimeo.com/prohyena">Maria</a>, Madlab’s semi-resident video expert injected her creative genius into the shoot and I must say, apart from the dorky looking person in the main shot, the new video is an absolute triumph. Brilliant overtones and influence from <em>2001: A Space Odyssey</em>, too. Here’s the video:</p>
<iframe allowfullscreen="" frameborder="0" height="225" mozallowfullscreen="" src="http://player.vimeo.com/video/36828893?title=0&byline=0&portrait=0" webkitallowfullscreen="" width="400"></iframe>
<p><a href="http://vimeo.com/36828893">Web Programming with SAP’s Internet Communication Framework with DJ Adams</a> from <a href="http://vimeo.com/prohyena">Prohyena</a> on <a href="http://vimeo.com">Vimeo</a>.</p>
<p>If you’re interested in attending the next instance of the course, which is in May this year, please <a href="http://s.madlab.org.uk/sap3/">sign up</a>!</p>
<p></p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Review of Red Rice Ale from Hitachino Nest</title>
      <link href="https://qmacro.org/blog/posts/2012/02/28/review-of-red-rice-ale-from-hitachino-nest/"/>
      <updated>2012-02-28T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2012/02/28/review-of-red-rice-ale-from-hitachino-nest/</id>
      <content type="html">
        <![CDATA[
      <p><img src="/images/2012/02/red-rice-ale.jpg" alt="Red Rice Ale"></p>
<p>And now for something completely different. Last week Port Street Beer House took delivery of a small number of cases of beer from the <a href="http://www.kodawari.cc/?en_home.html">Kiuchi brewery</a> based in Ibaraki-Ken, Japan. Craft beer from the USA? Check. Classic beers from Belgium and elsewhere in mainland Europe? Check. Amazing small-brewery beers from the UK? Double-check. But craft beer from Japan?</p>
<p>Beers from Japan are making an inroad into the UK via importers in Europe, Italy in particular. Port Street Beer House has heralded Hitachino Nest's arrival in Manchester by being the first establishment to stock it, in particular the Weizen, Espresso Stout, Sweet Stout, Amber Ale and the Red Rice Ale.</p>
<p>If the first word that comes to mind is ‘sake' when thinking of Japanese breweries, you're on the right track. Hitachino Nest is the main beer brand from the Kiuchi brewery, but they only started brewing beer in 1996. Over 150 years prior to that, the brewery was established by Kiuchi Gihei to brew sake from the warehouse stocks of rice collected from farmers as land tax on behalf of the dominant Mito Togugawa family in that region. After the end of the Second World War, when demand for sake increased, the Kiuchi brewery, by then under the leadership of Mikio Kiuchi, bucked the trend and remained true to quality and craftsmanship, resisting the temptation to mass-produce.</p>
<p>So, Red Rice Ale. Not as unusual as it sounds, rice is a common starch adjunct used in brewing beer, most famously (infamously?) used in Anheuser Busch's Budweiser pale ale. Adjuncts are used for a number of reasons, from cost saving measures (rice is cheaper than barley) to introducing taste, body and mouthfeel features. The addition of red rice is additionally interesting as traditionally it is regarded as ‘weedy', in other words a variety that produces fewer grains per plant than cultivated rice, and is considered a weed or a pest that grows despite, rather than because of, cultivation.</p>
<p>That the red rice starch adjunct is considered a weed becomes completely irrelevant when you consider the immensely positive impact of it's addition to the brew of this amber ale. With a pinkish pale colour and impressive soapy-white head, a light sweetness is at the heart of Red Rice Ale, with a fruity rice aroma on the nose reminiscent of rose water, and a subtle strawberry-laced experience throughout. I never thought I'd say this as something positive, but a waxy mouthfeel lends a distinctively pleasant note to the drinking experience. None of the 7.0% ABV strength is evident (except when I walk from the bar to a nearby table to write this review), and the beer is a very easy drinking experience.</p>
<p>Hitachino Nest has been established in the USA for a decade or so now, and rightly so. With its distinctive Owl logo, quality top-fermented beers and innovative techniques, it's only a matter of time until they're established over here too. Until then, get yourself down to Port Street, and see for yourself. You won't be disappointed.</p>
<br />
<ul>
<li>Brewer: Hitachino Nest</li>
<li>Brew: Red Rice Ale</li>
<li>Style: Amber Ale</li>
<li>ABV: 7.0%</li>
</ul>
<hr>
<p><a href="https://www.portstreetbeerhouse.co.uk/blog/review-hitachino-nest-red-rice-ale-by-dj-adams">Originally published on the Port Street Beer House website</a></p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>SAP ICF course marketing: video!</title>
      <link href="https://qmacro.org/blog/posts/2012/01/25/sap-icf-course-marketing:-video!/"/>
      <updated>2012-01-25T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2012/01/25/sap-icf-course-marketing:-video!/</id>
      <content type="html">
        <![CDATA[
      <p>I dropped by <a href="http://madlab.org.uk/">Madlab</a> and the <a href="http://omniversity.madlab.org.uk">Omniversity</a> yesterday evening to see <a href="http://twitter.com/hwayoung">Hwayoung </a>and <a href="http://twitter.com/davemee">Dave</a> and talk about the upcoming <a href="https://docs.google.com/document/pub?id=1lX_X95LIaNBxlOsXxO_DFxYZfz4AxGyennxMNKIaaJE">Web Programming with the SAP Internet Communication Framework</a> course in early March. (<a href="http://s.madlab.org.uk/sap2">Sign up!</a>)</p>
<p>In preparation for the previous instance of the course last year, we shot a video with yours truly explaining what the course was about and why you should attend.</p>
<iframe allowfullscreen="" frameborder="0" height="225" mozallowfullscreen="" src="http://player.vimeo.com/video/27779382?title=0&byline=0&portrait=0" webkitallowfullscreen="" width="400"></iframe>
<p><a href="http://vimeo.com/27779382">Omniversity : Web Programming with SAP’s Internet Communication Framework</a> from <a href="http://vimeo.com/madlabuk">Madlab</a> on <a href="http://vimeo.com">Vimeo</a>.</p>
<p>Madlab have their own semi-resident video expert and in the run up to the next course we’re going to shoot a new video with lots of exciting content! Well, I guess you might call it exciting if you are into SAP tech and seeing debugging activity in slow motion.</p>
<p>Anyway, watch this space – next week I’m over at Madlab again for the shoot. Perhaps I should get a haircut. Or a wig.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>On the Information Diet</title>
      <link href="https://qmacro.org/blog/posts/2012/01/03/on-the-information-diet/"/>
      <updated>2012-01-03T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2012/01/03/on-the-information-diet/</id>
      <content type="html">
        <![CDATA[
      <div><div><div><div><div><div>There seems to be a movement currently gaining momentum from the flurry of New Year resolutions, a movement on information consumption. Last week, I read about a noble and desirable goal to consume less and produce more. Consume 10%, produce 90% seemed to be the general metric. I aspire to that, but I know it’s difficult to achieve. This morning, on the train to London, the first thing I read is an article by Clay Johnson called “[How to Start Your Information Diet](http://www.informationdiet.com/blog/read/how-to-start-your-information-diet)“. There’s an accompanying [book](http://shop.oreilly.com/product/0636920019978.do), also. Notable 2.0 space luminaries such as Gina Trapani, Tim O’Reilly and Ev Williams, amongst others, are looking to go on an Information Diet. What is an Information Diet? Slightly worried that I’m doing exactly what other people are trying to avoid (consuming), and wondering whether it’s a trap, I read the article.
<div>Clay Johnson’s [Information Diet](http://www.informationdiet.com) is about reducing your consumption of information, and actively making time to produce. Resonating with the earlier goal, so far so good. The article tells you to cut down on TV viewing, and by use of certain apps and utilities, reduce the number of interruptions and temptations to divert you from producing: turning off notifications from your email system, Google+, Twitter, and the like. This is good stuff. After watching a Peepcode episode on managing your inbox (“[Control Your Email Inbox](http://peepcode.com/products/email)” – recommended), I turned off all email notifications at work, and scheduled a thrice-daily email check, rather than have myself driven to doing it by a popup, interrupting my flow. It works well.
<p>But there’s something about the general term ‘Information Diet’ that has me concerned, and has caused me to write this post (and therefore produce – win!). Yes, reduce your TV viewing (I don’t watch much anyway, and we don’t have satellite or cable). Yes, reduce your general browsing, and certainly try to move away from ‘<a href="http://en.wikipedia.org/wiki/Continuous_partial_attention">continuous partial attention</a>‘ towards ‘managed full attention’ (perhaps using <a href="http://www.pomodorotechnique.com/">Pomodoro</a> or similar techniques). But don’t treat this like a typical diet. Just like your body, your mind needs energy, and what’s more, it needs feeding. With the right sources. Don’t think you have to <em>reduce</em> your information intake. Rather, make sure that the information you consume is protein, good carbs, fibre and the like. Last year I started to exercise in earnest again, and am consuming more than before. But I’m consuming the right foods – oily fish, fruit, veg, nuts, and so on. And I’m feeling pretty healthy on it.</p>
<p>Don’t worry about consuming less. Don’t worry about <em>dieting</em>. Concern yourself about the <em>quality</em> of what you consume. I have a Kindle, and combined with <a href="http://www.instapaper.com/">Instapaper</a>, consume more excellent, stimulating, educational and thought-provoking articles than ever (here’s <a href="http://www.sdn.sap.com/irj/scn/weblogs?blog=/pub/wlg/16597">some background</a> that goes some way to explaining my reading appetite). And just as my consumption of the right foodstuffs (with exercise) has increased my health and wellbeing, so my consumption of the right infostuff has increased my knowledge, and exercised my brain. Yes, certainly aim to produce more, but look to <em>what</em> you consume, rather than how much.</p>
</div></div></div></div></div></div></div>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>The Developer Renaissance</title>
      <link href="https://qmacro.org/blog/posts/2011/11/10/the-developer-renaissance/"/>
      <updated>2011-11-10T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2011/11/10/the-developer-renaissance/</id>
      <content type="html">
        <![CDATA[
      <p>At <a href="http://www.sapteched.com/emea">SAP TechEd in Madrid</a> this year, I had the privilege of interviewing SAP’s Head of Technology &amp; Innovation Platform (TIP) Marketing,﻿ <a href="http://www.sdn.sap.com/irj/scn/weblogs?blog=/pub/u/251736460">Aiaz Kazi</a>, on the <a href="http://www.sapteched.com/online">SAP TechEd Live</a> TV channel. The interview is available <a href="http://www.sapvirtualevents.com/teched/sessiondetails.aspx?sId=841">here</a>.</p>
<p>His team has an enormous scope, covering Mobile, In-Memory, On-Demand, HANA and more. While the word “Marketing” might be auto-filtered by a techie’s radar-filter, what became clear very quickly is that this group is totally developer focused. His group is already building a brand-new Developer Center (<a href="/blog/posts/2011/11/08/sap-developer-center/">I wrote about this earlier this week</a>) and is focused on helping the developer help themselves. What’s more, the group is staffed with developers. I’ve not managed to find anyone in TIP yet that doesn’t have a developer background.</p>
<p><img src="/images/2011/11/interview_screengrab-300x171.png" alt="DJ Adams interviews Aiaz Kazi at SAP TechEd Live 2011"></p>
<p>Hasso is reported to have said “developers are the key to success”, and of course, we all know that <a href="http://www.google.co.uk/search?gcx=c&amp;sourceid=chrome&amp;ie=UTF-8&amp;q=%22developers+are+the+new+kingmakers%22">Developers Are The New Kingmakers</a>. What becomes clear in this interview, is that there’s a re-focus on the developer in the space that spans the distance between mobile and enterprise. This re-focus is long overdue in our industry, so I applaud SAP for having the courage to lead on this. Yes, SAP will benefit because one of the keys to a successful mobile platform is a host of developers in the non traditional-SAP space. But if the message and focus builds, the developer at large will benefit even more.</p>
<p>Perhaps this is a milestone along the way to the upcoming Developer Renaissance?</p>
<p>The interview is here: <a href="http://www.sapvirtualevents.com/teched/sessiondetails.aspx?sId=841">http://www.sapvirtualevents.com/teched/sessiondetails.aspx?sId=841</a></p>
<p></p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>HTML5 @ SAP</title>
      <link href="https://qmacro.org/blog/posts/2011/11/09/html5-@-sap/"/>
      <updated>2011-11-09T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2011/11/09/html5-@-sap/</id>
      <content type="html">
        <![CDATA[
      <p>Over the years SAP has been slowly but surely turning itself inside out towards the wider, open community. Open as in open source, open protocols and open data. One facet of this long-term tanker maneuver was very evident today; I attended session EXP443 “HTML5 @ SAP”. With tens of thousands of developers across the continents, it’s no surprise to find that some group, somewhere in SAP will be working on the same technology as you are, whatever that is.</p>
<p><a href="http://www.html5rocks.com">HTML5</a> is one of those technologies. While not so much a surprise, what’s more revealing, and encouraging, is that it’s being given decent coverage at <a href="http://www.sapteched.com/emea/">SAP TechEd</a> this year. The adoption of HTML5 as the core of a new UI library (originally codenamed “Phoenix”) for app front-ends is something that has a voice here. Look at the TechEd sessions available:</p>
<ul>
<li>CD202 HTML5 for Lightweight SAP Applications</li>
<li>MOB264 Building &amp; Customising a Mobile Application Without Writing Code</li>
<li>MM220 How to Customise a Mobile Application with HTML5 and Javascript</li>
<li>EXP443 HTML5 @ SAP</li>
</ul>
<p>That’s not to say that this is breaking news – <a href="http://wiki.sdn.sap.com/wiki/display/profile/Thomas+Jung">Thomas Jung</a> (an SAP Mentor from SAP Labs) made reference to Phoenix <a href="http://www.erpexecutive.com/2011/08/next-generation-abap-development-the-erp-executive-interview/">in an interview with Jon Reed</a> a few months ago. Furthermore, in a very useful chat with SAP’s <a href="http://wiki.sdn.sap.com/wiki/display/profile/Chris+Whealy">Chris Whealy</a> on Monday after InnoJam, I got to understand more about the philosophy and approach of SAP NetWeaver Gateway’s exposure of data objects and their relationships in a way that would make <a href="http://en.wikipedia.org/wiki/HATEOAS">HATEOAS</a> pay attention. And Chris used an early version of the UI library to present the exposed data. This seems to be a common theme internally in SAP, at least.</p>
<p>So what’s the deal? In EXP443 I learned that the library is built upon <a href="http://jquery.com">jQuery</a>. So SAP are avoiding the NIH syndrome, that’s good. But there were other attendees that were questioning SAP’s decision to build Yet Another Javascript Ui Library. At the very least, the model implementation of the library’s MVC framework gives the wily Javascript hacker a head-start on using and consuming Gateway services. And in my opinion that’s the deal. Yes, we have a very nice UI library (and no, it’s not available until 2Q12, before you ask!) but we also have code that speaks the language of thousands of front-end developers on the one hand, and eases the connection to the proprietary back-end on the other.</p>
<p>SAP’s future lies with developers, and they’re embracing those developers in many different ways (the Technology &amp; Innovation Platform team is one group that is making seriously good moves in this direction — but that’s a story for another time). HTML5 adoption by SAP was most likely part of a scratching of an internal itch, but it implicitly embraces non-SAP developers in potentially far-reaching ways. Great stuff.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>SAP Developer Center</title>
      <link href="https://qmacro.org/blog/posts/2011/11/08/sap-developer-center/"/>
      <updated>2011-11-08T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2011/11/08/sap-developer-center/</id>
      <content type="html">
        <![CDATA[
      <p>At <a href="http://www.sapteched.com/emea/">SAP TechEd Madrid 2011</a> I stopped by booth 104 in the Technology Innovation area of Hall 10 after lunch and chatted to David Brutman, from SAP’s Technology and Innovation Platform Marketing. SAP already have enjoyed tremendous success in terms of takeup and social engagement with their <a href="http://www.scn.sap.com">SAP Community Network</a> (which grew from the original <a href="http://www.sdn.sap.com/">SAP Developer Network</a>) but until now, there hasn’t been a consistent place for developers to go and enjoy “Discover, Learn, Build” activities. In other words, while there has been a huge amount of two-way discussion and sharing of ideas amongst the wider developer community, the next step — to be fair, a <em>parallel</em> step — is to offer a resource centre for developers who want to Get On And Do It.</p>
<div class="wp-caption alignnone" style="width: 557px">[![](https://lh3.googleusercontent.com/--rg5nHDoWdY/TrknPWX3YcI/AAAAAAAAGAs/_MFVjCgbivs/s912/IMAG0442.jpg "David Brutman")](https://plus.google.com/u/0/photos/110526626182299357893/albums/5672256376647909457/5672645397795974882)David Brutman - Technology Platforms Developer Programs
</div>Tangible at this year’s TechEd is the explosion of concepts, tools and technologies all fighting for primary position in the finite developer mindspace. HANA, NetWeaver Gateway, SUP, and the rest. And perhaps I’m not a typical developer these days, but I’m looking for guidance: some focused documentation, some tutorials, and perhaps most importantly, a platform to try this stuff out on.
<p>Enter the SAP Developer Center (I’ll keep to the US spelling of this for consistency!) – which is pretty much exactly what I’m looking for. It’s not live yet, but when it is (we’re talking 1Q12), it looks to be a killer resource centre. Right now it’s in beta testing, specifically with HANA. Think <a href="http://code.google.com">code.google.com</a> / <a href="http://developer.google.com">developer.google.com</a> with a cloud-based offering of trial instances on demand. A go-to resource centre for building your skills in the new era of SAP’s technology platform.</p>
<p>Sounds good? I think it sounds great! Look out for it appearing as part of the SAP Community Network soon.</p>
<p><em>Update 06 Feb 2012: See the article “<a href="http://sapinsider.wispubs.com/Article/What-Would-You-Like-to-Develop-Today-/6280">What Would You Like To Develop Today?</a>” in the Jan 2012 edition of SAP Insider for more on The Developer Center.</em></p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Movember - please donate!</title>
      <link href="https://qmacro.org/blog/posts/2011/11/08/movember-please-donate!/"/>
      <updated>2011-11-08T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2011/11/08/movember-please-donate!/</id>
      <content type="html">
        <![CDATA[
      <p><img src="/images/2011/11/movember.jpg" alt="image"></p>
<p>I’m taking part in <a href="http://uk.movember.com/">Movember</a>, a fun and serious movement where moustaches are grown, ridicule is thrown, and hopefully people become more aware of men’s health in general, and prostate and testicular cancer in particular.</p>
<p><a href="/images/2011/11/movember.jpg"></a></p>
<p>The idea is that you start clean-shaven on 1st Nov, and grown your moustache through the month, raising money along the way. I have a Movember page here:</p>
<p><a href="http://mobro.co/qmacro">http://mobro.co/qmacro</a></p>
<p>Please visit and donate what you can – I’ll be very grateful, thank you!</p>
<p></p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Web Programming with SAP&#39;s ICF: new course dates</title>
      <link href="https://qmacro.org/blog/posts/2011/11/05/web-programming-with-sap&#39;s-icf:-new-course-dates/"/>
      <updated>2011-11-05T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2011/11/05/web-programming-with-sap&#39;s-icf:-new-course-dates/</id>
      <content type="html">
        <![CDATA[
      <p>I’m pleased to announce that my 2-day <a href="http://omniversity.madlab.org.uk">Omniversity</a> course <a href="https://docs.google.com/document/pub?id=1lX_X95LIaNBxlOsXxO_DFxYZfz4AxGyennxMNKIaaJE&amp;pli=1">Web Programming with SAP’s Internet Communication Framework</a> is coming up again a couple of times in the first half of next year.</p>
<p>SAP’s Internet Communication Framework (ICF) is the platform that underpins the majority of SAP’s offerings in this space, even SAP NetWeaver Gateway. This 2-day course will help you gain a detailed understanding of the framework, harness its power, and unleash your own resource orientated web service masterpieces!</p>
<p>Dates in March and May are available; follow the links to find out more and to book a place:</p>
<p><a href="http://s.madlab.org.uk/sap2">Sat 03 – Sun 04 March 2012</a></p>
<p><a href="http://s.madlab.org.uk/sap3">Wed 09 – Thu 10 May 2012</a></p>
<p><strong>Alternative Dispatcher Layer</strong></p>
<p><a href="https://docs.google.com/document/pub?id=1lX_X95LIaNBxlOsXxO_DFxYZfz4AxGyennxMNKIaaJE&amp;pli=1#h.bz5oteq9itkk">One of the topics covered in Day 2</a> on this course is the Alternative Dispatcher Layer (ADL), a lightweight alternative approach to building web applications, an approach informed and influenced by other libraries and frameworks such as the Python <a href="http://code.google.com/appengine/docs/python/tools/webapp/">webapp framework</a> in Google App Engine. Read more about the origins of ADL in this SAP Developer Network post: <a href="http://www.sdn.sap.com/irj/scn/weblogs?blog=/pub/wlg/15899">A new REST handler / dispatcher for the ICF</a>.</p>
<p>If you’re after more background, see this post from earlier this year: <a href="/blog/posts/2011/07/20/stand-steady-on-the-shoulders-of-giants/">Stand Steady on the Shoulders of Giants</a></p>
<p>Looking forward to seeing you on the course!</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Moving on ... to Bluefin Solutions</title>
      <link href="https://qmacro.org/blog/posts/2011/11/02/moving-on-...-to-bluefin-solutions/"/>
      <updated>2011-11-02T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2011/11/02/moving-on-...-to-bluefin-solutions/</id>
      <content type="html">
        <![CDATA[
      <p>Since moving back to the North West in 2005 I’ve been contracting most of the time at <a href="http://www.astrazeneca.com/Home">AstraZeneca</a>, in Macclesfield, Alderley Edge and Chorlton. I’ve been involved in a number of great projects, from invoice automation, through HCP honoraria systems, ERP integration (REST-informed, of course) and latterly the first truly global-scale travel &amp; expense system, which we now have running in 70 countries, with over 60,000 users. The integration hubs I’ve built pump tens of thousands of transactions daily through the systems, and hundreds of thousands of master data records without a murmur. I’ve hacked on SAP, Ariba and Infor systems as well as building these custom integration hubs, and I designed and built a credit card feed processing system that’s become almost self-aware.</p>
<p>Life at AstraZeneca has been great; it’s one of the friendliest places to work, the people are great, and the location and facilities are second to none. I also met my wife and theoretical childhood sweetheart <a href="www.pipetree.com/michelleadams/">Michelle</a> here. It’s not all been a bed of roses of course (nowhere is!) at times the work has been frustrating and increasingly there are too many layers between me and the code surface.</p>
<p>At heart I’m a coder and builder, driven by curiosity and the desire to learn, teach and implement.</p>
<p>So it’s with great excitement that, in January 2012, I’m joining <a href="http://www.bluefinsolutions.com/">Bluefin Solutions</a> as a permanent member of the team. I’ve known many of the gang at Bluefin for a while, and feel as though I already have a lot in common with them. I’ve spoken at the<a href="http://lanyrd.com/2010/northern-it-directors-round-table-november/"> Northern IT Directors’ Round Table</a> for them, was their first <a href="http://www.bluefinsolutions.com/insights/guest_blog/">guest blogger</a>, and have bumped into many of them during SAP orientated events from <a href="http://lanyrd.com/2009/manchester-sap-evening-november/">SAP Evenings</a> to <a href="http://lanyrd.com/2010/sapteched-berlin/">SAP TechEds</a> and beyond.</p>
<p>My official title will be “Senior SAP Development Architect” but there’s also an “Evangelist” flavour to my role, which I’ll be embracing and making my own. What attracts me to Bluefin in addition to the quality of their people is their drive, their leadership and their embrace of technology, and with that in mind, I’m really looking forward to helping research, steer and shape innovation in the Enterprise in the near future.</p>
<p>Hooray!</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Review of Milk Stout from Left Handed Brewing Co</title>
      <link href="https://qmacro.org/blog/posts/2011/10/25/review-of-milk-stout-from-left-handed-brewing-co/"/>
      <updated>2011-10-25T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2011/10/25/review-of-milk-stout-from-left-handed-brewing-co/</id>
      <content type="html">
        <![CDATA[
      <p><img src="/images/2011/10/milk-stout.png" alt="Milk Stout"></p>
<p>Sometimes you're not in the mood for what everyone else is having. That's the tagline of this Longmount, Colorado brewer Left Hand Brewing Co's <a href="http://twitter.com/lefthandbrewing">Twitter presence</a>. As I approach the bar at Port Street Beer House and observe the orders for a seemingly endless collection of beers, one bottle calls out to me from the fridge. Milk Stout. Exactly what I'm looking for. This beer's reputation precedes it; awards galore already won, most recently <a href="http://european-beer-star.com/ebs_en/gewinner/rueckblick/gewinner2008.php?navid=10">Gold in the European Beer Star Competition</a>.</p>
<p>Sunlight streams through the windows on this cold, crisp autumn day as I reverently carry the bottle and a stemmed glass to the table. This is not your father's stout. No sense of vast volumes of heavy blackness tinged with bitterness here, thank you very much. This is a full-bodied sweet stout, an English style beer from the late 19th century. Espresso coloured, with coffee traces and slight vanilla notes, this is an incredibly velvety smooth experience from start to finish. Any hints of bitterness are more than balanced from the inclusion of milk sugar, which is defined as &quot;a sugar comprising one glucose molecule linked to a galactose molecule&quot;. Galactose? Space milk? All I know is that the inclusion of milk sugar into the brew has had a fabulous effect. Sweetness and chocolate overtones make this a very enjoyable experience. Normally at this stage in the review I have some beer left in the glass, but the glass and bottle are both empty already.</p>
<p>Left Hand Brewing Co's philosophy is about <a href="http://www.lefthandbrewing.com/blog/about/">balance</a>. It's fair to say that they've achieved a great balance between traditional style and modern interpretation, between the Magnum and US Golding Hops, the myriad malts (from Crystal to Flaked Barley and Chocolate) and the milk sugar sweetness, and between the relatively high ABV content and inherent drinkability. Next time you're stuck or spoiled for choice, go for something different. Take a chance on this Milk Stout, and you'll be far from disappointed.</p>
<br />
<ul>
<li>Brewer: Left Hand Brewing Co</li>
<li>Brew: Milk Stout</li>
<li>Style: Sweet Stout</li>
<li>ABV: 6.0%</li>
</ul>
<hr>
<p><a href="https://www.portstreetbeerhouse.co.uk/blog/beer-review-milk-stout">Originally published on the Port Street Beer House website</a></p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Reading List Mark 2 - Part 5</title>
      <link href="https://qmacro.org/blog/posts/2011/10/16/reading-list-mark-2-part-5/"/>
      <updated>2011-10-16T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2011/10/16/reading-list-mark-2-part-5/</id>
      <content type="html">
        <![CDATA[
      <p>This is Part 5, the last part in a series about an example app that I put together to demonstrate and describe the use of various Google Apps Script features. See <a href="/blog/posts/2011/10/08/reading-list-mark-2-part-1/">Part 1</a> for an introduction. This part is &quot;Putting it all together and using the OnOpen event to insert a new 2-item menu entry on the spreadsheet’s page&quot;.</p>
<p><strong>Parts Overview</strong></p>
<ol>
<li><a href="/blog/posts/2011/10/08/reading-list-mark-2-part-1/">Introduction to the app, and a short screencast showing the features</a></li>
<li><a href="/blog/posts/2011/10/10/reading-list-mark-2-part-2/">Using the Tasks API to retrieve and insert tasklists, and the Ui Services to build the tasklist chooser component</a></li>
<li><a href="/blog/posts/2011/10/14/reading-list-mark-2-part-3/">Using the UrlFetch Services to interact with the Google+ API and grab info on articles pointed to by users in their activity stream</a></li>
<li><a href="/blog/posts/2011/10/15/reading-list-mark-2-part-4/">Synchronising the URL list in the spreadsheet with corresponding tasks in the chosen tasklist</a></li>
<li><a href="/blog/posts/2011/10/16/reading-list-mark-2-part-5/">Putting it all together and using the OnOpen event to insert a new 2-item menu entry on the spreadsheet’s page</a> &lt;– you are here</li>
</ol>
<p><strong>Putting it all together</strong></p>
<p>So at this stage we’ve done pretty much everything required for this example app. The final task is to extend the standard Spreadsheet menu to give the user access to the custom features of selecting a tasklist, and kicking off an update (URL pull and synchronisation). It’s very easy to extend the menu; in a few lines of code we’re going to end up with something like this:</p>
<p><img src="/images/2017/12/menu.png" alt=""></p>
<p>It’s as simple as this:</p>
<pre><code>function onOpen() { 
  var ss = SpreadsheetApp.getActiveSpreadsheet(); 
  var menuEntries = [
    {name: &quot;Update&quot;, functionName: &quot;update&quot;},
    {name: &quot;Select Task List&quot;, functionName: &quot;taskListUi&quot;}
  ]; 
  ss.addMenu(&quot;Articles&quot;, menuEntries); 
}
</code></pre>
<p>We use the <a href="http://code.google.com/googleapps/appsscript/class_spreadsheet.html#addMenu">addMenu</a>() method of the Spreadsheet class to create a new menu entry with an array of objects representing menu items. And the function name? onOpen() is one of a number of <a href="http://code.google.com/googleapps/appsscript/guide_events.html">built-in simple event handler functions</a>; this one runs automatically when a spreadsheet is opened – an ideal time to extend the menu.</p>
<p><strong>The complete script</strong></p>
<p>So we’re done with the final part! Let’s celebrate with the script in its entirety. And a beer. Cheers!</p>
<pre><code>// -------------------------------------------------------------------------
// Constants
// -------------------------------------------------------------------------
APIKEY = 'AIzaSyANY6ebMr2bi1Fzn-53kysp0y4LsbZA488';
ACTIVITYLISTURL = 'https://www.googleapis.com/plus/v1/people/{userId}/activities/{collection}';
READINGLISTCELL = 'C1';
USERIDCELL = 'D1'
USERID = '106413090159067280619'; // Mahemoff

// -------------------------------------------------------------------------
// update()
// Pulls in article links into sheet and synchronises with task list
// -------------------------------------------------------------------------
function update() {
  // First, check that we have a tasklist id already; it's stored in
  // the comment section of the 'readinglistcell'
  var sh = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();
  var taskListId = sh.getRange(READINGLISTCELL).getComment();
  // If we don't have an id, tell the user to choose a tasklist
  if(taskListId === '') {
    SpreadsheetApp.getActiveSpreadsheet().toast(
      &quot;Use Articles -&gt; Select Task List to choose a task list&quot;,
      &quot;No Task List&quot;, 
      5
    );
  // Otherwise, we know which task list to synchronise with, so
  // go and update the reading list with URLs from the Google+ activity
  // list, and then sync that with the task list items
  } else {
    retrieveActivityUrls_();
    synchronise_(taskListId); 
  }
}

// -------------------------------------------------------------------------
// taskListUi()
// Displays a Ui to allow the user to select a tasklist to manage
// the reading tasks. Can select an existing task list or create a new one
// -------------------------------------------------------------------------
function taskListUi() {
  var doc = SpreadsheetApp.getActiveSpreadsheet();
  var app = UiApp.createApplication();
  app.setTitle('Task Lists');

  // We'll have a grid and a button in this
  // vertical panel
  var panel = app.createVerticalPanel();

  // Use a listbox to display a choice of existing tasklists
  var lb = app.createListBox(false);
  lb.setName('existingList');
  var tasklists = getTasklists_();
  for (var tl in tasklists) {
    lb.addItem(tasklists[tl].getTitle());
  }  

  // Use the grid to layout the listbox, a textbox for a new list,
  // and some corresponding labels
  var grid = app.createGrid(2, 2);
  grid.setWidget(0,0, app.createLabel(&quot;Existing:&quot;));
  grid.setWidget(0,1, lb);
  grid.setWidget(1,0, app.createLabel(&quot;Or new:&quot;));
  grid.setWidget(1,1, app.createTextBox().setName('newList'));

  // The only button; handler will be linked to this button click event
  // Remember to add the grid contents to the callback context
  var button = app.createButton(&quot;Choose&quot;);  
  var chooseHandler = app.createServerClickHandler('handleChooseButton_');
  chooseHandler.addCallbackElement(grid);
  button.addClickHandler(chooseHandler);
  
  // Put it all together and show it
  panel.add(app.createLabel(&quot;Select existing or create new list&quot;));
  panel.add(grid);
  panel.add(button);
  app.add(panel);
  doc.show(app);
}  

// -------------------------------------------------------------------------
// handleChooseButton_(e)
// Handler for 'Choose' button on taskListUi Ui; creates a new task list
// if a new one has been specified; grabs the ID of the chosen task list
// and stores the task list name and id in the TASKLISTCELL
// -------------------------------------------------------------------------
function handleChooseButton_(e) {
  
  // Assume an existing list was chosen
  var selectedList = e.parameter.existingList;

  // But check for a new list being specified; if it as, create
  // a new task list
  if(e.parameter.newList != '') {
    selectedList = e.parameter.newList;
    var newTaskList = Tasks.newTaskList().setTitle(selectedList);
    Tasks.Tasklists.insert(newTaskList);
  }

  // Grab the list of tasklists, because we'll need the id
  var taskLists = getTasklists_();
  var taskListId = -1;
  for(tl in taskLists){
    if(taskLists[tl].getTitle() === selectedList) { 
      taskListId = taskLists[tl].getId();
      break;
    }
  }

  // Record the list name and id
  var sh = SpreadsheetApp.getActiveSheet();
  var cell = sh.getRange(READINGLISTCELL);
  cell.setValue(selectedList);
  cell.setComment(taskListId);

  // Close the Ui popup and display the name of the chosen list
  var app = UiApp.getActiveApplication();
  app.close();
  SpreadsheetApp.getActiveSpreadsheet().toast(selectedList, &quot;Selected List&quot;, 3);
  return app;
}

// -------------------------------------------------------------------------
// onOpen()
// Event-based function called when the spreadsheet is opened; adds items
// to the menu
// -------------------------------------------------------------------------
function onOpen() {
  var ss = SpreadsheetApp.getActiveSpreadsheet();
  var menuEntries = [ {name: &quot;Select Task List&quot;, functionName: &quot;taskListUi&quot;},
                     {name: &quot;Update&quot;, functionName: &quot;update&quot;} ];
  ss.addMenu(&quot;Articles&quot;, menuEntries);
}

// -------------------------------------------------------------------------
// getTasklists()
// Retrieve a list of the user's tasklists (uses the APIs Services)
// Note that the Tasks Services docu is not accurate here; we would
// expect to be able to use the TasklistsCollection class.
// -------------------------------------------------------------------------
function getTasklists_() {
  var tasklistsList = Tasks.Tasklists.list();
  return tasklistsList.getItems();
}

// -------------------------------------------------------------------------
// retrieveActivityUrls_()
// Use UrlFetch to retrieve a Google+ API resource: activities for a person
// Use Javascript data structures; restrict the number of API calls
// -------------------------------------------------------------------------
function retrieveActivityUrls_() {

  // Grab existing list of URLs
  var sh = SpreadsheetApp.getActiveSheet();
  var lastRow = sh.getLastRow();
  var urlList = sh.getRange(2, 1, lastRow - 1) .getValues();
  var list = {'old': {}, 'new': []};
  for (var i in urlList){
    list['old'][urlList[i]] = 1;
  }

  // Use the userid in the sheet, fallback to a favourite :)
  var userid = sh.getRange(USERIDCELL).getValue() || USERID;

  // Build Google+ API resource and retrieve it; parse JSON content
  var actListUrl = buildActivityListUrl_(userid, 'public', APIKEY);
  var jsonString = UrlFetchApp.fetch(actListUrl).getContentText()
  var activities = Utilities.jsonParse(jsonString);

  // We're looking for the item object attachments, where the 
  // attachment's objectType is 'article'. We want the url and displayName
  for (var i in activities.items) {
    var attachments = activities.items[i].object.attachments;
    for (var a in attachments) {
      var attachment = attachments[a];
      // We've got a URL and title; store it as new if it doesn't 
      // already exist. Store it as list of lists, ready for 
      // a setValues([][]) insert
      if (attachment.objectType == 'article') {
        if (! (attachment.url in list['old'])) {
          list['new'].push([attachment.url, attachment.displayName]);
        }
      }
    }    
  }

  // Blammo!
  if (list['new'].length) {
    sh.getRange(lastRow + 1, 1, list['new'].length, 2).setValues(list['new']);
  }

}


// -------------------------------------------------------------------------
// synchronise(taskListId)
// Synchronise the URLs in the spreadsheet with items in the chosen tasklist
// The task list item id for a URL is stored in the comment for that URL cell
// -------------------------------------------------------------------------
function synchronise_(taskListId) {

  // Grab list of all URLs, and associated comments
  var sh = SpreadsheetApp.getActiveSheet();
  var urlRange = sh.getRange(2, 1, sh.getLastRow() - 1, 1);
  var urls = urlRange.getValues();
  var comments = urlRange.getComments();
  
  // For each URL, check the status of the associated task.
  // If there isn't an associated task, create one.
  for (var i = 0, j = urls.length; i &lt; j; i++) {
    if (comments[i] == &quot;&quot;) {
      Logger.log(&quot;New task&quot;);
      var task = Tasks.newTask(); 
      task.setTitle(urls[i]);
      var newTask = Tasks.Tasks.insert(task, taskListId);
      sh.getRange(i + 2, 1).setComment(newTask.getId());
    } else {
      Logger.log(&quot;Existing task&quot;);
      var existingTask = Tasks.Tasks.get(taskListId, comments[i][0]);
      if (existingTask.getStatus() === &quot;completed&quot;) {
        sh.getRange(i + 2, 1, 1, 2).setFontLine('line-through');
      }
    }
  }
}

// -------------------------------------------------------------------------
// buildActivityListUrl_(userId, collection, apiKey)
// Creates a specific resource address (URL) for the public activities
// for a given person in Google+
// See https://developers.google.com/+/api/latest/activities/list
// This will be obsolete when there are direct Google+ Services for 
// Apps Script
// -------------------------------------------------------------------------
function buildActivityListUrl_(userId, collection, apiKey) {

  var actListUrl = ACTIVITYLISTURL;
  actListUrl = actListUrl.replace(/{userId}/, userId);
  actListUrl = actListUrl.replace(/{collection}/, collection);
  actListUrl = actListUrl + '?key=' + apiKey;

  return actListUrl;
}    
</code></pre>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Reading List Mark 2 - Part 4</title>
      <link href="https://qmacro.org/blog/posts/2011/10/15/reading-list-mark-2-part-4/"/>
      <updated>2011-10-15T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2011/10/15/reading-list-mark-2-part-4/</id>
      <content type="html">
        <![CDATA[
      <p>This is Part 4 in a series about an example app that I put together to demonstrate and describe the use of various Google Apps Script features. See <a href="/blog/posts/2011/10/08/reading-list-mark-2-part-1/">Part 1</a> for an introduction. This part is “<strong>Synchronising the URL list in the spreadsheet with corresponding tasks in the chosen tasklist</strong>“.</p>
<p><strong>Parts Overview</strong></p>
<ol>
<li><a href="/blog/posts/2011/10/08/reading-list-mark-2-part-1/">Introduction to the app, and a short screencast showing the features</a></li>
<li><a href="/blog/posts/2011/10/10/reading-list-mark-2-part-2/">Using the Tasks API to retrieve and insert tasklists, and the Ui Services to build the tasklist chooser component</a></li>
<li><a href="/blog/posts/2011/10/14/reading-list-mark-2-part-3/">Using the UrlFetch Services to interact with the Google+ API and grab info on articles pointed to by users in their activity stream</a></li>
<li><a href="/blog/posts/2011/10/15/reading-list-mark-2-part-4/">Synchronising the URL list in the spreadsheet with corresponding tasks in the chosen tasklist</a><strong>&lt;– You Are Here</strong></li>
<li><a href="/blog/posts/2011/10/16/reading-list-mark-2-part-5/">Putting it all together and using the OnOpen event to insert a new 2-item menu entry on the spreadsheet’s page</a></li>
</ol>
<p><strong>Putting this into context: the Update request</strong></p>
<p>We’ve covered a lot of ground in the previous three parts in this series. Now we’re at the stage where we have the functions for</p>
<ul>
<li>creating a Ui for choosing an existing / creating a new tasklist</li>
<li>handling the button event on the Ui</li>
<li>getting a list of tasklists</li>
<li>retrieving URLs from a Google+ activity stream</li>
</ul>
<p>So the one main piece of work outstanding is synchronising the retrieved URLs as tasks on the chosen tasklist.</p>
<p>If you watch the <a href="http://www.youtube.com/watch?v=F08qS8ZmlZ0">screencast</a> shown in <a href="/blog/posts/2011/10/08/reading-list-mark-2-part-1/">Part 1</a> you’ll see that the synchronisation is part of a more general ‘update’ request, that includes the fetching of new URLs from Google+ and synchronising them with the tasklist. So let’s have a look at the function that binds those two things together.</p>
<p>Here’s the update() function, which we’ll allow the user to call from a menu item (we’ll cover this in the next instalment).</p>
<p>READINGLISTCELL = 'D1'; function update() { // First, check that we have a tasklist id already; it's stored in // the comment section of the 'readinglistcell' var sh = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet(); var taskListId = sh.getRange(READINGLISTCELL).getComment(); // If we don't have an id, tell the user to choose a tasklist if(taskListId === '') { SpreadsheetApp.getActiveSpreadsheet().toast( &quot;Use Articles -&gt; Select Task List to choose a task list&quot;, &quot;No Task List&quot;, 5 ); // Otherwise, we know which task list to synchronise with, so // go and update the reading list with URLs from the Google+ activity // list, and then sync that with the task list items } else { retrieveActivityUrls_(); synchronise_(taskListId); } }</p>
<p>This function grabs a reference to the active sheet, and pulls the comment from the cell that we’ve designated as where the reading list tasklist info is stored: READINGLISTCELL. The name is stored in the cell, and the ID is stored in the cell’s comment. If there isn’t an ID, then we’ll ask the user to choose a tasklist using the Ui we built in <a href="/blog/posts/2011/10/10/reading-list-mark-2-part-2/">Part 2</a>. The <a href="http://code.google.com/googleapps/appsscript/class_browser.html">Browser</a> class in Google Apps Script’s <a href="http://code.google.com/googleapps/appsscript/service_base.html">Base Services</a> gives us a nice dialog box that looks like this:</p>
<div class="wp-caption alignnone" id="attachment_1198" style="width: 316px">![image](/images/2011/10/notamessage1.png)Message Box
</div>But there’s also a nice visual message feature that’s available in the [Spreadsheet Services](http://code.google.com/googleapps/appsscript/service_spreadsheet.html), specific to a spreadsheet: [toast()](http://code.google.com/googleapps/appsscript/class_spreadsheet.html#toast). Calling this causes a popup to appear in the lower right of the screen, which stays visible for a short while. This is what it looks like:
<div class="wp-caption alignnone" id="attachment_1177" style="width: 269px">![image](/images/2011/10/notasklist.png)Toast message
</div>Because the ‘toast’ name is so evocative, we’ll use it in our function to prompt the user to choose a tasklist.
<p>If there’s already a tasklist chosen, then we go straight into retrieving the URLs (see <a href="/blog/posts/2011/10/14/reading-list-mark-2-part-3/">Part 3</a>) and then call the synchronise_() function, passing the ID of the tasklist.</p>
<p><strong>Synchronising URLs and Tasks</strong></p>
<p>Ok, so what do we need to do to synchronise the URLs? It’s similar to the technique described in the great article “<a href="http://code.google.com/googleapps/appsscript/articles/google_apis_reading_list.html">Integrating with Google APIs – Creating a simple reading list</a>“. There are a couple of differences: I’m not going to use the <a href="http://code.google.com/googleapps/appsscript/service_urlshortener.html">UrlShortener Services</a>, and I’m going to try and reduce the number of API calls by bulk-grabbing the cell data.</p>
<p>First, we get a range reference on the active sheet, which equates to the list of URLs already there. We get all of the URLs (urlRange.getValues()) and all of the corresponding comments (urlRange.getComments()).</p>
<p>function synchronise_(taskListId) { // Grab list of all URLs, and associated comments var sh = SpreadsheetApp.getActiveSheet(); var urlRange = sh.getRange(2, 1, sh.getLastRow() - 1, 1); var urls = urlRange.getValues(); var comments = urlRange.getComments();</p>
<p>We go through each of the URLs, and create a new task in the tasklist if there isn’t already something in the comment for that URL:</p>
<ul>
<li>instantiate a new task object: Tasks.newTask()</li>
<li>add the title: task.setTitle()</li>
<li>add the task to the tasklist: Tasks.Tasks.insert()</li>
<li>insert the new task’s ID into the comment for the URL: setComment()</li>
</ul>
<p>Otherwise we’ve already created a task for the URL, so we grab the task to get the status, and if it’s marked as completed, we format the URL and corresponding description (in the next column) to set strike-through text.</p>
<p>// For each URL, check the status of the associated task. // If there isn't an associated task, create one. for (var i = 0, j = urls.length; i &lt; j; i++) { if (comments[i] == &quot;&quot;) { Logger.log(&quot;New task&quot;); var task = Tasks.newTask(); task.setTitle(urls[i]); var newTask = Tasks.Tasks.insert(task, taskListId); sh.getRange(i + 2, 1).setComment(newTask.getId()); } else { Logger.log(&quot;Existing task&quot;); var existingTask = Tasks.Tasks.get(taskListId, comments[i][0]); if (existingTask.getStatus() === &quot;completed&quot;) { sh.getRange(i + 2, 1, 1, 2).setFontLine('line-through'); } } } }</p>
<p>That’s it. Stop by next time for the last part in this series, where we put everything together and insert a 2-item menu entry to tie it all together. Thanks for reading!</p>
<p></p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Reading List Mark 2 - Part 3</title>
      <link href="https://qmacro.org/blog/posts/2011/10/14/reading-list-mark-2-part-3/"/>
      <updated>2011-10-14T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2011/10/14/reading-list-mark-2-part-3/</id>
      <content type="html">
        <![CDATA[
      <p>This is Part 3 in a series about an example app that I put together to demonstrate and describe the use of various Google Apps Script features. See <a href="/blog/posts/2011/10/08/reading-list-mark-2-part-1/">Part 1</a> for an introduction. This part is “<strong>Using the UrlFetch Services to interact with the Google+ API (after all, it’s REST-based!) and grab info on articles pointed to by users in their activity stream</strong>“.</p>
<p><strong>Parts Overview</strong></p>
<ol>
<li><a href="/blog/posts/2011/10/08/reading-list-mark-2-part-1/">Introduction to the app, and a short screencast showing the features</a></li>
<li><a href="/blog/posts/2011/10/10/reading-list-mark-2-part-2/">Using the Tasks API to retrieve and insert tasklists, and the Ui Services to build the tasklist chooser component</a></li>
<li><a href="/blog/posts/2011/10/14/reading-list-mark-2-part-3/">Using the UrlFetch Services to interact with the Google+ API and grab info on articles pointed to by users in their activity stream</a> <strong>&lt;– You Are Here</strong></li>
<li><a href="/blog/posts/2011/10/15/reading-list-mark-2-part-4/">Synchronising the URL list in the spreadsheet with corresponding tasks in the chosen tasklist</a></li>
<li><a href="/blog/posts/2011/10/16/reading-list-mark-2-part-5/">Putting it all together and using the OnOpen event to insert a new 2-item menu entry on the spreadsheet’s page</a></li>
</ol>
<p><strong>UrlFetch Services</strong></p>
<p>If you’ve ever used an HTTP client library in other contexts, you’ll be completely at home with the base classes available in the <a href="http://code.google.com/googleapps/appsscript/service_urlfetch.html">UrlFetch Services</a>. Following the <a href="http://c2.com/xp/DoTheSimplestThingThatCouldPossiblyWork.html">simplest thing that could possibly work</a> philosophy, all we need to do to fetch a resource and grab the payload is to use the UrlFetchApp class, specifically the fetch() method. It returns an <a href="http://code.google.com/googleapps/appsscript/class_httpresponse.html">HTTPResponse</a> object, which has everything you need: content, headers and response code.</p>
<p>Here’s an example of getting the signature from the server that serves this site:</p>
<p>var response = UrlFetchApp.fetch('http://www.pipetree.com/'); Logger.log(response.getHeaders()['Server']);</p>
<p>--&gt; Apache/2.2.14 (Ubuntu)</p>
<p>The Google+ API largely follows a RESTful design, which means that we can use the UrlFetch Services to interact with it.</p>
<p><strong>The Google+ API</strong></p>
<p>The <a href="https://developers.google.com/+/api/">Google+ API</a> is relatively new, and at the moment, read-only. This is fine for what we want to use it for in this example. There are two aspects of the API that are relevant for us:</p>
<ul>
<li>The REST-based nature means that we see the Google+ objects such as People, Activities and Comments as resources that we retrieve with HTTP</li>
<li>To use the API we need either an OAuth 2.0 token or an API key</li>
</ul>
<p>The UrlFetch Services provides us with a facility in the form of the OAuthConfig class for configuring and managing OAuth in a client context. But we’ll go for the simpler approach and use an API key, which we can obtain by using the Google API Console – see the previous instalment of this series for more details about this: <a href="/blog/posts/2011/10/10/reading-list-mark-2-part-2/">Using the Tasks API to retrieve and insert tasklists, and the Ui Services to build the tasklist chooser component</a>.</p>
<p>The idea for this example app is to capture a list of URLs that a person on Google+ has posted, and perhaps commented on. We can get this info from the <a href="https://developers.google.com/+/api/latest/activities">Activities</a> part of the API.</p>
<p>To get the activity stream for a given person, we need to retrieve the following resource:</p>
<p>https://www.googleapis.com/plus/v1/people/{userId}/activities/{collection}</p>
<p>The {userId} is the Google+ ID of the person, and {collection} in this case is “public”, the only collection available right now. In addition we need to specify our API key on a ‘key’ parameter in the query string. The default representation is JSON. This is what we get back as a result (heavily elided for brevity):</p>
<p>{ &quot;kind&quot;: &quot;plus#activityFeed&quot;, &quot;title&quot;: &quot;Plus Public Activity Feed for Martin Hawksey&quot;, &quot;id&quot;: &quot;tag:google.com,2010:/plus/people/1146628[...]/activities/public&quot;, &quot;items&quot;: [ { &quot;kind&quot;: &quot;plus#activity&quot;, &quot;title&quot;: &quot;Latest post from me. Elevator pitch: [...]&quot;, &quot;id&quot;: &quot;z12cxlppixzwjbqzi04cdnvg1wbyflbz3r00k&quot;, &quot;url&quot;: &quot;https://plus.google.com/1146628[...]&quot;, &quot;verb&quot;: &quot;post&quot;, &quot;object&quot;: { &quot;objectType&quot;: &quot;note&quot;, &quot;content&quot;: &quot;Latest post from me. Elevator pitch: Service [...]&quot;, &quot;originalContent&quot;: &quot;&quot;, &quot;url&quot;: &quot;https://plus.google.com/1146628[...]&quot;, &quot;attachments&quot;: [ { &quot;objectType&quot;: &quot;article&quot;, &quot;displayName&quot;: &quot;SpreadEmbed: Turning a Google Spreadsheet [...]&quot;, &quot;url&quot;: &quot;http://mashe.hawksey.info/2011/10/spreadembed/&quot; }, { &quot;objectType&quot;: &quot;photo&quot;, &quot;image&quot;: { &quot;url&quot;: &quot;http://images0-focus-opensocial.google[...]&quot;, &quot;type&quot;: &quot;image/jpeg&quot; }, &quot;fullImage&quot;: { &quot;url&quot;: &quot;http://mcdn.hawksey.info/content/images/[...]&quot;, &quot;type&quot;: &quot;image/jpeg&quot;, &quot;height&quot;: 204, &quot;width&quot;: 350 } [...]</p>
<p>Even after heavy eliding for this blog post, that’s still an awful lot of JSON, but we’re only actually interested in the URLs that the person links to. We can spot these in the “plus#activity” items array, as attachments with objectType “article” – they have url and displayName attributes:</p>
<p>{ &quot;items&quot;: [ { &quot;kind&quot;: &quot;plus#activity&quot;, &quot;object&quot;: { &quot;attachments&quot;: [ { &quot;objectType&quot;: &quot;article&quot;, &quot;displayName&quot;: &quot;SpreadEmbed: Turning a Google Spreadsheet [...]&quot;, &quot;url&quot;: &quot;http://mashe.hawksey.info/2011/10/spreadembed/&quot; }, [...]</p>
<p><strong>Partial Responses</strong></p>
<p>And it just so happens that in the interests of efficiency, Google offers <a href="https://developers.google.com/+/api/#partial-response">partial responses</a>, in the form of a fields parameter. So we can add this parameter to the query string, with an XPath-style value like this:</p>
<p>fields=items/object/attachments(url,displayName)</p>
<p><span style="font-family: Georgia, 'Times New Roman', 'Bitstream Charter', Times, serif; font-size: 13px; line-height: 19px; white-space: normal;">So the resulting JSON representation is a lot lighter, like this:</span></p>
<p>{ &quot;items&quot;: [ { &quot;object&quot;: { &quot;attachments&quot;: [ { &quot;displayName&quot;: &quot;SpreadEmbed: Turning a Google Spreadsheet[...]&quot;, &quot;url&quot;: &quot;http://mashe.hawksey.info/2011/10/spreadembed/&quot; } ] } }, ] }</p>
<p>Much better!</p>
<p><strong>Retrieving the Activity Data</strong></p>
<p>So now it’s time to have a look at the code that will retrieve the activity info and insert the URLs into the spreadsheet. We’ll do this in a single function retrieveActivityUrls_(), which will</p>
<ul>
<li>grab any existing URLs listed in the sheet, so we can work out whether each new one retrieved with the API call is already there or not</li>
<li>Determine the ID of the person on Google+ we want to follow</li>
<li>Build the name of the Google+ activity resource (the Google+ API URL), fetch it and parse the content</li>
<li>Look through the parsed content and note any new URLs that the person has linked to on Google+</li>
<li>Insert those new URLs into the sheet</li>
</ul>
<p>Let’s go!</p>
<p>First, some constants.</p>
<p>APIKEY = 'AIza[...]drBs'; // (get your own!) ACTIVITYLISTURL = 'https://www.googleapis.com/plus/v1/people/{userId}/activities/{collection}'; USERIDCELL = 'B1'; USERID = '106413090159067280619'; // Fallback: Mahemoff!</p>
<p>Now for the function. We get a handle on the active sheet, note the last row (which denotes where the list of URLs currently ends), and gets those URLs. We’re assuming that the list starts at row 2, i.e. there’s a header line in row 1. The resulting urlList array is two dimensional, although as we’ve specified we only want 1 column width of values, the data will look something like this:</p>
<p>[[http://cloud9ide.com], [http://jsconf.eu], [...]]</p>
<p>We create an object to hold the existing (‘old’) URLs, and the eventual ‘new’ URLs about to be retrieved. We’re using an object ‘old’ for the existing URLs so we can easily check whether a new one is in the list or not. We just need to use an array for the ‘new’ URLs.</p>
<p>function retrieveActivityUrls_() { // Grab existing list of URLs var sh = SpreadsheetApp.getActiveSheet(); var lastRow = sh.getLastRow(); var urlList = sh.getRange(2, 1, lastRow - 1 || 1) .getValues(); var list = {'old': {}, 'new': []}; for (var i in urlList){ list['old'][urlList[i]] = 1; }</p>
<p>We’re going to retrieve the activity for a Google+ person, and the person is identified by an ID either in a cell in the sheet identified by the range in constant USERIDCELL, (see the screencast in <a href="/blog/posts/2011/10/08/reading-list-mark-2-part-1/">Part 1</a>) or a default specified in constant USERID.</p>
<p>// Use the userid in the sheet, fallback to a favourite var userid = sh.getRange(USERIDCELL).getValue() || USERID;</p>
<p>Now we have enough information to build the Google+ API resource URL, so we call a helper function buildActivityListUrl_() passing it the user ID, the collection (‘public’), and our API key. (We’ll look at buildActivityListUrl_() shortly.) We use the UrlFetchApp fetch() method to grab the resource, calling getContentText() to obtain the JSON content. And with a JSON parser available in the <a href="http://code.google.com/googleapps/appsscript/service_utilities.html">Utilities Services</a>, we quickly have all we need to retrieve those URLs posted in the activity list in the ‘activities’ object.</p>
<p>// Build Google+ API resource and retrieve it; parse JSON content var actListUrl = buildActivityListUrl_(userid, 'public', APIKEY); var jsonString = UrlFetchApp.fetch(actListUrl).getContentText(); var activities = Utilities.jsonParse(jsonString);</p>
<p>From examining the JSON representation of the activities earlier in this post, we know we’ll be expecting items, and within each item an object member, and within that object member a number of attachments. We’re only interested in those attachments of type ‘article’, and if we find one, we want the url and the displayName.</p>
<p>If we’ve got an article attachment, we then need to determine whether it’s a new URL or one we have already. That’s where the list object comes in. Unless we can find the URL in the ‘old’ object, it’s a new one so we need to add it to the ‘new’ list.</p>
<p>// We're looking for the item object attachments, where the // attachment's objectType is 'article'. We want the url and displayName for (var i in activities.items) { var attachments = activities.items[i].object.attachments; for (var a in attachments) { var attachment = attachments[a]; // We've got a URL and title; store it as new if it doesn't // already exist. Store it as list of lists, ready for // a setValues([][]) insert if (attachment.objectType == 'article') { if (! (attachment.url in list['old'])) { list['new'].push([attachment.url, attachment.displayName]); } } } }</p>
<p>At this stage, we’re ready to add any new URLs to the list in the sheet. Note that when we pushed onto the ‘new’ list, we pushed an array of the url and displayName. This is the ideal two dimensional array ([[a, b], [c, d], [...]) to specify as the value in the <a href="http://code.google.com/googleapps/appsscript/class_range.html#setValues">setValues()</a> call on a two dimensional cell Range. And useful if we want to follow the sage advice in “<a href="http://code.google.com/googleapps/appsscript/guide_common_tasks.html">Common Programming Tasks</a>” on using batch operations where possible: we can add all the new URL info to the sheet in a single getRange() and setValues() call pair:</p>
<p>// Blammo! if (list['new'].length) { sh.getRange(lastRow + 1, 1, list['new'].length, 2).setValues(list['new']); } }</p>
<p>Now that’s the retrieveActivityUrls_()  function out of the way, let’s just have a look at the helper function buildActivityListUrl_() that we called earlier. It takes three parameters: the ID of the person on Google+, the collection we want to retrieve (‘public’ in this case), and the API key. It uses a URL template in the ACTIVITYLISTURL constant and replaces the placeholders. It also adds the API key, and the XPath fields statement.</p>
<p>function buildActivityListUrl_(userId, collection, apiKey) { var actListUrl = ACTIVITYLISTURL; actListUrl = actListUrl.replace(/{userId}/, userId); actListUrl = actListUrl.replace(/{collection}/, collection); actListUrl += '?key=' + apiKey; actListUrl += '&amp;fields=items/object/attachments(url,displayName)'; return actListUrl; }</p>
<p>That brings us to the end of this part in the series. At this stage we have covered the tasklist determination using a user interface and pulled the URLs posted on a Google+ activity stream, storing them in the sheet.</p>
<p>In the next part, we’ll look at synchronising the URLs in the sheet with tasks on the chosen tasklist.</p>
<p>Stay tuned!</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Reading List Mark 2 - Part 2</title>
      <link href="https://qmacro.org/blog/posts/2011/10/10/reading-list-mark-2-part-2/"/>
      <updated>2011-10-10T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2011/10/10/reading-list-mark-2-part-2/</id>
      <content type="html">
        <![CDATA[
      <p>This is Part 2 in a series about an example app that I put together to demonstrate and describe the use of various Google Apps Script features. See <a href="/blog/posts/2011/10/08/reading-list-mark-2-part-1/">Part 1</a> for an introduction. This part is “<strong>Using the Tasks API to retrieve and insert tasklists, and the Ui Services to build the tasklist chooser component</strong>“.</p>
<p><strong>Parts Overview</strong></p>
<ol>
<li><a href="/blog/posts/2011/10/08/reading-list-mark-2-part-1/">Introduction to the app, and a short screencast showing the features</a></li>
<li><a href="/blog/posts/2011/10/10/reading-list-mark-2-part-2/">Using the Tasks API to retrieve and insert tasklists, and the Ui Services to build the tasklist chooser component</a><strong>&lt;– You Are Here</strong></li>
<li><a href="/blog/posts/2011/10/14/reading-list-mark-2-part-3/">Using the UrlFetch Services to interact with the Google+ API and grab info on articles pointed to by users in their activity stream</a></li>
<li><a href="/blog/posts/2011/10/15/reading-list-mark-2-part-4/">Synchronising the URL list in the spreadsheet with corresponding tasks in the chosen tasklist</a></li>
<li><a href="/blog/posts/2011/10/16/reading-list-mark-2-part-5/">Putting it all together and using the OnOpen event to insert a new 2-item menu entry on the spreadsheet’s page</a></li>
</ol>
<p><strong>Tasks API</strong></p>
<p>The availability of the Tasks API within the Google Apps Script context was <a href="http://googlecode.blogspot.com/2011/09/three-new-apis-for-google-apps-script.html">announced recently on the Google Code blog</a>. Using the Google APIs Discovery Service makes it easier to build client libraries for the myriad APIs available; this is what Google have done to make the <a href="http://code.google.com/googleapps/appsscript/googleapisservices.html">BigQuery, UrlShortener, Prediction and Tasks APIs</a> available for us in Google Apps Script. Collectively they’re known as Google APIs Services.</p>
<p>Unlike the other services already available — such as those pertaining directly to the Google Apps platform like Spreadsheet, Gmail, DocsList and Calendar — you need to use the <a href="https://code.google.com/apis/console/?pli=1">Google API Console</a> to turn on these new APIs within the context of a project, agree to the terms &amp; conditions, and note the courtesy call limits available to you.</p>
<div class="wp-caption alignnone" id="attachment_1092" style="width: 606px">![image](/images/2011/10/TasksOn.png)Tasks API selected for use in the API Console
</div>You can see here a shot of the Tasks API selected for use within a project I created in the Google API Console, and a courtesy limit of 5000 calls per day. Check out a previous blog post “[Automated Email-to-Task Mechanism with Google Apps Script](/blog/posts/2011/10/04/automated-email-to-task-mechanism-with-google-apps-script/)” for more background on this Tasks API and the Google article “[Integrating with Google APIs – Creating a simple reading list](http://code.google.com/googleapps/appsscript/articles/google_apis_reading_list.html)“ for a step-by-step account of enabling the API itself  (called Tasks Services in Google Apps Script).
<p><strong>Working with Tasklists and Tasks</strong></p>
<p>So, what do we need to do with the Tasks Services? As you can gather from watching the screencast in the Part 1, we need to retrieve a list of existing tasklists, we might need to create a new tasklist, and we need to be able to add tasks to a specific tasklist. We also need to build a Ui component to present the list of the user’s tasklists, so a tasklist can be chosen, plus an option to create a new tasklist.</p>
<p><strong>Retrieving the Tasklists</strong></p>
<p>Let’s start with retrieving a list of tasklists.  While this is pretty simple, we’ll encapsulate it in a function as we’ll be calling it a couple of times within this example.</p>
<p>function getTasklists_() { var tasklistsList = Tasks.Tasklists.list(); return tasklistsList.getItems(); }</p>
<p>We use the Tasklists member of the Tasks class which gives us a TasklistsCollection class. We call call the list() method to retrieve a <a href="http://code.google.com/googleapps/appsscript/class_tasks_v1_schema_tasklists.html">Tasklists</a> object – which represents a list of all the authenticated user’s tasklists. Calling getItems() on this object gives us an array of Tasklist objects – which is the list of tasklists that we need.</p>
<p><strong>Building the Ui</strong></p>
<p>We’ll need the list of tasklists to show in the Ui component. So let’s look at building that Ui component next. Building user interfaces in Google Apps Script can appear somewhat daunting at first glance, but don’t worry – it’s actually very straightforward. You have the choice between building the Ui in code (by using <a href="http://code.google.com/googleapps/appsscript/service_ui.html">Ui Services</a> calls) or using a visual editor much like you might in other IDEs. This latter approach was <a href="http://googleappsdeveloper.blogspot.com/2011/06/building-ui-in-apps-script-just-got.html">announced and described in detail on the Google Apps Developer blog</a>, following this year’s Google I/O.</p>
<p>We’ll build our Ui in code. If you need an intro to this, have a look at the Google Apps Script “<a href="http://code.google.com/googleapps/appsscript/guide_user_interfaces.html">Building a User Interface</a>” documentation.</p>
<p>We want to be able to display to the user a list of their existing tasklists so they can choose one, and also give them a chance to enter the name of a new tasklist instead. So we need a dropdown list (otherwise known as a listbox), a textbox, some text labels, and a button. This is what the end result should look like:</p>
<div class="wp-caption alignnone" id="attachment_1101" style="width: 269px">![image](/images/2011/10/tasklists.png)Task Lists Ui
</div>It’s showing the Ui title (“Task Lists”), some labels, a dropdown list with the two existing tasklists that the authenticated user has already, an empty textbox (behind the dropdown) where a new tasklist name can be entered and a button to which we can attach an event handler.
<p>Layout is achieved using Panels and Grids, both containers for elements. Here, we’ll use a <a href="http://code.google.com/googleapps/appsscript/class_verticalpanel.html">VerticalPanel</a>, where the elements are arranged vertically, and a <a href="http://code.google.com/googleapps/appsscript/class_grid.html">Grid</a>, where we can arrange elements in a 2-dimensional way.</p>
<p>Schematically, this is what we’re going to do:</p>
<div class="wp-caption alignnone" id="attachment_1104" style="width: 310px">![image](/images/2011/10/TaskListsUiLayoutSchematic1.png)Task Lists Ui Layout Schematic
</div>So, let’s look at the code that builds this Ui. We start by getting a handle on the active spreadsheet (doc), and creating a new Ui application (app), giving it a title. At the end of this function we’ll be passing the Ui application to the active spreadsheet to show.
<p>function taskListUi() { var doc = SpreadsheetApp.getActiveSpreadsheet(); var app = UiApp.createApplication(); app.setTitle('Task Lists');</p>
<p>Next, we create a vertical panel (panel), and a listbox (lb), both of which exist independently. We set a name for the listbox (‘existingList’) so we can refer to it later in the callback context. After using the getTasklists_() function described earlier, we fill the listbox with those tasklist names (or ‘titles’) retrieved.</p>
<p>// We'll have a grid and a button in this // vertical panel var panel = app.createVerticalPanel(); // Use a listbox to display a choice of existing tasklists var lb = app.createListBox(false); lb.setName(&quot;existingList&quot;); var tasklists = getTasklists_(); for (var tl in tasklists) { lb.addItem(tasklists[tl].getTitle()); }</p>
<p>Once we’ve got the listbox populated, it’s time to create the grid (a 2 x 2 layout) and fill the cells with labels, the listbox, and a textbox. We give a name to the textbox (‘newList’) so we can refer to it later in the callback context, in the same way as for the listbox.</p>
<p>// Use the grid to layout the listbox, a textbox for a new list, // and some corresponding labels var grid = app.createGrid(2, 2); grid.setWidget(0,0, app.createLabel(&quot;Existing:&quot;)); grid.setWidget(0,1, lb); grid.setWidget(1,0, app.createLabel(&quot;Or new:&quot;)); grid.setWidget(1,1, app.createTextBox().setName(&quot;newList&quot;));</p>
<p>Finally we have the button element. Simple enough, but we also need to add a click handler to it in the form of a <a href="http://code.google.com/googleapps/appsscript/class_serverclickhandler.html">serverClickHandler</a>. This handler exists as a function in this same script: handleChooseButton_() which is defined after this. The important thing to notice here is that we create an independent serverClickHandler, give it some element context (in this case the grid element we created earlier) so that the element values are available in the context of the handling function, and then assign that handler as a click handler to the button element.</p>
<p>// The only button; handler will be linked to this button click event // Remember to add the grid contents to the callback context var button = app.createButton(&quot;Choose&quot;); var chooseHandler = app.createServerClickHandler(&quot;handleChooseButton_&quot;); chooseHandler.addCallbackElement(grid); button.addClickHandler(chooseHandler);</p>
<p>Once we’ve created the button element and sorted out how the click event will be handled, it’s time to put the Ui together. We add the elements one by one to the vertical panel: a label, the 2 x 2 grid, then the button. Then we add the actual panel to the app, hand it over to the active spreadsheet to be displayed, and let go!</p>
<p>// Put it all together and show it panel.add(app.createLabel(&quot;Select existing or create new list&quot;)); panel.add(grid); panel.add(button); app.add(panel); doc.show(app); }</p>
<p><strong>Handling the Button Click</strong></p>
<p>The handling of the click is performed by handleChooseButton_(), as determined by the call to <a href="http://code.google.com/googleapps/appsscript/class_uiinstance.html#createServerClickHandler">createServerClickHandler()</a> earlier. Let’s examine handleChooseButton_() step by step.</p>
<p>We start by assuming that the user has chosen an existing tasklist – we get the value from the listbox via its name within the parameter attribute of the event object passed to the function, i.e. e.parameter.existingList. Then again, if we’ve got a value in the textbox representing the option to create a new tasklist, we create a new tasklist using the Tasks.newTaskList() method of the Tasks Services, and give that new tasklist the title that was specified in the textbox.</p>
<p>Note that setTitle() was called directly in a ‘chain’ from newTaskList(), and the result assigned to the newTaskList variable. This is possible due to the way the Tasks API has been designed, with most TaskList methods returning the TaskList object itself; this is known as the ‘bean’ object.</p>
<p>function handleChooseButton_(e) { // Assume an existing list was chosen var selectedList = e.parameter.existingList; // But check for a new list being specified; if it as, create // a new task list if(e.parameter.newList != '') { selectedList = e.parameter.newList; var newTaskList = Tasks.newTaskList().setTitle(selectedList); Tasks.Tasklists.insert(newTaskList); }</p>
<p>Now we’ve determined the chosen tasklist (either an existing one or a newly created one) we grab the complete list with getTasklists_() and have a look through them to find the corresponding tasklist id, which we’ll need when we want to insert new tasks into that tasklist.</p>
<p>// Grab the list of tasklists, because we'll need the id var taskLists = getTasklists_(); var taskListId = -1; for(tl in taskLists){ if(taskLists[tl].getTitle() === selectedList) { taskListId = taskLists[tl].getId(); break; } }</p>
<p>Ok, we’ve determined and retrieved the id for the chosen tasklist, so now it’s time to save that info. We’ll do that by writing both the tasklist name and id into a cell; the tasklist name into the cell itself, and the id into the cell’s comment. This is a common idiom and is quite useful – you can store related information in a single cell, and don’t use up too much cell ‘real estate’. The cell we’re going to use is stored as a constant: READINGLISTCELL; in my spreadsheet that’s cell D1.</p>
<p>// Record the list name and id var sh = SpreadsheetApp.getActiveSheet(); var cell = sh.getRange(READINGLISTCELL); cell.setValue(selectedList); cell.setComment(taskListId);</p>
<p>Once we’ve stored the information, it’s time for the handler to make sure the Ui is closed, and to acknowledge to the user that a selected list has been recognised. We do this by closing the active Ui application, and using the Spreadsheet’s generic ‘<a href="http://code.google.com/googleapps/appsscript/class_spreadsheet.html#toast">toast</a>‘ mechanism to pop up a message.</p>
<p>// Close the Ui popup and display the name of the chosen list var app = UiApp.getActiveApplication(); app.close(); SpreadsheetApp.getActiveSpreadsheet().toast(selectedList, &quot;Selected List&quot;, 3); return app; }</p>
<p>Hurray – that’s the Ui component and the handler all taken care of!</p>
<p>Tune in next time when in Part 3 we look at retrieving information from the Google+ activity stream via the Google+ API, using nothing more than our trusty Google Apps Script HTTP client, <a href="http://code.google.com/googleapps/appsscript/class_urlfetchapp.html">UrlFetchApp</a>.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Reading List Mark 2 - Part 1</title>
      <link href="https://qmacro.org/blog/posts/2011/10/08/reading-list-mark-2-part-1/"/>
      <updated>2011-10-08T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2011/10/08/reading-list-mark-2-part-1/</id>
      <content type="html">
        <![CDATA[
      <p>Over on the Google Apps Scripts articles section of the Google Code site there’s a great article “<a href="http://code.google.com/googleapps/appsscript/articles/google_apis_reading_list.html">Integrating with Google APIs – Creating a simple reading list</a>” which takes the reader through a nice example of using a couple of APIs that have recently been made available to Google Apps Script via the <a href="http://code.google.com/googleapps/appsscript/googleapisservices.html">Google APIs Services</a> – the UrlShortener API and the Tasks API. Inspired by the article, I decided to take the idea a little bit further and build something I could demo and then explain at our <a href="http://madlab.org.uk/content/manchester-google-technology-user-group-13/">Manchester GTUG meetup</a>.</p>
<p>I used the same idea of a reading list, but added a Ui component to allow the user to select a task list interactively, and instead of using the UrlShortener API, I explored the relatively young <a href="https://developers.google.com/+/api/">Google+ API</a>, in that I pulled in articles to read automatically from URLs posted by people on Google+.</p>
<p>Also, in revisiting some of the original reading list features, I tried to approach the coding differently, to be mindful of the advice in the “Optimising Scripts for Better Performance” section of the “<a href="http://code.google.com/googleapps/appsscript/guide_common_tasks.html">Common Programming Tasks</a>” guidelines.</p>
<p>Here’s a short screencast that shows the ‘Reading List Mark 2′ in action:</p>
<p><iframe allowfullscreen="" frameborder="0" height="315" src="http://www.youtube.com/embed/F08qS8ZmlZ0" width="420"></iframe></p>
<p>I’ll describe how everything is put together over the next few blog posts:</p>
<ol>
<li>This introduction</li>
<li><a href="/blog/posts/2011/10/10/reading-list-mark-2-part-2/">Using the Tasks API to retrieve and insert tasklists, and the Ui Services to build the tasklist chooser component</a></li>
<li><a href="/blog/posts/2011/10/14/reading-list-mark-2-part-3/">Using the UrlFetch Setvices to interact with the Google+ API and grab info on articles pointed to by users in their activity stream</a></li>
<li><a href="/blog/posts/2011/10/15/reading-list-mark-2-part-4/">Synchronising the URL list in the spreadsheet with corresponding tasks in the chosen tasklist</a></li>
<li><a href="/blog/posts/2011/10/16/reading-list-mark-2-part-5/">Putting it all together and using the OnOpen event to insert a new 2-item menu entry on the spreadsheet’s page</a></li>
</ol>
<p>Stay tuned!</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Automated email-to-task mechanism with Google Apps Script</title>
      <link href="https://qmacro.org/blog/posts/2011/10/04/automated-email-to-task-mechanism-with-google-apps-script/"/>
      <updated>2011-10-04T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2011/10/04/automated-email-to-task-mechanism-with-google-apps-script/</id>
      <content type="html">
        <![CDATA[
      <p><a href="http://madlab.org.uk/content/manchester-google-technology-user-group-13/">Last night at the Manchester Google Technology User Group (GTUG) meetup</a> we looked in detail at an <a href="https://plus.google.com/110526626182299357893/posts/CetQyVtLKy8">example script</a> that used various Google Apps Script services. More on that another time.</p>
<p>At the end of the meetup, I suggested an example of something that would be really easy to put together using Google Apps Script, and very useful: a mechanism to convert incoming emails automatically into tasks.</p>
<p>You can of course convert an email into a task <em>manually</em> using the Gmail UI like this:
<img src="/images/2017/05/AddToTasks1.jpg" alt="Manually adding a task from an email"></p>
<p>But rather than have to open Gmail, find the task email, select it and then choose More Actions -&gt; Add to Tasks, I wanted a hands-off facility where I could, say from my work email, fire off a quick one-liner task that would be added to my list of tasks automatically, silently and without fuss.</p>
<p>With effective use of Gmail’s filter facility, labels and a little bit of Apps Script using the Gmail Services, I was able to create a mechanism in the time it took to enjoy my morning coffee.</p>
<p></p>
<p><strong>Building the Automated Email-to-Task Mechanism</strong></p>
<p>Here’s how I saw it working:</p>
<ol>
<li>create a couple of new labels: ‘newtask’ and ‘newtaskdone’</li>
<li>specify a Gmail filter to assign the label ‘newtask’ to emails coming from my work email address, and with the recipient being ‘qmacro+task@gmail.com’</li>
<li>write a script to process messages in threads assigned to the ‘newtask’ label by parsing the subject out, creating a new task, and inserting that task into my tasklist</li>
<li>schedule this script to run hourly</li>
</ol>
<p>Then I could fire off an email to qmacro+task@gmail.com from work, with the task 1-liner in the Subject, and have that task automatically show up on my task list. Ideal!</p>
<p></p>
<p><strong>The Filter</strong></p>
<p>Once you have the labels, create the filter. This is what the action part of my filter looks like:</p>
<p><img src="/images/2017/05/CreateAFilter.jpg" alt="Specifying the filter actions"></p>
<p>I’m specifying that the email be assigned to the label ‘newtask’, that it should marked as read immediately, and not appear in the inbox. That way, I don’t get distracted by the noise of task emails in my inbox. If you’re wondering about the ‘newtaskdone’ label, we’ll get to that in a minute.</p>
<p></p>
<p><strong>The Script Context</strong></p>
<p>Now we’re all set up – we can write the script to process the relevant emails, i.e. all those assigned the label ‘newtask’.</p>
<p>Start by creating a new Spreadsheet  – the script can live attached to that. Add the text ‘Processed tasks’ to cell A1. We’ll use this to show how many tasks the script has processed. Use the menu option Tools -&gt; Script editor to get to the Google Apps Script editor.</p>
<p><img src="/images/2017/05/MailManagementSheet.jpg" alt="Mail Management sheet"></p>
<p>You can call your project ‘Mail Management’, or whatever you want:</p>
<p><img src="/images/2017/05/MailManagementScript-1.jpg" alt="Mail Management script"></p>
<p><strong>The Script Code</strong></p>
<p>Ok, let’s run through the script step by step.</p>
<p>We start with a few constants: the name of the tasklist into which we want our new tasks inserted, and the two labels.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="token constant">TASKLIST</span> <span class="token operator">=</span> <span class="token string">"DJ's list"</span><span class="token punctuation">;</span><br><span class="token constant">LABEL_PENDING</span> <span class="token operator">=</span> <span class="token string">"newtask"</span><span class="token punctuation">;</span><br><span class="token constant">LABEL_DONE</span> <span class="token operator">=</span> <span class="token string">"newtaskdone"</span><span class="token punctuation">;</span></code></pre>
<p>Next we have a helper function <code>getTasklistId_</code> which uses the Tasks Services from the new <a href="http://code.google.com/googleapps/appsscript/googleapisservices.html">Google APIs Services</a> in Apps Script. You’ll need to explicitly state you want to use the Google APIs Services from the File menu, which will lead you to a popup where you can switch on the Tasks API and use the <a href="http://code.google.com/apis/console-help/">Google API Console</a> to create a project and generate an API key which you’ll need. All of this is described in ample detail in a great article “<a href="http://code.google.com/googleapps/appsscript/articles/google_apis_reading_list.html">Integrating with Google APIs – Creating a simple reading list</a>“.</p>
<p>This <code>getTasklistId_</code> function returns a tasklist ID for a given tasklist name — in this case we’ll be asking for the ID of the tasklist called “DJ’s list”. It’s early days for the Tasks API and there are a few oddities: In theory we should be able to use the simple API call :</p>
<pre class="language-javascript"><code class="language-javascript">Tasks<span class="token punctuation">.</span>Tasklists<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>tasklistName<span class="token punctuation">)</span></code></pre>
<p>but this is currently resulting in an error. So instead we’ll grab a list of all the tasklists, and iterate over them looking for our tasklist name. I’ve suffixed the name of this function, and others in this script, with an underscore; this prevents them from showing up in the dropdown list of runnable functions at the top of the editor.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">getTasklistId_</span><span class="token punctuation">(</span><span class="token parameter">tasklistName</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br>  <span class="token keyword">var</span> tasklistsList <span class="token operator">=</span> Tasks<span class="token punctuation">.</span>Tasklists<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br>  <span class="token keyword">var</span> taskLists <span class="token operator">=</span> tasklistsList<span class="token punctuation">.</span><span class="token function">getItems</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br>  <span class="token keyword">for</span> <span class="token punctuation">(</span>tl <span class="token keyword">in</span> taskLists<span class="token punctuation">)</span> <span class="token punctuation">{</span><br>    <span class="token keyword">var</span> title <span class="token operator">=</span> taskLists<span class="token punctuation">[</span>tl<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getTitle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br>    <span class="token keyword">if</span> <span class="token punctuation">(</span>title <span class="token operator">==</span> tasklistName<span class="token punctuation">)</span> <span class="token punctuation">{</span><br>      <span class="token keyword">return</span> taskLists<span class="token punctuation">[</span>tl<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br>    <span class="token punctuation">}</span><br>  <span class="token punctuation">}</span><br><span class="token punctuation">}</span></code></pre>
<p>Next we have another helper function <code>addTask_</code> which will create a new task, given a string, and add that new task to a tasklist, given a tasklist ID. Note the separation of concerns – a task is created independently of a tasklist, then inserted into that tasklist.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">addTask_</span><span class="token punctuation">(</span><span class="token parameter">title<span class="token punctuation">,</span> tasklistId</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br>  <span class="token keyword">var</span> newTask <span class="token operator">=</span> Tasks<span class="token punctuation">.</span><span class="token function">newTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setTitle</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span><span class="token punctuation">;</span><br>  Tasks<span class="token punctuation">.</span>Tasks<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>newTask<span class="token punctuation">,</span> <span class="token function">getTasklistId_</span><span class="token punctuation">(</span>tasklistId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br><span class="token punctuation">}</span></code></pre>
<p>We then come to the definition of <code>processPending_</code>, which does the bulk of the mechanism’s work. This function gets a handle on each of the two labels we mentioned earlier (labels in the <a href="http://code.google.com/googleapps/appsscript/service_gmail.html">Gmail Services</a> are one of three main classes, along with threads and messages). The idea is that we will process ‘pending’ emails assigned to the ‘newtask’ label, and then switch the thread to the ‘newtaskdone’ label so it won’t get processed a second time. With a call to the getThreads() method of the pending label object, we get a list of threads. We’re assuming that there’s only one email in each thread (task emails are separate and different each time), and so we grab the subject from the first message in each thread to use as the 1-liner task title, and use the addTask_ helper function to insert a new task into the tasklist.</p>
<p>Once this is done we remove the ‘newtask’ label and assign the ‘newtaskdone’ label to the thread.</p>
<p>Finally, we increment the ‘Processed tasks’ counter in the sheet, for a quick indication of how many email-to-task conversions have taken place.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">processPending_</span><span class="token punctuation">(</span><span class="token parameter">sheet</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br><br>  <span class="token keyword">var</span> label_pending <span class="token operator">=</span> GmailApp<span class="token punctuation">.</span><span class="token function">getUserLabelByName</span><span class="token punctuation">(</span><span class="token constant">LABEL_PENDING</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br>  <span class="token keyword">var</span> label_done <span class="token operator">=</span> GmailApp<span class="token punctuation">.</span><span class="token function">getUserLabelByName</span><span class="token punctuation">(</span><span class="token constant">LABEL_DONE</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br><br>  <span class="token comment">// The threads currently assigned to the 'pending' label</span><br>  <span class="token keyword">var</span> threads <span class="token operator">=</span> label_pending<span class="token punctuation">.</span><span class="token function">getThreads</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br><br>  <span class="token comment">// Process each one in turn, assuming there's only a single</span><br>  <span class="token comment">// message in each thread</span><br>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> t <span class="token keyword">in</span> threads<span class="token punctuation">)</span> <span class="token punctuation">{</span><br>    <span class="token keyword">var</span> thread <span class="token operator">=</span> threads<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">;</span><br><br>    <span class="token comment">// Grab the task data</span><br>    <span class="token keyword">var</span> taskTitle <span class="token operator">=</span> thread<span class="token punctuation">.</span><span class="token function">getFirstMessageSubject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br><br>    <span class="token comment">// Insert the task</span><br>    <span class="token function">addTask_</span><span class="token punctuation">(</span>taskTitle<span class="token punctuation">,</span> <span class="token constant">TASKLIST</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br><br>    <span class="token comment">// Set to 'done' by exchanging labels</span><br>    thread<span class="token punctuation">.</span><span class="token function">removeLabel</span><span class="token punctuation">(</span>label_pending<span class="token punctuation">)</span><span class="token punctuation">;</span><br>    thread<span class="token punctuation">.</span><span class="token function">addLabel</span><span class="token punctuation">(</span>label_done<span class="token punctuation">)</span><span class="token punctuation">;</span><br>  <span class="token punctuation">}</span><br><br>  <span class="token comment">// Increment the processed tasks count</span><br>  <span class="token keyword">var</span> processedRange <span class="token operator">=</span> sheet<span class="token punctuation">.</span><span class="token function">getRange</span><span class="token punctuation">(</span><span class="token string">"B1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br>  processedRange<span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span>processedRange<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> threads<span class="token punctuation">.</span>length<span class="token punctuation">)</span><br><span class="token punctuation">}</span></code></pre>
<p>This last function, <code>main_taskconverter</code>, is more a matter of personal style rather than necessity – it’s the main function that we will start the whole mechanism off with, and the function that we’ll specify in the trigger so this script will run on a regular basis. We get a reference to the active spreadsheet, set the first sheet to be the active one (it usually is anyway) and call the <code>processPending_</code> function.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">main_taskconverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br><br>  <span class="token comment">// Get the active spreadsheet and make sure the first</span><br>  <span class="token comment">// sheet is the active one</span><br>  <span class="token keyword">var</span> ss <span class="token operator">=</span> SpreadsheetApp<span class="token punctuation">.</span><span class="token function">getActiveSpreadsheet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br>  <span class="token keyword">var</span> sh <span class="token operator">=</span> ss<span class="token punctuation">.</span><span class="token function">setActiveSheet</span><span class="token punctuation">(</span>ss<span class="token punctuation">.</span><span class="token function">getSheets</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br><br>  <span class="token comment">// Process the pending task emails</span><br>  <span class="token function">processPending_</span><span class="token punctuation">(</span>sh<span class="token punctuation">)</span><span class="token punctuation">;</span><br><span class="token punctuation">}</span></code></pre>
<p>And that’s all there is to it!</p>
<p></p>
<p><strong>Scheduling Regular Execution</strong></p>
<p>We want this mechanism to run regularly in the background, so that it converts all incoming task emails to tasks without our intervention. So we’ll use a trigger – we can set up a <a href="http://code.google.com/googleapps/appsscript/guide_events.html">time-driven event trigger</a> so that the script – via the main_taskconverter function, runs every hour.</p>
<p><img src="/images/2017/05/CurrentProjectsTriggers.jpg" alt="Current Project's Triggers"></p>
<p>With a coffee (and biscuit) down, I now have a very slick way of remembering things I have to do. Nice!</p>
<p>Here’s the script in its entirety, with comments.</p>
<script src="https://gist.github.com/qmacro/821cdbd498fe772447165ad95a4cc470.js"></script>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Ad-hoc Data Workflows with Google Apps Script</title>
      <link href="https://qmacro.org/blog/posts/2011/09/19/ad-hoc-data-workflows-with-google-apps-script/"/>
      <updated>2011-09-19T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2011/09/19/ad-hoc-data-workflows-with-google-apps-script/</id>
      <content type="html">
        <![CDATA[
      <p>At <a href="http://madlab.org.uk/content/manchester-google-technology-user-group-12/">tonight’s Manchester Google Technology User Group’s meetup</a> at Madlab, I gave a talk on building ad-hoc data workflows with <a href="http://code.google.com/googleapps/appsscript/">Google Apps Script</a>.</p>
<p>The Google Apps application set, combined with the universally accessible and always-on nature of Google Apps Script, with its access to a ridiculously large set of useful APIs (in the form of <a href="http://code.google.com/googleapps/appsscript/guide.html">Services</a>), makes an ideal platform for rich collaborative data workflow solutions that can be quickly prototyped, and built into robust, reliable and incredibly useful mashups for you and your users.</p>
<p>I’ve become a big fan of the technology, the platform and the approach, and Google are introducing more features all the time – just this week access to <a href="http://code.google.com/googleapps/appsscript/googleapisservices.html">API services</a> have been introduced, starting with BigQuery, Prediction, UrlShortener and Tasks APIs.</p>
<iframe frameborder="0" height="342" src="https://docs.google.com/present/embed?id=dcjt66v8_412dhv638d6" width="410"></iframe>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Stand steady on the shoulders of giants</title>
      <link href="https://qmacro.org/blog/posts/2011/07/20/stand-steady-on-the-shoulders-of-giants/"/>
      <updated>2011-07-20T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2011/07/20/stand-steady-on-the-shoulders-of-giants/</id>
      <content type="html">
        <![CDATA[
      <p><strong>Or: <em>Why you should attend my 2-day <a href="http://omniversity.madlab.org.uk">Omniversity</a> course “<a href="http://s.madlab.org.uk/sap1">Web Programming with the SAP Internet Communication Framework</a>“</em></strong></p>
<p>Last week I had the opportunity to attend an SAP Mentor Webinar on <a href="http://www.sdn.sap.com/irj/sdn/gateway">SAP Netweaver Gateway</a>, entitled “Gateway Consumption”. Gateway is something I have a good deal of interest in, and have <a href="http://www.bluefinsolutions.com/insights/guest_blog/project_gateway_a_call_to_arms_or_at_least_to_data/">written about it in the past</a>. The webinar was a fascinating hour filled with information about how consumption of data and services in your backend SAP systems will be facilitated with SAP’s new Gateway product; the webinar included discussion of code generation for <a href="http://developer.apple.com/technologies/tools/">Xcode</a>, libraries for BlackBerry apps, and of course Android. Not to mention web-native apps. And don’t forget – <a href="http://twitter.com/#!/qmacro/status/91174743809593344">SAP Gateway is not just for mobile!</a> :-)</p>
<p>The whole Gateway consumption experience is fronted at the sharp (HTTP) end with well-known standards <a href="http://en.wikipedia.org/wiki/Atom_(standard)">Atom &amp; the Atom Publishing Protocol (APP)</a>, and the <a href="http://www.odata.org/">Open Data Protocol (oData)</a>. Whether they’re also well-loved I’ll leave for you to decide. Payloads are in XML or JSON (although again, some would say it’s the ugliest and un-JSON-like JSON they’ve ever seen, but that’s another story). The Gateway system itself is an ABAP-stack SAP system, running the Internet Communication Manager, wrapped of course with our beloved <a href="http://help.sap.com/saphelp_nw70ehp1/Helpdata/EN/36/020d3a0154b909e10000000a114084/frameset.htm">Internet Communication Framework</a>.</p>
<p>And there’s the thing.</p>
<p>While slowly but surely the promise of* lightweight over heavyweight*, <em>simplicity over complexity</em>, and <em>open over proprietary protocols</em> continues to be delivered, you’ve got to admit that’s a heck of a lot of layers of stuff that’s already building up! Your application, on top of generated libraries, on top of oData, on top of APP, on top of HTTP, on top of ICF, in an SAP system. Gosh!</p>
<p>So what does the desperate enterprise hacker have to do? Walk strong! Learn to walk properly and steadily, before you can run. Stand firm upon this stack of technologies, and understand the fundamentals of the ICF, the core HTTP mechanisms that underpins everything.</p>
<p>Not only that, but sometimes, oData is too much! Sometimes, you just want a controlled but ad-hoc exposure of SAP functionality through a simple HTTP interface that you can connect to and interact with using <a href="http://curl.haxx.se/">curl</a>! In a Unix style command pipeline! Is that heresy? I don’t care, I do it often! With text/plain! Yes! Sometimes you want to use the power of the ABAP development and debugging environment, the data dictionary and abstracted storage layer, and just whip up a data collection service in a coffee break, instead of trying to shoehorn records into a silly Access database using a batch script.</p>
<p>So.</p>
<p>If you want to understand the solid platform that Gateway and many other technologies are built upon, if you want to use that platform to build your own ‘native’ HTTP based applications, if you want to differentiate yourself from the rest of the SAP developers who are rushing headlong into Gateway and HTTP, or if you just want to be able to <strong>stand steady on the shoulders of giants</strong> and confidently debug the core layers when things don’t go to plan, then get to know the ICF. More specifically, get to know it on <a href="http://s.madlab.org.uk/sap1">my course</a>! It’ll be fun, too!</p>
<p><strong>GET /course/info HTTP/1.1 Accept: text/plain Host: omniversity.madlab.org.uk</strong></p>
<p><strong>200 OK Content-Type: text/plain Title: <a href="http://s.madlab.org.uk/sap1">Web Programming with the SAP Internet Communication Framework </a>When: Mon 5th and Tue 6th September Cost: £300 Where: <a href="http://maps.google.co.uk/maps?f=q&amp;source=s_q&amp;hl=en&amp;geocode=&amp;q=36-40+Edge+St,+Manchester,+M4+1HN&amp;sll=53.484215,-2.236311&amp;sspn=0.000833,0.001617&amp;g=m4+1hn&amp;ie=UTF8&amp;hq=&amp;hnear=36-38+Edge+St,+Manchester,+Lancashire+M4+1HN,+United+Kingdom&amp;ll=53.484118,-2.236311&amp;spn=0.001666,0.003235&amp;z=18">Madlab, 34-40 Edge St, Manchester M4 1HN </a></strong></p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Review of Torpedo from Sierra Nevada</title>
      <link href="https://qmacro.org/blog/posts/2011/06/30/review-of-torpedo-from-sierra-nevada/"/>
      <updated>2011-06-30T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2011/06/30/review-of-torpedo-from-sierra-nevada/</id>
      <content type="html">
        <![CDATA[
      <p><img src="/images/2011/06/torpedo.png" alt="Torpedo"></p>
<p>The start of Port Street Beer House’s <a href="http://portstreetbeerhouse.co.uk/blog/2011/06/29/american-beer-festival-update">American Beer Festival</a> starting Mon 27th June, until the beer runs out, is clearly an ideal time to review Torpedo, an IPA from one of America’s most respected craft beer pioneers <a href="http://www.sierranevada.com/about/history.html">Sierra Nevada</a>. On the second day of this wonderful festival, our favourite craft beer venue is buzzing with talk, tastings and trialling of an array of beers that would put any respectable beer sampling adventure at <a href="http://en.wikipedia.org/wiki/DEFCON">DEFCON 1</a>.</p>
<p>So Sierra Nevada’s Torpedo it is. It sits there, arrogant and assertive in my PSBH glass, a golden copper colour, ready to give my senses a run for their money. From the moment the glass is lifted, the sharp spicy aroma hits the nose, with strong strains of citrus and pine cones. Suddenly I’m camping in northern California, lying prostrate with my face in the pine needle strewn earth.</p>
<p>If I had to pick three words to describe this bold, year-round IPA, they would be ‘hop’, ‘hop’ and ‘hop’ again. Copious amounts of hops are this Chico, CA brewery’s trademark, and it’s no more evident than in this 7.2% ABV package of liquid heaven. Moreover, it’s <a href="http://www.sierranevada.com/tour/ingredients.html">whole-cone hops</a> that Sierra Nevada uses to produce Torpedo. Concerned about long-term hop quality post-harvest, some brewers eschew the natural form in favour of a processed, pelletized version, but not Sierra Nevada. They have managed to consistently harness the full hop aroma from the whole-cone form using a mechanism they developed for dry hopping – with a stainless steel device called the Hop Torpedo. And so the name. Magnum and Crystal hops are the backbone for this brew, and in the dry hopping stage the torpedo injects Citra, a relatively new US hybrid hop variety.</p>
<p>So. At the end of this review I find Torpedo to be bold and totally full of character. There’s a huge bitterness that’s nicely balanced by a bready malt flavour. And the crisp dry finish makes me think my glass is very empty indeed. The bar beckons.</p>
<br />
<ul>
<li>Brewer: Sierra Nevada</li>
<li>Brew: Torpedo</li>
<li>Style: IPA</li>
<li>ABV: 7.2%</li>
</ul>
<hr>
<p><a href="https://www.portstreetbeerhouse.co.uk/blog/torpedo">Originally published on the Port Street Beer House website</a></p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Beer review: Dark Star&#39;s Saison</title>
      <link href="https://qmacro.org/blog/posts/2011/06/03/beer-review:-dark-star&#39;s-saison/"/>
      <updated>2011-06-03T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2011/06/03/beer-review:-dark-star&#39;s-saison/</id>
      <content type="html">
        <![CDATA[
      <p>I was honoured to be asked by the folks at <a href="http://portstreetbeerhouse.co.uk/">Port Street Beer House</a> to review one of their cask beers, Saison, from the West Sussex brewery Dark Star. I went down last Saturday, received a pint, sat down, and wrote this:</p>
<p><a href="http://portstreetbeerhouse.co.uk/blog/2011/05/31/review-dark-star-saison-by-dj-adams">http://portstreetbeerhouse.co.uk/blog/2011/05/31/review-dark-star-saison-by-dj-adams</a></p>
<p>A thoroughly enjoyable time! And of course, I <a href="http://untappd.com/user/qmacro/checkin/981650">checked it in</a>; fitting, as <a href="http://untappd.com/">Untappd</a> is celebrating its <a href="http://blog.untappd.com/post/5904712435/untappd-milestone-celebration">one millionth check in</a> this week!</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>SOA scaffolding and development architects</title>
      <link href="https://qmacro.org/blog/posts/2011/06/01/soa-scaffolding-and-development-architects/"/>
      <updated>2011-06-01T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2011/06/01/soa-scaffolding-and-development-architects/</id>
      <content type="html">
        <![CDATA[
      <p>In “<a href="http://www.sdn.sap.com/irj/scn/weblogs?blog=/pub/wlg/24796">Quo vadis SOA</a>“, <a href="http://twitter.com/steinermatt">Matthias Steiner</a> has written a very readable blog post about where SOA is today, in SAP and beyond, casting a critical but balanced eye on what the service orientation approach has delivered. In the section “Did SOA deliver on its promise?”, the words (some quoted) that stand out are “critics”, “disillusionment”, “dead” and “reality”. I think to some extent these words are justified, but not necessarily for the obvious reasons. Service Orientation as an architectural approach is certainly valid and one cannot argue that the theory is unsound, or that it has no place in enterprise computing.</p>
<p>The biggest problem, and the biggest enemy of SOA, appears to have sprung from within the SOA bubble itself. Hordes of cargo-cult ridden ERP architects and consultants have swept into organisations, egged on by respected analyst firms, and declared “SOA is the answer! Now, what is the question?” Before detailed analysis of the challenge at hand, they appear, armed to the teeth with SOA white papers and acronyms, and plonk down their SOA scaffolding superstructure, proudly stating “Whatever solution we end up with must fit in that framework”. And so implementations get off on the wrong foot, noses are put out of joint, integrations are brittle by design, and costs shoot way past the budget, like an HTTP request tunneling to a solitary, unidentifable endpoint forever out of reach.</p>
<p>What’s the answer? In my humble opinion, it’s the **re-**coupling of archtecture with development. In a comment to Matthias’s post, <a href="http://twitter.com/mattharding">Matt Harding</a> mentions the concept of a “Development Architect”. This resonates with me tremendously; I set <a href="http://www.linkedin.com/in/djadams">my title on LinkedIn</a> to include “Coding Architect”, which tries to convey a similar concept. Get the people who are thinking hard about architecture to think hard about development, and vice versa, and the correct and appropriate strategies will emerge.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Review of Saison from Dark Star</title>
      <link href="https://qmacro.org/blog/posts/2011/05/31/review-of-saison-from-dark-star/"/>
      <updated>2011-05-31T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2011/05/31/review-of-saison-from-dark-star/</id>
      <content type="html">
        <![CDATA[
      <p><img src="/images/2011/05/saison.jpg" alt="Saison"></p>
<p>A dusky Saturday evening finds me in Port Street Beer House in Manchester's Northern Quarter. An escape from the Champions League final, and respite from the constant threat of cloudburst. A usual warm welcome and conversation turns to Dark Star's Saison, which their own <a href="http://darkstarbrewing.co.uk/beer/">website</a> describes as &quot;Nothing like what English beer should be&quot;. That sounded like a challenge, and a delightful 568ml later I'm tending to agree with them.</p>
<p>The name Saison (French: season) refers to a style of seasonal pale ales traditionally brewed in farmhouses in the French-speaking Belgium countryside for the farmers and field workers at harvest time. The brews were distinctive as each farmhouse produced their own version, but all were strongly hopped (for preservation) and low in alcohol (to keep the workers hydrated &amp; refreshed, and the harvest on track).</p>
<p>This West Sussex brewery's take on the &quot;Belgian-style Farmhouse Ale&quot; has produced a very refreshing and even more drinkable pale ale. With a slightly spicy aroma, overtones of pepper, the beer sits there hazy, rather than cloudy, yellow, looking like a distant cousin of the fuller wheat beers from further east. Saaz, Styrian and Belgian Goldings hops are awakened by a Saison yeast which gives the brew a dry and refreshing taste. There's a distinctive citrus streak running right through the glass, and the whole experience is reminiscent of a Paulaner-with-lemon-wedge, but much more subtle and balanced. The flavours are alive right to the end, with even the last sip as dynamic as the first.</p>
<p>Saison is not an English beer, and nor is it what an English beer should be. It's a great <a href="http://twitter.com/#!/Darkstarbrewco/status/70414764022566913">modern take</a> on a traditional style of ale, just as Dark Star is a modern take on a traditional and multi-faceted brewery. Just as it provided respite for the field workers from the harvest heat and toil, so Saison has provided me respite from the football frenzy and fall of rain. Would I have another? I'm already on my way to the bar.</p>
<br />
<ul>
<li>Brewer: Dark Star</li>
<li>Brew: Saison</li>
<li>Style: Belgian Farmhouse Ale</li>
<li>ABV: 4.5%</li>
</ul>
<hr>
<p><a href="https://www.portstreetbeerhouse.co.uk/blog/review-dark-star-saison-by-dj-adams">Originally published on the Port Street Beer House website</a></p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Danger! Graduate Conveyor-belt!</title>
      <link href="https://qmacro.org/blog/posts/2011/05/31/danger!-graduate-conveyor-belt!/"/>
      <updated>2011-05-31T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2011/05/31/danger!-graduate-conveyor-belt!/</id>
      <content type="html">
        <![CDATA[
      <p>John Appleby wrote a thought-provoking piece on university degree courses and how they relate to the IT industry in “<a href="http://peopleprocesstech.com/2011/05/30/when-will-graduates-learn-to-monetize-their-education/">When will graduates learn to monetize their education?</a>“. I thought it was worth writing a few thoughts down to help re-balance the view.</p>
<p>To a large extent I agree with John’s sentiments, especially on the context of the cost of education, and perhaps the beginning of the end of “vocational” degrees. Competition in the graduate job market, cost of living, and tuition fees are all increasing at an alarming rate, and John is calling for universities to make their degree courses relevant to industry, in particular IT consulting, and for students to seriously consider career-orientated courses (rather than subjects they might otherwise wish to study).</p>
<p>The problem is that this drives us dangerously down the path of clone production. Often in my career have I come across graduates of computer-related degree courses, unable to think for themselves, unwilling to consider solutions that involve approaches beyond what they’ve already studied, and — while having a tremendously impressive pedigree in, say, compiler design or even XML processing — not able to translate their skills and knowledge into practical application thereof.</p>
<p>I graduated with a Classics degree, which was made up of Latin, Ancient Greek, Sanskrit and Philology. But beyond the questionable ability to translate Ovid into Ancient Greek, or understand how Phrygian influenced later language grammars, I graduated with the skills to think logically, work independently, think outside the box and, most importantly, to <em>learn</em> and assimilate new ideas and approaches and apply them to current problems. This particular set of skills is not specific to Classics by any means, but is a good illustration of soft skills that are wider and deeper than any particular vertical slice of IT.</p>
<p>Yes, I agree that students face serious problems in higher education, but let’s not move towards a solution that denies the richness that a traditional non-tech degree affords.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>JSON and Other Animals - talk at Manchester jQuery Meetup</title>
      <link href="https://qmacro.org/blog/posts/2011/03/28/json-and-other-animals-talk-at-manchester-jquery-meetup/"/>
      <updated>2011-03-28T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2011/03/28/json-and-other-animals-talk-at-manchester-jquery-meetup/</id>
      <content type="html">
        <![CDATA[
      <p>The <a href="http://madlab.org.uk/">Manchester Digital Laboratory</a> (<a href="http://twitter.com/madlabuk">MadLab</a> for short) is the arts-craft-tech gravity centre of Manchester, and our gracious hosts for the <a href="http://www.gtugs.org/chapter.jsp?id=1023">Manchester Google Technology User Group</a>. Recently a new group sprung up there – the <a href="http://www.meetup.com/jQuery-Manchester/">jQuery Manchester Meetup</a>, run by <a href="http://twitter.com/webvines">Jon Vines</a>. I gave a talk there earlier this month, on JSON, JSONP and AJAX. Here are the slides, and I’ve also created a <a href="http://qmacro-demos.appspot.com/demos/manjquery-20110308/index.html">talk page</a> for this, with links to these slides and the code examples.</p>
<iframe frameborder="0" height="342" src="https://docs.google.com/present/embed?id=dcjt66v8_234fw68jqfp" width="410"></iframe>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Gmail Contextual Gadgets - talk at Manchester GTUG</title>
      <link href="https://qmacro.org/blog/posts/2011/03/28/gmail-contextual-gadgets-talk-at-manchester-gtug/"/>
      <updated>2011-03-28T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2011/03/28/gmail-contextual-gadgets-talk-at-manchester-gtug/</id>
      <content type="html">
        <![CDATA[
      <p>I gave a talk at the <a href="http://www.gtugs.org/chapter.jsp?id=1023">Manchester Google Technology User Group</a> March <a href="http://www.meetup.com/mangtug/events/16557449/">meetup</a> on <a href="/blog/posts/2010/06/21/getting-started-with-gmail-contextual-gadgets/">Gmail Contextual Gadgets</a>. Partly so I can keep track of what slides I’ve used where, and partly to share them with a wider audience, here they are.</p>
<iframe frameborder="0" height="342" src="https://docs.google.com/present/embed?id=dcjt66v8_235cp9kttfs" width="410"></iframe>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>My browser A-Z</title>
      <link href="https://qmacro.org/blog/posts/2011/03/04/my-browser-a-z/"/>
      <updated>2011-03-04T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2011/03/04/my-browser-a-z/</id>
      <content type="html">
        <![CDATA[
      <p>Inspired by a post “<a href="http://www.tbray.org/ongoing/When/201x/2011/03/03/ABC">Letter Sweep</a>” by <a href="http://twitter.com/timbray">Tim Bray</a>, here’s my browser A-Z, a list of the URLs that appear when the browser tries to guess, on a single letter press, where I want to go, based on past locations.</p>
<p>A: <a href="http://appengine.google.com">appengine.google.com</a> – unsurprising, as I’m a big fan of Google’s App Engine.</p>
<p>B: <a href="http://bbc.co.uk">bbc.co.uk</a> – where I go to get the news, although mostly I listen to <a href="http://www.bbc.co.uk/radio4/">Radio 4</a> via my <a href="http://www.logitech.com/speakers-audio/wireless-music-systems/devices/5847">Squeezebox Radio</a>.</p>
<p>C: <a href="http://Coastandcountryholidays.co.uk">coastandcountryholidays.co.uk</a> – Michelle and I are taking a holiday in Norfolk later this month.</p>
<p>D: <a href="http://Docs.google.com">docs.google.com</a> – I’m a big Google Docs user.</p>
<p>E: <a href="http://Enterprisegeeks.com">enterprisegeeks.com</a> – where I go for some excellent ERP / SAP banter.</p>
<p>F: <a href="http://flickr.com">flickr.com</a> – I’ve been on Flickr for as long as I can remember.</p>
<p>G: <a href="http://Google.co.uk">google.co.uk</a> – well, duh!</p>
<p>H: <a href="http://www.google.co.uk">http://www.google.co.uk</a> – interesting! Isn’t using the scheme in the URL cheating?</p>
<p>I: <a href="imdb.com">imdb.com</a> – we’re <a href="http://www.lovefilm.com">Lovefilm</a> members, but I still use IMDB for film geekery.</p>
<p>J: <a href="http://jsonformatter.curiousconcept.com">jsonformatter.curiousconcept.com</a> – <a href="http://www.json.org">JSON</a> is my poison, and this excellent site is the sweetener.</p>
<p>K: <a href="https://www.amazon.co.uk/gp/digital/fiona/manage/ref=docs_dim_box">www.amazon.co.uk/gp/digital/fiona/manage/ref=docs_dim_box</a> – where I manage my Kindle. I think this is linked to K as I have a bookmark titled “K” pointing here.</p>
<p>L: <a href="http://linkedin.com">linkedin.com</a> – essential!</p>
<p>M: <a href="http://m.untappd.com">m.untappd.com</a> – even more essential! Also, perhaps more alarming, <a href="http://untappd.com">Untappd</a> is the only site that appears more than once, apart from Google’s home page.</p>
<p>N: <a href="http://natwest.com">natwest.com</a> – where I do some of my banking. National Westminster Bank.</p>
<p>O: <a href="http://omniversity.madlab.org.uk">omniversity.madlab.org.uk</a> – The Manchester Digital Laboratory’s Omniversity. Excellent!</p>
<p>P: <a href="http://pipetree.com">pipetree.com</a> – my main domain.</p>
<p>Q: <a href="http://qmacro.appspot.com">qmacro.appspot.com</a> – not been here for a while, this was a general play area on App Engine.</p>
<p>R: <a href="http://router/">router</a> – my Vigor router, to do the occasional port management.</p>
<p>S: <a href="http://slashdot.org/">slashdot.org</a> – old but still ‘lesenswert’.</p>
<p>T: <a href="http://twitter.com">twitter.com</a> – I’m a fan of <a href="http://seesmic.com/w/">Seesmic’s web client</a>, but still use the mothership app for lookups and the like.</p>
<p>U: <a href="http://untappd.com/user/qmacro">untappd.com/user/qmacro</a> – ahem. Beer ahoy!</p>
<p>V: <a href="http://vmlu02:8080">vmlu02:8080</a> – one of my servers; a virtual machine running on a micro-desktop on the shelves behind me. This is a port where I have an App Engine dev server listening.</p>
<p>W: <a href="http://www.google.co.uk">www.google.co.uk</a> – three out of three!</p>
<p>X: nothing!</p>
<p>Y: <a href="http://youtube.com">youtube.com</a> – I thought I was happy when the interweb was just text. But I was wrong.</p>
<p>Z: <a href="http://zino:9000">zino:9000</a> – zino is the micro-desktop that hosts vmlu02. Listening on port 9000 is my <a href="http://en.wikipedia.org/wiki/Squeezebox_Server">Squeezebox server</a>.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>The past and future of SAP integration: guest Bluefin blog post</title>
      <link href="https://qmacro.org/blog/posts/2011/02/03/the-past-and-future-of-sap-integration:-guest-bluefin-blog-post/"/>
      <updated>2011-02-03T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2011/02/03/the-past-and-future-of-sap-integration:-guest-bluefin-blog-post/</id>
      <content type="html">
        <![CDATA[
      <p>I was honoured to be invited to write the first guest blog post on <a href="http://www.bluefinsolutions.com/">Bluefin</a>‘s website. To start the ball rolling, I decided to take a whirlwind history tour of data and function integration with SAP’s enterprise systems, ending up a few clicks into the future with SAP’s <a href="http://en.sap.info/gateway-apps-mobile-rest-duet-enterprise/43463/2">Project Gateway</a>, which promises to bring a great deal of openness to SAP data. With terms such as Atom, Atom Publishing Protocol and resource orientation appearing in descriptions of what Gateway is to bring, it certainly has my attention!</p>
<p>Here’s the post: “<a href="http://www.bluefinsolutions.com/insights/guest_blog/project_gateway_a_call_to_arms_or_at_least_to_data/">Project Gateway. A call to arms. Or at least to data.</a>“</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Project Gateway. A call to arms. Or at least to data.</title>
      <link href="https://qmacro.org/blog/posts/2011/02/01/project-gateway.-a-call-to-arms.-or-at-least-to-data./"/>
      <updated>2011-02-01T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2011/02/01/project-gateway.-a-call-to-arms.-or-at-least-to-data./</id>
      <content type="html">
        <![CDATA[
      <p>Here I'll plot a brief history of SAP integration tools and technologies, and look forward to what Project Gateway promises: Uniform, resource orientated access to your enterprise functions and information. It's time to take back control of your data.</p>
<p>&quot;Integrated Software. Worldwide.&quot; - that used to be the strapline for SAP's enterprise software system R/3. Before that, the mainframe predecessor R/2 was so menacingly monolithic that there was no strapline needed to underline the deep integration and the message that &quot;everything your enterprise needs is inside this large, smooth-sided black object, with a precise ratio of 1:4:9&quot;. No light emanated from it, and no light could penetrate it, save for specialised forms of lasers running at a frequency of APPC/LU6.2 (look it up).</p>
<h2>Integration turned inside out</h2>
<p>Of course, that was then, and this is now. SAP has slowly but surely turned the integration pattern inside out, and it is not uncommon for an enterprise's ERP landscape to have more SAP systems than you can shake a stick at. Or a laser gun. Want CRM? There's an SAP system for that. Want APO? There's an SAP system for that. Want Process Integration? There's an SAP system for that (to paraphrase a modern Apple saying). And all this time, enterprise data and functions -- your information and processes -- have been stored, cocooned, imprisoned inside that constellation of ABAP and Java runtime environments.</p>
<p>Ok, &quot;imprisoned&quot; is a little harsh. There have been, and remain, a myriad ways to invoke processes, pull data, exchange this, expose that. Remember the RFC software development kit (SDK)? Remember registering programs with the gateway process, programs that were written in C and looked almost exactly like the example code that came with that very SDK, with just a bit of custom stuff added by you to make it do what you wanted? How about the Internet Transaction Server, with its 'wgate' process that spoke Common Gateway Interface (CGI), and the so-crazy-it-deserves-respect dynpro-scraping 'agate' process, the only known program apart from SAPGUI itself to attempt to speak the mysterious DIAG protocol? WebRFC templates? What about the venerable SAP Business Connector, a rather handy toolbox of pipes, workflows and dynamic page generations which is still going strong in some corners even today?</p>
<p>No? Well how about Business Server Pages (BSPs)? Mix ABAP and markup in the style of ASP, JSP, DSP or whatever other *SP flavour you can think of, throw in a little extra complexity, and you have a pretty powerful and outward facing toolset. Still using BSPs? Of course, it's a trick question. You want to answer &quot;yes&quot;, but you're supposed to answer &quot;ah no, we've embraced the MVC philosophy and have gone all WebDynpro now&quot;. You might answer &quot;what's that got to do with SAPGUI?&quot;. And I wouldn't hold it against you.</p>
<h2>Proprietary protocols, inside-out approaches</h2>
<p>Whatever your poison (and I won't even attempt to cover the SOAP, SOA and Enterprise Service offerings because I, and more importantly you, dear reader, would be here all afternoon), over the years, there's a single truth that emerges when you consider all the tools and technologies past and present that have been made available to you to expose your business information and functions to a wider sphere of users and systems. You can do it, but you do it, inevitably, on SAP's terms. Proprietary protocols. Proprietary (and frankly bonkers) approaches, in some cases. The approaches are predominantly &quot;inside-out&quot;. A lot of heavy lifting inside of the SAP system walls, then more stuff outside.</p>
<p>And that's just the server-orientated view. What about the clients? SAPGUI, anyone? How much has that actually changed, deep down, since the days of Windows 3.11? You can't fit SAPGUI in your pocket, either.</p>
<p>So. Here you are. With your most valuable business information and processes inside SAP. Not locked up, by any means. But you're prevented from grabbing and running with that information, those processes, in an agile way, because of the inertia caused by the sheer weight of SAP-specific technology between where your servers end and where your users start.</p>
<h2>The promise of SAP's Project Gateway</h2>
<p>But it's 2011 and time for a change. A time for a call to arms. Or at least a call to data. SAP's announcement of Project Gateway at 2010's TechEd changes the landscape. In a big way. SAP's slow, inexorable, inevitable move towards open data protocols and standards is to be celebrated. And capitalised upon. What SAP is trying to do with Project Gateway is arguably a game changer in the sport of opening up enterprise data and functions. They have embraced and adopted such standards, protocols and approaches such as Atom, the Atom Publishing Protocol (APP), resource orientation (yes, related to Representational State Transfer!) and the Open Data Protocol (OData). From this perspective, if it works for Google and Google's customers, it can work too for SAP and SAP's customers!</p>
<p>Think about it: What Project Gateway intends to deliver is a smooth-edge platform for controlled access to resources in SAP. Yes, I used the word 'resources' deliberately there. And the intended delivery is via access from an outside-in perspective, too! Data and functionality exposed and ordered in terms of URLs. Payloads orientated along public and openly adopted MIME types such as Atom feeds and elements, and JSON. A uniform interface to that seething, writhing mass of enterprise engine parts.</p>
<h2>Gateway's new direction is a big deal</h2>
<p>What's the significance of all this? All of a sudden, the playing field is level for you to use the right tools, and the right teams, for the job. For example: Want to build a mobile app that exposes certain timesheet functions from HR? Use JQTouch, jQuery and PhoneGap, identify the right ways in through the Gateway, get your Javascript-savvy developers (what, you have none? Get some!) and away you go, build a web-native app and launch in weeks not months. Heck - change your mind, go wild and build a native iPhone app with Objective-C (you'll regret it! but that's another story) … and use the same Gateway resources and the same underlying application protocol - HTTP! Stop building, worrying about and being paralysed by custom and brittle chains of integration tech and start delivering apps -- small or large, single-use or long-lived -- to your users.</p>
<p>Project Gateway is almost upon us. What it is and how it will eventually work is important. But what's vastly more important is what it means, what it represents, and what direction SAP is taking.</p>
<h2>A final message</h2>
<p>And with Gateway's arrival, marshal your developers, because the data's already marshalled for you. Ask not what you can do for your data; ask what your data can do for you! Take back control of your data, your processes, your developments, your custom front ends &amp; extensions and your loosely coupled integration.</p>
<p>As I started with references to 2001: A Space Odyssey, I'd like to end with a bad paraphrasing of Bowman's last message to Earth:</p>
<p>ALL THESE WORLDS<br/>
OF DATA AND FUNCTIONALITY<br/>
ARE YOURS EVEN<br/>
THAT BIT IN CO-PS THAT NOBODY USES<br/>
USE THEM TOGETHER<br/>
USE THEM IN PEACE</p>
<hr>
<p><a href="https://web.archive.org/web/20180227042502/http://www.bluefinsolutions.com/insights/dj-adams/february-2011/project-gateway-a-call-to-arms-or-at-least-to-da">Originally published on the Bluefin Solutions website</a> (where they disowned me because of this article ... that championed the introduction of what now drives and supports everything related to SAP's cloud activities from the ABAP platform).</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Hacking the Delicious extension for Chrome</title>
      <link href="https://qmacro.org/blog/posts/2010/11/09/hacking-the-delicious-extension-for-chrome/"/>
      <updated>2010-11-09T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2010/11/09/hacking-the-delicious-extension-for-chrome/</id>
      <content type="html">
        <![CDATA[
      <p>I’ve recently moved from Firefox to Chrome. I use Delicious for managing my public and private bookmarks, and have installed the <a href="http://www.delicious.com/help/tools">plugins</a> for both browsers.</p>
<p>In moving to Chrome and installing the <a href="https://chrome.google.com/extensions/detail/gclkcflnjahgejhappicbhcpllkpakej">Delicious Tools</a> extension, one thing I really missed from the Firefox-based add-on was the ability to set a <a href="http://kenyarmosh.com/delicious-firefox-add-on-always-mark-as-private/">simple configuration option</a> to set the “Mark as private” checkbox on by default. There seemed to be a lot of forum-based discussion on making this work for the Chrome extension, but it seemed no solution was immediately evident. So I decided to investigate, and found out what I could do. This post is as much an aide memoire as anything else.</p>
<p>The Chrome extensions can be administered by entering <a href="chrome://extensions">chrome://extensions</a> into the address bar. This is what you can see for the Delicious Tools extension, when you have the Developer Mode expanded:</p>
<p><img src="/images/2010/11/screenshot-extensions-google-chrome.png" alt="Chrome extension details"></p>
<p>There are a couple of interesting things that we can see:</p>
<ul>
<li>the ID of this extension is <em>gclkcflnjahgejhappicbhcpllkpakej</em>, which is the same as part of the URL that points to the extension’s home page:
<a href="https://chrome.google.com/extensions/detail/gclkcflnjahgejhappicbhcpllkpakej">https://chrome.google.com/extensions/detail/gclkcflnjahgejhappicbhcpllkpakej</a></li>
<li>there’s a reference to the active view ‘background.html’, which, on inspection, contains a Javascript function addDelicious() which builds up the URL that will retrieve the Delicious page to save a bookmark</li>
</ul>
<p>A find and grep later, I find this background.html component’s home:</p>
<pre><code>~/.config/google-chrome/Default/Extensions/ gclkcflnjahgejhappicbhcpllkpakej/1.0.4_0/
</code></pre>
<p>It’s not just integration mechanisms that can be built in a loosely-coupled way. Applications built with HTTP, HTML, CSS and Javascript are also, almost by definition, beautifully loosely coupled; on inspecting the Javascript source in this file, we see:</p>
<pre><code> // Show delicious pop-up window addDelicious = function(conf) { var c = conf || {}, doc = c.document || document, url = c.url || doc.location, title = c.title || doc.title, notes = c.notes || '', w = c.width || 550, h = c.height || 550, deliciousUrl = c.deliciousUrl || &quot;http://delicious.com/save?v=5&amp;noui&amp;jump=close&amp;url=&quot;, fullUrl; fullUrl = deliciousUrl + encodeURIComponent(url) + '&amp;title=' + encodeURIComponent(title) + '&amp;notes=' + encodeURIComponent(notes); window.open( fullUrl, [...]
</code></pre>
<p>A simple addition of</p>
<pre><code>fullUrl = fullUrl + &quot;&amp;share=no&quot;;
</code></pre>
<p>before the call to window.open() will add the query parameter “share=no” to the Delicious URL that is requested, resulting in the HTML form being rendered with the “Mark as private” checkbox already ticked.</p>
<p><img src="/images/2010/11/screenshot-save-a-bookmark-on-delicious-google-chrome.png" alt="Saving a bookmark, with private as default"></p>
<p>Result!</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Google Visualization API: Manchester GTUG Talk</title>
      <link href="https://qmacro.org/blog/posts/2010/11/01/google-visualization-api:-manchester-gtug-talk/"/>
      <updated>2010-11-01T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2010/11/01/google-visualization-api:-manchester-gtug-talk/</id>
      <content type="html">
        <![CDATA[
      <p>I gave a talk at this month’s <a href="www.gtugs.org/chapter.jsp?id=1023">Manchester Google Technology User Group</a> meetup on the <a href="http://code.google.com/apis/charttools/index.html">Google Visualization API</a>.</p>
<iframe frameborder="0" height="342" src="https://docs.google.com/present/embed?id=dcjt66v8_195f4r5c6gd" width="410"></iframe>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Not your father&#39;s SAP</title>
      <link href="https://qmacro.org/blog/posts/2010/10/11/not-your-father&#39;s-sap/"/>
      <updated>2010-10-11T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2010/10/11/not-your-father&#39;s-sap/</id>
      <content type="html">
        <![CDATA[
      <p>I had the good fortune to be invited to SAP’s <a href="http://wiki.sdn.sap.com/wiki/display/events/Innovation+Weekend">Innovation Weekend 2010</a> in Berlin, a pre-cursory hackfest and idea exchange in the two days prior to the main <a href="http://www.sapteched.com/emea/">SAP TechEd</a> event at Messe Berlin. Walking around talking to people thinking, discussing, designing and building innovative prototypes covering a huge range of topics, I <a href="http://twitpic.com/2wnjre">came across</a> Phil Kisloff (<a href="http://twitter.com/kisloff">@kisloff</a>) and Fred Verheul (<a href="http://twitter.com/fredverheul">@fredverheul</a>) who were building something using Composite Designer (part of the <a href="http://www.sap.com/platform/netweaver/cafindex.epx">Composite Application Framework</a>). “That doesn’t look much like SE38!” I thought.</p>
<p>Sure, SAP have been developing non-core software, services and processes for years now. But it hasn’t been until today that the realisation has truly hit home for me. The only team I’ve found that’s building anything in ABAP here is … ours. Ok, <a href="http://twitter.com/wolf_gregor">Gregor Wolf</a> told me about some very interesting work on <a href="/tag/webhooks/">Webhooks</a> last night which involved some ABAP coding, but that was probably more out of necessity rather than anything else. BPM is on everyone’s lips. Moreover, to speak of SAP’s Java server offering is already passé and almost uninteresting.</p>
<p>And then there’s River.</p>
<p>River is a project that has been collaboratively built by the SAP Labs teams in Israel and Palo Alto. I talked to Lior Schejter who told me more about it. It’s a platform-as-a-service offering that’s remotely related to Google’s App Engine (although with more UI) and that allows the development, customisation, hosting and running of “small” applications. It’s hosted on Amazon EC2 and uses Tomcat to serve. Applications are built in the flow-logic style of BPM, and consist of user interfaces (what I saw was Flash-based) with business logic controlling the processes in the back end. There’s a UI builder, and the business logic can be built and modified either diagramatically or with Javascript, which runs on the server.</p>
<p>Even though River is arguably in beta right now, what I saw was very impressive. It’s also fair to say that there are a number of milestones that the team are working towards. Online editing and development is essentially a <textarea/> element right now. There’s no source code repository integration or version control. Yes, I know what you’re saying, and I agree: River could learn and take from the fascinating and fabulous <a href="https://bespin.mozillalabs.com/">Bespin</a> (now ‘<a href="https://mozillalabs.com/skywriter/">SkyWriter</a>‘) project. In fact, there’s a loose connection already: at last year’s SAP TechEd in Vienna I got Bespin connected to, and checking in and out from, <a href="http://wiki.sdn.sap.com/wiki/display/CodeExchange/Code+Exchange+Platform">SAP’s Code Exchange</a> platform. Furthermore, offering the ability to debug Javascript than runs on the server is not a simple task (even <a href="http://code.google.com/googleapps/appsscript/">Google Apps Script</a> doesn’t have that yet, and developing and debugging for apps destined for Google’s App Engine is done locally using the <a href="http://code.google.com/appengine/downloads.html">SDK</a>). Lior told me of a very interesting and so far successful approach to solving this problem: run and debug the Javascript locally and use a proxy for the River-specific API calls.</p>
<p>There is of course plenty more to say about River, as you can imagine. The project is very interesting and they’re attempting to address hard problems and built a very current offering. But what struck me the most about River is the technologies they’re using, and the audiences and customers that SAP are addressing. These are expanding all the time. Lior even related to me that it had been difficult for his team to find a person who knew ABAP, to help with some of the (minor!) experimental BAPI backend integration!</p>
<p>A far cry from the days of old. <a href="http://twitter.com/qmacro/status/27016657285">This is not your father’s SAP</a>.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Getting started with Gmail Contextual Gadgets</title>
      <link href="https://qmacro.org/blog/posts/2010/06/21/getting-started-with-gmail-contextual-gadgets/"/>
      <updated>2010-06-21T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2010/06/21/getting-started-with-gmail-contextual-gadgets/</id>
      <content type="html">
        <![CDATA[
      <p><a href="http://code.google.com/apis/gmail/gadgets/contextual/">Gmail contextual gadgets</a> were announced by Google a few months back and were <a href="http://googleenterprise.blogspot.com/2010/05/putting-email-in-context-with-gmail.html">made available to developers in May this year</a>, just before making a <a href="http://code.google.com/events/io/2010/sessions/deep-dive-gmail-contextual-gadgets.html">strong appearance at Google IO</a>.</p>
<p>Expanding upon the concept of an earlier contextual project called <a href="/blog/posts/2003/07/11/dashboard-a-compelling-articulation-for-realtime-contextual-information-2/">Dashboard</a>, Gmail contextual gadgets give a clear message that email, as a universal information carrier and workflow pipeline, is not only here to stay, but is being given a new lease of life as it plays a foundational role in Google’s enterprise scale application platform strategy. A Gmail contextual gadget enhances email messages by providing information or functionality that is relevant to the context of that email … right inside the email itself. Context is exposed by content extractors in the form of ‘clues’ in Gmail (akin to Dashboard’s ‘<a href="http://www.ibm.com/developerworks/xml/library/x-desktop/index.html#h2">cluepackets</a>‘) and matched content is provided to the gadget at runtime.</p>
<p>Extractors, optional filters, and scope declarations (used by the installer of a gadget to decide whether to install or not based upon privacy and security requirements) are defined in a manifest, along with references to the gadgets themselves, via gadget spec files, that are to be triggered.</p>
<p><img src="/images/2010/06/additnow.png" alt="additnow"></p>
<p>What makes these Gmail contextual gadgets even more attractive is the Google Apps Marketplace, where developers can make gadgets available, and consumers can use the “<a href="https://www.google.com/support/a/bin/answer.py?hl=en&amp;answer=172482">Add it now</a>” button to start using them in their own domains.</p>
<p>Developing Gmail contextual gadgets is relatively straightforward, but there are a few things that might cause you to stumble, such as documentation (we’re early adopters!), cacheing issues and not being completely aware of what match information is provided.</p>
<p>Despite the advent of Wave and Buzz, it’s obvious that Google sees, rightly in my opinion, a tremendous amount of value in the venerable email application, and I thought I’d take the opportunity to document my first attempt at enhancing the contextual experience with a Twitter-flavoured Gmail contextual “Hello World” gadget.</p>
<p><strong>Twitter User Info</strong></p>
<p>‘Twitter User Info’ is a Gmail contextual gadget that provides basic info about Twitter users whose Twitter handles appear in the email Subject line. In this example, the profile image and basic Twitter user info is shown for Joseph, whose Twitter handle <a href="http://twitter.com/@jcla1">@jcla1</a> appears in the Subject of the email from Michelle:</p>
<p><img src="/images/2010/06/twitteruserinfoannotated.png" alt="Twitter User Info for @jcla1"></p>
<p>The contextual gadget appears directly below the email body, and starts with the title and description “Twitter – User Info” (defined in the gadget spec) and contains HTML showing the Twitter info.</p>
<p><strong>Components and hosting</strong></p>
<p>What are the components that make up this gadget? First of all, we need the manifest and the gadget spec itself. To support the dynamic creation of contextual content in the email, we will be using <a href="http://jquery.com/">jQuery</a>, not only because it’s a fantastically useful and powerful library for manipulating web page content, but also because of Google’s intention to use <a href="http://code.google.com/p/google-caja/">Caja</a> to provide a layer of protection for the user of Javascript-based apps. The jQuery library is listed as one of the development frameworks that will be compatible with Caja. There’s also a tiny bit of CSS.</p>
<p>Beyond that, we will of course be making a call to one of the <a href="http://dev.twitter.com/">Twitter API</a> endpoints, and calling upon one of my favourite HTTP tools <a href="http://postbin.org">PostBin</a>, to dump Google gadget libary method return values for inspection.</p>
<p>While the manifest is uploaded to Google when you make your gadget available in the Marketplace, your gadget spec needs to be accessible online (so the gadget container can pull it in at the appropriate moment). There are many options for hosting content online, but for this experiment I decided to create a new App Engine application ‘<a href="http://qmacro-contextual.appspot.com">qmacro-contextual</a>‘ and host the gadget and CSS as static files there (I’m also storing the manifest there too). This might appear as overkill, but as I progress further into contextual gadget development, I will most definitely want to do some of the heavy app lifting outside of the actual gadget spec, and for this, App Engine is ideal.</p>
<p>Here’s part of the app.yaml file showing the handler declarations for the static manifest, gadget and CSS resources:</p>
<pre><code>application: qmacro-contextual version: 1 runtime: python api_version: 1 handlers: - url: /manifests static_dir: manifests expiration: 1m - url: /gadgets static_dir: gadgets expiration: 1m - url: /css static_dir: css - url: .* script: main.py&lt;span style=&quot;font-family: Georgia, 'Times New Roman', 'Bitstream Charter', Times, serif; line-height: 19px; white-space: normal; font-size: 13px;&quot;&gt; &lt;/span&gt;
</code></pre>
<p>Note that I’ve specified an expiration period of 1 minute for the manifest and gadget spec directories. This is for development only, so that I can be sure that at least App Engine will serve up the resources with a very short shelf life, so that I can tweak the definitions and code and have them reloaded by the gadget container.</p>
<p>Incidentally, there’s also a URL query string parameter you can specify that causes gadget cacheing to be turned off – just append “?nogadgetcache=1″ to the Gmail URL and this should do the trick.</p>
<p><strong>The Manifest</strong></p>
<p>I followed the Developer’s Guide to construct the manifest, which you can see here in full:</p>
<p><a href="http://qmacro-contextual.appspot.com/manifests/twitter-user-info.manifest.xml">http://qmacro-contextual.appspot.com/manifests/twitter-user-info.manifest.xml</a></p>
<p>The interesting parts of the manifest which relate to Gmail contextual gadgets are the Extractor, Gadget and Scope declarations.</p>
<p>The Extractor declaration looks like this:</p>
<pre><code>&lt;!-- EXTRACTOR --&gt; &lt;Extension id=&quot;SubjectExtractor&quot; type=&quot;contextExtractor&quot;&gt; &lt;Name&gt;Twitter IDs in Subject&lt;/Name&gt; &lt;Url&gt;google.com:SubjectExtractor&lt;/Url&gt; &lt;Param name=&quot;subject&quot; value=&quot;.*@[a-z]+.*&quot;/&gt; &lt;Triggers ref=&quot;TwitterUserInfoGadget&quot;/&gt; &lt;Scope ref=&quot;emailSubject&quot;/&gt; &lt;Container name=&quot;mail&quot;/&gt; &lt;/Extension&gt;
</code></pre>
<p>Each extractor (there can be more than one for any given manifest) is defined with an id and name and references a particular Extractor ID which does the work of pulling the info out of the email. Here we’re referencing <a href="http://code.google.com/apis/gmail/gadgets/contextual/#extractor">google.com:SubjectExtractor</a>, which is an extractor provided by Google for pulling out the Subject line. Google will be opening up opportunities for developers to build their own extractors if the pre-defined ones don’t provide what we need.</p>
<p>The google.com:SubjectExtractor is defined as returning one output field, @subject, which is made available to the gadget to do with as it wishes – more on that later. It also has one scope defined, tag:google.com,2010:auth/contextual/extractor/SUBJECT, which must be linked with a scope definition in a later section of the manifest.</p>
<p>We can see the reference to the @subject output field in the <Param/> tag. This is a filter definition, which says here that we only want the extractor to trigger the gadget if the email subject matches the given regular expression – i.e. if it contains a Twitter handle. Clearly, we want to avoid triggering gadgets when there’s nothing for the gadget to do; not only to avoid unnecessary almost-empty gadget displays, but also for performance reasons; without a filter, this extractor would fire for every email you looked at. The filter is optional, but Google recommends that even if you want to match on every occurrence, you put an explicit catch-all regular expression “.*” to make that clear.</p>
<p>The reference to “TwitterUserInfoGadget” points to the next declaration, that of the gadget itself:</p>
<pre><code>&lt;!-- GADGET --&gt; &lt;Extension id=&quot;TwitterUserInfoGadget&quot; type=&quot;gadget&quot;&gt; &lt;Name&gt;Twitter User Info contextual gadget&lt;/Name&gt; &lt;Url&gt;http://qmacro-contextual.appspot.com/gadgets/twitter-user-info.gadget.xml&lt;/Url&gt; &lt;Container name=&quot;mail&quot;/&gt; &lt;/Extension&gt;
</code></pre>
<p>The id of the gadget, “TwitterUserInfoGadget” is what is referred to in the <Triggers/> tag of the previous Extractor declaration. The gadget is a resource, located at</p>
<p><a href="http://qmacro-contextual.appspot.com/gadgets/twitter-user-info.gadget.xml">http://qmacro-contextual.appspot.com/gadgets/twitter-user-info.gadget.xml</a></p>
<p>and this is what will be requested by the Gmail contextual gadget container to pull in the gadget spec. Here’s part of an App Engine log record showing the gadget spec being fetched:</p>
<p><img src="/images/2010/06/feedfetcherpullsgadget1.png" alt="Google Feedfetcher pulls gadget spec"></p>
<p>The name declared in this Gadget declaration (“Twitter User Info contextual gadget”), along with the name in the Extractor declaration (“Twitter IDs in Subject”) and the general name and description from elsewhere in the manifest, are text items that appear to the Google Apps domain administrator when selecting the gadget for installation, like this:</p>
<p><img src="/images/2010/06/appoverview.png" alt="App Overview"></p>
<p>Finally, we have the Scope declaration, which was indicated in the Extractor declaration earlier. This is “emailSubject”, and contains the scope URI defined for the extractor being used. There may be more than one scope for a given extractor; if this is the case, they must be each defined separately and explicitly.</p>
<!-- SCOPE --> <Scope id="emailSubject"> <Url>tag:google.com,2010:auth/contextual/extractor/SUBJECT</Url> <Reason>This application looks at the subject of each email looking for Twitter handles</Reason> </Scope>
<p>This information appears during gadget installation, where the administrator can review what the gadget will access, and decide whether or not to proceed:</p>
<p><img src="." alt="Grant Data Access"></p>
<p>Once you’ve defined your manifest, you must upload it as part of the overall Listing Information required to offer a gadget or an app on Google Apps Marketplace. You have to sign up to become a vendor with Google in order to do this. It’s free, as is the listing of unpublished test gadgets and apps, so you can experiment all you need to.</p>
<p><img src="." alt="Manifest"></p>
<p><strong>The Gadget Spec – Declarations</strong></p>
<p>Now we’ve dealt with the manifest, it’s time to turn our attention to the gadget spec. Remember that the gadget is triggered when we get a Subject line that contains one or more Twitter handles. If you’ve developed a gadget before, for iGoogle, for example, this should be familiar to you. First we have the ModulePrefs section where we declare basic gadget information and the features that we require. There’s a feature specific to Gmail contextual gadgets that we must declare here. Then we have the gadget code itself, in a CDATA section.</p>
<p>Here’s what the ModulePrefs section looks like:</p>
<pre><code> &lt;ModulePrefs title=&quot;Twitter&quot; description=&quot;User Info&quot; height=&quot;50&quot; author=&quot;DJ Adams&quot; author_email=&quot;dj.adams@pobox.com&quot; author_location=&quot;Manchester&quot;&gt; &lt;Require feature=&quot;dynamic-height&quot;/&gt; &lt;Require feature=&quot;google.contentmatch&quot;&gt; &lt;Param name=&quot;extractors&quot;&gt; google.com:SubjectExtractor &lt;/Param&gt; &lt;/Require&gt; &lt;/ModulePrefs&gt;
</code></pre>
<p>The title and description in the module prefs shows up (”Twitter – User Info”) when the gadget is displayed at the bottom of the email. We define a height for the gadget which can be auto-adjusted later with the dynamic-height feature declared in this section too. A feature that’s specific to Gmail contextual gadgets, and that must be declared for all such gadgets, is google.contentmatch. In declaring this feature, you must list the Extractor id (or ids) that will be triggering this gadget.</p>
<p>The google.contentmatch feature gives us the facility we need to avail ourselves of the, ahem, content that was matched in this context. As you will see, we use the getContentMatches() method to do this.</p>
<p><strong>The Gadget Spec – Code</strong></p>
<p>With the ModulePrefs declarations out of the way, we get to the Javascript that breathes life into our gadget. The Javascript is defined in the <Content/> tag. The view type “card” is the only one supported by Gmail contextual gadgets right now.</p>
<pre><code>&lt;script type='text/javascript' src='http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js'&gt;&lt;/script&gt; &lt;script type=&quot;text/javascript&quot;&gt; // Expect subject as first element keyed by 'subject' matches = google.contentmatch.getContentMatches(); jQuery.post('http://qmacro-postbin.appspot.com/1jd620g', 'matches:' + JSON.stringify(matches)); var subject = matches[0]['subject']; // Only do something if we actually have a subject to work with if (subject) { // Pick out the twitter @handles and process them var handles = subject.match(/@[a-z0-9_]+/g); if (handles) { $('head').append('&lt;link rel=&quot;stylesheet&quot; href=&quot;http://qmacro-contextual.appspot.com/css/twitter-user-info.css&quot; /&gt;'); for (var i = 0; i &lt; handles.length; i++) { var user_resource = 'http://api.twitter.com/users/show/' + handles[i] + '.json?callback=?'; $.getJSON(user_resource, function(data) { jQuery.post('http://qmacro-postbin.appspot.com/1jd620g', 'userinfo:' + JSON.stringify(data)); var loc = &quot;&quot;; if (data.location) { loc = ' (' + data.location + ')'; } var tw_info = '&lt;table border=&quot;0&quot;&gt;' + '&lt;tr&gt;' + '&lt;td&gt;' + '&lt;a href=&quot;' + data.url + '&quot;&gt;' + '&lt;img src=&quot;' + data.profile_image_url + '&quot; /&gt;' + '&lt;/a&gt;' + '&lt;/td&gt;' + '&lt;td class=&quot;userinfo&quot;&gt;' + '&lt;a href=&quot;http://twitter.com/' + data.screen_name + '&quot;&gt;@' + data.screen_name + '&lt;/a&gt;' + '&lt;br /&gt;' + data.name + loc + '&lt;br /&gt;' + data.description + '&lt;/td&gt;' + '&lt;/tr&gt;&lt;/table&gt;'; jQuery(tw_info).appendTo('body'); }); } gadgets.window.adjustHeight(100); } } &lt;/script&gt;&lt;span style=&quot;font-family: Georgia, 'Times New Roman', 'Bitstream Charter', Times, serif; font-size: small;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;
</code></pre>
<p>First, we pull in the jQuery library with a <code>&lt;script/&gt;</code> tag, and then we’re off with our gadget code.</p>
<p>We use the google.contentmatch.getContentMatches() method to pull in the matches supplied to us by the Extractor. One of my favourite phrases is “<a href="http://en.wikiquote.org/wiki/Only_Fools_and_Horses#Chain_Gang_.5B6.3.5D">let the dog see the rabbit</a>” – let’s have a look at the data, in this case. What does the getContentMatches() actually return? What does it look like? This is where the rather useful PostBin comes in to play. When we get the response from the call to getContentMatches(), encode it into a JSON string form with JSON.stringify() and bung the whole lot to a Postbin too see. Easy! Of course, this is only appropriate for development and debugging – I’d remove it for a production gadget. By the way, I’m running my own instance of Postbin – you can <a href="http://github.com/progrium/postbin">run you own instance</a> too.</p>
<p><img src="/images/2010/06/matchesinpostbin1.png" alt="Matches in Postbin">So from looking at what we get, we can see that what we’re after is the value of the ’subject’ key in the first element of the matches array.</p>
<p>By definition, we’re only instantiated because there was a Twitter handle in the Subject. There could be more than one, of course. After collecting them into a handles array, we’re ready to process each one. First, though – we pull in the CSS resource to the current document. The resource is served as a static file from the App Engine app:</p>
<p><a href="http://qmacro-contextual.appspot.com/css/twitter-user-info.css">http://qmacro-contextual.appspot.com/css/twitter-user-info.css</a></p>
<p>For each of the Twitter handles, we want to display some basic info, as shown in the screenshot earlier. To retrieve this, we make a simple call to the Twitter API. Specifically,</p>
<p><a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-users%C2%A0show">http://api.twitter.com/users/show/[Twitter-handle].json?callback=</a>?</p>
<p>will give us a nice chunk of JSON with the information we want, like this:</p>
<pre><code>{ &quot;description&quot;:&quot;Developer and Linux Expert&quot;, &quot;screen_name&quot;:&quot;Jcla1&quot;, &quot;url&quot;:&quot;http://www.pipetree.com/josephadams&quot;, &quot;name&quot;:&quot;Joseph Adams&quot;, &quot;profile_image_url&quot;:&quot;http://a1.twimg.com/profile_images/106288960/JosephWithLomaxCar_normal.jpg&quot;, &quot;location&quot;:&quot;Krefeld,Germany&quot;, ... }
</code></pre>
<p>I’d originally started with the<a href="http://plugins.jquery.com/project/jtwitter"> jTwitter</a> jQuery plugin but found that it didn’t quite do what I wanted, and in any case using the Twitter API from jQuery is straightforward anyway. But thank you <a href="http://plugins.jquery.com/user/9986">uzbekjon</a> for getting me started.</p>
<p>You can see from the code that I’m making more use of Postbin, by gratuitously dumping the results of the Twitter API call in there too. I like to see what I’m dealing with. <a href="http://search.cpan.org/perldoc?Data::Dumper">Data::Dumper</a> is my alltime favourite Perl module, if you hadn’t guessed.</p>
<p>Once we have the info from Twitter, it’s just a simple matter of constructing some HTML, making use of the CSS via the ‘userinfo’ class, and appending that to the email. Job done!</p>
<p>I’ve pushed my fledgeling <a href="http://github.com/qmacro/qmacro-contextual">qmacro-contextual App Engine project to Github</a>, so you can take a look and create your own “Hello World” Gmail contextual gadget.</p>
<p>Share and enjoy!</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Scratching an itch - Magic The Gathering card info</title>
      <link href="https://qmacro.org/blog/posts/2010/03/04/scratching-an-itch-magic-the-gathering-card-info/"/>
      <updated>2010-03-04T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2010/03/04/scratching-an-itch-magic-the-gathering-card-info/</id>
      <content type="html">
        <![CDATA[
      <p>Well over 10 years ago I bought a box set of <a href="http://www.magicthegathering.com">Magic The Gathering</a> (MTG) cards. <img src="/images/2010/03/mtg-215x300.jpg" alt="image"> I wasn’t really sure what they were, but they looked fascinating. Unfortunately, they gathered dust after a while, mostly because there wasn’t anyone else to play against, and I didn’t understand the rules properly anyway. Fast forward to 2009. My son <a href="http://www.pipetree.com/josephadams/">Joseph</a>, having discovered and dusted off the box set, taught me how to play, at at Starbucks cafe over a few hot chocolates and cappuccinos on a cold winter afternoon.</p>
<p>Hooked!</p>
<p>Since then we’ve been fans of the game of endless possibilities and ever changing scope and interest, and almost regulars at our local MTG store, <a href="http://www.fanboy3.co.uk">Fan Boy Three</a> on Newton St in Manchester.</p>
<p>So to educate myself in all thing Magic, I turned to MTG’s official website, Wizards of the Coast’s <a href="http://www.wizards.com/Magic/Multiverse/">The Multiverse</a>, and in particular, to their incredibly prolific set of column authors on the <a href="http://www.wizards.com/Magic/Magazine/Default.aspx">Daily MTG</a>. More <a href="http://www.wizards.com/Magic/Magazine/Archive.aspx?tag=news,feature,column,event">articles</a>on design, deck construction, strategy and match reports than you could shake a <a href="http://www.wizards.com/Magic/TCG/Article.aspx?x=magic/planeswalkers/week4">Planeswalker</a> card at.</p>
<p>But while I <a href="http://www.sdn.sap.com/irj/scn/weblogs?blog=/pub/wlg/16597">read a lot</a>, the majority of it is on paper, in the bath, on the train, and <img src="/images/2010/03/skirkridgeexhumer-215x300.jpg" alt="image"> soaking up the countless minutes lost at the start of every meeting, while you wait for people to get started, fail to get the projector working, fetch coffees or fiddle with the air conditioning. And on paper, the MTG articles are good, but for a novice like me, there’s something missing. The articles make lots of references to cards by name, and when reading online, there’s a nice popup of the card details so you can see what the author is talking about. But on paper?</p>
<p>So I had an itch to scratch. What I wanted was an accompanying printout of the cards mentioned in any given Daily MTG article. So when the author referred to <a href="http://gatherer.wizards.com/Pages/Card/Details.aspx?name=Hedron%20Crab">Hedron Crab</a>, <a href="http://gatherer.wizards.com/Pages/Card/Details.aspx?name=Baloth%20Woodcrasher">Baloth Woodcrasher</a> or <a href="http://gatherer.wizards.com/Pages/Card/Details.aspx?name=Oran-Rief,%20the%20Vastwood">Oran-Rief, the Vastwood</a> I would know what they were talking about.</p>
<p>I decided to use <a href="http://code.google.com/appengine">Google App Engine</a>, and have my Python HTTP responder in the cloud. I created a very simple app “mtgcardinfo”, part of my Github-hosted scratchpad area <a href="http://github.com/qmacro/gae-qmacro">gae-qmacro</a>. Given the URL of an MTG article, the app uses urlfetch() to go and get it, parses out the card names, and produces an HTML response with a whole load of image references. Luckily the card detail popups in the articles are powered by Javascript and are great indicators of card names for anyone who cares to wield a regex to look for them.</p>
<p>And of course to glue it all together, I used a <a href="http://en.wikipedia.org/wiki/Bookmarklet">bookmarklet</a>, so I could jump to the list of cards while directly in the article.</p>
<p>So if you’re interested, have a go: <a href="http://qmacro.appspot.com/mtgcardinfo">http://qmacro.appspot.com/mtgcardinfo</a>.</p>
<p>The combination of App Engine, Python, HTTP and Javascript is rapidly becoming my new Swiss Army Knife of choice in the web-based online world. And the best thing? I’m teaching Joseph this stuff, and not only is he incredibly good at it, he <em>loves</em> it!</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Mainframes and the cloud - everything old is new again</title>
      <link href="https://qmacro.org/blog/posts/2009/09/09/mainframes-and-the-cloud-everything-old-is-new-again/"/>
      <updated>2009-09-09T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2009/09/09/mainframes-and-the-cloud-everything-old-is-new-again/</id>
      <content type="html">
        <![CDATA[
      <p>Cloud computing, virtual machines. It’s big business. Amazon has its <a href="http://aws.amazon.com/ec2/">Elastic Compute Cloud</a> (EC2) which provides “<em>resizable compute capacity in the cloud</em>“, Microsoft has <a href="http://www.microsoft.com/azure/default.mspx">Azure</a>, providing “<em>on-demand compute and storage to host, scale, and manage Web applications on the Internet</em>” and Google’s offering is <a href="http://code.google.com/appengine/">App Engine</a> which offers “<em>the ability to build and host web applications on <em>Google’s</em> infrastructure</em>“. As you might know, I’m personally very <a href="/tag/appengine/">taken with</a> App Engine.</p>
<p>The offerings are slightly different – for example, while EC2 is bare virtual hardware, App Engine is a web application platform in the cloud. But they all have similar pricing arrangements, based generally on uptime or CPU time, I/O  and storage.</p>
<p>Does this seem familiar to you? It does to me, but then again, I did just turn 0x2B this month. In 1988 I was working in the Database Support Group at a major energy company in London, looking after the SAP R/2 databases, which were powered by IMS DB/DC, on MVS – yes, IBM big iron mainframes. I still look back on those days with <a href="http://radar.oreilly.com/2005/11/burn-in-7-dj-adams.html">fond memories</a>.</p>
<p>In reviewing some 3rd party software, I wrote a document entitled “<strong>BMC Software’s Image Copy Plus: An Evaluation</strong>“. BMC’s Image Copy Plus was a product which offered faster image copies of our IMS DB (VSAM) databases. (Image Copy Plus, as well as IMS, is <a href="http://www.bmc.com/products/product-listing/23026-2064-1201.html">still around</a>, over 20 years on! But that has to be the subject of another post).</p>
<p>One of the sections of the evaluation was to compare costs, as well as time — by how much would the backup costs be reduced using BMC’s offering?</p>
<p>And have a guess on what the cost comparison was based? Yes. CPU time, I/O (disk and tape <a href="http://www.reference.com/browse/wiki/EXCP">EXCP</a>s) and actual tapes.</p>
<p><img src="/images/2018/08/IMG_20180806_100115.jpg" alt="mainframe job billing comparison"></p>
<p>Everything old is new again.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>SAP and Google Wave - Conversation Augmentation</title>
      <link href="https://qmacro.org/blog/posts/2009/09/08/sap-and-google-wave-conversation-augmentation/"/>
      <updated>2009-09-08T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2009/09/08/sap-and-google-wave-conversation-augmentation/</id>
      <content type="html">
        <![CDATA[
      <p>It’s been pretty much six years to the day since <a href="/tag/dashboard/">I last wrote here about Dashboard</a>, Nat Friedman’s project and implementation of a realtime contextual information system. So I thought it fitting to make a short demo showing integration between Google Wave and SAP, inspired by the cluepacket-driven style shown so nicely with Dashboard.</p>
<p>I got my Wave Sandbox account a week or so ago, and have had a bit of time to have a look at how robots and gadgets work — the two main Wave extension mechanisms. To get my feet wet, I built a robot, which is hosted in the cloud using Google App Engine, another <a href="/tag/appengine/">area of interest to me</a>, and the subject of this weblog entry. I used Python, but there’s also a Java client library available too. You can get more info in the <a href="http://code.google.com/apis/wave/guide.html">API Overview</a>.</p>
<p>What this robot does is listen to conversations in a Wave, automatically recognising SAP entities and augmenting the conversation by inserting extra contextual information directly into the flow. In this example, the robot can recognise transport requests, and will insert the request’s description into the conversation, lending a bit more information to what’s being discussed.</p>
<p>The robot recognises transport requests by looking for a pattern:</p>
<p>trkorr_match = re.search(' (SAPKw{6}|[A-Z0-9]{3}Kd{6}) ', text)</p>
<p>In other words, it’s looking for something starting SAPK followed by six further characters, or something starting with 3 characters, followed by a K and six digits (the more traditional customer-orientated request format). In either case, there must be a space before and a space following, to be more sure of it being a ‘word’.</p>
<p>How does it retrieve the description for a recognised transport request? Via a simple REST-orientated interface, of course :-) I use the excellent Internet Communication Framework (ICF) to build and host HTTP handlers so I can <a href="https://www.sdn.sap.com/irj/scn/weblogs?blog=/pub/wlg/584">expose SAP functionality and data as resources in a uniform and controlled way</a>. Each piece of data worth talking about is a <a href="/blog/posts/2009/06/29/information-vs-behaviour/">first class citizen on the web</a>; that is, each piece of data is a resource, and has a URL.</p>
<p>So the robot simply fetches the default representation of the recognised request’s ‘description’ resource. If the request was NSPK900115, the description resource’s URL would be something like:</p>
<p>http://hostname:port/transport/request/NSPK900115/description</p>
<p>Once fetched, the description is inserted into the conversation flow.</p>
<p><object data="http://www.youtube.com/v/G7W2M6H3OQo&hl=en&fs=1&" height="340" type="application/x-shockwave-flash" width="560"><param name="allowFullScreen" value="true"></param><param name="allowscriptaccess" value="always"></param><param name="src" value="http://www.youtube.com/v/G7W2M6H3OQo&hl=en&fs=1&"></param><param name="allowfullscreen" value="true"></param></object></p>
<p><a href="http://www.youtube.com/watch?v=G7W2M6H3OQo">http://www.youtube.com/watch?v=G7W2M6H3OQo</a></p>
<p>(<a href="http://weblogs.sdn.sap.com/pub/wlg/15721">Originally written on SDN</a> but republished here because of portal access issues)</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Book review: &quot;SAP Business ONE Implementation&quot;</title>
      <link href="https://qmacro.org/blog/posts/2009/08/31/book-review:-&quot;sap-business-one-implementation&quot;/"/>
      <updated>2009-08-31T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2009/08/31/book-review:-&quot;sap-business-one-implementation&quot;/</id>
      <content type="html">
        <![CDATA[
      <p>A short while ago I was sent a review copy of “<a href="http://www.packtpub.com/sap-business-1-implementation/book">SAP Business ONE Implementation</a>”, by Wolfgang Niefert, published by Packt Publishing. On receipt, I skimmed through it, and my first impressions were very favourable. I’m now reading through it a second time as I sit with a cup of tea and a slice of cake in North Wales on a Bank Holiday weekend, and I’m happy to say that my opinion hasn’t changed.</p>
<p>To give you a bit of background, I’m <a href="//qmacro.org/about/">an SAP veteran</a> of 22 years – starting out with R/2 version 4.1d in 1987, moving through R/3 in the mid-90’s and on to Enterprise and beyond. But this is the first time I’ve studied SAP Business ONE in any detail. So while I have a lot of experience of SAP’s traditional products, I’m approaching SAP Business ONE, and “SAP Business ONE Implementation” more as the potential owner of a small business.</p>
<p>I certainly haven’t been disappointed. “SAP Business ONE Implementation” is written “for technically savvy business owners, entrepreneurs and departmental managers”. And I think by and large the book does a great job of reaching out to and connecting with exactly that audience. I <span style="text-decoration: none;"><span><em>was</em> expecting the book to be a fairly technically orientated implementation how-to. But it is more than that. It takes you from business first principles, connecting well at the level of sales, delivery, inventory, warehousing, manufacturing and other business challenges. It explains how SAP Business ONE is designed to address those challenges, and guides you through installation, implementation and some configuration of the system. Once the basics have been established, it moves further to cover project planning, reporting and analysis, business process analysis, customer relationship management, logistics &amp; supply chain management, contract management, and ends up addressing, albeit briefly, more complex reporting tools and topics, data migration, and electronic commerce.</span></span></p>
<p>The book has fewer than 300 pages. A book that addresses the areas that this book does could easily be twice that size. But that’s where this book does well. It’s an approachable, undaunting and really rather good introduction to running your business with SAP Business ONE. The writing style is very easygoing, and informative without being patronising. There are plenty of examples, and all the screenshots you’d need. It doesn’t try to be a reference book. It does try to be a sort of hybrid guide to solving the business <em>and</em> technical challenges of running a small or medium sized company using SAP software, and I would say that it succeeds.</p>
<p>If you’re a small business owner considering stepping up and taking control of your business with SAP Business ONE, if you’ve already got SAP Business ONE and want to explore more application features at a high level, or if even if (like me) you’re an SAP hacker wanting to learn about what SAP Business ONE can do, then you could do a lot worse than grab a copy of this book.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Dealing with &quot;#blogtheft&quot; from SAP&#39;s Developer Network</title>
      <link href="https://qmacro.org/blog/posts/2009/08/28/dealing-with-&quot;blogtheft&quot;-from-sap&#39;s-developer-network/"/>
      <updated>2009-08-28T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2009/08/28/dealing-with-&quot;blogtheft&quot;-from-sap&#39;s-developer-network/</id>
      <content type="html">
        <![CDATA[
      <p>Recently it has <a href="http://search.twitter.com/search?q=%23blogtheft">come to people’s attention</a> that there is a website www.sap-abap4.com out there with a lot of very interesting content … which seems to have been <em>completely</em> “lifted” from the <a href="http://www.sdn.sap.com">SAP Developer Network</a> (SDN) and reproduced verbatim, except that in each case the original author name has been removed!</p>
<p>Lots of discussion is taking place how best to deal with this. One way (and I’m posting it as a blog entry as much for my memory’s sake as anything else) is to conditionally rewrite requests for images. I’m using Apache and therefore the <a href="http://httpd.apache.org/docs/2.0/mod/mod_rewrite.html">mod_rewrite</a> extension is my tool of choice.</p>
<p>It just so happens that there are a couple of screenshots in a recent SDN blog entry of mine “<a href="https://blogs.sap.com/2009/05/27/a-return-to-the-sdn-community-and-a-touch-of-javascript/">A return to the SDN community, and a touch of Javascript</a>” and these images are hosted on my own server.</p>
<p>So as a little test, I can control the requests for these images, rewriting those requests so that a different image is served depending on the request’s referrer — the URL of the page that the images are referenced on with an <code>&lt;img /&gt;</code> tag.</p>
<p>So with some mod_rewrite voodoo in a local <code>.htaccess</code> file:</p>
<pre><code>RewriteEngine On
RewriteCond %{HTTP_REFERER} ^http://www.sap-abap4.com
RewriteBase /qmacro/x
RewriteRule ^SdnPageTitle(Fixed|Broken)_small.jpg$ StolenContent.png [L]
</code></pre>
<p>I can send a <code>StolenContent.png</code> image, if the referrer is from the rogue site.</p>
<p>The result of the rewrite is that when viewed on SDN, the blog entry looks fine, and the screenshot images look as they’re supposed to:</p>
<p><img src="/images/2009/08/screenshot-sdn3.jpg" alt="Images appear as they're supposed to"></p>
<p>But when the images are used on www.sap-abap4.com, they will appears differently:</p>
<p><img src="/images/2009/08/screenshot-sap-abap41.jpg" alt="Image appears differently"></p>
<p>So there you have it. It’s not a complete solution to the problem by any means, but it at least will alert unsuspecting readers of that website to what's happening (if you’re testing yourself, you might have to refresh the pages in your browser, as it will probably have cached the first version of each image). Perhaps the SAP community network team can apply this technique for the images hosted on SDN.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Command lines of the future, and simplicity of integration</title>
      <link href="https://qmacro.org/blog/posts/2009/08/21/command-lines-of-the-future-and-simplicity-of-integration/"/>
      <updated>2009-08-21T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2009/08/21/command-lines-of-the-future-and-simplicity-of-integration/</id>
      <content type="html">
        <![CDATA[
      <p>This is a bit of a hand-wavy post, but I wanted to get my thoughts down. Recently there’s been a spate of interest around interaction with devices, applications and systems ... via a chat-style interface. This is nothing new, of course. Bots have existed on the IRC networks for a long time. The venerable <a href="http://www.foo.be/docs/tpj/issues/vol3_2/tpj0302-0002.html">Purl</a>, an <a href="http://en.wikipedia.org/wiki/Infobot">infobot</a>, was a particular favourite of mine. When instant messaging (IM) came along, we had a new chat interface – which took the form of one-on-one or conference (‘group’) chat. With <a href="http://www.jabber.org/">Jabber</a> (XMPP), ‘Chatbot’ was a favourite in the various conference rooms. Back in late 2002, I even wrote about Chatbot in a 2-part series “The Command Line of the Future” (“<a href="http://web.archive.org/web/20040203121753/http://www.openp2p.com/pub/a/p2p/2002/01/11/jabber_bots.html">Is Jabber’s Chatbot the Command Line of the Future?</a>” and The “<a href="http://web.archive.org/web/20031203031620/http://www.openp2p.com/pub/a/p2p/2002/02/08/chatbot_two.html">Command Line of the Future Part 2: Expanding Chatbot’s Repertoire</a>“):</p>
<blockquote>
<p>Consider for a moment what this command line of the future might look like. More and more people are online. More and more people are permanently connected, whether it be through DSL, cable, or 802.11 technology. And more and more of these people are communicating. Talking. Having conversations. In addition to email and Internet Relay Chat, or IRC, the (relatively) new kid on the block, Instant messaging (IM), is playing a huge part in facilitating these conversations. And in the same way that it’s common for us to have a command prompt or three sitting on our graphical desktop, it’s also becoming common to have chat windows more or less permanently open on the desktop too.</p>
</blockquote>
<blockquote>
<p>But when thinking of IM, why stop at conversations with people? The person-to-application (P2A) world isn’t the exclusive domain of the Web. Bots, applications or utilities that have their interface as a projection of a persona into the online chat world, are a great and fun way to bring people and applications together in a conversational way.</p>
<p>Interacting with a bot is the same as interacting with a person: type something to it and it replies. And what’s more, because of the similarities between a classic command-line prompt and that of a chat window, where you’re talking with a bot — both scenarios are text-based — interaction with a bot is scriptable.</p>
</blockquote>
<p>Forward to the present.</p>
<p>Just the other day, <a href="http://twitter.com/davemee">@davemee</a> and <a href="http://twitter.com/technicalfault">@technicalfault</a> alerted me to <a href="http://twitter.com/manairport">@manairport</a>, Manchester Airport’s online persona on Twitter, obviously yet another chat-style interface. You can interact with it via direct messages (DMs). You follow it, it will follow you back, and you’re away.</p>
<blockquote>
<p>me: d manairport be7217</p>
<p>manairport: Received request for information: be7217 manairport: Status of 17:40 flight BE7217 to Dusseldorf departing T3: Scheduled 17:40</p>
</blockquote>
<p>Nice and <a href="http://www.dopplr.com/trip/qmacro/825806">useful</a>!</p>
<p>And then just this morning, I read a weblog post on <a href="http://www.sdn.sap.com">SDN</a> entitled “<a href="https://www.sdn.sap.com/irj/scn/weblogs?blog=/pub/wlg/15521">SAP Enterprise Service and Google Wave</a>“. In it, the author talks about connecting Google Wave (you guessed it, yet another chat-style interface, amongst other things) with SAP, in particular enterprise ‘services’. In the short demo, order information from an SAP system is retrieved in a conversational way. The concept is great. The obvious issue with what’s shown in the demo (and I know it’s only a proof of concept) is that the bot responds with a data structure dump of information. What we’re looking for is something more, well, consumable by humans. Smaller, more distinct and addressable pieces of information that can be returned and be useful.</p>
<p>But what was more telling, at least to me, were the difficulties he described in connecting to the complex Enterprise Service backend in SAP:</p>
<blockquote>
<p>“… find the webservice … create a proxy … I did have some problems with calling the ES … On Appengine there are some limitations on what you can call of Java classes … From an architectural point I’m not real proved of the solution…”</p>
</blockquote>
<p>Hmm. Why does architecture have to be complex? Using Enterprise Services, using SOA, is more complex than it needs to be. There’s a reason why the web works. There’s a reason why Google designed App Engine’s backend infrastructure (including <a href="http://googleappengine.blogspot.com/2009/06/new-task-queue-api-on-google-app-engine.html">asynchronous task queues</a>) in a simple HTTP-orientated way. There’s a reason why the Wave robot protocol is based on simple HTTP mechanisms. There’s a reason why mechanisms like <a href="http://code.google.com/p/pubsubhubbub/">PubSubHubBub</a> and <a href="http://webhooks.pbworks.com/">Webhooks</a> are based on HTTP as an application protocol. Because simple works, and it works well.</p>
<p>Let’s come back to the “smaller, more distinct and addressable” issue. If we let ourselves be guided by a Resource Orientated Architecture (ROA) approach, rather than a Service Orientated Architecture (SOA) approach, we end up with simpler application protocols, flexible, reliable and transparent integration, and pieces of information that are addressable — and <a href="https://www.sdn.sap.com/irj/scn/weblogs?blog=/pub/wlg/584">usable</a> — first class citizens on the web. This is Twitter’s <a href="/blog/posts/2009/05/18/twitters-success/">killer feature</a>.</p>
<p>Enterprises suffer enough with complexity paralysis. We should endeavour to embrace the design of HTTP as an application protocol (which is what I’m doing with <a href="http://wiki.github.com/qmacro/coffeeshop">Coffeeshop</a>), rather than fight against it.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Coffeeshop screencast: HTTP conneg, resource representations and JSON</title>
      <link href="https://qmacro.org/blog/posts/2009/08/20/coffeeshop-screencast:-http-conneg-resource-representations-and-json/"/>
      <updated>2009-08-20T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2009/08/20/coffeeshop-screencast:-http-conneg-resource-representations-and-json/</id>
      <content type="html">
        <![CDATA[
      <p>After <a href="/blog/posts/2009/08/19/2nd-coffeeshop-resthttp-screencast/">yesterday’s screencast</a> showing the use of <a href="http://wiki.github.com/qmacro/coffeeshop">coffeeshop</a> from the command line, here’s one that expands upon the direction I’m taking the implementation, following the <a href="http://en.wikipedia.org/wiki/Representational_State_Transfer">REST</a>/HTTP philosophy. It shows, I hope, that embracing REST-orientated HTTP features, such as <a href="http://en.wikipedia.org/wiki/Content_negotiation">content negotiation</a> (“conneg”), and the concepts of <a href="http://bitworking.org/news/How_to_create_a_REST_Protocol">resources and representations</a>, gives you a fantastically flexible and straightforward application protocol to work with and be guided by. (I’m <a href="http://twitter.com/qmacro/status/3306694041">not</a> doing full-blown conneg, that will come later. But what I am doing works well for me).</p>
<p><object data="http://www.youtube.com/v/NhAWH2-Quuk&hl=en&fs=1&" height="340" type="application/x-shockwave-flash" width="560"><param name="allowFullScreen" value="true"></param><param name="allowscriptaccess" value="always"></param><param name="src" value="http://www.youtube.com/v/NhAWH2-Quuk&hl=en&fs=1&"></param><param name="allowfullscreen" value="true"></param></object></p>
<p><a href="http://www.youtube.com/watch?v=NhAWH2-Quuk">http://www.youtube.com/watch?v=NhAWH2-Quuk</a></p>
<p>In this shorter screencast, I continue on from where I left off — viewing the message detail resource in the web browser. I use conneg to request that same resource in <a href="http://www.json.org/">JSON</a> instead of HTML, and show how the JSON representation can be easily parsed, and the data reused, further along the <a href="/blog/posts/2009/05/18/twitters-success/">pipeline</a>.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>2nd coffeeshop REST/HTTP screencast</title>
      <link href="https://qmacro.org/blog/posts/2009/08/19/2nd-coffeeshop-resthttp-screencast/"/>
      <updated>2009-08-19T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2009/08/19/2nd-coffeeshop-resthttp-screencast/</id>
      <content type="html">
        <![CDATA[
      <p>To follow on from the <a href="/blog/posts/2009/07/28/first-coffeeshop-demo-screencast/">first coffeeshop demo screencast</a>, I thought I’d make another. This time it’s to highlight the fact that <a href="http://wiki.github.com/qmacro/coffeeshop">coffeeshop</a> is fundamentally a REST-orientated, HTTP-based pubsub application at the core, and not just a web-based application. Hopefully this comes across through the use of command-line HTTP tools to manipulate Channel, Subscriber and Message resources.</p>
<p>This time, the <a href="http://wiki.github.com/qmacro/coffeeshop">coffeeshop</a> instance I’m using is one running on Google’s <a href="http://code.google.com/appengine/">App Engine</a> cloud infrastructure — on <a href="http://appgallery.appspot.com/">appspot.com</a>.</p>
<p><object data="http://www.youtube.com/v/TI48cdpWOBg&hl=en&fs=1&" height="340" type="application/x-shockwave-flash" width="560"><param name="allowFullScreen" value="true"></param><param name="allowscriptaccess" value="always"></param><param name="src" value="http://www.youtube.com/v/TI48cdpWOBg&hl=en&fs=1&"></param><param name="allowfullscreen" value="true"></param></object></p>
<p><a href="http://www.youtube.com/watch?v=TI48cdpWOBg">http://www.youtube.com/watch?v=TI48cdpWOBg</a></p>
<p>In the screencast, I also make use of <a href="http://progrium.com/">Jeff Lindsay</a>‘s great <a href="http://www.postbin.org/">Postbin</a> tool for creating the recipient resources for the Subscribers. It was originally created to help debug <a href="http://blog.webhooks.org/">Webhooks</a>, but of course, a Subscriber is a sort of Webhook as well. (Postbin runs on App Engine too!).</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Google Wave, XMPP and complexity</title>
      <link href="https://qmacro.org/blog/posts/2009/08/09/google-wave-xmpp-and-complexity/"/>
      <updated>2009-08-09T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2009/08/09/google-wave-xmpp-and-complexity/</id>
      <content type="html">
        <![CDATA[
      <p>Anil Dash provides food for thought in his post “<a href="http://dashes.com/anil/2009/08/what-works-the-web-way-vs-the-wave-way.html">What Works: The Web Way vs The Wave Way</a>“. While I agree with him on the importance of the incremental approach to technology progression on the web (“The Web Way”), I do profess to have an intense interest in the pollination of XMPP into the HTTP space.</p>
<p>However, I must call him on this small statement:</p>
<blockquote>
<p>“<span class="caps">XMPP </span>is way too complicated for any normal human to deploy”</p>
</blockquote>
<p>Compared to what? I’m getting the idea that he’s referring to ‘simpler’ mechanisms such as HTTP or SMTP servers. Simpler? Has Anil modified a sendmail config file recently?</p>
<p>These days setting up an XMPP server is pretty straightforward. Then again, I am perhaps somewhat <a href="http://oreilly.com/catalog/9780596002022/">biased</a> :-)</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Webhooks postbin example for Coffeeshop</title>
      <link href="https://qmacro.org/blog/posts/2009/08/05/webhooks-postbin-example-for-coffeeshop/"/>
      <updated>2009-08-05T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2009/08/05/webhooks-postbin-example-for-coffeeshop/</id>
      <content type="html">
        <![CDATA[
      <p>There’s an interesting article “<a href="http://www.igvita.com/2009/06/29/http-pubsub-webhooks-pubsubhubbub/">HTTP PubSub: Webhooks and PubSubHubBub</a>” that covers working with webhooks and points to a great HTTP / webhook developer utility “<a href="http://www.postbin.org">PostBin</a>“, which:</p>
<blockquote>
<p>“lets you debug web lets you debug web hooks by capturing and logging the asynchronous requests made when events happen. Make a PostBin and register the URL with a web hook provider. All POST requests to the URL are logged for you to see when you browse to that URL.”</p>
</blockquote>
<p>The article also shows a very simple pubsub “Hello, World” script, <em>postbin.rb</em>, that nicely demonstrates the basic features of <a href="http://watercoolr.nuklei.com/">Watercoolr</a> — another HTTP-based pubsub mechanism.</p>
<p>So I thought I’d write the equivalent to <em>postbin.rb</em>, this time demonstrating the same features in <a href="http://wiki.github.com/qmacro/coffeeshop">Coffeeshop</a>. This way, we can see how things compare. It’s in Python, but that’s neither here nor there.</p>
<p>import httplib, urllib, sys</p>
<p>hubconn = httplib.HTTPConnection('localhost:8888')</p>
<p>hubconn.request(&quot;POST&quot;, &quot;/channel/&quot;) channel = hubconn.getresponse().getheader('Location') print &quot;Created channel %s&quot; % channel</p>
<p>hubconn.request(&quot;POST&quot;, channel + &quot;subscriber/&quot;,  urllib.urlencode({'resource': sys.argv[1]})) subscriber = hubconn.getresponse().getheader('Location') print &quot;Added subscriber %s&quot; % subscriber</p>
<p>while True:   print &quot;Post message:&quot;   msg = sys.stdin.readline()   hubconn.request(&quot;POST&quot;, channel, msg)   message = hubconn.getresponse().getheader('Location')   print &quot;Message published: %s&quot; % message</p>
<p>I’ve added some print statements to show what’s going on, and to highlight the HTTP resources created and utilised.</p>
<p>Here’s a sample execution:</p>
<blockquote>
<p><strong>python postbin.py <a href="http://www.postbin.org/1a5m8w0">http://www.postbin.org/1a5m8w0</a></strong> Created channel /channel/1/ Added subscriber /channel/1/subscriber/2/ Post message: <strong>Hello, Webhooks World!</strong> Message published: /channel/1/message/ahFxbWFjcm8tY[...]RgDDA Post message:</p>
</blockquote>
<p>This message <a href="http://www.postbin.org/1a5m8w0">appears in the PostBin bucket</a> as expected. Nice!</p>
<p>As well as showing how useful PostBin is, I hope this demonstrates how the basic features of <a href="http://wiki.github.com/qmacro/coffeeshop">Coffeeshop</a> work, and perhaps more importantly, shows you that the REST-orientated approach is straightforward and works well.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>First coffeeshop demo screencast</title>
      <link href="https://qmacro.org/blog/posts/2009/07/28/first-coffeeshop-demo-screencast/"/>
      <updated>2009-07-28T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2009/07/28/first-coffeeshop-demo-screencast/</id>
      <content type="html">
        <![CDATA[
      <p>To demonstrate some of the basic <a href="http://wiki.github.com/qmacro/coffeeshop">coffeeshop</a> features, I put together a screencast, and after getting over the shock of hearing my own voice in the recorded voiceover (<a href="https://www.sdn.sap.com/irj/scn/weblogs?blog=/pub/wlg/1669">last time</a> I chickened out and just typed what I wanted to say), I put it up on YouTube:</p>
<p><object data="http://www.youtube.com/v/1E_1B8TD6Kw&hl=en&fs=1&rel=0" height="340" type="application/x-shockwave-flash" width="560"><param name="allowFullScreen" value="true"></param><param name="allowscriptaccess" value="always"></param><param name="src" value="http://www.youtube.com/v/1E_1B8TD6Kw&hl=en&fs=1&rel=0"></param><param name="allowfullscreen" value="true"></param></object></p>
<p><a href="http://www.youtube.com/watch?v=1E_1B8TD6Kw">http://www.youtube.com/watch?v=1E_1B8TD6Kw</a></p>
<p>The screencast shows the creation of a channel, the addition of a couple of subscribers to that channel, the publishing of a message to that channel, and the subsequent delivery of that message to the subscribers. I draw attention to the use of the browser-based part of the implementation, and to the asynchronous nature of the message distribution (I had to do this anyway, as on the App Engine SDK development server, tasks are not executed automatically — you have to start them manually in the admin console).</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>&#39;Coffeeshop&#39; - lightweight HTTP-based pubsub</title>
      <link href="https://qmacro.org/blog/posts/2009/07/27/&#39;coffeeshop&#39;-lightweight-http-based-pubsub/"/>
      <updated>2009-07-27T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2009/07/27/&#39;coffeeshop&#39;-lightweight-http-based-pubsub/</id>
      <content type="html">
        <![CDATA[
      <p>‘<em><a href="http://wiki.github.com/qmacro/coffeeshop">Coffeeshop</a></em>‘ is a lightweight, REST-orientated HTTP-based publish/subscribe implementation that I’ve been working on for the last few days. It is a culmination of:</p>
<ul>
<li>an <a href="http://www.pipetree.com/jabber/jep-0024.html">early</a> and long-standing interest in pubsub</li>
<li>a fascination with using HTTP properly, i.e. as an application protocol, not a transport protocol</li>
<li>an excuse to experiment in the area of <a href="http://blog.webhooks.org/">webhooks<br>
</a></li>
<li>a desire to learn more about Google’s <a href="http://code.google.com/appengine/">App Engine</a> as a cloud platform, and more specifically as an HTTP runtime platform, much like SAP’s Internet Communication Framework (ICF)</li>
</ul>
<p>There seems to be a growing interest in pubsub and webhooks; one recent article in particular – “<a href="http://dashes.com/anil/2009/07/the-pushbutton-web-realtime-becomes-real.html">The Pushbutton Web: Realtime Becomes Real</a>” conveys a lot of the ideas behind these concepts.</p>
<p>With <a href="http://wiki.github.com/qmacro/coffeeshop"><em>coffeeshop</em></a>, entities — Channels, Subscribers and Messages — are resources, with URLs. You interact with entities using the appropriate HTTP methods. The implementation, being HTTP, is both browser-based (human-facing), and agent-based (program-facing). You can navigate the resources with your web-browser. You can interact with the resources with <a href="http://curl.haxx.se/">cURL</a>, <a href="http://search.cpan.org/~gaas/libwww-perl-5.830/bin/lwp-request">POST</a>, or your favourite HTTP library.</p>
<p>Here’s a simple example:</p>
<blockquote>
<h1>Create Channel: &gt; <strong>echo &quot;Test Channel&quot; | POST -Se http://giant:8888/channel/</strong> POST http://giant:8888/channel/ --&gt; 201 Created Location: /channel/5/ &gt; # Add to Channel a new Subscriber with &gt; # a callback resource of http://atom:8081/subscriber/alpha &gt; **echo &quot;name=alpha&amp;resource=http://giant:8081/subscriber/alpha&quot; ** &gt; <strong>| POST -Se http://giant:8888/channel/1/subscriber/</strong> POST http://giant:8888/channel/1/subscriber/ --&gt; 201 Created Location: /channel/1/subscriber/2/ &gt; # Publish a Message to the Channel &gt; <strong>echo &quot;hello, world&quot; | POST -Se http://giant:8888/channel/1/</strong> POST http://giant:8888/channel/1/ --&gt; 302 Moved Temporarily Location: http://giant:8888/channel/1/message/ahFxbWFjcm8tY29mZmVlc[...]RgIDA</h1>
</blockquote>
<p>As you can see from this example, POSTing to the Channel container resource</p>
<p>/channel/</p>
<p>creates a new Channel, POSTing to the Channel 1 subscriber container resource</p>
<p>/channel/1/subscriber/</p>
<p>creates a new Subscriber, and POSTing to the Channel 1 channel resource</p>
<p>/channel/1/</p>
<p>creates a new Message, which is delivered to the Channel’s Subscribers. The resource returned to a Message POST is that Message’s unique address</p>
<p>/channel/1/message/ahFxbWFjcm8tY29mZmVlc[...]RgIDA</p>
<p>where the details of that Message, including the Delivery status(es), can be seen.</p>
<p>For more information on the resources and methods, have a look at the <a href="http://wiki.github.com/qmacro/coffeeshop/resourceplan">ResourcePlan</a> page.</p>
<p>I’m using Google App Engine’s <a href="http://googleappengine.blogspot.com/2009/06/new-task-queue-api-on-google-app-engine.html">Task Queue API</a> to have the Messages delivered to their (webhook-alike) endpoints <strong>asynchronously</strong>.</p>
<p>The code is early and rough, and <a href="http://wiki.github.com/qmacro/coffeeshop">available on github</a>. You can download it and try it out for yourself locally or create an app on App Engine cloud domain appspot.com. I’ll probably publish a public-facing instance of this implementation in the next few days. All comments and feedback appreciated.</p>
<p>One last thing: I know of at least a couple of HTTP-based pubsub implementations: <a href="http://code.google.com/p/pubsubhubbub/">pubsubhubbub</a>, and <a href="http://watercoolr.nuklei.com/">Watercoolr</a>. Both are great, but for me, the former is a little complex (and ATOM-orientated), whereas the latter I thought could be more RESTian in its approach (hence <a href="http://wiki.github.com/qmacro/coffeeshop"><em>coffeeshop</em></a>).</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Information vs Behaviour</title>
      <link href="https://qmacro.org/blog/posts/2009/06/29/information-vs-behaviour/"/>
      <updated>2009-06-29T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2009/06/29/information-vs-behaviour/</id>
      <content type="html">
        <![CDATA[
      <p>I read a couple of chapters of two different books recently:</p>
<ul>
<li>Ch.5 of O’Reilly’s “<a href="http://oreilly.com/catalog/9780596517984/">Beautiful Architecture</a>“: <em>Resource-Oriented Architectures: Being ‘In The Web’</em> by Brian Sletten</li>
<li>Ch.1 of Manning’s “<a href="http://www.manning.com/rotem/">SOA Patterns</a>“: <em>Solving SOA Pains With Patterns</em> by Arnon Rotem-Gal-Oz, Eric Bruno, and Udi Dahan (from a free online Early Access Program)</li>
</ul>
<div>In these chapters, there were points made that stood out for me and underlined the fact that the two approaches of Resource Oriented Architecture (ROA) and Service Oriented Architecture (SOA) are mostly diametrically opposed, along the axes of **information** and **behaviour**.</div><div>I’ve been saying for a while, and indeed [recently](http://twitter.com/qmacro/status/2332492780), that the data in an enterprise is a key asset of any corporation, and should be treated as such. Information should be secure, available, and above all *addressable*. As Brian says:</div>> <div>“We like giving names to things because we are fundamentally name-oriented beings”</div>
<div>Information elements should be first class citizens on the web, not relegated to anonymous lumps of data only accessible indirectly through opaque service endpoints. Those IT departments that enable uniform, transparent, controlled and consistent access to a corporation’s data, especially across a complex system landscape, are the ones that are in line to give their business the greatest benefit.</div><div>So it was with great delight (and fervent agreement) that I read, in “Beautiful Architecture”, Brian’s eloquent description of how the IT industry uses</div>> <div>“the wrong abstractions internally, overemphasising our software and services and underemphasising our data”</div>
<div>and proceeds to describe how an information centric approach is more appropriate.</div><div>Then, only a day later, I read, in “SOA Patterns”, about the challenges of SOA — in particular:</div>> <div>“how do you solve the BI / SOA impedance mismatch of getting a centralised view of the data in an architectural style that encourages encapsulation and privacy?”</div>
<div>Impedance mismatch! Yes, my point entirely!</div><div>The *behaviour-focused* approach of SOA, diametrically opposed to the *information-focused* approach of ROA, is a natural barrier to leveraging an enterprise’s key asset — information, and in this case *Business Intelligence*.</div>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Tarpipe REST connector in 5 minutes</title>
      <link href="https://qmacro.org/blog/posts/2009/05/21/tarpipe-rest-connector-in-5-minutes/"/>
      <updated>2009-05-21T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2009/05/21/tarpipe-rest-connector-in-5-minutes/</id>
      <content type="html">
        <![CDATA[
      <p>Tarpipe implemented a REST connector a short while ago. This is something that I and others have been wanting for a while now, so it’s great news. The <a href="http://getsatisfaction.com/tarpipe/topics/a_rest_connector#reply_1059544">announcement</a> was quite short and didn’t have much detail. I like to see things visually, and I’m guessing others do too, so I decided to write a little handler to receive a sample request from the REST connector to dump it for inspection.</p>
<p>As Bruno showed in the announcement, this is what the REST connector looks like:</p>
<p><img src="/images/2009/05/tarpiperestconnector.png" alt="Tarpipe REST connector"></p>
<p>It will take whatever values it receives in the <strong>title</strong>, <strong>description</strong> and <strong>link</strong> input fields on the left hand side of the connector, and construct a piece of <a href="http://www.json.org/">JSON</a> which it then sends in an <a href="http://www.w3.org/TR/html401/interact/forms.html#h-17.13.4.1">application/x-www-form-urlencoded</a> format as a data=<JSON> name/value pair in the message body of an HTTP POST request to the resource specified in the <strong>serviceUrl</strong> field.</p>
<p>So if we pass the values “<em>DJ’s Weblog</em>” into the title, “<em>Reserving the right to be wrong</em>” into the description, “<em>/</em>” into the link fields, and pass “<em>http://example.org/bucket/</em>” into the serviceUrl field, the following HTTP request is made on the http://example.org/bucket/ resource like this:</p>
<pre><code>POST /bucket/ HTTP/1.1 Content-Length: 218 Content-Type: application/x-www-form-urlencoded Host: example.org Accept: */* data=%7B%22items%22%3A%5B%7B%22title%22%3A%22DJ%27s+Weblog%22%2C%22description %22%3A%22Reserving+the+right+to+be+wrong%5Cn%22%2C%22link%22%3A%22http%3A %5C%2F%5C%2Fwww.pipetree.com%5C%2Fqmacro%5C%2Fblog%5C%2F%22%7D%5D%7D
</code></pre>
<p>(whitespace added by me for readability).</p>
<p>When decoded and pretty-printed, that message body looks like this</p>
<pre><code>data=```
&lt;code class=&quot;block&quot; id=&quot;output&quot;&gt;{
    &quot;items&quot;:[
       {
           &quot;title&quot;:&quot;DJ's+Weblog&quot;,
           &quot;description&quot;:&quot;Reserving+the+right+to+be+wrong&quot;,
           &quot;link&quot;:&quot;/&quot;
       }
    ]
}```
</code></pre>
<p>This is what your app gets to process.</p>
<p>Bruno said that the format was chosen to be compatible with the Yahoo! Pipes Web Service Module, and it sure is — look at this example from the <a href="http://pipes.yahoo.com/pipes/docs?doc=operators#WebService">Web Service Module</a> documentation:</p>
<pre><code>data={ &quot;items&quot;:[ { &quot;title&quot;: &quot;First Title&quot;, &quot;link&quot;: &quot;http://example.com/first&quot;, &quot;description&quot;: &quot;First Description&quot; }, { &quot;title&quot;: &quot;Last Title&quot;, &quot;link&quot;: &quot;http://example.com/last&quot;, &quot;description&quot;: &quot;Last Description&quot; } ] }
</code></pre>
<p>And what about those three output fields on the right hand side of the REST connector? Well, if your app returns a response with JSON in the body — this time not as a name/value pair, but as pure JSON — like this:</p>
<pre class="language-json"><code class="language-json"><span class="token punctuation">{</span> <span class="token property">"items"</span><span class="token operator">:</span><span class="token punctuation">[</span>   <span class="token punctuation">{</span>  <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"The response!"</span><span class="token punctuation">,</span>  <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">"Long text description of the response"</span><span class="token punctuation">,</span>  <span class="token property">"link"</span><span class="token operator">:</span> <span class="token string">"http://example.org/banana/"</span>  <span class="token punctuation">}</span>   <span class="token punctuation">]</span> <span class="token punctuation">}</span></code></pre>
<p>then the workflow can continue and you can connect those values in the corresponding <strong>title</strong>, <strong>description</strong> and <strong>link</strong> output fields as input to further connectors.</p>
<p>Happy tarpiping!</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Twitter&#39;s success</title>
      <link href="https://qmacro.org/blog/posts/2009/05/18/twitter&#39;s-success/"/>
      <updated>2009-05-18T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2009/05/18/twitter&#39;s-success/</id>
      <content type="html">
        <![CDATA[
      <p>Yes yes, I know I’m late to the game, and everyone and his dog has given their angle on why Twitter is so successful, but I’d like to weigh in with a few thoughts too. The thoughts are those that came together when I was <a href="http://twitter.com/qmacro/status/1782050968">chatting</a> to Ian Forrester (<a href="http://twitter.com/cubicgarden">@cubicgarden</a>), at a <a href="http://geekup.org/events/130">GeekUp event</a> in Manchester last week.</p>
<h3>Messaging Systems</h3>
<p>Back in the day, I talked about, wrote about and indeed built interconnected messaging systems based around the idea of a <em>message bus</em>, that has human, system and bot participation. The fundamental idea was based around one or more channels, rooms or groupings of messages; messages which could be originated from any participant, and likewise filtered, consumed and acted upon by any other. I wrote a <a href="http://www.openp2p.com/pub/a/p2p/2002/01/11/jabber_bots.html">couple</a> of <a href="http://www.openp2p.com/pub/a/p2p/2002/02/08/chatbot_two.html">articles</a> positing that bots might be the command line of the future.</p>
<p>Using my <a href="http://www.xmpp.org">favourite messaging protocol</a>, I built such a messaging system for an enterprise client. This system was based around a series of rooms, and had a number of small-but-perfectly-formed agents that threw information onto the message bus, information such as messages resulting from monitoring systems across the network (“disk space threshold reached”, “System X is not responding”, “File received from external source”, etc) and messages from SAP systems (“Sales Order nnn received”, “<a href="https://www.sdn.sap.com/irj/scn/go/portal/prtroot/docs/library/uuid/7ce5c590-0201-0010-388e-cc28510abb89">Transport xxx released</a>“, “Purchase Order yyy above value z created”, etc). It also had a complement of agents that listened to that <a href="http://www.oreillynet.com/xml/blog/2003/01/rss_the_web_service_we_already.html">RSS/ATOM-sourced</a> stream of enterprise consciousness and acted upon messages they were designed to filter — sending an SMS message here, emailing there, re-messaging onto a different bus or system elsewhere.</p>
<p>So what does this have to do with Twitter? Well, Twitter is a messaging system too. And Twitter’s ‘timeline’ concept is similar to the above message groupings. People, systems and bots can and do (I hesitate to say ‘publish’ and ‘subscribe to’ here) create, share and consume messages very easily.</p>
<h3>Killer Feature</h3>
<p>But the killer feature is that Twitter espouses the guiding design principle:</p>
<p><a href="http://www.google.co.uk/search?q=%22everything+has+a+url%22"><strong>Everything has a URL</strong></a></p>
<p>and everything is available via the lingua franca of today’s interconnected systems — HTTP. Timelines (message groupings) have URLs. Message producers and consumers have URLs. Crucially, <em>individual messages have URLs</em> (this is why I could refer to a particular tweet at the start of this post). All the moving parts of this microblogging mechanism are <a href="/blog/posts/2002/09/02/rest-google-and-idempotency/">first class citizens on the web</a>. Twitter exposes message data as feeds, too.</p>
<p>Even Twitter’s API, while not <em>entirely</em> RESTful, is certainly facing in the right direction, exposing information and functionality via simple URLs and readily consumable formats (XML, JSON). The <a href="http://c2.com/xp/DoTheSimplestThingThatCouldPossiblyWork.html">simplest thing that could possibly work</a> usually does, enabling the “<a href="http://www.smallpieces.com/">small pieces, loosely joined</a>” approach that lets you <a href="http://radio.weblogs.com/0100887/2002/03/27.html">pipeline the web</a>, like this:</p>
<p>dj@giant:~$ <span style="color: #008000;">GET http://twitter.com/users/show/qmacro.json |  perl -MJSON -e &quot;print from_json(&lt;&gt;)-&gt;{'location'},qq/n/&quot;</span> Manchester, England dj@giant:~$</p>
<p>None of this opaque, heavy and expensive SOA stuff here, thank you very much.</p>
<h3>Other Microblogging Systems and Decentralisation</h3>
<p>And does this feature set apply only to Twitter? Of course not. Other microblogging systems, notably <a href="http://laconi.ca/trac/">laconi.ca</a> — most well known for the public instance <a href="http://identi.ca/">identi.ca</a> — follow these guiding design principles too.</p>
<p>What’s fascinating about laconi.ca is that just as a company that wants to keep message traffic within the enterprise can run their own mail server (SMTP) and instant messaging &amp; presence server (Jabber/XMPP), so also can laconi.ca be used within a company for instant and flexible enterprise social messaging, especially when combined with <a href="http://www.oreillynet.com//cs/user/view/cs_msg/12476">enterprise RSS</a>. But that’s a story for another post :-)</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Analysing CV searches with Delicious</title>
      <link href="https://qmacro.org/blog/posts/2009/05/08/analysing-cv-searches-with-delicious/"/>
      <updated>2009-05-08T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2009/05/08/analysing-cv-searches-with-delicious/</id>
      <content type="html">
        <![CDATA[
      <p>I put my <a href="//qmacro.org/about/CV.html">CV online</a> recently, and having the machine that serves this website (an iMac running Ubuntu Linux) sitting in the study, I can almost ‘feel’ the HTTP requests entering the house, going down the wire, and being served, like lumps travelling down a pipe in a Tom &amp; Jerry cartoon.</p>
<p>So I was thinking about doing something useful with Apache’s access log, more than what I already have with the excellent <a href="http://www.mrunix.net/webalizer/">Webalizer</a>. Inspired (as ever) by <a href="http://blog.jonudell.net/about/">Jon Udell</a>‘s “<a href="http://blog.jonudell.net/2009/02/26/collaborative-curation-as-a-service/">ongoing fascination with Delicious as a user-programmable database</a>“, I decided to pipe the access log into a Perl script and pull all the Google search referrer URLs that led to /qmacro/CV.html. For every referrer URL found, I grabbed the query string that was used and split it into words, removing noise. I also made a note of the top level domain for the Google hostname – a very rough indication of where queries were coming from.</p>
<p>But rather than create a database, or even an application, to analyse the results, I just posted the information as bookmarks to <a href="http://delicious.com/qmacro">Delicious</a> (after a simple incantation of *perl -MCPAN -e ‘install <a href="http://search.cpan.org/dist/Net-Delicious/">Net::Delicious</a>‘ *- just what I needed, thanks!).</p>
<p>Delicious <em>is</em> a database, and by its very nature and purpose has a flavour that lends itself very well to loosely coupled data processing and manipulation. It’s about URLs and tags. It’s about adding data, replacing data, removing data. Basic building blocks and functions. Every item in the database has, and is keyed by, a URL, and as such, every item is recognised and treated as a first class citizen on the web. Even the metadata (tag information) is treated the same.</p>
<p>So what did I end up with? Well, for a start, I have a useful collection of referring CV search URLs, the collection being made via a common grouping tag ‘<a href="http://delicious.com/qmacro/cvsearchkeywords">cvsearchkeywords</a>‘ that I assigned to each Delicious post in addition to the tags derived from the query string.</p>
<p><a href="http://www.flickr.com/photos/qmacro/3511806669/" title="CV search keywords on Delicious by qmacro, on Flickr"><img src="http://farm4.static.flickr.com/3341/3511806669_662fb2f906.jpg" alt="CV search keywords on Delicious"></a></p>
<p>I also have a useful analysis of the search keywords, in the list of “Related Tags” – tags related to the common grouping tag. I can see right now for example that beyond the obvious ones such as “cv”, popular keywords are <a href="http://delicious.com/qmacro/cvsearchkeywords+abap">abap</a>, <a href="http://delicious.com/qmacro/cvsearchkeywords+architect">architect</a> and <a href="http://delicious.com/qmacro/cvsearchkeywords+developer">developer</a>. What’s more, that analysis is interactive. Delicious’s UI design, and moreover its excellent URL design, means that I can drill down and across to find out what keywords were commonly used with others, for example.</p>
<p>That collection, and that analysis, will grow automatically as soon as I add the script to the logrotate mechanism on the server. That is, of course, assuming people remain interested in my CV!</p>
<p>And my favourite referrer search string so far? “<a href="http://www.google.co.uk/search?hl=en&amp;rlz=1G1GGLQ_ENUK324&amp;q=how+to+write+a+CV+of+a+DJ&amp;meta=">How to write a CV of a DJ</a>” :-)</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>SAP everywhere!</title>
      <link href="https://qmacro.org/blog/posts/2009/04/25/sap-everywhere!/"/>
      <updated>2009-04-25T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2009/04/25/sap-everywhere!/</id>
      <content type="html">
        <![CDATA[
      <p>I remember back in the ’90s joking with my friend <a href="http://www.piersharding.com/blog">Piers</a></p>
<blockquote>
<p>When I see the first book on SAP hit the bookstores, it’s time to move on :-)</p>
</blockquote>
<p>In those days there were no books on SAP, and I was still in shock from receiving SAP documentation properly printed and bound — in the early days we had SAP install guides on green and white striped fanfold paper from daisywheel printers, with sentences literally half in German, half in English.</p>
<p>How things have changed. Beyond the <a href="http://www.sdn.sap.com">SAP Developer Network</a>, which I can proudly say I had a hand in forming and nurturing, I’ve just seen a <a href="http://www.youtube.com/watch?v=cJ-NbF4Nw8A">video</a> on YouTube by <a href="http://jonerp.com">Jon Reed</a> on how to find and follow SAP people on Twitter! I’ve also just added myself to the <a href="http://wiki.zsapping.com/pub:twitter:groups:sap:index">SAP Affinity Group</a>. A long way from <a href="https://www.sdn.sap.com/irj/scn/weblogs?blog=/pub/wlg/1973">SAP-R3-L</a>!</p>
<p>Perhaps it’s time to rebuild <a href="/undefined/">Planet SAP</a>?</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>An HTTP connector for Tarpipe: &#39;tarbridge&#39;</title>
      <link href="https://qmacro.org/blog/posts/2009/04/24/an-http-connector-for-tarpipe:-&#39;tarbridge&#39;/"/>
      <updated>2009-04-24T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2009/04/24/an-http-connector-for-tarpipe:-&#39;tarbridge&#39;/</id>
      <content type="html">
        <![CDATA[
      <p>One thing that Tarpipe would really benefit from is a connector that would enable an HTTP request (I’m thinking of POST, here) to be made on an arbitrary resource (URL). This is something that <a href="http://getsatisfaction.com/tarpipe/topics/a_rest_connector">other people have already mentioned</a> — and the Tarpipe folks are certainly working on it.</p>
<p>I couldn’t wait, however, and thought I’d have a bit of fun building an HTTP connector. I don’t have access to Tarpipe’s sources, so I had to go a roundabout route. Tarpipe has a Mailer connector, which enables emails to be sent from within a workflow. So I built a very simple email-to-HTTP-POST mechanism ‘tarbridge’. This way, you can use the Mailer connector to send an email like this:</p>
<pre><code>Recipient: tarbridge+&lt;token&gt;@pipetree.com
 Subject: the URL to POST to and an optional content-type
 Body: the payload of the HTTP POST
</code></pre>
<p>and an HTTP POST will be made to the URL specified. You’ll even get an email reply with the HTTP response.</p>
<p>Here’s an example workflow that receives an email containing something to bookmark in Delicious. It uses the Delicious connector, and also makes an HTTP POST to a little test application (running on a local devserver version of the excellent <a href="http://code.google.com/appengine/">Google AppEngine</a>, fwiw) via tarbridge.</p>
<p><img src="/images/2009/04/tarpipebridgetest1-300x134.jpg" alt="image"></p>
<p>The Subject of the email contains the URL to make the HTTP POST to. By default the Content-Type will be set to application/x-www-form-urlencoded, but you can override this by specifying a different content type (here I’ve specified text/plain) as a second parameter in the Subject.</p>
<p>The addressee of the email is ‘tarbridge+<some token>@pipetree.com’. I’ve used this approach so I can control what goes through this tarbridge mechanism. A token is associated with an email address, to which the HTTP response is sent in reply.</p>
<p>The body of the email is what’s send as the payload in the HTTP request.</p>
<p>So sending this email to the Tarpipe workflow above:</p>
<p>From: DJ Adams <a href="mailto:dj@pipetree.com">dj@pipetree.com</a> To: bury69xxxx@tarpipe.net Subject: http://blog.tarpipe.com Tarpipe blog</p>
<p>results in this Delicious entry:</p>
<p><img src="/images/2009/04/tarpipeblogurlondelicious-300x196.png" alt="image"></p>
<p>and this email sent, via the Mailer connector, to the tarbridge mechanism:</p>
<pre><code>To: tarbridge+token@pipetree.com Subject: http://www.pipetree.com:8888/feed/ text/plain From: tarpipe mailer &lt;mailer@tarpipe.net&gt; http://blog.tarpipe.com http://del.icio.us/url/95948a42d8777b46278d4da333345473
</code></pre>
<p>which in turn results in an HTTP POST being made like this:</p>
<pre><code>POST /feed/ HTTP/1.1 User-Agent: tarbridge/0.1 libwww-perl/5.812 Host: www.pipetree.com:8888 Content-Type: text/plain [...] http://blog.tarpipe.com http://del.icio.us/url/95948a42d8777b46278d4da333345473
</code></pre>
<p>The result of the HTTP POST is emailed back like this:</p>
<pre><code>Subject: Re: http://www.pipetree.com:8888/feed/ text/plain To: DJ Adams &lt;dj.adams@pobox.com&gt; From: tarbridge+token@pipetree.com

HTTP/1.0 201 Created Date: Fri, 24 Apr 2009 10:06:55 GMT Location: http://www.pipetree.com:8888/feed/test-feed-1/agtmZWVkYnVpbGRlc[...] [...]
</code></pre>
<p>So if you were really crazy you could even feed that response back into the Tarpipe loop, using a second workflow (hmm, Tarpipe could do with a string parsing connector too :-)</p>
<p>The tarbridge mechanism is just a little Perl script that’s triggered via <a href="http://www.procmail.org">Procmail</a>. I’m running <a href="http://www.ubuntu.com">Ubuntu</a> on pipetree.com so it was just a question of configuring <a href="http://www.postfix.org">Postfix</a> to use Procmail for delivery, and writing a .procmailrc rule like this:</p>
<p>:0 c | ~/handler.pl 2&gt;&gt; ~/tarbridge.log</p>
<p>If you’re interested in trying this out using my (pipetree) instance of this tarbridge, please email me and I’ll set you up with a token. Usual caveats apply. And remember, this is only in lieu of a real HTTP connector which I hope is coming soon from Tarpipe!</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>tarpipe.com - Programming 2.0?</title>
      <link href="https://qmacro.org/blog/posts/2009/04/21/tarpipe.com-programming-2.0/"/>
      <updated>2009-04-21T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2009/04/21/tarpipe.com-programming-2.0/</id>
      <content type="html">
        <![CDATA[
      <p>Is <a href="http://tarpipe.com">tarpipe.com</a> an early example of a “Programming 2.0″ concept?</p>
<p>I first read about Tarpipe from Curt Cagle’s &quot;Analysis 2009&quot;. In turn, Curt points to <a href="http://jeff-barr.com/2008/12/31/tarpipe-rocks-a-quick-review/">Jeff Barr’s post</a> which describes the concept and the implementation very well. It’s a fascinating concoction of Web 2.0 services and visual programming (in the style of <a href="https://en.wikipedia.org/wiki/Yahoo!_Pipes/">Yahoo! Pipes</a>), and in its beta infancy has that great “wow, imagine the full potential!” feel to it.</p>
<p>Here’s an example of what I’ve been playing around with. With my phone — and with the Google G1 phone it’s so easy — I can snap a picture of the beer I’m drinking, and email that picture to a Tarpipe workflow, along with the name of the beer in the subject line and a list of tags rating the beer in the body.</p>
<p>The workflow uses the existing Tarpipe connectors to:</p>
<ul>
<li>post the picture on <a href="http://www.flickr.com/photos/qmacro/">Flickr</a> with the beer name as the title and the rating words as tags, including a statically added ‘<a href="http://www.flickr.com/photos/qmacro/tags/beerrating/">beerrating</a>‘</li>
<li>have a short URL constructed via <a href="http://tinyurl.com">TinyURL</a> for the new Flickr picture page (ok this is pre Kellan’s <a href="http://revcanonical.appspot.com/">rev=”canonical”</a>, and while Flickr already has such links the URLs are not exposed by Tarpipe’s Flickr connector)</li>
<li><a href="http://identi.ca/qmacro">dent the rating</a>, with the short picture URL, on identi.ca (which in turn, re-dents to <a href="http://twitter.com/qmacro">Twitter</a> too)</li>
<li>reply to the original email confirming that the beer was successfully rated</li>
</ul>
<p>All in the space of a few clicks and drags! Here’s a shot of that workflow (with a couple of connectors partially obscured — it’s a <a href="http://getsatisfaction.com/tarpipe/topics/connector_moved_to_high_and_now_unable_to_delete_edit_it">known bug in Tarpipe</a>):</p>
<p><img src="/images/2009/04/tarpipebeerrater.png" alt="tarpipebeerrater"></p>
<p>But what’s more fabulous: Tarpipe has been ideal for my son <a href="http://jcla1.com">Joseph</a> to start up with programming, with me. And he finds it really interesting. Visual, direct feedback, using and connecting things and services he understands. Gone are the days of</p>
<pre><code>10 PRINT &quot;HELLO WORLD&quot;
20 GOTO 10
</code></pre>
<p>on black and white low-res displays.</p>
<p>After explaining a few concepts, Joseph was totally up and away, building <a href="http://www.flickr.com/photos/8583308@N05/3392375982/">his first workflow</a> which is pretty impressive! (I’m a biased, <a href="http://www.flickr.com/photos/qmacro/3397440933/">proud dad</a> of course :-) And now we’re off looking at <a href="https://en.wikipedia.org/wiki/Yahoo!_Pipes">Yahoo! Pipes</a> too, and he’s asking how we can link the two services together.</p>
<p>Hello, new programming world.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Old feed URLs fixed with a bit of mod_rewrite voodoo</title>
      <link href="https://qmacro.org/blog/posts/2009/04/15/old-feed-urls-fixed-with-a-bit-of-mod_rewrite-voodoo/"/>
      <updated>2009-04-15T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2009/04/15/old-feed-urls-fixed-with-a-bit-of-mod_rewrite-voodoo/</id>
      <content type="html">
        <![CDATA[
      <p>As <a href="http://identi.ca/notice/2941485">feeds are the new blogs</a> (quoting myself, oh dear!) I thought it important to make sure that the feed bots that have been continuously polling my weblog’s feed and getting 404s (since 2005, I guess) are sent to the right place. My Apache access.log file was showing that 404s were being returned for /index.rdf and /index.xml, and /qmacro/xml for that matter … all old locations for the weblog feed.</p>
<p>The power of HTTP, and the voodoo of <a href="http://httpd.apache.org/docs/2.0/mod/mod_rewrite.html">mod_rewrite</a>, allow me to fix things. Inserting these lines into the relevant .htaccess files does the trick:</p>
<p>RewriteRule ^index.(xml|rdf)$ /feed/atom/ [R=301,L]</p>
<p>RewriteRule ^xml$ /feed/atom/ [R=301,L]</p>
<p>Now the bots are redirected to this weblog’s <a href="/feed/atom/">shiny new feed</a>. And I’ll <a href="http://www.w3.org/Provider/Style/URI">try not to change the URL again</a> :-)</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Back from Real Life</title>
      <link href="https://qmacro.org/blog/posts/2009/04/15/back-from-real-life/"/>
      <updated>2009-04-15T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2009/04/15/back-from-real-life/</id>
      <content type="html">
        <![CDATA[
      <p>I’m back online, after an eXtended Away in Real Life. I don’t think my online presence will ever be what it was (I can’t believe how much I posted in the past few years) but blogging isn’t the same anyway. Even the new <a href="http://www.wired.co.uk/">UK edition of Wired magazine</a> (I’ve subscribed, btw) lists blogging under “Tired”. Now there’s microblogging (<a href="http://identi.ca/qmacro">identi.ca</a> and <a href="http://twitter.com/qmacro">Twitter</a> spring to mind immediately) and people seem to be <em>emailing</em> each other on Facebook these days! That’s the equivalent of the heinous corporate crime of using Excel for everything, like sending screenshots to each other, or writing simple lists (<em>shudder</em>).</p>
<p>What’s more, my son Joseph is <a href="http://www.pipetree.com/josephadams/">online</a> now too, complete with <a href="http://whitegolem.blogspot.com/">blog</a>, <a href="http://identi.ca/jcla1">identi.ca</a> &amp; <a href="http://twitter.com/jcla1">Twitter</a> accounts, and more!</p>
<p>Anyway, I’ve got myself a local copy of <a href="http://www.wordpress.org">WordPress</a>, and am slowly retrieving my past with the help of <a href="http://www.archive.org/web/web.php">The Wayback Machine</a>. It’s a slow and not entirely painless process, but I’m getting there. I’m doing a month at a time, and am up to <a href="/blog/posts/2003/01/">Jan 2003</a>. Nothing’s properly categorised or tagged yet, nor are all the links working perfectly. There are even <a href="/1970/01/">some posts</a> that aren’t properly datestamped yet! More importantly, I haven’t yet put the <a href="http://httpd.apache.org/docs/2.0/mod/mod_rewrite.html">mod_rewrite</a> magic in place to reduce the 404s that I’m seeing in my HTTP access log.</p>
<p>Watch this space.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Java and Gosling&#39;s FUD - madness or desperation?</title>
      <link href="https://qmacro.org/blog/posts/2005/12/16/java-and-gosling&#39;s-fud-madness-or-desperation/"/>
      <updated>2005-12-16T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2005/12/16/java-and-gosling&#39;s-fud-madness-or-desperation/</id>
      <content type="html">
        <![CDATA[
      <p>For a while now, people have been talking about the <a href="http://blog.dave.org.uk/archives/000874.html">fall</a> <a href="http://www.businessweek.com/technology/content/dec2005/tc20051213_042973.htm">from</a> <a href="http://www.onjava.com/pub/a/onjava/2005/10/19/challenging-java-dominance.html">favour</a> of Java (aka <a href="http://www.oreillynet.com/pub/a/oreilly/editors/java_1004.html">the new COBOL</a>).</p>
<p>Today <a href="http://jroller.com/page/obie?entry=gosling_fud_is_laughable">Obie Fernandez points to</a> some <a href="http://blogs.sun.com/roller/page/jag?entry=radlab_scripting_and_scale">hopelessly weak arguments</a> against scripting / dynamic languages … from the father of Java himself, James Gosling.</p>
<p>Is Gosling’s post just a moment of madness, or a sign of hopeless desperation?</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>SAP and Open Source: the debate continues</title>
      <link href="https://qmacro.org/blog/posts/2005/11/28/sap-and-open-source:-the-debate-continues/"/>
      <updated>2005-11-28T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2005/11/28/sap-and-open-source:-the-debate-continues/</id>
      <content type="html">
        <![CDATA[
      <p>I wrote a blog entry on <a href="http://www.sdn.sap.com">SDN</a> almost two weeks ago entitled “<a href="https://www.sdn.sap.com/irj/sdn/weblogs?blog=/pub/wlg/2687">SAP and Open Source: an analysis and letter to SAP and Shai</a>“. It followed the <a href="http://blogs.adobe.com/matthiaszeller/2005/11/sap_slams_open_1.html">flurry</a> <a href="http://sapventures.typepad.com/main/2005/11/sap_slams_open_.html">of</a> <a href="http://linux.slashdot.org/article.pl?sid=05/11/11/0613255">comment</a> that was made after Shai made some alarming statements regarding SAP and Open Source <a href="http://www.churchillclub.org/eventDetail.jsp?EVT_ID=682">at the Churchill Club</a>. My angle was that Shai was complaining that people were twisting his words and taking what he said out of context, so I transcribed the <a href="http://i.i.com.com/cnwk.1d/i/z/e/200511/110905_CHC_EVENT.mp3">MP3 recording</a> of what he said, and it was worrying reading, even when you ignored his statements on “IP socialism” and innovation (I concentrated on the source code context).</p>
<p>Anyway, I’m glad to say that the conversation is still continuing, as it needs to. Shai hasn’t responded yet, but I won’t hold my breath. There have been (other) SAP employees that have given their comments, which I value greatly. If you’ve got something to add, don’t forget to add your comment to the post! There are a handful of critical debates for people to have in the SAP world. Critical for SAP, and critical for us. Open Source is one of those debates.</p>
<p><strong>Update:</strong> Discussion about Open Source covers the current <a href="http://www.flickr.com/photos/qmacro/72559493/">top three weblog posts</a> on SDN right now. That said, Shai still hasn’t responded.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Acorn Atom and my start in computing</title>
      <link href="https://qmacro.org/blog/posts/2005/11/26/acorn-atom-and-my-start-in-computing/"/>
      <updated>2005-11-26T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2005/11/26/acorn-atom-and-my-start-in-computing/</id>
      <content type="html">
        <![CDATA[
      <p><img src="/images/2005/11/atom.png" alt="Acorn Atom screen"></p>
<p>I wrote a little piece for the <a href="http://radar.oreilly.com">O’Reilly Radar</a> on <a href="http://radar.oreilly.com/2005/11/burn-in-7-dj-adams.html">how I got into computers</a>. It brought back lots of memories, a strong one of which was the hours, days, weeks I spent on my <a href="http://en.wikipedia.org/wiki/Acorn_Atom">Acorn Atom</a>. I have my original Atom in storage, so I turned to <a href="http://www.mess.org">MESS</a> for help in getting an emulated Atom booted up. Ahhh, even now the font and cursor size are whisking me back in time …</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>MoonOverFailsworth</title>
      <link href="https://qmacro.org/blog/posts/2005/11/17/moonoverfailsworth/"/>
      <updated>2005-11-17T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2005/11/17/moonoverfailsworth/</id>
      <content type="html">
        <![CDATA[
      <div style="float: right; margin-left: 10px; margin-bottom: 10px;">[![](http://static.flickr.com/32/63833935_b287b1a5cd_m.jpg)](http://www.flickr.com/photos/qmacro/63833935/ "photo sharing")  
<span style="font-size: 0.9em; margin-top: 0px;">  
[MoonOverFailsworth](http://www.flickr.com/photos/qmacro/63833935/)  
<p>Originally uploaded by <a href="http://www.flickr.com/people/qmacro/">qmacro</a>.<br>
</span></div>The moon was huge and very present as I drove up the M6 the other night. It was still hanging around in the morning, as you can see. In the distance you can see Salton Mill. There was another mill, when I was a lad, in the middle distance (where the new houses can be seen) – Argyll Mill, I think.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Whither SAP?</title>
      <link href="https://qmacro.org/blog/posts/2005/07/21/whither-sap/"/>
      <updated>2005-07-21T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2005/07/21/whither-sap/</id>
      <content type="html">
        <![CDATA[
      <p>I’ve been thinking a lot recently about where SAP is going and what SAP is doing today, especially in the light of where it went and what it did in the past. To be honest, the thinking has been triggered by frustration at the nuts and bolts of SAP technical matters, particularly in the area of service support and basis work.</p>
<p>SAP found success with R/2 and R/3 for many reasons, one of which was abstraction. Because they wanted to offer a set of uniform facilities across a range of vastly different platforms, they built abstractions for basic services such as jobs (background processing), spooling, process and session management, database access, and so on. These abstractions, these inventions of layers on top of OS-level services contributed a great deal to the success of SAP implementations.</p>
<p>However, this culture of abstraction, combined with decades of being <em>the</em> original and best wall-to-wall ERP software solution, is causing problems since SAP started the long process of shaking off its monolith mantle and starting to compete and coexist more with the rest of the software world, and the internet (most particularly the web). SAP are used to designing, building and delivering things on their own terms, according to their own culture, and based on their view of the rest of the world. The problem is, the tech world in which SAP deliver software and services today is vastly different to what it was ten or twenty years ago, and SAP’s size is making it difficult for them to adapt quickly enough.</p>
<p>Let’s take the web as an example (which clearly didn’t exist then, but has for a good while now). And within the web example, let’s take a bread and butter service – <a href="http://service.sap.com/notes">OSS Notes</a>, within the larger context of the service portal. Essentially, an OSS note is a document that describes a particular issue, typically with Symptom, Cause, Solution and other sections (including links to software corrections). Pretty straightforward. An OSS note has versions, a status, belongs to an application area, and has other data associated with it, but can be essentially represented as a web page.</p>
<p>The power of the web is vast, but how that power is presented is subtle. Hyperlinks, addressing (URLs), reliable navigation, and so on. And at the user end, we have the UI (the browser) that contains basic but important tools such as bookmarking, browsing history, and simple features like showing what the address of a hyperlink is when you hover over it.</p>
<p>But what SAP has done in implementing OSS notes on the web (they were previously only available on an SAP system that you had to connect to with SAPGUI) shows all the signs of the abstraction (re-invention) culture, and the struggle SAP still has in embracing the rest of the world.</p>
<p>First of all, the OSS notes are available from within the service portal, which is beset with all manner of navigation difficulties and breaks many of the cardinal rules of web design (<a href="http://www.flickr.com/photos/qmacro/23720154/">frames</a>, popups and new windows, impossibly long URLs, overuse of Javascript, <a href="http://www.flickr.com/photos/qmacro/27319450/">pages that don’t fit in your browser</a> even at 1024×768, but I digress … ) – in fact the most telling symptom of the portal’s problems is the fact that SAP never refer to specific URLs for things in the portal, you always receive instructions such as<br>
“<em>Go to this base URL, then click here, then here, then here, then here to get what you’re looking for</em>” and of course invariably the texts and hyperlinks that you click through one month have been changed by the next month and this sort of navigation description breaks down entirely (ever tried to find a specific version of, say, SAPINST?)</p>
<p>But the main problem is that the OSS notes are only on the web in the letter of the law. In the spirit of the law, they’re not. The frameset-induced misery means that you can’t use basic browser tools to bookmark and otherwise organise OSS notes the way <em>you</em> want to. But it’s even more interesting than that – on the top frame of each OSS note page, there are Javascript powered ‘favourites’ and ‘subscribe’ links. Why can’t I just use the power of the web – URLs, to manage my own favourites, either in my browser, or using <a href="http://del.icio.us">external tools</a>?</p>
<p>Furthermore, even if you overlook the problems caused by overengineering — this abstraction layer of web upon web — you can’t escape the fact that the machine-translation of OSS note content into HTML is beset with problems. Formatting issues mean that you soon lose your way in a long OSS note when it has nested bullet points. Also, none of the things referred to, which are available somewhere in the SAP portal, are hyperlinked (in fact, <em>nothing</em> is hyperlinked).</p>
<p>Finally, there is actually a unique URL for each OSS note but each one is extremely long, bears no relation to the OSS note number, and isn’t easy to exchange in, say, an IM/IRC or email-based chat.</p>
<p>You might think I’m particularly picking on OSS notes. I’m not; it’s just that it’s a tangible (and in-your-face) example of how things can go wrong when the culture of abstraction and the oil tanker-like momentum cause SAP programmers to over-engineer a solution. (And it’s been <a href="/archives/2005/07/hacking_the_sap.html">on my mind</a> recently too). There are plenty of other examples where SAP is unnecessarily re-inventing stuff – take SAPtutor for example – there are plenty of platform-independent ways of presenting slides, video and audio on the web. Why, then, invent yet another format that needs a special player, that’s only available on a single platform? But I digress (again) …</p>
<p>So, to the title of this post, then. Where is SAP going? They’ve made good progress in opening up to the world (albeit with a number of wrong turns, in the past and more recently), but there’s a lot to do. I know there’s a lot to do, as I’ve seen it first hand while performing some Basis activities recently, and having to use the service portal to get to where we need to be.</p>
<p>Can SAP adapt? Can they start to embrace, rather than resist, the environments in which they find themselves today? Can they tune their complex culture (of complexity) to deliver a better service and better software?</p>
<p>I have faith in them. But sometimes, when you’re making a living as a SAP-hacking footsoldier, it’s hard.</p>
<p>Update:</p>
<p>Shortly after posting this, Piers wrote an <a href="http://www.piersharding.com/blog/archives/2005/07/sap_a_closed_cu.html">interesting followup</a> on how the closed culture may end in doom. Also, I spotted a well-written post by Ryan Tomayko called <a href="http://lesscode.org/2005/07/21/motherhood-and-apple-pie/">Motherhood and Apple Pie</a> today which spookily touches on the core point of this post – that SAP are resisting the very tools and technologies and design axioms that make the most scalable and widely distributed meta-application tick.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Hacking the SAP service portal to make OSS notes better</title>
      <link href="https://qmacro.org/blog/posts/2005/07/11/hacking-the-sap-service-portal-to-make-oss-notes-better/"/>
      <updated>2005-07-11T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2005/07/11/hacking-the-sap-service-portal-to-make-oss-notes-better/</id>
      <content type="html">
        <![CDATA[
      <p>Using OSS notes on SAP’s service portal is extremely cumbersome. I used <a href="http://greasemonkey.mozdev.org">Greasemonkey</a> to hack the UI to make it a little better. I had written it up on my <a href="http://www.sdn.sap.com/sdn/weblogs.sdn?blog=/pub/u/3294">SDN blog</a>:</p>
<p><a href="http://www.sdn.sap.com/sdn/weblogs.sdn?blog=/pub/wlg/1669">Hacking the SAP service portal to make OSS notes better</a></p>
<p>but forgot to mention it here. <a href="http://www.piersharding.com">Piers</a> had just complained to me that he couldn’t find any reference to it here, hence this post.</p>
<p>For the impatient, there’s the <a href="http://www.pipetree.com/~dj/2005/05/OssNoteFix/screencast.html">screencast</a>, and the <a href="http://www.pipetree.com/~dj/2005/05/OssNoteFix/ossnotefix.user.js">ossnotefix.user.js</a> script.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>SDN, Blogging, and Planet SAP</title>
      <link href="https://qmacro.org/blog/posts/2005/07/05/sdn-blogging-and-planet-sap/"/>
      <updated>2005-07-05T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2005/07/05/sdn-blogging-and-planet-sap/</id>
      <content type="html">
        <![CDATA[
      <p>In May I was approached by a chap at SAP in Walldorf who wanted to ask me some questions on blogging (I <a href="http://scn.sap.com/people/dj.adams/content">have a blog</a> over on the <a href="http://www.sdn.sap.com">SAP Developer Network</a>) for an article he was writing for an SAP-internal magazine.</p>
<p>One of the questions was “<strong>Why do you write two blogs?</strong>“. I wrote a longish reply, and thought it was worth putting up here (mostly because he didn’t use any of it ;-)</p>
<p>My answer:</p>
<ul>
<li></li>
</ul>
<p>Well, there are many reasons. Here are the main ones: *</p>
<p>(a) History</p>
<p>I was writing on my blog before SDN came along. SDN came along, and I<br>
was invited to write some posts there. I did. I continue to post on my<br>
blog while contributing to the collective SDN one too.</p>
<p>(b) Freedom</p>
<p>The web is a great leveller. There’s no ‘us and them’ anymore. And<br>
with weblogs crystallising the essence of publishing at the individual<br>
level, everyone benefits. Get a weblog, express your voice. It’s<br>
your individual press. I’m a member of SDN, but like everyone else,<br>
still a guest there. SDN is run by, hosted by, and funded by SAP. So<br>
naturally I feel restricted in what I can, or should, say. There have<br>
been occasions when what people have written on SDN has ruffled a few<br>
feathers. Sometimes because what they wrote is ridiculous and negative,<br>
and others because what they wrote flies in the face of where SAP is<br>
going, in a technology context (I experienced the latter first hand).</p>
<p>Writing in my own blog means that I know that I’m not going to be<br>
censored, or have my posts pulled. This isn’t by any means a criticism<br>
of SAP or SDN. It’s just the way it is.</p>
<p>(c) Technology</p>
<p>When SDN first came along, it wasn’t properly on the web. It was an<br>
island, blocked off by the requirement to register and log on with a<br>
userid and password. Many people (including me) hassled the SDN team<br>
into removing the registration and authentication restriction (at least<br>
for people who just wanted to <em>read</em> stuff). And they did. Kudos to<br>
those who made the wheels turn (and they know who they are).</p>
<p>Now it’s time, in my opinion, for SDN to embrace community technologies<br>
even more, and use the power of RSS (and / or Atom) to aggregate weblog<br>
posts into one big ‘Planet SAP’. Syndicate blogs from around the<br>
web-o-sphere into a single place. Many communities do this to great<br>
effect. If SDN doesn’t do it, I’m sure someone else will come along<br>
and do it eventually. Embrace, don’t resist :-)</p>
<p>So if there was a ‘Planet SAP’ weblog aggregation mechanism, I’d only<br>
have to write on one blog, my own, and the SAP stuff would appear in SDN.</p>
<p>Actually, I write on three blogs. The third is a shared “Mr Angry” type<br>
weblog where I rant. And rant. And rant.</p>
<p>As I was writing the bit about aggregation, I thought “Why don’t I do that?”. So I did. Using the excellent <a href="http://www.planetplanet.org">Planet Planet</a> aggregation software, I put together <a href="http://www.pipetree.com/planetsap">Planet SAP</a>.</p>
<p>It’s in the early stages, gathering posts from only a small number of feeds. If you have SAP related things to say, and a feed for it, give me a shout, and I can add it. It’s just an experiment right now … let’s see how it goes.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Turnkey MVS 3.8J on Hercules S/370 Screenshot</title>
      <link href="https://qmacro.org/blog/posts/2005/05/30/turnkey-mvs-3.8j-on-hercules-s370-screenshot/"/>
      <updated>2005-05-30T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2005/05/30/turnkey-mvs-3.8j-on-hercules-s370-screenshot/</id>
      <content type="html">
        <![CDATA[
      <p><img src="/images/2005/05/16264534_127c972adf_n.jpg" alt="Screenshot of Turnkey"></p>
<p>As an ex MVS chap (I managed VSAM (DL/1) based SAP R/2 systems on IMS DB/DC at the start of my career) I was amazed some months back to find <a href="http://www.hercules-390.org/">Hercules</a>, the open source S/370 emulator.</p>
<p>So imagine my delight when I revisited Hercules the other day, to find a chap called Volker Bandke had put together an <a href="http://www.bsp-gmbh.com/turnkey">MVS 3.8J Turnkey system</a> that you can install and run on your emulated mainframe.</p>
<p>Using the ISPF-alike <a href="http://www.bsp-gmbh.com/hercules/herc_rpf.html">RPF</a>, and <a href="http://www.prycroft6.com.au/vs2sw/index.html">QUEUE</a>, a facility similar to SDSF, I am in oldtimer-heaven.</p>
<p>And of course, the first thing I tried (after a bit of jiggery pokery setting things up) had to be the inevitable:</p>
<pre><code>//HWORLD JOB CLASS=A,MSGCLASS=A,MSGLEVEL=(1,1),REGION=256K
//STEP1 EXEC PGM=IEBGENER
//SYSUT1 DD * HELLO WORLD!
//SYSUT2 DD SYSOUT=A
//SYSPRINT DD SYSOUT=A
//SYSIN DD DUMMY
</code></pre>
<p>Welcome back JCL, my long lost friend.</p>
<p><strong>Update</strong></p>
<p>I found some great pictures of real vintage terminals connected up to contemporary emulators (of vintage hardware) at <a href="http://www.corestore.org/emuterm.htm">Corestore Collection</a>. This is what the site’s owner calls “technological hooliganism” :-) Seeing this <a href="http://www.corestore.org/3278-3.jpg">picture of a 3278</a> takes me back – I spent a good part of the start of my IT career in front of one of these…</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>SAP: temporary loss of touch with reality?</title>
      <link href="https://qmacro.org/blog/posts/2005/05/20/sap:-temporary-loss-of-touch-with-reality/"/>
      <updated>2005-05-20T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2005/05/20/sap:-temporary-loss-of-touch-with-reality/</id>
      <content type="html">
        <![CDATA[
      <p>At this year’s Sapphire in Boston, Shai Agassi came out with some <a href="http://xml.sys-con.com/read/86130.htm">astounding and questionable views on free and open source software</a>: “<em>Open-source technologies such as Python and PHP, to name just two, are of great interest to college students and younger people with a passion.</em>“</p>
<p>He goes on to point out the distance between that, and what I presume he thinks of as “grown up” ERP software.</p>
<p>How do we interpret what he said? Was it a temporary slip? Or did he really mean it? Either way, it’s worrying. Perhaps it’s the Java lobby and their puzzling stance on (not) making Java open source – is he trying to protect SAP’s investment in the <a href="http://www.oreilly.com/pub/a/oreilly/editors/java_1004.html">new COBOL</a>?</p>
<p>Perhaps it’s a momentary loss of touch with reality; to bring yourself back, Shai, ask yourself this (especially bearing in mind SAP’s attempt to move closer to open standards and “Web Services”) – what do you think 90% of the world’s largest scale web services are written in, and run on? Yes – open source and free software!</p>
<p>SAP’s dominance of the business software market combined with the sheer size and momentum of the company and its developers sometimes make it hard for those inside to see the reality outside. So I can understand why statements like those of Agassi and Kagermann are made.</p>
<p>Nevertheless, it makes me sad to think that they’re perhaps forgetting the enormous cooking pot, the catalyst, that is the ABAP language and the business applications that have been delivered, in an open source fashion (the source is available to see and modify), to customers for the past decade or so. Both SAP developers and SAP customers have benefitted from this cooking pot; the former due to <a href="http://www.catb.org/~esr/writings/cathedral-bazaar/cathedral-bazaar/ar01s04.html">Linus’s law</a> (“given enough eyeballs, all bugs are shallow”), and the latter due to the fact that customers can learn from, build upon, and fix code delivered from SAP.</p>
<p>Anyway, let’s see where this debate leads. SAP’s stance on open source is one thing; the stance on IP and software patents in Europe (read to the end of the article to find out what I’m referring to) is something else entirely more worrying. Come on chaps, do we really want a patent system that’s as ridiculously messed up as the one in the U.S.?</p>
<p><strong>Update:</strong><a href="http://www.gadgetguy.de/index.php/2005/05#SAP__PHP_just_for_college_students_">Frank K</a> looks at the quote differently, and also mentions SAP’s involvement with Zend. Of course, this is one of many initiatives (MaxDB and contributions by SAP’s <a href="http://www.sap.com/linux">LinuxLab</a> to the GNU/Linux kernel to name a couple of others) that SAP are undertaking. Don’t get me wrong – the reason why I was so shocked is that it was such a left-of-centre stance all of a sudden. I’ve <a href="https://weblogs.sdn.sap.com/cs/user/view/cs_msg/258">defended SAP’s open source initiatives</a> in the past, and I’ll do it again.</p>
<p>In all, I’m still quite confounded by the implication that open source is for students and not for ‘serious’ software. In our SAP landscape, we have <em>major</em> SAP-powered applications that are written in Perl (with Apache, running on Linux). Perhaps it’s me. I dunno. Time for a beer. Cheers!</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Ubuntu? Thanks. But no thanks.</title>
      <link href="https://qmacro.org/blog/posts/2005/04/25/ubuntu-thanks.-but-no-thanks./"/>
      <updated>2005-04-25T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2005/04/25/ubuntu-thanks.-but-no-thanks./</id>
      <content type="html">
        <![CDATA[
      <p>Lots of <a href="http://www.intertwingly.net/blog/2005/04/22/Ubuntu-Live-on-T40">people</a> seem to be very impressed with <a href="http://www.ubuntulinux.org">Ubuntu</a>, the slick new Linux distro based on Debian, running Gnome. Even my friend and colleague <a href="http://www.piersharding.com">Piers</a> has been bitten by the bug.</p>
<p>To provide balance for all the good press it’s getting, I thought I’d share my experiences. And they’re all bad, unfortunately.</p>
<p>Downloaded the latest release (Hoary Hedgehog) as a live CD image. Burnt to CD. Booted my Dell Latitude X200 laptop with it. No video (apart from the initial 80×25 setup screens). Even trying the VGA=771 had limited but ultimately intermittent success. On the few occasions when I did actually get a Gnome screen, it would only work in 640×480. (<a href="http://www.knoppix.org">Knoppix</a>, and other live CDs work fine on this laptop).</p>
<p>No bother, I thought, I’ll go for an install CD this time, and try it out on my trusty but recently retired old server in the basement. It’s as bog standard as you could get, and has had all manner of Linux distributions running fine on it (RedHat, Fedora, Slackware, and so on).</p>
<p>Four attempts at an install later, and no success in sight. Don’t ask me what the problems were, because I was so annoyed I erased them from my memory as I chucked the newly burnt CD in the bin. I was planning to put Ubuntu, with the nice Gnome interface, on to that old server, and use it to replace my mum’s ageing W98 machine. But no joy.</p>
<p>A shame. I really wanted Ubuntu to work. I’m sure a hell of a lot of work went into putting Ubuntu together. And I’m sure it must be me that’s doing something wrong. But I’ve installed / booted my fair share of OSes in the past (it’s a long-term hobby with me) so I wonder what it could be. I’m after the ease of Knoppix, with the slickness and completeness of Gnome. Hmm, perhaps I should have another look at <a href="http://www.gnoppix.org">Gnoppix</a>, but it seems that they’re based on Ubuntu (now?) as well.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Europe, SAP, and two-way conferences</title>
      <link href="https://qmacro.org/blog/posts/2005/04/22/europe-sap-and-two-way-conferences/"/>
      <updated>2005-04-22T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2005/04/22/europe-sap-and-two-way-conferences/</id>
      <content type="html">
        <![CDATA[
      <p>It’s the end of the week that saw the <a href="/archives/2005/04/sdn_meets_labs.html">SDN Meets Labs</a> down in Walldorf. There was plenty of interest (apparently over 300 people attended, way more than in the similar event held in Palo Alto earlier this year) during, before and after (lots of reviews on the <a href="http://www.sdn.sap.com/sdn/weblogs.sdn">‘planet’ SDN weblog collective</a>).</p>
<p>But despite this interest, and despite the great efforts of those behind the scenes (thanks Karl and Mark) to get the behemoth to provide blanket Internet access for the conference location, there was something, well, lacking. It’s something that <a href="http://www.koehntopp.com/frank/index.php">some</a> <a href="http://www.silentpenguin.com">people</a> have noticed and talked about before now, something that’s particularly European (or rather, non-U.S.). Whereas at U.S.-based events (for example, O’Reilly’s <a href="http://conferences.oreillynet.com/os2005/">OSCON</a>, or more pertinently, the <a href="https://www.sdn.sap.com/sdn/index.sdn?page=sdnmeetslabs_sessions.htm">SDN Meets Labs in Palo Alto</a>) there’s a parallel conversation, a parallel conference going on in the ether, via IM, IRC, and weblogging, there’s a noticeable silence at some events in Europe. For example, at the Palo Alto event, there was active participation from people not actually there (with a lot of help from the webcasts), and plenty of conversation in the #sdnmeetslabs backchannel. In Walldorf this week, you could see the digital tumbleweed roll by in there – partly due to the fact that the Internet connectivity didn’t extend to the actual session rooms.</p>
<p>I think it’s partly the environment (Internet availability at SAP events have been poor to non-existent <a href="https://www.sdn.sap.com/sdn/weblogs.sdn?blog=/pub/wlg/175">in the past</a>), but it’s also culture. <a href="http://www.silentpenguin.com/archives/2005/04/building_a_euro.html">Matthew</a> has talked about before – conferences are two-way, not one-way. In other words, events are read/write, not read-only. The culture in Europe needs to change. Change from within the corporate mind, and from within the minds of event attendees. I think it is changing. And the more companies realise the benefit of two-way interaction at technical events, the quicker the change will happen.</p>
<p>Roll on <a href="http://conferences.oreillynet.com/cs/eurooscon/create/e_sess">Euro-OSCON</a>!</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Flickr Pro from Robert</title>
      <link href="https://qmacro.org/blog/posts/2005/04/20/flickr-pro-from-robert/"/>
      <updated>2005-04-20T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2005/04/20/flickr-pro-from-robert/</id>
      <content type="html">
        <![CDATA[
      <p>Wow, <a href="http://se71.org/blog">Robert</a> just gave me a Flickr Pro account, thanks Robert!</p>
<p>I’m going to have to think of ways to make use of the extra bandwidth and picture storage capabilities, aren’t I?</p>
<p>This comes in handy right now as I was talking to <a href="http://finnern.com">Mark</a> yesterday at the SDN Meets Labs and he was trying to figure out how to get a whole load of pictures, identified by one or more tags, into a pool, all at once. It seemed from the UI that you couldn’t do it directly; looking however at the <a href="http://www.flickr.com/services/api/">API</a> a little script making use of a combination of <a href="http://www.flickr.com/services/api/flickr.photos.search.html">flickr.photos.search</a> and <a href="http://www.flickr.com/services/api/flickr.groups.pools.add.html">flickr.groups.pools.add</a> might do the trick.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>SDN Meets Labs</title>
      <link href="https://qmacro.org/blog/posts/2005/04/19/sdn-meets-labs/"/>
      <updated>2005-04-19T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2005/04/19/sdn-meets-labs/</id>
      <content type="html">
        <![CDATA[
      <p>Rain. Lots of it. And I drove through it all this morning, all the way down the A61, to get to SAP University in Rot, near Walldorf. I’m at the <a href="https://www.sdn.sap.com/sdn/index.sdn?page=sdnmeetslabs_walldorf_agenda.htm">SDN Meets Labs</a> event that’s taking place today and tomorrow. The event is a part of the <a href="https://www.sdn.sap.com/sdn/index.sdn?page=sdnmeetslabs.htm">SAP NetWeaver Technology Tour</a>, which serves to bring together SAP technologies and SAP hackers (inside and outside of SAP) in the style of a mini-conference.</p>
<p>The event is just getting underway, and thankfully, this time, there’s access to the interweb available to one and all.</p>
<p>Right now Klaus Kreplin, an SDN bigwig, is talking about ROI and NetWeaver, and the reality of IT. It’s a similar presentation, using some of the same slides, as the one that Shai Agassi gave at TechEd last year in Munich. So I don’t have to concentrate too much right now.</p>
<p>But a quick glance at the <a href="https://www.sdn.sap.com/sdn/index.sdn?page=sdnmeetslabs_sessions_walldorf.htm">sessions</a> that are coming up, I’ll have to get my brain in gear. Actually, another glance around the auditorium just now and it’s <a href="http://www.flickr.com/photos/qmacro/9888561/">full to overflowing</a>. Excellent. Lots of chat and geek-exchanges to come, I hope.</p>
<p>Anyway, I’ve added some photos of the opening day (pictures from registration) to the <a href="http://www.flickr.com/groups/55589891@N00/">SAP Developer Network</a> group at <a href="http://www.flickr.com">Flickr</a>.</p>
<p>By the way, I’m sure that one of the chaps sitting over to my right is <a href="http://www.koehntopp.com/frank/index.php">Frank Koehntopp</a> – Frank – is that you? Perhaps I’ll ask him via the IRC backchannel for this event – which is the #sdnmeetslabs channel on irc.freenode.net. See you there!</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Muscle cars</title>
      <link href="https://qmacro.org/blog/posts/2005/04/07/muscle-cars/"/>
      <updated>2005-04-07T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2005/04/07/muscle-cars/</id>
      <content type="html">
        <![CDATA[
      <div style="float: right; margin-left: 10px; margin-bottom: 10px;">[![](http://photos7.flickr.com/8499955_30a62fd651_m.jpg)](http://www.flickr.com/photos/qmacro/8499955/ "photo sharing")  
<span style="font-size: 0.9em; margin-top: 0px;">  
[Muscle cars](http://www.flickr.com/photos/qmacro/8499955/)  
<p>Originally uploaded by <a href="http://www.flickr.com/people/qmacro/">qmacro</a>.<br>
</span></div>Driving down from Manchester to Midhurst, I stopped at the Oxford services on the M40, and parked up next to these monster-engined cars. Being still a kid at heart, I went over and had a long look at the cars and a chat with the owners.</p>
<p>They were on their way up from London to the <a href="http://www.shakespearecountyraceway.com/">Shakespeare County Raceway</a> for a few races and time trials. It was great to see cars like this, and even better to hear them start up as they left. I have a fondness for old (’60s and ’70s) American cars, having had a lovely <a href="http://www.flickr.com/photos/qmacro/4258539/">’73 Chevrolet Caprice</a> for many years.</p>
<p>That reminds me, <a href="http://www.advogato.org/person/mallum/">mallum</a> has a great looking <a href="http://www.butterfeet.org/mustang/Picture046_12May04.jpg">Mustang</a> and I’m really jealous :-)</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>An overcorrection too far?</title>
      <link href="https://qmacro.org/blog/posts/2005/02/28/an-overcorrection-too-far/"/>
      <updated>2005-02-28T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2005/02/28/an-overcorrection-too-far/</id>
      <content type="html">
        <![CDATA[
      <p>Norman Walsh <a href="http://norman.walsh.name/2005/02/24/wsdl">gives up ‘wrestling his way through the arcana of WSDL’</a>. He describes his frustrations with WSDL complexities and the difficulty of getting things done.</p>
<p>He goes on:</p>
<blockquote>
<ul>
<li></li>
</ul>
<p>Now suppose the implementation of great_circle_distance was a web service. It could be a straight-forward REST web service or it could be some sort of RPC or it could be something else. As a programmer writing WITW, I don’t care! What has to happen is, I declare the function and then I use it. A little boilerplate is OK, <strong>but making me understand URIs or GET or POST</strong> or XML isn’t. [Emphasis mine]<br>
*</p>
</blockquote>
<p>Allow me to paraphrase taking the world of SQL as an example: <em>“…but making me understand which tables are which, and the difference between SELECT and UPDATE … isn’t”</em>.</p>
<p>Surely that’s going a little too far in the other direction?</p>
<p><em>Later:</em></p>
<p>Sam Ruby, linking to this post, <a href="http://www.intertwingly.net/blog/2005/02/28/Secular-Simplicity">ponders object relational mapping frameworks and simplicity</a>, while reminiscing on concise cylinder and head placement of data in the days of yore.</p>
<p>(I too remember calculating optimum cylinder and track positions on separate spindles for the data in the (then) DL/1-based SAP R/2 databases I worked with, while scoffing at the new kid on the block, DB2, with its newfangled ‘relational’ model, which was obviously not going to last…)</p>
<p>Anyway, his question and statement</p>
<blockquote>
<ul>
<li></li>
</ul>
<p>What is simplicity? We all think we know what it is.<br>
*</p>
</blockquote>
<p>succinctly puts the finger on one of the real reasons for a lot of the debates that wax and wane as technologies and ideas come and go.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Postcode bookmarklet</title>
      <link href="https://qmacro.org/blog/posts/2005/02/26/postcode-bookmarklet/"/>
      <updated>2005-02-26T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2005/02/26/postcode-bookmarklet/</id>
      <content type="html">
        <![CDATA[
      <p>We’ve been spending time recently looking at <a href="http://del.icio.us/qmacro/property">property</a> in the North West. I found myself often cutting and pasting a property’s postcode from the property particulars page into <a href="http://www.multimap.com/">Multimap</a> to see exactly where it was.</p>
<p>I’d been meaning to get around to making that easier when I saw <a href="http://erikbenson.com/">Erik Benson</a> point at <a href="http://www.kokogiak.com/gedankengang/2005/02/flickr-toy.html">FlickReplacr</a>, a cool bookmarklet toy. I had a look at the Javascript inside, and on seeing this bit,</p>
<blockquote>
<p>var g=window.getSelection();</p>
</blockquote>
<p>I realised that it was exactly what I could use to make my postcode lookups smoother.</p>
<p>So herewith a little bookmarklet: [Postcode](javascript:location.href='http://uk.multimap.com/map/browse.cgi?pc='+encodeURIComponent(window.getSelection())). As with other bookmarklets, just drag this link to your toolbar; then whenever you see a postcode on a page, select it with the mouse, and click the bookmarklet.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Weblog happy in new home - note new URLs!</title>
      <link href="https://qmacro.org/blog/posts/2005/02/25/weblog-happy-in-new-home-note-new-urls!/"/>
      <updated>2005-02-25T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2005/02/25/weblog-happy-in-new-home-note-new-urls!/</id>
      <content type="html">
        <![CDATA[
      <p>If you subscribed to my weblog via RSS and read it solely in RSS readers, you might have wondered what had happened recently when the RSS feeds disappeared. Well, it’s moved. I’m having <a href="/blog/posts/2005/02/18/a-fresh-start/">a fresh start</a>, with different blog software, with slightly different URLs. You can find this weblog now at <a href=""></a>, and the (single, version 1.0) RSS feed at <a href="/index.rdf">/index.rdf</a>.</p>
<p>So if you’re subscribing via the old RSS feed URLs (//qmacro.org/about/xml or http://www.pipetree.com/~dj/qmacro.rss10) please change to <a href="/index.rdf">/index.rdf</a>.</p>
<p>Thank you. And sorry for any inconvenience and confusion.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Ralphm on sjabber</title>
      <link href="https://qmacro.org/blog/posts/2005/02/24/ralphm-on-sjabber/"/>
      <updated>2005-02-24T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2005/02/24/ralphm-on-sjabber/</id>
      <content type="html">
        <![CDATA[
      <p><img src="http://farm4.static.flickr.com/3310/3487763403_c59fc601e4_t.jpg" alt="sjabber running on a Wyse terminal"></p>
<p>I had a nice conversation with <a href="http://ralphm.net/">Ralph Meijer</a> this afternoon; he had grabbed a very old program that I’d written — <a href="/jabber/sjabber">sjabber</a>, a console-based Jabber groupchat client — because he’d been having some issues with his current client.</p>
<p>As Ralph <a href="http://ralphm.net/blog/2005/02/24/sjabber">explained in his blog</a> just now, it only took a single-line modification to get it up and running with the newer <a href="http://mu-conference.jabberstudio.org/">mu-conference</a> protocol. And if you look at the line:</p>
<blockquote>
<p>Type =&gt; 'headline', # why did I do this?</p>
</blockquote>
<p>it was fairly questionable, even to me, from the start ;-) (The line was commented out.) Clearly it should have been ‘groupchat’ from the beginning. Early days…</p>
<p>BTW, Ralph’s speaking this weekend at <a href="http://www.fosdem.org/">FOSDEM</a>, in Brussels. Irritatingly I’m otherwise engaged on the Saturday and can’t make it then; but I’m hoping to be able to pop down in the car on the Sunday and spend the day there. It’s a great event.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Honest application requirements</title>
      <link href="https://qmacro.org/blog/posts/2005/02/24/honest-application-requirements/"/>
      <updated>2005-02-24T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2005/02/24/honest-application-requirements/</id>
      <content type="html">
        <![CDATA[
      <p>Working, as I do, on large (<a href="http://www.sap-ag.de/">SAP</a>-based) projects, I get my fair share of ridiculous and badly-thought-out requirements. So it was nice to see this in the design goals list for <a href="http://spacepants.org/src/julie/">julie</a>, an MP3 and OGG jukebox:</p>
<blockquote>
<ul>
<li>Simplicity: julie should be easy to use when you’re drunk. *</li>
</ul>
</blockquote>
<p>How … refreshing.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Blosxom entries into MT</title>
      <link href="https://qmacro.org/blog/posts/2005/02/23/blosxom-entries-into-mt/"/>
      <updated>2005-02-23T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2005/02/23/blosxom-entries-into-mt/</id>
      <content type="html">
        <![CDATA[
      <p>After setting up this blog, it was only natural to bring across my earlier blog posts that were previously served with <a href="http://www.blosxom.com/">Blosxom</a>. (I haven’t fallen out with Blosxom, I just wanted a change of scenery and a fresh start). Blosxom blog entries are simple .txt files where the first line is the post title and the rest of the lines are the body. The files are arranged in directories that reflect a category hierarchy.</p>
<p>As a MT-novice I looked around and considered how I might best bring those Blosxom based post into MT. I mused upon a script revolving around <a href="http://www.movabletype.org/docs/mtapi_mt_entry.html">MT::Entry</a>, then one that used XML-RPC, before discovering the <em><a href="http://www.sixapart.com/movabletype/docs/mtmanual_importing">import</a></em> feature from reading the documentation to <a href="http://scott.yang.id.au/2002/12/mtsendpy/">mtsend.py</a>. A simple file format to mass-load into MT. Perfect.</p>
<p>So I hacked up <a href="/~dj/2005/02/MakeMtImportEntries.py">MakeMtImportEntries.py</a>, a script that takes a filename (of a Blosxom .txt entry) and produces the blog post in the import format consumable by MT.</p>
<p>This is the sort of format I’m talking about:</p>
<p>TITLE: The Blog Post Title ALLOW COMMENTS: 0 ALLOW PINGS: 1 CONVERT BREAKS: 0 DATE: 04/27/2002 08:57:14 ----- BODY: The blog post body ...</p>
<p>You can therefore use this script in a find loop, like this:</p>
<p>find ./blog/ -name '*.txt' -exec ./MakeMtImportEntries.py &gt; import.dat</p>
<p>and then move import.dat to where the MT import function expects it. Pretty straighforward.</p>
<p>(I’m not interested right now in re-creating the categories in MT from the hierarchical categories in Blosxom, so hacking the script to include category-specific ‘headers’ in the template is left as an exercise for the reader.)</p>
<p>Share and enjoy.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>ClaphamJunction2</title>
      <link href="https://qmacro.org/blog/posts/2005/02/18/claphamjunction2/"/>
      <updated>2005-02-18T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2005/02/18/claphamjunction2/</id>
      <content type="html">
        <![CDATA[
      <p><a href="http://www.flickr.com/photos/qmacro/4954887/" title="ClaphamJunction2 by qmacro, on Flickr"><img src="http://farm1.static.flickr.com/5/4954887_dae11bc094_t.jpg" alt="ClaphamJunction2" title="Clapham Junction"></a>I spend a lot of time at Clapham Junction. And as much as I don’t like waiting around for trains, there definitely is something about that station that appeals.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>A fresh start</title>
      <link href="https://qmacro.org/blog/posts/2005/02/18/a-fresh-start/"/>
      <updated>2005-02-18T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2005/02/18/a-fresh-start/</id>
      <content type="html">
        <![CDATA[
      <p><a href="http://www.flickr.com/photos/qmacro/4995324/" title="PiersAtMailbox by qmacro, on Flickr"><img src="http://farm1.static.flickr.com/5/4995324_f3a8b64ded_t.jpg" alt="PiersAtMailbox" title="gnu at Mailbox"></a></p>
<p>A couple of weeks ago, Piers and I noticed some odd system messages on gnu.pipetree.com’s console. It looked like we might be under attack. Following some oddness all round, including the network interface not coming up after a reboot, we decided that the best thing to do was a fresh install of everything. So after a quick dash out at lunchtime to buy a new HDD and install the OS and applications, we went down to see the friendly and helpful folks at <a href="http://web.archive.org/web/20060313005353/http://www.mailbox.net.uk/">Mailbox</a> and performed surgery on the patient.</p>
<p>Now back up and running, we’re slowly reconfiguring stuff. A move to using <a href="http://web.archive.org/web/20060313005353/http://www.moveabletype.org/">Moveable Type</a> as a shrinkwrapped piece of commodity software seemed like a good idea. I like tinkering as much as the next person, but I think we’ve reached a level where certain applications should ‘just work’ – after all, I don’t worry how Apache works inside (much), why should I spend time hacking on blogging software? I should just <em>write</em>. Moreover, fewer Internet cafes offer anything more than web access, so I need a web-based front end to things more and more (I’m still holding on to <a href="http://web.archive.org/web/20060313005353/http://www.mutt.org/">Mutt</a> for now, though).</p>
<p>Anyway, <a href="http://web.archive.org/web/20060313005353/http://se71.org/blog">Robert</a> had recently started using MT, so I thought I’d give it a go. I tried <a href="http://web.archive.org/web/20060313005353/http://www.wordpress.org/">WordPress</a> too. WordPress was a breeze to install and get going with – 10 minutes all told. But it didn’t seem to have ‘proper’ RSS (1.0) [Later: I found Morten talking about <a href="http://web.archive.org/web/20060313005353/http://www.wasab.dk/morten/blog/archives/2004/05/20/improving-rss-output-from-wordpress">how to turn RSS 1.0 on</a>], and I couldn’t immediately use it with some other software and applications I had in mind. MT was more of a pain. I just about managed it in an hour, but that involved looking at Perl code, tailing server logs, and lots of head scratching. Not very impressive. But now it’s running, I’m happy.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>The meaning of LIFETIME_RC</title>
      <link href="https://qmacro.org/blog/posts/2004/10/12/the-meaning-of-lifetime_rc/"/>
      <updated>2004-10-12T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2004/10/12/the-meaning-of-lifetime_rc/</id>
      <content type="html">
        <![CDATA[
      <p>Last week, during some preparation for my talk at TechEd on Thursday this week, I’d been wondering about something in the ICF that hadn’t seemed quite right. Interface <code>IF_HTTP_EXTENSION</code>, which is what every ICF handler must implement (in the form of a single method <code>HANDLE_REQUEST</code>) has a couple of attributes, <code>FLOW_RC</code> and <code>LIFETIME_RC</code>. <code>FLOW_RC</code> is for controlling the flow of handler dispatching for a request. <code>LIFETIME_RC</code> is for controlling the lifetime of handlers for a sequence of requests. To quote the <a href="https://help.sap.com/docs/SAP_NETWEAVER_AS_ABAP_751_IP/753088fc00704d0a80e7fbd6803c8adb/48d60603553b3e49e10000000a421937.html?locale=en-US&amp;version=7.51.6">documentation at help.sap.com</a> on the latter:</p>
<blockquote>
<p>HTTP request handlers can control the lifetime of their instances if they are operating in stateful mode … If the attribute <code>IF_HTTP_EXTENSION~LIFETIME_RC</code> is set to one of the following values, the HTTP request handler can specify whether the handler should be reinitiated for every request in a session, or whether the handler should be retained and reused for subsequent HTTP requests.</p>
</blockquote>
<p>The default action is for the handler instance created to handle the request to be kept, so that instance-level data is retained (think of an incrementing counter value that keeps going up every new request). This is the equivalent of setting <code>LIFETIME_RC</code> to the value of the constant <code>CO_LIFETIME_KEEP</code>. But if <code>LIFETIME_RC</code> is set to the value of constant <code>CO_LIFETIME_DESTROY</code>:</p>
<blockquote>
<p>The current instance of the HTTP request handler is terminated after the request is processed. If stateful mode is active, a new instance of the HTTP request handler is created. This means that local data belonging to the instance is lost.</p>
</blockquote>
<p>(This of course only makes sense in the context of stateful sessions, which you can create using the <code>SET_SESSION_STATEFUL</code> method (of <code>IF_HTTP_SERVER</code>) – one effect of which causes a context id cookie to be constructed and set in the next HTTP response.)</p>
<p>Ok, so with the phrasing of the help text (such as “…can control the lifetime…“) and the implication of the “DESTROY” part of the constant name, I did a little experiment to try and control the lifetime, by setting the <code>LIFETIME_RC</code> attribute so that the handler instance would be destroyed after it exited. Did it work as expected?</p>
<p>No.</p>
<p>Hmm. What’s going on? Well, it seems that with <code>LIFETIME_RC</code>, it’s either all or nothing. If you set your session to be stateful and specify that the handler instance should be kept (or let it default to that anyway), then you can’t, later in the session, suddenly decide to have the session destroyed.</p>
<p>Looking under the hood, we see this is confirmed in the ICF layer’s code. The whole process of handling a request is triggered via PBO modules in <code>SAPMHTTP</code>, and via the <code>HTTP_DISPATCH_REQUEST</code> coordinator, we come to the <code>EXECUTE_REQUEST</code> (or <code>EXECUTE_REQUEST_FROM_MEMORY</code> which I’ve seen in 6.40) method of the <code>CL_HTTP_SERVER</code> class.</p>
<p>When a request comes in, the appropriate handler is instantiated, and the <code>HANDLE_REQUEST</code> method called. Once this method returns, a decision based on <code>LIFETIME_RC</code> is made as to whether to save the instantiated handler object in an internal table, ready for a new request. Unless <code>LIFETIME_RC</code> is set to destroy, the object is saved, providing we’re dealing with a stateful session:</p>
<pre class="language-abap"><code class="language-abap"><span class="token keyword">if</span> server<span class="token token-operator punctuation">-></span>stateful <span class="token operator">=</span> <span class="token number">1</span> <span class="token keyword">and</span> extension<span class="token token-operator punctuation">-></span>lifetime_rc <span class="token operator">=</span> if_http_extension<span class="token token-operator punctuation">=></span>co_lifetime_keep <span class="token keyword">and</span> ext_inst_idx <span class="token operator">=</span> -<span class="token number">1</span><span class="token punctuation">.</span> <span class="token operator">*</span> <span class="token keyword">add</span> <span class="token keyword">extension</span> <span class="token keyword">to</span> <span class="token keyword">list</span> <span class="token keyword">of</span> instantiated extensions <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre>
<p>There’s no facility for removing existing table entries though. And this is the key to understanding why manipulating the <code>LIFETIME_RC</code> attribute won’t always do … what you think it should do.</p>
<p>I bet you’re glad you know that now … share and enjoy 🙂</p>
<p><a href="https://blogs.sap.com/2004/10/12/the-meaning-of-lifetimerc/">Originally published on SAP Community</a></p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>SAP TechEd first day - notes from Munich</title>
      <link href="https://qmacro.org/blog/posts/2004/10/12/sap-teched-first-day-notes-from-munich/"/>
      <updated>2004-10-12T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2004/10/12/sap-teched-first-day-notes-from-munich/</id>
      <content type="html">
        <![CDATA[
      <p>Well, after a nightmare getting here (V-Bird, the airline I was booked with, went bust) I’m now in Munich at a decidedly disconnected TechEd 04 (more on the disconnected misery later).</p>
<p>After registration, we went along to Shai Agassi’s keynote presentation. It was fairly interesting, but overall, there was a single key point that stayed with me: “unification” is the new “integration”.</p>
<h2>Unified, not integrated</h2>
<p>Shai talked about cycles in the IT industry. He used the airline check-in process as an example to talk about how processes are invented, integrated, and eventually commoditised. He pointed out the fact in the past, check-in used to be handled by people. Big queues, long delays. Now we have self-service check-in stations, where you just stick in your credit or frequent flyer card and are checked in in an instant. Big attraction. The next big thing will be airlines offering you a check-in process … performed by a real human being! A circle completed.</p>
<p>Last week I read a <a href="http://www.mnot.net/blog/2004/05/05/boo">blog entry</a> talking about XML and the transport of binary data. Someone mentioned to me that XML was fairly inappropriate, inefficient even, to transport data that is more suited to a binary representation, and perhaps binary protocols are the future. Now if that isn’t a complete circle being formed I don’t know what is 🙂</p>
<p>And this is where we come to ‘unified, not integrated’ (my phrase). Recently I <a href="/blog/posts/2004/09/29/the-integration-irony-of-sap's-technology-directions/">pondered the potential irony of SAP’s technology directions</a>, with particular reference to data integration. Basically it seems to me that SAP is moving away from integration as a focus (I used the word “de-integration” to describe what I meant), with all the different parts of the NetWeaver family performing different functions, and data living in and travelling between different systems. (This is in stark contrast to the opposite effect on the client side, where all data and functions seem to be converging into one homogenised front-end).</p>
<p>Anyway, this morning during the keynote, with the irony of integration still in my thoughts, I settled on an explanation of what might be happening. And the key to what is happening is the word “unified“. Unification of data and processes is close to integration of data and processes, but it’s not the same thing. And (unless I got the wrong end of the stick) it seems that platform and data unification is what SAP is driving at right now. So I’m now trying to change the design of the puzzle — where I try to figure out what direction SAP is going with technology — from an ‘integration’-based one to a ‘unified’-based one.</p>
<p>And cycles? Well, I’m just wondering how long it will be that we complete the circle and data and function integration and consolidation is all the rage. Again.</p>
<h2>Other stuff</h2>
<p>Of course, there was a lot of other stuff that went on at the keynote too. Here are a couple of pointers:</p>
<h3>Composite and xApps</h3>
<p>Shai gave a lot of time to telling us about how composite and xApps will help us in being more flexible in business. I’m not doubting this, but I personally am still struggling to understand what they are (technically) and how they tick. I went to the xApps booth at TechEd last year in Basel, and quizzed the patient folk there trying to understand what we are dealing with. But I failed to ‘get it’. I suspect, based on what other people have said to me on this subject, that I’m not alone. So that’s perhaps why Shai gave the subject so much airtime this year. We’ll see, I’m definitely going to re-visit the xApps booth this year and have another go 🙂</p>
<h3>Java Virtual Machine Management</h3>
<p>Shai invited Harald Kuck up on stage to give a fantastic demonstration of how SAP hackers in Walldorf have enveloped the Java VM with the same virtual machine / process management goo that we’ve grown to know and love in the ABAP world (it works so well there that we don’t even notice it working). This is what SAP excels at – having the inspiration and guts to go for really hard problems … and solve them. Hats off to those people (just a shame the language in question is Java 😉</p>
<h2>Disconnected and powerless</h2>
<p>I am lucky enough to attend a number of technical conferences each year. SAP TechEd is certainly the most well-attended, orientated around the biggest software entity in the world, and I don’t need to tell you how important the ‘net is to ERP business these days.</p>
<p>So you’d think that providing some sort of Internet access would be as natural and obvious as providing food and water. Wouldn’t you? Well, wrong. I’m having deja-vu all over again, as the saying goes. In Basel, no ‘net access, and the sessions are so full you’re refused entry. Pretty disappointing. I decided to give TechEd another chance this year. Perhaps it’s too early to say for sure, but I think that it was possibly a bad move. No ‘net access (apart from access that you can buy on an hourly basis from the convention centre itself … at extortionate prices) at all, apart from in the speaker room (and it’s not proper ‘net access – just access to the Web via a proxy, so I can’t reach my email on my box, via ssh, for example). And the sessions we’ve wanted to attend so far … yep, have been too full to get into. So a bit like Basel. But with even less power (for laptops). ‘Disappointing’ is the word that comes to mind. I attend the grass-roots event <a href="https://www.fosdem.org">FOSDEM</a> (the Free and Open-Source Developers’ Meeting) in Brussels, and even they can organise free wifi access. And the attendance fee is … zero! What’s going on, SAP?</p>
<p><img src="/images/2004/10/MarkAndCraig.jpg" alt="Craig and Mark"></p>
<p>(Indeed, as you can see here, Craig Cmehil is so desperate he’s had to resort to paper and pencil to write his blog post!)</p>
<p>I’d like to end this ramble on a positive note, though. Our great leader Mark Finnern is running around organising a few of these extortionate access cards for the SDN clubhouse (which is also wireless-less and powerless) plus some power outlets for us. Nice one Mark, and thanks! We’ll see how it goes.</p>
<p><em>Update: Mark has organised power for the SDN clubhouse – thanks Mark!</em></p>
<p><a href="https://blogs.sap.com/2004/10/12/sap-teched-first-day-notes-from-munich/">Originally published on SAP Community</a></p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>SAP TechEd here I come ... with session slides!</title>
      <link href="https://qmacro.org/blog/posts/2004/10/01/sap-teched-here-i-come-...-with-session-slides!/"/>
      <updated>2004-10-01T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2004/10/01/sap-teched-here-i-come-...-with-session-slides!/</id>
      <content type="html">
        <![CDATA[
      <p>SAP TechEd is looming large, and this year it’s in Munich. (If you’re not in Europe, then SAP are holding TechEd events in Bangalore, Tokyo, and San Diego too). I went last year (in Basel), and was both impressed – by the quality of the session and tutorial content – and disappointed – at the lack of wifi and ‘net access in general. One thing that was lacking overall last year was a sense of community; everyone was their on their own, with the whole event feeling more like an exhibition or computer fair, rather than a conference. That, or everyone was avoiding me 😉</p>
<p>This year, it’s going to be different. There’s a wiki, there will be Birds Of a Feather sessions, including a SapAndOpenSourceBof run by me and my good friend Piers. Wifi and ‘net access has even been promised too. (Although when I compare the bullet points on the Munich and San Diego pages, there’s a distinct difference – no wireless at Munich?)</p>
<p>But the biggest change this year for me is that I’ll be speaking. I’m giving a one hour session:</p>
<p><strong>The Internet Communication Framework: Into Context and Into Action!</strong></p>
<p><em>Business Server Pages (BSP) technology is a great way to put together ABAP powered web-based applications. But that’s not the only way; in the grander scheme of things, BSP technology is ‘just’ a layer that sits on top of the Internet Communication Framework (ICF), the Web Application Server’s core foundation that provides a full set of object-orientated APIs for handling HTTP requests and responses. This talk will put the ICF not only into context – what it is, how it works, why it’s important – but also into action, with a live demonstration where we build, debug and run a simple web-based service. If you’re interested in looking under the hood at the engine that connects the Internet Communication Manager with the ABAP Personality world, and learning how to use it yourself, then this talk is for you!</em></p>
<p>I’m really excited at the chance to ramble and rant about some great parts of the Web Application Server; in many ways, the ICF is a bridge between the traditional walled world of SAP and the world of open standards. And this particular bridge is constructed with blocks that have ‘HTTP’ stamped through them.</p>
<p><a href="https://blogs.sap.com/2004/10/01/sap-teched-here-i-come-with-session-slides/">Originally published on SAP Community</a></p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>SAP TechEd here I come ... with session slides!</title>
      <link href="https://qmacro.org/blog/posts/2004/09/30/sap-teched-here-i-come-...-with-session-slides!/"/>
      <updated>2004-09-30T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2004/09/30/sap-teched-here-i-come-...-with-session-slides!/</id>
      <content type="html">
        <![CDATA[
      <p><a href="http://emea.sapteched.com">SAP TechEd</a> is looming large, and this year it’s in Munich. (If you’re not in Europe, then SAP are holding TechEd events in Bangalore, Tokyo, and San Diego too). I went last year (in Basel), and was both impressed – by the quality of the session and tutorial content – and disappointed – at the lack of wifi and ‘net access in general. One thing that was lacking overall last year was a sense of community;<br>
everyone was there on their own, with the whole event feeling more like an exhibition or computer fair, rather than a conference. That, or everyone was avoiding me ;-)</p>
<p>This year, it’s going to be different. There’s a <a href="http://wiki.sdn.sap.com/teched04/">wiki</a>, there will be <a href="http://wiki.sdn.sap.com/teched04/index.cgi?MunichBOF">Birds Of a Feather sessions</a>, including a <a href="http://wiki.sdn.sap.com/teched04/index.cgi?SapAndOpenSourceBof">SapAndOpenSourceBof</a> run by me and my good friend <a href="http://www.piersharding.com/blog/">Piers</a>. Wifi and ‘net access has even been promised too. (Although when I compare the bullet points on the <a href="http://emea.sapteched.com">Munich</a> and <a href="http://www.sapteched.com">San Diego</a> pages, there’s a distinct difference – no wireless at Munich?)</p>
<p>But the biggest change this year for me is that I’ll be speaking. I’m giving a one hour session:<br>
**</p>
<blockquote>
<p><em><strong>The Internet Communication Framework: Into Context and Into<br>
Action!</strong></em></p>
</blockquote>
<blockquote>
<p>*Business Server Pages (BSP) technology is a great way to put together<br>
ABAP powered web-based applications. But that’s not the only way; in<br>
the grander scheme of things, BSP technology is ‘just’ a layer that<br>
sits on top of the Internet Communication Framework (ICF), the Web<br>
Application Server’s core foundation that provides a full set of<br>
object-orientated APIs for handling HTTP requests and responses.<br>
This talk will put the ICF not only into context – what it is, how<br>
it works, why it’s important – but also into action, with a live<br>
demonstration where we build, debug and run a simple web-based service.<br>
If you’re interested in looking under the hood at the engine that<br>
connects the Internet Communication Manager with the ABAP Personality<br>
world, and learning how to use it yourself, then this talk is for you! *</p>
</blockquote>
<p>**</p>
<p>I’m really excited at the chance to ramble and rant about some great parts of the Web Application Server; in many ways, the ICF is a bridge between the traditional walled world of SAP and the world of open standards. And this particular bridge is constructed with blocks that have ‘HTTP’ stamped through them.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>The integration irony of SAP&#39;s technology directions</title>
      <link href="https://qmacro.org/blog/posts/2004/09/29/the-integration-irony-of-sap&#39;s-technology-directions/"/>
      <updated>2004-09-29T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2004/09/29/the-integration-irony-of-sap&#39;s-technology-directions/</id>
      <content type="html">
        <![CDATA[
      <p>I’ve finally realised what it is that’s been bugging me about the new arena of SAP technology. I’ve felt slightly uneasy, or unbalanced, by something that I couldn’t quite put my finger on.</p>
<p><strong>From integration to de-integration</strong></p>
<p>But while attending a (rather poor, I have to say) training course at SAP UK last week, it finally struck me. SAP have been selling enterprise level software for a very long time. And one of the key selling points was that the data, and the business processes, were <em>integrated</em>. Indeed, for a good while, SAP’s slogan (at least here in the UK) was “Integrated Software. Worldwide”.</p>
<p>But funnily enough, that slogan disappeared, in favour of another, that didn’t focus on integration. I can’t remember what it was (it was certainly less memorable), and now it’s changed again (to “The best-run businesses run SAP”). Anyway, back to integration. The dream presented by SAP in the 80s and 90s showed companies that they could escape the headaches of separate systems and integrate their data and processes into one single system (R/2 and later R/3). This was indeed the reality too.</p>
<p>But what’s happening today? Every way you turn, there are SAP systems doing different things, managing different processes, and storing different data (sometimes sharing it with other SAP systems). Customer Relationship Management (CRM) systems handling sales-related activities; Supplier Relationship Management (SRM) systems handling supplier activities; there’s the IPC system for pricing and configuration, and the APO system for planning and optimisation activities. And data is moved to a business warehouse for reporting purposes. And so it goes on.</p>
<p>Data and process <strong>de-integration</strong>, anyone?</p>
<p>I don’t know whether the term should be ‘deintegration’ or ‘disintegration'; all I know is that it seems a different road that SAP is travelling down than they did before. On the course I attended last week, the reality of managing data between different SAP systems in one installation was rather worrying. Just as it was 20 years ago. Or so it seems. And right now, at least with CRM and BI, there doesn’t seem to be a set of uniform data exchange tools for managing the exchange – for example, while Bdocs are used to manage master data between a CRM system and an R/3 (‘legacy’ :-) system, they’re not used for the same purpose between a CRM system and a BI system. Perhaps I haven’t drunk enough kool-aid yet.</p>
<p><strong>A different rule for the client side</strong></p>
<p>So what was the purpose of this post? It wasn’t directly to point out the about-turn SAP seem to be making in this area. It was actually to point out the juxtaposition that SAP’s new de-integrated direction has with … their vision for front-ends. While de-integration is where it’s at on the server side, we have <em>total integration</em> on the client side. Enterprise Portal (EP) 6.0, WebDynpro, PeopleCentric design (don’t get me started on that) – every function that a user might need is lumped together in one homogenised “web” client. Email, discussion groups, graphics, reports, transactions, IM, and so on. All on one page in your browser. What happened to ‘best of breed’ on the desktop? I’m a great believer in the right tools for each job. That’s why I run a proper email client (for email and threaded forum-style discussions), a separate IM client, a separate newsreader, and a browser. Each one excels in its own domain. Trying to achieve everything in a browser window is doomed.</p>
<p>So if best of breed, focused application platforms is what SAP is aiming for at the server end, why go in the other direction at the client end? A single screen looking extremely busy with lots of little application windows, flashing lights, tables, graphics, and so on, is <em>great</em> for screenshots and brochures. But what about the real end user? I’m an end user as well as a developer, and can imagine productivity taking a huge dive if we were forced to use this.</p>
<p>Of course, the browser-based applications served from the EP are a lot different from what I imagine browser based applications to be. You know, ones that allow you to use your browser as, well, <em>a browser</em>, with old fashioned things like bookmarking, navigation, proper page titles, and so on. And ones that work <em>in browsers</em>, not just in a specific combination of Microsoft Windows and Internet Explorer – I’m having a nigh-on impossible time getting in to the <a href="http://www.sdn.sap.com">SAP Developer Network </a>site right now, because of recent changes that cause the site not to ‘work’ at my end with Firefox and / or Epiphany on Linux.</p>
<p>But that (‘browser abuse’, as also <a href="http://bitworking.org/news/3270_Redux">noted in more general terms by Joe Gregorio</a>) is a story for another time ;-)</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>The Curious Incident Of The Dog In The Night-Time</title>
      <link href="https://qmacro.org/blog/posts/2004/09/06/the-curious-incident-of-the-dog-in-the-night-time/"/>
      <updated>2004-09-06T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2004/09/06/the-curious-incident-of-the-dog-in-the-night-time/</id>
      <content type="html">
        <![CDATA[
      <p>I bought three books at Manchester airport yesterday. One of them was <a href="http://www.amazon.co.uk/exec/obidos/ASIN/0099450259/">The Curious Incident Of The Dog In The Night-Time</a> by Mark Haddon. I started reading it this afternoon, and have just stopped to slow down. It’s about a young boy with an “emotionally dissociated mind” (a phrase that Ian McEwan used, which I like), who is investigating the death of a dog. The book is written as if by the young boy. The writing is exquisite. I think that is the word that consistently comes to mind when I try to think of a way to describe it. So that’s the word I’ve used here.</p>
<p>The writing is simple. Straightforward. It reflects the exact, black and white reasoning of this autistic child. Sad and funny at the same time. And as I read each sentence, I feel that a lot of work has gone into every one of them. Exactly the right words, the right number, and the right punctuation. It’s almost as if the words on the page, at a level above the story, tell a story themselves. I think the choice of font, which annoyingly is not mentioned in the impressum at the front like fonts used to be (“Printed in some-such-font by some-company in Bungay, Suffolk”), but is a very clean and light sans-serif one, adds to the clarity and directness of thought.</p>
<p>When you eat a bar of chocolate, you eat it chunk by chunk and there’s not much to think about. When you eat a truffle, or some delicate hand-made chocolate assortment, you eat it slowly, bit by bit, enjoying the flavours and appreciating the work that’s gone into making it. But sometimes you just shove it in your gob and it’s gone. I’m trying desperately not to do the latter with this book. It’s too good for that.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Is this thing still on?</title>
      <link href="https://qmacro.org/blog/posts/2004/08/21/is-this-thing-still-on/"/>
      <updated>2004-08-21T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2004/08/21/is-this-thing-still-on/</id>
      <content type="html">
        <![CDATA[
      <p>Tap, tap … cough</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>A little taste of SAP at EuroFoo</title>
      <link href="https://qmacro.org/blog/posts/2004/08/21/a-little-taste-of-sap-at-eurofoo/"/>
      <updated>2004-08-21T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2004/08/21/a-little-taste-of-sap-at-eurofoo/</id>
      <content type="html">
        <![CDATA[
      <p>I’m in Enschede (Netherlands) this weekend for EuroFoo – a mini-conference get-together for hackers and geeks of different persuasions.</p>
<p><img src="/images/2004/08/eurofoo-logo.gif" alt="EuroFoo logo"></p>
<p>It’s a great mix of ideas, skills, and energy, where the talks are decided more or less spontaneously and written up on a series of whiteboards.</p>
<p>I gave a talk – HelloSapWorld – this morning which was intended to burst the bubble that SAP seems to find itself within, for a great majority of hackers outside the SAP universe.</p>
<p>Monolith, behemoth, huge-and-complicated, impenetrable, impossible. Those are all terms I’ve heard used by friends and colleagues with respect to getting started with SAP. Especially here. So I was pleasantly surprised to see a good turnout for the talk, where we crowded round the laptops (there was no projector in the room allocated to us, so we improvised by replicating the screen on the rest of the wifi-connected laptops in the room via VNC).</p>
<p>After a few slides, we got into the meat of the talk, which was a live hacking session where we    created simple ‘Hello World’ style objects – a report, a function module, a BSP page, an ICF handler, a Python RFC client, a Perl RFC server, and even a (one-dynpro) transaction. The time we had (an hour) simply flew by.</p>
<p>I have already had very positive feedback from the attendees … who knows, maybe we’ll see more open source hackers entering the SAP world soon!</p>
<p>Update: Some pictures are available here: <a href="https://www.flickr.com/groups/eurofoo/">https://www.flickr.com/groups/eurofoo/</a></p>
<p><a href="https://blogs.sap.com/2004/08/21/a-little-taste-of-sap-at-eurofoo/">Originally published on SAP Community</a></p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>SDN Meetup in Walldorf - a summary</title>
      <link href="https://qmacro.org/blog/posts/2004/07/16/sdn-meetup-in-walldorf-a-summary/"/>
      <updated>2004-07-16T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2004/07/16/sdn-meetup-in-walldorf-a-summary/</id>
      <content type="html">
        <![CDATA[
      <p>Well, 24 hours (almost to the minute) have passed since I got off the train at Wiesloch-Walldorf station yesterday. I’ve just got on the train again to go home. Yesterday was quite a day. There was a really good turnout for the SDN meeting; some people from SAP came and went as their work and meeting schedules allowed, but at the peak there must have been around 20 people. The ‘outsiders’ (non-SAP people) there included Lutz Morrien, Klaus Meffert, Matthias Zeller and me.</p>
<p>The meeting kicked off at around 2pm in the “posh” 6th floor of SAP’s EVZ building (I understand food and drink focused logistics were the reason for that – nicely organised, Mark!) and lasted until sometime between 5pm and 6pm. I’m not sure exactly when as the time flew, and in any case, the coffee was so strong it made me go cross-eyed and I couldn’t have read the time if I’d tried.</p>
<p>We started with a huge round of introductions, where each person suggested one good thing and one bad thing about SDN. This was very revealing, as it showed clearly that different people have different perspectives on what SDN is and their relationship to it. But there was a lot of common ground.</p>
<p>As far as the good things went, well, the fact that SDN exists was pretty much up there at the top of the pile. Everyone was in agreement that a site like SDN, with weblogging, forum discussion and download facilities, as well as a growing collection of articles, was an extremely good thing (obviously!).</p>
<p>There were plenty of bad things that people put forward too. None that can’t be solved, I might add. I think it’s fair to say that the overwhelming winner here was the fact that you have to register and sign in to get to the SDN content and use the facilities. This (as I and others have pointed out in the past) has caused SDN to exist as an island. Very few people outside of SDN link to SDN content (forum posts, weblog items, articles) from their own pages simply because their readers are not prepared to go through the hassle of registering and authenticating with what they see as a “walled city”. And the number of people who might discover and link to SDN content is lower than it should be for exactly the same reasons.</p>
<p>But – get this – the requirement to log on is going away in the near future. Hurrah!</p>
<p>Following the introductions, I inflicted a combination of ranting, rambling and arm waving on the room, in the form of a short talk on an outsider’s view of SDN. I won’t repeat the content of the talk to you here, but as I’d put together a few slides (mostly to fool people into thinking I knew what I was doing) you can read them now here: An outsider’s view of SDN.</p>
<p>There was a good range of topics discussed. Here are some of the highlights (for me).</p>
<h2>SDN Content : Fact and Opinion</h2>
<p>What SDN is, and consequently what content it can and should contain, was enthusiastically debated. I think it’s fair to say that there were two general camps. In camp 1, there were people who regarded SDN as an extremely useful channel to deliver information on technology direct to developers. In camp 2, there were people who regarded SDN as an open community where everyone and their opinion were equal.</p>
<p>Weblogs and forums imply (to me) an open opportunity to talk about things, learning with and from your developer peers. This, coupled with the fact that a channel to deliver information seems (again, to me) to suggest traffic in mostly one direction and some sort of hierarchy in the relationship, puts me clearly in camp 2.</p>
<p>Everyone agreed that SDN was still in its infancy, and finding the right balance in this respect was (and is) an ongoing task, which is understandable in a ‘living, breathing’ environment.</p>
<h2>Accessibility and Navigation</h2>
<p>Not running MS-Windows, let alone the dreaded Internet Explorer, puts me in the minority. A position I make up for by being vocal about web design and architecture that doesn’t work well in non-IE situations. Javascript, frames, impossibly long URLs, and other usual suspects were mentioned in the discussion. Fortunately I wasn’t alone with my usability woes. I guess with any big site there are learning steps; I’m just doing my bit to help by complaining (politely :-).</p>
<p>The fact that SDN remains largely a black box (or is that a black hole?) in the general web universe has largely to do with the authentication requirements I’ve already mentioned. As soon as those requirements go away, SDN can partake of the link love that other communities are blessed with. Moreover, mechanisms like trackback will allow people who don’t want to use SDN to write about something to nevertheless make the connection to SDN content in a useful and recpirocal way.</p>
<h2>Content Management</h2>
<p>Raised mainly by the SAP people who submit articles and weblog entries to SDN, the consensus was that better facilities for managing content would be a bonus. The ability to revise content after submission is a good example of what people were asking for.</p>
<h2>Contributor Points System</h2>
<p>There’s a new mechanism that Mark and the rest of the SDN team have been working on, with which contributors to SDN can earn points, that can be redeemed for … well, I can’t remember, to be perfectly honest. It was about that time I made the mistake of drinking more black coffee, which made my head spin and my eyes cross. But I do remember there was a lot of discussion, about how the points could or should be awarded.</p>
<h2>Content Creation</h2>
<p>Kathy Meyers gave a good talk on how to write well for the web (I hope she’s not reading this now with that in mind – I’m sure I’ve broken lots of rules already!). On the subject of producing content, we  touched on the question of when content should be in the form of an article, and when it should be in the form of a weblog. Basically, I think the (sensible) consensus was reached that it didn’t really matter that much, and one just used common sense to tell. Different people will have different perspectives, and that’s fine.</p>
<p>Oh yes, and before I forget – some of the discussion was recorded, to be shown to the rest of the SDN team, who due to geography and other real world restrictions couldn’t be there. So don’t think that the meeting was an isolated affair; hopefully, all the points raised and discussed will find their way to the people who can act upon them.</p>
<h2>Schlachthof!</h2>
<p>After the meeting, Lutz, Mark, Matthias and I went into Wiesloch to the Alter Schlachthof for a few beers and something to eat. We had a great time talking about all sorts of things. It was all fine until I gave the language game away by talking to the waitress, a result of which Matthias forced us all to speak in German 😉</p>
<p>Later Mark tracked down Marc, he was in Heidelberg, and after finishing his drink there came down to meet us. He arrived with a plastic bag with (SAP)”TABU” on the outside and Absinthe on the inside. He ordered a blue drink, pointed out that it was actually green, and then drank it anyway, telling us stories involving VCs, a hotel called “W”, nightclubs in New York, and conferences in Hawaii. I think he was from outer space. But a great guy.</p>
<p>Anyway, that just about wraps it up. I need to get off this train and onto another one. It was indeed an honour to meet everyone yesterday – thanks!</p>
<p><a href="https://blogs.sap.com/2004/07/16/sdn-meetup-in-walldorf-a-summary/">Originally published on SAP Community</a></p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>SDN Meetup in Walldorf - pictures</title>
      <link href="https://qmacro.org/blog/posts/2004/07/15/sdn-meetup-in-walldorf-pictures/"/>
      <updated>2004-07-15T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2004/07/15/sdn-meetup-in-walldorf-pictures/</id>
      <content type="html">
        <![CDATA[
      <p>I arrived in Walldorf this morning and was met and looked after very well by Mark. I’ve just taken some pictures with my trusty mobile phone and posted them on the web.</p>
<p><img src="/images/2004/07/sdn-meetup.jpg" alt="Photo of the attendees in an office at SAP in Walldorf"></p>
<p>There’s lots of great discussion here. But I’ve got go as the discussion is reaching a stage where I simply have to interrupt!</p>
<p><a href="https://blogs.sap.com/2004/07/15/sdn-meetup-in-walldorf-pictures/">Originally published on SAP Community</a></p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>TechEd talk winners - congrats</title>
      <link href="https://qmacro.org/blog/posts/2004/06/30/teched-talk-winners-congrats/"/>
      <updated>2004-06-30T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2004/06/30/teched-talk-winners-congrats/</id>
      <content type="html">
        <![CDATA[
      <p>Congratulations to the three TechEd talk winners Luke, Jayakumar and Andreas.</p>
<p>The winning talks look really good – I’m looking forward to hearing them. It’s interesting that two of the three are BW related. Seems like a hot topic.</p>
<p>I wonder if TechEd will offer some <a href="https://web.archive.org/web/20040613191559/http://conferences.oreillynet.com/pub/w/29/bof.html">birds of a feather</a> (BOF) style facilities? If there are such facilities, perhaps some of the rest of us can get together informally during TechEd and inflict our talks on each other anyway 😉</p>
<p><a href="https://blogs.sap.com/2004/06/30/teched-talk-winners-congrats/">Originally published on SAP Community</a></p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Forget SOAP - build real web services with the ICF</title>
      <link href="https://qmacro.org/blog/posts/2004/06/24/forget-soap-build-real-web-services-with-the-icf/"/>
      <updated>2004-06-24T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2004/06/24/forget-soap-build-real-web-services-with-the-icf/</id>
      <content type="html">
        <![CDATA[
      <p>I don’t like getting into a lather when it comes to data and function integration. Rather than using SOAP, I prefer real web services, built with HTTP.</p>
<p>As an example of taking the <a href="https://web.archive.org/web/20040907010810/http://rest.blueoxen.net/cgi-bin/wiki.pl">REST</a>ian approach to exposing your SAP data and functionality through services you can build with the excellent Internet Communication Framework (ICF) layer, I thought I’d show you how straightforward and natural data integration can be by using a spreadsheet as an example.</p>
<p>In my recent SDN article (published this week):</p>
<p><strong>“Real Web Services with REST and ICF“</strong> (unfortunately lost and not archived)</p>
<p>… I presented a simple ICF handler example that allowed you to directly address various elements of CTS data (I prototyped it in my NW4 system so I thought I’d use data at hand, and build an example that you could try out too). For instance, you could retrieve the username of the person responsible for a transport by addressing precisely that data element like this:</p>
<pre class="language-text"><code class="language-text">http://shrdlu.local.net:8000/qmacro/transport/NW4K900007/as4text</code></pre>
<p>The approach of making your SAP data and functionality first class web entities, by giving each element its own URL, has wide and far reaching benefits.</p>
<p>Take a programmable spreadsheet, for example. You’re managing transports between systems by recording activity in a spreadsheet. You’re mostly handling actual transport numbers, but have also to log onto SAP to pull out information about those transports. You think: “Hmmm, wouldn’t it be useful if I could just specify the address of transport XYZ’s user in this cell here, and then the value would appear automatically?”</p>
<p>Let’s look at how this is done. My spreadsheet program of choice is the popular <a href="https://web.archive.org/web/20040606141722/http://www.gnome.org/projects/gnumeric/">Gnumeric</a>, available on Linux. If you use another brand, no problem – there’s bound to be similarities enough for you to do the same as what follows. For background reading on extending Gnumeric with Python, you should take a look here.</p>
<p>With Gnumeric, you can extend the functions available by writing little methods in Python. It’s pretty straightforward. In my home directory, I have a subdirectory structure</p>
<pre class="language-text"><code class="language-text">.gnumeric/1.2.1-bonobo/plugins/myfuncs/</code></pre>
<p>where I keep the Python files that hold my personal extended methods.</p>
<p>In there, in a file called my-funcs.py, I have a little script that defines a method <code>func_get()</code>. This method takes a URL as an argument, and goes to fetch the value of what that URL represents. In other words, it performs an HTTP GET to retrieve the content. If successful, and if the value is appropriate (it’s just an example here, I’m expecting a text/plain result), then it’s returned … and the cell containing the call to that function is populated with the value.</p>
<p>Here’s the code.</p>
<pre class="language-python"><code class="language-python"><span class="token comment"># The libs needed for this example</span><br><span class="token keyword">import</span> Gnumeric<br><span class="token keyword">import</span> string<br><span class="token keyword">import</span> urllib<br><span class="token keyword">from</span> re <span class="token keyword">import</span> sub<br><br><span class="token comment"># My version of FancyURLopener to provide basic auth info</span><br><span class="token keyword">class</span> <span class="token class-name">MyURLopener</span><span class="token punctuation">(</span>urllib<span class="token punctuation">.</span>FancyURLopener<span class="token punctuation">)</span><span class="token punctuation">:</span><br>    <span class="token keyword">def</span> <span class="token function">prompt_user_passwd</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span><br>      <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token string">'developer'</span><span class="token punctuation">,</span> <span class="token string">'developer'</span><span class="token punctuation">)</span><br><br><span class="token comment"># The actual extended function definition</span><br><span class="token keyword">def</span> <span class="token function">func_get</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span><br>    urllib<span class="token punctuation">.</span>_urlopener <span class="token operator">=</span> MyURLopener<span class="token punctuation">(</span><span class="token punctuation">)</span><br>    connection <span class="token operator">=</span> urllib<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>url<span class="token punctuation">)</span><br>    data <span class="token operator">=</span> connection<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><br>    <span class="token keyword">if</span> connection<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>gettype<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'text/plain'</span><span class="token punctuation">:</span><br>        <span class="token keyword">return</span> sub<span class="token punctuation">(</span>"<br>$<span class="token string">", "</span>"<span class="token punctuation">,</span> data<span class="token punctuation">)</span><br>    <span class="token keyword">else</span><span class="token punctuation">:</span><br>        <span class="token keyword">return</span> <span class="token string">"#VALUE!"</span><br><br><span class="token comment"># The link between the extended function name and the method name</span><br>example_functions <span class="token operator">=</span> <span class="token punctuation">{</span><br>        <span class="token string">'py_get'</span><span class="token punctuation">:</span> func_get<br><span class="token punctuation">}</span></code></pre>
<p>It’s pretty straightforward. Let’s just focus on the main part, <code>func_get()</code>. Because the resource in this example is protected with basic authentication (i.e. you have to supply a username and password), we subclass the standard FancyURLopener to be able to supply the username and password tuple, and then assign an instance of that class to the <code>urllib._urlopener</code> variable before actually making the call to GET.</p>
<p>If we get some ‘text/plain’ content as a result, we brush it off and return it to be populated into the cell, otherwise we return a ‘warning – something went wrong’ value.</p>
<p>We add the method definition to a hash that Gnumeric reads, and through the assignment, the <code>func_get()</code> is made available as new custom function <code>py_get</code> in the spreadsheet. (There’s also an extra XML file called plugin.xml, not shown here but described in the Gnumeric programming documentation mentioned earlier, that contains the name of the function so that it can be found when the spreadsheet user browses the list of functions.)</p>
<p>So, what does that give us? It gives us the ability to type something like this into a spreadsheet cell (split for readability):</p>
<pre class="language-text"><code class="language-text">=py_get('http://shrdlu.local.net:8000/qmacro/transport/NW4K900011/as4user')</code></pre>
<p>and have the cell automagically populated with the appropriate data from SAP. You can see an example of this in action in the screenshot:</p>
<p><img src="/images/2004/06/py_get.png" alt="screenshot of py_get in Gnumeric"></p>
<p>As you can see, being able to address information as first class web resources opens up a universe of possibilities for the use of real web services.</p>
<p>As a final note, I’ve submitted a SAP TechEd talk proposal. It’s titled:</p>
<p><strong>“The Internet Communication Framework: Into Context and Into Action!”</strong></p>
<p>If you’re interested in learning more about the ICF, and want to have some fun building and debugging a simple web service with me, you know where to cast your vote if you haven’t already. Hurry though – there’s only a few hours to go!</p>
<p>Thanks!</p>
<p><a href="https://blogs.sap.com/2004/06/24/forget-soap-build-real-web-services-with-the-icf/">Originally published on SAP Community</a></p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>NW4, OSS1 and logon group selection for OSS</title>
      <link href="https://qmacro.org/blog/posts/2004/05/31/nw4-oss1-and-logon-group-selection-for-oss/"/>
      <updated>2004-05-31T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2004/05/31/nw4-oss1-and-logon-group-selection-for-oss/</id>
      <content type="html">
        <![CDATA[
      <p>While waiting for the DD ACTIVATION phase of an add-on installation to finish, my mind wandered off to something I’d noticed with my new <a href="/blog/posts/2004/03/19/was-6.40-testdrive-for-linux-is-here!/">WAS 6.40 testdrive for Linux is here!</a> system, with the SID “NW4” (NetWeaver ’04). Normally, when you start transaction OSS1, and hit the button to connect to OSS, you’re presented with a popup giving you a choice of groups, like the one in the screenshot here.</p>
<p><img src="/images/2004/05/groupselectionpopup_38869.png" alt="screenshot of the group selection popup in OSS1"></p>
<p>But it wasn’t happening from my NW4 system. So I rolled up my sleeves, and wielded the mighty “/h” in the ok-code (in the R/2 days we used to call this “hobble mode” :-), cleaving my way into the ABAP that lay beneath OSS1. What I found was quite interesting.</p>
<h2>lgtst</h2>
<p>There’s a command-line program called <code>lgtst</code> that can be used to query the message server of an SAP system and have information on logon groups and so on returned. This <code>lgtst</code> program is not, apparently, supported on all operating systems, so there’s a condition in the ABAP that checks that.</p>
<h2>Direct SAPGUI call</h2>
<p>If the server’s operating system is not supported, then a simple logon string is constructed from the technical settings held in OSS1 (menu path Parameter -&gt; Technical settings). For example, if you specify a SAProuter at your site thus:</p>
<pre class="language-text"><code class="language-text">Name: host01 IP Address: 192.168.0.66 Instance: 99</code></pre>
<p>with SAProuter details thus:</p>
<pre class="language-text"><code class="language-text">Name: sapserv3 IP Address: 147.204.2.5 Instance: 99</code></pre>
<p>and the SAPnet message server details thus:</p>
<pre class="language-text"><code class="language-text">Name: oss001 DB Name: O01 Instance: 01</code></pre>
<p>then the route string constructed is just the concatenated saprouters leading to the dispatcher at O01’s ’01’ instance, like this:</p>
<pre class="language-text"><code class="language-text">/H/192.168.0.66/S/sapdp99/H/147.204.2.5/S/sapdp99/H/oss001/S/sapdp01</code></pre>
<p>This route string is then used in conjunction with a direct local call to your SAPGUI client, so that the end result is that a new SAPGUI instance is started for that connection.</p>
<p>So far, so good (or not, depending on your luck with SAProuter routing :-).</p>
<p>Logon group popup, then SAPGUI call
On the other hand, if the server’s operating system is supported, then something rather different happens. In this case, the <code>lgtst</code> program is executed on the server, to discover what logon groups are available for OSS. How does this happen? Well, the SAProuter information we’ve already seen is used to construct a route string:</p>
<pre class="language-text"><code class="language-text">/H/192.168.0.66/S/sapdp99/H/147.204.2.5/S/sapdp99 ...</code></pre>
<p><strong>but</strong>, instead of pointing to a dispatcher at the SAP OSS end:</p>
<pre class="language-text"><code class="language-text">... /H/oss001/S/sapdp01</code></pre>
<p>it points to system O01’s message server:</p>
<pre class="language-text"><code class="language-text">... /H/oss001/S/sapmsO01</code></pre>
<p>Once this route string has been constructed, it’s used in a call to <code>lgtst</code> like this:</p>
<pre class="language-text"><code class="language-text">lgtst -H /H/.../H/oss001/S/sapmsO01 -S x -W 30000</code></pre>
<p>This is basically requesting that the message server for O01 send back information on available servers (instances) and logon groups. A typical reply looks like this:</p>
<pre class="language-text"><code class="language-text">list of reachable application servers ------------------------------------- <br>[pwdf1120_O01_01] [pwdf1120] [10.16.0.11] [sapdp01] [3201] [DIA UPD BTC SPO ICM ] <br>[pwdf1302_O01_01] [pwdf1302] [147.204.100.41] [sapdp01] [3201] [DIA BTC SPO ICM ] <br>[pwdf0936_O01_01] [pwdf0936] [10.16.0.19] [sapdp01] [3201] [DIA BTC SPO ICM ] <br>[pwdf0810_O01_01] [pwdf0810] [10.16.0.18] [sapdp01] [3201] [DIA BTC SPO ICM ] <br>[pwdf1307_O01_01] [pwdf1307] [147.204.100.46] [sapdp01] [3201] [DIA BTC SPO ICM ] <br>[pwdf1300_O01_01] [pwdf1300] [147.204.100.39] [sapdp01] [3201] [DIA BTC SPO ICM ] <br>[pwdf1301_O01_01] [pwdf1301] [147.204.100.40] [sapdp01] [3201] [DIA BTC SPO ICM ] <br>[pwdf1177_O01_01] [pwdf1177] [10.16.1.13] [sapdp01] [3201] [DIA UPD BTC SPO ICM ] <br>[pwdf0937_O01_01] [pwdf0937] [10.16.0.20] [sapdp01] [3201] [DIA BTC SPO ICM ] <br>[pwdf0809_O01_01] [pwdf0809] [10.16.0.17] [sapdp01] [3201] [DIA BTC SPO ICM ] <br>[pwdf0808_O01_01] [pwdf0808] [10.16.0.16] [sapdp01] [3201] [DIA UPD BTC SPO ICM ] <br>[pwdf0807_O01_01] [pwdf0807] [10.16.0.15] [sapdp01] [3201] [DIA BTC SPO ICM ] <br>[pwdf0392_O01_01] [pwdf0392] [10.16.0.10] [sapdp01] [3201] [DIA BTC SPO ICM ] <br>[o01main_O01_01] [pwdf1070] [147.204.100.35] [sapdp01] [3201] [DIA UPD ENQ BTC SPO UP2 ICM ] <br>list of selectable logpn groups with favorites ------------------------------------------------ <br>[1_PUBLIC] [147.204.100.40] [3201] [620] <br>[2_JAPANESE] [147.204.100.40] [3201] [620] <br>[DO_NOT_USE] [147.204.100.35] [3201] [620] <br>[EWA] [147.204.100.40] [3201] [620] <br>[REPL] [10.16.1.13] [3201] [620] <br>[SPACE] [10.16.1.13] [3201] [620]</code></pre>
<p>What we’re interested in are the lines in the second half of the output – the list of selectable logon groups. The key data items here are the group names themselves (e.g. 1_PUBLIC), the IP addresses (e.g. 147.204.100.40), and the port numbers (e.g. 3201). The ABAP behind transaction OSS1 receives this <code>lgtst</code> output and parses it out into a nice list of groups, which it then presents to the user as shown in the screenshot above.</p>
<p>(And it goes almost without saying that if the call to <code>lgtst</code> fails, we get that friendly message “Unable to connect to message server (default connection will be used)” and revert back to the direct SAPGUI call).</p>
<p>So <strong>that’s</strong> where this popup comes from. Ok. Now I understand. It’s amazing how you use a transaction for years and never really look into how it actually works.</p>
<h2>Why not Linux?</h2>
<p>So, just to get back to why I came here in the first place – why doesn’t this popup appear in NW4? NW4 is a Linux-based testdrive system. <code>lgtst</code> works fine. But look at this:</p>
<pre class="language-text"><code class="language-text">*---- Folgende Betriebssysteme werden unterstützt <br>IF ( SY-OPSYS = 'HP-UX' ) OR ( SY-OPSYS = 'AIX' ) <br>OR ( SY-OPSYS = 'OSF1' ) OR ( SY-OPSYS = 'SINIX' ) <br>OR ( SY-OPSYS = 'SunOS' ) OR ( SY-OPSYS = 'Windows NT' ) <br>OR ( SY-OPSYS = 'Relia' ) OR ( SY-OPSYS = 'SP_DC' ) <br>OR ( SY-OPSYS = 'OS/400' ).</code></pre>
<p>No Linux? Hmm, I soon fixed that, by copying the transaction (OSS1 -&gt; ZSS1) and the ABAP behind OSS1 (RSEFA910), adding a line to this IF statement to bring a bit of love the choice operating system of a “Gnu generation” 😉</p>
<p>Now I can call ZSS1 and delight in the group logon popup. Hurrah!</p>
<p><a href="https://blogs.sap.com/2004/05/31/nw4-oss1-and-logon-group-selection-for-oss/">Originally published on SAP Community</a></p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>SAP at JAX 2004</title>
      <link href="https://qmacro.org/blog/posts/2004/05/11/sap-at-jax-2004/"/>
      <updated>2004-05-11T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2004/05/11/sap-at-jax-2004/</id>
      <content type="html">
        <![CDATA[
      <p>My friend Matthew Langham <a href="https://web.archive.org/web/20040818042907/http://www.silent-penguin.com/archives/001775.html">reports on SAP at JAX 2004 in Frankfurt</a> (Matthew is giving a total of three sessions at JAX). It’s not that SAP hasn’t had a presence at other non-SAP events before now; it’s just great to see that SAP is getting involved in the communities that support it.</p>
<p>Ivo Totev gave a keynote today: <a href="https://web.archive.org/web/20040402155532/http://www.jax.de/konferenzen/psecom,id,180,nodeid,.html">SAP goes J2EE</a>, and there are three other sessions from SAP people:</p>
<ul>
<li>Logging and Tracing in Big Applications (Martin Stein)</li>
<li>Erstellung von Web-Applikationen auf Basis Service-orientierter Architekturen (Karin Schattka)</li>
<li>JMX, Teil 1: Monitoring von J2EE-Applikationen (Gregor Frey)</li>
</ul>
<p>I only wish I could have been there.</p>
<p>Nice one, folks!</p>
<p><a href="https://blogs.sap.com/2004/05/11/sap-at-jax-2004/">Originally published on SAP Community</a></p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>WAS 6.40 testdrive for Linux is here!</title>
      <link href="https://qmacro.org/blog/posts/2004/03/19/was-6.40-testdrive-for-linux-is-here!/"/>
      <updated>2004-03-19T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2004/03/19/was-6.40-testdrive-for-linux-is-here!/</id>
      <content type="html">
        <![CDATA[
      <p>Phew. What a day yesterday at the world’s biggest IT fair. I arrived by train and joined the masses along the CeBIT skywalk to enter Aladdin's cave.</p>
<p><img src="/images/2004/03/CebitSkywalk.jpg" alt="The CeBIT Skywalk"></p>
<p>I made a beeline for the main SAP area in Hall 4, only to be told by someone on the Web AS stand that they’d not heard anything about 640 being available for Linux. Aaargh!</p>
<p>Not to fear, though – I found out that SAP had a separate stand in the Linux Park over in Hall 6. I legged it over there, to meet Fabrizio from the Linux Lab. And there they were in all their glory: DVDs containing WAS 640, MaxDB 7.5 … and SAP NetWeaver Developer Studio!</p>
<p><img src="/images/2004/03/640forLinux.jpg" alt="WAS 640 DVD"></p>
<p>Fabrizio and his colleagues had been busy preparing the packages for CeBIT – and he gave me a quick demo on the laptop. Nice work, Linux Lab!! What’s even more special, though, is that this 640 will work on Suse 8.1, Redhat 9.0, and Fedora Core 1. (There may have been another distribution, but I can’t remember). This is great news for those of us who can’t afford to shell out hundreds of euros for some sort of “advanced server” edition of a Linux distribution. And Fabrizio has put together RPMs to make the install a breeze. Fantastic!</p>
<p>It was great to see the Developer Studio running on Linux; and it was just as surprising to see how it had been done … using Wine – the Windows API implementation for *nix. The reason for requiring Wine is that there are a couple of controls in SAP’s Eclipse plugins that invoke an OCX in the background. This means that in certain situations (when developing a Web Dynpro, for example), the plugin on a native Eclipse installation just won’t work. The Linux Lab chaps are planning to make this port; it’s just a matter of tuits.</p>
<p>SOAP sucks!</p>
<p>All in all a very worthwhile visit. I met up with Piers soon after (on the left in this picture)</p>
<p><img src="/images/2004/03/LinuxLabStand.jpg" alt="Linux Lab stand"></p>
<p>and we tramped round the halls until our feet were sore and our heads were full. During that time, we found <a href="https://people.sap.com/benny.schaich-lebek">Benny</a> (we’d been looking for him). It was great to meet him, we chatted for a while on aspects of J2EE, JNI, Perl integration, and had a great REST vs SOAP ‘debate’ … I’m sure Benny has now seen the light ;-). Here's a slightly blurry picture of me and Benny.
<img src="/images/2004/03/BennyAndDj.jpg" alt="Benny and DJ"></p>
<p>The nominal caption is “SOAP sucks!” 🙂</p>
<p><a href="https://blogs.sap.com/2004/03/19/was-640-testdrive-for-linux-is-here/">Originally published on SAP Community</a></p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Tim O&#39;Reilly and the three &#39;C&#39;s</title>
      <link href="https://qmacro.org/blog/posts/2004/02/21/tim-o&#39;reilly-and-the-three-&#39;c&#39;s/"/>
      <updated>2004-02-21T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2004/02/21/tim-o&#39;reilly-and-the-three-&#39;c&#39;s/</id>
      <content type="html">
        <![CDATA[
      <p>Well, I made it to <a href="http://www.fosdem.org/" title="FOSDEM">FOSDEM</a> this morning with time to spare. Bumped into <a href="/~dj/2004/02/Fosdem/SarahAndJosette.jpg">Sarah and Josette</a> setting up the O’Reilly book stand. <a href="http://use.perl.org/%7Edavorg/journal" title="Dave Cross">Dave Cross</a> is here, as are <a href="http://use.perl.org/%7Eacme/journal" title="Leon Brocard">Leon Brocard</a> and Richard Kilmer, whom I <a href="/~dj/2004/02/Fosdem/LeonAndRichard.jpg">snapped</a> during Tim O’Reilly’s keynote “The Open Source Paradigm Shift”.</p>
<p><a href="/~dj/2004/02/Fosdem/TimAndTheThreeCs.jpg"><img src="/~dj/2004/02/Fosdem/small.TimAndTheThreeCs.jpg" alt="Tim talking about the three Cs"></a></p>
<p>Tim’s talk was very interesting, especially coming at this stage in Open Source’s lifetime (early on). He mentioned afterwards that he’s given that talk a few times now, and people are starting to catch on to what he’s saying. What is he saying? Well, it’s nothing particularly radical, nor is it anything that’s not been discussed before by Tim or others. But what was great about the talk is the way it put all the pieces together, and provided the audience with a view above the parapet.</p>
<p>Tim talked about how the focus is, or should be, moving away from software as a product, and further towards being a commodity. Pieces of software become merely components in undertakings that are larger than the code itself. Citing the usual suspects (Amazon, Google, EBay), he pointed out that what was important today was:</p>
<dl><dt>**C**ommodity</dt><dd> Software is a commodity. Licencing becomes less important where open source software doesn’t get distributed further, whereas the applications that build on that software are the things that get ‘distributed’ (across the Web). </dd><dt>**C**ustomisation</dt><dd> People inside Google are the people inside the black box, inside the [Mechanical Turk](http://www.theturkbook.com/preface.php&e=7317). They’re the people who make the difference between a piece of software, and a software-based *service*. They make the applications *dynamic*. Remove those people from Google, and leave the source code. Do you still have Google? No. </dd><dt>**C**ollaboration</dt><dd> Usenet was arguably the birthplace of collaboration. What it’s become today encompasses many things. Adhocracy, social software, users contributing to Amazon with their book reviews. Napster brought automatic participation through its architecture, making it easy (compulsory!) for users to participate. “The architecture of participation” is a nice way of putting it. So with a focus on collaboration and users contributing with information, we have to be careful of where we put data and what the terms and conditions are. (I immediately think of [Orkut](http://www.orkut.com/), and the nasty business of what happened to [CDDB](http://www.cddb.org/).) </dd></dl>Tim rounded his talk off with something that rang true with me, certainly.
<blockquote>
<p><em>“Interoperability and open data formats may be more important than source code availability”</em></p>
</blockquote>
<p>It’s something I’ve said many times before: what’s perhaps even more important than open source is <strong>open protocols</strong>.</p>
<p>(More pictures from Fosdem 2004 <a href="/~dj/2004/02/Fosdem">here</a>.)</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>FOSDEM, and small OSS Notes Browser Hack</title>
      <link href="https://qmacro.org/blog/posts/2004/02/20/fosdem-and-small-oss-notes-browser-hack/"/>
      <updated>2004-02-20T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2004/02/20/fosdem-and-small-oss-notes-browser-hack/</id>
      <content type="html">
        <![CDATA[
      <p>Tomorrow morning I’m off to Brussels for <a href="https://www.fosdem.org">FOSDEM</a> – the Free and Open Source Software Developers’ Meeting. Some people might wonder what this has to do with SAP, but don’t forget that lots of people (including yours truly) combine open source technologies with SAP regularly. And don’t forget that SAP have flown the flag for making ERP application source code available (in R/2 and R/3) for years now. I’m not sure whether that excellent situation is going to continue into the age of J2EE – I note, sadly, that SAP don’t supply the Java source in the PARs they make available on <a href="https://web.archive.org/web/20040324133803/http://www.iviewstudio.com/SAPPortal/home.asp">iViewStudio</a> – but I’m not giving up yet.</p>
<p><img src="/images/2004/02/progjab.jpg" alt="Programming Jabber"></p>
<p>I’ll be wearing my <a href="http://shop.oreilly.com/product/9780596002022.do">Programming Jabber</a> tshirt at FOSDEM tomorrow – so if you’re there too and spot it, come by and say hello.</p>
<p>On another note, I’ve used the power of Galeon‘s ‘Smart Bookmarks’ to build myself a nice little interface to OSS notes. (Galeon is my Gnome browser of choice, based on Mozilla‘s rendering engine.)</p>
<p><img src="/images/2004/02/small_galeonossnote_38832.png" alt="OSS note in Galeon web browser"></p>
<p>As you can see from the screenshot, I can get directly to an OSS note by entering the number into a box on my toolbar. Behind this is a URL (split for readability):</p>
<pre class="language-text"><code class="language-text">http://service.sap.com/~form/handler<br>  ?_APP=01100107900000000342<br>  &_EVENT=REDIR<br>  &_NNUM=</code></pre>
<p>to which the entered OSS number is appended. This URL is the one used in the Javascript displayNote() function behind the OSS note quick access form on the main notes page at SAP.</p>
<p>Simple but effective! You might consider building something like this into your browser too.</p>
<p><a href="https://blogs.sap.com/2004/02/20/fosdem-and-small-oss-notes-browser-hack/">Originally published on SAP Community</a></p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Venus Soul and Fun(k)</title>
      <link href="https://qmacro.org/blog/posts/2004/01/14/venus-soul-and-fun(k)/"/>
      <updated>2004-01-14T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2004/01/14/venus-soul-and-fun(k)/</id>
      <content type="html">
        <![CDATA[
      <p>I went out with my skiing friends last night, to work out who’s driving with whom on the way to Ischgl (“… du mein Traum!”) at the end of the month. We ended up at Kurios, a live music bar in Krefeld, where Venus was playing a set. We had a fun time, some great tracks too, from Chic, early Police, James Brown (ok, I’m older than I look, alright? :-) and so on. Played really well by the band.</p>
<p>Nice one, Venus!</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>FOSDEM and Brussels, here I come!</title>
      <link href="https://qmacro.org/blog/posts/2004/01/12/fosdem-and-brussels-here-i-come!/"/>
      <updated>2004-01-12T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2004/01/12/fosdem-and-brussels-here-i-come!/</id>
      <content type="html">
        <![CDATA[
      <p>I’ve been umming and arring over <a href="/kwiki/ConferenceDates">conferences</a> this year. One that I don’t want to miss is <a href="http://www.fosdem.org/">FOSDEM</a> – the Free and Open source Software Developers European Meeting, on a weekend next month in Brussels.</p>
<p>FOSDEM is a great grass-roots event that is full of friendly hackers. Add a wonderful city to the mix, and what more do you want? I attended FOSDEM a couple of years ago, when I was invited as a speaker – my talk was on “<a href="/~dj/fosdem2002/">Understanding Jabber Components</a>“, which went down well.</p>
<p><a href="http://www.pipetree.com/~dj/fosdem2002-1.jpg"><br>
<img src="http://www.pipetree.com/~dj/small.fosdem2002-1.jpg" alt="me talking at FOSDEM with a branch"><br>
</a><br>
I remember noticing that other speakers in earlier talks were having difficulties with the huge size of the projector displays (they couldn’t reach to point to anything in the top halves of the slides) so just before the start of my talk I rushed outside and grabbed a fallen branch to use as a pointer. It turned out to be a great ice breaker, and <a href="/~dj/fosdem2002-1.jpg">rather</a> <a href="/~dj/fosdem2002-2.jpg">useful</a> too (<a href="http://www.ralphm.net/blog">Ralph Meijer</a>, who’s done some cool things with Jabber, took the pictures – thanks Ralph).</p>
<p>In the run up to that conference in 2002, I also introduced O’Reilly UK to the FOSDEM organisers, with a view to sponsorship. Seems to have turned out well.</p>
<p>And I’ve just noticed that Dave Cross, a fellow <a href="http://london.pm.org/">London Perl Monger</a>, is <a href="http://use.perl.org/~davorg/journal/16563">speaking at FOSDEM</a> this time around. (Ok, I’m unfortunately only an occasional monger these days, because I’m never in the right place at the right time). Nice one Dave!</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Hawo&#39;s Queen of Grain Mills</title>
      <link href="https://qmacro.org/blog/posts/2004/01/11/hawo&#39;s-queen-of-grain-mills/"/>
      <updated>2004-01-11T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2004/01/11/hawo&#39;s-queen-of-grain-mills/</id>
      <content type="html">
        <![CDATA[
      <p><img src="/images/2018/02/Screen-Shot-2018-02-28-at-14.28.22.png" alt="bread"></p>
<p>I’ve been baking bread now for quite a while now. The bread baking bug first got ahold of me when visiting friends. They had a bread making machine – something that you put all the basic ingredients into, hit a button, and presto. Naturally we bought one soon after, and I was, well, &quot;hooked&quot;.</p>
<p>But sometime last year I decided there was too much plastic and electronics between me and the bread, and started making it by hand. Just the ingredients, a bowl, time, <a href="http://www.bbc.co.uk/radio4/">Radio 4</a>, and me. What a difference. It’s become my number one way to relax – especially after a session at the keyboard. I love making bread. All sorts. And I also love not going to to the bakers to buy bread. It’s a nano-step <a href="/blog/posts/2003/01/20/a-new-year-and-a-new-approach/">closer</a> to self-sufficiency. And a very rewarding one.</p>
<p>So this Christmas I progressed backwards even more. I received a fantastic present – a <a href="/~dj/2004/01/GrainMill.jpg">grain mill</a> – Hawo’s <a href="http://www.hawos.de/pages/engl/muhl8a.htm">Queen 1</a> model. Beautifully simple and rock solid. The millstones are corundum, 10cm in diameter.</p>
<p><img src="/images/2018/02/hawo.jpg" alt="Hawo Queen 1 grain mill"></p>
<p>As well as giving you the <a href="http://www.hawos.de/engl/alles2.htm">total health benefit</a> that only freshly milled wheat (and other grain) can, milling your own on a loaf-by-loaf basis is fun, and gives me my daily fix for the simpler things in life. I guess the next step is to grow my own. I’m just not sure I have the <a href="/~dj/2003/09/vegplot.jpg">space</a>!</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Hello, 2004</title>
      <link href="https://qmacro.org/blog/posts/2004/01/09/hello-2004/"/>
      <updated>2004-01-09T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2004/01/09/hello-2004/</id>
      <content type="html">
        <![CDATA[
      <p>2004 is here. Neues Spiel, neues Glück. Although I’ve tried to avoid meta-blogging, I’ll make an exception this time. For whatever reason my blogging went quiet towards the end of last year. Work and home life kept me nicely busy.</p>
<p>Actually, as you can see from a few recent posts here, what online time I’ve had has been taken up with <a href="http://www.sdn.sap.com/" title="SAP Developer Network">SDN</a>, the SAP Developer Network, a new venture from SAP and others to build an online community along the lines of MSDN or <a href="http://www.oreillynet.com/">O’ReillyNet</a>. Forums, developer areas, articles, that sort of thing. It’s certainly a great step in the right direction, but IMO has still some way to go from the usability point of view. You know the sort of thing – use of frames, unwieldy URLs, web-based forums that are difficult to navigate efficiently (as most web-based forums are) – a mailing list or NNTP gateway wouldn’t go amiss here – and so on.</p>
<p>It’s a particular shame about the forums; there are interesting conversations going on there, but it’s so hard to get around the messages (<em>“click”, “click”, “click”, “click”, “errr”, “click”, “damn, now where am I?”</em>) I simply can’t be bothered to fight to get to the right posts. I guess I’m not just ‘modern’ enough. I’d already made my concerns known to the powers that be, so at least I have a moral right to go on about it here now ;-)</p>
<p>I’ve started to automatically pull in my SDN weblog posts into the /tech/sap category as there’s a nice <a href="http://www.purl.org/rss/1.0/" title="RDF Site Summary 1.0">RSS</a> feed provided for each weblogger there.</p>
<p>I’ve also written two or three articles so far, the most recent of which:</p>
<blockquote>
<p><em><a href="https://www.sdn.sap.com/irj/servlet/prt/portal/prtroot/com.sapportals.km.docs/documents/a1-8-4/Set%20Your%20WAS%206%2010%20System%20To%20Work%20-%20Transport%20Tracking%20with%20RSS">Set Your WAS 6.10 System To Work – Transport Tracking with RSS</a></em></p>
</blockquote>
<p>shows you how to use the <a href="http://www.sap.com/solutions/netweaver/linux/eval/was/">evaluation</a><acronym title="Web Application Server">WAS</acronym> 6.10 system and build a <acronym title="Business Server Pages">BSP</acronym> application to provide an RSS feed of your <acronym title="Correction and Transport System">CTS</acronym> transports so you can track system developments and customisations in the comfort of your own RSS reader. (As you can see, if you’re fortunate enough not to have to use Internet Explorer – or other browsers on MS-Windows platforms – you’ll see that the conversion of the article into HTML has a few problemettes. I’m reliably informed that the formatting problems will be addressed soon.)</p>
<p>Anyway, my battery’s low, so I’ll stop here. It’s frightening really, once I get round to opening a new blog post in the editor, words just splurge out. I don’t know whether that’s good or bad.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Evaluation WAS 6.40 on Linux - top reason for attending CeBIT 2004</title>
      <link href="https://qmacro.org/blog/posts/2003/12/17/evaluation-was-6.40-on-linux-top-reason-for-attending-cebit-2004/"/>
      <updated>2003-12-17T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2003/12/17/evaluation-was-6.40-on-linux-top-reason-for-attending-cebit-2004/</id>
      <content type="html">
        <![CDATA[
      <p>Ahh, it’s always great to be able to attend the world’s biggest ICT (information and communication technology) fair – <a href="https://web.archive.org/web/20030922064442/http://www.cebit2004.de/">CeBIT</a>. And of course being an SAP hacker, it goes without saying that a visit to the SAP stand is a must.</p>
<p>I was there way back when, with colleagues and friends – among them my SAP hacking partner-in-crime Piers, on the historical occasion of SAP’s CeBIT announcement of R/3 on Linux. We were even so geeky as to take a picture recording the event, under the watchful eye of Tux the Linux penguin mascot.</p>
<p>Anyway, one big reason to visit Hannover in March is because SAP is intending to make available a new version of the Linux-based evaluation WAS system, at release 6.40, including the all-important ABAP stack. Thanks SAP, especially the <a href="https://web.archive.org/web/20031202021623/http://www.sap.com/linux/">Linux Lab</a> folks and also those at SAP who bore the brunt of my recent emails about this – you know who you are 😉</p>
<p>Yippee!</p>
<p>For references, have a look at the comments thread to <a href="https://blogs.sap.com/2003/12/09/visiting-sap-netweaver-development-nerve-center/">Visiting SAP NetWeaver Development Nerve Center</a>, specifically <a href="https://blogs.sap.com/2003/12/09/visiting-sap-netweaver-development-nerve-center/#comment-5686">this message</a>. Also, Alexander H from the Linux Lab was kind enough to send this reply to an email on the linux.general mailing list.</p>
<p><a href="https://blogs.sap.com/2003/12/17/evaluation-was-640-on-linux-top-reason-for-attending-cebit-2004/">Originally published on SAP Community</a></p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Powergen fails to &#39;get&#39; the Interweb</title>
      <link href="https://qmacro.org/blog/posts/2003/11/02/powergen-fails-to-&#39;get&#39;-the-interweb/"/>
      <updated>2003-11-02T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2003/11/02/powergen-fails-to-&#39;get&#39;-the-interweb/</id>
      <content type="html">
        <![CDATA[
      <p>For whatever reason, our gas and electricity company is changing to <a href="http://www.powergen.co.uk/" title="Powergen home page">Powergen</a>. It promised the ability to manage our account online and listed useful features which I looked forward to using.</p>
<p><a href="/~dj/2003/10/powergen.png" title="link to bigger picture"><img src="/~dj/2003/10/small.powergen.png" alt="screenshot of useless Powergen webpage" title="Powergen fails to support my run-of-the-mill browser"></a></p>
<p>Unfortunately, on going to the website for the first time to activate my account, I received proof that Powergen has its head in the sand (or somewhere else) when it comes to customer service.</p>
<p>Yes, the old classic “your browser is not supported by this website”. Aaargh. Perpetrated by many companies including my mortgage company <a href="http://www.woolwich.co.uk/" title="The Woolwich homepage">The Woolwich</a>, who annoyingly refuse to acknowledge me as an online customer because of my choice of browser (with the result that I can’t avail myself of some of the services I need online), this issue shouldn’t exist in this millenium.</p>
<p>Of course, my browser is a nice up-to-date <a href="http://galeon.sourceforge.net/" title="Galeon home page">Galeon</a> (an extremely normal browser for the <a href="http://www.gnome.org/">Gnome</a> environment) and not “Netscape 1.3.5″ as Powergen seems to think. To Powergen’s slight credit, they do at least acknowledge non-MS platforms and browsers. But it’s still extremely frustrating. Good grief.</p>
<p>Powergen joins <a href="http://usefulinc.com/edd/notes/SinBin" title="Edd's SinBin">others</a> in the hall of shame in this respect.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>BSP - Mangled URL Decoder</title>
      <link href="https://qmacro.org/blog/posts/2003/10/17/bsp-mangled-url-decoder/"/>
      <updated>2003-10-17T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2003/10/17/bsp-mangled-url-decoder/</id>
      <content type="html">
        <![CDATA[
      <p>The BSP mangles URLs. Deep down. In <a href="https://blogs.sap.com/2003/09/30/bsp-in-depth-url-mangling/">BSP In-Depth: URL Mangling</a>, Brian McKellar did a splendid job of both feeding hunger for information and increasing one’s appetite. He mentioned the BSP application <code>decode_url</code> which shows you what the gunk in the rewritten (mangled) URL actually is. Unfortunately, my free trial WAS system is at release 6.10 and doesn’t contain <code>decode_url</code>.</p>
<p>“Shame”, I thought, first of all. Then: “Great!”. A perfect excuse to have a rummage around in the BSP’s guts. I was curious as to how this particular thing worked, and spent a pleasant hour or so in my favourite tool, the trusty ABAP debugger (kudos to the debugger team at SAP time and time again!). My aim was to write my own version of <code>decode_url</code>.</p>
<p>I found a clue in <code>CL_BSP_RUNTIME</code> – I knew it had to be somewhere in the BSP classes, and noticed that <code>ON_CHECK_REWRITE</code> called the suspiciously named <code>CL_HTTP_UTILITY=&gt;FIELDS_TO_STRING</code>. Following the trail, I eventually landed on <code>CL_HTTP_UTILITY=&gt;STRING_TO_FIELDS</code> (well, it <em>had</em> to exist, hadn’t it ;-).</p>
<p>After that it was all downhill.</p>
<p>I created a very simple BSP page <code>decode_url.htm</code> which does the job. Not as pretty as the BSP team’s original <code>decode_url</code> I’m sure, but hey, it’s only for me.</p>
<p>This is what it looks like in action:</p>
<p><img src="/images/2003/10/decode_url.png" alt="screenshot of decode_url in a browser"></p>
<p>Thanks to Brian, I took a small stroll through some of the BSP’s guts, and learnt stuff on the way. I’ve always said the best way to broaden your R/3 and Basis skills is to spend an hour debugging an area that interests you, and this time was no exception. So get out your tools and off you go!</p>
<p><a href="https://blogs.sap.com/2003/10/17/bsp-mangled-url-decoder/">Originally published on SAP Community</a></p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>SAP TechEd - Collaborative notes</title>
      <link href="https://qmacro.org/blog/posts/2003/09/29/sap-teched-collaborative-notes/"/>
      <updated>2003-09-29T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2003/09/29/sap-teched-collaborative-notes/</id>
      <content type="html">
        <![CDATA[
      <p>I’m off to SAP TechEd this week in Basel. Fantastic. It was a bit of a bumpy start – the online-registration process was a bit of a shambles, and I had to ring up to complete the transaction as the webpage (javascript?) was broken. Not a good advert for web-based commerce, is it? Anyway, after 3  (!)separate phone calls to the registration company I finally got the details I needed, and I’m off on the train via Koeln tomorrow down to Basel.</p>
<p>As an attendee of other technical events, for example O’Reilly’s Open Source Convention, I’ve become used to expecting wireless ‘net access. One of the great things about attending conferences and meeting like-minded people is that there’s a ton of social interaction and collaboration that goes on in parallel to the actual sessions, presentations and stalls.</p>
<p>With that in mind, and presuming that there will be ‘net access, I’ve set up an IRC channel ‘#teched’ on gnu.pipetree.com (port 6667) – the IRC server is password protected – specify ‘teched’ as the password when you connect. There you can log on and discuss aspects of SAP technology as presented and discussed during the sessions and presentations. The collaboration is facilitated by that killer-app of IRC, the <a href="https://web.archive.org/web/20080213223914/http://usefulinc.com/chump/">Daily Chump bot</a>. It sits in an IRC channel and helps you collate links and comments into a dynamic weblog. For more information, see the Chump’s documentation (at the link above). An example of the Chump at work can be seen at the <a href="https://web.archive.org/web/20030522044919/http://rdfig.xmlhack.com/">RDF Interest Group’s collective blog</a>.</p>
<p>So if you’re interested in finding a place to chat about things and log things of interest with comments, you’re welcome to the #teched channel and the use of the Chump bot.</p>
<p>Any questions, just ask!</p>
<p><a href="https://blogs.sap.com/2003/09/29/sap-teched-collaborative-notes/">Originally published on SAP Community</a></p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Dashboard as extension to R/3 and SAPGUI client</title>
      <link href="https://qmacro.org/blog/posts/2003/09/08/dashboard-as-extension-to-r3-and-sapgui-client/"/>
      <updated>2003-09-08T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2003/09/08/dashboard-as-extension-to-r3-and-sapgui-client/</id>
      <content type="html">
        <![CDATA[
      <p>How do your users work with SAP data? Exclusively through SAPGUI or with other desktop apps too? If it’s the latter, read on. Dashboard is an intriguing project headed up by <a href="https://nat.org/">Nat Friedman</a>. The concept is of a sidebar style window pane that is automatically populated on an ongoing basis with information related to whatever you’re doing, giving you extra context information that you can glance at while at work. Neat.</p>
<p><img src="/images/2003/09/dashboard.png" alt="An screenshot of an early version of Dashboard"></p>
<p>I wrote about it after seeing Nat and Miguel (de Icaza) demonstrate it at their keynote at OSCON this year, in this post: <a href="/blog/posts/2003/07/11/dashboard-a-compelling-articulation-for-realtime-contextual-information/">Dashboard, a compelling articulation for realtime contextual information</a>.</p>
<p>I even hacked together a Dashboard backend that populated the dashboard with thumbnail pictures of books (from Amazon) when ISBNs were mentioned in conversations. It was my first C# project too – fun 🙂</p>
<p><strong>Update 08 Sep 2018</strong>: This post came up on my “on this day” radar today, and it’s interesting to reflect how this has progressed. Dashboard itself is no more, but the ideas were solid, and in the SAP ecosphere we now have <a href="https://help.sap.com/docs/SAP_COPILOT">SAP CoPilot</a>, which takes many of the ideas of Dashboard and combines them with conversational UI and more.</p>
<p><img src="/images/2018/09/copilot.png" alt="An image of SAP CoPilot, courtesy of experience.sap.com"></p>
<p><a href="https://blogs.sap.com/2003/09/08/dashboard-as-extension-to-r3-and-sapgui-client/">Originally published on SAP Community</a></p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Plums and the antithesis of technology</title>
      <link href="https://qmacro.org/blog/posts/2003/09/01/plums-and-the-antithesis-of-technology/"/>
      <updated>2003-09-01T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2003/09/01/plums-and-the-antithesis-of-technology/</id>
      <content type="html">
        <![CDATA[
      <p>I haven’t been online much recently. As well as enjoying a relaxing family holiday in England (where better when the weather’s right?), I’ve been living in a world distant from technology. Maybe it’s my mental state trying to re-balance itself, maybe I’m getting old, but I find I get more and more enjoyment from simple things.</p>
<p>Making bread is a pastime (is something more than a pastime when it goes on every day?) that gets easier, more fun, and more interesting the more you do it. Making preserves is a current hit too.</p>
<p>Yesterday I pulled potatoes, carrots, parsnips, pastinaken, and onions from the ground and roasted them with some delicious cumberland sausages from <a href="http://www.burymarkettraders.co.uk/">Bury market</a>.</p>
<p><a href="http://www.pipetree.com/~dj/2003/08/Plums.jpg"><img src="http://www.pipetree.com/~dj/2003/08/Plums.sm.jpg" alt="Plums"></a></p>
<p>Today I spent a wonderful couple of hours up a tree picking plums. I think it was a sort of meditation. No radio, no walkman, no wifi, no bluetooth, no technology whatsoever, save for a ladder. The more intense things get at work and online, technologically speaking, the more refuge I find in nature and simple ways. It puts things into perspective.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Improving the OSS note experience</title>
      <link href="https://qmacro.org/blog/posts/2003/07/30/improving-the-oss-note-experience/"/>
      <updated>2003-07-30T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2003/07/30/improving-the-oss-note-experience/</id>
      <content type="html">
        <![CDATA[
      <p>I remember the time when OSS was a fledgling service, and it ran on an R/2 system in Walldorf. You accessed it via the R/2 SAPGUI just as any other R/2 system. It was great, and the volume of notes being generated then (I remember particularly at the time I was working at Deutsche Telekom in the early 90s)  was small enough that I could read each and every note that was written on certain subjects that interested me. I used to come in early in the morning, grab a coffee, and then browse the new OSS notes. The systems were bigger, the note numbers had less digits, and I had more hair.</p>
<p>Those were the days.</p>
<p>Anyway, many years later, we still have OSS notes. Higher note numbers to be sure. But has the general OSS notes experience improved? Not that much. While we now also have a web interface (via <a href="https://service.sap.com">service.sap.com</a>) in addition to the R/3 system based access to OSS, that web interface could do with some love.</p>
<p>Wouldn’t it be nice to be able to refer to an OSS note, and the note’s sub-sections, via first class URLs? So I could say, in some HTML (in a Wiki, or in a weblog entry, or wherever) “refer to this note” and put an HTTP link direct to the note, rather than tell the user how to go through the rigmarole of searching for it and navigating the forest of JavaScript, new windows, and frames, to get to what they’re looking for? How about something like:</p>
<pre class="language-text"><code class="language-text">http://service.sap.com/oss/notes/12345</code></pre>
<p>That would be great for starters! For authorisation, how about simple but effective basic HTTP authentication? If you’re going to use the web (HTTP), embrace it, don’t program around it.</p>
<p>And while we’re at it – how about offering <a href="http://purl.org/rss/1.0">RSS</a> feeds of notes by component? That way, it would be straightforward for people to keep up with OSS info using tried and tested technology, and open tools that are out there right now.</p>
<p>For many SAP hackers like me, OSS is still a very important source of info. Small improvements like this would make our lives a lot more pleasant.</p>
<p>[The concept of a “first class URL” is of course from the RESTian (REpresentational State Transfer) view of the web. For more info, see the <a href="https://web.archive.org/web/20031004160636/http://internet.conveyor.com/RESTwiki/moin.cgi/FrontPage">REST  Wiki</a>.]</p>
<p><a href="https://blogs.sap.com/2003/07/30/improving-the-oss-note-experience/">Originally published on SAP Community</a></p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>SAP InfoTag on Web Application Server</title>
      <link href="https://qmacro.org/blog/posts/2003/07/29/sap-infotag-on-web-application-server/"/>
      <updated>2003-07-29T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2003/07/29/sap-infotag-on-web-application-server/</id>
      <content type="html">
        <![CDATA[
      <p>SAP are running an <a href="https://web.archive.org/web/20030819233911/http://www.sap.com/company/events/calendar/view.asp?ID=3092&amp;LANGUAGE=UNDEFINED">Infotag</a> on the Web Application Server in early September. It’s in Ratingen (Duesseldorf), just around the corner – literally, in fact – from where I used to hack on R/2 at Mitsubishi.</p>
<p>As it’s just down the road from me, I might go. Then again, how much of it is going to be yet more marketing of the NetWeaver flavour? You can’t tell these days. There’s an interesting couple of things on the agenda:</p>
<pre class="language-text"><code class="language-text">13:30 Projekterfahrungen zum SAP Web AS<br>* Ein Bericht des SAP Consulting</code></pre>
<p>and</p>
<pre class="language-text"><code class="language-text">14:30 Live-Präsentation<br>* Web-Entwicklung mit dem SAP Web AS unter Java und ABAP</code></pre>
<p>so perhaps I’ll go just for the afternoon.</p>
<p>Now, if I can persuade my wife that it’s worth the EUR 150 attendance fee they’re asking. Hmm, if I just go for the afternoon and miss the lunch, perhaps it would be less 😉</p>
<p><a href="https://blogs.sap.com/2003/07/29/sap-infotag-on-web-application-server/">Originally published on SAP Community</a></p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>SAP talk at OSCON, and RSS</title>
      <link href="https://qmacro.org/blog/posts/2003/07/27/sap-talk-at-oscon-and-rss/"/>
      <updated>2003-07-27T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2003/07/27/sap-talk-at-oscon-and-rss/</id>
      <content type="html">
        <![CDATA[
      <p>We got a pretty good attendance at our <a href="https://web.archive.org/web/20031211145311/http://conferences.oreillynet.com/cs/os2003/view/e_sess/3759">talk on SAP R/3 at OSCON</a> this year. We had people who were using R/3 in a corporate environment already, and people who were just curious about the famous ERP behemoth and what relation it had to Open Source. Well, plenty, these days, as we showed in the talk.</p>
<p>One of the sections in the talk was on producing <a href="http://www.purl.org/rss/1.0/">RSS</a> from R/3. RSS? Isn’t that for weblogs? Sure, but it’s a general syndication and metadata format that lends itself to many purposes. In the company where I work, we’ve been producing RSS from R/3 for years – SD business data (sales orders, product proposals, material info).</p>
<p>When you look at RSS from 10000 feet, it’s pretty obvious why it lends itself so well to SAP data; the core document model is the same as the core document model in R/2 and R/3, namely a header and a number of positions, each of which can be embellished with domain-specific and compartmentalised data. And more recently, other people have been catching on to using RSS for business data. When you think about it, it’s a no-brainer. The most interesting news – just this week, is that Amazon is now offering RSS feeds for all sorts of business data. The penny is dropping, finally.</p>
<p>Here are a couple of recent articles on RSS and extensibility:</p>
<ul>
<li><a href="https://www.xml.com/pub/a/2003/07/23/extendingrss.html">Extending RSS</a></li>
<li><a href="https://www.xml.com/pub/a/2003/07/23/rssone.html">Why Choose RSS 1.0?</a></li>
</ul>
<p><a href="https://blogs.sap.com/2003/07/27/sap-talk-at-oscon-and-rss/">Originally published on SAP Community</a></p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Google Pocket Guide out now</title>
      <link href="https://qmacro.org/blog/posts/2003/07/18/google-pocket-guide-out-now/"/>
      <updated>2003-07-18T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2003/07/18/google-pocket-guide-out-now/</id>
      <content type="html">
        <![CDATA[
      <p>I don’t think I mentioned it directly here (perhaps partly a cause <em>and</em> effect of the recent blogging hiatus) but the <a href="http://www.oreilly.com/catalog/googlepg" title="Google Pocket Guide">Google Pocket Guide</a> has recently been released. Hurrah! It’s a book I worked on with <a href="http://www.raelity.org/" title="Rael Dornfest">Rael</a> and <a href="http://www.oreillynet.com/cs/catalog/view/au/873" title="Tara Calishain">Tara</a> (nice work, you two!). Talking to people at <a href="http://www.oreilly.com/" title="O'Reilly and Associates">O’Reilly</a> last week at <a href="http://conferences.oreilly.com/os2003">OSCON</a>, it seems the guide is selling well. Hurrah again!</p>
<p>It was a very interesting time. Rather than mainly authoring, most of my work was editing, restructuring, and adding some new content. In the past, I have denied the existence of a somewhat strenuous attention to prose detail, but I guess I finally have to admit that it’s there. I really enjoyed the challenge, although it was hard work using a combination of <a href="http://www.openoffice.org/">Open Office</a>‘s word processing program and MS-Word. Give me <a href="http://www.docbook.org/">DocBook</a> and a <a href="http://www.vim.org/">proper editor</a> any day (I wrote <a href="http://www.oreilly.com/catalog/jabber" title="Programming Jabber">Programming Jabber</a> this way).</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Another great OSCON</title>
      <link href="https://qmacro.org/blog/posts/2003/07/17/another-great-oscon/"/>
      <updated>2003-07-17T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2003/07/17/another-great-oscon/</id>
      <content type="html">
        <![CDATA[
      <p>Well, <a href="http://conferences.oreilly.com/oscon2003">OSCON 2003</a> is over, and I guess all the attendees are more or less home by now. I got home on Monday night, after a detour to work in London. Tons of ideas and inspiration came forth during and between sessions this year, like the last two years I’ve attended. It’s a double-whammy — if you go to a session, you get a chunk of very interesting info about subject X. If you don’t go to a session, you get to exchange ideas with likeminded people; ideas that you’d be hard-pressed to find otherwise. Great stuff.</p>
<p>It was lovely to meet old friends and make new acquaintances. Amongst others, I met some of the <a href="http://www.jabber.org/">Jabber</a> guys (<a href="http://www.flickr.com/photos/qmacro/3473111485/in/set-72157617306067120/" title="pic of some of the Jabber guys">pic</a>), plus <a href="http://www.silent-penguin.com/" title="Matthew Langham">Matthew</a>, <a href="http://fooworks.com/" title="Steve Mallett">Steve</a>, <a href="http://use.perl.org/%7Egnat/journal/" title="Nat Torkington">Gnat</a> (and family), <a href="http://www.prescod.net/" title="Paul Prescod">Paul</a> (<a href="http://www.flickr.com/photos/qmacro/3473113509/in/set-72157617306067120/" title="pic of Paul Prescod and DJ Adams">pic</a>), <a href="http://www.rjray.org/" title="Randy J Ray">Randy</a>, <a href="http://usefulinc.com/edd/blog" title="Edd Dumbill">Edd</a>, <a href="http://www.ilrt.bristol.ac.uk/people/cmdjb/" title="Dave Beckett">Dave</a>, <a href="http://www.raelity.org/" title="Rael Dornfest">Rael</a>, <a href="http://www.devspace.com/index.idx" title="Christian Gross">Christian</a>, <a href="http://conferences.oreillynet.com/cs/os2003/view/e_spkr/681" title="Geoff Young">Geoff</a>, <a href="http://www.perl.com/pub/au/Christiansen_Tom" title="Tom Christiansen">Tom</a>, <a href="http://use.perl.org/%7Ejjohn/journal/" title="Joe Johnston">Joe</a>, <a href="http://use.perl.org/%7Eacme/journal" title="Leon Brocard">Leon</a>, <a href="http://www.askbjoernhansen.com/" title="Ask Bjorn Hansen">Ask</a>, <a href="http://search.cpan.org/author/JDUNCAN/" title="James Duncan">James</a>, and plenty of other Perl and O’Reilly folk. I even managed to say a brief “hi” to <a href="http://nat.org/" title="Nat Friedman">Nat</a>.</p>
<p>Even when we weren’t having fun, we were having fun. The author signing event was great; Piers and I were drinking beer to celebrate the end of our talk (which had just finished) when we were <a href="http://www.oreillynet.com/pub/a/network/2003/07/10/photos1.html?page=2" title="Piers and me relaxing after our talk">snapped</a>.</p>
<p><img src="/images/2003/07/vaiosap.png" alt="Me and the Sony Vaio runing SAP R/3"></p>
<p>Our talk had included live demos against an SAP R/3 system, which I was running on the diminutive Sony Vaio laptop (128Mb RAM, PII-233, 12Gb HDD) that you can see in the picture. While preparing the system the day before in the speaker room, the work processes decided for some reason to recompile all the ABAP components, which almost killed the laptop. The HDD went mad for minutes on end, and made funny noises, which <a href="http://search.cpan.org/author/GBARR/" title="Graham Barr">Graham</a> promptly likened to the sound of a deep fat fryer in action. I’m thinking of renaming the laptop to “chip-pan.local.net”.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Thanks, Randal</title>
      <link href="https://qmacro.org/blog/posts/2003/07/12/thanks-randal/"/>
      <updated>2003-07-12T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2003/07/12/thanks-randal/</id>
      <content type="html">
        <![CDATA[
      <p>I’m sitting here in a wonderful arcade of 80s arcade games, listening to <a href="http://www.rushstuff.com/">Rush</a>, arguably the best rock band ever, drinking beer, and enjoying WiFi, all courtesy of <a href="http://www.stonehenge.com/">Stonehenge</a>, and in particular <a href="http://www.stonehenge.com/merlyn/">Randal Schwartz</a>, the maverick entrepreneur who happens to be a great teacher of <a href="http://www.perl.com/">Perl</a>.</p>
<p>Stonehenge is hosting a post-<a href="http://conferences.oreillynet.com/">OSCON</a> <a href="http://oscon.kwiki.org/index.cgi?FreeBeerAndGames">free beer and games</a> afternoon/evening event here in Portland; the place is packed and everywhere I hear the sounds “oooh, I remember this” or “aah, I used to be good at this game” from people rediscovering Galaga, Donkey Kong, Centipede and many other classic computer games from the 1980s.</p>
<p>I discovered Perl, and subsequently the power of Open Source, through Randal. Way back when, I discovered Randal’s <a href="http://www.stonehenge.com/merlyn/columns.html">magazine columns on Perl</a>. I regularly printed a column out, and took it to lunch with me to study. Getting back to the office, I used to enthuse about what I’d just learnt about “this new language” to my work colleagues (including <a href="http://www.piersharding.com/">Piers</a>). I got to know Perl well, and haven’t looked back.</p>
<p>Thanks, Randal.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Dashboard, a compelling articulation for realtime contextual information</title>
      <link href="https://qmacro.org/blog/posts/2003/07/11/dashboard-a-compelling-articulation-for-realtime-contextual-information/"/>
      <updated>2003-07-11T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2003/07/11/dashboard-a-compelling-articulation-for-realtime-contextual-information/</id>
      <content type="html">
        <![CDATA[
      <p><a href="http://primates.ximian.com/%7Emiguel/">Miguel de Icaza</a> and <a href="http://nat.org/">Nat Friedman</a> were keynoting at <a href="http://conferences.oreillynet.com/oscon2003">OSCON</a> this morning. It was a great talk about the Mono project and a cool demo of <a href="http://nat.org/dashboard">Dashboard</a>. I managed to <a href="http://mmcc.cx/DashboardOnStage" title="log of #dashboard IRC channel during talk">convey</a> some of the presentation to the <a href="irc://irc.gimp.net/dashboard">#dashboard</a> folks who couldn’t be present. It was also really refreshing to see source code, system exceptions and actual open source on the big keynote display.</p>
<p>I discovered dashboard this week thanks to <a href="http://usefulinc.com/edd/blog">Edd</a>, who has been doing some <a href="http://usefulinc.com/edd/blog/2003/7/8#02:09">neato hacking</a> with some dashboard front and backends already. Dashboard shows itself as a little GUI window on which information sensitive to what you’re currently doing (receiving an IM message, sending an email, looking at a webpage, for example) is shown.</p>
<p>The heart of dashboard is a matching and sorting engine that receives information (in the form of “cluepackets” – how evocative is that?) from frontend applications (like your IM and email clients) and asks the plugged-in backends to find stuff relevant to that information, which is then displayed in the sidebar-style window, designed to be glanced at rather than pored over. It’s a lovely open architecture in that you can (build and) plug in whatever frontend or backend lumps of code you think of.</p>
<p>I’ve been musing about an <a href="http://www.sap-ag.de/">SAP</a> backend – wouldn’t it be interesting if the engine could get a match from R/3 on a purchase order number, for example? Of course, there’s nothing out of the box on the R/3 side that could be used, but as <a href="http://conferences.oreillynet.com/cs/os2003/view/e_sess/3759" title="Integrating SAP R/3 with Open Source and Open Software">our talk at OSCON</a> (hopefully) showed, there are plenty of opportunities for the wily hacker.</p>
<p>And what about <a href="http://www.jabber.org/">Jabber</a>? While glueing Jabber stuff onto the front end is one thing, building a pubsub style Jabber backend could get really interesting; coordinated matching, CRM style features … Ooo, the world definitely could get very lobster-like.</p>
<p>And I know it annoys Nat, but I just had to point out that the GraphViz output for matching clues looks very arc-and-nodey … and we all know what <em>that</em><a href="http://www.w3.org/RDF/" title="RDF">leads to</a> :-)</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>SAP and Open Source BOF at OSCON</title>
      <link href="https://qmacro.org/blog/posts/2003/07/07/sap-and-open-source-bof-at-oscon/"/>
      <updated>2003-07-07T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2003/07/07/sap-and-open-source-bof-at-oscon/</id>
      <content type="html">
        <![CDATA[
      <p>If you’re at OSCON or around the Portland area this Wednesday (9th July), come along to the <a href="https://web.archive.org/web/20031018005002/http://conferences.oreillynet.com/cs/os2003/view/e_sess/4565">SAP and Open Source BOF</a> to chat with SAP and Open Source hackers about where the crossovers between the two worlds are.</p>
<p>Beer may be involved, too!</p>
<p><a href="https://blogs.sap.com/2003/07/07/sap-and-open-source-bof-at-oscon/">Originally published on SAP Community</a></p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Bittersweet</title>
      <link href="https://qmacro.org/blog/posts/2003/07/07/bittersweet/"/>
      <updated>2003-07-07T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2003/07/07/bittersweet/</id>
      <content type="html">
        <![CDATA[
      <p>On each occasion I’ve travelled to the USA, either on business or for pleasure, I’ve entered the country with a rather bitter taste in my mouth. Each and every time I’ve been grilled by rather demeaning and unfriendly customs and security employees. I landed and went through security and customs in Minneapolis, and yet again was seething at the condescending nature of the person behind the desk. Even an attempt to make polite conversation with the person putting the bags through the scanner resulted in me leaving the area convinced the people were unable to see beyond their jobs.</p>
<p>Does it have to be this way? We have airports and security in Europe too, you know. But what we also have is a sense of politeness and courtesy and the willingness to treat people like, well, people.</p>
<p>Of course, it goes without saying that the sweetness comes from the excellent time I know I’m going to have this week with everyone at <a href="http://conferences.oreilly.com/oscon/">OSCON</a>. I’m sitting here right now in the hotel lobby and I know a week-long brane-melting experience awaits me!</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Thinking vs doing</title>
      <link href="https://qmacro.org/blog/posts/2003/07/06/thinking-vs-doing/"/>
      <updated>2003-07-06T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2003/07/06/thinking-vs-doing/</id>
      <content type="html">
        <![CDATA[
      <p>In the past, I’ve mentioned to friends some of the thinking I’ve had about the Semantic Web, RDF, and related stuff (FOAF, RSS, and so on). <a href="/blog/posts/2003/07/some-ramblings-on-uris-and-identity/" title="Some ramblings on URIs and identity">Yesterday’s stuff</a>, for example. On more than one occasion the response has been along the lines of “where are the apps — why are you thinking instead of doing?”. They don’t get it. First of all, there <em>are</em> apps, toolkits, libraries, and so on. I don’t think I have to point them out.</p>
<p>But secondly, and more importantly, whatever happened to knowledge and discourse for its own sake? From studying RDF, for example, even at the fairly superficial level that I have, I’ve exercised my mind thinking about hard questions of language, expression, relationships, identity and semantics. While the concept of a Semantic Web platform is simple (a vast homogenous database spanning the world of information), its nuts and bolts, the substructure of concrete, steel and ontological rivets are submerged under a sea of meaning, nuance and interpretation.</p>
<blockquote>
<ul>
<li>Anyone can say anything about anything *</li>
</ul>
</blockquote>
<p>Thinking about this stuff is rewarding. Did you go to college and learn only about stuff that directly related to the job you do now? No, I didn’t either. I may have written one or two Latin comments in my code in the past, but that’s as far as it goes :-)</p>
<p>I’m grateful to all those people (the REST, #rdfig and #foaf people, plus people at the W3C and elsewhere) for being ever helpful, friendly, and enthusiastic in sharing their knowledge of such interesting topics.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Some ramblings on URIs and identity</title>
      <link href="https://qmacro.org/blog/posts/2003/07/06/some-ramblings-on-uris-and-identity/"/>
      <updated>2003-07-06T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2003/07/06/some-ramblings-on-uris-and-identity/</id>
      <content type="html">
        <![CDATA[
      <p>Coming back from a short break from the tech world recently, I started to reacquaint myself with <a href="http://xmlns.com/foaf/0.1/" title="FOAF: Friend Of A Friend Vocab">FOAF</a> and <a href="http://www.w3.org/RDF/" title="RDF (Resource Description Framework)">RDF</a>, amongst other things. Looking at the FOAF data for various people, I was reminded of the model of indirection that is used to identify a person.</p>
<p><a href="foaf:Person">foaf:Person</a> <a href="foaf:mbox">foaf:mbox</a>dj.adams@pobox.com&lt;/foaf:mbox&gt; ... &lt;/foaf:Person&gt;</p>
<p>Actually, while I think on, why not:</p>
<p><a href="foaf:Person">foaf:Person</a> &lt;foaf:mbox rdf:resource=&quot;mailto:dj.adams@pobox.com&quot; /&gt; ... &lt;/foaf:Person&gt;</p>
<p>Anyway. The idea is that rather than refer to a person directly, we refer to them indirectly: “<em>The person with the email address dj.adams@pobox.com</em>“. Why do this? Well, for one thing, an email address is a fairly unambiguous property — there’s usually the same person consistently to be found behind an email address. The FOAF <a href="http://xmlns.com/foaf/0.1/index.html">spec</a> uses <a href="http://www.daml.org/" title="DAML: DARPA Agent Markup Language">DAML</a> to annotate the mbox property as being unambiguous (you can see this in the <a href="http://xmlns.com/foaf/0.1/index.rdf">RDF version of the spec</a>).</p>
<p>In the arcs and nodes world of RDF, it would look something like this:</p>
<p>+----------+ +---| | | +----------+ mbox | | V +---------------------------+ | mailto:dj.adams@pobox.com | +---------------------------+</p>
<p>The box at the top represents the person, and is a blank node, in that it doesn’t have a (direct) identifier. The uniqueness is <em>indirect</em></p>
<p>.</p>
<p>Then I came across <a href="http://www.markbaker.ca/foaf.rdf">Mark Baker’s FOAF file</a>, which starts:</p>
<p>&lt;foaf:Person rdf:about=&quot;http://www.markbaker.ca/&quot;&gt; <a href="foaf:name">foaf:name</a>Mark Baker&lt;/foaf:name&gt; ...</p>
<p>What’s this? Does this mean that the HTTP URI <a href="http://www.markbaker.ca/">http://www.markbaker.ca</a> represents Mark? (What does “represents Mark” mean anyway?) We know about <a href="http://internet.conveyor.com/RESTwiki/moin.cgi/FrontPage" title="The REST Wiki's front page">REST</a>, and <em>representations</em> of <em>resources</em> that can be retrieved via HTTP URIs. If I specify a MIME type of ‘text/html’ when asking for a representation of the resource at that URI, I am sent some HTML (Mark’s home page). I wonder what MIME type I’d have to specify to get Mark himself disassembled into IP packets and reassembled next to my laptop? Of course, before you say anything, this is one of the differences between URIs and URLs, and I won’t expect to see Mark any time soon :-) Plus, there’s the concept of identity which must stand alone from the concept of resources and representations … if Mark comes down the wire, am I getting a representation of Mark, or Mark in person? At least I might get a picture of him if I specify ‘image/*’.</p>
<p>In any case, Mark does assert that the URI does identify him, the person. Very interesting. Mark pointed me to an <a href="http://norman.walsh.name/2003/06/06/karma" title="assigning URIs to people">item</a> on Norman Walsh’s weblog which touches on this subject.</p>
<p>So, what does, or could, an HTTP URI represent? Leigh Dodds recently expressed a desire to detail aspects of <a href="http://www.ldodds.com/blog/archives/000050.html">his life in RDF</a> (and I like the idea of the Semantic Web’s “year zero” that he mentions). Films he’s seen, books he’s reading, and so on. Great!, I thought, and immediately perused <a href="http://erikbenson.com/">Erik Benson</a>‘s <a href="http://allconsuming.net/">allconsuming.net</a> API documentation (there’s a <a href="http://allconsuming.net/news/000042.html">RESTful way of getting the book data</a> too, now) – I could pull out the data from there and construct some RDF statements about the CurrentlyReading book information.</p>
<p>But before I started, I went all philosophical and thought about representations and abstractions for a bit; at least, as much as my limited knowledge would allow. I’d been thinking that the currently reading information might come out like this:</p>
<p><a href="foaf:Person">foaf:Person</a> &lt;foaf:mbox rdf:resource='mailto:dj.adams@pobox.com' /&gt; &lt;books:currentlyReading rdf:resource='http://allconsuming.net/item.cgi?isbn=0596002025' /&gt; ...</p>
<p>But surely that says that I’m currently reading <em>the allconsuming.net page for that book</em>, not that book itself? It’s not a question of unique identity, as the ISBN in the URI disambiguates. It’s a question of what the URI represents. How do you refer to the book itself — the abstraction (funny how ‘abstract’ actually means ‘real’ here)? Perhaps here, as in FOAF, a level of indirection could be used:</p>
<p><a href="foaf:Person">foaf:Person</a> &lt;foaf:mbox rdf:resource='mailto:dj.adams@pobox.com' /&gt; <a href="books:currentlyReading">books:currentlyReading</a> <a href="books:Book">books:Book</a> &lt;books:describedAt rdf:resource='http://allconsuming.net/item.cgi?isbn=0596002025' /&gt; ... &lt;/books:Book&gt; ...</p>
<p>In other words, I’m currently reading <em>the book that’s described at that allconsuming.net page</em>. Seems fair. And this is what it looks like:</p>
<p>+----- Person | ------ +-------+ +-----| |----+ | +-------+ | mbox | | | | V | currentlyReading +---------------------------+ | | mailto:dj.adams@pobox.com | | +---------------------------+ | +----- Book V | ---- +-------+ +----| | | +-------+ describedAt | | V +--------------------------------------------------+ | http://allconsuming.net/item.cgi?isbn=0596002025 | +--------------------------------------------------+</p>
<p>On the subject of identification and HTTP URIs, Tim Berners-Lee wrote a paper <a href="http://www.w3.org/DesignIssues/HTTP-URI.html">“What do HTTP URIs Identify?”</a> where he discusses various angles on the difficulty regarding resources, identification and the real world. The paper refers to, and stems from, discussion on this in the <a href="http://www.w3.org/2001/tag/ilist#httpRange-14">httpRange-14</a> issue in the <a href="http://www.w3.org/2001/tag/ilist">TAG issues list</a>.</p>
<p>In the book diagram above, I’ve included little class annotations for each of the two blank nodes (Person and Book). I wonder if, at least in RDF, classes can be used effectively to draw a distinction between Mark Baker and his home page? In other words, the snippet of Mark’s FOAF data:</p>
<p>&lt;foaf:Person rdf:about=&quot;http://www.markbaker.ca/&quot;&gt; <a href="foaf:name">foaf:name</a>Mark Baker&lt;/foaf:name&gt; ...</p>
<p>which is really shorthand for:</p>
<p>&lt;rdf:Description rdf:about=&quot;http://www.markbaker.ca/&quot;&gt; &lt;rdf:type rdf:resource=&quot;http://xmlns.com/foaf/0.1/Person&quot; /&gt; <a href="foaf:name">foaf:name</a>Mark Baker&lt;/foaf:name&gt; ...</p>
<p>says that the resource at http://www.markbaker.ca is a Person.</p>
<p>By the way, Mark is not alone in identifying himself, a person, with an HTTP URI. The <a href="http://www.w3.org/TR/2002/WD-rdf-primer-20020319/">RDF Primer</a> does the same thing in an example (this time in N-Triple format):</p>
<p><a href="http://www.example.org/index.html">http://www.example.org/index.html</a> <a href="http://purl.org/dc/elements/1.1/creator">http://purl.org/dc/elements/1.1/creator</a> <a href="http://www.example.org/staffid/85740">http://www.example.org/staffid/85740</a> .</p>
<p>This says that the document at http://www.example.org/staffid/87540 created the document at http://www.example.org/index.html.</p>
<p>Or does it?</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>SAP stuff at OSCON</title>
      <link href="https://qmacro.org/blog/posts/2003/07/02/sap-stuff-at-oscon/"/>
      <updated>2003-07-02T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2003/07/02/sap-stuff-at-oscon/</id>
      <content type="html">
        <![CDATA[
      <p>My partner-in-(code)-crime Piers Harding and I are speaking at this year’s OSCON (Open Source Convention). What can the desperate open source hacker do in and around R/3? Plenty! If you’re going to OSCON, come along to our talk:</p>
<p><a href="https://web.archive.org/web/20031119044904/http://conferences.oreillynet.com/cs/os2003/view/e_sess/3759">Integrating SAP R/3 and Open Source &amp; Open Protocols</a></p>
<p>last thing on Wednesday the 9th to find out about “extending and embracing” R/3 with open source tools and protocols. The more the merrier!</p>
<p><a href="https://blogs.sap.com/2003/07/02/sap-stuff-at-oscon/">Originally published on SAP Community</a></p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>The SAP/MySQL Partnership</title>
      <link href="https://qmacro.org/blog/posts/2003/05/30/the-sapmysql-partnership/"/>
      <updated>2003-05-30T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2003/05/30/the-sapmysql-partnership/</id>
      <content type="html">
        <![CDATA[
      <p>I keep hearing reports that the recent announcement of cooperation between SAP AG and MySQL AB has been making the community unhappy. What’s the deal? I don’t understand what’s not to like here. SAP aren’t giving up development of DBMS technology, they’re just giving up the marketing of it. And what a great injection for MySQL, makers of my favourite open source DB.</p>
<p>IMO making and maintaining DBMS products isn’t one of SAP’s core business drivers. Never was, never should be. SAP’s strengths lie in a combination of building good application code, application development infrastructures, and abstraction layers for underlying common technologies like databases, spool mechanisms, TP monitors (ok this was more an R/2 thing) and so on, so that their application and technology products run on lots of platform / software combinations. SAP rescued ADABAS D (and renamed it SAP DB). I think that was a good move. They’re now sharing the technology and their support to an open source DB vendor with a good name.</p>
<p>As long as the relationship remains open source, what can be seen as bad about the partnership?</p>
<p><a href="https://blogs.sap.com/2003/05/30/the-sapmysql-partnership/">Originally published on SAP Community</a></p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>How do I get plugin Y to run before plugin X?</title>
      <link href="https://qmacro.org/blog/posts/2003/04/20/how-do-i-get-plugin-y-to-run-before-plugin-x/"/>
      <updated>2003-04-20T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2003/04/20/how-do-i-get-plugin-y-to-run-before-plugin-x/</id>
      <content type="html">
        <![CDATA[
      <p>It might be the case that you want plugin Y to run before plugin X, because of what X does with what Y is supposed to have already done. Blosxom loads plugins in filename order, so make sure the alphanumerical order of your plugin filenames reflects the order you want your plugins to run.</p>
<p>A common way to do this is to prefix the plugin filenames with digits, like this:</p>
<p>00pluginY 01pluginX</p>
<p>and so on.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Why does my newly installed plugin not work, and not produce errors either?</title>
      <link href="https://qmacro.org/blog/posts/2003/04/11/why-does-my-newly-installed-plugin-not-work-and-not-produce-errors-either/"/>
      <updated>2003-04-11T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2003/04/11/why-does-my-newly-installed-plugin-not-work-and-not-produce-errors-either/</id>
      <content type="html">
        <![CDATA[
      <p>It could be that the name of the plugin (from unpacking it) contains dashes or things like that. Blosxom only loads plugins whose names contain alphanumeric or underscore characters (i.e. A-Z, 0-9, and _).</p>
<p>Check the filename and remove any offending characters.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Why don&#39;t my readme file contents show up in my blog?</title>
      <link href="https://qmacro.org/blog/posts/2003/04/10/why-don&#39;t-my-readme-file-contents-show-up-in-my-blog/"/>
      <updated>2003-04-10T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2003/04/10/why-don&#39;t-my-readme-file-contents-show-up-in-my-blog/</id>
      <content type="html">
        <![CDATA[
      <p>When you create a readme or readme.html file, its contents will only be displayed when you navigate to that part of your blog:</p>
<p>http://www.example/food/italian/</p>
<p>should display any readme or readme.html dropped into</p>
<p>$datadir/food/italian</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>How can I access the entire URL in my plugin?</title>
      <link href="https://qmacro.org/blog/posts/2003/04/10/how-can-i-access-the-entire-url-in-my-plugin/"/>
      <updated>2003-04-10T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2003/04/10/how-can-i-access-the-entire-url-in-my-plugin/</id>
      <content type="html">
        <![CDATA[
      <p>Use the CGI.pm module in the plugin:</p>
<p>use CGI qw/:standard/; $url = url(); $path_info = path_info()</p>
<p>You, unfortunately, can’t get to the #entry bit since that’s never sent to the Web server. That’s handled by the browser alone.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Where do I have to put the Tiki.pm file for the tiki plugin to work?</title>
      <link href="https://qmacro.org/blog/posts/2003/04/05/where-do-i-have-to-put-the-tiki.pm-file-for-the-tiki-plugin-to-work/"/>
      <updated>2003-04-05T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2003/04/05/where-do-i-have-to-put-the-tiki.pm-file-for-the-tiki-plugin-to-work/</id>
      <content type="html">
        <![CDATA[
      <p>The tiki plugin assumes you’ve placed Tiki.pm in a Text subdirectory of your $plugin_dir…</p>
<p>$plugin_dir/lib/Text/Tiki.pm</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>How do I detect the presence of another plugin?</title>
      <link href="https://qmacro.org/blog/posts/2003/04/05/how-do-i-detect-the-presence-of-another-plugin/"/>
      <updated>2003-04-05T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2003/04/05/how-do-i-detect-the-presence-of-another-plugin/</id>
      <content type="html">
        <![CDATA[
      <p>All installed plug-ins:</p>
<p>keys %blosxom::plugins</p>
<p>All “on” plug-ins:</p>
<p>grep {$blosxom::plugins{$_} &gt; 0} keys %blosxom::plugins</p>
<p>And if you’re interested in the order:</p>
<p>print join ', ', @blosxom::plugins</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Speaking at OSCON 2003</title>
      <link href="https://qmacro.org/blog/posts/2003/04/04/speaking-at-oscon-2003/"/>
      <updated>2003-04-04T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2003/04/04/speaking-at-oscon-2003/</id>
      <content type="html">
        <![CDATA[
      <p><img src="http://conferences.oreillynet.com/images/os2003/banners/speakers/120x90.gif" alt="OSCON 2003 speaker logo"><br>
Hurrah! <a href="http://www.piersharding.com/">Piers</a> and I are giving a talk at <a href="http://conferences.oreilly.com/oscon/">OSCON</a>, where the theme this year is “Embracing and Extending Proprietary Software”. Our talk is entitled “<a href="http://conferences.oreillynet.com/cs/os2003/view/e_sess/3759">Integrating SAP R/3 and Open Source Software</a>“.</p>
<p>I think it’s going to be a lot of fun.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>&quot;A brilliant literary mash-up&quot;...</title>
      <link href="https://qmacro.org/blog/posts/2003/04/04/&quot;a-brilliant-literary-mash-up&quot;.../"/>
      <updated>2003-04-04T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2003/04/04/&quot;a-brilliant-literary-mash-up&quot;.../</id>
      <content type="html">
        <![CDATA[
      <p>… is a great way to describe, as <a href="http://epeus.blogspot.com/2003_04_01_epeus_archive.html#200088180">Kevin Marks did</a>, the fusion of Hogwarts and Molesworth by <a href="http://www.alice.dryden.co.uk/">Alice Dryden</a>, who describes it thus:</p>
<blockquote>
<p>Wot hapen when nigel molesworth, the curse of st custards, find himself at hoggwarts skool for WITCHCRAFT and wizzardry? <a href="http://www.alice.dryden.co.uk/ho_for_hoggwarts.htm">Read on!</a></p>
</blockquote>
<p>A must-read. It brings back many happy memories for me and I’m sure tons of other people of my generation. Molesworth is the creation of Geoffrey Willians and Ronald Searle, who wrote the <a href="http://allconsuming.net/item.cgi?isbn=1851459553">Down With Skool!</a> collection, as any fule kno!</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>How can I turn off a plugin for a certain flavour?</title>
      <link href="https://qmacro.org/blog/posts/2003/03/22/how-can-i-turn-off-a-plugin-for-a-certain-flavour/"/>
      <updated>2003-03-22T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2003/03/22/how-can-i-turn-off-a-plugin-for-a-certain-flavour/</id>
      <content type="html">
        <![CDATA[
      <p>Use the config plugin and create a config.flavour (for the flavour you’d like it off) containing:</p>
<p>$blosxom::plugins{'smartypants'} = 0;</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>How can I convert Moveable Type entries to Blosxom?</title>
      <link href="https://qmacro.org/blog/posts/2003/03/22/how-can-i-convert-moveable-type-entries-to-blosxom/"/>
      <updated>2003-03-22T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2003/03/22/how-can-i-convert-moveable-type-entries-to-blosxom/</id>
      <content type="html">
        <![CDATA[
      <p>There’s a script <a href="http://web.archive.org/web/20060313005210/http://www.10500bc.org/twiki/bin/view.cgi/Main/Mt2blosxom">Mt2blosxom</a> available, described [[Yahoo:769 here]].</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Weblogs and Wikis - Blurring the Boundaries</title>
      <link href="https://qmacro.org/blog/posts/2003/03/06/weblogs-and-wikis-blurring-the-boundaries/"/>
      <updated>2003-03-06T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2003/03/06/weblogs-and-wikis-blurring-the-boundaries/</id>
      <content type="html">
        <![CDATA[
      <p>Early this morning <a href="http://www.oreillynet.com/%7Erael/">Rael</a>‘s <a href="http://www.raelity.org/apps/blosxom">Blosxom</a> plugin ‘<a href="http://www.raelity.org/apps/blosxom/plugins/text/wikiwordish.html">wikiwordish</a>‘ found its way to the <a href="http://www.raelity.org/apps/blosxom/plugins">plugin registry</a>. And a very nice plugin it is too. It allows you to use ‘wikiwordish’ notation like [[this]] to point to other weblog entries; the plugin intercepts them and creates a suitable hyperlink to the right place. For example, I can refer to an older entry about the Tiki parser for MoinMoin by just typing the name of the entry (‘tikiparser’) inside double square brackets; in other words, [[tikiparser]] in my weblog item source gets turned into this: [[tikiparser]].</p>
<p>I decided to expand on this lovely idea, by adding some more functionality to the plugin. With my <a href="/~dj/2003/03/wikiwordish">expanded version of ‘wikiwordish’</a> (<a href="/~dj/2003/03/wikiwordish.diff">diff here</a>) it is now possible to have <a href="http://twistedmatrix.com/users/jh.twistd/moin/moin.cgi/InterWiki">InterWiki</a> style links automatically recognised and expanded too. (I also made a modification to the regex in <em>story()</em>, as it wasn’t behaving quite right). So I can refer to the, say, StartingPoints page of the <a href="http://www.usemod.com/cgi-bin/mb.pl?">MeatBall Wiki</a> by using a link in my weblog entry like this: [[MeatBall:StartingPoints]], which would be turned into a link like this: [[MeatBall:StartingPoints]].</p>
<p>The way it works is simple: you tell the plugin where to find an InterWiki ‘intermap’ file, which contains a list of InterWiki names and URLs. You can probably find this somewhere in your wiki installation. You can also add your own name/URL combinations in the configuration in case you’re not allowed to edit the intermap file; in my setup I’ve added the name ‘PipeSpace’ to refer to my MoinMoin-powered <a href="../../../space">space</a> Wiki (see the ‘Configurable Variables section’ in the <a href="../../../%7Edj/2003/03/wikiwordish">code</a>), so I can now create a link such as this: [[PipeSpace:AllConsumingRestIdeas]] which is turned into this: [[PipeSpace:AllConsumingRestIdeas]]. If you don’t want an icon to appear next to the link, you can turn that off in the configuration.</p>
<p>What’s more, some standard <a href="http://twistedmatrix.com/users/jh.twistd/moin/moin.cgi/InterWiki">InterWiki</a> links are not to wikis, but to other popular sites; for example [[IMDB:0088846 Brazil]] gives [[IMDB:0088846 Brazil]], and [[Dictionary:alliteration]] gives [[Dictionary:alliteration]].</p>
<p>Fun! Here’s to more weblog/wiki fusion.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>New Blosxom plugin &#39;submission&#39;</title>
      <link href="https://qmacro.org/blog/posts/2003/03/05/new-blosxom-plugin-&#39;submission&#39;/"/>
      <updated>2003-03-05T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2003/03/05/new-blosxom-plugin-&#39;submission&#39;/</id>
      <content type="html">
        <![CDATA[
      <p>I’ve just written a plugin ‘<a href="/~dj/2003/03/submission">submission</a>‘ which provides <a href="http://www.raelity.org/apps/blosxom">Blosxom</a> with a mechanism for accepting content POSTed to it. I wrote it initially as a mechanism for people to submit plugin information to the <a href="http://www.raelity.org/apps/blosxom/plugins">plugin registry</a>, but made it a bit more generic.</p>
<p>The idea is that you can have Blosxom accept submitted entries and treat them as ‘pending’, using a ‘.txt-‘ file extension, so they’re not immediately viewable in the weblog output. You can then review the entries and publish them by changing the extension to ‘.txt’ (or not, as the case may be).</p>
<p>The mechanism will kick in in one of two modes:</p>
<dl><dt>*Accepting POSTed HTML form content*</dt><dd>Form data is received, formatted by a chosen ‘formatter’ (specify via the ‘-format’ parameter in the form, or allow to fall back to to the default formatter built into the plugin itself), and written as a pending entry in Blosxom’s datadir path. A display of the currently pending entries is then displayed.</dd><dt>*Listing pending entries*</dt><dd>You can also get to the list of currently pending entries by suffixing the query string ‘?pending’ onto the end of the weblog’s URL.</dd></dl>The plugin uses a special ‘pending’ flavour so you can have the pending entries displayed differently to the regular entries.
<p>There’s also a separate directory where you can add your own formatters; this is the ‘formatlib’ that should be created in the plugin directory itself. I’ve written a simple formatter that lives in this directory, called ‘<a href="/~dj/2003/03/plugin">plugin</a>‘ that accepts a plugin submission (name, category, URL, description, author) and formats it into an entry (body) style similar to those shown in the registry at the moment.</p>
<p>It’s a basic bit of code, works for me. I’ve already got a few mods in mind, such as, perhaps, accepting payloads in other formats such as an <acronym title="Rich Site Summary">RSS</acronym> item (it could then be parsed and appropriately formatted by an RSS-item-aware formatter). That’s for later, though.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>&#39;Conneg&#39; and the duality of weblogs.</title>
      <link href="https://qmacro.org/blog/posts/2003/02/28/&#39;conneg&#39;-and-the-duality-of-weblogs./"/>
      <updated>2003-02-28T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2003/02/28/&#39;conneg&#39;-and-the-duality-of-weblogs./</id>
      <content type="html">
        <![CDATA[
      <p>Q: <em>When is a blog not a blog?</em></p>
<p>A: <em>When it’s an <acronym title="Rich Site Summary">RSS</acronym> feed.</em></p>
<p>I’ve <a href="/blog/posts/2002/10/05/notes-to-self-what-should-the-rdfabout-point-to/">pondered the relationship between weblog and RSS before</a>, and in an <a href="http://www.oldspeckledhen.co.uk/introduction.htm">Old Speckled Hen</a>-induced philosophical state of mind, have decided for experimental purposes that for all URI intents and purposes they are one and the same.</p>
<p>With that in mind, my thoughts turned (naturally) to connection negotiation, or ‘conneg’. My weblog, whether HTML or RSS, is my weblog. Same thing, different representation. So perhaps both representations should actually have the same URI, <a href="/">/</a>. Clients could use conneg to specify which representation they wanted, for example:</p>
<p><acronym title="Rich Site Summary">RSS</acronym> 0.91:</p>
<pre><code>[dj@cicero dj]$ GET -H&quot;Accept: application/rss+xml&quot; -Use /
GET //qmacro.org/about 
Accept: application/rss+xml 
200 OK 
Content-Type: application/rss+xml 
&lt;?xml version=&quot;1.0&quot;?&gt;
&lt;!-- name=&quot;generator&quot; content=&quot;bloxsom&quot; --&gt; 
&lt;rss version=&quot;0.91&quot;&gt; 
&lt;channel&gt; &lt;title&gt;DJ's Weblog&lt;/title&gt; ...
[dj@cicero dj]$ 
</code></pre>
<p>Or <acronym title="Rich Site Summary">RSS</acronym> 1.0:</p>
<pre><code>[dj@cicero dj]$ curl -H&quot;Accept:application/rdf+xml&quot; /
&lt;?xml version=&quot;1.0&quot;?&gt; 
&lt;rdf:RDF xmlns=&quot;http://purl.org/rss/1.0/&quot; ... &gt; 
&lt;channel rdf:about=&quot;//qmacro.org/about&quot;&gt; 
&lt;title&gt;DJ's Weblog&lt;/title&gt; ...
[dj@cicero dj]$ 
</code></pre>
<p>Or even simply HTML:</p>
<pre><code>[dj@cicero dj]$ GET -Use / 
200 OK 
Content-Type: text/html; charset=ISO-8859-1   
&lt;title&gt;DJ's Weblog&lt;/title&gt; ...
[dj@cicero dj]$ 
</code></pre>
<p>In other words, specify what representation you want in the <a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.1">Accept</a> header. Here’s a quick summary of how (90% of) the Accept: header is used:</p>
<blockquote>
<p>As an HTTP client, you say what media types (which roughly translates to ‘representations’ here) you’re willing to accept for a given resource (URI). You can specify multiple media types, and with the aid of a sort of ranking mechanism, you can say which media types you prefer over others, if given the choice. You do this by assigning values, so that “<em>application/rdf+xml, application/rss+xml;q=0.5, <em>/</em>;q=0.1</em>” means “I’d love application/rdf+xml, but if you haven’t got that, then send me application/rss+xml; failing that, anything will do. The values used are between 0 and 1 (in ascending preference), any media type without a value is assumed to have a value of 1.</p>
</blockquote>
<p>So, as a first offering to the <a href="http://www.raelity.org/apps/blosxom/plugin.shtml#registry">Blosxom plugin love-in</a>, I wrote <a href="/~dj/2003/02/conneg">conneg</a>, a plugin with which you can determine the flavour required according to the HTTP Accept header. Here’s how it works:</p>
<ol>
<li>You define the flavours you want to have ‘available’ via connection negotiation in a configurable variable</li>
<li>In a new plugin event, ‘flavour’, control is given to the <a href="/~dj/2003/02/conneg">conneg</a> plugin to determine the flavour according to the connection negotiation</li>
<li>The content types are determined for each flavour specified, and ‘scored’ according to the client’s Accept preferences</li>
<li>They are then ranked, and the flavour is overridden with the ‘winner’</li>
</ol>
<p>As you can see from the code, the plugin takes into account what content-types you’ve specified in the ‘content_type.<em>flavour</em>‘ files in your blog hierarchy.</p>
<p>Note I said ‘new plugin event’. There are a number of <a href="http://www.raelity.org/apps/blosxom/plugin.shtml">standard plugin hooks</a> in Blosxom (2.0 beta3). For this ‘flavour’ plugin to work, I’ve added another hook thus:</p>
<pre><code>[dj@cicero blosxom_2_0_beta]$ diff blosxom_2_0_b3.cgi blosxom_2_0_b3.cgi.dj 
208a209,211 
&gt; # Plugins: Flavour 
&gt; map { $_-&gt;can('flavour') and $_-&gt;flavour() } @plugins; 
&gt;
[dj@cicero dj]$ 
</code></pre>
<p>This is in the ‘Dynamic’ section of the code.</p>
<p>I’ll run this new plugin hook past Rael shortly. It’s a sort of chicken and egg situation – I can’t explain the reason for the patch until I’ve done it and written about it. Rather like conneg and weblogs, perhaps. <acronym title="Rich Site Summary">RSS</acronym> <a href="http://www.oreillynet.com/%7Erael/lang/perl/blagg">aggregators</a> might not start doing conneg until weblog RSS content is available by that method, and there’s little incentive if no-one’s asking for it. So I thought I’d make a move. Experimental, mind you.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Tiki parser for MoinMoin</title>
      <link href="https://qmacro.org/blog/posts/2003/02/22/tiki-parser-for-moinmoin/"/>
      <updated>2003-02-22T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2003/02/22/tiki-parser-for-moinmoin/</id>
      <content type="html">
        <![CDATA[
      <p><a href="http://www.mplode.com/tima/">Tim Appnel</a> recently created <a href="http://www.mplode.com/tima/archives/000215.html">TikiText</a>, a Wiki-like markup language for which <a href="http://www.oreillynet.com/%7Erael/">Rael</a> recently created a <a href="http://www.raelity.org/archives/computers/internet/weblogs/blosxom/plugins/tiki.html">Blosxom plugin</a>. While theoretically interesting, I wasn’t sure how I’d get to know and be able to practise the new markup, as support for it exists currently only in an experimental <a href="http://www.mplode.com/tima/projects/tiki/tiki.tar.gz">Perl module</a> to parse and format text that you supply to it.</p>
<p>I’m a keen user of the Python-based <a href="http://moin.sourceforge.net/">MoinMoin</a> wiki (especially at work, where we manage our internal documentation and work collaboration with it), and the ‘natural environment’ for a wiki-like markup language is … in a Wiki. So I decided to mix up a bit of glue; I stuck Tim’s Perl Text::Tiki module into the Python MoinMoin wiki mechanism by writing a very quick and dirty parser, <a href="/~dj/2003/02/tiki.py">tiki.py</a>. Now I can practice the TikiText markup in my favourite Wiki environment; all I need to do is use a</p>
<p>#format tiki</p>
<p>declaration at the top of a Wiki page to have the glue kick in.</p>
<p>You can see it in action in the demowiki, specifically the <a href="/demowiki/TikiTest">TikiTest</a> page. Have a look at the source (with the EditText link) to see the TikiText format.</p>
<p>Fun!</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Blosxom 2.0 Beta1</title>
      <link href="https://qmacro.org/blog/posts/2003/02/21/blosxom-2.0-beta1/"/>
      <updated>2003-02-21T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2003/02/21/blosxom-2.0-beta1/</id>
      <content type="html">
        <![CDATA[
      <p>My favourite blogging software just got better.</p>
<p>Congratulations to <a href="http://www.oreillynet.com/%7Erael/">Rael</a> in releasing the <a href="http://www.raelity.org/apps/blosxom/plugin.shtml">plugin</a>-enabled <a href="http://www.raelity.org/apps/blosxom/downloads/blosxom_2_0_b1.tar.gz">2.0 Beta1</a> of <a href="http://www.raelity.org/apps/blosxom">Blosxom</a>. I dropped it into my cgi-bin directory, tweaked a few things, and it worked like a dream.</p>
<p>One of the plugins available already is <a href="http://www.raelity.org/archives/computers/internet/weblogs/blosxom/plugins/rss10.html">RSS 1.0 plugin</a>, which I’m now using to generate <acronym title="Rich Site Summary">RSS</acronym> 1.0 – see the <a href="../../../%7Edj/2003/01/weblogsyndication.shtml">Syndication</a> page for details. This means I can stop using the old <a href="/blog/posts/2002/09/12/from-rss-091-to-10/">XSLT-based mechanism</a>. Another is the <a href="http://www.raelity.org/archives/computers/internet/weblogs/blosxom/plugins/foreshortened.html">Foreshortened plugin</a> which I’m also using to have a short description generated for the <description/> tag, while the entire content of the post goes into the <a href="content:encoded/">content:encoded/</a> tag from the <acronym title="Rich Site Summary">RSS</acronym><a href="http://purl.org/rss/1.0/modules/content/">Content Module</a>.</p>
<p>One thing that strikes me as interesting is the angle in the <a href="http://www.raelity.org/apps/blosxom/plugin.shtml">plugin documentation</a> which encourages plugin developers to respect the Zen of <a href="http://www.raelity.org/apps/blosxom">Blosxom</a> and keep its users and platforms (Linux, OS-X and MSWindows) in mind when developing. It’s a refreshing and positive call for simplicity.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>RSS aggregators and user-agent information for Blagg</title>
      <link href="https://qmacro.org/blog/posts/2003/02/03/rss-aggregators-and-user-agent-information-for-blagg/"/>
      <updated>2003-02-03T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2003/02/03/rss-aggregators-and-user-agent-information-for-blagg/</id>
      <content type="html">
        <![CDATA[
      <p>Prompted by a <a href="http://writetheweb.com/Members/edd/Articles/2003-02-rss">post</a> on the re-awakened <a href="http://www.writetheweb.com/">WriteTheWeb</a>, I made a small mod to <a href="http://www.oreillynet.com/%7Erael/lang/perl/blagg">Blagg</a> so that more detailed information is sent in the <a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.43">User-Agent header</a> – announcing that the RSS aggregator ‘blagg’ is the agent requesting the RSS feed.</p>
<p>Following it’s sibling <a href="http://www.raelity.org/apps/blosxom">Blosxom</a>‘s philosophy of simplicity and reuse of existing tools, Blagg uses ‘wget’ (or ‘curl’) to make the HTTP call. Adding the appropriate option to the string in $get_prog, e.g. by changing from this:</p>
<p>my $get_prog = 'wget --quiet -O -';</p>
<p>to this:</p>
<p>my $get_prog = 'wget -U 'blagg/0+4i (wget)' --quiet -O -';</p>
<p>was all that it took.</p>
<p>(In fact, personally I’m using my <a href="/blog/posts/2002/05/24/etag-enabled-wget/">ETag-aware version of wget</a> so I made the change in that small script, <a href="/~dj/wget.pl">wget.pl</a> rather than in Blagg itself.)</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Tinkering with RSS and NNTP</title>
      <link href="https://qmacro.org/blog/posts/2003/01/29/tinkering-with-rss-and-nntp/"/>
      <updated>2003-01-29T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2003/01/29/tinkering-with-rss-and-nntp/</id>
      <content type="html">
        <![CDATA[
      <p>RSS via NNTP is certainly not a new concept – I first read about the idea on <a href="http://interconnected.org/home">Matt Webb</a>‘s site almost <a href="http://interconnected.org/notes/syndication.html">three years ago</a>. More recently there’s been mention over at Jon’s (<a href="http://weblog.infoworld.com/udell/2003/01/10.html">Crossing the bridge of weak ties</a>), and Ben’s (<a href="http://www.benhammersley.com/archives/003441.html#003441">RSS to NNTP</a> and <a href="http://www.benhammersley.com/archives/003081.html#003081">HEP Messaging Server</a>).</p>
<p>This week, Ben had <a href="http://www.benhammersley.com/archives/003935.html#003935">mentioned</a> the <a href="http://actuallyworks.com/panopticon/">Panopticon</a> in reference to the forthcoming <a href="http://conferences.oreilly.com/etcon">ETCON</a>. During last year’s, I had <a href="/blog/posts/2002/05/15/the-panopticon/">hacked</a> <a href="/blog/posts/2002/05/15/jabber-browsing-the-panopticon-data/">around</a> with the Panopticon, creating a sort of <a href="http://www.jabber.org/">Jabber</a>-based information diffusion service to lighten the load on the Panopticon mechanism’s single source socket.</p>
<p>With all the talk of lightening the load from RSS consumers, my thoughts turned from these Panopticon experiments to NNTP, as of course it’s a technology that is designed for information diffusion, and bearing and sharing load. I couldn’t resist a bit of tinkering with NNTP, partly to follow up a little bit myself on RSS to/via NNTP, but mostly in fact to re-acquaint myself with the wonderfully arcane configuration of the majestic beast that is <a href="http://www.isc.org/products/INN/">inn</a>. In addition, there’s been talk recently of aggregators moving out of the realms of satellite applications and into the browser itself. The <a href="http://www.oreillynet.com/%7Erael/lang/perl/blagg">Blagg</a> and <a href="http://www.raelity.org/apps/blosxom">Blosxom</a> powered <a href="/cgi-bin/blosxom/djnews">Morning Reading</a> page – my personal (but open) news aggregator – is already web-based, so I thought I’d have a look in the other direction.</p>
<p>Aided partly by Jon’s <a href="http://allconsuming.net/item.cgi?isbn=1565925378">Practical Internet Groupware book</a> and partly by the man pages, I put together a simple <a href="/space/InnConfig">configuration</a> for a server that I could locally post weblog posts to as articles.</p>
<p>As I saw it, there are two approaches to newsgroup article creation in this context, and each has its pros and cons.</p>
<dl><dt>*Send items from all weblogs to the same newsgroup*</dt><dd>This approach means that the’aggregation effect’ (stories from different weblogs) is explicit, as the posts in a single newsgroup are sourced from different RSS feeds, and you read them sequentially. [You can see this effect in the screenshot, in the highlighted public.test newsgroup (shortened to "p.test")]. It also means, however, that such a ‘collective’ newsgroup is going to be less useful for diffusion and load sharing as it’s specific to one (or a few) person’s [feed](/~dj/rss.rss) tastes.</dd><dt>Send items from each weblog to a separate newsgroup</dt><dd>While the ‘aggregation effect’ is still available (by using the newsreader’s “read next unread” function, which will normally jump from one newsgroup to the next), it’s not as in-your-face. However, with a single newsgroup for each RSS feed, there are tremendous possibilities for NNTP peer exchange of (RSS weblog item) articles and consequently load sharing in the consumption of RSS – because picking and choosing feeds remains possible at the right (newsgroup) granular level. That said, this approach doesn’t exclude the possibility of composite newsgroups which consisted of, say, finance news feeds, or feeds in similar categories, which would be interesting to more than one person.</dd></dl>After deliberation of such matters, I then wrote a very simple plugin for [Blagg](http://www.oreillynet.com/%7Erael/lang/perl/blagg), which would post each weblog item to one or more newsgroups. For my purposes, I solved the question of what to call each newsgroup by using the ‘nickname’, required for each feed, in Blagg’s **rss.dat** file which controls the aggregation activity.
<p><img src="/~dj/2003/01/nntp.png" alt="Screenshot of Mozilla newsreader reading aggregated RSS items" title="viewing aggregated RSS-sourced news in the HTML-capable Mozilla newsreader"></p>
<p>The plugin is called <a href="/~dj/2003/01/nntp.pl">nntp</a>. I modified Blagg slightly so it would pass the nickname to the plugin. My version of Blagg 0+4i is <a href="/~dj/2003/01/blagg.0+4i">here</a> (it has a number of other modifications too). Feel free to take the plugin and modify it to suit your purpose. It was only a bit of twiddling, but it seems to work.</p>
<p>There are plenty of possibilities for experimentation: combining the various <a href="http://www.benhammersley.com/archives/003862.html#003862">weblog trackbacking mechanisms</a> with NNTP article IDs to link articles together in a thread; replying (to the newsgroup) to an article might send a comment to the post at the source weblog. Hmmmm…</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Your wishlist in &#39;consumable&#39; XML</title>
      <link href="https://qmacro.org/blog/posts/2003/01/27/your-wishlist-in-&#39;consumable&#39;-xml/"/>
      <updated>2003-01-27T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2003/01/27/your-wishlist-in-&#39;consumable&#39;-xml/</id>
      <content type="html">
        <![CDATA[
      <p>While <a href="/blog/posts/2003/01/25/transferring-my-amazon-wishlist-to-allconsumingnet-2/">experimenting</a> with wishlist data, it occurred to me that it might be desirable to have one’s wishlist exposable directly from a URL, and in a consumable format. This would lend itself quite nicely to <a href="http://udell.roninhouse.com/bytecols/2002-03-27.html">URL</a> <a href="/blog/posts/2002/08/29/sidebars-mozilla-rss-old-and-new/">pipelining</a>.</p>
<p>I hacked up a very simple module, <a href="/~dj/2003/01/WWW_Amazon_Wishlist_XML.pm">WWW::Amazon::Wishlist::XML</a> (keeping to the original namespace in CPAN) which acts as an Apache <a href="/~dj/2003/01/wishlist.conf">handler</a> so you can plug your wishlist ID (mine’s <a href="http://www.amazon.co.uk/exec/obidos/wishlist/3G7VX6N7NMGWM/026-9291044-8526042">3G7VX6N7NMGWM</a>) in and get some basic XML out, in a simple HTTP GET request.</p>
<p>Here’s an example:</p>
<p><a href="../../../service/wishlist/uk/3G7VX6N7NMGWM">http://www.pipetree.com/service/wishlist/uk/3G7VX6N7NMGWM</a></p>
<p>Note the ‘uk’ part in the path. It signifies that the wishlist is held at <a href="http://www.amazon.co.uk/">amazon.co.uk</a>. If held at <a href="http://www.amazon.com/">amazon.com</a>, specify ‘com’, like this:</p>
<p><a href="../../../service/wishlist/com/11SZLJ2XQH8UE">http://www.pipetree.com/service/wishlist/com/11SZLJ2XQH8UE</a></p>
<p>It uses the <a href="../../../%7Edj/2003/01/Wishlist.pm.diff.txt">patched</a> version of <a href="http://search.cpan.org/author/SIMONW/WWW-Amazon-Wishlist-0.85/">WWW::Amazon::Wishlist</a> so should be ok for now with .com-based wishlists too. Of course, it’s experimental anyway (as are most of the things I post here) and is likely to explode without warning.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Asleep in 2002</title>
      <link href="https://qmacro.org/blog/posts/2003/01/27/asleep-in-2002/"/>
      <updated>2003-01-27T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2003/01/27/asleep-in-2002/</id>
      <content type="html">
        <![CDATA[
      <p>Was I asleep in parts of 2002? Or is my memory really as bad as people tell me it is? Of course Amazon offer consumable XML. Now that an email from Chanticleer has jogged my grey matter, I have found <a href="http://associates.amazon.com/exec/panama/associates/join/developer/faq.html/">this</a> which looks extremely promising. Interesting times ahead for me, although at first glance it looks as if it might be only <a href="http://www.amazon.com/">amazon.com</a> specific (i.e. not for data on <a href="http://www.amazon.co.uk/">amazon.co.uk</a>). Anyway, perhaps I’ll catch up with the present sometime this year…</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>The fragility of retro-engineering</title>
      <link href="https://qmacro.org/blog/posts/2003/01/26/the-fragility-of-retro-engineering/"/>
      <updated>2003-01-26T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2003/01/26/the-fragility-of-retro-engineering/</id>
      <content type="html">
        <![CDATA[
      <p>I just discovered that while the <a href="http://www.cpan.org/">CPAN</a> module <a href="http://search.cpan.org/author/SIMONW/WWW-Amazon-Wishlist-0.85/">WWW::Amazon::Wishlist</a> pulled ASINs out of <a href="http://www.amazon.co.uk/">amazon.co.uk</a>-based wishlists, it seems not to be able to find ASINs in <a href="http://www.amazon.com/">amazon.com</a>-based ones. I guess that the HTML layout that the module is scraping has changed. Or at least the hrefs that the module is pulling the ASINs from.</p>
<p>While lamenting the fact that retro-fitting like this is like trying to put a wave into a box, I’ve made a second <a href="/~dj/2003/01/Wishlist.pm.diff.txt">patch to the module</a> (the $url regex) so it can successfully find ASINs in U.S. wishlists too.</p>
<p>I wonder when/if we will see consumable wishlist data available directly from Amazon, a la <a href="http://allconsuming.net/xml">AllConsuming’s XML directory</a> <a href="">? </a></p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Transferring my Amazon wishlist to AllConsuming.net</title>
      <link href="https://qmacro.org/blog/posts/2003/01/25/transferring-my-amazon-wishlist-to-allconsuming.net/"/>
      <updated>2003-01-25T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2003/01/25/transferring-my-amazon-wishlist-to-allconsuming.net/</id>
      <content type="html">
        <![CDATA[
      <p>Now that I can <a href="/undefined/">monitor comments about books I have in my AllConsuming collection</a>, I thought it would be nice to add those books in my <a href="http://www.amazon.co.uk/exec/obidos/wishlist/3G7VX6N7NMGWM/">Amazon wishlist</a> to that AllConsuming collection so that I could see what people were saying about the books I wanted to buy.</p>
<p>So I hacked up a few scripts, and here are the results.</p>
<p><em>Getting my wishlist</em></p>
<p>Using <a href="http://www.twoshortplanks.com/simon/">Simon Wistow</a>‘s very useful <a href="http://search.cpan.org/author/SIMONW/WWW-Amazon-Wishlist-0.85/">WWW::Amazon::Wishlist</a>, it was a cinch to grab details of the books on my <a href="http://www.amazon.co.uk/exec/obidos/wishlist/3G7VX6N7NMGWM/">wishlist</a>. (I had to <a href="/~dj/2003/01/Wishlist.pm.diff.txt">patch</a> the module very slightly because of a problem with the user agent string not being set).</p>
<p>The script I wrote, <a href="/~dj/2003/01/wishlist">wishlist</a>, simply outputs a list of ISBN/ASINs and title/author details, like this:</p>
<p>[dj@cicero scraps]$ ./wishlist 0751327824 The Forgotten Arts and Crafts by John Seymour 090498205X With Ammon Wrigley in Saddleworth by Sam Seville 0672322404 Mod_perl Developer's Cookbook by Geoffrey Young, et al 0465024750 Fluid Concepts and Creative Analogies: Computer Models of ... 0765304368 Down and Out in the Magic Kingdom by Cory Doctorow ...</p>
<p><em>Interacting with AllConsuming</em></p>
<p>While I’m sure the <a href="http://allconsuming.net/">allconsuming.net</a> site and services are going to morph as services are added and changed, I nevertheless couldn’t reist writing a very simple Perl class, <a href="/~dj/2003/01/Agent.pm">Allconsuming::Agent</a> that allows you to log in (<em>logIn()</em>) and add books to your collection (<em>addToFavouriteBooks()</em>, <em>addToCurrentlyReading()</em>). It’s very basic but does the job for now. It tries to play nice by logging you out (<em>logOut()</em>) of the site automatically when you’ve finished. It can also tell if the site knows about a certain book (<em>knowsBook()</em>) – I think AllConsuming uses <a href="http://www.amazon.com/">amazon.com</a> to look books up and so the discrepancies between that and <a href="http://www.amazon.co.uk/">www.amazon.co.uk</a>, for example, show themselves as AllConsuming’s innocent blankness with certain ISBNs.</p>
<p>Anyway, I’m prepared for the eventuality that things will change at <a href="http://allconsuming.net/">allconsuming.net</a> sooner or later, so this class won’t work forever…but it’s fine for now.</p>
<p><em>Adding my wishlisted books</em></p>
<p>So putting this all together, I wrote a driver script, <a href="/~dj/2003/01/acadd">acadd</a>, which grabs my current reading list data from AllConsuming, and reads in a list of ISBN/ASINs that would be typically produced from a script like <a href="/~dj/2003/01/wishlist">wishlist</a>.</p>
<p>Reading through the wishlist book data, <a href="/~dj/2003/01/acadd">acadd</a> does this:</p>
<ul>
<li>checks to make sure the book isn’t in my AllConsuming collection already</li>
<li>checks that AllConsuming knows about the book</li>
<li>adds the book to my collection at AllConsuming</li>
</ul>
<p>Here’s a snippet of what actually happened when I piped the output of the one script into the other:</p>
<p>[dj@cicero scraps]$ ./wishlist | ./acadd 0751327824 The Forgotten Arts and Crafts by John Se... [UNKNOWN] 090498205X With Ammon Wrigley in Saddleworth by Sam... [UNKNOWN] 0672322404 Mod_perl Developer's Cookbook by Geoffre... [HAVE] 0465024750 Fluid Concepts and Creative Analogies: C... [HAVE] 0765304368 Down and Out in the Magic Kingdom by Cor... [ADDED OK] ...</p>
<p>Woo! <a href="http://allconsuming.net/item.cgi?isbn=0765304368">Cory’s new book</a>, appearing on my <a href="http://www.amazon.co.uk/exec/obidos/wishlist/3G7VX6N7NMGWM/">Amazon wishlist</a>, was added to my <a href="http://allconsuming.net/">allconsuming.net</a> collection. (In case you’re wondering, I am only adding books like this to ‘Currently Reading’, rather than any other collection category, temporarily, as right now only the books in this category along with the ‘Favourites’ category can be retrieved with the <a href="http://allconsuming.net/news/000012.html">SOAP API</a> – and it’s upon this API that <a href="/~dj/2003/01/booktalk">booktalk</a> relies.)</p>
<p>Anyway, it’s late, time for bed, driving to Brussels early tomorrow morning. Mmmm. Belgian beer beckons!</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Presentations, Wikis, and Site Navigation</title>
      <link href="https://qmacro.org/blog/posts/2003/01/22/presentations-wikis-and-site-navigation/"/>
      <updated>2003-01-22T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2003/01/22/presentations-wikis-and-site-navigation/</id>
      <content type="html">
        <![CDATA[
      <p>A while ago, inspired by others, I was looking at <a href="/blog/posts/2002/06/02/html-link-tag-for-blogroll/">adding metadata</a> to this weblog in the form of <em>link rel=’…’</em> tags that link to related resources. The classic use of such tags in weblogging is for a weblog to <a href="/blog/posts/2002/06/03/changed-link-tags/">point to its <acronym title="Rich Site Summary">RSS</acronym> feed</a>.</p>
<p>Cut to the present, and <a href="http://www.piersharding.com/">Piers</a> and I are thinking about a joint conference presentation. While the presentation format is not in question (HTML), I’ve been wondering how I might investigate these <em>link rel=’…’</em> tags further, learn some more about wikis, and have a bit of fun in the process.</p>
<p>While HTML-based presentations are nice, something that has always jarred (for me) has been the presence of slide navigation links within the presentation display itself. Whether buttons, graphics, or hyperlinks, they invariably (a) get in the way and (b) can move around slightly with layout changes from page to page in the presentation.</p>
<p>I wanted to see if I could solve this problem.</p>
<p>The <a href="http://twistedmatrix.com/users/jh.twistd/moin/moin.cgi/FrontPage">MoinMoin Wiki</a> (which I <a href="../../../testwiki">use</a> for documenting various things) generates <em>link rel=’…’</em> tags for each page, to point to the “Front Page”, “Glossary”, “Index” and “Help” pages that are standard within that Wiki. The Wiki markup includes <a href="http://twistedmatrix.com/users/jh.twistd/moin/moin.cgi/HelpOnProcessingInstructions">processing instructions</a> that start with hash symbols (#), to control things like whether section and subsection headings should be automatically numbered or not, and so on. The <em>name/value</em> style directives are known as ‘pragmas’.</p>
<p><img src="/~dj/2003/01/sitenav.png" alt="screenshot  of site navigation bar in Mozilla"></p>
<p>What I did was to hack some of the MoinMoin (Python code) (a few lines added only) so that I could</p>
<ul>
<li>specify any ‘previous’ and ‘next’ slide pages in the markup of a page using #pragma directives</li>
<li>have the Wiki automatically generate each page’s appropriate <em>link rel=’…’</em> tags for site navigation according to these new directives</li>
</ul>
<p>That way, browsers aware of these tags (including my browser of choice, <a href="http://www.mozilla.org/">Mozilla</a>), can display a useful and discreet navigation bar automatically. Problem solved!</p>
<p>I tweaked two MoinMoin files, <a href="/~dj/2003/01/Page.py.txt">Page.py</a> and <a href="/~dj/2003/01/wikiutil.py.txt">wikiutil.py</a>. It might have broken something else, you never know. It’s just a little hack. Also, so that you can get a feel for what I mean, have a browse of these few <a href="../../../demowiki/ThePresentation">presentation demo wiki pages</a> with your browser site navigation support turned on and/or visible. Use the EditPage feature to look at the markup source and see the #pragma directives. (Please don’t change anything, let others see it too – thanks).</p>
<p>So hurrah. We can build, present, and follow up on the presentation content in the rich hypertextual style that HTML and URIs afford, and collaborate on the content in the Wiki way.</p>
<p>On an incidental note, I’ve also added a <em>link rel=’start’</em> tag to point to the <a href="/qmacro">homepage</a> of this weblog. This is made available in Mozilla as the “Top” button in the site navigation bar.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Content-Type and Blosxom&#39;s RSS</title>
      <link href="https://qmacro.org/blog/posts/2003/01/22/content-type-and-blosxom&#39;s-rss/"/>
      <updated>2003-01-22T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2003/01/22/content-type-and-blosxom&#39;s-rss/</id>
      <content type="html">
        <![CDATA[
      <p>Agreeing with <a href="http://www.intertwingly.net/">Sam</a> on <a href="http://www.intertwingly.net/blog/1142.html">what content-type should be used for the weblog’s feed</a> (basically it should be whatever you specify in your <a href="http://diveintomark.org/archives/2002/05/30/rss_autodiscovery.html">link tag for that feed</a>), last night I changed the appropriate <a href="http://www.raelity.org/apps/blosxom">Blosxom</a> template file, <em>content_type.rss</em>, so that “application/rss+xml” would be sent out with the Content-Type header accompanying the <acronym title="Rich Site Summary">RSS</acronym> XML.</p>
<p>Unfortunately it broke the feed, in that none of the content was being entity-escaped (escaping of entities in <acronym title="Rich Site Summary">RSS</acronym> is of course a whole different story which I’ll leave for now). <a href="http://www.raelity.org/apps/blosxom">Blosxom</a> decides whether to do entity-escaping if the content-type is “text/xml”. So I made a quick fix to the check, so that the content of any <a href="http://www.raelity.org/apps/blosxom/flavour.shtml">flavour</a> whose content-type was anything ending in “Wxml” would be entity-escaped.</p>
<p>Funnily enough, I was only recently talking about <em>link rel=’…’</em> tags in <a href="/undefined/">Presentations, Wikis, and Site Navigation</a> last night.</p>
<p>So apologies for those people whose readers may have choked on unescaped content for the past few hours from this site.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Wisdom, diplomacy, or serendipity?</title>
      <link href="https://qmacro.org/blog/posts/2003/01/21/wisdom-diplomacy-or-serendipity/"/>
      <updated>2003-01-21T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2003/01/21/wisdom-diplomacy-or-serendipity/</id>
      <content type="html">
        <![CDATA[
      <p><a href="http://allconsuming.net/">allconsuming.net</a> has a <a href="http://allconsuming.net/news/000012.html">SOAP interface</a>. Nice and easy to call and use.</p>
<p>But for those (including me) who (also) have a <a href="http://internet.conveyor.com/RESTwiki/moin.cgi/FrontPage" title="The REST Wiki's front page">REST</a> bent, there is also a tip-o’-the-hat style flavour that has interesting possibilities. The (readonly) methods are also available as URLs like this:</p>
<p><a href="http://allconsuming.net/soap-client.cgi?hourly=1">http://allconsuming.net/soap-client.cgi?hourly=1</a></p>
<p>or</p>
<p><a href="http://allconsuming.net/soap-client.cgi?friends=1&amp;url=//qmacro.org/about">http://allconsuming.net/soap-client.cgi?friends=1&amp;url=//qmacro.org/about</a></p>
<p>where the methods are “GetHourlyList()” (hourly=1) and “GetFriends()” (friends=1) respectively.</p>
<p>While the actual data returned in the message body is clearly <a href="http://www.perldoc.com/perl5.6/lib/Data/Dumper.html">Data::Dumper</a>ed output of the data structure that would be returned in the SOAP response, a slight change on the server side to produce the data in ‘original’ XML form would be very useful indeed for pipeline-style applications, perhaps.</p>
<p><a href="http://erikbenson.com/">Erik</a> is using these URLs to show readers examples of response output. But I bet the potential diplomacy wasn’t lost on him.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>The universal canvas and RSS apps</title>
      <link href="https://qmacro.org/blog/posts/2003/01/21/the-universal-canvas-and-rss-apps/"/>
      <updated>2003-01-21T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2003/01/21/the-universal-canvas-and-rss-apps/</id>
      <content type="html">
        <![CDATA[
      <p>It seems that beyond carrying syndication information, <acronym title="Rich Site Summary">RSS</acronym> is a very useful and flexible way to get all sorts of application data pushed to a user over time. In the same way that a web browser is a <a href="http://groups.yahoo.com/group/ucapi-discuss/">universal canvas</a> upon which limitless services and information can be painted, so (in an albeit much smaller way) an RSS reader/aggregator might also find its place as an inbox for time-related delivery of all sorts of information. This is borne out by the <a href="/undefined/">experimental “booktalk” application</a> which uses the <acronym title="Rich Site Summary">RSS</acronym> infrastructure to deliver information that appears over time.</p>
<p>Application data and <acronym title="Rich Site Summary">RSS</acronym> is something that <a href="http://radio.weblogs.com/0103021/">Matthew Langham</a> touched upon <a href="http://www.oreillynet.com/cs/user/view/cs_msg/12476">last December</a>. And of course, this isn’t just hot air, <a href="http://www.oreillynet.com/cs/user/view/cs_msg/12476">we’re already generating RSS</a> out of SAP R/3 at work for a sales (SD) application.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>The disruptive engineering spectrum, and &quot;booktalk&quot;, an AllConsuming app</title>
      <link href="https://qmacro.org/blog/posts/2003/01/20/the-disruptive-engineering-spectrum-and-&quot;booktalk&quot;-an-allconsuming-app/"/>
      <updated>2003-01-20T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2003/01/20/the-disruptive-engineering-spectrum-and-&quot;booktalk&quot;-an-allconsuming-app/</id>
      <content type="html">
        <![CDATA[
      <p>At one end of the spectrum, along which building blocks for future cooperative web applications lie, we have the library software vendors who were unwitting participants in a great web service experiment “<a href="http://weblog.infoworld.com/udell/stories/2002/12/11/librarylookup.html">LibraryLookup</a>” built and described by <a href="http://weblog.infoworld.com/udell">Jon</a> in a recent <a href="http://staging.infoworld.com/articles/ap/xml/03/01/06/030106apapps.xml?template=/storypages/printfriendly.html">InfoWorld column</a>. While I’m sure everything is fine now, I don’t think their initial reaction to their participation was favourable. Fair enough.</p>
<p>At the other end of the spectrum, enter <a href="http://erikbenson.com/">Erik Benson</a> and his creation <a href="http://allconsuming.net/">allconsuming.net</a>, a very interesting site which builds a representation of the collective literary consciousness of the weblogging community by scanning weblog RSS feeds for mentions of books (Amazon and other URLs, specifically ISBN/ASINs) and collating excerpts from those weblog posts with data from other web sources such as Amazon and Google. Add to that the ability to sign up and create your own lists of books (currently reading, favourites, and so on) and you have a fine web resource for aiding and abetting your bookworm tendencies.</p>
<p>A fine web resource not only for humans, but as a software service too. In constructing <a href="http://allconsuming.net/">allconsuming.net</a>, Erik has deliberately left software hooks and information bait dangling from the site, ready for us to connect and consume. Moreover, he <a href="http://www.allconsuming.net/news/000027.html#000027">encourages </a> us to do so, telling us to “Use [his] <a href="http://allconsuming.net/xml/">XML</a>” and try out his <a href="http://allconsuming.net/news/000012.html">SOAP interface</a>.</p>
<p>So I did.</p>
<p>While <a href="http://allconsuming.net/">allconsuming.net</a> can send you book reading recommendations (by email) based on what your friends are reading and commenting about, I thought it might be useful to be able to read any comments that were made on books that you had in your collection. <em>“I’ve got book X. Let me know when someone says something about book X”</em>.</p>
<p>So I whipped up a little script, <a href="/~dj/2003/01/booktalk">booktalk</a>, which indeed uses <a href="http://allconsuming.net/">allconsuming.net</a>‘s hooks to build a new service. What <a href="/~dj/2003/01/booktalk">booktalk</a> does, crontabbed on an hourly basis, is to grab a user’s <a href="http://allconsuming.net/soap-client.cgi?currently_reading=1&amp;username=avalon">currently reading</a> and <a href="http://allconsuming.net/soap-client.cgi?favorite_books=1&amp;username=qmacro">favourite books</a> lists and then look at the <a href="http://allconsuming.net/soap-client.cgi?hourly=1">hourly list</a> of latest books mentioned. Any intersections are pushed onto the top of a list of items in an <acronym title="RDF Site Summary">RSS</acronym> file, which represents a sort of <a href="../../../%7Edj/booktalk_avalon.xml">‘commentary alert’ feed</a> for that user and his books. It goes without saying that the point of this is so that the user can easily monitor new comments on books in his collection by subscribing to that feed, which, aggregated by <a href="http://www.oreillynet.com/%7Erael/lang/perl/blagg">Blagg</a> and rendered by <a href="http://www.raelity.org/apps/blosxom">Blosxom</a>, would look <a href="/cgi-bin/blosxom/booktalk">something like this</a>.</p>
<p>Of course, the usual caveats apply – it’s experimental, and works for me, your mileage may vary.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Creating the &quot;Entry index&quot;</title>
      <link href="https://qmacro.org/blog/posts/2003/01/20/creating-the-&quot;entry-index&quot;/"/>
      <updated>2003-01-20T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2003/01/20/creating-the-&quot;entry-index&quot;/</id>
      <content type="html">
        <![CDATA[
      <p>Often I’d be discussing something and remember that I’d written something about it on this weblog. Manually searching through the files that contain the weblog entry texts was more painful than I wanted. I decided to make an <a href="../../?flav=titles&amp;num_entries=100">Entry index</a> available – a simple list of weblog item titles in reverse date order, that I could search through.</p>
<p>With the power of <a href="http://www.raelity.org/apps/blosxom">Blosxom</a>, I managed to do it in 10 minutes. Using the ‘<a href="http://www.raelity.org/apps/blosxom/flavour.shtml">flavour</a>‘ templating mechanism, I created a new flavour “titles” which I can then specify (<a href="../../?flav=titles&amp;num_entries=100">//qmacro.org/about/?flav=titles&amp;num_entries=100</a>) when calling Blosxom to run over my file store. Wonderfully simple. And while I could put together a little mechanism to statically build such a list every 10 minutes or something (to save the CPU hit), I don’t want to, and don’t have to now that I’m not trying to render everything on the main weblog page.</p>
<p>The ‘titles’ flavour files are <a href="/~dj/2003/01/titles/">here</a>.</p>
<p>There was a bit of jiggery-pokery I had to perform to make it work how I wanted. First, Blosxom makes a decision on whether to insert the day/date subtitles in a weblog display based upon what content-type the flavour is. Because it decides to insert such subtitles when it sees ‘text/html’, and I don’t want Blosxom to insert the subtitles in the entry index, I set the <a href="/~dj/2003/01/titles/content_type.titles">content-type for the titles flavour</a> to be ‘text/html;’.</p>
<p>Second, the number of entries that Blosxom displays is governed by a parameter in the code. But I wanted a different number of entries in the index than in the main weblog display. So I added a line:</p>
<p>param('num_entries') and $num_entries = param('num_entries');</p>
<p>near the start to allow me to pass the value in the URI.</p>
<p>Hey, it works, ok?</p>
<p>The ‘titles’ flavour files are <a href="/~dj/2003/01/titles/">here</a>.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>A new year and a new approach</title>
      <link href="https://qmacro.org/blog/posts/2003/01/20/a-new-year-and-a-new-approach/"/>
      <updated>2003-01-20T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2003/01/20/a-new-year-and-a-new-approach/</id>
      <content type="html">
        <![CDATA[
      <p>Well, after a rather long pause, I have found my way back to the keyboard. More and more Real Life started intervening during winter and I had less and less time around “here”. Not that I’m complaining, it’s been very pleasant (reading and daydreaming through <a href="http://allconsuming.net/item.cgi?isbn=0571110959">The Complete Book of Self-Sufficiency</a>, recommended to me by <a href="http://www.piersharding.com/">Piers</a>, and spending lots of time in the kitchen and garden, mostly).</p>
<p>Anyway, I wanted to start out on a fresher, less cluttered approach to the weblog mechanism. So here it is. I’ll probably add things to it gradually over the weeks and months, but I thought I’d go back to basics and remind myself of how simple HTML, HTTP and URIs can be. I also wanted to get away from the problem of trying to fit everything onto one page. Add to that the fact that I’m no great artist (my main diagram medium at work is still ASCII art lines and boxes) and I’m actually more comfortable with this simple layout compared to the previous one. Funnily enough, it looks like <a href="http://diveintomark.org/">Mark</a> has been redesigning and simplifying too.</p>
<p>I’m using the 0+6i beta 2 version of <a href="http://www.raelity.org/apps/blosxom">Blosxom</a>, with the anticipation of moving to <a href="http://www.raelity.org/archives/2003/01/19#blosxom_filename_flavour">0+7i</a> when it’s ready. (It’s not unlikely that I’ve broken things in this rejig – please let me know if I have – thanks!)</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Startups and software patents</title>
      <link href="https://qmacro.org/blog/posts/2002/12/19/startups-and-software-patents/"/>
      <updated>2002-12-19T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2002/12/19/startups-and-software-patents/</id>
      <content type="html">
        <![CDATA[
      <p><a href="http://www.scripting.com/">Dave W</a> points to <a href="http://www.strangeberry.com/">Strangeberry</a>, a startup that are doing a Java rendition of <a href="http://www.zeroconf.org/Rendezvous/">Rendevous</a>.</p>
<p>“Interesting!” I think, as I go to their site and browse the founders’ <a href="http://www.strangeberry.com/about/index.html">resumes</a>, where I find something rather disturbing. What I find is that various US Patents are being paraded. These patents seem to be predominately for software, methodologies, rather than inventions. Picking one at random, <a href="http://www.delphion.com/details?pn=US06226654__">US6226654: Web document based graphical user interface</a> – this seems to be using specific web technology components (HTML forms and graphics, for example) for exactly the use they were originally intended (GUI-in-browser). How the heck can you patent that?</p>
<p>Call me naive, call me an old fogey, but I do question the use of patents for programs and applications of software. At least the Strangeberry people aren’t trying to keep them a secret (in fact, quite the opposite!)</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>For REST, read &#39;Architectural Style&#39;</title>
      <link href="https://qmacro.org/blog/posts/2002/12/17/for-rest-read-&#39;architectural-style&#39;/"/>
      <updated>2002-12-17T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2002/12/17/for-rest-read-&#39;architectural-style&#39;/</id>
      <content type="html">
        <![CDATA[
      <p>In the swirling mass of memes surrounding web services (whatever they are) it’s sometimes easy to forget that <a href="http://internet.conveyor.com/RESTwiki/moin.cgi/FrontPage" title="The REST Wiki's front page">REST</a> is an architectural style, an approach, rather than something that you install or debug. If nothing else, it’s become useful as a framework in which I can think more clearly about web-based projects and their interfaces. Thinking in terms of a limited number of verbs (methods) with well-defined and widely understood semantics, combined with a set of ‘objects’ (represented by URIs) certainly helped me come up with a clear idea of what I should code, and how it should appear to the outside world, in a couple of recent projects.</p>
<p>What’s really interesting is that a pattern is emerging. The interface description table in my ‘working notes’ (aka final documentation :-) that I’ve written to describe the details of the latest project bear a remarkable resemblance to the table in the <a href="/space/RtRest">RESTful RT experiment</a> and also the one in <a href="http://www.bitworking.org/">Joe</a>‘s <a href="http://wellformedweb.org/RESTLog.cgi/5">RESTlog interface</a>. For each interaction, they each roughly show:</p>
<ul>
<li>the HTTP verb</li>
<li>the URI</li>
<li>what the payload to be sent is (and its content-type) if any</li>
<li>what the expected response is (HTTP status and pertinent headers)</li>
<li>what the payload to be expected back is (and its content-type) if any</li>
<li>what possible error responses there might be</li>
</ul>
<p>Incidentally, <a href="http://www.piersharding.com/">Piers</a> (my partner in code crime) has just written about the <a href="http://www.piersharding.com/article.xml?mhttp">client-end</a> of one of the RESTful projects at work.</p>
<p>I discovered a nice RESTful bonus when doing the documentation too – I could link directly to the URLs of some of the services from within my (HTML/Wiki-based) documentation, to show examples. That’s turning out to be very useful.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>&quot;Assaults on the Internet&#39;s end-to-end-architecture&quot;</title>
      <link href="https://qmacro.org/blog/posts/2002/12/15/&quot;assaults-on-the-internet&#39;s-end-to-end-architecture&quot;/"/>
      <updated>2002-12-15T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2002/12/15/&quot;assaults-on-the-internet&#39;s-end-to-end-architecture&quot;/</id>
      <content type="html">
        <![CDATA[
      <p>Jon Udell <a href="http://weblog.infoworld.com/udell/categories/identityPrivacy/2002/12/05.html">wrote about whitelisting and ChoiceMail</a> earlier this month, and rightly pointed out that such mechanisms were in some ways evidence that in trying to combat UCE we were losing the general efficacy of email.</p>
<p>I just read (via <a href="http://www.schockwellenreiter.de/">Der Schockwellenreiter</a>) about another potential assault (albeit seemingly well-meant) on the same. <a href="http://www.wired.com/news/technology/0,1282,56788,00.html">Wired reports</a> on a charging plan for spammers, with mechanisms that would allow genuine emails to get through.</p>
<p>I don’t know what the answer is. For now, I’m happy, having installed the excellent <a href="http://www.spamassassin.org/">SpamAssassin</a> and enjoying virtually spam-free email bliss.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Ben&#39;s RSS book</title>
      <link href="https://qmacro.org/blog/posts/2002/12/11/ben&#39;s-rss-book/"/>
      <updated>2002-12-11T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2002/12/11/ben&#39;s-rss-book/</id>
      <content type="html">
        <![CDATA[
      <p>A (slightly) belated congrats to <a href="http://www.benhammersley.com/">Ben</a> on the publication of his book, <a href="http://www.oreilly.com/catalog/consynrss/">Content Syndication with RSS</a>. Just in time for my Christmas list. Having <a href="http://www.oreilly.com/catalog/jabber/">shared a similar experience</a> I can appreciate the effort he has most certainly put in. Well done Ben.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>RESTifying RT</title>
      <link href="https://qmacro.org/blog/posts/2002/12/08/restifying-rt/"/>
      <updated>2002-12-08T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2002/12/08/restifying-rt/</id>
      <content type="html">
        <![CDATA[
      <p>After a rather longer-than-expected hiatus (I’ve been soaking up some of my online / technology saturation with some good old fashioned cooking, baking and sudden interest in antiques) I’m back in front of the keyboard.</p>
<p>Lots to catch up on indeed. Seems the extended community continues to be busy, innovative, and still rather passionate about things.</p>
<p>Anyway, as a starter for ten, I’ve dusted off a little abandoned project that I started shortly before <a href="http://conferences.oreilly.com/os2002/">OSCON</a> this year and talked about it a bit there (on <a href="http://internet.conveyor.com/RESTwiki/moin.cgi/FrontPage" title="The REST Wiki's front page">REST</a>ifying <a href="http://www.fsck.com/projects/rt/" title="RT: Request Tracker">RT</a>). I’ve <a href="/space/RtRest">written up a few notes</a> with a view to (a) crystallizing my thoughts and (b) thinking through the API I had (and bits I’ve added) so I can write a cleaner implementation. Maybe.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>&#39;Practical RDF&#39; book up for public review</title>
      <link href="https://qmacro.org/blog/posts/2002/10/14/&#39;practical-rdf&#39;-book-up-for-public-review/"/>
      <updated>2002-10-14T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2002/10/14/&#39;practical-rdf&#39;-book-up-for-public-review/</id>
      <content type="html">
        <![CDATA[
      <p>Great stuff – <a href="http://weblog.burningbird.net/" title="Shelley Powers">Shelley</a>‘s forthcoming book, “Practical RDF”, is going to be <a href="http://rdf.burningbird.net/">available for public review</a>. I’m looking forward to it.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Notes to self: What should the rdf:about point to?</title>
      <link href="https://qmacro.org/blog/posts/2002/10/05/notes-to-self:-what-should-the-rdf:about-point-to/"/>
      <updated>2002-10-05T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2002/10/05/notes-to-self:-what-should-the-rdf:about-point-to/</id>
      <content type="html">
        <![CDATA[
      <p>If nothing else, RSS 1.0 is a great source of contemplation and wondering. This morning, I’ve been considering the thoughts surrounding the <strong>rdf:about</strong> attribute in the channel element:</p>
<p><channel rdf:about="..."> ... </channel></p>
<p>What should the value of the <strong>rdf:about</strong> be? The URI of the RSS file itself or the URI of the document that the RSS is describing? This is not a new question – it’s been debated already, and I’m not trying to dredge up the issues in any particular way now; I just want to get my (seemingly random) thoughts down here (weblogging for me is a great framework in which to marshall my thinking, which I’m trying to make the most of in this period of infrequent connectivity).</p>
<p>There are some arguments for the value of <strong>rdf:about</strong> to be the URI of HTML document (I’m using HTML examples in this post for simplicity’s sake), and others for it to be the URI of the RSS document itself. Here’s what I’ve been thinking:</p>
<p><em>Thoughts against the value being the RSS URI:</em></p>
<ul>
<li>In every case that I’ve seen, the URI for the RSS data and the URI for the HTML are different. There are two separate documents. If the value of <strong>rdf:about</strong> is the RSS URI, what is going to describe the HTML URI?</li>
<li>There have been arguments put forward that the RSS and the HTML that it described are really just two representations of the same thing. But I thought it was Not Good Practice to identify a single resource (the thing) with two (or more) different URIs? [On the other hand, if RSS was retrieved via content negotiation, we <em>could</em> use a single URI and just state in the HTTP request that we wanted (to <strong>Accept</strong>) the data or the metadata.]</li>
<li>If RSS ‘is just another representation’ of the HTML, and RSS is RDF, does it follow that all RDF descriptions of single URIs are to be considered as just other representations of said URIs? (This is clearly extreme and provocative)</li>
</ul>
<p><em>Thoughts in favour of the value being the RSS URI:</em></p>
<ul>
<li>Some RSS documents exist without any equivalent ‘describee’. For example, RSS feeds of aggregated items related by category are automatically constructed for further consumption. There are no equivalent HTML documents that these RSS documents are describing. So having to specify a URI of the HTML in the <strong>rdf:about</strong> attribute in these cases doesn’t make sense.</li>
<li>Often HTML pages have content above and beyond the news (or whatever) items being described in the RSS. As the RSS is not describing this other content, stating that the description is about the HTML URI is not entirely accurate, or at least not entirely representative.</li>
</ul>
<p>One interesting thing to note concerning the ‘representation’ question, and in relation to the HTML &lt;link rel=”…” … /&gt; construction to</p>
<ol>
<li><a href="../../2002/Jun/03#newlinks">point to the RSS feed from a weblog</a> (in collaborative weblog activities earlier this year)</li>
<li><a href="http://www.w3.org/TR/1999/REC-rdf-syntax-19990222/">point to RDF from HTML in general</a> (in the RDF M&amp;S)</li>
</ol>
<p>is that different possible values for the <link>’s <strong>type</strong> attribute show both alternatives: for example the value “alt” suggests an <em>alternative representation</em>, whereas the value “home” suggests a <em>separate resource altogether</em></p>
<p>.</p>
<p>Regarding the content negotiation comments, and the HTTP headers that are employed, I am reminded of other thoughts about RDF and resources in general. A question I had (well, still have) is “<em>Where are the statements about the statements?</em>” Yes, I guess I’m talking about reification, but not in the specific technical sense. I’m more interested in this: given a resource, how do I know where the (RDF) statements are that describe it? <a href="http://www.w3.org/TR/1999/REC-rdf-syntax-19990222/#transport">Appendix B “Transporting RDF</a> in the RDF Model and Syntax (M&amp;S) Specification describes four ways of associating descriptions with the resource they describe – “embedded”, “along-with”, “service bureau”, and “wrapped”. I’ve been thinking of the pros and cons of supplying an HTTP header when the resource is retrieved, like this:</p>
<p>X-RDF: (URI-of-RDF-file)</p>
<p>Now this isn’t a statement about a statement in the RDF sense, but it sure tells you where the statements about a resource are to be found. Hmmm…</p>
<p>Anyway, back to what the value of <strong>rdf:about</strong> should be. I think the difficulties and questions arise because of the special relationship between RDF and RSS that I <a href="../../2002/Oct/02#tech/rss/significance">mentioned last time</a>. Perhaps because other (non-RDF) RSS formats exist, the RDF and RSS are seen as separate things, so the RSS is a valid candidate for description (by RDF). This becomes meta meta data – a description of the description. Hmmm. One perverse extrapolation of this (taking the fact that <a href="http://www.purl.org/rss/1.0/" title="RSS (RDF Site Summary)">RSS</a><em>is</em> RDF, and considering <strong>rdf:about</strong>=”URI-of-RSS”) is that all RDF files would be written to describe themselves, and not the actual original resource. Perhaps what I’m trying to say is that this crazy scenario is an argument against having the RSS URI in the <strong>rdf:about</strong>.</p>
<p>So, what’s the answer?</p>
<p>I don’t think there is a definitive one, apart from “whatever makes more sense for your particular instance”. I don’t know if this is right or not, but it sure is stimulating.</p>
<p>One last question to bring this rambling to an end. What’s the semantic difference between specifying the RSS URI for <strong>rdf:about</strong> in an RSS file, and specifying blank (i.e. <strong>rdf:about=””</strong>)? About the same difference as there is between “self reference” and “self reflection”? ;-)</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>A moment of clarity: The significance of RSS 1.0 as an RDF application</title>
      <link href="https://qmacro.org/blog/posts/2002/10/02/a-moment-of-clarity:-the-significance-of-rss-1.0-as-an-rdf-application/"/>
      <updated>2002-10-02T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2002/10/02/a-moment-of-clarity:-the-significance-of-rss-1.0-as-an-rdf-application/</id>
      <content type="html">
        <![CDATA[
      <p>Walking on the beach this morning (yes we’re on holidays) I suddenly had a moment of clarity. It may be obvious to you, but I’ve been struggling to see what the theme was that lay beyond the clutter of the investigations into RDF and RSS, the <a href="/blog/posts/2002/09/21/more-thoughts-to-ponder/">contemplation of namespaces</a> and the various recent discussions on namespaces in comments to posts on <a href="http://rss.benhammersley.com/">Ben’s</a>, <a href="http://weblog.burningbird.net/">Shelley’s</a>, <a href="http://www.intertwingly.net/blog">Sam’s</a>, and doubtless others’ weblogs (all too much to keep track of).</p>
<p>I’d been contemplating what a namespace-aware XML parser for <a href="http://www.purl.org/rss/1.0/" title="RSS (RDF Site Summary)">RSS 1.0</a> would look like, and how it would work in relation to the <a href="http://web.resource.org/rss/1.0/modules/">RSS modules</a>. (Of course for Perl programmers, for example, there’s the <a href="http://search.cpan.org/author/EISEN/XML-RSS-0.96/RSS.pm">XML::RSS</a> parser on CPAN, which is namespace aware but relies on the RSS 1.0 namespace being the <em>default</em> namespace — in other words, if you specify a prefix for the RSS 1.0 namespace, say, “rss10″, rather than have it as the default namespace in the document, and prefix the RSS 1.0 elements with this prefix (“rss10:channel”, “rss10:item”, etc) then XML::RSS isn’t going to like it. But I digress…)</p>
<p>While namespace-aware XML parsing is indeed important, and namespaces are fundamental to RDF, the importance of handling namespaces correctly when parsing had clouded a question that I knew existed but hadn’t all the right words in the sentence, until now.</p>
<p>“What is the significance of RDF in RSS?” Actually, that’s not quite right.</p>
<p>While I’ve been looking at <a href="/blog/posts/2002/09/08/the-rdf-in-rss/">the RDF in RSS</a>, I’ve been concentrating on the bits that ‘look like’ RDF — the stuff that I highlighted in bold in the <a href="../../2002/Sep/08#tech/rdf/rssrdf">example RSS</a> (rdf:about, rdf:Seq, and so on). But it’s not as if there are some ‘bits’ of RDF in a format that’s RSS … the format RSS 1.0 <em>is</em> an RDF application. In other words, <em>all</em> of RSS 1.0 is RDF. The fact that it’s very similar to non-RDF RSS formats like 0.91 is of course an intended advantage. And the fact that the ‘transportable form’ that RDF takes is XML (RDF can be expressed in node/arc diagrams, or other forms such as <a href="http://www.w3.org/2000/10/swap/Primer.html">Notation 3</a>, or ‘N3′) also makes it nicely ‘compatible’.</p>
<p>“So what?”, I hear you ask.</p>
<p>Well, I’ve been wondering how complicated an XML parser (yes, a namespace aware one, but that’s not significant here) would have to get to support the plethora of RSS 1.0 modules available now and in the future. To be more specific, let’s take an example. Consider the <strong>creator</strong> property (element) from the <a href="http://purl.org/rss/1.0/modules/dc/">Dublin Core (dc)</a> module. The property is normally used by specifying a literal (a string) as its value, thus:</p>
<pre><code>&lt;dc:creator&gt;DJ Adams&lt;/dc:creator&gt;
</code></pre>
<p>But what about <a href="http://web.resource.org/rss/1.0/modules/#s3.2">rich content model</a> usage of properties? Consider the use of this property in the <a href="http://rss.benhammersley.com/archives/001391.html#001391">discussions</a> of how to splice <a href="http://xmlns.com/foaf/0.1/">FOAF</a> with RSS. Dealing with a new element from a defined namespace, where the usage is of the <em>open tag – literal value – close tag</em> variety, is not that difficult when parsing based on XML events. But what about this, which is based on one of the suggestions from Dan Brickley in the discussion and further discussed <a href="http://groups.yahoo.com/group/rdfweb-dev/message/293">on the rdfweb-dev list</a>:</p>
<pre><code>&lt;dc:creator&gt; &lt;foaf:Person&gt; &lt;foaf:Name&gt;DJ Adams&lt;/foaf:Name&gt; &lt;foaf:seeAlso rdf:resource='...' /&gt; ... &lt;/foaf:Person&gt; &lt;/dc:creator&gt;
</code></pre>
<p>Suddenly having to parsing this, as opposed to the simple ‘literal value’ example, is a whole new ballgame in state management (“where the hell am I <em>now</em> in this XML document and what do I do with these tags?”), and at least for this author, writing an XML parser to cope with all such data eventualities would be rather difficult in the context of XML-event based parsing.</p>
<p>But that’s just it. Considering an <em>XML</em> parser is missing the point. An <em>RDF</em> parser is more appropriate here. Looking at the structure of RSS 1.0 and the modules available for it from an RDF point of view suddenly made things clear for me. With RDF, the <a href="http://www.w3.org/2001/10/stripes/">striped</a> nature of the information encoded in XML is neatly parsed, regardless of difficult-to-predict hierarchical complexity, and translated into a flat set of triples (subject, predicate, object) that you can then interrogate. What you do with that information is then up to you.</p>
<p>There are many RDF tools, including parsers, listed on <a href="http://www.purl.org/net/dajobe/">Dave Beckett’s</a> <a href="http://www.ilrt.bristol.ac.uk/discovery/rdf/resources/">RDF resource site</a>. One of them is <a href="http://www.redland.opensource.ac.uk/">Redland</a>, his own RDF toolset. Just before I bring this post to a conclusion, let’s have a look at what the RDF parser in Redland produces for the two <strong>creator</strong> examples earlier.</p>
<p>Simple literal value example gives:</p>
<pre><code>{[//qmacro.org/about], [http://purl.org/dc/1.1/elements/creator], &quot;DJ Adams&quot;}
</code></pre>
<p>In other words:</p>
<pre><code>    /--------  creator   +----------+     | qmacro |-----------&gt;| DJ Adams |     --------/            +----------+
</code></pre>
<p>Complex FOAF element structure example gives:</p>
<pre><code>{[//qmacro.org/about], [http://dublincore.com/creator], (genid1)} {(genid1), [http://www.w3.org/1999/02/22-rdf-syntax-ns#type], [http://foaf.com/Person]} {(genid1), [http://foaf.com/name], &quot;DJ Adams&quot;} {(genid1), [http://www.w3.org/2000/01/rdf-schema#seeAlso], [http://www.pipetree.com/~dj/foaf.rdf]}
</code></pre>
<p>In other words:</p>
<pre><code>                                     type      /--------                                +--------------&gt;| Person |                                |               --------/                                |     /--------  creator   /----------    name      +----------+     | qmacro |-----------&gt;|  genid1  |-------------&gt;| DJ Adams |     --------/            ----------/              +----------+                                |                                |               /----------                                +--------------&gt;| foaf.rdf |                                     seeAlso    ----------/
</code></pre>
<p>(Whee! ASCII art RDF diagrams :-)</p>
<p>So what conclusion is there to draw from this bit of rambling? For me, it’s the emphasis on <em>RDF</em>, rather than <em>XML</em>, of RSS (and in fact the subtle relationships between those three things) that is significant in itself, especially when one considers the journey to data richness that seems to demand complex (and tricky-to-parse) XML structures. And what’s more, it’s not specifically RSS that wins here. It’s <em>any</em> RDF application.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>The case of the missing rdf:Description</title>
      <link href="https://qmacro.org/blog/posts/2002/09/22/the-case-of-the-missing-rdf:description/"/>
      <updated>2002-09-22T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2002/09/22/the-case-of-the-missing-rdf:description/</id>
      <content type="html">
        <![CDATA[
      <p>RDF is a framework for describing resources. We know that. We also know (from various sources, such as the <a href="http://www.w3.org/TR/REC-rdf-syntax" title="W3C Spec">RDF Model and Syntax Specification</a>, or Pierre-Antoine Champin’s <a href="http://www710.univ-lyon1.fr/%7Echampin/rdf-tutorial/node23.html">RDF Tutorial</a> (recommended!)) that an RDF document consists of a number of descriptions, and these descriptions look like this:</p>
<pre><code>&lt;rdf:RDF ... &gt; &lt;rdf:Description ... &gt; ... &lt;/rdf:Description&gt; &lt;rdf:Description ... &gt; ... &lt;/rdf:Description&gt; ... &lt;/rdf:RDF&gt;
</code></pre>
<p>How come then, that instances of two of the more well-known RDF applications, <a href="http://www.purl.org/rss/1.0/" title="RSS (RDF Site Summary)">RSS</a> and <a href="http://xmlns.com/foaf/0.1/" title="FOAF: Friend Of A Friend Vocab">FOAF</a>, don’t seem to reflect this format? Following the root rdf:RDF node and the declarations of the namespaces, we have, respectively:</p>
<pre><code>&lt;channel rdf:about=&quot;//qmacro.org/about&quot;&gt; &lt;title&gt;DJ's Weblog&lt;/title&gt; ... &lt;/channel&gt;
</code></pre>
<p>and</p>
<pre><code>&lt;foaf:Person rdf:ID=&quot;qmacro&quot;&gt; &lt;foaf:mbox rdf:resource=&quot;mailto:dj.adams@pobox.com&quot;/&gt; ... &lt;/foaf:Person&gt;
</code></pre>
<p>What, no rdf:Description? Let’s have a look at what’s happening here. In the RSS example, we have <em>channel</em> – or in its fully qualified form <em>http://purl.org/rss/1.0/channel</em> – a class, of which <em>//qmacro.org/about</em> is declared as an instance with the <em>rdf:about</em> attribute.</p>
<p>The RDF <a href="../../2002/Sep/08#tech/rdf/rssrdf">subject-predicate-object triple</a> looks like this:</p>
<pre><code>//qmacro.org/about rdf:type http://purl.org/rss/1.0/channel
</code></pre>
<p>or in other words “the URI (which is about to be described) is a channel”.</p>
<p>Because RDF is about is declaring and describing resources, it becomes clear that this sort of statement (technically the <em>rdf:type</em> triple, above) is very common. And what we saw in the RSS snippet above was the special RDF/XML construction that may be used to express such statements. If we didn’t have this special construction, we’d have to write:</p>
<pre><code>&lt;rdf:Description rdf:about=&quot;//qmacro.org/about&quot;&gt; &lt;rdf:type rdf:resource=&quot;http://purl.org/rss/1.0/channel&quot; /&gt; &lt;title&gt;DJ's Weblog&lt;/title&gt; ... &lt;/rdf:Description&gt;
</code></pre>
<p>which is a tad long winded. Similarly, the long winded equivalent for the FOAF example would look like this:</p>
<pre><code>&lt;rdf:Description rdf:ID=&quot;qmacro&quot;&gt; &lt;rdf:type rdf:resource=&quot;http://xmlns.com/foaf/0.1/Person&quot; /&gt; &lt;foaf:mbox rdf:resource=&quot;mailto:dj.adams@pobox.com&quot;/&gt; ... &lt;/rdf:Description&gt;
</code></pre>
<p>So there you have it. The rdf:Description isn’t there because a special construction is being used in both examples. Many thanks to Jon Hanna for <a href="http://groups.yahoo.com/group/rss-dev/message/3880" title="rss-dev mailing list post">turning the light bulb on in the first place</a>.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>More thoughts to ponder</title>
      <link href="https://qmacro.org/blog/posts/2002/09/21/more-thoughts-to-ponder/"/>
      <updated>2002-09-21T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2002/09/21/more-thoughts-to-ponder/</id>
      <content type="html">
        <![CDATA[
      <p>Here are two or three, er, thoughtbites, that I’ve come across over the past few days and that have stayed with me. I just thought I’d share them here as it’s the weekend and often a good time to think about things.</p>
<p><strong>Open thinking about deep-linking</strong></p>
<p>Tim Bray’s <a href="http://www.w3.org/2001/tag/ilist#deepLinking-25">strawman defence</a> of the principle that ‘deep linking’ on the web isn’t illegal. It’s a wonderfully calm and simple aspirin for the anger and frustration that builds up inside when one reads about silly legal action about ‘deep-linking’.</p>
<p><strong>RDF, define thyself</strong></p>
<p>In Sean B. Palmer’s document <a href="http://infomesh.net/2001/swintro/">The Semantic Web: An Introduction</a> (highly recommended!), RDF Schema is <a href="http://infomesh.net/2001/swintro/#simpleData">introduced</a>, using (amongst other things) this snippet of RDF (read “rdf:type” as “is a”):</p>
<pre><code>rdfs:Resource rdf:type rdfs:Class . rdfs:Class rdf:type rdfs:Class . rdf:Property rdf:type rdfs:Class . rdf:type rdf:type rdf:Property .
</code></pre>
<p>I don’t know about you, but I had to go and have a sit down to consider the implications after reading that.</p>
<p><strong>Using namespaces in code</strong></p>
<p>Last week on <a href="irc://irc.openprojects.net/rss-dev">#rss-dev</a>, Ken MacLeod pointed to a <a href="http://lists.w3.org/Archives/Public/xml-names-editor/2002May/0009.html" title="A Plea For Sanity">post</a> by Dan Connolly regarding namespaces. Ken <a href="http://www.peerfear.org/chump/rss-dev/2002/09/12/2002-09-12.xml">said</a>:</p>
<blockquote>
<p>A very key point (I think) drawn out in this article is that namespaces are used only to derive a (URI+localname) pair — namespaces should never be considered seperate from the element name they specify. … A namespace and localname make a single item of data, distinct from any other combination of namespace and localname.</p>
</blockquote>
<blockquote>
<p>Libraries and applications (tools) should not try to store a namespace as one “object” and try to link all of the names as “children” of those objects. So, if you’re working in a language that’s string-happy, like Tcl or Perl, the first thing you should do is take the namespace and element name and put them together and use them like that from then on, “{URI}LocalName” works well in Perl, for example.</p>
</blockquote>
<p>Sounds obvious when you grok it, but (for me at least) it was a refreshing way to look at the whole issue of namespaces and how they’re represented in XML and used in deserialised data structures.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>XML Scripting, data manipulation, and RDF</title>
      <link href="https://qmacro.org/blog/posts/2002/09/20/xml-scripting-data-manipulation-and-rdf/"/>
      <updated>2002-09-20T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2002/09/20/xml-scripting-data-manipulation-and-rdf/</id>
      <content type="html">
        <![CDATA[
      <p>I’ve just read <a href="http://weblog.infoworld.com/udell/2002/09/20.html">Jon’s latest post on XML Scripting</a>, which mentions Adam Bosworth’s thoughts about an XML scripting language that could natively support XML.</p>
<p>While the advent of XML scripting sounds fascinating, I’ve also been wondering about <a href="http://www.w3.org/RDF/" title="RDF (Resource Description Framework)">RDF</a> enabling us to “gracefully integrate with the world of objects” and enhance the “self-describing nature of XML”. Yes, it’s my current area of interest (read: I’m vacuuming as much information as I can about it right now), and this by itself is likely to taint my vision somewhat. But reading what was quoted from Adam immediately made me think of some of RDF’s features (or should I say ‘nature’, I guess I’m not trying to sell it):</p>
<ul>
<li>in its XML incarnation, RDF can describe the XML data it ornaments</li>
<li>it’s core nature (and through association the nature of the XML described by it) is object-orientated: things in RDF are either (instances of) classes, properties, or values of properties</li>
<li>the concept and use of namespaces is a key strength of RDF and one on which it relies. Shared semantics, and the classes and properties by which such semantics are conveyed, are surely important when attempting to “convert from one XML format to another” and “synthesize complex XML documents for [from?] multiple sources”</li>
</ul>
<p>Now it’s clear that XML is not RDF. There’s the bootstrapping issue with RDF applications of which we’re all aware. There’s no magic wand, but there are ways (such as transformations to wring out RDF essence from ‘flat’ XML) to get going. And in the context where <a href="http://internet.conveyor.com/RESTwiki/moin.cgi/FrontPage" title="The REST Wiki's front page">REST</a>, web services, business data, and the focus on <em>resources</em> (URIs) intersect, RDF – as a technology for describing, sharing and linking business data – seems too significant to ignore.</p>
<p>Going back to Adam’s quote that sparked this post, I am curious about the ‘native support’ of XML as a data type; my limited imagination cannot see how that might happen without some sort of serialization/deserialisation (will a term like ‘serdes’ be this decade’s equivalent of ‘modem’?). I am ready and willing to be enlightened :-) The great thing about RDF is that there is already a bounty of software (storage mechanisms, model and query tools, serializers and deserialisers) that can work with RDF in many existing programming languages.</p>
<p>Anyway, plenty to ponder. Life is good.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Moving from description to content:encoded in my RSS 1.0 feed</title>
      <link href="https://qmacro.org/blog/posts/2002/09/18/moving-from-description-to-content:encoded-in-my-rss-1.0-feed/"/>
      <updated>2002-09-18T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2002/09/18/moving-from-description-to-content:encoded-in-my-rss-1.0-feed/</id>
      <content type="html">
        <![CDATA[
      <p>After spotting a <a href="http://rdfig.xmlhack.com/2002/09/18/2002-09-18.html#1032346014.649371" title="blogged comment on ">comment</a> on <a href="irc://irc.openprojects.net/rdfig">#rdfig</a> regarding the contents of my RSS 1.0 feed’s <code>&lt;description&gt;</code>, I decided to take the plunge and use the <em>draft</em> part of RSS 1.0’s <a href="http://web.resource.org/rss/1.0/modules/content/" title="RSS 1.0 mod_content module">mod_content module</a>, namely the <strong>content:encoded</strong> property, to hold the entity-encoded weblog item content. (The description element itself in core 1.0 is optional, and although I’m omitting it for now, I’m still uneasy about it – ideally I’ll have a text-only abstract and be a good RSS citizen).</p>
<p>This is something that <a href="http://weblog.infoworld.com/udell/2002/09/09.html#a405" title="Jon Udell">Jon</a>, <a href="http://www.intertwingly.net/blog/2002/Sep/17#x828" title="Sam Ruby">Sam</a> and others have done already. While <a href="http://tima.mplode.com/" title="Timothy Appnel">Timothy Appnel</a> asks a <a href="http://www.intertwingly.net/blog/828.html" title="Tim's question on Sam's site">good question</a>, I’ll address it here at a later stage as <a href="http://www.raelity.org/apps/blosxom">Blosxom</a> entity-encodes my HTML for me (i.e. there’s not much point trying to XSL-Transform it back).</p>
<p>So I have modified the <a href="../../../%7Edj/qmacro.rss10">RSS 1.0 feed</a> for this site to use <strong>content:encoded</strong> with a <a href="/~dj/rss091-to-10.xsl">stylesheet slightly modified</a> from <a href="../../2002/Sep/12#tech/rss/rss10">last time</a>.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>From RSS 0.91 to 1.0</title>
      <link href="https://qmacro.org/blog/posts/2002/09/12/from-rss-0.91-to-1.0/"/>
      <updated>2002-09-12T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2002/09/12/from-rss-0.91-to-1.0/</id>
      <content type="html">
        <![CDATA[
      <p>Now that I understand what <a href="../../2002/Sep/08#tech/rdf/rssrdf">the RDF in RSS</a> is, I’m ready to move up to <a href="http://www.purl.org/rss/1.0/">RSS 1.0</a>. I’m using <a href="http://www.raelity.org/apps/blosxom">Blosxom</a> which generates RSS 0.91 by default. Flushed with a previous success using XSLT, I thought I’d use that technology again to generate 1.0 from 0.91.</p>
<p>Luckily, Eric van der Vlist has some <a href="http://4xt.org/news/000815-0001.xml">XSLT stylesheets over at 4XT</a> to do exactly that. This is the perfect opportunity for me to (a) learn more about XSLT by studying his stylesheets, and (b) to reflect upon the loosely connected nature of the web by employing the <a href="http://www.w3.org/2001/05/xslt">W3C’s XSLT Service</a> and pointing directly to Eric’s <a href="http://4xt.org/downloads/rss/rss091-to-10.xsl">0.91-to-1.0 stylesheet</a> and my <a href="../../xml">RSS 0.91 source</a>, in a URI recipe similar to the earlier <a href="../../2002/Aug/29#tech/sidebar">sidebar experiment</a>.</p>
<p><a href="http://www.w3.org/2000/06/webdata/xslt?xslfile=http%3A%2F%2F4xt.org%2Fdownloads%2Frss%2Frss091-to-10.xsl&amp;xmlfile=http%3A%2F%2Fwww.pipetree.com%2Fqmacro%2Fxml&amp;transform=Submit">This link</a> is the URI that will automagically return an RSS 1.0 of my weblog. Hurrah! However, so as not to abuse the transformation service, I’m cacheing the result and making my RSS 1.0 feed ‘static’, like this (split up a bit for easier reading):</p>
<pre class="language-shell"><code class="language-shell">/usr/bin/wget <span class="token parameter variable">-qO</span> /tmp/qmacro.rss10<br>	<span class="token string">'http://www.w3.org/2000/06/webdata/xslt<br>	?xslfile=http%3A%2F%2F4xt.org%2Fdownloads%2Frss%2Frss091-to-10.xsl<br>	&amp;xmlfile=http%3A%2F%2Fwww.pipetree.com%2Fqmacro%2Fxml&amp;transform=Submit'</span><br>	<span class="token operator">&amp;&amp;</span> <span class="token function">mv</span> /tmp/qmacro.rss10 ~dj/public_html/</code></pre>
<p>This is another example of the flexible nature of the shell (my favourite IDE) and programs designed and written for it. The wonderful <a href="http://www.gnu.org/software/wget/wget.html">wget</a> program returns true if the retrieval of a resource was successful, otherwise false. I can then use the <strong>&amp;&amp;</strong> to only overwrite the current static rendering if we’ve successfully got a fresh transform result.</p>
<p>I arrange for this incantation to be made once an hour, and can announce that my RSS 1.0 feed is available here: <a href="../../../%7Edj/qmacro.rss10">http://www.pipetree.com/~dj/qmacro.rss10</a></p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>The RDF in RSS</title>
      <link href="https://qmacro.org/blog/posts/2002/09/08/the-rdf-in-rss/"/>
      <updated>2002-09-08T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2002/09/08/the-rdf-in-rss/</id>
      <content type="html">
        <![CDATA[
      <p>Ironically, it’s only been the recent and ongoing hubbub about the direction of RSS that’s got me wondering what the real truth is about the RDF in RSS. In a still handwavy sort of way, I understand that RDF is important for the (semantic|data) web that is to form as a layer above the current writhing disconnected mass of URIs. But I realised I hadn’t really thought much about what the RDF bits of RSS (1.0) were, and much less what they were for. I get the feeling that for most mortals, including me, including RDF in their RSS feeds seemed like building a racing car to do the shopping, and never even taking it out on a track after the shopping was finished. Actually, perhaps some people didn’t even see the racing car as a whole. So I did a little reading and thinking.</p>
<p>The point of RDF is to be able to describe resources. Resource Description Framework. So far so good. But what are resources? They’re things that we can point to on the web – things with URIs (REST axioms, anyone?). With RDF, we can make assertions, state facts, about things. These assertions are always in the form of</p>
<blockquote>
<p>'this thing' has 'this property' with 'this value'.</p>
</blockquote>
<p>These assertions are often expressed as having the form ‘subject-predicate-object’ and are referred to as ‘triples’. RDF exists independently of XML, but what I (and lots of other people) recognise RDF as is its XML incarnation. Here’s a simple example:</p>
<pre class="language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">rdf:</span>Description</span> <span class="token attr-name"><span class="token namespace">rdf:</span>about</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>//qmacro.org/about<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><br>	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dc:</span>title</span><span class="token punctuation">></span></span>DJ's Weblog<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">dc:</span>title</span><span class="token punctuation">></span></span><br><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">rdf:</span>Description</span><span class="token punctuation">></span></span></code></pre>
<p>This makes the assertion that</p>
<blockquote>
<p>the resource at <a href="../../../qmacro" title="DJ's Weblog">//qmacro.org/about</a> has a title (as defined in the <a href="http://purl.org/dc/elements/1.0/" title="Dublin Core elements">Dublin Core</a>) with the value “DJ’s Weblog“.</p>
</blockquote>
<p>What’s obvious is that <em>subjects</em> are URIs. It’s also easy to realise that <em>objects</em> can be URIs too – instead of having a Literal (“DJ’s Weblog”) as in the example above, you can have another resource (a URI), for example:</p>
<pre class="language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">foaf:</span>Person</span> <span class="token attr-name"><span class="token namespace">rdf:</span>ID</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>qmacro<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br>	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">foaf:</span>depiction</span> <span class="token attr-name"><span class="token namespace">rdf:</span>resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://qmacro.org/~dj/dj.png<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><br><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">foaf:</span>Person</span><span class="token punctuation">></span></span></code></pre>
<p>Here, the object, the value of the foaf:depiction property, is a URI (<a href="/~dj/dj.png" title="DJ's ugly mug">http://qmacro.org/~dj/dj.png</a>) pointed to directly with the rdf:resource attribute.</p>
<p>But what’s really mindblowingly meta is that the predicate parts of assertion triples, the <em>properties</em>, are resources, addressable by URIs, too. Yikes! this means that RDF can be used to describe … RDF. In case you’re wondering, the properties (<em>dc:title</em>, <em>foaf:depiction</em>) don’t look like URIs, but they are URIs in disguise – the URI for each property is made up from the namespace qualifying the XML element name, and the element name fragment on the end of that. So for example, the <em>dc</em> namespace http://purl.org/dc/elements/1.1/, plus the element name <em>title</em>, gives:</p>
<blockquote>
<p><a href="http://purl.org/dc/elements/1.1/title">http://purl.org/dc/elements/1.1/title</a></p>
</blockquote>
<p>Anyway, the point of RDF here is to be able to make connections between things on the web. To define, or describe, relations between things; to add richness to the data out there – to declare data about the data. If we, or our machines, can understand things about the data we’re throwing around, the world will be a better place for it. And to all those meta-data agnostics out there, ask yourself this – where would the database world be without data dictionaries?</p>
<p>So, what about these triples that exist in RSS 1.0? They’re just to add a layer of richness, a seam to be mined by RDF-aware tools. Let’s have a look at a simple RSS 1.0 file. I’ve highlighted the RDF bits (slightly cut to fit):</p>
<pre class="language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">rdf:</span>RDF</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>rdf</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/1999/02/22-rdf-syntax-ns#<span class="token punctuation">"</span></span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://purl.org/rss/1.0/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br>	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>channel</span> <span class="token attr-name"><span class="token namespace">rdf:</span>about</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>//qmacro.org/about/xml<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br>		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>DJ's Weblog<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><br>		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span><span class="token punctuation">></span></span>//qmacro.org/about<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>link</span><span class="token punctuation">></span></span><br>		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>Reserving the right to be wrong<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span><br>		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>items</span><span class="token punctuation">></span></span><br>			<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">rdf:</span>Seq</span><span class="token punctuation">></span></span><br>				<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">rdf:</span>li</span> <span class="token attr-name"><span class="token namespace">rdf:</span>resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www...#tech/moz-tab-bookmark<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><br>				<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">rdf:</span>li</span> <span class="token attr-name"><span class="token namespace">rdf:</span>resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www...#tech/google-idempotent<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><br>			<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">rdf:</span>Seq</span><span class="token punctuation">></span></span><br>		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>items</span><span class="token punctuation">></span></span><br>	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>channel</span><span class="token punctuation">></span></span><br><br>		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span> <span class="token attr-name"><span class="token namespace">rdf:</span>about</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www...#tech/moz-tab-bookmark<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br>		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Mozilla "Bookmark This Group of Tabs"<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><br>		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span><span class="token punctuation">></span></span>http://www...#tech/moz-tab-bookmark<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>link</span><span class="token punctuation">></span></span><br>		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span> I was just reading some background stuff ...<br>		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span><br>		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">></span></span><br>		...<br><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">rdf:</span>RDF</span><span class="token punctuation">></span></span></code></pre>
<p>Here’s what we have, RDF-wise:</p>
<ul>
<li>We have the <strong>rdf</strong> namespace (http://www.w3.org/1999/02/22-rdf-syntax-ns#), which qualifies the rdf elements in the file. The root element is <strong>RDF</strong>, which is standard for an RDF document.</li>
<li>An RDF document is made up of a list of descriptions of resources. The resources here are identified, via their URIs of course, via the <strong>rdf:about</strong> attributes on the <channel/> and <item/> elements. (Notice that the channel and item elements are on the same level, XML-wise.)</li>
<li>Then we have the <strong><items/></strong> element inside the <channel/> element, containing an RDF structure called a sequence (<strong>rdf:Seq</strong>), which is basically an ordered container for things.</li>
</ul>
<p>And what do these RDF things do? First, each resource – the RSS channel, or the Weblog it represents, and the actual items – are identified as <em>subjects</em> of assertions, using the <strong>rdf:about</strong> attributes. You could say that they’re the “subjects of <em>Descriptions</em> of them”. Each has a unique URI. Then, an assertion of the following nature is made about the channel:</p>
<blockquote>
<p>The channel <em>//qmacro.org/about/xml</em> contains an <em>ordered sequence</em> of things, namely <em>http://www…#tech/moz-tab-bookmark and http://www…#tech/google-idempotent</em>.</p>
</blockquote>
<p>If the RSS file were to have an image, it would occur as in other RSS versions (i.e. as an element peer of the <channel/> element), and the <image/> element itself would have an <strong>rdf:about</strong> attribute pointing to that image resource’s URI. Then, <em>inside the channel element</em>, there’d be a simple:</p>
<pre class="language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>image</span> <span class="token attr-name"><span class="token namespace">rdf:</span>resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre>
<p>element pointing to the same URI as the <image/> element’s <strong>rdf:about</strong> attribute pointed to. This would say:</p>
<blockquote>
<p>The channel <em>//qmacro.org/about/xml</em> has an *image *, namely <em>(the image’s URI)</em>.</p>
</blockquote>
<p>And so on.</p>
<p>In other words, the RDF in RSS is there to <strong>identify</strong> resources (the nodes) and to <strong>describe</strong> properties of or relationships between them (the arcs). The RDF content of RSS is not large. I think some people might intermingle RDF and namespace content and think “ooh, there’s a lot of RDF in RSS”. Sure, namespaces are fundamental to RDF, but exist (both here in RSS and elsewhere) independent of it (although if you <em>use</em> namespaces such as the Dublin Core in RDF-enhanced RSS, then you’re effectively, and at no extra cost, adding to the data web with the triples that come into being because of how RDF, namespaces, and XML wonderfully work together).</p>
<p>So, there you have it. Just a bit of a brain dump of what I’ve been learning over the past couple of days. Now that I understand what’s going on, I for one would be very disappointed to see RDF go away from RSS. Although there are signs that this may not be the case after all. But that’s another story.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Moving between Mozilla tabs with the keyboard</title>
      <link href="https://qmacro.org/blog/posts/2002/09/04/moving-between-mozilla-tabs-with-the-keyboard/"/>
      <updated>2002-09-04T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2002/09/04/moving-between-mozilla-tabs-with-the-keyboard/</id>
      <content type="html">
        <![CDATA[
      <p>Thanks to Leandro Mariano Lopez, Andy McMullan, damaged justice (ian), and Brian Donovan, who all emailed me to tell me that it’s Ctrl-PgUp/PgDown, I’m one step closer to mouseless nirvana…</p>
<p>Now, if I can get Mozilla to run on my VT320 …</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Mozilla &quot;Bookmark This Group of Tabs&quot;</title>
      <link href="https://qmacro.org/blog/posts/2002/09/03/mozilla-&quot;bookmark-this-group-of-tabs&quot;/"/>
      <updated>2002-09-03T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2002/09/03/mozilla-&quot;bookmark-this-group-of-tabs&quot;/</id>
      <content type="html">
        <![CDATA[
      <p>I was just reading some background stuff before I posted my comment just now over on the <a href="http://www.intertwingly.net/blog/?entry=784" title="Sam Ruby's post, and various comments">interesting discussion on REST and idempotency</a> over on Sam’s site (the comment is also partially in response to <a href="http://radio.weblogs.com/0101679/2002/09/02.html#a787">Sam’s post</a> yesterday).</p>
<p>I had about 5 or 6 tabbed pages open with content relating to the discussion, and lo and behold, my new browser of choice, <a href="http://www.mozilla.org/" title="Mozilla site">Mozilla</a> (not least because I can now have a consistent experience on Linux and MS-Windows) allowed me to “Bookmark This Group of Tabs” all at once, and give the collection a nice little title.</p>
<p>Neat. It’s little things like this that make for a pleasant experience. Now if only I could move from tab to tab with the keyboard instead of the mouse …</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>REST, Google, and idempotency</title>
      <link href="https://qmacro.org/blog/posts/2002/09/02/rest-google-and-idempotency/"/>
      <updated>2002-09-02T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2002/09/02/rest-google-and-idempotency/</id>
      <content type="html">
        <![CDATA[
      <p>Sam has <a href="http://radio.weblogs.com/0101679/2002/09/02.html#a784">asked</a> Mark Baker a question, or rather, presented an apparent conundrum. It was a pleasant subject to ponder as I was rolling out the pastry for some apple and blackberry pies, and on returning to the keyboard, I’ve decided to put some of my own thoughts down on Sam’s points, even though I’m still learning about all this stuff.</p>
<p><em>Point #1: ‘GETs must not have side effects’ is perhaps REST’s most cherished axiom</em></p>
<p>If I had to pick one as being the most cherished, I’d go for the one that says that anything that’s important is a first class URI citizen (i.e. addressable by a URI). The ‘no side effects’ axiom appears to be ‘just’ a natural follow on from the presentation of how the HTTP verbs are supposed to be understood and used.</p>
<p><em>Point #2: The 1001st call to Google is different, and [so] the [GET] query is not idempotent</em></p>
<p>In the SOAP context, a SOAP Fault will be returned by Google if you exceed your limit of 1000 calls in a day. Returning a SOAP Fault within the context of an HTTP 200 OK status is one thing. But percolating this response up to a REST (i.e. HTTP) context would imply returning, say, an HTTP 403 FORBIDDEN, with a body explaining why. This is a valid response to a GET.Having different results, different status codes, returned on a GET query doesn’t necessarily imply any side effects. Indeed, in our beloved canonical stock-quote example, we don’t even need to regard the HTTP status codes to see that results can be different on the same GET query (the stock market would be a very dull place if they weren’t). And what about Google itself? The same search query one day will not necessarily return the same results the next day. Different query results, no implied side-effects.</p>
<p><em>Point #3: So, what do you do?</em></p>
<p>Nothing different. Through REST-tinted spectacles, the 1001th GET receives a 403, and you act accordingly. No lives have been lost, no state has been changed. Potentatus idem manet. As the saying goes. Well. It does now.</p>
<p>Of course, these are just my thoughts. Apologies to Sam if I’ve misunderstood his points, and to Mark if I’ve potentially muddied the waters.</p>
<p>P.S. maybe I should have used ‘potestas’…</p>
<p>P.P.S. I’m a grey, not a black-and-white, person</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Cacheing on XSLT service</title>
      <link href="https://qmacro.org/blog/posts/2002/08/31/cacheing-on-xslt-service/"/>
      <updated>2002-08-31T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2002/08/31/cacheing-on-xslt-service/</id>
      <content type="html">
        <![CDATA[
      <p>To speed things up on the experimental <a href="/blog/posts/2002/Aug/29#tech/sidebar" title="yesterday's musings on RSS, Mozilla, and Sidebars">RSS-in-Mozilla-sidebar thingy</a>, I’ve <a href="/~dj/XSLTc.pm">added in some cacheing</a> (using a little MySQL db) to the <a href="../../../service/xslt">simple XSL-Transform service</a> that’s used to transform RSS to HTML on the fly, for inclusion into the sidebar. It makes it a lot faster, obviously, and takes a bit of strain off our poor old Celeron. I’ve exposed the gubbins a bit, in that it’s possible to specify a ‘cachelife’ parameter on the call. So if you want to customise the URL passed in the sidebar.addPanel() call, you can send this now:</p>
<pre><code>http://www.pipetree.com/service/xslt
?
xmlfile=*http://url/of/rss.feed*
&amp;
xslfile=http://www.pipetree.com/~dj/rss.xsl
&amp;
cachelife=30
</code></pre>
<p>The ‘cachelife’ parameter says “give me the cached version as long as it’s no more than N (30, here) minutes old … otherwise pull the RSS and transform it for me afresh, baby”. (It’s all explained briefly on a little homepage, which you <a href="../../../service/xslt">get</a> if you don’t specify an xslfile or xmlfile parameter.)</p>
<p>The <a href="/~dj/sidebar.html">existing sidebar button</a> will continue to work fine, in that a default of 60 (minutes) is assumed if no ‘cachelife’ parameter is specified.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Sidebars, Mozilla, RSS: old and new</title>
      <link href="https://qmacro.org/blog/posts/2002/08/29/sidebars-mozilla-rss:-old-and-new/"/>
      <updated>2002-08-29T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2002/08/29/sidebars-mozilla-rss:-old-and-new/</id>
      <content type="html">
        <![CDATA[
      <p>Back in the spring of 2000, I wrote <a href="/~dj/cgi-bin/mysidebar.pl" title="re-animated non-working bit of reminiscence">MySidebar</a>, a concoction of Mozilla sidebars, <a href="http://www.xulplanet.com/">XUL</a> and RSS. It allowed you to specify an RSS URL and would generate XUL from it and install it in Mozilla’s sidebar. (XUL involves RDF. The interconnectedness of all things, eh?)</p>
<p>Fozbaca recently <a href="http://fozbaca.org/archives/2002_08_17.shtml#002612">pointed</a> to something <a href="http://www.theonering.net/staff/corvar/software/mozilla.html">similar</a>, which reminded me about the whole thing. I’ve just downloaded Mozilla 1.1, and decided to revisit the area. Things have changed – you can now plonk straight HTML into the sidebar, rather than have to use XUL. Mmmm.</p>
<p>So, I’ve had a bit of fun glueing ideas I read about from <a href="http://diveintomark.org/">Mark</a> and <a href="http://udell.roninhouse.com/">Jon</a>. What I’ve ended up with is a Mozilla toolbar button that you can click while viewing a weblog that <a href="/blog/posts/2002/May/31#htmllink">points to its own RSS feed</a>. The button’s link is to Javascript, adapted from Mark’s <a href="http://diveintomark.org/archives/2002/05/31.html#more_on_rss_autodiscovery">auto-subscribe bookmarklet</a>. On discovering an RSS feed (and the title of the blog page), it then constructs an XSLT pipeline URL that Jon <a href="http://weblog.infoworld.com/udell/2002/07/17.html#a341">demonstrated last month</a>. The URL looks like this (split up for easy reading):</p>
<pre><code>http://www.pipetree.com/service/xslt
?
xmlfile=*http://url/of/rss.feed*
&amp;
xslfile=http://www.pipetree.com/~dj/rss.xsl
</code></pre>
<p>The /service/xslt on pipetree is something very similar to the <a href="http://www.w3.org/2001/05/xslt">W3C XSLT Service</a> that Jon used. I <a href="/~dj/XSLT.pm">wrote my own</a> for various reasons. It’s a lot simpler, and probably a lot dafter. The XSLT stylesheet specified is a <a href="/~dj/rss.xsl">very simple one</a> which points to some <a href="/~dj/rss.css">even simpler CSS</a> to make the RSS-rendered-into-HTML … small enough to fit in Mozilla’s sidebar, into which it goes with the call to sidebar.addPanel() at the end of the <a href="/~dj/addtosidebar.js">Javascript</a> where all this pipelining started out.</p>
<p>It’s not that efficient, probably not that useful in the long run, but is certainly fun and allows me to turn my Mozilla into a sort of RSS newsreader. If you want to have a go, you can drag the Javascript link from <a href="/~dj/sidebar.html">here</a>. Feel free to improve things!</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>You know you&#39;re getting old ...</title>
      <link href="https://qmacro.org/blog/posts/2002/08/16/you-know-you&#39;re-getting-old-.../"/>
      <updated>2002-08-16T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2002/08/16/you-know-you&#39;re-getting-old-.../</id>
      <content type="html">
        <![CDATA[
      <p>…when it takes you over two weeks to recover from <a href="http://conferences.oreillynet.com/os2002/" title="Open Source Convention home page">OSCON</a>. What with the travel (ok, including a connectionless week in Manchester visiting relatives), the email backlog, and the catch-up at work, not to mention the overwhelming saturation of information, ideas, inspiration, and other things beginning with ‘i’ that came from the great time that was OSCON, I really need a post-conference holiday. I can’t begin to imagine what the organisers feel like.</p>
<p>It was as much the opportunities to meet and chat with other like-minded individuals, exchange thoughts and ideas, and generally make new friends, as it was the talks and tutorials that I (and probably many other attendees) valued there.</p>
<p>Needless to say, I also grabbed the chance to take my annual fill of U.S. food – chilli dogs, cheese fries, burritos, and cinnamon and raisin bagels. Yum.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>The OS tables are turning...</title>
      <link href="https://qmacro.org/blog/posts/2002/08/16/the-os-tables-are-turning.../"/>
      <updated>2002-08-16T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2002/08/16/the-os-tables-are-turning.../</id>
      <content type="html">
        <![CDATA[
      <p>I recently bought a <a href="http://www.focilux.be/Merken/M_Hama.htm" title="picture of the Hama 46594">Hama multi-slot card reader</a>, primarily for reading the Smart Media cards used in our camera. It came with software for Windows. I installed it on our Windows 98 machine, and plugged in the device, following the instructions to the letter. Ka-boom! Blue screen. After about an hour of trying and retrying to make it work (even installing upgraded drivers for the VIA chipset as recommended in the troubleshooting section), I was still no further on. Plugging in the device crashed Windows. Period.</p>
<p>About to package the thing up to take it back, I passed the house server running Linux. What the heck, I thought, and plugged it in the back. “Ooh, hello”, said the kernel. I mounted the emulated SCSI device, and grabbed the pictures of the Smart Media card. Easy as that.</p>
<p>The tables have turned. In times past, it used to be that peripherals Just Worked with Windows (mostly because the vendors targeted the drivers to that platform). Not any more.</p>
<p>I’m a happy Linux user.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Just finished re-reading: The Player Of Games (Iain M Banks)</title>
      <link href="https://qmacro.org/blog/posts/2002/08/16/just-finished-re-reading:-the-player-of-games-(iain-m-banks)/"/>
      <updated>2002-08-16T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2002/08/16/just-finished-re-reading:-the-player-of-games-(iain-m-banks)/</id>
      <content type="html">
        <![CDATA[
      <p>I read this a few years ago, and don’t think I appreciated some of the finer points (how many books <em>don’t</em> deserve a re-reading?).</p>
<p>You can <a href="http://www.amazon.co.uk/exec/obidos/ASIN/0312026307/" title="'The Player Of Games' at Amazon">find out about the book at Amazon</a> so I won’t bother with the plot. It’s a wonderful study in far future tech – the ships, minds, and drones – which the characters, the author, and eventually you, the reader, take for granted (the tech doesn’t obscure the plot or the interplay of characters, but it’s wondrous all the same), interplay between human(oid) and artificial intelligence, and the tangents of differing civilizations.</p>
<p>But what struck me most this time around was the way that I, the reader, naturally associated myself with the Culture (the civilization to which the central characters belong) – mostly, perhaps, because the Culture was the basis from which the plot stems, and regarded the Empire (the civilization that begat the game Azad) as the “aliens”. But the more one progressed through this novel it was clear, almost politically clear, that in fact the unruly, violent, and relatively primitive Empire civilization … was ours.</p>
<p>A great read.</p>
<p>I wonder how I could reuse this blog item as a review item in the book’s review section on Amazon? Hmm, how about an RSS 1.0 module and Amazon binding in support for that?</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>The mist is clearing ...</title>
      <link href="https://qmacro.org/blog/posts/2002/07/15/the-mist-is-clearing-.../"/>
      <updated>2002-07-15T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2002/07/15/the-mist-is-clearing-.../</id>
      <content type="html">
        <![CDATA[
      <p>… but I’m not sure yet whether what’s being revealed is a bright sun, a dense forest, or more mist. In any case, it’s an interesting journey, and on the whole, enlightening.</p>
<p>I’m trying to understand more about <a href="http://internet.conveyor.com/RESTwiki/moin.cgi/FrontPage" title="The REST Wiki's front page">REST</a>. To that end, I’ve just written a little <em>RESTful</em> interface to <a href="http://www.fsck.com/projects/rt/" title="RT: Request Tracker">RT</a> (Request Tracker), in the form of an Apache mod_perl handler, so that I can create new and correspond on existing tickets via a simple interface that I can call from my other apps.</p>
<p>Creating a ticket:</p>
<pre><code>POST /ticket
(queue, subject, email, and initial ticket query supplied in body)

...

201 Created
Location: /ticket/42
</code></pre>
<p>Corresponding on a ticket:</p>
<pre><code>PUT /ticket/42
(correspondence supplied in body, will be appended to the ticket history)

...

200 OK
</code></pre>
<p>(Hmm, perhaps that should that be PUT to <code>/ticket/42/history</code>, returning a 201 with a unique URI for that particular piece of correspondence, e.g. <code>/ticket/42/history/20020715115442</code>).</p>
<p>Getting info on a ticket:</p>
<pre><code>GET /ticket/42
or
GET /ticket/42/basics
or
GET /ticket/42/history

...

200 OK
(ticket info)
</code></pre>
<p>I’m glad I had my copy of the excellent <a href="http://www.oreilly.com/catalog/wrapmod/" title="Book's home on O'Reilly">Writing Apache Modules with Perl and C</a> close to hand, to remind me of things like <code>$r-&gt;custom_response()</code> and <code>Apache::Constants-&gt;export(qw(HTTP_CREATED))</code>.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>From REST to URIs, the Semantic Web, RDF, and FOAF</title>
      <link href="https://qmacro.org/blog/posts/2002/07/15/from-rest-to-uris-the-semantic-web-rdf-and-foaf/"/>
      <updated>2002-07-15T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2002/07/15/from-rest-to-uris-the-semantic-web-rdf-and-foaf/</id>
      <content type="html">
        <![CDATA[
      <p>Good grief. Anyway, this exploration is certainly opening more doors than it’s closing. Actually, that’s not quite right. It’s <em>showing me</em> new doors that I choose to go through. This one had <a href="http://xmlns.com/foaf/0.1/" title="The 'Friend Of A Friend' Vocabulary">FOAF</a> written on it in shiny brass letters.</p>
<p>FOAF is a project under the <a href="http://rdfweb.org/">RDFWeb</a> umbrella, and is an effort to build a vocabulary for expressing relationships between and facts about things on the interweb. As with <a href="http://internet.conveyor.com/RESTwiki/moin.cgi/FrontPage" title="The REST Wiki's front page">REST</a>, a key axiom (hrm, is that verging on the tautalogical?) is that URIs are very important, in uniquely identifying resources. There’s a good introductory <a href="http://www-106.ibm.com/developerworks/xml/library/x-foaf.html" title="FOAF article at IBM developerworks">article by Edd Dumbill</a> on FOAF.</p>
<p>I’ve had a first hash at a FOAF file to describe me, and it’s <a href="/~dj/foaf.rdf" title="My FOAF data">here</a>. In the growing fury of social network construction and subsequent mining, this could be interesting. Hey, and it doesn’t have to stop there… Under the influence of a small tumbler of Glenmorangie, I can half-imagine a situation where we have compound business documents and partners in an ERP system like <a href="http://www.sap.com/" title="SAP's home page">SAP</a>‘s R/3 exposed and linked (through the philosophical transparency of REST) to one another via their URIs, with those link relationships described in a FOAFy (RDFlike?) way.</p>
<p>Hrmmmm…</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>The 80/20 of HTTP</title>
      <link href="https://qmacro.org/blog/posts/2002/07/08/the-8020-of-http/"/>
      <updated>2002-07-08T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2002/07/08/the-8020-of-http/</id>
      <content type="html">
        <![CDATA[
      <p>I don’t know about you, but when I think of HTTP in action, I think of GET, POST, 200, 404, and 500. It seems that most of the HTTP work today (the 80%) is done in the context of these verbs and status codes (the 20%).</p>
<p>I just read a couple of <a href="http://www.prescod.net/" title="Paul Prescod's home page">Paul Prescod</a>‘s papers: <a href="http://www.prescod.net/rest/state_transition.html" title="a paper on resources and state transition">A Web-Centric Approach to State Transition</a> and <a href="http://www.prescod.net/rest/restmail" title="musings on email as a REST application">Reinventing Email using REST</a>. They’re both interesting for many reasons, not least because they show some of the other 80% of HTTP in action.</p>
<p>Of course, some people might point out that the 80/20 ‘imbalance’ will remain so while protocols (mechanisms, encodings?) like SOAP encapsulate much of what HTTP has to offer. Hmm, it’s very difficult to write about REST and SOAP in non-loaded terms :-)</p>
<p>Anyway, if nothing else, in pondering the RESTian philosophy, I’ve been re-acquainted with the other 80% of HTTP, and those things like URIs that are closely linked.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Reflecting weblogs.com &#39;ping&#39;s with SOAP, Jabber, and Pubsub</title>
      <link href="https://qmacro.org/blog/posts/2002/07/03/reflecting-weblogs.com-&#39;ping&#39;s-with-soap-jabber-and-pubsub/"/>
      <updated>2002-07-03T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2002/07/03/reflecting-weblogs.com-&#39;ping&#39;s-with-soap-jabber-and-pubsub/</id>
      <content type="html">
        <![CDATA[
      <p>Last month, <a href="http://www.pocketsoap.com/weblog/index.html" title="Simon Fell's weblog">Simon</a> answered a <a href="http://www.pocketsoap.com/weblog/2002/06/13.html#a604">cry for help</a> from someone in the weblog community by creating <a href="http://www.pocketsoap.com/weblog/2002/06/15.html#a608">blogToaster</a>, a neat little IM-based app that alerts people about updates (coordinated through <a href="http://www.weblogs.com/">www.weblogs.com</a>) to weblogs that they’re interested in.</p>
<p>But the most intriguing thing was his <a href="http://www.pocketsoap.com/weblog/stories/2002/02/12/subscriberInterfaceForWeblogscom.html">Subscriber Interface for weblogs.com</a>, the mechanism on which the blogToaster is based. It’s a SOAP-based frontend to the weblogs.com ‘Recently Changed Weblogs’ information. You tell the interface what weblog URLs you’re interested in and it gives you SOAPy pings at the URL you specified whenever they’re updated, taking care of the nasty polling business for you (and for everyone else, which is the whole point).</p>
<p>Inspired by this generous infrastructural act, I put together an experimental bit of code which reflects this mechanism out into Jabber plasma. It’s a pubsub concentrator that sits in front of Simon’s Subscriber Interface and allows any app that can send and receive simple Jabber packets to request and receive weblogs.com-based update pings via this subscriber interface, without all the tedious mucking about in HTTP and SOAP protocols [1] (with apologies to Douglas Adams).</p>
<p>The idea is that in the same way that the <a href="../../2002/May/15#panopticon">Jabber extensions for Danny O’Brien’s Panopticon</a> gave the Panopticon server some breathing space by effectively diffusing the data to Jabber entities via a conference room, so this new mechanism abstracts the Subscriber Interface out and allows many subscribers to share one subscription connection. Publish/Subscribe. One publisher, many subscribers. The publisher, in this case the Subscriber Interface, only has to send out one SOAPy ping per updated weblog URL to reach potentially many notification recipients (subscribers).</p>
<p>So rather than reproduce a blogToaster-like mechanism, I thought I’d have a go at putting together a mini-infrastructure on top of which lots of different blogToaster-like mechanisms could be built.</p>
<p>The mechanism is running at JID ‘<strong>weblogs.gnu.mine.nu</strong>‘, and the packets are based on the <a href="http://www.jabber.org/jeps/jep-0024.html">Jabber PubSub JEP</a>. It’s still alpha, and likely to fall over if you look at it the wrong way.</p>
<p>Here’s an example of how it works. You send a ‘subscribe’ packet, saying you want to be notified when <a href="">DJ’s Weblog</a> is updated:</p>
<p>SEND:</p>
<pre><code>&lt;iq type='set' to='weblogs.gnu.mine.nu'&gt;
	&lt;query xmlns='pipetree:iq:pubsub'&gt;
		&lt;subscribe to='//qmacro.org/about'/&gt;
	&lt;/query&gt;
&lt;/iq&gt;
</code></pre>
<p>Then, whenever the weblog specified is updated, you get a packet pushed to you like this:</p>
<p>RECV:</p>
<pre><code>&lt;iq type='set' from='weblogs.gnu.mine.nu' to='user@host/resource'&gt;
	&lt;query xmlns='pipetree:iq:pubsub'&gt;
		&lt;publish from='//qmacro.org/about'&gt;
			&lt;url&gt;//qmacro.org/about&lt;/url&gt;
			&lt;name&gt;DJ's Weblog&lt;/name&gt;
			&lt;timestamp&gt;2002-07-03T21:35:51Z&lt;/timestamp&gt;
		&lt;/publish&gt;
	&lt;/query&gt;
&lt;/iq&gt;
</code></pre>
<p>The information in the <em>name</em>, <em>url</em> and <em>timestamp</em> tags (in the publish IQ) is taken directly from the <em>weblog</em> tag in the SOAP-enveloped callback message described at the bottom of the <a href="http://www.pocketsoap.com/weblog/stories/2002/02/12/subscriberInterfaceForWeblogscom.html">Subscriber Interface description</a> page.</p>
<p>For now, as a bonus (or an immoral twisting of the Jabber pubsub packet philosophy, depending on how you look at it ;-) I’ve set up the mechanism to send you not only a publish IQ as shown above, but also a simple <em>message</em> packet with the same information, so that you can use your regular Jabber client to ‘process’ (read: see) the pings. So if you’re feeling brave, break out your Jabber debug app and send a few pubsub packets to <strong>weblogs.gnu.mine.nu</strong>. If you’re not feeling so brave, you can wait until tomorrow – I’ve got a a few helper example apps that will hopefully make things clearer. In either case, remember this: if it works, it works because of the coolness of what <a href="http://www.scripting.com/">Dave W</a> <a href="http://www.weblogs.com/">built</a>, the coolness of what <a href="http://www.pocketsoap.com/weblog/index.html" title="Simon Fell's weblog">Simon</a> <a href="http://www.pocketsoap.com/weblog/stories/2002/02/12/subscriberInterfaceForWeblogscom.html">built</a>, and the coolness that is ‘net based collaboration and open standards. Time for bed now.</p>
<p>[1] Ooh, talking of HTTP and SOAP protocols, I just read an interesting <a href="http://mail.python.org/pipermail/xml-sig/2002-February/007183.html">XML-SIG post</a> by <a href="http://www.prescod.net/">Paul Prescod</a> which made some valid (but also nicely philosophical, IMHO) points towards the end of the mail regarding whether SOAP is actually a protocol (as opposed to, say, an encoding), and how much, despite its ‘independence’ of transport, it depends upon its binding to HTTP, as much as any protocol depends on its binding to a lower-level transport. But I digress..</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Programming Jabber review</title>
      <link href="https://qmacro.org/blog/posts/2002/06/28/programming-jabber-review/"/>
      <updated>2002-06-28T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2002/06/28/programming-jabber-review/</id>
      <content type="html">
        <![CDATA[
      <p>Cool, <a href="http://www.amazon.com/exec/obidos/ASIN/0596002025/" title="Programming Jabber at Amazon">my book</a> gets a nice review over at <a href="http://www-106.ibm.com/developerworks/xml/library/x-jabberbk/index.html?loc=dwmain" title="Comparative review of Jabber books">IBM DeveloperWorks</a>.</p>
<p>It’s been about a year now since I originally started researching and writing it; I’d taken a few months off work to devote time to it. It sure was a fun, but intense, time. I can appreciate much more now just how much work goes into writing a technical title, and I re-read books on my bookshelves with awe anew.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Accessibility and Blosxom</title>
      <link href="https://qmacro.org/blog/posts/2002/06/21/accessibility-and-blosxom/"/>
      <updated>2002-06-21T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2002/06/21/accessibility-and-blosxom/</id>
      <content type="html">
        <![CDATA[
      <p>Catching up with things today, I read what <a href="http://diveintomark.org/">Mark</a>‘s been doing on the accessibility front. A great job it is too. I thought I might contribute a tiny bit of the jigsaw for the <a href="http://www.oreillynet.com/%7Erael/lang/perl/blosxom">Blosxom</a> users, specifically regarding the <a href="http://diveintomark.org/archives/2002/06/19.html#day_8_constructing_meaningful_page_titles">meaningful page titles</a> and <a href="http://diveintomark.org/archives/2002/06/20.html#day_9_providing_additional_navigation_aids">additional navigation aids</a>.</p>
<p>I’ve updated my weblog in these two areas; each specific page – be it a year, or a year/month, or a year/month/day specification, now includes the appropriate date in the page title. I’ve added a <code>&lt;link rel=”home” … &gt;</code> link too, which I’d thought fleetingly about when I was <a href="../../2002/Jun/3#newlinks">looking at other attributes of the <link/> tag</a> but had forgotten until being reminded by Mark.</p>
<p>To achieve this sort of thing, you can just add the extra bits in the <strong>head.html</strong> template. I’ve taken Blosxom’s default/builtin head template (which is inside Blosxom itself) and amended it appropriately – you can have see what it looks like <a href="/~dj/head.txt">here</a> – to use it, just place the file in same directory that you keep your .txt files.</p>
<p>In actual fact, I use Blosxom more of an engine that generates the blog postings for me, which I then include, via SSI, in a template that holds together lots of elements, such as the calendar, and the various lists. So I don’t use the <strong>head.html</strong> template file. Instead, I wrote a tiny script, <a href="/~dj/blostitle">blostitle</a>, which outputs the appropriate date string for appending to the title. I include the <code>&lt;link rel=”home” … &gt;</code> link manually in the SSI. Altogether, the <code>&lt;head/&gt;</code> part looks like this:</p>
<pre><code> ...
&lt;title&gt; DJ's Weblog - &lt;!--#include virtual=&quot;/~dj/cgi-bin/blostitle&quot; --&gt; &lt;/title&gt;
&lt;!--#include file=&quot;style.incl&quot; --&gt;
&lt;link rel=&quot;home&quot; title=&quot;Home&quot; href=&quot;/qmacro&quot; /&gt;
...
</code></pre>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>A change and a rest</title>
      <link href="https://qmacro.org/blog/posts/2002/06/18/a-change-and-a-rest/"/>
      <updated>2002-06-18T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2002/06/18/a-change-and-a-rest/</id>
      <content type="html">
        <![CDATA[
      <p>Just returned from a very relaxing holiday; we stayed at the <a href="http://www.sauntonsands.co.uk/">Saunton Sands Hotel</a> in Devon. Great place, wonderful views, and good service. We spent most of the time flying kites on the huge beach – fantastic. Looks like lots of things have been going on, yahoo!</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>&#39;Blosmail&#39; - add and maintain your blog entries via email</title>
      <link href="https://qmacro.org/blog/posts/2002/06/06/&#39;blosmail&#39;-add-and-maintain-your-blog-entries-via-email/"/>
      <updated>2002-06-06T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2002/06/06/&#39;blosmail&#39;-add-and-maintain-your-blog-entries-via-email/</id>
      <content type="html">
        <![CDATA[
      <p>I’ve just put together a little script, <a href="/~dj/blosmail">blosmail</a>, that lets you add (and modify) your <a href="http://www.oreillynet.com/%7Erael/lang/perl/blosxom">Blosxom</a>-powered weblog entries via email. The idea is that you can send emails to yourself with a specifically recognisable Subject: line, and via some procmail recipe magic, and a check on whether the sending email address is listed as valid, lo and behold, new blosxom blog entries appear in your weblog.</p>
<p><a href="/testwiki/Blosmail">Here</a> are the details of how it works and how to set it up.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Standing on the shoulders ... Exploring Weblog Neighbourhoods with Blogdex</title>
      <link href="https://qmacro.org/blog/posts/2002/06/04/standing-on-the-shoulders-...-exploring-weblog-neighbourhoods-with-blogdex/"/>
      <updated>2002-06-04T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2002/06/04/standing-on-the-shoulders-...-exploring-weblog-neighbourhoods-with-blogdex/</id>
      <content type="html">
        <![CDATA[
      <p>Inspired by <a href="http://diveintomark.org/">Mark</a>, and <a href="http://www.scripting.com/">Dave</a>, I’ve been doing a bit of neighbourhood exploration hacking of my own.</p>
<p>Last week, I was alerted to <a href="http://blogdex.media.mit.edu/">Blogdex</a> by <a href="http://www.benhammersley.com/">Ben</a> (through the funny little <a href="http://www.thinkblank.com/metalinker/">Metalinker</a> Javascript-induced ‘[b]‘ links on his <a href="http://rss.benhammersley.com/">RSS weblog</a> pages). It’s an interesting project that trawls weblogs and compiles link information (I don’t know how wide it trawls, so your URL might not be in there. YMMV).</p>
<p>I though I’d write a script to use Blogdex’s information and perhaps complement <a href="http://diveintomark.org/">Mark</a>‘s <a href="http://diveintomark.org/projects/misc/blogrollfinder.py.txt">blogrollfinder.py</a> script and <a href="http://www.scripting.com/">Dave</a>‘s <a href="http://radio.userland.com/weblogNeighborhood">weblogNeighborhood</a> tool. My script, <a href="/~dj/bdexp">bdexp</a>, compiles a ‘neighbourhood’ view of a weblog URL by following the ‘links to’ information for that URL in Blogdex. (This is the ‘browseSource’ Blogdex URL). You give it a weblog URL, and an optional depth (how far to descend, default 2 levels, maximum 4), and it goes away, pulls and analyses the information, and gives you a rank list of results. I’ve weighted the scores – the further ‘down’ a URL appears, the fewer points it gets.</p>
<p>I’ve “CGI’d” (ugh) my script so you can have a go too. Call it like this: <a href="/~dj/cgi-bin/bdexp?url=//qmacro.org/about/">http://www.pipetree.com/~dj/cgi-bin/bdexp?url=//qmacro.org/about/</a> and have patience while the script descends Blogdex information and does its stuff. I’ve deliberately slowed the script down so it doesn’t hammer Blogdex’s servers. In fact, results are cached too, for added politeness :-&gt;</p>
<p>But wait – there’s more! So that the information made available through this script might be used to correlate, augment, and otherwise confuse neighbourhood information determined from other sources and methods like Mark’s and Dave’s, you can get XML output, rather than HTML. Just add <em>&amp;xml=1</em> to the URL like this: <a href="/~dj/cgi-bin/bdexp?url=//qmacro.org/about/&amp;xml=1">http://www.pipetree.com/~dj/cgi-bin/bdexp?url=//qmacro.org/about/&amp;xml=1</a> and you’ll get a very simple XML format containing the same data. This makes it dead easy to just pull in this Blogdex-powered neighbourhood information into your own tool. Well, that’s the theory anyway :-) (You can specify the depth with <em>&amp;depth=N</em> too).</p>
<p>I’ve implemented a little lock mechanism so that only N users can use the script at once; I’m not sure how my server (it’s only a poor old Celeron), or Blogdex, will take to massive parallelism. Ok, this is wishful thinking, of course … hardly anyone reads this anyway… ;-)</p>
<p>Thank you Cameron at Blogdex for compiling this linking info.</p>
<p>Usual disclaimer applies – my code is just hacked together.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Small Blagg mod to enable custom formatting of &#39;blaggregated&#39; items</title>
      <link href="https://qmacro.org/blog/posts/2002/06/03/small-blagg-mod-to-enable-custom-formatting-of-&#39;blaggregated&#39;-items/"/>
      <updated>2002-06-03T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2002/06/03/small-blagg-mod-to-enable-custom-formatting-of-&#39;blaggregated&#39;-items/</id>
      <content type="html">
        <![CDATA[
      <p>Well, further to the little <a href="/blog/posts/2002/06/02/slamwedge">formatting blaggplug</a> I wrote yesterday to reformat the blaggregated items for my <a href="../../../cgi-bin/blosxom/djnews">Morning Reading</a>, I decided to go a step further and add a tiny template mechanism to Blagg so that this sort of formatting change could be done in-the-style-of <a href="http://www.oreillynet.com/%7Erael/lang/perl/blosxom">Blosxom</a>, that is, by allowing <a href="http://www.oreillynet.com/%7Erael/lang/perl/blagg">Blagg</a> to format the items as before, or overriding that format using an HTML file in my <a href="http://www.oreillynet.com/%7Erael/lang/perl/blosxom">Blosxom</a> blog directory.</p>
<p>So in the same way that Blosxom users can tune the format of the stories by maintaining a <em>story.html</em> file in their blog directory, now I can tune the format of items that Blagg spits out, by maintaining a <em>blaggitem.html</em> file in the same directory.</p>
<p>Of course, this is an unofficial mod to Blagg, but if you’re interested, it’s <a href="/~dj/blagg.0+4i.templatemod">here</a>, and for those with a ‘diff’ bent, the differences to the original 0+4i version are highlighted <a href="/~dj/blagg.0+4i.templatemod.diff">here</a> (the diff also highlights the passing of the extra $i_fn parm in the call to blaggplug::post(), as well as config variable changes peculiar to me).</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Changed link tags</title>
      <link href="https://qmacro.org/blog/posts/2002/06/03/changed-link-tags/"/>
      <updated>2002-06-03T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2002/06/03/changed-link-tags/</id>
      <content type="html">
        <![CDATA[
      <p>Following Dan Brickley’s point about the RSS <link/> mime-type, and <a href="http://rss.benhammersley.com/archives/000065.html#000065">Ben</a>‘s and <a href="http://diveintomark.org/archives/2002/06/02.html#important_change_to_the_link_tag">Mark</a>‘s notes, I’ve made the required changes to the attribute contents for the pointer to this weblog’s <a href="/qmacro/xml">RSS feed</a>.</p>
<p>Furthermore, regarding the <a href="http://cicero/qmacro/2002/Jun/2#blogrollfinder_link">other</a> <link/> tag I have in this document, pointing to the <a href="/~dj/rss.rss">RSS feed list</a> (for which I’d specified a <em>rel</em> value of “<em>feeds</em>“), I’ve had a quick shufty at the <a href="http://www.w3.org/TR/html401/types.html#type-links">allowed values</a> for the <em>rel</em> attribute of the <link/> tag. While “<em>feeds</em>” isn’t explicitly there, and “<em>help</em>” is the closest fit from the choices given, I’ve nevertheless decided to keep the link type “<em>feeds</em>“, and qualify that definition with a meta data profile. Just to see where this leads.</p>
<p>This is what I interpreted from the <a href="http://www.w3c.org/">W3C</a> HTML specs:</p>
<ol>
<li>There is a provision, following the definition of the explicitly <a href="http://www.w3.org/TR/html401/types.html#type-links">allowed values</a>, to define new link types for the <em>rel</em> attribute:</li>
</ol>
<blockquote>
<p>“Authors may wish to define additional link types not described in this specification. If they do so, they should use a profile to cite the conventions used to define the link types.”</p>
</blockquote>
<ol start="2">
<li>You can do this by providing the location a meta data profile in a <em>profile</em> attribute of the HTML document’s <head/> tag.</li>
<li>According to the <a href="http://www.w3.org/TR/html401/struct/global.html#profiles">explanation</a> of the meta data profiles, these locations are URIs, which can be globally unique names, or actual links to be followed.</li>
<li>Unfortunately, the specification doesn’t go so far as to actually define what the format of such a meta data profile is:</li>
</ol>
<blockquote>
<p><a href="http://www.w3.org/TR/html401/struct/global.html#profiles">“This specification does not define formats for profiles.”</a></p>
</blockquote>
<p>(If anyone can show me a pointer to where profile formats are described, that would be great!)
5. So I’ve decided to go for a simple URI, “qmacro:weblog”, for now, on the basis of this statement:</p>
<blockquote>
<p>“User agents may be able to recognize the name (without actually retrieving the profile) and perform some activity based on known conventions for that profile.”</p>
</blockquote>
<p>This is what it now looks like:</p>
<head profile="qmacro:weblog"> ... <link rel="feeds" type="application/rss+xml" title="RSS feeds" href="http://www.pipetree.com/~dj/rss.rss" /> ...
<p>I might be barking totally up the wrong tree, but that’s the price of fun experimentation. I think the only thing that needs to be different is the actual URI – if we can agree on a standard global name, so much the better.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>HTML link tag for Blogroll</title>
      <link href="https://qmacro.org/blog/posts/2002/06/02/html-link-tag-for-blogroll/"/>
      <updated>2002-06-02T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2002/06/02/html-link-tag-for-blogroll/</id>
      <content type="html">
        <![CDATA[
      <p><a href="http://diveintomark.org/">Mark</a> is doing some very interesting <a href="http://diveintomark.org/archives/2002/06/02.html#social_networks">social network scripting</a> with a script that recursively follows and compiles bloggers’ blogrolls. It occurred to me, in the context of the RSS autodiscovery flurry earlier this week, to give such scripts a leg-up. Why not use a(nother) HTML <link/> tag to point to a blogroll?</p>
<p>So, alongside the <link/> tag I <a href="../../2002/May/31#htmllink">mentioned</a> yesterday, I’ve added a further <link/> tag thus:</p>
<p><span> <link rel="feeds" type="text/xml" title="XML" href="http://www.pipetree.com/~dj/rss.rss" /> </span></p>
<p>It points to the RSS file of RSS feeds I talked about yesterday, and point to with the [[meta]](file:///%7Edj/rss.rss) link in the <strong>My Feeds</strong> list on the right.</p>
<p>This sort of thing should make scripts like Mark’s <a href="http://diveintomark.org/projects/misc/blogrollfinder.py.txt">blogrollfinder.py</a> a lot simpler, if we can somehow standardise this too.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Collapse/Expand feature for my Blaggregated display</title>
      <link href="https://qmacro.org/blog/posts/2002/06/02/collapseexpand-feature-for-my-blaggregated-display/"/>
      <updated>2002-06-02T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2002/06/02/collapseexpand-feature-for-my-blaggregated-display/</id>
      <content type="html">
        <![CDATA[
      <p>Marc Barrot’s weblog, <a href="http://radio.weblogs.com/0104487/">‘slam’</a>, has some great collapse/expand features for the display of his items. I’ve adopted his idea, using his <a href="/~dj/js/outliner.js">javascript</a>, to make the display of my “<a href="/cgi-bin/blosxom/djnews">Morning Reading</a>” neater and more manageable. Thanks Marc! I created a <a href="/~dj/f-title.pl">very simple plugin</a> for <a href="http://www.oreillynet.com/%7Erael/lang/perl/blagg">Blagg</a> to format the titles of the items slightly differently (now they contain the source feed’s title in the item title, so I can see in the collapsed mode where each item is sourced).</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Extreme Computing 2002</title>
      <link href="https://qmacro.org/blog/posts/2002/06/01/extreme-computing-2002/"/>
      <updated>2002-06-01T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2002/06/01/extreme-computing-2002/</id>
      <content type="html">
        <![CDATA[
      <p>Great. Looks like I’ll be going to the <a href="http://www.xcom2002.com/">NTK/Mute Festival of Inappropriate Technology</a>. I get the feeling that it’s going to be a combination of a computer fair (with second-hand and ‘antique’ kit), conference, and general geekfest. Right up my street.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>RSS&#39;s underlying structure, and meta-RSS.</title>
      <link href="https://qmacro.org/blog/posts/2002/05/31/rss&#39;s-underlying-structure-and-meta-rss./"/>
      <updated>2002-05-31T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2002/05/31/rss&#39;s-underlying-structure-and-meta-rss./</id>
      <content type="html">
        <![CDATA[
      <p>I’ve been pondering the nature of RSS, the lightweight syndication and feed format which is a heavy contender for the most talked-about XML format these days (uh, I suppose this post goes some way to help the cause too :-).</p>
<p>So what about RSS? What makes it so appealing? Well, a big reason is of course its position as a foundation of stability (despite its own temporary <a href="http://rss.benhammersley.com/archives/000051.html#000051">instability</a>, format-wise), in the burgeoning, nay, <em>blossom</em>ing, world of weblogs, syndication, and knowledge sharing. But I’ve been wondering if it’s more than that. It’s a simple format. But a powerful one. The RSS skeleton reflects an information model that can be found everywhere: header and body. You could say header and items. <em>Items</em>. <em>Positions</em>. What’s the fundamental structure of pretty much every piece of (business) transactional data in <a href="http://www.sap-ag.de/">SAP</a> (and other ERM) systems? A document. A document, which has a header, and items, or ‘positions’. Sales orders, invoices, purchase requisitions… the list goes on. Hmmm. Could it be that the RSS skeleton is so popular and flexible because it’s one of the netspace’s protean formats, and easy to grok?</p>
<p><a href="http://purl.org/rss/1.0/">RSS 1.0</a> celebrates that flexibility with it’s <a href="http://purl.org/rss/1.0/modules/">modular</a> approach.</p>
<p><em>I’m</em> celebrating that with a ‘meta’ RSS feed, available from the <a href="../../../%7Edj/rss.rss">[meta]</a> link in the <strong>My Feeds</strong> list on the right hand side of this page. It’s a list of all the feeds I’m subscribed to right now, in an RSS 1.0 format. Currently, I’m just using core tags, but it might be a better idea to create a simple module to enable an explicit statement of what the data is. (I know there’s <a href="http://internetalchemy.org/ocs/">OCS</a> too, but hey, it’s Friday).</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>HTML LINK to RSS source</title>
      <link href="https://qmacro.org/blog/posts/2002/05/31/html-link-to-rss-source/"/>
      <updated>2002-05-31T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2002/05/31/html-link-to-rss-source/</id>
      <content type="html">
        <![CDATA[
      <p>I’m doing my bit for the weblog community domino effect. <a href="http://diveintomark.org/">Mark</a>, and others, have <a href="http://diveintomark.org/archives/2002/05/30.html#rss_autodiscovery">added <link/> tags to their weblog HTML</a>, to point to the RSS feeds for the respective weblogs. I think this is a good idea, so have done it too in this, my <a href="http://www.oreillynet.com/%7Erael/lang/perl/blosxom">Blosxom</a>-powered weblog.</p>
<p>I do remember sitting in on an RSS BOF at last year’s <a href="http://conferences.oreillynet.com/os2002/">OSCON</a> where we discussed the idea of having an index.rss at the website’s root, rather like the robots.txt file. This <link/> based pointing is a nicer approach, as there’s an explicit relationship between the RSS XML and what it describes.</p>
<p>What’s more, Mark has a <a href="http://diveintomark.org/archives/2002/05/31.html#more_on_rss_autodiscovery">nifty bit of Javascript</a> that grabs any RSS URL that it finds in this new <link/> home, and bungs it at <a href="http://radio.userland.com/">Radio Userland</a>‘s localhost-based webserver invoking a subscribe on that RSS feed. Very nice. I don’t run RU, nor use IE much, but nevertheless this would work, even with Blosxom, because I’m running <a href="../../2002/Apr/27#5335-redir">bladder</a> :-)</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Top tip</title>
      <link href="https://qmacro.org/blog/posts/2002/05/24/top-tip/"/>
      <updated>2002-05-24T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2002/05/24/top-tip/</id>
      <content type="html">
        <![CDATA[
      <p>If you want to avoid a stint in Accident &amp; Emergency in-patients, and a bandaged ankle, don’t bolt down the stairs at Clapham Junction station two at a time and then miss your footing before you get to the bottom.</p>
<p>Ouch.</p>
<p>Ahem.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>ETag-enabled wget</title>
      <link href="https://qmacro.org/blog/posts/2002/05/24/etag-enabled-wget/"/>
      <updated>2002-05-24T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2002/05/24/etag-enabled-wget/</id>
      <content type="html">
        <![CDATA[
      <p>Well, a little evening hack while watching <a href="http://www.inspectormorse.co.uk/">Inspector Morse</a> has produced a minimalist script <code>wget.pl</code> – a tiny wrapper around the <strong>wget</strong> command so that you can be more polite when retrieving HTTP based information – in particular RSS feeds.</p>
<p>The idea was sparked by <a href="http://www.pocketsoap.com/weblog">Simon</a>'s <a href="http://www.pocketsoap.com/weblog/stories/2002/05/19/bdgToEtags.html">post</a> about using HTTP 1.1's ETag and If-None-Match headers. I wanted to write as small and minimal a script as possible, and rely on as little as possible (hence the cramped code style), in honour of <a href="http://www.oreillynet.com/%7Erael/lang/perl/blosxom">Blosxom</a>, and of course <a href="http://www.oreillynet.com/%7Erael/lang/perl/blagg">Blagg</a>, the RSS aggregator, for which the script was designed. You should be able to drop this script reference into Blagg by specifying the RSS retrieval program like this:</p>
<p><code>my $get_prog = '/path/to/wget.pl';</code></p>
<p>Don’t forget, the ETag advantage is only to be had from static files served by HTTP. Information generated on the fly, such as that from CGI scripts (such as <a href="http://www.oreillynet.com/%7Erael/lang/perl/blosxom">Blosxom</a>) aren’t given ETags.</p>
<p></p>
<p><strong>Update 06/06/2012</strong></p>
<p>It’s now just over 10 years since I originally wrote this post, and in relation to a <a href="http://scn.sap.com/community/technology-innovation/blog/2012/06/03/restful-apis-from-scratch-lessons-learnt-so-far">great post on REST by Sascha Wenninger over on the SAP Community Network</a>, I’ve just re-found the script — thanks to a <a href="http://www.markbaker.ca/blog/2003/04/etag-enabled-wget-wrapper/">comment on Mark Baker’s blog</a> that <a href="http://www.w3.org/2001/12/rubyrdf/pack/tests/scutter/wget.pl">pointed to wget.pl being part of a Ruby RDF test package</a>. Thanks mrG, whoever you are!</p>
<p>Here’s the script in its rude entirety for your viewing pleasure.</p>
<pre class="language-perl"><code class="language-perl"><span class="token comment">#!/usr/bin/perl -w</span><br><br><span class="token comment"># ETag-aware wget</span><br><span class="token comment"># Uses wget to more politely retrieve HTTP based information</span><br><span class="token comment"># DJ Adams</span><br><span class="token comment"># Version 0+1b</span><br><br><span class="token comment"># wget --header='If-None-Match: "3ea6d375;3e2eee38"' http://www.w3.org/</span><br><br><span class="token comment"># Changes</span><br><span class="token comment"># 0+1b 2003-02-03 dja added User-Agent string to wget call</span><br><span class="token comment"># 0+1 original version</span><br><br><span class="token keyword">use</span> strict<span class="token punctuation">;</span><br><span class="token keyword">my</span> <span class="token variable">$cachedir</span> <span class="token operator">=</span> <span class="token string">'/tmp/etagcache'</span><span class="token punctuation">;</span> <span class="token comment"># change this if you want</span><br><span class="token keyword">my</span> <span class="token variable">$etagfile</span> <span class="token operator">=</span> <span class="token string">"$cachedir/"</span><span class="token operator">.</span>unpack<span class="token punctuation">(</span><span class="token string">"H*"</span><span class="token punctuation">,</span> <span class="token variable">$ARGV</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <br><span class="token keyword">my</span> <span class="token variable">$etag</span> <span class="token operator">=</span> <span class="token string">`cat $etagfile 2>/dev/null`</span><span class="token punctuation">;</span><br><span class="token variable">$etag</span> <span class="token operator">=~</span> <span class="token regex">s/\\"/"/g</span><span class="token punctuation">;</span><br><span class="token variable">$etag</span> <span class="token operator">=~</span> <span class="token regex">s/^ETag: (.*?)\n$/$1/</span> <span class="token operator">and</span> <span class="token variable">$etag</span> <span class="token operator">=</span> <span class="token string">qq[--header='If-None-Match: $etag']</span><span class="token punctuation">;</span><br><br><span class="token keyword">my</span> <span class="token variable">$com</span><span class="token operator">=</span><span class="token string">"wget -U 'blagg/0+4i+ (wget.pl/0+1b)' --timeout=60 -s --quiet $etag -O - $ARGV[0]"</span><span class="token punctuation">;</span><br><span class="token keyword">print</span> <span class="token string">"Running: $com"</span><span class="token punctuation">;</span><br><br><span class="token keyword">my</span> <span class="token punctuation">(</span><span class="token variable">$headers</span><span class="token punctuation">,</span> <span class="token variable">$body</span><span class="token punctuation">)</span> <span class="token operator">=</span> split<span class="token punctuation">(</span><span class="token regex">/\n\n/</span><span class="token punctuation">,</span> <span class="token string">`wget -U 'blagg/0+4i+ (wget.pl/0+1b)' --timeout=60 -s --quiet $etag -O - $ARGV[0]`</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br><span class="token keyword">print</span> <span class="token string">"Got headers: $headers\n\n"</span><span class="token punctuation">;</span><br><span class="token keyword">if</span> <span class="token punctuation">(</span>defined <span class="token variable">$body</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br>  <span class="token punctuation">(</span><span class="token variable">$etag</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token variable">$headers</span> <span class="token operator">=~</span> <span class="token regex">/^(ETag:.*?)$/m</span><span class="token punctuation">;</span><br>  <span class="token keyword">print</span> <span class="token string">"Return value etag: $etag"</span><span class="token punctuation">;</span><br>  defined <span class="token variable">$etag</span> <span class="token operator">and</span> <span class="token variable">$etag</span> <span class="token operator">=~</span> <span class="token regex">s/\"/\\\"/g</span><span class="token punctuation">,</span> <span class="token string">`echo '$etag' > $etagfile`</span><span class="token punctuation">;</span><br>  <span class="token keyword">print</span> <span class="token string">"\n==========\n"</span><span class="token punctuation">;</span><br>  <span class="token keyword">print</span> <span class="token variable">$body</span><span class="token punctuation">;</span><br><span class="token punctuation">}</span><br><span class="token keyword">else</span> <span class="token punctuation">{</span><br>  <span class="token keyword">print</span> <span class="token string">"Cached."</span><span class="token punctuation">;</span><br><span class="token punctuation">}</span></code></pre>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>More thoughts on HTTP, Email, and Jabber</title>
      <link href="https://qmacro.org/blog/posts/2002/05/21/more-thoughts-on-http-email-and-jabber/"/>
      <updated>2002-05-21T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2002/05/21/more-thoughts-on-http-email-and-jabber/</id>
      <content type="html">
        <![CDATA[
      <p>Since writing the previous entry, some more thoughts have drawn themselves to my attention. There are advantages that HTTP does have over email. Built-in authentication for one thing. I’ve only used basic authentication, but what about digest? Moreover, <a href="http://www.jabber.org/">Jabber</a> goes one better and has a framework for identity.</p>
<p>Actually, talking about HTTP headers with basic and digest authentication, here’s something else I’ve been wondering. <a href="http://www.pocketsoap.com/weblog/2002/05/19.html#a528">Simon Fell rightly suggests</a> using a more polite and sensitive way to grab RSS sources, by use of the Etag and If-Not-Match headers. Very sensible. But what about the <a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.25">If-Modified-Since</a> header?</p>
<p>Here’s one advantage that email has over HTTP. A built-in queueing system. Ok, the actual queueing system is made most visible by use of email clients, where you see mails in a queue, ready to read or process. But this is just a mask over the flat stack of emails that you can pop with, er, the POP protocol.</p>
<p>“Yesbut”, as a friend used to say in meetings and discussions. Here’s something I’ve been pondering too. Last week I downloaded and installed the fabulous <a href="http://www.fsck.com/projects/rt">RT</a>, (“Request Tracker”) – a ticketing system written in Perl. It’s <em>very</em> flexible and extensible. RT allows tickets to be managed in queues. It also allows tickets to be created (or corresponded upon) through different interfaces – via a web interface, via email, or via the command line. Any incoming transaction is inserted into a queue (if it’s a new ticket) or appended to an existing queue entry (if it’s correspondence on an existing ticket). I wonder if I can build a small front end to accept HTTP-based business calls and stick them in an RT queue? Of course, I also wonder whether that would be useful, but if nothing else, it would be stimulating.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>&quot;Web^H^H^HInternet Services&quot;? Some Ramblings.</title>
      <link href="https://qmacro.org/blog/posts/2002/05/20/&quot;webhhhinternet-services&quot;-some-ramblings./"/>
      <updated>2002-05-20T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2002/05/20/&quot;webhhhinternet-services&quot;-some-ramblings./</id>
      <content type="html">
        <![CDATA[
      <p>I’ve been pondering the term “Web Services”. While I completely understand and agree with all the reasonings behind the term (the ‘original’ services were accessible via web clients, HTTP is the underlying and ubiquitous transport, blah blah blah), I’m wondering whether “Web Services” is the best term to use.</p>
<p>While the current rush of implementations use HTTP as the transport (witness HTTP as the most common transport for <a href="http://www.w3.org/TR/SOAP/#_Toc478383532">SOAP RPC</a>, or HTTP as the designated transport in the <a href="">XML-RPC specification</a>), there are apparent pitfalls.</p>
<p>Firstly, look at the steam generated from the SOAP-through-firewalls debate. (On the one hand they have a point, on the other hand, it’s not necessarily up to a firewall to vet at the application level – look at EDI for example). Secondly, <a href="http://zdnet.com.com/2100-1105-845220.html">some people</a> are of the opinion that HTTP needs to be replaced, in the light of its apparent weaknesses for the things that people want to use it for these days. If this happens, will we change the ‘Web Services’ name?</p>
<p>Secondly, focusing on HTTP (and therefore the ‘Web’ in ‘Web Services’) does a, err, disservice to other protocols careening around the ‘net. What about the venerable SMTP, for example? There has been valid comments made about the applicability of HTTP in ‘increasingly asynchronous’ transactions. Fire off a request for some information, say, a quotation, and the response may take days to come back. Is this legal, moral, sensible, in HTTP?. Ok, you could frame the asynchronicity in HTTP by using two request/responses (one pair in one direction and the other in the other direction: “I want a quotation, post it here when you’re ready with it” -&gt; “Ok, will do” … “Hey, here’s the quotation” -&gt; “Ooh, thanks”). (Hmmm, why do I think of RESTful things when mulling this over in my head?) You could of course go for one-way messages suspended in a SOAP solution to achieve the same effect, I guess. Hmmm, so many options, so little time.</p>
<p>Anyway, as an alternative to HTTP, how about transporting this stuff over other protocols, like the aforementioned SMTP (or a combination of SMTP and whatever endpoint protocol – POP, IMAP, and so on – you need). Or even <a href="../../../jabber/jrpc/">Jabber</a>! Both lend themselves to asynchronous interaction more than HTTP does. Or so it seems to me. Both involve to a greater or lesser degree some modicum of store-n-forward, allowing the endpoints to talk at their leisure.</p>
<p>Of course, this is all very high level, and based, as usual, on my ignorance of detail. But I often prefer to wonder about things rather than to know straight away which is right and which is wrong. And here, just like in the REST vs SOAP RPC debate, I don’t think there <em>is</em> a definitive right and wrong way. Horses for courses.</p>
<p><strong>Postscript</strong></p>
<p>I wrote the above at 30000 feet (or however high it was) above the English channel. Now that I’m on good old terra firma, travelling in a rickety South Central train from Victoria Station, I’ve had another thought. Revisiting the <a href="http://internet.conveyor.com/RESTwiki/moin.cgi/">REST</a> architectural style <em>in extremis</em> (what’s all this Latin doing here?) in the context of what I wrote above (ha, in both senses of the word) would be a good mental exercise and a focused way of finding out more about how it works. From what I understand, the URI is exalted as a holy pointer, being in many respects the blessed reference mechanism to the business objects that are exchanged in service provision and consumption.</p>
<p>I think I’ll stop now before this prose goes completely off the scale; suffice it to say that instead of the service returning a quotation, as a payload XML document in the body of the return email, it plonks it somewhere where it can be retrieved by HTTP, and sends a little notification with the URL instead.</p>
<p>Hmm, lots of things to think about…</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>The Panopticon</title>
      <link href="https://qmacro.org/blog/posts/2002/05/15/the-panopticon/"/>
      <updated>2002-05-15T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2002/05/15/the-panopticon/</id>
      <content type="html">
        <![CDATA[
      <p>Everything that goes around, comes around. What thing links my old University (<a href="http://www.ucl.ac.uk/GrandLat/">UCL</a>), <a href="http://www.ucl.ac.uk/Bentham-Project/">Jeremy Bentham</a>, (whose <a href="http://www.ucl.ac.uk/Bentham-Project/images/auto_il.gif">preserved figure</a> sits in UCL’s South Cloisters), and this year’s <a href="http://conferences.oreillynet.com/etcon2002/">Emerging Technology Conference</a>?</p>
<p>Why, the <a href="http://www.dnai.com/%7Emackey/thesis/panopticon.html">Panopticon</a>, of course. An architectural figure, envisioned by Bentham, which allows one to see but not be seen. “The Panopticon” is also the name given to a <a href="http://www.actuallyworks.com/panopticon">wonderful experiment</a> in “blogger stalking” (a phrase from <a href="http://boingboing.net/2002_05_01_archive.html#85087344">BoingBoing</a>) with avatars and a floormap of the conference area.</p>
<p>This Panopticon’s creator, <a href="http://www.oblomovka.com/">Danny O’Brien</a> (of <a href="http://www.ntk.net/">NTK</a> fame), put out some <a href="http://www.actuallyworks.com/panopticon/explanation">instructions</a> as to how the thing worked, and mentioned that he would be streaming the metadata out of a port on his server. He asked if anyone could regurgitate the data to a Jabber room so other clients could grab it from there rather than hammer his server, so I took up the challenge :-) This is, in essence, poor man’s pubsub (again) in the spirit of load dissipation: with a ratio of, say, 1:50 (Panopticon port connections – to – Jabber conference room listeners) we can relieve the strain and have a bit of fun.</p>
<p>Ok, well it was a very quick hack. The data coming out of the server port is a stream of XML. Hmmm. Sounds familiar ;-) I quickly hacked together a library, <a href="/~dj/Panopticon.pm">Panopticon.pm</a>, based loosely upon <a href="/jabber/jabberconnection/">Jabber::Connection</a>, a Perl library for building Jabber entities (XML streams flow over Jabber connections, too, y’know). With this quick and dirty library in hand, I wrote an equally quick and dirty script, <a href="/~dj/panpush.pl">panpush.pl</a>, which uses <a href="/~dj/Panopticon.pm">Panopticon.pm</a> and <a href="/jabber/jabberconnection/">Jabber::Connection</a> to do this:</p>
<ul>
<li>connect to a Jabber server and authenticate</li>
<li>join a conference room</li>
<li>open up the panopticon server port</li>
<li>fire the data that comes out of the port into the conference room for all to see and read, on a continuous basis</li>
</ul>
<p>The Panopticon data is XML. Jabber is XML. So I decided the nice thing to do would be to avoid just blurting XML into the conference room – that would be like shouting gobbledygook in a room full of people. Instead, I wrote something sensible to the room each time some data fell out of the end of the Panopticon socket (the name of the blogger’s avatar), and <em>attached</em> the actual Panopticon XML as an extension to the groupchat message. Here’s an example:</p>
<p>Panopticon produces this:</p>
<pre class="language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>icon</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>4ee9da17f5839275ad0ca5d58c2bacaa<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><br>	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>x</span><span class="token punctuation">></span></span>456<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>x</span><span class="token punctuation">></span></span><br>i	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>y</span><span class="token punctuation">></span></span>255<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>y</span><span class="token punctuation">></span></span><br><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>icon</span><span class="token punctuation">></span></span></code></pre>
<p><code>panpush.pl</code> sends this to the room:</p>
<pre class="language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>message</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>panopticon@conf.gnu.mine.nu<span class="token punctuation">'</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>groupchat<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><br>	DJ Adams<br>	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>x</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>panopticon:icon<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><br>		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>icon</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>4ee9da17f5839275ad0ca5d58c2bacaa<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><br>			<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>x</span><span class="token punctuation">></span></span>456<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>x</span><span class="token punctuation">></span></span><br>			<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>y</span><span class="token punctuation">></span></span>255<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>y</span><span class="token punctuation">></span></span><br>		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>icon</span><span class="token punctuation">></span></span><br>	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>x</span><span class="token punctuation">></span></span><br><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>message</span><span class="token punctuation">></span></span></code></pre>
<p>The scary thing is that it seems to work! Grab your nearest Jabber client and enter room</p>
<p><strong>panopticon@conf.gnu.mine.nu</strong></p>
<p>(remember, you don’t have to have a Jabber user account on gnu.mine.nu to join a conference room there – just use your normal Jabber account, say, at jabber.org). If it’s still working, you should see ‘panopticon’ in that room – that’s the panpush.pl script. When some avatar metadata changes and pops out of the Panopticon server’s port, it will appear in the room – currently represented as the avatar’s name.</p>
<p>Want more? Want to actually do something with the data in the room?</p>
<p>Well, I’ve just written an example antithesis to panpush.pl – <a href="/~dj/panclient.pl">panclient.pl</a>. This connects to the conference room, and listens out for packets containing the panopticon XML extensions. It just prints them out, but of course you can do with the data as you please. It’s just an example.</p>
<p>Oh, one more thing. As <a href="/~dj/panpush.pl">panpush.pl</a> catches the panopticon XML and squirts it into the room, it also caches the actual avatar data, keyed by each icon’s id attribute. I plan to allow queries to be sent to the ‘panopticon’ room occupant, probably in the form of <strong>jabber:iq:browse</strong> IQ queries, so that clients can find out about what avatars are currently around, and what properties they have (name, url, xy coordinates, and so on).</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Jabberconf Blaggplug version 0+1b</title>
      <link href="https://qmacro.org/blog/posts/2002/05/15/jabberconf-blaggplug-version-0+1b/"/>
      <updated>2002-05-15T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2002/05/15/jabberconf-blaggplug-version-0+1b/</id>
      <content type="html">
        <![CDATA[
      <p>I’ve just updated the ‘<a href="http://www.pipetree.com.wstub.archive.org/%7Edj/jabberconf.pl">jabberconf</a>‘ <a href="http://www.oreillynet.com/%7Erael/lang/perl/blagg/#blaggplugs">Blaggplug</a> from 0+1 to <strong>0+1b</strong>. This new version escapes the entities transferred as text to the Jabber conference room, stopping any XML-related chundering on Jabber’s part.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>(Jabber-)Browsing the Panopticon data</title>
      <link href="https://qmacro.org/blog/posts/2002/05/15/(jabber-)browsing-the-panopticon-data/"/>
      <updated>2002-05-15T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2002/05/15/(jabber-)browsing-the-panopticon-data/</id>
      <content type="html">
        <![CDATA[
      <p>Ok, further to my initial <a href="/blog/posts/2002/05/15/the-panopticon/">Panopticon/Jabber</a> experiments, I’ve extended the <a href="http://www.pipetree.com.wstub.archive.org/%7Edj/panpush.pl">panpush.pl</a> script to respond to jabber:iq:browse requests. As the script starts, and receives the initial gush of data from the Panopticon port, and as it receives further pushes, it stores the data on the avatar icons, and makes this data available as results to the jabber:iq:browse requests.</p>
<p>To get a list of avatars in the Panopticon, you can send a query like this:</p>
<pre class="language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iq</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>get<span class="token punctuation">'</span></span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>bot@gnu.mine.nu/panopticon<span class="token punctuation">'</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>b1<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><br>	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>query</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>jabber:iq:browse<span class="token punctuation">'</span></span><span class="token punctuation">/></span></span><br><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>iq</span><span class="token punctuation">></span></span></code></pre>
<p>The response will look something like this:</p>
<pre class="language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iq</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>result<span class="token punctuation">'</span></span> <span class="token attr-name">from</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>bot@gnu.mine.nu/panopticon<span class="token punctuation">'</span></span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>dj@gnu.mine.nu/home<span class="token punctuation">'</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>b1<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><br>	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>panopticon</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>jabber:iq:browse<span class="token punctuation">'</span></span> <span class="token attr-name">jid</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>bot@gnu.mine.nu/panopticon<span class="token punctuation">'</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>The Panopticon<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><br>		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>icon</span> <span class="token attr-name">jid</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>bot@gnu.mine.nu/panopticon/2b8bf6a9e9a173f95f27ae1a8d6fb2f4<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><br>			<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>Blammo the Clown<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span><br>		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>icon</span><span class="token punctuation">></span></span><br>		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>icon</span> <span class="token attr-name">jid</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>bot@gnu.mine.nu/panopticon/3ab6c14732e8937cf26db26755c4aae7<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><br>			<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>Rael Dornfest<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span><br>		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>icon</span><span class="token punctuation">></span></span><br>		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>icon</span> <span class="token attr-name">jid</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>bot@gnu.mine.nu/panopticon/47e48c975621bf43fc81622265d47a31<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><br>			<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>Dan Gillmor<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span><br>		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>icon</span><span class="token punctuation">></span></span><br>		...<br>		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>icon</span> <span class="token attr-name">jid</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>bot@gnu.mine.nu/panopticon/deedbeef<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><br>			<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>#etcon bot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span><br>		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>icon</span><span class="token punctuation">></span></span><br>	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>panopticon</span><span class="token punctuation">></span></span><br><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>iq</span><span class="token punctuation">></span></span></code></pre>
<p>(I’d originally just returned each icon without the <name/> tag, but figured that that would probably be less than useful.)</p>
<p>You can ‘drill down’ with a further query (sent to the JID of the icon you’re interested in – remember, Jabber browsing is most effective when you can navigate a hierarchy of information via their nodes’ JIDs) like this:</p>
<pre class="language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iq</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>get<span class="token punctuation">'</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>b2<span class="token punctuation">'</span></span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>bot@gnu.mine.nu/panopticon/2b8bf6a9e9a173f95f27ae1a8d6fb2f4<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><br>	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>query</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>jabber:iq:browse<span class="token punctuation">'</span></span><span class="token punctuation">/></span></span><br><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>iq</span><span class="token punctuation">></span></span></code></pre>
<p>Which should hopefully elicit a response like this:</p>
<pre class="language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iq</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>result<span class="token punctuation">'</span></span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>dj@gnu.mine.nu/home<span class="token punctuation">'</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>b2<span class="token punctuation">'</span></span> <span class="token attr-name">from</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>bot@gnu.mine.nu/panopticon/2b8bf6a9e9a173f95f27ae1a8d6fb2f4<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><br>	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>icon</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>jabber:iq:browse<span class="token punctuation">'</span></span> <span class="token attr-name">jid</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>bot@gnu.mine.nu/panopticon/2b8bf6a9e9a173f95f27ae1a8d6fb2f4<span class="token punctuation">'</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>2b8bf6a9e9a173f95f27ae1a8d6fb2f4<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><br>		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>http://progressquest.com/expo.php?name=Blammo the Clown<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span><br>		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>text</span><span class="token punctuation">></span></span>Mmm... Beer Elementals<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>text</span><span class="token punctuation">></span></span><br>		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>x</span><span class="token punctuation">></span></span>805<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>x</span><span class="token punctuation">></span></span><br>		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>y</span><span class="token punctuation">></span></span>494<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>y</span><span class="token punctuation">></span></span><br>		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>Blammo the Clown<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span><br>	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>icon</span><span class="token punctuation">></span></span><br><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>iq</span><span class="token punctuation">></span></span></code></pre>
<p>This should reflect the latest information to be had on that avatar.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Amphetadesk Links</title>
      <link href="https://qmacro.org/blog/posts/2002/05/15/amphetadesk-links/"/>
      <updated>2002-05-15T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2002/05/15/amphetadesk-links/</id>
      <content type="html">
        <![CDATA[
      <p>I was just chatting to <a href="http://www.disobey.com/">Morbus</a> in the <a href="http://www.oreillynet.com/et2002">Emerging Tech. Conference</a> IRC channel (#etcon on irc.openprojects.net) and he mentioned his <a href="http://www.amphetadesk.com/">Amphetadesk</a> news aggregator had a <em>‘subscribe to this’</em> feature for RSS URLs similar to the <a href="http://radio.userland.com/">Radio Userland</a> coffee-cup feature I’ve already included in the <strong>My Feeds</strong> section.</p>
<p>So Morbus told me what the links should look like, and I just added them to my crontab’d <a href="http://www.pipetree.com.wstub.archive.org/%7Edj/rss.pl">script</a> that produces the <strong>My Feeds</strong> list from <a href="http://www.oreillynet.com/%7Erael/lang/perl/blosxom">Blosxom</a>‘s rss.dat file.</p>
<p>You can see the result in the form of the <strong>[A]</strong> links in the list – click on these if you’re running Amphetadesk!</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Subscription from Radio</title>
      <link href="https://qmacro.org/blog/posts/2002/05/10/subscription-from-radio/"/>
      <updated>2002-05-10T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2002/05/10/subscription-from-radio/</id>
      <content type="html">
        <![CDATA[
      <p>Sam has just had some difficulties subscribing to this weblog’s RSS feed. I checked the message he got, and looked at the XML produced by Blosxom. I’ve just added a <description/> tag and a <language/> tag (!) in the <channel/> section. I think that might be what was missing…</p>
<p>Let’s see…</p>
<p>P.S. Thanks Jon for the email alert :-)</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Mr 80-Percent</title>
      <link href="https://qmacro.org/blog/posts/2002/05/09/mr-80-percent/"/>
      <updated>2002-05-09T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2002/05/09/mr-80-percent/</id>
      <content type="html">
        <![CDATA[
      <p>Nick Denton wrote an <a href="http://www.nickdenton.org/docs/80_percent_company.mht">interesting article</a> last month on how many hours people can, do, and should work in a week. It’s clear that he favours ‘80%ers’ over ‘120%ers’. I do too; having been in the fortunate position to do so, I made the move from a 5-day week to a 4-day week a couple of years ago. I’m not saying I don’t spend time at the keyboard during the 5th day, but it works wonders for one’s overall karma. Here’s to living life.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Blaggplug: jabberconf</title>
      <link href="https://qmacro.org/blog/posts/2002/05/09/blaggplug:-jabberconf/"/>
      <updated>2002-05-09T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2002/05/09/blaggplug:-jabberconf/</id>
      <content type="html">
        <![CDATA[
      <p>Q: What do you get when you cross <a href="http://www.oreillynet.com/%7Erael/lang/perl/blagg">really simple aggregation</a> with <a href="http://radio.weblogs.com/0100887/2002/03/15.html">‘messaging to spaces’</a> and ideas of “poor man’s” pubsub?</p>
<p>A: The ‘<a href="/~dj/jabberconf.pl">jabberconf</a>‘ <a href="http://www.oreillynet.com/%7Erael/lang/perl/blagg/#blaggplugs">Blaggplug</a> – a plugin for <a href="http://www.oreillynet.com/%7Erael/lang/perl/blagg">Blagg</a> that pushes RSS item info to a Jabber conference room (akin to an IRC channel) as they’re pulled in the aggregation process.</p>
<p>This idea goes back a long way, to my pre-Jabber days (!) when I was experimenting with getting my business applications to write messages to IRC channels and writing various IRC bots to listen out for and act upon specific messages (carrying out simple processes, relaying messages to further channels, and so on).</p>
<p>Just as HTTP-GET function call based apps — such as the ‘open wire service’ <a href="http://www.oreillynet.com/meerkat">Meerkat</a>, and other RESTian applications (‘RESTful’ may twang too many antennae ;-) — are both human and machine friendly, so is simple publish/subscribe via spaces. Just as people (with browsers &amp; URL lines), and applications (with HTTP libraries) can get at HTTP-GET based information, so people (with Jabber groupchat clients), and applications (with Jabber libraries), can get at published data in open spaces such as Jabber rooms.</p>
<p>The <a href="http://www.pipetree.com.wstub.archive.org/%7Edj/jabberconf.pl">plugin</a> is very raw, as I’ve just written it tonight and done some minimal testing using my current feedlist.</p>
<p>Have fun!</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>YARM: Yet Another Referers Mechanism</title>
      <link href="https://qmacro.org/blog/posts/2002/05/08/yarm:-yet-another-referers-mechanism/"/>
      <updated>2002-05-08T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2002/05/08/yarm:-yet-another-referers-mechanism/</id>
      <content type="html">
        <![CDATA[
      <p>I’ve been reading what some people have been thinking and doing about referers and backlinking:</p>
<ul>
<li><a href="http://www.disenchanted.com/dis/linkback.html">http://www.disenchanted.com/dis/linkback.html</a></li>
<li><a href="http://www.oreillynet.com/pub/a/webservices/2002/05/03/udell.html">http://www.oreillynet.com/pub/a/webservices/2002/05/03/udell.html</a></li>
<li><a href="http://diveintomark.org/archives/2002/04/20.html#automatic_linkbacks">http://diveintomark.org/archives/2002/04/20.html#automatic_linkbacks</a></li>
<li><a href="http://radio.weblogs.com/0101221/2002/05/06.html#a197">http://radio.weblogs.com/0101221/2002/05/06.html#a197</a></li>
</ul>
<p>(<a href="http://www.decafbad.com/">Leslie</a> has been doing stuff too, but his main site is suffering an outage at the moment and I can’t get to the right link – get well soon, 0xDECAFBAD!). While reading, I’ve been playing around a bit too, and have a little <a href="http://www.pipetree.com.wstub.archive.org/%7Edj/lpwc">script</a> which is fed a ‘tail’ed access_log and looks for referers, grabbing the titles of their pages if possible (using an <a href="http://perl.plover.com/yak/hw1/Hardware-notes.html#_Orcish_Maneuver_">Orcish maneuver</a>-like mechanism to cache page titles and be a good HTTP citizen).</p>
<p>I run this script in the background:</p>
<p>nohup tail -f access_log | perl <a href="/~dj/lpwc">lpwc</a> &gt;refer.list 2&gt;refer.log &amp;</p>
<p>and then periodically pull the last ten unique referers and create a nice list that I can then SSInclude in this weblog:</p>
<p>uniq refer.list | tail | perl referers.pl &gt; referers.incl</p>
<p>If nothing else, it reminds me of how powerful *nix command line tools and the humble pipe can be.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>One small step...one giant leap...</title>
      <link href="https://qmacro.org/blog/posts/2002/05/07/one-small-step...one-giant-leap.../"/>
      <updated>2002-05-07T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2002/05/07/one-small-step...one-giant-leap.../</id>
      <content type="html">
        <![CDATA[
      <p>Yeow!</p>
<p><a href="http://frontier.userland.com/stories/storyReader$10108#howToCallAProcedureOverIm">[&quot;im://jabber/bull@mancuso.org&quot;].examples.getStateName (12)</a></p>
<p>By ‘eck, it <a href="/jabber/XMLRPC/">takes me back…</a></p>
<p>A hearty congrats to <a href="http://www.scripting.com/">Dave</a> (and <a href="http://www.pipetree.com.wstub.archive.org/archives/2002/05/www.jerf.org">Jeremy</a> and <a href="http://www.wiredfool.com/ftoc">Eric</a> of course). “This <em>Bing!</em>‘s for you.”</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Calendar code</title>
      <link href="https://qmacro.org/blog/posts/2002/05/07/calendar-code/"/>
      <updated>2002-05-07T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2002/05/07/calendar-code/</id>
      <content type="html">
        <![CDATA[
      <p>I forgot to mention, the little script I used to produce the calendar on the right is <a href="/~dj/calendar">here.</a></p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Bring on the SSI</title>
      <link href="https://qmacro.org/blog/posts/2002/05/06/bring-on-the-ssi/"/>
      <updated>2002-05-06T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2002/05/06/bring-on-the-ssi/</id>
      <content type="html">
        <![CDATA[
      <p>As a kid, I used to regularly re-arrange my bedroom at home, not because I was unhappy with the layout, but simply because I could. I think this trait has remained with me, as I’ve just completed a bit of a shake-up of this weblog, or rather, the mechanism(s) that make up this weblog.</p>
<p>I <a href="/blog/posts/2002/04/21/hello-blosxom">wrote</a> earlier about hacking support for lists into <a href="http://www.oreillynet.com/%7Erael/lang/perl/blosxom">Blosxom</a>, so I could generate simple list files and Blosxom would format them nicely and fold them into the blog output for me. I decided that I wanted to go on using vanilla Blosxom, rather than a custom one, and achieve the list display another way. So I’ve turned things around, and am now running Blosxom as nature intended, and have included the output in the framework you see here via SSI. The rest of the lists and tables are also SSIncluded files.</p>
<p>The main drive for this change was to be able to more easily incorporate the latest ‘hack’ which you can see to the right – a calendar showing the current month, with links to posts on relevant days. This idea is of course not new, and can be seen on many a <a href="http://radio.userland.com/">Radio Userland</a> powered weblog. The calendar here is generated by HTMLifying the output of ‘cal’ and looking through Blosxom’s data directory at the timestamps of the .txt files I’ve created. Simple.</p>
<p>As you can see, this blog’s location –</p>
<blockquote>
<p><a href="../../../qmacro">//qmacro.org/about</a></p>
</blockquote>
<p>is new, and easy to remember. The content and CGI scripts are actually served from my <strong>~dj</strong> directory on www.pipetree.com; the ‘qmacro’ name is masking this by means of some <strong>AliasMatch</strong> directives in our Apache web server.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Blosxom vs the world</title>
      <link href="https://qmacro.org/blog/posts/2002/05/06/blosxom-vs-the-world/"/>
      <updated>2002-05-06T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2002/05/06/blosxom-vs-the-world/</id>
      <content type="html">
        <![CDATA[
      <p>In case you’re wondering why I’m using <a href="http://www.oreillynet.com/%7Erael/lang/perl/blosxom">Blosxom</a> instead of other fine weblogging tools like <a href="http://radio.userland.com/">Radio Userland</a>, <a href="http://www.blogger.com/">Blogger</a>, or <a href="http://www.moveabletype.org/">Moveable Type</a>, I’ll tell you. Not because I don’t want to pay the minimal (or non-existent) price; not because I think that one is better than the other, not even because I refuse free hosting for my weblog…</p>
<p>It’s simply <em>because I can</em>.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Blog software review</title>
      <link href="https://qmacro.org/blog/posts/2002/05/06/blog-software-review/"/>
      <updated>2002-05-06T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2002/05/06/blog-software-review/</id>
      <content type="html">
        <![CDATA[
      <p>I found a pointer on <a href="http://scriptingnews.userland.com/backissues/2002/05/05#l1003254d10ef53e118908bfc419a699a">Dave W’s</a> site to a <a href="http://hotwired.lycos.com/webmonkey/02/18/index3a.html?tw=authoring">survey of weblog tools</a>. It’s a high-level but nevertheless interesting article that looks at some of the major weblogging software out there, and describes some of the features of each. It fails to mention <a href="http://www.oreillynet.com/%7Erael/lang/perl/blosxom">Blosxom</a>, though, which is a shame, although it is listed on a(n oddly formatted) <a href="http://www.lights.com/weblogs/tools.html">page</a> linked from the review.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>community(disagreement + debate) = inspiration</title>
      <link href="https://qmacro.org/blog/posts/2002/05/01/community(disagreement-+-debate)-inspiration/"/>
      <updated>2002-05-01T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2002/05/01/community(disagreement-+-debate)-inspiration/</id>
      <content type="html">
        <![CDATA[
      <p>Not a period goes by in the extended computing community without a juicy debate or two. This time it’s SOAP and RPC vs REST, on afterburn with a Google API in(ter)jection. I can’t remember when a single subject seemed to generate as much traffic on the <a href="http://www.oreillynet.com/weblogs/">O’Reilly Network Weblogs</a> as this. There have been wonderfully interesting arguments from many people. Personally, I’m ambivalent. I think the most important thing is that it inspires people to greater things, and gets people thinking.</p>
<p>What a rich seam of ideas and mind-stimulation there is to be mined within this community. And no coal dust, dank conditions, and canaries in sight. I’ll drink to that.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>&quot;Blog Locally, Publish Globally&quot;</title>
      <link href="https://qmacro.org/blog/posts/2002/04/30/&quot;blog-locally-publish-globally&quot;/"/>
      <updated>2002-04-30T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2002/04/30/&quot;blog-locally-publish-globally&quot;/</id>
      <content type="html">
        <![CDATA[
      <p>I’d been thinking of using <a href="http://www.cvshome.org/">cvs</a> to help manage offline file-based blogging with Blosxom, but I recently read a couple of posts by <a href="http://www.nozell.com/cgi/blosxom/2002/Mar/5#syncing-blog">Marc Nozell</a> and <a href="http://saladwithsteve.com/osx/2002_02_01_archive.html#9710921">Rael</a> (to whom the title of this post is attributed) describing how they use rsync. It’s a nicer idea than using cvs, so I’ve gone for it. I made an alias, ‘blogsync’, which does this:</p>
<pre><code>rsync -tazve ssh ~/blog/*.txt gnu:blog/
</code></pre>
<p>and stuck the alias definition into my .bashrc file Hey presto. My trusty Linux Vaio is always with me, and I can blog there wherever and whenever I wish. The ‘net cafe at London Gatwick airport was getting a bit too pricey for terminal access, but I passed it last week to discover that it now offers simple 10baseT connections for laptop users. Five quid for 40 minutes. Still steep, but perhaps worth it for the odd time I absolutely desperately <em>must</em> sync up.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Other side of the coin: 5335 now resurrected</title>
      <link href="https://qmacro.org/blog/posts/2002/04/27/other-side-of-the-coin:-5335-now-resurrected/"/>
      <updated>2002-04-27T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2002/04/27/other-side-of-the-coin:-5335-now-resurrected/</id>
      <content type="html">
        <![CDATA[
      <p>To complement the <a href="/~dj/rss.pl">script</a> that allows me to share my feed list with others, including <a href="http://radio.userland.com/">Radio Userland</a> users (with the coffee mug link), I’ve now written a simple pair of scripts which do the equivalent of the <a href="../../../testwiki/5335">5335</a> script mentioned earlier.</p>
<p>The point of the 5335 link is that the target is 127.0.0.1, that is, localhost. This time, I didn’t want to run a script of any significant size on my localhost; rather, I thought that if I could just run a simple <em>redirector</em>, which I could configure and get to redirect calls to 127.0.0.1:5335 to a location of my choosing, I’d be able to concentrate running the ‘complicated’ (relative term) part of adding a feed to <a href="http://www.oreillynet.com/%7Erael/lang/perl/blagg">Blagg</a>‘s rss.dat, on the host that serves my weblog.</p>
<p>So <a href="/~dj/5335-redir.pl">5335-redir.pl</a> is a simple, configurable redirector, which I run on my localhost, and <a href="/~dj/bladder">bladder</a> is the script that receives a feed URL (via the redirector) and adds it to rss.dat.</p>
<p>Very simple. In the spirit of <a href="http://www.oreillynet.com/%7Erael/lang/perl/blosxom">Blosxom</a> and <a href="http://www.oreillynet.com/%7Erael/lang/perl/blagg">Blagg</a>, I hope.</p>
<p>Here’s a step-by-step list of what happens:</p>
<ol>
<li>I click on a coffee mug link next to a feed reference that I want to add to my aggregator.</li>
<li>The link points to http://127.0.0.1:5335/…. and 5335-redir.pl catches the request.</li>
<li>The request is redirected by 5335-redir.pl to bladder, running on my weblog host.</li>
<li>Bladder simply adds the feed reference (sent in the redirected link) to Blagg’s rss.dat file.</li>
<li>The rss.pl script comes along on it’s regular cron way and rebuilds the My Feeds list and the newly added feed appears there.</li>
</ol>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Original Peerkat-based weblog back up for reference</title>
      <link href="https://qmacro.org/blog/posts/2002/04/26/original-peerkat-based-weblog-back-up-for-reference/"/>
      <updated>2002-04-26T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2002/04/26/original-peerkat-based-weblog-back-up-for-reference/</id>
      <content type="html">
        <![CDATA[
      <p>Well, I got everything back in order relating to the old experimental weblog, and I’m running an instance of <a href="http://www.oreillynet.com/%7Erael/lang/python/peerkat">Peerkat</a> to expose the blog data. It’s back at the same address (<a href="http://www.pipetree.com:8080/">http://www.pipetree.com:8080</a>) but is just for reference. I’m pressing forward with this new <a href="http://www.oreillynet.com/%7Erael/lang/perl/blosxom">Blosxom</a>-based weblog.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Coffee Mugs and weblog interop</title>
      <link href="https://qmacro.org/blog/posts/2002/04/26/coffee-mugs-and-weblog-interop/"/>
      <updated>2002-04-26T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2002/04/26/coffee-mugs-and-weblog-interop/</id>
      <content type="html">
        <![CDATA[
      <p>In the same vein as the <a href="http://www.pipetree.com:8080//?id=1018344359.94.16">experiment</a> with Peerkat, I’ve now exposed the feeds data for <a href="http://www.oreillynet.com/%7Erael/lang/perl/blagg">Blagg</a> (which is the RSS aggregator mechanism I’m using with <a href="http://www.oreillynet.com/%7Erael/lang/perl/blosxom">Blosxom</a>) as a list on the right hand side of the weblog here.</p>
<p>It’s very simple; <a href="http://www.oreillynet.com/%7Erael/lang/perl/blagg">Blagg</a> uses a text file, rss.dat, to keep a list of RSS feeds that I want to subscribe to. I wrote a <a href="http://www.pipetree.com/~dj/rss.pl">simple script</a> to read that information and to create a list file that I can then pull into the weblog template like the other lists here. Very simple. I’ll probably cron the script to run every so often, to keep the list up to date.</p>
<p>Now all I need to do is resurrect the [5335](file:///testwiki/5335) script so that I can other feed info inserted into (appended onto, probably) Blagg’s rss.dat file when I click one of those coffee mug icons.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Cross pollination and blossoming of scripts</title>
      <link href="https://qmacro.org/blog/posts/2002/04/25/cross-pollination-and-blossoming-of-scripts/"/>
      <updated>2002-04-25T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2002/04/25/cross-pollination-and-blossoming-of-scripts/</id>
      <content type="html">
        <![CDATA[
      <p>There seems to be a wonderful, um, blossoming of scripts, tools, and ideas arould <a href="http://www.oreillynet.com/%7Erael/">Rael</a>‘s <a href="http://www.oreillynet.com/%7Erael/lang/perl/blosxom">Blosxom</a> and the new <a href="http://www.oreillynet.com/%7Erael/lang/perl/blagg">Blagg</a> mechanisms. How about <a href="http://kavery.ecs.fullerton.edu/cgi-bin/blosxom.cgi/blosxmlrpc">a Blogger API interface for Blosxom</a>, or <a href="http://www.oreillynet.com/%7Erael/lang/perl/blagg/#blaggplugs">a plug-in architecture for Blagg</a>, to name but two, in addition to the tiny hacks such as the Google search list and the bookmark ‘to read’ list, both on the right…</p>
<p>I’m sure it’s because Blosxom’s scent of simplicity has people doing what <em>they</em> want, with code, because there’s only the slightest whiff of required compliance, to fit in with how Blosxom works, and that’s something that all platforms, languages, and minds share: files.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>My bookmarks</title>
      <link href="https://qmacro.org/blog/posts/2002/04/24/my-bookmarks/"/>
      <updated>2002-04-24T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2002/04/24/my-bookmarks/</id>
      <content type="html">
        <![CDATA[
      <p>The essence of Blosxom, using basic tools and OS-level building blocks, inspires one to keep things simple, and celebrate the humble file as the lowest common denominator for data interchange. Now that I’ve got the possibility of including lists of things on this page (or on other blog pages, for that matter), I’ve managed to address a ‘problem’ I’ve had for a while in a really simple way. I have a bookmark folder in my <a href="http://galeon.sourceforge.net/">Galeon web browser</a> called ‘to read’ where I keep references to articles that I want to print out and read (on the train, mostly) – most of the time, though, I don’t have access to a printer.</p>
<p>With a simple <a href="http://www.pipetree.com/~dj/galeon.pl">script</a>, I just parse Galeon’s bookmark file to pull out the items in the ‘to read’ folder, and make them into a simple list, which I then drop into my file area reserved for Blosxom. A simple reference to this list in the template, and ecce, I have my ‘to read’ list available on every workstation I sit down at.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Off with the (relatively) old, on with the new</title>
      <link href="https://qmacro.org/blog/posts/2002/04/22/off-with-the-(relatively)-old-on-with-the-new/"/>
      <updated>2002-04-22T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2002/04/22/off-with-the-(relatively)-old-on-with-the-new/</id>
      <content type="html">
        <![CDATA[
      <p>The move from Peerkat to Blosxom coincided with open disk surgery on our colo box that hosts this website. I’ve got this weblog up and running but need to install Python so I can boot my Peerkat-based experiments previously at http://www.pipetree.com:8080.</p>
<p>I’m really taken with the simplicity of Blosxom. As the weblog entries are simply textfiles, I think I’m going to start using CVS to give me the ability to write offline too. I travel a lot, and my trust Sony Linux laptop goes everywhere with me.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Interview on jabber.org</title>
      <link href="https://qmacro.org/blog/posts/2002/04/21/interview-on-jabber.org/"/>
      <updated>2002-04-21T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2002/04/21/interview-on-jabber.org/</id>
      <content type="html">
        <![CDATA[
      <p>My interview on <a href="http://www.jabber.org/">jabber.org</a> has been <a href="https://web.archive.org/web/20020804053617/http://www.jabber.org/people/interviews/dj.html">posted</a>. Yikes!</p>
<p>It's reproduced below.</p>
<hr>
<h1>Jabber Interviews: DJ Adams (qmacro)</h1>
<h2>JSF &gt; People &gt; Interviews &gt; DJ Adams</h2>
<p><strong>Everyone in the Jabber world seems to have a nickname -- how did you get yours?</strong></p>
<p>Well, it comes from the world of SAP. Prehistoric SAP, that is, from when I was working with R/2 in the late eighties. In those days, it was nearly all in (S/370) assembler - none of this newfangled ABAP language thank you very much :-) A Q-macro is an assembler representation of a logical file structure, defined in the SAP system's data dictionary. The names were 5 characters in length, for example QKONP, which was the name of the macro that represented the field of the contract document item structure. I picked the name 'qmacro' as it reminded me of happy times, and it was unlikely that it would clash with anyone else's.</p>
<p><strong>Where do you live now, and what interesting places have you lived in the past?</strong>
Well, I split my time between England and Germany. I work in Brentford, West London, and live in Hailsham, in East Sussex, near the south coast. I also spend time in Krefeld, Germany. Actually, when I think about it, I spend most of my time somewhere between the two. I grew up in Manchester, but moved to London when I went to university there.</p>
<p>I was lucky enough to have a job (hacking SAP) that took me to lots of places; I've lived and / or worked in plenty of places in my time - Hamburg, Düsseldorf, Bonn, Heidelberg (Germany), Paris, Strasbourg (France), Brussels (Belgium), Copenhagen (Denmark), Rotterdam (Holland), NY state (USA), and plenty of places in the UK. To paraphrase some song lyrics, &quot;wherever I lay my laptop, that's my home&quot;.</p>
<p><strong>When and how did you first get involved in Jabber?</strong>
I remember it well. It was the autumn of 2000. I was working in London, in a small, cramped, and hot office. I was getting hot under the collar trying to install this new open XML-based messaging system called 'Jabber'. I'd been hacking around with IRC, and wanted to see what this new system was like. As I've mentioned elsewhere, my head was full of XML-RPC stuff, IRC bots, and system-to-system messaging. Although at the time Jabber was being touted as an IM system, I was intrigued.</p>
<p>I almost gave up at the start, in that it took me over a day to get it installed and working, with all the individual library dependencies that were required at the time - I think it was the 1.0 version of the jabber.org server - and the initially cryptic configuration file. But I persevered, and I'm glad I did. (The fact that I found the configuration file initially cryptic is one of the reasons why I focus so much on helping the reader of &quot;Programming Jabber&quot; to understand how the configuration works - that's why Chapter 4 is so, well, long :-)</p>
<p>I was very much a Perl enthusiast at the time (and still am!) and I got stuck into the Net::Jabber modules almost immediately.</p>
<p><strong>Which Jabber clients do you use or like the most?</strong>
It has to be Jarl. It's great - does what it says on the label, appeals to my graphical good taste, and I can hack bits onto it in Perl. I've used Gabber too - that's a nice client, but overall I prefer Jarl. I've read enough of Ryan's code in the Net::Jabber modules to understand his coding style, so I feel at home inside Jarl.</p>
<p>When I'm on the move, and have only got an ssh window available, then of course I use sjabber to join meetings and conferences.</p>
<p><strong>You're well-known in the Jabber community for having written a book about Jabber -- how did that come about and what did you learn in the process?</strong>
You mean I'm not well known for my good looks and charm? ;-) Ok, well, you can't win 'em all. Seriously, though, about the book. It was early 2001, I'd just had a couple of Fun With Jabber articles published on the O'Reilly Network, and had a few other articles and bits of documentation relating to Jabber out there too. A chap from O'Reilly called Chuck Toporek, who later was to be my editor, called me. To cut a long story short, after I had bored him half to death with the sort of things someone could write about Jabber, he asked me if <em>I</em> wanted to write it. I almost fell off my chair.</p>
<p>If there's one thing I learned, it's that if a publisher asks you if you would like to write a book, you say &quot;YES!&quot;. It was the opportunity of a lifetime for me. I had to grab it with both hands. I had to submit a detailed proposal, which outlined the book's content, and so on. This was actually a lot harder than I thought it was going to be, as I had to essentially write the book in my head up front, so to speak, so I could work out what was going to be where. It really paid off, though, as the outline was my road map while writing. I'd have been totally lost without it.</p>
<p>I quit my job to write it; I wanted to enjoy the experience as much as I could. The word 'enjoy' is relative, though. Although ultimately rewarding, writing the book was very hard work. I got to know the jabber.org server codebase quite well, as I used to pore over it while drinking in a coffee shop just up the road.</p>
<p><strong>What do you consider some of your most important contributions to Jabber?</strong>
Gosh, I dunno. I've written quite a bit of documentation, and have tried to help out on the mailing lists wherever and whenever I could. I enjoy 'promoting' Jabber, writing articles and giving talks to anyone who will listen :-) I also have a few Jabber modules on CPAN under my belt - Jabber::Connection being the most important, I guess.</p>
<p><strong>What projects or code are you working on nowadays?</strong>
Well, at the moment, I'm working with the Radio Userland community to bring Jabber in to the loop to solve various issues relating to the addressing of endpoints that are behind firewall/NAT mechanisms. We're got a 'bridge' that sits in between Radio Userland desktops and the so-called Radio Community Server mechanism; this bridge translates between XML-RPC and Jabber traffic to carry weblog update notification requests and pings. We're using packets based on the pubsub JEP 0024 to achieve this. It's working really well.</p>
<p>I'm also experimenting with Peerkat, a personal weblog mechanism, and have added some Jabber pubsub juice to that too. There's a lot of really interesting stuff out there that is just crying out for integration with Jabber.</p>
<p>Other than that, I'm keeping an eye on the 1.5 development work, so I'll be in a position to explain bits and pieces to anyone who expresses an interest.</p>
<p><strong>What are your favorite programming languages?</strong>
Well, it's got to be Perl, of course. What a silly question :-) Actually, Python has been growing on me too, ever since I hacked on bits of jabberpy early last year. Any language that's not too difficult for me to (a) understand and (b) do anything useful without jumping through hoops is fine by me. I've still got a soft spot for Atom Basic, a very odd dialect of Basic on the Acorn Atom. You could inline 6502 assember in your code, too!</p>
<p><strong>What's your favorite music to code by?</strong>
Oh, I've rather an eclectic taste, I'm afraid. Naming any one artist would be misrepresentative of my favourites, so here's a random list of stuff I've been listening to at the keyboard recently: Electric Light Orchestra, Talvin Singh, The Smiths, Violent Femmes, Natalie Merchant, Bentley Rhythm Ace, Daft Punk, James Taylor Quartet, Led Zeppelin, Grateful Dead, Motorhead, Manu Dibango. I also like listening to BBC Radio 4.</p>
<p><strong>What hobbies do you pursue when you're not working on Jabber?</strong>
Most of my hobbies are orientated towards our son, so right now you'll find me kite flying, bicycle riding, and building stuff with Lego. I do like cooking, it's a great way to relax and switch the rest of the world off. Joseph and I especially enjoy making our own pasta, cakes, and pies. Anything that involves a lot of mess, basically.</p>
<p><strong>Do you have a website or weblog where people can learn more about you?</strong>
Well, not really. I've never been that good at maintaining that sort of thing. I do have a Jabber-related site, which is at http://www.pipetree.com/jabber/. My experiments with Peerkat, in the form of a weblog, can be found at http://www.pipetree.com:8080. I did have a Geocites website for my family, but it's disappeared. Our son Joseph had a website up within 60 hours of being born :-)</p>
<p><strong>What do you think are the most important strengths of Jabber?</strong>
The fact that the protocol is open, and flexible. It doesn't try to do too much - it just gives you the building blocks to construct your own solutions. Indeed, look at the activity in the standards-jig mailing list, where people are coming up with extensions to the protocol left right and centre. Furthermore, because the basics are straightforward, it's easy to wrap your head around it and get going with solutions without much ado.</p>
<p>I think the fact that the Jabber development community is a friendly place to be, despite any clashes that might occur, is a very important aspect too. Life's too short already not to enjoy what you're doing.</p>
<p><strong>What are some of the weaknesses you think need to be addressed?</strong>
Weakness? Bah, that word isn't in my vocabulary :-) But if I had to pick one, it would be Jabber's name, and what people think it stands for. Jabber is not just IM, as we all know. The situation is improving, in that people are beginning to 'get it' and think of Jabber in more general XML-based messaging terms, but it's been a long hard slog to get here.</p>
<p><strong>What cool applications would you like to see built using Jabber?</strong>
Well, there's a ton of potential in the business world (where I come in from). Getting Jabber into commerce related projects is what I'm interested in. There's so much data to manage and move around in the business world, and an XML-aware transport like Jabber seems to be an ideal fit. I've already built some demo scenarios, bolting Jabber (and other Open Source tools) onto SAP R/3, and it looks very promising.</p>
<p><strong>What other computing projects do you most admire, and why?</strong>
Hmmm. A difficult one. I'm not really sure. I'm not that much of a follower of computing projects per se; I'm more a user of their products :-) Rather than projects, there are many people that I admire. Take the Perl community, for example. As well as the gods who make Perl tick, there are people closer to userspace (and therefore closer to me) that are doing fantastic things to further Perl. Matt (XML), Brian (Inline) and Damian (mind stretching) to name but a few.</p>
<p><strong>What can the Jabber community do to improve?</strong>
There's been a lot of effort to get process built into the community and the Foundation; JIGs, JEPs, and the council, for example. We need to make sure that the time and effort invested in setting these things up is not wasted; we need to see that the processes put in place are processes that work. We need to communicate more (who doesn't?) and we have to constantly work on the relations(hips) with other parties.</p>
<p><strong>Where would you like Jabber to be two years from now?</strong>
Everywhere.</p>
<p>:-)</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Hello Blosxom</title>
      <link href="https://qmacro.org/blog/posts/2002/04/21/hello-blosxom/"/>
      <updated>2002-04-21T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2002/04/21/hello-blosxom/</id>
      <content type="html">
        <![CDATA[
      <p>Well, after having a <a href="http://www.pipetree.com/testwiki/Peerkat">look</a> at <a href="http://www.oreillynet.com/%7Erael/lang/python/peerkat">Peerkat</a>, from the pen of that maven <a href="http://www.oreillynet.com/%7Erael">Rael Dornfest</a>, I turned my attention to his <a href="http://www.oreillynet.com/%7Erael/lang/perl/blosxom">Blosxom</a> project, a beautifully simple weblog mechanism that celebrates the power of the *nix shell, tools, and simple files. It’s just up my street, and I’m a definite convert. Nice one, Rael.</p>
<p>I grabbed the latest version, 0+3i, and hacked in a bit of support for simple lists, such as you see on the right hand side of this page. Just as you write blog entries by editing .txt files, where the first line in the file becomes the entry’s title, so you create lists by editing .list files, where the first line in the file becomes the heading for the list. You include a list in your template by including the list’s name in square brackets, like this: [listname].</p>
<p>Because lists are just files, you can generate them in lots of ways. The Google search list on the right was created using a slightly modified version of <a href="http://interconnected.org/home/">Matt Webb’s</a> <a href="http://interconnected.org/home/more/GoogleSearch.pl.txt">GoogleSearch.pl</a> script. I’ll probably cron the script to search Google every hour. See – powering Blosxom with standard tools like cron. Lovely.</p>

    ]]>
      </content>
    </entry>
  
    <entry>
      <title>Bot window as command line of the future</title>
      <link href="https://qmacro.org/blog/posts/2002/04/21/bot-window-as-command-line-of-the-future/"/>
      <updated>2002-04-21T00:00:00Z</updated>
      <id>https://qmacro.org/blog/posts/2002/04/21/bot-window-as-command-line-of-the-future/</id>
      <content type="html">
        <![CDATA[
      <p>I visited <a href="http://interconnected.org/home/">Matt’s blog</a> today after finding his Google script that I’ve adopted, and followed an interesting link to an article, <a href="http://www.instantmessagingplanet.com/public/article/0,,10817_1012411,00.html">“Search the web via IM”</a>, in which Matt is interviewed regarding <a href="http://interconnected.org/googlematic/">Googlematic</a>. It’s interesting that the ideas expressed at the start of the article:</p>
<blockquote>
<ul>
<li>Do you use your IM client so much that you feel like you live in it? Would you like to use it for tasks other than one-to-one communication — say, for looking up Web pages? *</li>
</ul>
</blockquote>
<p>are in line with what I wrote about in an article about Jabber and bots called <a href="http://web.archive.org/web/20040203121753/http://www.openp2p.com/pub/a/p2p/2002/01/11/jabber_bots.html">“Is Jabber’s Chatbot the Command Line of the Future?”</a>.</p>
<p>I do like the idea of permanent windows opened and connected to bots providing services.</p>

    ]]>
      </content>
    </entry>
  
</feed>
