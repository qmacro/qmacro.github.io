SAP Developer News, October 17th, 2024
application-developmentblog-board
2024-10-17
https://community.sap.com/t5/application-development-blog-posts/sap-developer-news-october-17th-2024/ba-p/13902922
2024-10-17-sap-developer-news-october-17th-2024
<P><div class="video-embed-center video-embed"><iframe class="embedly-embed" src="https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2Fg4It7Eeisu8%3Ffeature%3Doembed&amp;display_name=YouTube&amp;url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3Dg4It7Eeisu8&amp;image=https%3A%2F%2Fi.ytimg.com%2Fvi%2Fg4It7Eeisu8%2Fhqdefault.jpg&amp;type=text%2Fhtml&amp;schema=youtube" width="600" height="337" scrolling="no" title="CAP Sept, Fiori Innovation, Cloud Integration, Flexso Tech Day, Devtoberfest | SAP Developer News" frameborder="0" allow="autoplay; fullscreen; encrypted-media; picture-in-picture;" allowfullscreen="true"></iframe></div></P><P><STRONG><SPAN>ITEMS</SPAN></STRONG></P><P><STRONG><SPAN>SAP Cloud Application Programming Model September 2024 Release</SPAN></STRONG><SPAN>&nbsp;</SPAN></P><UL><LI><SPAN>Details in Capire </SPAN><A href="https://cap.cloud.sap/docs/releases/sep24" target="_blank" rel="noopener nofollow noreferrer"><SPAN>https://cap.cloud.sap/docs/releases/sep24</SPAN></A> <SPAN>&nbsp;</SPAN></LI></UL><P><STRONG><SPAN>SAP Fiori Innovation Day</SPAN></STRONG><SPAN>&nbsp;</SPAN></P><UL><LI><SPAN>SAP Fiori Innovation Day </SPAN><A href="https://events.sap.com/eur/sap-fiori-innovation-day-heidelberg-2024/en/home" target="_blank" rel="noopener noreferrer"><SPAN>https://events.sap.com/eur/sap-fiori-innovation-day-heidelberg-2024/en/home</SPAN></A><SPAN>&nbsp;</SPAN></LI></UL><P><STRONG><SPAN>SAP Cloud Integration News</SPAN></STRONG><SPAN>&nbsp;</SPAN></P><UL><LI><SPAN>Message Status Overview in Cloud Integration </SPAN><A href="https://help.sap.com/docs/cloud-integration/sap-cloud-integration/monitor-message-status-overview" target="_blank" rel="noopener noreferrer"><SPAN>https://help.sap.com/docs/cloud-integration/sap-cloud-integration/monitor-message-status-overview</SPAN></A><SPAN>&nbsp;</SPAN><SPAN>&nbsp;</SPAN></LI></UL><UL><LI><SPAN>SMB Adapter in Cloud Integration </SPAN><A href="https://api.sap.com/package/SMBAdapterforSAPIntegrationSuite/overview" target="_blank" rel="noopener noreferrer"><SPAN>https://api.sap.com/package/SMBAdapterforSAPIntegrationSuite/overview</SPAN></A><SPAN>&nbsp;</SPAN></LI></UL><UL><LI><SPAN>Message Transform utilities in Cloud Integration </SPAN><A href="https://api.sap.com/package/com.sap.integration.cloud.utilities.MessageTransformations/overview" target="_blank" rel="noopener noreferrer"><SPAN>https://api.sap.com/package/com.sap.integration.cloud.utilities.MessageTransformations/overview</SPAN></A><SPAN>&nbsp;</SPAN></LI></UL><P><STRONG><SPAN>Flexso Tech Day 2024</SPAN></STRONG><SPAN>&nbsp;</SPAN></P><UL><LI><SPAN>Event website </SPAN><A href="https://www.flexso.com/en/events/tech-day-2024" target="_blank" rel="noopener nofollow noreferrer"><SPAN>https://www.flexso.com/en/events/tech-day-2024</SPAN></A> <SPAN>&nbsp;</SPAN></LI></UL><P><STRONG><SPAN>Devtoberfest Week 4</SPAN></STRONG><SPAN>&nbsp;</SPAN></P><UL><LI><SPAN>Devtoberfest sessioÂ¡n calendar </SPAN><A href="https://community.sap.com/t5/devtoberfest/eb-p/devtoberfest-events?calendar=true" target="_blank"><SPAN>https://community.sap.com/t5/devtoberfest/eb-p/devtoberfest-events?calendar=true</SPAN></A><SPAN>&nbsp;</SPAN></LI></UL><UL><LI><SPAN>Devtoberfest contest </SPAN><A href="https://community.sap.com/t5/devtoberfest-blog-posts/devtoberfest-2024-contest/ba-p/13781593" target="_blank"><SPAN>https://community.sap.com/t5/devtoberfest-blog-posts/devtoberfest-2024-contest/ba-p/13781593</SPAN></A><SPAN>&nbsp;</SPAN></LI></UL><P><SPAN>================================================================================</SPAN><SPAN>&nbsp;</SPAN></P><P><STRONG>CHAPTER TITLES&nbsp;&nbsp;</STRONG></P><P><SPAN>0:00 Intro</SPAN><SPAN>&nbsp;<BR /></SPAN><SPAN>0:07 SAP Cloud Application Programming Model September 2024 Release</SPAN><SPAN>&nbsp;<BR /></SPAN><SPAN>2:28 SAP Fiori Innovation Day</SPAN><SPAN>&nbsp;<BR /></SPAN><SPAN>3:10 SAP Cloud Integration News</SPAN><SPAN>&nbsp;<BR /></SPAN><SPAN>4:26 Flexso Tech Day 2024</SPAN><SPAN>&nbsp;<BR /></SPAN><SPAN>5:22 Devtoberfest Week 4</SPAN><SPAN>&nbsp;</SPAN></P><P><STRONG>TRANSCRIPT</STRONG></P><P>[Ajay] Hello, developers, September 2024 release of CAP is now available. The first update is about analytics for Capire Matomo is used to collect anonymized usage data for Capire, and users will have the option to disable the tracking. Coming to the Node.js updates, you can now import type definitions generated by the CDS typer on the top level code, even in the test code. Now we have richer JavaScript and TypeScript snippets in the compiler, which can now carry type information, allowing you to get a better insight into the APIs used there. Instance-based restrictions for bound actions and functions are now also enforced. SAP Cloud Application Event Hub is the new default offering for messaging in SAP Business Technology Platform, Integrating with SAP Cloud Application Event Hub is provided via a CDS plugin <a href="https://community.sap.com/t5/user/viewprofilepage/user-id/163398">@cap</a>-js/event-broker. Moving on to Java updates, we have enhancement to the code generator, where we now have stricter setters in the accessor interfaces. Accessor interfaces now offer the new factory method to access the data in the given map. Monitoring health status of MTX Sidecar is enabled with a new health indicator model provider. Parameter aliases in OData V4 for the entity key values and function parameter values are now also supported. You can easily add handler stubs using add handler CLI command in Java. A new serious property, ui5.version allows you to configure UI5 versions used by the Fiori preview. Finally, in the tools update, we have got beta release to visualize deployment descriptor mta.yaml file. This helps you to get a graphical overview of your microservices architecture and the interplay between the application and the services. This also works as a visual linter. There are two new experimental CDS lint checks, sql-null-comparison and no-java-keywords. For more details, please check the links provided in the description.</P><P>[Nico] Hi everyone, and welcome to the SAP Developer News. The SAP Fiori Innovation Day will happen on November 19th in Heidelberg, Germany in the SAP App Haus, interestingly the same location we were at for SAP TechEd Virtual a couple of weeks ago. The SAP Fiori Innovation Day is open for everyone, and it will be a packed day with content about the SAP Fiori design system, SAP Fiori elements, AI of course, and it will also contain partner sessions. There will also be a hands-on session about the SAP Fiori elements flexible programming model. Check out the link in the description for more information and to register. See you. Bye.</P><P>[Antonio] Hola, SAP developers. I have some exciting news to share with you today. The message status overview that we are so used to in SAP PI/PO is now available in SAP Integration Suite. The message status overview page provides a customizable overview of the messages process and their statuses in a selected time frame, as well as quick navigation to and from the message monitoring in your tenant. Also, there is a new adapter available to us in Cloud Integration. This is the SMB adapter, which will allow you to connect to a server using the SMB protocol, meaning that we can interact with an SMB server and read and write files. This is especially relevant for those on-premises integration scenarios. And finally, there is now an alternative solution in Cloud Integration to the MessageTransformBean adapter module that we often use in SAP PI/PO to aid with the transformation of the message during the runtime. It is in the form of Groovy scripts, which support most of the features that existed on the MTB module. Make sure to check it out. Ciao.</P><P>[DJ] If you're in or can get to the Brussels / Mechelen area of Belgium in early November, then there's a Tech Day happening on the latest SAP tools and technologies. Flexo Tech Day 2024 is happening on Thursday, the 7th of November. And following the welcome and keynote, There are sessions across three separate tracks, analytics and integration, extensions, and there's also a trending track. Now, the full agenda is online. The day is open to everyone, but spaces are limited. So head on over to the website to register. And at the end of the day, there's gonna be a beer tasting, mostly because the day is being held in a brewery. What's not to like? I'll be there. See you there too.</P><P>[Nico] Hi everyone, and welcome to the SAP Developer News. We're just wrapping up week three of Devtoberfest, which means there's just one week left for Devtoberfest 2024. So next week we'll have five more days of packed content, all about SAP development. So on Monday, it will be ABAP and CAP again. On Tuesday, Tooling Tuesday, we'll talk about the SAP Build family. Wednesday is Integration Day. On Thursday we talk about MAD, which is machine learning, AI and data. And Friday will be Frontend Friday as well as Fun Friday. And for Fun Friday next week there will be Spooktoberfest, so expect a spooky day. Overall, next week I counted 24 sessions scheduled, that's a lot of content and it's great content too. We hope to see many more familiar faces as well as new faces. Welcome if you're new to this channel. Now's your chance to earn points in the Devtoberfest gameboard and to progress towards Nerdvana, which would qualify you for the Devtoberfest grand prize. So hope to see you around and see you next time.</P>
---
Task 12 - Give us feedback about this challenge (July Developer Challenge - "Reverse APIs")
application-developmentforum-board
2024-07-30
https://community.sap.com/t5/application-development-discussions/task-12-give-us-feedback-about-this-challenge-july-developer-challenge-quot/td-p/13776497
2024-07-30-task-12-give-us-feedback-about-this-challenge-july-developer-challenge-quot
<P>This last (bonus) task of the <A href="https://community.sap.com/t5/application-development-blog-posts/july-developer-challenge-quot-reverse-apis-quot/ba-p/13749653" target="_self">July Developer Challenge on "Reverse APIs"</A> is a simple but important one. We want to know what you thought of this month's challenge. Reply to this discussion thread and tell us what you liked, what you didn't like, what you learned, whether you found it helpful, enjoyable, or something else! We'd love to know, because only with feedback can we make things better and improve how we help you be successful (after all, that's our <A href="https://developers.sap.com/developer-advocates.html" target="_self" rel="noopener noreferrer">mission</A>!).</P><P>Thank you in advance for the feedback, and thank you for participating!</P>
---
Task 11 - Using implicit parameters with a bound function (July Developer Challenge - "Reverse APIs"
application-developmentforum-board
2024-07-30
https://community.sap.com/t5/application-development-discussions/task-11-using-implicit-parameters-with-a-bound-function-july-developer/td-p/13776485
2024-07-30-task-11-using-implicit-parameters-with-a-bound-function-july-developer
<P>This is the final task in the<SPAN>&nbsp;</SPAN><A href="https://community.sap.com/t5/application-development-blog-posts/2024-07-quot-reverse-apis-quot-sap-developer-challenge/ba-p/13749653" target="_blank">July Developer Challenge - "Reverse APIs"</A>. Well done for making it this far!<SPAN>&nbsp;</SPAN><span class="lia-unicode-emoji" title=":party_popper:">ð</span></P><H2 id="toc-hId-1021274013">Background</H2><P>In the tasks in this challenge so far you've encountered, amongst other things, actions and functions. But all of those actions and functions you've had to define and write implementations for ... have been<SPAN>&nbsp;</SPAN><EM>unbound</EM>, i.e. not bound to a specific instance of an entity. The Capire section<SPAN>&nbsp;</SPAN><A href="https://cap.cloud.sap/docs/cds/cdl#actions" target="_blank" rel="nofollow noopener noreferrer">Custom Actions and Functions</A><SPAN>&nbsp;</SPAN>is relevant here. Think of these types of actions and functions as being at the service level (vaguely like static methods in OO).</P><P>With that section there's a subsection<SPAN>&nbsp;</SPAN><A href="https://cap.cloud.sap/docs/cds/cdl#bound-actions" target="_blank" rel="nofollow noopener noreferrer">Bound Actions and Functions</A><SPAN>&nbsp;</SPAN>which describe actions and functions that can be defined to be in the context of an entity (to continue the vague OO analogy, these are like instance methods).</P><P>In this task you'll define a bound function, and (will be encouraged to) use destructuring to determine the implicit binding parameter (this binding parameter can also be modelled explicitly but we won't be doing that as it's far less common).</P><H3 id="toc-hId-953843227">Defining a bound function</H3><P>Check the<SPAN>&nbsp;</SPAN><A href="https://cap.cloud.sap/docs/cds/cdl#bound-actions" target="_blank" rel="nofollow noopener noreferrer">Capire docs</A><SPAN>&nbsp;</SPAN>to learn how to define a bound function, in CDL. It involves declaring an<SPAN>&nbsp;</SPAN>actions<SPAN>&nbsp;</SPAN>block as a continuation of the entity definition to which you want your function bound. Note that despite the block having the name<SPAN>&nbsp;</SPAN>actions, it is for containing definitions of both bound actions<SPAN>&nbsp;</SPAN><EM>and</EM><SPAN>&nbsp;</SPAN>functions.</P><H3 id="toc-hId-757329722">Implementing a bound function</H3><P>Implementing a bound action or function is pretty much the same as implementing an unbound one. The only difference really is that you need to get the value of the binding parameter, i.e. the key that the infrastructure gives your handler to point to the specific instance of the entity in the context of which the bound action or function is being called.</P><P>Here's the difference, using the Northbreeze service, served via the OData adapter, at the default path. First, let's remind ourselves of how an unbound function is called, which is like this - note the absence of any entity name or key:</P><DIV class=""><PRE>/odata/v4/northbreeze/unboundFunction()</PRE></DIV><P>Now, a bound function is called like this - note the function name follows the path of a specific entity:</P><DIV class=""><PRE>/odata/v4/northbreeze/Products(42)/boundFunction()</PRE></DIV><P>or (using the OData V4<SPAN>&nbsp;</SPAN><A href="https://docs.oasis-open.org/odata/odata/v4.01/os/part2-url-conventions/odata-v4.01-os-part2-url-conventions.html#_Toc31360937" target="_blank" rel="nofollow noopener noreferrer">key-as-segment</A><SPAN>&nbsp;</SPAN>approach) like this:</P><DIV class=""><PRE>/odata/v4/northbreeze/Products/42/boundFunction()</PRE></DIV><P>The value<SPAN>&nbsp;</SPAN>42<SPAN>&nbsp;</SPAN>is the value of the binding parameter that you need to implement such a bound function. Where is that? It's available in the incoming<SPAN>&nbsp;</SPAN><A href="https://cap.cloud.sap/docs/node.js/events#cds-request" target="_blank" rel="nofollow noopener noreferrer">request</A>, specifically in the<SPAN>&nbsp;</SPAN><A href="https://cap.cloud.sap/docs/node.js/events#params" target="_blank" rel="nofollow noopener noreferrer">params</A><SPAN>&nbsp;</SPAN>property.</P><P>In order to retrieve the value, you'll need to grab it from the request object. How you do that is of course up to you, but I'd encourage you to try it in the "normal" way of a dotted path notation from<SPAN>&nbsp;</SPAN>req, for example:</P><DIV class=""><PRE><SPAN class="">const</SPAN> <SPAN class="">ID</SPAN> <SPAN class="">=</SPAN> <SPAN class="">req</SPAN><SPAN class="">.</SPAN><SPAN class="">params</SPAN><SPAN class="">[</SPAN><SPAN class="">0</SPAN><SPAN class="">]</SPAN><SPAN class="">.</SPAN><SPAN class="">ProductID</SPAN></PRE></DIV><P>but also using a<SPAN>&nbsp;</SPAN><A href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment" target="_blank" rel="nofollow noopener noreferrer">destructuring assignment</A><SPAN>&nbsp;</SPAN>in the actual function signature, i.e.</P><DIV class=""><PRE><SPAN class="">async</SPAN> <SPAN class="">(</SPAN><SPAN class="">&lt;</SPAN><SPAN class="">SOME-DESTRUCTURING-ASSIGNMENT-HERE</SPAN><SPAN class="">&gt;</SPAN>) =<SPAN class="">&gt;</SPAN> <SPAN class="">{</SPAN> ... <SPAN class="">}</SPAN></PRE></DIV><P>Remember also that you'll probably want to re-check the details of the<SPAN>&nbsp;</SPAN><A href="https://pages.github.tools.sap/cap/docs/node.js/core-services#srv-on-request" target="_blank" rel="noopener nofollow noreferrer">srv.on</A><SPAN>&nbsp;</SPAN>request, as you'll want to include the<SPAN>&nbsp;</SPAN>Products<SPAN>&nbsp;</SPAN>entity name in that incantation in the optional<SPAN>&nbsp;</SPAN>entity?<SPAN>&nbsp;</SPAN>position:</P><DIV class=""><PRE><SPAN class="">function</SPAN> <SPAN class="">srv</SPAN><SPAN class="">.</SPAN><SPAN class="">on</SPAN> <SPAN class="">(</SPAN><SPAN class="">event</SPAN><SPAN class="">,</SPAN> <SPAN class="">entity</SPAN>?<SPAN class="">,</SPAN> <SPAN class="">handler</SPAN>: <SPAN class="">(</SPAN>
  <SPAN class="">req</SPAN>  : <SPAN class="">cds</SPAN><SPAN class="">.</SPAN><SPAN class="">Request</SPAN><SPAN class="">,</SPAN>
  <SPAN class="">next</SPAN> : <SPAN class="">function</SPAN>
<SPAN class="">)</SPAN><SPAN class="">)</SPAN></PRE></DIV><H2 id="toc-hId-431733498">The requirements</H2><P>Here are the specific requirements for this task.</P><P>Define a bound function called<SPAN>&nbsp;</SPAN>stockValue<SPAN>&nbsp;</SPAN>on the<SPAN>&nbsp;</SPAN>Products<SPAN>&nbsp;</SPAN>entity in your Northbreeze service. This should return an integer value being the value of the bound product's stock, which should be calculated as the product's<SPAN>&nbsp;</SPAN>UnitPrice<SPAN>&nbsp;</SPAN>multiplied by its<SPAN>&nbsp;</SPAN>UnitsInStock. For example, for product<SPAN>&nbsp;</SPAN><A href="https://qmacro.cfapps.eu10.hana.ondemand.com/northbreeze/Products/1" target="_blank" rel="nofollow noopener noreferrer">Chai</A>:</P><DIV class=""><PRE>{
  <SPAN class="">"@odata.context"</SPAN>: <SPAN class=""><SPAN class="">"</SPAN>$metadata#Products/$entity<SPAN class="">"</SPAN></SPAN>,
  <SPAN class="">"ProductID"</SPAN>: <SPAN class="">1</SPAN>,
  <SPAN class="">"ProductName"</SPAN>: <SPAN class=""><SPAN class="">"</SPAN>Chai<SPAN class="">"</SPAN></SPAN>,
  <SPAN class="">"QuantityPerUnit"</SPAN>: <SPAN class=""><SPAN class="">"</SPAN>10 boxes x 20 bags<SPAN class="">"</SPAN></SPAN>,
  <SPAN class="">"UnitPrice"</SPAN>: <SPAN class="">18</SPAN>,
  <SPAN class="">"Category_CategoryID"</SPAN>: <SPAN class="">1</SPAN>,
  <SPAN class="">"Supplier_SupplierID"</SPAN>: <SPAN class="">1</SPAN>,
  <SPAN class="">"UnitsInStock"</SPAN>: <SPAN class="">39</SPAN>,
  <SPAN class="">"UnitsOnOrder"</SPAN>: <SPAN class="">0</SPAN>,
  <SPAN class="">"ReorderLevel"</SPAN>: <SPAN class="">10</SPAN>,
  <SPAN class="">"Discontinued"</SPAN>: <SPAN class="">false</SPAN>
}</PRE></DIV><P>the stock value is 702 (18 x 39).</P><H2 id="toc-hId-235219993">Submitting to the TESTER</H2><P>Now you're ready to submit your CANDIDATE service, with this new API endpoint, to the TESTER!</P><H3 id="toc-hId-167789207">The payload</H3><P>The task identifier you need to supply in the payload of your submission is:<SPAN>&nbsp;</SPAN><STRONG>northbreeze-stockValue</STRONG>.</P><P>You'll have already done this sort of thing<SPAN>&nbsp;</SPAN><A href="https://community.sap.com/t5/application-development-discussions/july-developer-challenge-quot-reverse-apis-quot-task-1-your-first-service/m-p/13752205" target="_blank">previously</A><SPAN>&nbsp;</SPAN>so just head back there for the more detailed instructions if you need them, or to the the section titled "<A href="https://community.sap.com/t5/application-development-blog-posts/2024-07-quot-reverse-apis-quot-sap-developer-challenge/ba-p/13749653#toc-hId--553513390" target="_blank">The Tester service, and making a test request</A>" in the<SPAN>&nbsp;</SPAN><A href="https://community.sap.com/t5/application-development-blog-posts/2024-07-quot-reverse-apis-quot-sap-developer-challenge/ba-p/13749653" target="_blank">main challenge blog post</A>.</P><P>You'll need to submit a JSON payload like this:</P><DIV class=""><PRE>{
  <SPAN class="">"communityid"</SPAN>: <SPAN class=""><SPAN class="">"</SPAN>&lt;your-community-id&gt;<SPAN class="">"</SPAN></SPAN>,
  <SPAN class="">"serviceurl"</SPAN>: <SPAN class=""><SPAN class="">"</SPAN>&lt;the-URL-of-your-service&gt;<SPAN class="">"</SPAN></SPAN>,
  <SPAN class="">"task"</SPAN>: <SPAN class=""><SPAN class="">"</SPAN>northbreeze-stockValue<SPAN class="">"</SPAN></SPAN>
}</PRE></DIV><P>And, just as with the previous (and all further tasks):</P><UL><LI><P>the value for the<SPAN>&nbsp;</SPAN>communityid<SPAN>&nbsp;</SPAN>property should be your ID on this SAP Community platform (e.g. mine is "qmacro")</P></LI><LI><P>the value for the<SPAN>&nbsp;</SPAN>serviceurl<SPAN>&nbsp;</SPAN>property should be the absolute URL (i.e. including the scheme), of your CANDIDATE<SPAN>&nbsp;</SPAN><STRONG>service</STRONG><SPAN>&nbsp;</SPAN>which<SPAN>&nbsp;</SPAN><EM>contains</EM><SPAN>&nbsp;</SPAN>the API endpoint (see<SPAN>&nbsp;</SPAN><A href="https://community.sap.com/t5/application-development-blog-posts/2024-07-quot-reverse-apis-quot-sap-developer-challenge/ba-p/13749653#toc-hId--356999885" target="_blank"><span class="lia-unicode-emoji" title=":information:">â¹ï¸</span><SPAN>&nbsp;</SPAN>A note on URLs and services</A>).</P></LI></UL><P>That's it!</P><H2 id="toc-hId--157807017">Logging of test results</H2><P>Remember that you can check on your progress, and the progress of your fellow participants - all requests are logged and are available in an entity set served by the TESTER service. The entity set URL is<SPAN>&nbsp;</SPAN><A href="https://developer-challenge-2024-07.cfapps.eu10.hana.ondemand.com/tester/Testlog" target="_blank" rel="nofollow noopener noreferrer">https://developer-challenge-2024-07.cfapps.eu10.hana.ondemand.com/tester/Testlog</A><SPAN>&nbsp;</SPAN>and being an OData V4 entity set, all the normal OData system query options are available to you for digging into that information.</P><P>If you have any questions or comments, leave them below!</P>
---
Task 10 - The power of CDL with as-select (July Developer Challenge - "Reverse APIs")
application-developmentforum-board
2024-07-29
https://community.sap.com/t5/application-development-discussions/task-10-the-power-of-cdl-with-as-select-july-developer-challenge-quot/td-p/13774996
2024-07-29-task-10-the-power-of-cdl-with-as-select-july-developer-challenge-quot
<P>This is a task in the<SPAN>&nbsp;</SPAN><A href="https://community.sap.com/t5/application-development-blog-posts/2024-07-quot-reverse-apis-quot-sap-developer-challenge/ba-p/13749653" target="_blank">July Developer Challenge - "Reverse APIs"</A>.</P><P>In this task you'll go on a short but hopefully enlightening journey into views and projections, to see how you can elevate SQL concepts to the service definition level in your CDS model, with the power of CDL. You will add a "single expression" entity to your Northbreeze service, which should provide the response required without any implementation at the code (Node.js or Java) level.</P><H2 id="toc-hId-1021219268">Background</H2><P>In Capire, the<SPAN>&nbsp;</SPAN><A href="https://cap.cloud.sap/docs/cds/cdl#views-and-projections" target="_blank" rel="nofollow noopener noreferrer">Views and Projections</A><SPAN>&nbsp;</SPAN>part of the section covering Core Definition Language (CDL) introduces us to ways of deriving new entities from existing ones by projections, like views in SQL. Two variants are described:</P><UL><LI>as select from</LI><LI>as projection on</LI></UL><P>If you've started with sample CAP services, you're very likely to have come across<SPAN>&nbsp;</SPAN>as projection on<SPAN>&nbsp;</SPAN>as it's near ubiquitous in those samples.</P><P>But what about<SPAN>&nbsp;</SPAN>as select from, what's that all about? Well it's the "batteries included" approach to deriving a view, with all the power of SQL in its CAP-enhanced form, i.e.<SPAN>&nbsp;</SPAN><A href="https://cap.cloud.sap/docs/cds/cql" target="_blank" rel="nofollow noopener noreferrer">CQL</A>.</P><P>If you want to peruse some examples, use the power of GitHub's excellent search facility:</P><P><A href="https://github.com/search?q=org%3Asap-samples+language%3Acds+%22as+select+from%22&amp;type=code" target="_blank" rel="nofollow noopener noreferrer">org:sap-samples language:cds "as select from"</A></P><P>Again, the cds REPL may come in handy here for experimenting with CQL. How about this, with the basic<SPAN>&nbsp;</SPAN><A href="https://github.com/qmacro/northbreeze" target="_blank" rel="nofollow noopener noreferrer">Northbreeze</A><SPAN>&nbsp;</SPAN>service (this experiment will make sense in the requirements section next):</P><DIV class=""><PRE><SPAN class="">await</SPAN> <SPAN class="">cds</SPAN><SPAN class="">.</SPAN><SPAN class="">test</SPAN><SPAN class="">(</SPAN><SPAN class="">)</SPAN>
<SPAN class="">const</SPAN> <SPAN class="">{</SPAN> Products <SPAN class="">}</SPAN> <SPAN class="">=</SPAN> <SPAN class="">cds</SPAN><SPAN class="">.</SPAN><SPAN class="">entities</SPAN>
<SPAN class="">await</SPAN> <SPAN class="">SELECT</SPAN> <SPAN class="">`count(ProductID)`</SPAN> <SPAN class="">.</SPAN><SPAN class="">from</SPAN> <SPAN class="">(</SPAN><SPAN class="">Products</SPAN><SPAN class="">)</SPAN></PRE><DIV class=""><SPAN>Paste that into a cds REPL and see what you get! For example, put these three lines in a file, e.g.</SPAN><SPAN>&nbsp;</SPAN><SPAN>repl-session.js</SPAN><SPAN>&nbsp;</SPAN><SPAN>and then paste it into a new REPL like this:</SPAN></DIV></DIV><DIV class=""><PRE>cds repl <SPAN class="">&lt;</SPAN> repl-session.js</PRE><DIV class=""><SPAN>and you should see something like this:</SPAN></DIV></DIV><DIV class=""><PRE>; cds repl &lt; repl-session.js
Welcome to cds repl v 8.0.3
&gt; const server = await cds.test()
[cds] - loaded model from 2 file(s):

  srv/main.cds
  db/schema.cds

[cds] - connect to db &gt; sqlite { url: ':memory:' }
  &gt; init from db/data/northwind-Suppliers.csv
  &gt; init from db/data/northwind-Products.csv
  &gt; init from db/data/northwind-Categories.csv
/&gt; successfully deployed to in-memory database.

[cds] - using auth strategy {
  kind: 'mocked',
  impl: '../../../../../../../usr/lib/node_modules/@sap/cds-dk/node_modules/@sap/cds/lib/auth/basic-auth'
}

[cds] - using new OData adapter
[cds] - serving northbreeze { path: '/northbreeze' }

[cds] - server listening on { url: 'http://localhost:46113' }
[cds] - launched at 7/26/2024, 2:18:05 PM, version: 8.0.3, in: 663.929ms
&gt; const { Products } = cds.entities
&gt; await SELECT `count(ProductID)` .from (Products)
[ { count: 77 } ]</PRE></DIV><H2 id="toc-hId-824705763">The requirements</H2><P>Here are the specific requirements for this task.</P><P>Define a new entity at the service layer, in your<SPAN>&nbsp;</SPAN>northbreeze<SPAN>&nbsp;</SPAN>service. This entity should be called<SPAN>&nbsp;</SPAN>TotalProducts<SPAN>&nbsp;</SPAN>and defined using the<SPAN>&nbsp;</SPAN>as select from<SPAN>&nbsp;</SPAN>variant as mentioned earlier. It should return a count of the number of products, like this:</P><DIV class=""><PRE>{
  <SPAN class="">"@odata.context"</SPAN>: <SPAN class=""><SPAN class="">"</SPAN>$metadata#TotalProducts<SPAN class="">"</SPAN></SPAN>,
  <SPAN class="">"value"</SPAN>: [
    {
      <SPAN class="">"count"</SPAN>: <SPAN class="">77</SPAN>
    }
  ]
}</PRE></DIV><P>Note the shape of the payload response, in this JSON representation - the<SPAN>&nbsp;</SPAN>value<SPAN>&nbsp;</SPAN>property is an array with a single element, which is an object, which itself has a single property which is<SPAN>&nbsp;</SPAN>count. The type of that property's value is of course an integer.</P><P>If you find yourself implementing anything in your<SPAN>&nbsp;</SPAN>services.js<SPAN>&nbsp;</SPAN>file, think again <span class="lia-unicode-emoji" title=":slightly_smiling_face:">ð</span></P><P>That's it!</P><H2 id="toc-hId-628192258">Submitting to the TESTER</H2><P>Now you're ready to submit your CANDIDATE service, with this new API endpoint, to the TESTER!</P><H3 id="toc-hId-560761472">The payload</H3><P>The task identifier you need to supply in the payload of your submission is:<SPAN>&nbsp;</SPAN><STRONG>northbreeze-TotalProducts</STRONG>.</P><P>You'll have already done this sort of thing<SPAN>&nbsp;</SPAN><A href="https://community.sap.com/t5/application-development-discussions/july-developer-challenge-quot-reverse-apis-quot-task-1-your-first-service/m-p/13752205" target="_blank">previously</A><SPAN>&nbsp;</SPAN>so just head back there for the more detailed instructions if you need them, or to the the section titled "<A href="https://community.sap.com/t5/application-development-blog-posts/2024-07-quot-reverse-apis-quot-sap-developer-challenge/ba-p/13749653#toc-hId--553513390" target="_blank">The Tester service, and making a test request</A>" in the<SPAN>&nbsp;</SPAN><A href="https://community.sap.com/t5/application-development-blog-posts/2024-07-quot-reverse-apis-quot-sap-developer-challenge/ba-p/13749653" target="_blank">main challenge blog post</A>.</P><P>You'll need to submit a JSON payload like this:</P><DIV class=""><PRE>{
  <SPAN class="">"communityid"</SPAN>: <SPAN class=""><SPAN class="">"</SPAN>&lt;your-community-id&gt;<SPAN class="">"</SPAN></SPAN>,
  <SPAN class="">"serviceurl"</SPAN>: <SPAN class=""><SPAN class="">"</SPAN>&lt;the-URL-of-your-service&gt;<SPAN class="">"</SPAN></SPAN>,
  <SPAN class="">"task"</SPAN>: <SPAN class=""><SPAN class="">"</SPAN>northbreeze-TotalProducts<SPAN class="">"</SPAN></SPAN>
}</PRE></DIV><P>And, just as with the previous (and all further tasks):</P><UL><LI><P>the value for the<SPAN>&nbsp;</SPAN>communityid<SPAN>&nbsp;</SPAN>property should be your ID on this SAP Community platform (e.g. mine is "qmacro")</P></LI><LI><P>the value for the<SPAN>&nbsp;</SPAN>serviceurl<SPAN>&nbsp;</SPAN>property should be the absolute URL (i.e. including the scheme), of your CANDIDATE<SPAN>&nbsp;</SPAN><STRONG>service</STRONG><SPAN>&nbsp;</SPAN>which<SPAN>&nbsp;</SPAN><EM>contains</EM><SPAN>&nbsp;</SPAN>the API endpoint (see<SPAN>&nbsp;</SPAN><A href="https://community.sap.com/t5/application-development-blog-posts/2024-07-quot-reverse-apis-quot-sap-developer-challenge/ba-p/13749653#toc-hId--356999885" target="_blank"><span class="lia-unicode-emoji" title=":information:">â¹ï¸</span><SPAN>&nbsp;</SPAN>A note on URLs and services</A>).</P></LI></UL><P>That's it!</P><H2 id="toc-hId-235165248">Logging of test results</H2><P>Remember that you can check on your progress, and the progress of your fellow participants - all requests are logged and are available in an entity set served by the TESTER service. The entity set URL is<SPAN>&nbsp;</SPAN><A href="https://developer-challenge-2024-07.cfapps.eu10.hana.ondemand.com/tester/Testlog" target="_blank" rel="nofollow noopener noreferrer">https://developer-challenge-2024-07.cfapps.eu10.hana.ondemand.com/tester/Testlog</A><SPAN>&nbsp;</SPAN>and being an OData V4 entity set, all the normal OData system query options are available to you for digging into that information.</P><P>Until the next task, have fun, and if you have any questions or comments, leave them below!</P>
---
Task 9 - Using CQL in an unbound action (July Developer Challenge - "Reverse APIs")
application-developmentforum-board
2024-07-26
https://community.sap.com/t5/application-development-discussions/task-9-using-cql-in-an-unbound-action-july-developer-challenge-quot-reverse/td-p/13772607
2024-07-26-task-9-using-cql-in-an-unbound-action-july-developer-challenge-quot-reverse
<P>This is a task in the<SPAN>&nbsp;</SPAN><A href="https://community.sap.com/t5/application-development-blog-posts/2024-07-quot-reverse-apis-quot-sap-developer-challenge/ba-p/13749653" target="_blank">July Developer Challenge - "Reverse APIs"</A>.</P><P>In this task you'll define and implement an unbound action, that does something that you might remember from the<SPAN>&nbsp;</SPAN><A href="https://community.sap.com/t5/technology-blogs-by-sap/sap-developer-challenge-apis/ba-p/13573168" target="_blank">Developer Challenge on APIs last year in August</A>, and you'll end up writing some (hopefully) interesting code for the implementation.</P><H2 id="toc-hId-1021156525">Background</H2><P>Last year we ran a<SPAN>&nbsp;</SPAN><A href="https://community.sap.com/t5/technology-blogs-by-sap/sap-developer-challenge-apis/ba-p/13573168" target="_blank">Developer Challenge on APIs</A>. In one of the tasks -<SPAN>&nbsp;</SPAN><A href="https://community.sap.com/t5/application-development-discussions/sap-developer-challenge-apis-task-3-have-a-northbreeze-product-selected-for/m-p/277972" target="_blank">Task 3 - Have a Northbreeze product selected for you</A><SPAN>&nbsp;</SPAN>- you needed to make a call to an API endpoint supplying your SAP Community ID and it would return a Northwind product. In the<SPAN>&nbsp;</SPAN><A href="https://community.sap.com/t5/application-development-discussions/sap-developer-challenge-apis-task-3-have-a-northbreeze-product-selected-for/m-p/277972#toc-hId--900893759" target="_blank">example</A><SPAN>&nbsp;</SPAN>for my ID, "qmacro", it showed this being returned:</P><DIV class=""><PRE>{
  <SPAN class="">"@odata.context"</SPAN>: <SPAN class=""><SPAN class="">"</SPAN>$metadata#Edm.String<SPAN class="">"</SPAN></SPAN>,
  <SPAN class="">"value"</SPAN>: <SPAN class=""><SPAN class="">"</SPAN>RÃ¶ssle Sauerkraut<SPAN class="">"</SPAN></SPAN>
}</PRE><DIV class=""><SPAN>In other words, the product "corresponding to" my SAP Community ID is "RÃ¶ssle Sauerkraut". Different products were returned for different SAP Community IDs, so that your answers would be different to each other. The calculation of</SPAN><SPAN>&nbsp;</SPAN><EM>which</EM><SPAN>&nbsp;</SPAN><SPAN>product to return was based on the value of your SAP Community ID.</SPAN></DIV></DIV><P>In this task, you will need to define an API endpoint, in the form of an unbound action, and write the implementation to calculate, look up and return the name of a product that corresponds to the SAP Community ID that is sent by the TESTER.</P><H3 id="toc-hId-953725739">Correspondence calculation</H3><P>So how should you determine which product to select for a given SAP Community ID? The same way that it was determined in last year's Developer Challenge for<SPAN>&nbsp;</SPAN><A href="https://community.sap.com/t5/application-development-discussions/sap-developer-challenge-apis-task-3-have-a-northbreeze-product-selected-for/m-p/277972" target="_blank">that task</A>. And that is to turn the SAP Community ID string value into a numeric value, and then use that to select a specific product with an ID (in<SPAN>&nbsp;</SPAN>ProductID) that matches that numeric value.</P><P>Here's the logic:</P><P>First:</P><UL><LI>ensure the SAP Community ID is all lower case</LI><LI>convert each character to its equivalent decimal ASCII code</LI><LI>add the resulting list of ASCII codes together to make a total</LI></UL><P>Then:</P><UL><LI>determine how many products are in your Northbreeze data</LI><LI>read a single product where the key is the ASCII codes total value</LI></UL><P>Noting that:</P><UL><LI>you will need to use modulo arithmetic to ensure that the ASCII codes total value falls within the range between 1 and the total number of Northbreeze products</LI></UL><P>And here's an example of that logic in action, where (for the sake of illustration) the SAP Community ID value "QmacrO" is sent in the payload of the HTTP request:</P><UL><LI>converting "QmacrO" to lower case gives "qmacro"</LI><LI>the decimal ASCII codes for "qmacro" are 113, 109, 97, 99, 114 and 111</LI><LI>added together, these codes come to 643</LI><LI>there are<SPAN>&nbsp;</SPAN><A href="https://qmacro.cfapps.eu10.hana.ondemand.com/northbreeze/Products/$count" target="_blank" rel="nofollow noopener noreferrer">77 Northbreeze products</A></LI><LI>using modulo arithmetic to turn 643 into a number between 1 and 77, it becomes 28</LI><LI>the product with ID 28 is<SPAN>&nbsp;</SPAN><A href="https://qmacro.cfapps.eu10.hana.ondemand.com/northbreeze/Products/28" target="_blank" rel="nofollow noopener noreferrer">RÃ¶ssle Sauerkraut</A></LI></UL><P>Be careful with the modulo calculation, because you need to take into account that the result of a modulo calculation could be 0, which is not in the ID range. It would also never be 77. This is why 643 modulo 77 becomes 28, not 27 (basically, do the modulo calculation and add 1).</P><P>Clearly these instructions have already told you that there are 77 products. You should have 77 products too if you<SPAN>&nbsp;</SPAN><A href="https://community.sap.com/t5/application-development-discussions/task-7-using-cql-in-an-unbound-function-implementation-july-developer/td-p/13767476#toc-hId-952949467" target="_blank">started with the repo as recommended</A>. Nevertheless, we encourage you to use some CQL in your implementation to programatically determine how many products there are, not just set the value<SPAN>&nbsp;</SPAN>77<SPAN>&nbsp;</SPAN>in a constant <span class="lia-unicode-emoji" title=":slightly_smiling_face:">ð</span></P><H2 id="toc-hId-628129515">The requirements</H2><P>Here are the specific requirements for this task.</P><P>Add an unbound action called<SPAN>&nbsp;</SPAN>selectProduct<SPAN>&nbsp;</SPAN>to the definition of your<SPAN>&nbsp;</SPAN>northbreeze<SPAN>&nbsp;</SPAN>service. It should expect a String value for a single parameter named<SPAN>&nbsp;</SPAN>communityid, and it should return the same type as the<SPAN>&nbsp;</SPAN>ProductName<SPAN>&nbsp;</SPAN>element in the<SPAN>&nbsp;</SPAN>Products<SPAN>&nbsp;</SPAN>entity type.</P><P>Note that although you will of course be supplying your SAP Community ID as normal when you submit to the TESTER (see the next section), as usual, it will be the<SPAN>&nbsp;</SPAN><EM>TESTER</EM><SPAN>&nbsp;</SPAN>that picks and sends an SAP Community ID to<SPAN>&nbsp;</SPAN><EM>your</EM><SPAN>&nbsp;</SPAN>endpoint, not you, of course.</P><P>In the implementation, use CQL to determine the number of products you have, and then use the logic described in the "Correspondence calculation" section earlier to determine the product ID, based on the (semi-random) SAP Community ID value received. Then use CQL to retrieve that product and return the product name.</P><H2 id="toc-hId-431616010">Submitting to the TESTER</H2><P>Now you're ready to submit your CANDIDATE service, with this new API endpoint, to the TESTER!</P><H3 id="toc-hId-364185224">The payload</H3><P>The task identifier you need to supply in the payload of your submission is:<SPAN>&nbsp;</SPAN><STRONG>northbreeze-selectProduct</STRONG>.</P><P>You'll have already done this sort of thing<SPAN>&nbsp;</SPAN><A href="https://community.sap.com/t5/application-development-discussions/july-developer-challenge-quot-reverse-apis-quot-task-1-your-first-service/m-p/13752205" target="_blank">previously</A><SPAN>&nbsp;</SPAN>so just head back there for the more detailed instructions if you need them, or to the the section titled "<A href="https://community.sap.com/t5/application-development-blog-posts/2024-07-quot-reverse-apis-quot-sap-developer-challenge/ba-p/13749653#toc-hId--553513390" target="_blank">The Tester service, and making a test request</A>" in the<SPAN>&nbsp;</SPAN><A href="https://community.sap.com/t5/application-development-blog-posts/2024-07-quot-reverse-apis-quot-sap-developer-challenge/ba-p/13749653" target="_blank">main challenge blog post</A>.</P><P>You'll need to submit a JSON payload like this:</P><DIV class=""><PRE>{
  <SPAN class="">"communityid"</SPAN>: <SPAN class=""><SPAN class="">"</SPAN>&lt;your-community-id&gt;<SPAN class="">"</SPAN></SPAN>,
  <SPAN class="">"serviceurl"</SPAN>: <SPAN class=""><SPAN class="">"</SPAN>&lt;the-URL-of-your-service&gt;<SPAN class="">"</SPAN></SPAN>,
  <SPAN class="">"task"</SPAN>: <SPAN class=""><SPAN class="">"</SPAN>northbreeze-selectProduct<SPAN class="">"</SPAN></SPAN>
}</PRE><DIV class=""><SPAN>And, just as with the previous (and all further tasks):</SPAN></DIV></DIV><UL><LI><P>the value for the<SPAN>&nbsp;</SPAN>communityid<SPAN>&nbsp;</SPAN>property should be your ID on this SAP Community platform (e.g. mine is "qmacro")</P></LI><LI><P>the value for the<SPAN>&nbsp;</SPAN>serviceurl<SPAN>&nbsp;</SPAN>property should be the absolute URL (i.e. including the scheme), of your CANDIDATE<SPAN>&nbsp;</SPAN><STRONG>service</STRONG><SPAN>&nbsp;</SPAN>which<SPAN>&nbsp;</SPAN><EM>contains</EM><SPAN>&nbsp;</SPAN>the API endpoint (see<SPAN>&nbsp;</SPAN><A href="https://community.sap.com/t5/application-development-blog-posts/2024-07-quot-reverse-apis-quot-sap-developer-challenge/ba-p/13749653#toc-hId--356999885" target="_blank"><span class="lia-unicode-emoji" title=":information:">â¹ï¸</span><SPAN>&nbsp;</SPAN>A note on URLs and services</A>).</P></LI></UL><P>That's it!</P><H2 id="toc-hId-38589000">Logging of test results</H2><P>Remember that you can check on your progress, and the progress of your fellow participants - all requests are logged and are available in an entity set served by the TESTER service. The entity set URL is<SPAN>&nbsp;</SPAN><A href="https://developer-challenge-2024-07.cfapps.eu10.hana.ondemand.com/tester/Testlog" target="_blank" rel="nofollow noopener noreferrer">https://developer-challenge-2024-07.cfapps.eu10.hana.ondemand.com/tester/Testlog</A><SPAN>&nbsp;</SPAN>and being an OData V4 entity set, all the normal OData system query options are available to you for digging into that information.</P><P>Until the next task, have fun, and if you have any questions or comments, leave them below!</P>
---
Task 8 - Responding to an OData query with navigation (July Developer Challenge - "Reverse APIs")
application-developmentforum-board
2024-07-24
https://community.sap.com/t5/application-development-discussions/task-8-responding-to-an-odata-query-with-navigation-july-developer/td-p/13769896
2024-07-24-task-8-responding-to-an-odata-query-with-navigation-july-developer
<P>This is a task in the<SPAN>&nbsp;</SPAN><A href="https://community.sap.com/t5/application-development-blog-posts/2024-07-quot-reverse-apis-quot-sap-developer-challenge/ba-p/13749653" target="_blank">July Developer Challenge - "Reverse APIs"</A>.</P><P>This time, a simple one that should take you no time! After the previous task where you created a brand new Northbreeze service, complete with data (right?), as well as implementing the first API endpoint in that new service, this task is designed to give you a bit of a break, and to allow you to reflect on the power that CAP gives you out of the box, and on just some of the many wondrous aspects of OData.</P><H2 id="toc-hId-1020443741">Background</H2><P>With all the functions and actions you've had to define and implement so far, it's easy to forget what CAP gives you for free, when creating and serving services. And in terms of support for OData, a very accomplished and "complete" protocol, it is second to none, particularly with regards to the mechanisms you get for free.</P><H2 id="toc-hId-823930236">The requirements</H2><P>Here are the specific requirements for this task. Your Northbreeze service, still served via the OData V4 protocol, must respond appropriately to an OData QUERY operation that expresses a navigation from one entity to a related one, in the resource path. Specifically, it must respond to a request for an entity set of the Products belonging to a particular Supplier (see the<SPAN>&nbsp;</SPAN><A href="https://community.sap.com/t5/application-development-discussions/task-7-using-cql-in-an-unbound-function-implementation-july-developer/td-p/13767476#toc-hId-952949467" target="_blank">Northwind and Northbreeze section</A><SPAN>&nbsp;</SPAN>of the previous task for details on these entity types).</P><P>In other words, your service needs to return an entity set containing products, for a specific supplier.</P><H3 id="toc-hId-756499450">Some examples</H3><P>Using the standard<SPAN>&nbsp;</SPAN><A href="https://services.odata.org/V4/Northwind/Northwind.svc/" target="_blank" rel="nofollow noopener noreferrer">Northwind</A><SPAN>&nbsp;</SPAN>service, here are a couple of examples of that.</P><P>First, a list of the products belonging to the supplier with ID 22 ("Zaanse Snoepfabriek"):<SPAN>&nbsp;</SPAN><A href="https://services.odata.org/V4/Northwind/Northwind.svc/Suppliers(22)/Products" target="_blank" rel="nofollow noopener noreferrer">/Suppliers(22)/Products</A>, which should produce:</P><DIV class=""><PRE>{
  <SPAN class="">"@odata.context"</SPAN>: <SPAN class=""><SPAN class="">"</SPAN>https://services.odata.org/V4/Northwind/Northwind.svc/$metadata#Products<SPAN class="">"</SPAN></SPAN>,
  <SPAN class="">"value"</SPAN>: [
    {
      <SPAN class="">"ProductID"</SPAN>: <SPAN class="">47</SPAN>,
      <SPAN class="">"ProductName"</SPAN>: <SPAN class=""><SPAN class="">"</SPAN>Zaanse koeken<SPAN class="">"</SPAN></SPAN>,
      <SPAN class="">"SupplierID"</SPAN>: <SPAN class="">22</SPAN>,
      <SPAN class="">"CategoryID"</SPAN>: <SPAN class="">3</SPAN>,
      <SPAN class="">"QuantityPerUnit"</SPAN>: <SPAN class=""><SPAN class="">"</SPAN>10 - 4 oz boxes<SPAN class="">"</SPAN></SPAN>,
      <SPAN class="">"UnitPrice"</SPAN>: <SPAN class="">9.5000</SPAN>,
      <SPAN class="">"UnitsInStock"</SPAN>: <SPAN class="">36</SPAN>,
      <SPAN class="">"UnitsOnOrder"</SPAN>: <SPAN class="">0</SPAN>,
      <SPAN class="">"ReorderLevel"</SPAN>: <SPAN class="">0</SPAN>,
      <SPAN class="">"Discontinued"</SPAN>: <SPAN class="">false</SPAN>
    },
    {
      <SPAN class="">"ProductID"</SPAN>: <SPAN class="">48</SPAN>,
      <SPAN class="">"ProductName"</SPAN>: <SPAN class=""><SPAN class="">"</SPAN>Chocolade<SPAN class="">"</SPAN></SPAN>,
      <SPAN class="">"SupplierID"</SPAN>: <SPAN class="">22</SPAN>,
      <SPAN class="">"CategoryID"</SPAN>: <SPAN class="">3</SPAN>,
      <SPAN class="">"QuantityPerUnit"</SPAN>: <SPAN class=""><SPAN class="">"</SPAN>10 pkgs.<SPAN class="">"</SPAN></SPAN>,
      <SPAN class="">"UnitPrice"</SPAN>: <SPAN class="">12.7500</SPAN>,
      <SPAN class="">"UnitsInStock"</SPAN>: <SPAN class="">15</SPAN>,
      <SPAN class="">"UnitsOnOrder"</SPAN>: <SPAN class="">70</SPAN>,
      <SPAN class="">"ReorderLevel"</SPAN>: <SPAN class="">25</SPAN>,
      <SPAN class="">"Discontinued"</SPAN>: <SPAN class="">false</SPAN>
    }
  ]
}</PRE><DIV class=""><SPAN>Next, the products for supplier "Tokyo Traders" (ID 4), but just the product name and unit price:</SPAN><SPAN>&nbsp;</SPAN><A href="https://services.odata.org/V4/Northwind/Northwind.svc/Suppliers(4)/Products?$select=ProductName,UnitPrice" target="_blank" rel="nofollow noopener noreferrer">/Suppliers(4)/Products?$select=ProductName,UnitPrice</A><SPAN>, which should produce:</SPAN></DIV></DIV><DIV class=""><PRE>{
  <SPAN class="">"@odata.context"</SPAN>: <SPAN class=""><SPAN class="">"</SPAN>https://services.odata.org/V4/Northwind/Northwind.svc/$metadata#Products(ProductName,UnitPrice)<SPAN class="">"</SPAN></SPAN>,
  <SPAN class="">"value"</SPAN>: [
    {
      <SPAN class="">"ProductName"</SPAN>: <SPAN class=""><SPAN class="">"</SPAN>Mishi Kobe Niku<SPAN class="">"</SPAN></SPAN>,
      <SPAN class="">"UnitPrice"</SPAN>: <SPAN class="">97.0000</SPAN>
    },
    {
      <SPAN class="">"ProductName"</SPAN>: <SPAN class=""><SPAN class="">"</SPAN>Ikura<SPAN class="">"</SPAN></SPAN>,
      <SPAN class="">"UnitPrice"</SPAN>: <SPAN class="">31.0000</SPAN>
    },
    {
      <SPAN class="">"ProductName"</SPAN>: <SPAN class=""><SPAN class="">"</SPAN>Longlife Tofu<SPAN class="">"</SPAN></SPAN>,
      <SPAN class="">"UnitPrice"</SPAN>: <SPAN class="">10.0000</SPAN>
    }
  ]
}</PRE></DIV><H3 id="toc-hId-559985945">Back to the requirements</H3><P>So your service must do this too. The great thing is, if you've set up your Northbreeze service as I recommended in the previous task (i.e. starting from a clone of the<SPAN>&nbsp;</SPAN><A href="https://github.com/qmacro/northbreeze" target="_blank" rel="nofollow noopener noreferrer">Northbreeze repo</A>, then you're already set, and don't need to do anything specific to have the TESTER successfully test this in your service. That's thanks to the power of CAP.</P><P>The service must be served using the OData V4 protocol, with the (default) path prefix<SPAN>&nbsp;</SPAN>/odata/v4<SPAN>&nbsp;</SPAN>plus the service name<SPAN>&nbsp;</SPAN>northbreeze, and return an entity set of products belonging to a given supplier. Those products must be the correct ones (for example, products "Zaanse koeken" and "Chocolade" are the two products for supplier "Zaanse Snoepfabriek" (ID 22) and have the same IDs as they have in Northwind (as the TESTER will be checking the products returned in the entity set and examining the order of their IDs).</P><P>And that's it!</P><P>As there is, in theory, nothing more for you to do in this task (except to submit to the TESTER as usual, see below), if you've correctly implemented the service for the previous task already, then why not use the remainder of your coffee time to consider the power of OData, and think about the answers to the following questions:</P><P>First, the<SPAN>&nbsp;</SPAN><A href="https://services.odata.org/V4/Northwind/Northwind.svc/" target="_blank" rel="nofollow noopener noreferrer">Northwind</A><SPAN>&nbsp;</SPAN>service only allows the "traditional" OData key specification in the the resource path, e.g.<SPAN>&nbsp;</SPAN><A href="https://services.odata.org/V4/Northwind/Northwind.svc/Suppliers(7)" target="_blank" rel="nofollow noopener noreferrer">/Suppliers(7)</A><SPAN>&nbsp;</SPAN>and<SPAN>&nbsp;</SPAN><EM>not</EM><SPAN>&nbsp;</SPAN>the more recent<SPAN>&nbsp;</SPAN><A href="https://docs.oasis-open.org/odata/odata/v4.01/os/part2-url-conventions/odata-v4.01-os-part2-url-conventions.html#sec_KeyasSegmentConvention" target="_blank" rel="nofollow noopener noreferrer">Key-as-Segment</A><SPAN>&nbsp;</SPAN>style. Does your Northbreeze service, powered by CAP, support that? What does that look like?</P><P>While we're talking about resource paths, what about going one level deeper - is that supported? For example, Northwind supports paths such as<SPAN>&nbsp;</SPAN><A href="https://services.odata.org/V4/Northwind/Northwind.svc/Products(70)/Category/CategoryName" target="_blank" rel="nofollow noopener noreferrer">/Products(70)/Category/CategoryName</A><SPAN>&nbsp;</SPAN>to get just the name of the category to which the product with ID 70 belongs. Does CAP support that too - can you do it with your Northbreeze service?</P><P>Even what one might think should be single scalar value responses, such as a category name like<SPAN>&nbsp;</SPAN><A href="https://services.odata.org/V4/Northwind/Northwind.svc/Products(70)/Category/CategoryName" target="_blank" rel="nofollow noopener noreferrer">Beverages</A>, come delivered inside some wrapping, by default in either an XML representation in the case of<SPAN>&nbsp;</SPAN><A href="https://services.odata.org/V4/Northwind/Northwind.svc/Products(70)/Category/CategoryName" target="_blank" rel="nofollow noopener noreferrer">Northwind</A><SPAN>&nbsp;</SPAN>(extra whitespace added for readability):</P><DIV class=""><PRE>&lt;<SPAN class="">m</SPAN><SPAN class="">:</SPAN><SPAN class="">value</SPAN> 
    <SPAN class="">xmlns</SPAN><SPAN class="">:</SPAN><SPAN class="">d</SPAN>=<SPAN class=""><SPAN class="">"</SPAN>http://docs.oasis-open.org/odata/ns/data<SPAN class="">"</SPAN></SPAN> 
    <SPAN class="">xmlns</SPAN><SPAN class="">:</SPAN><SPAN class="">georss</SPAN>=<SPAN class=""><SPAN class="">"</SPAN>http://www.georss.org/georss<SPAN class="">"</SPAN></SPAN> 
    <SPAN class="">xmlns</SPAN><SPAN class="">:</SPAN><SPAN class="">gml</SPAN>=<SPAN class=""><SPAN class="">"</SPAN>http://www.opengis.net/gml<SPAN class="">"</SPAN></SPAN> 
    <SPAN class="">xmlns</SPAN><SPAN class="">:</SPAN><SPAN class="">m</SPAN>=<SPAN class=""><SPAN class="">"</SPAN>http://docs.oasis-open.org/odata/ns/metadata<SPAN class="">"</SPAN></SPAN> 
    <SPAN class="">m</SPAN><SPAN class="">:</SPAN><SPAN class="">context</SPAN>=<SPAN class=""><SPAN class="">"</SPAN>https://services.odata.org/V4/Northwind/Northwind.svc/$metadata#Products(70)/Category/CategoryName<SPAN class="">"</SPAN></SPAN>&gt;
    Beverages
&lt;/<SPAN class="">m</SPAN><SPAN class="">:</SPAN><SPAN class="">value</SPAN>&gt;</PRE><DIV class=""><SPAN>or in a JSON representation in the case of the CAP powered</SPAN><SPAN>&nbsp;</SPAN><A href="https://qmacro.cfapps.eu10.hana.ondemand.com/northbreeze/Products/70/Category/CategoryName" target="_blank" rel="nofollow noopener noreferrer">Northbreeze</A><SPAN>&nbsp;</SPAN><SPAN>equivalent:</SPAN></DIV></DIV><DIV class=""><PRE>{
  <SPAN class="">"@odata.context"</SPAN>: <SPAN class=""><SPAN class="">"</SPAN>../../$metadata#Categories(1)/CategoryName<SPAN class="">"</SPAN></SPAN>,
  <SPAN class="">"value"</SPAN>: <SPAN class=""><SPAN class="">"</SPAN>Beverages<SPAN class="">"</SPAN></SPAN>
}</PRE><DIV class=""><SPAN>What if you wanted</SPAN><SPAN>&nbsp;</SPAN><EM>just</EM><SPAN>&nbsp;</SPAN><SPAN>the scalar value</SPAN><SPAN>&nbsp;</SPAN><SPAN>Beverages? Is that possible? If so, how?</SPAN></DIV></DIV><P>On these questions and any related ones that occur to you - be sure to put your thoughts in the comments below!</P><H2 id="toc-hId-234389721">Submitting to the TESTER</H2><P>Now you're ready to submit your CANDIDATE service to the TESTER!</P><H3 id="toc-hId-166958935">The payload</H3><P>The task identifier you need to supply in the payload of your submission is:<SPAN>&nbsp;</SPAN><STRONG>northbreeze-Products</STRONG>.</P><P>You'll have already done this sort of thing<SPAN>&nbsp;</SPAN><A href="https://community.sap.com/t5/application-development-discussions/july-developer-challenge-quot-reverse-apis-quot-task-1-your-first-service/m-p/13752205" target="_blank">previously</A><SPAN>&nbsp;</SPAN>so just head back there for the more detailed instructions if you need them, or to the the section titled "<A href="https://community.sap.com/t5/application-development-blog-posts/2024-07-quot-reverse-apis-quot-sap-developer-challenge/ba-p/13749653#toc-hId--553513390" target="_blank">The Tester service, and making a test request</A>" in the<SPAN>&nbsp;</SPAN><A href="https://community.sap.com/t5/application-development-blog-posts/2024-07-quot-reverse-apis-quot-sap-developer-challenge/ba-p/13749653" target="_blank">main challenge blog post</A>.</P><P>You'll need to submit a JSON payload like this:</P><DIV class=""><PRE>{
  <SPAN class="">"communityid"</SPAN>: <SPAN class=""><SPAN class="">"</SPAN>&lt;your-community-id&gt;<SPAN class="">"</SPAN></SPAN>,
  <SPAN class="">"serviceurl"</SPAN>: <SPAN class=""><SPAN class="">"</SPAN>&lt;the-URL-of-your-service&gt;<SPAN class="">"</SPAN></SPAN>,
  <SPAN class="">"task"</SPAN>: <SPAN class=""><SPAN class="">"</SPAN>northbreeze-Products<SPAN class="">"</SPAN></SPAN>
}</PRE><DIV class=""><SPAN>And, just as with the previous (and all further tasks):</SPAN></DIV></DIV><UL><LI><P>the value for the<SPAN>&nbsp;</SPAN>communityid<SPAN>&nbsp;</SPAN>property should be your ID on this SAP Community platform (e.g. mine is "qmacro")</P></LI><LI><P>the value for the<SPAN>&nbsp;</SPAN>serviceurl<SPAN>&nbsp;</SPAN>property should be the absolute URL (i.e. including the scheme), of your CANDIDATE<SPAN>&nbsp;</SPAN><STRONG>service</STRONG>.</P></LI></UL><P>That's it!</P><H2 id="toc-hId--158637289">Logging of test results</H2><P>Remember that you can check on your progress, and the progress of your fellow participants - all requests are logged and are available in an entity set served by the TESTER service. The entity set URL is<SPAN>&nbsp;</SPAN><A href="https://developer-challenge-2024-07.cfapps.eu10.hana.ondemand.com/tester/Testlog" target="_blank" rel="nofollow noopener noreferrer">https://developer-challenge-2024-07.cfapps.eu10.hana.ondemand.com/tester/Testlog</A><SPAN>&nbsp;</SPAN>and being an OData V4 entity set, all the normal OData system query options are available to you for digging into that information.</P><P>Until the next task, have fun, and if you have any questions or comments, leave them below!</P>
---
Task 7 - Using CQL in an unbound function implementation (July Developer Challenge - "Reverse APIs")
application-developmentforum-board
2024-07-22
https://community.sap.com/t5/application-development-discussions/task-7-using-cql-in-an-unbound-function-implementation-july-developer/td-p/13767476
2024-07-22-task-7-using-cql-in-an-unbound-function-implementation-july-developer
<P>This is a task in the<SPAN>&nbsp;</SPAN><A href="https://community.sap.com/t5/application-development-blog-posts/2024-07-quot-reverse-apis-quot-sap-developer-challenge/ba-p/13749653" target="_blank">July Developer Challenge - "Reverse APIs"</A>.</P><P>This task sees you creating a third service, and a first API endpoint within that service. Unlike the previous two services this service will be a more fully formed OData service complete with some sample data. Ready?</P><H2 id="toc-hId-1020380253">Background</H2><P>The previous two services in this month's Developer Challenge,<SPAN>&nbsp;</SPAN>basic<SPAN>&nbsp;</SPAN>and<SPAN>&nbsp;</SPAN>plain, were fairly simple and only contained API endpoints that were based on simple functions and an action. There were no entities defined in the CDS model, no data, and no implicit, out-of-the-box CRUD+Q OData operations involved. Today's task is where that changes.</P><H3 id="toc-hId-952949467">Northwind and Northbreeze</H3><P>For this task and the rest of the tasks this month (there are 4 more after this one), you'll make available API endpoints that all revolve around a simple data model based off the famous Northwind service, various versions of which are running at<SPAN>&nbsp;</SPAN><A href="https://services.odata.org/" target="_blank" rel="nofollow noopener noreferrer">https://services.odata.org</A>. As you can see from the<SPAN>&nbsp;</SPAN><A href="https://services.odata.org/V4/Northwind/Northwind.svc/" target="_blank" rel="nofollow noopener noreferrer">OData V4 Northwind service's service document</A><SPAN>&nbsp;</SPAN>there are quite a few "collections", otherwise known by the OData term "entity sets", including:</P><UL><LI>Categories</LI><LI>CustomerDemographics</LI><LI>Customers</LI><LI>Employees</LI><LI>Orders</LI><LI>Categories</LI><LI>Products</LI><LI>Regions</LI><LI>Shippers</LI><LI>Suppliers</LI><LI>...</LI></UL><P>I like to keep things simple, and often turn to a simplified version that I like to call "Northbreeze" (<A href="https://www.google.com/search?q=geddit" target="_blank" rel="nofollow noopener noreferrer">geddit?</A>), where I just have three entity types, with relations between them:</P><UL><LI>Categories</LI><LI>Products</LI><LI>Suppliers</LI></UL><P>I have a live Northbreeze service running at<SPAN>&nbsp;</SPAN><A href="https://qmacro.cfapps.eu10.hana.ondemand.com/northbreeze" target="_blank" rel="nofollow noopener noreferrer">https://qmacro.cfapps.eu10.hana.ondemand.com/northbreeze</A><SPAN>&nbsp;</SPAN>and this is based on a simple CAP service that I've defined and made available in a GitHub repo at<SPAN>&nbsp;</SPAN><A href="https://github.com/qmacro/northbreeze" target="_blank" rel="nofollow noopener noreferrer">qmacro/northbreeze</A>. As you can see, there's no actual code, there's just:</P><UL><LI>the<SPAN>&nbsp;</SPAN><A href="https://github.com/qmacro/northbreeze/blob/main/db/schema.cds" target="_blank" rel="nofollow noopener noreferrer">schema-level definition of Categories, Products and Suppliers</A></LI><LI><A href="https://github.com/qmacro/northbreeze/tree/main/db/data" target="_blank" rel="nofollow noopener noreferrer">CSV based data</A><SPAN>&nbsp;</SPAN>to seed the three entity sets that correspond to those entity types</LI><LI>an extremely simple<SPAN>&nbsp;</SPAN><A href="https://github.com/qmacro/northbreeze/blob/main/srv/main.cds" target="_blank" rel="nofollow noopener noreferrer">service</A><SPAN>&nbsp;</SPAN>exposing those three entity types via direct projections</LI></UL><P>And that's pretty much it. Note that the<SPAN>&nbsp;</SPAN><A href="https://github.com/qmacro/northbreeze/tree/main/db/data" target="_blank" rel="nofollow noopener noreferrer">data</A><SPAN>&nbsp;</SPAN>reflects as accurately as possible the data in the original Northwind service, i.e. there are<SPAN>&nbsp;</SPAN><A href="https://github.com/qmacro/northbreeze/blob/main/db/data/northwind-Products.csv" target="_blank" rel="nofollow noopener noreferrer">77 products</A><SPAN>&nbsp;</SPAN>ranging from<SPAN>&nbsp;</SPAN><A href="https://qmacro.cfapps.eu10.hana.ondemand.com/northbreeze/Products/1?$expand=Supplier,Category" target="_blank" rel="nofollow noopener noreferrer">Chai, in the Beverages category, from the supplier Exotic Liquids</A><SPAN>&nbsp;</SPAN>to<SPAN>&nbsp;</SPAN><A href="https://qmacro.cfapps.eu10.hana.ondemand.com/northbreeze/Products/77?$expand=Supplier,Category" target="_blank" rel="nofollow noopener noreferrer">Original Frankfurter grÃ¼ne SoÃe, in the Condiments category, from the supplier Plutzer LebensmittelgroÃmÃ¤rkte AG</A>.</P><P>You can (and I recommend that you do) clone the repo and use that as a starting point for the service for this and the subsequent tasks in this challenge.</P><H2 id="toc-hId-627353243">The requirements</H2><P>Here are the specific requirements for this task.</P><P>The service must be served using the OData V4 protocol, with the (default) path prefix<SPAN>&nbsp;</SPAN>/odata/v4<SPAN>&nbsp;</SPAN>plus the service name<SPAN>&nbsp;</SPAN>northbreeze, i.e.:</P><DIV class=""><PRE>/odata/v4/northbreeze</PRE><DIV class=""><SPAN>You must make an API endpoint available that returns a sort of "product information" string. The endpoint has a single integer parameter</SPAN><SPAN>&nbsp;</SPAN><SPAN>id</SPAN><SPAN>&nbsp;</SPAN><SPAN>and the TESTER will make a call to the endpoint with the value of a product ID (it will be</SPAN><SPAN>&nbsp;</SPAN><A href="https://qmacro.cfapps.eu10.hana.ondemand.com/northbreeze/Products?$select=ProductID" target="_blank" rel="nofollow noopener noreferrer">between 1 and 77</A><SPAN>).</SPAN></DIV></DIV><P>It should return a string, formed thus:</P><P>&lt;name of the product&gt; by &lt;name of the supplier&gt;</P><P>For example, let's take the<SPAN>&nbsp;</SPAN><A href="https://qmacro.cfapps.eu10.hana.ondemand.com/northbreeze/Products(11)" target="_blank" rel="nofollow noopener noreferrer">Northbreeze product with the ID 11</A>:</P><UL><LI>the product name is<SPAN>&nbsp;</SPAN><A href="https://qmacro.cfapps.eu10.hana.ondemand.com/northbreeze/Products(11)/ProductName" target="_blank" rel="nofollow noopener noreferrer">Queso Cabrales</A></LI><LI>the name of the product's supplier is<SPAN>&nbsp;</SPAN><A href="https://qmacro.cfapps.eu10.hana.ondemand.com/northbreeze/Products(11)/Supplier/CompanyName" target="_blank" rel="nofollow noopener noreferrer">Cooperativa de Quesos 'Las Cabras'</A></LI></UL><P>So the call would be made to:</P><DIV class=""><PRE>/odata/v4/northbreeze/productInfo(<SPAN class="">id</SPAN>=11)</PRE><DIV class=""><SPAN>and the expected response should be:</SPAN></DIV></DIV><DIV class=""><PRE>{
  <SPAN class="">"@odata.context"</SPAN>: <SPAN class=""><SPAN class="">"</SPAN>$metadata#Edm.String<SPAN class="">"</SPAN></SPAN>,
  <SPAN class="">"value"</SPAN>: <SPAN class=""><SPAN class="">"</SPAN>Queso Cabrales by Cooperativa de Quesos 'Las Cabras'<SPAN class="">"</SPAN></SPAN>
}</PRE><DIV class=""><SPAN>By the way, looking back at the OData query operation URLs for the supplier of</SPAN><SPAN>&nbsp;</SPAN><SPAN>Queso Cabrales</SPAN><SPAN>&nbsp;</SPAN><SPAN>just now, did you know that for such scalar properties returned</SPAN><SPAN>&nbsp;</SPAN><EM>for OData query or read operations</EM><SPAN>&nbsp;</SPAN><SPAN>(CompanyName</SPAN><SPAN>&nbsp;</SPAN><SPAN>in this example) you can get the literal value on its own? Just append</SPAN><SPAN>&nbsp;</SPAN><SPAN>/$value</SPAN><SPAN>&nbsp;</SPAN><SPAN>to the URL, so that</SPAN></DIV></DIV><P><A href="https://qmacro.cfapps.eu10.hana.ondemand.com/northbreeze/Products(11)/Supplier/CompanyName" target="_blank" rel="nofollow noopener noreferrer">https://qmacro.cfapps.eu10.hana.ondemand.com/northbreeze/Products(11)/Supplier/CompanyName</A></P><P>becomes</P><P><A href="https://qmacro.cfapps.eu10.hana.ondemand.com/northbreeze/Products(11)/Supplier/CompanyName/$value" target="_blank" rel="nofollow noopener noreferrer">https://qmacro.cfapps.eu10.hana.ondemand.com/northbreeze/Products(11)/Supplier/CompanyName/$value</A></P><P>and you get</P><DIV class=""><PRE>Cooperativa de Quesos 'Las Cabras'</PRE><DIV class=""><SPAN>instead of</SPAN></DIV></DIV><DIV class=""><PRE>{
  <SPAN class="">"@odata.context"</SPAN>: <SPAN class=""><SPAN class="">"</SPAN>../../$metadata#Suppliers(5)/CompanyName<SPAN class="">"</SPAN></SPAN>,
  <SPAN class="">"value"</SPAN>: <SPAN class=""><SPAN class="">"</SPAN>Cooperativa de Quesos 'Las Cabras'<SPAN class="">"</SPAN></SPAN>
}</PRE></DIV><H3 id="toc-hId-559922457">The endpoint definition</H3><P>As you may have worked out by now, this API endpoint needs to be defined as an unbound function (yes, it could be implemented as a function bound to a particular product but we'll be doing that sort of thing in a later task).</P><P>When you have defined the endpoint, you should see evidence of it (productInfo) in the OData metadata, which should look like this (vastly reduced for brevity):</P><DIV class=""><PRE>&lt;?<SPAN class="">xml</SPAN><SPAN class=""> version</SPAN>=<SPAN class=""><SPAN class="">"</SPAN>1.0<SPAN class="">"</SPAN></SPAN><SPAN class=""> encoding</SPAN>=<SPAN class=""><SPAN class="">"</SPAN>utf-8<SPAN class="">"</SPAN></SPAN>?&gt;
&lt;<SPAN class="">edmx</SPAN><SPAN class="">:</SPAN><SPAN class="">Edmx</SPAN> <SPAN class="">Version</SPAN>=<SPAN class=""><SPAN class="">"</SPAN>4.0<SPAN class="">"</SPAN></SPAN> <SPAN class="">xmlns</SPAN><SPAN class="">:</SPAN><SPAN class="">edmx</SPAN>=<SPAN class=""><SPAN class="">"</SPAN>http://docs.oasis-open.org/odata/ns/edmx<SPAN class="">"</SPAN></SPAN>&gt;
  &lt;<SPAN class="">edmx</SPAN><SPAN class="">:</SPAN><SPAN class="">DataServices</SPAN>&gt;
    &lt;<SPAN class="">Schema</SPAN> <SPAN class="">Namespace</SPAN>=<SPAN class=""><SPAN class="">"</SPAN>northbreeze<SPAN class="">"</SPAN></SPAN> <SPAN class="">xmlns</SPAN>=<SPAN class=""><SPAN class="">"</SPAN>http://docs.oasis-open.org/odata/ns/edm<SPAN class="">"</SPAN></SPAN>&gt;
      &lt;<SPAN class="">EntityContainer</SPAN> <SPAN class="">Name</SPAN>=<SPAN class=""><SPAN class="">"</SPAN>EntityContainer<SPAN class="">"</SPAN></SPAN>&gt;
        &lt;<SPAN class="">EntitySet</SPAN> <SPAN class="">Name</SPAN>=<SPAN class=""><SPAN class="">"</SPAN>Products<SPAN class="">"</SPAN></SPAN> <SPAN class="">EntityType</SPAN>=<SPAN class=""><SPAN class="">"</SPAN>northbreeze.Products<SPAN class="">"</SPAN></SPAN>&gt;
          &lt;<SPAN class="">NavigationPropertyBinding</SPAN> <SPAN class="">Path</SPAN>=<SPAN class=""><SPAN class="">"</SPAN>Category<SPAN class="">"</SPAN></SPAN> <SPAN class="">Target</SPAN>=<SPAN class=""><SPAN class="">"</SPAN>Categories<SPAN class="">"</SPAN></SPAN>/&gt;
          &lt;<SPAN class="">NavigationPropertyBinding</SPAN> <SPAN class="">Path</SPAN>=<SPAN class=""><SPAN class="">"</SPAN>Supplier<SPAN class="">"</SPAN></SPAN> <SPAN class="">Target</SPAN>=<SPAN class=""><SPAN class="">"</SPAN>Suppliers<SPAN class="">"</SPAN></SPAN>/&gt;
        &lt;/<SPAN class="">EntitySet</SPAN>&gt;
        &lt;<SPAN class="">EntitySet</SPAN> <SPAN class="">Name</SPAN>=<SPAN class=""><SPAN class="">"</SPAN>Suppliers<SPAN class="">"</SPAN></SPAN> <SPAN class="">EntityType</SPAN>=<SPAN class=""><SPAN class="">"</SPAN>northbreeze.Suppliers<SPAN class="">"</SPAN></SPAN>&gt;
          &lt;<SPAN class="">NavigationPropertyBinding</SPAN> <SPAN class="">Path</SPAN>=<SPAN class=""><SPAN class="">"</SPAN>Products<SPAN class="">"</SPAN></SPAN> <SPAN class="">Target</SPAN>=<SPAN class=""><SPAN class="">"</SPAN>Products<SPAN class="">"</SPAN></SPAN>/&gt;
        &lt;/<SPAN class="">EntitySet</SPAN>&gt;
        &lt;<SPAN class="">FunctionImport</SPAN> <SPAN class="">Name</SPAN>=<SPAN class=""><SPAN class="">"</SPAN>productInfo<SPAN class="">"</SPAN></SPAN> <SPAN class="">Function</SPAN>=<SPAN class=""><SPAN class="">"</SPAN>northbreeze.productInfo<SPAN class="">"</SPAN></SPAN>/&gt;
      &lt;/<SPAN class="">EntityContainer</SPAN>&gt;
      &lt;<SPAN class="">Function</SPAN> <SPAN class="">Name</SPAN>=<SPAN class=""><SPAN class="">"</SPAN>productInfo<SPAN class="">"</SPAN></SPAN> <SPAN class="">IsBound</SPAN>=<SPAN class=""><SPAN class="">"</SPAN>false<SPAN class="">"</SPAN></SPAN> <SPAN class="">IsComposable</SPAN>=<SPAN class=""><SPAN class="">"</SPAN>false<SPAN class="">"</SPAN></SPAN>&gt;
        &lt;<SPAN class="">Parameter</SPAN> <SPAN class="">Name</SPAN>=<SPAN class=""><SPAN class="">"</SPAN>id<SPAN class="">"</SPAN></SPAN> <SPAN class="">Type</SPAN>=<SPAN class=""><SPAN class="">"</SPAN>Edm.Int32<SPAN class="">"</SPAN></SPAN>/&gt;
        &lt;<SPAN class="">ReturnType</SPAN> <SPAN class="">Type</SPAN>=<SPAN class=""><SPAN class="">"</SPAN>Edm.String<SPAN class="">"</SPAN></SPAN>/&gt;
      &lt;/<SPAN class="">Function</SPAN>&gt;
    &lt;/<SPAN class="">Schema</SPAN>&gt;
  &lt;/<SPAN class="">edmx</SPAN><SPAN class="">:</SPAN><SPAN class="">DataServices</SPAN>&gt;
&lt;/<SPAN class="">edmx</SPAN><SPAN class="">:</SPAN><SPAN class="">Edmx</SPAN>&gt;</PRE></DIV><H3 id="toc-hId-363408952">The endpoint implementation</H3><P>The idea of this task is to get you using some<SPAN>&nbsp;</SPAN><A href="https://cap.cloud.sap/docs/cds/cql" target="_blank" rel="nofollow noopener noreferrer">CQL</A>. In other words, you'll have to write a simple implementation for this unbound function, writing a handler for the<SPAN>&nbsp;</SPAN><A href="https://cap.cloud.sap/docs/guides/providing-services#hooks-on-before-after" target="_blank" rel="nofollow noopener noreferrer">on hook</A><SPAN>&nbsp;</SPAN>as usual, for the<SPAN>&nbsp;</SPAN>productInfo<SPAN>&nbsp;</SPAN>event.</P><H4 id="toc-hId-295978166">CQL</H4><P>If you're not sure where to start, I'd recommend the<SPAN>&nbsp;</SPAN><A href="https://cap.cloud.sap/docs/node.js/cds-ql" target="_blank" rel="nofollow noopener noreferrer">Querying in JavaScript</A><SPAN>&nbsp;</SPAN>section of Capire, in particular the<SPAN>&nbsp;</SPAN><A href="https://cap.cloud.sap/docs/node.js/cds-ql#select" target="_blank" rel="nofollow noopener noreferrer">SELECT class</A>. Within that<SPAN>&nbsp;</SPAN>SELECT<SPAN>&nbsp;</SPAN>section, you may want to pay particular attention to the following properties:</P><UL><LI><A href="https://cap.cloud.sap/docs/node.js/cds-ql#one" target="_blank" rel="nofollow noopener noreferrer">one</A></LI><LI><A href="https://cap.cloud.sap/docs/node.js/cds-ql#select-from" target="_blank" rel="nofollow noopener noreferrer">from</A></LI><LI><A href="https://cap.cloud.sap/docs/node.js/cds-ql#columns" target="_blank" rel="nofollow noopener noreferrer">columns</A></LI><LI><A href="https://cap.cloud.sap/docs/node.js/cds-ql#where" target="_blank" rel="nofollow noopener noreferrer">where</A></LI></UL><P>In particular, you'll have to work out how to get a property of a related entity. In other words, how do you express what you want, using the facilities such as path expressions or projection functions described in the<SPAN>&nbsp;</SPAN><A href="https://cap.cloud.sap/docs/node.js/cds-ql#columns" target="_blank" rel="nofollow noopener noreferrer">columns</A><SPAN>&nbsp;</SPAN>section. On this topic, you may find this blog post helpful:<SPAN>&nbsp;</SPAN><A href="https://qmacro.org/blog/posts/2024/07/12/turning-an-odata-expand-into-a-cds.ql-cql-query-with-a-projection-function-in-cap/" target="_blank" rel="nofollow noopener noreferrer">Turning an OData expand into a cds.ql CQL query with a projection function in CAP</A>.</P><H4 id="toc-hId-99464661">Using async/await</H4><P>One more tip: Up until now, you've defined your JavaScript function based handlers for functions and actions in quite a straightforward way. But now you're about to use the<SPAN>&nbsp;</SPAN><A href="https://cap.cloud.sap/docs/node.js/cds-ql#select" target="_blank" rel="nofollow noopener noreferrer">SELECT</A><SPAN>&nbsp;</SPAN>class, which by itself<SPAN>&nbsp;</SPAN><EM>defines</EM><SPAN>&nbsp;</SPAN>a query. It doesn't run it directly. If you read the<SPAN>&nbsp;</SPAN><A href="https://cap.cloud.sap/docs/node.js/cds-ql#executing-queries" target="_blank" rel="nofollow noopener noreferrer">Executing Queries</A><SPAN>&nbsp;</SPAN>section of Capire you'll see that "<EM>you can just await a constructed query, which by default passes the query to cds.db.run()</EM>". That means you can use<SPAN>&nbsp;</SPAN>await<SPAN>&nbsp;</SPAN>in front of your<SPAN>&nbsp;</SPAN>SELECT<SPAN>&nbsp;</SPAN>expression.</P><P>But that in turn means that your handler function needs to be defined as an asynchronous one, with<SPAN>&nbsp;</SPAN>async. If you're looking for some examples or inspiration, remember that there are some great CAP samples in the<SPAN>&nbsp;</SPAN><A href="https://github.com/SAP-samples" target="_blank" rel="nofollow noopener noreferrer">sap-samples</A><SPAN>&nbsp;</SPAN>org on GitHub. And remember also that GitHub has an excellent search mechanism, where you can express detailed contextual searches, like this one:</P><P><A href="https://github.com/search?q=org%3Asap-samples+language%3Ajs+%22await+SELECT%22+AND+%28path%3A%2Fsrv%2F%29&amp;type=code" target="_blank" rel="nofollow noopener noreferrer">org:sap-samples language:js "await SELECT" AND (path:/srv/)</A></P><P>Don't you just love it when you come across a well thought out URL scheme for this sort of search facility? Beautiful.</P><H4 id="toc-hId--97048844">Setting up for CQL</H4><P>Note that also, for this handler function and some of the subsequent ones in this service, you'll need a connection to the database layer, and a 'handle' on the<SPAN>&nbsp;</SPAN>Products<SPAN>&nbsp;</SPAN>entity definition (to use in your<SPAN>&nbsp;</SPAN>SELECT<SPAN>&nbsp;</SPAN>expressions, specifically with the<SPAN>&nbsp;</SPAN>.from()<SPAN>&nbsp;</SPAN>method). You can just use this classic pair of constant definitions, before you start to define your<SPAN>&nbsp;</SPAN>on<SPAN>&nbsp;</SPAN>handler:</P><DIV class=""><PRE><SPAN class="">const</SPAN> <SPAN class="">db</SPAN> <SPAN class="">=</SPAN> <SPAN class="">await</SPAN> <SPAN class="">cds</SPAN><SPAN class="">.</SPAN><SPAN class="">connect</SPAN><SPAN class="">.</SPAN><SPAN class="">to</SPAN><SPAN class="">(</SPAN><SPAN class="">'db'</SPAN><SPAN class="">)</SPAN>
<SPAN class="">const</SPAN> <SPAN class="">{</SPAN> Products <SPAN class="">}</SPAN> <SPAN class="">=</SPAN> <SPAN class="">db</SPAN><SPAN class="">.</SPAN><SPAN class="">entities</SPAN></PRE></DIV><H2 id="toc-hId--551727787">Submitting to the TESTER</H2><P>Now you're ready to submit your CANDIDATE service, with this new API endpoint, to the TESTER!</P><H3 id="toc-hId--619158573">The payload</H3><P>The task identifier you need to supply in the payload of your submission is:<SPAN>&nbsp;</SPAN><STRONG>northbreeze-productInfo</STRONG>.</P><P>You'll have already done this sort of thing<SPAN>&nbsp;</SPAN><A href="https://community.sap.com/t5/application-development-discussions/july-developer-challenge-quot-reverse-apis-quot-task-1-your-first-service/m-p/13752205" target="_blank">previously</A><SPAN>&nbsp;</SPAN>so just head back there for the more detailed instructions if you need them, or to the the section titled "<A href="https://community.sap.com/t5/application-development-blog-posts/2024-07-quot-reverse-apis-quot-sap-developer-challenge/ba-p/13749653#toc-hId--553513390" target="_blank">The Tester service, and making a test request</A>" in the<SPAN>&nbsp;</SPAN><A href="https://community.sap.com/t5/application-development-blog-posts/2024-07-quot-reverse-apis-quot-sap-developer-challenge/ba-p/13749653" target="_blank">main challenge blog post</A>.</P><P>You'll need to submit a JSON payload like this:</P><DIV class=""><PRE>{
  <SPAN class="">"communityid"</SPAN>: <SPAN class=""><SPAN class="">"</SPAN>&lt;your-community-id&gt;<SPAN class="">"</SPAN></SPAN>,
  <SPAN class="">"serviceurl"</SPAN>: <SPAN class=""><SPAN class="">"</SPAN>&lt;the-URL-of-your-service&gt;<SPAN class="">"</SPAN></SPAN>,
  <SPAN class="">"task"</SPAN>: <SPAN class=""><SPAN class="">"</SPAN>northbreeze-productInfo<SPAN class="">"</SPAN></SPAN>
}</PRE><DIV class=""><SPAN>And, just as with the previous (and all further tasks):</SPAN></DIV></DIV><UL><LI><P>the value for the<SPAN>&nbsp;</SPAN>communityid<SPAN>&nbsp;</SPAN>property should be your ID on this SAP Community platform (e.g. mine is "qmacro")</P></LI><LI><P>the value for the<SPAN>&nbsp;</SPAN>serviceurl<SPAN>&nbsp;</SPAN>property should be the absolute URL (i.e. including the scheme), of your CANDIDATE<SPAN>&nbsp;</SPAN><STRONG>service</STRONG><SPAN>&nbsp;</SPAN>which<SPAN>&nbsp;</SPAN><EM>contains</EM><SPAN>&nbsp;</SPAN>the API endpoint (see<SPAN>&nbsp;</SPAN><A href="https://community.sap.com/t5/application-development-blog-posts/2024-07-quot-reverse-apis-quot-sap-developer-challenge/ba-p/13749653#toc-hId--356999885" target="_blank"><span class="lia-unicode-emoji" title=":information:">â¹ï¸</span><SPAN>&nbsp;</SPAN>A note on URLs and services</A>).</P></LI></UL><P>That's it!</P><H2 id="toc-hId--597500440">Logging of test results</H2><P>Remember that you can check on your progress, and the progress of your fellow participants - all requests are logged and are available in an entity set served by the TESTER service. The entity set URL is<SPAN>&nbsp;</SPAN><A href="https://developer-challenge-2024-07.cfapps.eu10.hana.ondemand.com/tester/Testlog" target="_blank" rel="nofollow noopener noreferrer">https://developer-challenge-2024-07.cfapps.eu10.hana.ondemand.com/tester/Testlog</A><SPAN>&nbsp;</SPAN>and being an OData V4 entity set, all the normal OData system query options are available to you for digging into that information.</P><P>Until the next task, have fun, and if you have any questions or comments, leave them below!</P>
---
Task 6 - API endpoint with payload required (July Developer Challenge - "Reverse APIs")
application-developmentforum-board
2024-07-19
https://community.sap.com/t5/application-development-discussions/task-6-api-endpoint-with-payload-required-july-developer-challenge-quot/td-p/13765529
2024-07-19-task-6-api-endpoint-with-payload-required-july-developer-challenge-quot
<P>This is a task in the<SPAN>&nbsp;</SPAN><A href="https://community.sap.com/t5/application-development-blog-posts/2024-07-quot-reverse-apis-quot-sap-developer-challenge/ba-p/13749653" target="_blank">July Developer Challenge - "Reverse APIs"</A>.</P><P>This task gets you to add another API endpoint to the<SPAN>&nbsp;</SPAN>plain<SPAN>&nbsp;</SPAN>"REST" service you have, but will be a little different in its definition, implementation, and how it's called.</P><H2 id="toc-hId-1020321480">Background</H2><P>HTTP-based API endpoints, whatever the protocol, can differ in various ways, such as:</P><UL><LI>how they're called (which HTTP method)</LI><LI>whether they expect a payload (a body) in the HTTP request</LI><LI>what they do, what effect they have at the server side</LI><LI>what resource and representation they return (if any)</LI></UL><P>HTTP is an application protocol and there are already well understood semantic meanings for each of the methods (also known as "verbs", where the URLs are the "nouns"). There are some protocols that abuse or ignore these semantics, particularly the set of heavyweight "Web Services" from a decade or so ago, known as "WS-Deathstar" (due to their weight and complexity), SOAP, and even today we have GraphQL that arguably abuses HTTP as a mere transport layer. Yes, "abuse" is a strong word, but, as my<SPAN>&nbsp;</SPAN><A href="https://www.linkedin.com/in/djadams/" target="_blank" rel="nofollow noopener noreferrer">bio</A><SPAN>&nbsp;</SPAN>hints at, it's an opinion I hold, and is one of many <span class="lia-unicode-emoji" title=":slightly_smiling_face:">ð</span></P><P><span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="bio.png" style="width: 313px;"><img src="https://community.sap.com/t5/image/serverpage/image-id/138709iF44A397EA563D7FB/image-size/large?v=v2&amp;px=999" role="button" title="bio.png" alt="bio.png" /></span></P><P>Anyway, in addition to those differences listed earlier, one must also consider the duumvirate (yes, I did just use that word) of:</P><UL><LI>idempotency</LI><LI>side effects</LI></UL><P>Idempotency (from the Latin, as is, of course, duumvirate) essentially means "having the same effect". To quote the excellent MDN docs on<SPAN>&nbsp;</SPAN><A href="https://developer.mozilla.org/en-US/docs/Glossary/Idempotent" target="_blank" rel="nofollow noopener noreferrer">Idempotency</A>:</P><BLOCKQUOTE><P>An HTTP method is idempotent if the intended effect on the server of making a single request is the same as the effect of making several identical requests.</P></BLOCKQUOTE><P>Examples of HTTP methods that have this idempotency characteristic are: GET, HEAD, PUT and DELETE (yes!).</P><P>A side effect in this context means that in handling or otherwise fulfilling an HTTP request, state is changed on the server. HTTP methods that do not have side effects are known as<SPAN>&nbsp;</SPAN><A href="https://developer.mozilla.org/en-US/docs/Glossary/Safe/HTTP" target="_blank" rel="nofollow noopener noreferrer">safe</A>. Examples of HTTP methods that do have side effects, i.e. that are not safe, are POST, PUT and DELETE. Examples of HTTP methods that are side effect free, i.e. safe, are GET, HEAD and OPTIONS.</P><P>Semantic meanings are important, as they form part of the "contract" of behaviour between clients and servers.</P><P>Why am I telling you all this? Because CDL, CAP's definition language that you use to define your overall CDS model, has a couple of keywords that are important in this context.</P><H3 id="toc-hId-952890694">Actions and functions</H3><P>In Capire's section on Providing Services, there's a subsection on<SPAN>&nbsp;</SPAN><A href="https://cap.cloud.sap/docs/guides/providing-services#actions-functions" target="_blank" rel="nofollow noopener noreferrer">Actions &amp; Functions</A><SPAN>&nbsp;</SPAN>that explain more. I recommend you go and read that section, then come back here.</P><P>Did you notice the explanation was in the context of OData? That's because it's where the specific definitions originate, but these definitions make sense even outside the context of OData, such as when serving via the "REST" protocol.</P><P>In summary, we can see that both actions and functions are for providing API endpoints that represent resources beyond the standard CRUD+Q requests, although:</P><UL><LI>Functions are for defining API endpoints that are safe, these endpoints are to be requested with HTTP GET, and any data should be supplied in the URL. There's a related rule here that functions must be addressed (in the URL) with brackets, even if there's no data to supply. Functions, on the whole, are for returning data.</LI><LI>Actions are for defining API endpoints that <EM>may</EM> have side effects, and these endpoints must be requested with HTTP POST; any data that is to be supplied must be as a payload to the POST request. In addition, actions may return nothing (just an HTTP status code and headers).</LI></UL><P>In addition (but not relevant for this task), both functions and actions can be bound or unbound. The idea of "unbound" is what we generally think of in terms of simple API endpoints. The "bound" concept is from OData, and is about calling an action or function relative to a specific entity. In such cases there's an extra implicit "binding parameter" that the implementation receives in the request, as a connection to the instance of the entity to which the called function is bound.</P><P>The first task in the context of this current<SPAN>&nbsp;</SPAN>plain<SPAN>&nbsp;</SPAN>"REST" service was an unbound function (note the brackets, despite no parameters):</P><DIV class=""><PRE>/rest/plain/theAnswer()</PRE><DIV class=""><SPAN>This task will require you to define and implement a simple unbound action, which means you must:</SPAN></DIV></DIV><UL><LI>use the<SPAN>&nbsp;</SPAN>action<SPAN>&nbsp;</SPAN>keyword</LI><LI>call it using a request with the HTTP POST method</LI><LI>send the data in the payload of the request</LI></UL><P>You will also not need to use brackets at the end of the URL.</P><H2 id="toc-hId-627294470">The requirements</H2><P>Here are the specific requirements for this task.</P><P>In the<SPAN>&nbsp;</SPAN>plain<SPAN>&nbsp;</SPAN>service you have already, define an unbound action that expects a list of integers. The implementation of that unbound action must determine the highest of those numbers, and return it as a single integer.</P><P><SPAN>Note that if you are running CAP Node.js version 8 then you will have to annotate your&nbsp;</SPAN>action<SPAN>&nbsp;definition with&nbsp;</SPAN>@open<SPAN>. See the&nbsp;</SPAN><A href="https://qmacro.org/blog/posts/2024/07/24/automatic-validation-in-odata-and-rest-calls-with-cap/#opentypes" target="_blank" rel="nofollow noopener noreferrer">Open Types section</A><SPAN>&nbsp;of the blog post&nbsp;</SPAN><A href="https://qmacro.org/blog/posts/2024/07/24/automatic-validation-in-odata-and-rest-calls-with-cap/" target="_blank" rel="nofollow noopener noreferrer">Automatic validation in OData and REST calls with CAP</A><SPAN>&nbsp;for more information.</SPAN></P><H2 id="toc-hId-430780965">Submitting to the TESTER</H2><P>Now you're ready to submit your CANDIDATE service, with this new API endpoint, to the TESTER!</P><P>Note that the TESTER will be calling your action via HTTP POST, and supplying the list of integers as an array, in a JSON representation, in other words, like this:</P><DIV class=""><PRE><SPAN class="">POST</SPAN><SPAN class=""> /rest/plain/highestValue HTTP/1.1</SPAN>
<SPAN class=""><SPAN class="">Host:</SPAN> localhost:8000</SPAN>
<SPAN class=""><SPAN class="">Content-Type:</SPAN> application/json</SPAN>
<SPAN class=""><SPAN class="">Content-Length:</SPAN> 19</SPAN>

<SPAN class="">[</SPAN>54<SPAN class="">,</SPAN> 203<SPAN class="">,</SPAN> -3<SPAN class="">,</SPAN> 0<SPAN class="">,</SPAN> 1<SPAN class="">]</SPAN></PRE></DIV><H3 id="toc-hId-363350179">The payload</H3><P>The task identifier you need to supply in the payload of your submission is:<SPAN>&nbsp;</SPAN><STRONG>plain-highestValue</STRONG>.</P><P>You'll have already done this sort of thing<SPAN>&nbsp;</SPAN><A href="https://community.sap.com/t5/application-development-discussions/july-developer-challenge-quot-reverse-apis-quot-task-1-your-first-service/m-p/13752205" target="_blank">previously</A><SPAN>&nbsp;</SPAN>so just head back there for the more detailed instructions if you need them, or to the the section titled "<A href="https://community.sap.com/t5/application-development-blog-posts/2024-07-quot-reverse-apis-quot-sap-developer-challenge/ba-p/13749653#toc-hId--553513390" target="_blank">The Tester service, and making a test request</A>" in the<SPAN>&nbsp;</SPAN><A href="https://community.sap.com/t5/application-development-blog-posts/2024-07-quot-reverse-apis-quot-sap-developer-challenge/ba-p/13749653" target="_blank">main challenge blog post</A>.</P><P>You'll need to submit a JSON payload like this:</P><DIV class=""><PRE>{
  <SPAN class="">"communityid"</SPAN>: <SPAN class=""><SPAN class="">"</SPAN>&lt;your-community-id&gt;<SPAN class="">"</SPAN></SPAN>,
  <SPAN class="">"serviceurl"</SPAN>: <SPAN class=""><SPAN class="">"</SPAN>&lt;the-URL-of-your-service&gt;<SPAN class="">"</SPAN></SPAN>,
  <SPAN class="">"task"</SPAN>: <SPAN class=""><SPAN class="">"</SPAN>plain-highestValue<SPAN class="">"</SPAN></SPAN>
}</PRE><DIV class=""><SPAN>And, just as with the previous (and all further tasks):</SPAN></DIV></DIV><UL><LI><P>the value for the<SPAN>&nbsp;</SPAN>communityid<SPAN>&nbsp;</SPAN>property should be your ID on this SAP Community platform (e.g. mine is "qmacro")</P></LI><LI><P>the value for the<SPAN>&nbsp;</SPAN>serviceurl<SPAN>&nbsp;</SPAN>property should be the absolute URL (i.e. including the scheme), of your CANDIDATE<SPAN>&nbsp;</SPAN><STRONG>service</STRONG><SPAN>&nbsp;</SPAN>which<SPAN>&nbsp;</SPAN><EM>contains</EM><SPAN>&nbsp;</SPAN>the API endpoint (see<SPAN>&nbsp;</SPAN><A href="https://community.sap.com/t5/application-development-blog-posts/2024-07-quot-reverse-apis-quot-sap-developer-challenge/ba-p/13749653#toc-hId--356999885" target="_blank"><span class="lia-unicode-emoji" title=":information:">â¹ï¸</span><SPAN>&nbsp;</SPAN>A note on URLs and services</A>).</P></LI></UL><P>That's it!</P><H2 id="toc-hId-37753955">Logging of test results</H2><P>Remember that you can check on your progress, and the progress of your fellow participants - all requests are logged and are available in an entity set served by the TESTER service. The entity set URL is<SPAN>&nbsp;</SPAN><A href="https://developer-challenge-2024-07.cfapps.eu10.hana.ondemand.com/tester/Testlog" target="_blank" rel="nofollow noopener noreferrer">https://developer-challenge-2024-07.cfapps.eu10.hana.ondemand.com/tester/Testlog</A><SPAN>&nbsp;</SPAN>and being an OData V4 entity set, all the normal OData system query options are available to you for digging into that information.</P><P>Until the next task, have fun, and if you have any questions or comments, leave them below!</P>
---
Task 5 - A "REST" service document (July Developer Challenge - "Reverse APIs")
application-developmentforum-board
2024-07-17
https://community.sap.com/t5/application-development-discussions/task-5-a-quot-rest-quot-service-document-july-developer-challenge-quot/td-p/13762855
2024-07-17-task-5-a-quot-rest-quot-service-document-july-developer-challenge-quot
<P>This is a task in the<SPAN>&nbsp;</SPAN><A href="https://community.sap.com/t5/application-development-blog-posts/2024-07-quot-reverse-apis-quot-sap-developer-challenge/ba-p/13749653" target="_blank">July Developer Challenge - "Reverse APIs"</A>.</P><P>This task focuses a little more on the<SPAN>&nbsp;</SPAN>plain<SPAN>&nbsp;</SPAN>service you set up in the<SPAN>&nbsp;</SPAN><A href="https://community.sap.com/t5/application-development-discussions/task-4-plain-quot-rest-quot-endpoint-july-developer-challenge-quot-reverse/m-p/13760488" target="_blank">previous task</A>, and is more for us to think more about the differences and similarities between services served with the OData and "REST" protocols.</P><H2 id="toc-hId-1020235079">The requirements</H2><P>Here are the specific requirements for this task.</P><P>If you already have the basic<SPAN>&nbsp;</SPAN>plain<SPAN>&nbsp;</SPAN>service you set up in the the<SPAN>&nbsp;</SPAN><A href="https://community.sap.com/t5/application-development-discussions/task-4-plain-quot-rest-quot-endpoint-july-developer-challenge-quot-reverse/m-p/13760488" target="_blank">previous task</A>, then you actually have everything you need to submit a test request to the TESTER.</P><P>Why? Because this time, your submission to the tester will be to ask it to retrieve and check ... the service document of your service.</P><P>As well as submitting your service to the TESTER, we want you to share your thoughts on this "service document". What's in it? What happens when you add an entity definition to the<SPAN>&nbsp;</SPAN>plain<SPAN>&nbsp;</SPAN>service, in the CDS model? Does it make sense to have such a service document? Does it differ from a<SPAN>&nbsp;</SPAN><A href="https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#_Toc31358911" target="_blank" rel="nofollow noopener noreferrer">service document of an OData service</A>? If so, how? (Hint: Use the appropriate annotation to switch and see what happens).</P><P>In addition, here's another aspect to ponder, and we'd love to hear your thoughts on this. OData is a fantastic example of a RESTful API. One of the well known documents that every OData service offers is the metadata document, at the path<SPAN>&nbsp;</SPAN>/$metadata. This is a rich (EDMX-based) description of everything that the OData service offers.</P><P>While there's a "service document" of sorts in a plain "REST" protocol served service, is there an equivalent? What else might be useful here? (Hint: have a look at the options in the<SPAN>&nbsp;</SPAN>cds compile<SPAN>&nbsp;</SPAN>command).</P><H2 id="toc-hId-823721574">Submitting to the TESTER</H2><P>Now you're ready to submit your CANDIDATE service, with the service document, to the TESTER!</P><H3 id="toc-hId-756290788">The payload</H3><P>The task identifier you need to supply in the payload of your submission is:<SPAN>&nbsp;</SPAN><STRONG>plain-serviceDocument</STRONG>.</P><P>You'll have already done this sort of thing<SPAN>&nbsp;</SPAN><A href="https://community.sap.com/t5/application-development-discussions/july-developer-challenge-quot-reverse-apis-quot-task-1-your-first-service/m-p/13752205" target="_blank">previously</A><SPAN>&nbsp;</SPAN>so just head back there for the more detailed instructions if you need them, or to the the section titled "<A href="https://community.sap.com/t5/application-development-blog-posts/2024-07-quot-reverse-apis-quot-sap-developer-challenge/ba-p/13749653#toc-hId--553513390" target="_blank">The Tester service, and making a test request</A>" in the<SPAN>&nbsp;</SPAN><A href="https://community.sap.com/t5/application-development-blog-posts/2024-07-quot-reverse-apis-quot-sap-developer-challenge/ba-p/13749653" target="_blank">main challenge blog post</A>.</P><P>You'll need to submit a JSON payload like this:</P><DIV class=""><PRE>{
  <SPAN class="">"communityid"</SPAN>: <SPAN class=""><SPAN class="">"</SPAN>&lt;your-community-id&gt;<SPAN class="">"</SPAN></SPAN>,
  <SPAN class="">"serviceurl"</SPAN>: <SPAN class=""><SPAN class="">"</SPAN>&lt;the-URL-of-your-service&gt;<SPAN class="">"</SPAN></SPAN>,
  <SPAN class="">"task"</SPAN>: <SPAN class=""><SPAN class="">"</SPAN>plain-serviceDocument<SPAN class="">"</SPAN></SPAN>
}</PRE><DIV class=""><SPAN>And, just as with the previous (and all further tasks):</SPAN></DIV></DIV><UL><LI><P>the value for the<SPAN>&nbsp;</SPAN>communityid<SPAN>&nbsp;</SPAN>property should be your ID on this SAP Community platform (e.g. mine is "qmacro")</P></LI><LI><P>the value for the<SPAN>&nbsp;</SPAN>serviceurl<SPAN>&nbsp;</SPAN>property should be the absolute URL (i.e. including the scheme), of your CANDIDATE<SPAN>&nbsp;</SPAN><STRONG>service</STRONG><SPAN>&nbsp;</SPAN>(see<SPAN>&nbsp;</SPAN><A href="https://community.sap.com/t5/application-development-blog-posts/2024-07-quot-reverse-apis-quot-sap-developer-challenge/ba-p/13749653#toc-hId--356999885" target="_blank"><span class="lia-unicode-emoji" title=":information:">â¹ï¸</span><SPAN>&nbsp;</SPAN>A note on URLs and services</A>). Note that the service document will be at the same URL.</P></LI></UL><P>That's it!</P><H2 id="toc-hId-430694564">Logging of test results</H2><P>Remember that you can check on your progress, and the progress of your fellow participants - all requests are logged and are available in an entity set served by the TESTER service. The entity set URL is<SPAN>&nbsp;</SPAN><A href="https://developer-challenge-2024-07.cfapps.eu10.hana.ondemand.com/tester/Testlog" target="_blank" rel="nofollow noopener noreferrer">https://developer-challenge-2024-07.cfapps.eu10.hana.ondemand.com/tester/Testlog</A><SPAN>&nbsp;</SPAN>and being an OData V4 entity set, all the normal OData system query options are available to you for digging into that information.</P><P>Until the next task, have fun, and if you have any questions or comments, leave them below!</P>
---
Task 4 - Plain "REST" endpoint (July Developer Challenge - "Reverse APIs")
application-developmentforum-board
2024-07-15
https://community.sap.com/t5/application-development-discussions/task-4-plain-quot-rest-quot-endpoint-july-developer-challenge-quot-reverse/td-p/13760488
2024-07-15-task-4-plain-quot-rest-quot-endpoint-july-developer-challenge-quot-reverse
<DIV class=""><DIV class=""><DIV class=""><DIV class=""><DIV class=""><P>This is a task in the<SPAN>&nbsp;</SPAN><A href="https://community.sap.com/t5/application-development-blog-posts/2024-07-quot-reverse-apis-quot-sap-developer-challenge/ba-p/13749653" target="_blank">July Developer Challenge - "Reverse APIs"</A>.</P><P>In this task, you'll create a new, second service, and within that you'll add a single API endpoint. The difference to the previous service and endpoints is that here a plain "REST" protocol is required.</P><H2 id="toc-hId-1020171749">Background</H2><P>What does that mean, exactly? Well, you may know that CAP's design is wonderfully modular, and agnostic as well as opinionated. I'm sure you will also know that if you define a service in your CDS model and serve it with the CAP server, you'll basically have an OData service. Standing up and serving OData services was the original<SPAN>&nbsp;</SPAN><A href="https://www.bbc.co.uk/news/business-47802280" target="_blank" rel="nofollow noopener noreferrer">killer app</A><SPAN>&nbsp;</SPAN>for the SAP Cloud Application Programming Model. It's hard now to remember how much effort it was, before CAP came along, to create and serve an OData service - and there was even more effort, much more, in fact, to facilitate all Create, Read, Update, Delete &amp; Query (CRUD+Q) operations for the data model you had defined. We take it for granted that with CAP we can spin up an OData service with fully functional support for all standard CRUD+Q operations in a couple of minutes.</P><BLOCKQUOTE><P>When talking about OData, I refer specifically to OData V4. This is for two reasons: CAP's default for OData is also V4, and, well, OData V4 is already<SPAN>&nbsp;</SPAN><A href="https://github.com/qmacro/odata-specs/blob/master/overview.md" target="_blank" rel="nofollow noopener noreferrer">over a decade old</A>.</P></BLOCKQUOTE><H3 id="toc-hId-952740963">Protocols and CAP's modular design</H3><P>While CAP will default to serving OData services, its modular design allows for services to be served using different protocols. Yes, OData is more than<SPAN>&nbsp;</SPAN><A href="https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html" target="_blank" rel="nofollow noopener noreferrer">a protocol</A>, but the protocol component is critical.</P><P>And that leads us on to the other protocol that CAP can serve, out of the box: "REST". I personally put "REST" here in quotes, because REST is not a protocol, it is an architectural style, with a set of<SPAN>&nbsp;</SPAN><A href="https://en.wikipedia.org/wiki/REST#Architectural_constraints" target="_blank" rel="nofollow noopener noreferrer">constraints</A><SPAN>&nbsp;</SPAN>that should inform the design of HTTP-based APIs, if they are to be accurately referred to as "RESTful". Incidentally, if an API conforms to all of the architectural constraints described, it is referred to as "Fully RESTful", and yes, that's the "hidden" (second, or first) meaning behind the name of my narrowboat where I live and work.</P><P><span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="fullyrestful.png" style="width: 999px;"><img src="https://community.sap.com/t5/image/serverpage/image-id/136558i61D777AAF79A84FE/image-size/large?v=v2&amp;px=999" role="button" title="fullyrestful.png" alt="fullyrestful.png" /></span></P><P>When you see "REST" referred to as a protocol, think of it as a "plain HTTP" style API.</P><P>Anyway, for the sake of this Developer Challenge, and for common understanding and consistency with Capire, the CAP documentation, we can think of "REST" as a protocol. You can see in the<SPAN>&nbsp;</SPAN><A href="https://cap.cloud.sap/docs/node.js/cds-serve#cds-protocols" target="_blank" rel="nofollow noopener noreferrer">cds.serve() - cds.protocols</A><SPAN>&nbsp;</SPAN>section of Capire which protocol adapters are available both out of the box and as an open source package.</P><P>It's important then to think of a CAP service in different contexts, or at different layers:</P><UL><LI>the definition (in CDL, within the CDS model as a whole)</LI><LI>the implementation (in Node.js or Java)</LI><LI>the protocol used to serve it</LI></UL><P>And as the primary protocols used to serve it are all based on the application protocol that is HTTP, there's a link between the protocol used, and how that is indicated, or exposed, as part of the URL path. Here are the default paths for the standard protocols:</P><UL><LI>OData V4:<SPAN>&nbsp;</SPAN>/odata/v4</LI><LI>"REST":<SPAN>&nbsp;</SPAN>/rest</LI><LI>GraphQL:<SPAN>&nbsp;</SPAN>/graphql</LI></UL><P>And OData V4 is the default protocol. So by default, if you define a service<SPAN>&nbsp;</SPAN>x, it will be served as an OData V4 service, at the service path<SPAN>&nbsp;</SPAN>/odata/v4/x.</P><P>With the<SPAN>&nbsp;</SPAN><A href="https://cap.cloud.sap/docs/node.js/cds-serve#path" target="_blank" rel="nofollow noopener noreferrer">@path</A><SPAN>&nbsp;</SPAN>annotation you can specify a custom path for the service, and this is what you were required to do for the service that contained the API endpoints described in Tasks 1, 2 and 3, in that the required path for the OData service was<SPAN>&nbsp;</SPAN>/basic, rather than<SPAN>&nbsp;</SPAN>/odata/v4/basic.</P><P>With the<SPAN>&nbsp;</SPAN><A href="https://cap.cloud.sap/docs/node.js/cds-serve#protocol" target="_blank" rel="nofollow noopener noreferrer">@protocol</A><SPAN>&nbsp;</SPAN>annotation you can specify the protocol.</P><H3 id="toc-hId-756227458">Differences between the OData V4 and "REST" protocols</H3><P>If you take a basic CAP service<SPAN>&nbsp;</SPAN>x<SPAN>&nbsp;</SPAN>that defaults to being served as an OData protocol, at<SPAN>&nbsp;</SPAN>/odata/v4/x, and then switch protocols by annotating it with<SPAN>&nbsp;</SPAN>@protocol: 'rest'<SPAN>&nbsp;</SPAN>(or simply<SPAN>&nbsp;</SPAN>@rest) you'll see that while there are differences between the key resources (such as the entity sets) they are only very slight. Perhaps most notably there's an absence of any notion of metadata or metadata context. Even the standard OData system query options (such as<SPAN>&nbsp;</SPAN>$filter<SPAN>&nbsp;</SPAN>and<SPAN>&nbsp;</SPAN>$select) are supported.</P><P>That lack of differences, in my opinion, is because it makes a lot of sense, based on a combination of reasons:</P><UL><LI>OData has a well thought out, battle-tested and mature<SPAN>&nbsp;</SPAN><A href="https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html" target="_blank" rel="nofollow noopener noreferrer">protocol</A>,<SPAN>&nbsp;</SPAN><A href="https://docs.oasis-open.org/odata/odata/v4.01/os/part2-url-conventions/odata-v4.01-os-part2-url-conventions.html" target="_blank" rel="nofollow noopener noreferrer">set of URL convention</A><SPAN>&nbsp;</SPAN>and<SPAN>&nbsp;</SPAN><A href="https://docs.oasis-open.org/odata/odata-csdl-json/v4.01/odata-csdl-json-v4.01.html" target="_blank" rel="nofollow noopener noreferrer">schema definition language</A></LI><LI>Not being an actual protocol, REST needs some concrete decisions with respect not only to addressing and accessing &amp; manipulating resources, but also to providing those resources in specific representations. And OData's approach is both well designed and well understood, from a URL convention perspective (addressing and accessing resources), from a protocol perspective (accessing &amp; manipulating resources) and resource provision perspective (providing those resources in specific representations). So why re-invent?</LI><LI>a well-designed plain HTTP protocol today should work with, rather than fight against, the HTTP constructs and philosophy of being an application protocol (yes I'm looking at you, GraphQL)</LI></UL><P>This and the next couple of tasks give you a chance to explore these ideas, and the "REST" protocol in particular.</P><H2 id="toc-hId-430631234">The requirements</H2><P>Here are the specific requirements for this task.</P><P>You must create a new service called<SPAN>&nbsp;</SPAN>plain. One separate to the<SPAN>&nbsp;</SPAN>basic<SPAN>&nbsp;</SPAN>service that you already have. The service must be served via the "REST" protocol, at the default endpoint for such a service.</P><P>Within this new service, you should define a very simple API endpoint that returns a static value, <A href="https://simple.wikipedia.org/wiki/42_(answer)" target="_self" rel="nofollow noopener noreferrer">the answer to life, the universe, and everything</A>. Very much like the endpoint in<SPAN>&nbsp;</SPAN><A href="https://community.sap.com/t5/application-development-discussions/task-1-your-first-service-and-first-endpoint-july-developer-challenge-quot/m-p/13752205" target="_blank">Task 1 - Your first service and endpoint</A>.</P><P>It should expect no arguments (and therefore be defined with no parameters), and be standalone, i.e. "unbound". It should be callable via the HTTP GET method and have no side-effects, i.e. a "function".</P><BLOCKQUOTE><P>The terms bound and unbound, and the idea of and semantic differences between functions and actions, are taken from the OData world, but make sense here in the land of more plain HTTP based APIs, especially as with CAP, the service definition (CDS model), and the serving of the service (protocol), are separate.</P></BLOCKQUOTE><P>To underline, however, that we've now moved away from the OData protocol, the API endpoint should be addressable via the following simpler path:</P><DIV class=""><PRE>/rest/plain/theAnswer</PRE><DIV class=""><SPAN>Note the lack of parentheses at the end of the last segment.</SPAN></DIV></DIV><P>Like always, once you've got your service defined, and a simple implementation ready, you're done.</P><P>It is definitely worth testing it yourself first, e.g. with<SPAN>&nbsp;</SPAN>curl, Postman, or even the<SPAN>&nbsp;</SPAN><A href="https://marketplace.visualstudio.com/items?itemName=humao.rest-client" target="_blank" rel="nofollow noopener noreferrer">REST Client</A><SPAN>&nbsp;</SPAN>extension to VS Code that some of you are using (going on what I can see from some of your responses to the<SPAN>&nbsp;</SPAN><A href="https://community.sap.com/t5/application-development-discussions/july-developer-challenge-quot-reverse-apis-quot-task-1-your-first-service/m-p/13752205" target="_blank">previous task</A>). Use whatever tool you prefer for making HTTP calls.</P><P>With your server running (on, let's say, the default local CAP server port of 4004), make a request like this:</P><DIV class=""><PRE>curl -s --url <SPAN class=""><SPAN class="">"</SPAN>localhost:4004/rest/plain/theAnswer<SPAN class="">"</SPAN></SPAN></PRE><DIV class=""><SPAN>and the reponse should look like this:</SPAN></DIV></DIV><DIV class=""><PRE>42</PRE><DIV class=""><SPAN>For some bonus kudos, share your observation in the comments below on the default representation here. What is the value of the Content-Type header in the HTTP responses served for your endpoint?. What would it be if you served an array of Integers?</SPAN></DIV></DIV><H2 id="toc-hId-234117729">Defining and implementing this second service</H2><P>CAP offers flexibility, not least in service definitions (in the overall CDS model) and implementations. In needing to define and implement a new, second service, you have lots of choices:</P><UL><LI>define the service in the same, existing<SPAN>&nbsp;</SPAN>.cds<SPAN>&nbsp;</SPAN>file that you already have</LI><LI>create a new<SPAN>&nbsp;</SPAN>.cds<SPAN>&nbsp;</SPAN>file</LI></UL><P>and of course you could always:</P><UL><LI>create a completely new CAP project</LI></UL><P>Which way you go is up to you. It would be great to hear from you, again, in the comments below, which approach you took.</P><H2 id="toc-hId-37604224">Submitting your API endpoint to the TESTER</H2><P>Now you're ready to submit your CANDIDATE service, with the specific API endpoint, to the TESTER!</P><H3 id="toc-hId--29826562">The payload</H3><P>The task identifier you need to supply in the payload of your submission is:<SPAN>&nbsp;</SPAN><STRONG>plain-theAnswer</STRONG>.</P><P>You'll have already done this sort of thing<SPAN>&nbsp;</SPAN><A href="https://community.sap.com/t5/application-development-discussions/july-developer-challenge-quot-reverse-apis-quot-task-1-your-first-service/m-p/13752205" target="_blank">previously</A><SPAN>&nbsp;</SPAN>so just head back there for the more detailed instructions if you need them, or to the the section titled "<A href="https://community.sap.com/t5/application-development-blog-posts/2024-07-quot-reverse-apis-quot-sap-developer-challenge/ba-p/13749653#toc-hId--553513390" target="_blank">The Tester service, and making a test request</A>" in the<SPAN>&nbsp;</SPAN><A href="https://community.sap.com/t5/application-development-blog-posts/2024-07-quot-reverse-apis-quot-sap-developer-challenge/ba-p/13749653" target="_blank">main challenge blog post</A>.</P><P>Now, to have your freshly minted API endpoint in this task tested, you'll need to submit a JSON payload like this:</P><DIV class=""><PRE>{
  <SPAN class="">"communityid"</SPAN>: <SPAN class=""><SPAN class="">"</SPAN>&lt;your-community-id&gt;<SPAN class="">"</SPAN></SPAN>,
  <SPAN class="">"serviceurl"</SPAN>: <SPAN class=""><SPAN class="">"</SPAN>&lt;the-URL-of-your-service&gt;<SPAN class="">"</SPAN></SPAN>,
  <SPAN class="">"task"</SPAN>: <SPAN class=""><SPAN class="">"</SPAN>plain-theAnswer<SPAN class="">"</SPAN></SPAN>
}</PRE><DIV class=""><SPAN>And, just as with the previous (and all further tasks):</SPAN></DIV></DIV><UL><LI><P>the value for the<SPAN>&nbsp;</SPAN>communityid<SPAN>&nbsp;</SPAN>property should be your ID on this SAP Community platform (e.g. mine is "qmacro")</P></LI><LI><P>the value for the<SPAN>&nbsp;</SPAN>serviceurl<SPAN>&nbsp;</SPAN>property should be the absolute URL (i.e. including the scheme), of your CANDIDATE<SPAN>&nbsp;</SPAN><STRONG>service</STRONG><SPAN>&nbsp;</SPAN>which<SPAN>&nbsp;</SPAN><EM>contains</EM><SPAN>&nbsp;</SPAN>the API endpoint (see<SPAN>&nbsp;</SPAN><A href="https://community.sap.com/t5/application-development-blog-posts/2024-07-quot-reverse-apis-quot-sap-developer-challenge/ba-p/13749653#toc-hId--356999885" target="_blank"><span class="lia-unicode-emoji" title=":information:">â¹ï¸</span><SPAN>&nbsp;</SPAN>A note on URLs and services</A>), not the full URL of the specific API endpoint itself</P></LI></UL><P>That's it!</P><H2 id="toc-hId--355422786">Logging of test results</H2><P>Remember that you can check on your progress, and the progress of your fellow participants - all requests are logged and are available in an entity set served by the TESTER service. The entity set URL is<SPAN>&nbsp;</SPAN><A href="https://developer-challenge-2024-07.cfapps.eu10.hana.ondemand.com/tester/Testlog" target="_blank" rel="nofollow noopener noreferrer">https://developer-challenge-2024-07.cfapps.eu10.hana.ondemand.com/tester/Testlog</A><SPAN>&nbsp;</SPAN>and being an OData V4 entity set, all the normal OData system query options are available to you for digging into that information.</P><P>Until the next task, have fun, and if you have any questions or comments, leave them below!</P></DIV></DIV></DIV></DIV></DIV>
---
Task 3 - Multi-parameter basic sum function (July Developer Challenge - "Reverse APIs")
application-developmentforum-board
2024-07-11
https://community.sap.com/t5/application-development-discussions/task-3-multi-parameter-basic-sum-function-july-developer-challenge-quot/td-p/13757582
2024-07-11-task-3-multi-parameter-basic-sum-function-july-developer-challenge-quot
<P>This is a task in the<SPAN>&nbsp;</SPAN><A href="https://community.sap.com/t5/application-development-blog-posts/2024-07-quot-reverse-apis-quot-sap-developer-challenge/ba-p/13749653" target="_blank">July Developer Challenge - "Reverse APIs"</A>.</P><P>This task is to add a final API endpoint to the service you already created in<SPAN>&nbsp;</SPAN><A href="https://community.sap.com/t5/application-development-discussions/2024-07-developer-challenge-task-1-your-first-service-and-first-endpoint/m-p/13752205" target="_blank">Task 1 - Your first service and first endpoint</A>. It expands a little on the previous task to cement the idea of parameter definitions and access to them in the implementation.</P><H2 id="toc-hId-1019457720">The requirements</H2><P>Here are the specific requirements for this task.</P><P>The API endpoint should be made available within the existing service<SPAN>&nbsp;</SPAN>basic. Relative to the service path, the name should be<SPAN>&nbsp;</SPAN>sum<SPAN>&nbsp;</SPAN>and be requestable via an HTTP GET method.</P><P>It should be defined with two Integer parameters,<SPAN>&nbsp;</SPAN>a<SPAN>&nbsp;</SPAN>and<SPAN>&nbsp;</SPAN>b, and should return an Integer value, being the sum of<SPAN>&nbsp;</SPAN>a<SPAN>&nbsp;</SPAN>and<SPAN>&nbsp;</SPAN>b, in the context of a JSON payload that looks like this (pretty-printed for readability here):</P><DIV class=""><PRE>{
  <SPAN class="">"@odata.context"</SPAN>: <SPAN class=""><SPAN class="">"</SPAN>$metadata#Edm.Int32<SPAN class="">"</SPAN></SPAN>,
  <SPAN class="">"value"</SPAN>: <SPAN class="">&lt;sum-of-a-and-b&gt;</SPAN>
}</PRE><DIV class=""><SPAN>All this means is that you should declare and implement this API endpoint as another</SPAN><SPAN>&nbsp;</SPAN><A href="https://cap.cloud.sap/docs/cds/cdl#actions" target="_blank" rel="nofollow noopener noreferrer">unbound function</A></DIV></DIV><P>When this API endpoint is added to the service and served via the OData V4 protocol, the service metadata document should look like this:</P><DIV class=""><PRE>&lt;?<SPAN class="">xml</SPAN><SPAN class=""> version</SPAN>=<SPAN class=""><SPAN class="">"</SPAN>1.0<SPAN class="">"</SPAN></SPAN><SPAN class=""> encoding</SPAN>=<SPAN class=""><SPAN class="">"</SPAN>utf-8<SPAN class="">"</SPAN></SPAN>?&gt;
&lt;<SPAN class="">edmx</SPAN><SPAN class="">:</SPAN><SPAN class="">Edmx</SPAN> <SPAN class="">Version</SPAN>=<SPAN class=""><SPAN class="">"</SPAN>4.0<SPAN class="">"</SPAN></SPAN> <SPAN class="">xmlns</SPAN><SPAN class="">:</SPAN><SPAN class="">edmx</SPAN>=<SPAN class=""><SPAN class="">"</SPAN>http://docs.oasis-open.org/odata/ns/edmx<SPAN class="">"</SPAN></SPAN>&gt;
  &lt;<SPAN class="">edmx</SPAN><SPAN class="">:</SPAN><SPAN class="">Reference</SPAN> <SPAN class="">Uri</SPAN>=<SPAN class=""><SPAN class="">"</SPAN>https://sap.github.io/odata-vocabularies/vocabularies/Common.xml<SPAN class="">"</SPAN></SPAN>&gt;
    &lt;<SPAN class="">edmx</SPAN><SPAN class="">:</SPAN><SPAN class="">Include</SPAN> <SPAN class="">Alias</SPAN>=<SPAN class=""><SPAN class="">"</SPAN>Common<SPAN class="">"</SPAN></SPAN> <SPAN class="">Namespace</SPAN>=<SPAN class=""><SPAN class="">"</SPAN>com.sap.vocabularies.Common.v1<SPAN class="">"</SPAN></SPAN>/&gt;
  &lt;/<SPAN class="">edmx</SPAN><SPAN class="">:</SPAN><SPAN class="">Reference</SPAN>&gt;
  &lt;<SPAN class="">edmx</SPAN><SPAN class="">:</SPAN><SPAN class="">Reference</SPAN> <SPAN class="">Uri</SPAN>=<SPAN class=""><SPAN class="">"</SPAN>https://oasis-tcs.github.io/odata-vocabularies/vocabularies/Org.OData.Core.V1.xml<SPAN class="">"</SPAN></SPAN>&gt;
    &lt;<SPAN class="">edmx</SPAN><SPAN class="">:</SPAN><SPAN class="">Include</SPAN> <SPAN class="">Alias</SPAN>=<SPAN class=""><SPAN class="">"</SPAN>Core<SPAN class="">"</SPAN></SPAN> <SPAN class="">Namespace</SPAN>=<SPAN class=""><SPAN class="">"</SPAN>Org.OData.Core.V1<SPAN class="">"</SPAN></SPAN>/&gt;
  &lt;/<SPAN class="">edmx</SPAN><SPAN class="">:</SPAN><SPAN class="">Reference</SPAN>&gt;
  &lt;<SPAN class="">edmx</SPAN><SPAN class="">:</SPAN><SPAN class="">DataServices</SPAN>&gt;
    &lt;<SPAN class="">Schema</SPAN> <SPAN class="">Namespace</SPAN>=<SPAN class=""><SPAN class="">"</SPAN>basic<SPAN class="">"</SPAN></SPAN> <SPAN class="">xmlns</SPAN>=<SPAN class=""><SPAN class="">"</SPAN>http://docs.oasis-open.org/odata/ns/edm<SPAN class="">"</SPAN></SPAN>&gt;
      &lt;<SPAN class="">EntityContainer</SPAN> <SPAN class="">Name</SPAN>=<SPAN class=""><SPAN class="">"</SPAN>EntityContainer<SPAN class="">"</SPAN></SPAN>&gt;
        &lt;<SPAN class="">FunctionImport</SPAN> <SPAN class="">Name</SPAN>=<SPAN class=""><SPAN class="">"</SPAN>ping<SPAN class="">"</SPAN></SPAN> <SPAN class="">Function</SPAN>=<SPAN class=""><SPAN class="">"</SPAN>basic.ping<SPAN class="">"</SPAN></SPAN>/&gt;
        &lt;<SPAN class="">FunctionImport</SPAN> <SPAN class="">Name</SPAN>=<SPAN class=""><SPAN class="">"</SPAN>hello<SPAN class="">"</SPAN></SPAN> <SPAN class="">Function</SPAN>=<SPAN class=""><SPAN class="">"</SPAN>basic.hello<SPAN class="">"</SPAN></SPAN>/&gt;
        &lt;<SPAN class="">FunctionImport</SPAN> <SPAN class="">Name</SPAN>=<SPAN class=""><SPAN class="">"</SPAN>sum<SPAN class="">"</SPAN></SPAN> <SPAN class="">Function</SPAN>=<SPAN class=""><SPAN class="">"</SPAN>basic.sum<SPAN class="">"</SPAN></SPAN>/&gt;
      &lt;/<SPAN class="">EntityContainer</SPAN>&gt;
      &lt;<SPAN class="">Function</SPAN> <SPAN class="">Name</SPAN>=<SPAN class=""><SPAN class="">"</SPAN>ping<SPAN class="">"</SPAN></SPAN> <SPAN class="">IsBound</SPAN>=<SPAN class=""><SPAN class="">"</SPAN>false<SPAN class="">"</SPAN></SPAN> <SPAN class="">IsComposable</SPAN>=<SPAN class=""><SPAN class="">"</SPAN>false<SPAN class="">"</SPAN></SPAN>&gt;
        &lt;<SPAN class="">ReturnType</SPAN> <SPAN class="">Type</SPAN>=<SPAN class=""><SPAN class="">"</SPAN>Edm.String<SPAN class="">"</SPAN></SPAN>/&gt;
      &lt;/<SPAN class="">Function</SPAN>&gt;
      &lt;<SPAN class="">Function</SPAN> <SPAN class="">Name</SPAN>=<SPAN class=""><SPAN class="">"</SPAN>hello<SPAN class="">"</SPAN></SPAN> <SPAN class="">IsBound</SPAN>=<SPAN class=""><SPAN class="">"</SPAN>false<SPAN class="">"</SPAN></SPAN> <SPAN class="">IsComposable</SPAN>=<SPAN class=""><SPAN class="">"</SPAN>false<SPAN class="">"</SPAN></SPAN>&gt;
        &lt;<SPAN class="">Parameter</SPAN> <SPAN class="">Name</SPAN>=<SPAN class=""><SPAN class="">"</SPAN>to<SPAN class="">"</SPAN></SPAN> <SPAN class="">Type</SPAN>=<SPAN class=""><SPAN class="">"</SPAN>Edm.String<SPAN class="">"</SPAN></SPAN>/&gt;
        &lt;<SPAN class="">ReturnType</SPAN> <SPAN class="">Type</SPAN>=<SPAN class=""><SPAN class="">"</SPAN>Edm.String<SPAN class="">"</SPAN></SPAN>/&gt;
      &lt;/<SPAN class="">Function</SPAN>&gt;
      &lt;<SPAN class="">Function</SPAN> <SPAN class="">Name</SPAN>=<SPAN class=""><SPAN class="">"</SPAN>sum<SPAN class="">"</SPAN></SPAN> <SPAN class="">IsBound</SPAN>=<SPAN class=""><SPAN class="">"</SPAN>false<SPAN class="">"</SPAN></SPAN> <SPAN class="">IsComposable</SPAN>=<SPAN class=""><SPAN class="">"</SPAN>false<SPAN class="">"</SPAN></SPAN>&gt;
        &lt;<SPAN class="">Parameter</SPAN> <SPAN class="">Name</SPAN>=<SPAN class=""><SPAN class="">"</SPAN>a<SPAN class="">"</SPAN></SPAN> <SPAN class="">Type</SPAN>=<SPAN class=""><SPAN class="">"</SPAN>Edm.Int32<SPAN class="">"</SPAN></SPAN>/&gt;
        &lt;<SPAN class="">Parameter</SPAN> <SPAN class="">Name</SPAN>=<SPAN class=""><SPAN class="">"</SPAN>b<SPAN class="">"</SPAN></SPAN> <SPAN class="">Type</SPAN>=<SPAN class=""><SPAN class="">"</SPAN>Edm.Int32<SPAN class="">"</SPAN></SPAN>/&gt;
        &lt;<SPAN class="">ReturnType</SPAN> <SPAN class="">Type</SPAN>=<SPAN class=""><SPAN class="">"</SPAN>Edm.Int32<SPAN class="">"</SPAN></SPAN>/&gt;
      &lt;/<SPAN class="">Function</SPAN>&gt;
    &lt;/<SPAN class="">Schema</SPAN>&gt;
  &lt;/<SPAN class="">edmx</SPAN><SPAN class="">:</SPAN><SPAN class="">DataServices</SPAN>&gt;
&lt;/<SPAN class="">edmx</SPAN><SPAN class="">:</SPAN><SPAN class="">Edmx</SPAN>&gt;</PRE><DIV class=""><SPAN>You can see that this metadata document contains definitions for this new</SPAN><SPAN>&nbsp;</SPAN><SPAN>FunctionImport</SPAN><SPAN>&nbsp;</SPAN><SPAN>"sum", as well as the two previous</SPAN><SPAN>&nbsp;</SPAN><SPAN>FunctionImports "ping" and "hello".</SPAN></DIV></DIV><P>Once you've got your service defined, and a simple implementation ready with an<SPAN>&nbsp;</SPAN>on<SPAN>&nbsp;</SPAN>handler for the<SPAN>&nbsp;</SPAN>sum<SPAN>&nbsp;</SPAN>event, you're ready.</P><P>It is definitely worth testing it yourself first, e.g. with<SPAN>&nbsp;</SPAN>curl, Postman, or even the<SPAN>&nbsp;</SPAN><A href="https://marketplace.visualstudio.com/items?itemName=humao.rest-client" target="_blank" rel="nofollow noopener noreferrer">REST Client</A><SPAN>&nbsp;</SPAN>extension to VS Code that some of you are using (going on what I can see from some of your responses to the<SPAN>&nbsp;</SPAN><A href="https://community.sap.com/t5/application-development-discussions/july-developer-challenge-quot-reverse-apis-quot-task-1-your-first-service/m-p/13752205" target="_blank">previous task</A>). Use whatever tool you prefer for making HTTP calls.</P><P>With your server running (on, let's say, the default local CAP server port of 4004), make a request like this, supplying values for the<SPAN>&nbsp;</SPAN>a<SPAN>&nbsp;</SPAN>and<SPAN>&nbsp;</SPAN>b<SPAN>&nbsp;</SPAN>parameters:</P><DIV class=""><PRE>curl -s --url <SPAN class=""><SPAN class="">"</SPAN>localhost:4004/basic/sum(a=100,b=50)<SPAN class="">"</SPAN></SPAN></PRE><DIV class=""><SPAN>and the reponse should look like this:</SPAN></DIV></DIV><DIV class=""><PRE>{<SPAN class="">"@odata.context"</SPAN>:<SPAN class=""><SPAN class="">"</SPAN>$metadata#Edm.Int32<SPAN class="">"</SPAN></SPAN>,<SPAN class="">"value"</SPAN>:<SPAN class="">150</SPAN>}</PRE></DIV><H2 id="toc-hId-822944215">Submitting your API endpoint to the TESTER</H2><P>Now you're ready to submit your CANDIDATE service, with the specific API endpoint, to the TESTER!</P><H3 id="toc-hId-755513429">The payload</H3><P>The task identifier you need to supply in the payload of your submission is:<SPAN>&nbsp;</SPAN><STRONG>basic-sum</STRONG>.</P><P>You'll have already done this sort of thing<SPAN>&nbsp;</SPAN><A href="https://community.sap.com/t5/application-development-discussions/july-developer-challenge-quot-reverse-apis-quot-task-1-your-first-service/m-p/13752205" target="_blank">previously</A><SPAN>&nbsp;</SPAN>so just head back there for the more detailed instructions if you need them, or to the the section titled "<A href="https://community.sap.com/t5/application-development-blog-posts/2024-07-quot-reverse-apis-quot-sap-developer-challenge/ba-p/13749653#toc-hId--553513390" target="_blank">The Tester service, and making a test request</A>" in the<SPAN>&nbsp;</SPAN><A href="https://community.sap.com/t5/application-development-blog-posts/2024-07-quot-reverse-apis-quot-sap-developer-challenge/ba-p/13749653" target="_blank">main challenge blog post</A>.</P><P>Now, to have your freshly minted API endpoint in this task tested, you'll need to submit a JSON payload like this:</P><DIV class=""><PRE>{
  <SPAN class="">"communityid"</SPAN>: <SPAN class=""><SPAN class="">"</SPAN>&lt;your-community-id&gt;<SPAN class="">"</SPAN></SPAN>,
  <SPAN class="">"serviceurl"</SPAN>: <SPAN class=""><SPAN class="">"</SPAN>&lt;the-URL-of-your-service&gt;<SPAN class="">"</SPAN></SPAN>,
  <SPAN class="">"task"</SPAN>: <SPAN class=""><SPAN class="">"</SPAN>basic-sum<SPAN class="">"</SPAN></SPAN>
}</PRE><DIV class=""><SPAN>And, just as with the previous (and all further tasks):</SPAN></DIV></DIV><UL><LI><P>the value for the<SPAN>&nbsp;</SPAN>communityid<SPAN>&nbsp;</SPAN>property should be your ID on this SAP Community platform (e.g. mine is "qmacro")</P></LI><LI><P>the value for the<SPAN>&nbsp;</SPAN>serviceurl<SPAN>&nbsp;</SPAN>property should be the absolute URL (i.e. including the scheme), of your CANDIDATE<SPAN>&nbsp;</SPAN><STRONG>service</STRONG><SPAN>&nbsp;</SPAN>which<SPAN>&nbsp;</SPAN><EM>contains</EM><SPAN>&nbsp;</SPAN>the API endpoint (see<SPAN>&nbsp;</SPAN><A href="https://community.sap.com/t5/application-development-blog-posts/2024-07-quot-reverse-apis-quot-sap-developer-challenge/ba-p/13749653#toc-hId--356999885" target="_blank"><span class="lia-unicode-emoji" title=":information:">â¹ï¸</span><SPAN>&nbsp;</SPAN>A note on URLs and services</A>), not the full URL of the specific API endpoint itself</P></LI></UL><P>That's it!</P><H2 id="toc-hId-429917205">Logging of test results</H2><P>Remember that you can check on your progress, and the progress of your fellow participants - all requests are logged and are available in an entity set served by the TESTER service. The entity set URL is<SPAN>&nbsp;</SPAN><A href="https://developer-challenge-2024-07.cfapps.eu10.hana.ondemand.com/tester/Testlog" target="_blank" rel="nofollow noopener noreferrer">https://developer-challenge-2024-07.cfapps.eu10.hana.ondemand.com/tester/Testlog</A><SPAN>&nbsp;</SPAN>and being an OData V4 entity set, all the normal OData system query options are available to you for digging into that information.</P><P>Until the next task, have fun, and if you have any questions or comments, leave them below!</P>
---
Task 2 - Capire's Hello World! (July Developer Challenge - "Reverse APIs")
application-developmentforum-board
2024-07-09
https://community.sap.com/t5/application-development-discussions/task-2-capire-s-hello-world-july-developer-challenge-quot-reverse-apis-quot/td-p/13755407
2024-07-09-task-2-capire-s-hello-world-july-developer-challenge-quot-reverse-apis-quot
<P>This is a task in the<SPAN>&nbsp;</SPAN><A href="https://community.sap.com/t5/application-development-blog-posts/2024-07-quot-reverse-apis-quot-sap-developer-challenge/ba-p/13749653" target="_blank">July Developer Challenge - "Reverse APIs"</A>.</P><P>This task is to add a second API endpoint to the service you already created in<SPAN>&nbsp;</SPAN><A href="https://community.sap.com/t5/application-development-discussions/2024-07-developer-challenge-task-1-your-first-service-and-first-endpoint/m-p/13752205" target="_blank">Task 1 - Your first service and first endpoint</A>. It's nice and simple, and in fact is rather similar to the "Hello World!" example in<SPAN>&nbsp;</SPAN><A href="https://cap.cloud.sap/docs/" target="_blank" rel="nofollow noopener noreferrer">Capire</A>'s "Getting Started" section ("Capire" is the friendly name for the CAP documentation). After you've completed this task, why don't you head over there and take a look around, as documentation goes, it's really rather awesome.</P><H2 id="toc-hId-1019396934">A second API endpoint in the "basic" service</H2><P>To complete this task successfully, all you have to do is implement another API endpoint and make it available in the service you created in the previous task, and of course submit it to be tested by the TESTER. That means adding that API endpoint definition to the service definition in your CDS model, and then writing the implementation for it.</P><H2 id="toc-hId-822883429">The requirements</H2><P>Here are the specific requirements for this task.</P><P>The API endpoint should be made available within the existing service<SPAN>&nbsp;</SPAN>basic. Relative to the service path, the name should be<SPAN>&nbsp;</SPAN>hello<SPAN>&nbsp;</SPAN>and be requestable via an HTTP GET method.</P><P>It should have a single parameter,<SPAN>&nbsp;</SPAN>to, and should return a String value, in the context of a JSON payload that looks like this:</P><DIV class=""><PRE>{
  <SPAN class="">"@odata.context"</SPAN>: <SPAN class=""><SPAN class="">"</SPAN>$metadata#Edm.String<SPAN class="">"</SPAN></SPAN>,
  <SPAN class="">"value"</SPAN>: <SPAN class=""><SPAN class="">"</SPAN>Hello &lt;value-of-argument-passed-to-the-to-parameter&gt;!<SPAN class="">"</SPAN></SPAN>
}</PRE><DIV class=""><SPAN>All this means is that you should declare and implement this API endpoint as an</SPAN><SPAN>&nbsp;</SPAN><A href="https://cap.cloud.sap/docs/cds/cdl#actions" target="_blank" rel="nofollow noopener noreferrer">unbound function</A><SPAN>&nbsp;</SPAN><SPAN>in the context of your existing service that is being served with the (default) OData V4 protocol.</SPAN></DIV></DIV><P><span class="lia-unicode-emoji" title=":police_car_light:">ð¨</span><SPAN>&nbsp;Finally, be aware that the service should be served at the path&nbsp;</SPAN>/basic<SPAN>, and NOT at the path that's default for OData V4 services (which would be prefixed with&nbsp;</SPAN>/odata/v4<SPAN>). This was actually&nbsp;</SPAN><A href="https://community.sap.com/t5/application-development-discussions/july-developer-challenge-quot-reverse-apis-quot-task-1-your-first-service/m-p/13752205#toc-hId-626278627" target="_blank">a requirement in the previous task - Task 1</A><SPAN>, but the TESTER was deliberately set to "lenient" mode for your very first API endpoint task. That "leniency mode" has been turned off now <span class="lia-unicode-emoji" title=":slightly_smiling_face:">ð</span> So you may find yourself having to adjust your service so that it's served specifically at the&nbsp;</SPAN>/basic<SPAN>&nbsp;path. You may find the&nbsp;</SPAN><A href="https://cap.cloud.sap/docs/node.js/cds-serve#path" target="_blank" rel="nofollow noopener noreferrer">cds.serve() - @path</A><SPAN>&nbsp;section useful here.</SPAN></P><P>When this API endpoint is added to the service and served via the OData V4 protocol, the service metadata document should look like this:</P><DIV class=""><PRE>&lt;?<SPAN class="">xml</SPAN><SPAN class=""> version</SPAN>=<SPAN class=""><SPAN class="">"</SPAN>1.0<SPAN class="">"</SPAN></SPAN><SPAN class=""> encoding</SPAN>=<SPAN class=""><SPAN class="">"</SPAN>utf-8<SPAN class="">"</SPAN></SPAN>?&gt;
&lt;<SPAN class="">edmx</SPAN><SPAN class="">:</SPAN><SPAN class="">Edmx</SPAN> <SPAN class="">Version</SPAN>=<SPAN class=""><SPAN class="">"</SPAN>4.0<SPAN class="">"</SPAN></SPAN> <SPAN class="">xmlns</SPAN><SPAN class="">:</SPAN><SPAN class="">edmx</SPAN>=<SPAN class=""><SPAN class="">"</SPAN>http://docs.oasis-open.org/odata/ns/edmx<SPAN class="">"</SPAN></SPAN>&gt;
  &lt;<SPAN class="">edmx</SPAN><SPAN class="">:</SPAN><SPAN class="">Reference</SPAN> <SPAN class="">Uri</SPAN>=<SPAN class=""><SPAN class="">"</SPAN>https://sap.github.io/odata-vocabularies/vocabularies/Common.xml<SPAN class="">"</SPAN></SPAN>&gt;
    &lt;<SPAN class="">edmx</SPAN><SPAN class="">:</SPAN><SPAN class="">Include</SPAN> <SPAN class="">Alias</SPAN>=<SPAN class=""><SPAN class="">"</SPAN>Common<SPAN class="">"</SPAN></SPAN> <SPAN class="">Namespace</SPAN>=<SPAN class=""><SPAN class="">"</SPAN>com.sap.vocabularies.Common.v1<SPAN class="">"</SPAN></SPAN>/&gt;
  &lt;/<SPAN class="">edmx</SPAN><SPAN class="">:</SPAN><SPAN class="">Reference</SPAN>&gt;
  &lt;<SPAN class="">edmx</SPAN><SPAN class="">:</SPAN><SPAN class="">Reference</SPAN> <SPAN class="">Uri</SPAN>=<SPAN class=""><SPAN class="">"</SPAN>https://oasis-tcs.github.io/odata-vocabularies/vocabularies/Org.OData.Core.V1.xml<SPAN class="">"</SPAN></SPAN>&gt;
    &lt;<SPAN class="">edmx</SPAN><SPAN class="">:</SPAN><SPAN class="">Include</SPAN> <SPAN class="">Alias</SPAN>=<SPAN class=""><SPAN class="">"</SPAN>Core<SPAN class="">"</SPAN></SPAN> <SPAN class="">Namespace</SPAN>=<SPAN class=""><SPAN class="">"</SPAN>Org.OData.Core.V1<SPAN class="">"</SPAN></SPAN>/&gt;
  &lt;/<SPAN class="">edmx</SPAN><SPAN class="">:</SPAN><SPAN class="">Reference</SPAN>&gt;
  &lt;<SPAN class="">edmx</SPAN><SPAN class="">:</SPAN><SPAN class="">DataServices</SPAN>&gt;
    &lt;<SPAN class="">Schema</SPAN> <SPAN class="">Namespace</SPAN>=<SPAN class=""><SPAN class="">"</SPAN>basic<SPAN class="">"</SPAN></SPAN> <SPAN class="">xmlns</SPAN>=<SPAN class=""><SPAN class="">"</SPAN>http://docs.oasis-open.org/odata/ns/edm<SPAN class="">"</SPAN></SPAN>&gt;
      &lt;<SPAN class="">EntityContainer</SPAN> <SPAN class="">Name</SPAN>=<SPAN class=""><SPAN class="">"</SPAN>EntityContainer<SPAN class="">"</SPAN></SPAN>&gt;
        &lt;<SPAN class="">FunctionImport</SPAN> <SPAN class="">Name</SPAN>=<SPAN class=""><SPAN class="">"</SPAN>ping<SPAN class="">"</SPAN></SPAN> <SPAN class="">Function</SPAN>=<SPAN class=""><SPAN class="">"</SPAN>basic.ping<SPAN class="">"</SPAN></SPAN>/&gt;
        &lt;<SPAN class="">FunctionImport</SPAN> <SPAN class="">Name</SPAN>=<SPAN class=""><SPAN class="">"</SPAN>hello<SPAN class="">"</SPAN></SPAN> <SPAN class="">Function</SPAN>=<SPAN class=""><SPAN class="">"</SPAN>basic.hello<SPAN class="">"</SPAN></SPAN>/&gt;
      &lt;/<SPAN class="">EntityContainer</SPAN>&gt;
      &lt;<SPAN class="">Function</SPAN> <SPAN class="">Name</SPAN>=<SPAN class=""><SPAN class="">"</SPAN>ping<SPAN class="">"</SPAN></SPAN> <SPAN class="">IsBound</SPAN>=<SPAN class=""><SPAN class="">"</SPAN>false<SPAN class="">"</SPAN></SPAN> <SPAN class="">IsComposable</SPAN>=<SPAN class=""><SPAN class="">"</SPAN>false<SPAN class="">"</SPAN></SPAN>&gt;
        &lt;<SPAN class="">ReturnType</SPAN> <SPAN class="">Type</SPAN>=<SPAN class=""><SPAN class="">"</SPAN>Edm.String<SPAN class="">"</SPAN></SPAN>/&gt;
      &lt;/<SPAN class="">Function</SPAN>&gt;
      &lt;<SPAN class="">Function</SPAN> <SPAN class="">Name</SPAN>=<SPAN class=""><SPAN class="">"</SPAN>hello<SPAN class="">"</SPAN></SPAN> <SPAN class="">IsBound</SPAN>=<SPAN class=""><SPAN class="">"</SPAN>false<SPAN class="">"</SPAN></SPAN> <SPAN class="">IsComposable</SPAN>=<SPAN class=""><SPAN class="">"</SPAN>false<SPAN class="">"</SPAN></SPAN>&gt;
        &lt;<SPAN class="">Parameter</SPAN> <SPAN class="">Name</SPAN>=<SPAN class=""><SPAN class="">"</SPAN>to<SPAN class="">"</SPAN></SPAN> <SPAN class="">Type</SPAN>=<SPAN class=""><SPAN class="">"</SPAN>Edm.String<SPAN class="">"</SPAN></SPAN>/&gt;
        &lt;<SPAN class="">ReturnType</SPAN> <SPAN class="">Type</SPAN>=<SPAN class=""><SPAN class="">"</SPAN>Edm.String<SPAN class="">"</SPAN></SPAN>/&gt;
      &lt;/<SPAN class="">Function</SPAN>&gt;
    &lt;/<SPAN class="">Schema</SPAN>&gt;
  &lt;/<SPAN class="">edmx</SPAN><SPAN class="">:</SPAN><SPAN class="">DataServices</SPAN>&gt;
&lt;/<SPAN class="">edmx</SPAN><SPAN class="">:</SPAN><SPAN class="">Edmx</SPAN>&gt;</PRE><DIV class=""><SPAN>You can see that this metadata document contains definitions for two</SPAN><SPAN>&nbsp;</SPAN>FunctionImport<SPAN>s "ping" and "hello".</SPAN></DIV></DIV><P>Once you've got your service defined, and a simple implementation ready with an<SPAN>&nbsp;</SPAN>on<SPAN>&nbsp;</SPAN>handler for the<SPAN>&nbsp;</SPAN>hello<SPAN>&nbsp;</SPAN>event, you're ready.</P><P>It is definitely worth testing it yourself first, e.g. with<SPAN>&nbsp;</SPAN>curl, Postman, or even the<SPAN>&nbsp;</SPAN><A href="https://marketplace.visualstudio.com/items?itemName=humao.rest-client" target="_blank" rel="nofollow noopener noreferrer">REST Client</A><SPAN>&nbsp;</SPAN>extension to VS Code that some of you are using (going on what I can see from some of your responses to the<SPAN>&nbsp;</SPAN><A href="https://community.sap.com/t5/application-development-discussions/july-developer-challenge-quot-reverse-apis-quot-task-1-your-first-service/m-p/13752205" target="_blank">previous task</A>). Use whatever tool you prefer for making HTTP calls.</P><P>With your server running (on, let's say, the default local CAP server port of 4004), make a request like this, supplying a value for the<SPAN>&nbsp;</SPAN>to<SPAN>&nbsp;</SPAN>parameter:</P><DIV class=""><PRE>curl -s --url <SPAN class=""><SPAN class="">"</SPAN>localhost:4004/basic/hello(to='Zaphod')<SPAN class="">"</SPAN></SPAN></PRE><DIV class=""><SPAN>and the reponse should look like this:</SPAN></DIV></DIV><DIV class=""><PRE>{<SPAN class="">"@odata.context"</SPAN>:<SPAN class=""><SPAN class="">"</SPAN>$metadata#Edm.String<SPAN class="">"</SPAN></SPAN>,<SPAN class="">"value"</SPAN>:<SPAN class=""><SPAN class="">"</SPAN>Hello Zaphod!<SPAN class="">"</SPAN></SPAN>}</PRE></DIV><H2 id="toc-hId-626369924">Submitting your API endpoint to the TESTER</H2><P>Now you're ready to submit your CANDIDATE service, with the specific API endpoint, to the TESTER!</P><H3 id="toc-hId-558939138">The payload</H3><P>The task identifier you need to supply in the payload of your submission is:<SPAN>&nbsp;</SPAN><STRONG>basic-hello</STRONG>.</P><P>You'll have already done this sort of thing in the<SPAN>&nbsp;</SPAN><A href="https://community.sap.com/t5/application-development-discussions/july-developer-challenge-quot-reverse-apis-quot-task-1-your-first-service/m-p/13752205" target="_blank">previous task</A><SPAN>&nbsp;</SPAN>so just head back there for the more detailed instructions if you need them, or to the the section titled "<A href="https://community.sap.com/t5/application-development-blog-posts/2024-07-quot-reverse-apis-quot-sap-developer-challenge/ba-p/13749653#toc-hId--553513390" target="_blank">The Tester service, and making a test request</A>" in the<SPAN>&nbsp;</SPAN><A href="https://community.sap.com/t5/application-development-blog-posts/2024-07-quot-reverse-apis-quot-sap-developer-challenge/ba-p/13749653" target="_blank">main challenge blog post</A>.</P><P>Now, to have your freshly minted API endpoint in this task tested, you'll need to submit a JSON payload like this:</P><DIV class=""><PRE>{
  <SPAN class="">"communityid"</SPAN>: <SPAN class=""><SPAN class="">"</SPAN>&lt;your-community-id&gt;<SPAN class="">"</SPAN></SPAN>,
  <SPAN class="">"serviceurl"</SPAN>: <SPAN class=""><SPAN class="">"</SPAN>&lt;the-URL-of-your-service&gt;<SPAN class="">"</SPAN></SPAN>,
  <SPAN class="">"task"</SPAN>: <SPAN class=""><SPAN class="">"</SPAN>basic-hello<SPAN class="">"</SPAN></SPAN>
}</PRE><DIV class=""><SPAN>Note that the TESTER will pick a value for the</SPAN><SPAN>&nbsp;</SPAN>to<SPAN>&nbsp;</SPAN><SPAN>parameter, of course, and send it in the test call to your API endpoint.</SPAN></DIV></DIV><P>And, just as with the previous (and all further tasks):</P><UL><LI><P>the value for the<SPAN>&nbsp;</SPAN>communityid<SPAN>&nbsp;</SPAN>property should be your ID on this SAP Community platform (e.g. mine is "qmacro")</P></LI><LI><P>the value for the<SPAN>&nbsp;</SPAN>serviceurl<SPAN>&nbsp;</SPAN>property should be the absolute URL (i.e. including the scheme), of your CANDIDATE<SPAN>&nbsp;</SPAN><STRONG>service</STRONG><SPAN>&nbsp;</SPAN>which<SPAN>&nbsp;</SPAN><EM>contains</EM><SPAN>&nbsp;</SPAN>the API endpoint (see<SPAN>&nbsp;</SPAN><A href="https://community.sap.com/t5/application-development-blog-posts/2024-07-quot-reverse-apis-quot-sap-developer-challenge/ba-p/13749653#toc-hId--356999885" target="_blank"><span class="lia-unicode-emoji" title=":information:">â¹ï¸</span><SPAN>&nbsp;</SPAN>A note on URLs and services</A>), not the full URL of the specific API endpoint itself</P></LI></UL><P>That's it!</P><H2 id="toc-hId-233342914">Logging of test results</H2><P>Remember that you can check on your progress, and the progress of your fellow participants - all requests are logged and are available in an entity set served by the TESTER service. The entity set URL is<SPAN>&nbsp;</SPAN><A href="https://developer-challenge-2024-07.cfapps.eu10.hana.ondemand.com/tester/Testlog" target="_blank" rel="nofollow noopener noreferrer">https://developer-challenge-2024-07.cfapps.eu10.hana.ondemand.com/tester/Testlog</A><SPAN>&nbsp;</SPAN>and being an OData V4 entity set, all the normal OData system query options are available to you for digging into that information.</P><P>Until the next task, have fun, and if you have any questions or comments, leave them below!</P>
---
Task 1 - Your first service and first endpoint (July Developer Challenge - "Reverse APIs")
application-developmentforum-board
2024-07-05
https://community.sap.com/t5/application-development-discussions/task-1-your-first-service-and-first-endpoint-july-developer-challenge-quot/td-p/13752205
2024-07-05-task-1-your-first-service-and-first-endpoint-july-developer-challenge-quot
<P><SPAN>This is a task in the&nbsp;</SPAN><A href="https://community.sap.com/t5/application-development-blog-posts/sap-developer-challenge-quot-reverse-quot-apis/ba-p/13749653" target="_self">July Developer Challenge - "Reverse APIs"</A><SPAN>.</SPAN></P><P>So, you've completed the warm-up task 0 and have managed to get a simple CAP server up, running and accessible from the cloud, and therefore (critically for this month's challenge) accessible by the<SPAN>&nbsp;</SPAN><A href="https://community.sap.com/t5/application-development-blog-posts/2024-07-quot-reverse-apis-quot-sap-developer-challenge/ba-p/13749653#toc-hId-625567640" target="_blank">TESTER</A><SPAN>&nbsp;</SPAN>component. Great! Now it's time to create your first API endpoint. What does that mean, and what do you have to do?</P><P>As this is your first task where you have to create both a service and an endpoint, some help and hints are given. So it's a little more reading for you, but don't worry, the subsequent task descriptions won't be as verbose.</P><H2 id="toc-hId-1019305637">API endpoints and services</H2><P>An API endpoint very often exists in the wider context of a service, which you can think of as being a "container" for one or more endpoints. An OData service will typically offer multiple entity set resources, plus perhaps some action and function imports.</P><P>For example, the classic<SPAN>&nbsp;</SPAN><A href="https://services.odata.org/v4/northwind/northwind.svc/" target="_blank" rel="nofollow noopener noreferrer">Northwind service</A><SPAN>&nbsp;</SPAN>offers various "collections" which normally translate into "entity sets", such as<SPAN>&nbsp;</SPAN><A href="https://services.odata.org/v4/northwind/northwind.svc/Customers" target="_blank" rel="nofollow noopener noreferrer">Customers</A>,<SPAN>&nbsp;</SPAN><A href="https://services.odata.org/v4/northwind/northwind.svc/Products" target="_blank" rel="nofollow noopener noreferrer">Products</A><SPAN>&nbsp;</SPAN>and<SPAN>&nbsp;</SPAN><A href="https://services.odata.org/v4/northwind/northwind.svc/Categories" target="_blank" rel="nofollow noopener noreferrer">Categories</A>. And as for function and action imports, the<SPAN>&nbsp;</SPAN><A href="https://services.odata.org/V4/TripPinService/" target="_blank" rel="nofollow noopener noreferrer">TripPin service</A>, for example, sports a function import called<SPAN>&nbsp;</SPAN><A href="https://services.odata.org/V4/TripPinService/GetNearestAirport(lat=53.599992,lon=-2.835948)" target="_blank" rel="nofollow noopener noreferrer">GetNearestAirport</A>*.</P><P>*I was surprised to see that my nearest airport is apparently in Rome, but then remembered that there are only<SPAN>&nbsp;</SPAN><A href="https://services.odata.org/V4/TripPinService/Airports?$count=true" target="_blank" rel="nofollow noopener noreferrer">15 airports</A><SPAN>&nbsp;</SPAN>in the dataset.</P><P>Not every service is OData, of course. But in the context of enterprise computing, it's an extremely well respected, understood and used open standard. And CAP makes it child's play to create an OData service and fill it with API endpoints.</P><H2 id="toc-hId-822792132">Creating your first service</H2><P>And as the idea of this challenge is to use CAP, then the first thing you'll need to do is create a simple service. You can modify the existing<SPAN>&nbsp;</SPAN>CatalogService<SPAN>&nbsp;</SPAN>that you got for free when you initialised the CAP project in Task 0. You know, the one that exposes a<SPAN>&nbsp;</SPAN>Books<SPAN>&nbsp;</SPAN>entity set, and is defined declaratively, with CDL, in<SPAN>&nbsp;</SPAN>srv/cat-service.cds:</P><DIV class=""><PRE><SPAN class="">using</SPAN> <SPAN class="">my.bookshop</SPAN> <SPAN class="">as</SPAN> <SPAN class="">my</SPAN> <SPAN class="">from</SPAN> <SPAN class=""><SPAN class="">'</SPAN>../db/data-model<SPAN class="">'</SPAN></SPAN>;

<SPAN class="">service</SPAN> CatalogService {
    <SPAN class="">@readonly</SPAN> <SPAN class="">entity</SPAN> Books <SPAN class="">as</SPAN> <SPAN class="">projection</SPAN> <SPAN class="">on</SPAN> my.Books;
}</PRE><DIV class="">&nbsp;</DIV></DIV><P>But what we recommend is that you leave that<SPAN>&nbsp;</SPAN>CatalogService<SPAN>&nbsp;</SPAN>as it is, and create your own new service. And while you could define it in the same<SPAN>&nbsp;</SPAN>srv/cat-service.cds<SPAN>&nbsp;</SPAN>file, instead, we recommend you take advantage of the wonderfully flexible nature of the CDS compiler ... and create a (pair of) new file(s), in the<SPAN>&nbsp;</SPAN>srv/<SPAN>&nbsp;</SPAN>directory, in which you will define your service.</P><P>Hint: As you'll see, the name of the service you'll be required to create here is<SPAN>&nbsp;</SPAN>basic, so, within the<SPAN>&nbsp;</SPAN>srv/<SPAN>&nbsp;</SPAN>directory, why not use the filename<SPAN>&nbsp;</SPAN>basic.cds. Furthermore, the API endpoint you'll be required to create in this task is an unbound function within that service, so (as with all actions and functions) you'll need to provide an implementation, so why not use the filename<SPAN>&nbsp;</SPAN>basic.js<SPAN>&nbsp;</SPAN>for that and place that file next to (in the same directory as)<SPAN>&nbsp;</SPAN>basic.cds.</P><H2 id="toc-hId-626278627">The requirements</H2><P>Here are the specific requirements for this task.</P><P>Define a new service.</P><P>Make sure the service name is<SPAN>&nbsp;</SPAN>basic.</P><P>Have it be served via the OData V4 protocol (this is what all services are served via by default with CAP). But don't have it served at the standard path for an OData V4 protocol based service (which would be<SPAN>&nbsp;</SPAN>/odata/v4/basic), instead, have it served at the simpler path<SPAN>&nbsp;</SPAN>/basic.</P><P>The service, at least at this point in the challenge, needs to have a single API endpoint, specifically one that is called<SPAN>&nbsp;</SPAN>ping, that can be called with the HTTP GET method, takes no parameters, and returns a JSON payload that looks like this:</P><DIV class=""><PRE>{
  <SPAN class="">"@odata.context"</SPAN>: <SPAN class=""><SPAN class="">"</SPAN>$metadata#Edm.String<SPAN class="">"</SPAN></SPAN>,
  <SPAN class="">"value"</SPAN>: <SPAN class=""><SPAN class="">"</SPAN>pong<SPAN class="">"</SPAN></SPAN>
}</PRE><DIV class="">&nbsp;</DIV></DIV><P>It is critical (to test success) that what's returned in the<SPAN>&nbsp;</SPAN>value<SPAN>&nbsp;</SPAN>property here is the JSON string "pong".</P><P>In other words, this API endpoint should be defined as an<SPAN>&nbsp;</SPAN><A href="https://cap.cloud.sap/docs/cds/cdl#actions" target="_blank" rel="nofollow noopener noreferrer">unbound function</A>.</P><P>When the service, containing this API endpoint, is fully defined, and served via the OData V4 protocol, the metadata document should look like this:</P><DIV class=""><PRE>&lt;?<SPAN class="">xml</SPAN><SPAN class=""> version</SPAN>=<SPAN class=""><SPAN class="">"</SPAN>1.0<SPAN class="">"</SPAN></SPAN><SPAN class=""> encoding</SPAN>=<SPAN class=""><SPAN class="">"</SPAN>utf-8<SPAN class="">"</SPAN></SPAN>?&gt;
&lt;<SPAN class="">edmx</SPAN><SPAN class="">:</SPAN><SPAN class="">Edmx</SPAN> <SPAN class="">Version</SPAN>=<SPAN class=""><SPAN class="">"</SPAN>4.0<SPAN class="">"</SPAN></SPAN> <SPAN class="">xmlns</SPAN><SPAN class="">:</SPAN><SPAN class="">edmx</SPAN>=<SPAN class=""><SPAN class="">"</SPAN>http://docs.oasis-open.org/odata/ns/edmx<SPAN class="">"</SPAN></SPAN>&gt;
  &lt;<SPAN class="">edmx</SPAN><SPAN class="">:</SPAN><SPAN class="">Reference</SPAN> <SPAN class="">Uri</SPAN>=<SPAN class=""><SPAN class="">"</SPAN>https://sap.github.io/odata-vocabularies/vocabularies/Common.xml<SPAN class="">"</SPAN></SPAN>&gt;
    &lt;<SPAN class="">edmx</SPAN><SPAN class="">:</SPAN><SPAN class="">Include</SPAN> <SPAN class="">Alias</SPAN>=<SPAN class=""><SPAN class="">"</SPAN>Common<SPAN class="">"</SPAN></SPAN> <SPAN class="">Namespace</SPAN>=<SPAN class=""><SPAN class="">"</SPAN>com.sap.vocabularies.Common.v1<SPAN class="">"</SPAN></SPAN>/&gt;
  &lt;/<SPAN class="">edmx</SPAN><SPAN class="">:</SPAN><SPAN class="">Reference</SPAN>&gt;
  &lt;<SPAN class="">edmx</SPAN><SPAN class="">:</SPAN><SPAN class="">Reference</SPAN> <SPAN class="">Uri</SPAN>=<SPAN class=""><SPAN class="">"</SPAN>https://oasis-tcs.github.io/odata-vocabularies/vocabularies/Org.OData.Core.V1.xml<SPAN class="">"</SPAN></SPAN>&gt;
    &lt;<SPAN class="">edmx</SPAN><SPAN class="">:</SPAN><SPAN class="">Include</SPAN> <SPAN class="">Alias</SPAN>=<SPAN class=""><SPAN class="">"</SPAN>Core<SPAN class="">"</SPAN></SPAN> <SPAN class="">Namespace</SPAN>=<SPAN class=""><SPAN class="">"</SPAN>Org.OData.Core.V1<SPAN class="">"</SPAN></SPAN>/&gt;
  &lt;/<SPAN class="">edmx</SPAN><SPAN class="">:</SPAN><SPAN class="">Reference</SPAN>&gt;
  &lt;<SPAN class="">edmx</SPAN><SPAN class="">:</SPAN><SPAN class="">DataServices</SPAN>&gt;
    &lt;<SPAN class="">Schema</SPAN> <SPAN class="">Namespace</SPAN>=<SPAN class=""><SPAN class="">"</SPAN>basic<SPAN class="">"</SPAN></SPAN> <SPAN class="">xmlns</SPAN>=<SPAN class=""><SPAN class="">"</SPAN>http://docs.oasis-open.org/odata/ns/edm<SPAN class="">"</SPAN></SPAN>&gt;
      &lt;<SPAN class="">EntityContainer</SPAN> <SPAN class="">Name</SPAN>=<SPAN class=""><SPAN class="">"</SPAN>EntityContainer<SPAN class="">"</SPAN></SPAN>&gt;
        &lt;<SPAN class="">FunctionImport</SPAN> <SPAN class="">Name</SPAN>=<SPAN class=""><SPAN class="">"</SPAN>ping<SPAN class="">"</SPAN></SPAN> <SPAN class="">Function</SPAN>=<SPAN class=""><SPAN class="">"</SPAN>basic.ping<SPAN class="">"</SPAN></SPAN>/&gt;
      &lt;/<SPAN class="">EntityContainer</SPAN>&gt;
      &lt;<SPAN class="">Function</SPAN> <SPAN class="">Name</SPAN>=<SPAN class=""><SPAN class="">"</SPAN>ping<SPAN class="">"</SPAN></SPAN> <SPAN class="">IsBound</SPAN>=<SPAN class=""><SPAN class="">"</SPAN>false<SPAN class="">"</SPAN></SPAN> <SPAN class="">IsComposable</SPAN>=<SPAN class=""><SPAN class="">"</SPAN>false<SPAN class="">"</SPAN></SPAN>&gt;
        &lt;<SPAN class="">ReturnType</SPAN> <SPAN class="">Type</SPAN>=<SPAN class=""><SPAN class="">"</SPAN>Edm.String<SPAN class="">"</SPAN></SPAN>/&gt;
      &lt;/<SPAN class="">Function</SPAN>&gt;
    &lt;/<SPAN class="">Schema</SPAN>&gt;
  &lt;/<SPAN class="">edmx</SPAN><SPAN class="">:</SPAN><SPAN class="">DataServices</SPAN>&gt;
&lt;/<SPAN class="">edmx</SPAN><SPAN class="">:</SPAN><SPAN class="">Edmx</SPAN>&gt;</PRE><DIV class="">&nbsp;</DIV></DIV><P>If you've not defined (here: in<SPAN>&nbsp;</SPAN>srv/basic.cds) and written an implementation (here: in<SPAN>&nbsp;</SPAN>srv/basic.js) for a function or action before, then you need to know a couple of things.</P><P>First, know that you need to implement such functions or actions via the<SPAN>&nbsp;</SPAN><A href="https://cap.cloud.sap/docs/node.js/core-services#srv-on-before-after" target="_blank" rel="nofollow noopener noreferrer">on</A><SPAN>&nbsp;</SPAN>event. Also, know that there are two implementation styles in CAP Node.js*, described in the Capire section<SPAN>&nbsp;</SPAN><A href="https://cap.cloud.sap/docs/node.js/core-services#how-to-provide-custom-service-implementations" target="_blank" rel="nofollow noopener noreferrer">How to provide custom service implementations?</A>:</P><UL><LI>the ES6 class based style, extending the<SPAN>&nbsp;</SPAN>cds.ApplicationService<SPAN>&nbsp;</SPAN>class</LI><LI>the older and simpler cds.service.impl style</LI></UL><P>Note that the older style is translated automatically, behind the scenes, to the ES6 class based style anyway.</P><P>* As mentioned in the<SPAN>&nbsp;</SPAN><A href="https://community.sap.com/t5/application-development-blog-posts/2024-07-quot-reverse-apis-quot-sap-developer-challenge/ba-p/13749653#toc-hId-822081145" target="_blank">Introduction</A><SPAN>&nbsp;</SPAN>to this challenge, hints are for the Node.js flavour of CAP, but of course you're welcome to use the Java flavour if you prefer.</P><P>Once you've got your service defined, and a simple implementation ready, with an<SPAN>&nbsp;</SPAN>on<SPAN>&nbsp;</SPAN>handler for the<SPAN>&nbsp;</SPAN>ping<SPAN>&nbsp;</SPAN>event, you're ready.</P><P>It is definitely worth testing it yourself first, e.g. with<SPAN>&nbsp;</SPAN>curl, or Postman, or whatever tool you prefer for making HTTP calls. With your server running (on, let's say, the default local CAP server port of 4004), make a request like this:</P><DIV class=""><PRE>curl -s --url <SPAN class=""><SPAN class="">'</SPAN>localhost:4004/basic/ping()<SPAN class="">'</SPAN></SPAN></PRE><DIV class="">&nbsp;</DIV></DIV><P>and the reponse should look like this:</P><DIV class=""><PRE>{<SPAN class="">"@odata.context"</SPAN>:<SPAN class=""><SPAN class="">"</SPAN>$metadata#Edm.String<SPAN class="">"</SPAN></SPAN>,<SPAN class="">"value"</SPAN>:<SPAN class=""><SPAN class="">"</SPAN>pong<SPAN class="">"</SPAN></SPAN>}</PRE><DIV class="">&nbsp;</DIV></DIV><H2 id="toc-hId-429765122">Submitting your API endpoint to the TESTER</H2><P>Now you're ready to submit your CANDIDATE service, with the specific API endpoint, to the TESTER!</P><H3 id="toc-hId-362334336">The payload</H3><P>The task identifier you need to supply in the payload of your submission is:<SPAN>&nbsp;</SPAN><STRONG>basic-ping</STRONG>.</P><P>While some of you lovely folks with a more rebellious and hacker nature (I'm looking at you <a href="https://community.sap.com/t5/user/viewprofilepage/user-id/107">@ajmaradiaga</a> and <a href="https://community.sap.com/t5/user/viewprofilepage/user-id/11756">@gphadnis2000</a> :-)) have already<SPAN>&nbsp;</SPAN><A href="https://community.sap.com/t5/application-development-discussions/2024-07-developer-challenge-task-0-server-and-service-provisioning/m-p/13750013/highlight/true#M2028882" target="_blank">kicked</A><SPAN>&nbsp;</SPAN>the<SPAN>&nbsp;</SPAN><A href="https://community.sap.com/t5/application-development-discussions/2024-07-developer-challenge-task-0-server-and-service-provisioning/m-p/13750281/highlight/true#M2028890" target="_blank">tyres</A><SPAN>&nbsp;</SPAN>of the TESTER service, this should be the first time you'll be using the TESTER service.</P><P>Most of what you need to know is described in the the section titled "<A href="https://community.sap.com/t5/application-development-blog-posts/2024-07-quot-reverse-apis-quot-sap-developer-challenge/ba-p/13749653#toc-hId--553513390" target="_blank">The Tester service, and making a test request</A>" in the<SPAN>&nbsp;</SPAN><A href="https://community.sap.com/t5/application-development-blog-posts/2024-07-quot-reverse-apis-quot-sap-developer-challenge/ba-p/13749653" target="_blank">main challenge blog post</A>, so head over to that section for a quick refresher first, then come back here.</P><P>Now, to have your freshly minted API endpoint in this task tested, you'll need to submit a JSON payload like this:</P><DIV class=""><PRE>{
  <SPAN class="">"communityid"</SPAN>: <SPAN class=""><SPAN class="">"</SPAN>&lt;your-community-id&gt;<SPAN class="">"</SPAN></SPAN>,
  <SPAN class="">"serviceurl"</SPAN>: <SPAN class=""><SPAN class="">"</SPAN>&lt;the-URL-of-your-service&gt;<SPAN class="">"</SPAN></SPAN>,
  <SPAN class="">"task"</SPAN>: <SPAN class=""><SPAN class="">"</SPAN>basic-ping<SPAN class="">"</SPAN></SPAN>
}</PRE><DIV class="">&nbsp;</DIV></DIV><P>Here's an example (don't use these values for<SPAN>&nbsp;</SPAN>communityid<SPAN>&nbsp;</SPAN>and<SPAN>&nbsp;</SPAN>serviceurl, they're specific to me and provided here just for illustration):</P><DIV class=""><PRE>{
  <SPAN class="">"communityid"</SPAN>: <SPAN class=""><SPAN class="">"</SPAN>qmacro<SPAN class="">"</SPAN></SPAN>,
  <SPAN class="">"serviceurl"</SPAN>: <SPAN class=""><SPAN class="">"</SPAN>https://c0df-85-255-235-188.ngrok-free.app/basic<SPAN class="">"</SPAN></SPAN>,
  <SPAN class="">"task"</SPAN>: <SPAN class=""><SPAN class="">"</SPAN>basic-ping<SPAN class="">"</SPAN></SPAN>
}</PRE><DIV class="">&nbsp;</DIV></DIV><P>Note that the value for the<SPAN>&nbsp;</SPAN>communityid<SPAN>&nbsp;</SPAN>property should be your ID on this SAP Community platform (e.g. mine is "qmacro").</P><P>Note also the value for the<SPAN>&nbsp;</SPAN>serviceurl<SPAN>&nbsp;</SPAN>property should be the absolute URL (i.e. including the scheme), of your CANDIDATE<SPAN>&nbsp;</SPAN><STRONG>service</STRONG><SPAN>&nbsp;</SPAN>(see<SPAN>&nbsp;</SPAN><A href="https://community.sap.com/t5/application-development-blog-posts/2024-07-quot-reverse-apis-quot-sap-developer-challenge/ba-p/13749653#toc-hId--356999885" target="_blank"><span class="lia-unicode-emoji" title=":information:">â¹ï¸</span><SPAN>&nbsp;</SPAN>A note on URLs and services</A>), not the specific API endpoint.</P><H3 id="toc-hId-165820831">The service URL</H3><P>Of course, you need to make sure your new service and API endpoint are available to the TESTER, so supplying<SPAN>&nbsp;</SPAN><A href="http://localhost:4004/basic" target="_blank" rel="noopener nofollow noreferrer">http://localhost:4004/basic</A><SPAN>&nbsp;</SPAN>as the value for the<SPAN>&nbsp;</SPAN>serviceurl<SPAN>&nbsp;</SPAN>property is not going to work. Make sure you either redeploy your CAP project (if you're<SPAN>&nbsp;</SPAN><A href="https://community.sap.com/t5/application-development-blog-posts/2024-07-quot-reverse-apis-quot-sap-developer-challenge/ba-p/13749653#toc-hId-165109844" target="_blank">pushing to Cloud Foundry</A>) or still have your<SPAN>&nbsp;</SPAN>ngrok<SPAN>&nbsp;</SPAN>tunnel up and running (if you're using the<SPAN>&nbsp;</SPAN><A href="https://community.sap.com/t5/application-development-blog-posts/2024-07-quot-reverse-apis-quot-sap-developer-challenge/ba-p/13749653#toc-hId--31403661" target="_blank">ngrok tunnel</A><SPAN>&nbsp;</SPAN>approach).</P><H3 id="toc-hId--30692674">Submitting the test request</H3><P>You'll need to submit that JSON payload in a POST request to this endpoint:</P><P><A href="https://developer-challenge-2024-07.cfapps.eu10.hana.ondemand.com/tester/testServer" target="_blank" rel="noopener nofollow noreferrer">https://developer-challenge-2024-07.cfapps.eu10.hana.ondemand.com/tester/testServer</A></P><P>and you'll need to supply a<SPAN>&nbsp;</SPAN>Content-Type<SPAN>&nbsp;</SPAN>header stating that the representation of the payload resource has a media type of<SPAN>&nbsp;</SPAN>application/json.</P><P>Here's a<SPAN>&nbsp;</SPAN>curl<SPAN>&nbsp;</SPAN>invocation doing exactly that, by way of example (and using my specific values shown in the illustration above):</P><DIV class=""><PRE>curl \
  --data <SPAN class=""><SPAN class="">'</SPAN>{"communityid":"qmacro","serviceurl":"https://c0df-85-255-235-188.ngrok-free.app/basic","task":"basic-ping"}<SPAN class="">'</SPAN></SPAN> \
  --header <SPAN class=""><SPAN class="">'</SPAN>Content-Type: application/json<SPAN class="">'</SPAN></SPAN> \
  --url <SPAN class=""><SPAN class="">'</SPAN>https://developer-challenge-2024-07.cfapps.eu10.hana.ondemand.com/tester/testServer<SPAN class="">'</SPAN></SPAN></PRE><DIV class="">&nbsp;</DIV></DIV><H3 id="toc-hId--227206179">Types of responses</H3><P>You'll see one of two types of responses- an error response, or a test result response.</P><H4 id="toc-hId--294636965">Error response</H4><P>If there's something wrong with your call then you'll get an error response. For example, if you haven't supplied a value for the<SPAN>&nbsp;</SPAN>communityid<SPAN>&nbsp;</SPAN>property, you'll get an HTTP 400 error response with a payload like this:</P><DIV class=""><PRE>{
  <SPAN class="">"error"</SPAN>: {
    <SPAN class="">"code"</SPAN>: <SPAN class=""><SPAN class="">"</SPAN>400<SPAN class="">"</SPAN></SPAN>,
    <SPAN class="">"message"</SPAN>: <SPAN class=""><SPAN class="">"</SPAN>Missing Community ID value<SPAN class="">"</SPAN></SPAN>,
    <SPAN class="">"@Common.numericSeverity"</SPAN>: <SPAN class="">4</SPAN>
  }
}</PRE><DIV class="">&nbsp;</DIV></DIV><P>Similarly, if the TESTER cannot reach your endpoint, you'll get HTTP 500 error response with a payload like this:</P><DIV class=""><PRE>{
  <SPAN class="">"error"</SPAN>: {
    <SPAN class="">"code"</SPAN>: <SPAN class=""><SPAN class="">"</SPAN>500<SPAN class="">"</SPAN></SPAN>,
    <SPAN class="">"message"</SPAN>: <SPAN class=""><SPAN class="">"</SPAN>Error calling service endpoint<SPAN class="">"</SPAN></SPAN>,
    <SPAN class="">"@Common.numericSeverity"</SPAN>: <SPAN class="">4</SPAN>
  }
}</PRE><DIV class="">&nbsp;</DIV></DIV><P>Other similar errors may occur, for example if you supply a missing or invalid task identifier or service URL.</P><H4 id="toc-hId--491150470">Test result response</H4><P>If the TESTER manages to reach your API endpoint successfully, it will then check that the response returned is what is required and expected. In the case of this task, the response required and expected is the static value "pong". If that is what is received, a positive test result response will be returned, and will look like this:</P><DIV class=""><PRE>{<SPAN class="">"@odata.context"</SPAN>:<SPAN class=""><SPAN class="">"</SPAN>$metadata#Edm.String<SPAN class="">"</SPAN></SPAN>,<SPAN class="">"value"</SPAN>:<SPAN class=""><SPAN class="">"</SPAN>PASS<SPAN class="">"</SPAN></SPAN>}</PRE><DIV class="">&nbsp;</DIV></DIV><P>If a different value is received, then a negative test response will be returned, and will look like this:</P><DIV class=""><PRE>{<SPAN class="">"@odata.context"</SPAN>:<SPAN class=""><SPAN class="">"</SPAN>$metadata#Edm.String<SPAN class="">"</SPAN></SPAN>,<SPAN class="">"value"</SPAN>:<SPAN class=""><SPAN class="">"</SPAN>FAIL<SPAN class="">"</SPAN></SPAN>}</PRE><DIV class="">&nbsp;</DIV></DIV><P>That's it!</P><H2 id="toc-hId--598575056">Logging of test results</H2><P>Each time there's a call to the TESTER by any participant, and a test result response can be issued, that test request is logged. So you can check on your progress, and the progress of your fellow participants.</P><P>The logged requests are available in an entity set served by the TESTER service. The entity set URL is<SPAN>&nbsp;</SPAN><A href="https://developer-challenge-2024-07.cfapps.eu10.hana.ondemand.com/tester/Testlog" target="_blank" rel="nofollow noopener noreferrer">https://developer-challenge-2024-07.cfapps.eu10.hana.ondemand.com/tester/Testlog</A><SPAN>&nbsp;</SPAN>and being an OData V4 entity set, all the normal OData system query options are available to you for digging into that information.</P><P>But that's all for now on that.</P><P>Until the next task, have fun, and if you have any questions or comments, leave them below!</P>
---
July Developer Challenge - "Reverse APIs"
application-developmentblog-board
2024-07-03
https://community.sap.com/t5/application-development-blog-posts/july-developer-challenge-quot-reverse-apis-quot/ba-p/13749653
2024-07-03-july-developer-challenge-quot-reverse-apis-quot
<P>TL;DR This is the main blog post for the SAP Developer Challenge in July and contains a general overview, hints and tips, and the list of tasks that you need to carry out during this challenge. If this is your first time reading this post, jump down to the "Introduction" section and start there. Otherwise, find the list of tasks you need to complete directly below, in the "Tasks" section.</P><H2 id="toc-hId-1018594650">Tasks</H2><P>There are 12 tasks in total (plus a final bonus "feedback" task). The first (Task 0) is just for you to get things set up for the subsequent tasks. Each task listed here is just a one line summary, and links to a separate task-specific thread in the <A href="https://community.sap.com/t5/application-development-discussions/bd-p/application-developmentforum-board" target="_self">Application Development Discussions</A> area of this SAP Community platform. Each thread title will follow this pattern:</P><P>Task &lt;task number&gt; - &lt;Task short description&gt; (July Developer Challenge - "Reverse APIs")</P><P><span class="lia-unicode-emoji" title=":bell:">ð</span>This task list will be updated throughout the month, check back regularly to see what's next - and if there's a task that's hyperlinked, then you can follow that hyperlink to start the task!</P><P><A href="https://community.sap.com/t5/application-development-discussions/2024-07-developer-challenge-task-0-server-and-service-provisioning/m-p/13749996#M2028881" target="_self">0 - Server and service provisioning</A>: Get comfortable with spinning up a CAP server and basic service and provisioning a route to it in the cloud.</P><P><A href="https://community.sap.com/t5/application-development-discussions/2024-07-developer-challenge-task-1-your-first-service-and-first-endpoint/m-p/13752205" target="_self">1 - Your first service and first endpoint</A>: Nice and simple to start off with, an unbound function that takes no parameters and should return a specific value.</P><P><A href="https://community.sap.com/t5/application-development-discussions/july-developer-challenge-quot-reverse-apis-quot-task-2-capire-s-hello-world/m-p/13755407" target="_self">2 - Capire's "Hello World"</A>: An unbound function with a single parameter, that should return a value that combines static text with the value of the argument passed to that parameter.</P><P><A href="https://community.sap.com/t5/application-development-discussions/task-3-multi-parameter-basic-sum-function-july-developer-challenge-quot/m-p/13757582" target="_self">3 - Basic sum function</A>: The final of the basic unbound function style API endpoints in the context of an OData V4 service, before moving on to a different protocol.</P><P><A href="https://community.sap.com/t5/application-development-discussions/task-4-plain-quot-rest-quot-endpoint-july-developer-challenge-quot-reverse/m-p/13760488" target="_self">4 - Plain "REST" endpoint</A>: Moving away from the default OData V4 protocol, this is an API endpoint you must define within a new service and have served via the "REST" protocol.</P><P><A href="https://community.sap.com/t5/application-development-discussions/task-5-a-quot-rest-quot-service-document-july-developer-challenge-quot/m-p/13762855" target="_self">5 - A "REST" service document</A>: Continuing to explore the difference between CAP's OData and "REST" protocol adapters.</P><P><A href="https://community.sap.com/t5/application-development-discussions/task-6-api-endpoint-with-payload-required-july-developer-challenge-quot/m-p/13765529" target="_self">6 - An API endpoint with a payload required</A>: Another endpoint in the plain "REST" service, but&nbsp;<SPAN>a little different in its definition, implementation, and how it's called.</SPAN></P><P><A href="https://community.sap.com/t5/application-development-discussions/task-7-using-cql-in-an-unbound-function-implementation-july-developer/td-p/13767476" target="_self">7 - Using CQL in an unbound function implementation</A>: In your implementation for a brand new service similar to Northwind, you'll have to use some CQL to respond to a request to an unbound function.</P><P><A href="https://community.sap.com/t5/application-development-discussions/task-8-responding-to-an-odata-query-with-navigation-july-developer/m-p/13769896" target="_self">8 - Responding to an OData query with navigation</A>: Learning how useful out-of-the-box supported standard OData mechanisms can be.</P><P><A href="https://community.sap.com/t5/application-development-discussions/task-9-using-cql-in-an-unbound-action-july-developer-challenge-quot-reverse/td-p/13772607" target="_self">9 - Using CQL in an unbound action</A>: Similar to Task 8 but with a little bit of added spice in the form of some JavaScript calculations.</P><P><A href="https://community.sap.com/t5/application-development-discussions/task-10-the-power-of-cdl-with-as-select-july-developer-challenge-quot/m-p/13774996" target="_self">10 - The power of CDL with as-select</A>: Extending the service in the CDS model, with no extra implementation required.</P><P><A href="https://community.sap.com/t5/application-development-discussions/task-11-using-implicit-parameters-with-a-bound-function-july-developer/m-p/13776485/thread-id/2029484" target="_self">11 - Using implicit parameters with a bound function</A>: Understanding implicit vs explicit parameters, and destructuring to get the value, with bound actions and (in this case) functions.</P><P>Bonus (and important) task:</P><P><A href="https://community.sap.com/t5/application-development-discussions/task-12-give-us-feedback-about-this-challenge-july-developer-challenge-quot/m-p/13776497" target="_self">12 - Give us feedback about this challenge</A>: This is an opportunity for you to tell us what you liked, what you didn't like, and what you learned from this month's challenge.</P><H2 id="toc-hId-822081145">Introduction</H2><P>This SAP Developer Challenge for the month of July echoes <A href="https://community.sap.com/t5/technology-blogs-by-sap/sap-developer-challenge-apis/ba-p/13573168" target="_self">last year's August challenge on APIs</A>, but turns it around. The August challenge last year had you making API calls to different endpoints on various services. This month's challenge will have you setting up and running various services, each with different endpoints.&nbsp;</P><P>The idea is for us all to go on a small journey of discovery and experience the joy of setting up APIs with the power of CAP - defining them in CDS models (in Core Definition Language, CDL) and implementing them, where required* in either Node.js or Java. If you want help along the way, you'll get it in the form of hints in the Node.js flavour of CAP, but if you want, you're welcome to use Java too of course. After all, the API contract is what's important, right?</P><P>Over the month you'll set up 10 API endpoints over 3 different services.</P><P><EM>* remember that CAP has a rich set of <A href="https://cap.cloud.sap/docs/guides/providing-services#generic-providers" target="_self" rel="nofollow noopener noreferrer">generic providers</A> that means for much of the standard CRUD+Q request landscape you don't have to implement anything yourself.</EM></P><H2 id="toc-hId-625567640">Challenge overview</H2><P>How will the challenge work? What happens when you set up a service with some API endpoints? How will we know when a specific endpoint has been set up and served successfully? Well, here's a small diagram that will help to answer that, and some terminology.</P><P><span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="steps.gif" style="width: 671px;"><img src="https://community.sap.com/t5/image/serverpage/image-id/131671i5A9551461F4AA9D0/image-size/large?v=v2&amp;px=999" role="button" title="steps.gif" alt="steps.gif" /></span></P><P>The mechanism that we will be using to "run" the challenge is the TESTER. It's actually just a very simple CAP service that has a single endpoint `testService` that you will need to call once you have a service and endpoint ready.</P><P>The service you set up is known as the CANDIDATE. Each CANDIDATE service will have one or more endpoints.</P><P>The TESTREQUEST is when you have a service and endpoint ready to be tested, and you make a request for it to be tested, supplying three pieces of information.</P><P>The TESTRESULT is the result of such a TESTREQUEST, and will be either PASS or FAIL.</P><P>As well as returning PASS or FAIL to the TESTREQUEST call, the results of the test will be logged and retrievable as an OData V4 entity set (details on this will follow later).</P><H2 id="toc-hId-429054135">The services</H2><P>The three services you'll set up over this challenge are deliberately simple, and are intended to help you discover various aspects of service definition and implementation. You will define two of the services as OData V4 protocol based (this is the default in CAP anyway), and one as plain "REST" protocol based.</P><P>Over these three services you'll define multiple endpoints, of different "types", including:</P><UL><LI>unbound function with no parameters</LI><LI>unbound function with parameters</LI><LI>unbound action with data</LI><LI>bound action</LI><LI>projection with the 'as-select' variant</LI><LI>various query operations</LI></UL><P>To give you a couple of examples, in the first service you'll define, called `basic`, you must create an endpoint `sum` defined as an unbound function that takes two parameters `a` and `b` and returns the sum of the values of those two parameters. In another service you'll define, called `northbreeze`, which you'll have to seed with data too, you must create an endpoint `stockValue` as a bound action that takes no parameters* and returns the total stock value for a product.</P><P><EM>* remember that a bound action or function has an implicit "parameter" in terms of the specific entity to which it is bound at call time.</EM></P><H2 id="toc-hId-232540630">Making your service available to test</H2><P>The question right now on your mind is likely to be "How does step 4 (Endpoint is tested by calling it) work?". It's easy to set up a CAP service locally. But how can a service running in the cloud connect to and test your service?</P><P>Well, you have many options, and what you end up doing is down to you - your personal preferences, what else you want to learn or practise along the way, and how "temporary" you want to make your service availability.</P><H3 id="toc-hId-165109844">Simple deployment to BTP</H3><P>While there is some data that the third of the three services in this challenge will need to have and to serve, it can be served via the SQLite in-memory mechanism built in to the CAP server, and doesn't need a persistence layer, i.e. doesn't need any sort of backing service. All three of the CAP-based services you will need to create are simple enough to be deployed as-is, in other words, on their own.</P><P>In fact, it is perfectly possible for you to serve all three services in a single CAP server instance, so if you choose to, you can just have a single CAP project, with a single CAP server (started with `cds serve` for example) and have that server provide all three services.</P><P>Given that, it's actually rather straightforward to deploy a test CAP project to BTP, specifically to a Cloud Foundry runtime. Everyone has access to a trial account on BTP at no cost (and no credit card required), and a Cloud Foundry runtime instance is set up automatically when you create a trial account (or you can provision one after the fact if you don't have one).</P><P>Assuming you have a Cloud Foundry runtime instance in a trial account, and have logged in with the cf CLI, here's a (deliberately short) one-liner that:</P><UL><LI>creates a simple CAP project with some test data</LI><LI>adds cds configuration to ensure that SQLite in-memory persistence is used and that no real authentication is required*</LI><LI>adds the NPM sqlite3 package as a dependency</LI><LI>pushes the entire project to Cloud Foundry and starts the server running</LI></UL><P>&nbsp;</P><pre class="lia-code-sample language-bash"><code>cds init --add tiny-sample qmacro-simplest-deployment \
&amp;&amp; cd $_ \
&amp;&amp; jq '.+{cds:{features:{in_memory_db:true},requires:{auth:"mocked",db:{kind:"sqlite",credentials:{database:":memory:"}}}}}' package.json &gt; tempfile \
&amp;&amp; mv tempfile package.json \
&amp;&amp; npm add sqlite3 \
&amp;&amp; cf push "$(basename "$PWD")"</code></pre><P>&nbsp;</P><P>(Yes, for those fellow shell nerds out there, I am using `"$(basename "$PWD")"` on the last line to avoid repeating the "qmacro-simplest-deployment" name and keep things <A href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself" target="_self" rel="nofollow noopener noreferrer">DRY</A>).</P><P>*if you haven't got jq, first of all, why not? But seriously, just use the terminal in a "<SPAN>Full Stack Cloud Application"&nbsp;</SPAN>Dev Space in SAP Business Application Studio, the default shell is Bash and it has lots of useful tools including all of those used in this invocation (cds, jq, npm and cf). It's a very useful environment.</P><P>Once the server is running in Cloud Foundry, you can check the URL like this:</P><P>&nbsp;</P><pre class="lia-code-sample language-bash"><code>cf app qmacro-simplest-deployment</code></pre><P>&nbsp;</P><P>and you should see something like this:</P><P>&nbsp;</P><pre class="lia-code-sample language-markup"><code>Showing health and status for app qmacro-simplest-deployment in org dj-adams-42-ajjk4v42-org / space dev as dj.adams@sap.com...

name:              qmacro-simplest-deployment
requested state:   started
routes:            qmacro-simplest-deployment.cfapps.eu10.hana.ondemand.com
last uploaded:     Wed 03 Jul 07:14:25 UTC 2024
stack:             cflinuxfs4
buildpacks:
        name               version   detect output   buildpack name
        nodejs_buildpack   1.8.24    nodejs          nodejs

type:           web
sidecars:
instances:      1/1
memory usage:   1024M
     state     since                  cpu    memory        disk           logging             details
#0   running   2024-07-03T07:14:37Z   1.3%   92.5M of 1G   195.2M of 1G   0B/s of unlimited</code></pre><P>&nbsp;</P><P>The URL that the CAP server is publicly available on is shown in the "routes" line, here it is:</P><P>&nbsp;</P><pre class="lia-code-sample language-markup"><code>https://qmacro-simplest-deployment.cfapps.eu10.hana.ondemand.com</code></pre><P>&nbsp;</P><H3 id="toc-hId--31403661">Local deployment plus ngrok tunnel</H3><P>If you want to keep your CAP development local, you can do, of course. This is great especially if you want to use all the goodness of the short, tight development cycle that `cds watch` affords. But you need some way of provisioning a route to your locally running CAP server so that the TESTER can reach it. This is where a tool like <A href="https://ngrok.com/" target="_self" rel="nofollow noopener noreferrer">ngrok</A> comes in. It's a "<SPAN>secure unified ingress platform" and has many features and functions, but, in its basic form, it's a way of setting up a secure reverse proxy tunnel to a port on your local machine. This sort of facility is free, and I use it often.</SPAN></P><P><SPAN>Here's the "equivalent" of the above invocation if you want to take this approach:</SPAN></P><P>&nbsp;</P><pre class="lia-code-sample language-bash"><code>cds init --add tiny-sample qmacro-local-execution \
&amp;&amp; cd $_ \
&amp;&amp; cds watch</code></pre><P>&nbsp;</P><P><SPAN>The `cds watch` command should start up the CAP server on the default port of 4004.</SPAN></P><P><SPAN>Then, in a separate terminal window, invoke ngrok* like this:</SPAN></P><P>&nbsp;</P><pre class="lia-code-sample language-abap"><code>ngrok http 4004</code></pre><P>&nbsp;</P><P>and you should see a reverse proxy endpoint set up, and a monitor showing something like this:</P><P>&nbsp;</P><pre class="lia-code-sample language-markup"><code>ngrok                                                                                                                                                                                                                                                       (Ctrl+C to quit)

Try our new Traffic Inspector: https://ngrok.com/r/ti

Session Status                online
Account                       DJ Adams (Plan: Free)
Version                       3.12.0
Region                        Europe (eu)
Latency                       57ms
Web Interface                 http://127.0.0.1:4040
Forwarding                    https://421f-85-255-232-142.ngrok-free.app -&gt; http://localhost:4004

Connections                   ttl     opn     rt1     rt5     p50     p90
                              1       0       0.02    0.00    6.58    6.58

HTTP Requests
-------------

07:55:58.878 UTC GET /odata/v4/catalog/Books    200 OK
07:55:57.531 UTC GET /favicon.ico               200 OK
07:55:57.363 UTC GET /                          200 OK</code></pre><P>&nbsp;</P><P>The URL that the CAP server is publicly available on in this case is shown in the "Forwarding" line, here it is:</P><P>&nbsp;</P><pre class="lia-code-sample language-markup"><code>https://421f-85-255-232-142.ngrok-free.app</code></pre><P>&nbsp;</P><H2 id="toc-hId--356999885"><span class="lia-unicode-emoji" title=":information:">â¹ï¸</span>A note on URLs and services</H2><P>There's something relating to URLs that is important to remember that in all cases, including both these two specific approaches (CF-on-BTP and ngrok-based) to running and exposing routes to CAP server based services.</P><P>There's a difference between the URL of the CAP server generally, and a service (served by that CAP server) in particular.</P><P>Taking the CAP server URLs we saw from both these approaches, we have:</P><UL><LI>CF-on-BTP: <A href="https://qmacro-simplest-deployment.cfapps.eu10.hana.ondemand.com/" target="_blank" rel="noopener nofollow noreferrer">https://qmacro-simplest-deployment.cfapps.eu10.hana.ondemand.com/</A></LI><LI>ngrok-based: <A href="https://421f-85-255-232-142.ngrok-free.app/" target="_blank" rel="noopener nofollow noreferrer">https://421f-85-255-232-142.ngrok-free.app/</A></LI></UL><P>Accessing either of these URLs (they're not active at this time) would give you the classic CAP server landing page:</P><P><span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="qmacro_0-1719994877339.png" style="width: 400px;"><img src="https://community.sap.com/t5/image/serverpage/image-id/131757i9C083EB19FBFD2C2/image-size/medium?v=v2&amp;px=400" role="button" title="qmacro_0-1719994877339.png" alt="qmacro_0-1719994877339.png" /></span></P><P>The CAP server that is presenting the landing page at these URLs is not only serving that landing page (at the root path, i.e. at `/`, after the fully qualified domain name e.g. `qmacro-simplest-deployment.cfapps.eu10.hana.ondemand.com` or `421f-85-255-232-142.ngrok-free.app`), let's call that the "root URL", but also a single service, here at `/odata/v4/catalog` which of course would return the "service document" for that specific service.</P><P>This distinction is important to remember when making test requests throughout the course of this month's tasks.</P><H2 id="toc-hId--553513390">The Tester service, and making a test request</H2><P>Once you have created a service, and have an endpoint in that service that corresponds to a task in this challenge, you are ready to have that endpoint tested to see if you've fulfilled the task criteria and created an endpoint that responds appropriately.</P><P>This is step 3 (Request a test of that service's endpoint) in the diagram shown earlier.</P><P>The "root URL" of the CAP server representing the TESTER side of the diagram is:</P><P><A href="https://developer-challenge-2024-07.cfapps.eu10.hana.ondemand.com/" target="_blank" rel="noopener nofollow noreferrer">https://developer-challenge-2024-07.cfapps.eu10.hana.ondemand.com/</A></P><P>The URL of the tester service itself is:</P><P><A href="https://developer-challenge-2024-07.cfapps.eu10.hana.ondemand.com/tester" target="_blank" rel="noopener nofollow noreferrer">https://developer-challenge-2024-07.cfapps.eu10.hana.ondemand.com/tester</A></P><P>and as you can see from the response for that URL, it's an OData service (you get the service document which includes some `@odata` based properties), with a single entity set "Testlog" which we can ignore for now.</P><P>The service metadata document at:</P><P><A href="https://developer-challenge-2024-07.cfapps.eu10.hana.ondemand.com/tester/$metadata" target="_blank" rel="noopener nofollow noreferrer">https://developer-challenge-2024-07.cfapps.eu10.hana.ondemand.com/tester/$metadata</A></P><P>shows us that there's an `ActionImport` called `testServer`, defined as an unbound action with three parameters:</P><P><span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Screenshot 2024-07-03 at 10.24.37.png" style="width: 601px;"><img src="https://community.sap.com/t5/image/serverpage/image-id/131792i5C6DA628EF389B65/image-size/large?v=v2&amp;px=999" role="button" title="Screenshot 2024-07-03 at 10.24.37.png" alt="Screenshot 2024-07-03 at 10.24.37.png" /></span>&nbsp;</P><P>When you want to request that the TESTER makes a test to one of your service endpoints, you must call this action import and supply values for each of the three parameters:</P><UL><LI>communityid</LI><LI>serviceurl</LI><LI>task</LI></UL><P>Being an action, the call must be made using the HTTP POST method. Provide the values in a JSON object in the body of the HTTP request. Here's an example of such a payload for a task that will come later this month in this challenge, which is called "northbreeze-selectproduct", based on a CANDIDATE server available via the earlier ngrok-based provisioning option, at a CAP server base URL of <A href="https://421f-85-255-232-142.ngrok-free.app" target="_blank" rel="noopener nofollow noreferrer">https://421f-85-255-232-142.ngrok-free.app</A>:</P><P>&nbsp;</P><pre class="lia-code-sample language-json"><code>{
  "communityid": "qmacro",
  "serviceurl": "https://421f-85-255-232-142.ngrok-free.app/odata/v4/northbreeze",
  "task": "northbreeze-selectproduct"
}</code></pre><P>&nbsp;</P><P>Note the "communityid" value is your name on this SAP Community platform, for example <A href="https://groups.community.sap.com/t5/user/viewprofilepage/user-id/53" target="_self" rel="noopener noreferrer">mine is "qmacro"</A>. My numeric SAP Community user ID is 53 but the SAP Community ID we're using here is exactly the same as the one we used for <A href="https://community.sap.com/t5/technology-blogs-by-sap/sap-developer-challenge-apis/ba-p/13573168" target="_self">the Developer Challenge on APIs last year</A>.</P><P>Note that the value for the `serviceurl` property is a combination of the CAP server base URL plus the relative path of the service itself i.e. `/odata/v4/northbreeze`.&nbsp;</P><P>This needs to be sent, in the body of an HTTP POST request, to the following URL:</P><P><A href="https://developer-challenge-2024-07.cfapps.eu10.hana.ondemand.com/tester/testServer" target="_blank" rel="noopener nofollow noreferrer">https://developer-challenge-2024-07.cfapps.eu10.hana.ondemand.com/tester/testServer</A>&nbsp;</P><P>Don't forget to include a Content-Type header specifying the media type `application/json`:</P><P>&nbsp;</P><pre class="lia-code-sample language-markup"><code>Content-Type: application/json</code></pre><P>&nbsp;</P><P>Here's a (reduced) verbose output from a `curl` request that makes this exact request with the payload shown above:</P><P>&nbsp;</P><pre class="lia-code-sample language-markup"><code>./request-test qmacro /odata/v4/northbreeze northbreeze-selectproduct
* Connected to developer-challenge-2024-07.cfapps.eu10.hana.ondemand.com (3.124.222.77) port 443 (#0)
&gt; POST /tester/testServer HTTP/2
&gt; Host: developer-challenge-2024-07.cfapps.eu10.hana.ondemand.com
&gt; user-agent: curl/7.88.1
&gt; accept: */*
&gt; content-type: application/json
&gt; content-length: 138
&gt;
&lt; HTTP/2 200
&lt; content-type: application/json;odata.metadata=minimal
&lt; date: Wed, 03 Jul 2024 09:40:12 GMT
&lt; odata-version: 4.0
&lt; x-powered-by: Express
&lt; content-length: 56
&lt;
{"@odata.context":"$metadata#Edm.String","value":"PASS"}</code></pre><P>&nbsp;</P><P>(Let me know in the comments if you'd like to see the `request-test` script here).</P><P>What's happened between the request and the response here is essentially what's shown in step 4 (Endpoint is tested by calling it) in the diagram, and the output returned:</P><P>&nbsp;</P><pre class="lia-code-sample language-markup"><code>{"@odata.context":"$metadata#Edm.String","value":"PASS"}</code></pre><P>&nbsp;</P><P>is the TESTER's response, here showing that the endpoint passed the task test (if it hadn't, the value would be "FAIL").</P><HR /><P>The idea for this challenge, and the idea for last year's API challenge to which this is a reflection, both came from my lovely son Joseph. Everything that you like about these challenges are down to him. Anything that you don't like, anything that goes wrong, is down to me and my inability to execute properly.</P><HR /><P>Sorry about the gratuitous whitespace before and after code sections - they are added automatically and I cannot get rid of them.</P>
---
Task 0 - Server and service provisioning (July Developer Challenge - "Reverse APIs")
application-developmentforum-board
2024-07-03
https://community.sap.com/t5/application-development-discussions/task-0-server-and-service-provisioning-july-developer-challenge-quot/td-p/13749996
2024-07-03-task-0-server-and-service-provisioning-july-developer-challenge-quot
<P>This is a task in the<SPAN>&nbsp;</SPAN><A href="https://community.sap.com/t5/application-development-blog-posts/sap-developer-challenge-quot-reverse-quot-apis/ba-p/13749653" target="_blank">July Developer Challenge - "Reverse APIs"</A>.</P><P><EM><span class="lia-unicode-emoji" title=":television:">ðº</span><SPAN>&nbsp;</SPAN>We covered this task, both the "Simple deployment to BTP " approach, and the "Local deployment plus ngrok tunnel " approach, in the Hands-on SAP Dev live stream episode on Fri 05 Jul, and you can watch the replay of this coverage here:<SPAN>&nbsp;</SPAN><A href="https://www.youtube.com/live/0hindK_fQ8c?si=FCId-oEln1ISGjwe&amp;t=1098" target="_blank" rel="nofollow noopener noreferrer">https://www.youtube.com/live/0hindK_fQ8c?si=FCId-oEln1ISGjwe&amp;t=1098</A></EM></P><P>This task is start you off gently so you can become comfortable with making a simple CAP powered service available in the cloud. This is so your API endpoints within services served by a CAP server can be reached from the TESTER service and checked for "correctness" (read the main challenge blog post<SPAN>&nbsp;</SPAN><A href="https://community.sap.com/t5/application-development-blog-posts/sap-developer-challenge-quot-reverse-quot-apis/ba-p/13749653" target="_blank">July Developer Challenge - "Reverse APIs"</A><SPAN>&nbsp;</SPAN>for what this means).</P><P>What you need to do is simply follow the guidelines in the "<A href="https://community.sap.com/t5/application-development-blog-posts/2024-07-quot-reverse-apis-quot-sap-developer-challenge/ba-p/13749653#toc-hId-232540630" target="_blank">Making your service available to test</A>" in the 2024-07 "Reverse APIs" SAP Developer Challenge blog post, choosing either the "<A href="https://community.sap.com/t5/application-development-blog-posts/2024-07-quot-reverse-apis-quot-sap-developer-challenge/ba-p/13749653#toc-hId-165109844" target="_blank">Simple deployment to BTP</A>" approach, or the "<A href="https://community.sap.com/t5/application-development-blog-posts/2024-07-quot-reverse-apis-quot-sap-developer-challenge/ba-p/13749653#toc-hId--31403661" target="_blank">Local deployment plus ngrok tunnel</A>" approach, or indeed an approach of your own choosing.</P><P>NOTE: Whichever approach you choose, please ensure you choose a unique application name, ideally one that relates to your SAP Community ID. For example, my SAP Community ID is "qmacro" hence the application names in the guidelines referenced here are "qmacro-simplest-deployment" and "qmacro-simplest-deployment". Please make sure you use different names<SPAN>&nbsp;</SPAN><span class="lia-unicode-emoji" title=":thumbs_up:">ð</span></P><P>In this particular "pre" task (Task 0), there's no testing of whatever you get up and running; testing of your service endpoints starts with Task 1.</P><P>This thread is for us to discuss working through this task, to make comments and observations, and also to help each other get through the steps needed.</P><P>Optionally, once you get a simple CAP server up and running and the service URL exposed to the cloud, let us know here in the comments and share the URL.</P><P>Other than that, there's nothing to be done, nothing specific you need to have your test service endpoint return, and there will be nothing tested. It's just to make sure you know how to spin something up for the remaining 10 tasks.</P><P><STRONG>Remember</STRONG></P><UL><LI>You do NOT need to call the TESTER service for this task.</LI><LI>When choosing an application name, choose something unique, for example related to your SAP Community ID</LI></UL><P>Off you go!</P><P>&nbsp;</P>
---
SAP Developer News, June 13th 2024
application-developmentblog-board
2024-06-13
https://community.sap.com/t5/application-development-blog-posts/sap-developer-news-june-13th-2024/ba-p/13729642
2024-06-13-sap-developer-news-june-13th-2024
<P><div class="video-embed-center video-embed"><iframe class="embedly-embed" src="https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2F7n16u-Rx8IY%3Ffeature%3Doembed&amp;display_name=YouTube&amp;url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3D7n16u-Rx8IY&amp;image=https%3A%2F%2Fi.ytimg.com%2Fvi%2F7n16u-Rx8IY%2Fhqdefault.jpg&amp;type=text%2Fhtml&amp;schema=youtube" width="600" height="337" scrolling="no" title="ABAP Open-Source, June Dev Challenge, CAP May Rel, CodeTalk, Ref Architecture | SAP Developer News" frameborder="0" allow="autoplay; fullscreen; encrypted-media; picture-in-picture;" allowfullscreen="true"></iframe></div></P><P><STRONG>ITEMS&nbsp;</STRONG></P><P><SPAN>ABAP Open Source Updates, ABAP2UI5 and apm</SPAN><SPAN>&nbsp;</SPAN></P><UL><LI><SPAN>abap2UI5 - Integration with SAP Business Technology Platform (1/3) - Installation &amp; Configuration </SPAN><A href="https://www.linkedin.com/pulse/abap2ui5-integration-sap-business-technology-platform-13-installation-lf1re" target="_blank" rel="noopener nofollow noreferrer"><SPAN>https://www.linkedin.com/pulse/abap2ui5-integration-sap-business-technology-platform-13-installation-lf1re</SPAN></A><SPAN>&nbsp;</SPAN></LI><LI><SPAN>abap2UI5 repository </SPAN><A href="https://github.com/abap2UI5/abap2UI5" target="_blank" rel="noopener nofollow noreferrer"><SPAN>https://github.com/abap2UI5/abap2UI5</SPAN></A><SPAN>&nbsp;</SPAN></LI><LI><SPAN>apm homepage </SPAN><A href="https://abappm.com/" target="_blank" rel="noopener nofollow noreferrer"><SPAN>https://abappm.com/</SPAN></A><SPAN>&nbsp;</SPAN></LI></UL><P><SPAN>June Developer Challenge â Week 2</SPAN><SPAN>&nbsp;</SPAN></P><UL><LI><SPAN>SAP HANA multi-model Developer Challenge: </SPAN><A href="https://community.sap.com/t5/application-development-blog-posts/developer-challenge-sap-hana-multi-model-using-python-in-sap-business/ba-p/13722560" target="_blank"><SPAN>https://community.sap.com/t5/application-development-blog-posts/developer-challenge-sap-hana-multi-model-using-python-in-sap-business/ba-p/13722560</SPAN></A> <SPAN>&nbsp;</SPAN></LI><LI><SPAN>Developer Keynote at SAP TechEd 2023: </SPAN><A href="https://www.youtube.com/live/kLbF0ooStZs?t=2145s" target="_blank" rel="noopener nofollow noreferrer"><SPAN>https://www.youtube.com/live/kLbF0ooStZs?t=2145s</SPAN></A><SPAN>&nbsp;</SPAN></LI><LI><SPAN>Business meets AI hackathon: </SPAN><A href="https://events.sap.com/ch/hackathon2024/en/home" target="_blank" rel="noopener noreferrer"><SPAN>https://events.sap.com/ch/hackathon2024/en/home</SPAN></A><SPAN>&nbsp;</SPAN></LI></UL><P><SPAN>SAP Cloud Application Programming Model â May Release</SPAN><SPAN>&nbsp;</SPAN></P><UL><LI><SPAN>Release notes </SPAN><A href="https://cap.cloud.sap/docs/releases/may24" target="_blank" rel="noopener nofollow noreferrer"><SPAN>https://cap.cloud.sap/docs/releases/may24</SPAN></A><SPAN>&nbsp;</SPAN></LI></UL><P><SPAN>SAP BTP reference architecture for SAP Build Process Automation</SPAN><SPAN>&nbsp;</SPAN></P><UL><LI><SPAN>Integrate and extend SAP and non-SAP solutions with SAP Build Process Automation </SPAN><A href="https://discovery-center.cloud.sap/refArchDetail/ref-arch-build-process-automation" target="_blank" rel="noopener nofollow noreferrer"><SPAN>https://discovery-center.cloud.sap/refArchDetail/ref-arch-build-process-automation</SPAN></A> <SPAN>&nbsp;</SPAN></LI><LI><SPAN>BTP Solution Diagrams </SPAN><A href="https://sap.github.io/btp-solution-diagrams/" target="_blank" rel="noopener nofollow noreferrer"><SPAN>https://sap.github.io/btp-solution-diagrams/</SPAN></A> <SPAN>&nbsp;</SPAN></LI></UL><P><SPAN>Two new SAP CodeTalk Podcast episodes, Frank Densborn and Riley Rainey</SPAN><SPAN>&nbsp;</SPAN></P><UL><LI><SPAN>Frank Densborn episode Generative AP from the SAP Apphaus </SPAN><A href="https://podcast.opensap.info/sap-developers/2024/05/28/sap-codetalk-frank-densborn-from-sap-apphaus-discussing-generative-ai-and-llms/" target="_blank" rel="noopener nofollow noreferrer"><SPAN>https://podcast.opensap.info/sap-developers/2024/05/28/sap-codetalk-frank-densborn-from-sap-apphaus-discussing-generative-ai-and-llms/</SPAN></A> <SPAN>&nbsp;</SPAN></LI><LI><SPAN>SAP AppHaus GenAI Explore workshop to identify AI use cases </SPAN><A href="https://apphaus.sap.com/resource/generative-ai-explore-workshop" target="_blank" rel="noopener noreferrer"><SPAN>https://apphaus.sap.com/resource/generative-ai-explore-workshop</SPAN></A> <SPAN>&nbsp;</SPAN></LI><LI><SPAN>New AppHaus GenAI Discover/Design workshop with GenAI cards </SPAN><A href="https://apphaus.sap.com/resource/generative-ai-discover-and-design-workshop" target="_blank" rel="noopener noreferrer"><SPAN>https://apphaus.sap.com/resource/generative-ai-discover-and-design-workshop</SPAN></A> <SPAN>&nbsp;</SPAN></LI><LI><SPAN>Riley Rainey episode on the SAP Developer Insights Survey Report </SPAN><A href="https://podcast.opensap.info/sap-developers/2024/06/11/sap-codetalk-riley-rainey-discusses-the-sap-developer-insights-survey-report-with-josh-bentley/" target="_blank" rel="noopener nofollow noreferrer"><SPAN>https://podcast.opensap.info/sap-developers/2024/06/11/sap-codetalk-riley-rainey-discusses-the-sap-developer-insights-survey-report-with-josh-bentley/</SPAN></A> <SPAN>&nbsp;</SPAN></LI><LI><SPAN>Developer Insights Survey Report </SPAN><A href="https://community.sap.com/t5/technology-blogs-by-sap/the-2024-developer-insights-survey-the-report/ba-p/13686151" target="_blank"><SPAN>https://community.sap.com/t5/technology-blogs-by-sap/the-2024-developer-insights-survey-the-report/ba-p/13686151</SPAN></A><SPAN>&nbsp;</SPAN></LI></UL><P><SPAN>New YouTube Shorts 60 second videos on CAP Node.js</SPAN><SPAN>&nbsp;</SPAN></P><UL><LI><SPAN>The âCAP Node.js - Good To Know!â playlist </SPAN><A href="https://www.youtube.com/playlist?list=PL6RpkC85SLQDZ18v94otZSJJrpcNkPPV9" target="_blank" rel="noopener nofollow noreferrer"><SPAN>https://www.youtube.com/playlist?list=PL6RpkC85SLQDZ18v94otZSJJrpcNkPPV9</SPAN></A><SPAN>&nbsp;</SPAN></LI></UL><P><SPAN>&nbsp;</SPAN><STRONG>CHAPTER TITLES&nbsp;&nbsp;</STRONG></P><P><SPAN>0:00 Intro</SPAN><SPAN>&nbsp;<BR /></SPAN><SPAN>0:07 ABAP Open Source Updates, ABAP2UI5 and apm</SPAN><SPAN>&nbsp;<BR /></SPAN><SPAN>1:39 June Developer Challenge â Week 2</SPAN><SPAN>&nbsp;<BR /></SPAN><SPAN>2:42 CAP May Release</SPAN><SPAN>&nbsp;<BR /></SPAN><SPAN>4:51 SAP BTP reference architecture for SAP Build Process Automation</SPAN><SPAN>&nbsp;<BR /></SPAN><SPAN>5:36 Two new SAP CodeTalk Podcast episodes, Frank Densborn and Riley Rainey </SPAN><SPAN>&nbsp;<BR /></SPAN><SPAN>7:04 New YouTube Shorts 60 second videos on CAP Node.js </SPAN><SPAN>&nbsp;</SPAN></P><P><STRONG>TRANSCRIPT</STRONG></P><P>This is the SAP Developer News for the 13th June 2024.</P><P>[Rich]<BR />Hey folks, Rich Heilman here. I hope you all are doing well. This week, I'd like to share some news around the abap2UI5 project from our friend, Oblomov. He has posted on LinkedIn about the newly released abap2UI5 SAP BTP connector, which allows developers to call abap2UI5 apps via BTP from anywhere and integrate them into SAP Build Work Zone or SAP MobileStart. This is the first of a three-part series and in this post he explains the initial installation and configuration while sharing a bit about how the connector works. If you are a fan of abap2UI5 as I am, check out this latest post and learn about the abap2UI5 BTP connector today. Now while I have you, did you know that APM was launched last week at at the ABAP conference at Code Connect. Our friend Mark Bernard announced the availability of APM, an ABAP package management and registration tool. I don't have a whole lot of details to share right now, other than providing the website where you can check out the announcement video from the conference last week, and also review the presentation, and of course sign up for access to APM. I've done so already. I highly recommend for you to sign up yourself today. So check out the website for more information. Bye for now.</P><P>[Witalij]<BR />Hi everyone, welcome from Zurich where we are having right now "AI Meets Business" hackathon. And I would like to introduce you to all the SAP colleagues who are coaches here. And now back to our regular update. It is great to see that quite many teams here at the hackathon are using SAP HANA Cloud Vector Engine. If you are participating in the Developer Challenge for this month, then you might see that the week 2 challenge is already posted, and this is where I'm inviting you to try Vector Engine yourself. We will be able to recreate the part of the demo, which I presented during our Developer Keynote at SAP TechEd, 2023. Happy coding and I'm looking forward to your submission.</P><P>[Tom]<BR />We're happy to announce the May release of the SAP Cloud Application Programming model. This month we only have new features on the Java Runtime. This is because the CAP team is busy preparing for the big annual release, so expect major new things coming soon to the cloud application programming model. In the meantime, the CAP version this month has several new features that we'll highlight. First of all, there's a new difference processor. This is an API that can compare two entities and will tell you the differences. It can be really useful if you're wanting to, for instance, track changes at two different states of the same entity. We also see with the built-in change tracking now through an annotation, you can specify what key you want to be recorded in the change track. So instead of the technical key, you could perhaps store the business key. We see a new beta feature for fuzzy HANA search. We also have a new feature for setting the max age of an HTTP response via annotation. particularly useful when you have a MIME response. And we have the OData v4 key as a segment. This helps with building and simplifying the URL parameters for keys when requesting an OData entity. And finally there's a feature that I hope will be coming to the JavaScript version as well and that's the new Developer dashboard. Now this is an alpha version of the developer dashboard and it contains all kinds of cool information that helps you during the development process. Now the the notes are really clear that you should never use this in production because it would expose sensitive data. It looks like an incredible new developer tool and I can't wait to check it out. So all these great new things coming to the Java version of CAP in the May release and keep your eye out for the big major release coming soon for the Cloud Application Programming Model as well.</P><P>[DJ]<BR />Are you working with the SAP Business Technology Platform? Then if so, this news item is for you. The reference architecture for SAP Build Process Automation has been released. There's a wealth of resources collected together on this reference architecture over on the SAP Discovery Center. Not only that, but if you're building BTP solution diagrams, there's a repository with a starter kit, examples, and guidelines, as well as templates for you to use that are in draw IO format. Links to the SAP Discovery Center page and the GitHub repository are in the description.</P><P>[Josh]<BR />Hey everybody, Mr. Bluebeard, Josh Bentley, And I'm here to give you a couple of updates real quick on the SAP CodeTalk podcast series. I was lucky enough to get to do two podcast episodes recently. The first was with Frank Densborn and he's from our SAP AppHaus team. The AppHaus co-innovates with our customers. They dive deep on a use case and they come up with some code that actually can solve that use case problem. So Frank Densborn goes through this with me in the podcast episode and then he goes down to SAP Sapphire in Orlando and dives deeper with the customers on how we're using large language models and chatGPT and generative AI to solve some of these use cases. So very topical and very cool stuff that Frank and the team at the AppHaus are putting out. The next episode I recorded was with Riley Rainey. Riley is from our developer advocates team and he helps put out the Developer Insight Survey. So if you see that survey coming out and you fill in those questions with your answers, We actually take that back to the committee and we go through those answers and put out a report and Riley goes through the methodology and some of the most recent answers that were given in the Developer Insight Survey. So link to that below in this Developer News episode and if you're not already subscribing to the SAP Code Talk podcast, wherever you listen to podcasts, please subscribe and also you can keep watching it here on the SAP Developer YouTube channel. And finally, happy Pride Month. Bye.</P><P>[DJ]<BR />The developer advocates are always looking for new ways to help developers. With that in mind, we've started creating some YouTube Shorts. A Short is in portrait format, no more than 60 seconds, which is basically then ideal for consuming quickly, on the go, on your phone. The current series is on CAP Node.js with tips and tricks that are good to know. For example, this week's short, just released, is all about the <a href="https://community.sap.com/t5/user/viewprofilepage/user-id/179624">@Path</a> annotation for service definitions. There's a link to the entire playlist so far in the description, so head on over there and check them all out.</P>
---
SAP Developer News, May 30th, 2024
application-developmentforum-board
2024-05-30
https://community.sap.com/t5/application-development-discussions/sap-developer-news-may-30th-2024/td-p/13717278
2024-05-30-sap-developer-news-may-30th-2024
<P><A href="https://www.youtube.com/watch?v=CCv3Oz4K_yQ" target="_self" rel="nofollow noopener noreferrer"><span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="thumbnail.png" style="width: 999px;"><img src="https://community.sap.com/t5/image/serverpage/image-id/117774i845DEB5A8991E5CB/image-size/large?v=v2&amp;px=999" role="button" title="thumbnail.png" alt="thumbnail.png" /></span></A></P><P><STRONG><SPAN>ITEMS</SPAN></STRONG></P><P><STRONG><SPAN>Code Connect 2024 is next week and there are live streams available</SPAN></STRONG><SPAN>&nbsp;</SPAN></P><UL><LI><SPAN>Code Connect 2024 umbrella website </SPAN><A href="https://code-connect.dev/" target="_blank" rel="noopener nofollow noreferrer"><SPAN>https://code-connect.dev/</SPAN></A><SPAN>&nbsp;</SPAN></LI></UL><P><STRONG><SPAN>SAP Integration Suite Spring update and SAP CodeJam roadshow â Latin America</SPAN></STRONG><SPAN><BR /></SPAN></P><UL><LI><SPAN>Whatâs new for SAP Integration Suite â Spring 2024: </SPAN><A href="https://community.sap.com/t5/technology-blogs-by-sap/what-s-new-for-sap-integration-suite-spring-2024/ba-p/13709235" target="_blank"><SPAN>https://community.sap.com/t5/technology-blogs-by-sap/what-s-new-for-sap-integration-suite-spring-2024/ba-p/13709235</SPAN></A> <SPAN>&nbsp;</SPAN></LI><LI><SPAN>SAP CodeJam Roadshow 2024 - Latin America edition <span class="lia-unicode-emoji" title=":brazil:">ð§ð·</span> <span class="lia-unicode-emoji" title=":chile:">ð¨ð±</span> <span class="lia-unicode-emoji" title=":argentina:">ð¦ð·</span> <span class="lia-unicode-emoji" title=":colombia:">ð¨ð´</span> (August 8th - 21st 2024): </SPAN><A href="https://community.sap.com/t5/sap-codejam-blog-posts/sap-codejam-roadshow-2024-latin-america-edition-august-8th-21st-2024/ba-p/13710015" target="_blank"><SPAN>https://community.sap.com/t5/sap-codejam-blog-posts/sap-codejam-roadshow-2024-latin-america-edition-august-8th-21st-2024/ba-p/13710015</SPAN></A><SPAN>&nbsp;</SPAN></LI></UL><P><STRONG><SPAN>5 Steps to Fiori Bootcamp&nbsp;Q2 2024</SPAN></STRONG><SPAN>&nbsp;</SPAN></P><UL><LI><SPAN>Blog post: </SPAN><A href="https://community.sap.com/t5/technology-blogs-by-sap/sap-fiori-for-sap-s-4hana-5-steps-to-fiori-bootcamp-for-customers/ba-p/13510161" target="_blank"><SPAN>https://community.sap.com/t5/technology-blogs-by-sap/sap-fiori-for-sap-s-4hana-5-steps-to-fiori-bootcamp-for-customers/ba-p/13510161</SPAN></A><SPAN>&nbsp;</SPAN></LI><LI><SPAN>Program information document: </SPAN><A href="https://www.sap.com/documents/2021/09/822c893a-fb7d-0010-bca6-c68f7e60039b.html?utm_source=linkedin&amp;utm_medium=social&amp;utm_campaign=5steps2Fiori" target="_blank" rel="noopener noreferrer"><SPAN>https://www.sap.com/documents/2021/09/822c893a-fb7d-0010-bca6-c68f7e60039b.html?utm_source=linkedin&amp;utm_medium=social&amp;utm_campaign=5steps2Fiori</SPAN></A> <SPAN>&nbsp;</SPAN></LI></UL><P><STRONG><SPAN>SAP Version Bot</SPAN></STRONG><SPAN>&nbsp;</SPAN></P><UL><LI><SPAN>GitHub repo </SPAN><A href="https://github.com/htammen/saptodon-sap-version-bot" target="_blank" rel="noopener nofollow noreferrer"><SPAN>https://github.com/htammen/saptodon-sap-version-bot</SPAN></A><SPAN>&nbsp;</SPAN></LI><LI><SPAN>The bot </SPAN><A href="https://saptodon.org/@sap_versions" target="_blank" rel="noopener nofollow noreferrer"><SPAN>https://saptodon.org/@sap_versions</SPAN></A><SPAN>&nbsp;</SPAN></LI></UL><P><STRONG><SPAN>DYK: ABAP Cloud Developer Trial 2022 is now available on Docker</SPAN></STRONG><SPAN>&nbsp;</SPAN></P><UL><LI><SPAN>Blog post </SPAN><A href="https://community.sap.com/t5/technology-blogs-by-sap/abap-cloud-developer-trial-2022-available-now/ba-p/13598069" target="_blank"><SPAN>https://community.sap.com/t5/technology-blogs-by-sap/abap-cloud-developer-trial-2022-available-now/ba-p/13598069</SPAN></A><SPAN>&nbsp;</SPAN></LI><LI><SPAN>Docker Hub image </SPAN><A href="https://hub.docker.com/r/sapse/abap-cloud-developer-trial" target="_blank" rel="noopener nofollow noreferrer"><SPAN>https://hub.docker.com/r/sapse/abap-cloud-developer-trial</SPAN></A> <SPAN>&nbsp;</SPAN></LI></UL><P><STRONG>CHAPTER TITLES&nbsp;&nbsp;</STRONG></P><P><SPAN>00:00 Intro</SPAN><SPAN>&nbsp;<BR /></SPAN><SPAN>00:07 </SPAN><SPAN>Code Connect 2024 is next week</SPAN><SPAN>&nbsp;<BR /></SPAN><SPAN>01:50 SAP Integration Suite Spring update and SAP CodeJam roadshow â Latin America</SPAN><SPAN>&nbsp;<BR /></SPAN><SPAN>03:13 5 Steps to Fiori Bootcamp Q2 2024</SPAN><SPAN>&nbsp;<BR /></SPAN><SPAN>04:12 SAP Version Bot</SPAN> <SPAN>&nbsp;<BR /></SPAN><SPAN>05:00 DYK: ABAP Cloud Developer Trial 2022 is now available on Docker</SPAN><SPAN>&nbsp;</SPAN></P><P><STRONG>TRANSCRIPT</STRONG></P><P>This is the SAP Developer News for the 30th of May 2024.</P><P>[DJ]<BR />There are two great events taking place next week. One, of course, is Sapphire, and the other is an awesome multi-conference event called Code Connect 2024 taking place in Germany. Running Monday through Thursday, there's an SAP CodeJam on service integration with CAP. Then there's reCAP, the conference for all things SAP Cloud Application Programming Model. Then there's UI5con, all things SAPUI5 and OpenUI5. Then there's ABAPConf 2024 Europe, for ABAP developers by ABAP developers. And the best thing, if you can't attend in person, then there are live streams of the sessions and tracks available for each of the reCAP UI5con and ABAPConf conferences. And for the live streams, there's no registration required. If you are lucky enough to be able to attend in person, remember that it's not all develop, develop, develop. Well, mostly it is. As well as the awesome hallway track, there's yoga sessions, massage chairs, an unofficial meetup on a Monday evening in Casa Nostra. I quite like the fact that it's Italian, given the flavor of the CAP documentation. And also don't forget to install the app for the reCAP conference. All the details, including where to catch the live streams are on the individual conference websites, which are all themselves linked from the umbrella code-connect.dev. See you there.</P><P>[Antonio]<BR />Hola, SAP developers. Generally, there's a lot happening in the SAP integration suite. Fortunately, Gabriela recently published a blog post in SAP Community where she highlights the different updates that there have been to the different capabilities of SAP Integration Suite. For example, in cloud integration, in API management, in the B2B integration, in edge integration cell. So make sure to check out her blog post to see what has happened lately. Also, in case you missed it, we recently announced the first ever SAP CodeJam Roadshow in Latin America. My colleague, Josh Bentley and I will be doing two topics in this Roadshow, which are Event Driven Integrations with SAP Integration Suite Advanced Event Mesh and SAP Build, Create Apps and Processes without Code. Now, our first stop will be in Sao Paulo, Brazil, the 8th and 9th of August. Then it will be Santiago, Chile, the 12th and 13th of August. Then the 15th and 16th of August will be in Buenos Aires, Argentina. And we will finalize the roadshow in Bogota, Colombia, the 20th and 21st of August. I look forward to meeting you guys over there. See you.</P><P>[Ajay]<BR />Hello, everyone. Multiple customers ask us time and again how they can make use of all the features in SAP Fiori and SAP S/4HANA to manage their UX adoption journey. SAP S/4HANA Customer Care and Regional Implementation Group provide a free hands-on experience boot camp called Five Steps to Fiori. This will help you define your UX adoption strategy and gain practical hands-on skills in activities, technologies, and tools to adopt SAP Fiori UX. This boot camp is offered only for SAP customers, and each customer is required to participate as a team. New sessions for Q2 2024 are now listed in the Program Information document. This offering now includes content on SAP S/4HANA Embedded Analytics. The link to the documentation is in the description below.</P><P>[DJ]<BR />If you're a developer in the SAP ecosphere and are looking for a reason to jump into the exciting and open world of the Fediverse, There's a great reason in the form of the SAP version bot that toots, that's tweets in old money, timely new release information on SAP related NPM packages and GitHub repositories that it monitors for us. I follow the SAP version bot from my Mastodon account and it helps me keep up to date with what's new in the CAP Node.js and UI5 worlds. Grab yourself an account over in the Fediverse and start following this bot.</P><P>[Mamikee]<BR />Did you know the ABAP Cloud Developer Trial 2022 is now available as a Docker image? We know many of you have been waiting for a local ABAP instance that fully supports ABAP's RESTful application programming model. So, to pull this image, simply copy the Docker pull command to the command line. The pull operation will take some time, but eventually it will succeed, and the image will be viewable in the Docker desktop's image tab. Next it's time to get the Docker container. Use the following commands provided on the Docker site and watch the output carefully. You should now be able to click on the A4H and the logs tab should show the same information. Next we're going to set up the SAPGUI connection and log into developers. The SAP system is now up and running and as you can see it's visible in Eclipse. For a deeper dive into specifics including the features and the release highways, check out Julie Plummer's blog post. This post also provides links to further information on ABAP cloud and its accessibility. Be sure to secure your ABAP cloud developer trial now.</P>
---
Avoid design time CAP server restarts when maintaining local data files
application-developmentblog-board
2024-04-26
https://community.sap.com/t5/application-development-blog-posts/avoid-design-time-cap-server-restarts-when-maintaining-local-data-files/ba-p/13683635
2024-04-26-avoid-design-time-cap-server-restarts-when-maintaining-local-data-files
<P>Starting the CAP server with<SPAN>&nbsp;</SPAN>cds watch<SPAN>&nbsp;</SPAN>is great for tight development loops at design time, especially with the built-in in-memory SQLite persistence layer, seeded by data in CSV files. When the server notices files have changed, it automatically restarts, which is great.</P><P>But sometimes you want to maintain files and<SPAN>&nbsp;</SPAN><EM>not</EM><SPAN>&nbsp;</SPAN>have the server restart, perhaps because you have made modifications or additions to the data set that's being served, and don't want to lose that by such a restart.</P><P>Here's a quick hack to achieve that.</P><H2 id="toc-hId-993480777">Behind the scenes</H2><P>If you set the<SPAN>&nbsp;</SPAN><A href="https://cap.cloud.sap/docs/node.js/cds-log#debug-env-variable" target="_blank" rel="noopener nofollow noreferrer">DEBUG environment variable</A><SPAN>&nbsp;</SPAN>appropriately when running<SPAN>&nbsp;</SPAN>cds watch, like this:</P><P>&nbsp;</P><pre class="lia-code-sample language-shell"><code>DEBUG=cli cds watch</code></pre><P>&nbsp;</P><P>then you see a little bit more of what's going on behind the scenes:</P><P>&nbsp;</P><pre class="lia-code-sample language-text"><code>[cds] - /cds 7.6.3 loaded: /usr/lib/node_modules/@sap/cds-dk/node_modules/@sap/cds
[cds] - Command resolved: /usr/lib/node_modules/@sap/cds-dk/bin/watch.js
[cli] - live reload available at http://127.0.0.1:35729/livereload.js?snipver=1

cds serve all --with-mocks --in-memory?
9734 watching: cds,csn,csv,ts,mjs,cjs,js,json,properties,edmx,xml,env ...
ignoring: (node_modules|_out|@types|@cds-models)\/|app(\/.+)?\/((webapp|dist|target)\/|tsconfig\.json$|.*\.tsbuildinfo$)
live reload enabled for browsers
[cli] - livereload ignored: .vscode

...

[cds] - /cds 7.6.3 loaded: /usr/lib/node_modules/@sap/cds-dk/node_modules/@sap/cds
[cds] - Command resolved: /usr/lib/node_modules/@sap/cds-dk/bin/serve.js
[cds] - loaded model from 2 file(s):

  srv/cat-service.cds
  db/data-model.cds

[cds] - connect using bindings from: { registry: '~/.cds-services.json' }
[cds] - connect to db &gt; sqlite { database: ':memory:' }
  &gt; init from db/data/my.bookshop-Books.csv
/&gt; successfully deployed to in-memory database.

[cds] - using auth strategy {
  kind: 'mocked',
  impl: '../../usr/lib/node_modules/@sap/cds-dk/node_modules/@sap/cds/lib/auth/basic-auth'
}

[cds] - serving CatalogService { path: '/odata/v4/catalog' }

[cds] - server listening on { url: 'http://localhost:4004' }
[cds] - launched at 4/10/2024, 8:55:34 AM, version: 7.6.3, in: 736.516ms
[cds] - [ terminate with ^C ]

[cli] - live reload for . 0 ws clients</code></pre><P>&nbsp;</P><BLOCKQUOTE><P>It's the "ignored" lines that we're interested in, rather than any containing "livereload", which is related, but<SPAN>&nbsp;</SPAN><A href="https://cap.cloud.sap/docs/releases/archive/2021/mar21#live-reload-with-cds-watch" target="_blank" rel="noopener nofollow noreferrer">separate</A>.</P></BLOCKQUOTE><P>It's these two log lines that are interesting here:</P><P>&nbsp;</P><pre class="lia-code-sample language-text"><code>9734 watching: cds,csn,csv,ts,mjs,cjs,js,json,properties,edmx,xml,env ...
ignoring: (node_modules|_out|@types|@cds-models)\/|app(\/.+)?\/((webapp|dist|target)\/|tsconfig\.json$|.*\.tsbuildinfo$)</code></pre><P>&nbsp;</P><P>The CAP server uses<SPAN>&nbsp;</SPAN><A href="https://github.com/yuanchuan/node-watch" target="_blank" rel="noopener nofollow noreferrer">node-watch</A><SPAN>&nbsp;</SPAN>behind the scenes providing the watch-and-restart mechanism. And it has a default regular expression, which we can see here, to describe file and directory name patterns that this mechanism should ignore.</P><H2 id="toc-hId-796967272">Normal behaviour</H2><P>Sometimes when marshalling data for an OData CREATE operation, for example, I'll use a file to store the JSON payload for such an operation. If I were to create or maintain the contents of a file called<SPAN>&nbsp;</SPAN>data.json<SPAN>&nbsp;</SPAN>in the project root, for example, like this:</P><P>&nbsp;</P><pre class="lia-code-sample language-shell"><code>touch data.json</code></pre><P>&nbsp;</P><P>then the CAP server would be restarted:</P><P>&nbsp;</P><pre class="lia-code-sample language-text"><code>[cli] - Restart { events: [ { type: 'update', name: '/tmp/watchme/data.json' } ] }
[cli] - ï¸ SIGTERM 15 received by cds serve
[cli] - ï¸ cds serve - cds.shutdown
[cli] - ï¸ cds serve - server.close(d)
[cli] - ï¸ cds serve - process.beforeExit
[cli] - ï¸ cds serve - process.exit
[cli] - ï¸ cds watch - child exited 9745

        ___________________________

[cds] - /cds 7.6.3 loaded: /usr/lib/node_modules/@sap/cds-dk/node_modules/@sap/cds
[cds] - Command resolved: /usr/lib/node_modules/@sap/cds-dk/bin/serve.js

...

[cds] - serving CatalogService { path: '/odata/v4/catalog' }

[cds] - server listening on { url: 'http://localhost:4004' }
[cli] - live reload for /tmp/watchme/data.json. 0 ws clients
[cds] - launched at 4/10/2024, 8:58:31 AM, version: 7.6.3, in: 732.947ms
[cds] - [ terminate with ^C ]</code></pre><P>&nbsp;</P><P>This would mean that the state of the in-memory data set served by my services would be lost and reset to the original CSV data file based state through the normal restart process.</P><H2 id="toc-hId-600453767">Avoiding normal behaviour</H2><P>If I wanted to avoid that happening, I could create a directory whose name was matched by the "ignore" regular expression. For example, If I could create a directory called<SPAN>&nbsp;</SPAN>_out/<SPAN>&nbsp;</SPAN>in the project root:</P><P>&nbsp;</P><pre class="lia-code-sample language-shell"><code>mkdir _out/</code></pre><P>&nbsp;</P><P>And then any creation or maintenance of files in that directory:</P><P>&nbsp;</P><pre class="lia-code-sample language-shell"><code>touch _out/data.json</code></pre><P>&nbsp;</P><P>would<SPAN>&nbsp;</SPAN><EM>not</EM><SPAN>&nbsp;</SPAN>result in the server being restarted:</P><P>&nbsp;</P><pre class="lia-code-sample language-text"><code>[cli] - ignored: _out
[cli] - livereload ignored: _out
[cli] - ignored: _out
[cli] - ignored: _out/data.json</code></pre><P>&nbsp;</P><P>Good to know!</P><HR /><P><A href="https://qmacro.org/blog/posts/2024/04/10/avoid-design-time-cap-server-restarts-when-maintaining-local-data-files/" target="_blank" rel="noopener nofollow noreferrer">Originally published on qmacro.org</A></P>
---
SAP Developer News, April 18th, 2024
application-developmentblog-board
2024-04-18
https://community.sap.com/t5/application-development-blog-posts/sap-developer-news-april-18th-2024/ba-p/13674660
2024-04-18-sap-developer-news-april-18th-2024
<P><STRONG><SPAN><div class="video-embed-center video-embed"><iframe class="embedly-embed" src="https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2FFVAali4nfLQ%3Ffeature%3Doembed&amp;display_name=YouTube&amp;url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DFVAali4nfLQ&amp;image=https%3A%2F%2Fi.ytimg.com%2Fvi%2FFVAali4nfLQ%2Fhqdefault.jpg&amp;type=text%2Fhtml&amp;schema=youtube" width="600" height="337" scrolling="no" title="CodeJam Roadshow, CAP Plugins, Build Dev Challenge, FioriConf, AI Webinar | SAP Developer News" frameborder="0" allow="autoplay; fullscreen; encrypted-media; picture-in-picture;" allowfullscreen="true"></iframe></div></SPAN></STRONG></P><P><STRONG><SPAN>SAP CodeJam European Roadshow</SPAN></STRONG><SPAN>&nbsp;</SPAN></P><UL><LI><SPAN>SAP CodeJam Event Calendar: </SPAN><A href="https://community.sap.com/t5/sap-codejam/eb-p/codejam-events" target="_blank"><SPAN>https://community.sap.com/t5/sap-codejam/eb-p/codejam-events</SPAN></A><SPAN>&nbsp;</SPAN></LI><LI><SPAN>SAP CodeJam Group: </SPAN><A href="https://community.sap.com/t5/sap-codejam/gh-p/code-jam" target="_blank"><SPAN>https://community.sap.com/t5/sap-codejam/gh-p/code-jam</SPAN></A><SPAN>&nbsp;</SPAN>&nbsp;</LI></UL><P><STRONG><SPAN>SAP CodeTalk with Daniel Schlachter on the CAP plugin concept</SPAN></STRONG><SPAN>&nbsp;</SPAN></P><UL><LI><SPAN>The interview </SPAN><A href="https://www.youtube.com/watch?v=cG-cMqAhqyQ" target="_blank" rel="noopener nofollow noreferrer"><SPAN>https://www.youtube.com/watch?v=cG-cMqAhqyQ</SPAN></A> <SPAN>&nbsp;</SPAN></LI><LI><SPAN>The Capire section on "CAP Plugins &amp; Enhancements" </SPAN><A href="https://cap.cloud.sap/docs/plugins/#cap-plugins-enhancements" target="_blank" rel="noopener nofollow noreferrer"><SPAN>https://cap.cloud.sap/docs/plugins/#cap-plugins-enhancements</SPAN></A> <SPAN>&nbsp;</SPAN></LI></UL><P><STRONG><SPAN>SAP Build Developer Challenge Week 3 Announcement</SPAN></STRONG><SPAN>&nbsp;</SPAN></P><UL><LI><SPAN>SAP builders group discussion : </SPAN><A href="https://community.sap.com/t5/sap-builders-discussions/april-citizen-developer-challenge-sap-build-apps-task-3/td-p/13672860" target="_blank"><SPAN>https://community.sap.com/t5/sap-builders-discussions/april-</SPAN></A> <A href="http://citizen-/" target="_blank" rel="noopener nofollow noreferrer"><SPAN>citizen-developer-challenge-sap-build-apps-task-3/td-p/13672860</SPAN></A><SPAN>&nbsp;</SPAN></LI></UL><P><STRONG><SPAN>FioriConf 2024 and SAP CodeJam â SAP Fiori elements flexible programming model</SPAN></STRONG><SPAN>&nbsp;</SPAN></P><UL><LI><SPAN>FioriConf 2024: </SPAN><A href="https://www.fioriconf.org/" target="_blank" rel="noopener nofollow noreferrer"><SPAN>https://www.fioriconf.org/</SPAN></A><SPAN>&nbsp;</SPAN></LI><LI><SPAN>SAP CodeJam topic list: </SPAN><A href="https://community.sap.com/t5/sap-codejam-blog-posts/sap-codejam-topics/ba-p/221407" target="_blank"><SPAN>https://community.sap.com/t5/sap-codejam-blog-posts/sap-codejam-topics/ba-p/221407</SPAN></A><SPAN>&nbsp;</SPAN></LI><LI><SPAN>SAP CodeJam â SAP Fiori elements flexible programming model: </SPAN><A href="https://github.com/SAP-samples/fiori-elements-fpm-exercises-codejam" target="_blank" rel="noopener nofollow noreferrer"><SPAN>https://github.com/SAP-samples/fiori-elements-fpm-exercises-codejam</SPAN></A><SPAN>&nbsp;</SPAN></LI></UL><P><STRONG><SPAN>Solution Experience Live Session: Deliver Real-World Results with SAP Business AI, April 30, 2024</SPAN></STRONG><SPAN>&nbsp;</SPAN></P><UL><LI><SPAN>Register: </SPAN><A href="https://events.sap.com/live-session-sap-business-ai/en/home" target="_blank" rel="noopener noreferrer"><SPAN>https://events.sap.com/live-session-sap-business-ai/en/home</SPAN></A><SPAN>&nbsp;</SPAN></LI><LI><SPAN>SAP Business AI release highlights: </SPAN><A href="https://community.sap.com/t5/technology-blogs-by-sap/deliver-real-world-results-with-sap-business-ai-q4-2023-amp-q1-2024-release/ba-p/13650291" target="_blank"><SPAN>https://community.sap.com/t5/technology-blogs-by-sap/deliver-real-world-results-with-sap-business-ai-q4-2023-amp-q1-2024-release/ba-p/13650291</SPAN></A><SPAN>&nbsp;</SPAN></LI></UL><P><STRONG>CHAPTER TITLES&nbsp;&nbsp;</STRONG></P><P><SPAN>0:00 Intro</SPAN><SPAN>&nbsp;<BR /></SPAN><SPAN>0:07 SAP CodeJam European Roadshow&nbsp;</SPAN><SPAN>&nbsp;<BR /></SPAN><SPAN>1:04 SAP CodeTalk with Daniel Schlachter on the CAP plugin concept</SPAN><SPAN>&nbsp;<BR /></SPAN><SPAN>2:16 SAP Build Developer Challenge Week 3 Announcement</SPAN><SPAN>&nbsp;<BR /></SPAN><SPAN>3:00 FioriConf 2024 and SAP CodeJam </SPAN><SPAN>â </SPAN><SPAN>SAP Fiori elements flexible programming model</SPAN><SPAN>&nbsp;<BR /></SPAN><SPAN>3:55 Solution Experience Live Session: Deliver Real-World Results with SAP Business AI, April 30, 2024</SPAN><SPAN>&nbsp;</SPAN></P><P><SPAN><STRONG>TRANSCRIPT</STRONG></SPAN></P><P>[Tom]<BR />This is the SAP Developer News for the 18th of April, 2024. Live from Amsterdam. Live from Bucharest. Live from Leverkusen, Germany. Hey there, we're halfway through this year's SAP Code Jam European Roadshow. As the little intro there demonstrated, we've hit three cities already, we've got Paris, France, and Madrid, Spain still to go on this trip. We've had a wonderful time interacting with all the community members, developers out there, introducing them to ABAP cloud as well as the SAP cloud application programming model. And this is a great time to remind you that anybody can request and offer to host an SAP Code Jam, we'll do our best to accommodate and and make that possible. So if you'd like to see next time's road show come to an area near you, consider hosting a code jam in the future.</P><P>[DJ]<BR />Recently, there's a new plugin concept that's been introduced in the SAP Cloud Application programming model. On the one hand, it allows the CAP team to build out new functions and features for CAP in a really beautifully modular way and it allows us as developers to consume those extensions and new features also in a really beautifully simple way, often only requiring one line in our projects. It also allows us in the community to contribute extensions to CAP as well. This is the CAP plugin concept and recently I got the opportunity to talk about the CAP plugin concept and learn more about it from one of the enablement team members Daniel Schlachter. It's in a code talk format so you can consume it in video form or in audio form in the code talk podcast. Check it out. The link is in the description.</P><P>[Shrini]<BR />Hello, SAP Builders. We are already in week three of the developer challenge. And this time, we will be diving into the theming capabilities of SAP Build. Our very own developer advocate, Rekha, has prepared an exciting challenge that will walk you through all the different options available in the theme, style, and layout tabs of SAP Build apps. She has also provided step-by-step instructions on how to complete the challenge in a post. Participate in the challenge and share your screenshots, along with the hashed answers in the reply section of this discussion in the SAP Builders group. We are eager to see your responses to this challenge.</P><P>[Nico]<BR />Hi everyone, and welcome to the SAP Developer News. This is just a friendly reminder that FioriConf 2024 happens on April 24th. It's free, live, online only, with a 100% focus on SAP Fiori. The event is organized by SAP community members and is a great fit for everyone working with SAP Fiori, be it developers, consultants, architects, or admins. Make sure to check out the link in the description. And speaking of SAP Fiori, we just added a new topic to the list of available topics for SAP Code Jam events, the SAP Fiori Elements Flexible Programming Model. Make sure to check out the link in the description if you want to host or attend an SAP Code Jam event, and also check out the repository with the content. Hope to see you soon. Bye.</P><P>[Nora]<BR />Many partners and customers always ask me what SAP means by business AI, and what SAP's approach is to business AI, and how SAP can help them transform their businesses and leverage AI for their businesses. If you also have those questions, Then listen up because SAP Learning is hosting a 16-minute solution experience live session on the 30th of April at 1.30 Central European summertime to answer exactly those questions. The session is suitable for all audiences as it is a get started session. And you will not only learn about SAP's latest innovative use cases of AI, but also understand SAP's strategy towards business AI and how your business can benefit from it. The speaker is no other than Dr. Philipp Herzig, our Chief AI Officer, who will also guide you through the 2024 Q1 releases of Business AI and he will share all the know-how with you that you need to stay up to date and to transform your business. So make sure you register with the link below and sign up for the event and don't miss out on all the insights.</P>
---
CAP, CDS, CDL, CSN and jq - finding associations
application-developmentblog-board
2024-04-16
https://community.sap.com/t5/application-development-blog-posts/cap-cds-cdl-csn-and-jq-finding-associations/ba-p/13671633
2024-04-16-cap-cds-cdl-csn-and-jq-finding-associations
<P>In CAP, relationships between entities can be expressed with associations. In digging into how these are represented internally, I found jq yet again to be invaluable in parsing out info from the internal representation of the definitions. Here's what I did.</P><P>In<SPAN>&nbsp;</SPAN><A href="https://cap.cloud.sap/" target="_blank" rel="noopener nofollow noreferrer">CAP</A>, SAP's Cloud Application Programming Model,<SPAN>&nbsp;</SPAN><A href="https://cap.cloud.sap/docs/guides/domain-modeling" target="_blank" rel="noopener nofollow noreferrer">models are defined</A><SPAN>&nbsp;</SPAN>declaratively in a human readable format known as CDL, which stands for Core Definition Language<A href="https://qmacro.org/blog/posts/2024/04/05/cap-cds-cdl-csn-and-jq-finding-associations/#footnotes" target="_blank" rel="noopener nofollow noreferrer">1</A>.</P><H2 id="toc-hId-992497672">CDL example</H2><P>Here's a simple example, in a file called<SPAN>&nbsp;</SPAN>services.cds<SPAN>&nbsp;</SPAN>taken from the current<SPAN>&nbsp;</SPAN><A href="https://www.youtube.com/playlist?list=PL6RpkC85SLQBHPdfHQ0Ry2TMdsT-muECx" target="_blank" rel="noopener nofollow noreferrer">Hands-on SAP Dev live stream series on back to basics with CAP Node.js</A>:</P><PRE>aspect cuid { key ID: UUID }

service bookshop {
  entity Books : cuid {
    title: String;
    author: Association to Authors;
  }
  entity Authors : cuid {
    name: String;
    books: Association to many Books on books.author = $self;
  }
}</PRE><BLOCKQUOTE><P>Yes, there's a<SPAN>&nbsp;</SPAN>cuid<SPAN>&nbsp;</SPAN>aspect in<SPAN>&nbsp;</SPAN>@sap/cds/common<SPAN>&nbsp;</SPAN>but I didn't want the entire contents of that package being expressed in the output that follows, as it would make it more difficult to see the essential parts in this short example.</P></BLOCKQUOTE><P>There's a "to-one" relationship between<SPAN>&nbsp;</SPAN>Books<SPAN>&nbsp;</SPAN>and<SPAN>&nbsp;</SPAN>Authors, and a "to-many" relationship in the back link beween<SPAN>&nbsp;</SPAN>Authors<SPAN>&nbsp;</SPAN>and<SPAN>&nbsp;</SPAN>Books.</P><BLOCKQUOTE><P>For those non-CAP folks wondering where the foreign key field is in the first relationship, it's constructed automatically as the<SPAN>&nbsp;</SPAN>Books:author<SPAN>&nbsp;</SPAN>association is a<SPAN>&nbsp;</SPAN><A href="https://cap.cloud.sap/docs/guides/domain-modeling#managed-1-associations" target="_blank" rel="noopener nofollow noreferrer">managed</A><SPAN>&nbsp;</SPAN>one.</P></BLOCKQUOTE><H2 id="toc-hId-795984167">CSN equivalent</H2><P>There's an internal JSON-based representation of such definitions, which lends itself more readily to machine processing. This representation is called<SPAN>&nbsp;</SPAN><A href="https://cap.cloud.sap/docs/cds/csn" target="_blank" rel="noopener nofollow noreferrer">Core Schema Notation</A>, or CSN. We can see the CSN for the CDL source above, like this:</P><PRE>cds compile --to csn services.cds</PRE><BLOCKQUOTE><P>The default target format is in fact<SPAN>&nbsp;</SPAN>csn<SPAN>&nbsp;</SPAN>so<SPAN>&nbsp;</SPAN>--to csn<SPAN>&nbsp;</SPAN>is unnecessary, but it's nice to express it explicitly here.</P></BLOCKQUOTE><P>What we get is this:</P><PRE>{
  "definitions": {
    "cuid": {
      "kind": "aspect",
      "elements": {
        "ID": {
          "key": true,
          "type": "cds.UUID"
        }
      }
    },
    "bookshop": {
      "kind": "service"
    },
    "bookshop.Books": {
      "kind": "entity",
      "includes": [
        "cuid"
      ],
      "elements": {
        "ID": {
          "key": true,
          "type": "cds.UUID"
        },
        "title": {
          "type": "cds.String"
        },
        "author": {
          "type": "cds.Association",
          "target": "bookshop.Authors",
          "keys": [
            {
              "ref": [
                "ID"
              ]
            }
          ]
        }
      }
    },
    "bookshop.Authors": {
      "kind": "entity",
      "includes": [
        "cuid"
      ],
      "elements": {
        "ID": {
          "key": true,
          "type": "cds.UUID"
        },
        "name": {
          "type": "cds.String"
        },
        "books": {
          "type": "cds.Association",
          "cardinality": {
            "max": "*"
          },
          "target": "bookshop.Books",
          "on": [
            {
              "ref": [
                "books",
                "author",
                "ID"
              ]
            },
            "=",
            {
              "ref": [
                "ID"
              ]
            }
          ]
        }
      }
    }
  },
  "meta": {
    "creator": "CDS Compiler v4.6.2",
    "flavor": "inferred"
  },
  "$version": "2.0"
}</PRE><H2 id="toc-hId-599470662">Picking out detail with jq</H2><P>I'm just interested to see how the associations are represented, so wanted to narrow this CSN down to just elements that are of type<SPAN>&nbsp;</SPAN>cds.Association. Being a relatively involved JSON dataset, this was a job for one of my favourite languages, jq.</P><P>Here's what I came up with, in a file called<SPAN>&nbsp;</SPAN>associations:</P><PRE>#!/usr/bin/env -S jq -f

# Lists entities and shows any elements that are associations

def is_entity: .value.kind == "entity";
def is_association: .value.type == "cds.Association";

.definitions
| to_entries
| map(
    select(is_entity)
    | {
        (.key):
        .value.elements
        | with_entries(select(is_association))
      }
  )</PRE><P>And here's how I use it:</P><PRE>cds compile --to csn services.cds | ./associations</PRE><P>The output is:</P><PRE>[
  {
    "bookshop.Books": {
      "author": {
        "type": "cds.Association",
        "target": "bookshop.Authors",
        "keys": [
          {
            "ref": [
              "ID"
            ]
          }
        ]
      }
    }
  },
  {
    "bookshop.Authors": {
      "books": {
        "type": "cds.Association",
        "cardinality": {
          "max": "*"
        },
        "target": "bookshop.Books",
        "on": [
          {
            "ref": [
              "books",
              "author",
              "ID"
            ]
          },
          "=",
          {
            "ref": [
              "ID"
            ]
          }
        ]
      }
    }
  }
]</PRE><P>Here are some notes:</P><UL><LI>I encapsulated the kind / type determination in helper predicate functions (is_entity<SPAN>&nbsp;</SPAN>and<SPAN>&nbsp;</SPAN>is_association), mostly to keep the main code more succinct</LI><LI>I love how the<SPAN>&nbsp;</SPAN><A href="https://jqlang.github.io/jq/manual/#to_entries-from_entries-with_entries" target="_blank" rel="noopener nofollow noreferrer">to_entries,from_entries,with_entries(f)</A><SPAN>&nbsp;</SPAN>family of functions<A href="https://qmacro.org/blog/posts/2024/04/05/cap-cds-cdl-csn-and-jq-finding-associations/#footnotes" target="_blank" rel="noopener nofollow noreferrer">2</A><SPAN>&nbsp;</SPAN>help out by normalising JSON objects that have dynamic values for property keys</LI><LI>By using the<SPAN>&nbsp;</SPAN>select(is_entity)<SPAN>&nbsp;</SPAN>in the context of such normalisation, I can easily pick out the "enclosing" object that contains the condition I'm looking for</LI><LI>In contrast to the use of<SPAN>&nbsp;</SPAN>to_entries<SPAN>&nbsp;</SPAN>at the outer (entity) level, I used<SPAN>&nbsp;</SPAN>with_entries<SPAN>&nbsp;</SPAN>to achieve the<SPAN>&nbsp;</SPAN>to_entries | map(...) | from_entries<SPAN>&nbsp;</SPAN>pattern that is so useful</LI></UL><P>And that's about it! Score one more for the wonderful utility of jq, in today's world of JSON.</P><H2 id="toc-hId-402957157">Alternative approach</H2><P>While I like the<SPAN>&nbsp;</SPAN>is_entity<SPAN>&nbsp;</SPAN>and<SPAN>&nbsp;</SPAN>is_association<SPAN>&nbsp;</SPAN>definitions, one could make the main code even more succinct like this:</P><PRE>def entities: select(.value.kind == "entity");
def associations: select(.value.type == "cds.Association");

.definitions
| to_entries
| map(
    entities
    | {
       (.key):
       .value.elements | with_entries(associations)
      }
  )</PRE><P>Which do you prefer?</P><HR /><P><STRONG>Footnotes</STRONG></P><P>1: The human readable language we used to define models is commonly referred to as CDS.<SPAN>&nbsp;</SPAN><A href="https://cap.cloud.sap/docs" target="_blank" rel="noopener nofollow noreferrer">Capire</A>, the CAP documentation resource, is more precise, calling it CDL, classing CDL, CSN and other CAP little languages such as CQL and CQN as all being under the general CDS umbrella term. As you can see from the bottom of the CSN output, even the compiler refers to it as CDS!</P><P>2: For more on this family of functions, see<SPAN>&nbsp;</SPAN><A href="https://qmacro.org/blog/posts/2022/05/30/reshaping-data-values-using-jq's-with_entries/" target="_blank" rel="noopener nofollow noreferrer">Reshaping data values using jq's with_entries</A><SPAN>&nbsp;</SPAN>and<SPAN>&nbsp;</SPAN><A href="https://qmacro.org/blog/posts/2024/02/28/quick-conversion-of-multiple-values-using-with_entries-in-jq/" target="_blank" rel="noopener nofollow noreferrer">Quick conversion of multiple values using with_entries in jq</A>.</P><P>&nbsp;</P><HR /><P><A href="https://qmacro.org/blog/posts/2024/04/05/cap-cds-cdl-csn-and-jq-finding-associations/" target="_blank" rel="nofollow noopener noreferrer">Originally published on qmacro.org</A></P>
---
SAP Developer News, April 11th, 2024
application-developmentforum-board
2024-04-11
https://community.sap.com/t5/application-development-discussions/sap-developer-news-april-11th-2024/td-p/13667208
2024-04-11-sap-developer-news-april-11th-2024
<P><STRONG><div class="video-embed-center video-embed"><iframe class="embedly-embed" src="https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2F3gAvEGa5Mt0%3Ffeature%3Doembed&amp;display_name=YouTube&amp;url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3D3gAvEGa5Mt0&amp;image=https%3A%2F%2Fi.ytimg.com%2Fvi%2F3gAvEGa5Mt0%2Fhqdefault.jpg&amp;type=text%2Fhtml&amp;schema=youtube" width="600" height="337" scrolling="no" title="Back to Basics CAP, SAP Build Challenge, CodeJams, Data &amp; Analytics events | SAP Developer News" frameborder="0" allow="autoplay; fullscreen; encrypted-media; picture-in-picture;" allowfullscreen="true"></iframe></div></STRONG></P><P><STRONG>ITEMS</STRONG></P><P><STRONG>Back to basics series on CAP Node.js - 10th episode&nbsp;</STRONG></P><UL><LI><SPAN>Live stream series playlist: </SPAN><A href="https://www.youtube.com/playlist?list=PL6RpkC85SLQBHPdfHQ0Ry2TMdsT-muECx" target="_blank" rel="noopener nofollow noreferrer"><SPAN>https://www.youtube.com/playlist?list=PL6RpkC85SLQBHPdfHQ0Ry2TMdsT-muECx</SPAN></A><SPAN>&nbsp;</SPAN></LI><LI><SPAN>Capire documentation: </SPAN><A href="https://cap.cloud.sap/docs/" target="_blank" rel="noopener nofollow noreferrer"><SPAN>https://cap.cloud.sap/docs/</SPAN></A><SPAN>&nbsp;</SPAN></LI></UL><P><STRONG>SAP Community Challenge (SAP Build), Week 2 (Functions) &amp; openSAP Course&nbsp;</STRONG></P><UL><LI><SPAN>Community group Post: </SPAN><A href="https://community.sap.com/t5/sap-builders-discussions/april-citizen-developer-challenge-sap-build-apps-task-2-formulas/m-p/13665194#M1304" target="_blank"><SPAN>https://community.sap.com/t5/sap-builders-discussions/april-citizen-developer-challenge-sap-build-apps-task-2-formulas/m-p/13665194#M1304</SPAN></A><SPAN>&nbsp;</SPAN></LI><LI><SPAN>SAP Signavio &amp; SAP Build: </SPAN><A href="https://open.sap.com/courses/tbp1" target="_blank" rel="noopener noreferrer"><SPAN>https://open.sap.com/courses/tbp1</SPAN></A><SPAN>&nbsp;</SPAN></LI></UL><P><STRONG>SAP CodeJams â CAP &amp; RAP Roadshow + upcoming CodeJams&nbsp;</STRONG></P><UL><LI><SPAN>Upcoming CodeJams: </SPAN><A href="https://community.sap.com/t5/sap-codejam/eb-p/codejam-events" target="_blank"><SPAN>https://community.sap.com/t5/sap-codejam/eb-p/codejam-events</SPAN></A><SPAN>&nbsp;</SPAN><SPAN>&nbsp;</SPAN></LI><LI><SPAN>SAP CodeJams group: </SPAN><A href="https://community.sap.com/t5/sap-codejam/gh-p/code-jam" target="_blank"><SPAN>https://community.sap.com/t5/sap-codejam/gh-p/code-jam</SPAN></A><SPAN>&nbsp;</SPAN><SPAN>&nbsp;</SPAN></LI></UL><P><STRONG>SAP Data &amp; Analytics events&nbsp;</STRONG></P><UL><LI><SPAN>Discovery Day: The Future of Planning &amp; Analytics: <A href="https://events.sap.com/eur/2024-mee-btp-innovation-day-en/en/home" target="_blank" rel="noopener noreferrer">https://events.sap.com/eur/2024-mee-btp-innovation-day-en/en/home</A>&nbsp;&nbsp;</SPAN><SPAN>&nbsp;</SPAN></LI><LI><SPAN>Whatâs New in SAP Datasphere in 2024-Q1: </SPAN><A href="https://events.sap.com/sap-btp-customer-value-network-global/en/upcoming#04102024" target="_blank" rel="noopener noreferrer"><SPAN>https://events.sap.com/sap-btp-customer-value-network-global/en/upcoming#04102024</SPAN></A><SPAN>&nbsp;</SPAN></LI><LI><SPAN>Whatâs New in SAP Datasphere in 2024 (future events): </SPAN><A href="https://events.sap.com/2024-1231-sap-btp-whatsnew-datashere-webinar-global/en/home" target="_blank" rel="noopener noreferrer"><SPAN>https://events.sap.com/2024-1231-sap-btp-whatsnew-datashere-webinar-global/en/home</SPAN></A><SPAN>&nbsp;</SPAN></LI><LI><SPAN>Pilot: SAP Datasphere Fundamentals: </SPAN><A href="https://community.sap.com/t5/technology-blogs-by-sap/pilot-sap-datasphere-fundamentals/ba-p/13663830" target="_blank"><SPAN>https://community.sap.com/t5/technology-blogs-by-sap/pilot-sap-datasphere-fundamentals/ba-p/13663830</SPAN></A><SPAN>&nbsp;</SPAN></LI><LI><SPAN>SAP Datasphere is ready to take over the role of SAP BW â join the discussion: </SPAN><A href="https://community.sap.com/t5/technology-blogs-by-sap/sap-datasphere-is-ready-to-take-over-the-role-of-sap-bw/ba-p/13661635" target="_blank"><SPAN>https://community.sap.com/t5/technology-blogs-by-sap/sap-datasphere-is-ready-to-take-over-the-role-of-sap-bw/ba-p/13661635</SPAN></A><SPAN>&nbsp;</SPAN><SPAN>&nbsp;</SPAN></LI></UL><P><STRONG>'Did You Know' shorts Nr. 20 â Adding the btp CLI to a Dev Space in SAP Business Application Studio&nbsp;</STRONG></P><UL><LI><SPAN>SAP Development Tools (Cloud): </SPAN><A href="https://tools.hana.ondemand.com/#cloud" target="_blank" rel="noopener nofollow noreferrer"><SPAN>https://tools.hana.ondemand.com/#cloud</SPAN></A><SPAN>&nbsp;</SPAN></LI></UL><P><STRONG>CHAPTER TITLES&nbsp;</STRONG></P><P><SPAN>0:00 Intro</SPAN><SPAN>&nbsp;<BR /></SPAN><SPAN>0:07 Back to basics series on CAP Node.js - 10</SPAN><SPAN>th</SPAN><SPAN> episode</SPAN><SPAN>&nbsp;<BR /></SPAN><SPAN>1:21 SAP Community Challenge (SAP Build), Week 2 (Functions) &amp; openSAP Course</SPAN><SPAN>&nbsp;<BR /></SPAN><SPAN>2:26 SAP CodeJams â CAP &amp; RAP Roadshow + upcoming CodeJams</SPAN><SPAN>&nbsp;<BR /></SPAN><SPAN>3:39 SAP Data &amp; Analytics events</SPAN><SPAN>&nbsp;<BR /></SPAN><SPAN>5:03 'Did You Know' shorts Nr. 20 â Adding the btp CLI to a Dev Space in SAP Business Application Studio</SPAN><SPAN>&nbsp;</SPAN></P><P><STRONG>&nbsp;TRANSCRIPT</STRONG></P><P><SPAN>[DJ]<BR />This is the SAP Developer News for the 11th of April, 2024. Hands on SAP Dev is a live stream show brought to you by the Developer Advocates. A show that's been running since January 2019 and a show that has a focus on curiosity driven collaborative learning by doing. Over the years, that's amounted to a lot of learning on many developer-focused topics. Some of you regulars may already know, but others might not. So we wanted to let you know that recently we've been running a Back to Basics series on CAP Node.js, and we're coming to our 10th episode in that series. It's especially for beginners, who are all welcome, along with everyone else of course. If you're curious about how to get started with CAP and to learn about the fundamentals, this is the series for you. The live streams are always on Fridays at 0800 UK, which is UTC plus one right now. And you can catch up on all the replays of the previous episodes by watching them in this playlist. They're all here on the SAP Developers YouTube channel. Have fun and stay curious.<BR /></SPAN></P><P><SPAN>[Ian]<BR />Hi Builders, I wanted again to remind you of this month's community challenge which is on SAP Build apps. Week 2 is now available and the link is in the show notes below. This week's challenge dives into formulas and my colleague Daniel will help you understand the power of formulas and how to create them from scratch using the formula editor. So make sure you keep up to date with the tasks. Also if you can't get enough of learning more about SAP Build please check out the latest openSAP free course. It's on how to transform your business process with SAP Signavio and SAP Build. Over 5 weeks it will take you through how to analyse business processes using SAP Signavio, automating business processes using SAP Build Process Automation as well as creating front-end applications with SAP Build apps and Graph. Again, the link is in the show notes below. Happy learning, Builders.<BR /></SPAN></P><P><SPAN>[Antonio]<BR />Hola, SAP developers. The developer advocacy has been running a few projects the last couple of months and there are more coming your way. This week, the CAP/RAP Roadshow starts. Tom and Rich will be going through different cities in Europe. So for example, Amsterdam, Bucharest, Leverkusen, Paris, and finalizing the roadshow in Madrid. They might have a special surprise for us next week. Apart from that, we have a couple of codejams running in Valencia and Spain as well, and the first instance of the event-driven integration codejam has been scheduled for early May as well in Madrid. Apart from that, we also have CodeJams covering machine learning in HANA. There's one in Romania, for example, and there's also another CodeJam focusing on SAPUI5 and Fiori elements. So this is a bit for everyone for all the topics that you're interested in, for example. So make sure to check out the CodeJam events page that I'm including the link in the description below so that you end up finding out where the next in-person event will take place. Happy learning.<BR /></SPAN></P><P><SPAN>[Witalij]<BR />I would like to highlight three events hosted by our product teams. The first event is "Discovery Day, the Future of Planning and Analytics", scheduled for April 17th. Utilizing the flexible simulations in the SAP Analytics Cloud, you can assess various strategic options and proactively guide your organization. This Discovery Day offers an opportunity to learn from top planning experts about specific actions to take, the strategies being implemented, and how various companies, including SAP, have addressed these challenges. During this presentation, you will gain insights into SAP internal planning processes, transformation strategy, and current projects. The second virtual event is the What's New in SAP Datasphere in Q1. It took place this week, but if you missed it, make sure to watch the recording and preview slides that were presented. Please verify the dates for upcoming quarterly What's New webinars to ensure you don't miss them. If you are currently working on a project where you are considering SAP DataSphere for your system environment, you might want to participate in the new pilot expert-guided implementation or "EGI" on SAP DataSphere fundamentals. This is a part of the SAP Enterprise Support Advisory Council and will take place in May. Check the links in the description of this news episode.<BR /></SPAN></P><P><SPAN>[DJ]<BR />Did you know you can easily add BTP CLI to a DevSpace in SAP Business Application Studio? Download the Linux AMD64 version of the Tarball from the SAP Development Tools website. Once downloaded, drag it into the Explorer part of your DevSpace, into your home directory. Have a look inside the Tarball and note the location of the binary. Create a bin directory and make sure that bin directory is always in your search path and then start a new shell so you can test that new path list. Extract the binary into that new bin directory. And bingo. You can now run the BTP CLI in your DevSpace.<BR /></SPAN></P><P>&nbsp;</P>
---
CAP, CORS and custom headers
application-developmentblog-board
2024-04-11
https://community.sap.com/t5/application-development-blog-posts/cap-cors-and-custom-headers/ba-p/13666840
2024-04-11-cap-cors-and-custom-headers
<P>A colleague asked me if I could add CORS support to a service I was running, built with the SAP Cloud Application Programming Model (CAP). CAP already has some basic support for CORS, so I dug in. Here's what I learned, about CORS headers, preflight requests, CAP custom servers and more.</P><BLOCKQUOTE><P>The<SPAN>&nbsp;</SPAN><A href="https://www.npmjs.com/package/@sap/approuter" target="_blank" rel="noopener nofollow noreferrer">@sap/approuter</A><SPAN>&nbsp;</SPAN>has full support for CORS but I wanted to find out about what CAP offers and how to extend it. Specifically, this exploration was made with<SPAN>&nbsp;</SPAN>@sap/cds<SPAN>&nbsp;</SPAN>at version 7.8.0.</P></BLOCKQUOTE><H2 id="toc-hId-991725056">Test service</H2><P>Before diving in, let's create the simplest server that could possibly work<A href="https://qmacro.org/blog/posts/2024/03/30/cap-cors-and-custom-headers/#footnotes" target="_blank" rel="noopener nofollow noreferrer">1</A><SPAN>&nbsp;</SPAN>to explore CORS support in CAP. First, a minimal project:</P><PRE># /home/user/work/scratch
; cds init corstest \
    &amp;&amp; cd $_ \
    &amp;&amp; rm -rf .vscode/ app/ srv/ db/ README.md \
    &amp;&amp; tree -a
Creating new CAP project in ./corstest

Adding feature 'nodejs'...

Successfully created project. Continue with 'cd corstest'.
Find samples on https://github.com/SAP-samples/cloud-cap-samples
Learn about next steps at https://cap.cloud.sap
.
|-- .cdsrc.json
|-- .eslintrc
|-- .gitignore
`-- package.json

1 directory, 4 files</PRE><P>Now, just the simplest test REST style service. In<SPAN>&nbsp;</SPAN>services.cds<A href="https://qmacro.org/blog/posts/2024/03/30/cap-cors-and-custom-headers/#footnotes" target="_blank" rel="noopener nofollow noreferrer">2</A>:</P><PRE>@protocol: 'rest'
service corstest {
    function go() returns String;
}</PRE><P>And in the default implementation file for this service file, i.e.<SPAN>&nbsp;</SPAN>services.js:</P><PRE>module.exports = (s) =&gt;
    s.on('go', () =&gt; `Hello, World!`)</PRE><P>Let's also install the runtime locally with<SPAN>&nbsp;</SPAN>npm install<SPAN>&nbsp;</SPAN>(as we'll want to look into one of the files there later), and start the server up with<SPAN>&nbsp;</SPAN>cds watch. Now we can perform a basic test, asking for verbose output<A href="https://qmacro.org/blog/posts/2024/03/30/cap-cors-and-custom-headers/#footnotes" target="_blank" rel="noopener nofollow noreferrer">3</A>, to see what we get:</P><PRE># /home/user/work/scratch/corstest
; curl --verbose --url localhost:4004/rest/corstest/go
&gt; GET /rest/corstest/go HTTP/1.1
&gt; Host: localhost:4004
&gt; User-Agent: curl/7.88.1
&gt; Accept: */*
&gt;
&lt; HTTP/1.1 200 OK
&lt; X-Powered-By: Express
&lt; Content-Type: text/plain; charset=utf-8
&lt; Content-Length: 13
&lt;
Hello, World!</PRE><BLOCKQUOTE><P>In the verbose output for this HTTP request and all subsequent ones, some of the HTTP response headers have been omitted for brevity.</P></BLOCKQUOTE><P>OK, all set.</P><H2 id="toc-hId-795211551">Getting started</H2><P>CORS, or<SPAN>&nbsp;</SPAN><A href="https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS" target="_blank" rel="noopener nofollow noreferrer">Cross Origin Resource Sharing</A>, "is an HTTP-header based mechanism that allows a server to indicate any origins (domain, scheme, or port) other than its own from which a browser should permit loading resources". You come across it in the browser when wanting to consume resources from a different server to the one, the "origin", that the consuming code came from.</P><P>There's a<SPAN>&nbsp;</SPAN><A href="https://cap.cloud.sap/docs/node.js/best-practices#cross-origin-resource-sharing-cors" target="_blank" rel="noopener nofollow noreferrer">section on CORS</A><SPAN>&nbsp;</SPAN>in the<SPAN>&nbsp;</SPAN><A href="https://cap.cloud.sap/docs/node.js/best-practices" target="_blank" rel="noopener nofollow noreferrer">Node.js Best Practices</A><SPAN>&nbsp;</SPAN>part of<SPAN>&nbsp;</SPAN><A href="https://cap.cloud.sap/docs/" target="_blank" rel="noopener nofollow noreferrer">Capire</A>. In there, it merely says:</P><P>"If not running in production, CAP's default server allows all origins. For production, you can add CORS to your server as follows ..."</P><P>That tantalisingly short paragraph got me hooked. What does that mean? How does that work? I knew that finding out the answers to these questions would help me with providing what my colleague was asking for.</P><P>There are three parts to the paragraph:</P><UL><LI>"if not running in production"</LI><LI>"CAP's default server allows all origins"</LI><LI>"you can add CORS to your server as follows"</LI></UL><P>Let's take the "default server" part first.</P><H3 id="toc-hId-727780765">Default server support</H3><P>What is the "default server"? Basically, it's the process that runs when you invoke something like<SPAN>&nbsp;</SPAN>cds watch, or<SPAN>&nbsp;</SPAN>cds serve, and is also known as the<SPAN>&nbsp;</SPAN><A href="https://cap.cloud.sap/docs/node.js/cds-server#built-in-server-js" target="_blank" rel="noopener nofollow noreferrer">built-in server.js</A>.</P><P>So what sort of support are we looking for anyway? CORS support comes in the form of HTTP headers, and the ones that we should be expecting are returned<SPAN>&nbsp;</SPAN><A href="https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#the_http_response_headers" target="_blank" rel="noopener nofollow noreferrer">in the HTTP response</A>. The header names all start<SPAN>&nbsp;</SPAN>Access-Control-..., such as<SPAN>&nbsp;</SPAN>Access-Control-Allow-Origin.</P><P>But there are no CORS headers in the response to the basic service test above:</P><PRE>&lt; HTTP/1.1 200 OK
&lt; X-Powered-By: Express
&lt; Content-Type: text/plain; charset=utf-8
&lt; Content-Length: 13</PRE><P>That's because the HTTP request didn't include any<SPAN>&nbsp;</SPAN><A href="https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#the_http_request_headers" target="_blank" rel="noopener nofollow noreferrer">headers in the request that make use of the CORS features</A>. The basics can be triggered by including an<SPAN>&nbsp;</SPAN>Origin<SPAN>&nbsp;</SPAN>HTTP header in the request (this is done automatically by the browser in such cross origin resource retrieval circumstances).</P><H4 id="toc-hId-660349979">Regular CORS processing</H4><P>Let's do that and see what we get from the CAP server. The important thing for this test is to specify a value for the<SPAN>&nbsp;</SPAN>Origin<SPAN>&nbsp;</SPAN>HTTP header that is different to the CAP server. Let's use<SPAN>&nbsp;</SPAN>qmacro.org:</P><PRE>; curl \
    --verbose \
    --header 'Origin: https://qmacro.org' \
    --url localhost:4004/rest/corstest/go
&gt; GET /rest/corstest/go HTTP/1.1
&gt; Host: localhost:4004
&gt; User-Agent: curl/7.88.1
&gt; Accept: */*
&gt; Origin: https://qmacro.org
&gt;
&lt; HTTP/1.1 200 OK
&lt; X-Powered-By: Express
&lt; access-control-allow-origin: https://qmacro.org
&lt; Content-Type: text/plain; charset=utf-8
&lt; Content-Length: 13
&lt;
Hello, World!</PRE><P>Check out that extra header in the response, shown in the verbose output:</P><PRE>&lt; access-control-allow-origin: https://qmacro.org</PRE><P>From a CORS perspective, this response header tells the browser to allow that origin to access the resource being returned.</P><P>So where is that header coming from? Well, the answer is in the default server. Specifically that's<SPAN>&nbsp;</SPAN><a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a>/cds/server.js, which has been installed in the<SPAN>&nbsp;</SPAN>node_modules/<SPAN>&nbsp;</SPAN>directory during the<SPAN>&nbsp;</SPAN>npm install<SPAN>&nbsp;</SPAN>process earlier. The relevant part is here, in a<SPAN>&nbsp;</SPAN>cors<SPAN>&nbsp;</SPAN><A href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/get" target="_blank" rel="noopener nofollow noreferrer">getter</A>:</P><PRE>get cors() {
    return process.env.NODE_ENV === 'production'
        ? null
        : (req, res, next) =&gt; {
            const { origin } = req.headers
            if (origin) {
                res.set('access-control-allow-origin', origin)
                if (req.method === 'OPTIONS')
                    return res.set(
                        'access-control-allow-methods',
                        'GET,HEAD,PUT,PATCH,POST,DELETE'
                    ).end()
            }
            next()
        }
}</PRE><BLOCKQUOTE><P>I took the liberty of reformatting the code for better readability and so it would fit better width-wise in this blog post.</P></BLOCKQUOTE><P>The middle section is what came into play here. If there's an<SPAN>&nbsp;</SPAN>Origin<SPAN>&nbsp;</SPAN>header in the request, then an<SPAN>&nbsp;</SPAN>Access-Control-Allow-Origin<SPAN>&nbsp;</SPAN>header is sent in the response, with the same value that came in the request (<A href="https://qmacro.org" target="_blank" rel="noopener nofollow noreferrer">https://qmacro.org</A>) :</P><PRE>access-control-allow-origin: https://qmacro.org</PRE><P>An alternative value would be<SPAN>&nbsp;</SPAN>*<SPAN>&nbsp;</SPAN>but I think I like this reciprocal approach better.</P><BLOCKQUOTE><P>Header names during runtime in the CAP server are lower-cased for consistency and ease of processing.</P></BLOCKQUOTE><P>But what about that bit that starts with the<SPAN>&nbsp;</SPAN>req.method === 'OPTIONS'<SPAN>&nbsp;</SPAN>condition, with the<SPAN>&nbsp;</SPAN>Access-Control-Allow-Methods<SPAN>&nbsp;</SPAN>header (as opposed to the<SPAN>&nbsp;</SPAN>Access-Control-Allow-Origin<SPAN>&nbsp;</SPAN>header?</P><P>That's related to another part of CORS processing - "preflight" requests.</P><H4 id="toc-hId-463836474">Preflight CORS processing</H4><P>In some cross origin resource retrieval circumstances, a browser will also send a so-called "preflight" request. Basically, if the intended HTTP request to the remote server is not considered a<SPAN>&nbsp;</SPAN><A href="https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#simple_requests" target="_blank" rel="noopener nofollow noreferrer">simple request</A>, then a preflight request is made first.</P><P>For example, if the method of the intended request is something other than<SPAN>&nbsp;</SPAN>GET,<SPAN>&nbsp;</SPAN>HEAD<SPAN>&nbsp;</SPAN>or<SPAN>&nbsp;</SPAN>POST, or if there are headers that will be supplied that are not "standard", then a preflight request is made, to check that the remote server is indeed willing to handle such an intended request.</P><P>And preflight requests take the form of an HTTP request with the<SPAN>&nbsp;</SPAN>OPTIONS<SPAN>&nbsp;</SPAN>method. Taking one of those cases of a non-simple request, where the method of the request is going to be<SPAN>&nbsp;</SPAN>PUT, for example, then the browser will first send an HTTP request like this (displayed here using curl's verbose output convention):</P><PRE>&gt; OPTIONS /rest/corstest/go HTTP/1.1
&gt; Host: localhost:4004
&gt; User-Agent: curl/7.88.1
&gt; Accept: */*
&gt; Origin: https://qmacro.org
&gt; Access-Control-Request-Method: PUT</PRE><P>This is the preflight request. Note the<SPAN>&nbsp;</SPAN>Access-Control-Request-Method<SPAN>&nbsp;</SPAN>header with the method of the intended request.</P><P>Unless the remote server responds appropriately to such a preflight request, the browser will not allow the actual request to be made. What is an appropriate response here to this preflight request? Something like this:</P><PRE>&lt; HTTP/1.1 200 OK
&lt; X-Powered-By: Express
&lt; access-control-allow-origin: https://qmacro.org
&lt; access-control-allow-methods: GET,PUT</PRE><P>In other words, a response that tells the browser "yes,<SPAN>&nbsp;</SPAN>PUT<SPAN>&nbsp;</SPAN>requests from this origin are allowed".</P><P>And that is exactly what the default server's CORS handling mechanism is doing in the condition that checks whether the HTTP method is<SPAN>&nbsp;</SPAN>OPTIONS, i.e. if it's a preflight request. It adds the<SPAN>&nbsp;</SPAN>Access-Control-Allow-Methods<SPAN>&nbsp;</SPAN>header to response to preflight requests, and includes all the "usual suspect" HTTP methods (GET,HEAD,PUT,PATCH,POST,DELETE).</P><P>For testing, we can actually construct a preflight request, using curl's<SPAN>&nbsp;</SPAN>--request<SPAN>&nbsp;</SPAN>option to be able to specify the HTTP method to use, so that we can see a preflight request/response for real. Here goes:</P><PRE>; curl \
    --verbose \
    --request OPTIONS \
    --header 'Origin: https://qmacro.org' \
    --url localhost:4004/rest/corstest/go
&gt; OPTIONS /rest/corstest/go HTTP/1.1
&gt; Host: localhost:4004
&gt; User-Agent: curl/7.88.1
&gt; Accept: */*
&gt; Origin: https://qmacro.org
&gt;
&lt; HTTP/1.1 200 OK
&lt; X-Powered-By: Express
&lt; access-control-allow-origin: https://qmacro.org
&lt; access-control-allow-methods: GET,HEAD,PUT,PATCH,POST,DELETE
&lt; Content-Length: 0</PRE><BLOCKQUOTE><P>Note that I didn't actually need to specify an<SPAN>&nbsp;</SPAN>Access-Control-Request-Method<SPAN>&nbsp;</SPAN>header in this preflight request; the CORS support in the default CAP server will just supply an equivalent<SPAN>&nbsp;</SPAN>Allow<SPAN>&nbsp;</SPAN>response header covering the main methods.</P></BLOCKQUOTE><P>Great!</P><H3 id="toc-hId-138240250">The automatic CORS support context</H3><P>Next, let's take the "if not running in production" part.</P><P>Running anything in production requires more thinking about security, resilience, and so on. And while this default "yes, we're open!" CORS support we've seen so far is very useful at design time when you're exploring and iterating, it's probably not what you want in production.</P><P>The<SPAN>&nbsp;</SPAN><A href="https://cap.cloud.sap/docs/node.js/cds-env#profiles" target="_blank" rel="noopener nofollow noreferrer">configuration profile</A><SPAN>&nbsp;</SPAN>facilities that CAP Node.js offers includes the standard Node.js approach of using the environment variable<SPAN>&nbsp;</SPAN>NODE_ENV<SPAN>&nbsp;</SPAN>to determine in what "mode" the server is running.</P><P>Unless explicitly specified, via a configuration profile (--profile production, or the shorthand<SPAN>&nbsp;</SPAN>--production) or simply directly, via the value<SPAN>&nbsp;</SPAN>production<SPAN>&nbsp;</SPAN>set for<SPAN>&nbsp;</SPAN>NODE_ENV<A href="https://qmacro.org/blog/posts/2024/03/30/cap-cors-and-custom-headers/#footnotes" target="_blank" rel="noopener nofollow noreferrer">4</A>, the CAP server is deemed NOT to be in productive mode.</P><P>The startup of the simple CAP server here was brought about simply with<SPAN>&nbsp;</SPAN>cds watch, so it is not running in "production mode" either.</P><P>And this is what's referenced in the first part of the CORS getter in<SPAN>&nbsp;</SPAN><a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a>/cds/server.js<SPAN>&nbsp;</SPAN>that we saw earlier:</P><PRE>get cors() {
    return process.env.NODE_ENV === 'production'
        ? null
        : (req, res, next) =&gt; {
            ...
        }
}</PRE><P>Here, through the use of one of my favourite constructs, the<SPAN>&nbsp;</SPAN><A href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_operator" target="_blank" rel="noopener nofollow noreferrer">ternary operator</A>, the CORS getter will either return the anonymous function<SPAN>&nbsp;</SPAN>(req, res, next) =&gt; { ... }<SPAN>&nbsp;</SPAN>that adds the CORS "allow" response headers, or nothing at all (null), depending on the value of<SPAN>&nbsp;</SPAN>NODE_ENV.</P><P>So when the<SPAN>&nbsp;</SPAN>cors<SPAN>&nbsp;</SPAN>object property is referenced in the running server to potentially provide CORS processing for a request, there will either be a function ready to do that, or, in the case of a production context, nothing to do anything at all.</P><H2 id="toc-hId--187355974">Adding custom CORS headers</H2><P>The last of the three parts, "you can add CORS to your server as follows", is where we move away from the standard CORS facilities of the default server.</P><P>The standard facilities will return, as appropriate, one or both of these headers:</P><UL><LI>Access-Control-Allow-Origin</LI><LI>Access-Control-Allow-Methods</LI></UL><P>My colleague's request for CORS support would have normally been fulfilled by this. The method of the remote request being made from his web app origin was GET. This falls into the "simple request" category. But the remote requests will also include a custom header<SPAN>&nbsp;</SPAN>CommunityID.</P><P>If you worked through the tasks in last August's<SPAN>&nbsp;</SPAN><A href="https://community.sap.com/t5/technology-blogs-by-sap/sap-developer-challenge-apis/ba-p/13573168" target="_blank">Developer Challenge on APIs</A>, you may remember this header. The hash facility described in<SPAN>&nbsp;</SPAN><A href="https://community.sap.com/t5/application-development-discussions/sap-developer-challenge-apis-task-0-learn-to-share-your-task-results/m-p/276058#M2319" target="_blank">Task 0 - Learn to share your task results</A><SPAN>&nbsp;</SPAN>requires you to supply your SAP Community ID in the form of a header in the HTTP request, like this:</P><PRE>CommunityID: qmacro</PRE><P>This hash facility is the service that my colleague was wanting to call remotely from his web app. And the requirement for this custom header when calling the service<A href="https://qmacro.org/blog/posts/2024/03/30/cap-cors-and-custom-headers/#footnotes" target="_blank" rel="noopener nofollow noreferrer">5</A><SPAN>&nbsp;</SPAN>meant that such requests are not considered "simple".</P><P>This in turn meant that preflight requests would be made. Not only that, but the custom header<SPAN>&nbsp;</SPAN>CommunityID<SPAN>&nbsp;</SPAN>would be supplied in such preflight requests in an<SPAN>&nbsp;</SPAN>Access-Control-Request-Headers<SPAN>&nbsp;</SPAN>header too, in a similar way to how any "unusual" HTTP methods would be supplied in an<SPAN>&nbsp;</SPAN>Access-Control-Request-Method<SPAN>&nbsp;</SPAN>header. And the browser will expect, in the responses to such preflight requests, that the custom header is included in an<SPAN>&nbsp;</SPAN>Access-Control-Allow-Headers<SPAN>&nbsp;</SPAN>header.</P><P>But while the built-in CORS handling of the default CAP server provides preflight response support for<SPAN>&nbsp;</SPAN>Access-Control-Request-Method<SPAN>&nbsp;</SPAN>headers, it doesn't provide support for<SPAN>&nbsp;</SPAN>Access-Control-Request-Headers<SPAN>&nbsp;</SPAN>headers.</P><BLOCKQUOTE><P>We can debate whether this should be standard in the default CAP server, i.e. how much CORS support we should expect out of the box, but here I saw it as an opportunity to learn how I might extend the support myself.</P></BLOCKQUOTE><H3 id="toc-hId--254786760">Using a custom server.js</H3><P>The<SPAN>&nbsp;</SPAN><A href="https://cap.cloud.sap/docs/node.js/cds-server" target="_blank" rel="noopener nofollow noreferrer">Boostrapping Servers</A><SPAN>&nbsp;</SPAN>section of Capire includes information about being able to supply your own<SPAN>&nbsp;</SPAN><A href="https://cap.cloud.sap/docs/node.js/cds-server#custom-server-js" target="_blank" rel="noopener nofollow noreferrer">custom server</A><SPAN>&nbsp;</SPAN>logic, like this:</P><PRE>const cds = require('@sap/cds')
// react on bootstrapping events...
cds.on('bootstrap', ...)</PRE><P>This is particularly relevant when we revisit that<SPAN>&nbsp;</SPAN><A href="https://cap.cloud.sap/docs/node.js/best-practices#cross-origin-resource-sharing-cors" target="_blank" rel="noopener nofollow noreferrer">section on CORS</A><SPAN>&nbsp;</SPAN>mentioned earlier, where it says "... For production, you can add CORS to your server as follows". And the code example given there is in the context of such a<SPAN>&nbsp;</SPAN>bootstrap<SPAN>&nbsp;</SPAN>event for which custom server implementations are often used - i.e. to hook into part of the CAP server startup to add custom logic:</P><PRE>const ORIGINS = { 'https://example.com': 1 }
cds.on('bootstrap', async app =&gt; {
    app.use((req, res, next) =&gt; {
        ...
    })
})</PRE><P>The<SPAN>&nbsp;</SPAN><A href="https://cap.cloud.sap/docs/node.js/best-practices#manual-implementation-1" target="_blank" rel="noopener nofollow noreferrer">CORS-relevant code presented in this section</A><SPAN>&nbsp;</SPAN>is similar to the code in the built-in server (as the point of the example shown is to supply an equivalent level of CORS handling that comes out of the box in non production mode). But what was needed to satisfy my colleague's requirement was to handle the custom HTTP header information in the CORS preflight requests.</P><H3 id="toc-hId--451300265">Implementing a custom server.js</H3><P>Essentially I needed to "flip" the value of any incoming<SPAN>&nbsp;</SPAN>Access-Control-Request-Headers<SPAN>&nbsp;</SPAN>header in preflight HTTP requests, by sending that value back in an<SPAN>&nbsp;</SPAN>Access-Control-Allow-Headers<SPAN>&nbsp;</SPAN>header in each corresponding HTTP response.</P><P>How might that look? Well, here's one approach. Note that this code can be simply stored in a file called<SPAN>&nbsp;</SPAN>server.js<SPAN>&nbsp;</SPAN>which will then be picked up automatically on startup:</P><PRE>const cds = require('@sap/cds')
const log = cds.log('custom-cors', 'info')
const ALLOWED = /(\.build\.cloud\.sap|\bqmacro.org)$/i

log('In custom server.js')

cds.on('bootstrap', async app =&gt; {
    app.use((req, res, next) =&gt; {

        const {
            'access-control-request-headers': request_headers,
            origin
        } = req.headers

        // Handle headers request in preflight CORS requests
        if (
            req.method === 'OPTIONS'
            &amp;&amp; origin
            &amp;&amp; request_headers
            &amp;&amp; ALLOWED.test(origin)
        ) {
            log(`Adding allow-headers for ${request_headers}`)
            res.set(
                'access-control-allow-headers',
                request_headers
            )
        }
        next()
    })
})</PRE><P>Breaking this down:</P><UL><LI>We not only have the<SPAN>&nbsp;</SPAN>cds<SPAN>&nbsp;</SPAN>constant defined, just like in the example code earlier, but also a custom logging constant<SPAN>&nbsp;</SPAN>log. This is so we can emit log output and have it appear in the CAP server output with a prefix we can easily recognise.</LI><LI>There's also an<SPAN>&nbsp;</SPAN>ALLOWED<SPAN>&nbsp;</SPAN>constant which is a regular expression that we can use to check the origin, to determine whether or not we want to perform a "headers flip". This particular regular expression allows anything ending with<SPAN>&nbsp;</SPAN>.build.cloud.sap, and anything from my own<SPAN>&nbsp;</SPAN>qmacro.org<SPAN>&nbsp;</SPAN>domain<A href="https://qmacro.org/blog/posts/2024/03/30/cap-cors-and-custom-headers/#footnotes" target="_blank" rel="noopener nofollow noreferrer">6</A>.</LI><LI>Following the pattern from the example, we have some logic inside a custom function<SPAN>&nbsp;</SPAN>(req, res, next) =&gt; { ... }<SPAN>&nbsp;</SPAN>that will receive and get to have a say in processing incoming requests.</LI></UL><P>The logic inside that custom function goes like this:</P><UL><LI>Grab the values of any<SPAN>&nbsp;</SPAN>Origin<SPAN>&nbsp;</SPAN>header and any<SPAN>&nbsp;</SPAN>Access-Control-Request-Headers<SPAN>&nbsp;</SPAN>header<A href="https://qmacro.org/blog/posts/2024/03/30/cap-cors-and-custom-headers/#footnotes" target="_blank" rel="noopener nofollow noreferrer">7</A></LI><LI>If the request method is<SPAN>&nbsp;</SPAN>OPTIONS<SPAN>&nbsp;</SPAN>(signifying a possible preflight request)</LI><LI>plus if there's a value for the<SPAN>&nbsp;</SPAN>Origin<SPAN>&nbsp;</SPAN>header</LI><LI>plus if there's a value for the<SPAN>&nbsp;</SPAN>Access-Control-Request-Headers<SPAN>&nbsp;</SPAN>header</LI><LI>and the origin is "allowed" according to the regular expression</LI><LI>then flip the value by adding an<SPAN>&nbsp;</SPAN>Access-Control-Allow-Headers<SPAN>&nbsp;</SPAN>header, with that header value, to the HTTP response</LI><LI>then "let go" and allow any further processing of that HTTP request to take place</LI></UL><H3 id="toc-hId--647813770">The custom server.js logic in action</H3><P>Here's what happens when we try this out. We have the above code in<SPAN>&nbsp;</SPAN>server.js<SPAN>&nbsp;</SPAN>in the CAP project's root directory. Here's a simulation of a preflight request that will be made from the browser in the context of my colleague's web app (except that it's to the test CAP service here of course):</P><PRE>curl \
    --verbose \
    --request OPTIONS \
    --header 'Access-Control-Request-Method: GET' \
    --header 'Access-Control-Request-Headers: communityid' \
    --header 'origin: https://testing-42p9ebmu.eu10.apps.build.cloud.sap' \
    --url localhost:4004/rest/corstest/go</PRE><P>Here's the corresponding HTTP request and response details from that verbose output from curl:</P><PRE>&gt; OPTIONS /rest/corstest/go HTTP/1.1
&gt; Host: localhost:4004
&gt; User-Agent: curl/7.88.1
&gt; Accept: */*
&gt; Access-Control-Request-Method: GET
&gt; Access-Control-Request-Headers: communityid
&gt; origin: https://testing-42p9ebmu.preview.eu10.apps.build.cloud.sap
&gt;
&lt; HTTP/1.1 200 OK
&lt; X-Powered-By: Express
&lt; access-control-allow-headers: communityid
&lt; access-control-allow-origin: https://testing-42p9ebmu.eu10.apps.build.cloud.sap
&lt; access-control-allow-methods: GET,HEAD,PUT,PATCH,POST,DELETE
&lt; Content-Length: 0</PRE><P>Excellent - we now have the<SPAN>&nbsp;</SPAN>communityid<SPAN>&nbsp;</SPAN>header value "flipped" and returned in the CORS preflight response.</P><P>And here's (some reduced) log output from the CAP server, showing the loading of the custom server, and the custom log record output too:</P><PRE>[cds] - loading server from { file: 'server.js' }
[custom-cors] - in custom server.js
[cds] - loaded model from 1 file(s):

  services.cds

...

[cds] - serving corstest { impl: 'services.js', path: '/rest/corstest' }

[cds] - server listening on { url: 'http://localhost:4004' }
[cds] - launched at 3/31/2024, 8:20:37 AM, version: 7.8.0, in: 2.226s
[cds] - [ terminate with ^C ]

[custom-cors] - Adding allow-headers for communityid</PRE><H2 id="toc-hId--626155637">Wrapping up</H2><P>That's pretty much mission accomplished, and my colleague can now successfully make use of my service from the web app, served from a different origin, in the browser.</P><HR /><P>&nbsp;</P><H2 id="toc-hId--822669142">Footnotes</H2><P>1: This phrase borrows from "the simplest thing that could possibly work", from Ward Cunningham. See my recording of "The Simplest Thing that Could Possibly Work, A conversation with Ward Cunningham" in the<SPAN>&nbsp;</SPAN><A href="https://podcasters.spotify.com/pod/show/tech-aloud/episodes/The-Simplest-Thing-that-Could-Possibly-Work--A-conversation-with-Ward-Cunningham--Part-V---Bill-Venners-e5dpts" target="_blank" rel="noopener nofollow noreferrer">Tech Aloud podcast episode</A>.</P><P>2: You may have noticed the removal of the standard directories<SPAN>&nbsp;</SPAN>app/,<SPAN>&nbsp;</SPAN>srv/<SPAN>&nbsp;</SPAN>and<SPAN>&nbsp;</SPAN>db/<SPAN>&nbsp;</SPAN>when we set this project up; this is just to keep things as simple as possible. The file name<SPAN>&nbsp;</SPAN>services.cds<SPAN>&nbsp;</SPAN>(and its corresponding default implementation file<SPAN>&nbsp;</SPAN>services.js) is part of the CAP server "roots" that are valid default locations and files that it looks at. You can see this for yourself by running<SPAN>&nbsp;</SPAN>cds env roots<SPAN>&nbsp;</SPAN>which will emit<SPAN>&nbsp;</SPAN>[ 'db/', 'srv/', 'app/', 'schema', 'services' ].</P><P>3: When asked to provide verbose output, curl prefixes the outgoing HTTP request headers with<SPAN>&nbsp;</SPAN>&gt;<SPAN>&nbsp;</SPAN>and the incoming HTTP response headers with<SPAN>&nbsp;</SPAN>&lt;.</P><P>4: Ultimately, however you specify the mode, the appropriate value will end up in<SPAN>&nbsp;</SPAN>NODE_ENV<SPAN>&nbsp;</SPAN>for the server to be able to check.</P><P>5: The requirement to supply a custom header in calls to the hash facility was deliberate, to encourage the participants to explore a tiny bit beyond standard HTTP requests. After all, the challenge was all about APIs and making HTTP calls.</P><P>6: The<SPAN>&nbsp;</SPAN>\b<SPAN>&nbsp;</SPAN>is a<SPAN>&nbsp;</SPAN><A href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Word_boundary_assertion" target="_blank" rel="noopener nofollow noreferrer">word boundary assertion</A>, and used here means that it will allow values like<SPAN>&nbsp;</SPAN><A href="https://qmacro.org" target="_blank" rel="noopener nofollow noreferrer">https://qmacro.org</A>,<SPAN>&nbsp;</SPAN><A href="http://test.qmacro.org" target="_blank" rel="noopener nofollow noreferrer">http://test.qmacro.org</A><SPAN>&nbsp;</SPAN>and so on, but not something like<SPAN>&nbsp;</SPAN>fakeqmacro.org.</P><P>7: This is done using<SPAN>&nbsp;</SPAN><A href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment" target="_blank" rel="noopener nofollow noreferrer">destructuring</A>, and the first of the two assignments has the slightly extended syntax, to provide the alternative identifier<SPAN>&nbsp;</SPAN>request_headers, as<SPAN>&nbsp;</SPAN>access-control-request-headers<SPAN>&nbsp;</SPAN>would not be a valid JavaScript identifier.</P><HR /><P><A href="https://qmacro.org/blog/posts/2024/03/30/cap-cors-and-custom-headers/" target="_blank" rel="nofollow noopener noreferrer">Originally published on qmacro.org</A></P>
---
Test drive Joule's generative AI features in SAP Build Code now!
application-developmentblog-board
2024-03-27
https://community.sap.com/t5/application-development-blog-posts/test-drive-joule-s-generative-ai-features-in-sap-build-code-now/ba-p/13649882
2024-03-27-test-drive-joule-s-generative-ai-features-in-sap-build-code-now
<P>TL;DR - SAP Build Code is GA, and for a limited time (1 month, starting now) you can test drive the generative AI features of Joule in SAP Build Code.</P><H2 id="toc-hId-989967513">Introduction</H2><P>This week, SAP Build Code is GA: Generally Available. That's pretty exciting, given that one of the key features is the set of generative AI capabilities available through Joule. But guess what - you can try these capabilities out in SAP Build Code starting now. There's a test drive tutorial that's ready and waiting for you, and a period of four weeks, until Fri 26 Apr, where you can kick the tyres and put Joule through its paces. We'll round out this period with a special live stream episode too (see later in this post for details).</P><H2 id="toc-hId-793454008">Building CAP services with the help of generative AI</H2><P>If you saw the<SPAN>&nbsp;</SPAN><A href="https://www.youtube.com/watch?v=kLbF0ooStZs" target="_blank" rel="nofollow noopener noreferrer">Developer Keynote, part of SAP TechEd 2023</A>, you will have seen<SPAN>&nbsp;</SPAN><A href="https://www.youtube.com/watch?v=kLbF0ooStZs&amp;t=707s" target="_blank" rel="nofollow noopener noreferrer">a glimpse of Joule in action here</A>, where we built an SAP Cloud Application Programming Model (CAP) service with Joule starting from simple text prompts.</P><P><span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="keynote-screenshot.png" style="width: 999px;"><img src="https://community.sap.com/t5/image/serverpage/image-id/86653i03218CE626B4E17E/image-size/large?v=v2&amp;px=999" role="button" title="keynote-screenshot.png" alt="keynote-screenshot.png" /></span></P><P>Here's a quick overview of the four main areas where generative AI comes into play, in the form of Joule, when putting together a CAP service.</P><H3 id="toc-hId-726023222">Creating the data model and service</H3><P>Normally the first thing you'll want to do is define the entities and the relationships between them. You'll also want to describe how these entities are then exposed. In CAP terms, these are the entities and relationships at the persistence layer (which by convention we like to define in the "db/" directory), and the exposure thereof at the service layer (which by convention we like to define in the "srv/" directory).</P><P>With the "Data Model and Service Creation" section of the guide, which is part of Joule, you can do this by supplying a text prompt:</P><P><span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="data-model-and-service-creation.png" style="width: 999px;"><img src="https://community.sap.com/t5/image/serverpage/image-id/86654iFCA67C794E9FB2AD/image-size/large?v=v2&amp;px=999" role="button" title="data-model-and-service-creation.png" alt="data-model-and-service-creation.png" /></span></P><H3 id="toc-hId-529509717">Generating and managing sample data</H3><P>CAP already makes it super easy to supply test data for your entities, for use at design time. Joule goes one step further in not only generating that test data for you, but giving you a facility to enhance it, by supplying constraints to which the test data must comply, again in the form of a text prompt.</P><H3 id="toc-hId-332996212">Applying custom logic for the service</H3><P>While it still blows my mind that CAP provides complete support, out of the box, for all operations of an OData service (known as "CRUD+Q", in other words "Create, Read, Update, Delete and Query"), wait until you see what the generative AI facilities can offer you so that you can make that service your own.</P><P>The Joule developer facilities in SAP Build Code allow you to have Node.js (JavaScript) code generated for all the standard phases of the four main events. In other words, for the "Before", "On" and "After" phases of the "Create", "Read", "Update" and "Delete" events ("Query" is handled with "Read").</P><P>Here's what that looks like:</P><P><span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="service-logic-configuration.png" style="width: 999px;"><img src="https://community.sap.com/t5/image/serverpage/image-id/86655iC8B1924A20D4712B/image-size/large?v=v2&amp;px=999" role="button" title="service-logic-configuration.png" alt="service-logic-configuration.png" /></span></P><P>These facilities are available in the "Application Logic" section of the guide.</P><P>As<SPAN>&nbsp;</SPAN><A href="https://www.youtube.com/live/kLbF0ooStZs?feature=shared&amp;t=1260" target="_blank" rel="nofollow noopener noreferrer">I remarked in my section of the Developer Keynote where I showed off this facility</A>, the generated code is more than fine, it's often exemplary - of a standard to which I can aspire. Pretty amazing.</P><H3 id="toc-hId-136482707">Help with unit testing</H3><P>I'll be the first to admit that I am not great at creating unit tests. It's a chore, and I'm not very good at it. So I'm happy that the fourth section of the guide, "Unit Testing", offers me help in this area. Here again, using Joule, I can generate and subsequently manage unit tests for my service. Now that is something that I will definitely be digging into more, because - remember kids - the three virtues of any great programmer are<SPAN>&nbsp;</SPAN><A href="https://wiki.c2.com/?LazinessImpatienceHubris" target="_blank" rel="nofollow noopener noreferrer">Laziness, Impatience and Hubris</A>.</P><H2 id="toc-hId--189113517">Test drive tutorial available now</H2><P><SPAN>Talking of digging in, you can too. For a limited period, every developer can get access to these facilities. To mark the occasion of the GA event, the team has put together a "test drive", available in our&nbsp;</SPAN><A href="https://developers.sap.com/tutorial-navigator.html" target="_blank" rel="noopener noreferrer">Tutorial Navigator</A><SPAN>. It's a mission called&nbsp;</SPAN><A href="https://developers.sap.com/mission.sap-build-code-test-drive.html" target="_blank" rel="noopener noreferrer">SAP Build Code Test Drive</A><SPAN>&nbsp;and it consists of two tutorials, where you can first get everything you need set up, before diving in to try things out:</SPAN></P><P><SPAN><span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="test-drive-mission.png" style="width: 999px;"><img src="https://community.sap.com/t5/image/serverpage/image-id/86871i590E96F0526F56AB/image-size/large?v=v2&amp;px=999" role="button" title="test-drive-mission.png" alt="test-drive-mission.png" /></span></SPAN></P><P>In addition, you get enough "prompt credit" to be able to run through the test drive. The best thing? All you need is a trial account on the SAP Business Technology Platform.&nbsp;<SPAN>And everyone who completes the mission gets a badge too.</SPAN></P><H2 id="toc-hId--385627022">Support during the test drive period</H2><P>This test drive is available until Fri 26 Apr. So get started right now!</P><P>During this test drive period, there are some awesome folks from the SAP Build Code and Joule team here at SAP ready to help with your questions. Where? In the<SPAN>&nbsp;</SPAN><A href="https://pages.community.sap.com/topics/build-code" target="_blank" rel="noopener noreferrer">SAP Build Code topic area</A><SPAN>&nbsp;</SPAN>of the SAP Community platform. In particular, you can use the menu item shown here to ask a question:</P><P><span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="create-a-question.png" style="width: 971px;"><img src="https://community.sap.com/t5/image/serverpage/image-id/86656i8E5F8DEEAEC8EC14/image-size/large?v=v2&amp;px=999" role="button" title="create-a-question.png" alt="create-a-question.png" /></span></P><P>If you want to jump straight to the question form, with the "SAP Build Code" managed tag already assigned (which is basically where this menu item will take you), you can use this URL:</P><P><A href="https://community.sap.com/t5/forums/postpage/choose-node/true/product-id/73555000100800004372/board-id/technology-questions" target="_blank">https://community.sap.com/t5/forums/postpage/choose-node/true/product-id/73555000100800004372/board-id/technology-questions</A></P><P><span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="new-question.png" style="width: 999px;"><img src="https://community.sap.com/t5/image/serverpage/image-id/86657iF40E19DB856684EB/image-size/large?v=v2&amp;px=999" role="button" title="new-question.png" alt="new-question.png" /></span></P><H2 id="toc-hId--582140527">Wait, there's more!</H2><P>At the end of the test drive period, we in the Developer Advocates team will be looking forward to kicking the tyres with you too, and we plan to do that live, on the<SPAN>&nbsp;</SPAN><A href="https://www.youtube.com/playlist?list=PL6RpkC85SLQABOpzhd7WI-hMpy99PxUo0" target="_blank" rel="nofollow noopener noreferrer">Hands-on SAP Dev</A><SPAN>&nbsp;</SPAN>show on Fri 26 Apr. That will definitely be a fun and enlightening episode for all of us, I'm sure. There will be two live streams, one for each of the main regions:</P><UL><LI>EMEA / APJ at 0800 BST (UTC+1): <A href="https://www.youtube.com/watch?v=EpuVqWDT2hw" target="_blank" rel="noopener nofollow noreferrer">https://www.youtube.com/watch?v=EpuVqWDT2hw</A></LI><LI>AMERICAS at 1200 EDT (UTC-4):&nbsp;<A href="https://www.youtube.com/watch?v=xqGldi8yBbI" target="_blank" rel="noopener nofollow noreferrer">https://www.youtube.com/watch?v=xqGldi8yBbI</A>&nbsp;</LI></UL><P><span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="qmacro_0-1712855317375.png" style="width: 681px;"><img src="https://community.sap.com/t5/image/serverpage/image-id/95261iFD46B631B6F167C2/image-dimensions/681x381?v=v2" width="681" height="381" role="button" title="qmacro_0-1712855317375.png" alt="qmacro_0-1712855317375.png" /></span></P><P>Just in case you missed it, there was a great blog post from Bhagat Nainani just published too: <A href="https://community.sap.com/t5/technology-blogs-by-sap/announcing-general-availability-of-sap-build-code-speed-up-development-with/ba-p/13646073" target="_self">SAP Build Code is now generally available to speed up your development with generative AI</A>.</P><P>And for a high level overview, check out this article: <A href="https://community.sap.com/t5/technology-blogs-by-sap/sap-build-code-is-now-on-sap-btp-trial/ba-p/13642626" target="_self">SAP Build Code is now on SAP BTP Trial: Elevate Your Development Experience</A>.</P><P>So what are you waiting for?</P><P><span class="lia-unicode-emoji" title=":backhand_index_pointing_right:">ð</span><SPAN>&nbsp;Head over to the Tutorial Navigator right now and dive in, the&nbsp;</SPAN><A href="https://developers.sap.com/mission.sap-build-code-test-drive.html" target="_blank" rel="noopener noreferrer">test drive</A><SPAN>&nbsp;is waiting for you. Don't forget, this test drive period will end in a month from now!</SPAN></P>
---
ISO content for common CAP types
application-developmentblog-board
2024-03-14
https://community.sap.com/t5/application-development-blog-posts/iso-content-for-common-cap-types/ba-p/13637780
2024-03-14-iso-content-for-common-cap-types
<P>There's an NPM package that provides default content based on the ISO specifications for CAP common types for countries, languages, currencies and timezones. In this post I explore what that package is and how it works. The post is quite long, mostly because I fell down a rabbit hole and was stuck there for quite a while. Hopefully though it's something you might enjoy. Happy exploring!</P><P><SPAN>Update 15 Mar 2024: In this morning's Hands-on SAP Dev live stream we added this feature to our test project, so you can&nbsp;</SPAN><A href="https://www.youtube.com/live/8BMASRcs0Hg?si=OvCZdO8McwwWBL5R&amp;t=2567" target="_blank" rel="nofollow noopener noreferrer">see this whole thing in action</A><SPAN>.</SPAN></P><H1 id="toc-hId-859900728">Background</H1><P>Earlier this month in<SPAN>&nbsp;</SPAN><A href="https://www.youtube.com/watch?v=kgycosxv9aQ" target="_blank" rel="noopener nofollow noreferrer">part 7</A><SPAN>&nbsp;</SPAN>of our<SPAN>&nbsp;</SPAN><A href="https://www.youtube.com/playlist?list=PL6RpkC85SLQBHPdfHQ0Ry2TMdsT-muECx" target="_blank" rel="noopener nofollow noreferrer">back to basics Hands-on SAP Dev live stream series on CAP Node.js</A>, we added a new element<SPAN>&nbsp;</SPAN>countryOfBirth<SPAN>&nbsp;</SPAN>to the<SPAN>&nbsp;</SPAN>Authors<SPAN>&nbsp;</SPAN>entity definition, so that our simple<SPAN>&nbsp;</SPAN>services.cds<SPAN>&nbsp;</SPAN>looked like this:</P><PRE>using { cuid, Country } from '@sap/cds/common';

service bookshop {
  entity Books : cuid {
    title: String;
  }
  entity Authors : cuid {
    name: String;
    countryOfBirth: Country;
  }
}</PRE><P>This resulted in the generation of lots of DDL for a persistence layer, based on the definition of that<SPAN>&nbsp;</SPAN>Country<SPAN>&nbsp;</SPAN>type, which, in<SPAN>&nbsp;@</SPAN>sap/cds/common, looks like this (and I've also included here the definitions that are used to describe that type):</P><PRE>type Country : Association to sap.common.Countries;

context sap.common {

  entity Countries : CodeList {
    key code : String(3) @(title : '{i18n&gt;CountryCode}');
  }

  aspect CodeList @(
    cds.autoexpose,
    cds.persistence.skip : 'if-unused'
  ) {
    name  : localized String(255)  @title : '{i18n&gt;Name}';
    descr : localized String(1000) @title : '{i18n&gt;Description}';
  }

}</PRE><P>As a result of referring to the<SPAN>&nbsp;</SPAN>Country<SPAN>&nbsp;</SPAN>type in<SPAN>&nbsp;@</SPAN>sap/cds/common, we saw this in the output of<SPAN>&nbsp;</SPAN>cds watch:</P><PRE>[cds] - loaded model from 2 file(s):

  services.cds
  [...]/node_modules/@sap/cds/common.cds</PRE><BLOCKQUOTE><P data-unlink="true">See the<SPAN>&nbsp;"</SPAN>Appendix - loading @sap/cds/common"<SPAN>&nbsp;</SPAN>section for an explanation of why<SPAN>&nbsp;</SPAN>[...]<SPAN>&nbsp;</SPAN>has been used as a path prefix indicator here.</P></BLOCKQUOTE><H2 id="toc-hId-792469942">New entity sets</H2><P>Additionally, we saw that as well as entity sets for the<SPAN>&nbsp;</SPAN>Books<SPAN>&nbsp;</SPAN>and<SPAN>&nbsp;</SPAN>Authors<SPAN>&nbsp;</SPAN>entities, the OData service also contained two more entity sets, as we can see from the service document (which can be obtained with<SPAN>&nbsp;</SPAN>curl localhost:4004/odata/v4/bookshop | jq .):</P><PRE>{
  "@odata.context": "$metadata",
  "@odata.metadataEtag": "W/\"l+enQJd57takPctEB4NIbv/1U6KLaLMKeKijx7AfnOo=\"",
  "value": [
    {
      "name": "Books",
      "url": "Books"
    },
    {
      "name": "Authors",
      "url": "Authors"
    },
    {
      "name": "Countries",
      "url": "Countries"
    },
    {
      "name": "Countries_texts",
      "url": "Countries_texts"
    }
  ]
}</PRE><P>as well as in the CAP server landing page:</P><P><span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="qmacro_0-1710401480388.png" style="width: 400px;"><img src="https://community.sap.com/t5/image/serverpage/image-id/80429i1A377E58F331C927/image-size/medium?v=v2&amp;px=400" role="button" title="qmacro_0-1710401480388.png" alt="qmacro_0-1710401480388.png" /></span></P><BLOCKQUOTE><P>For those of you wondering why<SPAN>&nbsp;</SPAN>Countries_texts<SPAN>&nbsp;</SPAN>is not listed in the CAP server landing page, there's an interesting reason, but that's a story for another time.</P></BLOCKQUOTE><H2 id="toc-hId-595956437">What about the data?</H2><P>The response to an OData query operation on the<SPAN>&nbsp;</SPAN>Countries<SPAN>&nbsp;</SPAN>entity set looked, however, like this:</P><PRE>{
  "@odata.context": "$metadata#Countries",
  "value": []
}</PRE><P>No data.</P><P>On the one hand, that's understandable, we haven't supplied any. But on the other hand (and like the discussion which took place at the time mentioned) it would be great to have that data. Not only for the<SPAN>&nbsp;</SPAN>Country<SPAN>&nbsp;</SPAN>type, but also for the other CAP<SPAN>&nbsp;</SPAN><A href="https://cap.cloud.sap/docs/cds/common#code-types" target="_blank" rel="noopener nofollow noreferrer">common reuse types</A><SPAN>&nbsp;</SPAN>Currency, Language and Timezone.</P><P>After all, that data is standard, predictable and pretty much static. It's also something that we all take for granted in R/3 systems, for example, in these tables (and their related<SPAN>&nbsp;</SPAN>-T<SPAN>&nbsp;</SPAN>suffixed language-dependent siblings):</P><UL><LI>T005<SPAN>&nbsp;</SPAN>(countries)</LI><LI>TCUR<SPAN>&nbsp;</SPAN>(currencies)</LI><LI>T002<SPAN>&nbsp;</SPAN>(languages)</LI><LI>TTZZ<SPAN>&nbsp;</SPAN>(timezones)</LI></UL><P>In the out-of-the-box provisions from CAP, we don't have this data. But we do have the data in the form of a standard installable NPM package!</P><P>I'd totally forgotten about this, which is why I failed to mention it while we were discussing the question. So as a penance (not sure whether to me as the writer of this post, or to you as the reader, sorry) I'm writing up the details here now.</P><H1 id="toc-hId-270360213">NPM package <a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a>/cds-common-content</H1><P data-unlink="true">The NPM package<SPAN> <a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a>/cds</SPAN>-common-content&nbsp;<EM>"holds default content based on the ISO specification"</EM><SPAN>&nbsp;</SPAN>for these exact types. Bingo!</P><P>The simplest way to make use of this package is to add it to your project:</P><PRE>npm add @sap/cds-common-content</PRE><P>and then add a<SPAN>&nbsp;</SPAN>using<SPAN>&nbsp;</SPAN>directive in your CDS, such as:</P><PRE>using from '@sap/cds-common-content';</PRE><BLOCKQUOTE><P>I prefer the semantics of invoking<SPAN>&nbsp;</SPAN>npm add<SPAN>&nbsp;</SPAN>over<SPAN>&nbsp;</SPAN>npm install, but as<SPAN>&nbsp;</SPAN>add<SPAN>&nbsp;</SPAN>is just an alias for<SPAN>&nbsp;</SPAN>install, it's all the same under the<SPAN>&nbsp;</SPAN>npm<SPAN>&nbsp;</SPAN>hood anyway.</P></BLOCKQUOTE><P>This all seems quite straightforward. So let's now move away from the customised bookshop project from the live stream series and start with a super simple example project, where we'll see how easy it is to get the data to appear. And it will seem like magic! Then we'll dig in to how it actually works, which will help us understand that bit more about how CAP works. And that's always a bonus, right?</P><H2 id="toc-hId-202929427">Simple example</H2><P>So, moving away from the authors and books in the previous<SPAN>&nbsp;</SPAN>services.cds<SPAN>&nbsp;</SPAN>file, we'll start with a brand new CAP project for this simple example, so you can follow along too if you want.</P><H3 id="toc-hId-135498641">Initialising a new CAP project with tiny-sample</H3><P>While initialising the new project, we'll use the<SPAN>&nbsp;</SPAN>--add<SPAN>&nbsp;</SPAN>option to request the addition of the "tiny-sample" facet which gives us a super simple service exposing a single<SPAN>&nbsp;</SPAN>Books<SPAN>&nbsp;</SPAN>entity, complete with a couple of data records supplied in a CSV file.</P><P>Here's an example of doing that, with the use of the<SPAN>&nbsp;</SPAN>tree<SPAN>&nbsp;</SPAN>command at the end to show the contents of the new project directory (excluding the hidden files):</P><PRE># /home/user/work/scratch
; cds init --add tiny-sample iso-data-test
Creating new CAP project in ./iso-data-test

Adding feature 'nodejs'...
Adding feature 'tiny-sample'...

Successfully created project. Continue with 'cd iso-data-test'.
Find samples on https://github.com/SAP-samples/cloud-cap-samples
Learn about next steps at https://cap.cloud.sap
# /home/user/work/scratch
; cd iso-data-test/
# /home/user/work/scratch/iso-data-test
; tree -F
.
|-- README.md
|-- app/
|-- db/
|   |-- data/
|   |   `-- my.bookshop-Books.csv
|   `-- data-model.cds
|-- package.json
`-- srv/
    `-- cat-service.cds

5 directories, 5 files
# /home/user/work/scratch/iso-data-test
;</PRE><BLOCKQUOTE><P>The<SPAN>&nbsp;</SPAN>-F<SPAN>&nbsp;</SPAN>option tells<SPAN>&nbsp;</SPAN>tree<SPAN>&nbsp;</SPAN>to use standard symbols to signify special files, as I want to highlight directories with a trailing<SPAN>&nbsp;</SPAN>/. This<SPAN>&nbsp;</SPAN>-F<SPAN>&nbsp;</SPAN>works in a similar way to the same-named option with the<SPAN>&nbsp;</SPAN>ls<SPAN>&nbsp;</SPAN>command.</P></BLOCKQUOTE><P>The persistence layer definitions in<SPAN>&nbsp;</SPAN>db/data-model.cds<SPAN>&nbsp;</SPAN>look like this:</P><PRE>namespace my.bookshop;

entity Books {
  key ID : Integer;
  title  : String;
  stock  : Integer;
}</PRE><P>and the service layer definitions in<SPAN>&nbsp;</SPAN>srv/cat-service.cds<SPAN>&nbsp;</SPAN>look like this:</P><PRE>using my.bookshop as my from '../db/data-model';

service CatalogService {
    @readonly entity Books as projection on my.Books;
}</PRE><P>Nothing unexpected there, all nice and straightforward.</P><H3 id="toc-hId--61014864">Basic output from cds watch</H3><P>Starting the CAP server up at this point, we see (amongst other log lines):</P><PRE>[cds] - loaded model from 2 file(s):

  srv/cat-service.cds
  db/data-model.cds

[cds] - connect to db &gt; sqlite { database: ':memory:' }
  &gt; init from db/data/my.bookshop-Books.csv
/&gt; successfully deployed to in-memory database.</PRE><P data-unlink="true">And the service document at<SPAN>&nbsp;</SPAN>http://localhost:4004/odata/v4/catalog<SPAN>&nbsp;</SPAN>looks like this:</P><PRE>{
  "@odata.context": "$metadata",
  "@odata.metadataEtag": "W/\"8PKoOs3VhYwQoFzBoQObhMsFJJa5jpD1GLFcWZG9r60=\"",
  "value": [
    {
      "name": "Books",
      "url": "Books"
    }
  ]
}</PRE><P>So far so good.</P><P>We've covered this in the<SPAN>&nbsp;</SPAN><A href="https://www.youtube.com/playlist?list=PL6RpkC85SLQBHPdfHQ0Ry2TMdsT-muECx" target="_blank" rel="noopener nofollow noreferrer">back to basics series</A><SPAN>&nbsp;</SPAN>but it's worth re-iterating here too ... the reason why we see these two files specifically:</P><PRE>srv/cat-service.cds
db/data-model.cds</PRE><P>listed in the sources for the CDS model being served (see the "loaded model from 2 file(s)" message in the log output above), is that they're in some specially named directories (db/<SPAN>&nbsp;</SPAN>and<SPAN>&nbsp;</SPAN>srv/) that form part of CAP's convention-over-configuration approach to doing the right thing by developers. On startup, the server will automatically look in certain "well-known" locations for CDS definitions. What are these "well-known" locations?</P><P>You can ask to see them like this:</P><PRE>cds env folders</PRE><P>which emits:</P><PRE>{ db: 'db/', srv: 'srv/', app: 'app/' }</PRE><P>In fact, there's another environment value which it's possible to query, and that is<SPAN>&nbsp;</SPAN>roots:</P><PRE>cds env roots</PRE><P>and the value returned:</P><PRE>[ 'db/', 'srv/', 'app/', 'schema', 'services' ]</PRE><P>contains these three directory names, plus two special filenames<SPAN>&nbsp;</SPAN>services<SPAN>&nbsp;</SPAN>and<SPAN>&nbsp;</SPAN>schema, which we can interpret as<SPAN>&nbsp;</SPAN>services.cds<SPAN>&nbsp;</SPAN>and<SPAN>&nbsp;</SPAN>schema.cds<SPAN>&nbsp;</SPAN>respectively.</P><P><span class="lia-unicode-emoji" title=":light_bulb:">ð¡</span>This is incidentally why, in the simple<SPAN>&nbsp;</SPAN><A href="https://github.com/qmacro/capb2b" target="_blank" rel="noopener nofollow noreferrer">capb2b</A><SPAN>&nbsp;</SPAN>project we're using for the early episodes in the back to basics series, simply<SPAN>&nbsp;</SPAN><A href="https://github.com/qmacro/capb2b/blob/aac1f7304e3d0884cfe837c3b0bbd4e6bf98a848/services.cds" target="_blank" rel="noopener nofollow noreferrer">putting all our content into a file called services.cds</A><SPAN>&nbsp;</SPAN>works!</P><H3 id="toc-hId--257528369">Adding an element with the Country type</H3><P>Now to start moving towards the use of the<SPAN>&nbsp;</SPAN>Country<SPAN>&nbsp;</SPAN>type.</P><P>First, let's add an element to the<SPAN>&nbsp;</SPAN>Books<SPAN>&nbsp;</SPAN>entity definition to show where a book was published. We'll do this (and other enhancements in this experiment) in a separate CDS file, to remind ourselves of how well thought out and capable the CDS language and compilation process is.</P><P>In a new file, let's call it<SPAN>&nbsp;</SPAN>db/publicationinfo.cds, let's add this:</P><PRE>using from './data-model';
using { Country } from '@sap/cds/common';

extend my.bookshop.Books with {
    publishedIn: Country;
}</PRE><UL><LI>The first<SPAN>&nbsp;</SPAN>using<SPAN>&nbsp;</SPAN>directive just imports the definitions from the existing<SPAN>&nbsp;</SPAN>db/data-model.cds<SPAN>&nbsp;</SPAN>file, i.e. the<SPAN>&nbsp;</SPAN>Books<SPAN>&nbsp;</SPAN>entity in the<SPAN>&nbsp;</SPAN>my.bookshop<SPAN>&nbsp;</SPAN>namespace. With this first<SPAN>&nbsp;</SPAN>using<SPAN>&nbsp;</SPAN>directive we can then refer to the<SPAN>&nbsp;</SPAN>my.bookshop.Books<SPAN>&nbsp;</SPAN>entity, as we do with the<SPAN>&nbsp;</SPAN>extend<SPAN>&nbsp;</SPAN>directive shortly.</LI><LI>The second<SPAN>&nbsp;</SPAN>using<SPAN>&nbsp;</SPAN>directive is to bring in the definition of the<SPAN>&nbsp;</SPAN><A href="https://cap.cloud.sap/docs/cds/common#type-country" target="_blank" rel="noopener nofollow noreferrer">Country reuse type</A><SPAN>&nbsp;</SPAN>from <a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a>/cds/common. This is so we can use this<SPAN>&nbsp;</SPAN>Country<SPAN>&nbsp;</SPAN>type to describe the new element we're adding to the<SPAN>&nbsp;</SPAN>my.bookshop.Books<SPAN>&nbsp;</SPAN>entity.</LI><LI>Then in the<SPAN>&nbsp;</SPAN>extend<SPAN>&nbsp;</SPAN>directive we can simply add the new<SPAN>&nbsp;</SPAN>publishedIn<SPAN>&nbsp;</SPAN>element and define it as having the<SPAN>&nbsp;</SPAN>Country<SPAN>&nbsp;</SPAN>type. We already know about how this type is defined from the background section earlier.</LI></UL><P>As the CAP server is still running in "watch" mode, things restart and now we see something like this:</P><PRE>[cds] - loaded model from 4 file(s):

  srv/cat-service.cds
  db/publicationinfo.cds
  [...]/node_modules/@sap/cds/common.cds
  db/data-model.cds

[cds] - connect using bindings from: { registry: '~/.cds-services.json' }
[cds] - connect to db &gt; sqlite { database: ':memory:' }
  &gt; init from db/data/my.bookshop-Books.csv
/&gt; successfully deployed to in-memory database.</PRE><P>The log output here shows us that there are two new files in the list from which the model has been loaded:</P><PRE>db/publicationinfo.cds
[...]/node_modules/@sap/cds/common.cds</PRE><P>What's happened of course is that a new file,<SPAN>&nbsp;</SPAN>publicationinfo.cds, is discovered in the well-known<SPAN>&nbsp;</SPAN>db/<SPAN>&nbsp;</SPAN>directory. So that is loaded and added to the overall model compilation. And within that file, the<SPAN>&nbsp;</SPAN>using { Country } from '@sap/cds/common';<SPAN>&nbsp;</SPAN>directive causes the corresponding file from that (built-in) NPM package<SPAN>&nbsp;<a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a>/cds</SPAN>/common<SPAN>&nbsp;</SPAN>to be loaded too. Nice!</P><P>And now the CAP server has restarted, serving the new enhanced overall model, we see with a request like this:</P><PRE>curl -s localhost:4004/odata/v4/catalog | jq .</PRE><P>that the OData service document now sports the<SPAN>&nbsp;</SPAN>Countries<SPAN>&nbsp;</SPAN>and<SPAN>&nbsp;</SPAN>Countries_texts<SPAN>&nbsp;</SPAN>entity sets too (because, briefly,<SPAN>&nbsp;</SPAN>sap.common.Countries<SPAN>&nbsp;</SPAN>is defined as an entity in<SPAN>&nbsp;</SPAN>[...]/node_modules/@sap/cds/common.cds<SPAN>&nbsp;</SPAN>and therefore is exposed as an entity set in the OData service):</P><PRE>{
  "@odata.context": "$metadata",
  "@odata.metadataEtag": "W/\"2n4HnZUJly4q6xyptJ6+4ZptvIICSUNdpk6NYX73bGY=\"",
  "value": [
    {
      "name": "Books",
      "url": "Books"
    },
    {
      "name": "Countries",
      "url": "Countries"
    },
    {
      "name": "Countries_texts",
      "url": "Countries_texts"
    }
  ]
}</PRE><P>Again. So far, so good.</P><H3 id="toc-hId--454041874">Starting to look at the data</H3><P>We have some books data, courtesy of the two CSV records that came as part of the "tiny-sample" facet, which we can see with:</P><PRE>curl -s localhost:4004/odata/v4/catalog/Books | jq .</PRE><P>which returns this entity set response:</P><PRE>{
  "@odata.context": "$metadata#Books",
  "value": [
    {
      "ID": 1,
      "title": "Wuthering Heights",
      "stock": 100,
      "publishedIn_code": null
    },
    {
      "ID": 2,
      "title": "Jane Eyre",
      "stock": 500,
      "publishedIn_code": null
    }
  ]
}</PRE><BLOCKQUOTE><P>Those eagle-eyed amongst you might be wondering about the<SPAN>&nbsp;</SPAN>publishedIn_code<SPAN>&nbsp;</SPAN>property. That's one that's been auto-generated as a result of CAP's excellent<SPAN>&nbsp;</SPAN><A href="https://cap.cloud.sap/docs/guides/domain-modeling#associations" target="_blank" rel="noopener nofollow noreferrer">managed associations</A><SPAN>&nbsp;</SPAN>constructs.</P><P>Here, specifically, it comes from the combination of the<SPAN>&nbsp;</SPAN>Country<SPAN>&nbsp;</SPAN>type used to describe the<SPAN>&nbsp;</SPAN>publishedIn<SPAN>&nbsp;</SPAN>element:</P><PRE>extend my.bookshop.Books with {
    publishedIn: Country;
}</PRE><P>and the very definition of<SPAN>&nbsp;</SPAN>Country<SPAN>&nbsp;</SPAN>which is a<SPAN>&nbsp;</SPAN><A href="https://cap.cloud.sap/docs/guides/domain-modeling#managed-1-associations" target="_blank" rel="noopener nofollow noreferrer">managed "to-one" association</A><SPAN>&nbsp;</SPAN>as we have already seen:</P><PRE>type Country : Association to sap.common.Countries;</PRE><P>This results in, amongst other things, a foreign-key relationship being needed, and being realised via the construction of a property for this, made up of the names of the two elements in the relationship, i.e.</P><UL><LI>publishedIn<SPAN>&nbsp;</SPAN>(the new element in<SPAN>&nbsp;</SPAN>my.bookshop.Books)</LI><LI>code<SPAN>&nbsp;</SPAN>(the key element in<SPAN>&nbsp;</SPAN>sap.common.Countries)</LI></UL><P>joined with an<SPAN>&nbsp;</SPAN>_<SPAN>&nbsp;</SPAN>underscore character to become<SPAN>&nbsp;</SPAN>publishedIn_code.</P></BLOCKQUOTE><P>However, we don't yet have any country data. Requesting the equivalent entity set like this:</P><PRE>curl -s localhost:4004/odata/v4/catalog/Countries | jq .</PRE><P>returns a rather sad and empty looking entity set:</P><PRE>{
  "@odata.context": "$metadata#Countries",
  "value": []
}</PRE><P>So ...<SPAN>&nbsp;</SPAN>@sapcds-common-content<SPAN>&nbsp;</SPAN>to the rescue!</P><H3 id="toc-hId--650555379">Using <a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a>/cds-common-content</H3><P>Like we saw earlier, this can be brought into the project simply by adding it as a package. So let's do that now:</P><PRE>npm add @sap/cds-common-content</PRE><P>After seeing output like this:</P><PRE>added 115 packages, and audited 116 packages in 17s

21 packages are looking for funding
  run `npm fund` for details

found 0 vulnerabilities</PRE><P>we see that<SPAN>&nbsp;</SPAN>package.json<SPAN>&nbsp;</SPAN>now has the package listed in the<SPAN>&nbsp;</SPAN>dependencies<SPAN>&nbsp;</SPAN>section:</P><PRE>{
  "name": "iso-data-test",
  "version": "1.0.0",
  "description": "A simple CAP project.",
  "repository": "&lt;Add your repository here&gt;",
  "license": "UNLICENSED",
  "private": true,
  "dependencies": {
    "@sap/cds": "^7",
    "@sap/cds-common-content": "^1.4.0",
    "express": "^4"
  },
  "devDependencies": {
    "@cap-js/sqlite": "^1"
  },
  "scripts": {
    "start": "cds-serve"
  }
}</PRE><P>and the rest of the dependencies have been installed too (through a more general NPM install side-effect) - we can see this with<SPAN>&nbsp;</SPAN>npm list; here's an example invocation:</P><PRE>; npm list
iso-data-test@1.0.0 /home/user/work/scratch/iso-data-test
+-- @cap-js/sqlite@1.5.1
+-- @sap/cds-common-content@1.4.0
+-- @sap/cds@7.7.2
`-- express@4.18.3</PRE><P>So now, to actually make use of this package and what it brings, we have to add a<SPAN>&nbsp;</SPAN>using<SPAN>&nbsp;</SPAN>directive, as we saw earlier.</P><P>Let's add that to the<SPAN>&nbsp;</SPAN>db/publicationinfo.cds<SPAN>&nbsp;</SPAN>file, like this:</P><PRE>using from './data-model';
using { Country } from '@sap/cds/common';
using from '@sap/cds-common-content';

extend my.bookshop.Books with {
    publishedIn: Country;
}</PRE><P>As the CAP server is still running in "watch" mode, it restarts, and <span class="lia-unicode-emoji" title=":collision:">ð¥</span> what an explosion of log output!</P><PRE>[cds] - loaded model from 6 file(s):

  srv/cat-service.cds
  db/publicationinfo.cds
  node_modules/@sap/cds-common-content/index.cds
  db/data-model.cds
  node_modules/@sap/cds-common-content/db/index.cds
  node_modules/@sap/cds/common.cds

[cds] - connect using bindings from: { registry: '~/.cds-services.json' }
[cds] - connect to db &gt; sqlite { url: ':memory:' }
  &gt; init from node_modules/@sap/cds-common-content/db/data/sap-common-Countries_texts_zh_TW.csv
  &gt; init from node_modules/@sap/cds-common-content/db/data/sap-common-Countries_texts_zh_CN.csv
  &gt; init from node_modules/@sap/cds-common-content/db/data/sap-common-Countries_texts_tr.csv
  &gt; init from node_modules/@sap/cds-common-content/db/data/sap-common-Countries_texts_th.csv
  &gt; init from node_modules/@sap/cds-common-content/db/data/sap-common-Countries_texts_sv.csv
  &gt; init from node_modules/@sap/cds-common-content/db/data/sap-common-Countries_texts_ru.csv
  &gt; init from node_modules/@sap/cds-common-content/db/data/sap-common-Countries_texts_ro.csv
  &gt; init from node_modules/@sap/cds-common-content/db/data/sap-common-Countries_texts_pt.csv
  &gt; init from node_modules/@sap/cds-common-content/db/data/sap-common-Countries_texts_pl.csv
  &gt; init from node_modules/@sap/cds-common-content/db/data/sap-common-Countries_texts_no.csv
  &gt; init from node_modules/@sap/cds-common-content/db/data/sap-common-Countries_texts_nl.csv
  &gt; init from node_modules/@sap/cds-common-content/db/data/sap-common-Countries_texts_ms.csv
  &gt; init from node_modules/@sap/cds-common-content/db/data/sap-common-Countries_texts_ko.csv
  &gt; init from node_modules/@sap/cds-common-content/db/data/sap-common-Countries_texts_ja.csv
  &gt; init from node_modules/@sap/cds-common-content/db/data/sap-common-Countries_texts_it.csv
  &gt; init from node_modules/@sap/cds-common-content/db/data/sap-common-Countries_texts_hu.csv
  &gt; init from node_modules/@sap/cds-common-content/db/data/sap-common-Countries_texts_fr.csv
  &gt; init from node_modules/@sap/cds-common-content/db/data/sap-common-Countries_texts_fi.csv
  &gt; init from node_modules/@sap/cds-common-content/db/data/sap-common-Countries_texts_es_MX.csv
  &gt; init from node_modules/@sap/cds-common-content/db/data/sap-common-Countries_texts_es.csv
  &gt; init from node_modules/@sap/cds-common-content/db/data/sap-common-Countries_texts_en.csv
  &gt; init from node_modules/@sap/cds-common-content/db/data/sap-common-Countries_texts_de.csv
  &gt; init from node_modules/@sap/cds-common-content/db/data/sap-common-Countries_texts_da.csv
  &gt; init from node_modules/@sap/cds-common-content/db/data/sap-common-Countries_texts_cs.csv
  &gt; init from node_modules/@sap/cds-common-content/db/data/sap-common-Countries_texts_ar.csv
  &gt; init from node_modules/@sap/cds-common-content/db/data/sap-common-Countries.csv
  &gt; init from db/data/my.bookshop-Books.csv
/&gt; successfully deployed to in-memory database.</PRE><P>Wow! What's more, we now have country data in the<SPAN>&nbsp;</SPAN>Countries<SPAN>&nbsp;</SPAN>entity set:</P><PRE>curl -s 'localhost:4004/odata/v4/catalog/Countries?$top=5' \
  | jq .</PRE><PRE>{
  "@odata.context": "$metadata#Countries",
  "value": [
    {
      "name": "Andorra",
      "descr": "Andorra",
      "code": "AD"
    },
    {
      "name": "Utd Arab Emir.",
      "descr": "United Arab Emirates",
      "code": "AE"
    },
    {
      "name": "Afghanistan",
      "descr": "Afghanistan",
      "code": "AF"
    },
    {
      "name": "Antigua/Barbuda",
      "descr": "Antigua and Barbuda",
      "code": "AG"
    },
    {
      "name": "Anguilla",
      "descr": "Anguilla",
      "code": "AI"
    }
  ]
}</PRE><P>That's fab. But. What's going on? Where is this coming from? How does this work?</P><H3 id="toc-hId--922300253">Digging in to what's happening</H3><P>Let's take a bit of time to figure out how this is all working, and why we now have country data.</P><P>We added a single line to the CDS model:</P><PRE>using from '@sap/cds-common-content';</PRE><P>What did the addition of this line actually do to cause that explosion of change and the appearance of ISO country data?</P><P>Well, our first clue is the extra entries that now are appearing in the list of files from which the CDS model is constructed:</P><PRE>[cds] - loaded model from 6 file(s):

  srv/cat-service.cds
  db/publicationinfo.cds
  node_modules/@sap/cds-common-content/index.cds
  db/data-model.cds
  node_modules/@sap/cds-common-content/db/index.cds
  node_modules/@sap/cds/common.cds</PRE><P>Working through them, we first see our base files:</P><PRE>srv/cat-service.cds
db/data-model.cds</PRE><P>We also see the two extra files that were picked up once we added the<SPAN>&nbsp;</SPAN>db/publicationinfo.cds<SPAN>&nbsp;</SPAN>file which itself summoned the<SPAN>&nbsp;<a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a>/</SPAN>cds/common<SPAN>&nbsp;</SPAN>content:</P><PRE>db/publicationinfo.cds
node_modules/@sap/cds/common.cds</PRE><BLOCKQUOTE><P>At this point I've stopped being deliberately vague (with<SPAN>&nbsp;</SPAN>[...]) about the specific location of the files in<SPAN>&nbsp;</SPAN>node_modules/, because it's worth highlighting here something that has changed. The<SPAN>&nbsp;</SPAN>npm add<SPAN>&nbsp;</SPAN>action just before caused the rest of the packages (defined in<SPAN>&nbsp;</SPAN>package.json) to be installed in the project. This means that there's now a project-local<SPAN>&nbsp;</SPAN>node_modules/<SPAN>&nbsp;</SPAN>directory containing everything that this project needs, including all the<SPAN>&nbsp;</SPAN>@sap<SPAN>&nbsp;</SPAN>prefixed NPM packages.</P><P>A quick<SPAN>&nbsp;</SPAN>tree -F -L 3<SPAN>&nbsp;</SPAN>shows the directory structure containing those resources (I've removed some of the output for brevity):</P><PRE>./
|-- README.md
|-- app/
|-- db/
|   |-- data/
|   |   `-- my.bookshop-Books.csv
|   |-- data-model.cds
|   `-- publicationinfo.cds
|-- node_modules/
|   |-- @cap-js/
|   |   |-- cds-types/
|   |   |-- db-service/
|   |   `-- sqlite/
|   |-- @sap/
|   |   |-- cds/
|   |   |-- cds-common-content/
|   |   |-- cds-compiler/
|   |   |-- cds-fiori/
|   |   `-- cds-foss/
|   |-- ...
|   `-- yaml/
|       |-- LICENSE
|       |-- README.md
|       |-- bin.mjs*
|       |-- browser/
|       |-- dist/
|       |-- package.json
|       `-- util.js
|-- package-lock.json
|-- package.json
`-- srv/
    `-- cat-service.cds</PRE><P>So this means that the<SPAN>&nbsp;</SPAN>@sap/cds/common<SPAN>&nbsp;</SPAN>package is being loaded now from the project-local set of packages, i.e. in<SPAN>&nbsp;</SPAN>node_modules/<SPAN>&nbsp;</SPAN>relative to the project directory (i.e.<SPAN>&nbsp;</SPAN>./node_modules/) and not the global NPM package area any more.</P><P>This in turn means that the full (relative) path to this file now in the list is clean and short(er):</P><PRE>node_modules/@sap/cds/common.cds</PRE></BLOCKQUOTE><P>OK, so we know why these four of the six files are being loaded, and where from:</P><PRE>srv/cat-service.cds
db/data-model.cds
db/publicationinfo.cds
node_modules/@sap/cds/common.cds</PRE><P>So what about the other two in the list:</P><PRE>node_modules/@sap/cds-common-content/index.cds
node_modules/@sap/cds-common-content/db/index.cds</PRE><P>which are now also being brought in to construct the model?</P><P>Well, given the "cds-common-content" that appears in the path of these files, we can be pretty certain that they're related to this single line we just added:</P><PRE>using from '@sap/cds-common-content';</PRE><P>so what is actually happening here?</P><P>Well, if we look a bit deeper inside the<SPAN>&nbsp;<a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a>/</SPAN>cds-common-content<SPAN>&nbsp;</SPAN>package, like this:</P><PRE>tree -F -L 2 node_modules/@sap/cds-common-content</PRE><P>there's a bit of a clue in the output, especially if we're familiar with CAP's<SPAN>&nbsp;</SPAN><A href="https://cap.cloud.sap/docs/guides/extensibility/composition" target="_blank" rel="noopener nofollow noreferrer">Reuse and Compose</A><SPAN>&nbsp;</SPAN>concepts:</P><PRE>node_modules/@sap/cds-common-content/
|-- CHANGELOG.md
|-- LICENSE
|-- README.md
|-- db/
|   |-- index.cds
|   `-- data/
|-- index.cds
`-- package.json

3 directories, 6 files</PRE><P>Look at those<SPAN>&nbsp;</SPAN>index.cds<SPAN>&nbsp;</SPAN>files. The<SPAN>&nbsp;</SPAN><A href="https://cap.cloud.sap/docs/guides/extensibility/composition#index-cds" target="_blank" rel="noopener nofollow noreferrer">Using index.cds Entry Points</A><SPAN>&nbsp;</SPAN>section of the Reuse and Compose section of the Capire documentation says this, in the context of a<SPAN>&nbsp;</SPAN>using<SPAN>&nbsp;</SPAN>directive like we have here (i.e.<SPAN>&nbsp;</SPAN>using from '@sap/cds-common-content';):</P><P><EM>"The<SPAN>&nbsp;</SPAN>using from<SPAN>&nbsp;</SPAN>statements assume that the imported packages provide<SPAN>&nbsp;</SPAN>index.cds<SPAN>&nbsp;</SPAN>in their roots as<SPAN>&nbsp;</SPAN><A href="https://cap.cloud.sap/docs/guides/extensibility/composition#entry-points" target="_blank" rel="noopener nofollow noreferrer">public entry points</A>, which they do."</EM></P><P>So, that means that the<SPAN>&nbsp;</SPAN>using<SPAN>&nbsp;</SPAN>directive will cause this file:</P><PRE>node_modules/@sap/cds-common-content/index.cds</PRE><P>to also be loaded and its CDS contents added into the overall model construction. So what's in this file? This:</P><PRE>using from './db';</PRE><P><span class="lia-unicode-emoji" title=":rabbit:">ð</span><SPAN>&nbsp;</SPAN><A href="https://en.wikipedia.org/wiki/Alice%27s_Adventures_in_Wonderland" target="_blank" rel="noopener nofollow noreferrer">Curiouser and curiouser</A>!</P><P>So let's now follow<SPAN>&nbsp;</SPAN><EM>this</EM><SPAN>&nbsp;</SPAN>using<SPAN>&nbsp;</SPAN>directive, the resource reference within which should be interpreted as local to the containing<SPAN>&nbsp;</SPAN>index.cds<SPAN>&nbsp;</SPAN>file, i.e. we're now going to follow this path to<SPAN>&nbsp;</SPAN>./db/, which<SPAN>&nbsp;</SPAN><EM>also</EM><SPAN>&nbsp;</SPAN>contains an<SPAN>&nbsp;</SPAN>index.cds:</P><PRE>node_modules/@sap/cds-common-content/
|-- CHANGELOG.md
|-- LICENSE
|-- README.md
|-- db/
|   |-- index.cds  &lt;--------------------+
|   `-- data/                           |
|-- index.cds  -- using from './db'; ---+
`-- package.json</PRE><P>So what's in<SPAN>&nbsp;</SPAN>./db/index.cds? This:</P><PRE>using sap.common.Languages from '@sap/cds/common';
using sap.common.Countries from '@sap/cds/common';
using sap.common.Currencies from '@sap/cds/common';
using sap.common.Timezones from '@sap/cds/common';</PRE><P>Ooh!</P><P>What is the effect of doing this? Well it has a direct effect and a sort of side-effect too.</P><P>The direct effect is that all four entity definitions referenced in this<SPAN>&nbsp;</SPAN>./db/index.cds<SPAN>&nbsp;</SPAN>file, that is to say these four:</P><UL><LI>sap.common.Languages</LI><LI>sap.common.Countries</LI><LI>sap.common.Currencies</LI><LI>sap.common.Timezones</LI></UL><P>are added to the overall model.</P><P>But the side-effect is that the<SPAN>&nbsp;</SPAN>./db/data/<SPAN>&nbsp;</SPAN>directory here also becomes a candidate location for the automatic<SPAN>&nbsp;</SPAN><A href="https://cap.cloud.sap/docs/guides/databases#providing-initial-data" target="_blank" rel="noopener nofollow noreferrer">provision of initial data</A>!</P><P>And what's in that<SPAN>&nbsp;</SPAN>./db/data/<SPAN>&nbsp;</SPAN>directory? Let's have a look:</P><PRE>ls node_modules/@sap/cds-common-content/db/data/</PRE><P>Lots and lots of CSV files (I've cut the list down to just a few here):</P><PRE>./                                     sap-common-Languages_texts_cs.csv
../                                    sap-common-Languages_texts_da.csv
sap-common-Countries.csv               sap-common-Languages_texts_de.csv
sap-common-Countries_texts.csv         sap-common-Languages_texts_en.csv
sap-common-Countries_texts_ar.csv      sap-common-Languages_texts_es.csv
sap-common-Countries_texts_zh_CN.csv   sap-common-Timezones_texts_cs.csv
sap-common-Countries_texts_zh_TW.csv   sap-common-Timezones_texts_da.csv
sap-common-Currencies.csv              sap-common-Timezones_texts_de.csv
sap-common-Currencies_texts.csv        sap-common-Timezones_texts_el.csv
sap-common-Currencies_texts_ar.csv     sap-common-Timezones_texts_en.csv
...</PRE><P>And we know what happens with initial data, for those entities whose namespaced-names match up with CSV filenames in directories such as these - the data is automatically imported to become data for those entities!</P><P>Notice too that for each of the four entities, there is a single CSV file containing the core data, and multiple CSV files for the corresponding<SPAN>&nbsp;</SPAN><A href="https://cap.cloud.sap/docs/guides/localized-data#declaring-localized-data" target="_blank" rel="noopener nofollow noreferrer">localized</A><SPAN>&nbsp;</SPAN>elements, in accompanying<SPAN>&nbsp;</SPAN>_texts*<SPAN>&nbsp;</SPAN>suffixed files.</P><P>Here's one example, for the<SPAN>&nbsp;</SPAN>sap.common.Countries<SPAN>&nbsp;</SPAN>entity. A neat list of the intial CSV data files for this entity can be retrieved with:</P><PRE>cd node_modules/@sap/cds-common-content/db/data/ \
  &amp;&amp; ls -1 sap-common-Countries*.csv</PRE><P>which produces:</P><PRE>sap-common-Countries.csv
sap-common-Countries_texts.csv
sap-common-Countries_texts_ar.csv
sap-common-Countries_texts_cs.csv
sap-common-Countries_texts_da.csv
sap-common-Countries_texts_de.csv
sap-common-Countries_texts_en.csv
sap-common-Countries_texts_es.csv
sap-common-Countries_texts_es_MX.csv
sap-common-Countries_texts_fi.csv
sap-common-Countries_texts_fr.csv
sap-common-Countries_texts_hu.csv
sap-common-Countries_texts_it.csv
sap-common-Countries_texts_ja.csv
sap-common-Countries_texts_ko.csv
sap-common-Countries_texts_ms.csv
sap-common-Countries_texts_nl.csv
sap-common-Countries_texts_no.csv
sap-common-Countries_texts_pl.csv
sap-common-Countries_texts_pt.csv
sap-common-Countries_texts_ro.csv
sap-common-Countries_texts_ru.csv
sap-common-Countries_texts_sv.csv
sap-common-Countries_texts_th.csv
sap-common-Countries_texts_tr.csv
sap-common-Countries_texts_zh_CN.csv
sap-common-Countries_texts_zh_TW.csv</PRE><P>We can see the three groups of files for<SPAN>&nbsp;</SPAN>sap.common.Countries:</P><UL><LI>the single core data file<SPAN>&nbsp;</SPAN>sap-common-Countries.csv<SPAN>&nbsp;</SPAN>containing values for the<SPAN>&nbsp;</SPAN>code,<SPAN>&nbsp;</SPAN>name<SPAN>&nbsp;</SPAN>and<SPAN>&nbsp;</SPAN>descr<SPAN>&nbsp;</SPAN>fields (in English as default).</LI><LI>the single core localized data file<SPAN>&nbsp;</SPAN>sap-common-Countries_texts.csv<SPAN>&nbsp;</SPAN>- where the filename is not specific to an explicit locale - containing values for the<SPAN>&nbsp;</SPAN>locale,<SPAN>&nbsp;</SPAN>code,<SPAN>&nbsp;</SPAN>name<SPAN>&nbsp;</SPAN>and<SPAN>&nbsp;</SPAN>descr<SPAN>&nbsp;</SPAN>field. The language specific content is English by default.</LI><LI>the multiple language-specific localized data files<SPAN>&nbsp;</SPAN>sap-common-Countries_texts_&lt;locale-identifier&gt;.csv<SPAN>&nbsp;</SPAN>containing the same data as the core localized file but with the texts translated into the language indicated by the locale-identifier in the file name.</LI></UL><P data-unlink="true">You'll likely remember seeing a list of all these CSV files in the<SPAN>&nbsp;</SPAN>explosion of output<SPAN>&nbsp;</SPAN>from the running CAP server earlier.</P><P>And what's the outcome of this?</P><P>To find out, let's expand the core books data now to include values for the new<SPAN>&nbsp;</SPAN>publishedIn_code<SPAN>&nbsp;</SPAN>field at the persistence layer, so that the content of<SPAN>&nbsp;</SPAN>db/data/my.bookshop-Books.csv<SPAN>&nbsp;</SPAN>now looks like this:</P><PRE>ID;title;stock;publishedIn_code
1;Wuthering Heights;100;DE
2;Jane Eyre;500;HU</PRE><BLOCKQUOTE><P>Yes I know Wuthering Heights wasn't published in Germany, nor was Jane Eyre published in Hungary, but thank you for wondering about that.</P></BLOCKQUOTE><P>Now, NOT ONLY (Î¼Î­Î½) can we follow navigation properties to see the publication countries for our books, like this (note the country names "Germany" and "Hungary"):</P><PRE>curl \
    --silent \
    --url 'localhost:4004/odata/v4/catalog/Books?$expand=publishedIn' \
  | jq .</PRE><P>to get this:</P><PRE>{
  "@odata.context": "$metadata#Books(publishedIn())",
  "value": [
    {
      "ID": 1,
      "title": "Wuthering Heights",
      "stock": 100,
      "publishedIn_code": "DE",
      "publishedIn": {
        "name": "Germany",
        "descr": "Germany",
        "code": "DE"
      }
    },
    {
      "ID": 2,
      "title": "Jane Eyre",
      "stock": 500,
      "publishedIn_code": "HU",
      "publishedIn": {
        "name": "Hungary",
        "descr": "Hungary",
        "code": "HU"
      }
    }
  ]
}</PRE><P>BUT ALSO (Î´Î­) we can ask for this information in our own language (locale)! Here's an example, requesting the same resource but with a different locale (French), via standard HTTP headers:</P><BLOCKQUOTE><P>I'm fond of the<SPAN>&nbsp;</SPAN><A href="http://www.jowillmott.co.uk/simpleguide/notes/%CE%BC%CE%AD%CE%BD%E2%80%A6%CE%B4%CE%AD..." target="_blank" rel="noopener nofollow noreferrer">strong particle pairing</A><SPAN>&nbsp;</SPAN>of Î¼Î­Î½ ... Î´Î­ which I first learned about as an important construct in Ancient Greek, and I find myself often using the (English) equivalent ("not only ... but also").</P></BLOCKQUOTE><PRE>curl \
    --silent \
    --header 'Accept-Language: fr' \
    --url 'localhost:4004/odata/v4/catalog/Books?$expand=publishedIn' \
  | jq .</PRE><P>The representation of the resource requested is now different, in that the names of the countries are now in French ("Allemagne" and "Hungarie"):</P><PRE>{
  "@odata.context": "$metadata#Books(publishedIn())",
  "value": [
    {
      "ID": 1,
      "title": "Wuthering Heights",
      "stock": 100,
      "publishedIn_code": "DE",
      "publishedIn": {
        "name": "Allemagne",
        "descr": "Allemagne",
        "code": "DE"
      }
    },
    {
      "ID": 2,
      "title": "Jane Eyre",
      "stock": 500,
      "publishedIn_code": "HU",
      "publishedIn": {
        "name": "Hongrie",
        "descr": "Hongrie",
        "code": "HU"
      }
    }
  ]
}</PRE><P>C'est vraiment magnifique!</P><P>Of course, one wouldn't often use an explicit<SPAN>&nbsp;</SPAN>Accept-Language<SPAN>&nbsp;</SPAN>header in an HTTP request, but think of what headers your browser sends by default when making requests, and think of what your French colleague's browser might send. Exactly!</P><H1 id="toc-hId--532007744">Wrapping up</H1><P>OK, I think I've reached a point where I can now safely escape this rabbit hole of discovery. The bottom line is that there is a standard NPM package available that provides actual ISO data for the four CAP reuse types. You've learned how to use it, and what it provides. Moreover, you've learned how it provides what it does, and what goes on behind the scenes. That, hopefully, has given you a tiny bit more insight into the wonders of CAP.</P><P>And there's still so much more to discover. Until next time!</P><HR /><H1 id="toc-hId--728521249">Appendix - loading <a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a>/cds/common</H1><P>In the Background section earlier, the output of<SPAN>&nbsp;</SPAN>cds watch<SPAN>&nbsp;</SPAN>showed this line:</P><PRE>  [...]/node_modules/@sap/cds/common.cds</PRE><P>The reason I included a<SPAN>&nbsp;</SPAN>[...]<SPAN>&nbsp;</SPAN>"prefix" was to signify that there will be a different path shown depending on whether an<SPAN>&nbsp;</SPAN>npm install<SPAN>&nbsp;</SPAN>of the project dependencies (which include<SPAN> <a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a>/cds</SPAN>) has been executed, or not.</P><P>If an<SPAN>&nbsp;</SPAN>npm install<SPAN>&nbsp;</SPAN>has been executed, then there will be a project-local<SPAN>&nbsp;</SPAN>node_modules/<SPAN>&nbsp;</SPAN>directory, and the<SPAN> <a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a>/cds</SPAN>/common<SPAN>&nbsp;</SPAN>resource will have been loaded from within there, i.e.</P><PRE>./node_modules/@sap/cds/common.cds</PRE><P>If an<SPAN>&nbsp;</SPAN>npm install<SPAN>&nbsp;</SPAN>hasn't been executed, and we're running the CAP server from the NPM<SPAN>&nbsp;</SPAN><A href="https://github.com/qmacro/capb2b/blob/20f9cebefd63f9d897eeb47b53634fd7416653b5/.devcontainer/Dockerfile#L11" target="_blank" rel="noopener nofollow noreferrer">globally installed</A><SPAN> <a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a>/cds</SPAN>-dk<SPAN>&nbsp;</SPAN>package, then it will have been loaded from that globally installed package location, and look something like this (depending on what your NPM global package management directory setup looks like):</P><PRE>../../usr/local/share/npm-global/lib/
  node_modules/@sap/cds-dk/
  node_modules/@sap/cds/common.cds</PRE><BLOCKQUOTE><P>This location value would typically be shown in a single line; I've split the value up over a few lines purely for readability.</P></BLOCKQUOTE><P>You can find out where your (normally globally installed)<SPAN> <a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a>/cds</SPAN>-dk<SPAN>&nbsp;</SPAN>package is, using the<SPAN>&nbsp;</SPAN>cds env<SPAN>&nbsp;</SPAN>command:</P><PRE>cds env _home_cds-dk</PRE><P>In the context of this particular dev container in which I'm working, this is the value that is emitted:</P><PRE>'/usr/lib/node_modules/@sap/cds-dk/'</PRE><HR /><P>(<A href="https://qmacro.org/blog/posts/2024/03/12/iso-content-for-common-cap-types/" target="_self" rel="nofollow noopener noreferrer">Originally published on qmacro.org)</A></P>
---
Opening files from the terminal in BAS dev spaces
application-developmentblog-board
2024-02-15
https://community.sap.com/t5/application-development-blog-posts/opening-files-from-the-terminal-in-bas-dev-spaces/ba-p/13606953
2024-02-15-opening-files-from-the-terminal-in-bas-dev-spaces
<P><SPAN>In the comments to&nbsp;</SPAN><A href="https://www.youtube.com/watch?v=1ywiOaGVA5w" target="_blank" rel="noopener nofollow noreferrer">episode 4 of our back to basics series of live stream episodes on CAP, on the Hands-on SAP Dev show</A><SPAN>, there was a question on my use of&nbsp;</SPAN>code<SPAN>&nbsp;in VS Code, which, when invoked in the terminal (e.g.&nbsp;</SPAN>code services.cds<SPAN>) opens the file directly in a VS Code editor window, like this:</SPAN></P><P><SPAN><span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="vscode-open-file.gif" style="width: 999px;"><img src="https://community.sap.com/t5/image/serverpage/image-id/66097iB237FF443FD1889F/image-size/large?v=v2&amp;px=999" role="button" title="vscode-open-file.gif" alt="vscode-open-file.gif" /></span></SPAN></P><P>The question was about<SPAN>&nbsp;</SPAN>code<SPAN>&nbsp;</SPAN>being recognised in SAP Business Application Studio (BAS) dev spaces.</P><P>Basically, while<SPAN>&nbsp;</SPAN>code<SPAN>&nbsp;</SPAN>is not a command that's available in dev spaces, there's a BAS-specific command<SPAN>&nbsp;</SPAN>basctl<SPAN>&nbsp;</SPAN>which has a couple of options, one of which is<SPAN>&nbsp;</SPAN>--open. Here are some examples, taken from the usage text:</P><P>&nbsp;</P><pre class="lia-code-sample language-text"><code>Examples
  $ basctl --open http://sap.com
  $ basctl --open http://localhost:8082/tmp
  $ basctl --open file:///home/user/projects/proj1/myfile.txt
  $ basctl --open /myfile.txt
  $ basctl --open ./myfolder/myfile.txt</code></pre><P>&nbsp;</P><P>So while there isn't a<SPAN>&nbsp;</SPAN>code<SPAN>&nbsp;</SPAN>command, you can use<SPAN>&nbsp;</SPAN>basctl --open<SPAN>&nbsp;</SPAN>to get something similar. I say similar, because for some reason I cannot yet fathom (my small brain, again) it opens the file in a new column. Anyway, here's what it looks like in action:</P><P><span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="basctl-open-file.gif" style="width: 999px;"><img src="https://community.sap.com/t5/image/serverpage/image-id/66099i8BA8180320BE42A4/image-size/large?v=v2&amp;px=999" role="button" title="basctl-open-file.gif" alt="basctl-open-file.gif" /></span></P><P>(I've asked internally about this behaviour, and will update this blog post with anything I find out.)</P><P>The nice thing about what<SPAN>&nbsp;</SPAN>basctl<SPAN>&nbsp;</SPAN>offers perhaps is the ability to invoke framework commands, via an additional<SPAN>&nbsp;</SPAN>--command<SPAN>&nbsp;</SPAN>option, like this:<SPAN>&nbsp;</SPAN>basctl --command workbench.action.openSettings.</P><P>The question also asked about my use of<SPAN>&nbsp;</SPAN>tree, and noted its lack of availability in BAS dev spaces. This is simple to address, if not entirely straightforward. I got<SPAN>&nbsp;</SPAN>tree<SPAN>&nbsp;</SPAN>working in my dev space, as you can see:</P><P><span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="tree-in-bas-dev-space.png" style="width: 683px;"><img src="https://community.sap.com/t5/image/serverpage/image-id/66101i224A4F195ADAD200/image-size/large?v=v2&amp;px=999" role="button" title="tree-in-bas-dev-space.png" alt="tree-in-bas-dev-space.png" /></span></P><P>I did this by copying in a<SPAN>&nbsp;</SPAN>tree<SPAN>&nbsp;</SPAN>binary (and ensuring the execution bit was set). Where did I get that<SPAN>&nbsp;</SPAN>tree<SPAN>&nbsp;</SPAN>binary from? Well, first, I looked what the architecture of the dev spaces was, via<SPAN>&nbsp;</SPAN>uname<SPAN>&nbsp;</SPAN>(I've added whitespace for readability):</P><P>&nbsp;</P><pre class="lia-code-sample language-shell"><code>user: user $ uname -a
Linux workspaces-ws-nvzxc-deployment-9f9b9b656-sfdh5
5.15.135-gardenlinux-cloud-amd64 
SMP Debian 5.15.135-0gardenlinux1 (2023-10-12)
x86_64 GNU/Linux</code></pre><P>&nbsp;</P><P>I also checked what distribution the environment was based on:</P><P>&nbsp;</P><pre class="lia-code-sample language-shell"><code>user: user $ cat /etc/issue
Debian GNU/Linux 12 \n \l</code></pre><P>&nbsp;</P><P>Basically, it's Debian 12 on x86_64 architecture. Classic. So then I created a quick container from a Debian 12 based container image, via a<SPAN>&nbsp;</SPAN><A href="https://qmacro.org/blog/posts/2024/01/26/exploring-codespaces-as-temporary-dev-containers/" target="_blank" rel="noopener nofollow noreferrer">codespace</A><SPAN>&nbsp;</SPAN>that I spun up for the purpose, and copied the<SPAN>&nbsp;</SPAN>tree<SPAN>&nbsp;</SPAN>binary out of there to my local filesystem, like this:</P><P>&nbsp;</P><pre class="lia-code-sample language-shell"><code>gh codespace cp 'remote:/usr/bin/tree' .</code></pre><P>&nbsp;</P><P>I then copied that binary to the dev space by dragging it into the Explorer window, and then set the execution bit with<SPAN>&nbsp;</SPAN>chmod +x $HOME/tree.</P><P>Job done!</P><P>(<A href="https://qmacro.org/blog/posts/2024/02/15/opening-files-from-the-terminal-in-bas-dev-spaces/" target="_self" rel="nofollow noopener noreferrer">Originally published on qmacro.org</A>)</P>
---
Successful double CodeJam in Wroclaw and Warsaw
code-jamblog-board
2024-02-08
https://community.sap.com/t5/sap-codejam-blog-posts/successful-double-codejam-in-wroclaw-and-warsaw/ba-p/13599303
2024-02-08-successful-double-codejam-in-wroclaw-and-warsaw
<P>I'm at Warsaw airport on my journey home after a great few days in Poland. My first flight is already delayed so I have a bit of time at the gate to write up some notes.</P><P>I arrived in Wroclaw, in the west of Poland, on Sunday, and met up with my good friend, Developer Advocate colleague, local resident and fellow beer and food enthusiast<SPAN>&nbsp;</SPAN><A href="https://www.linkedin.com/in/witalij/" target="_blank" rel="noopener nofollow noreferrer">Witalij Rudnicki</A>, where we visited the<SPAN>&nbsp;</SPAN><A href="https://100mostow.pl/en/wroclaw/" target="_blank" rel="noopener nofollow noreferrer">100 Bridges Brewery</A>. What a great start!</P><P><span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="witalij-dj-stu-mostow-brewery.jpg" style="width: 999px;"><img src="https://community.sap.com/t5/image/serverpage/image-id/62719iC4CDE16272F44B57/image-size/large?v=v2&amp;px=999" role="button" title="witalij-dj-stu-mostow-brewery.jpg" alt="witalij-dj-stu-mostow-brewery.jpg" /></span></P><H2 id="toc-hId-965950915">Wroclaw</H2><P>On the following day (Monday) I arrived at the Capgemini offices in Wroclaw, greeted by Dominik in a room that was perfect for a day of learning and networking. It was a full house, not surprising given the CodeJam topic, which was the SAP Cloud Application Programming Model ("CAP" to us humans). It's such a fascinating and very capable framework, built with love, enthusiasm and skill, which is evident in both its philosophy and its codebase.</P><P>If you're interested in checking out the content of the CAP CodeJam that I ran, it's available publicly (like all our other CodeJams) on GitHub:<SPAN>&nbsp;</SPAN><A href="https://github.com/SAP-samples/cap-service-integration-codejam/" target="_blank" rel="noopener nofollow noreferrer">Service Integration with SAP Cloud Application Programming Model</A>.</P><P><span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="wroclaw-codejam-participants.jpg" style="width: 999px;"><img src="https://community.sap.com/t5/image/serverpage/image-id/62720iBA47910F67BDB9CD/image-size/large?v=v2&amp;px=999" role="button" title="wroclaw-codejam-participants.jpg" alt="wroclaw-codejam-participants.jpg" /></span></P><P><SPAN>There were plenty of refreshments, including that classic developer fuel, pizza, which we devoured half way through the exercises</SPAN><SPAN><span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="wroclaw-food.png" style="width: 999px;"><img src="https://community.sap.com/t5/image/serverpage/image-id/62721i437E068DB87BBDE3/image-size/large?v=v2&amp;px=999" role="button" title="wroclaw-food.png" alt="wroclaw-food.png" /></span></SPAN></P><H2 id="toc-hId-769437410">Warsaw</H2><P>The next day was a travel day, where Witalij drove us the almost 400km to Warsaw, in time to do a couple of cool things that evening. After checking into our respective hotels, we headed to the<SPAN>&nbsp;</SPAN><A href="https://applemuzeumpolska.pl/en/main-page/" target="_blank" rel="noopener nofollow noreferrer">Apple Museum</A>. Such a wonderful exhibition of Apple memorabilia, from a private collector, it was fascinating to look at everything from a replica of the original Apple I, through the classic Apple II range, and all the way through to today. I spotted an Apple III which is the computer that features in the super Hands-on SAP Dev stickers designed and produced by the great<SPAN>&nbsp;</SPAN><A href="https://www.linkedin.com/in/rsletta/" target="_blank" rel="noopener nofollow noreferrer">Ronnie Sletta</A>.</P><P><span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="apple-iii-sticker.png" style="width: 999px;"><img src="https://community.sap.com/t5/image/serverpage/image-id/62718iDBFC323534A27DDC/image-size/large?v=v2&amp;px=999" role="button" title="apple-iii-sticker.png" alt="apple-iii-sticker.png" /></span></P><P><SPAN>What made this an even better experience was that the museum was hosted inside a renovated factory from an older industrial era, and there were lots of factory artifacts preserved. Inside this factory was also&nbsp;</SPAN><A href="https://uwaga-piwo.ontap.pl/" target="_blank" rel="noopener nofollow noreferrer">a great beer place</A><SPAN>&nbsp;which was the location for an SAP Stammtisch that Witalij had also organised. Cheers!</SPAN></P><P><span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="stammtisch.jpg" style="width: 999px;"><img src="https://community.sap.com/t5/image/serverpage/image-id/62716i3B7FCE4429F1284B/image-size/large?v=v2&amp;px=999" role="button" title="stammtisch.jpg" alt="stammtisch.jpg" /></span></P><P><SPAN>And then the following day, we all met up at the KMD Poland offices for another CodeJam, on the same topic. Again, it was a full house, over a different but equally great room layout, and just like Wroclaw on Monday, the participants worked hard on the exercises, got to know each other, asked great questions and contributed valuable opinions too. The key ingredients to a successful CodeJam, I'd say.</SPAN></P><P><span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="warsaw-codejam-participants.jpg" style="width: 999px;"><img src="https://community.sap.com/t5/image/serverpage/image-id/62715i6A73CBB7CC7CE053/image-size/large?v=v2&amp;px=999" role="button" title="warsaw-codejam-participants.jpg" alt="warsaw-codejam-participants.jpg" /></span></P><H2 id="toc-hId-572923905">Wrapping up</H2><P>One of the most enjoyable aspects of this trip for me was being looked after by Witalij. He showed me some great places, helped me find and experience some great food - traditional Polish food and indeed Georgian cuisine too. He even helped me find my way around both cities, and see some sights.</P><P><span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="georgian-cuisine.png" style="width: 999px;"><img src="https://community.sap.com/t5/image/serverpage/image-id/62717i9301F1B39C5D01EE/image-size/large?v=v2&amp;px=999" role="button" title="georgian-cuisine.png" alt="georgian-cuisine.png" /></span></P><P><SPAN>If you're interested in hosting a CodeJam, head on over to this blog post:&nbsp;</SPAN><A href="https://community.sap.com/t5/sap-codejam-blog-posts/so-you-want-to-host-a-codejam-everything-you-need-to-know/ba-p/221415" target="_blank">So, You Want to Host a CodeJam! Everything you need to know</A><SPAN>, and I'll perhaps see you at the next one!</SPAN></P><HR /><P><A href="https://qmacro.org/blog/posts/2024/02/08/successful-double-codejam-in-wroclaw-and-warsaw/" target="_self" rel="nofollow noopener noreferrer">Originally published on qmacro.org</A></P>
---
Simplifying and improving the hosting and serving of frontend apps - a new CEI - get involved!
application-developmentblog-board
2023-11-08
https://community.sap.com/t5/application-development-blog-posts/simplifying-and-improving-the-hosting-and-serving-of-frontend-apps-a-new/ba-p/301146
2023-11-08-simplifying-and-improving-the-hosting-and-serving-of-frontend-apps-a-new
<P>There's a new Customer Engagement Initiative (CEI) for you to collaborate with SAP team members on a new service for hosting and serving frontend applications, a service that combines the HTML5 Repo and AppRouter capabilities, to provide a much simpler development, deployment and management experience, and introduce usage reporting and governance features too.</P>
<P>If, like me, you've built and deployed HTML5 apps to SAP Business Technology Platform, you'll know that there's some room for simplification and streamlining. Well - this is it!&nbsp;</P>
<P>Get involved by joining the CEI "<SPAN><A href="https://influence.sap.com/sap/ino/#campaign/3549" target="_self" rel="noopener noreferrer">New service for hosting and serving frontend applications</A>". And hurry - registration for this CEI ends very soon!</SPAN></P>
---
Solving the SAP TechEd Easter Egg on the Web
application-developmentblog-board
2023-11-02
https://community.sap.com/t5/application-development-blog-posts/solving-the-sap-teched-easter-egg-on-the-web/ba-p/299612
2023-11-02-solving-the-sap-teched-easter-egg-on-the-web
<P><SPAN>If you're at&nbsp;</SPAN><A href="https://www.sap.com/india/events/teched.html" target="_blank" rel="noopener noreferrer">SAP TechEd 2023 in Bengaluru, India</A><SPAN>&nbsp;you may have seen a little Easter Egg in the form of some Node.js code.</SPAN></P><P><SPAN><span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="easter-egg-poster.png" style="width: 999px;"><img src="https://community.sap.com/t5/image/serverpage/image-id/48692i1E94F6F252929321/image-size/large?v=v2&amp;px=999" role="button" title="easter-egg-poster.png" alt="easter-egg-poster.png" /></span></SPAN></P><P>If you've seen it and are curious about it, and want to execute it but don't know how, there are plenty of ways you can do it on the Web. You don't need to install Node.js on your machine if you don't want to.</P><P>It's important to realise that while Node.js is JavaScript, it comes with more libraries and features relating to the runtime context that it provides. Think of it as "JavaScript++". So you can't run the Easter Egg code in, say, the Chrome Developer Tools console, for example.</P><P>But you can run it on the Web. Here are a few places where this is possible:</P><P><A href="https://replit.com/" target="_blank" rel="noopener nofollow noreferrer">replit</A><SPAN>&nbsp;</SPAN>lets you "build software collaboratively with the power of AI, on any device, without spending a second on setup".</P><P><A href="https://codesandbox.io/" target="_blank" rel="noopener nofollow noreferrer">CodeSandbox</A><SPAN>&nbsp;</SPAN>"keeps you in flow by giving you cloud development environments that resume in 1 second".</P><P><A href="https://runkit.com/" target="_blank" rel="noopener nofollow noreferrer">RunKit</A><SPAN>&nbsp;</SPAN>"is a node playground in your browser".</P><P>And of course, it almost goes without saying that you can run it in a Dev Space in the<SPAN>&nbsp;</SPAN><A href="https://www.sap.com/india/products/technology-platform/business-application-studio.html" target="_blank" rel="noopener noreferrer">SAP Business Application Studio</A>.</P><P><span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="easter-egg-in-bas.png" style="width: 999px;"><img src="https://community.sap.com/t5/image/serverpage/image-id/48693i1D2D3CFA02F9B951/image-size/large?v=v2&amp;px=999" role="button" title="easter-egg-in-bas.png" alt="easter-egg-in-bas.png" /></span></P><P><SPAN>So what are you waiting for?&nbsp;</SPAN><A href="https://qmacro.org/blog/posts/2017/02/19/the-beauty-of-recursion-and-list-machinery/#initialrecognition" target="_blank" rel="noopener nofollow noreferrer">Stare at the code</A><SPAN>, try and work out what it's doing, what it emits, and if you get stuck, run it in one of these Web-based environments and see where it leads you. And have fun!</SPAN></P><HR /><P><SPAN>(<A href="https://qmacro.org/blog/posts/2023/11/02/solving-the-sap-teched-easter-egg-on-the-web/" target="_self" rel="nofollow noopener noreferrer">Originally published on qmacro.org</A>)</SPAN></P>
---
Devtoberfest - the best developer prep for SAP TechEd
technology-blog-sap
2023-09-18
https://community.sap.com/t5/technology-blogs-by-sap/devtoberfest-the-best-developer-prep-for-sap-teched/ba-p/13580199
2023-09-18-devtoberfest-the-best-developer-prep-for-sap-teched
<EM>Devtoberfest 2023 kicked off today, with a wealth of live sessions. Read on to find out why I think Devtoberfest is a great way for developers to get themselves ready for SAP TechEd.</EM><BR />
<BR />
<span class="lia-inline-image-display-wrapper" image-alt="Intro1_Slightly_Bigger.gif" style="width: 800px;"><img src="https://community.sap.com/t5/image/serverpage/image-id/40371i98098B5C7FF9DCAF/image-size/large?v=v2&amp;px=999" role="button" title="Intro1_Slightly_Bigger.gif" alt="Intro1_Slightly_Bigger.gif" /></span><BR />
<BR />
The&nbsp;<A href="https://developers.sap.com/developer-advocates.html" target="_blank" rel="noopener noreferrer">Developer Advocates at SAP</A>&nbsp;have been busy over the past few weeks putting together the content for our now much anticipated annual event -&nbsp;<A href="https://groups.community.sap.com/t5/devtoberfest/gh-p/Devtoberfest" target="_blank" rel="noopener noreferrer">Devtoberfest</A>. If you don't know what Devtoberfest is, let me explain:<BR />
<UL><BR />
 	<LI>it's a month long open celebration of what makes us developers: coding and collaboration</LI><BR />
 	<LI>it's deliberately scheduled to take place in the run up to SAP TechEd</LI><BR />
 	<LI>it's a lot of fun, and combines learning, earning points, and the possibility of winning prizes</LI><BR />
</UL><BR />
There's a key activity that's common to any developer, regardless of their area of expertise, interests, and craft. That key activity is learning. The world of development, of software, architecture, operations, and more, is moving at an ever increasing pace, and if there's one thing I've perhaps&nbsp;<A href="https://blogs.sap.com/2018/10/01/monday-morning-thoughts-impostor-syndrome/" target="_blank" rel="noopener noreferrer">finally figured out</A>, after over 35 years as a developer in the SAP tech ecosphere, is that there's&nbsp;<A href="https://blogs.sap.com/2012/10/24/a-call-to-arms-for-abap-developers/comment-page-2/#comment-436250" target="_blank" rel="noopener noreferrer">always more learning to do</A>.<BR />
<BR />
Learning is something we should be doing regularly. It doesn't matter whether the subject matter is brand new, or you're revisiting something you have already had experience with, to go deeper. It doesn't matter if the relevance to your current work tasks is only fleeting, and it certainly doesn't matter how you prefer to learn. Reading, watching videos, completing tutorials, taking part in discussions, asking and answering questions,&nbsp;<A href="https://github.com/SAP-samples/sap-community-activity-badges" target="_blank" rel="nofollow noopener noreferrer">earning points &amp; badges</A>&nbsp;- each one of these activities helps you to level up. Back in the early 1990's, I was working at the largest SAP R/2 installation in the world, and learned a valuable lesson from one of my colleagues there. That was to make time to read. I recount the story in the blog post&nbsp;<A href="https://blogs.sap.com/2009/11/05/tech-skills-chat-with-jonerp-a-follow-on-story/" target="_blank" rel="noopener noreferrer">Tech Skills Chat with JonERP â A Follow-on Story</A>, and the key takeaway is: Always Be Reading.<BR />
<BR />
Anyway. Sometimes one learns best alone. And other times, it's great to learn together. And that's what Devtoberfest is all about.<BR />
<BR />
So over the next four weeks, I want to encourage you to make time for yourself as a developer, make time to learn, make time for Devtoberfest. Check out the many, many sessions we have for you over on the&nbsp;<A href="https://groups.community.sap.com/t5/devtoberfest/eb-p/devtoberfest-events" target="_blank" rel="noopener noreferrer">Devtoberfest events calendar</A>, focused on five main topics, each of which has a colour code, and each of which falls on the same day each week:<BR />
<UL><BR />
 	<LI>ð¢ Monday: ABAP &amp; CAP</LI><BR />
 	<LI>ð£ Tuesday: SAP Build / Low-Code and No-Code</LI><BR />
 	<LI><span class="lia-unicode-emoji" title=":red_circle:">ð´</span> Wednesday: Integration</LI><BR />
 	<LI><span class="lia-unicode-emoji" title=":blue_circle:">ðµ</span> Thursday: <A href="https://blogs.sap.com/2023/09/12/data-analytics-sessions-at-devtoberfest-2023/" target="_blank" rel="noopener noreferrer">Data &amp; Analytics</A> and <A href="https://blogs.sap.com/2023/09/18/ai-sessions-at-devtoberfest-2023/" target="_blank" rel="noopener noreferrer">AI</A></LI><BR />
 	<LI>ð  Friday: Frontend</LI><BR />
</UL><BR />
It won't surprise you to realise that these core topics are also the backbone of any great SAP TechEd event too. And that's no coincidence. We want you to be prepared for SAP TechEd by being up to date, with your learning neurons revitalised and ready for more action, and hungry for more knowledge.<BR />
<BR />
So dive in. Get started by heading over to and joining the&nbsp;<A href="https://groups.community.sap.com/t5/devtoberfest/gh-p/Devtoberfest" target="_blank" rel="noopener noreferrer">Devtoberfest group on SAP Community</A>. You'll find plenty of information in the&nbsp;<A href="https://groups.community.sap.com/t5/devtoberfest-blog-posts/bg-p/Devtoberfestblog-board" target="_blank" rel="noopener noreferrer">blog post area</A>&nbsp;on how things work, and what to do next.<BR />
<BR />
See you there!<BR />
<BR />
<HR /><BR />
<BR />
(<A href="https://qmacro.org/blog/posts/2023/09/18/devtoberfest-the-best-developer-prep-for-sap-teched/" target="_self" rel="nofollow noopener noreferrer">originally published on qmacro.org</A>)
---
SAP Developer Challenge - APIs - Task 12 - Use the access token to call the API endpoint
application-developmentforum-board
2023-08-30
https://community.sap.com/t5/application-development-discussions/sap-developer-challenge-apis-task-12-use-the-access-token-to-call-the-api/td-p/283202
2023-08-30-sap-developer-challenge-apis-task-12-use-the-access-token-to-call-the-api
<P>(Check out the <A href="https://blogs.sap.com/2023/08/01/sap-developer-challenge-apis/" target="_blank" rel="noopener noreferrer">SAP Developer Challenge - APIs</A> blog post for everything you need to know about the challenge to which this task relates!)</P><P>Well done for making it to the final task of this SAP Developer Challenge on APIs! You're going to finish on a high, by finally calling the API endpoint in the Core Services for SAP BTP API package. But not without a little diversion in the road on the way there <span class="lia-unicode-emoji" title=":slightly_smiling_face:">ð</span> Let's get to it!</P><H2 id="toc-hId-1652060615">Background</H2><P>So, at this point, you have completed steps 1, 2 and 3 in this group of tasks. And after a slight detour into JWTs in the previous task, you're now back on track, on the home straight, ready to complete step 4.</P><OL><LI>create an instance of the SAP Cloud Management Service, with a plan that contains the appropriate scope(s) that you need <span class="lia-unicode-emoji" title=":white_heavy_check_mark:">â</span></LI><LI>create a service key based on that instance <span class="lia-unicode-emoji" title=":white_heavy_check_mark:">â</span></LI><LI>use the details in the service key to request an access token <span class="lia-unicode-emoji" title=":white_heavy_check_mark:">â</span></LI><LI>use the access token thus obtained to authenticate a call to the API endpoint</LI></OL><P>To complete this task you're going to need to recall bits and pieces from prior tasks:</P><UL><LI>the GUID of the directory that you created in <A href="https://groups.community.sap.com/t5/application-development/sap-developer-challenge-apis-task-7-create-a-new-directory-in-an/td-p/280341" target="_blank" rel="noopener noreferrer">Task 7</A></LI><LI>the service key data that you obtained in <A href="https://groups.community.sap.com/t5/application-development/sap-developer-challenge-apis-task-9-create-a-service-key-for-api/td-p/281337" target="_blank" rel="noopener noreferrer">Task 9</A></LI><LI>the JSON object containing the access token and related metadata that you requested and received in <A href="https://groups.community.sap.com/t5/application-development/sap-developer-challenge-apis-task-10-request-an-oauth-access/m-p/281933" target="_blank" rel="noopener noreferrer">Task 10</A></LI></UL><P>How are you going to use each of these pieces of information?</P><P>Well, you'll need the directory GUID to replace the {directoryGUID} placeholder in the actual API endpoint that you're going to be calling (the endpoint detail was also mentioned in <A href="https://groups.community.sap.com/t5/application-development/sap-developer-challenge-apis-task-9-create-a-service-key-for-api/td-p/281337" target="_blank" rel="noopener noreferrer">Task 9</A>). In other words:</P><PRE>GET /accounts/v1/directories/{directoryGUID}</PRE><P>You'll need information from the service key data to know what the base URL of the Accounts Service API to use, because this /accounts/v1/directories/{directoryGUID} API endpoint belongs to that Accounts Service API, remember? Recall that the service key data looks like this (heavily redacted in the .credentials.uaa section for brevity):</P><DIV class=""><PRE><SPAN><SPAN class="">{</SPAN></SPAN>
<SPAN>  <SPAN class="">"credentials"</SPAN><SPAN class="">:</SPAN> <SPAN class="">{</SPAN></SPAN>
<SPAN>    <SPAN class="">"endpoints"</SPAN><SPAN class="">:</SPAN> <SPAN class="">{</SPAN></SPAN>
<SPAN>      <SPAN class="">"accounts_service_url"</SPAN><SPAN class="">:</SPAN> <SPAN class="">"https://accounts-service.cfapps.eu10.hana.ondemand.com"</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN>      <SPAN class="">"cloud_automation_url"</SPAN><SPAN class="">:</SPAN> <SPAN class="">"https://cp-formations.cfapps.eu10.hana.ondemand.com"</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN>      <SPAN class="">"entitlements_service_url"</SPAN><SPAN class="">:</SPAN> <SPAN class="">"https://entitlements-service.cfapps.eu10.hana.ondemand.com"</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN>      <SPAN class="">"events_service_url"</SPAN><SPAN class="">:</SPAN> <SPAN class="">"https://events-service.cfapps.eu10.hana.ondemand.com"</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN>      <SPAN class="">"external_provider_registry_url"</SPAN><SPAN class="">:</SPAN> <SPAN class="">"https://external-provider-registry.cfapps.eu10.hana.ondemand.com"</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN>      <SPAN class="">"metadata_service_url"</SPAN><SPAN class="">:</SPAN> <SPAN class="">"https://metadata-service.cfapps.eu10.hana.ondemand.com"</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN>      <SPAN class="">"order_processing_url"</SPAN><SPAN class="">:</SPAN> <SPAN class="">"https://order-processing.cfapps.eu10.hana.ondemand.com"</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN>      <SPAN class="">"provisioning_service_url"</SPAN><SPAN class="">:</SPAN> <SPAN class="">"https://provisioning-service.cfapps.eu10.hana.ondemand.com"</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN>      <SPAN class="">"saas_registry_service_url"</SPAN><SPAN class="">:</SPAN> <SPAN class="">"https://saas-manager.cfapps.eu10.hana.ondemand.com"</SPAN></SPAN>
<SPAN>    <SPAN class="">},</SPAN></SPAN>
<SPAN>    <SPAN class="">"grant_type"</SPAN><SPAN class="">:</SPAN> <SPAN class="">"user_token"</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN>    <SPAN class="">"sap.cloud.service"</SPAN><SPAN class="">:</SPAN> <SPAN class="">"com.sap.core.commercial.service.central"</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN>    <SPAN class="">"uaa"</SPAN><SPAN class="">:</SPAN> <SPAN class="">{</SPAN></SPAN>
<SPAN>      <SPAN class="">"apiurl"</SPAN><SPAN class="">:</SPAN> <SPAN class="">"https://api.authentication.eu10.hana.ondemand.com"</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN>      <SPAN class="">"clientid"</SPAN><SPAN class="">:</SPAN> <SPAN class="">"..."</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN>      <SPAN class="">"clientsecret"</SPAN><SPAN class="">:</SPAN> <SPAN class="">"..."</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN>      <SPAN class="">"..."</SPAN><SPAN class="">:</SPAN> <SPAN class="">"..."</SPAN></SPAN>
<SPAN>    <SPAN class="">}</SPAN></SPAN>
<SPAN>  <SPAN class="">}<BR /></SPAN></SPAN><SPAN><SPAN class="">}</SPAN></SPAN></PRE></DIV><P>So you will need the value of the .credentials.endpoints.accounts_service_url property from your service key data.</P><P>Finally, you'll need of course the access token you obtained in <A href="https://groups.community.sap.com/t5/application-development/sap-developer-challenge-apis-task-10-request-an-oauth-access/m-p/281933" target="_blank" rel="noopener noreferrer">Task 10</A>, i.e. the value of the access_token property in the JSON object that looks like this:</P><DIV class=""><PRE><SPAN><SPAN class="">{</SPAN></SPAN>
<SPAN>  <SPAN class="">"access_token"</SPAN><SPAN class="">:</SPAN> <SPAN class="">"eyJhbGciOiJSUzI1NiIs..."</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN>  <SPAN class="">"token_type"</SPAN><SPAN class="">:</SPAN> <SPAN class="">"bearer..."</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN>  <SPAN class="">"id_token"</SPAN><SPAN class="">:</SPAN> <SPAN class="">"eyJhbGciOiJSUzI1NiIs..."</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN>  <SPAN class="">"refresh_token"</SPAN><SPAN class="">:</SPAN> <SPAN class="">"e72b61a9a9304dde963e..."</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN>  <SPAN class="">"expires_in"</SPAN><SPAN class="">:</SPAN> <SPAN class="">43199</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN>  <SPAN class="">"scope"</SPAN><SPAN class="">:</SPAN> <SPAN class="">"cis-central!b14.glob..."</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN>  <SPAN class="">"jti"</SPAN><SPAN class="">:</SPAN> <SPAN class="">"579fea14a1cf47d7ab9e..."</SPAN></SPAN>
<SPAN><SPAN class="">}</SPAN></SPAN></PRE></DIV><P>"<EM>But wait!</EM>" I hear some of you cry. "<EM>Task 10 was last week. That's, err, more than 43199 seconds ago, right? What's going to happen?</EM>"</P><P>Well let's find out!</P><H3 id="toc-hId--1096609851">Attempting a call with an expired access token</H3><P>Let's assume for this experiment that:</P><UL><LI>the GUID of your directory is 57675710-7b16-43ec-b64a-ab14660c1b24</LI><LI>you have your service key data from Task 9 in a file called sk.json</LI><LI>your access token data from Task 10 in a file called tokendata.json</LI></UL><P>Let's also assume that the access token data in tokendata.json was indeed obtained on Friday last week, when Task 10 was published.</P><P>Using curl (but we'd see the same effect using any HTTP client, of course), let's see what the actual call to the API endpoint would look like:</P><PRE>curl \
  --verbose \
  --header "Authorization: Bearer $(jq -r .access_token tokendata.json)" \
  --url "$(jq -r .credentials.endpoints.accounts_service_url sk.json)/accounts/v1/directories/57675710-7b16-43ec-b64a-ab14660c1b24"</PRE><P>Invoking this returns something interesting, but not entirely unexpected. Here's part of the verbose output from that curl invocation:</P><PRE>&gt; GET /accounts/v1/directories/57675710-7b16-43ec-b64a-ab14660c1b24 HTTP/2
&gt; Host: accounts-service.cfapps.eu10.hana.ondemand.com
&gt; user-agent: curl/7.74.0
&gt; accept: */*
&gt; authorization: Bearer eyJhbGciOiJSUzI1Ni...
&gt;
&lt; HTTP/2 401
&lt; cache-control: no-cache, no-store, max-age=0, must-revalidate
&lt; date: Sat, 26 Aug 2023 09:30:06 GMT
&lt; expires: 0
&lt; pragma: no-cache
&lt; www-authenticate: Bearer error="invalid_token", error_description="An error occurred while attempting to decode the Jwt: Jwt expired at 2023-08-22T20:30:22Z", error_uri="https://tools.ietf.org/html/rfc6750#section-3.1"
&lt; x-content-type-options: nosniff
&lt; x-frame-options: DENY
&lt; x-vcap-request-id: 7a7c0c79-f3f7-4b19-651f-6c9b8dd2b013
&lt; x-xss-protection: 1; mode=block
&lt; content-length: 0
&lt; strict-transport-security: max-age=31536000; includeSubDomains; preload;</PRE><P>Ooh! Let's examine the content of that WWW-Authenticate HTTP response header:</P><PRE>error="invalid_token"
error_description="An error occurred while attempting to decode the Jwt: Jwt expired at 2023-08-22T20:30:22Z"
error_uri="https://tools.ietf.org/html/rfc6750#section-3.1"</PRE><P>The error description pretty much gives it to us straight. Our JWT, i.e. the access token, has expired! Now, this example is from my context, where I'd obtained an access token earlier last week. This is why the expiry in this example is on 22 Aug. In fact, let's double check.</P><H3 id="toc-hId-646200484">Checking when the access token expires</H3><P>Some of you may have been wondering about the expires_in property in the access token JSON object. This is a simple number of seconds (in this case 43199, to be precise) and represents the lifetime of the token. But how does this relate to actual dates and times? It is of course the lifetime starting from whenever the token was generated, so you may end up calculating the actual expiry date and time by adding those number of seconds on to the exact date and time you obtained the access token. But that can be cumbersome.</P><P>You can probably guess that the JWT contains expiry information too. In other words, expiry information is also contained within the access token itself, along with the list of scopes, and other things, that you discovered in the previous task. In fact, not only is the exact expiry date and time in there, but also the date and time when the token was issued. The eagle-eyed amongst you may have spotted the iat and exp properties in the payload part of the JWT in the previous task:</P><DIV class=""><PRE><SPAN><SPAN class="">{</SPAN></SPAN>
<SPAN>  <SPAN class="">"header"</SPAN><SPAN class="">:</SPAN> <SPAN class="">{</SPAN></SPAN>
<SPAN>    <SPAN class="">"alg"</SPAN><SPAN class="">:</SPAN> <SPAN class="">"..."</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN>    <SPAN class="">"jku"</SPAN><SPAN class="">:</SPAN> <SPAN class="">"https://c2d7b642trial-ga.authentication.eu10.hana.ondemand.com/token_keys"</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN>    <SPAN class="">"kid"</SPAN><SPAN class="">:</SPAN> <SPAN class="">"default-jwt-key-1281344942"</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN>    <SPAN class="">"typ"</SPAN><SPAN class="">:</SPAN> <SPAN class="">"..."</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN>    <SPAN class="">"jid"</SPAN><SPAN class="">:</SPAN> <SPAN class="">"iaVmTleRBCIVnVE7veQ9opMtlHnk+3DvKWWsjpsm542="</SPAN></SPAN>
<SPAN>  <SPAN class="">},</SPAN></SPAN>
<SPAN>  <SPAN class="">"payload"</SPAN><SPAN class="">:</SPAN> <SPAN class="">{</SPAN></SPAN>
<SPAN>    <SPAN class="">"..."</SPAN><SPAN class="">:</SPAN> <SPAN class="">"..."</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN>    <SPAN class="">"grant_type"</SPAN><SPAN class="">:</SPAN> <SPAN class="">"password"</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN>    <SPAN class="">"user_id"</SPAN><SPAN class="">:</SPAN> <SPAN class="">"965a393a-dc96-422f-87ac-9f3d8bb25142"</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN>    <SPAN class="">"origin"</SPAN><SPAN class="">:</SPAN> <SPAN class="">"sap.default"</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN>    <SPAN class="">"iat"</SPAN><SPAN class="">:</SPAN> <SPAN class="">1692693022</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN>    <SPAN class="">"exp"</SPAN><SPAN class="">:</SPAN> <SPAN class="">1692736222</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN>    <SPAN class="">"..."</SPAN><SPAN class="">:</SPAN> <SPAN class="">"..."</SPAN></SPAN>
<SPAN>  <SPAN class="">},</SPAN></SPAN>
<SPAN>  <SPAN class="">"signature"</SPAN><SPAN class="">:</SPAN> <SPAN class="">"ZVe_aqyLAyXwToCvG..."</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN>  <SPAN class="">"input"</SPAN><SPAN class="">:</SPAN> <SPAN class="">"eyJhbGciOiJSUzI1NiIsI..."</SPAN></SPAN>
<SPAN><SPAN class="">}</SPAN></SPAN></PRE></DIV><P>These properties are standard registered claim names, defined in the <A href="https://datatracker.ietf.org/doc/html/rfc7519" target="_blank" rel="noopener nofollow noreferrer">JSON Web Token (JWT) RFC7519</A>. Specifically, they are:</P><UL><LI>the <A href="https://datatracker.ietf.org/doc/html/rfc7519#section-4.1.6" target="_blank" rel="noopener nofollow noreferrer">"iat" (Issued At) Claim</A> which conveys when the token was issued</LI><LI>the <A href="https://datatracker.ietf.org/doc/html/rfc7519#section-4.1.4" target="_blank" rel="noopener nofollow noreferrer">"exp" (Expiration Time) Claim</A> which conveys when the token expires</LI></UL><P>The values of these claims (1692693022 and 1692736222) are UNIX epoch values, i.e. the number of seconds since the UNIX epoch (01 Jan 1970), a standard way to measure time.</P><P>Let's examine these a little closer, using the power of the command line and a bit of jq, because <A href="https://qmacro.org/tags/jq/" target="_blank" rel="noopener nofollow noreferrer">why not</A>. Getting the value of the actual access token from the JSON object in tokendata.json file, getting it parsed into its component JWT parts (using the jwt command line tool that we learned about in the previous task), and then taking the exp and iat values from the payload part of the JWT, subtracting one from the other:</P><PRE>jq \
  --raw-output \
  '.access_token' \
  tokendata.json \
  | jwt --output=json \
  | jq '.payload | .exp - .iat'</PRE><P>This emits, rather beautifully:</P><PRE>43200</PRE><BLOCKQUOTE><P>The --raw-output (which can be shortened to -r) tells jq to emit the raw string, rather than try to always emit valid JSON. So if the value is the string 'hello', then the raw version is hello whereas a valid value as far as JSON is concerned is "hello". Yes, a double-quoted string, all on its own, is syntactically valid JSON. See <A class="" href="https://www.json.org/json-en.html" target="_blank" rel="noopener nofollow noreferrer">https://www.json.org/json-en.html</A> for more details.</P></BLOCKQUOTE><P>What about the values themselves? Well, if you're running a standard UNIX style environment with the normal tools (such as in a Dev Space in the SAP Business Application Studio) you can use the standard date command to convert from an epoch value.</P><P>Starting almost the same as before, let's first emit the two epoch values:</P><PRE>jq \
  -r \
  '.access_token' \
  tokendata.json \
  | jwt --output=json \
  | jq '.payload | .iat, .exp'</PRE><P>This produces:</P><PRE>1692693022
1692736222</PRE><P>We can then feed those into the date command, using the --date (or -d) parameter to display the date and time denoted by the value that follows it, which will be the epoch time preceded with an @ sign to symbolize "this value is the number of seconds since the epoch":</P><PRE>jq \
  -r \
  '.access_token' \
  tokendata.json \
  | jwt --output=json \
  | jq -r '.payload | "@\(.iat)", "@\(.exp)"' \
  | while read -r epochvalue; do
      date -d "$epochvalue";
  done</PRE><P>This produces:</P><PRE>Tue Aug 22 08:30:22 UTC 2023
Tue Aug 22 20:30:22 UTC 2023</PRE><P>It was last Tuesday morning that I requested and received this access token. And we can see that it expired exactly 12 hours (43200 seconds) later, at Tue Aug 22 20:30:22 UTC 2023. And lo and behold, this is precisely the date and time given in the error description returned in the response where we got an HTTP 401 (UNAUTHORIZED) status code:</P><PRE>error_description="An error occurred while attempting to decode the Jwt: Jwt expired at 2023-08-22T20:30:22Z"</PRE><P>So what are we going to do?</P><P>Of course, the sledgehammer approach would be to request another access token. But that's bad practice, because the Resource Owner Password Grant grant type requires the resource owner's credentials, and for the consumer script to hold onto them for such purposes is (or should be) frowned upon, and for the script to re-request them from the resource owner each time is an anti-pattern.</P><P>Instead, we can request a new token via the <A href="https://oauth.net/2/grant-types/refresh-token/" target="_blank" rel="noopener nofollow noreferrer">Refresh Token grant type</A>, which "<EM>allows clients to continue to have a valid access token without further interaction with the user</EM>". Isn't OAuth lovely?</P><H3 id="toc-hId--1905956477">Using the refresh token grant type</H3><P>So we have everything we need already to request a fresh token. This is what must be supplied in such a call:</P><UL><LI>the client's identity (the client ID and secret)</LI><LI>the grant type, which must be refresh_token</LI><LI>the actual refresh token itself</LI></UL><P>The refresh token itself was supplied along with the original access token, in the JSON object returned from the call in <A href="https://groups.community.sap.com/t5/application-development/sap-developer-challenge-apis-task-10-request-an-oauth-access/m-p/281933" target="_blank" rel="noopener noreferrer">Task 10</A>, which we saw briefly earlier in this section:</P><DIV class=""><PRE><SPAN><SPAN class="">{</SPAN></SPAN>
<SPAN> <SPAN class="">"access_token"</SPAN><SPAN class="">:</SPAN> <SPAN class="">"eyJhbGciOiJSUzI1NiIs..."</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN> <SPAN class="">"token_type"</SPAN><SPAN class="">:</SPAN> <SPAN class="">"bearer..."</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN> <SPAN class="">"id_token"</SPAN><SPAN class="">:</SPAN> <SPAN class="">"eyJhbGciOiJSUzI1NiIs..."</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN> <SPAN class="">"refresh_token"</SPAN><SPAN class="">:</SPAN> <SPAN class="">"e72b61a9a9304dde963e..."</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN> <SPAN class="">"expires_in"</SPAN><SPAN class="">:</SPAN> <SPAN class="">43199</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN> <SPAN class="">"scope"</SPAN><SPAN class="">:</SPAN> <SPAN class="">"cis-central!b14.glob..."</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN> <SPAN class="">"jti"</SPAN><SPAN class="">:</SPAN> <SPAN class="">"579fea14a1cf47d7ab9e..."</SPAN></SPAN>
<SPAN><SPAN class="">}</SPAN></SPAN></PRE></DIV><P>And of course, we still have the client ID and client secret in the service key data (stored in the tokendata.json file).</P><P>Where do we send such a call? To the same Authorization Server endpoint as before, i.e. to the /oauth/token endpoint we've used already.</P><P>So a token refresh call looks very similar to the previous request when the grant type was "password". Here's the structure:</P><PRE>curl \
  --user '&lt;clientid&gt;:&lt;clientsecret&gt;' \
  --data 'grant_type=refresh_token' \
  --url 'authorizationserver/oauth/token'</PRE><P>Note that the resource owner credentials are conspicuous by their absence here. They are not needed, and should not be required!</P><P>Here's an actual call. Values are needed from two places - the service key data and the access token JSON object.</P><P>From the service key data, the &lt;clientid&gt;:&lt;clientsecret&gt; construction is achieved with a bit of jq inside a <A href="https://www.gnu.org/software/bash/manual/html_node/Command-Substitution.html" target="_blank" rel="noopener nofollow noreferrer">command substitution</A> expansion, joining the .clientid and .clientsecret values (found within the .credentials.uaa value, which is an object) with a colon. And the retrieval of the actual authorization server details is also done in a similar way, taking the value of the .credentials.uaa.url property in the service key data.</P><P>And from the access token JSON object, the refresh_token value is taken.</P><PRE>curl \
  --user "$(jq -r '.credentials.uaa|[.clientid,.clientsecret]|join(":")' sk.json)" \
  --data 'grant_type=refresh_token' \
  --data-urlencode "refresh_token=$(jq -r .refresh_token tokendata.json)" \
  --url "$(jq -r .credentials.uaa.url sk.json)/oauth/token" \
  | tee tokendata.json</PRE><BLOCKQUOTE><P>The venerable UNIX command tee is used here to save the output (the new access token and corresponding metadata in a JSON object) in a file (tokendata.json) as well as letting it pass through to STDOUT so we see it too. It's called tee because it's like using a <A href="https://www.screwfix.com/c/heating-plumbing/pipe-fittings/cat831504?pipefittingproducttype=tees" target="_blank" rel="noopener nofollow noreferrer">tee pipe fitting</A> in a plumbing context.</P></BLOCKQUOTE><P>And what do you know? We get a freshly minted access token to use, with 12 more hours on the clock:</P><DIV class=""><PRE><SPAN><SPAN class="">{</SPAN></SPAN>
<SPAN>  <SPAN class="">"access_token"</SPAN><SPAN class="">:</SPAN> <SPAN class="">"eyJhbGciOiJSUzI1Niq2..."</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN>  <SPAN class="">"token_type"</SPAN><SPAN class="">:</SPAN> <SPAN class="">"bearer..."</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN>  <SPAN class="">"id_token"</SPAN><SPAN class="">:</SPAN> <SPAN class="">"eyJhbGciOiJSUzI1NiJS..."</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN>  <SPAN class="">"refresh_token"</SPAN><SPAN class="">:</SPAN> <SPAN class="">"e72b61a9a9304dae263e..."</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN>  <SPAN class="">"expires_in"</SPAN><SPAN class="">:</SPAN> <SPAN class="">43199</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN>  <SPAN class="">"scope"</SPAN><SPAN class="">:</SPAN> <SPAN class="">"cis-central!b14.glob..."</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN>  <SPAN class="">"jti"</SPAN><SPAN class="">:</SPAN> <SPAN class="">"579fea14a1cf47d7ab9e..."</SPAN></SPAN>
<SPAN><SPAN class="">}</SPAN></SPAN></PRE></DIV><P>Nice!</P><BLOCKQUOTE><P>It's useful to know as well that you can refresh your token before the expiry. This gives you a chance to build in a robust token management system into your client, and avoid the risk of falling between the gaps between validity periods.</P></BLOCKQUOTE><H3 id="toc-hId--163146142">Using a valid access token</H3><P>Now that we have a fresh, valid access token, we can complete the journey and make the call to the API endpoint. There's nothing special here, so let's get right to trying it out. In fact, the call is going to be exactly the same as before; the only thing that is different now is that the access token is still valid:</P><PRE>curl \
  --silent \
  --header "Authorization: Bearer $(jq -r .access_token tokendata.json)" \
  --url "$(jq -r .credentials.endpoints.accounts_service_url sk.json)/accounts/v1/directories/57675710-7b16-43ec-b64a-ab14660c1b24"</PRE><BLOCKQUOTE><P>The --silent parameter here is used to suppress the "progress bar" that curl shows while retrieving a resource.</P></BLOCKQUOTE><P>And the call is successful, emitting ...</P><P>Well.</P><P>That would be giving the task away, wouldn't it!</P><H2 id="toc-hId-1776177698">Your task</H2><P>Your task is to ensure you have a valid access token. Ideally, you should work through the process above, using your old (and expired) access token to make a first call to the API endpoint, using the GUID of your directory that you created.</P><P>You should see the HTTP 401 status code and look at the value of the WWW-Authenticate header in the HTTP response. You should embrace all that this entails and enjoy matching up the expiration date and time stated in that header, and try to match it up with the value of the exp claim in the payload of the JWT that is your old access token.</P><P>Then you should run through the process of requesting a new token, using the Refresh Token grant type explained above.</P><P>And with this fresh access token, you should make the call again to the API endpoint, to get the details of the directory that you created way back in <A href="https://groups.community.sap.com/t5/application-development/sap-developer-challenge-apis-task-7-create-a-new-directory-in-an/td-p/280341" target="_blank" rel="noopener noreferrer">Task 7</A>.</P><P>Once you have this directory detail, which will be in the form of a JSON object, you should take the value of two of the properties in that detail, join them together with a colon, and send them to the hash service. Then, as always, and as described in <A href="https://groups.community.sap.com/t5/application-development/sap-developer-challenge-apis-task-0-learn-to-share-your-task/td-p/276058" target="_blank" rel="noopener noreferrer">Task 0</A>, you should reply to this discussion thread with the hash that's returned.</P><P>You need to take the values from these two properties:</P><UL><LI>displayName</LI><LI>directoryType</LI></UL><P>And don't forget to concatenate them with a colon.</P><P>That's it ... you've done it!</P><OL><LI>create an instance of the SAP Cloud Management Service, with a plan that contains the appropriate scope(s) that you need <span class="lia-unicode-emoji" title=":white_heavy_check_mark:">â</span></LI><LI>create a service key based on that instance <span class="lia-unicode-emoji" title=":white_heavy_check_mark:">â</span></LI><LI>use the details in the service key to request an access token <span class="lia-unicode-emoji" title=":white_heavy_check_mark:">â</span></LI><LI>use the access token thus obtained to authenticate a call to the API endpoint <span class="lia-unicode-emoji" title=":white_heavy_check_mark:">â</span></LI></OL><P>Great work.</P><H2 id="toc-hId--775979263">Hints and tips</H2><P>Most of what you'll need has already been covered this time in the narrative within the Background section. And you've all worked so hard with these tasks over the month that you're now well prepared for working with APIs in the SAP universe, dealing with OAuth, endpoints, service key information and more.</P><P>Well done!</P><H2 id="toc-hId-966831072">For discussion</H2><P>In the directory details that were returned from your successful call to the API endpoint, did you also spot the label information that you added during the directory's creation in Task 7? Where was it? What else did you find interesting about the data returned?</P>
---
SAP Developer Challenge - APIs - Task 11 - Examine the access token for scopes contained
application-developmentforum-board
2023-08-28
https://community.sap.com/t5/application-development-discussions/sap-developer-challenge-apis-task-11-examine-the-access-token-for-scopes/td-p/282366
2023-08-28-sap-developer-challenge-apis-task-11-examine-the-access-token-for-scopes
<P>(Check out the <A href="https://blogs.sap.com/2023/08/01/sap-developer-challenge-apis/" target="_blank" rel="noopener noreferrer">SAP Developer Challenge - APIs</A> blog post for everything you need to know about the challenge to which this task relates!)</P><P>You're almost ready to call the API endpoint to examine the details of the directory you created back in <A href="https://groups.community.sap.com/t5/application-development/sap-developer-challenge-apis-task-7-create-a-new-directory-in-an/td-p/280341" target="_blank" rel="noopener noreferrer">Task 7</A>. But as we're going deliberately slowly and surely, let's take some time in this task to <A href="https://qmacro.org/blog/posts/2017/02/19/the-beauty-of-recursion-and-list-machinery/#initialrecognition" target="_blank" rel="noopener nofollow noreferrer">stare at</A> the access token itself for a few minutes, to see what we can discover.</P><H2 id="toc-hId-1652031975">Background</H2><P>In <A href="https://groups.community.sap.com/t5/application-development/sap-developer-challenge-apis-task-10-request-an-oauth-access/m-p/281933" target="_blank" rel="noopener noreferrer">the previous task</A> you obtained an access token, by completing the flow described by the OAuth Resource Owner Password Credentials grant type. The access token was made available to you in a JSON object which contained not only the access token itself, but other values. Here's that example from the previous task, with the expires_in property added back in:</P><DIV class=""><PRE><SPAN><SPAN class="">{</SPAN></SPAN>
<SPAN>  <SPAN class="">"access_token"</SPAN><SPAN class="">:</SPAN> <SPAN class="">"eyJhbGciOiJSUzI1NiIs..."</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN>  <SPAN class="">"token_type"</SPAN><SPAN class="">:</SPAN> <SPAN class="">"bearer..."</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN>  <SPAN class="">"id_token"</SPAN><SPAN class="">:</SPAN> <SPAN class="">"eyJhbGciOiJSUzI1NiIs..."</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN>  <SPAN class="">"refresh_token"</SPAN><SPAN class="">:</SPAN> <SPAN class="">"e72b61a9a9304dde963e..."</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN>  <SPAN class="">"expires_in"</SPAN><SPAN class="">:</SPAN> <SPAN class="">43199</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN>  <SPAN class="">"scope"</SPAN><SPAN class="">:</SPAN> <SPAN class="">"cis-central!b14.glob..."</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN>  <SPAN class="">"jti"</SPAN><SPAN class="">:</SPAN> <SPAN class="">"579fea14a1cf47d7ab9e..."</SPAN></SPAN>
<SPAN><SPAN class="">}</SPAN></SPAN></PRE></DIV><P>One of the values also provided is scope, which contains a whitespace separated list of scopes. If you were to parse the value, you'd see the list. Here's one way to do that (truncating the list to the first 10 scope items), assuming the JSON object representing the token data is in a file called tokendata.json:</P><PRE>jq '.scope|split(" ")[:10]' tokendata.json</PRE><P>This would produce:</P><DIV class=""><PRE><SPAN><SPAN class="">[</SPAN></SPAN>
<SPAN>  <SPAN class="">"cis-central!b14.global-account.subaccount.update"</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN>  <SPAN class="">"cis-central!b14.global-account.update"</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN>  <SPAN class="">"user_attributes"</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN>  <SPAN class="">"cis-central!b14.global-account.subaccount.delete"</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN>  <SPAN class="">"cis-central!b14.global-account.subaccount.read"</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN>  <SPAN class="">"cis-central!b14.job.read"</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN>  <SPAN class="">"cis-central!b14.catalog.product.update"</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN>  <SPAN class="">"cis-central!b14.catalog.product.delete"</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN>  <SPAN class="">"cis-central!b14.global-account.account-directory.create"</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN>  <SPAN class="">"cis-central!b14.directory.entitlement.update"</SPAN></SPAN>
<SPAN><SPAN class="">]</SPAN></SPAN></PRE></DIV><P>This metadata, data about the access token, essentially, is useful to us to have. But what's more interesting is how this scope information is conveyed in the actual call to the API endpoint.</P><P>It's specifically the value of the access_token property from the JSON object that is sent in the Authorization header of the HTTP request made, as you learned about in <A href="https://groups.community.sap.com/t5/application-development/sap-developer-challenge-apis-task-9-create-a-service-key-for-api/td-p/281337" target="_blank" rel="noopener noreferrer">Task 9</A>. The other values in the JSON object (the id_token, refresh_token, expires_in values, and so on) don't go anywhere, they're just for us, the consumer, to use in managing our use of that access token (including knowing when it will expire and requesting a refresh).</P><P>So the scope information for this access token appears to be conveyed in a property (scope) that doesn't get sent to the resource server. How does the server then know whether to respond with the requested information or not?</P><P>To answer this question, we're going to go on a bit of a digression in this task.</P><P>So.</P><P>Have you ever wondered about the value of the access token itself? It's a very large, opaque string. In fact, how long is it?</P><PRE>jq -r '"\(.access_token|length) bytes"' tokendata.json</PRE><P>Pretty long!</P><PRE>3912 bytes</PRE><P>Surely there must be a reason for something so large?</P><H3 id="toc-hId--1096638491">The anatomy of the access token</H3><P>Yes. It's actually a <A href="https://en.wikipedia.org/wiki/JSON_Web_Token" target="_blank" rel="noopener nofollow noreferrer">JSON Web Token</A>, or JWT (often pronounced "jot"). A JWT contains structured data, which is fascinating to peek at. And that's what you're going to do in this task.</P><P>First of all, it's worth knowing that the content of a JWT is organized into different sections, including:</P><UL><LI>Header</LI><LI>Payload</LI><LI>Signature</LI></UL><P>The Header contains a small amount of data about the JWT itself, and consists of values for a series of <A href="https://datatracker.ietf.org/doc/html/rfc7515#section-4.1" target="_blank" rel="noopener nofollow noreferrer">well-defined (in RFC7515) parameters</A>, the names of which are all three characters in length (to keep things short). Examples are "alg" which identifies the algorithm used to secure the data, "jku", the value of which is a URL that points to a JSON Web Key Set used in the digital signature, and "typ" which conveys the type of content it is.</P><P>The Payload section of the JWT is where the data that's most interesting to us lives, or rather most interesting to the server that will handle our requests. It's where the scopes (that we saw earlier) are stored, amongst many other details.</P><P>The Signature is essentially a signed checksum of the entire contents.</P><P>So the answer to the question above is that the server knows how to respond to requests because there's enough information passed inside the access token (being in the form of a JWT), including a list of scopes that the token conveys for the consumer, for it to decide.</P><H2 id="toc-hId-842685349">Your task</H2><P>Your task is to examine the contents of the access token, by treating it for what it is, i.e. a JWT. You should take information from the Header, and information from the Payload, and combine it into a value that you should send to the hash service, and then put the resulting hash into a reply to this thread, as always, and as described in <A href="https://groups.community.sap.com/t5/application-development/sap-developer-challenge-apis-task-0-learn-to-share-your-task/m-p/276058" target="_blank" rel="noopener noreferrer">Task 0</A>.</P><P>What specifically is that information?</P><UL><LI>from the Header, you should take the value of the "alg" and "typ" parameters</LI><LI>from the Payload, you should count the number of scopes conveyed</LI></UL><P>You should then combine those three pieces of information like this, using colons as separators:</P><PRE>&lt;value-of-alg&gt;:&lt;value-of-typ&gt;:&lt;number-of-scopes&gt;</PRE><P>Let's look at the partial contents of an imaginary (but typical) JWT in this context, to illustrate. This illustration assumes that the access token JSON data (such as you retrieved in the previous task, <A href="https://groups.community.sap.com/t5/application-development/sap-developer-challenge-apis-task-10-request-an-oauth-access/m-p/281933" target="_blank" rel="noopener noreferrer">Task 10</A>) is in a file called tokendata.json. This illustration is also based on using the jwt-cli package, and the command line tool it provides, as described in the "Hints and tips" section below.</P><P>So, to pick out the value of the access token (from the access_token property in the JSON object in tokendata.json), and then to treat that access token value for what it is, i.e. a JWT, and ask for the JWT to be expanded into its component parts, you'd do something like this (note the --output=json option to produce nicely machine-parseable output!):</P><PRE>jq -r .access_token tokendata.json | jwt --output=json</PRE><P>What is emitted is something like this (heavily redacted, for brevity, and with some values elided while others are replaced, for the illustration):</P><DIV class=""><PRE><SPAN><SPAN class="">{</SPAN></SPAN>
<SPAN>  <SPAN class="">"header"</SPAN><SPAN class="">:</SPAN> <SPAN class="">{</SPAN></SPAN>
<SPAN>    <SPAN class="">"alg"</SPAN><SPAN class="">:</SPAN> <SPAN class="">"ABCDE"</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN>    <SPAN class="">"jku"</SPAN><SPAN class="">:</SPAN> <SPAN class="">"https://c2d7b642trial-ga.authentication.eu10.hana.ondemand.com/token_keys"</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN>    <SPAN class="">"kid"</SPAN><SPAN class="">:</SPAN> <SPAN class="">"default-jwt-key-1281344942"</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN>    <SPAN class="">"typ"</SPAN><SPAN class="">:</SPAN> <SPAN class="">"XYZ"</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN>    <SPAN class="">"jid"</SPAN><SPAN class="">:</SPAN> <SPAN class="">"iaVmTleRBCIVnVE7veQ9opMtlHnk+3DvKWWsjpsm542="</SPAN></SPAN>
<SPAN>  <SPAN class="">},</SPAN></SPAN>
<SPAN>  <SPAN class="">"payload"</SPAN><SPAN class="">:</SPAN> <SPAN class="">{</SPAN></SPAN>
<SPAN>    <SPAN class="">"jti"</SPAN><SPAN class="">:</SPAN> <SPAN class="">"579fea14a1cf47d7ab9e5bf4c9d15d42"</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN>    <SPAN class="">"ext_attr"</SPAN><SPAN class="">:</SPAN> <SPAN class="">{</SPAN></SPAN>
<SPAN>      <SPAN class="">"enhancer"</SPAN><SPAN class="">:</SPAN> <SPAN class="">"XSUAA"</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN>      <SPAN class="">"globalaccountid"</SPAN><SPAN class="">:</SPAN> <SPAN class="">"7da58aab-6c60-4492-a95b-b1ed3139e242"</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN>      <SPAN class="">"zdn"</SPAN><SPAN class="">:</SPAN> <SPAN class="">"c2d7b642-ga"</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN>      <SPAN class="">"serviceinstanceid"</SPAN><SPAN class="">:</SPAN> <SPAN class="">"f118abbb-b387-41b1-970f-bf4f0309c142"</SPAN></SPAN>
<SPAN>    <SPAN class="">},</SPAN></SPAN>
<SPAN>    <SPAN class="">"xs.system.attributes"</SPAN><SPAN class="">:</SPAN> <SPAN class="">{</SPAN></SPAN>
<SPAN>      <SPAN class="">"xs.rolecollections"</SPAN><SPAN class="">:</SPAN> <SPAN class="">[</SPAN></SPAN>
<SPAN>        <SPAN class="">"Global Account Administrator"</SPAN></SPAN>
<SPAN>      <SPAN class="">]</SPAN></SPAN>
<SPAN>    <SPAN class="">},</SPAN></SPAN>
<SPAN>    <SPAN class="">"given_name"</SPAN><SPAN class="">:</SPAN> <SPAN class="">"DJ"</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN>    <SPAN class="">"xs.user.attributes"</SPAN><SPAN class="">:</SPAN> <SPAN class="">{},</SPAN></SPAN>
<SPAN>    <SPAN class="">"family_name"</SPAN><SPAN class="">:</SPAN> <SPAN class="">"Adams"</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN>    <SPAN class="">"sub"</SPAN><SPAN class="">:</SPAN> <SPAN class="">"965a393a-dc96-422f-87ac-9f3d8bb25142"</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN>    <SPAN class="">"scope"</SPAN><SPAN class="">:</SPAN> <SPAN class="">[</SPAN></SPAN>
<SPAN>      <SPAN class="">"cis-central!b14.global-account.subaccount.update"</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN>      <SPAN class="">"cis-central!b14.global-account.update"</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN>      <SPAN class="">"...another 39 scopes..."</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN>      <SPAN class="">"cis-central!b14.global-account.subaccount.create"</SPAN></SPAN>
<SPAN>    <SPAN class="">]</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN>    <SPAN class="">"client_id"</SPAN><SPAN class="">:</SPAN> <SPAN class="">"sb-ut-f86082c9-7fbf-4e1e-8310-f5d018dab542-clone!b254742|cis-central!b14"</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN>    <SPAN class="">"cid"</SPAN><SPAN class="">:</SPAN> <SPAN class="">"sb-ut-f86082c9-7fbf-4e1e-8310-f5d018dab542-clone!b254742|cis-central!b14"</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN>    <SPAN class="">"azp"</SPAN><SPAN class="">:</SPAN> <SPAN class="">"sb-ut-f86082c9-7fbf-4e1e-8310-f5d018dab542-clone!b254742|cis-central!b14"</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN>    <SPAN class="">"grant_type"</SPAN><SPAN class="">:</SPAN> <SPAN class="">"password"</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN>    <SPAN class="">"user_id"</SPAN><SPAN class="">:</SPAN> <SPAN class="">"965a393a-dc96-422f-87ac-9f3d8bb25142"</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN>    <SPAN class="">"origin"</SPAN><SPAN class="">:</SPAN> <SPAN class="">"sap.default"</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN>    <SPAN class="">"iat"</SPAN><SPAN class="">:</SPAN> <SPAN class="">1692693022</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN>    <SPAN class="">"exp"</SPAN><SPAN class="">:</SPAN> <SPAN class="">1692736222</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN>    <SPAN class="">"..."</SPAN><SPAN class="">:</SPAN> <SPAN class="">"..."</SPAN></SPAN>
<SPAN>  <SPAN class="">},</SPAN></SPAN>
<SPAN>  <SPAN class="">"signature"</SPAN><SPAN class="">:</SPAN> <SPAN class="">"ZVe_aqyLAyXwToCvG..."</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN>  <SPAN class="">"input"</SPAN><SPAN class="">:</SPAN> <SPAN class="">"eyJhbGciOiJSUzI1NiIsI..."</SPAN></SPAN>
<SPAN><SPAN class="">}</SPAN></SPAN></PRE></DIV><P>So the three values in the result you should construct, thus:</P><PRE>&lt;value-of-alg&gt;:&lt;value-of-typ&gt;:&lt;number-of-scopes&gt;</PRE><P>should be, in order:</P><UL><LI>&lt;value-of-alg&gt;: the value of the .header.alg property</LI><LI>&lt;value-of-typ&gt;: the value of the .header.typ property</LI><LI>&lt;number-of-scopes&gt;: the length of the array that is the value of the .payload.scope property</LI></UL><P>For example:</P><PRE>ABCDE:XYZ:42</PRE><H2 id="toc-hId--1709471612">Hints and tips</H2><P>There are many tools and libraries with which JWT tokens can be parsed, even <A href="https://jwt.io/" target="_blank" rel="noopener nofollow noreferrer">online facilities</A> ... though you should think twice before sending authorization data to third party websites - it's better to use a tool that you have locally.</P><P>For tools to use locally, you might wish to check out the NPM package <A href="https://www.npmjs.com/package/jwt-cli" target="_blank" rel="noopener nofollow noreferrer">jwt-cli</A> which, if you install it globally, will give you a command line tool called jwt.</P><P>It's one of my standard globally-installed NPM-based tools, which you can see here, via:</P><PRE>npm list --global</PRE><P>This emits:</P><PRE>/home/user/.npm-global/lib
+-- @sap/cds-dk@7.0.2
+-- @sap/generator-fiori@1.9.4
+-- @sapui5/generator-sapui5-templates@1.71.6
+-- @ui5/cli@3.1.1
+-- bash-language-server@4.9.1
+-- docsify-cli@4.4.4
+-- eslint@8.39.0
+-- fx@28.0.0
+-- http-server@14.1.1
+-- httpie@1.1.2
+-- jwt-cli@2.0.0
+-- lodash@4.17.21
+-- lorem-ipsum@2.0.8
+-- markdownlint-cli@0.34.0
+-- prettier@2.8.8
+-- ramda@0.29.0
+-- url-decode-encode-cli@2.1.0
+-- yarn@1.22.19
`-- yo@4.3.1</PRE><P>With the jwt tool, you can decode such JWT access tokens. And with jwt's --output=json option, it's even better!</P><H2 id="toc-hId-33338723">For discussion</H2><P>The expires_in property, that accompanies the access token returned, has an interesting value. It's 1 second less than 12 hours. Do you think that's deliberate? Calculated?</P>
---
SAP Developer Challenge - APIs - Task 10 - Request an OAuth access token
application-developmentforum-board
2023-08-25
https://community.sap.com/t5/application-development-discussions/sap-developer-challenge-apis-task-10-request-an-oauth-access-token/td-p/281933
2023-08-25-sap-developer-challenge-apis-task-10-request-an-oauth-access-token
<P>(Check out the <A href="https://blogs.sap.com/2023/08/01/sap-developer-challenge-apis/" target="_blank" rel="noopener noreferrer">SAP Developer Challenge - APIs</A> blog post for everything you need to know about the challenge to which this task relates!)</P><P>This task brings you one more step closer to being able to call the API endpoint to look at the details of the directory you created in your SAP BTP account <A href="https://groups.community.sap.com/t5/application-development/sap-developer-challenge-apis-task-7-create-a-new-directory-in-an/td-p/280341" target="_blank" rel="noopener noreferrer">in Task 7</A>, in that you'll learn how to request an access token to use as the credentials in the API call.</P><H2 id="toc-hId-1652007854">Background</H2><P>In the Background section to <A href="https://groups.community.sap.com/t5/application-development/sap-developer-challenge-apis-task-8-create-an-instance-of-the/td-p/280681" target="_blank" rel="noopener noreferrer">Task 8</A>, while you were in "reading mode", you looked at the SAP Help Portal documentation <A href="https://help.sap.com/docs/btp/sap-business-technology-platform/account-administration-using-apis-of-sap-cloud-management-service" target="_blank" rel="noopener noreferrer">Account Administration Using APIs of the SAP Cloud Management Service</A>. The first child node in this documentation that you come across is essential to this task. It's <A href="https://help.sap.com/docs/btp/sap-business-technology-platform/getting-access-token-for-sap-cloud-management-service-apis" target="_blank" rel="noopener noreferrer">Getting an Access Token for SAP Cloud Management Service APIs</A> and describes how to go about requesting an access token.</P><P>OAuth access tokens are obtained through various means, depending, to an extent, on what's being protected, who owns the resource, and so on. There are different so-called "grant types" in OAuth. They're sometimes also referred to as "flows". There's an archived CodeJam content project over on GitHub, in the SAP-archive organization, that gives a brief overview of these grant types. It's <A href="https://github.com/SAP-archive/cloud-apis-virtual-event/tree/main/exercises/02" target="_blank" rel="noopener nofollow noreferrer">Exercise 02 - Understand OAuth 2.0 at a high level</A>.</P><BLOCKQUOTE><P>Being in the SAP-archive organization indicates that the content is no longer being maintained. But this particular exercise content is still valid and worthwhile reading.</P></BLOCKQUOTE><P>OK, back to the SAP Help Portal documentation. You'll see that "<EM>the APIs of the SAP Cloud Management service for SAP BTP are protected with the OAuth 2.0 Password grant type</EM>". In some cases the Client Credentials grant type is at play, but not here in our context (mostly as we created the service instance in Cloud Foundry, for reasons explained in the corresponding task). So far so good.</P><P>And just to remind you of where you are in this group of tasks, you've now done steps 1 and 2 of the steps introduced in Task 8. This time you're tackling step 3.</P><OL><LI>create an instance of the SAP Cloud Management Service, with a plan that contains the appropriate scope(s) that you need <span class="lia-unicode-emoji" title=":white_heavy_check_mark:">â</span></LI><LI>create a service key based on that instance <span class="lia-unicode-emoji" title=":white_heavy_check_mark:">â</span></LI><LI>use the details in the service key to request an access token</LI><LI>use the access token thus obtained to authenticate a call to the API endpoint</LI></OL><P>So you'll need to follow the SAP Help Portal instructions to request an access token. Requesting an access token involves making an HTTP call to an Authorization Server endpoint. In making such a request, information must be supplied to specify and credentialize that request. The information required here, being a request for access to a resource that's protected with the Resource Owner Password Credentials grant type (you can see why this is shortened to just "Password" grant type, right?) is:</P><UL><LI>the type of grant type in play</LI><LI>the resource owner's username and password (this is the "Resource Owner" part of the grant type)</LI><LI>the client's identity (the identity of the client that will be making the API calls)</LI></UL><P>We know that:</P><UL><LI>the grant type in play is "password"</LI><LI>you are the owner of the resources that will be requested (the API facilities via the instance of the service you created, in your Cloud Foundry environment)</LI><LI>there's an ad hoc identity (client ID) and corresponding secret (client secret) generated that is used to represent the client that will be making the requests</LI></UL><P>The client (in the case of this group of tasks) will just be the HTTP client you use to make the calls. It could just as well be a script, a program, or another system.</P><P>You know where the resources are that you'll be requesting (the API endpoints), you know who the resource owner is (you yourself) but where is this client ID and client secret? Yes! They're in the service key data that you obtained in the previous task!</P><P>OK. To finish off this section, it's worth repeating what the section in the <A href="https://github.com/SAP-archive/cloud-apis-virtual-event/tree/main/exercises/02#3-understand-oauth-20-grant-types" target="_blank" rel="noopener nofollow noreferrer">Understand OAuth 2.0 at a high level</A> content says for this Resource Owner Password Credentials grant type:</P><BLOCKQUOTE><P>This is a flow designed for use in the situation where there is strong trust between the Client and the Resource Owner - more specifically, when the Resource Owner trusts the Client (application) so much that they are willing to give their username &amp; password credentials to the Client, which can then use them to request an access token. One redeeming feature of this grant type is that the Client does not have to store the credentials, as the access token granted can be long-lived, and / or the lifetime of the token can be extended by use of a refresh token.</P></BLOCKQUOTE><P>OAuth as a concept is wonderful, but it does take some thinking time to let things sink in. Embrace the wonder of OAuth and its many facets, and enjoy this task!</P><H2 id="toc-hId--900149107">Your task</H2><P>Your task, then, is to request an access token in this context of the Resource Owner Password Credentials grant type with which the API endpoint(s) of the Accounts Service API are protected.</P><P>When your request is successful, you'll obtain not only an access token, but other data with it, in a JSON object. Here's what it will look like:</P><pre class="lia-code-sample language-json"><code>{
  "access_token": "eyJhbGciOiJSUzI1NiIs...",
  "token_type": "bearer...",
  "id_token": "eyJhbGciOiJSUzI1NiIs...",
  "refresh_token": "e72b61a9a9304dde963e...",
  "scope": "cis-central!b14.glob...",
  "jti": "579fea14a1cf47d7ab9e..."
}</code></pre><P>Actually, there will also be another property, which has been deliberately removed from this sample. It's one that tells you when the access token supplied will expire, and the value is a duration, in seconds.</P><P>Identify this property, take the duration, in seconds, and compute the number of hours, rounding up to the nearest whole hour. That integer result is what you should send to the hash function and reply with, as usual, and as described in <A href="https://groups.community.sap.com/t5/application-development/sap-developer-challenge-apis-task-0-learn-to-share-your-task/m-p/276058" target="_blank" rel="noopener noreferrer">Task 0</A>.</P><H2 id="toc-hId-842661228">Hints and tips</H2><P>The task here is, from one perspective, quite straightforward. But from another perspective, if this is your first time requesting an access token in an OAuth flow like this, it's worth taking your time and making sure you get the right values passed in the right way to the call to the Authorization Server, i.e. to the call to the resource that ends with /oauth/token.</P><BLOCKQUOTE><P>You may have come across this URL path before; while it's not a standard, it's in common use to represent the endpoint of an OAuth Authorization Server that can be used to request an access token. It's shown, by the way, in the <A href="https://help.sap.com/docs/btp/sap-business-technology-platform/getting-access-token-for-sap-cloud-management-service-apis" target="_blank" rel="noopener noreferrer">Getting an Access Token for SAP Cloud Management Service APIs</A> documentation section in the SAP Help Portal.</P></BLOCKQUOTE><P>Use the sample curl invocations in Step 3 of the Procedure section in <A href="https://help.sap.com/docs/btp/sap-business-technology-platform/getting-access-token-for-sap-cloud-management-service-apis" target="_blank" rel="noopener noreferrer">Getting an Access Token for SAP Cloud Management Service APIs</A> as a guide.</P><P>You can of course use whatever HTTP client you wish to make the request for the access token. Whether you use curl or something else, be aware that the data that you send, as described in the documentation, should be sent with content type application/x-www-form-urlencoded. This means a series of name and value pairs.</P><P>And take this as a clue - in particular the urlencoded part. While the example in the documentation shows explicitly that the HTTP POST method should be employed (with -x POST, but see the note below), you are likely to have some values that you need to transmit, that have characters that need to be so encoded. And for those of you lovely folks who <EM>are</EM> using curl, you may find the --data-urlencode parameter very useful! <span class="lia-unicode-emoji" title=":slightly_smiling_face:">ð</span></P><BLOCKQUOTE><P>If you use curl and supply data with the -d parameter, then the HTTP POST method is used by default by curl, and you don't have to actually specify -X POST. Nor do you have to explicitly send a Content-Type header with the value application/x-www-form-urlencoded either, curl sends that by default.</P></BLOCKQUOTE><H2 id="toc-hId--1709495733">For discussion</H2><P>What approach did you take to request the access token? What form does the access token take? What other interesting information is returned in the JSON object?</P>
---
SAP Developer Challenge - APIs - Task 9 - Create a service key for API endpoints and auth info
application-developmentforum-board
2023-08-23
https://community.sap.com/t5/application-development-discussions/sap-developer-challenge-apis-task-9-create-a-service-key-for-api-endpoints/td-p/281337
2023-08-23-sap-developer-challenge-apis-task-9-create-a-service-key-for-api-endpoints
<P>(Check out the <A href="https://blogs.sap.com/2023/08/01/sap-developer-challenge-apis/" target="_blank" rel="noopener noreferrer">SAP Developer Challenge - APIs</A> blog post for everything you need to know about the challenge to which this task relates!)</P><P>This task follows on from the previous task and moves you one step closer in your steady journey of enlightenment, moving towards calling an API endpoint on SAP BTP.</P><H2 id="toc-hId-1652002092">Background</H2><P>In the previous task, you created an instance of the SAP Cloud Management Service. Why? Because this service provides facilities to manage resources on SAP BTP, and those facilities include the APIs you've been learning about in previous tasks in this group. But merely having an instance of the service isn't going to get you far.</P><P>To consume a service's facilities, more is needed. In an application context, an app is bound to a service instance, and, once bound, can consume those facilities. The same goes for API calls. What's needed are a couple of things - endpoint information and credential information.</P><P>So. You've done step 1 of the steps introduced in the previous task. Now you're tackling step 2.</P><OL><LI>create an instance of the SAP Cloud Management Service, with a plan that contains the appropriate scope(s) that you need <span class="lia-unicode-emoji" title=":white_heavy_check_mark:">â</span></LI><LI>create a service key based on that instance</LI><LI>use the details in the service key to request an access token</LI><LI>use the access token thus obtained to authenticate a call to the API endpoint</LI></OL><H3 id="toc-hId--1096668374">Endpoint information</H3><P>First, you need some information on the API endpoints. This is because information you found on the SAP Business Accelerator Hub for the endpoint you're going to call:</P><PRE>GET /accounts/v1/directories/{directoryGUID}</PRE><P>only presents a relative path (/accounts/v1/directories/{directoryGUID}). For it to be a callable endpoint it needs of course to be prefixed with the rest of the URL - the scheme and fully qualified domain name, at least.</P><BLOCKQUOTE><P>To be precise, the http (or https) part of a URL is known as the "scheme". See the <A href="https://en.wikipedia.org/wiki/List_of_URI_schemes" target="_blank" rel="noopener nofollow noreferrer">List of URI schemes</A> Wikipedia page for more information. And while we're in precision mode, are you wondering about the difference between URL and URI? They're not the same. URLs are a subset of URIs. A URI (Uniform Resource Identifier) is just a string that identifies a resource. A URL (Uniform Resource Locator) identifies a resource, but also allows you to locate that resource. Yes, the clue really is in the name(s) <span class="lia-unicode-emoji" title=":slightly_smiling_face:">ð</span></P></BLOCKQUOTE><H3 id="toc-hId-646141961">Credential information</H3><P>As well as endpoint information, you also need access, in the form of authentication. What form that takes, and how it's used, is sometime service-specific. But generally there will be a requirement to provide credentials in the API call itself.</P><P>You've done this already in a previous task, in that you provided an API key in an "APIKey" header, when you made the call to the country date format API endpoint in <A href="https://groups.community.sap.com/t5/application-development/sap-developer-challenge-apis-task-5-call-the-country-date-format/td-p/279160" target="_blank" rel="noopener noreferrer">Task 5 - Call the country date format API endpoint</A></P><P>More commonly, the standard <A href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Authorization" target="_blank" rel="noopener nofollow noreferrer">Authorization HTTP header</A> is used to convey the credentials. The value for this header is usually made up of two parts, and formed like this:</P><PRE>Authorization: &lt;auth scheme&gt; &lt;auth details&gt;</PRE><P>In the bad (good?) old days, you may well have used Basic Authentication, i.e. provided a username and password, joined with a colon, and encoded in Base64. Here's an example of that:</P><PRE>Authorization: Basic d2VsbC1kb25lOnlvdXItY3VyaW9zaXR5LWlzLWdyZWF0IQ==</PRE><P>Note that encoding != encrypting, which means that this approach was somewhat insecure, in that anyone who could see the HTTP request headers could obtain those credentials. Moreover, obtaining credentials as fundamental as username and password means a world of pain if they are ever compromised.</P><P>This is why OAuth, which focuses on obtaining and using tokens as credentials, is a far better approach for managing the request and use of credentials. Generally, tokens are obtained up front (sometimes requiring username and password style information) and then also eventually expire (they can be refreshed using a similar but simpler approach to the original way they were obtained). Expired tokens are no use to anyone, and if a token is compromised, it can be expired a lot easier, and with far fewer side effects (on other consumers using the same credential approach) than expiring or invalidating a compromised username and password.</P><P>Anyway, getting back to this Authorization header, there are other more secure auth schemes that are standard and used with this header, and you'll be working towards using such a scheme in the next task.</P><H3 id="toc-hId--1906015000">Service keys</H3><P>This endpoint and credential information, essential to consume a service's facilities, is provisioned in so-called "service keys", that relate to an instance of a service.</P><P>Creating a service key effectively brings about the creation of credentials that are then valid for use by the consumer. Once a service key has been created, it can be retrieved, and will contain the credentials, plus information on the endpoints.</P><P>When an app is bound to a service instance, similar information is created (this is why one can equate the term "service key" with "binding" and why different cloud platform runtimes use these terms almost interchangeably).</P><H2 id="toc-hId-33308840">Your task</H2><P>Your task, then, is to create a service key for the instance of the SAP Cloud Management Service you created in the previous task. You should use the cf CLI to do this. You'll have to give the service key a name; it doesn't really matter too much what you call it; the name "sk" will do fine for the purpose of this task, but in the end, you can choose.</P><P>Once you have created a service key, you should retrieve it, and take a look at the information, which will be in JSON. You'll need to compose a value (to send to the hash service) based on some of the property names in this JSON data.</P><P>That value should be a sorted list of the endpoint property names (not their values), separated by commas. To be clear, these endpoint property names are the keys of the key/value pairs inside the credentials.endpoints node, and they all end in _url.</P><P>Once you have composed that value, you should hash it and share as a new reply to this discussion thread, as always, and as described in <A href="https://groups.community.sap.com/t5/application-development/sap-developer-challenge-apis-task-0-learn-to-share-your-task/m-p/276058" target="_blank" rel="noopener noreferrer">Task 0</A>.</P><P>Oh, and while it's not part of this task's requirements, you might as well save the JSON in in a file, too, because you're going to need it again in the next task!</P><H2 id="toc-hId-1776119175">Hints and tips</H2><P>You're strongly encouraged to use the cf CLI for this task. This is for the usual obvious reasons, which are:</P><UL><LI>the command line is an extremely powerful and flexible environment</LI><LI>using and combining tools in a command line (shell) context is the ultimate in power and flexibility</LI><LI>you can script usage of such tools, embracing the facilities of the command line to build automation</LI><LI>it helps you get closer to the metal, to explore the details of the services and runtimes you're consuming</LI></UL><P>If, however, you do wish to use the GUI, in the form of the SAP BTP Cockpit, then go ahead. The cockpit, or any GUI for that matter, is great for one-off and occasional tasks, but it's no match for the power of the command line. You may wish to read the blog post <A href="https://blogs.sap.com/2022/12/12/managing-resources-on-sap-btp-what-tool-do-i-choose/" target="_blank" rel="noopener noreferrer">Managing resources on SAP BTP â what tool do I choose?</A> which touches on this topic.</P><P>If you're using the cf CLI, you'll want to avail yourself of the commands within the "Services integration" section.</P><PRE>Services integration:
  marketplace,m        create-user-provided-service,cups
  services,s           update-user-provided-service,uups
  create-service,cs    create-service-key,csk
  update-service       delete-service-key,dsk
  delete-service,ds    service-keys,sk  service              service-key
  bind-service,bs      bind-route-service,brs
  unbind-service,us    unbind-route-service,urs</PRE><P>Note that once you've created your service key, and are looking at its output with:</P><PRE>cf service-key &lt;service-instance&gt; &lt;service-key&gt;</PRE><P>you'll notice that the output is JSON. Great! You can parse it and programatically generate the value you need to send to the hash service for your task reply.</P><P>However, note that the command is not entirely well-behaved, emitting "helpful" information just before the JSON itself. This is ultimately against the spirit of the UNIX command line philosophy. Here's an example of the output of such a command (some of the properties in the JSON have been removed for brevity):</P><PRE>Getting key cis-central-sk for service instance cis-central as dj.adams@sap.com...

{
  "credentials": {
    "endpoints": "..."
    "grant_type": "user_token",
    "sap.cloud.service": "com.sap.core.commercial.service.central",
    "uaa": {
      "uaadomain": "authentication.eu10.hana.ondemand.com",
      "xsappname": "ut-f86082c9-7fbf-4e1e-8310-f5d018dab542-clone!b254751|cis-central!b42",
      "xsmasterappname": "cis-central!b42",
      "zoneid": "7da58aab-6c60-4492-a95b-b1ed3139e242"
    }
  }
}</PRE><P>The first two lines ("Getting key ...", and the empty line) are not JSON. This means you will have to clean up the output of the command before processing it as JSON (and saving it to a file).</P><P>Note that the value of the endpoints property in the above output example is given as "..." - this is just for brevity in illustration; the value is in fact an object, containing properties, the names of which should be of interest to you for this task!</P><P>Note also that this example output also reminds us of one of the breaking changes between version 7 and version 8 of the cf CLI that were mentioned in the previous task. It's the advent of version 8 that brought along the outermost wrapping of the data within a new credentials property. Before version 8, that node does not exist in the JSON.</P>
---
SAP Developer Challenge - APIs - Task 8 - Create an instance of the SAP Cloud Management Service
application-developmentforum-board
2023-08-21
https://community.sap.com/t5/application-development-discussions/sap-developer-challenge-apis-task-8-create-an-instance-of-the-sap-cloud/td-p/280681
2023-08-21-sap-developer-challenge-apis-task-8-create-an-instance-of-the-sap-cloud
<P>(Check out the <A href="https://blogs.sap.com/2023/08/01/sap-developer-challenge-apis/" target="_blank" rel="noopener noreferrer">SAP Developer Challenge - APIs</A> blog post for everything you need to know about the challenge to which this task relates!)</P><P>In this task, you're going to create an instance of the SAP Cloud Management Service, with a specific plan. To find out why, read on.</P><H2 id="toc-hId-1651975333">Background</H2><P>This task follows on from and is in a group with the previous task (<A href="https://groups.community.sap.com/t5/application-development/sap-developer-challenge-apis-task-7-create-a-new-directory-in-an/td-p/280341" target="_blank" rel="noopener noreferrer">Task 7 - Create a new directory in an SAP BTP account</A>). Having created a directory in your SAP Business Technology Platform (SAP BTP) account, you're going to eventually retrieve that directory's details programmatically, through an API endpoint.</P><P>In making such a call to the appropriate endpoint, you need to supply authentication details in the HTTP header.</P><P>What do the authentication details look like, and how do you obtain them? Well, in this and subsequent tasks, you'll find out, by reading, and by doing!</P><H3 id="toc-hId--1096695133">The details of the API endpoint</H3><P>On the reading part, you should start out by jumping back to the <A href="https://api.sap.com/package/SAPCloudPlatformCoreServices/rest" target="_blank" rel="noopener noreferrer">Core Services for SAP BTP</A> API package landing page on the <A href="https://api.sap.com" target="_blank" rel="noopener noreferrer">SAP Business Accelerator Hub</A> that you viewed in the previous task. You'll see a range of APIs, like this:</P><P><IMG src="https://community.sap.com/assets/core-services-apis.png" border="0" alt="" /><span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="core-services-apis.png" style="width: 999px;"><img src="https://community.sap.com/t5/image/serverpage/image-id/42353iC5C5558877416E73/image-size/large?v=v2&amp;px=999" role="button" title="core-services-apis.png" alt="core-services-apis.png" /></span></P><P>The Accounts Service API is described thus: "Manage the directories and subaccounts in your global account's structure". This is the API containing the endpoint that you'll eventually use to look at the details of the directory you created in the previous task.</P><P>Selecting this API, and navigating to its API Reference section, specifically to the <A href="https://api.sap.com/api/APIAccountsService/resource/Directory_Operations" target="_blank" rel="noopener noreferrer">Directory Operations</A> group, you'll see quite a list of endpoints, some of which you can see in this screenshot:</P><P><IMG src="https://community.sap.com/assets/directory-operations-endpoints.png" border="0" alt="" /><span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="directory-operations-endpoints.png" style="width: 999px;"><img src="https://community.sap.com/t5/image/serverpage/image-id/42354i8DDFA3A9998CFC54/image-size/large?v=v2&amp;px=999" role="button" title="directory-operations-endpoints.png" alt="directory-operations-endpoints.png" /></span></P><P>One of them is the one you'll eventually be calling:</P><P><IMG src="https://community.sap.com/assets/get-directory-endpoint.png" border="0" alt="" /><span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="get-directory-endpoint.png" style="width: 999px;"><img src="https://community.sap.com/t5/image/serverpage/image-id/42355i566316864124C9B0/image-size/large?v=v2&amp;px=999" role="button" title="get-directory-endpoint.png" alt="get-directory-endpoint.png" /></span></P><P>Note that the final part of the endpoint's path, {directoryGUID}, is what we need to specify when making a call to this endpoint. Remind you of anything? Yes, it's the GUID value of your newly created directory that you determined in the previous task.</P><P>While you're <A href="https://qmacro.org/blog/posts/2017/02/19/the-beauty-of-recursion-and-list-machinery/#initialrecognition" target="_blank" rel="noopener nofollow noreferrer">staring at</A> the details of this endpoint, make a mental note of this part:</P><BLOCKQUOTE><P>Required scope: $XSAPPNAME.global-account.account-directory.read</P></BLOCKQUOTE><P>This will become relevant shortly.</P><H3 id="toc-hId-646115202">The documentation on this API</H3><P>While you're still in reading mode, jump back to the <A href="https://api.sap.com/api/APIAccountsService/overview" target="_blank" rel="noopener noreferrer">Accounts Service API Overview</A> and follow the link to the SAP Help Portal documentation <A href="https://help.sap.com/docs/BTP/65de2977205c403bbc107264b8eccf4b/17b6a171552544a6804f12ea83112a3f.html" target="_blank" rel="noopener noreferrer">Account Administration Using APIs of the SAP Cloud Management Service</A>. It's here that you'll find information on setting up for calls to this API and its endpoints. Take some time to read through the linked section and the subsections within.</P><P>Here's a very brief summary of what it says, so you have something concise to which you can refer in this and subsequent tasks in this group.</P><P>In order to make calls to API endpoints in this API (and indeed the other APIs in the package), you'll need to follow these steps:</P><OL><LI>create an instance of the SAP Cloud Management Service, with a plan that contains the appropriate scope(s) that you need</LI><LI>create a service key based on that instance</LI><LI>use the details in the service key to request an access token</LI><LI>use the access token thus obtained to authenticate a call to the API endpoint</LI></OL><P>The documentation mentions different environments in which you might create an instance of the service; for the purposes of this Developer Challenge as a whole, please use a Cloud Foundry environment. This is for a couple of reasons:</P><UL><LI>everyone can get a Cloud Foundry environment on SAP BTP; for example, if you're using a trial account you will most likely have a Cloud Foundry environment automatically set up for you in your subaccount, and if you don't have one, you can create one</LI><LI>it makes running this task and the related tasks simpler and we can all take part in the same collective and shared conversation about what we're doing</LI></UL><P>OK, let's look at precisely what your task is. That list of steps above looks quite a lot of work ... but don't worry. Your task today relates only to step 1 in the list.</P><H2 id="toc-hId--1709528254">Your task</H2><P>There are two parts to your task here. In both parts, you should use the cf command line tool for Cloud Foundry (also known as the "cf CLI").</P><BLOCKQUOTE><P>There are different ways you could go about creating a service instance on Cloud Foundry, but here the cf CLI is prescribed because it can be used for not only creating the instance, but also for retrieving detailed information afterwards. And of course, also because <A href="https://twitter.com/search?q=%23TheFutureIsTerminal" target="_blank" rel="noopener nofollow noreferrer">#TheFutureIsTerminal</A> <span class="lia-unicode-emoji" title=":slightly_smiling_face:">ð</span></P></BLOCKQUOTE><P>For <STRONG>part one</STRONG>, you must complete step 1 in the list above, i.e. create an instance of the SAP Cloud Management Service (short name: cis). Do this in your SAP BTP account that you used in the previous task. Make sure you choose the appropriate plan when doing this, and create the instance in your Cloud Foundry environment.</P><P>Information on where to find the service plan details, and tips on how to create the instance itself, are detailed in the "Hints and tips" section.</P><P>For <STRONG>part two</STRONG>, you must use the <A href="https://apidocs.cloudfoundry.org/226/" target="_blank" rel="noopener nofollow noreferrer">Cloud Foundry API</A> to retrieve information about your newly created service instance. Specifically, you should use the <A href="https://apidocs.cloudfoundry.org/226/service_instances/list_all_service_instances.html" target="_blank" rel="noopener nofollow noreferrer">List all Service Instances</A> endpoint (GET /v2/service_instances). And as you'll have already been using the cf CLI for part one of this task, you are strongly encouraged to use it for this part as well. Did you know that you can use the cf CLI to make calls to the CF API as well? Find out more in the "Hints and tips section below".</P><P>From the information you retrieve via the GET /v2/service_instances endpoint, you should identify the appropriate object in the resources property in the JSON returned, and pick out the value of the entity type.</P><P>Here's an example (with some properties removed for brevity):</P><DIV class=""><PRE><SPAN><SPAN class="">{</SPAN></SPAN>
<SPAN>  <SPAN class="">"total_results"</SPAN><SPAN class="">:</SPAN> <SPAN class="">1</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN>  <SPAN class="">"resources"</SPAN><SPAN class="">:</SPAN> <SPAN class="">[</SPAN></SPAN>
<SPAN>    <SPAN class="">{</SPAN></SPAN>
<SPAN>      <SPAN class="">"metadata"</SPAN><SPAN class="">:</SPAN> <SPAN class="">{</SPAN></SPAN>
<SPAN>        <SPAN class="">"guid"</SPAN><SPAN class="">:</SPAN> <SPAN class="">"58314563-ab6d-48db-b40c-ae4abf0e0355"</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN>        <SPAN class="">"url"</SPAN><SPAN class="">:</SPAN> <SPAN class="">"/v2/service_instances/58314563-ab6d-48db-b40c-ae4abf0e0355"</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN>        <SPAN class="">"created_at"</SPAN><SPAN class="">:</SPAN> <SPAN class="">"2023-08-15T10:31:13Z"</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN>        <SPAN class="">"updated_at"</SPAN><SPAN class="">:</SPAN> <SPAN class="">"2023-08-15T10:31:15Z"</SPAN></SPAN>
<SPAN>      <SPAN class="">},</SPAN></SPAN>
<SPAN>      <SPAN class="">"entity"</SPAN><SPAN class="">:</SPAN> <SPAN class="">{</SPAN></SPAN>
<SPAN>        <SPAN class="">"name"</SPAN><SPAN class="">:</SPAN> <SPAN class="">"cis-central"</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN>        <SPAN class="">"credentials"</SPAN><SPAN class="">:</SPAN> <SPAN class="">{},</SPAN></SPAN>
<SPAN>        <SPAN class="">"service_plan_guid"</SPAN><SPAN class="">:</SPAN> <SPAN class="">"7cc70093-3c5f-47f2-acf6-8de4185ba63c"</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN>        <SPAN class="">"space_guid"</SPAN><SPAN class="">:</SPAN> <SPAN class="">"52311e40-efaa-4176-bef1-505f3a9889bd"</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN>        <SPAN class="">"gateway_data"</SPAN><SPAN class="">:</SPAN> <SPAN class="">null</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN>        <SPAN class="">"dashboard_url"</SPAN><SPAN class="">:</SPAN> <SPAN class="">null</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN>        <SPAN class="">"type"</SPAN><SPAN class="">:</SPAN> <SPAN class="">"&lt;instance-type&gt;"</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN>        <SPAN class="">"last_operation"</SPAN><SPAN class="">:</SPAN> <SPAN class="">{</SPAN></SPAN>
<SPAN>          <SPAN class="">"type"</SPAN><SPAN class="">:</SPAN> <SPAN class="">"create"</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN>          <SPAN class="">"state"</SPAN><SPAN class="">:</SPAN> <SPAN class="">"succeeded"</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN>          <SPAN class="">"updated_at"</SPAN><SPAN class="">:</SPAN> <SPAN class="">"2023-08-15T10:31:15Z"</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN>          <SPAN class="">"created_at"</SPAN><SPAN class="">:</SPAN> <SPAN class="">"2023-08-15T10:31:15Z"</SPAN></SPAN>
<SPAN>        <SPAN class="">},</SPAN></SPAN>
<SPAN>        <SPAN class="">"tags"</SPAN><SPAN class="">:</SPAN> <SPAN class="">[]</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN>        <SPAN class="">"maintenance_info"</SPAN><SPAN class="">:</SPAN> <SPAN class="">{},</SPAN></SPAN>
<SPAN>        <SPAN class="">"service_guid"</SPAN><SPAN class="">:</SPAN> <SPAN class="">"4eacd0ef-9a9d-4cb3-8fb1-60fb685d8f82"</SPAN></SPAN>
<SPAN>      <SPAN class="">}</SPAN></SPAN>
<SPAN>    <SPAN class="">}</SPAN></SPAN>
<SPAN>  <SPAN class="">]</SPAN></SPAN>
<SPAN><SPAN class="">}</SPAN></SPAN></PRE></DIV><P>As you can see in this example, there's only one service instance in the Cloud Foundry environment org / space used to set up this example. This is reflected in the fact that there's only a single object contained in the resources array. That object represents and contains the details of that service instance.</P><P>The type of the service instance is given in the entity.type property within the object. In the example above, the value is deliberately hidden, and has been replaced by the string &lt;instance-type&gt;.</P><BLOCKQUOTE><P>For those of you who are curious and have also tried to use cf service to list details of the service, note that the entity type shown in the output to cf service is not quite the same, and not what is required here. You have been warned!</P></BLOCKQUOTE><P>It's the actual value of this entity.type property that you must determine and send to be hashed and shared in a reply to this discussion thread as described in <A href="https://groups.community.sap.com/t5/application-development/sap-developer-challenge-apis-task-0-learn-to-share-your-task/m-p/276058" target="_blank" rel="noopener noreferrer">Task 0</A>. So whatever that value is, in the JSON that's returned, that's what you need to send to be hashed (don't include the double quotes, because they're just part of the JSON syntax of course).</P><H2 id="toc-hId-33282081">Hints and tips</H2><P>Here are some pointers to help you with this task.</P><H3 id="toc-hId-1579578911">Creation of the service instance</H3><P>If you read through the <A href="https://help.sap.com/docs/btp/sap-business-technology-platform/account-administration-using-apis-of-sap-cloud-management-service" target="_blank" rel="noopener noreferrer">Account Administration Using APIs of the SAP Cloud Management Service</A> documentation, you will have come across the <A href="https://help.sap.com/docs/btp/sap-business-technology-platform/sap-cloud-management-service-service-plans" target="_blank" rel="noopener noreferrer">SAP Cloud Management Service - Service Plans</A> section. In this section, the details of each service plan offered are available, including a list of scopes provided by each.</P><P><IMG src="https://community.sap.com/assets/service-plan-details.png" border="0" alt="" /><span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="service-plan-details.png" style="width: 980px;"><img src="https://community.sap.com/t5/image/serverpage/image-id/42356i1FBEB77A4A71E706/image-size/large?v=v2&amp;px=999" role="button" title="service-plan-details.png" alt="service-plan-details.png" /></span></P><P>When creating the service instance, make sure you specify the appropriate plan, the plan that contains the scope that you need to make a GET request to the /accounts/v1/directories/{directoryGUID} API endpoint.</P><H3 id="toc-hId--972578050">Using the cf CLI</H3><P>You are required to use the cf CLI for both parts of this task. Some of you may already have the cf CLI installed. Others may not.</P><P>For those of you who have it installed, or are willing and able to install it in their own system, we recommend you use the latest major version, i.e. version 8. The reason for this is twofold:</P><UL><LI>the major version of the cf CLI available in all Dev Spaces in the SAP Business Application Studio is 8 (specifically, at the time of writing, version 8.5.0+73aa161.2022-09-12)</LI><LI>there are some breaking changes introduced between major versions 7 and 8, including in the area of the output of service binding details, so it's best that we're all on the same version and we also recommend you move to 8 now anyway</LI></UL><BLOCKQUOTE><P>See <A href="https://docs.cloudfoundry.org/cf-cli/v8.html" target="_blank" rel="noopener nofollow noreferrer">Upgrading to cf CLI v8</A> for details of what's new and different with version 8.</P></BLOCKQUOTE><P>For those who don't already have the cf CLI installed, and don't want to install it right now, we recommend you make use of a Dev Space in the SAP Business Application Studio. Just like the Cloud Foundry environment itself, a subscription to the SAP Business Application Studio is available to anyone and everyone, not least within a trial SAP BTP account context. You can follow the tutorial <A href="https://developers.sap.com/tutorials/appstudio-onboarding.html" target="_blank" rel="noopener noreferrer">Set Up SAP Business Application Studio for Development</A> if you need some guidance on getting access.</P><P>Once you have a subscription to the SAP Business Application Studio, create yourself a Dev Space. It doesn't have to be anything special - even a Basic Dev Space contains the cf CLI, as you can see:</P><P><IMG src="https://community.sap.com/assets/basic-dev-space-with-cf-cli.png" border="0" alt="" /><span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="basic-dev-space-with-cf-cli.png" style="width: 999px;"><img src="https://community.sap.com/t5/image/serverpage/image-id/42357i070F58837321244E/image-size/large?v=v2&amp;px=999" role="button" title="basic-dev-space-with-cf-cli.png" alt="basic-dev-space-with-cf-cli.png" /></span></P><P>Once you have a Dev Space up and running, and you have of course opened up a terminal session therein (use menu path "Terminal -&gt; New Terminal"), you have the cf CLI at your disposal.</P><P>At this point you should log in, and specify the API endpoint that relates to your specific Cloud Foundry environment instance.</P><P>There are different ways to find out what the API endpoint is (including programmatically, see <A href="https://github.com/SAP-samples/cloud-btp-cli-api-codejam/blob/main/exercises/05-core-services-api-prep/README.md#determining-your-cf-api-endpoint" target="_blank" rel="noopener nofollow noreferrer">Determining your CF API endpoint</A>), but a simple way for the purposes of this task is to head over to the SAP BTP Cockpit and check in the subaccount overview:</P><P><IMG src="https://community.sap.com/assets/cf-api-endpoint-cockpit.png" border="0" alt="" /><span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="cf-api-endpoint-cockpit.png" style="width: 999px;"><img src="https://community.sap.com/t5/image/serverpage/image-id/42358i20F32D3A676D9256/image-size/large?v=v2&amp;px=999" role="button" title="cf-api-endpoint-cockpit.png" alt="cf-api-endpoint-cockpit.png" /></span></P><P>Once you've logged in, you'll need to familiarize yourself with the cf CLI commands related to this task.</P><P>For the first part of the task, look into the "Services integration" commands (get to this list using the command cf help):</P><PRE>Services integration:
  marketplace,m        create-user-provided-service,cups
  services,s           update-user-provided-service,uups
  create-service,cs    create-service-key,csk
  update-service       delete-service-key,dsk
  delete-service,ds    service-keys,sk
  service              service-key
  bind-service,bs      bind-route-service,brs
  unbind-service,us    unbind-route-service,urs</PRE><P>In particular:</P><UL><LI>cf marketplace will give you a list of service offerings; specifying a particular service offering with the -e option is also worth looking into</LI><LI>cf create-service will allow you to create a new service instance, specifying the plan as well as the service</LI><LI>cf services will allow you to list services instances that already exist, allowing you to check that your service instance creation was successful</LI></UL><BLOCKQUOTE><P>When using cf marketplace, note that the service offerings will be listed using their technical name. The technical name for the SAP Cloud Management Service is cis, as noted in the <A href="https://help.sap.com/docs/btp/sap-business-technology-platform/account-administration-using-apis-of-sap-cloud-management-service" target="_blank" rel="noopener noreferrer">Account Administration Using APIs of the SAP Cloud Management Service</A> section on the SAP Help Portal.</P></BLOCKQUOTE><P>For the second part of the task, you'll want to look at:</P><UL><LI>cf curl</LI></UL><P>Interestingly, if you want to find this command in the list of possible commands in the cf CLI, you must use:</P><PRE>cf help -a</PRE><P>(i.e. include the -a option) otherwise it's not shown.</P><P>Good luck and have fun!</P><H2 id="toc-hId-966745790">For discussion</H2><P>How else might one create an instance of a service? Is this your first encounter with the cf CLI? How did you find it? What is your favorite place to run command line tools?</P>
---
SAP Developer Challenge - APIs - Task 7 - Create a new directory in an SAP BTP account
application-developmentforum-board
2023-08-18
https://community.sap.com/t5/application-development-discussions/sap-developer-challenge-apis-task-7-create-a-new-directory-in-an-sap-btp/td-p/280341
2023-08-18-sap-developer-challenge-apis-task-7-create-a-new-directory-in-an-sap-btp
<P>(Check out the <A href="https://blogs.sap.com/2023/08/01/sap-developer-challenge-apis/" target="_blank" rel="noopener noreferrer">SAP Developer Challenge - APIs</A> blog post for everything you need to know about the challenge to which this task relates!)</P><P>This task is the first in a group that belong together, and in it you will prepare the ground for the subsequent tasks in that group.</P><H2 id="toc-hId-1651972326">Background</H2><P>The <A href="https://api.sap.com" target="_blank" rel="noopener noreferrer">SAP Business Accelerator Hub</A> contains API and related resources not only for SAP products such as SAP S/4HANA Cloud, SAP SuccessFactors, SAP Ariba, SAP Concur and so on, but also for the SAP Business Technology Platform, as you can see:</P><P><IMG src="https://community.sap.com/assets/apihub-explore-menu-btp-highlight.png" border="0" alt="" />The Explore menu</P><P>Selecting this entry brings you to an <A href="https://api.sap.com/products/SAPCloudPlatform/overview" target="_blank" rel="noopener noreferrer">overview page</A> with links to APIs, events, integrations, business processes, workflow management resources and more. You'll see that one of the API packages available is <A href="https://api.sap.com/package/SAPCloudPlatformCoreServices/rest" target="_blank" rel="noopener noreferrer">Core Services for SAP BTP</A> which contains multiple REST APIs, including:</P><UL><LI>Accounts Service</LI><LI>Entitlements Service</LI><LI>Events Service</LI></UL><P>and more.</P><P>These APIs afford you programmatic access to information on SAP BTP, specifically about your global accounts, subaccounts, directories, entitlements, services and lots more.</P><P>In the next few tasks you will take a small journey of discovery, one that will lead you to be able to make calls to these APIs, and in fact you will end up making a specific call to get a feel for how things operate and what you need to make such calls.</P><P>In order for everyone to have something consistent to work with, i.e. so that you all end up making essentially the same call, and will get the same results, this task will get you to create a directory in an SAP BTP account, with a custom label. In a subsequent task in this group you'll use the appropriate API in this <A href="https://api.sap.com/package/SAPCloudPlatformCoreServices/rest" target="_blank" rel="noopener noreferrer">Core Services for SAP BTP</A> package to retrieve that information.</P><H2 id="toc-hId--900184635">Your task</H2><P>Your task here is to create a new directory within an SAP BTP global account accessible to you. If you don't have one, you can set up a trial account for free - see the "Hints and tips" section below for details.</P><P>Here are the task requirements:</P><UL><LI>The directory should be created at the top level of the account</LI><LI>It should be given the name developer-challenge</LI><LI>It should have one label named task with the value 7</LI></UL><P>You can do this any way you wish. You may want to use the SAP BTP Cockpit. You may wish to use the btp CLI. See the "Hints and tips" section below for both these approaches.</P><P>The value you need to get, to send to be hashed and shared in a reply to this discussion thread (as described, as always, in <A href="https://groups.community.sap.com/t5/application-development/sap-developer-challenge-apis-task-0-learn-to-share-your-task/m-p/276058" target="_blank" rel="noopener noreferrer">Task 0</A>), is the length of the new directory's GUID. Not the GUID itself. The GUID consists of groups of hexadecimal digits interspersed with dashes. In calculating the length required, note that you should measure the length of the entire GUID, including the dashes.</P><H2 id="toc-hId-842625700">Hints and tips</H2><P>If you don't have a global account with which to work (for example, if you only have access to productive accounts at work and can't use them for learning), you can get a trial account on SAP BTP, and it won't cost you anything. You don't even need a credit card to sign up for one. Just follow the instructions in the tutorial <A href="https://developers.sap.com/tutorials/hcp-create-trial-account.html" target="_blank" rel="noopener noreferrer">Get a Free Account on SAP BTP Trial</A>.</P><H3 id="toc-hId--1906044766">Creating the directory in the cockpit</H3><P>You can create the directory from the Account Explorer section of the SAP BTP Cockpit.</P><P>Use the "Create -&gt; Directory" menu from the button and specify the details appropriately, like this:</P><P><IMG src="https://community.sap.com/assets/directory-creation.png" border="0" alt="" /><span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="directory-creation.png" style="width: 999px;"><img src="https://community.sap.com/t5/image/serverpage/image-id/42307i80B95CFF3983B728/image-size/large?v=v2&amp;px=999" role="button" title="directory-creation.png" alt="directory-creation.png" /></span></P><P>Once you've created the directory, it should look like this (you may have to adjust the display settings from the "tree view" to the "table view"). Note that the label information is available too in this display:</P><P><IMG src="https://community.sap.com/assets/directory-created.png" border="0" alt="" /><span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="directory-created.png" style="width: 999px;"><img src="https://community.sap.com/t5/image/serverpage/image-id/42308i07018F63E5D0C171/image-size/large?v=v2&amp;px=999" role="button" title="directory-created.png" alt="directory-created.png" /></span></P><H3 id="toc-hId--163234431">Creating the directory with the btp CLI</H3><P>Of course, as <A href="https://twitter.com/search?q=%23TheFutureIsTerminal" target="_blank" rel="noopener nofollow noreferrer">#TheFutureIsTerminal</A>, you may prefer to go for maximum efficiency and use the command line. Luckily for us there's a great command line tool for accessing and manipulating resources on SAP BTP, and that's the btp CLI, available from the <A href="https://tools.hana.ondemand.com/#cloud" target="_blank" rel="noopener nofollow noreferrer">SAP Development Tools website</A>. There are plenty of resources on the btp CLI, here are just a few:</P><UL><LI><A href="https://blogs.sap.com/2021/09/01/sap-tech-bytes-btp-cli-installation/" target="_blank" rel="noopener noreferrer">SAP Tech Bytes: btp CLI â installation</A> (blog post)</LI><LI><A href="https://help.sap.com/docs/btp/sap-business-technology-platform/account-administration-using-sap-btp-command-line-interface-btp-cli" target="_blank" rel="noopener noreferrer">Account Administration Using the SAP BTP Command Line Interface (btp CLI)</A> (SAP Help Portal documentation)</LI><LI><A href="https://www.youtube.com/playlist?list=PL6RpkC85SLQDXx827kdjKc6HRvdMRZ8P5" target="_blank" rel="noopener nofollow noreferrer">The SAP btp CLI</A> (video playlist from the <A href="https://blogs.sap.com/2020/11/09/an-overview-of-sap-developers-video-content/#shows" target="_blank" rel="noopener noreferrer">Hands-on SAP Dev live stream show</A>)</LI></UL><P>Here's a sample session where I use the btp CLI to create the directory, in that I:</P><UL><LI>log on</LI><LI>choose an account (my trial global account)</LI><LI>use the create action for the appropriate group and object (accounts/directory)</LI></UL><PRE># developer-challenge-apis/tasks/7-create-assets-in-an-sap-btp-account (main %=)
; btp login
SAP BTP command line interface (client v2.38.0)

CLI server URL [https://cpcli.cf.eu10.hana.ondemand.com]&gt;
Connecting to CLI server at https://cpcli.cf.eu10.hana.ondemand.com...

User&gt; dj.adams@sap.com
Password&gt;

Authentication successful

Choose a global account:
  [1] c2d7b67atrial
  [2] ...
  [3] ...
Choose option&gt; 1

Current target:
 c2d7b67atrial (global account, subdomain: c2d7b67atrial-ga)

We stored your configuration file at: /home/user/.config/btp/config.json

Tips:
    Commands are executed in the target, unless specified otherwise using a parameter. To change the target, use 'btp target'.
    To provide feedback about the btp CLI, use 'btp feedback' to open our survey.

OK

# developer-challenge-apis/tasks/7-create-assets-in-an-sap-btp-account (main %=)
; btp create accounts/directory \
  --display-name "developer-challenge" \
  --labels '{"task":[7]}'
Creating directory in global account 7da58aab-6c60-4492-a95b-b1ed3139e242...

directory id:         57675710-7b16-43ec-b64a-ab14660c1b24
display name:         developer-challenge
description:
directory features:   DEFAULT
created by:           dj.adams@sap.com
custom properties:    name:   value:
                      task    7
labels:               name:   value:
                      task    [7]
parent id:            7da58aab-6c60-4492-a95b-b1ed3139e242
parent type:          global account
state:                OK
state message:        Directory created.

Command runs in the background.
Use 'btp get accounts/directory' to verify status.

OK</PRE><BLOCKQUOTE><P>Although the value 7 for the task label is scalar, it must be specified in the JSON value for the --labels parameter inside an array, i.e. [7] rather than just 7.</P></BLOCKQUOTE><H2 id="toc-hId-1776089409">For discussion</H2><P>Did you use the cockpit or the CLI tool? Which would or do you prefer? If you used the btp CLI, how did the installation go? Did you install it "natively" or did you use the script described in the <A href="https://blogs.sap.com/2021/09/01/sap-tech-bytes-btp-cli-installation/" target="_blank" rel="noopener noreferrer">SAP Tech Bytes: btp CLI â installation</A> blog post?</P><P>What are some of your other power command line tools, inside the SAP ecosphere and also beyond?</P>
---
SAP Developer Challenge - APIs - Task 6 - Create a new Northbreeze category
application-developmentforum-board
2023-08-16
https://community.sap.com/t5/application-development-discussions/sap-developer-challenge-apis-task-6-create-a-new-northbreeze-category/td-p/279812
2023-08-16-sap-developer-challenge-apis-task-6-create-a-new-northbreeze-category
<P>(Check out the <A href="https://blogs.sap.com/2023/08/01/sap-developer-challenge-apis/" target="_blank" rel="noopener noreferrer">SAP Developer Challenge - APIs</A> blog post for everything you need to know about the challenge to which this task relates!)</P><P>You've made various read-only requests so far; now it's time to create some data.</P><H2 id="toc-hId-1651321637">Background</H2><P>For this task we return briefly to the <A href="https://developer-challenge.cfapps.eu10.hana.ondemand.com/odata/v4/northbreeze" target="_self" rel="nofollow noopener noreferrer">Northbreeze service</A> from <A href="https://groups.community.sap.com/t5/application-development/sap-developer-challenge-apis-task-2-calculate-northbreeze/td-p/277325" target="_self" rel="noopener noreferrer">Task 2</A>. Until now, mostly due to the nature of the deliberate simplicity of the tasks in this Developer Challenge, the actions you've been performing from an HTTP perspective have been read-only.</P><P>This time you'll write some data, albeit data that won't last long (the Northbreeze service runs in-memory and has been set up not to use a permanent persistence layer). Then you'll read it back, with a minor difference, to examine what the response looks like. It's that response, compressed, that you'll need for the hash.</P><P>The Northwind service traditionally has products, which you've encountered already. Those products are organized into <A href="https://developer-challenge.cfapps.eu10.hana.ondemand.com/odata/v4/northbreeze/Categories" target="_blank" rel="noopener nofollow noreferrer">categories</A>, of which there are just a few. A category (taking <A href="https://developer-challenge.cfapps.eu10.hana.ondemand.com/odata/v4/northbreeze/Categories/1" target="_self" rel="nofollow noopener noreferrer">the first one</A>) looks like this:</P><DIV class=""><PRE><SPAN><SPAN class="">{</SPAN></SPAN>
<SPAN>  <SPAN class="">"CategoryID"</SPAN><SPAN class="">:</SPAN> <SPAN class="">1</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN>  <SPAN class="">"CategoryName"</SPAN><SPAN class="">:</SPAN> <SPAN class="">"Beverages"</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN>  <SPAN class="">"Description"</SPAN><SPAN class="">:</SPAN> <SPAN class="">"Soft drinks, coffees, teas, beers, and ales"</SPAN></SPAN>
<SPAN><SPAN class="">}</SPAN></SPAN></PRE></DIV><P>You can get a feel for the distribution of products across categories by asking for <A href="https://developer-challenge.cfapps.eu10.hana.ondemand.com/odata/v4/northbreeze/Products?$apply=groupby((Category_CategoryID),aggregate($count%20as%20productcount))" target="_blank" rel="noopener nofollow noreferrer">the count of products by category ID</A> which is expressed like this (showing the path, with whitespace, for easier reading):</P><PRE>/odata/v4/northbreeze/Products
  ?$apply=groupby(
    (Category_CategoryID),
    aggregate($count as productcount)
  )</PRE><P>This returns a response that looks like this:</P><DIV class=""><PRE><SPAN><SPAN class="">{</SPAN></SPAN>
<SPAN>  <SPAN class="">"@odata.context"</SPAN><SPAN class="">:</SPAN> <SPAN class="">"$metadata#Products(Category_CategoryID,productcount)"</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN>  <SPAN class="">"value"</SPAN><SPAN class="">:</SPAN> <SPAN class="">[</SPAN></SPAN>
<SPAN>    <SPAN class="">{</SPAN></SPAN>
<SPAN>      <SPAN class="">"productcount@odata.type"</SPAN><SPAN class="">:</SPAN> <SPAN class="">"#Decimal"</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN>      <SPAN class="">"productcount"</SPAN><SPAN class="">:</SPAN> <SPAN class="">12</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN>      <SPAN class="">"Category_CategoryID"</SPAN><SPAN class="">:</SPAN> <SPAN class="">1</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN>      <SPAN class="">"@odata.id"</SPAN><SPAN class="">:</SPAN> <SPAN class="">null</SPAN></SPAN>
<SPAN>    <SPAN class="">}</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN>    <SPAN class="">{</SPAN></SPAN>
<SPAN>      <SPAN class="">"productcount@odata.type"</SPAN><SPAN class="">:</SPAN> <SPAN class="">"#Decimal"</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN>      <SPAN class="">"productcount"</SPAN><SPAN class="">:</SPAN> <SPAN class="">12</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN>      <SPAN class="">"Category_CategoryID"</SPAN><SPAN class="">:</SPAN> <SPAN class="">2</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN>      <SPAN class="">"@odata.id"</SPAN><SPAN class="">:</SPAN> <SPAN class="">null</SPAN></SPAN>
<SPAN>    <SPAN class="">}</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN>    <SPAN class="">{</SPAN></SPAN>
<SPAN>      <SPAN class="">"productcount@odata.type"</SPAN><SPAN class="">:</SPAN> <SPAN class="">"#Decimal"</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN>      <SPAN class="">"productcount"</SPAN><SPAN class="">:</SPAN> <SPAN class="">13</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN>      <SPAN class="">"Category_CategoryID"</SPAN><SPAN class="">:</SPAN> <SPAN class="">3</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN>      <SPAN class="">"@odata.id"</SPAN><SPAN class="">:</SPAN> <SPAN class="">null</SPAN></SPAN>
<SPAN>    <SPAN class="">}</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN>    <SPAN class="">{</SPAN></SPAN>
<SPAN>      <SPAN class="">"productcount@odata.type"</SPAN><SPAN class="">:</SPAN> <SPAN class="">"#Decimal"</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN>      <SPAN class="">"productcount"</SPAN><SPAN class="">:</SPAN> <SPAN class="">10</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN>      <SPAN class="">"Category_CategoryID"</SPAN><SPAN class="">:</SPAN> <SPAN class="">4</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN>      <SPAN class="">"@odata.id"</SPAN><SPAN class="">:</SPAN> <SPAN class="">null</SPAN></SPAN>
<SPAN>    <SPAN class="">}</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN>    <SPAN class="">{</SPAN></SPAN>
<SPAN>      <SPAN class="">"productcount@odata.type"</SPAN><SPAN class="">:</SPAN> <SPAN class="">"#Decimal"</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN>      <SPAN class="">"productcount"</SPAN><SPAN class="">:</SPAN> <SPAN class="">7</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN>      <SPAN class="">"Category_CategoryID"</SPAN><SPAN class="">:</SPAN> <SPAN class="">5</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN>      <SPAN class="">"@odata.id"</SPAN><SPAN class="">:</SPAN> <SPAN class="">null</SPAN></SPAN>
<SPAN>    <SPAN class="">}</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN>    <SPAN class="">{</SPAN></SPAN>
<SPAN>      <SPAN class="">"productcount@odata.type"</SPAN><SPAN class="">:</SPAN> <SPAN class="">"#Decimal"</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN>      <SPAN class="">"productcount"</SPAN><SPAN class="">:</SPAN> <SPAN class="">6</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN>      <SPAN class="">"Category_CategoryID"</SPAN><SPAN class="">:</SPAN> <SPAN class="">6</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN>      <SPAN class="">"@odata.id"</SPAN><SPAN class="">:</SPAN> <SPAN class="">null</SPAN></SPAN>
<SPAN>    <SPAN class="">}</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN>    <SPAN class="">{</SPAN></SPAN>
<SPAN>      <SPAN class="">"productcount@odata.type"</SPAN><SPAN class="">:</SPAN> <SPAN class="">"#Decimal"</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN>      <SPAN class="">"productcount"</SPAN><SPAN class="">:</SPAN> <SPAN class="">5</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN>      <SPAN class="">"Category_CategoryID"</SPAN><SPAN class="">:</SPAN> <SPAN class="">7</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN>      <SPAN class="">"@odata.id"</SPAN><SPAN class="">:</SPAN> <SPAN class="">null</SPAN></SPAN>
<SPAN>    <SPAN class="">}</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN>    <SPAN class="">{</SPAN></SPAN>
<SPAN>      <SPAN class="">"productcount@odata.type"</SPAN><SPAN class="">:</SPAN> <SPAN class="">"#Decimal"</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN>      <SPAN class="">"productcount"</SPAN><SPAN class="">:</SPAN> <SPAN class="">12</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN>      <SPAN class="">"Category_CategoryID"</SPAN><SPAN class="">:</SPAN> <SPAN class="">8</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN>      <SPAN class="">"@odata.id"</SPAN><SPAN class="">:</SPAN> <SPAN class="">null</SPAN></SPAN>
<SPAN>    <SPAN class="">}</SPAN></SPAN>
<SPAN>  <SPAN class="">]</SPAN></SPAN><SPAN><SPAN class="">}</SPAN></SPAN></PRE></DIV><P>As you can see, the OData V4 aggregate facilities, and CAP's support for them, is pretty neat!</P><H2 id="toc-hId--900835324">Your task</H2><P>Your task is to create a new category, and then request it. In other words, you must contruct an appropriate HTTP request to form an OData CREATE operation, to add a new category entity into the entity set. You can see from above that a category has just three properties:</P><UL><LI>CategoryID - this is the key and must be an integer value</LI><LI>CategoryName - a short name for the category</LI><LI>Description - a brief summary of what the category is</LI></UL><P>You must supply the following values for these properties when creating your new category:</P><UL><LI>CategoryID - your SAP Community ID <STRONG>number</STRONG> (see the Hints and tips section)</LI><LI>CategoryName - your SAP Community ID <STRONG>in lower case</STRONG></LI><LI>Description - the static text August Developer Challenge</LI></UL><BLOCKQUOTE><P>You can tell that the CategoryID property must be a number, because of how it's defined in the OData service's metadata document.</P></BLOCKQUOTE><P>Once you've created your new category, you must then construct an appropriate HTTP request to form an OData READ operation to request a representation of your category. There are some important points here:</P><UL><LI>you must use an OData READ operation and not an OData QUERY operation</LI><LI>you must exclude the Description property, i.e. you should request (and expect) only the category properties CategoryID and CategoryName</LI><LI>the representation of the response must be in JSON</LI></UL><P>The representation of the response is the value you need to hash and share as a new reply to this discussion thread, as always, and as described in <A href="https://groups.community.sap.com/t5/application-development/sap-developer-challenge-apis-task-0-learn-to-share-your-task/m-p/276058" target="_blank" rel="noopener noreferrer">Task 0</A>. Note that you'll have to URL encode the entire value, as you will be sending it within the value=('...') part of the hash service URL.</P><P>You should ensure that the order of the properties in the JSON object structure returned is sorted (it should already be, but double check or just add that processing to whatever mechanism you build to do this) and that there is no extraneous whitespace in the structure at all.</P><P>Here's an example of what a response representation will look like - note the single line and no whitespace, and that the CategoryName value is all lower case:</P><DIV class=""><PRE><SPAN><SPAN class="">{</SPAN><SPAN class="">"@odata.context"</SPAN><SPAN class="">:</SPAN><SPAN class="">"some-context-specification"</SPAN><SPAN class="">,</SPAN><SPAN class="">"CategoryID"</SPAN><SPAN class="">:</SPAN><SPAN class="">53</SPAN><SPAN class="">,</SPAN><SPAN class="">"CategoryName"</SPAN><SPAN class="">:</SPAN><SPAN class="">"qmacro"</SPAN><SPAN class="">}<BR /></SPAN></SPAN></PRE></DIV><H2 id="toc-hId-841975011">Hints and tips</H2><P>You already know about your SAP Community ID. For example, qmacro is the SAP Community ID for DJ Adams. To get your SAP Community ID number, which is unique, just go to your profile page, and get the number from your profile page's URL. For example, the profile page for DJ Adams is at <A class="" href="https://groups.community.sap.com/t5/user/viewprofilepage/user-id/53" target="_blank" rel="noopener noreferrer">https://groups.community.sap.com/t5/user/viewprofilepage/user-id/53</A> and looks like this:</P><P><IMG src="https://community.sap.com/assets/qmacro-profile-page.png" border="0" alt="" /><span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="qmacro-profile-page.png" style="width: 999px;"><img src="https://community.sap.com/t5/image/serverpage/image-id/42207iABF9875C90105128/image-size/large?v=v2&amp;px=999" role="button" title="qmacro-profile-page.png" alt="qmacro-profile-page.png" /></span></P><P>You can see the SAP Community ID number in the URL - it's 53. Go to your profile page and get the number from the resulting URL for your profile.</P><P>What about the OData READ vs OData QUERY operation question? Both use the same HTTP method (GET) but the structure of the data returned is different. Given that the data and its structure is what you need to ensure is correct before hashing it, it's important you think about how you would request that single new category.</P><H2 id="toc-hId--1710181950">For discussion</H2><P>What is the definition of the CategoryID property, according to the metadata document?</P><P>What is the difference between the result of an OData QUERY operation and the result of an OData READ operation? How does this relate to OData's origins? What is the significant difference in data structure returned?</P><P>Did you try to request a different representation of your category, such as XML? What happened?</P>
---
SAP Developer Challenge - APIs - Task 5 - Call the country date format API endpoint
application-developmentforum-board
2023-08-14
https://community.sap.com/t5/application-development-discussions/sap-developer-challenge-apis-task-5-call-the-country-date-format-api/td-p/279160
2023-08-14-sap-developer-challenge-apis-task-5-call-the-country-date-format-api
<P>(Check out the <A href="https://blogs.sap.com/2023/08/01/sap-developer-challenge-apis/" target="_blank" rel="noopener noreferrer">SAP Developer Challenge - APIs</A> blog post for everything you need to know about the challenge to which this task relates!)</P><P>Now you're familiar with the <A href="https://api.sap.com/api/DateAndTime/overview" target="_blank" rel="noopener noreferrer">Date and Time</A> API, you are in a position to try out one of the endpoints.</P><H2 id="toc-hId-1651315063">Background</H2><P>For many APIs on the <A href="https://api.sap.com/" target="_blank" rel="noopener noreferrer">SAP Business Accelerator Hub</A> there are options to "try out" the endpoints. You can define your own environment that you can then use to connect to from the hub:</P><P><span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="add-new-environment.png" style="width: 999px;"><img src="https://community.sap.com/t5/image/serverpage/image-id/41944i6E59A5D46DA4A37C/image-size/large?v=v2&amp;px=999" role="button" title="add-new-environment.png" alt="add-new-environment.png" /></span></P><P><IMG src="https://community.sap.com/assets/add-new-environment.png" border="0" alt="" /></P><P>There's also a sandbox environment that's available for some of the API packages too, and this Date and Time API is one that is available in this sandbox environment.</P><H2 id="toc-hId--900841898">Your task</H2><P>Your task is to make a call to a specific endpoint in this API.</P><P>That endpoint is one of those that you might have seen in the previous task, but not one that met the criteria of that task. It's this one:</P><PRE>/getCountryDateFormat</PRE><BLOCKQUOTE><P>The reason it doesn't meet the criteria is because a response to a request to this endpoint is returned in a text representation, i.e. MIME type text/plain, and not JSON.</P></BLOCKQUOTE><P>You must specify the value DE for the country parameter.</P><P>But rather than just use the <A href="https://api.sap.com/api/DateAndTime/tryout" target="_blank" rel="noopener noreferrer">Try Out</A> facility on the hub, you should instead make the call using an HTTP client of your choice. There's some examples given in the <A href="https://groups.community.sap.com/t5/application-development/sap-developer-challenge-apis-task-0-learn-to-share-your-task/m-p/276058" target="_blank" rel="noopener noreferrer">Hints and tips section of Task 0</A>.</P><P>In order to "persuade" you to make the HTTP call yourself, you need not only the response to such a call, but you'll need also a specific header from the HTTP response. That header is a custom header, i.e. is prefixed with x- and relates to a traditional programming language in the SAP world.</P><P>So you need to take two values:</P><UL><LI>the content of the response payload (remember, it is in a text/plain representation)</LI><LI>the x- prefixed SAP language related header name, as it appears in the HTTP response</LI></UL><P>The header name should already appear in lower case, but please make sure it is, i.e. before you use it (see the next paragraph), ensure that it is all-lowercase.</P><P>You must join these two values together into a single string, concatenated with a comma.</P><P>It's this single string that you must send to be hashed and shared in a reply to this discussion thread as described in <A href="https://groups.community.sap.com/t5/application-development/sap-developer-challenge-apis-task-0-learn-to-share-your-task/m-p/276058" target="_blank" rel="noopener noreferrer">Task 0</A>.</P><P>So for example, if the response payload was:</P><PRE>"banana"</PRE><P>and the response headers looked like this:</P><PRE>Date: Thu, 27 Jul 2023 12:05:40 GMT
Content-Type: application/json
Content-Length: 12
Connection: keep-alive
vary: Accept-Encoding
x-abap-hidden-header: 123.456ms
x-request-id: 54dcdcb3-cf10-4d2b-6a2d-64ad846bd1e5
x-response-time: 417.10979ms
x-vcap-request-id: 54dcdcb3-cf10-4d2b-6a2d-64ad846bd1e5
strict-transport-security: max-age=31536000; includeSubDomains; preload;
Access-Control-Allow-Origin: *
Access-Control-Allow-Credentials: false</PRE><P>then the string to hash would be:</P><PRE>"banana",x-abap-hidden-header</PRE><H2 id="toc-hId-841968437">Hints and tips</H2><P>You'll need to find out how to authenticate the HTTP request, and provide the appropriate authentication details. If you don't, your request will be refused, with an HTTP 401 status code. Here's an example, where you see the headers of the request (identified with &gt; characters at the start of the line) and of the response (identified with &lt; characters at the start of the line):</P><PRE>&gt; GET /dateandtime/getTimezoneFromLocation?country=DE HTTP/1.1
&gt; Host: sandbox.api.sap.com
&gt; User-Agent: curl/7.74.0
&gt; Accept: */*
&gt; 
&lt; HTTP/1.1 401 Unauthorized
&lt; Date: Thu, 27 Jul 2023 11:59:48 GMT
&lt; Content-Type: application/json
&lt; Content-Length: 146
&lt; Connection: keep-alive
&lt; </PRE><P>You'll also receive some JSON in the response body telling you what's missing.</P><P>In order to get the authentication details you need, you'll need to be logged on to the hub.</P><P>You'll need to get your HTTP client or client library to emit the details of the HTTP response, so you can see the headers and find the one required. For example with curl, you could use the --include option, or even the --verbose option.</P><H2 id="toc-hId--1710188524">For discussion</H2><P>Have you seen x- prefixed headers before? What does this prefix signify? Is this still common practice these days?</P>
---
SAP Developer Challenge - APIs - Task 4 - Discover the Date and Time API Package
application-developmentforum-board
2023-08-11
https://community.sap.com/t5/application-development-discussions/sap-developer-challenge-apis-task-4-discover-the-date-and-time-api-package/td-p/278745
2023-08-11-sap-developer-challenge-apis-task-4-discover-the-date-and-time-api-package
<P>(Check out the <A href="https://blogs.sap.com/2023/08/01/sap-developer-challenge-apis/" target="_blank" rel="noopener noreferrer">SAP Developer Challenge - APIs</A> blog post for everything you need to know about the challenge to which this task relates!)</P><P>It's time to take a look at what the SAP Business Accelerator Hub has to offer in terms of APIs.</P><H2 id="toc-hId-1651290981">Background</H2><P>The <A href="https://api.sap.com" target="_blank" rel="noopener noreferrer">SAP Business Accelerator Hub</A> (formerly known as the SAP Business API Hub) is the central location for all things APIs.</P><P>While APIs are key resources on there, the hub contains other types of resource too, including:</P><UL><LI><A href="https://api.sap.com/allprocess" target="_blank" rel="noopener noreferrer">Business Processes</A></LI><LI><A href="https://api.sap.com/discoverintegrations" target="_blank" rel="noopener noreferrer">Integrations</A></LI><LI><A href="https://api.sap.com/content-type/Events/events/events" target="_blank" rel="noopener noreferrer">Events</A></LI><LI><A href="https://api.sap.com/content-type/Workflow/workflowmanagement/packages" target="_blank" rel="noopener noreferrer">Process Automation Packages</A></LI></UL><P>and much more.</P><P>But we're interested in APIs, which are generally organized by <A href="https://api.sap.com/allproducts" target="_blank" rel="noopener noreferrer">product</A>, and within product, by package. For example, the <A href="https://api.sap.com/products/SAPCloudPlatform" target="_blank" rel="noopener noreferrer">SAP Business Technology Platform product</A> has APIs, Events, Integrations, Business Process and Workflow Management resources.</P><P>Selecting the APIs category, you'll see that the APIs are organized into categories (such as SOAP, OData V2, OData V4 and REST) and presented in packages. You can see this clearly on the packages page for the SAP Business Technology Platform product:</P><P><IMG src="https://community.sap.com/assets/sap-btp-api-packages.png" border="0" alt="" /><span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="sap-btp-api-packages.png" style="width: 999px;"><img src="https://community.sap.com/t5/image/serverpage/image-id/41832iDD33996AC0AA9AAC/image-size/large?v=v2&amp;px=999" role="button" title="sap-btp-api-packages.png" alt="sap-btp-api-packages.png" /></span></P><P>Once you choose an API package, you will find one or more APIs, each of which have one or more endpoints, which are usually arranged into endpoint groups.</P><P>You may find this diagram, taken from the <A href="https://github.com/SAP-samples/cloud-btp-cli-api-codejam/blob/main/exercises/05-core-services-api-prep/README.md#learning-about-the-api-structure-authentication-and-use" target="_blank" rel="noopener nofollow noreferrer">Learning about the API structure, authentication and use</A> section of <A href="https://github.com/SAP-samples/cloud-btp-cli-api-codejam/blob/main/exercises/05-core-services-api-prep/README.md" target="_blank" rel="noopener nofollow noreferrer">Exercise 05 - Preparing to call a Core Services API</A> of the <A href="https://github.com/SAP-samples/cloud-btp-cli-api-codejam" target="_blank" rel="noopener nofollow noreferrer">Hands-on with the btp CLI and APIs</A>&nbsp;SAP CodeJam material serves as a helpful example of this:</P><PRE>+-------------+
|             |
| API Package |      Core Services for SAP BTP
|             |
+-------------+
       |
+-------------+
|             |
|     API     |      Entitlements Service
|             |
+-------------+
       |
+-------------+
|             |
|    Group    |      Regions for Global Account
|             |
+-------------+
       |
+-------------+
|             |
|  Endpoint   |      /entitlements/v1/globalAccountAllowedDataCenters
|             |
+-------------+</PRE><P>This example is from the <A href="https://api.sap.com/package/SAPCloudPlatformCoreServices/rest" target="_blank" rel="noopener noreferrer">Core Services for SAP BTP</A> API package.</P><H2 id="toc-hId--900865980">Your task</H2><P>Your task is to find and explore the Date and Time API (which lives in its own dedicated package) on the SAP Business Accelerator Hub. It's in the REST category, and has an API specification available in both YAML and JSON formats. Specifically, you should download the API specification either in either of those two formats (your choice).</P><P>You should then write a script to parse the downloaded specification, to determine the API endpoints ("paths") that have <EM>both</EM> of the following properties:</P><UL><LI>the endpoint is accessible with the HTTP GET method</LI><LI>responses returned from the endpoint are in JSON</LI></UL><P>You should take that list of paths, sort them and then join them together with colons, into a single string, with no spaces. That single string is the value that you should then send to the hash function and post the resulting hash as a new reply to this discussion thread, as described in <A href="https://groups.community.sap.com/t5/application-development/sap-developer-challenge-apis-task-0-learn-to-share-your-task/m-p/276058" target="_blank" rel="noopener noreferrer">Task 0 - Learn to share your task results</A>.</P><P>For example, if you determined that the endpoints paths that fit these conditions are:</P><UL><LI>/endpointOne</LI><LI>/endpointTwo</LI><LI>/anotherEndpoint</LI></UL><P>then the string you should produce to send for hashing should be:</P><PRE>/anotherEndpoint:/endpointOne:/endpointTwo</PRE><H2 id="toc-hId-841944355">Hints and tips</H2><P>In order to download API specifications from the SAP Business Accelerator Hub, you'll need to be logged in. You must download them manually via the browser (i.e. rather than retrieve them via another HTTP client).</P><P>Response representations are declared using <A href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Common_types" target="_blank" rel="noopener nofollow noreferrer">MIME types</A>, and the MIME type for JSON is application/json.</P><P>If you want to parse YAML, and you're a JavaScript fan, you may find the <A href="https://github.com/nodeca/js-yaml" target="_blank" rel="noopener nofollow noreferrer">js-yaml</A> module useful.</P><H2 id="toc-hId--1710212606">For discussion</H2><P>The API specification is available in two formats - JSON and YAML. Often for APIs there is also a third format - EDMX. Why isn't that available here?</P><P>Which API specification format did you choose, and why? Do you prefer parsing YAML or JSON?</P><P>How did you apply the endpoint conditions described above, and in what language?</P>
---
SAP Developer Challenge - APIs - Task 3 - Have a Northbreeze product selected for you
application-developmentforum-board
2023-08-09
https://community.sap.com/t5/application-development-discussions/sap-developer-challenge-apis-task-3-have-a-northbreeze-product-selected-for/td-p/277972
2023-08-09-sap-developer-challenge-apis-task-3-have-a-northbreeze-product-selected-for
<P>(Check out the <A href="https://blogs.sap.com/2023/08/01/sap-developer-challenge-apis/" target="_blank" rel="noopener noreferrer">SAP Developer Challenge - APIs</A> blog post for everything you need to know about the challenge to which this task relates!)</P><P>In this task you'll learn a bit about actions and functions in OData V4.</P><H2 id="toc-hId-1651263202">Background</H2><P>While OData V2 did have function imports, the advent of OData V4 brought about enhancements in this area and we now have a clean distinction between different types of orthogonal endpoints that can be presented in an OData service alongside the entity sets, singletons and more. See the <A href="https://github.com/qmacro/odata-v4-and-cap/blob/main/slides.md#actions-and-functions" target="_blank" rel="noopener nofollow noreferrer">Actions and functions</A> sections of the <A href="https://github.com/qmacro/odata-v4-and-cap/blob/main/slides.md" target="_blank" rel="noopener nofollow noreferrer">OData V4 and SAP Cloud Application Programming Model</A> talk slides for more info.</P><P>With CAP's support for OData V4's actions and functions ready for us to enjoy, it's a good opportunity to try things out here.</P><P>In addition to the entity sets we saw in the previous task, the <A href="https://developer-challenge.cfapps.eu10.hana.ondemand.com/odata/v4/northbreeze" target="_blank" rel="noopener nofollow noreferrer">Northbreeze OData V4 service</A> also sports an action. If you check the service's <A href="https://developer-challenge.cfapps.eu10.hana.ondemand.com/odata/v4/northbreeze/$metadata" target="_blank" rel="noopener nofollow noreferrer">metadata document</A> document you'll see the evidence of this action.</P><P>First, it appears alongside the EntitySet elements within the EntityContainer element:</P><DIV class=""><PRE><SPAN><SPAN class="">&lt;EntityContainer</SPAN><SPAN class=""> Name=</SPAN><SPAN class="">"EntityContainer"</SPAN><SPAN class="">&gt;</SPAN></SPAN>
<SPAN>  <SPAN class="">&lt;EntitySet</SPAN><SPAN class=""> Name=</SPAN><SPAN class="">"Products"</SPAN><SPAN class=""> EntityType=</SPAN><SPAN class="">"Northbreeze.Products"</SPAN><SPAN class="">&gt;</SPAN></SPAN>
<SPAN>    <SPAN class="">&lt;NavigationPropertyBinding</SPAN><SPAN class=""> Path=</SPAN><SPAN class="">"Category"</SPAN><SPAN class=""> Target=</SPAN><SPAN class="">"Categories"</SPAN><SPAN class="">/&gt;</SPAN></SPAN>
<SPAN>    <SPAN class="">&lt;NavigationPropertyBinding</SPAN><SPAN class=""> Path=</SPAN><SPAN class="">"Supplier"</SPAN><SPAN class=""> Target=</SPAN><SPAN class="">"Suppliers"</SPAN><SPAN class="">/&gt;</SPAN></SPAN>
<SPAN>  <SPAN class="">&lt;/EntitySet&gt;</SPAN></SPAN>
<SPAN>  <SPAN class="">&lt;EntitySet</SPAN><SPAN class=""> Name=</SPAN><SPAN class="">"Suppliers"</SPAN><SPAN class=""> EntityType=</SPAN><SPAN class="">"Northbreeze.Suppliers"</SPAN><SPAN class="">&gt;</SPAN></SPAN>
<SPAN>    <SPAN class="">&lt;NavigationPropertyBinding</SPAN><SPAN class=""> Path=</SPAN><SPAN class="">"Products"</SPAN><SPAN class=""> Target=</SPAN><SPAN class="">"Products"</SPAN><SPAN class="">/&gt;</SPAN></SPAN>
<SPAN>  <SPAN class="">&lt;/EntitySet&gt;</SPAN></SPAN>
<SPAN>  <SPAN class="">&lt;EntitySet</SPAN><SPAN class=""> Name=</SPAN><SPAN class="">"Categories"</SPAN><SPAN class=""> EntityType=</SPAN><SPAN class="">"Northbreeze.Categories"</SPAN><SPAN class="">&gt;</SPAN></SPAN>
<SPAN>    <SPAN class="">&lt;NavigationPropertyBinding</SPAN><SPAN class=""> Path=</SPAN><SPAN class="">"Products"</SPAN><SPAN class=""> Target=</SPAN><SPAN class="">"Products"</SPAN><SPAN class="">/&gt;</SPAN></SPAN>
<SPAN>  <SPAN class="">&lt;/EntitySet&gt;</SPAN></SPAN>
<SPAN>  <SPAN class="">&lt;EntitySet</SPAN><SPAN class=""> Name=</SPAN><SPAN class="">"Summary_of_Sales_by_Years"</SPAN><SPAN class=""> EntityType=</SPAN><SPAN class="">"Northbreeze.Summary_of_Sales_by_Years"</SPAN><SPAN class="">/&gt;</SPAN></SPAN>
<SPAN>  <SPAN class="">&lt;EntitySet</SPAN><SPAN class=""> Name=</SPAN><SPAN class="">"TotalProducts"</SPAN><SPAN class=""> EntityType=</SPAN><SPAN class="">"Northbreeze.TotalProducts"</SPAN><SPAN class="">/&gt;</SPAN></SPAN>
<SPAN>  <SPAN class="">&lt;ActionImport</SPAN><SPAN class=""> Name=</SPAN><SPAN class="">"selectProduct"</SPAN><SPAN class=""> Action=</SPAN><SPAN class="">"Northbreeze.selectProduct"</SPAN><SPAN class="">/&gt;</SPAN></SPAN>
<SPAN><SPAN class="">&lt;/EntityContainer&gt;</SPAN></SPAN></PRE></DIV><P>The action itself is described in more detail along with the EntityType elements. Here it is in full:</P><DIV class=""><PRE><SPAN><SPAN class="">&lt;Action</SPAN><SPAN class=""> Name=</SPAN><SPAN class="">"selectProduct"</SPAN><SPAN class=""> IsBound=</SPAN><SPAN class="">"false"</SPAN><SPAN class="">&gt;</SPAN></SPAN>
<SPAN>  <SPAN class="">&lt;Parameter</SPAN><SPAN class=""> Name=</SPAN><SPAN class="">"communityid"</SPAN><SPAN class=""> Type=</SPAN><SPAN class="">"Edm.String"</SPAN><SPAN class="">/&gt;</SPAN></SPAN>
<SPAN>  <SPAN class="">&lt;ReturnType</SPAN><SPAN class=""> Type=</SPAN><SPAN class="">"Edm.String"</SPAN><SPAN class="">/&gt;</SPAN></SPAN>
<SPAN><SPAN class="">&lt;/Action&gt;</SPAN></SPAN></PRE></DIV><P>You can see from this detail that:</P><UL><LI>it's an unbound action</LI><LI>it expects a single parameter communityid</LI><LI>it returns a result</LI></UL><P>Basically, this action expects to receive your SAP Community ID as input, and, based on that ID, will choose a product for you.</P><BLOCKQUOTE><P>Actions vs functions: One of the key differences between actions and functions in OData V4 is that while functions may not have side effects, actions may well have side effects. This means that normally functions will be used for read-only operations, while actions can be used for operations that make some sort of change. But they don't have to. And here, we're using an action, rather than a function, mostly because actions require the POST HTTP method (because they may have side effects), rather than GET. And requiring you to use HTTP POST for this task makes things more interesting.</P></BLOCKQUOTE><H2 id="toc-hId--900893759">Your task</H2><P>Your task is to call this unbound action, supplying your SAP Community ID for the communityid parameter. The response you will receive is a JSON representation, containing a value property, the value for which is the product that has been selected for you (based on your SAP Community ID).</P><P>This is the value you must hash and then post that hash as a new reply to this discussion thread, as described in <A href="https://groups.community.sap.com/t5/application-development/sap-developer-challenge-apis-task-0-learn-to-share-your-task/m-p/276058" target="_blank" rel="noopener noreferrer">Task 0 - Learn to share your task results</A>.</P><P>Here's an example. Calling the action with qmacro as the value for communityid causes this to be returned in response (pretty printed for readability):</P><DIV class=""><PRE><SPAN><SPAN class="">{</SPAN></SPAN>
<SPAN>  <SPAN class="">"@odata.context"</SPAN><SPAN class="">:</SPAN> <SPAN class="">"$metadata#Edm.String"</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN>  <SPAN class="">"value"</SPAN><SPAN class="">:</SPAN> <SPAN class="">"RÃ¶ssle Sauerkraut"</SPAN></SPAN>
<SPAN><SPAN class="">}</SPAN></SPAN></PRE></DIV><P>The product name RÃ¶ssle Sauerkraut is what needs to be hashed. Note, in this case, that any value passed in the URL path must be properly URL encoded. So while the value test, for example, needs no specific URL encoding, this value must be URL encoded, in order to be successfully transported in the URL path and accurately received and parsed by the hash service. In other words, the value:</P><PRE>RÃ¶ssle Sauerkraut</PRE><P>needs to be URL encoded so it looks like this:</P><PRE>R%C3%B6ssle%20Sauerkraut</PRE><P>When inserted into the URL path, it will therefore look like this:</P><PRE>/v1/hash(value='R%C3%B6ssle%20Sauerkraut')</PRE><H2 id="toc-hId-841916576">Hints and tips</H2><P>You may want to peruse the content of the talk <A href="https://github.com/qmacro/odata-v4-and-cap/blob/main/slides.md" target="_blank" rel="noopener nofollow noreferrer">OData V4 and SAP Cloud Application Programming Model</A>, in particular the short <A href="https://github.com/qmacro/odata-v4-and-cap/blob/main/slides.md#actions-and-functions" target="_blank" rel="noopener nofollow noreferrer">Actions and functions</A> section.</P><P>You may also wish to watch the replay of the Hands-on SAP Dev live stream episode <A href="https://www.youtube.com/watch?v=tmwglig2mbw" target="_blank" rel="noopener nofollow noreferrer">Back to basics: OData - the Open Data Protocol - Part 5 - Actions &amp; functions</A>.</P><P>You can find out what URL encoding is all about in the <A href="https://en.wikipedia.org/wiki/URL_encoding" target="_blank" rel="noopener nofollow noreferrer">Wikipedia entry for URL encoding</A>. You're likely to find either a built-in or a library function in your favorite language to do that, for example JavaScript has <A href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent" target="_blank" rel="noopener nofollow noreferrer">encodeURIComponent</A> and Python has a quote function in <A href="https://docs.python.org/3/library/urllib.parse.html" target="_blank" rel="noopener nofollow noreferrer">urllib.parse</A>.</P><P>Finally, you may wish to read this short post <A href="https://qmacro.org/blog/posts/2023/08/08/odata-query-operations-and-url-encoding-the-system-query-options-with-curl/" target="_self" rel="nofollow noopener noreferrer">OData query operations and URL encoding the system query options with curl</A>, written in part as a response to <A href="https://groups.community.sap.com/t5/application-development/sap-developer-challenge-apis-task-2-calculate-northbreeze/m-p/277635/highlight/true#M2656" target="_self" rel="noopener noreferrer">a great comment on the previous task</A>.</P><H2 id="toc-hId--1710240385">For discussion</H2><P>What's the difference between the meanings of "bound" and "unbound" in this context? What does the fact that the selectProduct action is "unbound" suggest to us?</P><P>Remember, if you're posting your thoughts on these discussion questions, remember to do it in a reply separate from your hash reply!</P>
---
SAP Developer Challenge - APIs - Task 2 - Calculate Northbreeze product stock
application-developmentforum-board
2023-08-07
https://community.sap.com/t5/application-development-discussions/sap-developer-challenge-apis-task-2-calculate-northbreeze-product-stock/td-p/277325
2023-08-07-sap-developer-challenge-apis-task-2-calculate-northbreeze-product-stock
<P>(Check out the <A href="https://blogs.sap.com/2023/08/01/sap-developer-challenge-apis/" target="_blank" rel="noopener noreferrer">SAP Developer Challenge - APIs</A> blog post for everything you need to know about the challenge to which this task relates!)</P><P>In this task you'll move from the public Northwind service to a simple version powered by CAP, and explore data with an OData operation and some system query options.</P><H2 id="toc-hId-1651257284">Background</H2><P>The OASIS curated Northwind service is great, but it's also sometimes useful to have one's own version. There's an extremely simplified version of the classic Northwind service, called Northbreeze (get it?) at <A class="" href="https://developer-challenge.cfapps.eu10.hana.ondemand.com/odata/v4/northbreeze" target="_blank" rel="noopener nofollow noreferrer">https://developer-challenge.cfapps.eu10.hana.ondemand.com/odata/v4/northbreeze</A>.</P><P>This Northbreeze service is powered by the SAP Cloud Application Programming Model (CAP) and offers four entity sets:</P><UL><LI>Products</LI><LI>Suppliers</LI><LI>Categories</LI><LI>Summary of sales by years</LI></UL><P>(Well there's technically a fifth, TotalProducts, but that's just a calculation projection on the count of products).</P><P>The reason for running our own version of Northwind is that we can modify and extend it as we see fit, plus being based on CAP, we can learn about and experiment with CAP's rich support for <A href="https://cap.cloud.sap/docs/advanced/odata" target="_blank" rel="noopener nofollow noreferrer">serving OData APIs</A>.</P><P>In this task you'll start to become familiar with the data offered.</P><P>Specifically for this task, you'll need to become familiar with the Products data. To do that, have a look at the Northbreeze service's metadata document at <A class="" href="https://developer-challenge.cfapps.eu10.hana.ondemand.com/odata/v4/northbreeze/$metadata" target="_blank" rel="noopener nofollow noreferrer">https://developer-challenge.cfapps.eu10.hana.ondemand.com/odata/v4/northbreeze/$metadata</A>.</P><P>Identify the EntityContainer element that describes the entity sets available, in the form of EntitySet elements, and find the element describing the entity set with the name Products, which should look like this:</P><DIV class=""><PRE><SPAN><SPAN class="">&lt;EntitySet</SPAN><SPAN class=""> Name=</SPAN><SPAN class="">"Products"</SPAN><SPAN class=""> EntityType=</SPAN><SPAN class="">"Northbreeze.Products"</SPAN><SPAN class="">&gt;</SPAN></SPAN>
<SPAN> <SPAN class="">&lt;NavigationPropertyBinding</SPAN><SPAN class=""> Path=</SPAN><SPAN class="">"Category"</SPAN><SPAN class=""> Target=</SPAN><SPAN class="">"Categories"</SPAN><SPAN class="">/&gt;</SPAN></SPAN>
<SPAN> <SPAN class="">&lt;NavigationPropertyBinding</SPAN><SPAN class=""> Path=</SPAN><SPAN class="">"Supplier"</SPAN><SPAN class=""> Target=</SPAN><SPAN class="">"Suppliers"</SPAN><SPAN class="">/&gt;</SPAN></SPAN>
<SPAN><SPAN class="">&lt;/EntitySet&gt;</SPAN></SPAN></PRE></DIV><P>You can see that this entity set is a collection of Northbreeze.Products entity types. The 'Northbreeze' part is essentially the namespace, generated based on the service name. Follow the trail to the Products entity type, which will be an element outside the EntityContainer element, but still within the Northbreeze-namespaced Schema element.</P><P>The Products entity type should look like this:</P><DIV class=""><PRE><SPAN><SPAN class="">&lt;EntityType</SPAN><SPAN class=""> Name=</SPAN><SPAN class="">"Products"</SPAN><SPAN class="">&gt;</SPAN></SPAN>
<SPAN> <SPAN class="">&lt;Key&gt;</SPAN></SPAN>
<SPAN> <SPAN class="">&lt;PropertyRef</SPAN><SPAN class=""> Name=</SPAN><SPAN class="">"ProductID"</SPAN><SPAN class="">/&gt;</SPAN></SPAN>
<SPAN> <SPAN class="">&lt;/Key&gt;</SPAN></SPAN>
<SPAN> <SPAN class="">&lt;Property</SPAN><SPAN class=""> Name=</SPAN><SPAN class="">"ProductID"</SPAN><SPAN class=""> Type=</SPAN><SPAN class="">"Edm.Int32"</SPAN><SPAN class=""> Nullable=</SPAN><SPAN class="">"false"</SPAN><SPAN class="">/&gt;</SPAN></SPAN>
<SPAN> <SPAN class="">&lt;Property</SPAN><SPAN class=""> Name=</SPAN><SPAN class="">"ProductName"</SPAN><SPAN class=""> Type=</SPAN><SPAN class="">"Edm.String"</SPAN><SPAN class="">/&gt;</SPAN></SPAN>
<SPAN> <SPAN class="">&lt;Property</SPAN><SPAN class=""> Name=</SPAN><SPAN class="">"QuantityPerUnit"</SPAN><SPAN class=""> Type=</SPAN><SPAN class="">"Edm.String"</SPAN><SPAN class="">/&gt;</SPAN></SPAN>
<SPAN> <SPAN class="">&lt;Property</SPAN><SPAN class=""> Name=</SPAN><SPAN class="">"UnitPrice"</SPAN><SPAN class=""> Type=</SPAN><SPAN class="">"Edm.Decimal"</SPAN><SPAN class=""> Scale=</SPAN><SPAN class="">"variable"</SPAN><SPAN class="">/&gt;</SPAN></SPAN>
<SPAN> <SPAN class="">&lt;NavigationProperty</SPAN><SPAN class=""> Name=</SPAN><SPAN class="">"Category"</SPAN><SPAN class=""> Type=</SPAN><SPAN class="">"Northbreeze.Categories"</SPAN><SPAN class=""> Partner=</SPAN><SPAN class="">"Products"</SPAN><SPAN class="">&gt;</SPAN></SPAN>
<SPAN> <SPAN class="">&lt;ReferentialConstraint</SPAN><SPAN class=""> Property=</SPAN><SPAN class="">"Category_CategoryID"</SPAN><SPAN class=""> ReferencedProperty=</SPAN><SPAN class="">"CategoryID"</SPAN><SPAN class="">/&gt;</SPAN></SPAN>
<SPAN> <SPAN class="">&lt;/NavigationProperty&gt;</SPAN></SPAN>
<SPAN> <SPAN class="">&lt;Property</SPAN><SPAN class=""> Name=</SPAN><SPAN class="">"Category_CategoryID"</SPAN><SPAN class=""> Type=</SPAN><SPAN class="">"Edm.Int32"</SPAN><SPAN class="">/&gt;</SPAN></SPAN>
<SPAN> <SPAN class="">&lt;NavigationProperty</SPAN><SPAN class=""> Name=</SPAN><SPAN class="">"Supplier"</SPAN><SPAN class=""> Type=</SPAN><SPAN class="">"Northbreeze.Suppliers"</SPAN><SPAN class=""> Partner=</SPAN><SPAN class="">"Products"</SPAN><SPAN class="">&gt;</SPAN></SPAN>
<SPAN> <SPAN class="">&lt;ReferentialConstraint</SPAN><SPAN class=""> Property=</SPAN><SPAN class="">"Supplier_SupplierID"</SPAN><SPAN class=""> ReferencedProperty=</SPAN><SPAN class="">"SupplierID"</SPAN><SPAN class="">/&gt;</SPAN></SPAN>
<SPAN> <SPAN class="">&lt;/NavigationProperty&gt;</SPAN></SPAN>
<SPAN> <SPAN class="">&lt;Property</SPAN><SPAN class=""> Name=</SPAN><SPAN class="">"Supplier_SupplierID"</SPAN><SPAN class=""> Type=</SPAN><SPAN class="">"Edm.Int32"</SPAN><SPAN class="">/&gt;</SPAN></SPAN>
<SPAN> <SPAN class="">&lt;Property</SPAN><SPAN class=""> Name=</SPAN><SPAN class="">"UnitsInStock"</SPAN><SPAN class=""> Type=</SPAN><SPAN class="">"Edm.Int32"</SPAN><SPAN class="">/&gt;</SPAN></SPAN>
<SPAN> <SPAN class="">&lt;Property</SPAN><SPAN class=""> Name=</SPAN><SPAN class="">"UnitsOnOrder"</SPAN><SPAN class=""> Type=</SPAN><SPAN class="">"Edm.Int32"</SPAN><SPAN class="">/&gt;</SPAN></SPAN>
<SPAN> <SPAN class="">&lt;Property</SPAN><SPAN class=""> Name=</SPAN><SPAN class="">"ReorderLevel"</SPAN><SPAN class=""> Type=</SPAN><SPAN class="">"Edm.Int32"</SPAN><SPAN class="">/&gt;</SPAN></SPAN>
<SPAN> <SPAN class="">&lt;Property</SPAN><SPAN class=""> Name=</SPAN><SPAN class="">"Discontinued"</SPAN><SPAN class=""> Type=</SPAN><SPAN class="">"Edm.Boolean"</SPAN><SPAN class="">/&gt;</SPAN></SPAN>
<SPAN><SPAN class="">&lt;/EntityType&gt;</SPAN></SPAN></PRE></DIV><P>Amongst other things, you can see that a product has an ID (ProductID), a name (ProductName), a count of the number of units currently in stock (UnitsInStock) and a boolean that is used to indicate whether or not a product is discontinued (Discontinued).</P><P>Request the first few products to see data for these and the other properties, via&nbsp;<A href="https://developer-challenge.cfapps.eu10.hana.ondemand.com/odata/v4/northbreeze/Products?$top=5" target="_blank" rel="noopener nofollow noreferrer">https://developer-challenge.cfapps.eu10.hana.ondemand.com/odata/v4/northbreeze/Products?$top=5</A>.&nbsp;You should see something like this:</P><DIV class=""><PRE><SPAN><SPAN class="">{</SPAN></SPAN>
<SPAN> <SPAN class="">"@odata.context"</SPAN><SPAN class="">:</SPAN> <SPAN class="">"$metadata#Products"</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN> <SPAN class="">"value"</SPAN><SPAN class="">:</SPAN> <SPAN class="">[</SPAN></SPAN>
<SPAN> <SPAN class="">{</SPAN></SPAN>
<SPAN> <SPAN class="">"ProductID"</SPAN><SPAN class="">:</SPAN> <SPAN class="">1</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN> <SPAN class="">"ProductName"</SPAN><SPAN class="">:</SPAN> <SPAN class="">"Chai"</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN> <SPAN class="">"QuantityPerUnit"</SPAN><SPAN class="">:</SPAN> <SPAN class="">"10 boxes x 20 bags"</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN> <SPAN class="">"UnitPrice"</SPAN><SPAN class="">:</SPAN> <SPAN class="">18</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN> <SPAN class="">"Category_CategoryID"</SPAN><SPAN class="">:</SPAN> <SPAN class="">1</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN> <SPAN class="">"Supplier_SupplierID"</SPAN><SPAN class="">:</SPAN> <SPAN class="">1</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN> <SPAN class="">"UnitsInStock"</SPAN><SPAN class="">:</SPAN> <SPAN class="">39</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN> <SPAN class="">"UnitsOnOrder"</SPAN><SPAN class="">:</SPAN> <SPAN class="">0</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN> <SPAN class="">"ReorderLevel"</SPAN><SPAN class="">:</SPAN> <SPAN class="">10</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN> <SPAN class="">"Discontinued"</SPAN><SPAN class="">:</SPAN> <SPAN class="">false</SPAN></SPAN>
<SPAN> <SPAN class="">}</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN> <SPAN class="">{</SPAN></SPAN>
<SPAN> <SPAN class="">"ProductID"</SPAN><SPAN class="">:</SPAN> <SPAN class="">2</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN> <SPAN class="">"ProductName"</SPAN><SPAN class="">:</SPAN> <SPAN class="">"Chang"</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN> <SPAN class="">"QuantityPerUnit"</SPAN><SPAN class="">:</SPAN> <SPAN class="">"24 - 12 oz bottles"</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN> <SPAN class="">"UnitPrice"</SPAN><SPAN class="">:</SPAN> <SPAN class="">19</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN> <SPAN class="">"Category_CategoryID"</SPAN><SPAN class="">:</SPAN> <SPAN class="">1</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN> <SPAN class="">"Supplier_SupplierID"</SPAN><SPAN class="">:</SPAN> <SPAN class="">1</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN> <SPAN class="">"UnitsInStock"</SPAN><SPAN class="">:</SPAN> <SPAN class="">17</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN> <SPAN class="">"UnitsOnOrder"</SPAN><SPAN class="">:</SPAN> <SPAN class="">40</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN> <SPAN class="">"ReorderLevel"</SPAN><SPAN class="">:</SPAN> <SPAN class="">25</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN> <SPAN class="">"Discontinued"</SPAN><SPAN class="">:</SPAN> <SPAN class="">false</SPAN></SPAN>
<SPAN> <SPAN class="">}</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN> <SPAN class="">{</SPAN></SPAN>
<SPAN> <SPAN class="">"ProductID"</SPAN><SPAN class="">:</SPAN> <SPAN class="">3</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN> <SPAN class="">"ProductName"</SPAN><SPAN class="">:</SPAN> <SPAN class="">"Aniseed Syrup"</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN> <SPAN class="">"QuantityPerUnit"</SPAN><SPAN class="">:</SPAN> <SPAN class="">"12 - 550 ml bottles"</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN> <SPAN class="">"UnitPrice"</SPAN><SPAN class="">:</SPAN> <SPAN class="">10</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN> <SPAN class="">"Category_CategoryID"</SPAN><SPAN class="">:</SPAN> <SPAN class="">2</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN> <SPAN class="">"Supplier_SupplierID"</SPAN><SPAN class="">:</SPAN> <SPAN class="">1</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN> <SPAN class="">"UnitsInStock"</SPAN><SPAN class="">:</SPAN> <SPAN class="">13</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN> <SPAN class="">"UnitsOnOrder"</SPAN><SPAN class="">:</SPAN> <SPAN class="">70</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN> <SPAN class="">"ReorderLevel"</SPAN><SPAN class="">:</SPAN> <SPAN class="">25</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN> <SPAN class="">"Discontinued"</SPAN><SPAN class="">:</SPAN> <SPAN class="">false</SPAN></SPAN>
<SPAN> <SPAN class="">}</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN> <SPAN class="">{</SPAN></SPAN>
<SPAN> <SPAN class="">"ProductID"</SPAN><SPAN class="">:</SPAN> <SPAN class="">4</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN> <SPAN class="">"ProductName"</SPAN><SPAN class="">:</SPAN> <SPAN class="">"Chef Anton's Cajun Seasoning"</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN> <SPAN class="">"QuantityPerUnit"</SPAN><SPAN class="">:</SPAN> <SPAN class="">"48 - 6 oz jars"</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN> <SPAN class="">"UnitPrice"</SPAN><SPAN class="">:</SPAN> <SPAN class="">22</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN> <SPAN class="">"Category_CategoryID"</SPAN><SPAN class="">:</SPAN> <SPAN class="">2</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN> <SPAN class="">"Supplier_SupplierID"</SPAN><SPAN class="">:</SPAN> <SPAN class="">2</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN> <SPAN class="">"UnitsInStock"</SPAN><SPAN class="">:</SPAN> <SPAN class="">53</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN> <SPAN class="">"UnitsOnOrder"</SPAN><SPAN class="">:</SPAN> <SPAN class="">0</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN> <SPAN class="">"ReorderLevel"</SPAN><SPAN class="">:</SPAN> <SPAN class="">0</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN> <SPAN class="">"Discontinued"</SPAN><SPAN class="">:</SPAN> <SPAN class="">false</SPAN></SPAN>
<SPAN> <SPAN class="">}</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN> <SPAN class="">{</SPAN></SPAN>
<SPAN> <SPAN class="">"ProductID"</SPAN><SPAN class="">:</SPAN> <SPAN class="">5</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN> <SPAN class="">"ProductName"</SPAN><SPAN class="">:</SPAN> <SPAN class="">"Chef Anton's Gumbo Mix"</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN> <SPAN class="">"QuantityPerUnit"</SPAN><SPAN class="">:</SPAN> <SPAN class="">"36 boxes"</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN> <SPAN class="">"UnitPrice"</SPAN><SPAN class="">:</SPAN> <SPAN class="">21.35</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN> <SPAN class="">"Category_CategoryID"</SPAN><SPAN class="">:</SPAN> <SPAN class="">2</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN> <SPAN class="">"Supplier_SupplierID"</SPAN><SPAN class="">:</SPAN> <SPAN class="">2</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN> <SPAN class="">"UnitsInStock"</SPAN><SPAN class="">:</SPAN> <SPAN class="">0</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN> <SPAN class="">"UnitsOnOrder"</SPAN><SPAN class="">:</SPAN> <SPAN class="">0</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN> <SPAN class="">"ReorderLevel"</SPAN><SPAN class="">:</SPAN> <SPAN class="">0</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN> <SPAN class="">"Discontinued"</SPAN><SPAN class="">:</SPAN> <SPAN class="">true</SPAN></SPAN>
<SPAN> <SPAN class="">}</SPAN></SPAN>
<SPAN> <SPAN class="">]</SPAN></SPAN>
<SPAN><SPAN class="">}</SPAN></SPAN></PRE></DIV><H2 id="toc-hId--900899677">Your task</H2><P>Your task is to calculate the total stock quantity (i.e. the total units in stock) for all current products, i.e. products that are not been marked as discontinued. The result of this calculation should be a number.</P><P>Once you have calculated the number, which should be an integer, you should hash it and post the hash as a new reply to this discussion thread, as described in <A href="https://groups.community.sap.com/t5/application-development/sap-developer-challenge-apis-task-0-learn-to-share-your-task/m-p/276058" target="_blank" rel="noopener noreferrer">Task 0 - Learn to share your task results</A> and in a similar way to how you've done this in the previous task.</P><H2 id="toc-hId-841910658">Hints and tips</H2><P>Like all tasks in this challenge, you are free to approach this one however you see fit. One way would be to request all the products (<A class="" href="https://developer-challenge.cfapps.eu10.hana.ondemand.com/odata/v4/northbreeze/Products" target="_blank" rel="noopener nofollow noreferrer">https://developer-challenge.cfapps.eu10.hana.ondemand.com/odata/v4/northbreeze/Products</A>) and manually sum the values of the relevant UnitsInStock properties.</P><P>But where's the fun in that?</P><P>How about requesting the entire products entity set in your favorite language and obtaining result by parsing the response and using that language to make the calculation?</P><P>You could also use OData's $filter system query option to first reduce the entity set result to only those products that have the value false for the Discontinued property.</P><P>And what about the $count facility, which in OData V4 <A href="https://github.com/qmacro/odata-v4-and-cap/blob/main/slides.md#count-as-system-query-option" target="_blank" rel="noopener nofollow noreferrer">is now a system query option as well something you can append to a resource path</A>?</P><P>This would also be a good opportunity to take your first steps exploring some great new OData V4 features supported by CAP, such as <A href="https://cap.cloud.sap/docs/advanced/odata#data-aggregation" target="_blank" rel="noopener nofollow noreferrer">data aggregation</A>.</P><H2 id="toc-hId--1710246303">For discussion</H2><P>How did you approach this task? If you used a programming language, which one did you use, and how did you do it? If you used an $apply based data aggregation feature, what was it, and was was your experience using it?</P>
---
SAP Developer Challenge - APIs - Task 1 - List the Northwind entity sets
application-developmentforum-board
2023-08-03
https://community.sap.com/t5/application-development-discussions/sap-developer-challenge-apis-task-1-list-the-northwind-entity-sets/td-p/276626
2023-08-03-sap-developer-challenge-apis-task-1-list-the-northwind-entity-sets
<P>(Check out the <A href="https://blogs.sap.com/2023/08/01/sap-developer-challenge-apis/" target="_blank" rel="noopener noreferrer">SAP Developer Challenge - APIs</A> blog post for everything you need to know about the challenge to which this task relates!)</P><P>In this task you'll become acquainted with entity sets in the classic Northwind service.</P><H2 id="toc-hId-1651230377">Background</H2><P>You may have heard of, or even interacted with an instance of, the Northwind model and service, originally and properly called "<A href="https://en.wikiversity.org/wiki/Database_Examples/Northwind" target="_blank" rel="noopener nofollow noreferrer">Northwind Traders</A>". It has a classic and well-known set of related entities and is often a first introduction for many to database schemas, OData services and more. It was originally shipped with the Microsoft Access database application.</P><P>The entities and their relationships are easy to understand and it's partly for this reason that it's so popular. In this task, you will briefly explore the Northwind service offered by OASIS Open, the non-profit standards body, where there's a <A href="https://www.oasis-open.org/committees/tc_home.php?wg_abbrev=odata" target="_blank" rel="noopener nofollow noreferrer">working group that looks after the Open Data Protocol (OData) standard</A>.</P><P>There are various services available at the simple landing page at <A class="" href="https://services.odata.org" target="_blank" rel="noopener nofollow noreferrer">https://services.odata.org</A> and the one we will use is the OData V4 version, which is available directly at this address:</P><P><A class="" href="https://services.odata.org/V4/Northwind/Northwind.svc/" target="_blank" rel="noopener nofollow noreferrer">https://services.odata.org/V4/Northwind/Northwind.svc/</A></P><H2 id="toc-hId--900926584">Your task</H2><P>Your task specifically is to list the entity sets available in this service. They should be presented as a single string, following these rules:</P><UL><LI>the entity set names should be exactly as specified in the service</LI><LI>you should keep whatever case the entity set names are written in</LI><LI>the entity sets should be listed in alphabetical order</LI><LI>they should be comma-separated, with no spaces</LI></UL><P>Here's a short example of what a list should look like:</P><PRE>Categories,Customers,Suppliers</PRE><BLOCKQUOTE><P>There are more entity sets than just these three, this is just an example.</P></BLOCKQUOTE><P>Once you have constructed the list, you should hash it and post the hash as a new reply to this discussion thread, as described in <A href="https://groups.community.sap.com/t5/application-development/sap-developer-challenge-apis-task-0-learn-to-share-your-task/m-p/276058" target="_blank" rel="noopener noreferrer">Task 0 - Learn to share your task results</A>. This means that to get the hash, you would need to make a call to the hash service like this (based again on the above short example), supplying your SAP Community ID in the appropriate header too:</P><PRE>https://developer-challenge.cfapps.eu10.hana.ondemand.com/v1/hash(value='Categories,Customers,Suppliers')</PRE><H2 id="toc-hId-841883751">Hints and tips</H2><P>What is an entity set? It is essentially a collection (a set) of entities. There are two places where an OData service typically details the entity sets on offer. One is the service document, available at the root of the service's base URL. And the other is the metadata document, available at the service's base URL with $metadata appended. Metadata documents contain a wealth of information for an OData service; the entity set details are included, but there's a lot of other information that is included too, information that you must exclude or otherwise ignore. Simpler perhaps would be to take the service document, which has a set of collections (this harks back to the <A href="https://blogs.sap.com/2018/08/20/monday-morning-thoughts-odata/" target="_blank" rel="noopener noreferrer">origins of OData</A>, incidentally) which more or less equate to entity sets.</P><P>If you request the service document (<A class="" href="https://services.odata.org/V4/Northwind/Northwind.svc/" target="_blank" rel="noopener nofollow noreferrer">https://services.odata.org/V4/Northwind/Northwind.svc/</A>) in your browser, you get an XML based representation in response. You can parse this XML with any XML library, or command line tool (such as <A href="https://xmlstar.sourceforge.net/" target="_blank" rel="noopener nofollow noreferrer">xmlstarlet</A> or <A href="https://xmllint.com/" target="_blank" rel="noopener nofollow noreferrer">xmllint</A>.</P><P>While the service document's XML structure is much simpler than the metadata document, it's still XML, and it's arguably easier these days to avoid XML altogether when doing ad-hoc parsing activities. With OData V2 services, the service document is only available in an XML representation. It's also available in a JSON representation with OData V4 services.</P><P>Using a command line HTTP client, for example, to request the service document, we get an entirely different representation.</P><P>For example, this invocation of curl:</P><PRE>curl \
  --url "https://services.odata.org/V4/Northwind/Northwind.svc/"</PRE><P>returns a JSON representation, that looks like this (redacted for brevity):</P><DIV class=""><PRE><SPAN><SPAN class="">{</SPAN></SPAN>
<SPAN>  <SPAN class="">"@odata.context"</SPAN><SPAN class="">:</SPAN> <SPAN class="">"https://services.odata.org/V4/Northwind/Northwind.svc/$metadata"</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN>  <SPAN class="">"value"</SPAN><SPAN class="">:</SPAN> <SPAN class="">[</SPAN></SPAN>
<SPAN>    <SPAN class="">{</SPAN></SPAN>
<SPAN>      <SPAN class="">"name"</SPAN><SPAN class="">:</SPAN> <SPAN class="">"Categories"</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN>      <SPAN class="">"kind"</SPAN><SPAN class="">:</SPAN> <SPAN class="">"EntitySet"</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN>      <SPAN class="">"url"</SPAN><SPAN class="">:</SPAN> <SPAN class="">"Categories"</SPAN></SPAN>
<SPAN><SPAN class="">    }</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN>    <SPAN class="">{</SPAN></SPAN>
<SPAN>      <SPAN class="">"name"</SPAN><SPAN class="">:</SPAN> <SPAN class="">"CustomerDemographics"</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN>      <SPAN class="">"kind"</SPAN><SPAN class="">:</SPAN> <SPAN class="">"EntitySet"</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN>      <SPAN class="">"url"</SPAN><SPAN class="">:</SPAN> <SPAN class="">"CustomerDemographics"</SPAN></SPAN>
<SPAN>    <SPAN class="">}</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN>    <SPAN class="">{</SPAN></SPAN>
<SPAN>      <SPAN class="">"name"</SPAN><SPAN class="">:</SPAN> <SPAN class="">"Customers"</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN>      <SPAN class="">"kind"</SPAN><SPAN class="">:</SPAN> <SPAN class="">"EntitySet"</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN>      <SPAN class="">"url"</SPAN><SPAN class="">:</SPAN> <SPAN class="">"Customers"</SPAN></SPAN>
<SPAN>    <SPAN class="">}</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN>    <SPAN class="">{</SPAN></SPAN>
<SPAN>      <SPAN class="">"name"</SPAN><SPAN class="">:</SPAN> <SPAN class="">"Employees"</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN>      <SPAN class="">"kind"</SPAN><SPAN class="">:</SPAN> <SPAN class="">"EntitySet"</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN>      <SPAN class="">"url"</SPAN><SPAN class="">:</SPAN> <SPAN class="">"Employees"</SPAN></SPAN>
<SPAN>    <SPAN class="">}</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN>    <SPAN class="">{</SPAN></SPAN>
<SPAN>      <SPAN class="">"name"</SPAN><SPAN class="">:</SPAN> <SPAN class="">"Order_Details"</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN>      <SPAN class="">"kind"</SPAN><SPAN class="">:</SPAN> <SPAN class="">"EntitySet"</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN>      <SPAN class="">"url"</SPAN><SPAN class="">:</SPAN> <SPAN class="">"Order_Details"</SPAN></SPAN>
<SPAN>    <SPAN class="">}</SPAN></SPAN>
<SPAN>  <SPAN class="">]</SPAN></SPAN>
<SPAN><SPAN class="">}</SPAN></SPAN></PRE></DIV><P>In case you're interested, the shell pipeline to produce this redacted representation was:</P><PRE>curl \
  --silent \
  --url "https://services.odata.org/V4/Northwind/Northwind.svc/" \
  | jq '.value|=.[:5]'</PRE><P>Once you have a JSON representation of the service document, you can use your favorite language (JavaScript, TypeScript, Python, ABAP, or perhaps <A href="https://jqlang.github.io/jq/" target="_blank" rel="noopener nofollow noreferrer">jq</A>) to parse out the entity set names, and form them, in alphabetical order, into the comma-separated list that you need.</P><P>Of course, if you prefer to parse the XML representation of the service document, then by all means do that.</P><H2 id="toc-hId--1710273210">For discussion</H2><P>We get different representations of the service document resource, depending on where we make the request. In the browser, the representation comes back in XML form. Using curl on the command line, the representation is in JSON form. Why do you think that is?</P>
---
SAP Developer Challenge - APIs
technology-blog-sap
2023-08-01
https://community.sap.com/t5/technology-blogs-by-sap/sap-developer-challenge-apis/ba-p/13573168
2023-08-01-sap-developer-challenge-apis
<EM>We have a new SAP Developer Challenge for you for the month of August. This time it is all about APIs - introducing you to the basics, revisiting some classic aspects, and having a bit of fun along the way.</EM><BR />
<H2 id="toc-hId-963923396">Challenge close and final statistics</H2><BR />
Update 04 Sep 2023: We're now a few days into September already. In <A href="https://www.youtube.com/watch?v=INMZ6agi5E0" target="_blank" rel="nofollow noopener noreferrer">last week's SAP Developer News episode</A> we mentioned that we'd keep the challenge open for a few more days (basically until the weekend was over) for you to catch up on any tasks that were outstanding. That period is now over, and the challenge is now officially closed, as of 0900 BST (UTC+1) today. The statistics below are based on all participation up to this point.<BR />
<BR />
The tasks are still available for you to work through, and will remain available for the forseeable future. We have endeavoured to supply enough background information in each of the tasks for you to complete them on your own at any time.<BR />
<BR />
We'd like to congratulate each and every one of you for taking part, and working through the tasks. There was a super community vibe and some interesting discussions sparked by some great questions from you. We thank you for that.<BR />
<BR />
So, here are a few statistics.<BR />
<H3 id="toc-hId-896492610">Overall participation</H3><BR />
There were lots of you that took part! In fact, 223 unique participants. All of you that participated will receive an SAP Community badge, as mentioned towards the end of this post. Congratulations to all of you, who are:<BR />
<BR />
AAncos, ALEJONO, AbapAndy728, AchimBolte, Afenna, AndrewF, ArindamSAP, Ashok_Easa, Bharathi_S, BrijeshGandhi, Chaitanyat, Cmdd, Cylia_Oulebsir, DazOwens, DenisGaland, DirkO, Ella, Eurey, FabienHenique, Flavio, FooThePolarBear, Frank_Haschick, GRABLERE, Gowtham, HJRavi, HelenaFortun, Hendrik, Henning, IngoS, IsmailFatih, JJAIMES, Jagtar, JohnPaulLiberal, Julio, K_Choudhary, KathrynKazibwe, Keekee, MadhavKumar, Mahmoud-Farag, ManojSutar, MarcelloUrbani, MeriemSouissi, Monni, Nacho_Rodriguez, Naguco, Nicolas, Nidhi, OlH, OlgenH, P41l, Petchimuthu_M, PriyankaChak, R4BB1T, RUPAM9115, Rafito, Rajshekhar2, Ramjee_korada, RaulVega, Rishi_and_SAP, Ritik, Ruthiel, SSchuck, SandipAgarwalla, SandraSolis, Sharadha, Shubasis, StKollos, SubaR, Suneeth_P, SyamisUnique, SyedAllaBakshu, TJRP, TRainer, TRuloff, TiagoAlmeida, Tomas_Buryanek, ToniOostveen, TravelTechCode, VenugopalA, VinitaSangtani, Zakir_hussain, _Konstantin_, aancos_id, abdullahgunes, adrian-ngo, ajay_soreng, ajmaradiaga, ajos, akshaychats129, alessandraarm, amine_b23, andrew_chiam, andyl, anupamduttaroy, arismuda, arunneerolil, aslan1906, barisguler, bernd_broesamle, beserk, bmsudhakaran, brahammittal, bugsanderrrors, bztoy, cd_winc, cdias, ceedee666, cguttikonda24, choujiacheng, cinemandre, d067595, dakoller, dan_wroblewski, danielpobletaes, das87, devrajsingh, dhegde, dianab, dinah, dvontress, eakucuk, ecem_yalim, eddiedu, elkhenati, emiliocampo, encarrero, erickgrilo, fabio_correa, flo_conrad, fsteurer, garyzuo, geek, govardhansahil, gphadnis2000, gustavo-alvarez, harsh_itaverma, hunamm, huseyindereli, ibibhu, imancour, induthiru, jagadish, jasshauer, jdm, jens_borau, jironoor, jitendrakansal, jkz, jmalappil, jmuiruri, johna69, kamesh-sap, kasch-code, kjyothiraditya, koehntopp, ktrkanjec, kumarniti4, kunalsahi85, lehuynhnam, lvhengel, marhol, martin_zauner, martinstenzig, mdejesus, menglert, miyasuta, msoans, mts2605_orsted, mustafabilen, mvaibhav, nagarajan, nalin_sharma, naveen1241, nex, nicoschoenteich, nilsb, njames, nmkarthikeya, ofilho, p330068, pedropeixoto, pmthien, pmwilliam, pocaFight, prachetas, prashil, pvnierop, r5luga, ramana_salapu, raulguti, rdulek, rohantiwari, sabarna17, sainithesh21, salilmehta01, sandeepmalhotra, sarahf, satya-dev, se38, se71, seVladimirs, senchi, sgatea, shotokka, shrinivasan_ns, somnath_paul, spassaro, steph_senita, stephancalmindo, stevanic, stickman_0x00, swanandl, szeteng00, thomas_jung, thomasks, tly, tobiasz_h, turanaydin, vedaradhya, vignesh_narayan, vinaychowdary, xyla, yassine.<BR />
<H3 id="toc-hId-699979105">Overall task completion</H3><BR />
There were 13 tasks altogether. Each of these were successfully completed by many of you. Here's the breakdown, task by task, of how many of you completed each task.<BR />
<PRE class="language-c"><CODE>176 Task 0  ++++++++++++++++++++++++++++++++++++++++++++++++<BR />
 70 Task 1  ++++++++++++++++++++<BR />
104 Task 2  +++++++++++++++++++++++++++++<BR />
 90 Task 3  +++++++++++++++++++++++++<BR />
 53 Task 4  +++++++++++++++<BR />
 56 Task 5  ++++++++++++++++<BR />
 38 Task 6  +++++++++++<BR />
 49 Task 7  ++++++++++++++<BR />
 44 Task 8  ++++++++++++<BR />
 35 Task 9  ++++++++++<BR />
 37 Task 10 +++++++++++<BR />
 30 Task 11 +++++++++<BR />
 27 Task 12 ++++++++</CODE></PRE><BR />
<H3 id="toc-hId-503465600">Individual task streaks</H3><BR />
There was a lot of work for you to do across all 13 tasks in this challenge. Some of you did incredibly well, successfully completing multiple tasks in the challenge period.<BR />
<BR />
Here's a breakdown of how many of you successfully completed how many tasks in total:<BR />
<PRE class="language-c"><CODE>188 1 tasks  +++++++++++++++++++++++++++++++++++++++++++++++<BR />
127 2 tasks  ++++++++++++++++++++++++++++++++<BR />
 96 3 tasks  ++++++++++++++++++++++++<BR />
 79 4 tasks  ++++++++++++++++++++<BR />
 65 5 tasks  +++++++++++++++++<BR />
 54 6 tasks  ++++++++++++++<BR />
 50 7 tasks  +++++++++++++<BR />
 40 8 tasks  ++++++++++<BR />
 31 9 tasks  ++++++++<BR />
 28 10 tasks +++++++<BR />
 23 11 tasks ++++++<BR />
 19 12 tasks +++++<BR />
  9 13 tasks +++</CODE></PRE><BR />
As you can see, a handful of you, 9 in total, worked through and successfully completed every single task. While we can't give a special extra badge for this, we'd like to call you out as participants with stamina!<BR />
<UL><BR />
 	<LI>PriyankaChak</LI><BR />
 	<LI>ajmaradiaga</LI><BR />
 	<LI>geek</LI><BR />
 	<LI>kasch-code</LI><BR />
 	<LI>sabarna17</LI><BR />
 	<LI>se38</LI><BR />
 	<LI>seVladimirs</LI><BR />
 	<LI>thomas_jung</LI><BR />
 	<LI>tobiasz_h</LI><BR />
</UL><BR />
Great work! <span class="lia-unicode-emoji" title=":flexed_biceps:">ðª</span><BR />
<BR />
Thanks once more to each and every participant for taking part in this challenge. Look out for your badge which should be coming your way in the next few weeks!<BR />
<BR />
We'd love to hear from you on how you found this challenge, what you liked, what you disliked. So please, please, take a minute or two to leave a comment to this blog post, below, letting us know how we can do better next time.<BR />
<BR />
Thanks!<BR />
<H2 id="toc-hId-177869376">Task list</H2><BR />
<SPAN style="font-size: 1rem">If you're just here for the list of tasks in this challenge so far, here they are:</SPAN><BR />
<BR />
<A href="https://groups.community.sap.com/t5/application-development/sap-developer-challenge-apis-task-0-learn-to-share-your-task/m-p/276058#M2319" target="_blank" rel="noopener noreferrer">Task 0 - Learn to share your task results</A><BR />
<BR />
<A href="https://groups.community.sap.com/t5/application-development/sap-developer-challenge-apis-task-1-list-the-northwind-entity/m-p/276626" target="_blank" rel="noopener noreferrer">Task 1 - List the Northwind entity sets</A><BR />
<BR />
<A href="https://groups.community.sap.com/t5/application-development/sap-developer-challenge-apis-task-2-calculate-northbreeze/m-p/277325" target="_blank" rel="noopener noreferrer">Task 2 - Calculate Northbreeze product stock</A><BR />
<BR />
<A href="https://groups.community.sap.com/t5/application-development/sap-developer-challenge-apis-task-3-have-a-northbreeze-product/m-p/277972#M2727" target="_blank" rel="noopener noreferrer">Task 3 - Have a Northbreeze product selected for you</A><BR />
<BR />
<A href="https://groups.community.sap.com/t5/application-development/sap-developer-challenge-apis-task-4-discover-the-date-and-time/m-p/278745" target="_blank" rel="noopener noreferrer">Task 4 - Discover the Date and Time API Package</A><BR />
<BR />
<A href="https://groups.community.sap.com/t5/application-development/sap-developer-challenge-apis-task-5-call-the-country-date-format/td-p/279160" target="_blank" rel="noopener noreferrer">Task 5 - Call the country date format API endpoint</A><BR />
<BR />
<A href="https://groups.community.sap.com/t5/application-development/sap-developer-challenge-apis-task-6-create-a-new-northbreeze/m-p/279812" target="_blank" rel="noopener noreferrer">Task 6 - Create a new Northbreeze category</A><BR />
<BR />
<A href="https://groups.community.sap.com/t5/application-development/sap-developer-challenge-apis-task-7-create-a-new-directory-in-an/m-p/280341" target="_blank" rel="noopener noreferrer">Task 7 - Create a new directory in an SAP BTP account</A><BR />
<BR />
<A href="https://groups.community.sap.com/t5/application-development/sap-developer-challenge-apis-task-8-create-an-instance-of-the/m-p/280681" target="_blank" rel="noopener noreferrer">Task 8 - Create an instance of the SAP Cloud Management Service</A><BR />
<BR />
<A href="https://groups.community.sap.com/t5/application-development/sap-developer-challenge-task-9-create-a-service-key-for-api/m-p/281337" target="_blank" rel="noopener noreferrer">Task 9 - Create a service key for API endpoints and auth info</A><BR />
<BR />
<A href="https://groups.community.sap.com/t5/application-development/sap-developer-challenge-apis-task-10-request-an-oauth-access/m-p/281933" target="_blank" rel="noopener noreferrer">Task 10 - Request an OAuth access token</A><BR />
<BR />
<A href="https://groups.community.sap.com/t5/application-development/sap-developer-challenge-apis-task-11-examine-the-access-token/m-p/282366" target="_blank" rel="noopener noreferrer">Task 11 - Examine the access token for scopes</A><BR />
<BR />
<A href="https://groups.community.sap.com/t5/application-development-discussions/sap-developer-challenge-apis-task-12-use-the-access-token-to-call-the-api/td-p/283202" target="_blank" rel="noopener noreferrer">Task 12 - Use the access token to call the API endpoint</A><BR />
<H2 id="toc-hId--18644129">Introduction</H2><BR />
<SPAN style="font-size: 1rem">OK, let's dive in!</SPAN><BR />
<BR />
<SPAN style="font-size: 1rem">APIs are an essential component in any system, large or small. In enterprise software, you can think of APIs as providing the lifeblood, the flow, in between and around systems that work together.</SPAN><BR />
<H2 id="toc-hId--215157634">Aspects of APIs</H2><BR />
There are many aspects of APIs, not least whether any given API is synchronous or asynchronous. But beyond that, there are styles. From simple HTTP based APIs that use HTTP as what it is, i.e. an application level protocol, through to those that conform partially or fully to RESTful constraints, such as OData, to styles which are quite orthogonal, such as gRPC, GraphQL and SOAP.<BR />
<BR />
So while there are many API styles and aspects, this month we'll focus on what is arguably the style that covers a large majority of integration interactions - HTTP and OData. Not least because to understand HTTP and OData is to understand the protocol that is used as a transport layer* for other styles (such as SOAP, <A href="https://xmpp.org/extensions/xep-0009.html" target="_blank" rel="nofollow noopener noreferrer">XML-RPC</A>, <A href="https://blogs.sap.com/2018/09/03/monday-morning-thoughts-considering-graphql/" target="_blank" rel="noopener noreferrer">GraphQL</A> and more).<BR />
<BR />
*I'm deliberately going to avoid talking about whether that is a good thing or not <span class="lia-unicode-emoji" title=":slightly_smiling_face:">ð</span><BR />
<H2 id="toc-hId--411671139">The challenge</H2><BR />
As a slight departure from previous SAP Developer Challenges where there have been around four weekly tasks, we're trying something a little different this month, with a series of more smaller, shorter tasks. Each task is something you can probably do in a coffee or lunch break (there are some that may take a little longer), and introduces you to some aspect of HTTP and OData APIs.<BR />
<BR />
Some tasks will be based on simple services that are ideal for light touch activities. Others will be based on, and thereby introduce you to, or allow you to revisit, facilities on the <A href="https://api.sap.com" target="_blank" rel="noopener noreferrer">SAP Business Accelerator Hub</A> (previously known as the SAP API Business Hub).<BR />
<H2 id="toc-hId--608184644">The tasks</H2><BR />
So any given SAP Developer Challenge like this consists of one or more tasks.<BR />
<BR />
Each task in this challenge will be presented as a new discussion thread in the <A href="https://groups.community.sap.com/t5/application-development/gh-p/application-development" target="_blank" rel="noopener noreferrer">Application Development area of the SAP Community</A> and the content of each of these discussion topics will have sections as follows:<BR />
<UL><BR />
 	<LI>Background: some content that covers details of the API aspect or feature at hand</LI><BR />
 	<LI>Your task: a description of what you actually have to do</LI><BR />
 	<LI>Hints and tips: information designed to help you complete the task</LI><BR />
 	<LI>For discussion: questions for you to consider, and to share your thoughts on</LI><BR />
</UL><BR />
For each task, you are encouraged to do two things:<BR />
<OL><BR />
 	<LI>Complete the task as described, and share your result in a reply to the task's discussion thread - this should be in the form of a SHA256 hash made from that result value and your SAP Community ID.</LI><BR />
 	<LI>Share your thoughts, by starting a separate reply to the task's discussion thread, on the questions raised in the "For discussion" section.</LI><BR />
</OL><BR />
So the question on your mind now is: "How should I create and share my task result hash?"<BR />
<BR />
Well, you can find out exactly how you should do that, in our very first task for you in this challenge:<BR />
<BR />
<A href="https://groups.community.sap.com/t5/application-development/sap-developer-challenge-apis-task-0-learn-to-share-your-task/m-p/276058#M2319" target="_blank" rel="noopener noreferrer">SAP Developer Challenge - APIs - Task 0 - Learn to share your task results</A><BR />
<H2 id="toc-hId--804698149">The task schedule</H2><BR />
As mentioned earlier, there are more than just four weekly tasks in this challenge. We'll create a new discussion thread in the <A href="https://groups.community.sap.com/t5/application-development/gh-p/application-development" target="_blank" rel="noopener noreferrer">Application Development area of the SAP Community</A> for each task as and when they are ready for you to complete.<BR />
<BR />
Expect each new task to be publicized like this every few days. It's probably worth bookmarking the discussion group, or adding <A href="https://groups.community.sap.com/khhcw49343/rss/board?board.id=application-developmentforum-board" target="_blank" rel="noopener noreferrer">the discussion group's RSS feed</A> to your favorite RSS reader. For example, I use <A href="https://miniflux.app/" target="_blank" rel="nofollow noopener noreferrer">Miniflux</A> and am subscribed to this feed here:<BR />
<P style="overflow: hidden;margin-bottom: 0px"><IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/07/screenshot-2023-07-31-at-09.40.41.png" /></P><BR />
<BR />
<H2 id="toc-hId--653957297">What to do now</H2><BR />
Bookmark or otherwise <A href="https://blogs.sap.com/2023/07/31/sap-developer-challenge-apis/feed/" target="_blank" rel="noopener noreferrer">subscribe to updates to this blog post</A> and / or <A href="https://groups.community.sap.com/t5/application-development/bd-p/application-developmentforum-board" target="_blank" rel="noopener noreferrer">the Application Development discussion threads</A>.<BR />
<BR />
Then head on over to the first discussion thread, for Task 0:<BR />
<BR />
<A href="https://groups.community.sap.com/t5/application-development/sap-developer-challenge-apis-task-0-learn-to-share-your-task/m-p/276058#M2319" target="_blank" rel="noopener noreferrer">SAP Developer Challenge - APIs - Task 0 - Learn to share your task results</A><BR />
<BR />
and complete the task as described. Add your result hash, plus add further replies to the discussion thread with any thoughts you have.<BR />
<BR />
Then check back in a couple of days time to look for the next task in its own new discussion thread!<BR />
<H2 id="toc-hId--850470802">What you'll need</H2><BR />
To complete the tasks, you'll need to use various bits of software; often you'll have a choice (for example, of language to use, or tool to employ). For some of the tasks you'll need an account on SAP Business Technology Platform. A <A href="https://developers.sap.com/tutorials/hcp-create-trial-account.html" target="_blank" rel="noopener noreferrer">trial account</A> will be fine, and is free for anyone.<BR />
<H2 id="toc-hId--1046984307">Badges</H2><BR />
Upon successful completion of the challenge's tasks, you will earn a badge for your SAP Community profile.<BR />
<P style="overflow: hidden;margin-bottom: 0px"><IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/08/screenshot-2023-08-01-at-09.37.58.png" height="236" width="235" /></P><BR />
&nbsp;<BR />
<BR />
We'll leave the tasks open to complete for a period of time after August ends, to give you a chance to catch up and complete them all if you need to.<BR />
<BR />
And don't forget to have fun, learn stuff along the way, and share your thoughts with you fellow SAP Community members!<BR />
<A name="tasklist" target="_blank"></A><BR />
<BR />
&nbsp;
---
SAP Developer Challenge - APIs - Task 0 - Learn to share your task results
application-developmentforum-board
2023-08-01
https://community.sap.com/t5/application-development-discussions/sap-developer-challenge-apis-task-0-learn-to-share-your-task-results/td-p/276058
2023-08-01-sap-developer-challenge-apis-task-0-learn-to-share-your-task-results
<P>(Check out the <A href="https://blogs.sap.com/2023/08/01/sap-developer-challenge-apis/" target="_blank" rel="noopener noreferrer">SAP Developer Challenge - APIs</A> blog post for everything you need to know about the challenge to which this task relates!)</P><P>This month's Developer Challenge consists of a number of tasks. Each task is introduced in a new, separate discussion thread on the SAP Community platform, specifically in the <A href="https://groups.community.sap.com/t5/application-development/gh-p/application-development" target="_blank" rel="noopener noreferrer">Application Development</A> group.</P><H2 id="toc-hId-1651224706">Background</H2><P>In each new discussion created, a new task will be presented. The context will be explained and relevant background information and pointers to helpful resources will be provided. But most importantly for you, the task itself will be described in detail, and that detail will include exactly the result that you need to produce.</P><P>That result will be in the form of a string, which you will then need to share in a reply to that task's discussion thread.</P><P>But.</P><P>Instead of sharing the result in its raw form, you'll first need to hash it with your SAP Community ID. This is for two reasons:</P><P>First, you can share your result but no-one can copy your answer, as it will be hashed with another value unique to you - your SAP Community ID. This means that you can share your hashed task result value openly but no-one can copy it and use it as their own.</P><P>Second, it's a good opportunity to interact with a simple API, providing data in the URL path, but also providing your SAP Community ID as a value in a special header in the HTTP request.</P><BLOCKQUOTE><P>Hashing data is quite straightforward and there are libraries built into many programming languages to do this. It is not normally necessary to have to use an API call to use a hash function. We are just providing one here to give you some extra API work to do as part of this month's challenge!</P></BLOCKQUOTE><H2 id="toc-hId--900932255">Hashing your value</H2><P>When you have a value which represents the result of a task, that you need to share, follow this procedure. For this example, let's say that the value is the string my-task-result.</P><H3 id="toc-hId-645364575">Call the hash endpoint to get your hash</H3><P>There's a simple HTTP service at <A class="" href="https://developer-challenge.cfapps.eu10.hana.ondemand.com/" target="_blank" rel="noopener nofollow noreferrer">https://developer-challenge.cfapps.eu10.hana.ondemand.com/</A> that currently provides a single endpoint /v1/hash. Use this endpoint <A href="https://developer-challenge.cfapps.eu10.hana.ondemand.com/" target="_blank" rel="noopener nofollow noreferrer">as instructed</A> to receive a hash. You must provide two pieces of information:</P><UL><LI>the value you want to hash (as part of the URL path)</LI><LI>your SAP Community ID (in a header)</LI></UL><P>How you specify each of these two values is described on the <A href="https://developer-challenge.cfapps.eu10.hana.ondemand.com/" target="_blank" rel="noopener nofollow noreferrer">HTTP service's landing page</A>. Make sure you follow the instructions.</P><P>If your call is successful, you'll receive a hash in response. The hash mechanism uses SHA256 and a hex digest is what's provided as the hash output, in case your interested.</P><H3 id="toc-hId--1906792386">Reply to the task's discussion thread with that hash</H3><P>Once you have the hash, post a reply to the task's discussion thread, with that hash value.</P><P>DO NOT ADD ANYTHING ELSE TO THAT REPLY. Don't be tempted to add any formatting, either. Include just the hash value, with no other content. This is because we will be automating the checks for correct responses, and if we cannot successfully parse out the hash value from your reply, that value won't be counted.</P><H2 id="toc-hId-32531454">Your task</H2><P>So the very first task of this month's Developer Challenge ... is to make sure you can follow the above process to hash a value (representing any given answer to a future task in this series) and provide it in a reply to the discussion thread.</P><P>Use the static value</P><PRE>this-is-the-year-of-the-api</PRE><P>(don't include the line number 1 in there, that's just an artifact of how preformatted text is rendered on this platform) and follow the above process to get a hash for this value and post the hash as a reply to this discussion thread.</P><P>You can call the hash endpoint any way you like. Note that you can't just call it in your browser, as a basic GET request. In other words, you can't just make a simple HTTP GET request to <A class="" href="https://developer-challenge.cfapps.eu10.hana.ondemand.com/v1/hash(value='this-is-the-year-of-the-api')" target="_blank" rel="noopener nofollow noreferrer">https://developer-challenge.cfapps.eu10.hana.ondemand.com/v1/hash(value='this-is-the-year-of-the-api')</A> and expect to get a successful hash response. You must provide an extra HTTP header in your request, conveying your SAP Community ID, as described in the <A href="https://developer-challenge.cfapps.eu10.hana.ondemand.com/" target="_blank" rel="noopener nofollow noreferrer">landing page</A>.</P><H2 id="toc-hId-1775341789">Hints and tips</H2><P>You can make the API call to get a hash for your combination of value and SAP Community ID any way you wish.</P><H3 id="toc-hId--973328677">Your favorite programming language</H3><P>For example, you could use your favorite programming language. There'll be a library that will let you make HTTP requests, add custom headers, and capture the body of the response.</P><H3 id="toc-hId-769481658">The REST Client extension</H3><P>If you're comfortable in VS Code or the SAP Business Application Studio, you can use the <A href="https://marketplace.visualstudio.com/items?itemName=humao.rest-client" target="_blank" rel="noopener nofollow noreferrer">REST Client extension</A> (which is built-in to SAP Business Application Studio Dev Spaces). This extension lets you define HTTP requests, and run them. Here's an example of this in action:</P><P><span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="rest-client.png" style="width: 999px;"><img src="https://community.sap.com/t5/image/serverpage/image-id/41126iD2E708178F7B9B4B/image-size/large?v=v2&amp;px=999" role="button" title="rest-client.png" alt="rest-client.png" /></span></P><P><IMG src="https://community.sap.com/assets/rest-client.png" border="0" alt="" /><EM>Using the REST Client extension to make the hash API call</EM></P><H3 id="toc-hId--1782675303">Postman</H3><P>You could also use a graphical HTTP client such as <A href="https://www.postman.com/" target="_blank" rel="noopener nofollow noreferrer">Postman</A>.</P><P><span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="postman.png" style="width: 999px;"><img src="https://community.sap.com/t5/image/serverpage/image-id/41127i996296654F62F88C/image-size/large?v=v2&amp;px=999" role="button" title="postman.png" alt="postman.png" /></span></P><P><IMG src="https://community.sap.com/assets/postman.png" border="0" alt="" /><EM>Using Postman to make the hash API call</EM></P><H3 id="toc-hId--39864968">A command line client</H3><P>You can of course use a command line client, arguably the most flexible and powerful approaches. And after all, <A href="https://twitter.com/search?q=%23TheFutureIsTerminal" target="_blank" rel="noopener nofollow noreferrer">#TheFutureIsTerminal</A>, right? There are many command line HTTP clients, such as <A href="https://www.gnu.org/software/wget/" target="_blank" rel="noopener nofollow noreferrer">wget</A>, <A href="https://httpie.io/" target="_blank" rel="noopener nofollow noreferrer">httpie</A> and of course <A href="https://curl.se/" target="_blank" rel="noopener nofollow noreferrer">curl</A>, which is used everywhere, <A href="https://youtu.be/Ic37FI351G4?t=126" target="_blank" rel="noopener nofollow noreferrer">even on Mars</A>.</P><P>Here's an example using curl:</P><PRE>curl \
  --include \
  --header "CommunityID: qmacro" \
  --url "https://developer-challenge.cfapps.eu10.hana.ondemand.com/v1/hash(value='this-is-the-year-of-the-api')"</PRE><P>The response (which includes the HTTP headers in that response, because we asked for them with the --include option), looks like this:</P><PRE>HTTP/2 200
content-type: text/plain; charset=utf-8
date: Sat, 22 Jul 2023 13:53:34 GMT
etag: W/"40-LWwbQuJtCsQ3SBBXmdG8hHlJ0EI"
x-correlation-id: a718cf85-83a6-4d3a-54df-9791f1cea235
x-powered-by: Express
x-vcap-request-id: a718cf85-83a6-4d3a-54df-9791f1cea235
content-length: 64
strict-transport-security: max-age=31536000; includeSubDomains; preload;

b8193c6703e9d123e4aa639e43eee631a2f6e3788508b5c6fb3098a3f201607c</PRE><H3 id="toc-hId-987784078">Sharing your hash in a reply to the discussion thread</H3><P>In each of these examples, the hash received in response is:</P><PRE>b8193c6703e9d123e4aa639e43eee631a2f6e3788508b5c6fb3098a3f201607c</PRE><P>This is the value that must be posted in a reply to this discussion thread. Just copy-paste it into the body of a new reply.</P>
---
SAP CodeJam report - service integration with CAP in Guetersloh, DE
code-jamblog-board
2023-06-17
https://community.sap.com/t5/sap-codejam-blog-posts/sap-codejam-report-service-integration-with-cap-in-guetersloh-de/ba-p/266847
2023-06-17-sap-codejam-report-service-integration-with-cap-in-guetersloh-de
<P>I'm on the train back to Duesseldorf on an early Saturday morning, after another successful outing of our SAP CodeJam content that takes participants through the ins and outs of<SPAN>&nbsp;</SPAN><A href="https://github.com/SAP-samples/cap-service-integration-codejam/" target="_blank" rel="noopener nofollow noreferrer">service integration with CAP</A><SPAN>&nbsp;</SPAN>(the SAP Cloud Application Programming Model).</P><P>This time it was in Guetersloh, hosted by<SPAN>&nbsp;</SPAN><A href="https://www.reply.com/de" target="_blank" rel="noopener nofollow noreferrer">Reply</A><SPAN>&nbsp;</SPAN>and the very friendly and helpful Raphael Witte. I arrived in the warm early morning after a short bus ride from the town centre - in fact the bus dropped me off right outside the offices!</P><P><span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="arriving-at-reply.jpg" style="width: 999px;"><img src="https://community.sap.com/t5/image/serverpage/image-id/38154i12D1F3C07763F809/image-size/large?v=v2&amp;px=999" role="button" title="arriving-at-reply.jpg" alt="arriving-at-reply.jpg" /></span></P><P>The setup was excellent. We had a breakout room plus two work rooms with plenty of power and Internet connectivity. The rather advanced TV / projector display mechanism almost had us foiled ... but after a while we figured it out, although at one point we were projecting onto the large display via a Teams meeting between me and Raphael, where I shared my screen and he relayed it to the display through his software-based connection to the display share device. Give me old fashioned direct HDMI cables plugged into the back any day of the week <span class="lia-unicode-emoji" title=":slightly_smiling_face:">ð</span></P><P>The participants were all eager to get started, and all had a great can-do attitude that we needed to work around some initial access challenges. In the end, in fact, every participant ended up going for the VS Code + dev container based working environment which worked brilliantly for everyone. This was also a great testament to the power and flexibility of dev containers, about which I have written in the past, in a three-part series<SPAN>&nbsp;</SPAN><A href="https://blogs.sap.com/2022/01/27/boosting-tutorial-ux-with-dev-containers-part-1-challenge-and-base-solution/" target="_blank" rel="noopener noreferrer">Boosting tutorial UX with dev containers</A>.</P><P>We worked through the exercises, learning together about extending existing services and schemas, external APIs from SAP S/4HANA Cloud, the SAP Business Accelerator Hub (formerly known as the SAP API Business Hub), and how to find and dig into APIs that are detailed there.</P><P>Then we set about importing an API definition into an existing project, learning along the way about internal and external mocking, various useful features of the CAP CLI (cds), and created a separate profile in the environment for a direct connection to the SAP Business Accelerator Hub's sandbox systems.</P><P>Not only that, but we learned about the different levels of integration, and got a hands-on feel for the best ways to extend existing CDS service and entity definitions, as well as wrap imported external services with a reduced surface area.</P><P>All this brain work and conversation was boosted by a midday break for lunch, which was provided by Reply and was delicious, thank you!</P><P><span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="lunchtime-break.jpg" style="width: 999px;"><img src="https://community.sap.com/t5/image/serverpage/image-id/38155iD21DBFB30BC9B93D/image-size/large?v=v2&amp;px=999" role="button" title="lunchtime-break.jpg" alt="lunchtime-break.jpg" /></span></P><P>All in all it was a very enjoyable day. All the participants worked hard, had some great questions which provoked interesting side discussions. This is a key part of SAP CodeJams - the conversations and collaborative learning.</P><P>Thanks again to Reply and to Raphael for hosting, and to everyone for showing up and taking part!</P><HR /><P>(<A href="https://qmacro.org/blog/posts/2023/06/17/sap-codejam-report-service-integration-with-cap-in-guetersloh-de/" target="_self" rel="nofollow noopener noreferrer">originally published on qmacro.org</A>)</P>
---
SAP Developer News, June 8th, 2023
application-developmentforum-board
2023-06-08
https://community.sap.com/t5/application-development-discussions/sap-developer-news-june-8th-2023/td-p/265276
2023-06-08-sap-developer-news-june-8th-2023
<P><div class="video-embed-center video-embed"><iframe class="embedly-embed" src="https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2FDxe4OmaFVy4%3Ffeature%3Doembed&amp;display_name=YouTube&amp;url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DDxe4OmaFVy4&amp;image=https%3A%2F%2Fi.ytimg.com%2Fvi%2FDxe4OmaFVy4%2Fhqdefault.jpg&amp;type=text%2Fhtml&amp;schema=youtube" width="600" height="337" scrolling="no" title="ABAP Roundtable, ECMAScript in UI5, Virtual Hackathon, May Dev Challenge | SAP Developer News" frameborder="0" allow="autoplay; fullscreen; encrypted-media; picture-in-picture;" allowfullscreen="true"></iframe></div></P><P>Episode on YouTube:&nbsp;<A href="https://youtu.be/Dxe4OmaFVy4" target="_blank" rel="noopener nofollow noreferrer">https://youtu.be/Dxe4OmaFVy4</A>&nbsp;</P><P><STRONG>SAP BTP ABAP Environment Customer &amp; Partner Roundtable&nbsp;</STRONG></P><UL><LI><A href="https://blogs.sap.com/2023/05/30/second-customer-partner-roundtable-for-sap-btp-abap-environment/" target="_blank" rel="noopener noreferrer"><SPAN>https://blogs.sap.com/2023/05/30/second-customer-partner-roundtable-for-sap-btp-abap-environment/</SPAN></A><SPAN>&nbsp;</SPAN></LI></UL><P><STRONG>Upgrade Your Tools for Modern ECMAScript in UI5&nbsp;</STRONG></P><UL><LI><A href="https://blogs.sap.com/2023/05/24/upgrade-your-tools-for-modern-ecmascript-in-ui5/" target="_blank" rel="noopener noreferrer"><SPAN>https://blogs.sap.com/2023/05/24/upgrade-your-tools-for-modern-ecmascript-in-ui5/</SPAN></A><SPAN>&nbsp;</SPAN></LI></UL><P><STRONG>âPlan to Win: Get Active with Dataâ Virtual Hackathon&nbsp;</STRONG></P><UL><LI><SPAN>âPlan to Win: Get Active with Dataâ Virtual Hackathon: </SPAN><A href="https://webinars.sap.com/datasphere-virtual-hackathon/en/home" target="_blank" rel="noopener noreferrer"><SPAN>https://webinars.sap.com/datasphere-virtual-hackathon/en/home</SPAN></A> <SPAN>&nbsp;</SPAN></LI><LI><SPAN>Introduction to SAP Datasphere: </SPAN><A href="https://open.sap.com/courses/dsp1" target="_blank" rel="noopener noreferrer"><SPAN>https://open.sap.com/courses/dsp1</SPAN></A> <SPAN>&nbsp;</SPAN></LI><LI><SPAN>Using the Optimizer for SQLScript Programming in SAP HANA: </SPAN><A href="https://open.sap.com/courses/hanasql2" target="_blank" rel="noopener noreferrer"><SPAN>https://open.sap.com/courses/hanasql2</SPAN></A> <SPAN>&nbsp;</SPAN></LI></UL><P><STRONG>May Developer Challenge Close-off + June Developer Challenge Intro&nbsp;</STRONG></P><UL><LI><SPAN>May Developer Challenge: </SPAN><A href="https://blogs.sap.com/2023/05/10/sap-developer-code-challenge-open-source-abap/" target="_blank" rel="noopener noreferrer"><SPAN>https://blogs.sap.com/2023/05/10/sap-developer-code-challenge-open-source-abap/</SPAN></A><SPAN>&nbsp;</SPAN></LI><LI><SPAN>June SAP UI5 Web Components for React Challenge: Table Mastery and Custom Components: </SPAN><A href="https://blogs.sap.com/2023/06/07/sap-ui5-web-components-for-react-challenge-table-mastery-and-custom-components/" target="_blank" rel="noopener noreferrer"><SPAN>https://blogs.sap.com/2023/06/07/sap-ui5-web-components-for-react-challenge-table-mastery-and-custom-components/</SPAN></A> <SPAN>&nbsp;</SPAN></LI></UL><P><STRONG>Hot Dev Summer (UI5con &amp; reCAP)&nbsp;</STRONG></P><UL><LI><SPAN>Blog Post: </SPAN><A href="https://blogs.sap.com/2023/02/14/recap-and-ui5con-2023-propose-your-topic/" target="_blank" rel="noopener noreferrer"><SPAN>https://blogs.sap.com/2023/02/14/recap-and-ui5con-2023-propose-your-topic/</SPAN></A><SPAN>&nbsp;</SPAN>&nbsp;</LI></UL><P><STRONG>CHAPTER TITLES&nbsp;&nbsp;</STRONG></P><P><SPAN class=""><A class="" href="https://www.youtube.com/watch?v=Dxe4OmaFVy4&amp;t=0s" target="" rel="nofollow noopener noreferrer">0:00</A></SPAN><SPAN> Intro<BR /></SPAN><SPAN class=""><A class="" href="https://www.youtube.com/watch?v=Dxe4OmaFVy4&amp;t=10s" target="_self" rel="nofollow noopener noreferrer">0:10</A></SPAN><SPAN> SAP BTP ABAP Environment Customer &amp; Partner Roundtable<BR /></SPAN><SPAN class=""><A class="" href="https://www.youtube.com/watch?v=Dxe4OmaFVy4&amp;t=62s" target="" rel="nofollow noopener noreferrer">1:02</A></SPAN><SPAN> Upgrade Your Tools for Modern ECMAScript in UI5<BR /></SPAN><SPAN class=""><A class="" href="https://www.youtube.com/watch?v=Dxe4OmaFVy4&amp;t=115s" target="" rel="nofollow noopener noreferrer">1:55</A></SPAN><SPAN> âPlan to Win: Get Active with Dataâ Virtual Hackathon<BR /></SPAN><SPAN class=""><A class="" href="https://www.youtube.com/watch?v=Dxe4OmaFVy4&amp;t=213s" target="" rel="nofollow noopener noreferrer">3:33</A></SPAN><SPAN> May Developer Challenge Close-off + June Developer Challenge Intro<BR /></SPAN><SPAN class=""><A class="" href="https://www.youtube.com/watch?v=Dxe4OmaFVy4&amp;t=282s" target="" rel="nofollow noopener noreferrer">4:42</A></SPAN><SPAN> June SAP UI5 Web Components for React Challenge</SPAN></P>
---
SAP Developer News, June 1st, 2023
application-developmentforum-board
2023-06-01
https://community.sap.com/t5/application-development-discussions/sap-developer-news-june-1st-2023/td-p/263855
2023-06-01-sap-developer-news-june-1st-2023
<P><A href="https://youtu.be/380EpSFwHq4" target="_self" rel="nofollow noopener noreferrer"><STRONG><span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="screenshot 2023-06-01 at 15.49.34.png" style="width: 999px;"><img src="https://community.sap.com/t5/image/serverpage/image-id/37114i5D1897C20BB79084/image-size/large?v=v2&amp;px=999" role="button" title="screenshot 2023-06-01 at 15.49.34.png" alt="screenshot 2023-06-01 at 15.49.34.png" /></span></STRONG></A></P><P>Episode on YouTube:&nbsp;<A href="https://youtu.be/380EpSFwHq4" target="_blank" rel="noopener nofollow noreferrer">https://youtu.be/380EpSFwHq4</A>&nbsp;</P><P><STRONG>Rapid Fire Segment (RFS) ABAP Cloud Extensibility&nbsp;</STRONG></P><UL><LI><SPAN>S/4HANA extensibility guide update: </SPAN><A href="https://blogs.sap.com/2023/05/26/abap-cloud-sap-s-4hana-extensibility-may-2023-update/" target="_blank" rel="noopener noreferrer"><SPAN>https://blogs.sap.com/2023/05/26/abap-cloud-sap-s-4hana-extensibility-may-2023-update/</SPAN></A><SPAN>&nbsp;</SPAN></LI><LI><SPAN>How ATC supports you to adopt ABAP Cloud: </SPAN><A href="https://blogs.sap.com/2023/05/22/how-the-abap-test-cockpit-supports-you-to-adopt-abap-cloud/" target="_blank" rel="noopener noreferrer"><SPAN>https://blogs.sap.com/2023/05/22/how-the-abap-test-cockpit-supports-you-to-adopt-abap-cloud/</SPAN></A><SPAN>&nbsp;</SPAN></LI><LI><SPAN>How to mitigate missing released SAP apis in SAP S/4HANA and API Enablement Guide: </SPAN><A href="https://blogs.sap.com/2023/05/24/abap-cloud-how-to-mitigate-missing-released-sap-apis-in-sap-s-4hana-cloud-private-edition-and-sap-s-4hana-the-new-abap-cloud-api-enablement-guide/" target="_blank" rel="noopener noreferrer"><SPAN>https://blogs.sap.com/2023/05/24/abap-cloud-how-to-mitigate-missing-released-sap-apis-in-sap-s-4hana-cloud-private-edition-and-sap-s-4hana-the-new-abap-cloud-api-enablement-guide/</SPAN></A><SPAN>&nbsp;</SPAN></LI></UL><UL><LI><SPAN>ABAP Cloud and what does it comprise? </SPAN><A href="https://blogs.sap.com/2023/05/24/abap-cloud-what-does-it-comprise/" target="_blank" rel="noopener noreferrer"><SPAN>https://blogs.sap.com/2023/05/24/abap-cloud-what-does-it-comprise/</SPAN></A><SPAN>&nbsp;</SPAN></LI></UL><P><STRONG>May Developer Challenge - Recap Week 3 + Week 4&nbsp;</STRONG></P><UL><LI><A href="https://groups.community.sap.com/t5/application-development/sap-developer-code-challenge-open-source-abap-week-4/td-p/263470" target="_blank" rel="noopener noreferrer"><SPAN>SAP Developer Code Challenge â Open-Source ABAP (Week 4)</SPAN></A><SPAN>&nbsp;</SPAN></LI><LI><A href="https://blogs.sap.com/2023/05/10/sap-developer-code-challenge-open-source-abap/" target="_blank" rel="noopener noreferrer"><SPAN>SAP Developer Code Challenge â Open Source ABAP! | SAP Blogs</SPAN></A><SPAN>&nbsp;</SPAN></LI><LI><A href="https://groups.community.sap.com/t5/application-development/sap-developer-code-challenge-open-source-abap-week-3/m-p/262136#M1479" target="_blank" rel="noopener noreferrer"><SPAN>SAP Developer Code Challenge â Open-Source ABAP (Week 3)</SPAN></A><SPAN>&nbsp;</SPAN></LI></UL><P><STRONG>Understanding and Implementing the SAP Mobile Experience openSAP Course&nbsp;</STRONG></P><UL><LI><SPAN>openSAP Course: </SPAN><A href="https://open.sap.com/courses/mobile4" target="_blank" rel="noopener noreferrer"><SPAN>https://open.sap.com/courses/mobile4</SPAN></A><SPAN>&nbsp;</SPAN></LI></UL><P><SPAN>================================================================================</SPAN><SPAN>&nbsp;</SPAN></P><P><SPAN>CHAPTER TITLES&nbsp;</SPAN><SPAN>&nbsp;</SPAN></P><P><SPAN><A href="https://youtu.be/380EpSFwHq4" target="_self" rel="nofollow noopener noreferrer">0:00</A> Intro</SPAN><SPAN>&nbsp;</SPAN></P><P><SPAN><A href="https://youtu.be/380EpSFwHq4?t=9" target="_self" rel="nofollow noopener noreferrer">0:09</A>&nbsp;</SPAN><SPAN>Rapid Fire Segment (RFS) ABAP Cloud Extensibility</SPAN><SPAN>&nbsp;</SPAN></P><P><SPAN><A href="https://youtu.be/380EpSFwHq4?t=152" target="_self" rel="nofollow noopener noreferrer">2:32</A>&nbsp; May Developer Challenge - Recap Week 3 + Week 4</SPAN><SPAN>&nbsp;</SPAN></P><P><SPAN><A href="https://youtu.be/380EpSFwHq4?t=232" target="_self" rel="nofollow noopener noreferrer">3:52</A> Understanding and Implementing the SAP Mobile Experience</SPAN><SPAN>&nbsp;</SPAN></P>
---
SAP CodeJam on Service Integration with CAP in Brescia
code-jamblog-board
2023-05-20
https://community.sap.com/t5/sap-codejam-blog-posts/sap-codejam-on-service-integration-with-cap-in-brescia/ba-p/261428
2023-05-20-sap-codejam-on-service-integration-with-cap-in-brescia
<P>The<SPAN>&nbsp;</SPAN><A href="https://groups.community.sap.com/t5/sap-codejam/eb-p/codejam-events" target="_blank" rel="noopener noreferrer">SAP CodeJam programme</A><SPAN>&nbsp;</SPAN>continues apace. Yesterday I ran a CodeJam in Brescia, Italy, on the topic of service integration with CAP, the SAP Cloud Application Programming Model. Here's a quick overview, with plenty of pictures.</P><H2 id="toc-hId-1650155981">Working on the content</H2><P>This wasn't the first instance of a CodeJam on this topic; the inaugural outing of the content took place in Utrecht, NL in February (see<SPAN>&nbsp;</SPAN><A href="http://localhost:8000/blog/posts/2023/02/11/sap-codejam-on-service-integration-with-cap-in-utrecht/" target="_blank" rel="noopener nofollow noreferrer">SAP CodeJam on Service Integration with CAP in Utrecht</A>) so I was generally happy with how the content flowed. Nevertheless, I had been working on it recently, running up to this event:</P><P><span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="commits" style="width: 999px;"><img src="https://community.sap.com/t5/image/serverpage/image-id/36275i73561FC8FE1F0E34/image-size/large?v=v2&amp;px=999" role="button" title="commits" alt="commits" /></span></P><P>Looks like at least one of my Developer Advocate colleagues Antonio<SPAN>&nbsp;</SPAN><A href="https://fedi.ajmaradiaga.com/@antonio/110395822934061159" target="_blank" rel="noopener nofollow noreferrer">has been putting work in on his CodeJam content this week</A><SPAN>&nbsp;</SPAN>too!</P><BLOCKQUOTE><P>If you want to find out more about the CodeJams that we offer, I recommend you read this post from Tom Jung:<SPAN>&nbsp;</SPAN><A href="https://groups.community.sap.com/t5/sap-codejam-blog-posts/so-you-want-to-host-a-codejam-everything-you-need-to-know/ba-p/221415" target="_blank" rel="noopener noreferrer">So, You Want to Host a CodeJam! Everything you need to know</A>, which also links to the list of topics available right now.</P></BLOCKQUOTE><H2 id="toc-hId--902000980">Travelling to the venue</H2><P>I started my journey to Brescia, specifically to the offices of<SPAN>&nbsp;</SPAN><A href="https://www.regestaitalia.eu/" target="_blank" rel="noopener nofollow noreferrer">Regesta S.p.A.</A>, the kind and welcoming hosts for this particular CodeJam instance, on Thursday morning in Manchester. I started out with a bus from home to Manchester Piccadilly station, for a train<SPAN>&nbsp;</SPAN><A href="https://hachyderm.io/@qmacro/110389088154110866" target="_blank" rel="noopener nofollow noreferrer">from Platform 13</A><SPAN>&nbsp;</SPAN>to the airport.</P><P><span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="platform-transpennine" style="width: 999px;"><img src="https://community.sap.com/t5/image/serverpage/image-id/36276i3F43B1EEC5BC7601/image-size/large?v=v2&amp;px=999" role="button" title="platform-transpennine" alt="platform-transpennine" /></span></P><P><SPAN>After the flight, which was uneventful (even accounting for the usual experience at Manchester Airport), and a train from Malpenso airport, I reached the centre of Milan at the spectatular Milano Centrale station (you can see&nbsp;</SPAN><A href="https://hachyderm.io/@qmacro/110391127955702939" target="_blank" rel="noopener nofollow noreferrer">more photos of the station in this toot</A>)&nbsp;</P><P><SPAN><span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="milano-centrale" style="width: 999px;"><img src="https://community.sap.com/t5/image/serverpage/image-id/36277i66211FEC91FB5323/image-size/large?v=v2&amp;px=999" role="button" title="milano-centrale" alt="milano-centrale" /></span></SPAN></P><P><SPAN>After a quiet evening and a good coffee at breakfast, overlooking the station:</SPAN></P><P><SPAN><span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="coffee-station" style="width: 999px;"><img src="https://community.sap.com/t5/image/serverpage/image-id/36278iF1AE858BBDBE5273/image-size/large?v=v2&amp;px=999" role="button" title="coffee-station" alt="coffee-station" /></span></SPAN></P><P><SPAN>I was ready to get the train from Milan to Brescia:</SPAN></P><P><SPAN><span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="train-milano-to-trieste" style="width: 999px;"><img src="https://community.sap.com/t5/image/serverpage/image-id/36279iDB8B349C6A5568F9/image-size/large?v=v2&amp;px=999" role="button" title="train-milano-to-trieste" alt="train-milano-to-trieste" /></span></SPAN></P><P>There I was met at the station by Valentino, the CodeJam organiser at Regesta. We travelled through the morning rush hour to the office which was perfectly set up for a great learning experience, and we were all soon underway.</P><P><span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="outside-regesta-offices" style="width: 999px;"><img src="https://community.sap.com/t5/image/serverpage/image-id/36280iA8A69457DD300004/image-size/large?v=v2&amp;px=999" role="button" title="outside-regesta-offices" alt="outside-regesta-offices" /></span></P><H2 id="toc-hId-840809355">The learning experience</H2><P>The day flew by.</P><P>I can honestly say this was one of the most diligent groups of CodeJam attendees I've had the pleasure of working with.<SPAN>&nbsp;</SPAN><A href="https://twitter.com/qmacro/status/1659467428093390849" target="_blank" rel="noopener nofollow noreferrer">Everyone got properly involved in the content</A>, asked great questions, worked with each other through each exercise, and made it easy for me to convey all the concepts and details. Thanks folks!</P><P><span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="codejam-attendees" style="width: 999px;"><img src="https://community.sap.com/t5/image/serverpage/image-id/36281i0267E95E06B3E7D6/image-size/large?v=v2&amp;px=999" role="button" title="codejam-attendees" alt="codejam-attendees" /></span></P><H2 id="toc-hId--1711347606">Networking and getting to know each other</H2><P>During lunch, provided by our kind hosts, we got a chance to chat more.</P><P><span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="buffet-lunch" style="width: 562px;"><img src="https://community.sap.com/t5/image/serverpage/image-id/36282i9FCFA43ED7E05632/image-size/large?v=v2&amp;px=999" role="button" title="buffet-lunch" alt="buffet-lunch" /></span></P><P>We also got another chance at the end of the day, where I learned from a Regesta developer about the awesome tools he's been working on - an NPM-like package experience for ABAP, compatible with and designed to complement<SPAN>&nbsp;</SPAN><A href="https://abapgit.org/" target="_blank" rel="noopener nofollow noreferrer">abapGit</A>. Definitely worth keeping an eye out for in the near future!</P><H2 id="toc-hId-31462729">A brief overview of the CodeJam topic focus</H2><P>Perhaps it's worth explaining at this point what this specific CodeJam focuses upon.</P><P>Of course, you can get a general idea from the<SPAN>&nbsp;</SPAN><A href="https://github.com/SAP-samples/cap-service-integration-codejam#about-this-codejam" target="_blank" rel="noopener nofollow noreferrer">About this CodeJam</A><SPAN>&nbsp;</SPAN>section of the repo's main README file, but perhaps you want to know more.</P><P>In essence, we take a slow but sure, step by step approach to integrating an external service from the SAP Business Accelerator Hub (previously known as the SAP API Business Hub). In doing so, we take a route that introduces us to various CAP server features, cds commands, in-process and external mocking, initial data supply, and take a look at how to extend both services and entities.</P><P>Moreover, on that route, we learn about the cds environment, profiles, port control, and custom vs built-in resolutions of OData operation responses. Ultimately we bind in a real remote external service and have it work in harmony with our own local service.</P><P>Not only that, but we also dig deep into the philosophy and practicality of how, where and why we make changes and extensions in the places we do. Think of it as dipping into the essential topic of "keep the core clean" for CDS based services and mashups.</P><P>And of course, all the way through, we work through deliberate errors that are there for us to learn from and have fun with.</P><P>If this sounds like something you would like to experience, check out<SPAN>&nbsp;</SPAN><A href="https://groups.community.sap.com/t5/sap-codejam-blog-posts/so-you-want-to-host-a-codejam-everything-you-need-to-know/ba-p/221415" target="_blank" rel="noopener noreferrer">Tom's post that I mentioned earlier</A>.</P><H2 id="toc-hId-1774273064">After the event</H2><P>I headed back to Milan that same Friday evening to be closer to Malpensa airport for my flight, which is today (I'm writing this on Saturday). There I treated myself to a couple of excellent beers (a<SPAN>&nbsp;</SPAN><A href="https://untappd.com/user/qmacro/checkin/1275581325" target="_blank" rel="noopener nofollow noreferrer">hyper local IPA</A><SPAN>&nbsp;</SPAN>and a<SPAN>&nbsp;</SPAN><A href="https://untappd.com/user/qmacro/checkin/1275585970" target="_blank" rel="noopener nofollow noreferrer">West Coast DIPA</A>) at a great place -<SPAN>&nbsp;</SPAN><A href="https://goo.gl/maps/uJmZMWgriDsEyKAL8" target="_blank" rel="noopener nofollow noreferrer">Bierfabrik Milano</A>.</P><P>I started writing this post at breakfast in the hotel this morning.</P><P><span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="at-breakfast" style="width: 999px;"><img src="https://community.sap.com/t5/image/serverpage/image-id/36283iD744110796C6BC36/image-size/large?v=v2&amp;px=999" role="button" title="at-breakfast" alt="at-breakfast" /></span></P><P><SPAN>After another train journey back to the airport I'm finishing it off in the gate area while waiting for my flight back to Manchester, tired but happy at the conclusion of another successful CodeJam event!</SPAN></P><HR /><P><SPAN>(<A href="https://qmacro.org/blog/posts/2023/05/20/sap-codejam-on-service-integration-with-cap-in-brescia/" target="_self" rel="nofollow noopener noreferrer">Originally published on qmacro.org</A>)</SPAN></P>
---
SAP CodeJams on the btp CLI and Core Services APIs
learningblog-board
2023-04-18
https://community.sap.com/t5/sap-learning-blog-posts/sap-codejams-on-the-btp-cli-and-core-services-apis/ba-p/225211
2023-04-18-sap-codejams-on-the-btp-cli-and-core-services-apis
<P>Hey<BR />I wanted to write a short post here to highlight something that may be of interest. The Developer Advocates create and run CodeJams which are one-day hands-on learning and networking sessions on a specific topic. We have one on SAP BTP, specifically on the btp CLI, and on the related Core Services APIs (which let you access and interact with resources on the platform).&nbsp;</P><P>We've run this CodeJam a few times now and each time the attendees have enjoyed it. If you want to learn more and find out where we're running the next instances, head over to the <A title="CodeJam Events page" href="https://groups.community.sap.com/t5/sap-codejam/eb-p/codejam-events" target="_blank" rel="noopener noreferrer">CodeJam Events page</A>. At the time of writing, we're planning to run a couple more instances in the next few months - in <A title="Isernhagen (Germany) in April" href="https://groups.community.sap.com/t5/sap-codejam/hands-on-with-the-btp-cli-and-apis-isernhagen-de/ev-p/224169" target="_blank" rel="noopener noreferrer">Isernhagen (Germany) in April</A>, and in <A title="Ludwigsburg (Germany) in May" href="https://groups.community.sap.com/t5/sap-codejam/sap-codejam-btp-hands-on-with-the-btp-cli-and-apis-ludwigsburg/ev-p/219384" target="_blank" rel="noopener noreferrer">Ludwigsburg (Germany) in May</A>.&nbsp;</P><P>In addition, you may want to read this post:&nbsp;<A title="So, You Want to Host a CodeJam! Everything you need to know." href="https://groups.community.sap.com/t5/sap-codejam-blog-posts/so-you-want-to-host-a-codejam-everything-you-need-to-know/ba-p/221415" target="_self" rel="noopener noreferrer">So, You Want to Host a CodeJam! Everything you need to know.</A></P><P>Happy learning!</P><P>&nbsp;</P>
---
Double SAP BTP goodness in Isernhagen
application-developmentblog-board
2023-04-16
https://community.sap.com/t5/application-development-blog-posts/double-sap-btp-goodness-in-isernhagen/ba-p/254614
2023-04-16-double-sap-btp-goodness-in-isernhagen
<P>I'm on my way home from a great double event that took place this week at<SPAN>&nbsp;</SPAN><A href="https://www.inwerken.de/" target="_blank" rel="noopener nofollow noreferrer">Inwerken AG</A><SPAN>&nbsp;</SPAN>in Isernhagen, just outside of Hannover. The overarching theme was the SAP Business Technology Platform.</P><P>On Thu 13 Apr we had an all-day SAP CodeJam<SPAN>&nbsp;</SPAN><A href="https://groups.community.sap.com/t5/sap-codejam/hands-on-with-the-btp-cli-and-apis-isernhagen-de/ev-p/224169" target="_blank" rel="noopener noreferrer">Hands-on with the btp CLI and APIs</A>, and on Fri 14 Apr, at the same location, there was the first ever public conference all about SAP BTP:<SPAN>&nbsp;</SPAN><A href="https://www.btpcon.org/" target="_blank" rel="noopener nofollow noreferrer">BTPcon 2023</A>. It made a lot of sense to run the two events next to each other; we got a lot of crossover conversation and attendance of both events from many folks.</P><H2 id="toc-hId-1649323720">Hands-on with the btp CLI and APIs (CodeJam)</H2><P>Having arrived in Hannover on Wednesday evening, I made my way on the tram (A3 to Altwarmbuechen) to Isernhagen and Inwerken's offices. Inwerken were the kind hosts (spearheaded by SAP Community member Sascha Seegbarth) and provided us with a warm welcome:</P><P><span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="codejam-welcome-sign.jpg" style="width: 999px;"><img src="https://community.sap.com/t5/image/serverpage/image-id/33965iADD60E0109A32061/image-size/large?v=v2&amp;px=999" role="button" title="codejam-welcome-sign.jpg" alt="codejam-welcome-sign.jpg" /></span></P><P>They also had set up a great space to network and get down to business working through the CodeJam content, and this soon filled up with CodeJam attendees eager to get started:</P><P><span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="codejam-room-and-attendees.jpg" style="width: 999px;"><img src="https://community.sap.com/t5/image/serverpage/image-id/33964i7BA373B4BE90281D/image-size/large?v=v2&amp;px=999" role="button" title="codejam-room-and-attendees.jpg" alt="codejam-room-and-attendees.jpg" /></span></P><P>One of the folks that came along, Matthias, was sporting his stickers (made by another SAP Community member, the great Ronnie Sletta) from our<SPAN>&nbsp;</SPAN><A href="https://www.youtube.com/playlist?list=PL6RpkC85SLQABOpzhd7WI-hMpy99PxUo0" target="_blank" rel="noopener nofollow noreferrer">Hands-on SAP Dev</A><SPAN>&nbsp;</SPAN>live stream show. Go Matthias!</P><P><span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="matthias-and-stickers.jpg" style="width: 999px;"><img src="https://community.sap.com/t5/image/serverpage/image-id/33963i05ED6F16B1A431CF/image-size/large?v=v2&amp;px=999" role="button" title="matthias-and-stickers.jpg" alt="matthias-and-stickers.jpg" /></span>I was accompanied by fellow Developer Advocate Nico Schoenteich who joined up with me to run the CodeJam and help folks out, which was a welcome additional pair of safe hands, not to mention a great chance to work alongside one of my team mates. Thanks Nico!</P><P>The CodeJam proceeded and everyone successfully worked through all of the exercises. Again, one of the highlights, at least for me, were the discussions we had at the end of each exercise, before starting the next. There were some great questions and even more valuable opinions and thoughts shared all around. If you're interested in learning more about this particular CodeJam, head over to the<SPAN>&nbsp;</SPAN><A href="https://github.com/SAP-samples/cloud-btp-cli-api-codejam/blob/main/README.md" target="_blank" rel="noopener nofollow noreferrer">main README</A><SPAN>&nbsp;</SPAN>where there's a general overview and also a list of the exercises.</P><H2 id="toc-hId--902833241">BTPcon 2023</H2><P>On the following day there was<SPAN>&nbsp;</SPAN><A href="https://www.btpcon.org/" target="_blank" rel="noopener nofollow noreferrer">BTPcon</A>. Organised by Sascha and some great folks behind the scenes, this was a superb event. There were two types of sessions: hands-on sessions (150 minutes long) and talks (45 minutes long) and there was so much on offer that there were two tracks throughout the day:</P><P><span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="btpcon-sessions.jpg" style="width: 999px;"><img src="https://community.sap.com/t5/image/serverpage/image-id/33962i472420005C8C1F57/image-size/large?v=v2&amp;px=999" role="button" title="btpcon-sessions.jpg" alt="btpcon-sessions.jpg" /></span>You can get a feel for the depth and quality of content by taking a look at the<SPAN>&nbsp;</SPAN><A href="https://www.btpcon.org/" target="_blank" rel="noopener nofollow noreferrer">programme on the BTPcon website</A>. I enjoyed all of the sessions I attended, and the atmosphere was great. It's how conferences should be - a mixture of great technical content, interesting Q&amp;A, and spontaneous corridor conversations where experiences and ideas were exchanged.</P><P>I was very grateful to get a speaking slot, for which I thank Sascha and the BTPcon organisers. I spoke about the<SPAN>&nbsp;</SPAN><A href="http://www.catb.org/jargon/html/S/Swiss-Army-chainsaw.html" target="_blank" rel="noopener nofollow noreferrer">Swiss Army Chainsaw</A><SPAN>&nbsp;</SPAN>of the JSON world,<SPAN>&nbsp;</SPAN><A href="https://stedolan.github.io/jq/" target="_blank" rel="noopener nofollow noreferrer">jq</A>, the "lightweight and flexible command-line JSON processor" which just happens to be a very capable, Turing complete functional language.</P><P>In today's world of the cloud, which everyone knows is just Linux boxes glued together with JSON and shell scripts, having the power to handle JSON like a boss is super important. Even if you're not fully in the cloud, JSON abounds too - in representations of resources pulled and pushed with APIs, events and more.</P><P><span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="dj-jq-talk.jpg" style="width: 999px;"><img src="https://community.sap.com/t5/image/serverpage/image-id/33961iE942798FBD38BC15/image-size/large?v=v2&amp;px=999" role="button" title="dj-jq-talk.jpg" alt="dj-jq-talk.jpg" /></span><EM>Image courtesy of Enno Wulff</EM></P><P>My talk consisted of me waving my arms about a lot, rambling, and working through example JSON scenarios and slicing through the JSON precisely with<SPAN>&nbsp;</SPAN>jq.</P><P>I wrote the talk in the form of a document which more or less reflects what I said, and along with that document I've made the samples JSON files available, plus a Docker container description that you can use to build a container image which containing those files, with<SPAN>&nbsp;</SPAN>jq<SPAN>&nbsp;</SPAN>and<SPAN>&nbsp;</SPAN>ijq<SPAN>&nbsp;</SPAN>with which you can use to try out all the examples and follow along at home. Head over to the<SPAN>&nbsp;</SPAN><A href="https://github.com/qmacro/level-up-your-json-fu-with-jq" target="_blank" rel="noopener nofollow noreferrer">qmacro/level-up-your-json-fu-with-jq</A><SPAN>&nbsp;</SPAN>repo for everything I talked about and showed.</P><P>My talk also consisted of me wearing flip-flops which seemed to amuse some folks <span class="lia-unicode-emoji" title=":slightly_smiling_face:">ð</span> I'd left my outdoor shoes (and socks) outside while the conference proceeded, but during my talk it started to rain heavily, soaking everything! Luckily, SAP Community member Enno (who was also one of BTPcon's co-organisers) was giving out SAP Inside Track Hannover swag, which included socks, which I gratefully accepted!</P><P><span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="dj-socks.jpg" style="width: 680px;"><img src="https://community.sap.com/t5/image/serverpage/image-id/33960iB407465D946D5FC7/image-size/large?v=v2&amp;px=999" role="button" title="dj-socks.jpg" alt="dj-socks.jpg" /></span><BR /><EM>Image courtesy of Enno Wulff</EM></P><H2 id="toc-hId-839977094">Wrapping up</H2><P>It was a great two days, thanks not in a small part to Sascha and his colleagues at Inwerken, and of course to the CodeJam attendees and the conference attendees &amp; speakers.</P><P>I hope that we can see a repeat of BTPcon next year!</P><P>And if you want to request a CodeJam, head over to Tom Jung's post<SPAN>&nbsp;</SPAN><A href="https://groups.community.sap.com/t5/sap-codejam-blog-posts/so-you-want-to-host-a-codejam-everything-you-need-to-know/ba-p/221415" target="_blank" rel="noopener noreferrer">So, You Want to Host a CodeJam! Everything you need to know</A>.</P><HR /><P><A href="https://qmacro.org/blog/posts/2023/04/16/double-sap-btp-goodness-in-isernhagen/" target="_self" rel="nofollow noopener noreferrer">Originally posted on qmacro.org</A></P>
---
SAP CodeJam at Inwerken - share your pics!
code-jamforum-board
2023-04-13
https://community.sap.com/t5/sap-codejam-discussions/sap-codejam-at-inwerken-share-your-pics/td-p/254109
2023-04-13-sap-codejam-at-inwerken-share-your-pics
<P>I've just arrived at the venue for <A href="https://groups.community.sap.com/t5/sap-codejam/hands-on-with-the-btp-cli-and-apis-isernhagen-de/ev-p/224169" target="_self" rel="noopener noreferrer">today's CodeJam</A>, what a lovely place, and a great welcome!</P><P>I'll drop pics in this thread as and when I take them, and please feel free to add any that you have, and your thoughts about today's event, in here too.</P><P><span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="PXL_20230413_055902826.jpg" style="width: 999px;"><img src="https://community.sap.com/t5/image/serverpage/image-id/33789i2B4425EA18E40130/image-size/large?v=v2&amp;px=999" role="button" title="PXL_20230413_055902826.jpg" alt="PXL_20230413_055902826.jpg" /></span></P>
---
GraphQL is a modern-day SOAP. Discuss.
application-developmentforum-board
2023-04-04
https://community.sap.com/t5/application-development-discussions/graphql-is-a-modern-day-soap-discuss/td-p/252463
2023-04-04-graphql-is-a-modern-day-soap-discuss
<P>A few years ago, in my "Monday Morning Thoughts" series, I published this post:</P><P><A href="https://blogs.sap.com/2018/09/03/monday-morning-thoughts-considering-graphql/" target="_self" rel="noopener noreferrer">Monday morning thoughts: considering GraphQL</A></P><P>in which I looked into GraphQL and how it compares to HTTP, REST and OData.</P><P>Yesterday I read and <A href="https://hachyderm.io/@qmacro/110136079918486910" target="_self" rel="nofollow noopener noreferrer">tooted about</A>&nbsp;an article&nbsp;<A href="https://betterprogramming.pub/graphql-from-excitement-to-deception-f81f7c95b7cf" target="_self" rel="nofollow noopener noreferrer">GraphQL: From Excitement to Deception</A>&nbsp;which got me thinking again.</P><P>While I would of course encourage you to read both posts, I'd also love to know what you think about GraphQL, and about the thought conveyed in deliberately provocative title of this discussion.</P><P>I remember the advent of SOAP, and the dismay I felt in how it was over complex, orthogonal to HTTP (some might go so far as to say it abused HTTP as an application protocol), and not the golden solution to the perceived challenges.&nbsp;</P><P>GraphQL reminds me a lot of SOAP and those memories.</P><P>Change my mind! Point out the error of my ways!&nbsp;What do you think? I'd love to know.&nbsp;</P>
---
Podcast all about the CAP service integration CodeJam in Utrecht
code-jamforum-board
2023-03-16
https://community.sap.com/t5/sap-codejam-discussions/podcast-all-about-the-cap-service-integration-codejam-in-utrecht/td-p/224810
2023-03-16-podcast-all-about-the-cap-service-integration-codejam-in-utrecht
<P>Greetings! After <A href="https://groups.community.sap.com/t5/sap-codejam/sap-codejam-cap-service-integration-with-sap-cloud-application/ev-p/216773" target="_self" rel="noopener noreferrer">the CAP CodeJam in Utrecht</A> last month, we got a chance to talk about CodeJams in general and the specific CodeJam that day too, on the <A href="https://podcasters.spotify.com/pod/show/hana-cafe-nl" target="_self" rel="nofollow noopener noreferrer">HANA Cafe NL podcast show</A>. Head on over to the episode here to listen, or just use your favourite podcast app <span class="lia-unicode-emoji" title=":backhand_index_pointing_right:">ð</span></P><P><A href="https://podcasters.spotify.com/pod/show/hana-cafe-nl/episodes/SAP-CodeJam-Recap-CAP-with-DJ-Adams-EN-e1vqa2o" target="_self" rel="nofollow noopener noreferrer"><SPAN>SAP CodeJam Recap CAP with DJ Adams (EN)</SPAN></A></P>
---
SAP community memories
Coffee-Cornerforum-board
2023-03-10
https://community.sap.com/t5/coffee-corner-discussions/sap-community-memories/td-p/223983
2023-03-10-sap-community-memories
<P>This year, SAP is celebrating 20 years of the web-based SAP Community platform. Happy anniversary! I thought I'd contribute to these celebrations with some memories of my own.</P><P><span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="sap-community-anniversary.png" style="width: 254px;"><img src="https://community.sap.com/t5/image/serverpage/image-id/29630i2B8CF0F4E76105A5/image-dimensions/254x370?v=v2" width="254" height="370" role="button" title="sap-community-anniversary.png" alt="sap-community-anniversary.png" /></span></P><P>Recently my good old friend Craig Cmehil posted a discussion over on the SAP Community:<SPAN>&nbsp;</SPAN><A href="https://groups.community.sap.com/t5/coffee-corner-discussions/did-you-know-it-s-been-20-years-what-s-your-favourite-community/m-p/220754" target="_blank" rel="noopener noreferrer">Did you know? It's been 20 years! What's your favourite community memory?</A>. There are some great photos and memories being shared there, and it's definitely worth heading over there after reading this post and checking out the thread.</P><P>Twenty years - has it really been that long already? Well, it's actually been longer, but more on that shortly.</P><H2 id="toc-hId-1646526465">What SAP Community is</H2><P>The SAP Community (capital C) is the latest name and incarnation of the web-based platform that was born in 2003, twenty years ago this year. Back then, it was launched as the "SAP Developer Network", which aligned sensibly with other similar initiatives that existed around that time, such as MSDN, the Microsoft Developer Network.</P><P>Later that decade, in 2007, the name was changed to "SAP Community Network", partly to acknowledge the presence of other practitioners and welcome them into the mix.</P><P>Most recently, in 2016, the name was changed again to simplify things, and became "SAP Community".</P><H2 id="toc-hId--905630496">My involvement in its creation</H2><P>The launch of SAP Developer Network, which we now take for granted in the form of the SAP Community, was in the first half of 2003. It was the result of a lot of work from a small team working behind the scenes. I was a member of that team. How did it come to be so? Well, there were a number of factors, which I'll describe here.</P><H3 id="toc-hId-640666334">As an author and speaker with O'Reilly</H3><P>Just over a year before the birth of the web-based platform that we now know and love as SAP Community, my first book "Programming Jabber" was published by O'Reilly (see the<SPAN>&nbsp;</SPAN><A href="https://qmacro.org/about/#books" target="_blank" rel="noopener nofollow noreferrer">books section in my About Me page</A>). O'Reilly was (and still is) a very well respected technical book publisher and also had some great experience with building community platforms on the Web back then.</P><P><span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="programmingjabber.png" style="width: 180px;"><img src="https://community.sap.com/t5/image/serverpage/image-id/29631i42E16326ED3CC326/image-size/large?v=v2&amp;px=999" role="button" title="programmingjabber.png" alt="programmingjabber.png" /></span></P><P>My work writing<SPAN>&nbsp;</SPAN><A href="https://www.oreilly.com/library/view/programming-jabber/0596002025/" target="_blank" rel="noopener nofollow noreferrer">Programming Jabber</A>, and speaking at O'Reilly's annual Open Source Convention (OSCON) event, meant that I had a great relationship with the wonderful folks that worked there.</P><H3 id="toc-hId--1911490627">As a technical consultant in the SAP tech ecosphere</H3><P>I started working with SAP software in 1987, with the mainframe version SAP R/2 (version 4.1d to be precise). So by the time SAP decided it was time to build and run a community of its own, I had already 15 years worth of relationships built up, and a reputation (mostly as a troublecauser, no doubt) based on my day job as an SAP basis person, developer, architect, consultant, and so on working at customers and partners and as an independent.</P><P>Moreover, I had been active in the community in the decade leading up to the birth of SAP Developer Network in 2003 too.</P><H3 id="toc-hId--168680292">As someone active in the early days of SAP communities</H3><P>In the early days of my career, I was working as an employee of a small SAP consultancy and travelling around, spending most of my evenings in hotel rooms.</P><P>In early 1995 I created the first online SAP community. Back then, the Web wasn't what it is today; most Internet based communities were based around either Usenet (newsgroups) or mailing lists. Mailing list software was the norm for handling community discussions and interactivity, and I used<SPAN>&nbsp;</SPAN><A href="https://en.wikipedia.org/wiki/Majordomo_(software)" target="_blank" rel="noopener nofollow noreferrer">Majordomo</A><SPAN>&nbsp;</SPAN>for the community I created, which was called "merlin", and was mainly for technical discussions and Q&amp;A activities around both SAP R/2 and SAP R/3.</P><P>I spent pretty much every evening at the desk in my hotel room on my Sanyo NB 17 laptop (with a whopping 1MB of RAM and a 2400 baud modem), administering this community of like-minded folks who wanted to connect and exchange ideas and questions.</P><P><span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="sanyo-nb-17.png" style="width: 355px;"><img src="https://community.sap.com/t5/image/serverpage/image-id/29632iADF70742AC629426/image-dimensions/355x360?v=v2" width="355" height="360" role="button" title="sanyo-nb-17.png" alt="sanyo-nb-17.png" /></span></P><P>It was hard work, seemingly never ending, but very rewarding.</P><P>Later that year I got to know of another mailing list that had just formed, called sapr3-list. I reached out to the creator of that list, Bryan, and we proceeded to run our lists in parallel, exchanging stories of administrative issues and more.</P><P>Then a few months later, we were approached by some lovely folks from<SPAN>&nbsp;</SPAN><A href="https://www.mit.edu/" target="_blank" rel="noopener nofollow noreferrer">MIT</A>, who were SAP customers, and who wanted to offer us help with our SAP community activities.</P><P><A href="https://people.sap.com/susan.keohan" target="_blank" rel="noopener noreferrer">Sue Keohan</A><SPAN>&nbsp;</SPAN>was one of the folks that reached out, and between us, we formed a new single mailing list called SAP-R3-L that became the central SAP community that encompassed all the discussions, memberships and more of merlin and sapr3-list. This mailing list, by the way, was based on another piece of (now venerable) community mailing list software,<SPAN>&nbsp;</SPAN><A href="https://en.wikipedia.org/wiki/LISTSERV" target="_blank" rel="noopener nofollow noreferrer">LISTSERV</A>.</P><P><span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="posting-guidelines.png" style="width: 615px;"><img src="https://community.sap.com/t5/image/serverpage/image-id/29633i915E382CD6686592/image-size/large?v=v2&amp;px=999" role="button" title="posting-guidelines.png" alt="posting-guidelines.png" /></span></P><P><EM>The posting guidelines on our SAP-R3-L mailing list</EM></P><P>With a rapidly growing number of community members, and multiple administrators able to deal with the discussions, the traffic, the issues and whatever else came up, the community blossomed further.</P><H2 id="toc-hId-1770643548">Creating the SAP Community</H2><P>Hopefully that gives you a bit of context as to where things were when SAP decided to make its move. This was great news, and I got together with folks from O'Reilly and SAP to thrash out strategy, design, purpose and types of content that would make for a successful Web based community (because by this time mailing lists were less popular, and communities had started moving to the Web, so it made total sense).</P><P>We spent a few months working on this, and the result was launched in early 2003. It was super exciting, and I, along with a couple of others, including my old friend and colleague<SPAN>&nbsp;</SPAN><A href="https://www.skatelescope.nz/piers-harding/" target="_blank" rel="noopener nofollow noreferrer">Piers Harding</A>, had been busy creating technical articles to give the website some substance so we could launch with something that wasn't completely void of content.</P><P><span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="sdn-screenshot.png" style="width: 999px;"><img src="https://community.sap.com/t5/image/serverpage/image-id/29634iACF71A16E0FD6C0A/image-size/large?v=v2&amp;px=999" role="button" title="sdn-screenshot.png" alt="sdn-screenshot.png" /></span></P><P>There was a blogging system too, and we used that to express our thoughts and ideas from the start. I published my<SPAN>&nbsp;</SPAN><A href="https://blogs.sap.com/2003/05/30/the-sapmysql-partnership/" target="_blank" rel="noopener noreferrer">first blog post</A><SPAN>&nbsp;</SPAN>on the new website on 30 May 2003; this was the second blog post ever on SAP Community, the first being the inaugural one three days before that from<SPAN>&nbsp;</SPAN><A href="https://finnern.com/" target="_blank" rel="noopener nofollow noreferrer">Mark Finnern</A>, who was at SAP and designated chief community herder and organiser on the new website.</P><H2 id="toc-hId--781513413">Wrapping up</H2><P>So there you have it, my memories of the birth of the Web-based SAP Community. I'm proud to have played my part, and very happy to continue to do so in today's incarnation. The SAP Community flourishes because of the people, inside and outside of SAP. That's what a community is all about. And as long as it's about that, I think it will flourish for years to come.</P><H2 id="toc-hId-961296922">Further reading</H2><UL><LI><A href="https://blogs.sap.com/2005/07/04/the-sap-developer-community-10-years-ago/" target="_blank" rel="noopener noreferrer">The SAP developer community 10 years ago</A><SPAN>&nbsp;</SPAN>(Jul 2005)</LI><LI><A href="https://qmacro.org/blog/posts/2016/03/10/the-evolution-of-the-sap-community/" target="_blank" rel="noopener nofollow noreferrer">The evolution of the SAP community</A><SPAN>&nbsp;</SPAN>(Mar 2016)</LI><LI><A href="https://qmacro.org/blog/posts/2022/02/09/how-i-got-involved-in-the-sap-community" target="_blank" rel="noopener nofollow noreferrer">How I got involved in the SAP community</A><SPAN>&nbsp;</SPAN>(Feb 2022)</LI></UL><P>&nbsp;</P><HR /><P>&nbsp;</P><P>(<A href="https://qmacro.org/blog/posts/2023/03/10/sap-community-memories/" target="_self" rel="nofollow noopener noreferrer">Originally published on qmacro.org</A>)</P>
---
ð©ðª SAP CodeJam BTP: Hands-on with the btp CLI and APIs (Isernhagen, DE)
event-preview
2023-03-03
https://community.sap.com/t5/sap-events-preview/sap-codejam-btp-hands-on-with-the-btp-cli-and-apis-isernhagen-de/ev-p/222788
2023-03-03-sap-codejam-btp-hands-on-with-the-btp-cli-and-apis-isernhagen-de
<P>This&nbsp;<A href="https://groups.community.sap.com/t5/sap-codejam-btp/gh-p/codejam-btp" target="_self" rel="noopener noreferrer">SAP CodeJam BTP</A><SPAN>&nbsp;</SPAN>event is on the<SPAN>&nbsp;</SPAN><STRONG>Core Service APIs for SAP BTP</STRONG><SPAN>&nbsp;</SPAN>and also<SPAN>&nbsp;</SPAN><STRONG>the command line interface tool for SAP BTP, otherwise known as the btp CLI</STRONG>.</P><P>This is an<SPAN>&nbsp;</SPAN><STRONG>in-person event</STRONG>&nbsp;<STRONG>only</STRONG><SPAN>&nbsp;</SPAN>(not virtual) and is planned for<SPAN>&nbsp;</SPAN><STRONG>Thu 13 Apr 2023 in Isernhagen, Germany</STRONG>. This is the day before <A href="https://groups.community.sap.com/t5/sap-community/btpcon-hannover/ev-p/219998" target="_self" rel="noopener noreferrer">BTPcon Hannover</A> (which is on Fri 14 Apr 2023). The language of the event and the content will be English.&nbsp;</P><P>The event is kindly being hosted by <A href="https://www.inwerken.de/" target="_self" rel="nofollow noopener noreferrer">Inwerken AG</A> (the location of the event is their office in Hannover), thank you!</P><P>The instructor is Developer Advocate<SPAN>&nbsp;</SPAN><A href="https://qmacro.org/" target="_self" rel="nofollow noopener noreferrer">DJ Adams</A>.&nbsp;</P><P>There are essential prerequisites that must be completed by every attendee, before arriving at the event location. They are documented here:&nbsp;<A href="https://github.com/SAP-samples/cloud-btp-cli-api-codejam/blob/main/prerequisites.md" target="_blank" rel="noopener nofollow noreferrer">https://github.com/SAP-samples/cloud-btp-cli-api-codejam/blob/main/prerequisites.md</A>&nbsp;</P><P>If you wish to attend, please indicate that using the "I'm attending" facility on this page. Please note that spaces are limited - we can only accommodate 25 attendees. In that context, if you indicate that you're attending, and later realise you're unable to, please remove your name so that others get a chance instead. Thanks!</P><P><EM>For more information on SAP CodeJam BTP events, to ask questions, and to chat with your fellow attendees, head over to the<SPAN>&nbsp;</SPAN><A href="https://groups.community.sap.com/t5/sap-codejam/gh-p/code-jam" target="_self" rel="noopener noreferrer">SAP CodeJam group</A>.</EM></P>
---
SAP CodeJam on the btp CLI and APIs in Heilbronn
code-jamblog-board
2023-03-01
https://community.sap.com/t5/sap-codejam-blog-posts/sap-codejam-on-the-btp-cli-and-apis-in-heilbronn/ba-p/222434
2023-03-01-sap-codejam-on-the-btp-cli-and-apis-in-heilbronn
<P>The Developer Advocates are ramping up CodeJams this year. Following on from<SPAN>&nbsp;</SPAN><A href="https://groups.community.sap.com/t5/sap-codejam-blog-posts/sap-codejam-on-service-integration-with-cap-in-utrecht/ba-p/220283" target="_self" rel="noopener noreferrer">my visit to Utrecht</A><SPAN>&nbsp;</SPAN>to deliver a CodeJam on service integration with CAP, I was in Heilbronn last week to deliver<SPAN>&nbsp;</SPAN><A href="https://groups.community.sap.com/t5/sap-codejam/sap-codejam-btp-hands-on-with-the-btp-cli-and-apis-heilbronn-de/ev-p/130512" target="_blank" rel="noopener noreferrer">another CodeJam</A>, this time on the topic of the btp CLI and APIs.</P><H2 id="toc-hId-1646491715">The journey there</H2><P>After a flight to Frankfurt and then a long and circuitous route to Heilbronn on the train, via Wiesbaden (!) and Mannheim (I think there were some engineering works going on) I set off from my hotel near Heilbronn station on the morning of the event, and crossed the Neckar river.</P><P><span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="neckar.jpg" style="width: 654px;"><img src="https://community.sap.com/t5/image/serverpage/image-id/28962iCD2C57A08283315A/image-dimensions/654x368?v=v2" width="654" height="368" role="button" title="neckar.jpg" alt="neckar.jpg" /></span></P><P>I found the venue easily, mostly because there was some lovely signage showing us the way.</P><P><span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="poster-on-door.jpg" style="width: 654px;"><img src="https://community.sap.com/t5/image/serverpage/image-id/28968i61BEF4394B97619B/image-dimensions/654x368?v=v2" width="654" height="368" role="button" title="poster-on-door.jpg" alt="poster-on-door.jpg" /></span></P><P>I must start out by congratulating Marco Buescher, the host at Engineering ITS GmbH, for such great organisation. Just look at the setup that awaited us!</P><P><span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="setup.jpg" style="width: 658px;"><img src="https://community.sap.com/t5/image/serverpage/image-id/28970iF33C7B2FE614918C/image-dimensions/658x370?v=v2" width="658" height="370" role="button" title="setup.jpg" alt="setup.jpg" /></span></P><H2 id="toc-hId--905665246">Getting started</H2><P>The partipants arrived (some from afar, including Prague!) and we quickly got going with the CodeJam content, installing and tinkering with the btp CLI, and getting to know it by setting up the autocomplete feature and then exploring various resources on the SAP Business Technology Platform (SAP BTP).</P><P>We then started digging into one of the btp CLI's killer features, the JSON output, and spent some time learning how to parse and manipulate that JSON properly.</P><P>After that deep dive, I think it's fair to say that any fear of understanding the complexity of the output structures was dispelled; even a couple of participants who weren't primarily developers told me that their confidence in requesting, handling and using complex structured content like this had grown significantly. In addition, the trepidation folks felt about what SAP BTP was, and whether they would grok it, dissolved into the ether.</P><P>That made me happy.</P><P><span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="working.jpg" style="width: 654px;"><img src="https://community.sap.com/t5/image/serverpage/image-id/28971i94ADCF01E9FACBE1/image-dimensions/654x490?v=v2" width="654" height="490" role="button" title="working.jpg" alt="working.jpg" /></span></P><H2 id="toc-hId-837145089">Digging in</H2><P>One of the cool things about the relationship between what we can do with the btp CLI, and with the platform's Core Services APIs, is that more often than not, the same mechanism is being used in the background. With that in mind, we transitioned smoothly from using the btp CLI on the command line, to gearing up to calling an API, and comparing the output.</P><P>The journey from a standing start to calling an API was done over the course of three exercises, and for that I make no apology. One of the great things about a CodeJam event is that as well as getting to know each other, the participants have the best chance of getting to know the subject at hand in a meaningful way; they have the time to move slowly over the surface area and dig in deep, building a solid understanding about the fundamental interconnectedness of all things (that's a nod to the fictional holistic detective Dirk Gently, by the way).</P><P>There are a lot of moving parts to understand, from service instances and bindings, to authentication servers, OAuth 2.0 grant types, token requests, construction of authentication headers, and lots more. By the end of the third of these three exercises I could sense the participants flexing their newly formed muscles in this area, and it was a delight to see.</P><H2 id="toc-hId--1715011872">Breaking for lunch</H2><P>We broke for a wonderful Italian lunch (the host company has its world headquarters in Rome, Italy) and it was then revealed that it was Marco's birthday that day!</P><P><span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="lunch.jpg" style="width: 650px;"><img src="https://community.sap.com/t5/image/serverpage/image-id/28972i8D4BAF817D16FA32/image-dimensions/650x366?v=v2" width="650" height="366" role="button" title="lunch.jpg" alt="lunch.jpg" /></span></P><H2 id="toc-hId-27798463">Continuing the learning and networking</H2><P>After that we got going again on the remaining exercises, looking at automation and scripting. One of the things that everyone seemed to enjoy (as did the participants in Utrecht earlier in the month) was the flow; we all tacked an exercise, and then got together at the end of that exercise to discuss what we'd done, what we'd learned, and to talk about some of the (deliberately open-ended) questions that are at the end of each exercise.</P><P>This way, no-one gets left behind, and the discussion and break between each exercise allows for a more permanent embedding of the knowledge in the brain.</P><P>We finished off the day with a couple of exercises where the participants created new resources in their SAP BTP subaccount, using the btp CLI, and then cleaned up using the corresponding API. On each API call we examined the verbose HTTP output carefully, learning how to interpret it, how to spot issues, and how to deal with errors.</P><H2 id="toc-hId-1770608798">Wrapping up</H2><P>Overall, I think it's fair to say that we got a lot out of the day. The participants were great, coming with an open mind and a willingness to learn and be curious, which is all one can wish for.</P><P>Thanks again to<SPAN>&nbsp;</SPAN><A href="https://eng-its.de/" target="_blank" rel="noopener nofollow noreferrer">Engineering ITS GmbH</A><SPAN>&nbsp;</SPAN>for hosting, to the participants for coming, to my lovely colleagues and helpers Dinah and Kevin, as well as a bonus visit from another colleague Marco H from a different team at SAP, and last but not least to Marco B for organising!</P><P><span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="waving.jpg" style="width: 654px;"><img src="https://community.sap.com/t5/image/serverpage/image-id/28973iD88D197D3C9B1052/image-dimensions/654x490?v=v2" width="654" height="490" role="button" title="waving.jpg" alt="waving.jpg" /></span></P><HR /><P>For more on CodeJams, have a look at the long list of<SPAN>&nbsp;</SPAN><A href="https://groups.community.sap.com/t5/sap-codejam/eb-p/codejam-events" target="_blank" rel="noopener noreferrer">upcoming CodeJam events</A><SPAN>&nbsp;</SPAN>and the<SPAN>&nbsp;</SPAN><A href="https://groups.community.sap.com/t5/sap-codejam-blog-posts/sap-codejam-topics/ba-p/221407" target="_blank" rel="noopener noreferrer">topics currently on offer</A>.</P><HR /><P><A href="https://qmacro.org/blog/posts/2023/03/01/sap-codejam-on-the-btp-cli-and-apis-in-heilbronn/" target="_self" rel="nofollow noopener noreferrer">Originally published on qmacro.org</A>.</P>
---
A write-up of last week's btp CLI and APIs CodeJam in Heilbronn
code-jamforum-board
2023-02-28
https://community.sap.com/t5/sap-codejam-discussions/a-write-up-of-last-week-s-btp-cli-and-apis-codejam-in-heilbronn/td-p/222325
2023-02-28-a-write-up-of-last-week-s-btp-cli-and-apis-codejam-in-heilbronn
<P><a href="https://community.sap.com/t5/user/viewprofilepage/user-id/169">@marcobuescher</a>&nbsp;just published a great write-up of the CodeJam that <A href="https://groups.community.sap.com/t5/sap-codejam/sap-codejam-btp-hands-on-with-the-btp-cli-and-apis-heilbronn-de/ev-p/130512" target="_self" rel="noopener noreferrer">took place last Friday in Heilbronn</A>. Head over to here to read it:</P><P><A href="https://blogs.sap.com/2023/02/28/sap-codejam-hands-on-with-the-btp-cli-and-apis/" target="_blank" rel="noopener noreferrer">https://blogs.sap.com/2023/02/28/sap-codejam-hands-on-with-the-btp-cli-and-apis/</A>&nbsp;</P>
---
Nice coverage of last month's CAP Service Integration CodeJam
code-jamforum-board
2023-02-27
https://community.sap.com/t5/sap-codejam-discussions/nice-coverage-of-last-month-s-cap-service-integration-codejam/td-p/222164
2023-02-27-nice-coverage-of-last-month-s-cap-service-integration-codejam
<P>Here's a great post about the CodeJam event we had in Utrecht, NL, written by Anouk van den Engel:</P><P><A href="https://innov8ion.nl/blog/codejam-with-dj-adams-on-the-cap-model/" target="_self" rel="nofollow noopener noreferrer"><SPAN>CODEJAM WITH DJ ADAMS ON THE CAP MODEL</SPAN></A></P><P>What are <EM>your</EM> favourite aspects of our CodeJam events?&nbsp;</P>
---
Managing resources on SAP BTP - what tool do I choose?
technology-blog-sap
2022-12-12
https://community.sap.com/t5/technology-blogs-by-sap/managing-resources-on-sap-btp-what-tool-do-i-choose/ba-p/13549500
2022-12-12-managing-resources-on-sap-btp-what-tool-do-i-choose
<EM>There are myriad resources on the SAP Business Technology Platform, and different ways to manage them. In this post I outline a way to think about the different tools and when to use what.</EM><BR />
<BR />
The life and work of developers, Basis folks and operations specialists and those with similar roles are heavily intertwined, especially in this era of hybrid cloud, on-premises and DevOps-centric enterprise computing. One result of this is that it isnât necessarily obvious which tools are for which roles, because the range of activities across those roles overlap quite a bit. This in turn means that folks might be scratching their head over what tools are available, relevant and appropriate in different circumstances.<BR />
<BR />
In other words, with all these tools, when should I use what?<BR />
<H2 id="the-tools" id="toc-hId-961335229">The tools</H2><BR />
In no particular order, here are the tools that come to mind when thinking of managing resources on SAP BTP:<BR />
<UL><BR />
 	<LI>The <A href="https://account.hana.ondemand.com/cockpit" target="_blank" rel="nofollow noopener noreferrer">SAP BTP Cockpit</A> is the main user interface that affords a comfortable and graphical overview of SAP BTP account resources, and the ability to create and generally manage those resources with a minimum of structural understanding.</LI><BR />
 	<LI>The <A href="https://help.sap.com/docs/BTP/65de2977205c403bbc107264b8eccf4b/7c6df2db6332419ea7a862191525377c.html" target="_blank" rel="noopener noreferrer">btp CLI</A> is a command line interface that offers a very similar set of facilities as in the Cockpit, but at the command line. Management (and reporting) is achieved through the combination of ACTIONS and OBJECTS, organised into GROUPS (such as accounts, services and security).</LI><BR />
 	<LI>There are APIs available for looking at and managing SAP BTP resources, in the API Package <A href="https://api.sap.com/package/SAPCloudPlatformCoreServices/rest" target="_blank" rel="noopener noreferrer">Core Services for SAP BTP</A>. This package contains APIs for a similar set of grouped resources to the btp CLI, such as accounts, entitlements, events, provisioning, and so on.</LI><BR />
 	<LI>The <A href="https://github.com/SAP-samples/btp-setup-automator" target="_blank" rel="nofollow noopener noreferrer">BTP Setup Automator</A>, an Apache 2.0 licensed project on GitHub, provides two main features. First, a complete ready-to-go container image with all of the command line tools youâll need for administering SAP BTP resources and much more. But more relevant to this post is what it also provides, which is a way of defining, declaratively, combinations of resources that you want to set up on SAP BTP. The setup process can then be run in an automated fashion, repeatedly if required.</LI><BR />
</UL><BR />
There are more tools of course; when you drill down from a subaccount and in particular into a runtime (such as a Kyma or Cloud Foundry environment instance) youâll need environment specific tools such as the cf CLI or kubectl for Kyma (Kubernetes). There are also other peripheral CLIs such as the <A href="https://help.sap.com/docs/PRODUCT_ID/09cc82baadc542a688176dce601398de/93532bd72117429bb823a46ef2ddd003.html?state=PRODUCTION&amp;version=Cloud&amp;locale=en-US" target="_blank" rel="noopener noreferrer">Service Manager Control CLI</A> smctl, but the functions of this one in particular are also now available within the btp CLI. So given this, letâs focus on the âtop level toolsâ, because itâs more obvious when you need cf and when you need kubectl, but less obvious at this top level.<BR />
<H2 id="what-the-tools-are-good-for" id="toc-hId-764821724">What the tools are good for</H2><BR />
I tend to think about these tools, from a use perspective, in a sort of inverted Y shape. Before drawing that shape, Iâll describe how I think of these tools and for what I think theyâre ideally suited.<BR />
<UL><BR />
 	<LI style="margin-top: 1.25rem">The SAP BTP Cockpit is 100% human-centric, appropriate for the occasional user and perhaps even the regular user, especially for ad hoc tasks. It doesnât require any investment in learning, you can just sort of click around and find your way to what you need to do.<BR />
<BR />
The native interface (yes, I said native, Web is the true native platform, fight me) is comfortable, but it would be madness, not to mention rather difficult, to try to automate any activities using it. Itâs just not built with that use case in mind. Nor is it designed primarily for power users. Nothing wrong with that, it just isnât.</LI><BR />
 	<LI style="margin-top: 1.25rem">The btp CLI is also for the occasional user, but with a path that runs right through competent all the way to power user. The command line is the dialtone of the cloud so itâs right for us to embrace it. And by embracing the btp CLI you get a consistent and uniform way of viewing, interacting with and generally managing the lifecycle of SAP BTP resources.<BR />
<BR />
Whatâs more, being a CLI tool, which is used in the context of a shell environment (be that Bash, Zsh, or even PowerShell), you get all the advantages of being a friction-free single step away from automating what you do. If you find yourself doing something on a regular basis, you can wrap the btp CLI command(s) in a small shell script and run that instead, adding logic, testing, tracking and whatever else you required.<BR />
<BR />
The power of the shell is almost immeasurable.Even more, the pipeline nature of the shell environment means you have a wealth of tools to prepare data for, and interpret data resulting from, calls to SAP BTP via the btp CLI.</LI><BR />
 	<LI style="margin-top: 1.25rem">The Core Services for SAP BTP APIs, in contrast to the SAP BTP Cockpit and btp CLI, are like precision knives. There is an important preparation cost to using them (the resources you manipulate with the APIs are protected via OAuth 2.0) but once youâre past that, you have a set of very sharp blades with which to precisely manage your resources on SAP BTP.<BR />
<BR />
Being of this nature, theyâre at the opposite end of the spectrum to the SAP BTP Cockpit, for example, from a usability perspective. Not for the faint-hearted or occasional user, quite the opposite.The APIs lend themselves to being embedded in more permanent (less ad hoc) custom automation scenarios; regardless of your choice of infrastructure / DevOps language (be that Python, Go, or something else) you can create custom tools that suit your exact needs by employing the APIs using your languageâs standard HTTP libraries.</LI><BR />
 	<LI style="margin-top: 1.25rem">The BTP Setup Automator shines for scenarios where you need automation as a core feature, are wanting to set up more shareable and extendable resource setup scenarios (think of the BTP Setup Automator as an âopen source version of SAP BTP Boosters).<BR />
<BR />
Moreover, itâs for the non-programmers, in that the definitions are declarative, in JSON (with a comfortable assistive aspect thanks to a JSON Schema sourced from its sibling the BTP Service Metadata project).</LI><BR />
</UL><BR />
<H2 id="the-decision-tree" id="toc-hId-568308219">The decision tree</H2><BR />
Ok, letâs get to that inverted Y shape.<BR />
<FIGURE><IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2022/12/Screenshot-2022-12-12-11.14.39.png" /></FIGURE><BR />
Note that while Iâm referring to this as a decision tree, itâs not a tree as such, itâs more of a map, because itâs perfectly valid (and recommended) to move around according to what youâre trying to do, and according to the context of your task, what you need to do, how often it needs to be done, and whether or not it needs to have humans or no humans involved.<BR />
<BR />
The top half of the tree represents a potentially continuous movement between the SAP BTP Cockpit and the btp CLI. This of course will depend on how occasionally or how regularly your tasks bring you to the platform, and how comfortable you become with the command line (or how uncomfortable you eventually become being restricted to a graphical user interface, for that matter). It also depends on your skill level and confidence.<BR />
<BR />
Thereâs absolutely nothing wrong with oscillating between the two boxes here; use the advantages of the excellent 10,000 metre view that the cockpit affords you, and then dig in for some real and more permanent work with the btp CLI. While at the btp CLI level, think about whether you want to automate some of what you do on a regular basis, with shell scripting.<BR />
<BR />
At some point youâll realise that you need to level up (or down in the case of this tree diagram).<BR />
<BR />
It might be that youâve come to the stage where you have a collection of related resources that you need to set up on a regular basis. For this, youâll want to move to the more focused BTP Setup Automator. Itâs great to be able to encode your requirements once and use that declaration going forward (and share it with others if needed too).<BR />
<BR />
But is also might be that during your âmain lineâ journey moving back and forth between the SAP BTP Cockpit and the btp CLI, you identify that thereâs some specific activity that needs to be performed on a regular basis, perhaps as part of some sort of CI/CD pipeline. Or you might see that thereâs a set of related activities that are very specific and that your organisation would benefit from a new custom program that makes that narrow set of operations available, either in a lights-out scenario or for use by others. For this, you can turn then to the APIs in the Core Services for SAP BTP API package.<BR />
<H2 id="in-conclusion" id="toc-hId-371794714">In conclusion</H2><BR />
For a platform as wide and diverse as SAP BTP, itâs clear that no one tool will be appropriate. For the various operations, administration and interactions with that platform, different tools with different approaches will be more or less suitable. And for the different levels of skills, regularity or interests, there are different tools that are appropriate.<BR />
<BR />
Hopefully this post will make you aware of the different tools and facilities, and give you a better appreciation and understanding of whatâs there for you.<BR />
<BR />
Embrace them all, take some time to learn what works for you, and donât be afraid to experiment. There are plenty of resources available, not least on the <A href="https://www.youtube.com/user/sapdevs" target="_blank" rel="nofollow noopener noreferrer">SAP Developers YouTube channel</A>.<BR />
<BR />
Let me know in the comments what your preferences are, what tools you use on a regular basis, and whether Iâve missed anything.<BR />
<BR />
<HR /><BR />
<A href="https://github.com/qmacro/qmacro.github.io/blob/main/blogs-sap-com-drafts/2022-12-12-managing-resources-on-sap-btp-what-tool-do-i-choose.md" target="_blank" rel="nofollow noopener noreferrer">Markdown source</A>
---
24 Days of SAP Community - Door 09: Advent Of Code
welcome-cornerblog-board
2022-12-08
https://community.sap.com/t5/welcome-corner-blog-posts/24-days-of-sap-community-door-09-advent-of-code/ba-p/13568271
2022-12-08-24-days-of-sap-community-door-09-advent-of-code
<P style="overflow: hidden;margin-bottom: 0px"><IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2022/12/Day-9.png" /></P><BR />
It's that time of year where many of us reflect and also count down to the holidays; this latter activity is directly represented in the word "advent" which is from the Latin, a combination of "ad" (to, towards) and "venire" (to come).<BR />
<BR />
I thought it would be nice to reflect on <A href="https://community-calendar.cfapps.eu10.hana.ondemand.com/index.html" target="_blank" rel="nofollow noopener noreferrer">the advent calendar</A> that <SPAN class="mention-scrubbed">nicolai.geburek</SPAN> put together for us (read more about this initiative in <SPAN class="mention-scrubbed">l_stodal</SPAN>'s <A href="https://blogs.sap.com/2022/11/29/24-days-of-sap-community/" target="_blank" rel="noopener noreferrer">24 Days of SAP Community</A>) and share another advent calendar, that of the <A href="https://adventofcode.com/" target="_blank" rel="nofollow noopener noreferrer">Advent Of Code</A>.<BR />
<H2 id="toc-hId-963149815">The annual Advent Of Code event</H2><BR />
The Advent Of Code <A href="https://adventofcode.com/2022/about" target="_blank" rel="nofollow noopener noreferrer">is described as</A>: <EM>"an <A href="https://en.wikipedia.org/wiki/Advent_calendar" target="_blank" rel="nofollow noopener noreferrer">Advent calendar</A> of small programming puzzles for a variety of skill sets and skill levels that can be solved in&nbsp;<A href="https://github.com/search?q=advent+of+code" target="_blank" rel="nofollow noopener noreferrer">any</A>&nbsp;programming language you like. People use them as&nbsp;<A href="https://y3l2n.com/2018/05/09/interview-prep-advent-of-code/" target="_blank" rel="nofollow noopener noreferrer">interview</A>&nbsp;<A href="https://twitter.com/dznqbit/status/1037607793144938497" target="_blank" rel="nofollow noopener noreferrer">prep</A>,&nbsp;<A href="https://twitter.com/pgoultiaev/status/950805811583963137" target="_blank" rel="nofollow noopener noreferrer">company training</A>,&nbsp;<A href="https://gitlab.com/imhoffman/fa19b4-mat3006/wikis/home" target="_blank" rel="nofollow noopener noreferrer">university</A>&nbsp;<A href="https://gribblelab.org/teaching/scicomp2021/index.html" target="_blank" rel="nofollow noopener noreferrer">coursework</A>,&nbsp;<A href="https://twitter.com/mrdanielklein/status/936267621468483584" target="_blank" rel="nofollow noopener noreferrer">practice</A>&nbsp;<A href="https://comp215.blogs.rice.edu/" target="_blank" rel="nofollow noopener noreferrer">problems</A>, a&nbsp;<A href="https://adventofcode.com/leaderboard" target="_blank" rel="nofollow noopener noreferrer">speed contest</A>, or to&nbsp;<A href="https://www.reddit.com/r/adventofcode/search?q=flair%3Aupping&amp;restrict_sr=on" target="_blank" rel="nofollow noopener noreferrer">challenge each other</A>."</EM><BR />
<BR />
It's been running annually since 2015, and is the creation of Eric Wastl. He gives a "behind the scenes" talk on how he puts the entire thing together, one recording of which is this one: <A href="https://youtu.be/gibVyxpi-qA" target="_blank" rel="nofollow noopener noreferrer">Eric Wastl - Advent of Code: Behind The Scenes - Leetspeak 2019</A>.<BR />
<H2 id="toc-hId-766636310">The programming puzzles</H2><BR />
You can approach Advent Of Code in any way you like. There are many, many folks participating (2020 saw a 50% increase to around 180,000) and solutions are written in pretty much every programming language under the sun. In fact, some of the puzzles are solvable with other methods, maths included, but most are about <A href="https://www.youtube.com/watch?v=-gvOCaExeK0" target="_blank" rel="nofollow noopener noreferrer">computational thinking</A>.<BR />
<BR />
Some are in it for the thrill of finishing the puzzles as quickly as they can. Others are in it for the recreational diversions it offers. Others take advantage of the quieter holiday period to improve their skills in a particular programming language that they've been working on.<BR />
<BR />
There are no prizes, you don't even have to work through all of the puzzles, you can skip ones you don't fancy. You can do them solo, or join up with your friends and create your own leaderboard.<BR />
<H2 id="toc-hId-570122805">Languages</H2><BR />
Looking at the statistics of the search results for <A href="https://github.com/search?q=advent+of+code" target="_blank" rel="nofollow noopener noreferrer">Advent Of Code resources on GitHub</A> we can see that the following languages are pretty common: Python, Rust, JavaScript, C#, Java, Go, Kotlin, C++, TypeScript and Ruby.<BR />
<BR />
Moreover, this is just the tip of the iceberg; I know that my son Joseph, for example, has enjoyed writing solutions in Haskell, APL and Go in the past, and this year he's <A href="https://github.com/jcla1/AdventOfCode/tree/master/AOC2022" target="_blank" rel="nofollow noopener noreferrer">enjoying using</A> the functional library <A href="https://ramdajs.com/" target="_blank" rel="nofollow noopener noreferrer">Ramda</A> in a JavaScript context.<BR />
<BR />
Many folks have used ABAP too!<BR />
<BR />
This year <A href="https://github.com/qmacro/adventofcode2022" target="_blank" rel="nofollow noopener noreferrer">I have started</A> building solutions in <A href="https://stedolan.github.io/jq/" target="_blank" rel="nofollow noopener noreferrer">jq</A> which is a language primarily designed for processing JSON data, but with a bit of persuasion it can be employed to address some more general problems.<BR />
<BR />
Incidentally, in the <A href="https://www.youtube.com/playlist?list=PL6RpkC85SLQABOpzhd7WI-hMpy99PxUo0" target="_blank" rel="nofollow noopener noreferrer">Hands-on SAP Dev show</A> we're using jq to explore the rich seam of JSON-based metadata in the <A href="https://github.com/SAP-samples/btp-service-metadata/blob/main/metadata-exploration/README.md" target="_blank" rel="nofollow noopener noreferrer">BTP Service Metadata project</A> - see the YouTube playlist <A href="https://www.youtube.com/playlist?list=PL6RpkC85SLQAw9X5W6XMzDKQp0jbecwu4" target="_blank" rel="nofollow noopener noreferrer">Exploring the BTP Service Metadata project</A> (head over to this playlist to watch the replays).<BR />
<H2 id="toc-hId-373609300">How about you?</H2><BR />
As you reflect on 2022 and start thinking about moving into the holiday season that is approaching, will you also take the opportunity to think about solutions to the <A href="https://adventofcode.com/" target="_blank" rel="nofollow noopener noreferrer">Advent Of Code</A> puzzles this year? What language might you use?<BR />
<BR />
Let us know in the comments if you're taking part, and what your language of choice is.<BR />
<BR />
Happy holidays!<BR />
<BR />
&nbsp;<BR />
<BR />
&nbsp;
---
SAP Developer News October 21st, 2022
application-developmentforum-board
2022-10-20
https://community.sap.com/t5/application-development-discussions/sap-developer-news-october-21st-2022/td-p/122890
2022-10-20-sap-developer-news-october-21st-2022
<P><div class="video-embed-center video-embed"><iframe class="embedly-embed" src="https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2F3emMfbpz3fk%3Ffeature%3Doembed&amp;display_name=YouTube&amp;url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3D3emMfbpz3fk&amp;image=https%3A%2F%2Fi.ytimg.com%2Fvi%2F3emMfbpz3fk%2Fhqdefault.jpg&amp;type=text%2Fhtml&amp;schema=youtube" width="600" height="337" scrolling="no" title="SAP Developer News" frameborder="0" allow="autoplay; fullscreen; encrypted-media; picture-in-picture;" allowfullscreen="true"></iframe></div></P><P>&nbsp;</P><P><STRONG><SPAN>SAP TechEd Data and Analytics</SPAN></STRONG><SPAN>&nbsp;</SPAN></P><UL><LI><SPAN>SAP TechEd Registration: </SPAN><A href="https://go3.events.sap.com/sapteched/hybrid/2022/reg/flow/sap/saptech2022/registration/page/welcome?url_id=ctabutton-sap-overview-rf" target="_blank" rel="noopener noreferrer"><SPAN>https://go3.events.sap.com/sapteched/hybrid/2022/reg/flow/sap/saptech2022/registration/page/welcome?url_id=ctabutton-sap-overview-rf</SPAN></A><SPAN>&nbsp;</SPAN></LI><LI><SPAN>SAP TechEd Data and Analytics Track: </SPAN><A href="https://go3.events.sap.com/sapteched/hybrid/2022/reg/flow/sap/saptech2022/virtualdashboard/page/showcase/data" target="_blank" rel="noopener noreferrer"><SPAN>https://go3.events.sap.com/sapteched/hybrid/2022/reg/flow/sap/saptech2022/virtualdashboard/page/showcase/data</SPAN></A><SPAN>&nbsp;</SPAN></LI></UL><P><STRONG><SPAN>Whatâs New in SAP AI Core &amp; SAP AI Launchpad in Q3 2022</SPAN></STRONG><SPAN>&nbsp;</SPAN></P><UL><LI><SPAN>Tobias Knietzschâs blog post: </SPAN><A href="https://blogs.sap.com/2022/10/11/whats-new-in-sap-ai-core-sap-ai-launchpad-in-q3-2022/" target="_blank" rel="noopener noreferrer"><SPAN>https://blogs.sap.com/2022/10/11/whats-new-in-sap-ai-core-sap-ai-launchpad-in-q3-2022/</SPAN></A> <SPAN>&nbsp;</SPAN></LI></UL><P><STRONG><SPAN>Devtoberfest Week 4</SPAN></STRONG><SPAN>&nbsp;</SPAN></P><UL><LI><SPAN>Devtoberfest Home: </SPAN><A href="https://groups.community.sap.com/t5/devtoberfest/gh-p/Devtoberfest" target="_blank" rel="noopener noreferrer"><SPAN>https://groups.community.sap.com/t5/devtoberfest/gh-p/Devtoberfest</SPAN></A><SPAN>&nbsp;</SPAN></LI><LI><SPAN>Devtoberfest Event Calendar: </SPAN><A href="https://groups.community.sap.com/t5/devtoberfest/eb-p/devtoberfest-events" target="_blank" rel="noopener noreferrer"><SPAN>https://groups.community.sap.com/t5/devtoberfest/eb-p/devtoberfest-events</SPAN></A><SPAN>&nbsp;</SPAN></LI><LI><SPAN>Devtoberfest Week 4 blog post: </SPAN><A href="https://blogs.sap.com/2022/10/20/devtoberfest-2022-week-4/" target="_blank" rel="noopener noreferrer"><SPAN>https://blogs.sap.com/2022/10/20/devtoberfest-2022-week-4/</SPAN></A> <SPAN>&nbsp;</SPAN></LI></UL><P><STRONG><SPAN>Node.js 19 announced</SPAN></STRONG><SPAN>&nbsp;</SPAN></P><UL><LI><SPAN>Announcement: </SPAN><A href="https://nodejs.org/en/blog/announcements/v19-release-announce/" target="_blank" rel="noopener nofollow noreferrer"><SPAN>https://nodejs.org/en/blog/announcements/v19-release-announce/</SPAN></A> <SPAN>&nbsp;</SPAN></LI></UL><P><STRONG><SPAN>Latest Release: SAP Fiori for Android &amp; iOS</SPAN></STRONG><SPAN>&nbsp;</SPAN></P><UL><LI><SPAN>Emil Voutta Blog Post: </SPAN><A href="https://blogs.sap.com/2022/10/10/latest-release-sap-fiori-for-android-ios-enrich-your-mobile-experiences-with-cards-accessibility-improvements-and-more/" target="_blank" rel="noopener noreferrer"><SPAN>https://blogs.sap.com/2022/10/10/latest-release-sap-fiori-for-android-ios-enrich-your-mobile-experiences-with-cards-accessibility-improvements-and-more/</SPAN></A><SPAN>&nbsp;</SPAN></LI></UL>
---
Devtoberfest 2022 Week 2
technology-blog-sap
2022-10-06
https://community.sap.com/t5/technology-blogs-by-sap/devtoberfest-2022-week-2/ba-p/13532257
2022-10-06-devtoberfest-2022-week-2
<EM>Let's take a quick look at what happened in Week 1 and what's in store for us all in Week 2 (next week) of Devtoberfest!</EM><BR />
<BR />
<A href="https://blogs.sap.com/2022/09/01/devtoberfest-2022-return-of-the-developer/" target="_blank" rel="noopener noreferrer">Devtoberfest 2022</A> is well underway, and we're almost at the end of Week 1 already! If you're only just getting round to taking a look, it's certainly not too late to get involved - all you need to do is join the <A href="https://groups.community.sap.com/t5/devtoberfest/gh-p/Devtoberfest" target="_blank" rel="noopener noreferrer">Devtoberfest Community Group</A> (check out this <A href="https://youtu.be/WUYyVUIEibg" target="_blank" rel="nofollow noopener noreferrer">60 second video</A> on how) and all of this week's content is available for you to catch up on.<BR />
<BR />
As you can see from the <A href="https://groups.community.sap.com/t5/devtoberfest/eb-p/devtoberfest-events" target="_blank" rel="noopener noreferrer">Devtoberfest calendar</A> there are plenty of sessions for you to check out in Week 2, starting on Monday 10th October:<BR />
<P style="overflow: hidden;margin-bottom: 0px"><IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2022/10/screenshot-2022-10-04-at-12.22.25.png" /></P><BR />
As you can see (and probably know), we have different color-coded topics, one for each of the days of the week:<BR />
<TABLE border="1"><BR />
<TBODY><BR />
<TR><BR />
<TD>Monday</TD><BR />
<TD>ð¢ ABAP</TD><BR />
</TR><BR />
<TR><BR />
<TD>Tuesday</TD><BR />
<TD>ð£ User Interface</TD><BR />
</TR><BR />
<TR><BR />
<TD>Wednesday</TD><BR />
<TD><span class="lia-unicode-emoji" title=":blue_circle:">ðµ</span> Data and Analytics</TD><BR />
</TR><BR />
<TR><BR />
<TD>Thursday</TD><BR />
<TD><span class="lia-unicode-emoji" title=":red_circle:">ð´</span> Low and No Code Tooling</TD><BR />
</TR><BR />
<TR><BR />
<TD>Friday</TD><BR />
<TD>ð  Cloud Native Development</TD><BR />
</TR><BR />
</TBODY><BR />
</TABLE><BR />
There are also some fun activities with the ð¡ color code <span class="lia-unicode-emoji" title=":slightly_smiling_face:">ð</span><BR />
<H2 id="toc-hId-960200450">Review and looking ahead</H2><BR />
Each topic has a Developer Advocate host, and I spoke with each of them to find out what happened this week, and more importantly what's in store for us next week. Let's take a look!<BR />
<H3 id="toc-hId-892769664">ð¢ ABAP hosted by Mamikee Kanneh</H3><BR />
<P style="font-weight: 400">In the first week of Devtoberfest, on the ABAP day (Monday) we went over a couple of introduction topics in ABAP. We kicked off with the day by learning the basics of object-oriented design in the ABAP language with Thomas Jung. We also discussed some of the common design patterns that are most often used in ABAP. From the factory pattern to dependency injection, we looked at different patterns implemented in ABAP. After that session, we got our Eclipse ADT installed with the help of Mamikee Kanneh and Thomas Jung. We also got a brief overview of what ABAP is and how to get started. The session included a live walk-through to help you install your ADT and create your first ABAP console application.</P><BR />
<P style="font-weight: 400">For next week, we have a jet packed group sessions on ABAP day (Monday):</P><BR />
<P style="font-weight: 400">In <A href="https://groups.community.sap.com/t5/devtoberfest/developer-extensibility-and-business-events-with-rap-on-sap-s/ec-p/8998#M33" target="_blank" rel="noopener noreferrer">Developer Extensibility and Business Events with RAP on SAP S/4HANA Cloud</A> you will learn about the newly added RAP extensibility options and the easy exposure of business events in RAP-based applications.</P><BR />
In <A href="https://groups.community.sap.com/t5/devtoberfest/dealing-with-legacy-code-and-transactional-consistency-in-rap/ec-p/9000#M35" target="_blank" rel="noopener noreferrer">Dealing with Legacy Code and Transactional Consistency in RAP</A>, we'll have a discussion on this topic, answering questions such as "which legacy ABAP code can be reused in RAP?" and "what must developers do to ensure the transactional consistency of the SAP Logical Work of Unit (LUW) when working with RAP?"<BR />
<P style="font-weight: 400">Ever heard of Exercism? Exercism is an online, open-source, free coding platform that offers code practice and mentorship on 50+ different programming languages. And now ABAP is available too! Join the session <A href="https://www.youtube.com/watch?v=ibtCcww1m2k&amp;list=PL6RpkC85SLQDHz97qsNTNAE2jnUKj8X5d&amp;index=27" target="_blank" rel="nofollow noopener noreferrer">ABAP on Exercism? Demo and Presentation</A> to learn about how this new track came about and get a walk-through of the exercises.</P><BR />
<BR />
<H3 id="toc-hId-696256159">ð£ User Interface hosted by Michelle Moudy</H3><BR />
In the first week of Devtoberfest we covered a couple of very relevant topics in the world of frontend development: <A href="https://groups.community.sap.com/t5/devtoberfest/how-to-make-state-management-work-for-you-with-redux-and-redux/ec-p/9453#M56" target="_blank" rel="noopener noreferrer">How to Make State Management Work for You with Redux and Redux Toolkit</A> and <A href="https://groups.community.sap.com/t5/devtoberfest/how-to-simplify-your-data-fetching-life-with-rtk-query/ec-p/9011#M41'" target="_blank" rel="noopener noreferrer">How to simplify your data fetching life with RTK Query</A>.<BR />
<BR />
Next week we have another couple of very interesting topics for you, on SAP BTP and SAP Fiori. First, there's <A href="https://groups.community.sap.com/t5/devtoberfest/configuring-btp-cross-account-and-cross-region-destinations-for/ec-p/9410#M54" target="_blank" rel="noopener noreferrer">Configuring BTP Cross-Account and Cross-Region Destinations For Use in UI Tooling</A> showcasing the additional steps necessary to enable a BTP Destination for usage across Global Accounts or between different regions. Then we take a look at open source development tools and SAP Fiori with <A href="https://groups.community.sap.com/t5/devtoberfest/outside-the-lines-sap-fiori-elements-flexible-programming-model/ec-p/8831#M1" target="_blank" rel="noopener noreferrer">Outside the lines: SAP Fiori elements flexible programming model</A>.<BR />
<H3 id="toc-hId-499742654"><span class="lia-unicode-emoji" title=":blue_circle:">ðµ</span> Data and Analytics hosted by Witalij Rudnicki</H3><BR />
The Data and Analytics track kicked off with the focus on the Machine Learning capabilities embedded into SAP HANA and SAP Data Warehouse Cloud, in the session <A href="https://groups.community.sap.com/t5/devtoberfest/build-your-machine-learning-scenario-for-your-sap-hana-cloud/ec-p/9071#M45" target="_blank" rel="noopener noreferrer">Build your Machine Learning Scenario for your SAP HANA Cloud application from Python</A>. Questions asked by participants showed that there is a lot of interest in Machine Learning and â even broader â in Artificial Intelligence in the SAP community. We also had a great session on <A href="https://groups.community.sap.com/t5/devtoberfest/machine-learning-engines-embedded-in-sap-data-warehouse-cloud/ec-p/9108#M46" target="_blank" rel="noopener noreferrer">Machine Learning engines embedded in SAP Data Warehouse Cloud</A>.<BR />
<BR />
In week 2 we will shift the focus to topics important for customers of SAP Analytics Cloud: <A href="https://groups.community.sap.com/t5/devtoberfest/bi-directional-integration-between-sap-data-warehouse-cloud-and/ec-p/9392#M52" target="_blank" rel="noopener noreferrer">Bi-directional integration with SAP Data Warehouse Cloud</A> and <A href="https://groups.community.sap.com/t5/devtoberfest/enhancing-analytic-application-functionality-with-simple/ec-p/9601#M57" target="_blank" rel="noopener noreferrer">Enhancing Analytic Application functionality with simple scripting</A>.<BR />
<H3 id="toc-hId-303229149"><span class="lia-unicode-emoji" title=":red_circle:">ð´</span> Low and No Code Tooling hosted by Daniel Wroblewski</H3><BR />
What a start to this topic, with five sessions on low and no code tooling! There was so much to cover, from an helpful overview of the whole topic in <A href="https://groups.community.sap.com/t5/devtoberfest/why-am-i-hearing-so-much-about-low-code-and-no-code/ec-p/8951#M11" target="_blank" rel="noopener noreferrer">Why Am I Hearing So Much About Low-Code and No-Code?</A>, followed directly by how SAP Business Application Studio and CI/CD can help, in <A href="https://groups.community.sap.com/t5/devtoberfest/control-the-entire-app-development-lifecycle-with-sap-business/ec-p/8954#M13" target="_blank" rel="noopener noreferrer">Control the Entire App Development Lifecycle with SAP Business Application Studio</A>. Then we looked at how you can quickly get started with zero installation needed, in <A href="https://groups.community.sap.com/t5/devtoberfest/using-visual-tools-to-create-a-mobile-application/ec-p/8956#M15" target="_blank" rel="noopener noreferrer">Using Visual Tools to Create a Mobile Application</A>. With the nominal "keynote" session for this topic/week, we then had <A href="https://groups.community.sap.com/t5/devtoberfest/the-best-of-both-worlds-visual-tools-but-still-full-control-of/ec-p/8953#M12" target="_blank" rel="noopener noreferrer">The Best of Both Worlds: Visual Tools but Still Full Control of Your Code</A>, looking deeper into SAP Business Application Studio's tool set. And we rounded off this topic day with some lovely graphics in <A href="https://groups.community.sap.com/t5/devtoberfest/easily-add-analytical-charts-to-your-sap-fiori-app/ec-p/8955#M14" target="_blank" rel="noopener noreferrer">Easily Add Analytical Charts to Your SAP Fiori App</A>.<BR />
<BR />
Next week we have even more sessions for you - far too many to list here (<A href="https://groups.community.sap.com/t5/devtoberfest/eb-p/devtoberfest-events?filter=includeUpcoming,labels&amp;depth=0&amp;label_texts=Low-Code%20No-Code&amp;byPassHideMessagesFromListFilter=true&amp;sort_by=occasionStartTime&amp;include_upcoming=true" target="_blank" rel="noopener noreferrer">head over to this filtered view to see them all</A>), but in summary, we'll be covering the SAP AppGyver topic in a LOT of detail, going deep and wide. Don't miss it!<BR />
<H3 id="toc-hId-106715644">ð  Cloud Native Development hosted by Kevin Muessig</H3><BR />
For the Cloud Native day of Devtoberfest, in <A href="https://groups.community.sap.com/t5/devtoberfest/cloud-native-opening-with-kevin-amp-josh/ec-p/8866#M3" target="_blank" rel="noopener noreferrer">Cloud Native Opening with Kevin &amp; Josh</A>, we got a great overview of the upcoming cloud native sessions and chatted about interesting content SAP is providing to get into the Cloud Native topic with a hard focus on the SAP BTP, Kyma runtime.<BR />
<BR />
In the session <A href="https://groups.community.sap.com/t5/devtoberfest/what-even-is-cloud-native-and-the-basics-of-kubernetes/ec-p/8868#M4" target="_blank" rel="noopener noreferrer">What even is Cloud Native and the Basics of Kubernetes</A> Kevin introduced the attendees of Devtoberfest to the history of Kubernetes and the concepts behind Cloud Native. He also gave a brief overview of the Kubernetes architecture and why this technology is so relevant today. Bridging to the SAP BTP, Kyma runtime he also explained SAPâs fully managed Kubernetes runtime.<BR />
<BR />
Next week we have super important topics covered, such as <A href="https://groups.community.sap.com/t5/devtoberfest/day-2-operations-with-the-sap-btp-kyma-runtime-part-1/ec-p/8872#M6" target="_blank" rel="noopener noreferrer">Day-2 Operations with the SAP BTP, Kyma runtime</A> and <A href="https://groups.community.sap.com/t5/devtoberfest/sap-hana-cloud-from-the-sap-btp-kyma-runtime/ec-p/8869#M5" target="_blank" rel="noopener noreferrer">SAP HANA Cloud from the SAP BTP, Kyma runtime</A>.<BR />
<H2 id="toc-hId--218880580">Wrapping up</H2><BR />
So we're wrapping up Week 1, finishing it off with a bit of fun with <A href="https://groups.community.sap.com/t5/devtoberfest/petoberfest-day/ec-p/10511#M61" target="_blank" rel="noopener noreferrer">ð¡ Petoberfest Day!</A> - always good to have a bit of light relief at the end of a learning week, right? And at the end of Week 2, i.e. on Fri 14 Oct, we have a Trivia Quiz! We'll run two sessions to cover as many timezones as possible:<BR />
<BR />
<A href="https://groups.community.sap.com/t5/devtoberfest/petoberfest-day/ec-p/10511#M61" target="_blank" rel="noopener noreferrer">ð¡</A> <A href="https://groups.community.sap.com/t5/devtoberfest/trivia-quiz-1-of-2/ec-p/10931#M63" target="_blank" rel="noopener noreferrer">Trivia Quiz! (1 of 2)</A><BR />
<BR />
<A href="https://groups.community.sap.com/t5/devtoberfest/petoberfest-day/ec-p/10511#M61" target="_blank" rel="noopener noreferrer">ð¡</A><A href="https://groups.community.sap.com/t5/devtoberfest/trivia-quiz-2-of-2/ec-p/10930#M62" target="_blank" rel="noopener noreferrer"> Trivia Quiz! (2 of 2)</A><BR />
<BR />
There's plenty more content in store. Don't forget that Devtoberfest runs for the entire month, and you can find all the sessions detailed over in the <A href="https://groups.community.sap.com/t5/devtoberfest/eb-p/devtoberfest-events" target="_blank" rel="noopener noreferrer">Devtoberfest Events area in SAP Community Events</A>.<BR />
<BR />
Happy Devtoberfest!<BR />
<BR />
&nbsp;
---
ð¡ Petoberfest - share your pet pics!
Devtoberfestforum-board
2022-09-13
https://community.sap.com/t5/devtoberfest-discussions/petoberfest-share-your-pet-pics/td-p/10509
2022-09-13-petoberfest-share-your-pet-pics
<P><STRONG>UPDATE: This Petoberfest fun event is now officially over - as you may remember (from the description below) we actually wanted to leave this open the entire week, ending Sunday 09 October in whatever timezone you are. So as now that date has officially passed us by, we will now be counting up all the entries - which were all super btw!</STRONG></P><P>Hey all pet lovers and owners - this discussion thread is for you!</P><P>On the first Friday of Devtoberfest this year, which will be Friday 07 October 2022, we have <A href="https://groups.community.sap.com/t5/devtoberfest/petoberfest-day/ev-p/10511" target="_self" rel="noopener noreferrer">#Petoberfest</A> !&nbsp;</P><P>It's a lighthearted way to share your pics of pets. here's what you have to do, in three easy steps:</P><P>Step 1: Take a pic of your pet in a work, coding or general office setting</P><P>Step 2: Post that picture here, or (if you've already posted it elsewhere, on social media or similar, share the link to that item here)</P><P>Step 3: There is no step 3 <span class="lia-unicode-emoji" title=":slightly_smiling_face:">ð</span></P><P>It will be fun to share pics like this and see how your fellow pet parents care for their pets in a workplace environment!</P><P>Here's the event page:&nbsp;<A href="https://groups.community.sap.com/t5/devtoberfest/petoberfest-day/ev-p/10511" target="_blank" rel="noopener noreferrer">https://groups.community.sap.com/t5/devtoberfest/petoberfest-day/ev-p/10511</A>&nbsp;</P><P>Note: We don't want to restrict you to just posting your pics here on the Friday - you have the entire Week 1 of Devtoberfest (which runs from Monday 03 October through Sunday 09 October) to do so. If you post outside of this period, your entry may not be credited.</P>
---
Introducing "SAP CodeJam BTP" - a new group, and a first event
technology-blog-sap
2022-08-04
https://community.sap.com/t5/technology-blogs-by-sap/introducing-quot-sap-codejam-btp-quot-a-new-group-and-a-first-event/ba-p/13536802
2022-08-04-introducing-quot-sap-codejam-btp-quot-a-new-group-and-a-first-event
<EM>CodeJams are back and we have a new SAP Business Technology Platform category and the first event in that category for you coming up!</EM><BR />
<BR />
As you may have read in <SPAN class="mention-scrubbed">thomas.jung</SPAN> 's blog post <A href="https://blogs.sap.com/2022/05/10/sap-codejam-events-return/" target="_blank" rel="noopener noreferrer">SAP CodeJam Events Return!</A>, we're bringing CodeJams back. Slowly and steadily at first, and we've had the first couple already this year - on ABAP (in Newtown Square) and on UI5 (in Walldorf).<BR />
<BR />
We're organising everything in on our new discussion &amp; events platform, and to that end, we have a new <A href="https://groups.community.sap.com/t5/sap-codejam-btp/gh-p/codejam-btp" target="_blank" rel="noopener noreferrer">SAP CodeJam BTP group</A> as well the <A href="https://groups.community.sap.com/t5/sap-codejam/eb-p/codejam-events" target="_blank" rel="noopener noreferrer">SAP CodeJam category in the SAP Events area</A>, for CodeJams on topics in the area of SAP BTP.<BR />
<BR />
Here's what the new group looks like:<BR />
<P style="overflow: hidden;margin-bottom: 0px"><IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2022/08/screenshot-2022-08-04-at-07.05.02.jpeg" height="738" width="549" /></P><BR />
&nbsp;<BR />
<BR />
In this group you can find out more about the SAP BTP CodeJam topic, and also, for every upcoming CodeJam event, there will be an item posted there that links to the corresponding event in the SAP Events area (you can see an example of that in the middle of the three highlighted items in the screenshot).<BR />
<BR />
If you're already planning on attending SAP Inside Track Belgium on Sat 24 Sep in Kontich, why not consider joining us on the day before, i.e. Fri 23 Sep, just down the road in Mechelen, for the inaugural SAP CodeJam BTP event: <A href="https://groups.community.sap.com/t5/sap-codejam-btp-blog-posts/hands-on-with-the-btp-cli-and-apis/ba-p/8143" target="_blank" rel="noopener noreferrer">Hands-on with the btp CLI and APIs</A>?<BR />
<BR />
Spaces are limited, so get on over to the event page and let us know you're coming.<BR />
<BR />
See you there!
---
ð Hands-on with the btp CLI and APIs in Mechelen, Belgium
code-jamblog-board
2022-08-03
https://community.sap.com/t5/sap-codejam-blog-posts/hands-on-with-the-btp-cli-and-apis-in-mechelen-belgium/ba-p/8143
2022-08-03-hands-on-with-the-btp-cli-and-apis-in-mechelen-belgium
<P>We have our inaugural SAP CodeJam BTP event coming up! Head over to the SAP Events section to the event item here for all the information, how to sign up, and the prerequisites you must complete:</P><P><A href="https://groups.community.sap.com/t5/sap-codejam/codejam-hands-on-with-the-btp-cli-and-apis/ec-p/8141#M11" target="_self" rel="noopener noreferrer"><span class="lia-unicode-emoji" title=":tear_off_calendar:">ð</span>Hands-on with the btp CLI and APIs</A></P><P>&nbsp;</P>
---
How do *you* make use of the btp CLI?
code-jamforum-board
2022-08-02
https://community.sap.com/t5/sap-codejam-discussions/how-do-you-make-use-of-the-btp-cli/td-p/8112
2022-08-02-how-do-you-make-use-of-the-btp-cli
<P>Our first SAP CodeJam BTP event is on the topic of the command line interface tool for SAP BTP, namely the <A href="https://help.sap.com/docs/BTP/65de2977205c403bbc107264b8eccf4b/a03a5550cdd44fa48ff78d70ca7c9651.html" target="_self" rel="noopener noreferrer">btp CLI</A>, and also covers the APIs in the <A href="https://api.sap.com/package/SAPCloudPlatformCoreServices/rest" target="_self" rel="noopener noreferrer">Core Services for SAP BTP package</A>.&nbsp;</P><P>Have you seen <A href="https://www.youtube.com/playlist?list=PL6RpkC85SLQDXx827kdjKc6HRvdMRZ8P5" target="_self" rel="nofollow noopener noreferrer">our series on the btp CLI</A> on our Hands-on SAP Dev show? Take a look, and share with us here your favourite parts. Did you learn something new? Is there anything that wasn't covered about the btp CLI that you'd like to see?&nbsp;</P><P>Let us know in the replies here!</P>
---
SAP Developer News July 22nd, 2022
application-developmentforum-board
2022-07-22
https://community.sap.com/t5/application-development-discussions/sap-developer-news-july-22nd-2022/td-p/6660
2022-07-22-sap-developer-news-july-22nd-2022
<P><div class="video-embed-center video-embed"><iframe class="embedly-embed" src="https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2FqwdqwBVS1Pg%3Ffeature%3Doembed&amp;display_name=YouTube&amp;url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DqwdqwBVS1Pg&amp;image=https%3A%2F%2Fi.ytimg.com%2Fvi%2FqwdqwBVS1Pg%2Fhqdefault.jpg&amp;type=text%2Fhtml&amp;schema=youtube" width="600" height="337" scrolling="no" title="ABAP CodeJam, News as Podcast, Data Intelligence Trial 3.2, Easy URLs for UI5 | SAP Developer News" frameborder="0" allow="autoplay; fullscreen; encrypted-media; picture-in-picture;" allowfullscreen="true"></iframe></div></P><P><STRONG><SPAN>Report from the Mastering SAP event in Melbourne Australia</SPAN></STRONG><SPAN>&nbsp;</SPAN></P><UL><LI><SPAN>SAP CodeJam ABAP: </SPAN><A href="https://groups.community.sap.com/t5/sap-codejam-abap/gh-p/codejam-abap" target="_blank" rel="noopener noreferrer"><SPAN>https://groups.community.sap.com/t5/sap-codejam-abap/gh-p/codejam-abap</SPAN></A><SPAN>&nbsp;</SPAN></LI><LI><SPAN>Mastering SAP: </SPAN><A href="https://masteringsapconference.com/msap/aus/" target="_blank" rel="noopener nofollow noreferrer"><SPAN>https://masteringsapconference.com/msap/aus/</SPAN></A><SPAN>&nbsp;</SPAN></LI></UL><P><STRONG><SPAN>SAP Developers Podcast</SPAN></STRONG><SPAN>&nbsp;</SPAN></P><UL><LI><SPAN>OpenSAP: </SPAN><A href="https://podcast.opensap.info/sap-developers/" target="_blank" rel="noopener nofollow noreferrer"><SPAN>https://podcast.opensap.info/sap-developers/</SPAN></A><SPAN>&nbsp;</SPAN></LI><LI><SPAN>Apple: </SPAN><A href="https://podcasts.apple.com/us/podcast/sap-developers/id1634608091" target="_blank" rel="noopener nofollow noreferrer"><SPAN>https://podcasts.apple.com/us/podcast/sap-developers/id1634608091</SPAN></A><SPAN>&nbsp;</SPAN></LI><LI><SPAN>Spotify: </SPAN><A href="https://open.spotify.com/show/46adQ608zOxwvgEFWAGMN0" target="_blank" rel="noopener nofollow noreferrer"><SPAN>https://open.spotify.com/show/46adQ608zOxwvgEFWAGMN0</SPAN></A><SPAN>&nbsp;</SPAN></LI></UL><UL><LI><SPAN>TuneIn: </SPAN><A href="https://tunein.com/podcasts/Technology-Podcasts/SAP-Developers-p1708750/" target="_blank" rel="noopener nofollow noreferrer"><SPAN>https://tunein.com/podcasts/Technology-Podcasts/SAP-Developers-p1708750/</SPAN></A><SPAN>&nbsp;</SPAN></LI><LI><SPAN>Google: </SPAN><A href="https://podcasts.google.com/feed/aHR0cHM6Ly9wb2RjYXN0Lm9wZW5zYXAuaW5mby9zYXAtZGV2ZWxvcGVycy9mZWVkL21wMy8" target="_blank" rel="noopener nofollow noreferrer"><SPAN>https://podcasts.google.com/feed/aHR0cHM6Ly9wb2RjYXN0Lm9wZW5zYXAuaW5mby9zYXAtZGV2ZWxvcGVycy9mZWVkL21wMy8</SPAN></A><SPAN>&nbsp;</SPAN></LI><LI><SPAN>Ian Thainâs blog post: </SPAN><A href="https://blogs.sap.com/2022/07/19/the-launch-of-sap-developers-podcasts/" target="_blank" rel="noopener noreferrer"><SPAN>https://blogs.sap.com/2022/07/19/the-launch-of-sap-developers-podcasts/</SPAN></A><SPAN>&nbsp;</SPAN></LI></UL><P><STRONG><SPAN>SAP Data Intelligence Trial Edition 3.2</SPAN></STRONG><SPAN>&nbsp;</SPAN></P><UL><LI><SPAN>SAP Data Intelligence Trial Edition 3.2 blog post: </SPAN><A href="https://blogs.sap.com/2022/07/14/sap-data-intelligence-trial-edition-3.2/" target="_blank" rel="noopener noreferrer"><SPAN>https://blogs.sap.com/2022/07/14/sap-data-intelligence-trial-edition-3.2/</SPAN></A><SPAN>&nbsp;</SPAN><SPAN>&nbsp;</SPAN></LI><LI><SPAN>SAP TechEd DAT163 workshop content: </SPAN><A href="https://github.com/SAP-samples/teched2021-DAT163" target="_blank" rel="noopener nofollow noreferrer"><SPAN>https://github.com/SAP-samples/teched2021-DAT163</SPAN></A><SPAN>&nbsp;</SPAN><SPAN>&nbsp;</SPAN></LI></UL><P><STRONG><SPAN>Document Information Extraction Service available on BTP Free Tier</SPAN></STRONG><SPAN>&nbsp;</SPAN></P><UL><LI><SPAN>Document Information Extraction Service available on BTP Free Tier Blog Post by Tomasz Janasz: </SPAN><A href="https://blogs.sap.com/2022/07/19/free-tier-option-for-document-information-extraction-only-one-step-away/" target="_blank" rel="noopener noreferrer"><SPAN>https://blogs.sap.com/2022/07/19/free-tier-option-for-document-information-extraction-only-one-step-away/</SPAN></A><SPAN>&nbsp;</SPAN></LI><LI><SPAN>Tutorial - Get an Account on SAP BTP to Try Out Free Tier Service Plans: </SPAN><A href="https://developers.sap.com/tutorials/btp-free-tier-account.html" target="_blank" rel="noopener noreferrer"><SPAN>https://developers.sap.com/tutorials/btp-free-tier-account.html</SPAN></A><SPAN>&nbsp;</SPAN></LI><LI><SPAN>Tutorials on Document Information Extraction: </SPAN><A href="https://developers.sap.com/tutorial-navigator.html?search=document+information+extraction&amp;tag=software-product%3Atechnology-platform%2Fsap-ai-business-services%2Fdocument-information-extraction" target="_blank" rel="noopener noreferrer"><SPAN>https://developers.sap.com/tutorial-navigator.html?search=document+information+extraction&amp;tag=software-product%3Atechnology-platform%2Fsap-ai-business-services%2Fdocument-information-extraction</SPAN></A><SPAN>&nbsp;</SPAN></LI></UL><P><STRONG><SPAN>Convenient URLs for SAPUI5/OpenUI5 CDN</SPAN></STRONG><SPAN>&nbsp;</SPAN></P><UL><LI><SPAN>Announcement blog post by Oliver Graeff: </SPAN><A href="https://blogs.sap.com/2022/07/20/short-and-powerful-convenient-urls-for-sapui5-openui5-cdn/" target="_blank" rel="noopener noreferrer"><SPAN>https://blogs.sap.com/2022/07/20/short-and-powerful-convenient-urls-for-sapui5-openui5-cdn/</SPAN></A><SPAN>&nbsp;</SPAN></LI></UL><P>&nbsp;</P>
---
SAP Developer News July 1st, 2022
application-developmentforum-board
2022-07-01
https://community.sap.com/t5/application-development-discussions/sap-developer-news-july-1st-2022/td-p/5772
2022-07-01-sap-developer-news-july-1st-2022
<P><div class="video-embed-center video-embed"><iframe class="embedly-embed" src="https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2FxVDm_AnmWrc%3Ffeature%3Doembed&amp;display_name=YouTube&amp;url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DxVDm_AnmWrc&amp;image=https%3A%2F%2Fi.ytimg.com%2Fvi%2FxVDm_AnmWrc%2Fhqdefault.jpg&amp;type=text%2Fhtml&amp;schema=youtube" width="600" height="337" scrolling="no" title="Business Application Studio, UI5 Challenge, AI Business Services, SDK for iOS | SAP Developer News" frameborder="0" allow="autoplay; fullscreen; encrypted-media; picture-in-picture;" allowfullscreen="true"></iframe></div></P><P><STRONG><SPAN>New capabilities in SAP Business Application Studio</SPAN></STRONG><SPAN>&nbsp;</SPAN></P><UL><LI><SPAN>SAP Business Application Studio: new capabilities to accelerate the delivery of enterprise applications and extensions: </SPAN><A href="https://blogs.sap.com/2022/06/29/sap-business-application-studio-new-capabilities-to-accelerate-the-delivery-of-enterprise-applications-and-extensions/" target="_blank" rel="noopener noreferrer"><SPAN>https://blogs.sap.com/2022/06/29/sap-business-application-studio-new-capabilities-to-accelerate-the-delivery-of-enterprise-applications-and-extensions/</SPAN></A><SPAN>&nbsp;</SPAN><SPAN>&nbsp;</SPAN></LI></UL><P><STRONG><SPAN>SAP Community Code Challenge â Testing UI5 Apps with wdi5</SPAN></STRONG><SPAN>&nbsp;</SPAN></P><UL><LI><SPAN>SAP Community Code Challenge â Testing UI5 Apps with wdi5</SPAN><SPAN>: </SPAN><A href="https://blogs.sap.com/2022/06/08/sap-community-code-challenge-testing-ui5-apps-with-wdi5/" target="_blank" rel="noopener noreferrer"><SPAN>https://blogs.sap.com/2022/06/08/sap-community-code-challenge-testing-ui5-apps-with-wdi5/</SPAN></A><SPAN>&nbsp;</SPAN></LI></UL><P><STRONG><SPAN>New AI Business Services Tutorials â Tech Byte on Business Entity Recognition Service</SPAN></STRONG><SPAN>&nbsp;</SPAN></P><UL><LI><SPAN>Tutorials: </SPAN><A href="https://developers.sap.com/tutorial-navigator.html?search=ai+business+services" target="_blank" rel="noopener noreferrer"><SPAN>https://developers.sap.com/tutorial-navigator.html?search=ai+business+services</SPAN></A><SPAN>&nbsp;</SPAN></LI><LI><SPAN>Tech Byte: <A href="https://youtu.be/ucZFrONCVZ4" target="_blank" rel="noopener nofollow noreferrer">https://youtu.be/ucZFrONCVZ4</A></SPAN><SPAN>&nbsp;</SPAN></LI></UL><P><STRONG><SPAN>SAP BTP SDK for iOS Version 8.0 release</SPAN></STRONG><SPAN>&nbsp;</SPAN></P><UL><LI><SPAN>Blog Post: <A href="https://blogs.sap.com/2022/06/27/sap-btp-sdk-for-ios-8.0-is-now-available/" target="_blank" rel="noopener noreferrer">https://blogs.sap.com/2022/06/27/sap-btp-sdk-for-ios-8.0-is-now-available/</A>&nbsp;</SPAN><SPAN>&nbsp;</SPAN></LI></UL><P><STRONG><SPAN>Customer Engagement Initiative</SPAN></STRONG><SPAN>&nbsp;</SPAN></P><UL><LI><SPAN>CTO Juergen Muellerâs announcement on Twitter: </SPAN><A href="https://twitter.com/JuerMueller/status/1541812944517926912" target="_blank" rel="noopener nofollow noreferrer"><SPAN>https://twitter.com/JuerMueller/status/1541812944517926912</SPAN></A><SPAN>&nbsp;</SPAN><SPAN>&nbsp;</SPAN></LI><LI><SPAN>Your Opportunity to Influence SAP â Customer Engagement Initiative Projects for Cycle 2-2022: </SPAN><A href="https://blogs.sap.com/2022/06/13/your-opportunity-to-influence-sap-customer-engagement-initiative-projects-for-cycle-2-2022/" target="_blank" rel="noopener noreferrer"><SPAN>https://blogs.sap.com/2022/06/13/your-opportunity-to-influence-sap-customer-engagement-initiative-projects-for-cycle-2-2022/</SPAN></A><SPAN>&nbsp;</SPAN><SPAN>&nbsp;</SPAN></LI></UL><UL><LI><SPAN>Open influence opportunities: </SPAN><A href="https://t.co/6I8Cncl3jy" target="_blank" rel="noopener nofollow noreferrer"><SPAN>https://t.co/6I8Cncl3jy</SPAN></A><SPAN>&nbsp;</SPAN></LI></UL>
---
SAP Developer News June 24th, 2022
application-developmentforum-board
2022-06-24
https://community.sap.com/t5/application-development-discussions/sap-developer-news-june-24th-2022/td-p/5583
2022-06-24-sap-developer-news-june-24th-2022
<P><div class="video-embed-center video-embed"><iframe class="embedly-embed" src="https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2FfpMJlfbLhtM%3Ffeature%3Doembed&amp;display_name=YouTube&amp;url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DfpMJlfbLhtM&amp;image=https%3A%2F%2Fi.ytimg.com%2Fvi%2FfpMJlfbLhtM%2Fhqdefault.jpg&amp;type=text%2Fhtml&amp;schema=youtube" width="600" height="337" scrolling="no" title="DWC &amp; SAC, MacBook Setup, Landscape Automation, SAP HANA Cloud | SAP Developer News" frameborder="0" allow="autoplay; fullscreen; encrypted-media; picture-in-picture;" allowfullscreen="true"></iframe></div></P><P><STRONG><SPAN>Integration of SAP Data Warehouse Cloud &amp; SAP Analytics Cloud for Planning</SPAN></STRONG><SPAN>&nbsp;</SPAN></P><UL><LI><SPAN>Introducing the bi-directional integration of SAP Data Warehouse Cloud and SAP Analytics Cloud for Planning: </SPAN><A href="https://blogs.sap.com/2022/06/21/introducing-the-bi-directional-integration-of-sap-data-warehouse-cloud-and-sap-analytics-cloud-for-planning/" target="_blank" rel="noopener noreferrer"><SPAN>https://blogs.sap.com/2022/06/21/introducing-the-bi-directional-integration-of-sap-data-warehouse-cloud-and-sap-analytics-cloud-for-planning/</SPAN></A><SPAN>&nbsp;</SPAN><SPAN>&nbsp;</SPAN></LI></UL><P><STRONG><SPAN>Setting up a new MacBook laptop for SAP development</SPAN></STRONG><SPAN>&nbsp;</SPAN></P><UL><LI><SPAN>Setting up my Mac for SAP development: </SPAN><A href="https://blogs.sap.com/2022/06/20/setting-up-my-mac-for-sap-development/" target="_blank" rel="noopener noreferrer"><SPAN>https://blogs.sap.com/2022/06/20/setting-up-my-mac-for-sap-development/</SPAN></A><SPAN>&nbsp;</SPAN><SPAN>&nbsp;</SPAN></LI></UL><P><STRONG><SPAN>Latest post in new SAP Tech Bytes series on Cloud Foundry</SPAN></STRONG><SPAN>&nbsp;</SPAN></P><UL><LI><SPAN>SAP Tech Bytes: Serve Web Page with an Approuter â Cloud Foundry Basics #2: </SPAN><A href="https://blogs.sap.com/2022/06/17/sap-tech-bytes-serve-web-page-with-an-approuter-cloud-foundry-basics-2/" target="_blank" rel="noopener noreferrer"><SPAN>https://blogs.sap.com/2022/06/17/sap-tech-bytes-serve-web-page-with-an-approuter-cloud-foundry-basics-2/</SPAN></A><SPAN>&nbsp;</SPAN><SPAN>&nbsp;</SPAN></LI><LI><SPAN>GitHub repo for SAP Tech Bytes series: </SPAN><A href="https://github.com/SAP-samples/sap-tech-bytes/" target="_blank" rel="noopener nofollow noreferrer"><SPAN>https://github.com/SAP-samples/sap-tech-bytes/</SPAN></A><SPAN>&nbsp;</SPAN><SPAN>&nbsp;</SPAN></LI><LI><SPAN>General SAP Tech Bytes blog posts: </SPAN><A href="https://blogs.sap.com/tag/sap-tech-bytes/" target="_blank" rel="noopener noreferrer"><SPAN>https://blogs.sap.com/tag/sap-tech-bytes/</SPAN></A><SPAN>&nbsp;</SPAN><SPAN>&nbsp;</SPAN></LI></UL><UL><LI><SPAN>SAP Tech Bytes video playlist: </SPAN><A href="https://www.youtube.com/playlist?list=PL6RpkC85SLQC3HBShmlMaPu_nL--4f20z" target="_blank" rel="noopener nofollow noreferrer"><SPAN>https://www.youtube.com/playlist?list=PL6RpkC85SLQC3HBShmlMaPu_nL--4f20z</SPAN></A><SPAN>&nbsp;</SPAN><SPAN>&nbsp;</SPAN></LI></UL><P><STRONG><SPAN>Upcoming SAP Landscape Automation with Ansible &amp; Red Hat Enterprise Linux course</SPAN></STRONG><SPAN>&nbsp;</SPAN></P><UL><LI><SPAN>openSAP course: </SPAN><A href="https://open.sap.com/courses/red1-pc" target="_blank" rel="noopener noreferrer"><SPAN>https://open.sap.com/courses/red1-pc</SPAN></A><SPAN>&nbsp;</SPAN><SPAN>&nbsp;</SPAN></LI></UL><P><STRONG>SAP HANA Cloud roundup&nbsp;</STRONG></P><UL><LI><SPAN>Whatâs new in SAP HANA Cloud: </SPAN><A href="https://help.sap.com/doc/a91f884257684c59923ef33c3fa6cf18/hanacloud/en-US/38cc9f70125646e0bb62b83b83e67564.html?sel2=2022%5C.16%20%5C(QRC%202%2F2022%5C" target="_blank" rel="noopener noreferrer"><SPAN>https://help.sap.com/doc/a91f884257684c59923ef33c3fa6cf18/hanacloud/en-US/38cc9f70125646e0bb62b83b83e67564.html?sel2=2022%5C.16%20%5C(QRC%202%2F2022%5C</SPAN></A><SPAN>) </SPAN><SPAN>&nbsp;</SPAN></LI><LI><SPAN>You are invited: Whatâs New in SAP HANA Cloud in June 2022</SPAN><SPAN>: </SPAN><A href="https://blogs.sap.com/2022/06/14/you-are-invited-whats-new-in-sap-hana-cloud-in-june-2022/" target="_blank" rel="noopener noreferrer"><SPAN>https://blogs.sap.com/2022/06/14/you-are-invited-whats-new-in-sap-hana-cloud-in-june-2022/</SPAN></A><SPAN>&nbsp;</SPAN></LI><LI><SPAN>Visualize your spatial data in SAP HANA Database Explorer</SPAN><SPAN>: </SPAN><A href="https://blogs.sap.com/2022/06/21/visualize-your-spatial-data-in-sap-hana-database-explorer/" target="_blank" rel="noopener noreferrer"><SPAN>https://blogs.sap.com/2022/06/21/visualize-your-spatial-data-in-sap-hana-database-explorer/</SPAN></A><SPAN>&nbsp;</SPAN></LI><LI><SPAN>Whatâs New in the SAP HANA Database Explorer Visual Studio Code Extension Version 1.6:</SPAN> <A href="https://blogs.sap.com/2022/06/10/whats-new-in-the-sap-hana-database-explorer-visual-studio-code-extension-version-1.6/" target="_blank" rel="noopener noreferrer"><SPAN>https://blogs.sap.com/2022/06/10/whats-new-in-the-sap-hana-database-explorer-visual-studio-code-extension-version-1.6/</SPAN></A><SPAN>&nbsp;</SPAN></LI><LI><SPAN>Python Client API for machine learning algorithms -&nbsp;ChangeLog: </SPAN><A href="https://help.sap.com/doc/1d0ebfe5e8dd44d09606814d83308d4b/2.0.06/en-US/change_log.html#changelog" target="_blank" rel="noopener noreferrer"><SPAN>https://help.sap.com/doc/1d0ebfe5e8dd44d09606814d83308d4b/2.0.06/en-US/change_log.html#changelog</SPAN></A><SPAN>&nbsp;</SPAN><SPAN>&nbsp;</SPAN></LI><LI><SPAN>Road Map Explorer for SAP HANA Cloud: </SPAN><A href="https://roadmaps.sap.com/board?PRODUCT=73554900100800002881&amp;range=CURRENT-LAST#Q2%202022" target="_blank" rel="noopener noreferrer"><SPAN>https://roadmaps.sap.com/board?PRODUCT=73554900100800002881&amp;range=CURRENT-LAST#Q2%202022</SPAN></A> <SPAN>&nbsp;</SPAN></LI></UL><P><SPAN>&nbsp;</SPAN><SPAN>&nbsp;</SPAN></P>
---
Global Running Day with SAP Community in Manchester - Wednesday 1st June 2022
welcome-cornerblog-board
2022-05-17
https://community.sap.com/t5/welcome-corner-blog-posts/global-running-day-with-sap-community-in-manchester-wednesday-1st-june-2022/ba-p/13525589
2022-05-17-global-running-day-with-sap-community-in-manchester-wednesday-1st-june-2022
<EM>I'm taking part in Global Running Day, in an event kick started by Phil Cooley in Melbourne.</EM><BR />
<BR />
Wednesday 1st June is Global Running Day, and my good friend and remote running buddy <SPAN class="mention-scrubbed">phil.cooley</SPAN> kick started a nice initiative described in his blog post <A href="https://blogs.sap.com/2022/05/13/sap-community-global-running-day-in-melbourne-wednesday-1st-june-2022/" target="_blank" rel="noopener noreferrer">Global Running Day with SAP Community In Melbourne â Wednesday 1st June 2022</A>, which you should go and read too.<BR />
<BR />
I won't be able to get to Melbourne to run with Phil and friends, so I've done two things:<BR />
<UL><BR />
 	<LI>I've signed up and pledged to run virtually "with" the SAP Community Melbourne runners</LI><BR />
 	<LI>I've organised a route in the centre of Manchester which I'll run, and which - if you're in the area - you're more than welcome to come and run along with me too</LI><BR />
</UL><BR />
<H2 id="toc-hId-959369280">Pledge</H2><BR />
I've <A href="https://globalrunningday.org/cjv734w#events" target="_blank" rel="nofollow noopener noreferrer">pledged</A> to run a route on the same day:<BR />
<P style="overflow: hidden;margin-bottom: 0px"><IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2022/05/screenshot-2022-05-17-at-11.18.35.png" /></P><BR />
<P class="image_caption" style="text-align: center;font-style: italic">My pledge to run with the SAP Community Melbourne runners</P><BR />
&nbsp;<BR />
<H2 id="toc-hId-762855775">Manchester route</H2><BR />
I've mapped out a hopefully interesting 5K route around parts of the centre of Manchester, that you're welcome to join me on. The <A href="https://www.strava.com/routes/2961588759976496856" target="_blank" rel="nofollow noopener noreferrer">route is stored on Strava</A>&nbsp;and looks like this:<BR />
<P style="overflow: hidden;margin-bottom: 0px"><IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2022/05/screenshot-2022-05-20-at-14.28.23.png" /></P><BR />
<P class="image_caption" style="text-align: center;font-style: italic">A screenshot of the route around Manchester</P><BR />
The route starts and ends in <A href="https://goo.gl/maps/uwsm22qdxh2Uoewu5" target="_blank" rel="nofollow noopener noreferrer">Sackville Garden</A>, which is home to the statue of Manchester's adopted son, the father of computing, Alan Turing.<BR />
<P style="overflow: hidden;margin-bottom: 0px"><IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2022/05/screenshot-2022-05-17-at-11.24.34.png" /></P><BR />
<P class="image_caption" style="text-align: center;font-style: italic">A photo of the statue of Alan Turing in Sackville Garden</P><BR />
&nbsp;<BR />
<BR />
Beyond Alan Turing's statue, here are a few more highlights of what the route entails:<BR />
<UL><BR />
 	<LI>We run for a short section along the <A href="https://en.wikipedia.org/wiki/Rochdale_Canal" target="_blank" rel="nofollow noopener noreferrer">Rochdale Canal</A>, which opened in 1798 and was one of the canals that allowed transport to and from the mills which powered the Industrial Revolution which led to a reimagining of manufacturing processes which then expanded to mainland Europe and on to the United States in the 19th century</LI><BR />
 	<LI>We run by the site of <A href="https://en.wikipedia.org/wiki/The_Ha%C3%A7ienda" target="_blank" rel="nofollow noopener noreferrer">The HaÃ§ienda</A>, a hugely influential night club and music venue that was the home of Factory Records and the band New Order and was a nursery venue for bands like the Stone Roses, Happy Mondays, The Smiths, James, The Fall and many others</LI><BR />
 	<LI>Then, passing by the basin where the Bridgewater Canal and the Rochdale Canal meet, we take in the <A href="https://en.wikipedia.org/wiki/Manchester_Liverpool_Road_railway_station" target="_blank" rel="nofollow noopener noreferrer">world's first ever railway station</A>, on Liverpool Road</LI><BR />
 	<LI>After that, we run through various parts of the city centre including St Peter's Square, the <A href="https://northernquartermanchester.com/" target="_blank" rel="nofollow noopener noreferrer">Northern Quarter</A> and then return to Sackville Garden</LI><BR />
</UL><BR />
<H2 id="toc-hId-566342270">Essential information</H2><BR />
I'll be at the Alan Turing statue in Sackville Garden at 0730 on the morning of Wed 01 June, and (to give time for anyone to arrive) will be setting off from there on the route at 0740. We'll go at the pace of the steadiest runner, so don't worry about being too fast or too slow - we will all stay together.<BR />
<BR />
If you plan on coming along, let me know in the comments to this post, and - see you then!
---
Back to basics: OData - Your thoughts, comments and questions welcome!
application-developmentforum-board
2022-05-13
https://community.sap.com/t5/application-development-discussions/back-to-basics-odata-your-thoughts-comments-and-questions-welcome/td-p/4583
2022-05-13-back-to-basics-odata-your-thoughts-comments-and-questions-welcome
<P><div class="video-embed-center video-embed"><iframe class="embedly-embed" src="https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2FO3OU2rSUqs0%3Ffeature%3Doembed&amp;display_name=YouTube&amp;url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DO3OU2rSUqs0&amp;image=https%3A%2F%2Fi.ytimg.com%2Fvi%2FO3OU2rSUqs0%2Fhqdefault.jpg&amp;type=text%2Fhtml&amp;schema=youtube" width="200" height="113" scrolling="no" title="Back to basics: OData - the Open Data Protocol - Part 1 - Introduction" frameborder="0" allow="autoplay; fullscreen; encrypted-media; picture-in-picture;" allowfullscreen="true"></iframe></div></P><P>This is a great place for us to talk about all things OData, about the topics that came up during the related Hands-on SAP Dev live stream episodes. Have a look at <A href="https://www.youtube.com/playlist?list=PL6RpkC85SLQDYLiN1BobWXvvnhaGErkwj" target="_self" rel="nofollow noopener noreferrer">the episodes</A>, and share your thoughts, comments and questions here.&nbsp;</P>
---
SAP Community Code Challenge - Results
welcome-cornerblog-board
2022-03-18
https://community.sap.com/t5/welcome-corner-blog-posts/sap-community-code-challenge-results/ba-p/13530903
2022-03-18-sap-community-code-challenge-results
<EM>We had some great entries for the SAP Community Code Challenge, here's a quick overview and details on what's next.</EM><BR />
<BR />
We <A href="https://blogs.sap.com/2022/02/14/sap-community-code-challenge/" target="_blank" rel="noopener noreferrer">launched the SAP Community Code Challenge</A> a month ago, and we've had some great entries and conversations between then and now, in the <A href="https://groups.community.sap.com/t5/coffee-corner/sap-community-code-challenge-learn-share-and-discuss/m-p/2959" target="_blank" rel="noopener noreferrer">Community Groups discussion thread</A>.<BR />
<BR />
As the <A href="https://blogs.sap.com/2022/02/14/sap-community-code-challenge/" target="_blank" rel="noopener noreferrer">launch blog post</A> explained, this challenge was intended to be loose, friendly and fun, and really it's a bit of a learning opportunity "in disguise". Anyone who has coded solutions to exercises on platforms like <A href="https://projecteuler.net/" target="_blank" rel="nofollow noopener noreferrer">Project Euler</A>&nbsp;or <A href="https://exercism.org/dashboard" target="_blank" rel="nofollow noopener noreferrer">Exercism</A> (to name just a couple) will know what we mean here!<BR />
<H2 id="toc-hId-960147436">A new badge!</H2><BR />
We decided to create a new SAP Community badge to award to the participants of this challenge. Fittingly, it reflects the "Pixel Person" theme that ran through the <A href="https://groups.community.sap.com/t5/coffee-corner/sap-community-code-challenge-learn-share-and-discuss/m-p/2959" target="_blank" rel="noopener noreferrer">discussion thread</A>. Everyone who participated will receive this badge. In fact, if you've not yet had the chance to participate, read on to the end for a special offer.<BR />
<P style="overflow: hidden;margin-bottom: 0px"><IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2022/03/screenshot-2022-03-16-at-08.57.40.png" height="174" width="174" /></P><BR />
<BR />
<H2 id="toc-hId-763633931">Challenge aspects</H2><BR />
The starter project, created for the challenge by <SPAN class="mention-scrubbed">thomas.jung</SPAN>, contained many technical components that came together to become a great little image editing app. It's still available of course, as a reference in the <A href="https://github.com/SAP-samples" target="_blank" rel="nofollow noopener noreferrer">SAP Samples</A> organisation on GitHub, in the <A href="https://github.com/SAP-samples/sap-community-code-challenge" target="_blank" rel="nofollow noopener noreferrer">sap-community-code-challenge repository</A>. In it, you'll find nuggets of information across these different technical areas:<BR />
<UL><BR />
 	<LI>Web app architecture: the project is a web app consisting of a frontend and a backend</LI><BR />
 	<LI>Node.js: the backend is a Node.js based mechanism, using Express to respond to incoming HTTP requests from the frontend, and serving those requests with JavaScript based responders</LI><BR />
 	<LI>Fiori: the frontend part of the app embraces the Fiori design language, and also shows you how to create and use a local Fiori launchpad with a tile to launch the app itself</LI><BR />
 	<LI>UI5: while Fiori is the UX, the UI is provided by UI5, and in particular, the app showcases the <A href="https://sapui5.hana.ondemand.com/#/entity/sap.suite.ui.commons.imageeditor/sample/sap.suite.ui.commons.sample.ImageEditorContainer" target="_blank" rel="nofollow noopener noreferrer">UI5 image editor</A> component</LI><BR />
 	<LI>The project also contains definitions for a container based runtime that can be used with Docker, and specifically within a <A href="https://code.visualstudio.com/docs/remote/containers" target="_blank" rel="nofollow noopener noreferrer">VS Code devcontainer scenario</A> (for more information on dev containers, you may like the three-part blog post series <A href="https://blogs.sap.com/2022/01/27/boosting-tutorial-ux-with-dev-containers-part-1-challenge-and-base-solution/" target="_blank" rel="noopener noreferrer">Boosting tutorial UX with dev containers</A>)</LI><BR />
</UL><BR />
<H2 id="toc-hId-567120426">Contributions</H2><BR />
There were some great contributions; here is a quick overview:<BR />
<BR />
<SPAN class="mention-scrubbed">nicolai.geburek</SPAN> added another image with which to enhance your profile picture, and also added a randomise feature.<BR />
<BR />
<SPAN class="mention-scrubbed">btc.nils.lutz</SPAN> contributed a whole load of feature and enhancements, not only bringing <A href="https://www.typescriptlang.org/" target="_blank" rel="nofollow noopener noreferrer">TypeScript</A> to the table (this is JavaScript with syntax for types) but also switching the package manager, bringing in a mechanism for code formatting, and much more.<BR />
<BR />
<SPAN class="mention-scrubbed">vinay.s6</SPAN> implemented the app using <A href="https://www.appgyver.com/" target="_blank" rel="nofollow noopener noreferrer">AppGyver</A> which was a fascinating angle, especially to see the function flow that he shared.<BR />
<BR />
<SPAN class="mention-scrubbed">daniel.wroblewski</SPAN> looked at translations and internationalisation (also known as i18n), and it was great to see Daniel use his native knowledge to add support for Hebrew, which is a right-to-left (RTL) language which of course is <A href="https://qmacro.org/2015/07/16/multi-language-support-out-of-the-box-ui5-s-pedigree/" target="_blank" rel="nofollow noopener noreferrer">supported out of the box with UI5</A>. He also added a chatbot feature!<BR />
<BR />
<SPAN class="mention-scrubbed">alexfrank</SPAN> added a feature to automatically import the existing profile picture based on the input of one's SAP Community name.<BR />
<BR />
<SPAN class="mention-scrubbed">huseyin.dereli</SPAN> added a feature which facilitates the import of one's GitHub profile picture, which nicely balances Alex's contribution.<BR />
<BR />
<SPAN class="mention-scrubbed">gabortoth05</SPAN> did some fascinating work to build his own control, inheriting from the UI5 image editor control, and added a new control to handle image layers. Not only that, he also added extra filters.<BR />
<BR />
Moreover, lots of folks, including <SPAN class="mention-scrubbed">craig.cmehil</SPAN>, <SPAN class="mention-scrubbed">jerry.janda</SPAN> and <SPAN class="mention-scrubbed">l_stodal</SPAN> got the project up and running and used it to enhance their profile picture. Just getting the project up and running is a great step forward, and all part of the learning experience.<BR />
<BR />
Everyone listed here will receive the badge, congratulations to everyone who took part!<BR />
<H2 id="toc-hId-370606921">What's next</H2><BR />
As a quick summary, here are the things to look out for next:<BR />
<UL><BR />
 	<LI>We'll be running more Code Challenges throughout this year, keep an eye out for announcements on SAP Community via the <A href="https://blogs.sap.com/?category%5B%5D=76120&amp;action=apply" target="_blank" rel="noopener noreferrer">Event Information category</A> or the <A href="https://blogs.sap.com/tag/coding-challenge/" target="_blank" rel="noopener noreferrer">coding challenge tag</A></LI><BR />
 	<LI>Each contributor will have the badge assigned to their SAP Community profile</LI><BR />
</UL><BR />
And if you didn't get round to participating in this challenge yet, but would like to earn the badge, there's still a chance. All you have to do is:<BR />
<UL><BR />
 	<LI>Get the project up and running</LI><BR />
 	<LI>Use it to make a nice enhanced profile image</LI><BR />
 	<LI>Upload that image to be your SAP Community profile picture</LI><BR />
 	<LI>Let us know you've done it in the <A href="https://groups.community.sap.com/t5/coffee-corner/sap-community-code-challenge-learn-share-and-discuss/m-p/2959" target="_blank" rel="noopener noreferrer">Community Groups discussion thread</A> (and don't forget to include your SAP Community profile URL when you do)</LI><BR />
</UL><BR />
This chance will remain open until the end of May this year.<BR />
<BR />
Have fun, and until next time!<BR />
<BR />
<SPAN class="mention-scrubbed">laura.schmitz</SPAN> and DJ.<BR />
<BR />
&nbsp;
---
Exploring service brokers and service consumption on SAP Business Technology Platform
technology-blog-sap
2022-03-08
https://community.sap.com/t5/technology-blogs-by-sap/exploring-service-brokers-and-service-consumption-on-sap-business/ba-p/13524313
2022-03-08-exploring-service-brokers-and-service-consumption-on-sap-business
<EM>In this post we look briefly at the Open Service Broker API, and how service brokers are used to facilitate access to services on runtimes on the SAP Business Technology Platform.</EM><BR />
<BR />
The advent of the SAP Service Manager (SM) brought about the ability to connect multiple platforms and multiple service brokers together on the SAP Business Technology Platform (SAP BTP). Services exposed by brokers on different platforms can be instantiated wherever you need them.<BR />
<BR />
To explore this a little bit, I thought I'd share an experiment, which doesn't use SM directly, but at least helps us think about service brokers, services, the Open Service Broker API (OSBAPI) and related topics. That way we are more prepared to understand SM and what it brings.<BR />
<H2 id="toc-hId-959337344">The experiment</H2><BR />
The experiment is to make a service available in a Cloud Foundry (CF) space on my SAP BTP trial account. That service is a PostgreSQL database, facilitated by the <A href="https://www.elephantsql.com/" target="_blank" rel="nofollow noopener noreferrer">ElephantSQL</A> PostgreSQL-as-a-Service offering, which has a free plan. The reason for choosing this service was because there's a lovely repository on GitHub, <A href="https://github.com/JamesClonk/elephantsql-broker" target="_blank" rel="nofollow noopener noreferrer">elephantsql-broker</A>, from <A href="https://jamesclonk.io/" target="_blank" rel="nofollow noopener noreferrer">James Clonk</A>, which makes this service available via the OSBAPI, which is the standard API for service brokers and SM.<BR />
<BR />
The <A href="https://github.com/JamesClonk/elephantsql-broker" target="_blank" rel="nofollow noopener noreferrer">elephantsql-broker</A> repository takes you through the steps of deploying the service broker to a CF space, and then registering it to that space. What I want to show you in this post is running the service broker in a container locally on your machine, making the API available to the outside world, and then registering it to a CF space.<BR />
<BR />
Briefly, here's what we're going to do:<BR />
<OL><BR />
 	<LI>clone the repository locally</LI><BR />
 	<LI>get an API key for the service</LI><BR />
 	<LI>build the Docker image with the service broker</LI><BR />
 	<LI>test an instance of the image (a container)</LI><BR />
 	<LI>start a new instance of the image, supplying the API key and other info</LI><BR />
 	<LI>expose the port, that the service broker is listening on, to the outside world</LI><BR />
 	<LI>register that service broker in a CF space</LI><BR />
 	<LI>view the service offering available, with the plans available</LI><BR />
 	<LI>create a service with a specific plan</LI><BR />
 	<LI>create a service key for that service instance</LI><BR />
 	<LI>clean up afterwards</LI><BR />
</OL><BR />
Of course, all the time, we'll be making observations as to what's going on.<BR />
<H2 id="toc-hId-762823839">A note on PostgreSQL availability</H2><BR />
SAP BTP offers a hyperscaler option based PostgreSQL service, which you should definitely consider for non-experimental requirements. It provides a way to directly consume the PostgreSQL service provided by infrastructure providers.<BR />
<P style="overflow: hidden;margin-bottom: 0px"><IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2022/03/screenshot-2022-03-08-at-12.47.03.png" /></P><BR />
The whole point of this particular exploration, however, is to understand how services can be used across platforms and environments, and how you can make your own services available to your apps on SAP BTP, via the OSBAPI. And as a side effect of this, you gain a better understanding of the context in which SM operates.<BR />
<H2 id="toc-hId-566310334">The repository</H2><BR />
All the detailed instructions you need are in this fork of the original elephantsql-broker repository, in a new branch called "docker":<BR />
<BR />
<A href="https://github.com/qmacro/elephantsql-broker/tree/docker" target="_blank" rel="nofollow noopener noreferrer">https://github.com/qmacro/elephantsql-broker/tree/docker</A><BR />
<H2 id="toc-hId-369796829">The assumptions and prerequisites</H2><BR />
This is all done on my local machine, which runs macOS natively, but on which I've also installed <A href="https://docs.docker.com/desktop/" target="_blank" rel="nofollow noopener noreferrer">Docker Desktop</A>. You are of course free to use an alternative container engine (such as <A href="https://podman.io/" target="_blank" rel="nofollow noopener noreferrer">Podman</A>) if that works better for you. You are on your own in terms of using Podman though - I have no experience there!<BR />
<BR />
You'll also need access to a subaccount on SAP BTP - you may find this tutorial helpful: <A href="https://developers.sap.com/tutorials/btp-cockpit-setup.html" target="_blank" rel="noopener noreferrer">Get an SAP BTP Account for Tutorials</A>. I'll be using my trial subaccount.<BR />
<BR />
You'll need the <A href="https://docs.cloudfoundry.org/cf-cli/install-go-cli.html" target="_blank" rel="nofollow noopener noreferrer">cf command line client</A>. I have recently moved from version 6 to version 7 recently; I only mention this because my sample output in this post will be mostly from cf version 7, where the options for 'cf marketplace' are different.<BR />
<BR />
You'll also need <A href="https://ngrok.com/" target="_blank" rel="nofollow noopener noreferrer">ngrok</A> to make a service available to the outside world (this is an amazingly useful piece of software for experimentation, learning and development in general).<BR />
<BR />
Finally, you'll probably want to have <A href="https://curl.se/" target="_blank" rel="nofollow noopener noreferrer">curl</A> installed too. But who doesn't already have that? <span class="lia-unicode-emoji" title=":slightly_smiling_face:">ð</span><BR />
<BR />
Even if you don't want to follow along yourself, you may enjoy reading through the steps anyway, to get a better understanding. I'll try to explain what's going on along the way.<BR />
<H2 id="toc-hId-173283324">The steps</H2><BR />
OK, it's time to get down to it. A lot of the detailed instructions are in the repository, so where appropriate, I'll point you to the right places there. I'm going to use my <CODE>/tmp/</CODE> directory as the working directory into which I'll clone the repository.<BR />
<H3 id="toc-hId-105852538">Clone the repository</H3><BR />
With the following command, clone the repository:<BR />
<PRE><CODE>git clone <A href="https://github.com/qmacro/elephantsql-broker.git" target="test_blank" rel="nofollow noopener noreferrer">https://github.com/qmacro/elephantsql-broker.git</A></CODE></PRE><BR />
The output should look something like this<BR />
<PRE><CODE>Cloning into 'elephantsql-broker'...<BR />
remote: Enumerating objects: 564, done.<BR />
remote: Counting objects: 100% (7/7), done.<BR />
remote: Compressing objects: 100% (7/7), done.<BR />
remote: Total 564 (delta 0), reused 3 (delta 0), pack-reused 557<BR />
Receiving objects: 100% (564/564), 6.31 MiB | 10.50 MiB/s, done.<BR />
Resolving deltas: 100% (221/221), done.</CODE></PRE><BR />
Once inside the cloned repository (with <CODE>cd elephantsql-broker/</CODE>), you should then check out what branches are available remotely:<BR />
<PRE><CODE>git branch -rv</CODE></PRE><BR />
This should show information similar to this:<BR />
<PRE><CODE>origin/HEAD -&gt; origin/master<BR />
origin/docker c50c145 add info on how to run broker in a container<BR />
origin/master 9cfc107 refactor makefile<BR />
origin/recordings ed2e832 add animated recordings</CODE></PRE><BR />
It's the <CODE>docker</CODE> branch where I've added instructions for this, so check that branch out:<BR />
<PRE><CODE>git checkout docker</CODE></PRE><BR />
and you should see something like this:<BR />
<PRE><CODE>Branch 'docker' set up to track remote branch 'docker' from 'origin'.<BR />
Switched to a new branch 'docker'</CODE></PRE><BR />
Now you have the <A href="https://github.com/qmacro/elephantsql-broker/blob/docker/Dockerfile" target="_blank" rel="nofollow noopener noreferrer">Dockerfile</A> which you'll need, shortly, as well as a local copy of the <A href="https://github.com/qmacro/elephantsql-broker/blob/docker/docker.md" target="_blank" rel="nofollow noopener noreferrer">instructions</A>.<BR />
<H3 id="toc-hId--90660967">Get an API key</H3><BR />
Now it's time to register for the PostgreSQL platform service and <A href="https://customer.elephantsql.com/apikeys" target="_blank" rel="nofollow noopener noreferrer">get a free API key</A>. The link is provided in the main README, in the <A href="https://github.com/qmacro/elephantsql-broker/blob/docker/README.md#deploy-service-broker-to-cloud-foundry" target="_blank" rel="nofollow noopener noreferrer">Deploy service broker to Cloud Foundry</A> section (but don't worry, you're not going to deploy the service broker to CF,&nbsp; you're going to run it in a container).<BR />
<BR />
<EM>As a quick reminder - be a good net citizen and don't abuse the free tier of this service, or any service for that matter. I've just used it briefly to instantiate then remove a database for this experiment.</EM><BR />
<BR />
Here's what my API key looks like (it starts <CODE>e15dad</CODE>), in the API Access area of my settings:<BR />
<P style="overflow: hidden;margin-bottom: 0px"><IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2022/03/screenshot-2022-03-08-at-13.05.43.png" /></P><BR />
<BR />
<H3 id="toc-hId--287174472">Build the Docker image</H3><BR />
Next we can build the Docker image, which contains the service broker for ElephantSQL, written in Go. The <A href="https://github.com/qmacro/elephantsql-broker/blob/docker/Dockerfile" target="_blank" rel="nofollow noopener noreferrer">Dockerfile</A> is based on the simple example from the <A href="https://hub.docker.com/_/golang" target="_blank" rel="nofollow noopener noreferrer">Golang official image in Docker Hub</A>, and looks like this:<BR />
<PRE><CODE>FROM golang:1.17<BR />
<BR />
WORKDIR /usr/src/app<BR />
<BR />
COPY go.mod go.sum ./<BR />
RUN go mod download &amp;&amp; go mod verify<BR />
<BR />
COPY . .<BR />
RUN go build -v -o /usr/local/bin/ ./...<BR />
<BR />
ENV TZ="Europe/London"<BR />
ENV BROKER_USERNAME="((username))"<BR />
ENV BROKER_PASSWORD="((password))"<BR />
ENV BROKER_API_URL="https://customer.elephantsql.com/api"<BR />
ENV BROKER_API_KEY="((api_key))"<BR />
ENV BROKER_API_DEFAULT_REGION="google-compute-engine::europe-west2"<BR />
<BR />
CMD ["elephantsql-broker"]<BR />
</CODE></PRE><BR />
The detail for this step can be found in the <A href="https://github.com/qmacro/elephantsql-broker/blob/docker/docker.md#build-the-image" target="_blank" rel="nofollow noopener noreferrer">Build the image</A> section of the repository, but is essentially this:<BR />
<PRE><CODE>docker build -t elephantsql-broker .</CODE></PRE><BR />
The image created will, when instantiated (i.e. when a container is created from it), will execute the broker, which will begin listening for incoming OSBAPI calls on port 8080 by default.<BR />
<H3 id="toc-hId--483687977">Start a test container</H3><BR />
Let's just kick the tyres at this stage. The service broker has a simple health check API endpoint, which we can call to see if things are generally OK. Let's start a container up, taking "<A href="http://c2.com/xp/DoTheSimplestThingThatCouldPossiblyWork.html" target="_blank" rel="nofollow noopener noreferrer">the simplest thing that could possibly work</A>" approach:<BR />
<PRE><CODE>docker run --rm --detach --name broker elephantsql-broker</CODE></PRE><BR />
As output, we get a long GUID like this:<BR />
<PRE><CODE>67f36459a6a4290ad76165a6c78154ceb4df3663260f09d8c36c9b09f0ed5bcd</CODE></PRE><BR />
and are returned to the prompt. This is because we used the <CODE>--detach</CODE> option to get the container to execute in the background. In case you're wondering, the <CODE>--rm</CODE> option tells Docker to remove the container once it is stopped, to keep things clean, and the <CODE>--name</CODE> option lets us choose a name for the container.<BR />
<BR />
There's nothing much to see, but we can do a couple of things. One is to check the logs, like this:<BR />
<PRE><CODE>docker logs broker</CODE></PRE><BR />
We see something like this:<BR />
<PRE><CODE>level=info msg="port: 8080"<BR />
level=info msg="log level: info"<BR />
level=info msg="broker username: ((username))"<BR />
level=info msg="api url: https://customer.elephantsql.com/api"<BR />
level=info msg="api default region: google-compute-engine::europe-west2"</CODE></PRE><BR />
So something is happening! Let's try to access the health check API endpoint. But - what hostname do we use? Is it <CODE>localhost</CODE>? Well, where we are right now, on my laptop's macOS operating system level, let's try it:<BR />
<PRE><CODE>curl localhost:8080/health</CODE></PRE><BR />
But this returns a message like this:<BR />
<PRE><CODE>curl: (7) Failed to connect to localhost port 8080: Connection refused</CODE></PRE><BR />
That's because the broker is listening to port 8080 but only inside the container. Let's jump into the container and try it there. First, we can jump in by starting a Bash shell in the container:<BR />
<PRE><CODE>docker exec -it broker bash</CODE></PRE><BR />
We're placed in a shell, inside the container (we can sort of tell we're in the container because (a) we're suddenly the <CODE>root</CODE> user and (b) the hostname is a generated ID):<BR />
<PRE><CODE>root@6c53fdeb3134:/usr/src/app#</CODE></PRE><BR />
Now if we run that same <CODE>curl</CODE> invocation here (yes, <CODE>curl</CODE> is everywhere!), we get a result:<BR />
<PRE><CODE>{<BR />
  "status": "ok"<BR />
}</CODE></PRE><BR />
That's good. Let's exit the shell (with <CODE>exit</CODE> or Ctrl-D) and then stop the container (and it will be automatically cleaned up because of the <CODE>--rm</CODE> earlier):<BR />
<PRE><CODE>docker stop broker</CODE></PRE><BR />
<H3 id="toc-hId--680201482">Start a new container with the requisite settings</H3><BR />
Now that we know things look reasonable, let's start up a new container, supplying what we need:<BR />
<PRE><CODE>docker run \<BR />
  --rm \<BR />
  --detach \<BR />
  --publish 8080:8080 \<BR />
  --env BROKER_USERNAME=brokerusername \<BR />
  --env BROKER_PASSWORD=brokerpassword \<BR />
  --env BROKER_API_KEY=your-api-key \<BR />
  elephantsql-broker</CODE></PRE><BR />
This is detailed in the <A href="https://github.com/qmacro/elephantsql-broker/blob/docker/docker.md#create-a-container-from-the-image" target="_blank" rel="nofollow noopener noreferrer">Create a container from the image</A> section of the repository.<BR />
<BR />
The publishing of port 8080 outside the container to the host OS (with the <CODE>--publish</CODE> option) means we can check the health from the macOS level now; running this in my local shell:<BR />
<PRE><CODE>curl localhost:8080/health</CODE></PRE><BR />
now returns:<BR />
<PRE><CODE>{<BR />
  "status": "ok"<BR />
}</CODE></PRE><BR />
What's more, we've supplied the authentication details that will be needed to register and make OSBAPI calls to the broker from my CF space on SAP BTP, and also the API key for the ElephantSQL service.<BR />
<H3 id="toc-hId--951946356">Make the broker available to the outside world</H3><BR />
We first could only access the broker when inside the container it was running in. Now we can access the broker from the host where the Docker engine is running (i.e. my laptop). But we need the broker available for access from my CF space on SAP BTP.<BR />
<BR />
Let's use the excellent <CODE>ngrok</CODE> to do this; it's covered in detail in the <A href="https://github.com/qmacro/elephantsql-broker/blob/docker/docker.md#make-the-service-broker-available-beyond-your-local-machine" target="_blank" rel="nofollow noopener noreferrer">Make the service broker available beyond your local machine</A> section of the repository, but briefly involves telling <CODE>ngrok</CODE> to create a secure tunnel that will carry traffic to port 8080 on the local host. Note that with great power comes with great responsibility; take care to use <CODE>ngrok</CODE> sensibly here.<BR />
<BR />
Invoking this:<BR />
<PRE><CODE>ngrok http 8080</CODE></PRE><BR />
will result in that tunnel being created, giving both HTTP and HTTPS forwarding URLs, as shown in this example monitor display:<BR />
<PRE><CODE>ngrok by @inconshreveable<BR />
<BR />
Session Status online<BR />
Session Expires 1 hour, 59 minutes<BR />
Version 2.3.40<BR />
Region United States (us)<BR />
Web Interface <A href="http://127.0.0.1:4040" target="test_blank" rel="nofollow noopener noreferrer">http://127.0.0.1:4040</A><BR />
Forwarding <A href="http://0c01-86-150-217-67.ngrok.io" target="test_blank" rel="nofollow noopener noreferrer">http://0c01-86-150-217-67.ngrok.io</A> -&gt; <A href="http://localhost:8080" target="test_blank" rel="nofollow noopener noreferrer">http://localhost:8080</A><BR />
Forwarding <A href="https://0c01-86-150-217-67.ngrok.io" target="test_blank" rel="nofollow noopener noreferrer">https://0c01-86-150-217-67.ngrok.io</A> -&gt; <A href="http://localhost:8080" target="test_blank" rel="nofollow noopener noreferrer">http://localhost:8080</A><BR />
<BR />
Connections ttl opn rt1 rt5 p50 p90<BR />
0 0 0.00 0.00 0.00 0.00</CODE></PRE><BR />
This means that the broker is now also available (protected with the username and password specified earlier) at <CODE><A href="https://0c01-86-150-217-67.ngrok.io" target="test_blank" rel="nofollow noopener noreferrer">https://0c01-86-150-217-67.ngrok.io</A></CODE>, which is also accessible from CF on SAP BTP.<BR />
<H3 id="toc-hId--1148459861">Register the service broker in CF</H3><BR />
The trial and free tier accounts on SAP BTP give us access to different runtimes, including Kyma / Kubernetes and Cloud Foundry. Both of these platforms have a concept of a service catalogue, or marketplace, where developers can check to see what services and plans are available for consumption.<BR />
<BR />
As guests on any given Cloud Foundry environment instance on SAP BTP, we don't have full administrative access to the entire environment, but we do have access at organisational and space level. In this context, it's possible for us as individuals to manage service brokers at the space level.<BR />
<BR />
If you enter <CODE>cf help</CODE> in a shell, you get a summary of the different commands, grouped into different areas. For example, there's the "Space management" area with the <CODE>create-space</CODE>, <CODE>set-space-role</CODE> and other commands, and there's the "Application lifecycle" area with <CODE>apps</CODE>, <CODE>push</CODE>, <CODE>logs</CODE>, <CODE>restart</CODE> and so on.<BR />
<BR />
But if you enter <CODE>cf help -a</CODE> you get a whole boatload more, including this group of commands:<BR />
<PRE><CODE>SERVICE ADMIN:<BR />
service-auth-tokens List service auth tokens<BR />
create-service-auth-token Create a service auth token<BR />
update-service-auth-token Update a service auth token<BR />
delete-service-auth-token Delete a service auth token<BR />
<BR />
service-brokers List service brokers<BR />
create-service-broker Create a service broker<BR />
update-service-broker Update a service broker<BR />
delete-service-broker Delete a service broker<BR />
rename-service-broker Rename a service broker<BR />
<BR />
migrate-service-instances Migrate service instances from one service plan to another<BR />
purge-service-offering Recursively remove a service and child objects from Cloud Foundry database without making requests to a service broker<BR />
purge-service-instance Recursively remove a service instance and child objects from Cloud Foundry database without making requests to a service broker<BR />
<BR />
service-access List service access settings<BR />
enable-service-access Enable access to a service or service plan for one or all orgs<BR />
disable-service-access Disable access to a service or service plan for one or all orgs</CODE></PRE><BR />
Gosh!<BR />
<BR />
We'll now explore just a subset of those commands, relating to service brokers.<BR />
<BR />
What do we need to do to register our new broker? Let's have a look, with <CODE>cf create-service-broker --help</CODE>, which shows us this:<BR />
<PRE><CODE>NAME:<BR />
create-service-broker - Create a service broker<BR />
<BR />
USAGE:<BR />
cf create-service-broker SERVICE_BROKER USERNAME PASSWORD URL [--space-scoped]<BR />
<BR />
ALIAS:<BR />
csb<BR />
<BR />
OPTIONS:<BR />
--space-scoped Make the broker's service plans only visible within the targeted space<BR />
<BR />
SEE ALSO:<BR />
enable-service-access, service-brokers, target</CODE></PRE><BR />
Because we don't have administrative access to the entire CF environment instance, we'll need to use the <CODE>--space-scoped</CODE> option. But that's OK, this is just an experiment to understand the different pieces. Let's try:<BR />
<PRE><CODE>cf create-service-broker \<BR />
  elephantsql \<BR />
  brokerusername \<BR />
  brokerpassword \<BR />
  <A href="https://0c01-86-150-217-67.ngrok.io" target="test_blank" rel="nofollow noopener noreferrer">https://0c01-86-150-217-67.ngrok.io</A> \<BR />
  --space-scoped</CODE></PRE><BR />
This results in the following message:<BR />
<PRE><CODE>Creating service broker elephantsql in org 1cbb5e7etrial / space dev ...<BR />
OK</CODE></PRE><BR />
Moreover, we can now see the broker in the list, using <CODE>cf service-brokers</CODE>:<BR />
<PRE><CODE>Getting service brokers ...<BR />
<BR />
name        url<BR />
elephantsql <A href="https://0c01-86-150-217-67.ngrok.io" target="test_blank" rel="nofollow noopener noreferrer">https://0c01-86-150-217-67.ngrok.io</A><BR />
</CODE></PRE><BR />
But wait, there's more to see! In the <CODE>ngrok</CODE> monitor, each request is listed, and we see one (it's the first one) suddenly appear, and it looks like this:<BR />
<PRE><CODE>GET /v2/catalog</CODE></PRE><BR />
What's that? Well, if we look at the <A href="https://github.com/openservicebrokerapi/servicebroker" target="_blank" rel="nofollow noopener noreferrer">Open Service Broker API reference</A>, we see in the <A href="https://github.com/openservicebrokerapi/servicebroker/blob/master/spec.md" target="_blank" rel="nofollow noopener noreferrer">specification</A>, specifically in the <A href="https://github.com/openservicebrokerapi/servicebroker/blob/master/spec.md#catalog-management" target="_blank" rel="nofollow noopener noreferrer">Catalog Management</A> section, that:<BR />
<BR />
<EM>"The first endpoint that a Platform will interact with on the Service Broker is the service catalog (<CODE>/v2/catalog</CODE>). This endpoint returns a list of all services available on the Service Broker. Platforms query this endpoint from all Service Brokers in order to present an aggregated user-facing catalog."&nbsp;</EM><BR />
<BR />
So the process of registering the broker caused a request for the catalog to be made - makes sense!<BR />
<BR />
We can make our own call of course, to see what's returned, like this:<BR />
<PRE><CODE>curl <A href="http://brokerusername:brokerpassword@localhost:8080/v2/catalog" target="test_blank" rel="nofollow noopener noreferrer">http://brokerusername:brokerpassword@localhost:8080/v2/catalog</A></CODE></PRE><BR />
It's a JSON object describing the service and plans available. If you're interested in where this comes from, take a look at the <A href="https://github.com/qmacro/elephantsql-broker/blob/docker/catalog.yml" target="_blank" rel="nofollow noopener noreferrer">catalog.yml</A> file in the repository.<BR />
<BR />
Let's continue with the consumption, and keep an eye on the OSBAPI calls made to the broker.<BR />
<H3 id="toc-hId--1344973366">View the service offerings available</H3><BR />
Many of us are already famililar with the <CODE>cf marketplace</CODE> command. This provides a list of available service offerings. Running it in my trial subaccount CF space returns a lot of information! There are many, many services available to me, each with their own plans, and surfaced through various brokers. Here's a list, where I've removed the "description" column to save space.<BR />
<BR />
Let's stare at it for a minute:<BR />
<P style="overflow: hidden;margin-bottom: 0px"><IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2022/03/screenshot-2022-03-08-at-17.29.25.png" /></P><BR />
What do we see? Well, there are a myriad services each with different plans. For example, the "hana-cloud-trial" service has three plans available: "hana", "relational-data-lake" and "hana-cloud-connection".<BR />
<BR />
But what we also see is that each service is provided by a broker, shown in the rightmost column. All but one of these brokers follow a similar naming convention:<BR />
<PRE><CODE>sm-&lt;broker-name&gt;-&lt;guid&gt;</CODE></PRE><BR />
For example, the "hana-cloud-trial" service offering is made available by this service broker:<BR />
<PRE><CODE>sm-hana-cloud-trial-1ce8c293-a0f4-40b1-a52e-a70f7ac4a749</CODE></PRE><BR />
Can you guess what the <CODE>sm-</CODE> prefix represents? These are all service brokers managed by, effectively proxied by, the SAP Service Manager.<BR />
<BR />
But take a look at the last entry in the list - it's our "elephantsql" service, with the three service plans "turtle", "spider" and "cat" that we have in the <A href="https://github.com/qmacro/elephantsql-broker/blob/docker/catalog.yml" target="_blank" rel="nofollow noopener noreferrer">catalog.yml</A> file. And through what mechanism is it available to us? Via our very own <CODE>elephantsql</CODE> service broker that we've registered to this CF space just now. In fact, the detail in this output to <CODE>cf marketplace</CODE> was gathered in the previous step, in the HTTP GET request to <CODE>/v2/catalog</CODE>.<BR />
<BR />
Note that when we called <CODE>cf marketplace</CODE>, the <CODE>ngrok</CODE> monitor showed no further request. So this catalog information is cached.<BR />
<BR />
Before we move on, let's explore the <CODE>-e</CODE> option of <CODE>cf marketplace</CODE>, which lets us see the plan details for a particular service offering:<BR />
<PRE><CODE>cf marketplace -e elephantsql</CODE></PRE><BR />
This produces a nicely formatted table like this:<BR />
<PRE><CODE>Getting service plan information for service offering elephantsql in org 1cbb5e7etrial / space dev ...<BR />
<BR />
broker: elephantsql<BR />
plan    description                          free or paid  costs              available<BR />
turtle  Tiny Turtle - shared instance (free) free          USD 0.00/Monthly   yes<BR />
spider  Simple Spider - shared instance      paid          USD 5.00/Monthly   yes<BR />
cat     Crazy Cat - shared instance          paid          USD 10.00/Monthly  yes<BR />
</CODE></PRE><BR />
<H3 id="toc-hId--1541486871">Create a service instance</H3><BR />
Let's create an instance of our "elephantsql" service. The "turtle" plan is free, so let's go for that. All we're going to do is create a PostgreSQL database instance, and then destroy it, anyway.<BR />
<BR />
We've surfaced our service availability to the <CODE>cf</CODE> level, so we can use normal <CODE>cf</CODE> commands to create a service instance here. The <CODE>create-service</CODE> command requires three parameters: the name of the service, the name of the plan, and what to call the service instance once created. As usual, I'll follow my basic pattern of naming the service instance based on a combination of the service and plan name:<BR />
<PRE><CODE>cf create-service elephantsql turtle elephantsql-turtle</CODE></PRE><BR />
And lo, an instance is created!<BR />
<PRE><CODE>Creating service instance elephantsql-turtle in org 1cbb5e7etrial / space dev ...<BR />
OK</CODE></PRE><BR />
But what's happened behind the scenes?<BR />
<BR />
Well first of all, the <CODE>ngrok</CODE> monitor tells us that another call was made to the service broker:<BR />
<PRE><CODE>PUT /v2/service_instances/fac57b37-f51e-499c-8aae-cf18fa105806</CODE></PRE><BR />
This is another OSBAPI call, this time a <A href="https://github.com/openservicebrokerapi/servicebroker/blob/master/spec.md#provisioning" target="_blank" rel="nofollow noopener noreferrer">provisioning</A> call to request the creation of an instance of whatever service the broker is making available.<BR />
<BR />
Moreover, we can see the result of the instance creation request - we can see the instance in the ElephantSQL console:<BR />
<P style="overflow: hidden;margin-bottom: 0px"><IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2022/03/screenshot-2022-03-08-at-17.49.36.png" /></P><BR />
<BR />
<H3 id="toc-hId--1738000376">Create a service key</H3><BR />
Let's go one stage further and create a service key. As we know, this is information that can be bound to an app to supply credentials that are required to operate or interact with the specific service instance.<BR />
<BR />
With the <CODE>cf create-service-key</CODE> command, we can do this, and it gives us what we want:<BR />
<PRE><CODE>cf create-service-key elephantsql-turtle elephantsql-turtle-sk</CODE></PRE><BR />
This gives us a service key:<BR />
<PRE><CODE>Creating service key elephantsql-turtle-sk for service instance elephantsql-turtle ...<BR />
OK<BR />
</CODE></PRE><BR />
And guess what? This meant another OSBAPI call made from CF to the service broker; this time to <A href="https://github.com/openservicebrokerapi/servicebroker/blob/master/spec.md#request-creating-a-service-binding" target="_blank" rel="nofollow noopener noreferrer">create a service binding</A>:<BR />
<PRE><CODE>PUT /v2/service_instances/fac57b37-f51e-499c-8aae-cf18fa105806/service_bindings/4b96c749-6fa2-43ae-a089-db8df149eaf9</CODE></PRE><BR />
We can ask for the contents of the service key with<BR />
<PRE><CODE>cf service-key elephantsql-turtle elephantsql-turtle-sk</CODE></PRE><BR />
This gives us the content in JSON format:<BR />
<PRE><CODE>{<BR />
  "apikey": "ed0808bb-2cf6-4219-bfb0-9024...",<BR />
  "database": "qezrugwo",<BR />
  "database_uri": "postgres://qezrugwo:UTGenw...@rogue.db.elephantsql.com/qezrugwo",<BR />
  "host": "rogue.db.elephantsql.com",<BR />
  "hostname": "",<BR />
  "password": "UTGenw...",<BR />
  "port": 0,<BR />
  "scheme": "postgres",<BR />
  "uri": "postgres://qezrugwo:UTGenw...@rogue.db.elephantsql.com/qezrugwo",<BR />
  "url": "postgres://qezrugwo:UTGenw...@rogue.db.elephantsql.com/qezrugwo",<BR />
  "username": "qezrugwo"<BR />
}</CODE></PRE><BR />
This information ties up with what we see in the console too.<BR />
<H3 id="toc-hId--1934513881">Delete the service key and instance</H3><BR />
We're almost at the end of our journey of exploration. Let's clean up, and also observe what happens when we do.<BR />
<BR />
First, we need to remove the service key:<BR />
<PRE><CODE>cf delete-service-key elephantsql-turtle elephantsql-turtle-sk</CODE></PRE><BR />
After prompting, this does what we ask:<BR />
<PRE><CODE>Really delete the service key elephantsql-turtle-sk?&gt; y<BR />
Deleting key elephantsql-turtle-sk for service instance elephantsql-turtle ...<BR />
OK</CODE></PRE><BR />
And as we can now guess, this operation is achieved with yet another OSBAPI call to the service broker, as evidenced in the <CODE>ngrok</CODE> monitor:<BR />
<PRE><CODE>DELETE /v2/service_instances/fac57b37-f51e-499c-8aae-cf18fa105806/service_bindings/4b96c749-6fa2-43ae-a089-db8df149eaf9</CODE></PRE><BR />
Finally, let's delete the service instance itself:<BR />
<PRE><CODE>cf delete-service elephantsql-turtle</CODE></PRE><BR />
Again, the prompt and then the confirmation:<BR />
<PRE><CODE>Really delete the service elephantsql-turtle?&gt; y<BR />
Deleting service elephantsql-turtle in org 1cbb5e7etrial / space dev ...<BR />
OK</CODE></PRE><BR />
And as we can again guess, the beauty and balance of the use of the OSBAPI is shown again in the <CODE>ngrok</CODE> monitor:<BR />
<PRE><CODE>DELETE /v2/service_instances/fac57b37-f51e-499c-8aae-cf18fa105806</CODE></PRE><BR />
(Observe the whole time here that the OSBAPI design respects HTTP as a protocol and uses the methods appropriately; GET to request, PUT to create, DELETE to remove, and so on).<BR />
<H2 id="toc-hId--1837624379">Wrapping up</H2><BR />
This has been a long post, longer than I expected, but I hope it's been a helpful story, an exploratory journey, that's helped you understand some of the fascinating jigsaw puzzle pieces that is multi-cloud, multi-environment and the SAP Business Technology Platform in general.<BR />
<BR />
We've glimpsed how services are made available, got a feel for what service brokers are and how they fit in, and seen first hand some of the Open Service Broker API calls being made in response to regular <CODE>cf</CODE> requests to manage service instances and keys.<BR />
<BR />
I want to leave you with one question to ponder. With so many services available, and running in different places, on different platforms and environments, how do we make these services available to as many apps, on as many platforms as possible, without creating a tangled mess of multiple connections running between each platform and service broker?<BR />
<BR />
Here's a clue to the answer: it might be SAP Service Manager <span class="lia-unicode-emoji" title=":slightly_smiling_face:">ð</span><BR />
<BR />
<HR /><BR />
<BR />
A quick note for my SAP colleagues: The page <A href="https://github.com/qmacro/elephantsql-broker/blob/docker/docker.md" target="_blank" rel="nofollow noopener noreferrer">Running the broker in a Docker container</A>&nbsp;and the corresponding <A href="https://github.com/qmacro/elephantsql-broker/blob/docker/Dockerfile" target="_blank" rel="nofollow noopener noreferrer">Dockerfile</A> were added to a new branch (<A href="https://github.com/qmacro/elephantsql-broker/tree/docker" target="_blank" rel="nofollow noopener noreferrer">docker</A>) of a fork of the original upstream <A href="https://github.com/JamesClonk/elephantsql-broker" target="_blank" rel="nofollow noopener noreferrer">elephantsql-broker repository</A>, in the context of a spare time open source contribution. If you're interested in open source, spare time contributions or third party contributions, and how I went about this one, drop me a line.
---
SAP Tech Bytes: btp CLI - new home for configuration
technology-blog-sap
2022-02-17
https://community.sap.com/t5/technology-blogs-by-sap/sap-tech-bytes-btp-cli-new-home-for-configuration/ba-p/13533660
2022-02-17-sap-tech-bytes-btp-cli-new-home-for-configuration
<EM>Be informed about updates to where the btp CLI configuration is stored by default.</EM><BR />
<BR />
This post relates directly to the <A href="https://blogs.sap.com/2021/09/14/sap-tech-bytes-btp-cli-managing-configuration/" target="_blank" rel="noopener noreferrer">SAP Tech Bytes: btp CLI â managing configuration</A> post, and provides a brief update to the information in there.<BR />
<H2 id="toc-hId-960234109">Latest version</H2><BR />
Since that post, the btp CLI has gone through a number of updates. One of these updates has been to where configuration is stored (and looked for) by default. This is independent of your runtime environment; while the previous post showed an example in the SAP Business Application Studio (App Studio), this update applies to all contexts where you run the latest version of the btp CLI.<BR />
<BR />
At the time of writing, according to the information in the <A href="https://tools.hana.ondemand.com/#cloud" target="_blank" rel="nofollow noopener noreferrer">canonical home for the btp CLI</A>, the latest version of the btp CLI is 2.14.0:<BR />
<P style="overflow: hidden;margin-bottom: 0px"><IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2022/02/screenshot-2022-02-17-at-11.38.37.png" /></P><BR />
This is also what the <CODE>getbtpcli</CODE> script reports (see <A href="https://blogs.sap.com/2021/09/01/sap-tech-bytes-btp-cli-installation/" target="_blank" rel="noopener noreferrer">SAP Tech Bytes: btp CLI - installation</A> for more on this utility):<BR />
<PRE class="language-perl"><CODE>; getbtpcli --test<BR />
Version is 2.14.0</CODE></PRE><BR />
<H2 id="toc-hId-763720604">New location</H2><BR />
The main btp CLI configuration is stored in a file called <CODE>config.json</CODE>. There are sometimes other files that contain configuration too, and these, along with <CODE>config.json</CODE>, are stored by default in a directory called <CODE>.btp/</CODE>.<BR />
<BR />
In the past, the default location for this <CODE>.btp/</CODE> directory was in a <CODE>.cache/</CODE> directory in your home directory. So for me, while working in my local dev container, would have been, <EM>previously</EM>:<BR />
<PRE class="language-abap"><CODE># /home/user<BR />
; tree .cache/.btp<BR />
.cache/.btp<BR />
|-- autocomplete<BR />
|   `-- scripts<BR />
|       `-- sapbtpcli-autocomplete.plugin.sh<BR />
`-- config.json<BR />
</CODE></PRE><BR />
(here you can see examples of other files alongside <CODE>config.json</CODE>).<BR />
<BR />
There is now a new default location.<BR />
<BR />
Instead of <CODE>.cache/</CODE>, the default location for <CODE>.btp/</CODE> is now&nbsp; <CODE>.config/</CODE>. So now it looks like this:<BR />
<PRE class="language-abap"><CODE># /home/user<BR />
; tree .config/.btp<BR />
.config/.btp<BR />
|-- autocomplete<BR />
|   `-- scripts<BR />
|       `-- sapbtpcli-autocomplete.plugin.sh<BR />
`-- config.json<BR />
</CODE></PRE><BR />
This is a great move because it aligns with the <A href="https://specifications.freedesktop.org/basedir-spec.latest.html" target="_blank" rel="nofollow noopener noreferrer">XDG Base Directory Specification</A> which I mentioned in the <A href="https://blogs.sap.com/2021/09/14/sap-tech-bytes-btp-cli-managing-configuration/" target="_blank" rel="noopener noreferrer">previous post</A>.<BR />
<H2 id="toc-hId-567207099">New environment variable</H2><BR />
Not only has the default location changed from <CODE>.cache/</CODE> to <CODE>.config/</CODE>, but also the environment variable that you can set to tell the btp CLI where your configuration is, has changed too.<BR />
<BR />
Previous it was <CODE>SAPCP_CLIENTCONFIG</CODE>. This reflected the name of the btp CLI at the time (<CODE>sapcp</CODE>).<BR />
<BR />
It is now <CODE>BTP_CLIENTCONFIG</CODE>, which reflects the current name of the btp CLI of course.<BR />
<H2 id="toc-hId-370693594">My configuration location</H2><BR />
As I mentioned in the <A href="https://blogs.sap.com/2021/09/14/sap-tech-bytes-btp-cli-managing-configuration/" target="_blank" rel="noopener noreferrer">SAP Tech Bytes: btp CLI - managing configuration</A> post, I like to organise my configuration directories within my <CODE>XDG_CONFIG_HOME</CODE> location (i.e. <CODE>$HOME/.config/</CODE>) according to the name of the tool or utility, but as normal directories, rather than hidden ones (the period at the start of the <CODE>.btp/</CODE> directory name means that it is to be treated as a hidden directory).<BR />
<BR />
This is what the contents of my <CODE>$HOME/.config/</CODE> directory looks like:<BR />
<PRE class="language-abap"><CODE>; ls .config<BR />
./ btp/ g/ htop/ procps/ tmuxinator/<BR />
../ configstore/ gcloud/ kitty/ ranger/ vim/<BR />
asciinema/ docker/ gh/ lf/ so/ weechat/<BR />
autocomplete/ exercism/ gitui/ newsboat/ stack/ yamllint/</CODE></PRE><BR />
Note that my btp CLI configuration directory is not hidden, i.e. it's <CODE>btp/</CODE> rather than <CODE>.btp/</CODE>. That's my personal choice, and I use the <CODE>BTP_CLIENTCONFIG</CODE> environment variable to tell the btp CLI that this is where I have my configuration:<BR />
<H2 id="toc-hId-174180089">Moving over</H2><BR />
If you're still using <CODE>SAPCP_CLIENTCONFIG</CODE>, don't worry - there's a grace period; the btp CLI will still honour the use of this environment variable, to give you time to change over to <CODE>BTP_CLIENTCONFIG</CODE>. But I'd encourage you to do that soon!<BR />
<BR />
<HR /><BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2021/02/screenshot-2021-02-22-at-11.00.25.png" /><BR />
<BR />
SAP Tech Bytes is an initiative to bring you bite-sized information on all manner of topics, in <A href="https://www.youtube.com/playlist?list=PL6RpkC85SLQC3HBShmlMaPu_nL--4f20z" target="_blank" rel="nofollow noopener noreferrer">video</A> and <A href="https://blogs.sap.com/tag/sap-tech-bytes/" target="_blank" rel="noopener noreferrer">written</A> format. Enjoy!
---
SAP Community Code Challenge
technology-blog-sap
2022-02-14
https://community.sap.com/t5/technology-blogs-by-sap/sap-community-code-challenge/ba-p/13528521
2022-02-14-sap-community-code-challenge
<EM>We have a new code challenge for you, where we can learn together and have a bit of fun relating to SAP Community profile pictures. Read on for all the details.</EM><BR />
<BR />
We've had fun Code Challenges in the past, and we decided to spring one upon you again now, because why not?<BR />
<BR />
Code challenges are great in that they appeal to different folks in different ways. This time, we have a starter project for you with a complete repository ready to clone, set up and run. The project is an SAP Community profile picture editor, which you can read more about below.<BR />
<H2 id="toc-hId-959458459">Quick links</H2><BR />
Head on over to the <A href="https://groups.community.sap.com/t5/coffee-corner/sap-community-code-challenge-learn-share-and-discuss/m-p/2959" target="_blank" rel="noopener noreferrer">SAP Community Code Challenge - learn, share and discuss!</A>&nbsp;thread over in the Coffee Corner for all technical and non-technical discussion of this challenge.<BR />
<BR />
Find the starter project over on GitHub: <A href="https://github.com/SAP-samples/sap-community-code-challenge" target="_blank" rel="nofollow noopener noreferrer">https://github.com/SAP-samples/sap-community-code-challenge</A>.<BR />
<H2 id="toc-hId-762944954">SAP Community profile picture editor</H2><BR />
The starter project is based on Node.js and provides an SAP UI5 powered web UI that lets you upload a photo and use image editing controls to enhance it. Once enhanced, you can upload the modified photo to be your new SAP Community profile picture.<BR />
<P style="overflow: hidden;margin-bottom: 0px"><IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2022/02/screenshot-2022-02-13-at-11.27.47.png" /></P><BR />
&nbsp;<BR />
<H2 id="toc-hId-566431449">The challenge itself</H2><BR />
We want to keep the challenge fairly loose; there are no prizes, instead, your entry may be highlighted in an upcoming post or live stream, and you get to share your work with others and win the adulation of your fellow SAP Community members!<BR />
<BR />
We'll talk through the technical aspects of the challenge and dive into the starter project itself in this week's Hands-on SAP Dev live stream. <A href="https://youtu.be/CRUa3Ndp4aU" target="_blank" rel="nofollow noopener noreferrer">Join us live</A>, everyone's welcome, or if you can't make it, there's the replay that's available immediately afterwards.<BR />
<P style="overflow: hidden;margin-bottom: 0px"><A href="https://youtu.be/CRUa3Ndp4aU" target="_blank" rel="nofollow noopener noreferrer"><IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2022/02/EPISODEIMAGE-1.png" /></A></P><BR />
<A href="https://youtu.be/CRUa3Ndp4aU" target="_blank" rel="nofollow noopener noreferrer">Join this Hands-on SAP Dev live stream on Fri 18 Feb at 0800 UK</A> - everyone is welcome!<BR />
<H2 id="toc-hId-369917944">Benefits</H2><BR />
As well as just being a bit of fun, here are some reasons that we think make it worthwhile taking part:<BR />
<UL><BR />
 	<LI>It's a great way to practise basic git and GitHub skills</LI><BR />
 	<LI>The starter project is a lovely codebase to explore</LI><BR />
 	<LI>You can learn more about SAP UI5, the Fiori launchpad, apps and more</LI><BR />
 	<LI>It's a good example of a Node.js based web app</LI><BR />
 	<LI>It's a great showcase for the <A href="https://sapui5.hana.ondemand.com/#/entity/sap.suite.ui.commons.imageeditor/sample/sap.suite.ui.commons.sample.ImageEditorContainer" target="_blank" rel="nofollow noopener noreferrer">UI5 Image Editor</A></LI><BR />
</UL><BR />
<H2 id="toc-hId-173404439">What you need to do to take part</H2><BR />
The idea of the challenge is for you to come up with some riff on the starter project. We don't want to constrain you too much, it's really up to you to decide what you want to do. Here are just some examples:<BR />
<UL><BR />
 	<LI>Create your own image enhancement</LI><BR />
 	<LI>Port the project to a different language or platform</LI><BR />
 	<LI>Allow a selection from multiple image enhancements</LI><BR />
 	<LI>Provide a translation for the entire app (using UI5's support for multiple languages)</LI><BR />
</UL><BR />
Whatever you decide to do, you will need to take the following basic steps:<BR />
<UL><BR />
 	<LI>Clone the <A href="https://github.com/SAP-samples/sap-community-code-challenge" target="_blank" rel="nofollow noopener noreferrer">repository</A> or fork it into your own space and then clone that fork</LI><BR />
 	<LI>Get the app up and running and explore it</LI><BR />
 	<LI>Start to work on your own enhancement</LI><BR />
 	<LI>Share what you've done in the <A href="https://groups.community.sap.com/t5/coffee-corner/sap-community-code-challenge-learn-share-and-discuss/m-p/2959" target="_blank" rel="noopener noreferrer">SAP Community Code Challenge - learn, share and discuss!</A>&nbsp;thread over in the Coffee Corner</LI><BR />
</UL><BR />
<H2 id="toc-hId--23109066">The challenge timeframe and your submission</H2><BR />
We want to keep the challenge loose, friendly and fun, so in order to participate, the submission barrier is deliberately low enough for as many folks as possible to take part.<BR />
<BR />
To submit your challenge entry, post a reply to the&nbsp;<A href="https://groups.community.sap.com/t5/coffee-corner/sap-community-code-challenge-learn-share-and-discuss/m-p/2959" target="_blank" rel="noopener noreferrer">SAP Community Code Challenge - learn, share and discuss!</A> thread sharing what you've done. That might be a link to a new repository that you've created, a link to a pull request that you've submitted, or even a graphic that you've created to contribute as an image enhancement component.<BR />
<BR />
You need to get your submissions in by the end of your day on Friday 11th March 2022. Following that date we'll start to look at all the submissions and pick out the ones that we want to highlight.<BR />
<BR />
<span class="lia-unicode-emoji" title=":police_car_light:">ð¨</span> When posting your submission, make sure you share your SAP Community profile URL in the post. For example, mine is <SPAN class="mention-scrubbed">dj.adams.sap</SPAN> and Laura's is <SPAN class="mention-scrubbed">laura.schmitz</SPAN>.<BR />
<H2 id="toc-hId--219622571">Let's share and enjoy this challenge together</H2><BR />
Perhaps the most important thing that we encourage you to do while taking part (and actually this applies to those who just want to watch what's going on and join in the discussions):<BR />
<UL><BR />
 	<LI>Share your thoughts, your ideas, and your progress in the <A href="https://groups.community.sap.com/t5/coffee-corner/sap-community-code-challenge-learn-share-and-discuss/m-p/2959" target="_blank" rel="noopener noreferrer">SAP Community Code Challenge - learn, share and discuss!</A>&nbsp;thread that we've created for this challenge over in the Coffee Corner</LI><BR />
</UL><BR />
<span class="lia-unicode-emoji" title=":backhand_index_pointing_right:">ð</span> Head on over to this <A href="https://groups.community.sap.com/t5/coffee-corner/sap-community-code-challenge-learn-share-and-discuss/m-p/2959" target="_blank" rel="noopener noreferrer">SAP Community Code Challenge - learn, share and discuss!</A>&nbsp;thread right now to find out more about this challenge, and to chat about it, what you might be doing, and to learn what others are doing. See you there!<BR />
<BR />
Happy coding!<BR />
<BR />
<SPAN class="mention-scrubbed">laura.schmitz</SPAN> and DJ
---
Boosting tutorial UX with dev containers part 3 - containers into action
technology-blog-sap
2022-02-01
https://community.sap.com/t5/technology-blogs-by-sap/boosting-tutorial-ux-with-dev-containers-part-3-containers-into-action/ba-p/13541051
2022-02-01-boosting-tutorial-ux-with-dev-containers-part-3-containers-into-action
<EM>In this three-part series I outline and demonstrate an approach to help newcomers get started more quickly with our tutorials, by describing and providing an environment with all the prerequisite tools installed ready to go. This is part three, where I put the image definition and container configuration into action.</EM><BR />
<BR />
<span class="lia-unicode-emoji" title=":police_car_light:">ð¨</span>We'll be covering this topic in a #HandsOnSAPDev live stream "<A href="https://youtu.be/AQ-6qxtAbxk" target="_blank" rel="nofollow noopener noreferrer">Let's explore dev containers with VS Code and Tutorial Navigator content</A>" on Fri 04 Feb at 0800 UK - pop by and say hi, everyone is always welcome:<BR />
<P style="overflow: hidden;margin-bottom: 0px"><A href="https://youtu.be/AQ-6qxtAbxk" target="_blank" rel="nofollow noopener noreferrer"><IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2022/02/screenshot-2022-02-01-at-13.26.10.png" /></A></P><BR />
See also the previous posts in this three-part series:<BR />
<UL><BR />
 	<LI><A href="https://blogs.sap.com/2022/01/27/boosting-tutorial-ux-with-dev-containers-part-1-challenge-and-base-solution/" target="_blank" rel="noopener noreferrer">Boosting tutorial UX with dev containers part 1 â challenge and base solution</A></LI><BR />
 	<LI><A href="https://blogs.sap.com/2022/01/28/boosting-tutorial-ux-with-dev-containers-part-2-embedding-prerequisite-details/" target="_blank" rel="noopener noreferrer">Boosting tutorial UX with dev containers part 2 â embedding prerequisite details</A></LI><BR />
</UL><BR />
<H2 id="toc-hId-961092252">Reviewing what we have created</H2><BR />
At the end of part 2 we had completed the definition of the image, in the form of the <STRONG>Dockerfile</STRONG> contents, which are as follows:<BR />
<PRE><CODE>ARG VARIANT="16-buster"<BR />
FROM mcr.microsoft.com/vscode/devcontainers/javascript-node:${VARIANT}<BR />
<BR />
RUN wget -q -O - <A href="https://packages.cloudfoundry.org/debian/cli.cloudfoundry.org.key" target="test_blank" rel="nofollow noopener noreferrer">https://packages.cloudfoundry.org/debian/cli.cloudfoundry.org.key</A> | apt-key add - ; \<BR />
echo "deb <A href="https://packages.cloudfoundry.org/debian" target="test_blank" rel="nofollow noopener noreferrer">https://packages.cloudfoundry.org/debian</A> stable main" | tee /etc/apt/sources.list.d/cloudfoundry-cli.list<BR />
<BR />
RUN apt-get update \<BR />
&amp;&amp; apt-get -y install --no-install-recommends cf7-cli sqlite<BR />
<BR />
RUN su node -c "npm install -g @ui5/cli @sap/cds-dk yo"</CODE></PRE><BR />
<H3 id="toc-hId-893661466">Finalising the configuration</H3><BR />
We also had a basic <STRONG>devcontainer.json</STRONG> based configuration, to help VS Code know what to do - where to get the container from and what extensions to install.<BR />
<BR />
Before we continue, there are a couple more properties that we might want to add to this configuration.<BR />
<BR />
What we'll be building initially, in the actual tutorials (specifically in the <A href="https://developers.sap.com/group.btp-app-cap-create.html" target="_blank" rel="noopener noreferrer">Create a CAP Application and SAP Fiori UI</A> group) is a CAP application, in the first tutorial in this group: <A href="https://developers.sap.com/tutorials/btp-app-create-cap-application.html" target="_blank" rel="noopener noreferrer">Create a CAP-Based Application</A>.<BR />
<BR />
Those of you who have read ahead and browsed the tutorial, or who have built applications and services with CAP before will know that port 4004 is the default port that is used to listen for and respond to HTTP requests.<BR />
<BR />
One of the things we have to think about when using containers is that they're independent with respect to the host environment and have their own environment, in a very similar way to how virtual machines are independent of the host too.<BR />
<BR />
This means that if a service or application listens on a port inside a container, which will be the case here because our development will take place inside the container that we'll get VS Code to connect to, then by default only clients inside that container will be able to connect to that port. So there's a concept of port "publishing" or "forwarding", meaning that a port in a container can be accessed from outside the container.<BR />
<BR />
The upshot of this is that you'll be able to continue to use the browser on your local machine to connect with and send requests to the app or service that's running inside your container - in this case, via <A href="http://localhost:4004" target="test_blank" rel="nofollow noopener noreferrer">http://localhost:4004</A> for example.<BR />
<BR />
Docker refers to this concept as <A href="https://docs.docker.com/config/containers/container-networking/#published-ports" target="_blank" rel="nofollow noopener noreferrer">port publishing</A> while in the context of VS Code and dev containers, this is called <A href="https://code.visualstudio.com/docs/remote/containers#_always-forwarding-a-port" target="_blank" rel="nofollow noopener noreferrer">port forwarding</A> (a term that's common in other networking areas too).<BR />
<BR />
With the <STRONG>forwardPorts</STRONG> property in the devcontainer.json configuration file, we can specify which ports should be automatically forwarded, or published, from the container to the host. So we will use this to specify that port 4004 should be made available.<BR />
<BR />
Also if, like me, running commands as the "root" user makes you nervous, there's the <STRONG>remoteUser</STRONG> property with which you can specify a different user to be in the container. Traditionally this is either "user", or (in this sort of Node.js container environment) "node".<BR />
<BR />
Adding these two properties to the configuration, we end up with this as the final content for our devcontainer.json file:<BR />
<PRE class="language-javascript"><CODE>{<BR />
  "name": "Tutorial dev container",<BR />
  "build": {<BR />
    "dockerfile": "Dockerfile",<BR />
  },<BR />
  "extensions": [<BR />
    "sapse.vscode-cds",<BR />
    "sapse.sap-ux-fiori-tools-extension-pack"<BR />
  ],<BR />
  "forwardPorts": [ 4004 ],<BR />
  "remoteUser": "node"<BR />
}</CODE></PRE><BR />
&nbsp;<BR />
<H2 id="toc-hId-568065242">Putting everything into action</H2><BR />
We're just about ready to try things out!<BR />
<H3 id="toc-hId-500634456">Creating a project working directory</H3><BR />
First, there's a tiny bit more general setup required, described in the last tutorial of the <A href="https://developers.sap.com/group.btp-app-cap-prepare.html" target="_blank" rel="noopener noreferrer">Prepare Your Development Environment for CAP</A> group, which is to <A href="https://developers.sap.com/tutorials/btp-app-create-directory.html" target="_blank" rel="noopener noreferrer">create a directory for development</A>.<BR />
<BR />
This is not tools related, or related to the container directly, it's just about creating a directory to have somewhere to store the app that you're going to create, and to have a copy of a set of templates that will help you along the way.<BR />
<BR />
Basically all we need to do here is create a directory, and then (if we want to follow along closely with the tutorials) a subdirectory within that called "cpapp/". Let's do that now. Note that this is on your local machine, not in the container.<BR />
<BR />
I'll create the two directories inside a local "~/work/" directory that I already have - you can put yours where you want. I'll use the name "cap-tut/" for the higher level directory, and have "cpapp/" within that:<BR />
<PRE><CODE># ~/work<BR />
; <STRONG>mkdir -p cap-tut/cpapp</STRONG><BR />
# ~/work<BR />
; <STRONG>tree cap-tut/</STRONG><BR />
cap-tut/<BR />
âââ cpapp<BR />
<BR />
1 directory, 0 files</CODE></PRE><BR />
The "cpapp/" directory will be the focus of our development, and it's the directory we'll open up shortly in VS Code.<BR />
<BR />
The <A href="https://developers.sap.com/tutorials/btp-app-create-directory.html" target="_blank" rel="noopener noreferrer">Create a Directory for Development</A> tutorial also mentions cloning a <A href="https://github.com/SAP-samples/cloud-cap-risk-management" target="_blank" rel="nofollow noopener noreferrer">repository</A> to get some app templates that you can copy.<BR />
<BR />
Let's do that too:<BR />
<PRE><CODE># ~/work<BR />
; <STRONG>cd cap-tut/</STRONG><BR />
# ~/work/cap-tut<BR />
; <STRONG>git clone <A href="https://github.com/SAP-samples/cloud-cap-risk-management" target="test_blank" rel="nofollow noopener noreferrer">https://github.com/SAP-samples/cloud-cap-risk-management</A> tutorial</STRONG><BR />
Cloning into 'tutorial'...<BR />
remote: Enumerating objects: 3286, done.<BR />
remote: Counting objects: 100% (3286/3286), done.<BR />
remote: Compressing objects: 100% (1050/1050), done.<BR />
remote: Total 3286 (delta 1870), reused 3235 (delta 1824), pack-reused 0<BR />
Receiving objects: 100% (3286/3286), 11.16 MiB | 8.31 MiB/s, done.<BR />
Resolving deltas: 100% (1870/1870), done.<BR />
# ~/work/cap-tut<BR />
; <STRONG>ls</STRONG><BR />
./ ../ cpapp/ tutorial/<BR />
<BR />
</CODE></PRE><BR />
It also mentions creating a new repository of your own on GitHub. We don't need that to test things out here, so we can leave that for now.<BR />
<H3 id="toc-hId-304120951">Bringing in Dockerfile and devcontainer.json</H3><BR />
What we will need to do, however, is bring in the Dockerfile and devcontainer.json file. We want to put them in a specially named directory within our "cpapp/" directory that we'll open up in VS Code, so that VS Code recognises that there's some remote container setup to do.<BR />
<BR />
The directory that we want to put our Dockerfile and devcontainer.json files in is ".devcontainer/" - this is what VS Code will recognise - and should be at the root of our app directory ("cpapp/"). Let's create that now too:<BR />
<PRE><CODE># ~/work<BR />
; <STRONG>cd cap-tut/cpapp/</STRONG><BR />
# ~/work/cap-tut/cpapp<BR />
; <STRONG>mkdir .devcontainer</STRONG></CODE></PRE><BR />
Finally, the Dockerfile and devcontainer.json file should go into that new ".devcontainer/" directory.<BR />
<BR />
Here's what it looks like when it's all ready:<BR />
<PRE><CODE># ~/work/cap-tut/cpapp<BR />
; <STRONG>tree -a</STRONG><BR />
.<BR />
âââ .devcontainer<BR />
    âââ Dockerfile<BR />
    âââ devcontainer.json<BR />
<BR />
1 directory, 2 files</CODE></PRE><BR />
<H3 id="toc-hId-107607446">Starting up VS Code</H3><BR />
Taking our cue from the first part of the first tutorial in the <A href="https://developers.sap.com/group.btp-app-cap-create.html" target="_blank" rel="noopener noreferrer">Create a CAP Application and SAP Fiori UI</A> group, i.e. the <A href="https://developers.sap.com/tutorials/btp-app-create-cap-application.html" target="_blank" rel="noopener noreferrer">Create a CAP Application</A> tutorial, it's now time to open up the "cpapp/" directory in VS Code and get started.<BR />
<BR />
As I'm still in the "cpapp/" directory from just before, I can use the following command (which is also shown in the tutorial):<BR />
<PRE><CODE>; <STRONG>code .</STRONG></CODE></PRE><BR />
This will start VS Code and the "." is of course a reference to the current directory, i.e. "cpapp/".<BR />
<BR />
Note that the tutorial mentions carrying out "cds init" - we don't need to do that here, and shouldn't, we'll be doing that within the container! The whole point is of course that if you've followed along, and haven't already installed the <a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a>/cds-dk package globally, you wouldn't even be able to run "cds init" on your local machine anyway <span class="lia-unicode-emoji" title=":slightly_smiling_face:">ð</span><BR />
<BR />
Let's see what happens. First, we get a nice shiny VS Code screen:<BR />
<P style="overflow: hidden;margin-bottom: 0px"><IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2022/01/screenshot-2022-01-27-at-16.02.44.png" /></P><BR />
But hey, what's that message in the bottom right corner? Let's take a closer look:<BR />
<P style="overflow: hidden;margin-bottom: 0px"><IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2022/01/screenshot-2022-01-27-at-16.02.53.png" /></P><BR />
Oooh!<BR />
<BR />
This has happened because VS Code has indeed recognised the ".devcontainer/" directory. Of course, the only sensible option for curious people like us is to press the <STRONG>Reopen in Container button</STRONG>, right?<BR />
<BR />
Doing that causes VS Code to reopen, but in doing so, VS Code has acted upon the contents of the <STRONG>devcontainer.json</STRONG> file which has caused a container to be created based on the image described by our Dockerfile that's referenced. It's also caused our specified extensions to be installed.<BR />
<BR />
During this process, you may have seen this message appear briefly in the bottom right corner:<BR />
<P style="overflow: hidden;margin-bottom: 0px"><IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2022/01/screenshot-2022-01-27-at-16.04.52.png" /></P><BR />
If you'd have selected the link, you'd have been taken to the details of what was going on, details that look like this:<BR />
<P style="overflow: hidden;margin-bottom: 0px"><IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2022/01/screenshot-2022-01-27-at-16.05.28.png" /></P><BR />
If you missed it, you can always get to the log&nbsp;via the Command Palette with the command <STRONG>Remote-Containers: Show Container log</STRONG> as well:<BR />
<P style="overflow: hidden;margin-bottom: 0px"><IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2022/01/screenshot-2022-01-27-at-16.09.58.png" /></P><BR />
The eagle-eyed amongst you may be wondering about that (1) next to the "PORTS" heading in the screenshot of the dev container log.<BR />
<BR />
You will probably not be surprised that this is because there's an entry in the list of ports that are exposed, just like we requested with the forwardPorts property:<BR />
<P style="overflow: hidden;margin-bottom: 0px"><IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2022/01/screenshot-2022-01-27-at-16.17.25.png" /></P><BR />
So at this stage we're all set.<BR />
<H2 id="toc-hId--217988778">Starting the tutorial</H2><BR />
At this stage, you are running VS Code on your local machine, the extensions specified are installed, and all the tools needed are in the container which VS Code has instantiated for you.<BR />
<H3 id="toc-hId--285419564">Opening a terminal</H3><BR />
What's more, opening up a terminal now in VS Code will open up a shell inside the container, with access to those tools.<BR />
<BR />
Let's do that now, selecting "bash" from this menu:<BR />
<P style="overflow: hidden;margin-bottom: 0px"><IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2022/01/screenshot-2022-01-27-at-16.15.04.png" /></P><BR />
This gives us a lovely command line environment within which to work, and to carry out the commands specified in the <A href="https://developers.sap.com/tutorials/btp-app-create-cap-application.html" target="_blank" rel="noopener noreferrer">tutorial</A>:<BR />
<P style="overflow: hidden;margin-bottom: 0px"><IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2022/01/screenshot-2022-01-27-at-16.19.48.png" /></P><BR />
The prompt here looks a little different to what we've seen in the previous tutorials in this series:<BR />
<PRE><CODE>root â / $</CODE></PRE><BR />
But actually it's the same pattern:<BR />
<PRE><CODE>[username] â [current directory] $</CODE></PRE><BR />
Remember that we specified that we wanted the user "node" (instead of "root") in our container, and that we're now in our app directory "cpapp/".<BR />
<H3 id="toc-hId--481933069">Running cds and npm commands</H3><BR />
Following the tutorial instructions, we're guided to initialise the CAP project with "cds init" and then install the Node.js packages that are listed in the package.json file that (amongst other files) the "cds init" process creates.<BR />
<BR />
Are you ready?<BR />
<BR />
Running "cds init" creates various files and directories (you'll see them appear in the Explorer on the left hand side), all of which should be familiar to you if you've developed CAP apps or services before:<BR />
<P style="overflow: hidden;margin-bottom: 0px"><IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2022/01/screenshot-2022-01-27-at-16.25.10.png" /></P><BR />
Let's pause here for the briefest of moments, to reflect on something: We're running VS Code locally, on our host machine, and it's showing the sudden appearance of files and directories ... but those files and directories are not actually local, they're inside the dev container that VS Code has instantiated and connected to. In fact, everything now happens inside the container.<BR />
<BR />
OK, let's continue. We're now instructed to run "npm install", which does does what you expect.<BR />
<H3 id="toc-hId--678446574">Starting up the skeleton CAP service</H3><BR />
The final part of the tutorial we're going to do in testing out our container is to run "cds watch".<BR />
<BR />
Bear in mind at this point we have nothing in the app, neither schema definitions nor service definitions. This is therefore what we get:<BR />
<PRE><CODE>node â /workspaces/cpapp $ <STRONG>cds watch<BR />
</STRONG><BR />
cds serve all --with-mocks --in-memory? <BR />
watching: cds,csn,csv,ts,mjs,cjs,js,json,properties,edmx,xml,env,css,gif,html,jpg,png,svg... <BR />
live reload enabled for browsers <BR />
_______________________<BR />
<BR />
<BR />
No models found in db/,srv/,app/,schema,services.<BR />
Waiting for some to arrive...</CODE></PRE><BR />
Fair enough!<BR />
<H3 id="toc-hId--950191448">Adding a schema and connecting to the service</H3><BR />
At this stage the tutorial suggests copying <A href="https://github.com/SAP-samples/cloud-cap-risk-management/blob/5565059dc57b6d593492384e5187c7b517cc411b/templates/create-cap-application/db/schema.cds" target="_blank" rel="nofollow noopener noreferrer">a schema definition</A> from the templates directory of the repository (<A href="https://github.com/SAP-samples/cloud-cap-risk-management" target="_blank" rel="nofollow noopener noreferrer">SAP-samples/cloud-cap-risk-management</A>) that we cloned into the "tutorial/" directory.<BR />
<BR />
So let's do that, by creating a new file in the "db/" directory called <STRONG>schema.cds</STRONG>&nbsp;and pasting the following contents in there - you can copy/paste this content here as it's exactly that schema definition in the repository:<BR />
<PRE><CODE>namespace sap.ui.riskmanagement;<BR />
using { managed } from '@sap/cds/common';<BR />
<BR />
entity Risks : managed {<BR />
&nbsp; key ID : UUID @(Core.Computed : true);<BR />
&nbsp; title : String(100);<BR />
&nbsp; prio : String(5);<BR />
&nbsp; descr : String;&nbsp;<BR />
&nbsp; miti : Association to Mitigations;<BR />
&nbsp; impact : Integer;<BR />
&nbsp; criticality : Integer;<BR />
}<BR />
<BR />
entity Mitigations : managed {<BR />
&nbsp; key ID : UUID @(Core.Computed : true);<BR />
&nbsp; description : String;<BR />
&nbsp; owner : String;<BR />
&nbsp; timeline : String;<BR />
&nbsp; risks : Association to many Risks on risks.miti = $self;<BR />
}</CODE></PRE><BR />
Once you've pasted it in, unless you've disabled automatic save, VS Code will save the contents of your new schema.cds file (do it manually if it doesn't).<BR />
<BR />
By the way, notice at this point that the CDS content saved in schema.cds is automatically colour-coded, and that's thanks to the <A href="https://marketplace.visualstudio.com/items?itemName=SAPSE.vscode-cds" target="_blank" rel="nofollow noopener noreferrer">SAP CDS Language Support</A> extension that has been installed according to our devcontainer.json configuration.<BR />
<BR />
Then, through the magic of the still-running "cds watch" process, our fledgling service comes to life!<BR />
<P style="overflow: hidden;margin-bottom: 0px"><IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2022/01/screenshot-2022-01-27-at-16.43.10.png" /></P><BR />
What's more, VS Code helpfully points out that we now have a service listening on port 4004:<BR />
<P style="overflow: hidden;margin-bottom: 0px"><IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2022/01/screenshot-2022-01-27-at-16.47.17.png" /></P><BR />
So what are we going to do here? <STRONG>Open in Browser</STRONG> of course!<BR />
<BR />
As you do that, remember that this is a link from VS Code running locally, to your browser also running locally on your machine, but it's connecting to the CAP based service running inside the container. This would be a good time to stop again and think about what this means for a second.<BR />
<BR />
Once you've finished pondering <A href="https://en.wikipedia.org/wiki/Life,_the_Universe_and_Everything" target="_blank" rel="nofollow noopener noreferrer">life, the universe and everything</A> related to development containers and <A href="https://en.wikipedia.org/wiki/Turtles_all_the_way_down" target="_blank" rel="nofollow noopener noreferrer">turtles</A>, you can turn to what your browser is displaying, which will look something like this:<BR />
<P style="overflow: hidden;margin-bottom: 0px"><IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2022/01/screenshot-2022-01-27-at-16.50.25.png" /></P><BR />
Yes, that URL is indeed a "localhost" URL, but there's nothing listening to 4004 on your local machine - the connection is being forwarded to the container.<BR />
<BR />
And yes, that's the CAP service inside your container sending that response. It's not a very exciting response right now as there's hardly any data or service definition to work with. But it's there, it's alive, and it's ready for the next part of your tutorial based learning!<BR />
<H2 id="toc-hId--853301946">Wrapping up</H2><BR />
I'll leave it to you to continue with the tutorial and the group - it's a great set of learning resources!<BR />
<BR />
What I hope you take away from this series is that with the power of containers, we can improve the developer experience in many contexts - this tutorial prerequisites based learning contexts is just the start. But it's a start that's simple enough for us to build on and give us further ideas, right?<BR />
<BR />
There are of course many questions I've deliberately left unanswered for now. How do we make this accessible to more than just me? How best can we distribute images, or image definitions, and dev container configuration? What if I don't want to use VS Code? (That's an easy one - I use dev containers for many things, and I don't use VS Code).<BR />
<BR />
Perhaps more fundamentally, however, is this question, and I'd love to hear from you in the comments below: Does this resonate with you? Can you see yourself using dev containers to make your life easier? Would you enjoy tutorial prerequisite specific container configuration?<BR />
<BR />
Please share your thoughts, and if you've got this far in the series, thank you for reading!
---
Boosting tutorial UX with dev containers part 2 - embedding prerequisite details
technology-blog-sap
2022-01-28
https://community.sap.com/t5/technology-blogs-by-sap/boosting-tutorial-ux-with-dev-containers-part-2-embedding-prerequisite/ba-p/13540611
2022-01-28-boosting-tutorial-ux-with-dev-containers-part-2-embedding-prerequisite
<EM>In this three-part series I outline and demonstrate an approach to help newcomers get started more quickly with our tutorials, by describing and providing an environment with all the prerequisite tools installed ready to go. This is part two, where I add the tutorial prerequisite detail to the Dockerfile I created in part one, and also introduce the devcontainer.json file.</EM><BR />
<BR />
You may want the previous or next post in this three-part series:<BR />
<UL><BR />
 	<LI><A href="https://blogs.sap.com/2022/01/27/boosting-tutorial-ux-with-dev-containers-part-1-challenge-and-base-solution/" target="_blank" rel="noopener noreferrer">Boosting tutorial UX with dev containers part 1 - challenge and base solution</A></LI><BR />
 	<LI><A href="https://blogs.sap.com/2022/02/01/boosting-tutorial-ux-with-dev-containers-part-3-containers-into-action/" target="_blank" rel="noopener noreferrer">Boosting tutorial UX with dev containers part 3 â containers into action</A></LI><BR />
</UL><BR />
At the end of part 1 we had a base solution consisting of a simple Dockerfile definition for an image based on Node.js v16 and Debian buster. This image would be what we'll create containers from, for our development environment, and with <A href="https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-containers" target="_blank" rel="nofollow noopener noreferrer">VS Code's support for development in remote containers</A>, we'd connect to such a container to work within.<BR />
<BR />
We left off at the end of part 1 having instantiated a container based on the image in our Dockerfile definition, and got ourselves a shell environment, like this:<BR />
<PRE><CODE># /tmp<BR />
; <STRONG>docker run --rm -it mcr.microsoft.com/vscode/devcontainers/javascript-node:16-buster bash</STRONG><BR />
root â / $</CODE></PRE><BR />
Now it's time to work through the steps in the prerequisite tutorial <A href="https://developers.sap.com/tutorials/btp-app-set-up-local-development.html" target="_blank" rel="noopener noreferrer">Set Up Local Development Using VS Code</A> that we looked at briefly in part 1. We'll take the steps one at a time, and decide what we need to do to fulfil what the step describes, but in the context of our image and future containers.<BR />
<H3 id="toc-hId-1090150822">Step 1: Editors</H3><BR />
There's not much we need to do here as we're going for VS Code implicitly. We will want to create a <A href="https://code.visualstudio.com/docs/remote/devcontainerjson-reference" target="_blank" rel="nofollow noopener noreferrer">devcontainer configuration file</A> that effectively tells VS Code about the dev container and how to use it, but we'll do that towards the end.<BR />
<H3 id="toc-hId-893637317">Step 2: Command line interpreters</H3><BR />
This step tells us that we'll be needing to enter commands on a command line, as part of the tutorial, and therefore a command line interpreter (environment) is required. Here's what the step says:<BR />
<BR />
<EM>"This tutorial contains a number of command line snippets that need to be pasted into a command line window. All snippets listed for macOS/Linux or without platform information can be executed in the bash or zsh, which are the default shells for these platforms. The Windows snippets are for the Windows Command Line and not for the PowerShell. Windows users are suggested to use the Git BASH instead, which is part of the Git for Windows installation and contains the basic UNIX command line tools. In the Git BASH, use the macOS/Linux snippets of the tutorial. VS Code supports the use of the Git BASH for the integrated command line window (called Terminal in VS Code) as well."</EM><BR />
<BR />
Interestingly, even though all three main OS platforms are mentioned, it didn't escape my notice that Bash was the most prominent shell mentioned - as illustrated by this gratuitous pipeline that analyses the text of that paragraph:<BR />
<PRE><CODE>; <STRONG>cat paragraph-text \<BR />
| tr '[:upper:]' '[:lower:]' \<BR />
| sed -E 's/[^a-z]/ /g; s/ +/\n/g' \<BR />
| sort \<BR />
| uniq -c \<BR />
| sort -nr \<BR />
| head</STRONG><BR />
14 the<BR />
6 for<BR />
5 line<BR />
5 command<BR />
4 windows<BR />
4 snippets<BR />
4 of<BR />
4 git<BR />
4 bash<BR />
3 use<BR />
# /tmp<BR />
;</CODE></PRE><BR />
There's <STRONG>bash</STRONG> in the top ten list, no sign of anything else (now where's that troll emoji when I need it?)<BR />
<BR />
Anyway, there's nothing for us to do in this step either, as our base image has a shell environment as standard.<BR />
<H3 id="toc-hId-697123812">Step 3: Install Git</H3><BR />
Nothing to do here either, as git is already available to us in the base image, which we can check in our Bash shell inside the running container like this:<BR />
<PRE><CODE>root â / $ <STRONG>git --version</STRONG><BR />
git version 2.30.2</CODE></PRE><BR />
Nice!<BR />
<H3 id="toc-hId-500610307">Step 4: Install Node.js</H3><BR />
As you can guess, nothing to do here either - the whole point of choosing the base image that we did was to have a Node.js environment. So we don't need to install Node.js explicitly at this point. Note that the step advises us to run the latest LTS version, which we are doing in this image.<BR />
<H3 id="toc-hId-304096802">Step 5: Install the SAPUI5 command line interface</H3><BR />
Here's where we get something to do. The ui5 CLI is not going to be in the base Docker image, but it's easily installed as a global Node.js module, via the Node Package Manager (NPM). The instructions in this tutorial step show us how to do that.<BR />
<BR />
We can try it now in our currently running container:<BR />
<PRE><CODE>root â / $ <STRONG>npm install --global @ui5/cli</STRONG><BR />
<BR />
added 520 packages, and audited 521 packages in 16s<BR />
<BR />
found 0 vulnerabilities<BR />
root â</CODE></PRE><BR />
We can then invoke it directly, like this:<BR />
<PRE><CODE>root â / $ <STRONG>ui5 --version</STRONG><BR />
2.14.4 (from /usr/local/share/npm-global/lib/node_modules/@ui5/cli/bin/ui5.js)<BR />
root â / $</CODE></PRE><BR />
Great. Of course, this only gets us the ui5 CLI in the current container, the currently running instance of the Docker image. So we need to add this to our Docker image definition.<BR />
<BR />
There's a <A href="https://github.com/microsoft/vscode-dev-containers/blob/e7ee99058efcecb977145640a7f0f09097836403/containers/javascript-node/.devcontainer/Dockerfile" target="_blank" rel="nofollow noopener noreferrer">base image reference</A> that shows us how we should do this, so following that example we end up with this in our Dockerfile:<BR />
<PRE><CODE>ARG VARIANT="16-buster"<BR />
FROM mcr.microsoft.com/vscode/devcontainers/javascript-node:${VARIANT}<BR />
<BR />
RUN su node -c "npm install -g @ui5/cli"</CODE></PRE><BR />
<H3 id="toc-hId-107583297">Step 6: Install the Cloud Foundry command line interface</H3><BR />
If we look closely at this step, there are different instructions depending on what host operating system you're running. The container-based approach alleviates this by providing a common and consistent environment. So we only need to consider instructions for installing the cf CLI once.<BR />
<BR />
The image's base is Debian, a Linux distribution, so of course we need to follow the Linux based installation instructions, and <A href="https://docs.cloudfoundry.org/cf-cli/install-go-cli.html#pkg-linux" target="_blank" rel="nofollow noopener noreferrer">we're directed to the Cloud Foundry website</A> to follow them. Let's follow them in our test container that we have running, and for future container instantiation, we'll then add further content to our Dockerfile so that images built from that will have the cf CLI.<BR />
<BR />
There are two different ways to install the cf CLI on Linux - using the distribution's package manager, or just downloading and unpacking the binary file. While they're both good approaches, we'll just make a decision and go for the former. Talking of decisions, there are different major versions of the cf CLI available ... to discuss the differences between them is a topic for another time, we'll just go for v7 here as it seems to be gaining usage over v6 and is still not as "bleeding edge" as v8.<BR />
<BR />
So the first thing we need to do in the <A href="https://docs.cloudfoundry.org/cf-cli/install-go-cli.html#pkg-linux" target="_blank" rel="nofollow noopener noreferrer">instructions</A> is to add the Cloud Foundry Foundation public key and package repository details so we can use the Debian package manager to install it:<BR />
<PRE><CODE>root â / $ <STRONG>wget -q -O - <A href="https://packages.cloudfoundry.org/debian/cli.cloudfoundry.org.key" target="test_blank" rel="nofollow noopener noreferrer">https://packages.cloudfoundry.org/debian/cli.cloudfoundry.org.key</A> | apt-key add -</STRONG> <BR />
Warning: apt-key is deprecated. Manage keyring files in trusted.gpg.d instead (see apt-key(8)).<BR />
OK<BR />
root â / $</CODE></PRE><BR />
If you're curious like me, you'll want to know what's happening here. Using wget, the key is downloaded (avoiding normal output, with the -q "quiet" option) and written to standard output STDOUT with the -O - option and value. This key is piped into the standard input STDIN of apt-key to add it to the package manager's key store.<BR />
<BR />
Then a new file in the package manager's list of sources is created, pointing to a Cloud Foundry resource for Debian packages:<BR />
<PRE><CODE>root â / $ <STRONG>echo "deb <A href="https://packages.cloudfoundry.org/debian" target="test_blank" rel="nofollow noopener noreferrer">https://packages.cloudfoundry.org/debian</A> stable main" | tee /etc/apt/sources.list.d/cloudfoundry-cli.list</STRONG><BR />
root â / $</CODE></PRE><BR />
Note that in neither of these two activities do we need to use the "sudo" command which was shown in the instructions. This is because in this container, we're the administrative "root" user already.<BR />
<BR />
Next we can get the package lists updated like this:<BR />
<PRE><CODE>root â / $ <STRONG>apt-get update</STRONG><BR />
Hit:1 <A href="http://security.debian.org/debian-security" target="test_blank" rel="nofollow noopener noreferrer">http://security.debian.org/debian-security</A> buster-security InRelease<BR />
Hit:2 <A href="http://deb.debian.org/debian" target="test_blank" rel="nofollow noopener noreferrer">http://deb.debian.org/debian</A> buster InRelease <BR />
Get:3 <A href="http://deb.debian.org/debian" target="test_blank" rel="nofollow noopener noreferrer">http://deb.debian.org/debian</A> buster-updates InRelease [39.4 kB] <BR />
Hit:5 <A href="https://dl.yarnpkg.com/debian" target="test_blank" rel="nofollow noopener noreferrer">https://dl.yarnpkg.com/debian</A> stable InRelease <BR />
Hit:4 <A href="https://cf-cli-debian-repo.s3.amazonaws.com" target="test_blank" rel="nofollow noopener noreferrer">https://cf-cli-debian-repo.s3.amazonaws.com</A> stable InRelease <BR />
Fetched 39.4 kB in 1s (33.9 kB/s)<BR />
Reading package lists... Done<BR />
root â / $</CODE></PRE><BR />
And now we can request the install:<BR />
<PRE><CODE>root â / $ <STRONG>apt-get install cf7-cli</STRONG><BR />
Reading package lists... Done<BR />
Building dependency tree... Done<BR />
Reading state information... Done<BR />
The following NEW packages will be installed:<BR />
cf7-cli<BR />
0 upgraded, 1 newly installed, 0 to remove and 0 not upgraded.<BR />
Need to get 5853 kB of archives.<BR />
After this operation, 22.6 MB of additional disk space will be used.<BR />
Get:1 <A href="https://packages.cloudfoundry.org/debian" target="test_blank" rel="nofollow noopener noreferrer">https://packages.cloudfoundry.org/debian</A> stable/main amd64 cf7-cli amd64 7.4.0 [5853 kB]<BR />
Fetched 5853 kB in 3s (2022 kB/s) <BR />
Selecting previously unselected package cf7-cli.<BR />
(Reading database ... 26901 files and directories currently installed.)<BR />
Preparing to unpack .../cf7-cli_7.4.0_amd64.deb ...<BR />
Unpacking cf7-cli (7.4.0) ...<BR />
Setting up cf7-cli (7.4.0) ...<BR />
root â / $</CODE></PRE><BR />
This is all we need to get the cf CLI installed, which it now is, as we can see:<BR />
<PRE><CODE>root â / $ <STRONG>cf --version</STRONG><BR />
cf version 7.4.0+e55633fed.2021-11-15<BR />
root â / $</CODE></PRE><BR />
Happy with success, we can now make this a standard activity when building the image, with new content in the Dockerfile, so it now looks like this:<BR />
<PRE><CODE>ARG VARIANT="16-buster" <BR />
FROM mcr.microsoft.com/vscode/devcontainers/javascript-node:${VARIANT}<BR />
<BR />
RUN wget -q -O - <A href="https://packages.cloudfoundry.org/debian/cli.cloudfoundry.org.key" target="test_blank" rel="nofollow noopener noreferrer">https://packages.cloudfoundry.org/debian/cli.cloudfoundry.org.key</A> | apt-key add - ; \<BR />
  echo "deb <A href="https://packages.cloudfoundry.org/debian" target="test_blank" rel="nofollow noopener noreferrer">https://packages.cloudfoundry.org/debian</A> stable main" | tee /etc/apt/sources.list.d/cloudfoundry-cli.list<BR />
<BR />
RUN apt-get update \<BR />
  &amp;&amp; apt-get -y install --no-install-recommends cf7-cli<BR />
<BR />
RUN su node -c "npm install -g @ui5/cli"</CODE></PRE><BR />
This pretty much reflects what we've just done in the container, with the addition of the following options for apt-get:<BR />
<UL><BR />
 	<LI>the -y option sets an automatic "yes" to any prompts that may come up, which is good for unattended execution such as image builds</LI><BR />
 	<LI>the --no-install-recommends option prevents apt-get installing anything other than the actual package requested and with its dependencies</LI><BR />
</UL><BR />
<H3 id="toc-hId--88930208">Step 7: Add CAP tooling</H3><BR />
We've installed the ui5 CLI, and now it's time to install the SAP Cloud Application Programming (CAP) model software development kit. This is also in the form of a Node.js module, and we should install that also globally in a similar way to how we installed the ui5 CLI. Let's do it now directly in our running container first:<BR />
<PRE><CODE>root â / $ <STRONG>npm install --global @sap/cds-dk</STRONG><BR />
npm WARN deprecated uuid@3.4.0: Please upgrade to version 7 or higher. Older versions may use Math.random() in certain circumstances, which is known to be problematic. See <A href="https://v8.dev/blog/math-random" target="test_blank" rel="nofollow noopener noreferrer">https://v8.dev/blog/math-random</A> for details.<BR />
npm WARN deprecated har-validator@5.1.5: this library is no longer supported<BR />
npm WARN deprecated request@2.88.2: request has been deprecated, see <A href="https://github.com/request/request/issues/3142" target="test_blank" rel="nofollow noopener noreferrer">https://github.com/request/request/issues/3142</A><BR />
npm WARN deprecated node-pre-gyp@0.11.0: Please upgrade to @mapbox/node-pre-gyp: the non-scoped node-pre-gyp package is deprecated and only the @mapbox scoped package will recieve updates in the future<BR />
npm WARN deprecated tar@2.2.2: This version of tar is no longer supported, and will not receive security updates. Please upgrade asap.<BR />
<BR />
added 415 packages, and audited 416 packages in 21s<BR />
root â / $</CODE></PRE><BR />
Let's check to see if we have the main CLI executable at our fingertips now (in our PATH):<BR />
<PRE><CODE>root â / $ <STRONG>cds --version</STRONG><BR />
@sap/cds: 5.7.3<BR />
@sap/cds-compiler: 2.11.2<BR />
@sap/cds-dk: 4.7.3<BR />
@sap/cds-foss: 3.0.0<BR />
@sap/eslint-plugin-cds: 2.3.0<BR />
Node.js: v16.13.2<BR />
home: /usr/local/share/npm-global/lib/node_modules/@sap/cds-dk/node_modules/@sap/cds<BR />
root â / $</CODE></PRE><BR />
Yep, lovely!<BR />
<BR />
The simplest thing we can do to encode this installation step into our Dockerfile is to just add it to the existing npm install command already in there. So now our Dockerfile looks like this:<BR />
<PRE><CODE>ARG VARIANT="16-buster" <BR />
FROM mcr.microsoft.com/vscode/devcontainers/javascript-node:${VARIANT}<BR />
<BR />
RUN wget -q -O - <A href="https://packages.cloudfoundry.org/debian/cli.cloudfoundry.org.key" target="test_blank" rel="nofollow noopener noreferrer">https://packages.cloudfoundry.org/debian/cli.cloudfoundry.org.key</A> | apt-key add - ; \<BR />
  echo "deb <A href="https://packages.cloudfoundry.org/debian" target="test_blank" rel="nofollow noopener noreferrer">https://packages.cloudfoundry.org/debian</A> stable main" | tee /etc/apt/sources.list.d/cloudfoundry-cli.list<BR />
<BR />
RUN apt-get update \<BR />
  &amp;&amp; apt-get -y install --no-install-recommends cf7-cli<BR />
<BR />
RUN su node -c "npm install -g @ui5/cli <SPAN id="autocomplete" style="font-size: 1rem"><SPAN id="autocomplete-delimiter">@sap/cds-dk</SPAN></SPAN><SPAN style="font-size: 1rem">"</SPAN></CODE></PRE><BR />
<H3 id="toc-hId--285443713">Step 8: Install VS Code</H3><BR />
So here's a step that we don't encode in the image of course - the two core tools you'll need on your local machine are Docker Desktop or equivalent, as already stated, and VS Code, because the whole idea is that you use VS Code and connect to a container for everything else.<BR />
<BR />
That said, once we have everything set up, there's a context where neither Docker Desktop nor VS Code is required, but you still have all the tools in a container and you can still run through the entire tutorial mission. Can you guess what that context is? Answer below in the comments.<BR />
<H3 id="toc-hId--481957218">Step 9: Install VS Code extensions</H3><BR />
This step, along with the subsequent step, describes a couple of VS Code extensions that are required for the tutorial; they make development in this space a lot easier and more pleasant. This first extension is the <A href="https://marketplace.visualstudio.com/items?itemName=SAPSE.vscode-cds" target="_blank" rel="nofollow noopener noreferrer">SAP CDS Language Support extension</A>.<BR />
<BR />
This is a wonderful extension that introduced me to the Language Server Protocol (LSP) which I've covered in some detail in a couple of past episodes of the Hands-on SAP Dev <A href="https://blogs.sap.com/2020/11/09/an-overview-of-sap-developers-video-content/#shows" target="_blank" rel="noopener noreferrer">show</A>:<BR />
<BR />
<A href="https://www.youtube.com/watch?v=WLkFAtgEWs8" target="_blank" rel="nofollow noopener noreferrer">Ep.7 â Digging into the language server protocol, cds-lsp and Vim</A><BR />
<BR />
<A href="https://www.youtube.com/watch?v=S7PaeN4r7vQ" target="_blank" rel="nofollow noopener noreferrer">Ep.26 â Vim CDS plugin with new @sap/cds-lsp package</A><BR />
<P style="overflow: hidden;margin-bottom: 0px"><IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2022/01/screenshot-2022-01-27-at-08.02.02.png" /></P><BR />
Now, one might think that this extension is to be installed into your local VS Code installation. But with VS Code's support for development containers, there's an alternative approach, described in the <A href="https://code.visualstudio.com/docs/remote/containers#_managing-extensions" target="_blank" rel="nofollow noopener noreferrer">Managing Extensions</A> section of the <A href="https://code.visualstudio.com/docs/remote/containers" target="_blank" rel="nofollow noopener noreferrer">Developing inside a Container</A> article.<BR />
<BR />
This alternative approach makes sense, in that it distinguishes between extensions that affect VS Code's direct user interface (UI) such as colour and theme extensions, and extensions that provide additional functionality. It also recognises that extensions are often project specific, and it's a good idea to limit the extensions installed to the ones needed for the particular task at hand.<BR />
<BR />
So with the support for developing inside a container, non-UI extensions can be installed when a container is created in the context of VS Code connecting to and using it for remote development. The <A href="https://code.visualstudio.com/docs/remote/containers" target="_blank" rel="nofollow noopener noreferrer">Developing inside a Container</A> article describes a configuration file called <STRONG>devcontainer.json</STRONG> which holds all the configuration for using containers like this.<BR />
<BR />
So with what we have at this point, and according to the configuration file specifications, here's the simplest version that we'd need so far:<BR />
<PRE class="language-javascript"><CODE>{<BR />
  "name": "Tutorial dev container",<BR />
  "build": {<BR />
    "dockerfile": "Dockerfile",<BR />
  }<BR />
}</CODE></PRE><BR />
This is the simplest configuration that could possibly work, and there's more we'll add later but for now, let's just stare at this for a second. What it does is simply point to the Dockerfile, the definition file for the image from which containers are to be created.<BR />
<BR />
So where is that Dockerfile located, and where do we put this devcontainer.json file? By default, VS Code will look for a directory named <STRONG>.devcontainer/</STRONG> and this is where we'll put both files:<BR />
<PRE><CODE>.devcontainer/<BR />
âââ Dockerfile<BR />
âââ devcontainer.json</CODE></PRE><BR />
This directory can live in the root of your project.<BR />
<BR />
So now we have our devcontainer.json configuration file, we can turn our attention back to the task at hand, which is to think about what this prerequisite step is asking us to do, which is to install the SAP CDS Language Support extension. This is not an extension that is designed to directly affect VS Code's UI, and it's quite project-specific (i.e. you'll need it for CAP projects, but not for non-CAP projects). So it's a perfect candidate for associating with the container.<BR />
<BR />
And it's within our new devcontainer.json file that we can specify that this extension should be installed. This is what our devcontainer.json file looks like with this in place:<BR />
<PRE class="language-javascript"><CODE>{<BR />
  "name": "Tutorial dev container",<BR />
  "build": {<BR />
    "dockerfile": "Dockerfile",<BR />
  },<BR />
  "extensions": [<BR />
    "sapse.vscode-cds"<BR />
  ]<BR />
}</CODE></PRE><BR />
In case you're wondering where we get the technical name for the extension from ("sapse.vscode-cds"), it's in the URL of the extension on the Visual Studio Marketplace: <A href="https://marketplace.visualstudio.com/items?itemName=sapse.vscode-cds" target="_blank" rel="nofollow noopener noreferrer">https://marketplace.visualstudio.com/items?itemName=sapse.vscode-cds</A>.<BR />
<H3 id="toc-hId--678470723">Step 10: Install SAP Fiori tools Extension Pack</H3><BR />
Here's another extension to install. In fact, it's an extension pack, which is a collection of multiple extensions: <A href="https://marketplace.visualstudio.com/items?itemName=sapse.sap-ux-fiori-tools-extension-pack" target="_blank" rel="nofollow noopener noreferrer">SAP Fiori Tools - Extension Pack</A>. I'll leave you to peruse the extensions that are included; our task at hand is to ensure that this extension pack also gets installed when VS Code attaches to a container.<BR />
<BR />
To do that, we just add the extension pack identifier (again, taking it from the <A href="https://marketplace.visualstudio.com/items?itemName=SAPSE.sap-ux-fiori-tools-extension-pack" target="_blank" rel="nofollow noopener noreferrer">URL</A>) to the array in our devcontainer.json configuration. Here's what it looks like now:<BR />
<PRE class="language-javascript"><CODE>{<BR />
  "name": "Tutorial dev container",<BR />
  "build": {<BR />
    "dockerfile": "Dockerfile",<BR />
  },<BR />
  "extensions": [<BR />
    "sapse.vscode-cds",<BR />
    "sapse.sap-ux-fiori-tools-extension-pack"<BR />
  ]<BR />
}</CODE></PRE><BR />
<H3 id="toc-hId--950215597">Step 11: Install Yeoman</H3><BR />
The final step in this prerequisites tutorial is to install Yeoman, a tool for scaffolding web apps. This is a Node.js based tool and can be installed like the other tools we've already installed - the ui5 CLI and the CAP tools, i.e. via npm install.<BR />
<BR />
For completeness, let's manually install it inside our current container, just to get a feel for it, and then add the package name "yo" to the list in the RUN line in our Dockerfile.<BR />
<BR />
First, here's installing it in our running test container:<BR />
<PRE><CODE>root â / $ <STRONG>npm install --global yo</STRONG><BR />
npm WARN deprecated har-validator@5.1.5: this library is no longer supported<BR />
npm WARN deprecated uuid@3.4.0: Please upgrade to version 7 or higher. Older versions may use Math.random() in certain circumstances, which is known to be problematic. See <A href="https://v8.dev/blog/math-random" target="test_blank" rel="nofollow noopener noreferrer">https://v8.dev/blog/math-random</A> for details.<BR />
npm WARN deprecated request@2.88.2: request has been deprecated, see <A href="https://github.com/request/request/issues/3142" target="test_blank" rel="nofollow noopener noreferrer">https://github.com/request/request/issues/3142</A><BR />
<BR />
added 728 packages, and audited 729 packages in 55s<BR />
<BR />
53 packages are looking for funding<BR />
run `npm fund` for details<BR />
<BR />
15 vulnerabilities (13 moderate, 2 high)<BR />
<BR />
To address issues that do not require attention, run:<BR />
npm audit fix<BR />
<BR />
To address all issues (including breaking changes), run:<BR />
npm audit fix --force<BR />
<BR />
Run `npm audit` for details.<BR />
npm notice <BR />
npm notice New minor version of npm available! 8.1.2 -&gt; 8.3.2<BR />
npm notice Changelog: <A href="https://github.com/npm/cli/releases/tag/v8.3.2" target="test_blank" rel="nofollow noopener noreferrer">https://github.com/npm/cli/releases/tag/v8.3.2</A><BR />
npm notice Run npm install -g npm@8.3.2 to update!<BR />
npm notice <BR />
root â / $</CODE></PRE><BR />
And adding the package to the list in our Dockerfile means that it now looks like this:<BR />
<PRE><CODE>ARG VARIANT="16-buster" <BR />
FROM mcr.microsoft.com/vscode/devcontainers/javascript-node:${VARIANT}<BR />
<BR />
RUN wget -q -O - <A href="https://packages.cloudfoundry.org/debian/cli.cloudfoundry.org.key" target="test_blank" rel="nofollow noopener noreferrer">https://packages.cloudfoundry.org/debian/cli.cloudfoundry.org.key</A> | apt-key add - ; \<BR />
  echo "deb <A href="https://packages.cloudfoundry.org/debian" target="test_blank" rel="nofollow noopener noreferrer">https://packages.cloudfoundry.org/debian</A> stable main" | tee /etc/apt/sources.list.d/cloudfoundry-cli.list<BR />
<BR />
RUN apt-get update \<BR />
  &amp;&amp; apt-get -y install --no-install-recommends cf7-cli<BR />
<BR />
RUN su node -c "npm install -g @ui5/cli <SPAN id="autocomplete" style="font-size: 1rem"><SPAN id="autocomplete-delimiter">@sap/cds-dk yo</SPAN></SPAN><SPAN style="font-size: 1rem">"</SPAN></CODE></PRE><BR />
<H2 id="toc-hId--853326095">Considering the meta prerequisites</H2><BR />
In a delicious turn of events, this prerequisite tutorial has its own set of prerequisites, which are detailed right at the start:<BR />
<P style="overflow: hidden;margin-bottom: 0px"><IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2022/01/screenshot-2022-01-27-at-09.24.55.png" /></P><BR />
The image upon which our containers are going to be created are Linux based, so we don't need to pay attention to any of the macOS specific prerequisites in this list.<BR />
<BR />
Neither should we need to pay attention to the Windows specific prerequisite (installing sqlite) as on macOS and any normal (i.e. full sized) distribution of Linux, sqlite is installed by default.<BR />
<BR />
But we're running on a cut-down distribution, so we'll need to install sqlite with the Debian package manager. That's easy - all we need to do is add the sqlite package to the apt-get install command in the Dockerfile.<BR />
<BR />
Now our Dockerfile finally looks like this:<BR />
<PRE><CODE>ARG VARIANT="16-buster"<BR />
FROM mcr.microsoft.com/vscode/devcontainers/javascript-node:${VARIANT}<BR />
<BR />
RUN wget -q -O - <A href="https://packages.cloudfoundry.org/debian/cli.cloudfoundry.org.key" target="test_blank" rel="nofollow noopener noreferrer">https://packages.cloudfoundry.org/debian/cli.cloudfoundry.org.key</A> | apt-key add - ; \<BR />
echo "deb <A href="https://packages.cloudfoundry.org/debian" target="test_blank" rel="nofollow noopener noreferrer">https://packages.cloudfoundry.org/debian</A> stable main" | tee /etc/apt/sources.list.d/cloudfoundry-cli.list<BR />
<BR />
RUN apt-get update \<BR />
&amp;&amp; apt-get -y install --no-install-recommends cf7-cli sqlite<BR />
<BR />
RUN su node -c "npm install -g @ui5/cli @sap/cds-dk yo"</CODE></PRE><BR />
<H2 id="toc-hId--1049839600">Giving the image a spin</H2><BR />
We got to the end of the tutorial prerequisite steps and have accounted for all of them that need attention either in the Dockerfile, in the devcontainer.json file. Rather than end this part 2 here, let's have a bit of fun and put our fledgling Dockerfile to the test, manually here, to make sure it holds together.<BR />
<BR />
We'll build an image from it, and start a container based on that image, jumping into a shell environment like we did before. Before we do that, let's exit the existing container (either by entering "exit" or using Ctrl-D at the command line) and it should be automatically removed because of the --rm option we specified when creating it.<BR />
<BR />
Now, back on our host, let's build the image, and give it the imaginative name "tut-image-test":<BR />
<PRE><CODE>; <STRONG>docker build -t tut-image-test .</STRONG><BR />
[+] Building 0.1s (8/8) FINISHED <BR />
=&gt; [internal] load build definition from Dockerfile 0.0s<BR />
=&gt; =&gt; transferring dockerfile: 37B 0.0s<BR />
=&gt; [internal] load .dockerignore 0.0s<BR />
=&gt; =&gt; transferring context: 2B 0.0s<BR />
=&gt; [internal] load metadata for mcr.microsoft.com/vscode/devcontainers/javascript-node:16-buster 0.0s<BR />
=&gt; [1/4] FROM mcr.microsoft.com/vscode/devcontainers/javascript-node:16-buster 0.0s<BR />
=&gt; CACHED [2/4] RUN wget -q -O - <A href="https://packages.cloudfoundry.org/debian/cli.cloudfoundry.org.key" target="test_blank" rel="nofollow noopener noreferrer">https://packages.cloudfoundry.org/debian/cli.cloudfoundry.org.key</A> 0.0s<BR />
=&gt; CACHED [3/4] RUN apt-get update &amp;&amp; apt-get -y install --no-install-recommends cf7-cli sqlite 0.0s<BR />
=&gt; CACHED [4/4] RUN su node -c "npm install -g @ui5/cli @sap/cds-dk yo" 0.0s<BR />
=&gt; exporting to image 0.0s<BR />
=&gt; =&gt; exporting layers 0.0s<BR />
=&gt; =&gt; writing image sha256:57c19dcfd263997e737b723febbf4481bf8f06d7eec3044000b9830716478ac1 0.0s<BR />
=&gt; =&gt; naming to docker.io/library/tut-image-test 0.0s</CODE></PRE><BR />
Now let's take it for a spin. Creating a container from it (again, with the --rm option), asking for the Bash shell, shows us this, where we move from the command line prompt on the host (mine here is a simple ";") to the command line prompt inside the container ("root â / $"):<BR />
<PRE><CODE>; <STRONG>docker run --rm -it tut-image-test bash</STRONG><BR />
root â / $</CODE></PRE><BR />
The moment of truth arrives - does it have everything we need inside it? Let's see:<BR />
<PRE><CODE>root â / $ <STRONG>cf --version</STRONG><BR />
cf version 7.4.0+e55633fed.2021-11-15<BR />
root â / $ <STRONG>sqlite -version</STRONG><BR />
2.8.17<BR />
root â / $ <STRONG>ui5 --version</STRONG><BR />
2.14.4 (from /usr/local/share/npm-global/lib/node_modules/@ui5/cli/bin/ui5.js)<BR />
root â / $ <STRONG>cds --version</STRONG><BR />
@sap/cds: 5.7.3<BR />
@sap/cds-compiler: 2.11.2<BR />
@sap/cds-dk: 4.7.3<BR />
@sap/cds-foss: 3.0.0<BR />
@sap/eslint-plugin-cds: 2.3.0<BR />
Node.js: v16.13.2<BR />
home: /usr/local/share/npm-global/lib/node_modules/@sap/cds-dk/node_modules/@sap/cds<BR />
root â / $ <STRONG>yo --version</STRONG><BR />
4.3.0<BR />
root â / $</CODE></PRE><BR />
<span class="lia-unicode-emoji" title=":party_popper:">ð</span> Excellent!<BR />
<BR />
We have a Docker image that we can create containers from, and the image has all the tools we need according to the prerequisites. We also have a devcontainer.json file that tells VS Code about the container it is to create and connect to, and the extensions to install in that context.<BR />
<BR />
In the third and final part of this series, we'll connect everything together in the context of VS Code, and see where that brings us:<BR />
<BR />
<A href="https://blogs.sap.com/2022/02/01/boosting-tutorial-ux-with-dev-containers-part-3-containers-into-action/" target="_blank" rel="noopener noreferrer">Boosting tutorial UX with dev containers part 3 â containers into action</A><BR />
<BR />
See you there!
---
Boosting tutorial UX with dev containers part 1 - challenge and base solution
technology-blog-sap
2022-01-27
https://community.sap.com/t5/technology-blogs-by-sap/boosting-tutorial-ux-with-dev-containers-part-1-challenge-and-base-solution/ba-p/13540202
2022-01-27-boosting-tutorial-ux-with-dev-containers-part-1-challenge-and-base-solution
<EM>In this three-part series I outline and demonstrate an approach to help newcomers get started more quickly with our tutorials, by describing and providing an environment with all the prerequisite tools installed ready to go. This is part one, where I describe the challenge and the base solution I'm going to go with.</EM><BR />
<BR />
See also the next posts in this three-part series:<BR />
<UL><BR />
 	<LI><A href="https://blogs.sap.com/2022/01/28/boosting-tutorial-ux-with-dev-containers-part-2-embedding-prerequisite-details/" target="_blank" rel="noopener noreferrer">Boosting tutorial UX with dev containers part 2 â embedding prerequisite details</A></LI><BR />
 	<LI><A href="https://blogs.sap.com/2022/02/01/boosting-tutorial-ux-with-dev-containers-part-3-containers-into-action/" target="_blank" rel="noopener noreferrer">Boosting tutorial UX with dev containers part 3 â containers into action</A></LI><BR />
</UL><BR />
I'm a big fan of learning-by-doing, in fact it's in my regular reminder tweets about upcoming Hands-on SAP Dev live stream episodes, like <A href="https://twitter.com/qmacro/status/1486032367877828608" target="_blank" rel="nofollow noopener noreferrer">this one</A>:<BR />
<P style="overflow: hidden;margin-bottom: 0px"><IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2022/01/screenshot-2022-01-26-at-07.32.42.png" height="390" width="472" /></P><BR />
So I'm the first to rejoice in the detail of any tutorial, and what's more, in the detail of any tutorial prerequisites. Each and every activity, whether that's setting things up to learn, or the the intended learning content itself, teaches me something.<BR />
<H2 id="toc-hId-961064229">The challenge and a possible solution</H2><BR />
But sometimes I want to fast forward through the prerequisites, and quickly get to the topic at hand, the actual subject matter of the tutorial I want to follow.<BR />
<BR />
I've been experimenting over the past year with containers (as popularised by the Docker initiative). Containers are small, portable self-contained environments, similar to but much smaller and far more efficient (with far fewer resource requirements) than, say, a virtual machine. For a great intro to containers, you should check out <SPAN class="mention-scrubbed">sygyzmundovych</SPAN> 's series on Understanding Containers, see the Further Reading section at the end of this post.<BR />
<BR />
Most of the time, including the time I spend with you in the <A href="https://www.youtube.com/playlist?list=PL6RpkC85SLQABOpzhd7WI-hMpy99PxUo0" target="_blank" rel="nofollow noopener noreferrer">Hands-on SAP Dev live streams</A>, I live and work in the terminal. Not just any terminal, mind you - a terminal inside a container. It's a container that I create from an image that I've defined over the months, that's based on Debian and contains all the tools I need to work comfortably and efficiently.<BR />
<P style="overflow: hidden;margin-bottom: 0px"><IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2022/01/screenshot-2022-01-26-at-12.30.50.png" /></P><BR />
It gives me independence from the underlying operating system of my local machine (sometimes I even run it on a <A href="https://qmacro.org/2021/06/12/remote-access-to-docker-on-my-synology-nas/" target="_blank" rel="nofollow noopener noreferrer">remote Docker engine</A>), allows me to throw the environment away and start again nice and clean, and stops me from polluting my host operating systems with layers of software that are hard to remove.<BR />
<BR />
So it occurred to me that, especially with the advent of VS Code's support for <A href="https://code.visualstudio.com/docs/remote/containers-tutorial" target="_blank" rel="nofollow noopener noreferrer">remote development in containers</A>, it would be an interesting experiment to see if the two worlds could complement each other.<BR />
<BR />
In other words - could I use containers to help those, who want to get directly to the actual learning content of a tutorial, get there quicker?<BR />
<H2 id="toc-hId-764550724">Testing the solution out on a tutorial</H2><BR />
I'm a fan of CAP development, and the tutorials on this in our <A href="https://developers.sap.com/tutorial-navigator.html" target="_blank" rel="noopener noreferrer">Tutorial Navigator</A> are great. For this experiment, I decided to focus on one particular tutorial: <A href="https://developers.sap.com/tutorials/btp-app-set-up-local-development.html" target="_blank" rel="noopener noreferrer">Set Up Local Development Using VS Code</A>.<BR />
<BR />
For orientation, this tutorial sits within a group, which itself sits within a mission, as illustrated here:<BR />
<P style="overflow: hidden;margin-bottom: 0px"><IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2022/01/screenshot-2022-01-26-at-08.00.14.png" /></P><BR />
The screenshot shows 11 steps in the "Set Up Local Development Using VS Code" tutorial on the right hand side that help you get set up and ready to be able to work through the learning content in the actual mission (building an application end-to-end).<BR />
<BR />
Software development today, especially of full stack applications with multiple systems and services, in the cloud, involves lots of different tools and skills, and this is reflected in the prerequisites.<BR />
<BR />
I would encourage anyone and everyone to work their own way through the steps in this this setup tutorial; it's a rich source of information and helps you understand what's required. It also helps you think about your own development environment, what you need, and what you might want.<BR />
<BR />
But I also want to encourage you to think about how to streamline such an environment, and what the next level of developer workflow and productivity might look like.<BR />
<BR />
So in this short series of posts, I'll work through defining and building a development container that has all the prerequisites for this mission set up for you. Not only that, this container will be relevant for you regardless of your actual local machine, whether that's a PC or a laptop, whether that's running macOS, some distribution of Linux, Chrome OS, or even Windows. All that's needed is a Docker engine, such as Docker Desktop or <A href="https://blog.logrocket.com/top-docker-alternatives-2022/" target="_blank" rel="nofollow noopener noreferrer">something similar such as Podman</A> and VS Code itself.<BR />
<H2 id="toc-hId-568037219">A brief note on terminology</H2><BR />
A container is what you work with, what you connect to or even jump into to use the tools within it and carry out your development work. A container is created from an image; you could say that it's an "instance" of an image. To talk of defining a container is really to talk about defining an image.<BR />
<H2 id="toc-hId-371523714">Defining the image</H2><BR />
The goal here is to define an image that:<BR />
<UL><BR />
 	<LI>can be connected to and utilised from VS Code</LI><BR />
 	<LI>contains all the tools needed for a particular project or tutorial</LI><BR />
</UL><BR />
Let's work through the tutorial steps and see what we need to do. Note that this flow is based on the version of the tutorial today, which is at <A href="https://github.com/sap-tutorials/Tutorials/blob/ea9e51a1adccf18bdc9328406e7fa939f8d3616b/tutorials/btp-app-set-up-local-development/btp-app-set-up-local-development.md" target="_blank" rel="nofollow noopener noreferrer">commit ea9e51a</A> in the source repository.<BR />
<H3 id="toc-hId-304092928">Base image</H3><BR />
Before we start, we should decide on a base image upon which to build our definition. As we'll be connecting to it with VS Code it makes sense to start with one in that context; in fact, as we can see from the tutorial, it's a Node.js CAP application that we'll be building.<BR />
<BR />
There's a set of base Dockerfile definitions available in the <A href="https://github.com/microsoft/vscode-dev-containers" target="_blank" rel="nofollow noopener noreferrer">vscode-dev-containers</A> repository, and after a little reading we see that <A href="https://github.com/microsoft/vscode-dev-containers/blob/v0.187.0/containers/javascript-node/.devcontainer/base.Dockerfile" target="_blank" rel="nofollow noopener noreferrer">this base.Dockerfile definition</A> suits our needs. It contains Node.js, but also a complete environment that is based on the Debian Linux distribution.<BR />
<BR />
Looking at the <A href="https://github.com/microsoft/vscode-dev-containers/tree/main/containers/javascript-node" target="_blank" rel="nofollow noopener noreferrer">reference page</A>, we see that the published image name is <STRONG>mcr.microsoft.com/vscode/devcontainers/javascript-node</STRONG> and there are various image variants available:<BR />
<P style="overflow: hidden;margin-bottom: 0px"><IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2022/01/screenshot-2022-01-26-at-11.07.38.png" /></P><BR />
We'll go for the <STRONG>16-buster</STRONG> variant - <A href="https://nodejs.org/en/about/releases/" target="_blank" rel="nofollow noopener noreferrer">Node.js v16</A>, which is the active Long Term Support&nbsp; (LTS) version, based on one of my favourite recent stable Debian releases, <A href="https://www.debian.org/releases/buster/" target="_blank" rel="nofollow noopener noreferrer">buster</A>.<BR />
<BR />
Before continuing, we can actually test this base image quite easily, and it will give us a feel for what we are using.<BR />
<BR />
Let's pull the image first:<BR />
<PRE><CODE>; <STRONG>docker pull mcr.microsoft.com/vscode/devcontainers/javascript-node:16-buster</STRONG><BR />
16-buster: Pulling from vscode/devcontainers/javascript-node<BR />
9b99af5931b3: Pull complete <BR />
b6013b3e77fe: Pull complete <BR />
bbced17b6899: Pull complete <BR />
8b609dabefa8: Pull complete <BR />
50544bfef33d: Pull complete <BR />
fea3f8b8e075: Pull complete <BR />
9e4e229021ee: Pull complete <BR />
971c8efc250b: Pull complete <BR />
3e9d4bc41c27: Pull complete <BR />
28732f89a0aa: Pull complete <BR />
186abc813d19: Pull complete <BR />
Digest: sha256:75f31402fe36ac2b24f4838a7609afd75371378c6261b84eda0c1ece32e165f1<BR />
Status: Downloaded newer image for mcr.microsoft.com/vscode/devcontainers/javascript-node:16-buster<BR />
mcr.microsoft.com/vscode/devcontainers/javascript-node:16-buster</CODE></PRE><BR />
Now what happens when we run it without passing any parameters?<BR />
<PRE><CODE># /tmp<BR />
; <STRONG>docker run --rm -it mcr.microsoft.com/vscode/devcontainers/javascript-node:16-buster</STRONG><BR />
Welcome to Node.js v16.13.2.<BR />
Type ".help" for more information.<BR />
&gt;</CODE></PRE><BR />
Nice! We get a Node.js prompt.<BR />
<BR />
But we can also dig in a little further, and ask for a shell:<BR />
<PRE><CODE># /tmp<BR />
; <STRONG>docker run --rm -it mcr.microsoft.com/vscode/devcontainers/javascript-node:16-buster bash</STRONG><BR />
root â / $</CODE></PRE><BR />
Even nicer! Access to a Bash shell (The One True Shell<span class="lia-unicode-emoji" title=":trade_mark:">â¢ï¸</span>) is super useful, and there's even <A href="https://github.com/microsoft/vscode-dev-containers/blob/v0.187.0/containers/javascript-node/.devcontainer/base.Dockerfile#L6" target="_blank" rel="nofollow noopener noreferrer">zsh available</A> if you're that way inclined.<BR />
<BR />
So that's the base upon which we are to build. A good start. We have Node.js and a command line environment. These are the two essential ingredients for this tutorial. A Node.js runtime for our app, and a command line environment <A href="https://blogs.sap.com/tag/thefutureisterminal/" target="_blank" rel="noopener noreferrer">within which to work</A> and where we can install and use other tools and utilities, both SAP-specific and more general too.<BR />
<BR />
While we can use this image reference <STRONG>mcr.microsoft.com/vscode/devcontainers/javascript-node</STRONG> directly, we should really start our own definition file, our own Dockerfile - which is the recipe, the definition, for the image we want to build.<BR />
<BR />
So let's start with a very simple Dockerfile that uses this image reference as a base (note that the standard name is just "Dockerfile" with no extension - beware any Windows tools that insist on being "helpful" by adding one):<BR />
<PRE><CODE>ARG VARIANT="16-buster"<BR />
FROM mcr.microsoft.com/vscode/devcontainers/javascript-node:${VARIANT}</CODE></PRE><BR />
Here we've split off the variant part of the image reference to be the value of an ARG, so we can more easily modify it in future. Implicitly this also teaches us a couple of things about the Dockerfile syntax:<BR />
<UL><BR />
 	<LI>with <A href="https://docs.docker.com/engine/reference/builder/#arg" target="_blank" rel="nofollow noopener noreferrer">ARG</A> you can define a variable, with a default value which can be overridden at build time with a new value passed on the command line</LI><BR />
 	<LI>the ${...} syntax is how you reference values of variables elsewhere</LI><BR />
</UL><BR />
So unless we specify something explicitly on the command line when we run the build for this Dockerfile (with --build-arg VARIANT=something-else), the image that will be used as the base will be <STRONG>mcr.microsoft.com/vscode/devcontainers/javascript-node:16-buster.</STRONG><BR />
<H2 id="toc-hId--21503296">Next steps</H2><BR />
OK.&nbsp;What else do we need? Well, to answer that, let's take a look through the steps of the <A href="https://developers.sap.com/tutorials/btp-app-set-up-local-development.html" target="_blank" rel="noopener noreferrer">prerequisite tutorial</A> itself. But we'll do that in part 2:<BR />
<BR />
<A href="https://blogs.sap.com/2022/01/28/boosting-tutorial-ux-with-dev-containers-part-2-embedding-prerequisite-details/" target="_blank" rel="noopener noreferrer">Boosting tutorial UX with dev containers part 2 â embedding prerequisite details</A><BR />
<BR />
See you there!<BR />
<H2 id="toc-hId--218016801">Further Reading</H2><BR />
<UL><BR />
 	<LI><A href="https://blogs.sap.com/tag/understandcontainers/" target="_blank" rel="noopener noreferrer">Understanding Containers</A> (from <SPAN class="mention-scrubbed">vitaliy.rudnytskiy</SPAN>)</LI><BR />
 	<LI><A href="https://blogs.sap.com/2020/02/20/develop-sap-cap-apps-inside-a-vs-code-docker-container/" target="_blank" rel="noopener noreferrer">Develop SAP CAP apps inside a VS Code Docker Container</A> (from <SPAN class="mention-scrubbed">helmut.tammen2</SPAN>)</LI><BR />
</UL>
---
Getting BTP resource GUIDs with the btp CLI â part 2 - JSON and jq
technology-blog-sap
2021-12-01
https://community.sap.com/t5/technology-blogs-by-sap/getting-btp-resource-guids-with-the-btp-cli-part-2-json-and-jq/ba-p/13517574
2021-12-01-getting-btp-resource-guids-with-the-btp-cli-part-2-json-and-jq
<EM>In this second part of a 2-part blog post series on getting BTP resource GUIDs with the btp CLI, we look at how the CLI supports JSON output, why it's a good choice, and how to parse that.</EM><BR />
<BR />
If you haven't done already, take a look at <A href="https://blogs.sap.com/2021/11/24/getting-btp-resource-guids-with-the-btp-cli-part-1/" target="_blank" rel="noopener noreferrer">part 1</A> before reading this part.<BR />
<H2 id="the-unix-philosophy-and-alternative-output-formats" id="toc-hId-958505305">The Unix philosophy and alternative output formats</H2><BR />
The <A href="https://en.wikipedia.org/wiki/Unix_philosophy" target="_blank" rel="nofollow noopener noreferrer">Unix philosophy</A> is all about small programs, joined loosely together. It's about composability*, not monolithic constructs.<BR />
<BR />
* It is not lost on me that composability is also a key feature of the functional programming paradigm, which has a similar beauty to me.<BR />
<BR />
This approach to executing programs, using the power of <A href="https://tldp.org/LDP/abs/html/io-redirection.html" target="_blank" rel="nofollow noopener noreferrer">input / output redirection</A> &amp; pipelines and employing a handful of small, focused &amp; powerful tools has been with us for almost half a century now and is at the heart of the dominant operating system powering the cloud.<BR />
<BR />
More recently, we've been seeing a need to deal with resources which have structure that is sometimes more complex than can be described in mostly record-oriented plain text. In parallel, we're seeing declarative approaches to devops and system resource management (such as Kubernetes cluster definitions, infrastructure-as-code, and so on), with those declarative constructs expressing complex relationships and interdependencies.<BR />
<BR />
The approach to encapsulate machine-readable definitions of such resources and definitions has been to employ formats such as JSON and YAML.<BR />
<BR />
These formats lend themselves well to describing requirements, but also to representing structure. With the myriad resources on SAP Business Technology Platform, there are relationships that need to be expressed, conveying inherent structure that is fundamental to the understanding and operation of those resources.<BR />
<BR />
And so, like many of today's command line tools, the btp CLI has the ability to express the output in a format that can reliably, predictably and cleanly convey that structure. This ability comes in the form of a general option:<BR />
<PRE><CODE>--format json</CODE></PRE><BR />
You can read more about this option in the <A href="https://help.sap.com/products/BTP/65de2977205c403bbc107264b8eccf4b/dcb85b7dea61432cbafaab4ce0ec9b08.html?locale=en-US" target="_blank" rel="noopener noreferrer">Change the Output Format to JSON</A> section in the SAP Help Portal. In our Hands-on SAP Dev show, specifically within the <A href="https://www.youtube.com/playlist?list=PL6RpkC85SLQDXx827kdjKc6HRvdMRZ8P5" target="_blank" rel="nofollow noopener noreferrer">SAP btp CLI</A> series, there's an episode <A href="https://www.youtube.com/watch?v=xRmHZGk4QCU&amp;list=PL6RpkC85SLQDXx827kdjKc6HRvdMRZ8P5&amp;index=3" target="_blank" rel="nofollow noopener noreferrer">Scripting and JSON output with btp, the SAP Business Technology Platform CLI</A> where we cover exactly this.<BR />
<H2 id="plain-text-vs-json" id="toc-hId-761991800">Plain text vs JSON?</H2><BR />
The question clearly arises - when should I use this option? In some philosophical ways, JSON output flows against the original Unix Philosophy, but there are most certainly pragmatic reasons why it's employed. If you're interested in reading more, I highly recommend <A href="https://blog.kellybrazil.com/2019/11/26/bringing-the-unix-philosophy-to-the-21st-century/" target="_blank" rel="nofollow noopener noreferrer">Bringing the Unix Philosophy to the 21st Century</A> which not only is a good read, but also introduces a generic tool <CODE>jc</CODE> that is certainly fascinating and not a little thought provoking.<BR />
<BR />
So, back to the question. As far as the btp CLI is concerned, let's put it this way:<BR />
<UL><BR />
 	<LI>if you're using it interactively, as a human, then the plain text output is fine of course</LI><BR />
 	<LI>if you're using it non-interactively, such as in a script, then the recommendation is to use the JSON output format</LI><BR />
</UL><BR />
For non-interactive use, where you're going to want to extract information from the output of a btp CLI command, this makes sense because the JSON output is going to be more stable, more reliable and more predictable. The plain text output may change over time, but the btp CLI team are making a big effort, and an intentional one, to provide that stability.<BR />
<BR />
Of course, for quick one-off pipeline constructs on the command line, I may still use the plain text output and some traditional Unix tools to parse and extract information from the output. But for longer lived tasks, scripts and so on, I will more likely reach for the JSON output format.<BR />
<H2 id="parsing-json-on-the-command-line" id="toc-hId-565478295">Parsing JSON on the command line</H2><BR />
The tool of choice for parsing JSON on the command line is <A href="https://stedolan.github.io/jq/" target="_blank" rel="nofollow noopener noreferrer">jq</A>, which the author describes as "a lightweight and flexible command-line JSON processor".<BR />
<BR />
I've written about <CODE>jq</CODE> before in various blog posts and also covered it in some of the Hands-on SAP Dev <A href="https://blogs.sap.com/2020/11/09/an-overview-of-sap-developers-video-content/#shows" target="_blank" rel="noopener noreferrer">show</A> episodes - pick one that appeals to you from <A href="https://www.google.com/search?q=site%3Ablogs.sap.com+JSON+%22jq%22" target="_blank" rel="nofollow noopener noreferrer">this quick list of search results for mention of JSON and jq on this site</A> to read more.<BR />
<H2 id="revisiting-the-hierarchy-output" id="toc-hId-368964790">Revisiting the hierarchy output</H2><BR />
In <A href="https://blogs.sap.com/2021/11/24/getting-btp-resource-guids-with-the-btp-cli-part-1/" target="_blank" rel="noopener noreferrer">Getting BTP resource GUIDs with the btp CLI â part 1</A>, the first part of this two-part series, I explained how I used various tools to extract the GUIDs for resources shown in the output of this command:<BR />
<PRE><CODE>btp get accounts/global-account --show-hierarchy</CODE></PRE><BR />
The output that this command produces looks something like this:<BR />
<PRE><CODE>Showing details for global account af39080b-1527-40a1-b78a-3b605af7e811...<BR />
<BR />
ââ c35b11e4trial (af39080b-1527-40a1-b78a-3b605af7e811 - global account)<BR />
â  ââ trial (b6501bff-e0ac-4fdf-8898-81f305d25335 - subaccount)<BR />
â  ââ techedhouse (e57c5b13-9480-4a68-9c04-a603d7a017a9 - directory)<BR />
<BR />
type:            id:                                    display name:   parent id:<BR />
global account   af39080b-1527-40a1-b78a-3b605af7e811   c35b11e4trial<BR />
subaccount       b6501bff-e0ac-4fdf-8898-81f305d25335   trial           af39080b-...<BR />
directory        e57c5b13-9480-4a68-9c04-a603d7a017a9   techedhouse     af39080b-...</CODE></PRE><BR />
While it was definitely possible to consistently extract the GUIDs using the approach I took, there are other similar extraction tasks in this area that might be more troublesome.<BR />
<BR />
For example, if I wanted to grab the display names of all the subaccounts in my global account, the parsing and extraction would be similar; I'd pull the output apart using whitespace as boundaries and get the job done that way. However, if a display name contained a space, which is valid, I'd start to struggle. How would I know if that space was the column boundary, or just part of the value in that column? I could resort to some sort of column-oriented slicing of the rows, but that's most likely just asking for trouble, making the parsing and extracting more brittle.<BR />
<H2 id="parsing-brittle-plain-text-output-vs-complex-json-output" id="toc-hId-172451285">Parsing brittle plain text output vs complex JSON output</H2><BR />
Recently, on my Autodidactics blog, I wrote about this very challenge of parsing text output that was brittle in the post <A href="https://qmacro.org/autodidactics/2021/10/29/embracing-jq-and-json/" target="_blank" rel="nofollow noopener noreferrer">Embracing jq and JSON</A> (see <A href="#where-i-write-my-posts" target="_blank" rel="nofollow noopener noreferrer">Where I write my posts</A> for more info). The subject at hand was the same - the ouptut of <CODE>btp get account/global-account --show-hierarchy</CODE>, although what I was trying to extract was slightly different. Most importantly though, it demonstrated that correctly and reliably extracting a value with spaces (the resource display name 'this and that') was not straightforward.<BR />
<BLOCKQUOTE>Some of you may think, and I'd agree, that one way that this would normally be tackled is to use tabs as field separators; this would address the situation and is indeed a standard part of how the Unix toolchain operates - look at what the default delimiter is for the <A href="https://man7.org/linux/man-pages/man1/cut.1.html" target="_blank" rel="nofollow noopener noreferrer">cut</A> command, for example.</BLOCKQUOTE><BR />
What it also demonstrated was that taking the JSON output approach was preferable. Initially, as I described in that post, the prospect was a little daunting, as the structure represented in JSON consisted of nested arrays of objects. But a little digging into the <A href="https://stedolan.github.io/jq/manual/" target="_blank" rel="nofollow noopener noreferrer">jq manual</A> showed me functions that would help out.<BR />
<BR />
So what I want to do here is find a drop-in replacement for these two lines that we looked at in detail in <A href="https://blogs.sap.com/2021/11/24/getting-btp-resource-guids-with-the-btp-cli-part-1/" target="_blank" rel="noopener noreferrer">part 1</A>:<BR />
<DIV><BR />
<PRE class="sourceCode bash"><CODE class="sourceCode bash"><SPAN id="cb4-1"><SPAN class="va">hierarchy</SPAN><SPAN class="op">=</SPAN><SPAN class="st">"</SPAN><SPAN class="va">$(</SPAN><SPAN class="ex">gethier</SPAN><SPAN class="va">)</SPAN><SPAN class="st">"</SPAN> <SPAN class="kw">||</SPAN> <SPAN class="kw">{</SPAN> <SPAN class="ex">btp</SPAN> login <SPAN class="kw">&amp;&amp;</SPAN> <SPAN class="va">hierarchy</SPAN><SPAN class="op">=</SPAN><SPAN class="st">"</SPAN><SPAN class="va">$(</SPAN><SPAN class="ex">gethier</SPAN><SPAN class="va">)</SPAN><SPAN class="st">"</SPAN><SPAN class="kw">;</SPAN> <SPAN class="kw">}</SPAN></SPAN><BR />
<SPAN id="cb4-2"><SPAN class="bu">read</SPAN> <SPAN class="at">-r</SPAN> <SPAN class="va">subtype</SPAN> <SPAN class="va">guid</SPAN> <SPAN class="op">&lt;&lt;&lt;</SPAN> <SPAN class="st">"</SPAN><SPAN class="va">$(</SPAN><SPAN class="fu">grep</SPAN> <SPAN class="at">-P</SPAN> <SPAN class="at">-o</SPAN> <SPAN class="st">"^(subaccount|directory)\s+(\S+)(?=\s+</SPAN><SPAN class="va">$displayname</SPAN><SPAN class="st">)"</SPAN> <SPAN class="op">&lt;&lt;&lt;</SPAN> <SPAN class="st">"</SPAN><SPAN class="va">$hierarchy</SPAN><SPAN class="st">"</SPAN><SPAN class="va">)</SPAN><SPAN class="st">"</SPAN></SPAN></CODE></PRE><BR />
</DIV><BR />
That replacement is to use the JSON format output from the <CODE>btp</CODE> command. Let's start by examining what that looks like.<BR />
<H3 id="the-hierarchy-in-json-format" id="toc-hId-105020499">The hierarchy in JSON format</H3><BR />
While we know what the plain text output looks like from <CODE>btp get accounts/global-account --show-hierarchy</CODE>, the JSON output looks like this (I've removed some properties that are not relevant, to keep the JSON small enough to stare at in one go):<BR />
<DIV><BR />
<PRE class="sourceCode json"><CODE class="sourceCode json"><SPAN id="cb5-1"><SPAN class="fu">{</SPAN></SPAN><BR />
<SPAN id="cb5-2">  <SPAN class="dt">"guid"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="st">"c63c501e-e589-467d-8875-1821927ea713"</SPAN><SPAN class="fu">,</SPAN></SPAN><BR />
<SPAN id="cb5-3">  <SPAN class="dt">"displayName"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="st">"1a99110dtrial"</SPAN><SPAN class="fu">,</SPAN></SPAN><BR />
<SPAN id="cb5-4">  <SPAN class="dt">"children"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="ot">[</SPAN></SPAN><BR />
<SPAN id="cb5-5">    <SPAN class="fu">{</SPAN></SPAN><BR />
<SPAN id="cb5-6">      <SPAN class="dt">"guid"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="st">"2558794c-f8cd-4422-b071-3b21c2922a02"</SPAN><SPAN class="fu">,</SPAN></SPAN><BR />
<SPAN id="cb5-7">      <SPAN class="dt">"parentGuid"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="st">"c63c501e-e589-467d-8875-1821927ea713"</SPAN><SPAN class="fu">,</SPAN></SPAN><BR />
<SPAN id="cb5-8">      <SPAN class="dt">"parentType"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="st">"ROOT"</SPAN><SPAN class="fu">,</SPAN></SPAN><BR />
<SPAN id="cb5-9">      <SPAN class="dt">"globalAccountGUID"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="st">"c63c501e-e589-467d-8875-1821927ea713"</SPAN><SPAN class="fu">,</SPAN></SPAN><BR />
<SPAN id="cb5-10">      <SPAN class="dt">"displayName"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="st">"techedhouse"</SPAN><SPAN class="fu">,</SPAN></SPAN><BR />
<SPAN id="cb5-11">      <SPAN class="dt">"stateMessage"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="st">"Directory created."</SPAN><SPAN class="fu">,</SPAN></SPAN><BR />
<SPAN id="cb5-12">      <SPAN class="dt">"subdomain"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="st">"2558794c-f8cd-4422-b071-3b21c2922a02"</SPAN><SPAN class="fu">,</SPAN></SPAN><BR />
<SPAN id="cb5-13">      <SPAN class="dt">"directoryType"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="st">"PROJECT"</SPAN><SPAN class="fu">,</SPAN></SPAN><BR />
<SPAN id="cb5-14">      <SPAN class="dt">"directoryFeatures"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="ot">[</SPAN></SPAN><BR />
<SPAN id="cb5-15">        <SPAN class="st">"DEFAULT"</SPAN><SPAN class="ot">,</SPAN></SPAN><BR />
<SPAN id="cb5-16">        <SPAN class="st">"ENTITLEMENTS"</SPAN><SPAN class="ot">,</SPAN></SPAN><BR />
<SPAN id="cb5-17">        <SPAN class="st">"AUTHORIZATIONS"</SPAN></SPAN><BR />
<SPAN id="cb5-18">      <SPAN class="ot">]</SPAN><SPAN class="fu">,</SPAN></SPAN><BR />
<SPAN id="cb5-19">      <SPAN class="dt">"subaccounts"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="ot">[</SPAN></SPAN><BR />
<SPAN id="cb5-20">        <SPAN class="fu">{</SPAN></SPAN><BR />
<SPAN id="cb5-21">          <SPAN class="dt">"guid"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="st">"3ea88c9c-010b-4bf0-9fdb-5c29c9087660"</SPAN><SPAN class="fu">,</SPAN></SPAN><BR />
<SPAN id="cb5-22">          <SPAN class="dt">"displayName"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="st">"messaging"</SPAN><SPAN class="fu">,</SPAN></SPAN><BR />
<SPAN id="cb5-23">          <SPAN class="dt">"globalAccountGUID"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="st">"c63c501e-e589-467d-8875-1821927ea713"</SPAN><SPAN class="fu">,</SPAN></SPAN><BR />
<SPAN id="cb5-24">          <SPAN class="dt">"parentGUID"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="st">"2558794c-f8cd-4422-b071-3b21c2922a02"</SPAN><SPAN class="fu">,</SPAN></SPAN><BR />
<SPAN id="cb5-25">          <SPAN class="dt">"parentType"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="st">"PROJECT"</SPAN><SPAN class="fu">,</SPAN></SPAN><BR />
<SPAN id="cb5-26">          <SPAN class="dt">"parentFeatures"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="ot">[</SPAN></SPAN><BR />
<SPAN id="cb5-27">            <SPAN class="st">"DEFAULT"</SPAN><SPAN class="ot">,</SPAN></SPAN><BR />
<SPAN id="cb5-28">            <SPAN class="st">"ENTITLEMENTS"</SPAN><SPAN class="ot">,</SPAN></SPAN><BR />
<SPAN id="cb5-29">            <SPAN class="st">"AUTHORIZATIONS"</SPAN></SPAN><BR />
<SPAN id="cb5-30">          <SPAN class="ot">]</SPAN><SPAN class="fu">,</SPAN></SPAN><BR />
<SPAN id="cb5-31">          <SPAN class="dt">"region"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="st">"us10"</SPAN><SPAN class="fu">,</SPAN></SPAN><BR />
<SPAN id="cb5-32">          <SPAN class="dt">"subdomain"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="st">"20b8636b-af4c-4c42-b79b-780763663fbb"</SPAN><SPAN class="fu">,</SPAN></SPAN><BR />
<SPAN id="cb5-33">          <SPAN class="dt">"stateMessage"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="st">"Subaccount created."</SPAN></SPAN><BR />
<SPAN id="cb5-34">        <SPAN class="fu">}</SPAN></SPAN><BR />
<SPAN id="cb5-35">      <SPAN class="ot">]</SPAN></SPAN><BR />
<SPAN id="cb5-36">    <SPAN class="fu">}</SPAN></SPAN><BR />
<SPAN id="cb5-37">  <SPAN class="ot">]</SPAN><SPAN class="fu">,</SPAN></SPAN><BR />
<SPAN id="cb5-38">  <SPAN class="dt">"subdomain"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="st">"1a99110dtrial-ga"</SPAN><SPAN class="fu">,</SPAN></SPAN><BR />
<SPAN id="cb5-39">  <SPAN class="dt">"subaccounts"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="ot">[</SPAN></SPAN><BR />
<SPAN id="cb5-40">    <SPAN class="fu">{</SPAN></SPAN><BR />
<SPAN id="cb5-41">      <SPAN class="dt">"guid"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="st">"00516298-b174-418e-9824-8824de04bfa3"</SPAN><SPAN class="fu">,</SPAN></SPAN><BR />
<SPAN id="cb5-42">      <SPAN class="dt">"displayName"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="st">"trial"</SPAN><SPAN class="fu">,</SPAN></SPAN><BR />
<SPAN id="cb5-43">      <SPAN class="dt">"globalAccountGUID"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="st">"c63c501e-e589-467d-8875-1821927ea713"</SPAN><SPAN class="fu">,</SPAN></SPAN><BR />
<SPAN id="cb5-44">      <SPAN class="dt">"parentGUID"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="st">"c63c501e-e589-467d-8875-1821927ea713"</SPAN><SPAN class="fu">,</SPAN></SPAN><BR />
<SPAN id="cb5-45">      <SPAN class="dt">"parentType"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="st">"ROOT"</SPAN><SPAN class="fu">,</SPAN></SPAN><BR />
<SPAN id="cb5-46">      <SPAN class="dt">"region"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="st">"eu10"</SPAN><SPAN class="fu">,</SPAN></SPAN><BR />
<SPAN id="cb5-47">      <SPAN class="dt">"subdomain"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="st">"1a99110dtrial"</SPAN></SPAN><BR />
<SPAN id="cb5-48">    <SPAN class="fu">}</SPAN></SPAN><BR />
<SPAN id="cb5-49">  <SPAN class="ot">]</SPAN><SPAN class="fu">,</SPAN></SPAN><BR />
<SPAN id="cb5-50">  <SPAN class="dt">"licenseType"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="st">"TRIAL"</SPAN></SPAN><BR />
<SPAN id="cb5-51"><SPAN class="fu">}</SPAN></SPAN></CODE></PRE><BR />
</DIV><BR />
Here are a few interesting points to notice:<BR />
<UL><BR />
 	<LI>the hierarchy is expressed via sub-nodes via two properties - <CODE>children</CODE> (which are directories) and <CODE>subaccounts</CODE></LI><BR />
 	<LI>each object that is either a directory or a subaccount has a <CODE>guid</CODE> property, which is what we're ultimately looking for</LI><BR />
 	<LI>there's a <CODE>directoryType</CODE> property on the directory objects, with a value of <CODE>PROJECT</CODE></LI><BR />
 	<LI>the subaccount objects don't have a <CODE>directoryType</CODE> property but do have a <CODE>region</CODE> property and value</LI><BR />
</UL><BR />
Moreover, the nesting depth of each of these directory and subaccount objects depends on where they sit in the actual hierarchy. So we have our work cut out to parse this, right?<BR />
<H3 id="rolling-our-jq-sleeves-up" id="toc-hId--91493006">Rolling our jq sleeves up</H3><BR />
Well, if you took a look at the <A href="https://qmacro.org/autodidactics/2021/10/29/embracing-jq-and-json/" target="_blank" rel="nofollow noopener noreferrer">Embracing jq and JSON</A> post mentioned earlier, you'll know that it's not as bad as it first seems. Let's work through parsing this, step by step. The general idea is to flatten the structure, identify the objects in there, pick out the potential objects that might match, narrow down further, and then we have what we're looking for.<BR />
<BR />
For the sake of exploration, let's assume we have the JSON above in a file called <CODE>hierarchy.json</CODE>.<BR />
<H4 id="step-1---flatten-the-structure" id="toc-hId--158923792">Step 1 - flatten the structure</H4><BR />
To flatten the struture, I've taken to using the <CODE>recurse</CODE> function; here's what it does (a lot of the output has been omitted for brevity):<BR />
<PRE><CODE>; jq 'recurse' hierarchy.json<BR />
{<BR />
  "guid": "c63c501e-e589-467d-8875-1821927ea713",<BR />
  "displayName": "1a99110dtrial",<BR />
  "children": [<BR />
    {<BR />
      "guid": "2558794c-f8cd-4422-b071-3b21c2922a02",<BR />
      "parentGuid": "c63c501e-e589-467d-8875-1821927ea713",<BR />
      "parentType": "ROOT",<BR />
      "globalAccountGUID": "c63c501e-e589-467d-8875-1821927ea713",<BR />
      "displayName": "techedhouse",<BR />
      ...<BR />
"2558794c-f8cd-4422-b071-3b21c2922a02"<BR />
"c63c501e-e589-467d-8875-1821927ea713"<BR />
"ROOT"<BR />
"c63c501e-e589-467d-8875-1821927ea713"<BR />
"techedhouse"<BR />
"Directory created."<BR />
"2558794c-f8cd-4422-b071-3b21c2922a02"<BR />
"PROJECT"<BR />
[<BR />
  "DEFAULT",<BR />
  "ENTITLEMENTS",<BR />
  "AUTHORIZATIONS"<BR />
]<BR />
"c63c501e-e589-467d-8875-1821927ea713"<BR />
"ROOT"<BR />
"eu10"<BR />
"1a99110dtrial"<BR />
"TRIAL"</CODE></PRE><BR />
As you can see, it descends the entire structure and emits everything it finds. This is a little too much, as non-objects are also emitted as the recursive descent progresses. Let's address that.<BR />
<H4 id="step-2---identify-the-objects" id="toc-hId--355437297">Step 2 - identify the objects</H4><BR />
To narrow down this large amount of output to just the objects, we can use the aptly named <CODE>objects</CODE> function which will emit only objects that pass through it, discarding anything else (like those simple strings such as "ROOT", "eu10" and "1a99110dtrial" we see above). Here we go:<BR />
<PRE><CODE>; jq 'recurse | objects'<BR />
{<BR />
  "guid": "c63c501e-e589-467d-8875-1821927ea713",<BR />
  "displayName": "1a99110dtrial",<BR />
  "children": [<BR />
    {<BR />
      "guid": "2558794c-f8cd-4422-b071-3b21c2922a02",<BR />
      "parentGuid": "c63c501e-e589-467d-8875-1821927ea713",<BR />
      "parentType": "ROOT",<BR />
      "globalAccountGUID": "c63c501e-e589-467d-8875-1821927ea713",<BR />
      "displayName": "techedhouse",<BR />
      "stateMessage": "Directory created.",<BR />
      "subdomain": "2558794c-f8cd-4422-b071-3b21c2922a02",<BR />
      "directoryType": "PROJECT",<BR />
      "directoryFeatures": [<BR />
        "DEFAULT",<BR />
        "ENTITLEMENTS",<BR />
        "AUTHORIZATIONS"<BR />
      ],<BR />
      "subaccounts": [<BR />
        {<BR />
          "guid": "3ea88c9c-010b-4bf0-9fdb-5c29c9087660",<BR />
          "displayName": "messaging",<BR />
          "globalAccountGUID": "c63c501e-e589-467d-8875-1821927ea713",<BR />
          "parentGUID": "2558794c-f8cd-4422-b071-3b21c2922a02",<BR />
          "parentType": "PROJECT",<BR />
          "parentFeatures": [<BR />
            "DEFAULT",<BR />
            "ENTITLEMENTS",<BR />
            "AUTHORIZATIONS"<BR />
          ],<BR />
          "region": "us10",<BR />
          "subdomain": "20b8636b-af4c-4c42-b79b-780763663fbb",<BR />
          "stateMessage": "Subaccount created."<BR />
        }<BR />
      ]<BR />
    }<BR />
  ],<BR />
  "subdomain": "1a99110dtrial-ga",<BR />
  "subaccounts": [<BR />
    {<BR />
      "guid": "00516298-b174-418e-9824-8824de04bfa3",<BR />
      "displayName": "trial",<BR />
      "globalAccountGUID": "c63c501e-e589-467d-8875-1821927ea713",<BR />
      "parentGUID": "c63c501e-e589-467d-8875-1821927ea713",<BR />
      "parentType": "ROOT",<BR />
      "region": "eu10",<BR />
      "subdomain": "1a99110dtrial"<BR />
    }<BR />
  ],<BR />
  "licenseType": "TRIAL"<BR />
}<BR />
{<BR />
  "guid": "2558794c-f8cd-4422-b071-3b21c2922a02",<BR />
  "parentGuid": "c63c501e-e589-467d-8875-1821927ea713",<BR />
  "parentType": "ROOT",<BR />
  "globalAccountGUID": "c63c501e-e589-467d-8875-1821927ea713",<BR />
  "displayName": "techedhouse",<BR />
  "stateMessage": "Directory created.",<BR />
  "subdomain": "2558794c-f8cd-4422-b071-3b21c2922a02",<BR />
  "directoryType": "PROJECT",<BR />
  "directoryFeatures": [<BR />
    "DEFAULT",<BR />
    "ENTITLEMENTS",<BR />
    "AUTHORIZATIONS"<BR />
  ],<BR />
  "subaccounts": [<BR />
    {<BR />
      "guid": "3ea88c9c-010b-4bf0-9fdb-5c29c9087660",<BR />
      "displayName": "messaging",<BR />
      "globalAccountGUID": "c63c501e-e589-467d-8875-1821927ea713",<BR />
      "parentGUID": "2558794c-f8cd-4422-b071-3b21c2922a02",<BR />
      "parentType": "PROJECT",<BR />
      "parentFeatures": [<BR />
        "DEFAULT",<BR />
        "ENTITLEMENTS",<BR />
        "AUTHORIZATIONS"<BR />
      ],<BR />
      "region": "us10",<BR />
      "subdomain": "20b8636b-af4c-4c42-b79b-780763663fbb",<BR />
      "stateMessage": "Subaccount created."<BR />
    }<BR />
  ]<BR />
}<BR />
{<BR />
  "guid": "3ea88c9c-010b-4bf0-9fdb-5c29c9087660",<BR />
  "displayName": "messaging",<BR />
  "globalAccountGUID": "c63c501e-e589-467d-8875-1821927ea713",<BR />
  "parentGUID": "2558794c-f8cd-4422-b071-3b21c2922a02",<BR />
  "parentType": "PROJECT",<BR />
  "parentFeatures": [<BR />
    "DEFAULT",<BR />
    "ENTITLEMENTS",<BR />
    "AUTHORIZATIONS"<BR />
  ],<BR />
  "region": "us10",<BR />
  "subdomain": "20b8636b-af4c-4c42-b79b-780763663fbb",<BR />
  "stateMessage": "Subaccount created."<BR />
}<BR />
{<BR />
  "guid": "00516298-b174-418e-9824-8824de04bfa3",<BR />
  "displayName": "trial",<BR />
  "globalAccountGUID": "c63c501e-e589-467d-8875-1821927ea713",<BR />
  "parentGUID": "c63c501e-e589-467d-8875-1821927ea713",<BR />
  "parentType": "ROOT",<BR />
  "region": "eu10",<BR />
  "subdomain": "1a99110dtrial"<BR />
}</CODE></PRE><BR />
That looks better! While the nested child objects are still expressed, each actual object in the hierarchy now appears at the top level for us to filter through.<BR />
<H4 id="step-3---pick-out-potentially-matching-objects" id="toc-hId--551950802">Step 3 - Pick out potentially matching objects</H4><BR />
I'm deliberately doing this in a step by step way; there are most likely more efficient ways of performing this parsing but hopefully we learn more by taking each logical piece at a time.<BR />
<BR />
And here we want to filter the objects down to those that may be a valid match of a subaccount or directory. In other words, we don't want the top level node, the global account. We can achieve this by identifying our potential matches as being objects that contain a pointer to a parent (as the top level node won't have one). Let's do that now.<BR />
<BLOCKQUOTE>I'll express the <CODE>jq</CODE> incantation across multiple lines now so it remains readable in the narrow width of this blog post rendering.</BLOCKQUOTE><BR />
<PRE><CODE>; jq '<BR />
recurse<BR />
| objects<BR />
| select(.parentGuid? or .parentGUID?)<BR />
' hierarchy.json<BR />
{<BR />
  "guid": "2558794c-f8cd-4422-b071-3b21c2922a02",<BR />
  "parentGuid": "c63c501e-e589-467d-8875-1821927ea713",<BR />
  "parentType": "ROOT",<BR />
  "globalAccountGUID": "c63c501e-e589-467d-8875-1821927ea713",<BR />
  "displayName": "techedhouse",<BR />
  "stateMessage": "Directory created.",<BR />
  "subdomain": "2558794c-f8cd-4422-b071-3b21c2922a02",<BR />
  "directoryType": "PROJECT",<BR />
  "directoryFeatures": [<BR />
    "DEFAULT",<BR />
    "ENTITLEMENTS",<BR />
    "AUTHORIZATIONS"<BR />
  ],<BR />
  "subaccounts": [<BR />
    {<BR />
      "guid": "3ea88c9c-010b-4bf0-9fdb-5c29c9087660",<BR />
      "displayName": "messaging",<BR />
      "globalAccountGUID": "c63c501e-e589-467d-8875-1821927ea713",<BR />
      "parentGUID": "2558794c-f8cd-4422-b071-3b21c2922a02",<BR />
      "parentType": "PROJECT",<BR />
      "parentFeatures": [<BR />
        "DEFAULT",<BR />
        "ENTITLEMENTS",<BR />
        "AUTHORIZATIONS"<BR />
      ],<BR />
      "region": "us10",<BR />
      "subdomain": "20b8636b-af4c-4c42-b79b-780763663fbb",<BR />
      "stateMessage": "Subaccount created."<BR />
    }<BR />
  ]<BR />
}<BR />
{<BR />
  "guid": "3ea88c9c-010b-4bf0-9fdb-5c29c9087660",<BR />
  "displayName": "messaging",<BR />
  "globalAccountGUID": "c63c501e-e589-467d-8875-1821927ea713",<BR />
  "parentGUID": "2558794c-f8cd-4422-b071-3b21c2922a02",<BR />
  "parentType": "PROJECT",<BR />
  "parentFeatures": [<BR />
    "DEFAULT",<BR />
    "ENTITLEMENTS",<BR />
    "AUTHORIZATIONS"<BR />
  ],<BR />
  "region": "us10",<BR />
  "subdomain": "20b8636b-af4c-4c42-b79b-780763663fbb",<BR />
  "stateMessage": "Subaccount created."<BR />
}<BR />
{<BR />
  "guid": "00516298-b174-418e-9824-8824de04bfa3",<BR />
  "displayName": "trial",<BR />
  "globalAccountGUID": "c63c501e-e589-467d-8875-1821927ea713",<BR />
  "parentGUID": "c63c501e-e589-467d-8875-1821927ea713",<BR />
  "parentType": "ROOT",<BR />
  "region": "eu10",<BR />
  "subdomain": "1a99110dtrial"<BR />
}</CODE></PRE><BR />
Using the <CODE>select</CODE> function we can filter the objects down to only those that have a property pointing to a parent, i.e. either a <CODE>parentGuid</CODE> or <CODE>parentGUID</CODE> property, using the optional operator <CODE>?</CODE>.<BR />
<BLOCKQUOTE>I've connected with the lovely BTP Accounts Service API team asking them about this property name discrepancy for parent GUIDs and have asked them to consider addressing it</BLOCKQUOTE><BR />
<H4 id="step-4---narrow-down-to-what-were-looking-for" id="toc-hId--1246181402">Step 4 - Narrow down to what we're looking for</H4><BR />
Now we have just a list of subaccount and directory objects, we can comfortably filter further based on the display name given. When invoking <CODE>jq</CODE> you can pass arguments with the <CODE>--arg</CODE> option, so we can supply the chosen display name dynamically:<BR />
<PRE><CODE>; jq --arg displayname "messaging" '<BR />
recurse<BR />
| objects<BR />
| select(.parentGuid? or .parentGUID?)<BR />
| select(.displayName == $displayname)<BR />
' hierarchy.json<BR />
{<BR />
  "guid": "3ea88c9c-010b-4bf0-9fdb-5c29c9087660",<BR />
  "displayName": "messaging",<BR />
  "globalAccountGUID": "c63c501e-e589-467d-8875-1821927ea713",<BR />
  "parentGUID": "2558794c-f8cd-4422-b071-3b21c2922a02",<BR />
  "parentType": "PROJECT",<BR />
  "parentFeatures": [<BR />
    "DEFAULT",<BR />
    "ENTITLEMENTS",<BR />
    "AUTHORIZATIONS"<BR />
  ],<BR />
  "region": "us10",<BR />
  "subdomain": "20b8636b-af4c-4c42-b79b-780763663fbb",<BR />
  "stateMessage": "Subaccount created."<BR />
}</CODE></PRE><BR />
Now we have exactly the object we're looking for.<BR />
<H4 id="step-5---pick-out-the-values-we-need" id="toc-hId--1442694907">Step 5 - Pick out the values we need</H4><BR />
It's just remains for us to determine the values we need:<BR />
<UL><BR />
 	<LI>whether it's a subaccount or a directory</LI><BR />
 	<LI>what the GUID is</LI><BR />
</UL><BR />
We can easily pick out the GUID, it's in the <CODE>guid</CODE> property. But to determine the type, we need to introduce a bit of logic. Let's based that logic on whether the object has a <CODE>region</CODE> property - if it does, we can assume it's a subaccount, otherwise it's a directory (directories are logical constructs only).<BR />
<BR />
Here's that logic in action and in context:<BR />
<PRE><CODE>; jq --arg displayname "messaging" '<BR />
recurse<BR />
| objects<BR />
| select(.parentGuid? or .parentGUID?)<BR />
| select(.displayName == $displayname)<BR />
| [if .region? then "subaccount" else "directory" end, .guid]<BR />
' hierarchy.json<BR />
[<BR />
  "subaccount",<BR />
  "3ea88c9c-010b-4bf0-9fdb-5c29c9087660"<BR />
]</CODE></PRE><BR />
Getting there!<BR />
<H4 id="step-6---formatting-the-output" id="toc-hId--1639208412">Step 6 - Formatting the output</H4><BR />
To be a drop-in replacement for the previous logic, we should really be returning these in a whitespace separated construction on the same line, in the same way that they were returned in part 1 - see the <A href="https://blogs.sap.com/2021/11/24/getting-btp-resource-guids-with-the-btp-cli-part-1/#determining-the-guids" target="_blank" rel="noopener noreferrer">Determining the GUIDs</A> section for details.<BR />
<BR />
This can be done with with the <CODE>@tsv</CODE> <A href="https://stedolan.github.io/jq/manual/v1.5/#Formatstringsandescaping" target="_blank" rel="nofollow noopener noreferrer">format string</A>, which will turn an array like this into a nice tab separated values construct. When invoking this, we want to use the <CODE>--raw-output</CODE> option (short form is <CODE>-r</CODE>) to have the output written directly to standard output rather than being formatted as a JSON string inside quotes:<BR />
<PRE><CODE>; jq --raw-output --arg displayname "messaging" '<BR />
recurse<BR />
| objects<BR />
| select(.parentGuid? or .parentGUID?)<BR />
| select(.displayName == $displayname)<BR />
| [if .region? then "subaccount" else "directory" end, .guid]<BR />
| @tsv<BR />
' hierarchy.json<BR />
subaccount      3ea88c9c-010b-4bf0-9fdb-5c29c9087660</CODE></PRE><BR />
In case you're wondering what we'd get without the <CODE>--raw-output</CODE> option, it's this:<BR />
<PRE><CODE>"subaccount\t3ea88c9c-010b-4bf0-9fdb-5c29c9087660"</CODE></PRE><BR />
And yes, that is valid JSON, which is what <CODE>jq</CODE> will try to emit by default.<BR />
<H2 id="adjusting-the-btpguid-script" id="toc-hId--1248915903">Adjusting the btpguid script</H2><BR />
It's time to adapt the existing <CODE>btpguid</CODE> script to use this new approach, as a drop-in replacement. The existing script in its entirety is listed in part 1, in <A href="https://blogs.sap.com/2021/11/24/getting-btp-resource-guids-with-the-btp-cli-part-1/#the-btpguid-script" target="_blank" rel="noopener noreferrer">The btpguid script</A> section. We need to make three alterations:<BR />
<UL><BR />
 	<LI>modify the <CODE>gethier</CODE> function to specify the JSON output format</LI><BR />
 	<LI>add a new function <CODE>parse</CODE> to use the <CODE>jq</CODE> script to parse the JSON hierarchy and ouptut the subtype and GUID</LI><BR />
 	<LI>modify the <CODE>read</CODE> line inside the <CODE>main</CODE> function to take input from what this new <CODE>parse</CODE> function produces</LI><BR />
</UL><BR />
<H3 id="modifying-the-gethier-function" id="toc-hId--1738832415">Modifying the gethier function</H3><BR />
We just need to add <CODE>--format json</CODE> to the invocation, so the resulting <CODE>gethier</CODE> function now looks like this:<BR />
<DIV><BR />
<PRE class="sourceCode bash"><CODE class="sourceCode bash"><SPAN id="cb13-1"><SPAN class="fu">gethier()</SPAN> <SPAN class="kw">{</SPAN></SPAN><BR />
<SPAN id="cb13-2">  <SPAN class="ex">btp</SPAN> <SPAN class="at">--format</SPAN> json get accounts/global-account <SPAN class="at">--show-hierarchy</SPAN> <SPAN class="dv">2</SPAN><SPAN class="op">&gt;</SPAN> /dev/null</SPAN><BR />
<SPAN id="cb13-3"><SPAN class="kw">}</SPAN></SPAN></CODE></PRE><BR />
</DIV><BR />
<H3 id="adding-a-new-parse-function" id="toc-hId--1935345920">Adding a new parse function</H3><BR />
To keep things separate and more readable, the new <CODE>parse</CODE> function encapsulates the invocation of <CODE>jq</CODE> on the hierarchy data, which will now be in JSON format. The entire function expects a display name for which to search, and the JSON hierarchy data, and looks like this:<BR />
<DIV><BR />
<PRE class="sourceCode bash"><CODE class="sourceCode bash"><SPAN id="cb14-1"><SPAN class="fu">parse()</SPAN> <SPAN class="kw">{</SPAN></SPAN><BR />
<SPAN id="cb14-2"></SPAN><BR />
<SPAN id="cb14-3">  <SPAN class="bu">local</SPAN> <SPAN class="va">displayname</SPAN><SPAN class="op">=</SPAN><SPAN class="va">$1</SPAN></SPAN><BR />
<SPAN id="cb14-4">  <SPAN class="bu">local</SPAN> <SPAN class="va">hierarchy</SPAN><SPAN class="op">=</SPAN><SPAN class="va">$2</SPAN></SPAN><BR />
<SPAN id="cb14-5"></SPAN><BR />
<SPAN id="cb14-6">  <SPAN class="ex">jq</SPAN> <SPAN class="at">--raw-output</SPAN> <SPAN class="at">--arg</SPAN> displayname <SPAN class="st">"</SPAN><SPAN class="va">$displayname</SPAN><SPAN class="st">"</SPAN> <SPAN class="st">'</SPAN></SPAN><BR />
<SPAN id="cb14-7"><SPAN class="st">    recurse</SPAN></SPAN><BR />
<SPAN id="cb14-8"><SPAN class="st">    | objects</SPAN></SPAN><BR />
<SPAN id="cb14-9"><SPAN class="st">    | select(.parentGuid? or .parentGUID?)</SPAN></SPAN><BR />
<SPAN id="cb14-10"><SPAN class="st">    | select(.displayName == $displayname)</SPAN></SPAN><BR />
<SPAN id="cb14-11"><SPAN class="st">    | [if .region? then "subaccount" else "directory" end, .guid]</SPAN></SPAN><BR />
<SPAN id="cb14-12"><SPAN class="st">    | @tsv</SPAN></SPAN><BR />
<SPAN id="cb14-13"><SPAN class="st">  '</SPAN> <SPAN class="op">&lt;&lt;&lt;</SPAN> <SPAN class="st">"</SPAN><SPAN class="va">$hierarchy</SPAN><SPAN class="st">"</SPAN></SPAN><BR />
<SPAN id="cb14-14"></SPAN><BR />
<SPAN id="cb14-15"><SPAN class="kw">}</SPAN></SPAN></CODE></PRE><BR />
</DIV><BR />
<H3 id="adjusting-the-main-function" id="toc-hId--2131859425">Adjusting the main function</H3><BR />
Now all we need to do is adjust the line with <CODE>read</CODE> to take input from the invocation of this new <CODE>parse</CODE> function. It looks like this (the first line is unchanged, and is just listed here to provide a bit of context):<BR />
<DIV><BR />
<PRE class="sourceCode bash"><CODE class="sourceCode bash"><SPAN id="cb15-1">  <SPAN class="va">hierarchy</SPAN><SPAN class="op">=</SPAN><SPAN class="st">"</SPAN><SPAN class="va">$(</SPAN><SPAN class="ex">gethier</SPAN><SPAN class="va">)</SPAN><SPAN class="st">"</SPAN> <SPAN class="kw">||</SPAN> <SPAN class="kw">{</SPAN> <SPAN class="ex">btp</SPAN> login <SPAN class="kw">&amp;&amp;</SPAN> <SPAN class="va">hierarchy</SPAN><SPAN class="op">=</SPAN><SPAN class="st">"</SPAN><SPAN class="va">$(</SPAN><SPAN class="ex">gethier</SPAN><SPAN class="va">)</SPAN><SPAN class="st">"</SPAN><SPAN class="kw">;</SPAN> <SPAN class="kw">}</SPAN></SPAN><BR />
<SPAN id="cb15-2">  <SPAN class="bu">read</SPAN> <SPAN class="at">-r</SPAN> <SPAN class="va">subtype</SPAN> <SPAN class="va">guid</SPAN> <SPAN class="op">&lt;&lt;&lt;</SPAN> <SPAN class="st">"</SPAN><SPAN class="va">$(</SPAN><SPAN class="ex">parse</SPAN> <SPAN class="st">"</SPAN><SPAN class="va">$displayname</SPAN><SPAN class="st">"</SPAN> <SPAN class="st">"</SPAN><SPAN class="va">$hierarchy</SPAN><SPAN class="st">"</SPAN><SPAN class="va">)</SPAN><SPAN class="st">"</SPAN></SPAN></CODE></PRE><BR />
</DIV><BR />
<H2 id="wrapping-up" id="toc-hId--2034969923">Wrapping up</H2><BR />
So there we have it. Using the btp CLI's <CODE>--format json</CODE> option, with a bit of <CODE>jq</CODE> scripting, gives us what we want. The jq language itself is more fully formed than you might think - and given the relevance that JSON has today, both in output from tools like this, responses from API endpoints, and representations of declarative definitions for cloud services and clusters, I'd suggest that it's worth investing a little bit of time into being able to wield a few <CODE>jq</CODE> scripts, even if they are one-liners.<BR />
<BR />
And talking of <CODE>jq</CODE> scripts, I'm sure there are other ways of pulling out the information from the JSON using <CODE>jq</CODE>. If you've taken a different approach, I'd love to hear about it - please share what you've done in the comments. Thanks, and happy coding!<BR />
<BR />
<HR /><BR />
<BR />
<A name="where-i-write-my-posts" target="_blank"></A><BR />
<H2 id="where-i-write-my-posts" id="toc-hId-2063483868">Where I write my posts</H2><BR />
Here's a short section to provide context on where my Autodidactics blog fits in. I write here on the SAP Community, but I have blogs elsewhere that I publish on too:<BR />
<UL><BR />
 	<LI>my <A href="https://qmacro.org" target="_blank" rel="nofollow noopener noreferrer">main blog</A> containing posts on all sorts of topics</LI><BR />
 	<LI>a <A href="https://langram.org/" target="_blank" rel="nofollow noopener noreferrer">language ramblings blog</A></LI><BR />
 	<LI>my journal entries are in a GitHub-issue based <A href="https://github.com/qmacro/thinking-aloud" target="_blank" rel="nofollow noopener noreferrer">Thinking Aloud</A> blog</LI><BR />
 	<LI>shortish posts about stuff I learn are to be found on my <A href="https://qmacro.org/autodidactics/" target="_blank" rel="nofollow noopener noreferrer">Autodidactics</A> blog</LI><BR />
</UL><BR />
You can keep track of the posts on all these blogs, and also the other content I create, by checking <A href="https://github.com/qmacro" target="_blank" rel="nofollow noopener noreferrer">my home page on GitHub</A>, which lists the most recent items for each area.
---
Getting BTP resource GUIDs with the btp CLI - part 1
technology-blog-sap
2021-11-24
https://community.sap.com/t5/technology-blogs-by-sap/getting-btp-resource-guids-with-the-btp-cli-part-1/ba-p/13511167
2021-11-24-getting-btp-resource-guids-with-the-btp-cli-part-1
<EM>Learn how to use the btp CLI to determine resource GUIDs in your global account. This post is part 1, covering the <CODE>bgu</CODE> mechanism.</EM><BR />
<BR />
Update: the second blog post in this series is now also available: <A href="https://blogs.sap.com/2021/12/01/getting-btp-resource-guids-with-the-btp-cli-part-2-json-and-jq/" target="_blank" rel="noopener noreferrer">Getting BTP resource GUIDs with the btp CLI â part 2 â JSON and jq</A>.<BR />
<BR />
In the <A href="https://reg.sapevents.sap.com/flow/sap/sapteched2021/portal/page/sessions/session/1632238684525001QKhY" target="_blank" rel="noopener noreferrer">Developer Keynote</A> during SAP TechEd, specifically in the Command Line Magic <A href="https://github.com/SAP-samples/teched2021-developer-keynote#sections" target="_blank" rel="nofollow noopener noreferrer">section</A>, I used a little mechanism I called <CODE>bgu</CODE> (for "btp GUID"), to determine the GUIDs for various resources (a subaccount, and later, a directory) in my global account. Here you can see <CODE>bgu</CODE> in action:<BR />
<FIGURE><IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2021/11/bgu-trial-1.png" /><FIGCAPTION aria-hidden="true"></FIGCAPTION></FIGURE><BR />
<FIGURE><FIGCAPTION aria-hidden="true"><IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2021/11/bgu-messaging-1.png" /></FIGCAPTION></FIGURE><BR />
In case you're interested in re-watching this section of the Developer Keynote, there's a link in the <A href="#furtherreading" target="_blank" rel="nofollow noopener noreferrer">Further reading and viewing</A> section later.<BR />
<BR />
In this post I explain what this <CODE>bgu</CODE> mechanism is and how it works, because it may be useful to you too. Moreover, the background information and context should provide you with some extra knowledge about BTP and the command line interface tool, <CODE>btp</CODE>.<BR />
<H2 id="starting-at-a-high-level" id="toc-hId-958322687">Starting at a high level</H2><BR />
The <CODE>bgu</CODE> mechanism is actually a function in my shell environment, which calls a script called <CODE>btpguid</CODE>. This in turn uses the btp CLI to examine the global account's resource hierarchy and pick information out of it - specifically the GUID for a given resource name. Let's break that down.<BR />
<BR />
We can ask what <CODE>bgu</CODE> is with the Bash shell's <CODE>type</CODE> builtin. This itself is an opportunity for us to enjoy a little bit of meta before we start, by asking what the type of <CODE>type</CODE> is:<BR />
<DIV><BR />
<PRE class="sourceCode bash"><CODE class="sourceCode bash"><SPAN id="cb1-1"><SPAN class="kw">;</SPAN> <SPAN class="bu">type</SPAN> type</SPAN><BR />
<SPAN id="cb1-2"><SPAN class="bu">type</SPAN> is a shell builtin</SPAN></CODE></PRE><BR />
</DIV><BR />
Anyway, enough of that, let's ask what <CODE>bgu</CODE> is:<BR />
<DIV><BR />
<PRE class="sourceCode bash"><CODE class="sourceCode bash"><SPAN id="cb2-1"><SPAN class="kw">;</SPAN> <SPAN class="bu">type</SPAN> bgu</SPAN><BR />
<SPAN id="cb2-2"><SPAN class="ex">bgu</SPAN> is a function</SPAN><BR />
<SPAN id="cb2-3"><SPAN class="fu">bgu ()</SPAN></SPAN><BR />
<SPAN id="cb2-4"><SPAN class="kw">{</SPAN></SPAN><BR />
<SPAN id="cb2-5">    <SPAN class="ex">btpguid</SPAN> <SPAN class="st">"</SPAN><SPAN class="va">$@</SPAN><SPAN class="st">"</SPAN><SPAN class="kw">;</SPAN></SPAN><BR />
<SPAN id="cb2-6">    <SPAN class="cf">if</SPAN> <SPAN class="kw">[[</SPAN> <SPAN class="va">$#</SPAN> <SPAN class="ot">-gt</SPAN> 1 <SPAN class="kw">]];</SPAN> <SPAN class="cf">then</SPAN></SPAN><BR />
<SPAN id="cb2-7">        <SPAN class="ex">btpctx</SPAN> <SPAN class="op">&gt;</SPAN> <SPAN class="st">"</SPAN><SPAN class="va">$HOME</SPAN><SPAN class="st">/.status"</SPAN><SPAN class="kw">;</SPAN></SPAN><BR />
<SPAN id="cb2-8">    <SPAN class="cf">fi</SPAN></SPAN><BR />
<SPAN id="cb2-9"><SPAN class="kw">}</SPAN></SPAN></CODE></PRE><BR />
</DIV><BR />
So there we are, <CODE>bgu</CODE> is a function that I've defined and made available in my shell. All it does is call <CODE>btpguid</CODE> with all of the arguments that were passed:<BR />
<DIV><BR />
<PRE class="sourceCode bash"><CODE class="sourceCode bash"><SPAN id="cb3-1"><SPAN class="ex">btpguid</SPAN> <SPAN class="st">"</SPAN><SPAN class="va">$@</SPAN><SPAN class="st">"</SPAN></SPAN></CODE></PRE><BR />
</DIV><BR />
Then, depending on circumstances, it calls another script (<CODE>btpctx</CODE>) to write some info to a status file. This is not relevant here (it's related to my <CODE>tmux</CODE>-based status line in my terminal) so let's just focus on the call to <CODE>btpguid</CODE>.<BR />
<BR />
So what is <CODE>btpguid</CODE>? Let's find out:<BR />
<DIV><BR />
<PRE class="sourceCode bash"><CODE class="sourceCode bash"><SPAN id="cb4-1"><SPAN class="kw">;</SPAN> <SPAN class="bu">type</SPAN> btpguid</SPAN><BR />
<SPAN id="cb4-2"><SPAN class="ex">btpguid</SPAN> is /home/user/.dotfiles/scripts/btp/btpguid</SPAN></CODE></PRE><BR />
</DIV><BR />
So <CODE>btpguid</CODE> is a script. Great, let's have a look at it!<BR />
<H2 id="the-btpguid-script" id="toc-hId-761809182">The btpguid script</H2><BR />
<DIV><BR />
<PRE class="sourceCode bash"><CODE class="sourceCode bash"><SPAN id="cb5-1"><SPAN class="co">#!/usr/bin/env bash</SPAN></SPAN><BR />
<SPAN id="cb5-2"></SPAN><BR />
<SPAN id="cb5-3"><SPAN class="co"># btpguid - return BTP subaccount/directory GUIDs</SPAN></SPAN><BR />
<SPAN id="cb5-4"></SPAN><BR />
<SPAN id="cb5-5"><SPAN class="co"># Usage: btpguid [-t|--target] displayname</SPAN></SPAN><BR />
<SPAN id="cb5-6"></SPAN><BR />
<SPAN id="cb5-7"><SPAN class="co"># Returns the GUID for the given subaccount or directory, which is</SPAN></SPAN><BR />
<SPAN id="cb5-8"><SPAN class="co"># specified by name. If the option -t or --target is specified, it</SPAN></SPAN><BR />
<SPAN id="cb5-9"><SPAN class="co"># will also set that subaccount or directory as the target.</SPAN></SPAN><BR />
<SPAN id="cb5-10"></SPAN><BR />
<SPAN id="cb5-11"><SPAN class="co"># Requires the btp CLI. Will direct you to log in first if you're</SPAN></SPAN><BR />
<SPAN id="cb5-12"><SPAN class="co"># not already logged in.</SPAN></SPAN><BR />
<SPAN id="cb5-13"></SPAN><BR />
<SPAN id="cb5-14"><SPAN class="co"># It uses the detail from the output of this command:</SPAN></SPAN><BR />
<SPAN id="cb5-15"><SPAN class="co"># btp get accounts/global-account --show-hierarchy</SPAN></SPAN><BR />
<SPAN id="cb5-16"></SPAN><BR />
<SPAN id="cb5-17"><SPAN class="co"># The output looks like this:</SPAN></SPAN><BR />
<SPAN id="cb5-18"></SPAN><BR />
<SPAN id="cb5-19"><SPAN class="co"># Showing details for global account af39080b-1527-40a1-b78a-3b605af7e811...</SPAN></SPAN><BR />
<SPAN id="cb5-20"><SPAN class="co">#</SPAN></SPAN><BR />
<SPAN id="cb5-21"><SPAN class="co"># ââ c35b11e4trial (af39080b-1527-40a1-b78a-3b605af7e811 - global account)</SPAN></SPAN><BR />
<SPAN id="cb5-22"><SPAN class="co"># â  ââ trial (b6501bff-e0ac-4fdf-8898-81f305d25335 - subaccount)</SPAN></SPAN><BR />
<SPAN id="cb5-23"><SPAN class="co"># â  ââ techedhouse (e57c5b13-9480-4a68-9c04-a603d7a017a9 - directory)</SPAN></SPAN><BR />
<SPAN id="cb5-24"><SPAN class="co">#</SPAN></SPAN><BR />
<SPAN id="cb5-25"><SPAN class="co"># type:            id:                                    display name:   parent id:</SPAN></SPAN><BR />
<SPAN id="cb5-26"><SPAN class="co"># global account   af39080b-1527-40a1-b78a-3b605af7e811   c35b11e4trial</SPAN></SPAN><BR />
<SPAN id="cb5-27"><SPAN class="co"># subaccount       b6501bff-e0ac-4fdf-8898-81f305d25335   trial           af39080b-...</SPAN></SPAN><BR />
<SPAN id="cb5-28"><SPAN class="co"># directory        e57c5b13-9480-4a68-9c04-a603d7a017a9   techedhouse     af39080b-...</SPAN></SPAN><BR />
<SPAN id="cb5-29"></SPAN><BR />
<SPAN id="cb5-30"><SPAN class="co"># It's the second part of the output (the table) that is used.</SPAN></SPAN><BR />
<SPAN id="cb5-31"></SPAN><BR />
<SPAN id="cb5-32"><SPAN class="co"># Uses the "${2:-$1}" technique seen in fff - see</SPAN></SPAN><BR />
<SPAN id="cb5-33"><SPAN class="co"># <A href="https://qmacro.org/autodidactics/2021/09/03/exploring-fff-part-1-main/" target="test_blank" rel="nofollow noopener noreferrer">https://qmacro.org/autodidactics/2021/09/03/exploring-fff-part-1-main/</A></SPAN></SPAN><BR />
<SPAN id="cb5-34"><SPAN class="co"># for details.</SPAN></SPAN><BR />
<SPAN id="cb5-35"></SPAN><BR />
<SPAN id="cb5-36"><SPAN class="fu">gethier()</SPAN> <SPAN class="kw">{</SPAN></SPAN><BR />
<SPAN id="cb5-37">  <SPAN class="ex">btp</SPAN> get accounts/global-account <SPAN class="at">--show-hierarchy</SPAN> <SPAN class="dv">2</SPAN><SPAN class="op">&gt;</SPAN> /dev/null</SPAN><BR />
<SPAN id="cb5-38"><SPAN class="kw">}</SPAN></SPAN><BR />
<SPAN id="cb5-39"></SPAN><BR />
<SPAN id="cb5-40"><SPAN class="fu">main()</SPAN> <SPAN class="kw">{</SPAN></SPAN><BR />
<SPAN id="cb5-41"></SPAN><BR />
<SPAN id="cb5-42">  <SPAN class="bu">local</SPAN> <SPAN class="va">hierarchy</SPAN> <SPAN class="va">subtype</SPAN> <SPAN class="va">guid</SPAN> <SPAN class="va">displayname</SPAN> <SPAN class="va">rc</SPAN><SPAN class="op">=</SPAN>0</SPAN><BR />
<SPAN id="cb5-43"></SPAN><BR />
<SPAN id="cb5-44">  <SPAN class="va">displayname</SPAN><SPAN class="op">=</SPAN><SPAN class="st">"</SPAN><SPAN class="va">${2</SPAN><SPAN class="op">:-</SPAN><SPAN class="va">$1}</SPAN><SPAN class="st">"</SPAN></SPAN><BR />
<SPAN id="cb5-45"></SPAN><BR />
<SPAN id="cb5-46">  <SPAN class="kw">[[</SPAN> <SPAN class="ot">-z</SPAN> <SPAN class="va">$displayname</SPAN> <SPAN class="kw">]]</SPAN> <SPAN class="kw">&amp;&amp;</SPAN> <SPAN class="kw">{</SPAN></SPAN><BR />
<SPAN id="cb5-47">    <SPAN class="bu">echo</SPAN> <SPAN class="st">"No display name specified"</SPAN></SPAN><BR />
<SPAN id="cb5-48">    <SPAN class="bu">exit</SPAN> 1</SPAN><BR />
<SPAN id="cb5-49">  <SPAN class="kw">}</SPAN></SPAN><BR />
<SPAN id="cb5-50"></SPAN><BR />
<SPAN id="cb5-51">  <SPAN class="va">hierarchy</SPAN><SPAN class="op">=</SPAN><SPAN class="st">"</SPAN><SPAN class="va">$(</SPAN><SPAN class="ex">gethier</SPAN><SPAN class="va">)</SPAN><SPAN class="st">"</SPAN> <SPAN class="kw">||</SPAN> <SPAN class="kw">{</SPAN> <SPAN class="ex">btp</SPAN> login <SPAN class="kw">&amp;&amp;</SPAN> <SPAN class="va">hierarchy</SPAN><SPAN class="op">=</SPAN><SPAN class="st">"</SPAN><SPAN class="va">$(</SPAN><SPAN class="ex">gethier</SPAN><SPAN class="va">)</SPAN><SPAN class="st">"</SPAN><SPAN class="kw">;</SPAN> <SPAN class="kw">}</SPAN></SPAN><BR />
<SPAN id="cb5-52">  <SPAN class="bu">read</SPAN> <SPAN class="at">-r</SPAN> <SPAN class="va">subtype</SPAN> <SPAN class="va">guid</SPAN> <SPAN class="op">&lt;&lt;&lt;</SPAN> <SPAN class="st">"</SPAN><SPAN class="va">$(</SPAN><SPAN class="fu">grep</SPAN> <SPAN class="at">-P</SPAN> <SPAN class="at">-o</SPAN> <SPAN class="st">"^(subaccount|directory)\s+(\S+)(?=\s+</SPAN><SPAN class="va">$displayname</SPAN><SPAN class="st">)"</SPAN> <SPAN class="op">&lt;&lt;&lt;</SPAN> <SPAN class="st">"</SPAN><SPAN class="va">$hierarchy</SPAN><SPAN class="st">"</SPAN><SPAN class="va">)</SPAN><SPAN class="st">"</SPAN></SPAN><BR />
<SPAN id="cb5-53"></SPAN><BR />
<SPAN id="cb5-54">  <SPAN class="co"># Set the subtype as target if requested</SPAN></SPAN><BR />
<SPAN id="cb5-55">  <SPAN class="kw">[[</SPAN> <SPAN class="va">$1</SPAN> <SPAN class="ot">==</SPAN> -t <SPAN class="kw">]]</SPAN> <SPAN class="kw">||</SPAN> <SPAN class="kw">[[</SPAN> <SPAN class="va">$1</SPAN> <SPAN class="ot">==</SPAN> --target <SPAN class="kw">]]</SPAN> <SPAN class="kw">&amp;&amp;</SPAN> <SPAN class="kw">{</SPAN></SPAN><BR />
<SPAN id="cb5-56">    <SPAN class="ex">btp</SPAN> target <SPAN class="st">"--</SPAN><SPAN class="va">${subtype}</SPAN><SPAN class="st">"</SPAN> <SPAN class="st">"</SPAN><SPAN class="va">$guid</SPAN><SPAN class="st">"</SPAN> <SPAN class="op">&amp;&gt;</SPAN> /dev/null</SPAN><BR />
<SPAN id="cb5-57">    <SPAN class="va">rc</SPAN><SPAN class="op">=</SPAN><SPAN class="va">$?</SPAN></SPAN><BR />
<SPAN id="cb5-58">  <SPAN class="kw">}</SPAN></SPAN><BR />
<SPAN id="cb5-59"></SPAN><BR />
<SPAN id="cb5-60">  <SPAN class="bu">echo</SPAN> <SPAN class="st">"</SPAN><SPAN class="va">$guid</SPAN><SPAN class="st">"</SPAN></SPAN><BR />
<SPAN id="cb5-61">  <SPAN class="cf">return</SPAN> <SPAN class="va">$rc</SPAN></SPAN><BR />
<SPAN id="cb5-62"></SPAN><BR />
<SPAN id="cb5-63"><SPAN class="kw">}</SPAN></SPAN><BR />
<SPAN id="cb5-64"></SPAN><BR />
<SPAN id="cb5-65"><SPAN class="ex">main</SPAN> <SPAN class="st">"</SPAN><SPAN class="va">$@</SPAN><SPAN class="st">"</SPAN></SPAN></CODE></PRE><BR />
</DIV><BR />
Hopefully the comments provide the general idea - given the name of a resource, say "trial" or "techedhouse", this script will find and return that resource's GUID. In addition, if the <CODE>--target</CODE> option is specified, it will also <A href="https://help.sap.com/products/BTP/65de2977205c403bbc107264b8eccf4b/720645a3ed3945bd8d97a670b948ac07.html?locale=en-US" target="_blank" rel="noopener noreferrer">set the default command context</A>, but we'll leave that for another time.<BR />
<H2 id="an-overview-of-structure-in-btp" id="toc-hId-565295677">An overview of structure in BTP</H2><BR />
Before we dig in to some of the details of the script, let's just spend a few moments thinking about subaccounts and the hierarchies that can be built using directories.<BR />
<BR />
Basically, within a global account, you can create subaccounts, and you can set up those subaccounts using directories. This is a flexible and simple way to organise resources, assignments, adminstrative access and more using a well understood paradigm.<BR />
<BR />
You can read more about this on the SAP Help Portal in <A href="https://help.sap.com/products/BTP/df50977d8bfa4c9a8a063ddb37113c43/b5a6b58694784d0c9f4ff85f9b7336dd.html?locale=en-US" target="_blank" rel="noopener noreferrer">Account Models With Directories and Subaccounts [Feature Set B]</A>.<BR />
<BR />
Let's look at an example. The structure that existed at the end of the Command Line Magic section of the Developer Keynote looked like this:<BR />
<PRE><CODE>ââ 1a99110dtrial (c63c501e-e589-467d-8875-1821927ea713 - global account)<BR />
â  ââ trial (00516298-b174-418e-9824-8824de04bfa3 - subaccount)<BR />
â  ââ techedhouse (2558794c-f8cd-4422-b071-3b21c2922a02 - directory)<BR />
â  â  ââ messaging (3ea88c9c-010b-4bf0-9fdb-5c29c9087660 - subaccount)</CODE></PRE><BR />
We saw, very briefly, a representation of this structure in the BTP cockpit too, right at the end of this section of the keynote:<BR />
<FIGURE><FIGCAPTION aria-hidden="true"><IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2021/11/hierarchy-1.png" /></FIGCAPTION></FIGURE><BR />
Staring at this structure for a few seconds, we see that it's made up of directories and subaccounts; the "messaging" subaccount sits within the "techedhouse" directory, which itself sits alongside (at the same level as) the default "trial" subaccount that was set up automatically for me when my global account was created.<BR />
<H2 id="resources-guids-and-command-substitution" id="toc-hId-368782172">Resources, GUIDs and command substitution</H2><BR />
When managing these subaccount and directory resources, GUIDs are used. We saw multiple examples where GUIDs are required - here are three of them. However, note that each time, instead of finding and specifying a GUID manually, a <A href="https://www.gnu.org/software/bash/manual/html_node/Command-Substitution.html" target="_blank" rel="nofollow noopener noreferrer">command substitution</A> (they look like this: <CODE>$(...)</CODE>) is used, to make things easier:<BR />
<UL><BR />
 	<LI><A href="https://github.com/SAP-samples/teched2021-developer-keynote/tree/main/section/command-line-magic#reducing-existing-entitlement-quota-to-zero" target="_blank" rel="nofollow noopener noreferrer">Reducing quota for a subaccount</A>: <CODE>btp assign accounts/entitlement --for-service enterprise-messaging --plan dev --to-subaccount $(bgu trial) --amount 0</CODE></LI><BR />
 	<LI><A href="https://github.com/SAP-samples/teched2021-developer-keynote/tree/main/section/command-line-magic#assigning-service-quota-to-directory" target="_blank" rel="nofollow noopener noreferrer">Assigning quota to a directory</A>: <CODE>btp assign accounts/entitlement --for-service enterprise-messaging --plan dev --to-directory $(bgu techedhouse) --amount 1 --auto-assign</CODE></LI><BR />
 	<LI><A href="https://github.com/SAP-samples/teched2021-developer-keynote/tree/main/section/command-line-magic#creating-the-new-subaccount" target="_blank" rel="nofollow noopener noreferrer">Creating the subaccount within a directory</A>: <CODE>btp create accounts/subaccount --region us10 --display-name messaging --beta-enabled true --subdomain $(uuidgen) --directory $(bgu techedhouse)</CODE></LI><BR />
</UL><BR />
In each case, instead of manually looking up the GUID for a resource, and then copy-pasting that in for the value to use with <CODE>--to-subaccount</CODE>, <CODE>--to-directory</CODE> and <CODE>--directory</CODE> above, the <CODE>bgu</CODE> mechanism was used to do that for us. As the <A href="https://www.gnu.org/software/bash/manual/html_node/Command-Substitution.html" target="_blank" rel="nofollow noopener noreferrer">manual section on command substitution</A> says:<BR />
<BLOCKQUOTE>"<EM>command substitution allows the output of a command to replace the command itself</EM>"</BLOCKQUOTE><BR />
In other words, when you see something like this (taken from the first example above):<BR />
<PRE><CODE>--to-subaccount $(bgu trial)</CODE></PRE><BR />
then what happens is that the command <CODE>bgu trial</CODE> is executed, and the output is then substituted as the value for the <CODE>--to-subaccount</CODE> parameter.<BR />
<BR />
(In case you're wondering, command substitution comes in two forms: <CODE>`...`</CODE> and <CODE>$(...)</CODE>; the former is now deprecated.)<BR />
<H2 id="determining-the-guids" id="toc-hId-172268667">Determining the GUIDs</H2><BR />
Now that we understand the structure of resources in BTP accounts, we can turn our attention to the heart of the <CODE>btpguid</CODE> script. This incarnation of the script, which was used in the Developer Keynote, invokes a btp CLI command (which we'll see shortly), and parses some of its output:<BR />
<PRE><CODE>hierarchy="$(gethier)" || { btp login &amp;&amp; hierarchy="$(gethier)"; }<BR />
read -r subtype guid &lt;&lt;&lt; "$(grep -P -o "^(subaccount|directory)\s+(\S+)(?=\s+$displayname)" &lt;&lt;&lt; "$hierarchy")"</CODE></PRE><BR />
Let's break that down so we understand what's going on.<BR />
<BR />
The first line executes the <CODE>gethier</CODE> function which is defined earlier in the script.<BR />
<BLOCKQUOTE>In case you're wondering about the rest of the first line, this is to deal with the situation where you're not yet (or no longer) logged in with <CODE>btp</CODE>, and if that's the case, you're guided to log in first, and then the call is re-tried.</BLOCKQUOTE><BR />
The <CODE>gethier</CODE> function just runs the following <CODE>btp</CODE> command:<BR />
<DIV><BR />
<PRE class="sourceCode bash"><CODE class="sourceCode bash"><SPAN id="cb9-1"><SPAN class="ex">btp</SPAN> get accounts/global-account <SPAN class="at">--show-hierarchy</SPAN> <SPAN class="dv">2</SPAN><SPAN class="op">&gt;</SPAN> /dev/null</SPAN></CODE></PRE><BR />
</DIV><BR />
<BLOCKQUOTE>I'm redirecting standard error (with <CODE>2&gt;</CODE>) to <CODE>/dev/null</CODE>, to get rid of anything printed there. Currently the btp CLI outputs an "OK" to standard error, and I don't want to see that anywhere.</BLOCKQUOTE><BR />
The <CODE>--show-hierarchy</CODE> parameter is responsible for the lovely detail that you saw earlier. Let's look at an example of that detail before diving into the second line, so we know what we're dealing with. This example is from the script's comments above:<BR />
<PRE><CODE>Showing details for global account af39080b-1527-40a1-b78a-3b605af7e811...<BR />
<BR />
ââ c35b11e4trial (af39080b-1527-40a1-b78a-3b605af7e811 - global account)<BR />
â  ââ trial (b6501bff-e0ac-4fdf-8898-81f305d25335 - subaccount)<BR />
â  ââ techedhouse (e57c5b13-9480-4a68-9c04-a603d7a017a9 - directory)<BR />
<BR />
type:            id:                                    display name:   parent id:<BR />
global account   af39080b-1527-40a1-b78a-3b605af7e811   c35b11e4trial<BR />
subaccount       b6501bff-e0ac-4fdf-8898-81f305d25335   trial           af39080b-...<BR />
directory        e57c5b13-9480-4a68-9c04-a603d7a017a9   techedhouse     af39080b-...</CODE></PRE><BR />
Right, so what is the second line doing? From a high level, it's looking for lines in this output starting with either "subaccount" or "directory", grabbing the GUID and resource type on the line that's found, and assigning them to two variables, <CODE>guid</CODE> and <CODE>subtype</CODE> respectively:<BR />
<DIV><BR />
<PRE class="sourceCode bash"><CODE class="sourceCode bash"><SPAN id="cb11-1"><SPAN class="bu">read</SPAN> <SPAN class="at">-r</SPAN> <SPAN class="va">subtype</SPAN> <SPAN class="va">guid</SPAN> <SPAN class="op">&lt;&lt;&lt;</SPAN> <SPAN class="st">"</SPAN><SPAN class="va">$(</SPAN><SPAN class="fu">grep</SPAN> <SPAN class="at">-P</SPAN> <SPAN class="at">-o</SPAN> <SPAN class="st">"^(subaccount|directory)\s+(\S+)(?=\s+</SPAN><SPAN class="va">$displayname</SPAN><SPAN class="st">)"</SPAN> <SPAN class="op">&lt;&lt;&lt;</SPAN> <SPAN class="st">"</SPAN><SPAN class="va">$hierarchy</SPAN><SPAN class="st">"</SPAN><SPAN class="va">)</SPAN><SPAN class="st">"</SPAN></SPAN></CODE></PRE><BR />
</DIV><BR />
It looks a little complex, but if you stare at it for a few minutes, this pattern emerges:<BR />
<BLOCKQUOTE>read [into two variables] from the results of searching and extracting values from the hierarchy data</BLOCKQUOTE><BR />
A couple of "here strings" in the form of the <CODE>&lt;&lt;&lt;</CODE> construct are used (see section 3.6.7 of the <A href="https://www.gnu.org/software/bash/manual/html_node/Redirections.html" target="_blank" rel="nofollow noopener noreferrer">Bash manual section on redirections</A>). Such "here strings" allow us to supply the value of a variable as input data to a command or builtin that would normally expect to read from standard input (STDIN). If you're interested in understanding here strings and how they fit in, have a look at <A href="https://qmacro.org/autodidactics/2021/11/07/exploring-fff-part-2-get-ls-colors/#ioredirection" target="_blank" rel="nofollow noopener noreferrer">Input/output redirection, here documents and here strings</A>.<BR />
<BR />
Knowing this, we can break the line down into parts. The first part is this, inside the command substitution construct <CODE>$(...)</CODE>:<BR />
<DIV><BR />
<PRE class="sourceCode bash"><CODE class="sourceCode bash"><SPAN id="cb12-1"><SPAN class="fu">grep</SPAN> <SPAN class="at">-P</SPAN> <SPAN class="at">-o</SPAN> <SPAN class="st">"^(subaccount|directory)\s+(\S+)(?=\s+</SPAN><SPAN class="va">$displayname</SPAN><SPAN class="st">)"</SPAN> <SPAN class="op">&lt;&lt;&lt;</SPAN> <SPAN class="st">"</SPAN><SPAN class="va">$hierarchy</SPAN><SPAN class="st">"</SPAN></SPAN></CODE></PRE><BR />
</DIV><BR />
Here are some notes to help you interpret this:<BR />
<TABLE><COLGROUP> <COL style="width: 25%" /> </COLGROUP> <COLGROUP> <COL style="width: 75%" /></COLGROUP><BR />
<THEAD><BR />
<TR class="header"><BR />
<TH>Part</TH><BR />
<TH>Description</TH><BR />
</TR><BR />
</THEAD><BR />
<TBODY><BR />
<TR class="odd"><BR />
<TD><CODE>grep</CODE></TD><BR />
<TD>this is the command to search for patterns in data</TD><BR />
</TR><BR />
<TR class="even"><BR />
<TD><CODE>-P</CODE></TD><BR />
<TD>this tells <CODE>grep</CODE> that we're going to use a Perl Compatible Regular Expression (PCRE)</TD><BR />
</TR><BR />
<TR class="odd"><BR />
<TD><CODE>-o</CODE></TD><BR />
<TD>this tells <CODE>grep</CODE> to output not the entire matched line, but only the parts that are matched and captured (via parentheses)</TD><BR />
</TR><BR />
<TR class="even"><BR />
<TD><CODE>"$hierarchy"</CODE></TD><BR />
<TD>this is the value of the <CODE>hierarchy</CODE> variable that holds the output from <CODE>btp get accounts/global-account --show-hierarchy</CODE></TD><BR />
</TR><BR />
<TR class="odd"><BR />
<TD><CODE>^</CODE></TD><BR />
<TD>this anchors the pattern to the beginning of the line (in other words, either "subaccount" or "directory" needs to be right at the start of the line for the match to be successful)</TD><BR />
</TR><BR />
<TR class="even"><BR />
<TD><CODE>\s</CODE> and <CODE>\S</CODE></TD><BR />
<TD>these are very common metacharacters used in regular expressions, and represent "a whitespace character" and "anything but a whitespace character" respectively</TD><BR />
</TR><BR />
<TR class="odd"><BR />
<TD><CODE>+</CODE></TD><BR />
<TD>this is a modifier which represents "at least one, possibly more" and is different from <CODE>\*</CODE> which is "zero or more" and <CODE>?</CODE> which means "optional (i.e. either no occurrence or just one occurrence)"</TD><BR />
</TR><BR />
<TR class="even"><BR />
<TD><CODE>$displayname</CODE></TD><BR />
<TD>because the entire pattern is enclosed in double quotes (<CODE>"..."</CODE>) the shell will substitute the value of this variable into the pattern; the variable holds the value specified when <CODE>btpguid</CODE> is invoked, i.e. the name of the resource we're looking for</TD><BR />
</TR><BR />
<TR class="odd"><BR />
<TD><CODE>(...)</CODE></TD><BR />
<TD>these are matching parentheses, called "capturing groups", to identify and grab what we want from the match</TD><BR />
</TR><BR />
<TR class="even"><BR />
<TD><CODE>(?=...)</CODE></TD><BR />
<TD>this is a positive lookahead assertion which allows us to say things like "must be followed by" without consuming anything in the match; note also that despite there being parentheses, this is not itself a capturing group and therefore what's being asserted is not grabbed</TD><BR />
</TR><BR />
<TR class="odd"><BR />
<TD><CODE>&lt;&lt;&lt;</CODE></TD><BR />
<TD>this is a here string construct that provides the input to <CODE>grep</CODE> from the value of the <CODE>hierarchy</CODE> variable instead of from standard input</TD><BR />
</TR><BR />
</TBODY><BR />
</TABLE><BR />
With that in mind, let's look again at the pattern, in quotes:<BR />
<PRE><CODE>"^(subaccount|directory)\s+(\S+)(?=\s+$displayname)"</CODE></PRE><BR />
If the <CODE>displayname</CODE> variable contains "techedhouse", then, after parameter substitution within these double quotes (i.e. at the shell level), we have this as the actual pattern:<BR />
<PRE><CODE>^(subaccount|directory)\s+(\S+)(?=\s+techedhouse)</CODE></PRE><BR />
Spoken out loud we might say: <EM>the line must start with either 'subaccount' or 'directory' right at the beginning, and whichever it is, we want to capture it; that must be directly followed by at least one whitespace character (<CODE>\s+</CODE>), followed by at least one non-whitespace character (<CODE>\S+</CODE>), and we want to capture those non-whitespace characters*; oh, but also this must be followed (<CODE>(?=</CODE>) by at least one whitespace character (<CODE>\s+</CODE>) and then 'techedhouse'</EM>.<BR />
<BR />
* those non-whitespace characters will be the GUID<BR />
<BR />
Let's test this out manually, to see what happens. Let's assume that we're looking for the GUID of a resource with a display name of "techedhouse":<BR />
<DIV><BR />
<PRE class="sourceCode bash"><CODE class="sourceCode bash"><SPAN id="cb15-1"><SPAN class="kw">;</SPAN> <SPAN class="ex">btp</SPAN> get accounts/global-account <SPAN class="at">--show-hierarchy</SPAN> <SPAN class="dv">2</SPAN><SPAN class="op">&gt;</SPAN>/dev/null <SPAN class="dt">\</SPAN></SPAN><BR />
<SPAN id="cb15-2">  <SPAN class="kw">|</SPAN> <SPAN class="fu">grep</SPAN> <SPAN class="at">-P</SPAN> <SPAN class="at">-o</SPAN> <SPAN class="st">'^(subaccount|directory)\s+(\S+)(?=\s+techedhouse)'</SPAN></SPAN><BR />
<SPAN id="cb15-3"><SPAN class="ex">directory</SPAN>        2558794c-f8cd-4422-b071-3b21c2922a02</SPAN></CODE></PRE><BR />
</DIV><BR />
Note that the whitespace and "techedhouse" inside the positive lookahead assertion (i.e. <CODE>(?=\s+techedhouse)</CODE>) is not captured and therefore we don't see it as a third value in the output.<BR />
<BR />
With the two values output like this:<BR />
<PRE><CODE>directory        2558794c-f8cd-4422-b071-3b21c2922a02</CODE></PRE><BR />
we can better understand what's happening with the <CODE>read</CODE> builtin; let's substitute the output to see it in action:<BR />
<DIV><BR />
<PRE class="sourceCode bash"><CODE class="sourceCode bash"><SPAN id="cb17-1"><SPAN class="bu">read</SPAN> <SPAN class="at">-r</SPAN> <SPAN class="va">subtype</SPAN> <SPAN class="va">guid</SPAN> <SPAN class="op">&lt;&lt;&lt;</SPAN> <SPAN class="st">"directory        2558794c-f8cd-4422-b071-3b21c2922a02"</SPAN></SPAN></CODE></PRE><BR />
</DIV><BR />
And guess what - after this, the <CODE>subtype</CODE> variable will contain "directory" and the <CODE>guid</CODE> variable will contain "2558794c-f8cd-4422-b071-3b21c2922a02". And then with the <CODE>echo</CODE> a little bit further on in the script, this GUID is emitted to standard output before the script ends. Nice!<BR />
<BR />
In case you're wondering about the <CODE>-r</CODE> option to the <CODE>read</CODE> builtin, it's to stop any backslashes in the input being interpreted inappropriately. I wrote about this in a recent post on my <A href="https://qmacro.org/autodidactics/" target="_blank" rel="nofollow noopener noreferrer">Autodidactics blog</A> - see <A href="https://qmacro.org/autodidactics/2021/11/07/exploring-fff-part-2-get-ls-colors/#readcommand" target="_blank" rel="nofollow noopener noreferrer">The read command</A> section of <A href="https://qmacro.org/autodidactics/2021/11/07/exploring-fff-part-2-get-ls-colors/" target="_blank" rel="nofollow noopener noreferrer">Exploring fff part 2 - get_ls_colors</A>.<BR />
<H2 id="wrapping-up-this-part" id="toc-hId--24244838">Wrapping up this part</H2><BR />
We can see how the power of the <A href="https://en.wikipedia.org/wiki/Unix_philosophy" target="_blank" rel="nofollow noopener noreferrer">Unix Philosophy</A> helps us prepare, run, and handle output of executables on the command line. Here we put together just a few lines to help us level up and be even more efficient, by allowing us to determine our SAP Business Technology Platform account's resource GUIDs with zero effort, and use those determined GUIDs in the context of other commands.<BR />
<BR />
In part 2 we'll learn a little bit more about the Unix Philosophy and then examine alternative output formats for complex data structures and relationships; formats that are more predictable and - with the right tools - more reliably parseable.<BR />
<BR />
<A name="furtherreading" target="_blank"></A><BR />
<H2 id="further-reading-and-viewing" id="toc-hId--220758343">Further reading and viewing</H2><BR />
Here's a quick list of resources that you may wish to consume, relating to what you've read in this post:<BR />
<UL><BR />
 	<LI>The replay of the SAP TechEd Developer Keynote itself: <A href="https://www.youtube.com/watch?v=kOFuwDSXBZg" target="_blank" rel="nofollow noopener noreferrer">Improve Developers' Lives: Developer Keynote and Open Discussion</A></LI><BR />
 	<LI>A link to the part of that Developer Keynote replay which goes directly to the relevant demo part: <A href="https://youtu.be/kOFuwDSXBZg?t=193" target="_blank" rel="nofollow noopener noreferrer">Command Line Magic</A></LI><BR />
 	<LI>More on the Developer Keynote in this blog post from <SPAN class="mention-scrubbed">thomas.jung</SPAN>: <A href="https://blogs.sap.com/2021/11/17/sap-teched-2021-developer-keynote/" target="_blank" rel="noopener noreferrer">SAP TechEd 2021 Developer Keynote</A></LI><BR />
 	<LI>The SAP btp CLI branch of our SAP Tech Bytes repository on GitHub, which has links to related blog posts: <A href="https://github.com/SAP-samples/sap-tech-bytes/tree/2021-09-01-btp-cli" target="_blank" rel="nofollow noopener noreferrer">SAP btp CLI</A></LI><BR />
 	<LI>The official place to download the btp CLI: <A href="https://tools.hana.ondemand.com/#cloud" target="_blank" rel="nofollow noopener noreferrer">SAP Development Tools - Cloud</A></LI><BR />
 	<LI>A script that will download, unpack and set up the btp CLI for you: <A href="https://github.com/SAP-samples/sap-tech-bytes/blob/2021-09-01-btp-cli/getbtpcli" target="_blank" rel="nofollow noopener noreferrer">getbtpcli</A></LI><BR />
 	<LI>A mini-series on the SAP btp CLI from the Hands-on SAP Dev show on the SAP Developers YouTube channel: <A href="https://www.youtube.com/playlist?list=PL6RpkC85SLQDXx827kdjKc6HRvdMRZ8P5" target="_blank" rel="nofollow noopener noreferrer">The SAP btp CLI</A></LI><BR />
 	<LI>A reference manual for Bash: <A href="https://www.gnu.org/software/bash/manual/html_node/index.html" target="_blank" rel="nofollow noopener noreferrer">Bash Reference Manual</A></LI><BR />
 	<LI>Documentation from the SAP Help Portal: <A href="https://help.sap.com/products/BTP/65de2977205c403bbc107264b8eccf4b/a21360fa19714751a7c49c796d39ac3d.html?locale=en-US&amp;state=DRAFT&amp;version=Cloud" target="_blank" rel="noopener noreferrer">Setting up a Trial Account via the Command Line [Feature Set B]</A></LI><BR />
 	<LI>The official SAP btp CLI documentation: <A href="https://help.sap.com/products/BTP/65de2977205c403bbc107264b8eccf4b/7c6df2db6332419ea7a862191525377c.html?locale=en-US&amp;version=Cloud" target="_blank" rel="noopener noreferrer">Account Administration Using the SAP BTP Command Line Interface (btp CLI) [Feature Set B]</A></LI><BR />
 	<LI>More deep dives into Bash script arcana: <A href="https://qmacro.org/autodidactics/2021/09/03/exploring-fff-part-1-main/" target="_blank" rel="nofollow noopener noreferrer">Exploring fff part 1 - main</A> and <A href="https://qmacro.org/autodidactics/2021/11/07/exploring-fff-part-2-get-ls-colors/" target="_blank" rel="nofollow noopener noreferrer">Exploring fff part 2 - get_ls_colors</A></LI><BR />
</UL><BR />
The second blog post in this series is now also available: <A href="https://blogs.sap.com/2021/12/01/getting-btp-resource-guids-with-the-btp-cli-part-2-json-and-jq/" target="_blank" rel="noopener noreferrer">Getting BTP resource GUIDs with the btp CLI â part 2 â JSON and jq</A>.
---
Careers in the SAP arena - share your advice and help!
SAP-TechEd-Groupforum-board
2021-11-16
https://community.sap.com/t5/sap-teched-discussions/careers-in-the-sap-arena-share-your-advice-and-help/td-p/1165
2021-11-16-careers-in-the-sap-arena-share-your-advice-and-help
<P>In the Channel 1 chat we've had some questions on starting a career in SAP. If you have advice to share, stories to tell, please let us know here, so folks can learn from you how they might get started themselves. Thanks!&nbsp;</P>
---
UTFRW - Unofficial TechEd Fun Run / Walk / Roll - Share Your Pics!
SAP-TechEd-Groupforum-board
2021-11-15
https://community.sap.com/t5/sap-teched-discussions/utfrw-unofficial-teched-fun-run-walk-roll-share-your-pics/td-p/1047
2021-11-15-utfrw-unofficial-teched-fun-run-walk-roll-share-your-pics
<P>Roll, walk or run a 5K distance during this SAP TechEd week (Nov 15-19) and share a picture with us here! Read more in this blog post:&nbsp;<A href="https://blogs.sap.com/2021/11/15/unofficial-fun-run-walk-roll-for-sap-teched-2021/" target="_self" rel="noopener noreferrer">Unofficial Fun Run / Walk / Roll for SAP TechEd 2021</A></P><P>Cheers!<BR />Phil and DJ</P>
---
Unofficial Fun Run / Walk / Roll for SAP TechEd 2021
SAP-TechEd-Groupblog-board
2021-11-15
https://community.sap.com/t5/sap-teched-blog-posts/unofficial-fun-run-walk-roll-for-sap-teched-2021/ba-p/13500979
2021-11-15-unofficial-fun-run-walk-roll-for-sap-teched-2021
<EM>Let's get active together again for SAP TechEd 2021 by walking, running or rolling a 5K route and sharing that experience.</EM><BR />
<BR />
Last year <SPAN class="mention-scrubbed">phil.cooley</SPAN> and I came up with the idea for getting some fresh air and enjoying a bit of exercise together during SAP TechEd. We wrote about it in the post <A href="https://blogs.sap.com/2020/12/01/utfrw-unofficial-teched-fun-run-walk/" target="_blank" rel="noopener noreferrer">UTFRW - Unofficial TechEd Fun Run / Walk</A>. It's that time of year again - SAP TechEd week is now upon us for 2021 - so let's get into action once more!<BR />
<BR />
Phil and I have set up <A href="https://groups.community.sap.com/t5/sap-teched-discussions/utfrw-unofficial-teched-fun-run-walk-roll-share-your-pics/m-p/1047#M127" target="_blank" rel="noopener noreferrer">a new topic</A> in the SAP TechEd discussion group and all you need to do is cover a 5K distance any way you can and share a picture from it.<BR />
<BR />
<STRONG>Share your pics here in this topic â <A href="https://groups.community.sap.com/t5/sap-teched-discussions/utfrw-unofficial-teched-fun-run-walk-roll-share-your-pics/m-p/1047#M127" target="_blank" rel="noopener noreferrer">UTFRW - Unofficial TechEd Fun Run / Walk / Roll - Share Your Pics!</A></STRONG><BR />
<BR />
There are no prizes, it's just for fun.<BR />
<BR />
So get your "active" on, get out there and share a picture of yourself or where you've been.<BR />
<BR />
As we said last time, this is completely unofficial and just a way of us sharing our own personal experiences â nothing more than that. Take care, have fun, and see you in the discussion!<BR />
<BR />
Phil and DJ<BR />
<BR />
&nbsp;
---
SAP Open Source Webinar on the Open Documentation Initiative
open-sourceblog-board
2021-11-10
https://community.sap.com/t5/open-source-blogs/sap-open-source-webinar-on-the-open-documentation-initiative/ba-p/13496194
2021-11-10-sap-open-source-webinar-on-the-open-documentation-initiative
<EM>Here's the information about an SAP Open Source webinar we held yesterday about the Open Documentation Initiative.</EM><BR />
<BR />
SAP's Open Source Program Office has a <A href="https://webinars.sap.com/ospo-webinar-series/en/home" target="_blank" rel="noopener noreferrer">webinar series</A> with a wealth of interesting talks on open source and standards topics. Yesterday I was honoured to be able to give a session on the Open Documentation Initiative.<BR />
<BR />
You can access the replay any time - head over to this <A href="https://webinars.sap.com/ospo-webinar-series/en/webinar-replays" target="_blank" rel="noopener noreferrer">webinar replays page</A> and select the session.<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2021/11/screenshot-2021-11-10-at-13.40.17.png" /><BR />
<BR />
I included lots of links in the slides, but rather than just present the slides here, I thought I'd share a curated set of the links for further reading and reference.<BR />
<BR />
<STRONG>Precedence</STRONG><BR />
<BR />
In the Precedence section, I talked about the fact that we're not the first to do this, and gave examples from GitHub and Microsoft. The blog post linked at the bottom of one of these slides is <A href="https://docs.microsoft.com/en-us/teamblog/introducing-docs-microsoft-com" target="_blank" rel="nofollow noopener noreferrer">Introducing docs.microsoft.com</A> and is a great read. In this section I also showed a couple of examples of collaboration I'd enjoyed with the Microsoft and GitHub documentation teams:<BR />
<UL><BR />
 	<LI>I submitted an issue to the Azure Docs repo: <A href="https://github.com/MicrosoftDocs/azure-docs/issues/74539" target="_blank" rel="nofollow noopener noreferrer">Deletion of (second) node resource group - confusion / clarity</A> which resulted in an improvement to the documentation in question</LI><BR />
 	<LI>I submitted a pull request to the main GitHub Docs repo: <A href="https://github.com/github/docs/pull/2211" target="_blank" rel="nofollow noopener noreferrer">include 'shell command' as a possible step task</A> which was merged and improved the documentation in question in a small but important way</LI><BR />
</UL><BR />
<STRONG>Gamification</STRONG><BR />
<BR />
In the Gamification section I referred to the two missions in SAP Community that relate to the Open Documentation Initiative - you can find them in the <A href="https://community.sap.com/resources/missions-badges?q=documentation" target="_blank">Collaboration Missions</A> area.<BR />
<BR />
<STRONG>Guidelines</STRONG><BR />
<BR />
The guidelines explain how you can contribute, and are in the SAP Help Portal in the <A href="https://help.sap.com/products/open-documentation-initiative/contribution-guidelines/readme.html?locale=en-US" target="_blank" rel="noopener noreferrer">Contribution Guidelines</A> section. It is to page in this section that we created and submitted a change, in the form of a pull request, <A href="https://github.com/SAP-docs/contribution-guidelines/pull/82" target="_blank" rel="nofollow noopener noreferrer">avoid having the word appropriate twice</A>, live during the webinar. This pull request has been merged <span class="lia-unicode-emoji" title=":slightly_smiling_face:">ð</span><BR />
<BR />
<STRONG>More info</STRONG><BR />
<BR />
To wrap up, I provided a few links, which are here (some are already shared, above):<BR />
<UL><BR />
 	<LI>Blog posts:&nbsp;<A href="https://blogs.sap.com/2021/05/20/introducing-the-open-documentation-initiative/" target="_blank" rel="noopener noreferrer">Introducing the Open Documentation Initiative</A>&nbsp;and&nbsp;<A href="https://blogs.sap.com/2021/05/27/collaboration-missions-for-the-open-documentation-initiative/" target="_blank" rel="noopener noreferrer">Collaboration missions for the Open Documentation Initiative</A></LI><BR />
 	<LI>Video:&nbsp;<A href="https://www.youtube.com/watch?v=DwxrZ6ET3Yc" target="_blank" rel="nofollow noopener noreferrer">SAP BTP Open Documentation Initiative</A></LI><BR />
 	<LI>GitHub Organization:&nbsp;<A href="https://github.com/sap-docs" target="_blank" rel="nofollow noopener noreferrer">SAP Documentation</A></LI><BR />
</UL><BR />
And of course, don't forget the main pilot documentation, which can be found on the SAP Help Portal here: <A href="https://help.sap.com/products/SAP%20Business%20Application%20Studio/9d1db9835307451daa8c930fbd9ab264/8f46c6e6f86641cc900871c903761fd4.html?locale=en-US" target="_blank" rel="noopener noreferrer">SAP Business Application Studio</A> and in the corresponding SAP Documentation repository here: <A href="https://github.com/SAP-docs/btp-business-application-studio" target="_blank" rel="nofollow noopener noreferrer">SAP-docs/btp-business-application-studio</A>.<BR />
<BR />
<HR /><BR />
<BR />
In the immortal words of the <A href="https://hitchhikers.fandom.com/wiki/Sirius_Cybernetics_Corporation" target="_blank" rel="nofollow noopener noreferrer">Sirius Cybernetics Corporation</A> Complaints Division - share &amp; enjoy!
---
Devtoberfest 2021: Looking Back on Week 1, and Forward to Week 2
technology-blog-sap
2021-10-08
https://community.sap.com/t5/technology-blogs-by-sap/devtoberfest-2021-looking-back-on-week-1-and-forward-to-week-2/ba-p/13520872
2021-10-08-devtoberfest-2021-looking-back-on-week-1-and-forward-to-week-2
<EM>Here's a summary of what went on in week 1 of Devtoberfest 2021, and what to look forward to in week 2.</EM><BR />
<BR />
Week 1 of Devtoberfest 2021 - the "<A href="https://github.com/SAP-samples/devtoberfest-2021/tree/main/topics/Week1_Welcome" target="_blank" rel="nofollow noopener noreferrer">Welcome to Devtoberfest</A>" week - is already almost done and dusted, phew!<BR />
<BR />
<STRONG>Devtoberfest Launch Party</STRONG><BR />
<BR />
We kicked it off in style, with a fun live "Devtoberfest Launch Party" event. It was hosted by our fearless (and ultimately permanently relaxed) head of Developer and Community Relations <SPAN class="mention-scrubbed">thomas.grassl</SPAN>, and starred a special guest, none other than SAP Executive Board Member and CTO <SPAN class="mention-scrubbed">juergen.mueller</SPAN>.<BR />
<P style="overflow: hidden;margin-bottom: 0px"><IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2021/10/screenshot-2021-10-07-at-12.31.09.png" /></P><BR />
We had some great interaction and chat during the live broadcast on YouTube, thank you everyone for that - it makes things more special.<BR />
<BR />
Note that live streams on YouTube are the backbone for Devtoberfest - if you look through <A href="https://github.com/SAP-samples/devtoberfest-2021#key-dates" target="_blank" rel="nofollow noopener noreferrer">the events across the different weeks</A> you'll see that very many of them will be in the form of live streams on YouTube - on the <A href="https://youtube.com/sapdevs" target="_blank" rel="nofollow noopener noreferrer">SAP Developers channel</A>. Now would be a good time to subscribe if you haven't done already, so you can set reminders for upcoming sessions.<BR />
<BR />
<STRONG>An Overview of Upcoming Weeks and the Contest</STRONG><BR />
<BR />
After the slot with Juergen, the Developer Advocates joined and talked about the different upcoming weeks. We also briefly covered the contest and how points can be earned; if you want to read more on this, check out the details on the home of Devtoberfest - our GitHub repo: <A href="https://github.com/SAP-samples/devtoberfest-2021" target="_blank" rel="nofollow noopener noreferrer">https://github.com/SAP-samples/devtoberfest-2021</A>. If you have any questions, let us know by creating an <A href="https://github.com/SAP-samples/devtoberfest-2021/issues" target="_blank" rel="nofollow noopener noreferrer">issue</A> in the repo.<BR />
<BR />
<STRONG>Information about Devtoberfest Gaming Night</STRONG><BR />
<BR />
We also mentioned the Devtoberfest Gaming Night, for which we have set up a Discord server - the main purpose of which is for us to coordinate who wants to play what with whom and where.<BR />
<BR />
There's an invite link to the Discord server over on the Devtoberfest repo, and it's here too: <A href="https://discord.com/invite/8EDCdsYe7p" target="_blank" rel="nofollow noopener noreferrer">https://discord.com/invite/8EDCdsYe7p</A>.<BR />
<BR />
<STRONG>Computer History Museum Tour</STRONG><BR />
<BR />
To finish off this current week 1, we have a fabulous live <A href="https://github.com/SAP-samples/devtoberfest-2021/tree/main/topics/Week1_Welcome#a-virtual-tour-of-the-revolution-exhibition-at-the-computer-history-museum-by-dag-spicer-senior-curator" target="_blank" rel="nofollow noopener noreferrer">tour</A> of the âRevolutionâ Exhibition at the Computer History Museum, led by Dag Spicer, Senior Curator. If you're reading this post shortly after it's been published - you are in luck! The tour starts at 16:00 CEST / 19:30 IST / 10:00 EDT TODAY (Friday 08 October):<BR />
<BR />
<A href="https://www.youtube.com/watch?v=M6SXIeXbnik" target="test_blank" rel="nofollow noopener noreferrer">https://www.youtube.com/watch?v=M6SXIeXbnik</A><BR />
<BR />
<HR /><BR />
<BR />
<H2 id="toc-hId-959223170">Upcoming: Week 2 - Best Practices</H2><BR />
Next week (11 - 15 October) is Devtoberfest week 2.<BR />
<BR />
The theme of this week is <A href="https://github.com/SAP-samples/devtoberfest-2021/tree/main/topics/Week2_Best_Practices" target="_blank" rel="nofollow noopener noreferrer">Best Practices</A>, where you can learn how you can level up in the technical areas that you work in every day. In this week we have:<BR />
<UL><BR />
 	<LI><A href="https://github.com/SAP-samples/devtoberfest-2021/blob/main/topics/Week2_Best_Practices/README.md#presentations" target="_blank" rel="nofollow noopener noreferrer">presentations</A> from awesome presenters <SPAN class="mention-scrubbed">david.kunz2</SPAN> and <SPAN class="mention-scrubbed">andre.fischer</SPAN>&nbsp;on YouTube in live streams that you can join, watch, and chat with the other attendees</LI><BR />
 	<LI>a&nbsp;<A href="https://github.com/SAP-samples/devtoberfest-2021/blob/main/topics/Week2_Best_Practices/README.md#challenge" target="_blank" rel="nofollow noopener noreferrer">challenge</A> for you to complete and earn points (I'll be doing a presentation before this challenge that relates to it, too)</LI><BR />
 	<LI>a series of&nbsp;<A href="https://github.com/SAP-samples/devtoberfest-2021/blob/main/topics/Week2_Best_Practices/README.md#tutorials" target="_blank" rel="nofollow noopener noreferrer">tutorials</A>&nbsp;for you to complete and earn points</LI><BR />
 	<LI>a&nbsp;<A href="https://github.com/SAP-samples/devtoberfest-2021/blob/main/topics/Week2_Best_Practices/README.md#special-guest-speaker" target="_blank" rel="nofollow noopener noreferrer">special guest interview</A> with RedMonk's James Governor, on Best Practices in the Cloud Native era</LI><BR />
</UL><BR />
Check out the <A href="https://github.com/SAP-samples/devtoberfest-2021/tree/main/topics/Week2_Best_Practices" target="_blank" rel="nofollow noopener noreferrer">Best Practices week page</A> in the repo for all the details.<BR />
<BR />
We're really looking forward to seeing you next week. Happy Devtoberfest!<BR />
<BR />
<IMG src="https://github.com/SAP-samples/devtoberfest-2021/blob/main/images/004-Devtoberfest%20Logo.png?raw=true" alt="004-Devtoberfest Logo.png" width="149" height="158" /><BR />
<BR />
&nbsp;<BR />
<BR />
&nbsp;<BR />
<P style="overflow: hidden;margin-bottom: 0px"></P>
---
SAP Tech Bytes: btp CLI - autocompletion
technology-blog-sap
2021-09-21
https://community.sap.com/t5/technology-blogs-by-sap/sap-tech-bytes-btp-cli-autocompletion/ba-p/13503134
2021-09-21-sap-tech-bytes-btp-cli-autocompletion
<EM>Get the btp CLI to help you with command autocompletion.</EM><BR />
<BR />
This is a follow-on post from the previous one: <A href="https://blogs.sap.com/2021/09/14/sap-tech-bytes-btp-cli-managing-configuration/" target="_blank" rel="noopener noreferrer">SAP Tech Bytes: btp CLI - managing configuration</A> and starts where we left off there, with you logged in.<BR />
<H2 id="actions-groups-objects-and-the-command-structure" id="toc-hId-957458652">Actions, groups, objects and the command structure</H2><BR />
There are many different types of resources that you might want to manage on the SAP Business Technology Platform (BTP). Moreover, there are different actions that you might want to take on each. This is why the command structure that the btp CLI supports is how it is:<BR />
<PRE><CODE>Usage: btp [OPTIONS] ACTION [GROUP/OBJECT] [PARAMS]</CODE></PRE><BR />
The BTP resources are the OBJECTs and these are organised into different GROUPs. You perform ACTIONs on these, possibly supplying relevant information via PARAMS. There are also general <A href="https://help.sap.com/viewer/DRAFT/65de2977205c403bbc107264b8eccf4b/Cloud/en-US/11d9f67d2c68485ca2f435b955d3b85b.html" target="_blank" rel="noopener noreferrer">OPTIONS</A> that are not ACTION or GROUP/OBJECT specific.<BR />
<BR />
Here's a shortened excerpt from the output shown when invoking the <CODE>--help</CODE> option, i.e. <CODE>btp --help</CODE>:<BR />
<PRE><CODE>Actions for accounts/available-environment<BR />
  list                  Get all available environments for a subaccount<BR />
  get                   Get details about an available environment for a subaccount<BR />
<BR />
Actions for accounts/directory<BR />
  get                   Get details about a directory and its contents<BR />
  create                Create a directory<BR />
  update                Update a directory<BR />
  delete                Delete a directory<BR />
  enable                Change the set of enabled features for a directory<BR />
<BR />
Actions for accounts/subaccount<BR />
  list                  List all subaccounts in a global account<BR />
  get                   Get details about a subaccount<BR />
  create                Create a subaccount<BR />
  update                Update a subaccount<BR />
  delete                Delete a subaccount<BR />
  move                  Move a subaccount<BR />
  subscribe             Subscribe to an application from a subaccount<BR />
  unsubscribe           Unsubscribe an application from a subaccount<BR />
<BR />
Actions for security/app<BR />
  list                  List all apps<BR />
  get                   Get details about a specific app<BR />
<BR />
...</CODE></PRE><BR />
The relationship between ACTION (<CODE>get</CODE>, <CODE>list</CODE>, <CODE>update</CODE>, etc) and GROUP/OBJECT (<CODE>accounts/directory</CODE>, <CODE>security/app</CODE>, etc) can be seen quite nicely here.<BR />
<H2 id="enabling-autocomplete" id="toc-hId-760945147">Enabling autocomplete</H2><BR />
With the btp CLI you can perform different actions on a wide range of objects, so much so that it can be a little overwhelming at first. This is where autocompletion comes in. You can use the Tab key to ask <CODE>btp</CODE> to make suggestions, based on what you've typed in so far (which could be nothing at all).<BR />
<BR />
As well as the main actions, there are some general actions too - you've used a couple already: <CODE>login</CODE> and <CODE>target</CODE>. <A href="https://help.sap.com/viewer/DRAFT/65de2977205c403bbc107264b8eccf4b/Cloud/en-US/46355fab22814944bedf449a6c953369.html" target="_blank" rel="noopener noreferrer">Turning on autocompletion</A> is achieved with another of these general actions.<BR />
<BR />
Do it now:<BR />
<DIV><BR />
<PRE class="sourceCode bash"><CODE class="sourceCode bash"><SPAN id="cb3-1"><SPAN class="ex">btp</SPAN> enable autocomplete bash</SPAN></CODE></PRE><BR />
</DIV><BR />
<BLOCKQUOTE>The btp CLI supports autocompletion for different shells: Bash, Zsh and PowerShell. The shell you're running in your SAP Business Application Studio dev space is Bash; this is why you need to specify <CODE>bash</CODE> as a parameter.</BLOCKQUOTE><BR />
Here's what happens:<BR />
<PRE><CODE>This will install the autocomplete plugin script for bash<BR />
to /home/user/.config/btp/autocomplete/scripts.<BR />
Do you want to continue? [no]&gt;yes<BR />
Which RCFile should be used for the installation?<BR />
1: /home/user/.bash_profile<BR />
2: /home/user/.bashrc<BR />
3: /home/user/.profile<BR />
4: Custom<BR />
Enter option&gt;2<BR />
Autocomplete script for bash has been installed<BR />
to /home/user/.config/btp/autocomplete/scripts.<BR />
You must start a new terminal session to activate the installed script.<BR />
<BR />
Tips:<BR />
  Use the TAB key to complete commands and provide valid command actions, options, and parameters.<BR />
  Use the TAB key to cycle through the suggestion lists and the ENTER key to select.<BR />
<BR />
OK</CODE></PRE><BR />
There are a few things worthy of note here:<BR />
<UL><BR />
 	<LI>the autocomplete mechanism is installed into a subdirectory <CODE>autocomplete/</CODE> within the configuration directory we specified for the btp CLI; this keeps everything nicely together</LI><BR />
 	<LI>I chose option 2, i.e. <CODE>/home/user/.bashrc</CODE> as that is the file we've been using to maintain and customise our shell environment</LI><BR />
 	<LI>There are useful tips at the end of the output on how to use the autocomplete feature</LI><BR />
</UL><BR />
<BLOCKQUOTE>Have you ever wondered why the <CODE>.bashrc</CODE> file name ends in <CODE>rc</CODE> and what it means? Did you spot the reference to <CODE>RCFile</CODE> in the output? Let me know in the comments.</BLOCKQUOTE><BR />
The installed autocomplete mechanism in <CODE>.config/btp/autocomplete/</CODE> needs to be activated when the shell session starts; if you look into your <CODE>.bashrc</CODE> file now, you'll see a new line has been appended, right after the two we recently added. The line looks like this (with some whitespace added for readability):<BR />
<DIV><BR />
<PRE class="sourceCode bash"><CODE class="sourceCode bash"><SPAN id="cb5-1"><SPAN class="va">SAP_BTP_CLI_AUTOCOMPLETE=</SPAN><SPAN class="st">"/home/user/.config/btp/autocomplete/scripts/sapbtpcli-autocomplete.plugin.sh"</SPAN> <SPAN class="kw">\</SPAN></SPAN><BR />
<SPAN id="cb5-2">  <SPAN class="kw">&amp;&amp;</SPAN> <SPAN class="bu">source</SPAN> <SPAN class="va">$SAP_BTP_CLI_AUTOCOMPLETE</SPAN> \</SPAN><BR />
<SPAN id="cb5-3">  <SPAN class="kw">&amp;&amp;</SPAN> <SPAN class="bu">bind</SPAN> <SPAN class="st">'set show-all-if-ambiguous on'</SPAN> \</SPAN><BR />
<SPAN id="cb5-4">  <SPAN class="kw">&amp;&amp;</SPAN> <SPAN class="bu">bind</SPAN> <SPAN class="st">'set show-mode-in-prompt on'</SPAN></SPAN></CODE></PRE><BR />
</DIV><BR />
This just sets another btp CLI related environment variable pointing to the autocomplete script, runs that script, and sets a couple of <A href="https://www.gnu.org/software/bash/manual/html_node/Readline-Init-File-Syntax.html" target="_blank" rel="nofollow noopener noreferrer"><CODE>readline</CODE> options</A>:<BR />
<UL><BR />
 	<LI><CODE>show-all-if-ambiguous</CODE> will list possible matches immediately</LI><BR />
 	<LI><CODE>show-mode-in-prompt</CODE> adds a little indicator to the prompt to show the editing mode (we'll see this shortly)</LI><BR />
</UL><BR />
<BLOCKQUOTE><CODE>readline</CODE> is Bash's command-line editing interface.</BLOCKQUOTE><BR />
As instructed, start a new terminal session to have the <CODE>.bashrc</CODE> re-sourced, and you're ready. Note that the shell prompt now has an @ symbol at the front:<BR />
<PRE><CODE>@user: user $</CODE></PRE><BR />
This is the result of turning on <CODE>show-mode-in-prompt</CODE>; personally, I don't like this so I remove that last <CODE>bind</CODE> statement from my <CODE>.bashrc</CODE>. You can do the same, or leave it as it is.<BR />
<H2 id="enjoying-the-comfort-of-autocomplete" id="toc-hId-564431642">Enjoying the comfort of autocomplete</H2><BR />
Now you're ready to try the autocomplete features out. First, enter <CODE>btp</CODE> (including a space, so that the shell won't try to autocomplete the "btp" command itself), and then hit the Tab key; you should see something like this:<BR />
<PRE><CODE>@user: user $ btp &lt;tab&gt;<BR />
add          enable       register     unassign     update<BR />
assign       get          remove       unregister<BR />
create       list         share        unshare<BR />
delete       move         subscribe    unsubscribe</CODE></PRE><BR />
You'll recognise these as all of the possible actions that <CODE>btp</CODE> understands.<BR />
<BR />
Next, continue with <CODE>l &lt;tab&gt;</CODE>:<BR />
<PRE><CODE>@user: user $ btp l&lt;tab&gt;</CODE></PRE><BR />
which should then autocomplete to <CODE>list</CODE> and hit <CODE>&lt;tab&gt;</CODE> once more, and you should see the objects, by group, which can be listed:<BR />
<PRE><CODE>@user: user $ btp list<BR />
accounts/assigned-entitlements  security/role<BR />
accounts/available-environment  security/role-collection<BR />
accounts/available-region       security/user<BR />
accounts/custom-property        services/binding<BR />
accounts/entitlement            services/broker<BR />
accounts/environment-instance   services/instance<BR />
accounts/resource-provider      services/offering<BR />
accounts/subaccount             services/plan<BR />
accounts/subscription           services/platform<BR />
security/app</CODE></PRE><BR />
<BLOCKQUOTE>Note that you haven't pressed Enter yet, at all.</BLOCKQUOTE><BR />
Nice! Let's say we want to list the entitlements for our trial subaccount (remember, this is already pre-selected via our use of <CODE>target</CODE> in <A href="https://blogs.sap.com/2021/09/07/sap-tech-bytes-btp-cli-logging-in/" target="_blank" rel="noopener noreferrer">SAP Tech Bytes: btp CLI - logging in</A>). So continue on the same line with <CODE>a&lt;tab&gt;e&lt;tab&gt;</CODE> which will narrow things down to the <CODE>accounts</CODE> group and the objects beginning with <CODE>e</CODE>:<BR />
<PRE><CODE>@user: user $ btp list<BR />
accounts/entitlement           accounts/environment-instance</CODE></PRE><BR />
Close in on your target by adding a final <CODE>t</CODE> (note that the autocomplete has autocompleted as far as it can by adding an <CODE>n</CODE>) to disambiguate <CODE>entitlement</CODE> from <CODE>environment-instance</CODE>, and then hit <CODE>&lt;tab&gt;</CODE> one more time to autocomplete to what we're looking for:<BR />
<PRE><CODE>@user: user $ btp list accounts/entitlement<BR />
<BR />
Showing entitlements for subaccount b8a33bf9-b155-4736-aadf-582dae8fd65a:<BR />
<BR />
service name                         service plan       quota<BR />
customer-order-sourcing-app-trial    dev                1<BR />
saas-registry                        application        1<BR />
APPLICATION_RUNTIME                  MEMORY             4<BR />
alm-ts                               lite               1<BR />
sapappstudiotrial                    trial              1<BR />
business-rules                       lite               1<BR />
transport                            standard           1<BR />
personal-data-manager-service        standard           1<BR />
portal                               standard           100<BR />
...</CODE></PRE><BR />
Now that's what I call working in comfort! Here it is in action:<BR />
<P style="overflow: hidden;margin-bottom: 0px"><IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2021/09/autocomplete.gif" /></P><BR />
The best thing to do here is to simply try the autocomplete feature out for yourself - it's easiest to learn about it by doing. And that's it for this post!<BR />
<BR />
In the next post, we take a look at output, and alternative formats.<BR />
<BR />
<HR /><BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2021/02/screenshot-2021-02-22-at-11.00.25.png" /><BR />
<BR />
SAP Tech Bytes is an initiative to bring you bite-sized information on all manner of topics, in <A href="https://www.youtube.com/playlist?list=PL6RpkC85SLQC3HBShmlMaPu_nL--4f20z" target="_blank" rel="nofollow noopener noreferrer">video</A> and <A href="https://blogs.sap.com/tag/sap-tech-bytes/" target="_blank" rel="noopener noreferrer">written</A> format. Enjoy!
---
SAP Tech Bytes: btp CLI - managing configuration
technology-blog-sap
2021-09-14
https://community.sap.com/t5/technology-blogs-by-sap/sap-tech-bytes-btp-cli-managing-configuration/ba-p/13496400
2021-09-14-sap-tech-bytes-btp-cli-managing-configuration
<EM>Understand and manage the btp CLI client configuration.</EM><BR />
<BR />
<span class="lia-unicode-emoji" title=":police_car_light:">ð¨</span> Update: See <A href="https://blogs.sap.com/2022/02/17/sap-tech-bytes-btp-cli-new-home-for-configuration/" target="_blank" rel="noopener noreferrer">SAP Tech Bytes: btp CLI - new home for configuration</A> for new information.<BR />
<BR />
This is a follow-on post from the previous one: <A href="https://blogs.sap.com/2021/09/07/sap-tech-bytes-btp-cli-logging-in/" target="_blank" rel="noopener noreferrer">SAP Tech Bytes: btp CLI - logging in</A> and starts where we left off there, with you logged in.<BR />
<BR />
When you connect and authenticate, the connection and login details are stored locally, as we noted from staring at the output from our initial invocation of <CODE>btp</CODE>.<BR />
<PRE><CODE>Configuration:                     /home/user/.cache/.btp/config.json</CODE></PRE><BR />
This is the default location that <CODE>btp</CODE> uses.<BR />
<H2 id="app-studio-lifecycle" id="toc-hId-937233349">App Studio lifecycle</H2><BR />
This post and the posts in the rest of this SAP Tech Bytes mini-series are based on running the btp CLI in the SAP Business Application Studio (App Studio). Certain directories in your App Studio dev space's work area are cleaned up when a dev space is stopped and restarted.<BR />
<BR />
One of those directories is the <CODE>/home/user/.cache/</CODE> directory.<BR />
<BR />
If we look at this in detail (with <CODE>ls -la | grep .cache</CODE>), it's fairly clear that it's ephemeral - here it's a symbolic link to a directory in <CODE>/tmp/</CODE>:<BR />
<PRE><CODE>lrwxrwxrwx  1 root root    20 Sep  7 09:01 .cache -&gt; /tmp/usertemp/.cache</CODE></PRE><BR />
In general, in most Unix-like environments, nothing in <CODE>/tmp/</CODE> is guaranteed to be there after a restart. Given that this is where <CODE>btp</CODE> stores configuration, what happens when our App Studio dev space is stopped and then restarted? Well, let's find out.<BR />
<BR />
First, let's make sure that we <EM>are</EM> still logged in, by invoking <CODE>btp</CODE> with no further parameters. If we're logged in, we should see something like this (i.e. <CODE>btp</CODE> shows us the details of our connection and identity):<BR />
<PRE><CODE>SAP BTP command line interface (client v2.8.0)<BR />
<BR />
Usage: btp [OPTIONS] ACTION [GROUP/OBJECT] [PARAMS]<BR />
<BR />
CLI server URL:                    <A href="https://cpcli.cf.eu10.hana.ondemand.com" target="test_blank" rel="nofollow noopener noreferrer">https://cpcli.cf.eu10.hana.ondemand.com</A> (server v2.8.0)<BR />
User:                              P0003480944 (sapdeveloper@example.com)<BR />
Configuration:                     /home/user/.cache/.btp/config.json<BR />
<BR />
Current target:<BR />
  Global account (subdomain: 82715b8dtrial-ga)<BR />
  ââ Subaccount (ID: b8a33bf9-b155-4736-aadf-582dae8fd65a)<BR />
<BR />
Tips:<BR />
  For information about the targeting mechanism, use 'btp --help target'.<BR />
  To display general help, use 'btp --help'.<BR />
<BR />
OK</CODE></PRE><BR />
Next, go back to the App Studio "Dev Space Manager", and stop the dev space you created for this btp CLI adventure (in <A href="https://blogs.sap.com/2021/09/01/sap-tech-bytes-btp-cli-installation/" target="_blank" rel="noopener noreferrer">SAP Tech Bytes: btp CLI - installation</A>). Once it's stopped, restart it and re-enter it.<BR />
<BLOCKQUOTE>I find the quickest way to get back to the App Studio's "Dev Space Manager" is just to remove the hashpath from the URL; in this example, it would be by removing <CODE>#ws-kvhjc</CODE> from <CODE><A href="https://82715b8dtrial.eu10cf.trial.applicationstudio.cloud.sap/index.html#ws-kvhjc" target="test_blank" rel="nofollow noopener noreferrer">https://82715b8dtrial.eu10cf.trial.applicationstudio.cloud.sap/index.html#ws-kvhjc</A></CODE> (this is the dev space's ID).</BLOCKQUOTE><BR />
<H2 id="starting-over" id="toc-hId-740719844">Starting over</H2><BR />
Now, in a new terminal, first have a look in the <CODE>.cache/</CODE> directory (we can refer to this relative name as we'll be in our home directory <CODE>/home/user/</CODE> by default in a newly created terminal anyway):<BR />
<PRE><CODE>ls --all --dereference --recursive .cache/</CODE></PRE><BR />
<BLOCKQUOTE>the options given to <CODE>ls</CODE> here make sure we see hidden files (<CODE>--all</CODE>) (remember that <CODE>.btp</CODE> begins with a dot and is therefore hidden by default), that symbolic links are followed (<CODE>--dereference</CODE>) and that the list descends recursively (<CODE>--recursive</CODE>); normally I'd write this as <CODE>ls -aLR .cache/</CODE>.</BLOCKQUOTE><BR />
You won't see the <CODE>.btp/</CODE> directory or anything in it, because it's not there any more (any content that is there will have been recreated when the dev space was restarted).<BR />
<BR />
Try <CODE>btp</CODE> again. This is the result:<BR />
<PRE><CODE>Welcome to the SAP BTP command line interface (client v2.8.0)<BR />
<BR />
Usage: btp [OPTIONS] ACTION [GROUP/OBJECT] [PARAMS]<BR />
<BR />
CLI server URL:                    not set<BR />
User:                              not set<BR />
Configuration:                     /home/user/.cache/.btp/config.json<BR />
<BR />
You are currently not logged in.<BR />
<BR />
Tips:<BR />
  To log in to a global account of SAP BTP, use 'btp login'. For help on login, use 'btp --help login'.<BR />
  To display general help, use 'btp --help'.<BR />
<BR />
OK</CODE></PRE><BR />
Uh-oh! But not surprising, given that the configuration is gone. Actually, there <EM>is</EM> some configuration now there, as <CODE>btp</CODE> will create a <CODE>config.json</CODE> file on invocation. Use the <CODE>ls</CODE> command again to see, and you should see (amongst the other content that was there) this:<BR />
<PRE><CODE>.cache:<BR />
.  ..  .btp<BR />
<BR />
.cache/.btp:<BR />
.  ..  config.json</CODE></PRE><BR />
What's in <CODE>config.json</CODE>? Basically, this:<BR />
<DIV><BR />
<PRE class="sourceCode json"><CODE class="sourceCode json"><SPAN id="cb7-1"><SPAN class="fu">{</SPAN></SPAN><BR />
<SPAN id="cb7-2">  <SPAN class="dt">"ServerURL"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="st">""</SPAN><SPAN class="fu">,</SPAN></SPAN><BR />
<SPAN id="cb7-3">  <SPAN class="dt">"SubDomain"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="st">""</SPAN><SPAN class="fu">,</SPAN></SPAN><BR />
<SPAN id="cb7-4">  <SPAN class="dt">"UserName"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="st">""</SPAN><SPAN class="fu">,</SPAN></SPAN><BR />
<SPAN id="cb7-5">  <SPAN class="dt">"RefreshToken"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="st">""</SPAN><SPAN class="fu">,</SPAN></SPAN><BR />
<SPAN id="cb7-6">  <SPAN class="dt">"Directory"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="st">""</SPAN><SPAN class="fu">,</SPAN></SPAN><BR />
<SPAN id="cb7-7">  <SPAN class="dt">"Subaccount"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="st">""</SPAN><SPAN class="fu">,</SPAN></SPAN><BR />
<SPAN id="cb7-8">  <SPAN class="dt">"Version"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="st">"2.8.0"</SPAN><SPAN class="fu">,</SPAN></SPAN><BR />
<SPAN id="cb7-9">  <SPAN class="dt">"Authentication"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="fu">{</SPAN></SPAN><BR />
<SPAN id="cb7-10">    <SPAN class="dt">"User"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="st">""</SPAN><SPAN class="fu">,</SPAN></SPAN><BR />
<SPAN id="cb7-11">    <SPAN class="dt">"Mail"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="st">""</SPAN></SPAN><BR />
<SPAN id="cb7-12">  <SPAN class="fu">},</SPAN></SPAN><BR />
<SPAN id="cb7-13">  <SPAN class="dt">"TrustedURLs"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="kw">null</SPAN><SPAN class="fu">,</SPAN></SPAN><BR />
<SPAN id="cb7-14">  <SPAN class="dt">"Autocomplete"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="kw">null</SPAN></SPAN><BR />
<SPAN id="cb7-15"><SPAN class="fu">}</SPAN></SPAN></CODE></PRE><BR />
</DIV><BR />
(although it is flat, unformatted - it wasn't prettified like that).<BR />
<BR />
So now we understand why <CODE>btp</CODE> shows nothing, and that we're not logged in any more.<BR />
<H2 id="managing-our-configuration" id="toc-hId-544206339">Managing our configuration</H2><BR />
We need to have the configuration stored in a different place, and used from there, so it persists. Personally, I'm a fan of the <A href="https://specifications.freedesktop.org/basedir-spec.latest.html" target="_blank" rel="nofollow noopener noreferrer">X Desktop Group (XDG) Base Directory Specification</A>, which defines environment variables that apps can heed. <CODE>XDG_CONFIG_HOME</CODE> is one of those, and "<EM>defines the base directory relative to which user-specific configuration files should be stored.</EM>". Moreover, it goes on to say: "<EM>If $XDG_CONFIG_HOME is either not set or empty, a default equal to $HOME/.config should be used.</EM>". That works as a nice default for me.<BR />
<BR />
The btp CLI allows you to <A href="https://help.sap.com/viewer/65de2977205c403bbc107264b8eccf4b/Cloud/en-US/e57288d7f2aa4e59a8f70b08b82a933d.html" target="_blank" rel="noopener noreferrer">specify the location of the configuration file</A> either using the <CODE>--config</CODE> option, which you'll need to specify on each invocation of <CODE>btp</CODE>, or using the environment variable <CODE>SAPCP_CLIENTCONFIG</CODE>.<BR />
<BR />
Let's tell the btp CLI that we want our configuration in this location (relative to our home directory):<BR />
<PRE><CODE>.config/btp/config.json</CODE></PRE><BR />
Environment variables are best set when a shell session starts, so let's add the appropriate assignment to <CODE>SAPCP_CLIENTCONFIG</CODE> in the same file as we added the <CODE>bin/</CODE> directory to our path in the <A href="https://blogs.sap.com/2021/09/01/sap-tech-bytes-btp-cli-installation/" target="_blank" rel="noopener noreferrer">previous post</A>. This is the <CODE>.bashrc</CODE> file in our home directory.<BR />
<BR />
You can edit this file using App Studio of course. First, open your home directory as a folder in the explorer, using the "Open Folder" button like this:<BR />
<FIGURE><IMG src="https://raw.githubusercontent.com/SAP-samples/sap-tech-bytes/2021-09-01-btp-cli/draftposts/images/open-home-in-explorer.png" alt="opening the home directory as a folder in Explorer" /><FIGCAPTION aria-hidden="true"></FIGCAPTION></FIGURE><BR />
Then find and open the <CODE>.bashrc</CODE> file from the Explorer, and at the bottom, add content so it looks like this:<BR />
<DIV><BR />
<PRE class="sourceCode bash"><CODE class="sourceCode bash"><SPAN id="cb9-1"><SPAN class="bu">export</SPAN> <SPAN class="va">PATH</SPAN><SPAN class="op">=</SPAN><SPAN class="va">$PATH</SPAN>:<SPAN class="va">$HOME</SPAN>/bin</SPAN><BR />
<SPAN id="cb9-2"><SPAN class="bu">export</SPAN> <SPAN class="va">SAPCP_CLIENTCONFIG</SPAN><SPAN class="op">=</SPAN><SPAN class="va">$HOME</SPAN>/.config/btp/config.json</SPAN></CODE></PRE><BR />
</DIV><BR />
Close any existing terminal session and start a new one (Terminal -&gt; New Terminal); this will cause the <CODE>.bashrc</CODE> file to be processed, and you can then check that the <CODE>SAPCP_CLIENTCONFIG</CODE> environment variable is indeed now set:<BR />
<DIV><BR />
<PRE class="sourceCode bash"><CODE class="sourceCode bash"><SPAN id="cb10-1"><SPAN class="bu">echo</SPAN> <SPAN class="va">$SAPCP_CLIENTCONFIG</SPAN></SPAN></CODE></PRE><BR />
</DIV><BR />
It should show you this:<BR />
<PRE><CODE>/home/user/.config/btp/config.json</CODE></PRE><BR />
Now it's time to log back in with the btp CLI. Follow the same login procedure as described in the previous post <A href="https://blogs.sap.com/2021/09/07/sap-tech-bytes-btp-cli-logging-in/" target="_blank" rel="noopener noreferrer">SAP Tech Bytes: btp CLI - logging in</A>. Use the <CODE>btp target</CODE> command to specify your trial subaccount too.<BR />
<BR />
Invoking <CODE>btp</CODE> on its own now should show familiar information:<BR />
<PRE><CODE>SAP BTP command line interface (client v2.8.0)<BR />
<BR />
Usage: btp [OPTIONS] ACTION [GROUP/OBJECT] [PARAMS]<BR />
<BR />
CLI server URL:                    <A href="https://cpcli.cf.eu10.hana.ondemand.com" target="test_blank" rel="nofollow noopener noreferrer">https://cpcli.cf.eu10.hana.ondemand.com</A> (server v2.8.0)<BR />
User:                              P0003480944 (sapdeveloper@example.com)<BR />
Configuration:                     /home/user/.config/btp/config.json<BR />
<BR />
Current target:<BR />
  Global account (subdomain: 82715b8dtrial-ga)<BR />
  ââ Subaccount (ID: b8a33bf9-b155-4736-aadf-582dae8fd65a)<BR />
<BR />
Tips:<BR />
  For information about the targeting mechanism, use 'btp --help target'.<BR />
  To display general help, use 'btp --help'.<BR />
<BR />
OK</CODE></PRE><BR />
But note the location of the configuration - it is honouring where we told the btp CLI to keep it, via <CODE>SAPCP_CLIENTCONFIG</CODE>. Great!<BR />
<H2 id="final-checks" id="toc-hId-347692834">Final checks</H2><BR />
Go through the process of restarting your dev space once more. When starting a new terminal after that, and invoking <CODE>btp</CODE>, you should see that your configuration has survived, and you're still logged in. Great!<BR />
<BR />
In the next post, we look at adding a whole ton of comfort to invoking commands with the btp CLI: <A href="https://blogs.sap.com/2021/09/21/sap-tech-bytes-btp-cli-autocompletion" target="_blank" rel="noopener noreferrer">SAP Tech Bytes: btp CLI â autocompletion</A>.<BR />
<BR />
<HR /><BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2021/02/screenshot-2021-02-22-at-11.00.25.png" /><BR />
<BR />
SAP Tech Bytes is an initiative to bring you bite-sized information on all manner of topics, in <A href="https://www.youtube.com/playlist?list=PL6RpkC85SLQC3HBShmlMaPu_nL--4f20z" target="_blank" rel="nofollow noopener noreferrer">video</A> and <A href="https://blogs.sap.com/tag/sap-tech-bytes/" target="_blank" rel="noopener noreferrer">written</A> format. Enjoy!
---
SAP Tech Bytes: btp CLI â logging in
technology-blog-sap
2021-09-07
https://community.sap.com/t5/technology-blogs-by-sap/sap-tech-bytes-btp-cli-logging-in/ba-p/13519378
2021-09-07-sap-tech-bytes-btp-cli-logging-in
<EM>Start exploring with the btp CLI by logging in, then finding and selecting a subaccount for subsequent activities.</EM><BR />
<BR />
This is a follow-on post from the previous one: <A href="https://blogs.sap.com/2021/09/01/sap-tech-bytes-btp-cli-installation/" target="_blank" rel="noopener noreferrer">SAP Tech Bytes - btp CLI installation</A> and assumes you've got it set up according to that post, in an SAP Business Application Studio (App Studio) dev space, with the location of the <CODE>btp</CODE> binary (in <CODE>$HOME/bin/</CODE>) added to the environment variable <CODE>$PATH</CODE> so that you can invoke it simply as <CODE>btp</CODE>.<BR />
<BR />
Previously I made a brief mention of the client-server nature of the btp CLI. The fact that you're running a command line interface to connect to and control remote services more or less pre-supposes that architecture; moreover, it's a great way for the team to provide an abstraction between the btp CLI command structure and the surface area of the services &amp; entities on the platform itself.<BR />
<H2 id="invoking-btp" id="toc-hId-958562969">Invoking btp</H2><BR />
Invoke <CODE>btp</CODE> from a terminal in your App Studio dev space and stare at the output for a moment; it should look something like this:<BR />
<PRE><CODE>Welcome to the SAP BTP command line interface (client v2.8.0)<BR />
<BR />
Usage: btp [OPTIONS] ACTION [GROUP/OBJECT] [PARAMS]<BR />
<BR />
CLI server URL:                    not set<BR />
User:                              not set<BR />
Configuration:                     /home/user/.cache/.btp/config.json<BR />
<BR />
You are currently not logged in.<BR />
<BR />
Tips:<BR />
  To log in to a global account of SAP BTP, use 'btp login'. For help on login, use 'btp --help login'.<BR />
  To display general help, use 'btp --help'.<BR />
<BR />
OK</CODE></PRE><BR />
There's a lot to unpack here. Briefly:<BR />
<UL><BR />
 	<LI>the version of the client (that we downloaded last time) is confirmed as 2.8.0</LI><BR />
 	<LI>the "Usage" shows that there's a well-defined structure to the command syntax</LI><BR />
 	<LI>we connect to a btp CLI server via a URL</LI><BR />
 	<LI>we're not currently logged in</LI><BR />
 	<LI>configuration is stored locally in a JSON file</LI><BR />
</UL><BR />
<H2 id="logging-in" id="toc-hId-762049464">Logging in</H2><BR />
Initiate the login process:<BR />
<PRE><CODE>btp login</CODE></PRE><BR />
You should see the following prompts, and should respond similar to what's shown here - see below for an explanation of the "Global account subdomain":<BR />
<PRE><CODE>SAP BTP command line interface (client v2.8.0)<BR />
<BR />
CLI server URL [https://cpcli.cf.eu10.hana.ondemand.com]&gt;<BR />
Connecting to CLI server at <A href="https://cpcli.cf.eu10.hana.ondemand.com" target="test_blank" rel="nofollow noopener noreferrer">https://cpcli.cf.eu10.hana.ondemand.com</A>.<BR />
<BR />
Global account subdomain&gt;82715b8dtrial-ga<BR />
User&gt;sapdeveloper@example.com<BR />
Password&gt;********<BR />
<BR />
Login successful<BR />
We stored your configuration file at: /home/user/.cache/.btp/config.json<BR />
<BR />
Current target:<BR />
  Global account (subdomain: 82715b8dtrial-ga)<BR />
<BR />
Tip:<BR />
  For more information on the targeting mechanism, use 'btp --help target'.<BR />
<BR />
OK</CODE></PRE><BR />
In the trial context, which we're in here, the default CLI server that is suggested (<CODE><A href="https://cpcli.cf.eu10.hana.ondemand.com" target="test_blank" rel="nofollow noopener noreferrer">https://cpcli.cf.eu10.hana.ondemand.com</A></CODE>) is appropriate.<BR />
<BR />
Additionally, the global account subdomain is just your global account identifier with a <CODE>-ga</CODE> suffix. Here's a screenshot of the temporary trial account I set up for this set of examples, where the relationship between the global account identifier and the global account subdomain can be seen:<BR />
<P style="overflow: hidden;margin-bottom: 0px"><IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2021/09/account-explorer.png" /></P><BR />
Now you've logged in, run <CODE>btp</CODE> again to see the difference. You should now see the version of the server to which you're connected and authenticated, confirmation of your user identification, and also the "current target", being the global account that you specified (via the subdomain) when you logged in. The output should look something like this:<BR />
<PRE><CODE>SAP BTP command line interface (client v2.8.0)<BR />
<BR />
Usage: btp [OPTIONS] ACTION [GROUP/OBJECT] [PARAMS]<BR />
<BR />
CLI server URL:                    <A href="https://cpcli.cf.eu10.hana.ondemand.com" target="test_blank" rel="nofollow noopener noreferrer">https://cpcli.cf.eu10.hana.ondemand.com</A> (server v2.8.0)<BR />
User:                              P0003480944 (sapdeveloper@example.com)<BR />
Configuration:                     /home/user/.cache/.btp/config.json<BR />
<BR />
Current target:<BR />
  Global account (subdomain: 82715b8dtrial-ga)<BR />
<BR />
Tips:<BR />
  For information about the targeting mechanism, use 'btp --help target'.<BR />
  To display general help, use 'btp --help'.<BR />
<BR />
OK</CODE></PRE><BR />
<BLOCKQUOTE>The btp CLI also offers a way to <A href="https://help.sap.com/products/BTP/65de2977205c403bbc107264b8eccf4b/b2a56a8a222940089fd2704a9c26140d.html" target="_blank" rel="noopener noreferrer">log in through the browser</A>, with the <CODE>--sso</CODE> option.</BLOCKQUOTE><BR />
<H2 id="understanding-targets" id="toc-hId-565535959">Understanding targets</H2><BR />
Let's dwell on the "target" concept for a moment, it's important. The btp CLI has a <A href="https://help.sap.com/products/BTP/65de2977205c403bbc107264b8eccf4b/720645a3ed3945bd8d97a670b948ac07.html" target="_blank" rel="noopener noreferrer">command context</A> for calls. At the outset it's only set at the top level, to the global account that you specified when you logged in. All actions that work at a global account level will by default target this global account.<BR />
<BR />
You'll discover that many of the actions you want to perform with the btp CLI will be at the subaccount level - at the level of your trial subaccount, effectively. You can specify a target subaccount too. Let's do this now. Given that our subaccount is "trial" (as we can see from the screenshot earlier), let's try:<BR />
<PRE><CODE>btp target --subaccount trial</CODE></PRE><BR />
We get this:<BR />
<PRE><CODE>Subaccount 'trial' does not exist in the current global account. Make sure to provide the ID of a subaccount of the current global account.<BR />
<BR />
Tip:<BR />
  To find your subaccount ID, use 'btp list accounts/subaccount'.<BR />
<BR />
ERROR</CODE></PRE><BR />
Hmm, ok. Well, let's follow the advice we're given:<BR />
<PRE><CODE>btp list accounts/subaccount</CODE></PRE><BR />
<BLOCKQUOTE>Pause for a second to consider the <CODE>ACTION [GROUP/OBJECT]</CODE> command structure we saw earlier - here we're seeing a nice example of that.</BLOCKQUOTE><BR />
There's our trial account in the list that's produced:<BR />
<PRE><CODE>subaccounts in global account 906b8d84-2f2c-429d-8ce4-c1bf166aeb08...<BR />
<BR />
subaccount id:                         display name:   subdomain:      region:   beta-enabled:   parent id:                             parent type:     state:   state message:<BR />
b8a33bf9-b155-4736-aadf-582dae8fd65a   trial           82715b8dtrial   eu10      true            906b8d84-2f2c-429d-8ce4-c1bf166aeb08   global account   OK       Updated tenant status to ACTIVE<BR />
<BR />
<BR />
OK</CODE></PRE><BR />
It's the ID that's required:<BR />
<PRE><CODE>btp target --subaccount b8a33bf9-b155-4736-aadf-582dae8fd65a</CODE></PRE><BR />
<BLOCKQUOTE>The ID is what you see when selecting "More Info" from the three-dots menu on the "trial" subaccount card in the screenshot we saw earlier.</BLOCKQUOTE><BR />
The result of specifying the ID in the target command is what we're looking for:<BR />
<PRE><CODE>Targeting subaccount 'b8a33bf9-b155-4736-aadf-582dae8fd65a'.<BR />
Commands that only work on global account level will be executed in the parent global account.<BR />
<BR />
Current target:<BR />
  Global account (subdomain: 82715b8dtrial-ga)<BR />
  ââ Subaccount (ID: b8a33bf9-b155-4736-aadf-582dae8fd65a)<BR />
<BR />
Tips:<BR />
  To execute a command in the parent global account, use parameter '-ga' without value.<BR />
  To execute a command in a different context, specify the subaccount, directory, or global account in the command.<BR />
<BR />
OK</CODE></PRE><BR />
This is already more useful for us with our trial accounts on the Business Technology Platform. It's a good setup with which to continue our journey of discovery.<BR />
<BR />
Let's end this post with a final command, to examine details of our subaccount we're now targetting:<BR />
<PRE><CODE>btp get accounts/subaccount</CODE></PRE><BR />
If we hadn't already specified the subaccount as part of the target, we'd have received an error at this point:<BR />
<PRE><CODE>Constraint violated - you must provide parameter 'ID'.<BR />
<BR />
Usage: btp [OPTIONS] get accounts/subaccount ID --global-account SUBDOMAIN<BR />
<BR />
ERROR</CODE></PRE><BR />
However, because we've stored the identification of our trial subaccount using the <CODE>target</CODE> command, we get what we're looking for:<BR />
<PRE><CODE>Showing subaccount details for b8a33bf9-b155-4736-aadf-582dae8fd65a...<BR />
<BR />
subaccount id:         b8a33bf9-b155-4736-aadf-582dae8fd65a<BR />
display name:          trial<BR />
description:<BR />
subdomain:             82715b8dtrial<BR />
region:                eu10<BR />
created by:<BR />
beta-enabled:          true<BR />
used for production:   false<BR />
parent id:             906b8d84-2f2c-429d-8ce4-c1bf166aeb08<BR />
parent type:           global account<BR />
state:                 OK<BR />
state message:         Updated tenant status to ACTIVE<BR />
<BR />
<BR />
OK</CODE></PRE><BR />
Great! In the next post, we take a quick look at managing configuration: <A href="https://blogs.sap.com/2021/09/14/sap-tech-bytes-btp-cli-managing-configuration/" target="_blank" rel="noopener noreferrer">SAP Tech Bytes: btp CLI - managing configuration</A>.<BR />
<BR />
<HR /><BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2021/02/screenshot-2021-02-22-at-11.00.25.png" /><BR />
<BR />
SAP Tech Bytes is an initiative to bring you bite-sized information on all manner of topics, in <A href="https://www.youtube.com/playlist?list=PL6RpkC85SLQC3HBShmlMaPu_nL--4f20z" target="_blank" rel="nofollow noopener noreferrer">video</A> and <A href="https://blogs.sap.com/tag/sap-tech-bytes/" target="_blank" rel="noopener noreferrer">written</A> format. Enjoy!
---
SAP Tech Bytes: btp CLI - installation
technology-blog-sap
2021-09-01
https://community.sap.com/t5/technology-blogs-by-sap/sap-tech-bytes-btp-cli-installation/ba-p/13515175
2021-09-01-sap-tech-bytes-btp-cli-installation
<EM>Install the btp CLI to be ready to start exploring its features and functions.</EM><BR />
<BR />
The SAP BTP Command Line Interface (aka btp CLI) is a great tool for administering accounts and related resources on the SAP Business Technology Platform (BTP). It's a super fit for devops and cloud native activities as it's a command line tool that is both interactive and scriptable. And as we all know, <A href="https://blogs.sap.com/tag/thefutureisterminal/" target="_blank" rel="noopener noreferrer">#TheFutureIsTerminal</A>, right?<BR />
<BR />
It's available for download from the <A href="https://tools.hana.ondemand.com/#cloud" target="_blank" rel="nofollow noopener noreferrer">cloud section of the SAP Development Tools site</A> - now would be a great time to install it to start exploring and understanding what it can do for you.<BR />
<BR />
The relevant documentation on the btp CLI is here: <A href="https://help.sap.com/viewer/65de2977205c403bbc107264b8eccf4b/Cloud/en-US/7c6df2db6332419ea7a862191525377c.html" target="_blank" rel="noopener noreferrer">Account Administration Using the SAP BTP Command Line Interface (btp CLI) [Feature Set B]</A>.<BR />
<BR />
If you're not sure how you're going to use the btp CLI for real yet, and just want a throw-away experience for now, this post is what you need - it will take you through installing it in the cloud using a script that you can then use in your own command line context later. All you'll need for now is a BTP trial account with Feature Set B. You'll be installing and using it within the SAP Business Application Studio (App Studio) context.<BR />
<H2 id="set-up" id="toc-hId-958441880">Set up</H2><BR />
Log into your <A href="https://account.hanatrial.ondemand.com/trial/#/home/trial" target="_blank" rel="nofollow noopener noreferrer">trial account on BTP</A> and jump to the App Studio context from the welcome page. Create a new dev space - you don't need anything special, just the "Basic" type will do - and jump into it when it's started up.<BR />
<BR />
Make this your CLI in the cloud - you don't need any file explorer, or even any file editor, so click the Explorer "folders" icon to toggle it off, close any open files (including the Welcome page) and open a Terminal, dragging the vertical divider to the top for maximum space. That's better!<BR />
<P style="overflow: hidden;margin-bottom: 0px"><IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2021/09/screenshot-2021-09-01-at-10.21.28.png" height="295" width="606" /></P><BR />
You can just download the btp CLI from the SAP Development Tools site mentioned earlier, which would be fine. But I prefer a script to help me not only download and unpack it, but also to let me check what the latest version is, and also have a slightly more flexible version management approach. So I wrote one, and we'll use that together here.<BR />
<BR />
It's available in the SAP Tech Bytes repository branch associated with this post: <A href="https://github.com/SAP-samples/sap-tech-bytes/blob/2021-09-01-btp-cli/getbtpcli" target="_blank" rel="nofollow noopener noreferrer">getbtpcli</A>, and we'll grab it from within our App Studio terminal session now.<BR />
<H2 id="get-the-download-script" id="toc-hId-761928375">Get the download script</H2><BR />
In your terminal, run this to grab the script:<BR />
<PRE class="shell"><CODE>curl \<BR />
  --remote-name \<BR />
  --location \<BR />
  --url "https://raw.githubusercontent.com/SAP-samples/sap-tech-bytes/2021-09-01-btp-cli/getbtpcli" \<BR />
  &amp;&amp; chmod +x getbtpcli</CODE></PRE><BR />
This uses <CODE>curl</CODE> to fetch the raw script file, saving it to a file of the same name, following any HTTP redirects that the server might return. It then sets the executable mode bit for the file so we can run it.<BR />
<H2 id="run-the-download-script" id="toc-hId-565414870">Run the download script</H2><BR />
You can run the script in test mode, just to get it to tell you what the latest version of the btp CLI is. Do this now:<BR />
<DIV><BR />
<PRE class="sourceCode bash"><CODE class="sourceCode bash"><SPAN id="cb2-1"><SPAN class="ex">./getbtpcli</SPAN> <SPAN class="at">--test</SPAN></SPAN></CODE></PRE><BR />
</DIV><BR />
This will give you something like this:<BR />
<PRE><CODE>Latest version is 2.8.0</CODE></PRE><BR />
Running the script without the test mode option will download and install it. Do that now:<BR />
<DIV><BR />
<PRE class="sourceCode bash"><CODE class="sourceCode bash"><SPAN id="cb4-1"><SPAN class="ex">./getbtpcli</SPAN></SPAN></CODE></PRE><BR />
</DIV><BR />
This will ask you first to confirm your acceptance of the licence agreement, before downloading and unpacking the executable; it will tell you what the version is, too:<BR />
<PRE><CODE>Proceed (with Enter) only if you accept the SAP Developer Licence 3.1<BR />
(see <A href="https://tools.hana.ondemand.com/developer-license-3_1.txt)" target="test_blank" rel="nofollow noopener noreferrer">https://tools.hana.ondemand.com/developer-license-3_1.txt)</A> ...<BR />
Latest version is 2.8.0</CODE></PRE><BR />
Where has the executable been placed? By default, the <CODE>getbtpcli</CODE> script will put it in a <CODE>bin/</CODE> directory in your user's home directory (i.e. <CODE>$HOME/bin/</CODE>). Have a look now to see:<BR />
<DIV><BR />
<PRE class="sourceCode bash"><CODE class="sourceCode bash"><SPAN id="cb6-1"><SPAN class="fu">ls</SPAN> <SPAN class="at">-l</SPAN> <SPAN class="va">$HOME</SPAN>/bin/</SPAN></CODE></PRE><BR />
</DIV><BR />
This will output something like this:<BR />
<PRE><CODE>lrwxrwxrwx 1 user group        9 Sep  1 09:40 btp -&gt; btp-2.8.0<BR />
-rwxr-xr-x 1 user group 10868080 Jul 29 15:09 btp-2.8.0</CODE></PRE><BR />
Note that there are two files; the actual binary, called <CODE>btp-2.8.0</CODE> and a symbolic link, <CODE>btp</CODE>, which points to that binary. This is so that in the future we can have a new version of the binary, use that by default (by setting the symbolic link <CODE>btp</CODE> to point to that new one), but keep the old one too. There may be circumstances when you need a different version of the binary (the client-server design of the btp CLI is very flexible and powerful).<BR />
<BR />
You can of course add the <CODE>bin/</CODE> directory to your shell's <CODE>$PATH</CODE>, so that you can just invoke <CODE>btp</CODE> as-is. Do it for this particular terminal session right now, like this:<BR />
<DIV><BR />
<PRE class="sourceCode bash"><CODE class="sourceCode bash"><SPAN id="cb8-1"><SPAN class="bu">export</SPAN> <SPAN class="va">PATH</SPAN><SPAN class="op">=</SPAN><SPAN class="st">"</SPAN><SPAN class="va">$PATH</SPAN><SPAN class="st">:</SPAN><SPAN class="va">$HOME</SPAN><SPAN class="st">/bin"</SPAN></SPAN></CODE></PRE><BR />
</DIV><BR />
You can also add this line to the <CODE>.bashrc</CODE> file in your home directory; this is executed each time you start a new session.<BR />
<H2 id="invoke-the-btp-cli-for-the-first-time" id="toc-hId-368901365">Invoke the btp CLI for the first time</H2><BR />
Running <CODE>btp</CODE> now will give you a nice welcome message that looks something like this:<BR />
<PRE><CODE>Welcome to the SAP BTP command line interface (client v2.8.0)<BR />
<BR />
Usage: btp [OPTIONS] ACTION [GROUP/OBJECT] [PARAMS]<BR />
<BR />
CLI server URL:                    not set<BR />
User:                              not set<BR />
Configuration:                     /home/user/.cache/.btp/config.json<BR />
<BR />
You are currently not logged in.<BR />
<BR />
Tips:<BR />
  To log in to a global account of SAP BTP, use 'btp login'. For help on login, use 'btp --help login'.<BR />
  To display general help, use 'btp --help'.<BR />
<BR />
OK</CODE></PRE><BR />
The welcome message confirms the version you have, and also gives you information about what server you're connected to and what user and login information is currently active, if any.<BR />
<H2 id="wrapping-up" id="toc-hId-172387860">Wrapping up</H2><BR />
You now have the btp CLI installed in a convenient place where you can start to try things out. You also have a script that you can use to keep your btp CLI up to date.<BR />
<BR />
Let me know in the comments whether you've managed to set up the btp CLI like this, and if you have your own way of managing versions and downloads. I'd love to see how you do it! Also, if you have any questions about <CODE>getbtpcli</CODE> itself, feel free to ask - no question is too simple.<BR />
<BR />
In the next post we take our first steps with the btp CLI by logging in and understanding what's going on: <A href="https://blogs.sap.com/2021/09/07/sap-tech-bytes-btp-cli-logging-in/" target="_blank" rel="noopener noreferrer">SAP Tech Bytes: btp CLI â logging in</A>.<BR />
<A name="updates" target="_blank"></A><BR />
<H2 id="toc-hId--24125645">Updates</H2><BR />
10 Nov 2023 - If you're a macOS user, you can now <A href="https://formulae.brew.sh/cask/btp" target="_blank" rel="nofollow noopener noreferrer">install the btp CLI via Homebrew</A>, which is pretty awesome:<BR />
<PRE><CODE>brew install --cask btp</CODE></PRE><BR />
Nice!<BR />
<BR />
<HR /><BR />
<BR />
<FIGURE><IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2021/02/screenshot-2021-02-22-at-11.00.25.png" /></FIGURE><BR />
SAP Tech Bytes is an initiative to bring you bite-sized information on all manner of topics, in <A href="https://www.youtube.com/playlist?list=PL6RpkC85SLQC3HBShmlMaPu_nL--4f20z" target="_blank" rel="nofollow noopener noreferrer">video</A> and <A href="https://blogs.sap.com/tag/sap-tech-bytes/" target="_blank" rel="noopener noreferrer">written</A> format. Enjoy!
---
Collaboration missions for the Open Documentation Initiative
welcome-cornerblog-board
2021-05-27
https://community.sap.com/t5/welcome-corner-blog-posts/collaboration-missions-for-the-open-documentation-initiative/ba-p/13512766
2021-05-27-collaboration-missions-for-the-open-documentation-initiative
<EM>You can earn SAP Community badges for collaborating with us on SAP documentation.&nbsp;</EM><BR />
<BR />
Last week we introduced the <A href="https://blogs.sap.com/2021/05/20/introducing-the-open-documentation-initiative/" target="_blank" rel="noopener noreferrer">Open Documentation Initiative</A> which is all about collaborating on SAP documentation. We thought it would be fitting to be able to reward valuable collaboration by issuing badges, so we've set up a couple of new ones in a new mission category.<BR />
<H2 id="toc-hId-958358243">Collaboration missions</H2><BR />
The new mission category is "Collaboration Missions" and there are <A href="https://community.sap.com/resources/missions-badges?q=documentation" target="_blank">two badges available</A>:<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2021/05/screenshot-2021-05-27-at-05.32.34.png" /><BR />
<BR />
There's the "Open Documentation Initiative - Provide Feedback" badge, and the "Open Documentation Initiative - Contribute Content" badge, and they reflect the two different ways you can collaborate (read more about this in <A href="https://help.sap.com/webcomponents/products/open-documentation-initiative/contribution-guidelines/contributing.html" target="_blank" rel="noopener noreferrer">Contributing to SAP Documentation</A>).<BR />
<BR />
<STRONG>The "Provide Feedback" badge</STRONG><BR />
<BR />
This badge can be awarded for the provision of valuable feedback. Feedback provision is via the GitHub issue route, and if your feedback results in a material improvement in the documentation, the badge is awarded.<BR />
<BR />
Of course, not every piece of feedback will result in change or improvement, that's just the nature of feedback. Moreover, we don't want to devalue the badge by automatically awarding it to everyone that raises an issue.<BR />
<BR />
You will know if your feedback qualifies by the assignment of the "contribution" label to the issue you raised. This may be during the lifetime of the issue, or sometimes even after it's been closed.<BR />
<BR />
<STRONG>The "Contribute Content" badge</STRONG><BR />
<BR />
This badge can be awarded for the contribution of valuable content. Content contribution is via the GitHub pull request route, where you supply changes or additions to the documentation.<BR />
<BR />
Changes or additions that are relevant and can be applied are valuable, and if your changes are applied to the documentation, the badge is awarded.<BR />
<BR />
Just like in the feedback provision scenario, you will know if your changes were applied by the assignment of the "contribution" label to the pull request. If the pull request status changes from "Open" to "Merged" this is an indication that your contribution has been applied, and the "contribution" label will be automatically assigned.<BR />
<BR />
Note that such changes or additions won't immediately appear in the documentation on the SAP Help Portal - there's a synchronisation and deployment process that happens in the background, often with human actors involved too. So please be patient!<BR />
<H2 id="toc-hId-761844738">Badge Assignment</H2><BR />
We're starting out by gathering badge assignment information on a weekly basis.<BR />
<BR />
So if you see that a "contribution" label is assigned to your issue or pull request, it may be some days following that when the badge actually appears in your profile in SAP Community. Note that each badge is only awarded once - you won't get multiple instances<BR />
<BR />
Speaking of your SAP Community profile, you'll be asked your SAP Community profile URL in the issue or pull request. It should look something like <A href="https://github.com/SAP-docs/contribution-guidelines/pull/40" target="_blank" rel="nofollow noopener noreferrer">this</A>:<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2021/05/screenshot-2021-05-27-at-06.11.57.png" /><BR />
Please look out for and respond to such a request, like Tom did here when he was helping us out with testing.<BR />
<H2 id="toc-hId-565331233">More info</H2><BR />
You can read a bit more about how the badge award process works in <A href="https://help.sap.com/webcomponents/products/open-documentation-initiative/contribution-guidelines/recognition.html?locale=en-US" target="_blank" rel="noopener noreferrer">Contribution Recognition in SAP Community</A>.<BR />
<BR />
And of course, don't forget to join us tomorrow (Fri 28 May) for a <A href="https://youtu.be/x7dbOpsquSg" target="_blank" rel="nofollow noopener noreferrer">one hour live stream</A> on the Hands-on SAP Dev show, where we go through the initiative together. Join us and participate in the live chat as I walk through how the whole thing works.<BR />
<BR />
<A href="https://youtu.be/x7dbOpsquSg" target="_blank" rel="nofollow noopener noreferrer"><IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2021/05/screenshot-2021-05-18-at-13.18.04-1.png" /></A><BR />
<BR />
The live stream starts at the following local times:<BR />
<BR />
0800 BST (London)<BR />
<BR />
0900 CEST (Walldorf)<BR />
<BR />
1230 IST (Bengaluru)<BR />
<BR />
1700 AEST (Sydney)<BR />
<BR />
If you can't make it, you can watch the replay at the <A href="https://youtu.be/x7dbOpsquSg" target="_blank" rel="nofollow noopener noreferrer">same URL</A> on YouTube whenever you have time.<BR />
<BR />
Otherwise - see you tomorrow!
---
Introducing the Open Documentation Initiative
welcome-cornerblog-board
2021-05-20
https://community.sap.com/t5/welcome-corner-blog-posts/introducing-the-open-documentation-initiative/ba-p/13500888
2021-05-20-introducing-the-open-documentation-initiative
<EM>We want to collaborate with you to improve our documentation. To do this, we're taking our first steps with the Open Documentation Initiative.&nbsp;</EM><BR />
<BR />
See the <A href="#updates" target="_blank" rel="nofollow noopener noreferrer">Updates</A> section for new information.<BR />
<BR />
One of the things I've been happy to observe over the decades is SAP moving towards an increasing openness. To name just a few milestones, there's the inclusion of open protocols such as HTTP in the early days, the myriad and ongoing contributions to open source projects, the adoption of the open data protocol OData, the establishment of our <A href="https://developers.sap.com/open-source.html" target="_blank" rel="noopener noreferrer">Open Source Programme Office</A>, and the <A href="https://openui5.org/" target="_blank" rel="nofollow noopener noreferrer">open sourcing of UI5</A>.<BR />
<BR />
Moreover, I've been excited to see the growing use of collaboration platforms such as GitHub, where we have our <A href="https://github.com/SAPDocuments/Tutorials" target="_blank" rel="nofollow noopener noreferrer">tutorial content</A>&nbsp;and plenty of <A href="https://github.com/SAP-samples/" target="_blank" rel="nofollow noopener noreferrer">sample code</A>&nbsp;... and of course GitHub is the home of our open celebration of coding and collaboration &amp; what makes us developers - <A href="https://github.com/SAP-samples/sap-devtoberfest-2020/" target="_blank" rel="nofollow noopener noreferrer">Devtoberfest</A>.<BR />
<BR />
So now it gives me great pleasure to introduce SAP's Open Documentation Initiative.<BR />
<H2 id="toc-hId-957376165">What it is</H2><BR />
Collaboration is at the heart of many good things, and helps strengthen trust between participants. Our documentation on the <A href="https://help.sap.com/viewer/index" target="_blank" rel="noopener noreferrer">SAP Help Portal</A> is a significant meeting point between SAP and customers, partners &amp; individuals, and successful collaboration at that meeting point can pay dividends for all involved. Know-how, plus experience in the field, is a powerful combination.<BR />
<BR />
Our aim is to take the first steps towards making the documentation process more collaborative, by inviting you to provide feedback and contribute content.<BR />
<BR />
Looking at some documentation and you're not sure that it's quite hitting the mark? Send us some feedback and start a conversation in the form of an issue.<BR />
<BR />
Found something that doesn't look quite right, and you know how it could be addressed? Contribute a small piece of content, and start a conversation with us in the form of a pull request.<BR />
<BR />
We're bringing the content to you, in the form of Markdown resources in repositories on GitHub, where we can all benefit from standard issue and pull request workflow mechanisms that are used in countless collaborative processes.<BR />
<BR />
This announcement marks the beginning of a journey, with some small steps in the form of a pilot programme. That means, from the outset, only a very limited subset of SAP documentation will be included in this initiative. This will give us the best chance of making a success of things.<BR />
<H2 id="toc-hId-760862660">The pilot programme</H2><BR />
We're taking some early steps with two relatively small documentation sets, and have a further documentation set ready and waiting to roll in at some stage in the near future too.<BR />
<BR />
First, there's the <A href="https://help.sap.com/webcomponents/products/SAP%20Business%20Application%20Studio/9d1db9835307451daa8c930fbd9ab264/8f46c6e6f86641cc900871c903761fd4.html?locale=en-US&amp;version=Cloud" target="_blank" rel="noopener noreferrer">documentation for the SAP Business Application Studio</A>. This will be no doubt familiar to many of you, and that's one of the reasons we picked it.<BR />
<BR />
We also have a set of guidelines that describe how you can contribute. These are the <A href="https://help.sap.com/webcomponents/products/open-documentation-initiative/contribution-guidelines/readme.html?locale=en-US" target="_blank" rel="noopener noreferrer">Contribution Guidelines</A>, and these guidelines represent the second documentation set that is open for collaboration. (If that's not meta, I don't know what is!)<BR />
<H2 id="toc-hId-564349155">A brief overview</H2><BR />
Here's a brief overview of what to expect.<BR />
<BR />
First, when browsing a page in either the <A href="https://help.sap.com/webcomponents/products/SAP%20Business%20Application%20Studio/9d1db9835307451daa8c930fbd9ab264/8f46c6e6f86641cc900871c903761fd4.html?locale=en-US&amp;version=Cloud" target="_blank" rel="noopener noreferrer">SAP Business Application Studio documentation</A> or in the <A href="https://help.sap.com/webcomponents/products/open-documentation-initiative/contribution-guidelines/readme.html?locale=en-US" target="_blank" rel="noopener noreferrer">Contribution Guidelines</A>, you'll notice a couple of buttons along the top bar.<BR />
<BR />
Here's an example:<BR />
<P style="overflow: hidden;margin-bottom: 0px"><IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2021/05/screenshot-2021-05-18-at-10.16.24.png" height="341" width="544" /></P><BR />
Via the <STRONG>Feedback</STRONG> button, you can provide feedback on the page content, either generally or specifically. This feedback provision will be via a GitHub issue.<BR />
<BR />
Alternatively, if you find something for which you want to offer some content contribution, you can use the&nbsp;<STRONG>Edit</STRONG> button. This will take you to the Markdown content for that page, in the repository for that documentation set, on GitHub. We have a new organisation there, <A href="https://github.com/SAP-docs" target="_blank" rel="nofollow noopener noreferrer">SAP-docs</A>, which will be the home for the Markdown content and collaborative processes in this initiative.<BR />
<BR />
Here's what that content will look like:<BR />
<P style="overflow: hidden;margin-bottom: 0px"><IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2021/05/screenshot-2021-05-18-at-10.48.18.png" height="382" width="545" /></P><BR />
Then, when you use the <STRONG>â</STRONG> button on this page, it will launch the online editor, where you can make your change suggestion, and follow the standard GitHub workflow process based on the automatic creation of a pull request.<BR />
<BR />
Here's what edit mode looks like:<BR />
<P style="overflow: hidden;margin-bottom: 0px"><IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2021/05/screenshot-2021-05-18-at-10.57.51.png" height="346" width="545" /></P><BR />
Of course, if you're comfortable with GitHub and git processes, you can also make your modifications and suggestions locally and push them to your fork and then make a pull request, in the normal way, if you prefer that approach.<BR />
<H2 id="toc-hId-367835650">Learn more</H2><BR />
There are a couple of ways to learn more.<BR />
<BR />
First, there's those guidelines I mentioned earlier. Head on over to the <A href="https://help.sap.com/webcomponents/products/open-documentation-initiative/contribution-guidelines/readme.html?locale=en-US" target="_blank" rel="noopener noreferrer">Contribution Guidelines on the SAP Help Portal</A> and have a read through them, it shouldn't take more than a quarter of an hour.<BR />
<BR />
Then we have a <A href="https://blogs.sap.com/2020/11/09/an-overview-of-sap-developers-video-content/#shows" target="_blank" rel="noopener noreferrer">Hands-on SAP Dev</A> live stream episode <A href="https://youtu.be/x7dbOpsquSg" target="_blank" rel="nofollow noopener noreferrer">planned, for Friday 28 May at the usual Friday time of 0800 GMT</A>:<BR />
<P style="overflow: hidden;margin-bottom: 0px"><A href="https://youtu.be/x7dbOpsquSg" target="_blank" rel="nofollow noopener noreferrer"><IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2021/05/screenshot-2021-05-18-at-13.18.04-1.png" height="308" width="545" /></A></P><BR />
You can join live and walk through the process with me, ask questions, chat with fellow live stream viewers, and learn how easy it is to get involved in the collaboration process. The live stream is automatically recorded, so if you can't make it, you can watch it on our <A href="https://www.youtube.com/channel/UCNfmelKDrvRmjYwSi9yvrMg" target="_blank" rel="nofollow noopener noreferrer">SAP Developers YouTube channel</A> at a time that suits you.<BR />
<H2 id="toc-hId-171322145">Get ready</H2><BR />
To get ready, make sure you have a GitHub account (they're free, and <A href="https://github.com/join" target="_blank" rel="nofollow noopener noreferrer">easy to set up</A>) and then familiarise yourself with the <A href="https://help.sap.com/webcomponents/products/open-documentation-initiative/contribution-guidelines/readme.html?locale=en-US" target="_blank" rel="noopener noreferrer">Contribution Guidelines process</A>.<BR />
<BR />
If you have any questions or issues with the process itself, you can raise an issue on the Contribution Guidelines repository directly <A href="https://github.com/SAP-docs/contribution-guidelines/issues/new?assignees=&amp;labels=meta&amp;template=process-question-or-feedback.md&amp;title=" target="_blank" rel="nofollow noopener noreferrer">using this issue template that has the 'meta' label assigned</A>. Note that this is for when you want to create an issue about the process itself, as opposed to an issue about documentation content.<BR />
<BR />
These are early days, and we're looking to you, the SAP community, to help us make this collaborative initiative a success. Thanks!<BR />
<BR />
<A name="updates" target="_blank"></A><BR />
<H2 id="toc-hId--25191360">Updates</H2><BR />
Since the publication of this post, there have been some updates:<BR />
<BR />
27 May 2021 - read about the <A href="https://blogs.sap.com/2021/05/27/collaboration-missions-for-the-open-documentation-initiative/" target="_blank" rel="noopener noreferrer">Collaboration missions for the Open Documentation Initiative</A><BR />
<BR />
29 Nov 2021 - more documentation covered - see <A href="https://blogs.sap.com/2021/11/29/sap-btp-documentation-goes-github-new-collaboration-process/" target="_blank" rel="noopener noreferrer">SAP BTP Documentation Goes GitHub â New Collaboration Process</A><BR />
<BR />
10 Mar 2022 - <A href="https://blogs.sap.com/2022/03/10/contribute-to-the-setup-guide-for-sap-cloud-alm/" target="_blank" rel="noopener noreferrer">Contribute to the Setup Guide for SAP Cloud ALM</A><BR />
<BR />
04 May 2022 - <A href="https://blogs.sap.com/2022/05/04/collaborate-with-us-on-the-migration-guide-for-sap-process-orchestration/" target="_blank" rel="noopener noreferrer">Collaborate with us on the Migration Guide for SAP Process Orchestration!</A><BR />
<BR />
28 Jul 2022 - New video <A href="https://www.youtube.com/watch?v=WJ0oarMlVW4" target="_blank" rel="nofollow noopener noreferrer">SAP BTP Documentation Goes GitHub: Learn About Our New Collaboration Process</A><BR />
<BR />
10 Oct 2022 - more documentation sets added - see <A href="https://blogs.sap.com/2022/09/25/join-forces-with-us-and-collaborate-on-the-sap-custom-domain-service-guides/" target="_blank" rel="noopener noreferrer">Join forces with us and collaborate on the SAP Custom Domain Service guides!</A>, <A href="https://blogs.sap.com/2022/09/30/spotlight-sap-hana-cloud-supports-the-sap-open-documentation-initiative/" target="_blank" rel="noopener noreferrer">Spotlight: SAP HANA Cloud supports the SAP Open Documentation Initiative</A> and <A href="https://blogs.sap.com/2022/10/03/collaborate-with-us-on-sap-btp-neo-environment-documentation/" target="_blank" rel="noopener noreferrer">Collaborate with us on SAP BTP, Neo Environment Documentation</A>.<BR />
<BR />
09 Nov 2022 - two more documentation sets added - see <A href="https://blogs.sap.com/2022/11/03/identity-authentication-opens-its-documentation-for-your-feedback-with-github/" target="_blank" rel="noopener noreferrer">Identity Authentication Opens Its Documentation for Your Feedback with GitHub</A> and <A href="https://blogs.sap.com/2022/11/08/collaborate-with-us-open-document-initiative-for-sap-integration-suite/" target="_blank" rel="noopener noreferrer">Collaborate with Us â Open Document Initiative for SAP Integration Suite</A>.<BR />
<BR />
<HR /><BR />
<BR />
<STRONG>Further reading</STRONG><BR />
<BR />
<A href="https://blogs.sap.com/2021/05/27/collaboration-missions-for-the-open-documentation-initiative/" target="_blank" rel="noopener noreferrer">Collaboration missions for the Open Documentation Initiative</A>
---
SAP Tech Bytes: Exploring SAP-samples with gh and fzf
technology-blog-sap
2021-04-06
https://community.sap.com/t5/technology-blogs-by-sap/sap-tech-bytes-exploring-sap-samples-with-gh-and-fzf/ba-p/13512644
2021-04-06-sap-tech-bytes-exploring-sap-samples-with-gh-and-fzf
<EM>Discover repositories that might be useful for you by exploring them from the command line with a couple of powerful tools.</EM><BR />
<BR />
The <A href="https://github.com/SAP-samples" target="_blank" rel="nofollow noopener noreferrer">SAP-samples organisation on GitHub</A> contains many repositories with sample code on various SAP technology topics. There's also a new show <A href="https://www.youtube.com/playlist?list=PL6RpkC85SLQDS1XbEQIWG_h3fSj_jG_yQ" target="_blank" rel="nofollow noopener noreferrer">SAP Samples Spotlight</A> on our SAP Developers YouTube channel highlighting some of these repositories. We're not going to be able to cover all of them on the show, so here's a way of exploring what's on offer, using command line tools.<BR />
<P style="overflow: hidden;margin-bottom: 0px"><IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2021/04/org-sampler.gif" /></P><BR />
GitHub's command line tool <A href="https://github.com/cli/cli" target="_blank" rel="nofollow noopener noreferrer">gh</A> gives us the ability to explore the API surface area. The latest release (1.8.1 at the time of writing) offers pagination, result cacheing and a built-in version of <A href="https://stedolan.github.io/jq/" target="_blank" rel="nofollow noopener noreferrer">jq</A>, the JSON processor.<BR />
<BR />
You can install <CODE>gh</CODE> and <CODE>fzf</CODE> locally, or even install them in the terminal of a dev space in the SAP Business Application Studio to try things out. See how we do this in the <A href="https://github.com/SAP-samples/teched2020-developer-keynote" target="_blank" rel="nofollow noopener noreferrer">SAP TechEd 2020 Developer Keynote repository</A> - take a look specifically at the <A href="https://github.com/SAP-samples/teched2020-developer-keynote/tree/main/usingappstudio#add-tools-to-your-dev-space" target="_blank" rel="nofollow noopener noreferrer">Add tools to your dev space</A> section.<BR />
<BR />
Before you use <CODE>gh</CODE> for the first time, you'll need to authenticate - use <CODE>gh auth login</CODE> and follow the prompts. Then you're all set to use the <CODE>org-sampler</CODE> script as shown above.<BR />
<H3 id="toc-hId-1087439937"><STRONG>The script</STRONG></H3><BR />
Let's break it down line by line (mostly <A href="https://qmacro.org/2021/01/26/columnar-layout-with-awk/#homage" target="_blank" rel="nofollow noopener noreferrer">in homage to a great teacher, Randal L Schwartz</A>).<BR />
<PRE class="language-markup"><CODE> 1 #!/usr/bin/env bash<BR />
 2<BR />
 3 readonly org="${1:?Specify org name}"<BR />
 4<BR />
 5 jqscript() {<BR />
 6<BR />
 7   cat &lt;&lt; EOF<BR />
 8   .[]<BR />
 9   | [<BR />
10     .name,<BR />
11     "Name: \(.name)\n\nDescription: \(.description)\n\nLanguage: \(.language)\nWatchers: \(.watchers_count)\nStars: \(.stargazers_count)\nForks: \(.forks_count)"<BR />
12     ]<BR />
13   | @tsv<BR />
14 EOF<BR />
15<BR />
16 }<BR />
17<BR />
18 gh api \<BR />
19   "/orgs/$org/repos" \<BR />
20   --paginate \<BR />
21   --cache 1h \<BR />
22   --jq "$(jqscript)" \<BR />
23   | fzf \<BR />
24     --with-nth=1 \<BR />
25     --delimiter='\t' \<BR />
26     --preview='echo -e {2}' \<BR />
27     --preview-window=up:sharp:wrap:40%<BR />
</CODE></PRE><BR />
1: the <A href="https://en.wikipedia.org/wiki/Shebang_(Unix)" target="_blank" rel="nofollow noopener noreferrer">shebang</A> uses <CODE>env</CODE> to find <CODE>bash</CODE> on my system to execute the contents of the file<BR />
<BR />
3: the script expects a single argument to be specified - the name of the organisation on GitHub. For our purposes this should be SAP-samples<BR />
<BR />
5-16: a simple function to encapsulate the small <CODE>jq</CODE> script that will be passed to the invocation of <CODE>gh</CODE> to parse the JSON output that is returned from the API call<BR />
<BR />
8: the JSON output's outermost element is an array, which means we start with <CODE>.[]</CODE> to say "take each of the array items"; each array item represents a repository within the organisation, and has different properties<BR />
<BR />
9: we flow the array items (via the <CODE>|</CODE>) into a list of fields that we keep together with <CODE>[</CODE> starting on this line, and ending with <CODE>]</CODE> on line 12<BR />
<BR />
10: the first field in the list is simply the value of the <CODE>name</CODE> property (the name of the repository)<BR />
<BR />
11: the second field is a string that's made up of literal and repository property values, combined into a multi-line string (note the newline characters in there <CODE>\n</CODE>); this string is what's to be shown in the preview (at the top, in the demo above)<BR />
<BR />
13: finally each list of fields is flowed into <CODE>@tsv</CODE> which produces a tab separated values set of records<BR />
<BR />
18-22: the main action is in these lines - the call to <CODE>gh</CODE>'s <CODE>api</CODE> facility<BR />
<BR />
19: the API call is to the endpoint for <A href="https://docs.github.com/en/rest/reference/repos#list-organization-repositories" target="_blank" rel="nofollow noopener noreferrer">listing organisation repositories</A> - specifically for the organisation (in <CODE>$org</CODE>) specified when the script was invoked<BR />
<BR />
20: there are a limited number of results returned by the API in any one response; the <CODE>--paginate</CODE> option tells <CODE>gh</CODE> to make enough calls to page through all of the results - very convenient!<BR />
<BR />
21: the recent <CODE>--cache</CODE>option allows for cacheing of the results, to save on hitting the API endpoints too frequently and unnecessarily; it makes a lot of sense here given the frequency of new repository creations<BR />
<BR />
22: the <CODE>--jq</CODE> option is also recent, and given that the API output is JSON, is very useful; we use the <CODE>jq</CODE> script defined earlier in the <CODE>jqscript</CODE> function here to produce that set of tab separated records (where the first field is the repository name and the second field is the multi-line string showing the repository details)<BR />
<BR />
23: the (tab separated records) output is then passed into <CODE>fzf</CODE>to give us a chance to browse or search through the entire list and see the repositories' details<BR />
<BR />
24: using <CODE>--with-nth=1</CODE> we can tell <CODE>fzf</CODE> to only show the first field in the actual selection list<BR />
<BR />
25: we tell <CODE>fzf</CODE> how to know what the fields are with <CODE>--delimiter='\t'</CODE>, i.e. the fields are separated by tab characters<BR />
<BR />
26: with <CODE>--preview='echo -e {2}'</CODE> we tell <CODE>fzf</CODE> that we want to have something shown in a preview window for each item; what is shown is the result of <CODE>echo -e {2}</CODE> where <CODE>{2}</CODE> is an <CODE>fzf</CODE> placeholder representing the second field in the list (i.e. the multi-line string) and the <CODE>-e</CODE> switch tells <CODE>echo</CODE> to actually interpret backslash escapes, meaning that the newline characters (<CODE>\n</CODE>) in the field will be rendered properly and the preview will indeed be multi-line<BR />
<BR />
27: the <CODE>--preview-window=up:sharp:wrap:40%</CODE> option tells <CODE>fzf</CODE> how to display the preview window, including that it should be at the top, above the list (<CODE>up</CODE>), that any long text lines should be wrapped (this is good for the value of the repositories' description fields) and that the preview window should take up just less than half of the screen (<CODE>40%</CODE>)<BR />
<BR />
And that's it.<BR />
<BR />
The command line is a powerful environment and with it come powerful tools that can help you retrieve, bend and shape the information you need to work with.<BR />
<H3 id="toc-hId-890926432"><STRONG>Trying it yourself</STRONG></H3><BR />
There's a branch for this SAP Tech Bytes post in the accompanying <A href="https://github.com/SAP-samples/sap-tech-bytes" target="_blank" rel="nofollow noopener noreferrer">SAP Tech Bytes repository</A>, and it contains the version of the script <A href="https://github.com/SAP-samples/sap-tech-bytes/blob/2021-04-05-exploring-sap-samples-with-gh-and-fzf/org-sampler" target="_blank" rel="nofollow noopener noreferrer">org-sampler</A> described above:<BR />
<BR />
<A href="https://github.com/SAP-samples/sap-tech-bytes/tree/2021-04-05-exploring-sap-samples-with-gh-and-fzf" target="_blank" rel="nofollow noopener noreferrer">https://github.com/SAP-samples/sap-tech-bytes/tree/2021-04-05-exploring-sap-samples-with-gh-and-fzf</A><BR />
<BR />
<EM>This post was inspired by <A href="https://seb.jambor.dev/posts/improving-shell-workflows-with-fzf/" target="_blank" rel="nofollow noopener noreferrer">Improving shell workflows with fzf</A>.</EM><BR />
<BR />
<HR /><BR />
<P style="overflow: hidden;margin-bottom: 0px"><A href="#saptechbytes" target="_blank" rel="nofollow noopener noreferrer"><IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2021/02/screenshot-2021-02-22-at-11.00.25.png" height="35" width="208" /></A></P><BR />
SAP Tech Bytes is an initiative to bring you bite-sized information on all manner of topics, in <A href="https://www.youtube.com/playlist?list=PL6RpkC85SLQC3HBShmlMaPu_nL--4f20z" target="_blank" rel="nofollow noopener noreferrer">video</A> and <A href="https://blogs.sap.com/tag/sap-tech-bytes/" target="_blank" rel="noopener noreferrer">written</A> format. Enjoy!
---
SAP TechEd Developer Keynote - Info Central
technology-blog-sap
2021-02-23
https://community.sap.com/t5/technology-blogs-by-sap/sap-teched-developer-keynote-info-central/ba-p/13493752
2021-02-23-sap-teched-developer-keynote-info-central
<EM>All the information about the SAP TechEd 2020 Developer Keynote and related resources, in a single place for you.</EM><BR />
<BR />
The Developer Keynote, put together by the SAP Developer Advocates, was shown at SAP TechEd 2020, but there's so much more for you to enjoy and learn from. In this post, we present the content in a sort of consumable timeline; if you've not had the chance to dive in, yet, we recommend you do so in the order presented here.<BR />
<BR />
Here's a small table of contents to help you navigate.<BR />
<UL><BR />
 	<LI><A href="#developer-keynote-story" target="_blank" rel="nofollow noopener noreferrer">Developer keynote story</A></LI><BR />
 	<LI><A href="#the-developer-keynote-itself" target="_blank" rel="nofollow noopener noreferrer">The developer keynote itself</A></LI><BR />
 	<LI><A href="#the-accompanying-repository" target="_blank" rel="nofollow noopener noreferrer">The accompanying repository</A><BR />
<UL><BR />
 	<LI><A href="#component-by-component" target="_blank" rel="nofollow noopener noreferrer">Component by component</A></LI><BR />
 	<LI><A href="#quick-start" target="_blank" rel="nofollow noopener noreferrer">Quick start</A></LI><BR />
 	<LI><A href="#a-development-environment" target="_blank" rel="nofollow noopener noreferrer">A development environment</A></LI><BR />
</UL><BR />
</LI><BR />
 	<LI><A href="#a-hands-on-sap-dev-series" target="_blank" rel="nofollow noopener noreferrer">A Hands-on SAP Dev series</A> (live stream episodes every Friday)</LI><BR />
 	<LI><A href="#summary" target="_blank" rel="nofollow noopener noreferrer">Summary</A></LI><BR />
</UL><BR />
&nbsp;<BR />
<H1 id="toc-hId-808064297"><A name="developer-keynote-story" target="_blank"></A>Developer keynote story</H1><BR />
There's a short blog post <A href="https://blogs.sap.com/2020/11/19/sap-teched-developer-keynote-dk100-the-story/" target="_blank" rel="noopener noreferrer">SAP TechEd Developer Keynote DK100 â The Story</A> which tells the story and provides the context for what you'll be seeing in the actual Developer Keynote itself.<BR />
<H1 id="toc-hId-611550792"><A name="the-developer-keynote-itself" target="_blank"></A>The developer keynote itself</H1><BR />
You can watch a replay of the actual Developer Keynote on the <A href="https://www.youtube.com/user/sapdevs" target="_blank" rel="nofollow noopener noreferrer">SAP Developers channel</A> on YouTube:<BR />
<P style="overflow: hidden;margin-bottom: 0px"><A href="https://youtu.be/btEk_jdQo6A?t=180" target="_blank" rel="nofollow noopener noreferrer"><IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2021/02/screenshot-2021-02-23-at-08.26.27.png" height="246" width="434" /></A></P><BR />
The video is also <A href="https://www.youtube.com/watch?v=JRsHFkOEDUE" target="_blank" rel="nofollow noopener noreferrer">available</A> on the <A href="https://www.youtube.com/channel/UCUJdXZAAOsNuPBpLa50XUxQ" target="_blank" rel="nofollow noopener noreferrer">SAP TechEd channel</A> on YouTube.<BR />
<H1 id="toc-hId-415037287"><A name="the-accompanying-repository" target="_blank"></A>The accompanying repository</H1><BR />
All the code and configuration for all the components you saw in the keynote are available for you to download, try out and learn from. They're in the <A href="https://github.com/SAP-samples/teched2020-developer-keynote" target="_blank" rel="nofollow noopener noreferrer">teched2020-developer-keynote</A> repository, in the SAP-samples organisation on GitHub.<BR />
<BR />
This is a living collection of code, configuration and - perhaps most importantly - rich documentation, which we're adding to even now.<BR />
<BR />
In the <A href="https://github.com/SAP-samples/teched2020-developer-keynote#download-and-installation" target="_blank" rel="nofollow noopener noreferrer">Download and installation section</A> of this repository's main README, we encourage you to fork the repository, and give reasons why. We've provided instructions on how to <A href="https://blogs.sap.com/2021/01/06/updating-your-developer-keynote-repo-fork/" target="_blank" rel="noopener noreferrer">update your fork of the Developer Keynote repository</A> too.<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2021/01/fork-clone-1.gif" height="234" width="417" /><BR />
<H2 id="toc-hId-347606501"><A name="component-by-component" target="_blank"></A>Component by component</H2><BR />
Each component that you saw in the video and presented on the now-famous whiteboard, is described with instructions as to how to get it up and running in various runtimes.<BR />
<BR />
<IMG src="https://github.com/SAP-samples/teched2020-developer-keynote/raw/main/images/whiteboard.jpg" alt="Whiteboard diagram" width="413" height="310" /><BR />
<BR />
For example, if you take a look at the repository content for the <A href="https://github.com/SAP-samples/teched2020-developer-keynote/tree/main/s4hana/sandbox" target="_blank" rel="nofollow noopener noreferrer">SANDBOX component</A>, you'll see that there's a wealth of rich information and instructions for getting it running on multiple platforms, sometimes describing multiple approaches. This is for when you want to really dive in and enjoy some related learning at the same time.<BR />
<P style="overflow: hidden;margin-bottom: 0px"><A href="https://github.com/SAP-samples/teched2020-developer-keynote/blob/main/s4hana/sandbox/README.md" target="_blank" rel="nofollow noopener noreferrer"><IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2021/02/screenshot-2021-02-23-at-08.34.51.png" height="298" width="420" /></A></P><BR />
<BR />
<H2 id="toc-hId-151092996"><A name="quick-start" target="_blank"></A>Quick start</H2><BR />
Moreover, we have put together a guided <A href="https://github.com/SAP-samples/teched2020-developer-keynote/blob/main/quickstart.md" target="_blank" rel="nofollow noopener noreferrer">Quick start</A> section which guides you through a recommended order in which to enjoy the component setup, from the SAP Enterprise Messaging service based message bus, all the way through the different components that you saw interacting together in the developer keynote itself.<BR />
<H2 id="toc-hId--45420509"><A name="a-development-environment" target="_blank"></A>A development environment</H2><BR />
If you're unsure of what development environment to use, we've included detailed instructions for you to be able to use the SAP Business Application Studio. This is especially useful if you don't want to or are unable to install some of the tools required. In <A href="https://github.com/SAP-samples/teched2020-developer-keynote/tree/main/usingappstudio" target="_blank" rel="nofollow noopener noreferrer">Using the SAP Business Application Studio</A> we guide you through setting up a dev space with extra tools, and also describe how we are going to perform the Docker related activities using the power of <A href="https://github.com/features/actions" target="_blank" rel="nofollow noopener noreferrer">GitHub Actions</A>.<BR />
<H1 id="toc-hId--371016733"><A name="a-hands-on-sap-dev-series" target="_blank"></A>A Hands-on SAP Dev series</H1><BR />
In Hands-on SAP Dev, our long-running show* of live streams and premieres, we're currently airing a series that is walking through each component that was presented in the Developer Keynote.<BR />
<BR />
The series is called <A href="https://www.youtube.com/playlist?list=PL6RpkC85SLQCBncEWbkHTLz7ykB9C7yof" target="_blank" rel="nofollow noopener noreferrer">Getting the most out of the SAP TechEd Developer Keynote repository</A>; it exists in three forms:<BR />
<BR />
1: Weekly live streams where we learn together, live - at the time of writing, the <A href="https://www.youtube.com/watch?v=THdTT5UdDnY" target="_blank" rel="nofollow noopener noreferrer">upcoming</A> one is covering how we use GitHub Actions:<BR />
<P style="overflow: hidden;margin-bottom: 0px"><IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2021/02/screenshot-2021-02-23-at-08.53.38-1.png" height="113" width="464" /></P><BR />
2: A set of recordings of those past live streams, in a <A href="https://www.youtube.com/playlist?list=PL6RpkC85SLQCBncEWbkHTLz7ykB9C7yof" target="_blank" rel="nofollow noopener noreferrer">playlist</A>:<BR />
<P style="overflow: hidden;margin-bottom: 0px"><IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2021/02/screenshot-2021-02-23-at-08.55.52.png" height="288" width="434" /></P><BR />
3: Links to the corresponding recordings of these episodes, in the repository's <A href="https://github.com/SAP-samples/teched2020-developer-keynote/blob/main/quickstart.md" target="_blank" rel="nofollow noopener noreferrer">Quick start</A> guide:<BR />
<P style="overflow: hidden;margin-bottom: 0px"><IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2021/02/screenshot-2021-03-05-at-10.20.09.png" /></P><BR />
<EM>*See <A href="https://blogs.sap.com/2020/11/09/an-overview-of-sap-developers-video-content/" target="_blank" rel="noopener noreferrer">An overview of SAP Developers video content</A> for more info on all our video content's shows and series.</EM><BR />
<H1 id="toc-hId--567530238"><A name="summary" target="_blank"></A>Summary</H1><BR />
That's about it. Look out for further upcoming live stream episodes (subscribe to our <A href="https://www.youtube.com/user/sapdevs" target="_blank" rel="nofollow noopener noreferrer">SAP Developers channel</A> on YouTube and turn on notifications for the upcoming events), and let us know what you find most useful, and if anything is missing. We'd love to hear from you here in the comments to this post.<BR />
<BR />
And don't forget, in the <A href="https://www.goodreads.com/quotes/95859-share-and-enjoy-is-the-company-motto-of-the-hugely" target="_blank" rel="nofollow noopener noreferrer">immortal words of the Sirius Cybernetics Corporation</A> - share &amp; enjoy!
---
SAP Tech Bytes: Approuter User API Service
technology-blog-sap
2021-02-20
https://community.sap.com/t5/technology-blogs-by-sap/sap-tech-bytes-approuter-user-api-service/ba-p/13488396
2021-02-20-sap-tech-bytes-approuter-user-api-service
<EM>Use a simple example to kick the tyres of the new User API Service available in the <a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a>/approuter NPM package.</EM><BR />
<BR />
In the <A href="https://www.youtube.com/watch?t=461&amp;v=PgCaIHp1JFY&amp;feature=youtu.be" target="_blank" rel="nofollow noopener noreferrer">SAP Developer News episode for calendar week 04</A>, there was an <A href="https://www.youtube.com/watch?v=PgCaIHp1JFY&amp;list=PL6RpkC85SLQAVBSQXN9522_1jNvPavBgg&amp;index=4&amp;t=462s" target="_blank" rel="nofollow noopener noreferrer">item</A> covering updates to some NPM packages, including <A href="https://www.npmjs.com/package/@sap/approuter" target="_blank" rel="nofollow noopener noreferrer">@sap/approuter</A> - which now has a <A href="https://www.npmjs.com/package/@sap/approuter#user-api-service" target="_blank" rel="nofollow noopener noreferrer">User API Service</A>. If you're interested in kicking the tyres of this new User API and getting a simple example up and running, this quick post is for you (there's a link to files in our GitHub repo at the end).<BR />
<BR />
The simplest thing that could possibly work is an <a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a>/approuter based app with a minimal configuration as described in the <A href="https://www.npmjs.com/package/@sap/approuter#user-api-service" target="_blank" rel="nofollow noopener noreferrer">User API Service section</A>. That app needs to be bound to a minimally configured instance of the Authorization &amp; Trust Management service (aka "xsuaa") and running in Cloud Foundry (CF).<BR />
<H3 id="toc-hId-1065451453"><STRONG>App with minimal configuration</STRONG></H3><BR />
While the app is still effectively a Node.js package, there is no code, just configuration. First, in the form of the Node.js <STRONG>package.json</STRONG> file, which looks like this:<BR />
<PRE class="language-javascript"><CODE>{<BR />
  "name": "userapitest",<BR />
  "scripts": {<BR />
    "start": "node node_modules/@sap/approuter/approuter.js"<BR />
  },<BR />
  "dependencies": {<BR />
    "@sap/approuter": "^9.1.0"<BR />
  }<BR />
}<BR />
</CODE></PRE><BR />
The built-in approuter.js script is run directly when the app is started. It will look for configuration and find it in an <STRONG>xs-app.json</STRONG> file, the contents of which should look like this:<BR />
<PRE class="language-javascript"><CODE>{<BR />
  "welcomeFile": "/user-api/attributes",<BR />
  "routes": [<BR />
    {<BR />
      "source": "^/user-api(.*)",<BR />
      "target": "$1",<BR />
      "service": "sap-approuter-userapi"<BR />
    }<BR />
  ]<BR />
}<BR />
</CODE></PRE><BR />
Note that the welcomeFile property is used to automatically redirect us to one of the two endpoints supported by the User API Service - the "attributes" endpoint. The rest of the configuration is taken directly from the <A href="https://www.npmjs.com/package/@sap/approuter#user-api-service" target="_blank" rel="nofollow noopener noreferrer">documentation</A>.<BR />
<BR />
The xsuaa instance needs some minimal configuration - an app name and the tenant mode in which it is to run. Here it is, in an <STRONG>xs-security.json</STRONG> file:<BR />
<PRE class="language-javascript"><CODE>{<BR />
  "xsappname": "userapitest",<BR />
  "tenant-mode": "dedicated"<BR />
}</CODE></PRE><BR />
We can use a simple manifest for the CF command "cf push", to save on typing. This defines what we need (although it doesn't cause the creation of the xsuaa service instance, like an MTA based approach would, but we're keeping things as simple as possible here). The contents of that manifest - in the <STRONG>manifest.yml</STRONG> file, are as follows:<BR />
<PRE class="language-sql"><CODE>applications:<BR />
- name: userapitest<BR />
  disk_quota: 256M<BR />
  instances: 1<BR />
  memory: 256M<BR />
  random-route: true<BR />
  services:<BR />
  - xsuaa-application<BR />
  stack: cflinuxfs3<BR />
</CODE></PRE><BR />
<H3 id="toc-hId-868937948"><STRONG>Setting things up</STRONG></H3><BR />
So all we need to do now is to create the xsuaa service instance, with the "application" plan &amp; those xs-security.json settings, specifying the name "xsuaa-application" (as that's what is expected via the entry in the manifest), and then run the "cf push".<BR />
<BR />
Let's take those steps now. First, the service instance creation:<BR />
<PRE class="language-markup"><CODE>; cf create-service xsuaa application xsuaa-application -c xs-security.json <BR />
Creating service instance xsuaa-application in org xde3af75trial / space dev as sapdeveloper@example.com...<BR />
OK</CODE></PRE><BR />
Now the xsuaa service instance exists, we can create &amp; deploy the app and have it bound to that service instance:<BR />
<PRE class="language-markup"><CODE>; cf push -f manifest.yml<BR />
Pushing from manifest to org xde3af75trial / space dev as sapdeveloper@example.com...<BR />
Using manifest file /Users/sapdeveloper/Projects/userapitest/manifest.yml<BR />
Getting app info...<BR />
Creating app with these attributes...<BR />
+ name:         userapitest<BR />
  path:         /Users/i347491/Projects/userapitest<BR />
+ disk quota:   256M<BR />
+ instances:    1<BR />
+ memory:       256M<BR />
+ stack:        cflinuxfs3<BR />
  services:<BR />
+   xsuaa-application<BR />
  routes:<BR />
+   userapitest-grouchy-chimpanzee-nx.cfapps.eu10.hana.ondemand.com<BR />
[...]<BR />
Waiting for app to start...<BR />
[...]<BR />
     state     since                  cpu    memory          disk         details<BR />
#0   running   2021-02-19T17:55:10Z   0.0%   35.6K of 256M   8K of 256M<BR />
;<BR />
</CODE></PRE><BR />
And that's it!<BR />
<H3 id="toc-hId-672424443"><STRONG>Checking the results</STRONG></H3><BR />
Accessing the route given in the output (the "userapitest-grouchy-chimpanzee.nz" route, here) in the browser results in this output, generated directly by the User API Service for the <STRONG>/user-api/attributes</STRONG>&nbsp;path:<BR />
<PRE class="language-javascript"><CODE>{<BR />
  firstname: "SAP",<BR />
  lastname: "Developer",<BR />
  email: "sapdeveloper@example.com",<BR />
  name: "sapdeveloper@example.com",<BR />
}</CODE></PRE><BR />
And the output for the <STRONG>/user-api/currentUser</STRONG> path looks like this:<BR />
<PRE class="language-javascript"><CODE>{<BR />
  firstname: "SAP",<BR />
  lastname: "Developer",<BR />
  email: "sapdeveloper@example.com",<BR />
  name: "sapdeveloper@example.com",<BR />
  displayName: "SAP Developer (sapdeveloper@example.com)",<BR />
}</CODE></PRE><BR />
<H3 id="toc-hId-475910938"><STRONG>Trying it yourself</STRONG></H3><BR />
There's a branch for this SAP Tech Bytes post in the accompanying <A href="https://github.com/SAP-samples/sap-tech-bytes" target="_blank" rel="nofollow noopener noreferrer">SAP Tech Bytes repository</A>: Check it out and follow the simple instructions here:<BR />
<BR />
<A href="https://github.com/SAP-samples/sap-tech-bytes/tree/2021-02-20-approuter-user-api-service" target="_blank" rel="nofollow noopener noreferrer">https://github.com/SAP-samples/sap-tech-bytes/tree/2021-02-20-approuter-user-api-service</A><BR />
<BR />
&nbsp;<BR />
<BR />
<HR /><BR />
<P style="overflow: hidden;margin-bottom: 0px"><A href="#saptechbytes" target="_blank" rel="nofollow noopener noreferrer"><IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2021/02/screenshot-2021-02-22-at-11.00.25.png" height="35" width="208" /></A></P><BR />
SAP Tech Bytes is an initiative to bring you bite-sized information on all manner of topics, in <A href="https://www.youtube.com/playlist?list=PL6RpkC85SLQC3HBShmlMaPu_nL--4f20z" target="_blank" rel="nofollow noopener noreferrer">video</A> and <A href="https://blogs.sap.com/tag/sap-tech-bytes/" target="_blank" rel="noopener noreferrer">written</A> format. Enjoy!
---
From Classics to Developer Advocate
welcome-cornerblog-board
2021-01-07
https://community.sap.com/t5/welcome-corner-blog-posts/from-classics-to-developer-advocate/ba-p/13461625
2021-01-07-from-classics-to-developer-advocate
<EM>Here's my story of how I went from reading Classics at university to becoming a Developer Advocate at SAP.</EM><BR />
<BR />
<SPAN class="mention-scrubbed">timo.elliott</SPAN> asked me earlier this week <A href="https://twitter.com/timoelliott/status/1346090285529444354" target="_blank" rel="nofollow noopener noreferrer">in a Twitter thread</A> about how I went from doing a Classics degree to becoming a Developer Advocate. I thought I'd share the story here and if, like Timo suggested, it might inspire someone, then so much the better.<BR />
<BR />
<STRONG>Classics</STRONG><BR />
<BR />
For those of you who might be wondering, Classics comprises subjects that have been studied for a long time, because the subjects themselves are rather old. I read Classics at University College London (one of a number of colleges that make up the University of London). In my degree, I studied Ancient Greek and Latin for the most part, but also had the opportunity to take philology (the study of the history of language) and Sanskrit.<BR />
<BR />
With some folks, the emphasis lies in the literary aspect within these subjects; for me, the emphasis was more in the language aspect.<BR />
<BR />
To illustrate - people might learn Ancient Greek to be able to read Homer in the original (The Iliad and The Odyssey being the two main works that most people associate with him). That's definitely a thing. But people like me studied Ancient Greek for the language itself - the syntax, construction, rules and exceptions, how it evolved and so on. In fact, combining a fascination for philology with the Ancient Greek dialects that culminated in <A href="https://en.wikipedia.org/wiki/Homeric_Greek" target="_blank" rel="nofollow noopener noreferrer">the Greek that Homer wrote in</A> leads to a pretty rich seam of wonder and discovery right there.<BR />
<BR />
Likewise Latin.<BR />
<BR />
<STRONG>School</STRONG><BR />
<BR />
I was very fortunate to have been able to get exposure to some of these subjects at school - every schoolboy had to study Latin from age 11, and some of us got the opportunity to study Ancient Greek from age 13. I was fascinated by them right from the start.<BR />
<BR />
At the time -- this was in the 1970s -- while there was no such thing as Computing on any school curriculum, we did have (somewhat randomly but also rather prescient) a <A href="https://en.wikipedia.org/wiki/PDP-11" target="_blank" rel="nofollow noopener noreferrer">PDP-11/34</A> minicomputer at school for boys to discover and use. If you want to read more about this, there's an article on the O'Reilly Radar - "<A href="http://radar.oreilly.com/2005/11/burn-in-7-dj-adams.html" target="_blank" rel="nofollow noopener noreferrer">Burn In 7: DJ Adams</A>", and a more recent post on my own blog - "<A href="https://qmacro.org/2020/11/03/computer-unit-1979/" target="_blank" rel="nofollow noopener noreferrer">Computer Unit 1979</A>".<BR />
<BR />
Suffice it to say that while I loved these language subjects that I was studying, I also was immediately entranced by the world of computing.<BR />
<BR />
When I was around 14 I remember someone pointing out a brief article to me that explained that IBM (which in my mind was *the* company to aspire to work for at the time), favoured an intake that had studied Classics, over anything related to Computer Science. At the heart of that was the idea, the truth, that studying what to most folks are "dead languages", taught many essential skills:<BR />
<UL><BR />
 	<LI>logical thinking</LI><BR />
 	<LI>analytical processes</LI><BR />
 	<LI>self-driven work motivation</LI><BR />
 	<LI>a keen attention to and retention of detail</LI><BR />
 	<LI>the ability to dig oneself out of holes by looking things up</LI><BR />
 	<LI>an appreciation of the importance of rules, syntax and grammars</LI><BR />
 	<LI>knowledge of how to navigate those rules and grammars</LI><BR />
</UL><BR />
So that was how things started. My ambition then was to continue pursuing the subjects I loved but go on to work in computing.<BR />
<BR />
<STRONG>University</STRONG><BR />
<BR />
While I studied, at school, and through university, I also took a deep dive into computing. In the early days, I ventured into the terminal room in one of the school buildings (there are some pictures in "<A href="https://qmacro.org/2020/11/03/computer-unit-1979/" target="_blank" rel="nofollow noopener noreferrer">Computer Unit 1979</A>") and taught myself BASIC PLUS and how to use the PDP-11's operating system. This <A href="https://qmacro.org/autodidactics/" target="_blank" rel="nofollow noopener noreferrer">autodidactic</A> approach continued into my days at university, where I became an unofficial regular in the computing department there, forming a triangle between the Classics faculty rooms, the computing facilities and the library (we studied a lot on our own).<BR />
<BR />
I managed to fulfil my ambition by landing a summer job at IBM in Manchester, in between my first and second years at University. But after graduating, I joined the computing department at Esso Petroleum in London, and after a 6 week induction course learning COBOL, JCL and other related topics, immediately found home as a member of the Database Support Group, looking after all of Esso's database systems on IBM mainframes.<BR />
<BR />
<STRONG>The start of my working life</STRONG><BR />
<BR />
And as fate would have it, one of the systems I worked on first, as a graduate in 1987, was the enormous set of database artifacts for a project that was just starting on the floor above us. Yes, that project was implementing SAP - version R/2 4.1d, running on IMS DB/DC (the hierarchical database &amp; transactional processing system from IBM), in the context of the MVS/XA operating system (which, for those interested, was running in a virtual machine, in a partition managed by the VM operating system - like many ideas in computing today, virtual machines are nothing new).<BR />
<BR />
After about 6 months of indirectly working on the SAP project team, from the lowest layers (looking after the VSAM clusters that made up the databases that supported the project's SAP systems), I joined the SAP project team and never looked back.<BR />
<BR />
I've been working in the SAP world ever since. And while technologies and trends have come and gone, the essential aspects have always remained. Those skills that I listed above have been useful every single day since I started.<BR />
<BR />
Apart from the formal COBOL and JCL courses at the start of my Esso career, I've taught myself everything else. That's not unique - it's what many, many of us do.<BR />
<BR />
<STRONG>The skill of learning</STRONG><BR />
<BR />
And that's the thing. If there's one skill above all that has provided me with the ability to stay afloat, to keep going, to enjoy my work - it's the skill of learning. Not any computing degree, or any other degree. Not any super secret ability. Just the capacity to be curious, conscientious and consistent.<BR />
<BR />
What I'm about to end with might appear as some truism that people say at the end of a bunch of ramblings like this. But I want you to know that I mean it. Learning is a skill that has to be, well, learned. But if I can do it, anyone can. I make things up as I go along, projecting what I know onto what I don't yet know, and then filling in the gaps. That's part of learning and growing too.<BR />
<BR />
So I guess that's my story. As I've devoured topics over the years, my learning has allowed me to try and help others, and perhaps being a Developer Advocate includes that idea as a key aspect. The yin and yang of learning and sharing, dare I say teaching, combined with a nigh on insatiable curiosity. That's what's at the heart of this journey for me.<BR />
<BR />
<HR /><BR />
<BR />
<STRONG>Further related reading</STRONG><BR />
<BR />
These other posts from my <A href="https://blogs.sap.com/tag/mondaymorningthoughts/" target="_blank" rel="noopener noreferrer">Monday morning thoughts</A> series may be of interest to you:<BR />
<UL><BR />
 	<LI><A href="https://blogs.sap.com/2018/11/26/monday-morning-thoughts-learning-media-and-mechanisms/" target="_blank" rel="noopener noreferrer">Learning media and mechanisms</A></LI><BR />
 	<LI><A href="https://blogs.sap.com/2018/07/09/monday-morning-thoughts-curiosity-and-understanding/" target="_blank" rel="noopener noreferrer">Curiosity and understanding</A></LI><BR />
 	<LI><A href="https://blogs.sap.com/2018/07/02/monday-morning-thoughts-developers-and-advocacy/" target="_blank" rel="noopener noreferrer">Developers and advocacy</A></LI><BR />
 	<LI><A href="https://blogs.sap.com/2018/06/04/monday-morning-thoughts-the-learning-continuum/" target="_blank" rel="noopener noreferrer">The learning continuum</A></LI><BR />
</UL>
---
Updating your fork of the Developer Keynote repository
SAP-TechEd-Groupblog-board
2021-01-06
https://community.sap.com/t5/sap-teched-blog-posts/updating-your-fork-of-the-developer-keynote-repository/ba-p/13461277
2021-01-06-updating-your-fork-of-the-developer-keynote-repository
<EM>If you've forked the SAP TechEd Developer Keynote repository on GitHub recently, there have been some additions and improvements. This post shows you how you can update your fork so that it contains all the new material.</EM><BR />
<BR />
If you didn't see the Developer Keynote at SAP TechEd last month, go over to <A href="https://blogs.sap.com/2020/11/19/sap-teched-developer-keynote-dk100-the-story/" target="_blank" rel="noopener noreferrer">SAP TechEd Developer Keynote DK100 â The Story</A> and watch it. Hopefully you'll find it fun, interesting and inspiring. All the code and configuration for everything you saw in that keynote is in a repository on GitHub:<BR />
<BR />
<A href="https://github.com/SAP-samples/teched2020-developer-keynote" target="_blank" rel="nofollow noopener noreferrer">https://github.com/SAP-samples/teched2020-developer-keynote</A><BR />
<BR />
We'll be digging into this repository on the upcoming <A href="https://www.youtube.com/watch?v=9Q-84fxe0Jg" target="_blank" rel="nofollow noopener noreferrer">Hands-on SAP Dev live stream episode</A> which is now next week <STRONG>Fri 15 Jan at 0800 GMT</STRONG> - set a reminder and join us!<BR />
<BR />
<STRONG>Background</STRONG><BR />
<BR />
We've been <A href="https://twitter.com/qmacro/status/1337488442159222785" target="_blank" rel="nofollow noopener noreferrer">encouraging</A> you to fork this repository, i.e. create your own copy of it.<BR />
<BR />
Why have we been doing that? Well, there's a lot of material in that repository, and we want to help you get the most out of it, with your own copy.<BR />
<BR />
But if you'd just cloned it to a local environment, you wouldn't be able to enjoy the GitHub Actions-based workflow that is part of the repository; this workflow builds and publishes Docker images (for some of the components) to a registry associated with your own GitHub repository ... and these images can then be pulled into the Kyma runtime.<BR />
<BR />
For this to work, you need to run the workflow in your own repository on GitHub, not in the SAP-samples one.<BR />
<BR />
In this blog post, we'll be using me as an example - I forked the repo last month too, to <A href="https://github.com/qmacro" target="_blank" rel="nofollow noopener noreferrer">my "qmacro" GitHub account</A>. So where you see "qmacro", substitute your own GitHub user.<BR />
<BR />
<STRONG>Forking and cloning</STRONG><BR />
<BR />
For those of you who are unfamiliar with the terms "fork" and "clone" in this context, here's a very brief explanation:<BR />
<BR />
"fork" - take a complete copy of a repository; this makes most sense in a GitHub context, where you may want to start working on something in your own account, based on something in another account. You may even plan to make changes and offer those changes to the owner of the original repository that you forked (via a "pull request").<BR />
<BR />
"clone" - this is also taking a copy of a repository's contents, but is a more a git thing (the tool / protocol) than a GitHub thing (the developer collaboration website). It's usually for bringing a copy of a repository to a development environment that's local to you, so you can work on it.<BR />
<BR />
There are relationships between repositories; these are referred to using the term "remote". Conventionally, the relation between a forked repository, and where it was forked from, is expressed with a remote called "upstream" (the forked repository points to its source via this remote). Similarly, the relation that a cloned repository has with where it was cloned from is expressed with a remote called "origin".<BR />
<BR />
Here's what those relationships look like, in the context of:<BR />
<UL><BR />
 	<LI>our <STRONG>SAP-samples</STRONG> based Developer Keynote repository</LI><BR />
 	<LI>a fork of that repository to my <STRONG>qmacro</STRONG>&nbsp;account</LI><BR />
 	<LI>a clone of that forked repository to a development environment</LI><BR />
</UL><BR />
<P style="overflow: hidden;margin-bottom: 0px"><IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2021/01/fork-clone-1.gif" /></P><BR />
<STRONG>A quick check before we update</STRONG><BR />
<BR />
Before we proceed, let's take a quick look at the current situation.<BR />
<BR />
I forked the repository last month, to my "qmacro" GitHub account. This is what my forked repository looks like right now:<BR />
<P style="overflow: hidden;margin-bottom: 0px"><IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2021/01/Screen-Shot-2021-01-06-at-16.07.31.png" /></P><BR />
Notice the last update showing here was 29 days ago (basically, from just before I made the fork).<BR />
<BR />
But if we look at the source of the fork, i.e. the original Developer Keynote repository at <A href="https://github.com/SAP-samples/teched2020-developer-keynote" target="_blank" rel="nofollow noopener noreferrer">https://github.com/SAP-samples/teched2020-developer-keynote</A>, this is what it's showing right now:<BR />
<P style="overflow: hidden;margin-bottom: 0px"><IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2021/01/Screen-Shot-2021-01-06-at-16.08.52.png" /></P><BR />
&nbsp;<BR />
<BR />
Notice that the last update here was only a few minutes ago (yes, it was me, updating the original repository - that's not confusing, right? ð¤ª); also notice that the content is different - there's a new ".github/workflows/" directory, for example.<BR />
<BR />
<STRONG>Updating the fork</STRONG><BR />
<BR />
Now that we're clear on forks, clones and the relationship between them, and know that there is indeed content that we're missing in our "qmacro" fork, it's time to use those "remote" relationships, with a few git command invocations, to bring the fork up to date.<BR />
<BR />
Here's what we're going to do: Clone the "qmacro" repository to a local environment, then add the "upstream" remote relationship pointing to the original source. Next,&nbsp;pull the "main" branch from that "upstream" remote into the clone to bring down all the updates, and finally push the now-merged updates in the clone to the "origin" of the clone (i.e. the repository in the "qmacro" GitHub account).<BR />
<BR />
Here goes!<BR />
<BR />
<EM>Clone the "qmacro" repository to a local environment:</EM><BR />
<PRE class="language-abap"><CODE>; git clone <A href="https://github.com/qmacro/teched2020-developer-keynote.git" target="test_blank" rel="nofollow noopener noreferrer">https://github.com/qmacro/teched2020-developer-keynote.git</A><BR />
Cloning into 'teched2020-developer-keynote'...<BR />
remote: Enumerating objects: 2123, done.<BR />
remote: Counting objects: 100% (2123/2123), done.<BR />
remote: Compressing objects: 100% (975/975), done.<BR />
remote: Total 2123 (delta 983), reused 2123 (delta 983), pack-reused 0<BR />
Receiving objects: 100% (2123/2123), 18.79 MiB | 4.14 MiB/s, done.<BR />
Resolving deltas: 100% (983/983), done.</CODE></PRE><BR />
<EM>Add the "upstream" remote relationship pointing to the original source (moving into the new directory first, and then double-checking all the remotes, because we're curious):</EM><BR />
<PRE class="language-abap"><CODE>; cd teched2020-developer-keynote/ <BR />
; git remote add upstream <A href="https://github.com/SAP-samples/teched2020-developer-keynote.git" target="test_blank" rel="nofollow noopener noreferrer">https://github.com/SAP-samples/teched2020-developer-keynote.git</A><BR />
; git remote -v<BR />
origin <A href="https://github.com/qmacro/teched2020-developer-keynote.git" target="test_blank" rel="nofollow noopener noreferrer">https://github.com/qmacro/teched2020-developer-keynote.git</A> (fetch)<BR />
origin <A href="https://github.com/qmacro/teched2020-developer-keynote.git" target="test_blank" rel="nofollow noopener noreferrer">https://github.com/qmacro/teched2020-developer-keynote.git</A> (push)<BR />
upstream <A href="https://github.com/SAP-samples/teched2020-developer-keynote.git" target="test_blank" rel="nofollow noopener noreferrer">https://github.com/SAP-samples/teched2020-developer-keynote.git</A> (fetch)<BR />
upstream <A href="https://github.com/SAP-samples/teched2020-developer-keynote.git" target="test_blank" rel="nofollow noopener noreferrer">https://github.com/SAP-samples/teched2020-developer-keynote.git</A> (push)</CODE></PRE><BR />
<EM>Pull the "main" branch from that "upstream" remote into the clone, to bring down all the updates (lots of lines redacted for brevity):</EM><BR />
<PRE class="language-abap"><CODE>; git pull upstream main<BR />
remote: Enumerating objects: 195, done.<BR />
remote: Counting objects: 100% (195/195), done.<BR />
remote: Compressing objects: 100% (14/14), done.<BR />
remote: Total 768 (delta 184), reused 186 (delta 181), pack-reused 573<BR />
Receiving objects: 100% (768/768), 4.34 MiB | 1.55 MiB/s, done.<BR />
Resolving deltas: 100% (418/418), completed with 21 local objects.<BR />
From <A href="https://github.com/SAP-samples/teched2020-developer-keynote" target="test_blank" rel="nofollow noopener noreferrer">https://github.com/SAP-samples/teched2020-developer-keynote</A><BR />
 * branch            main       -&gt; FETCH_HEAD<BR />
 * [new branch]      main       -&gt; upstream/main<BR />
Updating fc07e54..bc0aa2f<BR />
Fast-forward<BR />
 .github/workflows/image-build-and-publish.yml          |  34 ++++++++<BR />
 usingappstudio/README.md                               | 149 +++++++++++++++++++++++++++++++++++<BR />
 usingappstudio/appstudiosetup                          |  54 +++++++++++++<BR />
 create mode 100644 kymaruntime/images/run-workflow.png<BR />
 create mode 100644 kymaruntime/images/s4mock-package.png<BR />
 create mode 100644 kymaruntime/images/workflow.png<BR />
 rename s4hana/event/settings =&gt; message-bus-settings.sh (53%)<BR />
 create mode 100644 usingappstudio/images/open-workspace.png</CODE></PRE><BR />
&nbsp;<BR />
<BR />
<EM>Finally, push the now-merged updates in the clone to the "origin" of the clone (i.e. the repository in the "qmacro" GitHub account):</EM><BR />
<PRE class="language-abap"><CODE>; git push origin main<BR />
Enumerating objects: 791, done.<BR />
Counting objects: 100% (791/791), done.<BR />
Delta compression using up to 16 threads<BR />
Compressing objects: 100% (325/325), done.<BR />
Writing objects: 100% (768/768), 4.33 MiB | 905.00 KiB/s, done.<BR />
Total 768 (delta 423), reused 751 (delta 406)<BR />
remote: Resolving deltas: 100% (423/423), completed with 20 local objects.<BR />
To <A href="https://github.com/qmacro/teched2020-developer-keynote.git" target="test_blank" rel="nofollow noopener noreferrer">https://github.com/qmacro/teched2020-developer-keynote.git</A><BR />
   fc07e54..bc0aa2f  main -&gt; main</CODE></PRE><BR />
That's it! We've effectively pulled down updates from the original repository (top left in the diagram), to our clone in the development environment (bottom middle in the diagram), and then pushed those merged updates up to the origin of our clone, i.e. the repository on GitHub that we'd created as a fork (top right in the diagram).<BR />
<BR />
Now, in GitHub, the repository in the "qmacro" account looks like this:<BR />
<P style="overflow: hidden;margin-bottom: 0px"><IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2021/01/Screen-Shot-2021-01-06-at-16.52.31.png" /></P><BR />
All nice and up to date!<BR />
<BR />
<STRONG>Wrapping up</STRONG><BR />
<BR />
Of course, there's another brute force way of "updating" your fork - and that is to simply delete it and re-do the fork. But that approach is far too blunt, would cause any changes you'd made to your fork be lost, and doesn't teach us anything <span class="lia-unicode-emoji" title=":slightly_smiling_face:">ð</span><BR />
<BR />
I've put together a script containing the commands used here, and have pushed that to the Developer Keynote repository too - it's <A href="https://github.com/SAP-samples/teched2020-developer-keynote/blob/main/forkupdateutils/2-clone-and-update" target="_blank" rel="nofollow noopener noreferrer">2-clone-and-update</A>. Have a look and feel free to play around. If you're there, have a look at <A href="https://github.com/SAP-samples/teched2020-developer-keynote/blob/main/forkupdateutils/1-setup" target="_blank" rel="nofollow noopener noreferrer">1-setup</A> - can you tell what I wrote it for? <span class="lia-unicode-emoji" title=":slightly_smiling_face:">ð</span><BR />
<BR />
We'll be covering some of this on <A href="https://www.youtube.com/watch?v=9Q-84fxe0Jg" target="_blank" rel="nofollow noopener noreferrer">next week's Hands-on SAP Dev live stream episode</A> - I hope to see you there!<BR />
<P style="overflow: hidden;margin-bottom: 0px"><IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2021/01/Screen-Shot-2021-01-07-at-13.40.53-1.png" /></P>
---
SAP TechEd 2020 Channel 1 at home
SAP-TechEd-Groupblog-board
2020-12-04
https://community.sap.com/t5/sap-teched-blog-posts/sap-teched-2020-channel-1-at-home/ba-p/13486916
2020-12-04-sap-teched-2020-channel-1-at-home
<EM>I'll be watching all the Channel 1 content as it happens from the comfort of my TV - as well as interacting with individual sessions on my computer. Here's how.</EM><BR />
<BR />
Next week's SAP TechEd is almost upon us, and I'm looking forward to it, especially Channel 1, which you can learn more about in <A href="https://www.youtube.com/watch?v=oasv3iBwyqc" target="_blank" rel="nofollow noopener noreferrer">today's episode of SAP Developer News</A>.<BR />
<BR />
While I'll be interacting with individual sessions on my computer via the <A href="https://pages.sapteched.com/sap/sapteched2020/index" target="_blank" rel="nofollow noopener noreferrer">main SAP TechEd website</A> I'm going to take advantage of the fact that the entire Channel 1 stream is going to be broadcast as a Twitter Live Event too, at this URL:<BR />
<BR />
â <A href="https://twitter.com/i/events/1328768348725776384/" target="_blank" rel="nofollow noopener noreferrer">https://twitter.com/i/events/1328768348725776384/</A><BR />
<BR />
And best of all, it's ungated, i.e. you don't have to log on to anything to watch it!<BR />
<BR />
So I'm going to set a Chrome browser tab up pointing to that Twitter Live Event URL, and then cast it to my TV via the power of <A href="https://store.google.com/gb/product/chromecast" target="_blank" rel="nofollow noopener noreferrer">Chromecast</A>.<BR />
<P style="overflow: hidden;margin-bottom: 0px"><IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/12/Screen-Shot-2020-12-04-at-07.08.24.png" height="375" width="599" /></P><BR />
<P class="image_caption" style="text-align:center;font-style:italic;, Arial, sans-serif">Chromecasting Channel 1 to my TV</P><BR />
That way I can enjoy the continuous content that Channel 1 will be offering -- learning from the hosts, moderators, guests &amp; presenters in Keynote, Executive live Q&amp;A, Strategy Talk and Live Interview sessions*&nbsp;-- as the sessions play out.<BR />
<BR />
*you <EM>have</EM> registered for the <A href="https://blogs.sap.com/2020/11/19/sap-teched-developer-keynote-dk100-the-story/" target="_blank" rel="noopener noreferrer">Developer Keynote</A>, right?<BR />
<BR />
Anyway, let me know how you're going to watch Channel 1 on the <A href="https://twitter.com/i/events/1328768348725776384/" target="_blank" rel="nofollow noopener noreferrer">Twitter Live Event stream</A>. On the main living room TV? Audio only via your phone while walking? Something else? Let me know!
---
UTFRW - Unofficial TechEd Fun Run / Walk
SAP-TechEd-Groupblog-board
2020-12-01
https://community.sap.com/t5/sap-teched-blog-posts/utfrw-unofficial-teched-fun-run-walk/ba-p/13482463
2020-12-01-utfrw-unofficial-teched-fun-run-walk
<EM>Let's get together virtually over the course of the SAP TechEd 2020 virtual event and share our 5K walking or running experiences.</EM><BR />
<BR />
This year SAP TechEd is global and virtual - and free! I'm looking forward to what will be quite a different experience, I'm sure you are too.<BR />
<BR />
Previous TechEd events have given us the chance to meet and spend time together, perhaps even walk or run together in the mornings or evenings. There's even the official run in Las Vegas which is very popular. And last year in Las Vegas I got the opportunity to join <SPAN class="mention-scrubbed">phil.cooley</SPAN> on a quiet morning run which was wonderful.<BR />
<BR />
During the rest of the year, with Phil running "down under" and me "oop norf" I feel like we're a pair of bookends pounding the routes across the world.<BR />
<P style="overflow: hidden;margin-bottom: 0px"><IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/12/Screen-Shot-2020-12-01-at-07.46.15.png" height="250" width="476" /></P><BR />
Phil and I were chatting last week and thought it would be a fun idea for us to share our individual running and walking experiences during SAP TechEd this year. I know a lot of us try to keep fit and get some fresh air by running or walking during the day and I for one would enjoy seeing what others get up to. I think it's especially helpful to get outside and away from the desk in these current times.<BR />
<BR />
So - <A href="https://events.sapteched.com/pages/sap/sapteched2020/index" target="_blank" rel="nofollow noopener noreferrer">SAP TechEd 2020</A> is a three day extravaganza, from 08 Dec to 10 Dec (i.e. the middle part of next week). If you go for a run or a walk of 5K in that period - consider making it a "UTFRW" - an "Unofficial TechEd Fun Run / Walk" and let us know how you get on, where you are in the world - share as much or as little as you like.<BR />
<BR />
Phil and I have set up a new Coffee Corner Discussion - <A href="https://answers.sap.com/articles/13200236/utfrw-unofficial-teched-fun-run-walk-share-your-ex.html" target="_blank" rel="noopener noreferrer">UTFRW Unofficial TechEd Fun Run / Walk - Share Your Experiences Here!</A> for you to add a comment with your experience. And of course, feel free to share a pointer to the discussion on social media - use the hashtag #UTFRW if you feel like it!<BR />
<BR />
This is completely unofficial and just a way of us sharing our own personal experiences - nothing more than that. Take care, have fun, and see you in the discussion!<BR />
<BR />
Phil and DJ
---
SAP TechEd Developer Keynote DK100 - The Story
SAP-TechEd-Groupblog-board
2020-11-19
https://community.sap.com/t5/sap-teched-blog-posts/sap-teched-developer-keynote-dk100-the-story/ba-p/13465836
2020-11-19-sap-teched-developer-keynote-dk100-the-story
<EM>We got together to build a Developer Keynote for TechEd for you; this post gives you some context on what you'll see, and, following the keynote, will contain all the links you need.</EM><BR />
<BR />
<STRONG>Update 10 Dec 2020: Watch the Developer Keynote replay here â <A href="https://www.youtube.com/watch?v=btEk_jdQo6A" target="_blank" rel="nofollow noopener noreferrer">Developer Keynote: All Developers Welcome</A> and get access to the code and config in the GitHub repo, now public: <A href="https://github.com/SAP-samples/teched2020-developer-keynote" target="_blank" rel="nofollow noopener noreferrer">https://github.com/SAP-samples/teched2020-developer-keynote</A>.</STRONG><BR />
<BR />
All the developer advocates are looking forward to SAP TechEd 2020. Some of us are giving individual sessions, but we all got together to build the <A href="https://bit.ly/teched-dk100" target="_blank" rel="nofollow noopener noreferrer">DK100 Developer Keynote</A>, which is open to everyone, scheduled a couple of times to suit different timezones, and is hopefully enlightening and fun. Go ahead and <A href="https://bit.ly/teched-dk100" target="_blank" rel="nofollow noopener noreferrer">add it to your agenda</A> and then come back here and continue reading <span class="lia-unicode-emoji" title=":slightly_smiling_face:">ð</span><BR />
<H3 id="toc-hId-1063519657">The story</H3><BR />
The theme and tagline of the Developer Keynote is "All Developers Welcome", and the story is of three developers, with completely different backgrounds and skillsets, coming together on their first project sprint review, to look at where they are, and to explain to each other the components that each of them have been building.<BR />
<BR />
The company they work for initiated this "Charity Fund" project which is all about building charity fund credit amounts in a backend ABAP system based on sales orders, and their values, coming into their main ERP system on SAP S/4HANA Cloud. Those charity fund credits will go towards a tree-planting initiative later that year.<BR />
<BR />
Tasked with building different parts to the whole solution, the developers have come together in this first sprint review to go through what they've done, and how they've done it. Here you'll see multiple components work together ...<BR />
<UL><BR />
 	<LI>across different runtimes on SAP Cloud Platform (Kyma, Cloud Foundry and ABAP)</LI><BR />
 	<LI>in different languages (ABAP, Go, Node.js and Bash)</LI><BR />
 	<LI>using different programming models (SAP Cloud Application Programming Model and ABAP's RESTful Application Programming Model)</LI><BR />
 	<LI>in different time signatures (synchronous and asynchronous using SAP Enterprise Messaging)</LI><BR />
 	<LI>for different purposes (backend services and a frontend with SAP UI5 &amp; SAP Fiori)</LI><BR />
 	<LI>based on standardised APIs and Cloud Events (from the SAP API Business Hub)</LI><BR />
</UL><BR />
but with one overarching theme - ALL of these three DEVELOPERS, with different backgrounds and skillsets, are WELCOME.<BR />
<BR />
The sprint review is oriented around the project team's whiteboard, which looks like this:<BR />
<P style="overflow: hidden;margin-bottom: 0px"><IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/11/Screen-Shot-2020-11-19-at-12.10.59.png" /></P><BR />
<P class="image_caption" style="text-align: center;font-style: italic">Whiteboard with component diagram</P><BR />
<BR />
<H3 id="toc-hId-867006152">Where you fit in</H3><BR />
Perhaps you can identify with one or more of these developer skillsets or backgrounds. Perhaps this will inspire you to try out that little idea you've been hatching, or to dig in to that tutorial you've promised yourself. Perhaps it will at least show that multi-discipline projects are tangible and within your reach.<BR />
<BR />
Perhaps most importantly, everything you see that the developers have built, is available for you to try out yourself, in an SAP Cloud Platform trial account. All the code and configuration that the developer advocates collectively created, and that was shown in the keynote, <A href="https://github.com/SAP-samples/teched2020-developer-keynote" target="_blank" rel="nofollow noopener noreferrer">is available in a public GitHub repository for you to clone, try out and adapt</A>.<BR />
<BR />
So enjoy the <A href="https://www.youtube.com/watch?v=btEk_jdQo6A" target="_blank" rel="nofollow noopener noreferrer">Developer Keynote replay</A>, have fun digging into the code, and most of all, remember:<BR />
<BR />
ALL DEVELOPERS WELCOME!
---
My SAP TechEd 2020 - what I'm looking forward to
SAP-TechEd-Groupblog-board
2020-11-11
https://community.sap.com/t5/sap-teched-blog-posts/my-sap-teched-2020-what-i-m-looking-forward-to/ba-p/13485985
2020-11-11-my-sap-teched-2020-what-i-m-looking-forward-to
<EM>SAP TechEd 2020 is fast approaching, and in many ways it will be a different experience for all of us. Then again, there's one thing that will remain - and that's the dedication of those folks producing content for us to share &amp; enjoy. Here's what I'm looking forward to in the rich array of sessions offered.</EM><BR />
<BR />
I've looked through every session and I guess I can divide up my personal picks into categories: baseline technologies with interesting aspects and immediate application, sessions from folks that I know will be engaging and inspirational, Channel 1 content, and what appeals to my sense of what's important generally. In no particular order, here we go!<BR />
<H2 id="toc-hId-936285095"><A name="channel1" target="_blank"></A>Channel 1 content</H2><BR />
As well as more regular sessions this year, SAP TechEd features "<A href="https://events.sapteched.com/widget/sap/sapteched2020/1603826766209001dGtz" target="_blank" rel="nofollow noopener noreferrer">Channel 1</A>" (find it on your <A href="https://reg.sapteched.com/flow/sap/sapteched2020/attendee-portal/page/portal" target="_blank" rel="nofollow noopener noreferrer">Attendee Dashboard</A>), with a rolling flow of different content items. The Channel 1 hosts include some of my advocate colleagues, and for that reason alone I'm interested, but in particular, there are these sessions that I'm looking forward to:<BR />
<BR />
<A href="https://events.sapteched.com/widget/sap/sapteched2020/Catalog/session/1604670201406001rAkT" target="_blank" rel="nofollow noopener noreferrer"><STRONG>Presenting the Devtoberfest Finalists [GS201]</STRONG></A> - presumably you've been following our <A href="https://github.com/sap-samples/sap-devtoberfest-2020" target="_blank" rel="nofollow noopener noreferrer">Devtoberfest 2020 event</A>, right? In any case, why not check out this post from Tom to catch up and get voting: <A href="https://blogs.sap.com/2020/11/09/devtoberfest-contest-voting/" target="_blank" rel="noopener noreferrer">Devtoberfest Contest Voting</A> and then you're ready to join this Channel 1 session to check out all the finalists.<BR />
<BR />
<STRONG><A href="https://events.sapteched.com/widget/sap/sapteched2020/Catalog/session/1603314875989001AsWU" target="_blank" rel="nofollow noopener noreferrer">Developer Keynote: All Developers Welcome [DK100]</A></STRONG> (with <SPAN class="mention-scrubbed">kevin.muessig</SPAN>, <SPAN class="mention-scrubbed">rich.heilman</SPAN> and me, and background work from all the developer advocates) - this for me is the most exciting session of them all because I think it represents very well where we are from a technology standpoint with SAP Cloud Platform, with different tools, languages, runtimes and more. Additionally, everything you see in this session is available for you to try out for free in your trial accounts.<BR />
<BR />
<STRONG>â There's a short overview of the keynote that I'd urge you to read now - it will give you the background story and context to what goes on in the session: <A href="https://blogs.sap.com/2020/11/19/sap-teched-developer-keynote-dk100-the-story/" target="_blank" rel="noopener noreferrer">SAP TechEd Developer Keynote DK100 â The Story</A>.</STRONG><BR />
<BR />
I think there's something for everyone in this session - including a cameo Vim appearance (see if you can spot it) and some Bash scripting. All developers welcome! (Rich also has other sessions including one below - <A href="https://events.sapteched.com/widget/sap/sapteched2020/Catalog?search=%22Rich%20Heilman%22" target="_blank" rel="nofollow noopener noreferrer">check them all out here</A>.)<BR />
<H2 id="toc-hId-739771590"><A name="important" target="_blank"></A>My sense of what's important generally</H2><BR />
Actually I made this category up just so I could include what is I know going to be a session where I geek out the most.<BR />
<BR />
<STRONG><A href="https://events.sapteched.com/widget/sap/sapteched2020/Catalog/session/1602555754690001uKl1" target="_blank" rel="nofollow noopener noreferrer">Explore the New Capabilities of SAP Cloud Platform â Open API and CLI [DEV360]</A></STRONG> (an expert workshop by <SPAN class="mention-scrubbed">michal.keidar</SPAN> and <SPAN class="mention-scrubbed">segev.lev</SPAN>) - I've been known to say, on occasion, "<STRONG>The Future Is Terminal!</STRONG>" and I mean it. Then again, I've also been referred to as "that crazy TTY guy", and often simply "that idiot". So what do I know?<BR />
<BR />
Anyway, as we move forward further into the 21st century, one thing is clear, that some technologies and approaches become more important than ever, regardless of their age. In fact, longevity is a sign of stability, reliability and suitability for the job. And for that reason, this session on APIs and command line interface possibilities for SAP Cloud Platform hits the bullseye for me. This session gets my special "<CODE>&gt;_</CODE>" badge that I just invented while writing this paragraph.<BR />
<H2 id="toc-hId-543258085"><A name="engaging" target="_blank"></A>Engaging and inspirational</H2><BR />
I have the privilege of working alongside some wonderful people in the Developer Advocates team, and interacting with equally wonderful people in the wider ecosphere. I've attended sessions from all these folks before and know that their TechEd sessions will not only be interesting and important but also engaging.<BR />
<BR />
<A href="https://events.sapteched.com/widget/sap/sapteched2020/Catalog/session/1602555759653001u2p2" target="_blank" rel="nofollow noopener noreferrer"><STRONG>Beyond SAPUI5 and SAP Fiori Elements [IIS114]</STRONG></A> (a beginner breakout session by <SPAN class="mention-scrubbed">mariusobert</SPAN>) - I can't deny, I'm a big fan of UI5, and since my time digging in, the world of UI5 and SAP UI in general has grown. In this session we'll learn from Marius what there is, and when to use what.<BR />
<BR />
<A href="https://events.sapteched.com/widget/sap/sapteched2020/Catalog/session/1602555762554001uNVN" target="_blank" rel="nofollow noopener noreferrer"><STRONG>Build Data Pipelines with SAP Data Intelligence [INT105]</STRONG></A> (a beginner lecture by <SPAN class="mention-scrubbed">vitaliy.rudnytskiy</SPAN>) - Witalij is my go-to person for all things data, and this session is going to be no exception. Just like asynchronous processes are the life blood of the application level, the data pipeline is the life blood of what supports those applications. (Witalij also has another couple of sessions - <A href="https://events.sapteched.com/widget/sap/sapteched2020/Catalog?search=%22Witalij%20Rudnicki%22" target="_blank" rel="nofollow noopener noreferrer">check them all out here</A>.)<BR />
<BR />
<STRONG><A href="https://events.sapteched.com/widget/sap/sapteched2020/Catalog/session/1602555965285001RSkw" target="_blank" rel="nofollow noopener noreferrer">Cloud-Native Development with SAP HANA [DAT160]</A> </STRONG>(a beginner workshop by <SPAN class="mention-scrubbed">thomas.jung</SPAN> and <SPAN class="mention-scrubbed">rich.heilman</SPAN>) - SAP Cloud Application Programming Model (another love of mine), SAP HANA cloud services and the SAP Business Application Studio? What's missing? Nothing ... all that's needed is perhaps a dynamic duo to run the workshop. Oh, wait! All sorted! (Thomas also has other sessions, <A href="https://events.sapteched.com/widget/sap/sapteched2020/Catalog?search=%22Thomas%20Jung%22" target="_blank" rel="nofollow noopener noreferrer">check them all out here</A>.)<BR />
<BR />
<STRONG><A href="https://events.sapteched.com/widget/sap/sapteched2020/Catalog/session/1603734625163001mas9" target="_blank" rel="nofollow noopener noreferrer">Transitioning from ABAP Programmer to Developer [CM105]</A></STRONG> (a Channel 1 Talk by <SPAN class="mention-scrubbed">nabheet.madan3</SPAN>) - Nabheet has being putting out some great content on <A href="https://www.youtube.com/channel/UCW8OSu54ONLbsdV30tB3sKQ" target="_blank" rel="nofollow noopener noreferrer">his YouTube channel</A>, helping ABAP programmers gain new skills. While ABAP is still a key skill, there are plenty of other skills out there that are worth learning ... but how? That's what this session is about.<BR />
<H2 id="toc-hId-346744580"><A name="baseline" target="_blank"></A>Baseline technologies</H2><BR />
There's a lot of SAP tech we advocates have covered in the <A href="https://blogs.sap.com/2020/11/09/an-overview-of-sap-developers-video-content/#shows" target="_blank" rel="noopener noreferrer">Hands-on SAP Dev show</A> over on the <A href="https://www.youtube.com/user/sapdevs" target="_blank" rel="nofollow noopener noreferrer">SAP Developers YouTube channel</A>, and what's resonated with me is what the SAP Cloud Platform (SCP) represents, plus the breadth of facilities available. For that reason, I'm listing some TechEd sessions here in this context:<BR />
<BR />
<STRONG><A href="https://events.sapteched.com/widget/sap/sapteched2020/Catalog/session/1603382154712001ui1P" target="_blank" rel="nofollow noopener noreferrer">Architecture Vision and Strategy Behind SAP's Business Technology Platform [ST100]</A></STRONG> (a beginner strategy talk by <SPAN class="mention-scrubbed">michael.ameling</SPAN>) - Starting off with a nice high level overview of what I see as a functional layer atop of SCP, important when we think of the intelligent suite as a whole.<BR />
<BR />
<A href="https://events.sapteched.com/widget/sap/sapteched2020/Catalog/session/1602217234696001KUtz" target="_blank" rel="nofollow noopener noreferrer"><STRONG>Craft and Execute Your Enterprise API Strategy [DEV114]</STRONG></A> (a beginner breakout session by <SPAN class="mention-scrubbed">soumyadeep.ganguly</SPAN>) - in various Hands-on SAP Dev show sessions, we've come across and embraced all kinds of APIs on SCP, plus made good use of the SAP API Business Hub. As we start to properly understand and embrace the multiple components of the intelligent enterprise it's important to have a good understanding of how to use and manage their most fundamental and important assets - their programming interfaces.<BR />
<BR />
<A href="https://events.sapteched.com/widget/sap/sapteched2020/Catalog/session/1602555753977001u2xH" target="_blank" rel="nofollow noopener noreferrer"><STRONG>Event-Driven Integrations Using SAP Cloud Platform Integration Suite [DEV216]</STRONG></A> (an advanced breakout session by <SPAN class="mention-scrubbed">sunny.kapoor2</SPAN>) - the author <A href="https://en.wikipedia.org/wiki/William_Gibson" target="_blank" rel="nofollow noopener noreferrer">William Gibson</A> once said "The future is here, it's just not evenly distributed". In a way, that reminds me of our future, which to a large extent is also uneven, at least in a time context. In other words, our future is <STRONG>asynchronous</STRONG>. Event-driven systems have been around for decades, and the concepts are now being applied to the enterprise in a big way. We have seen some of that in our <A href="https://www.youtube.com/playlist?list=PL6RpkC85SLQCf--P9o7DtfjEcucimapUf" target="_blank" rel="nofollow noopener noreferrer">Diving into messaging on SAP Cloud Platform</A> series.<BR />
<H2 id="toc-hId-150231075"><A name="wrapup" target="_blank"></A>Wrapping up</H2><BR />
Actually, I do have one more session that I'm definitely putting into my agenda, and that's this one:<BR />
<BR />
<A href="https://events.sapteched.com/widget/sap/sapteched2020/Catalog/session/16033147247400012BLW" target="_blank" rel="nofollow noopener noreferrer"><STRONG>SAP TechEd Wrap-Up and Live Q&amp;A [EQA101]</STRONG></A> (an executive Q&amp;A session with <SPAN class="mention-scrubbed">juergen.mueller</SPAN>, <SPAN class="mention-scrubbed">thomas.grassl</SPAN> and <SPAN class="mention-scrubbed">thomas.jung</SPAN>). Three big thinkers together in one place, helping us to digest SAP TechEd 2020, with the bonus of us being able to ask questions. What's not to like?<BR />
<BR />
&nbsp;<BR />
<BR />
So there you go - that's what I'm looking forward to at SAP TechEd 2020. How about you?<BR />
<BR />
&nbsp;<BR />
<BR />
<EM>Update 17 Nov 2020: See the collection of our recommendations via links in <SPAN class="mention-scrubbed">thomas.jung</SPAN>'s post&nbsp;<A href="https://blogs.sap.com/2020/11/13/my-sap-teched-2020-an-agenda-from-the-viewpoint-of-a-developer-manager/" target="_blank" rel="noopener noreferrer">My SAP TechEd 2020 â An Agenda From the Viewpoint of a Developer Manager</A>.</EM>
---
An overview of SAP Developers video content
welcome-cornerblog-board
2020-11-09
https://community.sap.com/t5/welcome-corner-blog-posts/an-overview-of-sap-developers-video-content/ba-p/13482485
2020-11-09-an-overview-of-sap-developers-video-content
<EM>There's a wealth of video content for SAP developers on the SAP Developers YouTube channel. Find out what it is, and how to navigate it.</EM><BR />
<BR />
Back in January 2019, <A href="https://blogs.sap.com/2019/01/16/hands-on-sap-dev-with-qmacro-new-live-stream-series/" target="_blank" rel="noopener noreferrer">our live streaming journey started</A> over on Twitch as somewhat of an experiment, before moving over to YouTube. Initially we streamed to individual SAP developer YouTube channels (<A href="https://www.youtube.com/djadams-qmacro" target="_blank" rel="nofollow noopener noreferrer">mine</A>, <A href="https://www.youtube.com/c/MaxStreifeneder" target="_blank" rel="nofollow noopener noreferrer">Max's</A>, <A href="https://www.youtube.com/user/ThomasJung1" target="_blank" rel="nofollow noopener noreferrer">Tom's</A> and <A href="https://www.youtube.com/channel/UCmGdtTTsVzqTY88N1ncUE_g" target="_blank" rel="nofollow noopener noreferrer">Kevin's</A>) but we soon pooled our efforts &amp; experiments and all moved across, with the rest of the advocates, to the <A href="https://www.youtube.com/user/sapdevs" target="_blank" rel="nofollow noopener noreferrer">SAP Developers YouTube channel</A>.<BR />
<BR />
It's been a wonderful journey for us so far, being able to share content with you like this, and in particular, the immediate and direct connections afforded by live streams and premieres is one of my favourite aspects. It's not by accident that my tweets about upcoming live streams <A href="https://twitter.com/qmacro/status/1325739914927878145" target="_blank" rel="nofollow noopener noreferrer">often include</A> this sentence: "<EM>Join us for friendly chat and curiosity-driven learning-by-doing!</EM>" The journey is still in its infancy, so I thought now would be a good time to highlight some of the content and help you navigate it.<BR />
<H2 id="toc-hId-936190917"><A name="channel" target="_blank"></A>Channel</H2><BR />
First, the <A href="https://www.youtube.com/user/sapdevs" target="_blank" rel="nofollow noopener noreferrer">SAP Developers YouTube channel</A> should be your single go-to destination. Make sure you're subscribed and you can use the bell icon to get notified of upcoming content.<BR />
<P style="overflow: hidden;margin-bottom: 0px"><IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/11/Screen-Shot-2020-11-09-at-11.26.31.png" /></P><BR />
<P class="image_caption" style="text-align: center;font-style: italic">The SAP Developers YouTube channel home page</P><BR />
<BR />
<H2 id="toc-hId-739677412"><A name="shows" target="_blank"></A>Shows</H2><BR />
Next, we have different shows for you.<BR />
<BR />
<STRONG>Hands-on SAP Dev</STRONG>: This is the original and still the main show - the home of live content. There's a <A href="https://www.youtube.com/playlist?list=PL6RpkC85SLQABOpzhd7WI-hMpy99PxUo0" target="_blank" rel="nofollow noopener noreferrer">general YouTube playlist for this show</A> where all the individual episodes are listed*, but note that there are other more focused playlists that gather related episodes from this show together in various series (see below). Generally each Hands-on SAP Dev episode runs for up to an hour, sometimes less but generally no more -- so you can reserve a slot for them in your day's work schedule :-). The show has some regularity to it, in that, for example, Tom premieres often on a Tuesday, and I stream on a Friday.<BR />
<BR />
(*older episodes are gathered in another playlist: <A href="https://www.youtube.com/playlist?list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0" target="_blank" rel="nofollow noopener noreferrer">Hands-on SAP Dev with qmacro</A>)<BR />
<BR />
<STRONG>SAP Developer News</STRONG>: This is a relatively new show with episodes that appear at the end of each week. The episodes are deliberately short so you can consume them quickly; they're usually 5-6 minutes long covering news highlights from that week. There's a playlist for this show too: <A href="https://www.youtube.com/playlist?list=PL6RpkC85SLQAVBSQXN9522_1jNvPavBgg" target="_blank" rel="nofollow noopener noreferrer">SAP Developer News</A>.<BR />
<BR />
<STRONG>SAP Tech Bytes</STRONG>: This is an initiative to bring you bite-sized information on all manner of topics, in <A href="https://www.youtube.com/playlist?list=PL6RpkC85SLQC3HBShmlMaPu_nL--4f20z" target="_blank" rel="noopener noreferrer nofollow">video</A>&nbsp;and&nbsp;<A href="https://blogs.sap.com/tag/sap-tech-bytes/" target="_blank" rel="noopener noreferrer">written</A> format. Everything you need from this initiative is accessible from the accompanying <A href="https://github.com/SAP-samples/sap-tech-bytes/blob/main/README.md" target="_blank" rel="nofollow noopener noreferrer">sap-tech-bytes</A> repository on GitHub - links to videos, blog posts, playlists, code samples and more.<BR />
<H2 id="toc-hId-543163907"><A name="series" target="_blank"></A><STRONG>Series</STRONG></H2><BR />
Of course, within the Hands-on SAP Dev show, we have different developer advocates covering different topics at different times, and more often than not, to cover a topic fully takes more than a single episode. How do we group these episodes together? Into series, and we generally try to represent each series with its own playlist. There are <A href="https://www.youtube.com/user/sapdevs/playlists" target="_blank" rel="nofollow noopener noreferrer">many playlists</A> available - here are some examples of playlists for series:<BR />
<BR />
<A href="https://www.youtube.com/playlist?list=PL6RpkC85SLQCBncEWbkHTLz7ykB9C7yof" target="_blank" rel="nofollow noopener noreferrer">Getting the most out of the SAP TechEd Developer Keynote repository</A><BR />
<BR />
<A href="https://www.youtube.com/playlist?list=PL6RpkC85SLQB9d462qCFLv2BW4o37ZaIC" target="_blank" rel="nofollow noopener noreferrer">Graphing SAP Enterprise Messaging Artifacts</A><BR />
<BR />
<A href="https://www.youtube.com/playlist?list=PL6RpkC85SLQAHZ_V3cZsTok0T6BvI4HT1" target="_blank" rel="nofollow noopener noreferrer">Building hana-opensap-cloud-2020</A><BR />
<BR />
<A href="https://www.youtube.com/playlist?list=PL6RpkC85SLQCf--P9o7DtfjEcucimapUf" target="_blank" rel="nofollow noopener noreferrer">Diving into messaging on SAP Cloud Platform</A><BR />
<BR />
<A href="https://www.youtube.com/playlist?list=PL6RpkC85SLQDXSLHrSPtu8wztzDs8kYPX" target="_blank" rel="nofollow noopener noreferrer">SAP Ariba for Developers</A><BR />
<BR />
There are also some series playlists with Hands-on SAP Dev content on the original advocates' channels, for example:<BR />
<BR />
<A href="https://www.youtube.com/playlist?list=PLfctWmgNyOIeE5ve3c4ojUVPyfvAxOiH8" target="_blank" rel="nofollow noopener noreferrer">Building a custom task UI for SAP Cloud Platform Workflow in two episodes</A><BR />
<BR />
<A href="https://www.youtube.com/playlist?list=PLfctWmgNyOIfPbBiF_qV_6e2rTvvbfECc" target="_blank" rel="nofollow noopener noreferrer">Data engineering and development with Witalij Rudnicki</A><BR />
<BR />
<A href="https://www.youtube.com/playlist?list=PLzLY5gikd9hAytq26IaPoHTwSk6tmgu61" target="_blank" rel="nofollow noopener noreferrer">CF CLI Plugins</A><BR />
<BR />
<A href="https://www.youtube.com/playlist?list=PLzLY5gikd9hCE52Xlz9e9tYGQj_U2ThYx" target="_blank" rel="nofollow noopener noreferrer">Max's Adventure in SAP Cloud Platform</A><BR />
<BR />
<A href="https://www.youtube.com/playlist?list=PLoc6uc3ML1JTXAKGQlvyIA8lGMELzEBS0" target="_blank" rel="nofollow noopener noreferrer">Project Kyma and Kubernetes</A><BR />
<BR />
There's even a specific "Deep Dive!" series collection too:<BR />
<BR />
<A href="https://www.youtube.com/playlist?list=PLfctWmgNyOIcbB-ia7Dn12v1MF8icslV7" target="_blank" rel="nofollow noopener noreferrer">Consuming remote services in CAP - Deep Dive!</A><BR />
<BR />
<A href="https://www.youtube.com/playlist?list=PLfctWmgNyOIfPdGVbhhAX5QPDTr_nQBuw" target="_blank" rel="nofollow noopener noreferrer">Custom task UIs for Workflow - Deep Dive!</A><BR />
<BR />
<A href="https://www.youtube.com/playlist?list=PLfctWmgNyOIddRm4duZdbNhLkwA-_fV27" target="_blank" rel="nofollow noopener noreferrer">Workflow service on SAP Cloud Platform Cloud Foundry - Deep Dive!</A><BR />
<BR />
<A href="https://www.youtube.com/playlist?list=PLfctWmgNyOIeWt86gSTFJIuZnVUAwnoKh" target="_blank" rel="nofollow noopener noreferrer">SAP Approuter - Deep Dive!</A><BR />
<BR />
<A href="https://www.youtube.com/playlist?list=PLfctWmgNyOIekHhglpEH_WX5lXEWoEwMF" target="_blank" rel="nofollow noopener noreferrer">OAuth 2.0 on SAP Cloud Platform - Deep Dive!</A><BR />
<H2 id="toc-hId-346650402"><A name="other" target="_blank"></A>Other Content</H2><BR />
Beyond that, we have other content for you on the channel.<BR />
<BR />
<STRONG>Devtoberfest 2020</STRONG>: Perhaps most significantly and recently, there's the entire back catalogue of enablement content from the <A href="https://github.com/sap-samples/sap-devtoberfest-2020" target="_blank" rel="nofollow noopener noreferrer">Devtoberfest 2020 event</A>. This enablement content is also organised into playlists - one for each of the <A href="https://github.com/SAP-samples/sap-devtoberfest-2020/blob/master/topics/README.md" target="_blank" rel="nofollow noopener noreferrer">topics</A>:<BR />
<BR />
<A href="https://www.youtube.com/playlist?list=PL6RpkC85SLQC33__v6BFLDcV32uy5D3Rz" target="_blank" rel="nofollow noopener noreferrer">project "Kyma" - Devtoberfest Enablement Content</A><BR />
<BR />
<A href="https://www.youtube.com/playlist?list=PL6RpkC85SLQDmBzWkt2ZFE93QsZAnts-y" target="_blank" rel="nofollow noopener noreferrer">Cloud APIs - Devtoberfest Enablement Content</A><BR />
<BR />
<A href="https://www.youtube.com/playlist?list=PL6RpkC85SLQA8za7iX9FRzewU7Vs022dl" target="_blank" rel="nofollow noopener noreferrer">SAP HANA Multi-model - Devtoberfest</A><BR />
<BR />
<A href="https://www.youtube.com/playlist?list=PL6RpkC85SLQBFi4SK77b2y4EwlXMVG0XJ" target="_blank" rel="nofollow noopener noreferrer">SAP Business Application Studio for SAP Fiori Development - Devtoberfest Enablement</A><BR />
<BR />
<A href="https://www.youtube.com/playlist?list=PL6RpkC85SLQAoPZgVWPzIyTyHpJv00Zma" target="_blank" rel="nofollow noopener noreferrer">SAP Cloud Platform, ABAP Environment &amp; ABAP RESTful Application Programming Model - Devtoberfest Enablement Content</A><BR />
<BR />
<A href="https://www.youtube.com/playlist?list=PL6RpkC85SLQAutZYqIv9cuRdymlOmqM4K" target="_blank" rel="nofollow noopener noreferrer">SAP Cloud Platform Workflow - Devtoberfest Enablement Content</A><BR />
<BR />
There's more content, but I'll leave it here for now. Don't forget to subscribe, and have fun perusing and consuming the content. Let me know if I've missed anything! Also, what else would you like to see?
---
Programmer's Day Mission 2020
welcome-cornerblog-board
2020-09-08
https://community.sap.com/t5/welcome-corner-blog-posts/programmer-s-day-mission-2020/ba-p/13490101
2020-09-08-programmer-s-day-mission-2020
<EM>Learn about Programmer's Day and how you can take part in a fun conversation that will earn you a special mission badge here on the SAP Community.</EM><BR />
<BR />
<STRONG>Update Fri 11 Sep 06:20: The mission is live! Head over to the Coffee Corner entry <A href="https://answers.sap.com/articles/13140290/mission-whats-your-favourite-programming-language.html" target="_blank" rel="noopener noreferrer">Mission: What's your favourite programming language, and why?&nbsp;</A> now and add your comment.</STRONG><BR />
<BR />
Two hundred and fifty six. A nice round number. If you're a programmer, of course.&nbsp;256 is 2^8, or the next number after all the bits in a single byte have been filled, i.e. where 11111111 (255) flips over to 100000000 (256) in binary. A beautiful number.<BR />
<BR />
So it's fitting that we celebrate the <A href="https://en.wikipedia.org/wiki/Day_of_the_Programmer" target="_blank" rel="nofollow noopener noreferrer">Day of the Programmer</A> each year on the 256th day of the calendar year, which in 2020, a leap year, falls on Saturday 12 September. If you live in Russia, you'll probably get a day off, because it's recognised as a professional holiday there. But if not, you'll have to be content with a happy conversation about your favourite programming language, which we'll have during that weekend, over in the SAP Community Coffee Corner.<BR />
<BR />
As Marc Andreessen said, "software is eating the world". Some of you might subsequently point out that Jeff Atwood said that "any application that can be written in JavaScript, will eventually be written in JavaScript" (now known as Atwood's Law) - and I know that this will please some of you, and horrify others.<BR />
<BR />
But anyway, as software's role in our lives continues to expand, it's perhaps nice to stop and reflect on the the craft.<BR />
<BR />
Here's how to take part in the Programmer's Day Mission 2020 and earn yourself a cool badge.<BR />
<BR />
Between Fri 11 and Sun 13 Sep head over to the entry "<A href="https://answers.sap.com/articles/13140290/mission-whats-your-favourite-programming-language.html" target="_blank" rel="noopener noreferrer">Mission: What's your favourite programming language, and why?</A>" in the <A href="https://answers.sap.com/content/kbentry/list.html" target="_blank" rel="noopener noreferrer">Coffee Corner</A> of the SAP Community and add a comment to that entry, telling us what your favourite programming language is, and why.<BR />
<BR />
And that's it! Let us know, in the comments to that Coffee Corner entry, what your favourite programming language is, and give us a good reason why, and you'll be on the list to receive the Programmer's Day Mission badge. But take note - the window for adding your comment will be closed at the end of Sunday 13 September, whatever that means in your timezone.<BR />
<BR />
Good luck and have fun!<BR />
<BR />
&nbsp;<BR />
<BR />
&nbsp;<BR />
<BR />
&nbsp;
---
SAP NPM packages now on npmjs.org
application-developmentblog-board
2020-07-02
https://community.sap.com/t5/application-development-blog-posts/sap-npm-packages-now-on-npmjs-org/ba-p/13463459
2020-07-02-sap-npm-packages-now-on-npmjs-org
<EM>This post tells you what you need to know - and do - about the recent migration of SAP Node.js packages to the default registry at npmjs.org.</EM><BR />
<BR />
<span class="lia-unicode-emoji" title=":police_car_light:">ð¨</span>See the <A href="#updates" target="_blank" rel="nofollow noopener noreferrer">Updates</A> section for an important announcement.<BR />
<BR />
<STRONG>TL;DR</STRONG><BR />
<BR />
Since 2017 SAP has made Node.js packages available at an SAP-specific registry <A href="https://npm.sap.com" target="_blank" rel="noopener noreferrer">https://npm.sap.com</A>. Over the past few weeks the team has been busy migrating these packages to the default public registry <A href="https://npmjs.org" target="_blank" rel="nofollow noopener noreferrer">https://npmjs.org</A>.<BR />
<BR />
Moreover, updates to SAP packages will in future only be available from the default public registry, and the SAP-specific registry will be phased out.<BR />
<BR />
So now is the time to remove any NPM configuration you may have set to point to the SAP-specific registry for SAP packages.<BR />
<BR />
Do it like this:<BR />
<PRE class="language-c"><CODE>npm config delete @sap:registry</CODE></PRE><BR />
(If you're on Windows, you may need to put the <a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a>:registry part in double quotes).<BR />
<BR />
And you're done!<BR />
<BR />
<STRONG>Background</STRONG><BR />
<BR />
The default package manager for Node.js is the Node Package Manager (NPM). Node.js packages (also referred to as NPM packages) can be made available publicly in registries. The main, default registry is at <A href="https://npmjs.org" target="_blank" rel="nofollow noopener noreferrer">https://npmjs.org</A>.<BR />
<BR />
For organisational purposes, a package can belong to a <A href="https://docs.npmjs.com/using-npm/scope.html" target="_blank" rel="nofollow noopener noreferrer">scope</A> (think of it as similar to a namespace). The scope starts with an @ sign and is joined to the package name with a slash. For example, the package<BR />
<PRE class="language-c"><CODE>@sap/cds-dk</CODE></PRE><BR />
is in the <a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a> scope.<BR />
<BR />
Combine this scope idea with the fact that there can be more than one registry (that's why <A href="https://npmjs.org" target="_blank" rel="nofollow noopener noreferrer">https://npmjs.org</A> is called the "default" registry) and it means that it's possible to, for example, have packages belonging to a certain scope published to and available at a different registry.<BR />
<BR />
<STRONG>The (now retired) SAP NPM registry</STRONG><BR />
<BR />
This is the basis of what SAP did three years ago with the launching of the SAP NPM registry - see the <A href="https://blogs.sap.com/2017/05/16/sap-npm-registry-launched-making-the-lives-of-node.js-developers-easier/" target="_blank" rel="noopener noreferrer">post</A> from <SPAN class="mention-scrubbed">sven.kohlhaas</SPAN> back in 2017.<BR />
<BR />
On your system, NPM will exist mainly as the command <CODE>npm</CODE>, and when you ask it to install a package for you it will download the package from the registry associated with the specified scope.<BR />
<BR />
Here's an example (note that this is how it's worked up until now, for illustration purposes):<BR />
<PRE class="language-c"><CODE>npm install @sap/cds-dk</CODE></PRE><BR />
If there's no specific association between the <a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a> scope and the SAP NPM registry where the package was available, <CODE>npm</CODE>would assume and use the default registry at <A href="https://npmjs.org" target="_blank" rel="nofollow noopener noreferrer">https://npmjs.org</A>.<BR />
<BR />
So we'd set configuration for <CODE>npm</CODE> to tell it to use a specific registry for <a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a>-scoped packages, like this:<BR />
<PRE class="language-c"><CODE>npm config set @sap:registry=https://npm.sap.com</CODE></PRE><BR />
Now, with the recent migration of SAP packages to the main, default NPM registry at <A href="https://npmjs.org" target="_blank" rel="nofollow noopener noreferrer">https://npmjs.org</A>, while the <a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a> scoping of the packages remain, the configuration setting associating the <a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a> scope to the SAP-specific registry (<A href="https://npm.sap.com" target="_blank" rel="noopener noreferrer">https://npm.sap.com</A>) is no longer required.<BR />
<BR />
Not only that, but it's no longer recommended either, as updates to SAP packages will only be made available on the default NPM registry and the SAP-specific registry will eventually disappear (see the <A href="#updates" target="_blank" rel="nofollow noopener noreferrer">Updates</A> section).<BR />
<BR />
<STRONG>Understanding and making the change</STRONG><BR />
<BR />
You can examine your NPM configuration with <CODE>npm config</CODE>. Here's an example from my machine right now:<BR />
<PRE class="language-c"><CODE>â¶ npm config list<BR />
; cli configs<BR />
metrics-registry = "https://registry.npmjs.org/"<BR />
scope = ""<BR />
user-agent = "npm/6.14.4 node/v12.18.0 darwin x64"<BR />
<BR />
; userconfig /Users/i347491/.npmrc<BR />
@qmacro:registry = "https://npm.pkg.github.com"<BR />
@sap:registry = "https://npm.sap.com"<BR />
depth = 0<BR />
<BR />
; node bin location = /Users/i347491/.nvm/versions/node/v12.18.0/bin/node<BR />
; cwd = /Users/i347491<BR />
; HOME = /Users/i347491<BR />
; "npm config ls -l" to show all defaults.<BR />
<BR />
</CODE></PRE><BR />
The semicolon prefixed lines are comments, and the chunk of configuration in the middle is my user specific configuration (i.e. settings that I have made) which have been stored in an <CODE>.npmrc</CODE> file in my home directory.<BR />
<BR />
You can see two scope/registry settings. The first one is for my own <a href="https://community.sap.com/t5/user/viewprofilepage/user-id/53">@qmacro</a> scoped packages which are on GitHub (see the <A href="https://github.com/features/packages" target="_blank" rel="nofollow noopener noreferrer">GitHub packages feature</A> for more information on this).<BR />
<BR />
The second one is the current (and now unwanted) scope/registry association for SAP packages, there as a result of me running the <CODE>npm config set</CODE> command at some stage in the past. It's this association that needs to be removed (so that <CODE>npm</CODE> will use the default NPM registry for any <a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a> scoped packages).<BR />
<BR />
So let's do this together now:<BR />
<PRE class="language-c"><CODE>npm config delete @sap:registry</CODE></PRE><BR />
This will do exactly what we want, i.e. remove the configuration entry associating the <a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a> scope with the old (retired) SAP-specific registry.<BR />
<BR />
<STRONG>Checking that the change took effect</STRONG><BR />
<BR />
Now, all <CODE>npm</CODE> operations referring to <a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a> scoped packages will use the default <A href="https://npmjs.org" target="test_blank" rel="nofollow noopener noreferrer">https://npmjs.org</A> registry.<BR />
<BR />
How do you check this? Of course, you can first just re-run the <CODE>npm config list</CODE>command and check that the <a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a>:registry configuration line has gone.<BR />
<BR />
You can also check this in a more interesting way by asking for information on an <a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a> scoped package, and checking that the information comes from the default NPM registry implicitly.<BR />
<BR />
Here's an example that you can try: <CODE>npm info <a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a>/cds-dk</CODE><BR />
<BR />
This is what the output looks like on my machine right now:<BR />
<PRE class="language-c"><CODE>â¶ npm info @sap/cds-dk<BR />
<BR />
@sap/cds-dk@1.8.5 | See LICENSE file | deps: 10 | versions: 17<BR />
Command line client and development toolkit for the SAP Cloud Application Programming Model<BR />
<A href="https://cap.cloud.sap/" target="test_blank" rel="nofollow noopener noreferrer">https://cap.cloud.sap/</A><BR />
<BR />
keywords: cap, cds, cli<BR />
<BR />
bin: cds<BR />
<BR />
dist<BR />
.tarball: <A href="https://registry.npmjs.org/@sap/cds-dk/-/cds-dk-1.8.5.tgz" target="test_blank" rel="nofollow noopener noreferrer">https://registry.npmjs.org/@sap/cds-dk/-/cds-dk-1.8.5.tgz</A><BR />
.shasum: 37673e772df6670b4a021943ef904919385c1b76<BR />
.integrity: sha512-mqNy5hDg8M8YeFhF0gjfDVGxrUhrojcbRqUV6rWMocRm8ZKbifFBd6syG56R49NUaiei9lZfsdTX6acOP3DzNg==<BR />
.unpackedSize: 1.0 MB<BR />
<BR />
dependencies:<BR />
@sap/cds-foss: ^1.2.0           @sap/edm-converters: ^1.0.30    nodemon: ^2.0.2                 xml-js: ^1.6.11                 <BR />
@sap/cds-sidecar-client: ^1.1.3 express: ^4.17.1                passport: ^0.4.1                <BR />
@sap/cds: 3.34.x                mustache: ^4.0.1                sqlite3: 4.1.1                  <BR />
<BR />
maintainers:<BR />
- sap_extncrepos &lt;extncrepos@sap.com&gt;<BR />
- sapnaas &lt;Holger.Brox@sap.com&gt;<BR />
- sapnaasuser &lt;extncrepos@sap.com&gt;<BR />
<BR />
dist-tags:<BR />
latest: 1.8.5  <BR />
<BR />
published 2 weeks ago by sap_extncrepos &lt;extncrepos@sap.com&gt;</CODE></PRE><BR />
The details when you do this may look different as the versions, maintainers and dependencies change over time, but what you want to look for is the fully qualified domain name (FQDN) in the <CODE>tarball</CODE> URL:<BR />
<PRE class="language-c"><CODE><A href="https://registry.npmjs.org/@sap/cds-dk/-/cds-dk-1.8.5.tgz" target="test_blank" rel="nofollow noopener noreferrer">https://registry.npmjs.org/@sap/cds-dk/-/cds-dk-1.8.5.tgz</A></CODE></PRE><BR />
This confirms that it's the default registry that's in play here.<BR />
<BR />
<STRONG>For the curious</STRONG><BR />
<BR />
That's about it for this post, but here's a bit more information for the curious.<BR />
<BR />
In case you're wondering, the structure of the <CODE>npm</CODE> command set is quite flexible, designed to fit how you think.<BR />
<BR />
For example, with the <CODE>npm config set</CODE>command earlier, the <SPAN style="color: #222222;font-family: monospace"><SPAN style="font-size: 11.375px;background-color: #e9ebec">config</SPAN></SPAN> word could have been omitted (i.e. <CODE>npm set</CODE>works too).<BR />
<BR />
Some of you sharp-eyed readers will have noticed this comment in my configuration output:<BR />
<PRE class="language-c"><CODE>; "npm config ls -l" to show all defaults.</CODE></PRE><BR />
In other words, instead of <CODE>npm config list</CODE> you can use <CODE>npm config ls</CODE>. Likewise, I could have used <CODE>npm config rm</CODE> instead of <CODE>npm config delete</CODE>.<BR />
<BR />
And what about this configuration setting (which has nothing to do with package scopes or registries)?<BR />
<PRE class="language-c"><CODE>depth = 0</CODE></PRE><BR />
It just tells <CODE>npm</CODE> that when it's showing me information on packages and their dependencies, don't display any levels of package hierarchy in the output, as I usually just want to see the top level package information.<BR />
<BR />
For example, I can easily see which packages I've installed globally, like this:<BR />
<PRE class="language-c"><CODE>â¶ npm list --global<BR />
/Users/i347491/.nvm/versions/node/v12.18.0/lib<BR />
âââ @sap/cds-dk@1.8.5<BR />
âââ katacoda-cli@0.0.20<BR />
âââ mbt@1.0.14<BR />
âââ npm@6.14.4<BR />
<BR />
</CODE></PRE><BR />
Without this depth setting in my configuration, the output would be a complex hierarchy that is detailed but not what I'm usually looking for:<BR />
<PRE class="language-c"><CODE>â¶ npm list --global                                                                                                                  <BR />
/Users/i347491/.nvm/versions/node/v12.18.0/lib                    <BR />
âââ¬ @sap/cds-dk@1.8.5                                                                                                                <BR />
â âââ¬ @sap/cds@3.34.2                                             <BR />
â â âââ¬ @sap/cds-compiler@1.26.2                                  <BR />
â â â âââ antlr4@4.7.1                                            <BR />
â â â âââ¬ resolve@1.8.1                                           <BR />
â â â â âââ path-parse@1.0.6                                                                                                         <BR />
â â â âââ sax@1.2.4 deduped                                       <BR />
â â âââ @sap/cds-foss@1.2.0 deduped                                                                                                  <BR />
â â âââ @sap/cds-reflect@2.11.0                                                                                                      <BR />
â â âââ¬ @sap/cds-runtime@1.2.2                                                                                                       <BR />
â â   âââ¬ @sap-cloud-sdk/core@1.18.1                              <BR />
â â   â âââ¬ @sap-cloud-sdk/analytics@1.19.0                       <BR />
â â   â â âââ @sap-cloud-sdk/util@1.19.0 deduped                  <BR />
â â   â â âââ axios@0.19.2 deduped                                                                                                   <BR />
â â   â âââ¬ @sap-cloud-sdk/util@1.19.0                            <BR />
â â   â â âââ chalk@3.0.0 deduped                                 <BR />
â â   â â âââ rambda@5.1.1   <BR />
                          <BR />
[... and another 2600+ lines! ...]</CODE></PRE><BR />
(It's rather pleasing to notice the use of the <A href="https://www.npmjs.com/package/rambda" target="_blank" rel="nofollow noopener noreferrer">Rambda</A> package here in the SAP Cloud SDK - but that's a story for another time :-))<BR />
<BR />
<A href="https://hitchhikers.fandom.com/wiki/Share_and_Enjoy" target="_blank" rel="nofollow noopener noreferrer">Share &amp; enjoy!</A><BR />
<BR />
<A name="updates" target="_blank"></A><STRONG>Updates</STRONG><BR />
<BR />
21 Oct 2021 The official retirement date for npm.sap.com is 28 Feb 2022. See <A href="https://launchpad.support.sap.com/#/notes/3109201" target="_blank" rel="noopener noreferrer">Note 3109201</A> for details.
---
SAP Community Coding Challenge 2 - Winner
welcome-cornerblog-board
2020-06-17
https://community.sap.com/t5/welcome-corner-blog-posts/sap-community-coding-challenge-2-winner/ba-p/13437487
2020-06-17-sap-community-coding-challenge-2-winner
The second SAP Community Coding Challenge is over. Here's a summary of how this has played out:<BR />
<TABLE style="border-collapse: collapse;width: 100%" border="1"><BR />
<TBODY><BR />
<TR style="height: 24px"><BR />
<TD style="width: 22.317%;height: 24px">27 Apr 2020</TD><BR />
<TD style="width: 77.683%;height: 24px">Initial challenge description<BR />
<A href="https://blogs.sap.com/2020/04/27/sap-community-coding-challenge-nr.2/" target="_blank" rel="noopener noreferrer">SAP Community Coding Challenge Nr.2</A></TD><BR />
</TR><BR />
<TR style="height: 24px"><BR />
<TD style="width: 22.317%;height: 24px">26 May 2020</TD><BR />
<TD style="width: 77.683%;height: 24px">Post-deadline update<BR />
<A href="https://blogs.sap.com/2020/05/26/sap-community-coding-challenge-2-update/" target="_blank" rel="noopener noreferrer">SAP Community Coding Challenge 2 - Update</A></TD><BR />
</TR><BR />
<TR style="height: 24px"><BR />
<TD style="width: 22.317%;height: 24px">01 Jun 2020</TD><BR />
<TD style="width: 77.683%;height: 24px">Live stream looking at some of the solutions<BR />
<A href="https://www.youtube.com/watch?v=RKQTWR4-2PE" target="_blank" rel="nofollow noopener noreferrer">SAP Community Coding Challenge Nr.2 - Solutions</A></TD><BR />
</TR><BR />
<TR style="height: 11px"><BR />
<TD style="width: 22.317%;height: 11px">08 Jun 2020</TD><BR />
<TD style="width: 77.683%;height: 11px">A list of all the successful contestants and their submissions<BR />
<A href="https://blogs.sap.com/2020/06/08/sap-community-coding-challenge-2-contestants/" target="_blank" rel="noopener noreferrer">SAP Community Coding Challenge 2 - Contestants</A></TD><BR />
</TR><BR />
<TR><BR />
<TD style="width: 22.317%">10 Jun 2020</TD><BR />
<TD style="width: 77.683%">The four finalists, ready for voting<BR />
<A href="https://answers.sap.com/questions/13068112/sap-community-coding-challenge-2-finalists.html?childToView=13070032#comment-13070032" target="_blank" rel="noopener noreferrer">SAP Community Coding Challenge 2 - Finalists</A></TD><BR />
</TR><BR />
<TR><BR />
<TD style="width: 22.317%">17 Jun 2020</TD><BR />
<TD style="width: 77.683%">This winner announcement<BR />
<A href="https://blogs.sap.com/2020/06/17/sap-community/" target="_blank" rel="noopener noreferrer">SAP Community Coding Challenge 2 - Winner</A></TD><BR />
</TR><BR />
</TBODY><BR />
</TABLE><BR />
Well done to everyone who took part, we hope you had a lot of fun and learned something about JS (and about the Collatz Conjecture) along the way! To everyone who submitted successful solutions - great work, thank you!<BR />
<BR />
And of course, much kudos to the finalists <SPAN class="mention-scrubbed">huseyin.dereli</SPAN>, <SPAN class="mention-scrubbed">christian.drumm</SPAN>, <SPAN class="mention-scrubbed">alexander_frank</SPAN> and <SPAN class="mention-scrubbed">maheshkumar.palavalli</SPAN>.<BR />
<BR />
You voted, and picked a winner - congratulations Huseyin, your detailed <A href="https://sccc2.glitch.me/" target="_blank" rel="nofollow noopener noreferrer">submission</A> tied together with a UI5 web components front end really caught our imagination.<BR />
<BR />
<IMG src="https://avatars.services.sap.com/images/huseyin.dereli.png" alt="Profile picture of huseyin.dereli" width="160" height="160" /><BR />
<BR />
<SPAN class="mention-scrubbed">huseyin.dereli</SPAN> wins the coveted <A href="https://en.wikipedia.org/wiki/Marvel_No-Prize" target="_blank" rel="nofollow noopener noreferrer">no-prize</A> and of course the unending adulation and admiration of the community of fellow developers.<BR />
<BR />
We'll be having another of these coding challenges in the SAP Community soon, so watch this space!
---
SAP Community Coding Challenge 2 - Finalists
application-developmentforum-board
2020-06-10
https://community.sap.com/t5/application-development-discussions/sap-community-coding-challenge-2-finalists/td-p/12130277
2020-06-10-sap-community-coding-challenge-2-finalists
<P>This is the voting thread for the SAP Community Coding Challenge 2. For more information, please see the following material:</P>
  <P>- <A href="https://blogs.sap.com/2020/04/27/sap-community-coding-challenge-nr.2/" rel="noopener noreferrer">SAP Community Coding Challenge Nr.2</A> - the challenge description</P>
  <P>- <A href="https://blogs.sap.com/2020/05/26/sap-community-coding-challenge-2-update/" rel="noopener noreferrer">SAP Community Coding Challenge 2 â Update</A> - an update following the submission deadline</P>
  <P>- <A href="https://www.youtube.com/watch?v=RKQTWR4-2PE" rel="nofollow noopener noreferrer">SAP Community Coding Challenge Nr.2 - Solutions</A> - the recording of a live stream looking at some of the submitted solutions</P>
  <P>- <A href="https://blogs.sap.com/2020/06/08/sap-community-coding-challenge-2-contestants/" rel="noopener noreferrer">SAP Community Coding Challenge 2 â Contestants</A> - a list of the successful contestants</P>
  <P>There are four finalists. In this question thread you will see four answers, one for each finalist. In each of these four answers you will see:</P>
  <P>- a link to the finalist's profile</P>
  <P>- a link to the specific solution submitted (check out this link to see the solution)</P>
  <P>- one observation (from all those that we made on each and every submission)</P>
  <P>Note that it was not easy picking a short list of finalists - there were so many absolutely great submissions. Well done to you all!</P>
  <P><STRONG> Use the answer voting mechanism to choose the one solution you believe should be the overall winner.</STRONG> And, as before, please remember that this is all for fun and education. We are all winners here because of the great knowledge sharing!</P>
---
SAP Community Coding Challenge 2 - Contestants
welcome-cornerblog-board
2020-06-08
https://community.sap.com/t5/welcome-corner-blog-posts/sap-community-coding-challenge-2-contestants/ba-p/13453992
2020-06-08-sap-community-coding-challenge-2-contestants
<EM>Here's a list of the SAP Community Coding Challenge 2 contestants who were successful in their submissions. Congratulations to them all!&nbsp;</EM><BR />
<BR />
Following the <A href="https://blogs.sap.com/2020/05/26/sap-community-coding-challenge-2-update/" target="_blank" rel="noopener noreferrer">update blog post</A> and the live stream last week (recording <A href="https://youtu.be/RKQTWR4-2PE" target="_blank" rel="nofollow noopener noreferrer">here</A>)&nbsp;I thought it was time for a main list of successful contestants.<BR />
<BR />
The current SAP Community Coding Challenge has seen a wonderful array of submissions, and for that we thank you all. Over the course of the submission period we received 79 in total, with a success rate (i.e. where the submission produced the correct answer) was over 90%, which is great.<BR />
<BR />
<STRONG>Styles</STRONG><BR />
<BR />
We saw all kinds of styles, from beginner JavaScript coders to advanced, some opting for a class based approach, others for a more functional one. With a language as flexible as JavaScript it was clear that we were going to see folks' personalities in places too ... from the use of whitespace, to how variables and functions were named and capitalised, to how commenting was used to good effect (or, in some cases, how no comments were used at all).<BR />
<BR />
<STRONG>Speed</STRONG><BR />
<BR />
Another factor that came up was how performant the submissions were. Although speed was not a factor explicitly stated in the <A href="https://blogs.sap.com/2020/04/27/sap-community-coding-challenge-nr.2/" target="_blank" rel="noopener noreferrer">original post</A>, it was clear that many of you enjoyed making your submissions run as fast as possible, and so we saw a number of common optimisations. The most common was a cache of the sequence lengths for a given starting term, so that when working through a sequence, if the term arrived at was one already seen, that sequence could be short-circuited there and then by adding the length thus far to the length for that term.<BR />
<BR />
There were also more subtle optimisations, such as the use of the bitwise operator to check for an odd number, which did give a very slight but ultimately perceptible speed advantage at the scale of the problem. Commonly, checking for an odd (or even) number is done using modulo arithmetic, like this:<BR />
<PRE class="language-javascript"><CODE>isOdd = x =&gt; x % 2 !== 0</CODE></PRE><BR />
(i.e. x is odd if the remainder of x / 2 is not zero)<BR />
<BR />
But there's the bitwise AND operator that was used by some:<BR />
<PRE class="language-javascript"><CODE>isOdd = x =&gt; x &amp; 1</CODE></PRE><BR />
(i.e. x is odd if x, when AND-ed with 1 (binary 00000001) gives a non-zero value (i.e. 1))<BR />
<BR />
<STRONG>Use of libraries</STRONG><BR />
<BR />
For the most part, the submissions were independent of any external (3rd party) library. JavaScript, esp. in the Node.js flavour, has a cornucopia of libraries that can be used to good effect (although <A href="https://qz.com/646467/how-one-programmer-broke-the-internet-by-deleting-a-tiny-piece-of-code/" target="_blank" rel="nofollow noopener noreferrer">sometimes</A> this is not so much the case, but that's a story for another time!)<BR />
<BR />
We did see a small amount of library use, for example the <A href="https://mathjs.org/" target="_blank" rel="nofollow noopener noreferrer">mathjs</A> library (which offers a max function, amongst other things), <A href="https://www.npmjs.com/package/yosay" target="_blank" rel="nofollow noopener noreferrer">yosay</A>, for making output a little more fun, and <A href="https://ramdajs.com/" target="_blank" rel="nofollow noopener noreferrer">Ramda</A>, a functional programming library offering a rich set of functions. Indeed, we had one or two submissions that were "Ramda-oriented", which delighted me no end.<BR />
<BR />
<STRONG>Lack of range</STRONG><BR />
<BR />
One thing that was clear, and common, was that many of you came across the issue that there's no native '<A href="https://www.geeksforgeeks.org/python-range-function/" target="_blank" rel="nofollow noopener noreferrer">range</A>' function in JavaScript - to generate a range of numbers in a simple way. Of course, there's the more procedural 'for loop' approach, but for those wanting to level up and move away from telling the machine how to do something it should already know, you came up with a lovely, err, array of approaches. See if you can spot them all in the submissions.<BR />
<BR />
<B>Out of bounds</B><BR />
<BR />
There were a couple of submission that didn't quite conform to the submission <A href="https://blogs.sap.com/2020/04/27/sap-community-coding-challenge-nr.2/#requirements" target="_blank" rel="noopener noreferrer">requirements</A> but we thought they were fun and creative nonetheless (and accompanied a proper submission, which made things OK :-)).<BR />
<BR />
There were also some submissions that sadly didn't produce the correct result; the most common issue was a focus on the initial example in the <A href="https://blogs.sap.com/2020/04/27/sap-community-coding-challenge-nr.2/#problem" target="_blank" rel="noopener noreferrer">problem statement</A>, rather than the question itself.<BR />
<BR />
<STRONG>The submissions</STRONG><BR />
<BR />
So without further ado, here is the complete list (in no particular order) of successful submissions. Take a look at your fellow community members' submissions and see how they coded their solutions - I for one really enjoyed studying all of them. There are some really thoughtful and educational pieces in this collection. Thank you all.<BR />
<TABLE style="width: 603px" width="525"><BR />
<TBODY><BR />
<TR style="height: 13px"><BR />
<TD style="width: 177px;height: 13px" width="142"><STRONG>Contestant</STRONG></TD><BR />
<TD style="width: 445px;height: 13px" width="383"><STRONG>Submission</STRONG></TD><BR />
</TR><BR />
<TR style="height: 13px"><BR />
<TD style="width: 177px;height: 13px"><SPAN class="mention-scrubbed">alexander_frank</SPAN></TD><BR />
<TD style="width: 445px;height: 13px"><A href="https://repl.it/@AlexMFrank/ccc2" target="_blank" rel="nofollow noopener noreferrer">https://repl.it/@AlexMFrank/ccc2</A> (see also <A href="https://answers.sap.com/articles/13036691/ccc2-my-runtime-optimized-and-hopefully-readable-s.html)" target="_blank" rel="noopener noreferrer">https://answers.sap.com/articles/13036691/ccc2-my-runtime-optimized-and-hopefully-readable-s.html)</A></TD><BR />
</TR><BR />
<TR style="height: 13px"><BR />
<TD style="width: 177px;height: 13px"><SPAN class="mention-scrubbed">heikobernhart</SPAN></TD><BR />
<TD style="width: 445px;height: 13px"><A href="https://repl.it/repls/ScornfulMicroWebpage" target="_blank" rel="nofollow noopener noreferrer">https://repl.it/repls/ScornfulMicroWebpage</A></TD><BR />
</TR><BR />
<TR style="height: 13px"><BR />
<TD style="width: 177px;height: 13px"><SPAN class="mention-scrubbed">olivierh</SPAN></TD><BR />
<TD style="width: 445px;height: 13px"><A href="https://repl.it/@djgalak/SAPCommunityCodeChallenge02" target="_blank" rel="nofollow noopener noreferrer">https://repl.it/@djgalak/SAPCommunityCodeChallenge02</A></TD><BR />
</TR><BR />
<TR style="height: 13px"><BR />
<TD style="width: 177px;height: 13px"><SPAN class="mention-scrubbed">altheis</SPAN></TD><BR />
<TD style="width: 445px;height: 13px"><A href="https://jsfiddle.net/3vwt4gzu/10/" target="_blank" rel="nofollow noopener noreferrer">https://jsfiddle.net/3vwt4gzu/10/</A></TD><BR />
</TR><BR />
<TR style="height: 13px"><BR />
<TD style="width: 177px;height: 13px"><SPAN class="mention-scrubbed">antonio_vaz</SPAN></TD><BR />
<TD style="width: 445px;height: 13px"><A href="https://repl.it/repls/GrowlingUniqueReality" target="_blank" rel="nofollow noopener noreferrer">https://repl.it/repls/GrowlingUniqueReality</A></TD><BR />
</TR><BR />
<TR style="height: 13px"><BR />
<TD style="width: 177px;height: 13px"><SPAN class="mention-scrubbed">deepakt5</SPAN></TD><BR />
<TD style="width: 445px;height: 13px"><A href="https://jsfiddle.net/Gunner708/qds20ern/" target="_blank" rel="nofollow noopener noreferrer">https://jsfiddle.net/Gunner708/qds20ern/</A></TD><BR />
</TR><BR />
<TR style="height: 13px"><BR />
<TD style="width: 177px;height: 13px"><SPAN class="mention-scrubbed">juzerali</SPAN></TD><BR />
<TD style="width: 445px;height: 13px"><A href="https://jsfiddle.net/j9ktxmws/" target="_blank" rel="nofollow noopener noreferrer">https://jsfiddle.net/j9ktxmws/</A></TD><BR />
</TR><BR />
<TR style="height: 13px"><BR />
<TD style="width: 177px;height: 13px"><SPAN class="mention-scrubbed">markjans</SPAN></TD><BR />
<TD style="width: 445px;height: 13px"><A href="https://jsfiddle.net/hwoy0dzk/" target="_blank" rel="nofollow noopener noreferrer">https://jsfiddle.net/hwoy0dzk/</A></TD><BR />
</TR><BR />
<TR style="height: 13px"><BR />
<TD style="width: 177px;height: 13px"><SPAN class="mention-scrubbed">rikus.vanvuuren2</SPAN></TD><BR />
<TD style="width: 445px;height: 13px"><A href="https://repl.it/@rikusv/LongestCollatzSequence" target="_blank" rel="nofollow noopener noreferrer">https://repl.it/@rikusv/LongestCollatzSequence</A></TD><BR />
</TR><BR />
<TR style="height: 13px"><BR />
<TD style="width: 177px;height: 13px"><SPAN class="mention-scrubbed">sergei.haller.u-niq</SPAN></TD><BR />
<TD style="width: 445px;height: 13px"><A href="https://repl.it/@bistrOmath/CCC2-Compute-Manually" target="_blank" rel="nofollow noopener noreferrer">https://repl.it/@bistrOmath/CCC2-Compute-Manually</A> (see also <A href="https://answers.sap.com/articles/13035066/ccc2-two-completely-different-approaches-for-solvi.html" target="_blank" rel="noopener noreferrer">https://answers.sap.com/articles/13035066/ccc2-two-completely-different-approaches-for-solvi.html</A>)</TD><BR />
</TR><BR />
<TR style="height: 13px"><BR />
<TD style="width: 177px;height: 13px"><SPAN class="mention-scrubbed">christian.drumm</SPAN></TD><BR />
<TD style="width: 445px;height: 13px"><A href="https://repl.it/@ceedee666/SAP-Community-Code-Challange-2-1" target="_blank" rel="nofollow noopener noreferrer">https://repl.it/@ceedee666/SAP-Community-Code-Challange-2-1</A></TD><BR />
</TR><BR />
<TR style="height: 13px"><BR />
<TD style="width: 177px;height: 13px"><SPAN class="mention-scrubbed">ffad982802c345bdb6e7377a267f27ce</SPAN></TD><BR />
<TD style="width: 445px;height: 13px"><A href="https://answers.sap.com/articles/13035919/ccc2-solving-the-longest-collatz-sequence-problem.html" target="_blank" rel="noopener noreferrer">https://answers.sap.com/articles/13035919/ccc2-solving-the-longest-collatz-sequence-problem.html</A> (using SAP Data Intelligence)</TD><BR />
</TR><BR />
<TR style="height: 13px"><BR />
<TD style="width: 177px;height: 13px"><SPAN class="mention-scrubbed">8d8214c7f9734f45be69f95cc0d5aeee</SPAN></TD><BR />
<TD style="width: 445px;height: 13px"><A href="https://jsfiddle.net/k5uomf1e/" target="_blank" rel="nofollow noopener noreferrer">https://jsfiddle.net/k5uomf1e/</A></TD><BR />
</TR><BR />
<TR style="height: 13px"><BR />
<TD style="width: 177px;height: 13px"><SPAN class="mention-scrubbed">graczpaw</SPAN></TD><BR />
<TD style="width: 445px;height: 13px"><A href="https://runkit.com/smentek/sap-community-coding-challenge-nr.2" target="_blank" rel="nofollow noopener noreferrer">https://runkit.com/smentek/sap-community-coding-challenge-nr.2</A></TD><BR />
</TR><BR />
<TR style="height: 13px"><BR />
<TD style="width: 177px;height: 13px"><SPAN class="mention-scrubbed">mbartsch71ch</SPAN></TD><BR />
<TD style="width: 445px;height: 13px"><A href="https://repl.it/@mbartsch71/ACC2" target="_blank" rel="nofollow noopener noreferrer">https://repl.it/@mbartsch71/ACC2</A></TD><BR />
</TR><BR />
<TR style="height: 13px"><BR />
<TD style="width: 177px;height: 13px"><SPAN class="mention-scrubbed">moritz_</SPAN></TD><BR />
<TD style="width: 445px;height: 13px"><A href="https://repl.it/repls/FlawedEllipticalPixels" target="_blank" rel="nofollow noopener noreferrer">https://repl.it/repls/FlawedEllipticalPixels</A> (see also <A href="https://github.com/MoritzLaut/SAP-Community-Coding-Challenge" target="_blank" rel="nofollow noopener noreferrer">https://github.com/MoritzLaut/SAP-Community-Coding-Challenge</A>)</TD><BR />
</TR><BR />
<TR style="height: 13px"><BR />
<TD style="width: 177px;height: 13px"><SPAN class="mention-scrubbed">santoskleber</SPAN></TD><BR />
<TD style="width: 445px;height: 13px"><A href="https://jsfiddle.net/cyk30nx7/1/" target="_blank" rel="nofollow noopener noreferrer">https://jsfiddle.net/cyk30nx7/1/</A></TD><BR />
</TR><BR />
<TR style="height: 13px"><BR />
<TD style="width: 177px;height: 13px"><SPAN class="mention-scrubbed">christian.drumm</SPAN></TD><BR />
<TD style="width: 445px;height: 13px"><A href="https://repl.it/@ceedee666/SAP-Community-Code-Challange-2-2" target="_blank" rel="nofollow noopener noreferrer">https://repl.it/@ceedee666/SAP-Community-Code-Challange-2-2</A></TD><BR />
</TR><BR />
<TR style="height: 13px"><BR />
<TD style="width: 177px;height: 13px"><SPAN class="mention-scrubbed">christian.drumm</SPAN></TD><BR />
<TD style="width: 445px;height: 13px"><A href="https://repl.it/@ceedee666/SAP-Community-Code-Challange-2-3" target="_blank" rel="nofollow noopener noreferrer">https://repl.it/@ceedee666/SAP-Community-Code-Challange-2-3</A></TD><BR />
</TR><BR />
<TR style="height: 13px"><BR />
<TD style="width: 177px;height: 13px"><SPAN class="mention-scrubbed">deepakt5</SPAN></TD><BR />
<TD style="width: 445px;height: 13px"><A href="https://answers.sap.com/articles/13038623/ccc2-my-approach-for-challenge-no-2-as-a-ui5-devel.html" target="_blank" rel="noopener noreferrer">https://answers.sap.com/articles/13038623/ccc2-my-approach-for-challenge-no-2-as-a-ui5-devel.html</A></TD><BR />
</TR><BR />
<TR style="height: 27px"><BR />
<TD style="width: 177px;height: 27px"><SPAN class="mention-scrubbed">siva.pabbaraju</SPAN></TD><BR />
<TD style="width: 445px;height: 27px"><A href="https://plnkr.co/plunk/soCuCWNdD8lZLRzm" target="_blank" rel="nofollow noopener noreferrer">https://plnkr.co/plunk/soCuCWNdD8lZLRzm</A></TD><BR />
</TR><BR />
<TR style="height: 13px"><BR />
<TD style="width: 177px;height: 13px"><SPAN class="mention-scrubbed">vinay.s6</SPAN></TD><BR />
<TD style="width: 445px;height: 13px"><A href="https://repl.it/@vinays66/Challenge2Collatz" target="_blank" rel="nofollow noopener noreferrer">https://repl.it/@vinays66/Challenge2Collatz</A></TD><BR />
</TR><BR />
<TR style="height: 13px"><BR />
<TD style="width: 177px;height: 13px"><SPAN class="mention-scrubbed">deepakt5</SPAN></TD><BR />
<TD style="width: 445px;height: 13px"><A href="https://jsfiddle.net/Gunner708/5aL8nexd/" target="_blank" rel="nofollow noopener noreferrer">https://jsfiddle.net/Gunner708/5aL8nexd/</A></TD><BR />
</TR><BR />
<TR style="height: 13px"><BR />
<TD style="width: 177px;height: 13px"><SPAN class="mention-scrubbed">7a519509aed84a2c9e6f627841825b5a</SPAN></TD><BR />
<TD style="width: 445px;height: 13px"><A href="https://repl.it/repls/TemptingInstructiveForce" target="_blank" rel="nofollow noopener noreferrer">https://repl.it/repls/TemptingInstructiveForce</A></TD><BR />
</TR><BR />
<TR style="height: 13px"><BR />
<TD style="width: 177px;height: 13px"><SPAN class="mention-scrubbed">alessandro.spadoni</SPAN></TD><BR />
<TD style="width: 445px;height: 13px"><A href="https://repl.it/@AlessandroSpado/SAPCommunityChallenge2" target="_blank" rel="nofollow noopener noreferrer">https://repl.it/@AlessandroSpado/SAPCommunityChallenge2</A></TD><BR />
</TR><BR />
<TR style="height: 13px"><BR />
<TD style="width: 177px;height: 13px"><SPAN class="mention-scrubbed">gaurav.chaudhary4</SPAN></TD><BR />
<TD style="width: 445px;height: 13px"><A href="https://codepen.io/zgaur/pen/YzyEVqQ" target="_blank" rel="nofollow noopener noreferrer">https://codepen.io/zgaur/pen/YzyEVqQ</A></TD><BR />
</TR><BR />
<TR style="height: 13px"><BR />
<TD style="width: 177px;height: 13px"><SPAN class="mention-scrubbed">jyothiraditya.k</SPAN></TD><BR />
<TD style="width: 445px;height: 13px"><A href="https://repl.it/@kjyothiraditya/AwkwardZealousCodeview" target="_blank" rel="nofollow noopener noreferrer">https://repl.it/@kjyothiraditya/AwkwardZealousCodeview</A></TD><BR />
</TR><BR />
<TR style="height: 13px"><BR />
<TD style="width: 177px;height: 13px"><SPAN class="mention-scrubbed">vinita.kasliwal</SPAN></TD><BR />
<TD style="width: 445px;height: 13px"><A href="https://jsfiddle.net/j901qpdm/" target="_blank" rel="nofollow noopener noreferrer">https://jsfiddle.net/j901qpdm/</A></TD><BR />
</TR><BR />
<TR style="height: 13px"><BR />
<TD style="width: 177px;height: 13px"><SPAN class="mention-scrubbed">sumit.kundu2</SPAN></TD><BR />
<TD style="width: 445px;height: 13px"><A href="https://repl.it/@SumitKundu/Collatz" target="_blank" rel="nofollow noopener noreferrer">https://repl.it/@SumitKundu/Collatz</A></TD><BR />
</TR><BR />
<TR style="height: 13px"><BR />
<TD style="width: 177px;height: 13px"><SPAN class="mention-scrubbed">31a8856c1f6f4bcfa7f3d890a0b88fd2</SPAN></TD><BR />
<TD style="width: 445px;height: 13px"><A href="https://repl.it/@D023604/SiennaWateryProspect" target="_blank" rel="nofollow noopener noreferrer">https://repl.it/@D023604/SiennaWateryProspect</A></TD><BR />
</TR><BR />
<TR style="height: 13px"><BR />
<TD style="width: 177px;height: 13px"><SPAN class="mention-scrubbed">jcsnova</SPAN></TD><BR />
<TD style="width: 445px;height: 13px"><A href="https://jsfiddle.net/41toLzu9/" target="_blank" rel="nofollow noopener noreferrer">https://jsfiddle.net/41toLzu9/</A></TD><BR />
</TR><BR />
<TR style="height: 13px"><BR />
<TD style="width: 177px;height: 13px"><SPAN class="mention-scrubbed">carlos.lpezvzquez</SPAN></TD><BR />
<TD style="width: 445px;height: 13px"><A href="https://jsfiddle.net/Lpw614aq/18/" target="_blank" rel="nofollow noopener noreferrer">https://jsfiddle.net/Lpw614aq/18/</A></TD><BR />
</TR><BR />
<TR style="height: 13px"><BR />
<TD style="width: 177px;height: 13px"><SPAN class="mention-scrubbed">raulruizgomez</SPAN></TD><BR />
<TD style="width: 445px;height: 13px"><A href="https://repl.it/@raulruiz4/Challenge-Version3" target="_blank" rel="nofollow noopener noreferrer">https://repl.it/@raulruiz4/Challenge-Version3</A></TD><BR />
</TR><BR />
<TR style="height: 13px"><BR />
<TD style="width: 177px;height: 13px"><SPAN class="mention-scrubbed">huseyin.dereli</SPAN></TD><BR />
<TD style="width: 445px;height: 13px"><A href="https://sccc2.glitch.me/" target="_blank" rel="nofollow noopener noreferrer">https://sccc2.glitch.me/</A></TD><BR />
</TR><BR />
<TR style="height: 13px"><BR />
<TD style="width: 177px;height: 13px"><SPAN class="mention-scrubbed">raulruizgomez</SPAN></TD><BR />
<TD style="width: 445px;height: 13px"><A href="https://repl.it/@raulruiz4/Challenge-Version5" target="_blank" rel="nofollow noopener noreferrer">https://repl.it/@raulruiz4/Challenge-Version5</A></TD><BR />
</TR><BR />
<TR style="height: 13px"><BR />
<TD style="width: 177px;height: 13px"><SPAN class="mention-scrubbed">ajitkpanda</SPAN></TD><BR />
<TD style="width: 445px;height: 13px"><A href="https://jsfiddle.net/Ajit_Kumar_Panda/aetuw5L0/6/" target="_blank" rel="nofollow noopener noreferrer">https://jsfiddle.net/Ajit_Kumar_Panda/aetuw5L0/6/</A> (see also <A href="https://answers.sap.com/articles/13043696/ccc2-project-euler14-longest-collatz-sequence-solu.html" target="_blank" rel="noopener noreferrer">https://answers.sap.com/articles/13043696/ccc2-project-euler14-longest-collatz-sequence-solu.html</A>)</TD><BR />
</TR><BR />
<TR style="height: 13px"><BR />
<TD style="width: 177px;height: 13px"><SPAN class="mention-scrubbed">jaime.rolo</SPAN></TD><BR />
<TD style="width: 445px;height: 13px"><A href="https://jsfiddle.net/rj4q2ude/" target="_blank" rel="nofollow noopener noreferrer">https://jsfiddle.net/rj4q2ude/</A></TD><BR />
</TR><BR />
<TR style="height: 13px"><BR />
<TD style="width: 177px;height: 13px"><SPAN class="mention-scrubbed">pjl</SPAN></TD><BR />
<TD style="width: 445px;height: 13px"><A href="https://jsfiddle.net/hapejot/5etnfczs/" target="_blank" rel="nofollow noopener noreferrer">https://jsfiddle.net/hapejot/5etnfczs/</A></TD><BR />
</TR><BR />
<TR style="height: 27px"><BR />
<TD style="width: 177px;height: 27px"><SPAN class="mention-scrubbed">mail2guptar51</SPAN></TD><BR />
<TD style="width: 445px;height: 27px"><A href="https://answers.sap.com/articles/13047125/ccc2-longest-collatz-euler-14-solution-using-recur.html" target="_blank" rel="noopener noreferrer">https://answers.sap.com/articles/13047125/ccc2-longest-collatz-euler-14-solution-using-recur.html</A></TD><BR />
</TR><BR />
<TR style="height: 13px"><BR />
<TD style="width: 177px;height: 13px"><SPAN class="mention-scrubbed">michael.zwick1</SPAN></TD><BR />
<TD style="width: 445px;height: 13px"><A href="https://jsfiddle.net/m2rt1d4e/" target="_blank" rel="nofollow noopener noreferrer">https://jsfiddle.net/m2rt1d4e/</A></TD><BR />
</TR><BR />
<TR style="height: 13px"><BR />
<TD style="width: 177px;height: 13px"><SPAN class="mention-scrubbed">r.rodrigues</SPAN></TD><BR />
<TD style="width: 445px;height: 13px"><A href="https://answers.sap.com/articles/13045764/ccc2-longest-collatz-sequence-problem.html" target="_blank" rel="noopener noreferrer">https://answers.sap.com/articles/13045764/ccc2-longest-collatz-sequence-problem.html</A></TD><BR />
</TR><BR />
<TR style="height: 13px"><BR />
<TD style="width: 177px;height: 13px"><SPAN class="mention-scrubbed">thalesvb</SPAN></TD><BR />
<TD style="width: 445px;height: 13px"><A href="https://repl.it/@thalesvb/Collatz-Functional" target="_blank" rel="nofollow noopener noreferrer">https://repl.it/@thalesvb/Collatz-Functional</A></TD><BR />
</TR><BR />
<TR style="height: 13px"><BR />
<TD style="width: 177px;height: 13px"><SPAN class="mention-scrubbed">thalesvb</SPAN></TD><BR />
<TD style="width: 445px;height: 13px"><A href="https://repl.it/@thalesvb/Collatz-MultiImpl" target="_blank" rel="nofollow noopener noreferrer">https://repl.it/@thalesvb/Collatz-MultiImpl</A></TD><BR />
</TR><BR />
<TR style="height: 13px"><BR />
<TD style="width: 177px;height: 13px"><SPAN class="mention-scrubbed">alexander.kr</SPAN></TD><BR />
<TD style="width: 445px;height: 13px"><A href="https://repl.it/@karpovas1505/ExcitingFrenchBoastmachine" target="_blank" rel="nofollow noopener noreferrer">https://repl.it/@karpovas1505/ExcitingFrenchBoastmachine</A></TD><BR />
</TR><BR />
<TR style="height: 13px"><BR />
<TD style="width: 177px;height: 13px"><SPAN class="mention-scrubbed">alfonso.carlos.tello.mora</SPAN></TD><BR />
<TD style="width: 445px;height: 13px"><A href="https://jsfiddle.net/alfonsotellomora/7hz3vr1g/1/" target="_blank" rel="nofollow noopener noreferrer">https://jsfiddle.net/alfonsotellomora/7hz3vr1g/1/</A></TD><BR />
</TR><BR />
<TR style="height: 13px"><BR />
<TD style="width: 177px;height: 13px"><SPAN class="mention-scrubbed">andreas.muenster.wienit</SPAN></TD><BR />
<TD style="width: 445px;height: 13px"><A href="https://repl.it/@andreasmuenster/SapCodingChallenge2" target="_blank" rel="nofollow noopener noreferrer">https://repl.it/@andreasmuenster/SapCodingChallenge2</A></TD><BR />
</TR><BR />
<TR style="height: 13px"><BR />
<TD style="width: 177px;height: 13px"><SPAN class="mention-scrubbed">bmckeany</SPAN></TD><BR />
<TD style="width: 445px;height: 13px"><A href="https://jsfiddle.net/bmckeany/0ev53jzr/2/" target="_blank" rel="nofollow noopener noreferrer">https://jsfiddle.net/bmckeany/0ev53jzr/2/</A></TD><BR />
</TR><BR />
<TR style="height: 13px"><BR />
<TD style="width: 177px;height: 13px"><SPAN class="mention-scrubbed">carlosfortes94</SPAN></TD><BR />
<TD style="width: 445px;height: 13px"><A href="https://jsfiddle.net/59vk0Lxa/1/" target="_blank" rel="nofollow noopener noreferrer">https://jsfiddle.net/59vk0Lxa/1/</A></TD><BR />
</TR><BR />
<TR style="height: 13px"><BR />
<TD style="width: 177px;height: 13px"><SPAN class="mention-scrubbed">dominik.bigl2</SPAN></TD><BR />
<TD style="width: 445px;height: 13px"><A href="https://repl.it/@bigld/SAPCCC2" target="_blank" rel="nofollow noopener noreferrer">https://repl.it/@bigld/SAPCCC2</A></TD><BR />
</TR><BR />
<TR style="height: 13px"><BR />
<TD style="width: 177px;height: 13px"><SPAN class="mention-scrubbed">flavio.ciotola3</SPAN></TD><BR />
<TD style="width: 445px;height: 13px"><A href="https://repl.it/@flaviociotola/CollatzSequence" target="_blank" rel="nofollow noopener noreferrer">https://repl.it/@flaviociotola/CollatzSequence</A></TD><BR />
</TR><BR />
<TR style="height: 13px"><BR />
<TD style="width: 177px;height: 13px"><SPAN class="mention-scrubbed">kevin_hu</SPAN></TD><BR />
<TD style="width: 445px;height: 13px"><A href="https://repl.it/@whocann/CollatzProblem" target="_blank" rel="nofollow noopener noreferrer">https://repl.it/@whocann/CollatzProblem</A></TD><BR />
</TR><BR />
<TR style="height: 13px"><BR />
<TD style="width: 177px;height: 13px"><SPAN class="mention-scrubbed">lauralopezburgos</SPAN></TD><BR />
<TD style="width: 445px;height: 13px"><A href="https://repl.it/@shokimc/Js" target="_blank" rel="nofollow noopener noreferrer">https://repl.it/@shokimc/Js</A></TD><BR />
</TR><BR />
<TR style="height: 13px"><BR />
<TD style="width: 177px;height: 13px"><SPAN class="mention-scrubbed">mateuszadamus</SPAN></TD><BR />
<TD style="width: 445px;height: 13px"><A href="https://jsfiddle.net/0a74ecf6/" target="_blank" rel="nofollow noopener noreferrer">https://jsfiddle.net/0a74ecf6/</A> (see also <A href="http://mateuszadamus.pl/sap/sap-community-coding-challenge-nr.2.html" target="_blank" rel="nofollow noopener noreferrer">http://mateuszadamus.pl/sap/sap-community-coding-challenge-nr.2.html</A>)</TD><BR />
</TR><BR />
<TR style="height: 13px"><BR />
<TD style="width: 177px;height: 13px"><SPAN class="mention-scrubbed">miguelfiuza</SPAN></TD><BR />
<TD style="width: 445px;height: 13px"><A href="https://repl.it/repls/KnobbyGiantToolbox" target="_blank" rel="nofollow noopener noreferrer">https://repl.it/repls/KnobbyGiantToolbox</A> (see also <A href="https://answers.sap.com/articles/13048142/ccc2-getting-the-longest-collatz-sequence-from-one.html" target="_blank" rel="noopener noreferrer">https://answers.sap.com/articles/13048142/ccc2-getting-the-longest-collatz-sequence-from-one.html</A>)</TD><BR />
</TR><BR />
<TR style="height: 13px"><BR />
<TD style="width: 177px;height: 13px"><SPAN class="mention-scrubbed">murbani</SPAN></TD><BR />
<TD style="width: 445px;height: 13px"><A href="https://repl.it/@marcellourbani/longestCollatzimmutable#index.js" target="_blank" rel="nofollow noopener noreferrer">https://repl.it/@marcellourbani/longestCollatzimmutable#index.js</A></TD><BR />
</TR><BR />
<TR style="height: 13px"><BR />
<TD style="width: 177px;height: 13px"><SPAN class="mention-scrubbed">murbani</SPAN></TD><BR />
<TD style="width: 445px;height: 13px"><A href="https://repl.it/@marcellourbani/longestCollatzfastest#index.js" target="_blank" rel="nofollow noopener noreferrer">https://repl.it/@marcellourbani/longestCollatzfastest#index.js</A></TD><BR />
</TR><BR />
<TR style="height: 13px"><BR />
<TD style="width: 177px;height: 13px"><SPAN class="mention-scrubbed">murbani</SPAN></TD><BR />
<TD style="width: 445px;height: 13px"><A href="https://answers.sap.com/articles/13048264/ccc2-longest-collatz-euler-14.html" target="_blank" rel="noopener noreferrer">https://answers.sap.com/articles/13048264/ccc2-longest-collatz-euler-14.html</A></TD><BR />
</TR><BR />
<TR style="height: 13px"><BR />
<TD style="width: 177px;height: 13px"><SPAN class="mention-scrubbed">olmoruiz</SPAN></TD><BR />
<TD style="width: 445px;height: 13px"><A href="https://jsfiddle.net/hqdpuo2g/7/" target="_blank" rel="nofollow noopener noreferrer">https://jsfiddle.net/hqdpuo2g/7/</A></TD><BR />
</TR><BR />
<TR style="height: 13px"><BR />
<TD style="width: 177px;height: 13px"><SPAN class="mention-scrubbed">rohit.singhal</SPAN></TD><BR />
<TD style="width: 445px;height: 13px"><A href="https://jsfiddle.net/rohit_rahi/ej4dv7no/33/" target="_blank" rel="nofollow noopener noreferrer">https://jsfiddle.net/rohit_rahi/ej4dv7no/33/</A></TD><BR />
</TR><BR />
<TR style="height: 13px"><BR />
<TD style="width: 177px;height: 13px"><SPAN class="mention-scrubbed">94mts</SPAN></TD><BR />
<TD style="width: 445px;height: 13px"><A href="https://answers.sap.com/articles/13047029/ccc2-the-longest-collatz-sequence-solution.html" target="_blank" rel="noopener noreferrer">https://answers.sap.com/articles/13047029/ccc2-the-longest-collatz-sequence-solution.html</A></TD><BR />
</TR><BR />
<TR style="height: 13px"><BR />
<TD style="width: 177px;height: 13px"><SPAN class="mention-scrubbed">clippersys</SPAN></TD><BR />
<TD style="width: 445px;height: 13px"><A href="https://js.do/clippersys/439087" target="_blank" rel="nofollow noopener noreferrer">https://js.do/clippersys/439087</A></TD><BR />
</TR><BR />
<TR style="height: 13px"><BR />
<TD style="width: 177px;height: 13px"><SPAN class="mention-scrubbed">clippersys</SPAN></TD><BR />
<TD style="width: 445px;height: 13px"><A href="http://clippersys.eu/SAPcc2/OO_SAPCommunityCodingChallengeNr2_20200514.js" target="_blank" rel="nofollow noopener noreferrer">OO_SAPCommunityCodingChallengeNr2_20200514</A></TD><BR />
</TR><BR />
<TR style="height: 13px"><BR />
<TD style="width: 177px;height: 13px"><SPAN class="mention-scrubbed">kadir.g</SPAN></TD><BR />
<TD style="width: 445px;height: 13px"><A href="https://repl.it/@kadirozgur/LongestCollatzSequence" target="_blank" rel="nofollow noopener noreferrer">https://repl.it/@kadirozgur/LongestCollatzSequence</A></TD><BR />
</TR><BR />
<TR style="height: 13px"><BR />
<TD style="width: 177px;height: 13px"><SPAN class="mention-scrubbed">maheshkumar.palavalli</SPAN></TD><BR />
<TD style="width: 445px;height: 13px"><A href="https://repl.it/@MaheshKumarKum3/ccc2-2" target="_blank" rel="nofollow noopener noreferrer">https://repl.it/@MaheshKumarKum3/ccc2-2</A></TD><BR />
</TR><BR />
<TR style="height: 13px"><BR />
<TD style="width: 177px;height: 13px"><SPAN class="mention-scrubbed">manjanbail</SPAN></TD><BR />
<TD style="width: 445px;height: 13px"><A href="https://repl.it/@NishchalManjanb/map-approach" target="_blank" rel="nofollow noopener noreferrer">https://repl.it/@NishchalManjanb/map-approach</A></TD><BR />
</TR><BR />
<TR style="height: 13px"><BR />
<TD style="width: 177px;height: 13px"><SPAN class="mention-scrubbed">manjanbail</SPAN></TD><BR />
<TD style="width: 445px;height: 13px"><A href="https://repl.it/@NishchalManjanb/cached-collatz" target="_blank" rel="nofollow noopener noreferrer">https://repl.it/@NishchalManjanb/cached-collatz</A></TD><BR />
</TR><BR />
<TR style="height: 13px"><BR />
<TD style="width: 177px;height: 13px"><SPAN class="mention-scrubbed">manjanbail</SPAN></TD><BR />
<TD style="width: 445px;height: 13px"><A href="https://repl.it/@NishchalManjanb/Basic-Collatz-Soln" target="_blank" rel="nofollow noopener noreferrer">https://repl.it/@NishchalManjanb/Basic-Collatz-Soln</A> (see also <A href="https://answers.sap.com/articles/13049099/ccc2-different-approaches-and-ideas-for-solving-lo.html" target="_blank" rel="noopener noreferrer">https://answers.sap.com/articles/13049099/ccc2-different-approaches-and-ideas-for-solving-lo.html</A>)</TD><BR />
</TR><BR />
<TR style="height: 13px"><BR />
<TD style="width: 177px;height: 13px"><SPAN class="mention-scrubbed">megges</SPAN></TD><BR />
<TD style="width: 445px;height: 13px"><A href="https://jsfiddle.net/megges/bvu8choa" target="_blank" rel="nofollow noopener noreferrer">https://jsfiddle.net/megges/bvu8choa</A></TD><BR />
</TR><BR />
<TR style="height: 13px"><BR />
<TD style="width: 177px;height: 13px"><SPAN class="mention-scrubbed">monalisa.biswal</SPAN></TD><BR />
<TD style="width: 445px;height: 13px"><A href="https://jsbin.com/kogolot/edit?html,console,output" target="_blank" rel="nofollow noopener noreferrer">https://jsbin.com/kogolot/edit?html,console,output</A></TD><BR />
</TR><BR />
<TR style="height: 13px"><BR />
<TD style="width: 177px;height: 13px"><SPAN class="mention-scrubbed">pacheco_labs</SPAN></TD><BR />
<TD style="width: 445px;height: 13px"><A href="https://repl.it/join/rpsvffuv-jesuspacheco" target="_blank" rel="nofollow noopener noreferrer">https://repl.it/join/rpsvffuv-jesuspacheco</A></TD><BR />
</TR><BR />
<TR style="height: 13px"><BR />
<TD style="width: 177px;height: 13px"><SPAN class="mention-scrubbed">senthil.kumar37</SPAN></TD><BR />
<TD style="width: 445px;height: 13px"><A href="https://answers.sap.com/articles/13049204/ccc2-longest-collatz-sequence-challange.html" target="_blank" rel="noopener noreferrer">https://answers.sap.com/articles/13049204/ccc2-longest-collatz-sequence-challange.html</A></TD><BR />
</TR><BR />
<TR style="height: 13px"><BR />
<TD style="width: 177px;height: 13px"><SPAN class="mention-scrubbed">tom.demuyt</SPAN></TD><BR />
<TD style="width: 445px;height: 13px"><A href="https://jsfiddle.net/konijn_gmail_com/jgv1xLyo/" target="_blank" rel="nofollow noopener noreferrer">https://jsfiddle.net/konijn_gmail_com/jgv1xLyo/</A></TD><BR />
</TR><BR />
</TBODY><BR />
</TABLE><BR />
Congratulations to everyone!<BR />
<BR />
Check out the <A href="https://youtu.be/RKQTWR4-2PE" target="_blank" rel="nofollow noopener noreferrer">recording</A> of last week's live stream for a look at some of these.<BR />
<BR />
<STRONG>Next steps</STRONG><BR />
<BR />
So now we have all the successful submissions listed here, we'll be posting an entry into the Community Q&amp;A area&nbsp;later this week with a shortlist of finalists, for you to vote on as the overall winner. Stay tuned!<BR />
<BR />
&nbsp;<BR />
<BR />
<STRONG>Appendix - Performance testing</STRONG><BR />
<BR />
For those interested, I loaded all the submissions that I could into a local project, and ran them through a little script to get a rough idea of the throughput. For some of the submissions that presented the output in HTML, I had to make minor modifications to allow them to be executed directly in Node.js at the command line, but other than that, I ran the scripts unaltered.<BR />
<BR />
I used <A href="https://github.com/sharkdp/hyperfine" target="_blank" rel="nofollow noopener noreferrer">hyperfine</A>, a command line benchmarking tool, which worked really well for me. I wrapped it in a script for convenience. Here's a screenshot of the tool in action -- showing an entry that was outside of the allowed submissions <span class="lia-unicode-emoji" title=":winking_face:">ð</span> -- and the wrapper script itself. Share &amp; enjoy!<BR />
<P style="overflow: hidden;margin-bottom: 0px"><IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/06/Screenshot-2020-06-08-at-08.57.50.png" /></P><BR />
<BR />
<PRE class="language-perl"><CODE>#!/usr/bin/env bash<BR />
<BR />
# Performance tests<BR />
# Run as either 'perftest' (and pick a submission) or 'perftestall' (via the symlink) to process all of them.<BR />
# Uses 'hyperfine' with a single run as warmup, and the average taken from 10 (the default) runs.<BR />
<BR />
subdir=submissions<BR />
<BR />
heading() { figlet -w $(tput cols) $@ | lolcat; }<BR />
pick() { ls -1 ${subdir} | fzf; }<BR />
<BR />
if [ $(basename $0) = "perftestall" ]<BR />
then<BR />
  candidatelist=$(ls -1 ${subdir})<BR />
else<BR />
  candidatelist=${1:-$(pick)}<BR />
fi<BR />
<BR />
for sub in ${candidatelist}<BR />
do<BR />
  heading ${sub} \<BR />
  &amp;&amp; hyperfine --time-unit millisecond --warmup 1 "node ${subdir}/${sub}/index"<BR />
done</CODE></PRE>
---
SAP Community Coding Challenge 2 - Update
welcome-cornerblog-board
2020-05-26
https://community.sap.com/t5/welcome-corner-blog-posts/sap-community-coding-challenge-2-update/ba-p/13433707
2020-05-26-sap-community-coding-challenge-2-update
<EM>Here's a quick summary of where things are with the current SAP Community Coding Challenge, and what's to come.&nbsp;</EM><BR />
<BR />
(The contestants and their successful submissions have now been listed in "<A href="https://blogs.sap.com/2020/06/08/sap-community-coding-challenge-2-contestants/" target="_blank" rel="noopener noreferrer">SAP Community Coding Challenge 2 â Contestants</A>").<BR />
<BR />
The current SAP Community Coding Challenge was introduced in the blog post "<A href="https://blogs.sap.com/2020/04/27/sap-community-coding-challenge-nr.2/" target="_blank" rel="noopener noreferrer">SAP Community Coding Challenge Nr.2</A>" and the submission deadline was Thu 14 May. We spent last week having a look at the submissions, and my goodness you all did a great job.<BR />
<BR />
You sent in over 70 different solutions within the deadline limit, which was very impressive to start with, but what's more - these solutions were wonderfully varied in style, approach and construction.<BR />
<BR />
Some individuals submitted more than one solution, and we got the impression that you really enjoyed digging deep into different techniques. Indeed, many of you seemed to be using this challenge as a way to learn JavaScript, or level up existing JavaScript skills, whether in the area of language, performance or style. To all of you - kudos! Moreover, there were a few that included some functional programming aspects, which delighted me no end, I will tell you that for nothing!<BR />
<BR />
There were also some interesting performance optimisation techniques (performance was not a key goal but it's fun to see how fast things go anyway), a few that used libraries (including <A href="https://ramdajs.com/" target="_blank" rel="nofollow noopener noreferrer">Ramda</A>), and one particularly interesting approach that embraced <A href="https://raganwald.com/2013/03/28/trampolines-in-javascript.html" target="_blank" rel="nofollow noopener noreferrer">trampolines</A>.<BR />
<BR />
We even had a few unusual submissions; one used <A href="https://www.sap.com/uk/products/data-intelligence.html" target="_blank" rel="noopener noreferrer">SAP Data Intelligence</A> as the context within which to compute the answer, and another couple of submissions technically broke the rules but nevertheless made us smile - one was a solution in ABAP, and another in HANA SQLScript.<BR />
<BR />
The challenge subject itself - the <A href="https://en.wikipedia.org/wiki/Collatz_conjecture" target="_blank" rel="nofollow noopener noreferrer">Collatz Conjecture</A> - presented what we hope was an interesting topic generally, approachable to all but with some bite to it nonetheless (one submission even included a link to the paper <A href="https://www.sciencedirect.com/science/article/pii/089812219290034F" target="_blank" rel="nofollow noopener noreferrer">3x+1 search programs</A>).<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/05/Backgrounds-1920x1200-1.png" /><BR />
<BR />
There's plenty to talk about, that's for sure. So there's a live stream scheduled for a look at some of your solutions. Following that live stream, we'll have the pleasure of listing the contestants, finalists and winner. Watch this space!<BR />
<BR />
Solutions live stream:<BR />
<TABLE style="height: 126px"><BR />
<TBODY><BR />
<TR style="height: 14px"><BR />
<TD style="height: 14px">Date</TD><BR />
<TD style="height: 14px"><STRONG>Mon 01 Jun 2020</STRONG></TD><BR />
</TR><BR />
<TR style="height: 42px"><BR />
<TD style="height: 42px">Time<BR />
(0700 UTC)</TD><BR />
<TD style="height: 42px">0900 EDT/GMT-4 (New York) // 1400 BST/GMT+1 (Manchester) // 1500 CEST/GMT+2 (Walldorf) // 1830 IST/GMT+5:30 (Bengaluru)</TD><BR />
</TR><BR />
<TR style="height: 14px"><BR />
<TD style="height: 14px">Link</TD><BR />
<TD style="height: 14px"><A href="https://youtu.be/RKQTWR4-2PE" target="_blank" rel="nofollow noopener noreferrer">https://youtu.be/RKQTWR4-2PE</A></TD><BR />
</TR><BR />
<TR style="height: 14px"><BR />
<TD style="height: 14px">Title</TD><BR />
<TD style="height: 14px">SAP Community Coding Challenge Nr.2 - Solutions</TD><BR />
</TR><BR />
<TR style="height: 42px"><BR />
<TD style="height: 42px">Description</TD><BR />
<TD style="height: 42px">A look at some of your solutions submitted for the current SAP Community Coding Challenge relating to the Collatz Conjecture.</TD><BR />
</TR><BR />
</TBODY><BR />
</TABLE><BR />
<P style="overflow: hidden;margin-bottom: 0px"></P>
---
Terminal Tip: a CF remote monitor script
technology-blog-sap
2020-05-01
https://community.sap.com/t5/technology-blogs-by-sap/terminal-tip-a-cf-remote-monitor-script/ba-p/13429781
2020-05-01-terminal-tip-a-cf-remote-monitor-script
(Find more terminal tips here:&nbsp;<A href="https://blogs.sap.com/tag/terminaltip/" target="_blank" rel="noopener noreferrer">https://blogs.sap.com/tag/terminaltip/</A>)<BR />
<BR />
In the previous terminal tip (<A href="https://blogs.sap.com/2020/04/24/terminal-tip-remotely-monitor-a-cf-deployment/" target="_blank" rel="noopener noreferrer">remotely monitor a CF deployment</A>) we saw the building blocks of how we might go about finding and then remotely monitoring an ongoing multi-target application (MTA) operation.<BR />
<BR />
On today's <A href="https://bit.ly/handsonsapdev" target="_blank" rel="nofollow noopener noreferrer">#HandsOnSAPDev</A> live stream, <A href="https://bit.ly/handsonsapdev#ep66" target="_blank" rel="nofollow noopener noreferrer">Ep.66</A>, we wrote a script <CODE>mtaopsmon</CODE> that put these building blocks together (check out the section of <A href="https://youtu.be/mP1iWZgNmsE?t=895" target="_blank" rel="nofollow noopener noreferrer">the replay starting at around 14:55</A>). I thought it would be worth sharing that script here, and explaining it bit by bit.<BR />
<BR />
First, let's see the script in its entirety:<BR />
<PRE class="language-bash"><CODE>#!/usr/bin/env bash<BR />
<BR />
getopsid () { cf mta-ops | sed '1,3d' | head -1 | awk '{print $1}'; }                                                                   <BR />
<BR />
echo -n Searching for MTA operation<BR />
<BR />
mtaopid=$(getopsid)<BR />
<BR />
while [[ -z ${mtaopsid} ]]<BR />
do<BR />
  echo -n .<BR />
  sleep 1<BR />
  mtaopsid=$(getopsid)<BR />
done<BR />
<BR />
echo<BR />
echo MTA operation found: ${mtaopsid}<BR />
<BR />
cf deploy -i ${mtaopsid} -a monitor</CODE></PRE><BR />
Now let's take it a step at a time.<BR />
<BR />
<STRONG>Step 1 - Defining a function to get an MTA operation ID</STRONG><BR />
<BR />
The first line looks like this:<BR />
<PRE class="language-bash"><CODE>getopsid () { cf mta-ops | sed '1,3d' | head -1 | awk '{print $1}'; }                                                                   </CODE></PRE><BR />
Here we're defining a function <CODE>getopsid</CODE> that contains way to try and grab the ID of an MTA operation. This is deliberately over simplified but works for our purposes, and is a good start.<BR />
<BR />
If you consider what the output of <CODE>cf mta-ops</CODE> gives for when there's an operation (or more than one), it looks like this:<BR />
<PRE class="language-plain"><CODE>Getting active multi-target app operations in org p200135114trial / space dev as qmacro+workflowcodejam@example.com...<BR />
OK<BR />
id                                     type     mta id                  status    started at                      started by<BR />
acb3bcda-8b7b-11ea-bb72-eeee0a890182   DEPLOY   sample.onboarding.mta   RUNNING   2020-05-01T07:16:28.294Z[UTC]   qmacro+workflowcodejam@example.com</CODE></PRE><BR />
There's a couple of descriptive lines ("Getting ..." and "OK"), followed by a column header line ("id ...") and then a line with the details of an operation, where the first column is the operation's ID ("acb3...").<BR />
<BR />
If you consider what the output looks like when there are no operations, it looks like this:<BR />
<PRE class="language-plain"><CODE>Getting active multi-target app operations in org p200135114trial / space dev as qmacro+workflowcodejam@example.com...<BR />
OK<BR />
No multi-target app operations found</CODE></PRE><BR />
Now we know what the two possible outputs look like, we can stare at the first line of our script and understand what <CODE>getopsid</CODE> does. It calls <CODE>cf mta-ops</CODE>, and pipes the output into <CODE>sed '1,3d</CODE>', which will simply delete the first three lines. Whatever then remains is either nothing (there are only three lines when there are no MTA operations) or a list of operation details:<BR />
<PRE class="language-plain"><CODE>acb3bcda-8b7b-11ea-bb72-eeee0a890182   DEPLOY   sample.onboarding.mta   RUNNING   2020-05-01T07:16:28.294Z[UTC]   qmacro+workflowcodejam@example.com</CODE></PRE><BR />
To keep things simple in this case, we're just going to take the first operation, in case there are more, and so we pipe the remaining line(s) into <CODE>head -1</CODE> which will just give us the first line.<BR />
<BR />
Finally, we pipe that line into <CODE>awk '{print $1}'</CODE> which will return just the first "field", i.e. the operation ID ("acb3...").<BR />
<BR />
So basically, calling this function <CODE>getopsid</CODE> will return either an operation ID, or nothing.<BR />
<BR />
<STRONG>Step 2 - Looping until we get an MTA operation ID</STRONG><BR />
<BR />
Here's the next part:<BR />
<PRE class="language-bash"><CODE>echo -n Searching for MTA operation<BR />
<BR />
mtaopid=$(getopsid)<BR />
<BR />
while [[ -z ${mtaopsid} ]]<BR />
do<BR />
  echo -n .<BR />
  sleep 1<BR />
  mtaopsid=$(getopsid)<BR />
done<BR />
</CODE></PRE><BR />
After printing out "Searching for MTA operation", without a newline (that's what the <CODE>-n</CODE> option to <CODE>echo</CODE> means), we call <CODE>getopsid</CODE> and assign whatever it returns to the <CODE>mtaopid</CODE> variable, which will therefore contain an ID, or nothing.<BR />
<BR />
Then we loop around, as long as the <CODE>-z ${mtaopsid}</CODE> condition is true, i.e. for as long as there's no value in the <CODE>mtaopsid</CODE> variable. Inside the loop, we print a "." character, sleep for a second, and then call the <CODE>getopsid</CODE> function again.<BR />
<BR />
This will run therefore until we get an MTA operation ID.<BR />
<BR />
<STRONG>Step 3 - Attaching to and monitoring the MTA operation</STRONG><BR />
<BR />
Once we have an MTA operation ID, we can use the technique we learned about in <A href="https://blogs.sap.com/2020/04/24/terminal-tip-remotely-monitor-a-cf-deployment/" target="_blank" rel="noopener noreferrer">the previous terminal tip</A> to attach to an ongoing operation, and call the 'monitor' action upon it:<BR />
<PRE class="language-bash"><CODE>echo<BR />
echo MTA operation found: ${mtaopsid}<BR />
<BR />
cf deploy -i ${mtaopsid} -a monitor</CODE></PRE><BR />
And that's it!<BR />
<BR />
Here's an example of the script in action, showing a few lines from the log output. To take this screenshot, I started the <CODE>mtaopsmon</CODE> script up, then switched over to the SAP Web IDE to deploy the "sample.onboarding.mta" MTA that I'd previously built.<BR />
<P style="overflow: hidden;margin-bottom: 0px"><IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/05/Screenshot-2020-05-01-at-09.58.19.png" /></P><BR />
<STRONG><BR />
Next steps</STRONG><BR />
<BR />
Of course, the function that gets the MTA operation ID is deliberately very simple at this stage (we wrote the script together during the live stream). Have a think about how you could improve that - what would happen (and what would we want to do) if there were multiple operations? Let me know your thoughts in the comments, and until next time ...<BR />
<BR />
Share &amp; enjoy, and remember,&nbsp;<A href="https://twitter.com/search?q=%23TheFutureIsTerminal&amp;src=typed_query" target="_blank" rel="nofollow noopener noreferrer">#TheFutureIsTerminal</A>!
---
SAP Community Coding Challenge Nr.2
welcome-cornerblog-board
2020-04-27
https://community.sap.com/t5/welcome-corner-blog-posts/sap-community-coding-challenge-nr-2/ba-p/13442011
2020-04-27-sap-community-coding-challenge-nr-2
Welcome to the second challenge in the <STRONG>SAP Community Coding Challenge Series</STRONG>. Just like the <A href="https://blogs.sap.com/2020/02/28/sap-community-coding-challenge-series/" target="_blank" rel="noopener noreferrer">first challenge</A>, we have a puzzle for you to solve. Again, something fun and simple enough to solve in a reasonably short period of time.<BR />
<BR />
(The deadline for this challenge has now passed - for an update, please read <A href="https://blogs.sap.com/2020/05/26/sap-community-coding-challenge-2-update/" target="_blank" rel="noopener noreferrer">SAP Community Coding Challenge 2 â Update</A>.)<BR />
<BR />
For this second challenge we take a short departure from our technology roots towards where many of us are already heading (and indeed many of us are already there in some shape or form). And that is the age of Web application UIs and cloud based backend services.<BR />
<BR />
If there's one language that joins both of these worlds together, it's JavaScript, in its two main incarnations - Web browser based, and server-side in the form of Node.js. The <A href="https://www.sap.com/uk/products/fiori.html" target="_blank" rel="noopener noreferrer">SAP Fiori</A> world is facilitated by the fantastic <A href="https://sapui5.hana.ondemand.com/" target="_blank" rel="nofollow noopener noreferrer">UI5</A> engine which is powered by JavaScript. Backend services in the <A href="https://developers.sap.com/tutorials/cp-cf-fundamentals.html" target="_blank" rel="noopener noreferrer">SAP Cloud Platform Cloud Foundry environment</A> can be written in many languages, and a popular one is indeed JavaScript (Node.js). The <A href="https://blogs.sap.com/2018/10/10/application-programming-model-start-here/" target="_blank" rel="noopener noreferrer">SAP Cloud Application Programming Model (CAP)</A> supports both Java and JavaScript for your custom logic. Even the <A href="https://blogs.sap.com/2018/01/26/discovering-scp-workflow-script-tasks/" target="_blank" rel="noopener noreferrer">Script Tasks in Workflow definitions</A> on SAP Cloud Platform are written in JavaScript.<BR />
<BR />
So what are you waiting for? Dive in, the water's lovely!<BR />
<H3 id="toc-hId-1061575487">Challenge Directions</H3><BR />
<A name="problem" target="_blank"></A>Just like the first challenge, there are certain requirements that have to be met. First, there's a specific problem to be solved. And that is the <A href="https://projecteuler.net/problem=14" target="_blank" rel="nofollow noopener noreferrer">Longest Collatz sequence</A> problem from the <A href="https://projecteuler.net/" target="_blank" rel="nofollow noopener noreferrer">Project Euler</A> archives, which is this:<BR />
<P style="overflow: hidden;margin-bottom: 0px"><IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/04/Screenshot-2020-04-16-at-14.37.17.png" height="291" width="570" /></P><BR />
The <A href="https://en.wikipedia.org/wiki/Collatz_conjecture" target="_blank" rel="nofollow noopener noreferrer">Collatz conjecture</A> is a fascinating one, and with a few lines of code we are able to explore it, in the form of this Project Euler problem, in our challenge series.<BR />
<BR />
<A name="requirements" target="_blank"></A>Here are the requirements for your solution:<BR />
<UL><BR />
 	<LI>it must produce the correct answer (according to Project Euler) in the form of a single integer value</LI><BR />
 	<LI>it must be written in JavaScript</LI><BR />
 	<LI>it must be provided in the form of a link to your code, somewhere on the web, preferably in a runnable form*</LI><BR />
 	<LI>that link must also show not only the code but the answer as well</LI><BR />
</UL><BR />
<EM>*see the Sharing Your Solution section below</EM><BR />
<BR />
While of course your solution will only be considered if it meets the above requirements, the judging will be based on subjective matters. It's up to you how you want to play that. Here are some example considerations with respect to the code you provide (but there are almost certainly going to be others too):<BR />
<UL><BR />
 	<LI>does it nicely demonstrate a certain style of programming (OO, FP, imperative, etc)?</LI><BR />
 	<LI>does it make use of libraries, and if so, in what way and with what advantages or disadvantages?</LI><BR />
 	<LI>how short and succinct is it? How short is too short? How long is too long?</LI><BR />
 	<LI>what's your take on whitespace?</LI><BR />
 	<LI>how easy is it to read, understand and / or modify?</LI><BR />
 	<LI>what strategy did you take with respect to variables and their names?</LI><BR />
 	<LI>how creative is the solution?</LI><BR />
</UL><BR />
<H3 id="toc-hId-865061982">Submission &amp; Judging</H3><BR />
Once you have a solution you are happy with, please do the following:<BR />
<OL><BR />
 	<LI>Follow this blog post (use the green "Follow" button at the top left of this page)</LI><BR />
 	<LI>Email us at <A href="mailto:community@sap.com" target="_blank" rel="nofollow noopener noreferrer">community@sap.com</A> with the following:</LI><BR />
</OL><BR />
<UL><BR />
 	<LI style="list-style-type: none"><BR />
<UL><BR />
 	<LI>a link to your solution* (do not send code or the answer in the email)</LI><BR />
 	<LI>a link to your public SAP Community profile</LI><BR />
</UL><BR />
</LI><BR />
</UL><BR />
<EM>*see the Sharing Your Solution section below</EM><BR />
<BR />
You have until the end of <STRONG>Thu 14 May 2020</STRONG> whenever that is in your own timezone to send that email in. The community and SAP Developer Advocates will then do the first round of judging to narrow the solutions down to 5 finalists. Those finalist's solutions will be posted in an SAP Community Q&amp;A entry so that everyone will have a chance to vote on the best overall solution.<BR />
<BR />
And, just like the first challenge, the fabulous prize for the winner of the Coding Challenge will be a <A href="https://en.wikipedia.org/wiki/Marvel_No-Prize" target="_blank" rel="nofollow noopener noreferrer">No-Prize</A>. The coveted No-Prize also comes as usual with the unending adulation &amp; admiration of the community of fellow developers.<BR />
<PRE class="language-javascript"><CODE>console.log('Good luck!')</CODE></PRE><BR />
<H3 id="toc-hId-668548477"><STRONG>Sharing Your Solution</STRONG></H3><BR />
We are in the age of the Web as the true native platform and there are many places on the Web to write and execute code, and make that publicly available. We are not dictating any particular site, but can certainly point you in the direction of a few:<BR />
<UL><BR />
 	<LI><A href="https://repl.it" target="_blank" rel="nofollow noopener noreferrer">repl.it</A></LI><BR />
 	<LI><A href="https://jsfiddle.net/" target="_blank" rel="nofollow noopener noreferrer">jsfiddle.net</A></LI><BR />
 	<LI><A href="https://glitch.com/" target="_blank" rel="nofollow noopener noreferrer">glitch.com</A></LI><BR />
</UL><BR />
With any of these sites, you can create code and make the source available, and also have it executable. These sites are great for what you might need in this challenge (and there are others too).<BR />
<BR />
If you prefer, you can instead share your solution (code &amp; answer) here on the SAP Community. Do this by creating a <A href="https://answers.sap.com/articles/create.html" target="_blank" rel="noopener noreferrer">new Coffee Corner Discussion</A> and make sure that if you do, you use "CCC2" as the first word in the title, and that you also use the "<STRONG>code</STRONG>" button (highlighted) to properly format your code so that it's readable. Here's an example:<BR />
<P style="overflow: hidden;margin-bottom: 0px"><IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/04/Screenshot-2020-04-16-at-18.46.32.png" /></P><BR />
Either way, once you've added your solution, you should provide a link to it (either to your code in one of the websites above or to your Coffee Corner Discussion entry) in the email as described above.
---
Terminal Tip: remotely monitor a CF deployment
technology-blog-sap
2020-04-24
https://community.sap.com/t5/technology-blogs-by-sap/terminal-tip-remotely-monitor-a-cf-deployment/ba-p/13453433
2020-04-24-terminal-tip-remotely-monitor-a-cf-deployment
(Find more terminal tips here: <A href="https://blogs.sap.com/tag/terminaltip/" target="_blank" rel="noopener noreferrer">https://blogs.sap.com/tag/terminaltip/</A>)<BR />
<BR />
In today's <A href="https://bit.ly/handsonsapdev" target="_blank" rel="nofollow noopener noreferrer">HandsOnSAPDev</A> live stream, <A href="http://bit.ly/handsonsapdev#ep65" target="_blank" rel="nofollow noopener noreferrer">Ep.65</A>, we built the SAP Cloud Platform Workflow sample application MTA in the SAP Web IDE, and deployed it to our Cloud Foundry (CF) space from there too. We noticed that the console logging was buffering the deployment log, so we didn't see much during the operation:<BR />
<P style="overflow: hidden;margin-bottom: 0px"><A href="https://www.youtube.com/watch?v=ZLtwMSq0DKo" target="_blank" rel="nofollow noopener noreferrer"><IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/04/Screenshot-2020-04-24-at-14.38.26.png" /></A></P><BR />
At the time, I wondered out loud whether it was possible to remotely monitor an operation.<BR />
<BR />
Remember that the <A href="https://plugins.cloudfoundry.org/#multiapps" target="_blank" rel="nofollow noopener noreferrer">multiapps</A> plugin for the <CODE>cf</CODE> command line tool gives us lots of options in relation to multi target application (MTA) operations. A couple of example are:<BR />
<UL><BR />
 	<LI>see a summary list of active operations with the <CODE>mta-ops</CODE> command</LI><BR />
 	<LI>download the logs of such an operation, with the <CODE>download-mta-op-logs</CODE> command (which is also available in the form of a mercifully shorter alias <CODE>dmol</CODE>)</LI><BR />
</UL><BR />
This latter command is in the right ballpark, but doesn't allow the live monitoring (or "tailing") of log output.<BR />
<BR />
After the live stream ended, I was pondering this and had a look at the documentation on the SAP Help Portal, specifically the <A href="https://help.sap.com/viewer/65de2977205c403bbc107264b8eccf4b/Cloud/en-US/65ddb1b51a0642148c6b468a759a8a2e.html" target="_blank" rel="noopener noreferrer">Multitarget Application Commands for the Cloud Foundry Environment</A> section. There, it describes the <CODE>-i</CODE> option to the <CODE>cf deploy</CODE> command, which allows us to interact with active MTA operations:<BR />
<PRE class="pre codeblock prettyprint w-buttons prettyprinted"><SPAN class="ph cmdtext"><SPAN class="pln">cf deploy  </SPAN><SPAN class="pun">[-</SPAN><SPAN class="pln">i </SPAN><VAR class="keyword varname"><SPAN class="pun">&lt;</SPAN><SPAN class="pln">OPERATION_ID</SPAN><SPAN class="pun">&gt;</SPAN></VAR><SPAN class="pun">]</SPAN> <SPAN class="pun">[-</SPAN><SPAN class="pln">a </SPAN><VAR class="keyword varname"><SPAN class="pun">&lt;</SPAN><SPAN class="pln">ACTION</SPAN><SPAN class="pun">&gt;</SPAN></VAR><SPAN class="pun">]</SPAN> </SPAN></PRE><BR />
Digging a little further, it turns out that one of the actions is <CODE>monitor</CODE>, and indeed that's exactly what we're looking for!<BR />
<BR />
So, kicking off a deployment in the SAP Web IDE gives us something in the console that looks like what we see above in the screenshot. But we can switch to a more comfortable terminal environment and use this feature to monitor that very operation that we kicked off in the SAP Web IDE.<BR />
<BR />
Here's how: In the terminal, we can first find out the ID of the MTA operation, like this:<BR />
<PRE class="language-abap"><CODE>-&gt; cf mta-ops                                                                                                                   <BR />
Getting active multi-target app operations in org p2001351149trial / space dev as qmacro+workflowcodejam@example.com...           <BR />
OK                                                                                                                              <BR />
id                                     type     mta id                  status    started at                      started by    <BR />
f450e444-8632-11ea-abb3-eeee0a8f6ba7   DEPLOY   sample.onboarding.mta   RUNNING   2020-04-24T13:53:19.367Z[UTC]   qmacro+workflowcodejam@example.com </CODE></PRE><BR />
We can then take the ID and use it like this:<BR />
<PRE class="language-abap"><CODE>-&gt; cf deploy -i f450e444-8632-11ea-abb3-eeee0a8f6ba7 -a monitor                                   <BR />
Updating application "uiDeployer"...<BR />
Application "uiDeployer" attributes are not modified and will not be updated                      <BR />
Uploading application "uiDeployer"...<BR />
Content of application "uiDeployer" is not changed - upload will be skipped.                      <BR />
Starting application "uiDeployer"...<BR />
Application "uiDeployer" started<BR />
Application "uiDeployer" executed<BR />
Stopping application "uiDeployer"...<BR />
Deleting discontinued configuration entries for application "uiDeployer"...<BR />
Service key "onboarding-workflow-credentials" for service "workflow" already exists<BR />
Uploading content module "onboarding" in target service "workflow"...<BR />
Deploying content module "onboarding" in target service "workflow"...<BR />
Skipping deletion of services, because the command line option "--delete-services" is not specified.<BR />
Process finished.<BR />
Use "cf dmol -i f450e444-8632-11ea-abb3-eeee0a8f6ba7" to download the logs of the process.</CODE></PRE><BR />
I'd say that the ability to monitor ongoing MTA operations in the terminal, regardless of where the operation was initiated, is pretty neat. Wouldn't you?<BR />
<BR />
If this has whetted your appetite, read the next post in this collection: <A href="https://blogs.sap.com/2020/05/01/terminal-tip-a-cf-remote-monitor-script/" target="_blank" rel="noopener noreferrer">Terminal Tip: a CF remote monitor script</A>, which ties these things together into a neat little script.<BR />
<BR />
Share &amp; enjoy, and remember, <A href="https://twitter.com/search?q=%23TheFutureIsTerminal&amp;src=typed_query" target="_blank" rel="nofollow noopener noreferrer">TheFutureIsTerminal</A>!<BR />
<BR />
&nbsp;<BR />
<BR />
&nbsp;
---
Terminal Tip: switching CF targets
technology-blog-sap
2020-04-23
https://community.sap.com/t5/technology-blogs-by-sap/terminal-tip-switching-cf-targets/ba-p/13450867
2020-04-23-terminal-tip-switching-cf-targets
(Find more terminal tips here: <A href="https://blogs.sap.com/tag/terminaltip/" target="_blank" rel="noopener noreferrer">https://blogs.sap.com/tag/terminaltip/</A>)<BR />
<BR />
Working with Cloud Foundry (CF) from the command line, I use the&nbsp;<CODE>cf</CODE> CLI a lot. As you perhaps may know already, due to the use of Multi Target Applications (multiapps, or MTAs) in the SAP Cloud Platform CF environment, there's a <A href="https://plugins.cloudfoundry.org/" target="_blank" rel="nofollow noopener noreferrer">plugin system</A> for <CODE>cf</CODE> - with the most popular plugin for us being the <A href="https://plugins.cloudfoundry.org/#multiapps" target="_blank" rel="nofollow noopener noreferrer">multiapps</A> plugin for managing MTAs.<BR />
<BR />
Another plugin, introduced to me recently by my friend and colleague <SPAN class="mention-scrubbed">iinside</SPAN>, is the <A href="https://plugins.cloudfoundry.org/#Targets" target="_blank" rel="nofollow noopener noreferrer">targets</A> plugin, for managing CF targets (which API endpoints you have and which one do you want to be connected to with <CODE>cf</CODE> at any particular point). I use the commands provided by this plugin (<CODE>targets</CODE>, <CODE>save-target</CODE>, <CODE>delete-target</CODE> and <CODE>set-target</CODE>) often, but I also like choosing my target from a list, so I can see what I'm connected to currently, and what I want to switch to.<BR />
<BR />
(If you're interested to learn more about this plugin, check out Max's excellent video: <A href="https://www.youtube.com/watch?v=rIhuxEYfvHo&amp;amp;index=1" target="_blank" rel="nofollow noopener noreferrer">Cloud Foundry CLI Plugin - Targets</A>).<BR />
<BR />
Here's a typical manual flow, where I check what I'm currently connected to with <CODE>cf targets</CODE> and then select a new target with <CODE>cf set-target</CODE>:<BR />
<P style="overflow: hidden;margin-bottom: 0px"><IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/04/Screenshot-2020-04-23-at-12.17.50.png" /></P><BR />
To make life a little more pleasant, I use the excellent command line fuzzy finder <A href="https://github.com/junegunn/fzf" target="_blank" rel="nofollow noopener noreferrer">fzf</A>. If you've not discovered this little gem, I'd recommend you head on over, check it out, and install it. If you're a follower of the <A href="https://bit.ly/handsonsapdev" target="_blank" rel="nofollow noopener noreferrer">Hands-on SAP Dev</A> live streams it's likely that you've seen it in action in various places along the way.<BR />
<BR />
In its basic form, <CODE>fzf</CODE> takes whatever it's given via STDIN, and presents it in a selection. You can then use various methods to narrow down your search through the selection and choose something, at which point <CODE>fzf</CODE> will then simply output that selection to STDOUT. This is a classic example of the Unix philosophy of tools doing one thing and doing it well, and also conforming to the simple but powerful concepts of pipelining and standard input &amp; output.<BR />
<BR />
Anyway, I decided to use <CODE>fzf</CODE> to enhance the flow above, so that I'm simply presented with a list of targets for me to choose from. I wrote a very short script, that looks like this:<BR />
<PRE class="language-perl"><CODE>#!/usr/bin/env bash<BR />
<BR />
target=$(cf targets | fzf --height=25% | cut -d ' ' -f 1) \<BR />
  &amp;&amp; [ ! -z ${target} ] \<BR />
  &amp;&amp; cf set-target -f ${target} \<BR />
  &amp;&amp; cf target</CODE></PRE><BR />
Breaking it down into its component parts, we have the following:<BR />
<PRE class="language-perl"><CODE>target=$(cf targets | fzf --height=25% | cut -d ' ' -f 1) \</CODE></PRE><BR />
This calls <CODE>cf targets</CODE>, which will produce that list of targets available, including highlighting the currently selected target with "(current)" as we saw earlier. It then pipes that into <CODE>fzf</CODE>, which will present me with those options in a short (25% of the height of the current terminal) list to choose from, using fuzzy searching or simply using the up and down arrow keys.<BR />
<BR />
Then, once I've selected an entry, <CODE>cut</CODE> is used to take just the first word from the line selected (this is important in the case where "(current)" is added to the line) and then the result is saved into the <CODE>target</CODE> variable.<BR />
<BR />
Then we have this:<BR />
<PRE class="language-abap"><CODE>  &amp;&amp; [ ! -z ${target} ] \</CODE></PRE><BR />
which just makes sure that we've actually selected something (and not aborted with ^C or something like that).<BR />
<BR />
If we do have something selected, then this next part kicks in:<BR />
<PRE class="language-abap"><CODE>  &amp;&amp; cf set-target -f ${target} \</CODE></PRE><BR />
which uses the actual <CODE>cf set-target</CODE> command to set the API endpoint to the appropriately selected target.<BR />
<BR />
Finally, to give me some information on the newly set target, I run the standard <CODE>cf target</CODE> command (not to be confused with <CODE>cf targets</CODE><span class="lia-unicode-emoji" title=":disappointed_face:">ð</span><BR />
<PRE class="language-abap"><CODE>  &amp;&amp; cf target</CODE></PRE><BR />
This will show details of the target currently set.<BR />
<BR />
And that's it!<BR />
<BR />
I've saved this script to a location in my path, and called it <CODE>cft</CODE> (for 'cf target') and now I can view and select CF targets in comfort!<BR />
<BR />
Here's <CODE>cft</CODE> in action, where the current target is 'workflowcodejam' and I want to switch to 'garage':<BR />
<P style="overflow: hidden;margin-bottom: 0px"><IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/04/Screenshot-2020-04-23-at-12.14.58.png" /></P><BR />
&nbsp;<BR />
<P style="overflow: hidden;margin-bottom: 0px"><IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/04/Screenshot-2020-04-27-at-16.55.18.png" /></P><BR />
Share &amp; enjoy, and remember, <A href="https://twitter.com/search?q=%23TheFutureIsTerminal&amp;src=typed_query" target="_blank" rel="nofollow noopener noreferrer">#TheFutureIsTerminal</A>!
---
Terminal Tip: parsing CF app logs
technology-blog-sap
2020-04-14
https://community.sap.com/t5/technology-blogs-by-sap/terminal-tip-parsing-cf-app-logs/ba-p/13436028
2020-04-14-terminal-tip-parsing-cf-app-logs
(Find more terminal tips here: <A href="https://blogs.sap.com/tag/terminaltip/" target="_blank" rel="noopener noreferrer">https://blogs.sap.com/tag/terminaltip/</A>)<BR />
<BR />
Further to my last <A href="https://blogs.sap.com/2020/04/07/terminal-tip-truncating-cf-output/" target="_blank" rel="noopener noreferrer">Terminal Tip on truncating CF output</A> I have another terminal tip for you that might help in the context of reading log output from Cloud Foundry (CF) apps.<BR />
<BR />
<A href="https://docs.cloudfoundry.org/devguide/deploy-apps/streaming-logs.html" target="_blank" rel="nofollow noopener noreferrer">Application logging on CF</A> can be quite involved, and there's all sorts of useful information for diagnostics and monitoring purposes. If you're just starting out using the CF environment on SAP Cloud Platform, you might however be overwhelmed, rather than overjoyed, at the amount of information and how it's presented.<BR />
<BR />
You can monitor the logs of an app on CF with the following command:<BR />
<PRE><CODE>cf logs &lt;appname&gt;</CODE></PRE><BR />
&nbsp;<BR />
<BR />
Here's a screenshot of the sort of thing you might see from this command, at the startup of an app:<BR />
<P style="overflow: hidden;margin-bottom: 0px"><IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/04/Screenshot-2020-04-14-at-07.05.31.png" /></P><BR />
&nbsp;<BR />
<BR />
I cut my commercial programming teeth working at Esso Petroleum in London on IBM big iron - mainframes running MVS/ESA, upon which we ran SAP R/2 systems with IMS DB/DC. While that was a rather proprietary OS environment, it did leave many lasting positive impressions, one of which was: logging is important and should be consistent, <A href="https://blogs.sap.com/2009/11/05/tech-skills-chat-with-jonerp-a-follow-on-story/#documentation" target="_blank" rel="noopener noreferrer">easily referenced</A>, and readable.<BR />
<BR />
Just focusing on the last quality - readability - this log output may be readable by machines, but if you ask me, it should be readable by humans first, and machines second.<BR />
<BR />
If you stare for a few seconds at the log output in the screenshot above, you may discern that it's in the form of JSON (!), and produced for the "APP/PROC/WEB" context. I've found myself interested in knowing what's going on in this context, so I turned to my terminal, and some venerable commands, to make this readable for humans too.<BR />
<BR />
Like in the previous <A href="https://blogs.sap.com/2020/04/07/terminal-tip-truncating-cf-output/" target="_blank" rel="noopener noreferrer">Terminal Tip</A>, I found myself creating a shell function "lintlogs" that I could pipe the output of the cf logs command into, to parse and format it nicely.<BR />
<BR />
Because, effectively, all I'm interested in here is a timestamp for each log record, and the text details of what happened. Taking the last log record from the above screenshot as an example, all I want is something like this:<BR />
<PRE><CODE>2020-04-14T07:15:22.102Z Application router is listening on port: 8080</CODE></PRE><BR />
&nbsp;<BR />
<BR />
So, here's what was involved. First, let's take a look at the definition of the "lintlogs" function (printed here over separate lines for readability):<BR />
<PRE><CODE>lintlogs () { <BR />
  grep --line-buffered 'OUT {' <BR />
  | stdbuf -oL cut -d ' ' -f 7- <BR />
  | jq -r '.written_at + " " + .msg';<BR />
}</CODE></PRE><BR />
&nbsp;<BR />
<BR />
First, remember that you define a shell function like this:<BR />
<PRE><CODE>functionname () { ... ; }</CODE></PRE><BR />
&nbsp;<BR />
<BR />
Once it's defined, you can treat it like any other command in the shell, in particular in pipeline processing, i.e. you can pass data to it via STDIO as normal. That means you can pipe the output of one command and have it be the input to this function. That's exactly what's going on here (in the screenshot):<BR />
<PRE><CODE>cf logs desttest | lintlogs</CODE></PRE><BR />
&nbsp;<BR />
<BR />
Now that's clear, let's take the function definition, one command at a time.<BR />
<PRE><CODE>grep --line-buffered 'OUT {'</CODE></PRE><BR />
&nbsp;<BR />
<BR />
Here, we're using the standard <A href="https://en.wikipedia.org/wiki/Grep" target="_blank" rel="nofollow noopener noreferrer">grep</A> command to search for string patterns in the input, in this case, we're looking for this highlighted section of the log lines:<BR />
<P style="overflow: hidden;margin-bottom: 0px"><IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/04/Screenshot-2020-04-14-at-08.15.54.png" /></P><BR />
<P style="overflow: hidden;margin-bottom: 0px">This is a crude but good-enough way to identify this type of log output.</P><BR />
The --line-buffered option for grep turns on line buffering on output, and is essential here so that the streaming output from cf logs makes its way all the way through the pipeline to the end (data would normally be buffered more for performance reasons, but we don't want that here, we want each line to be sent as it arrives).<BR />
<BR />
Now we pipe (|) the lines found by the grep command into the following:<BR />
<PRE><CODE>stdbuf -oL cut -d ' ' -f 7-</CODE></PRE><BR />
&nbsp;<BR />
<BR />
This is actually two commands. The first is <A href="https://linux.die.net/man/1/stdbuf" target="_blank" rel="nofollow noopener noreferrer">stdbuf</A>, which gives us the ability to control STDIO stream buffering for other commands, in this case for the command that follows it, i.e. <A href="https://en.wikipedia.org/wiki/Cut_(Unix)" target="_blank" rel="nofollow noopener noreferrer">cut</A>. The option -oL sets the standard output stream (STDOUT) buffering to line level buffering, the same as what --line-buffered did for grep.<BR />
<BR />
We've seen the use of <A href="https://en.wikipedia.org/wiki/Cut_(Unix)" target="_blank" rel="nofollow noopener noreferrer">cut</A> in the previous Terminal Tip; here, we're saying, with the -d ' ' option, that the delimiter (separator) upon which cut should base its slicing, is a space character. And then, given that we're separating on spaces, with the -f 7- option, we're saying that we want the seventh and subsequent fields, all the way to the end. The effect of this is that we'll just get the JSON output. If you're wondering about why the value 7 is required, look at the raw log output and how untidy it is:<BR />
<PRE><CODE>   2020-04-14T08:15:21.60+0100 [APP/PROC/WEB/0] OUT {"written_at":[...]</CODE></PRE><BR />
&nbsp;<BR />
<BR />
There are actually three spaces at the start of the log line, meaning that this part:<BR />
<PRE><CODE>{"written_at":[...]</CODE></PRE><BR />
&nbsp;<BR />
<BR />
will be the seventh field, when separated by spaces.<BR />
<BR />
Now we have the JSON only, we can pass it into our friend <A href="https://stedolan.github.io/jq/" target="_blank" rel="nofollow noopener noreferrer">jq</A>, the command line JSON processor:<BR />
<PRE><CODE>jq -r '.written_at + " " + .msg'</CODE></PRE><BR />
&nbsp;<BR />
<BR />
Here we request just the value of the 'written_at' and 'msg' properties, separated by a space. The -r option gets jq to give us raw (i.e. unformatted) output.<BR />
<BR />
Putting this altogether into the 'lintlogs' function, I can now monitor apps in CF more comfortably. H<SPAN style="font-size: 1rem">ere's what the same log lines look like now when we pipe the output of cf logs desttest into the lintlogs function:</SPAN><BR />
<P style="overflow: hidden;margin-bottom: 0px"><IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/04/Screenshot-2020-04-14-at-08.01.21.png" /></P><BR />
Much better, no?<BR />
<BR />
You can see the definition and use of this function, and it's inaugural naming by <SPAN class="mention-scrubbed">31a8856c1f6f4bcfa7f3d890a0b88fd2</SPAN>, in the <A href="https://bit.ly/handsonsapdev#ep63" target="_blank" rel="nofollow noopener noreferrer">#HandsOnSAPDev live stream episode 63</A> "Tracing the OAuth 2.0 Authorisation Code grant type with approuter and CF".<BR />
<BR />
Share &amp; enjoy, and remember,&nbsp;<A href="https://twitter.com/search?q=%23TheFutureIsTerminal&amp;src=typed_query" target="_blank" rel="nofollow noopener noreferrer">#TheFutureIsTerminal</A>!
---
Terminal Tip: truncating CF output
technology-blog-sap
2020-04-07
https://community.sap.com/t5/technology-blogs-by-sap/terminal-tip-truncating-cf-output/ba-p/13457577
2020-04-07-terminal-tip-truncating-cf-output
(Find more terminal tips here: <A href="https://blogs.sap.com/tag/terminaltip/" target="_blank" rel="noopener noreferrer">https://blogs.sap.com/tag/terminaltip/</A>)<BR />
<BR />
I am a big fan of the terminal, and it's my preferred work environment for many reasons.<BR />
<BR />
I use the Cloud Foundry CLI <CODE>cf</CODE> frequently in my work on the SAP Cloud Platform but the output options are limited, and sometimes hard to read. One example is the output from <CODE>cf apps</CODE> or <CODE>cf services</CODE> (there are short versions of these two commands, <CODE>cf a</CODE> and <CODE>cf s</CODE> respectively).<BR />
<BR />
This screenshot shows some typical output from the <CODE>cf s</CODE> command:<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/04/Screenshot-2020-04-07-at-09.05.18.png" /><BR />
<BR />
There's a lot of information and it wraps onto new lines. Most of the time my focus is on the names of the service instances, and perhaps the service &amp; plan combination they represent - the information towards the end of the line is less important to me. But it's still being output and making the entire results difficult to read.<BR />
<BR />
With the use of two venerable shell commands, we can fix that.<BR />
<BR />
<CODE><A href="https://en.wikipedia.org/wiki/Tput" target="_blank" rel="nofollow noopener noreferrer">tput</A></CODE> will give us information on the current terminal capabilities. Running <CODE>tput cols</CODE> returns the number of columns in the current terminal.<BR />
<BR />
<A href="https://en.wikipedia.org/wiki/Cut_(Unix)" target="_blank" rel="nofollow noopener noreferrer"><CODE>cut</CODE></A> will slice and dice data in many ways; I use it to pick out various fields from output lines, but it can also pick out ranges of characters too.<BR />
<BR />
A combination of these two commands, also making use of the <A href="http://www.tldp.org/LDP/abs/html/commandsub.html" target="_blank" rel="nofollow noopener noreferrer">command substitution</A> technique with <CODE>$(...)</CODE> (this is the newer &amp; better version of using <CODE>`...`</CODE>backticks) gives us the ability to truncate the output so that it's a lot more readable:<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/04/Screenshot-2020-04-07-at-09.06.22.png" /><BR />
<BR />
Here's a breakdown of the command:<BR />
<BR />
<CODE>cf s | cut -c -$(tput cols)</CODE><BR />
<BR />
Read it like this:<BR />
<OL><BR />
 	<LI>Run the <CODE>cf s</CODE> command</LI><BR />
 	<LI>Pipe the STDOUT of that into the STDIN of the <CODE>cut</CODE> command</LI><BR />
 	<LI>To the <CODE>cut</CODE> command execution, supply a value for the <CODE>-c</CODE> option which selects specific characters</LI><BR />
 	<LI>Which specific characters? Well, the range (x-y) that goes from 1 (implicit) to whatever the command <CODE>tput cols</CODE> outputs.</LI><BR />
 	<LI>In the case of my terminal shown in the screenshots, <CODE>tput cols</CODE> tells me there are 101 columns, so the effective value for the range given to <CODE>-c</CODE> is 1-101.</LI><BR />
</OL><BR />
We can make this useful combination into a handy function by defining a shell function, like this:<BR />
<BR />
<CODE>trunc () { cut -c -$(tput cols); }</CODE><BR />
<BR />
Now we can use <CODE>trunc</CODE> like this:<BR />
<BR />
<CODE>cf s | trunc</CODE><BR />
<BR />
which gives us the same thing. Lovely!<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/04/Screenshot-2020-04-07-at-09.07.14.png" /><BR />
<BR />
Share &amp; enjoy, and remember, <A href="https://twitter.com/search?q=%23TheFutureIsTerminal&amp;src=typed_query" target="_blank" rel="nofollow noopener noreferrer">#TheFutureIsTerminal</A>!
---
Annotated links: Episode 58 of Hands-on SAP dev with qmacro
technology-blog-sap
2020-03-23
https://community.sap.com/t5/technology-blogs-by-sap/annotated-links-episode-58-of-hands-on-sap-dev-with-qmacro/ba-p/13437995
2020-03-23-annotated-links-episode-58-of-hands-on-sap-dev-with-qmacro
<EM>This is a searchable description of the content of a live stream recording, specifically <STRONG>âEp.58 - Digging deeper into OAuth 2.0 for CF APIsâ</STRONG> in the â<A href="https://bit.ly/handsonsapdev" target="_blank" rel="nofollow noopener noreferrer">Hands-on SAP dev with qmacro</A>â series. There are links directly to specific highlights in the video recording. For links to annotations of other episodes, please see the â<A href="https://bit.ly/handsonsapdev#replays" target="_blank" rel="nofollow noopener noreferrer">Catch the replays</A>â section of the series blog post.</EM><BR />
<BR />
This episode was streamed live on Fri 20 Mar and is approximately 60 minutes in length. The stream recording is <A href="https://www.youtube.com/watch?v=AjuwSJeAUy8" target="_blank" rel="nofollow noopener noreferrer">available on YouTube</A>.<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/03/Screenshot-2020-03-23-at-16.00.40.png" /><BR />
<BR />
Brief synopsis: In the previous episode we put the pieces together on how the "Client Credentials" grant type works with the API Hub and the CF Workflow APIs. Now itâs time for us to dig even deeper and look into alternative flows. Buckle up!<BR />
<BR />
<A href="https://www.youtube.com/watch?v=AjuwSJeAUy8&amp;t=00h01m00s" target="_blank" rel="nofollow noopener noreferrer">00:01:00</A> Live stream starts.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=AjuwSJeAUy8&amp;t=00h03m00s" target="_blank" rel="nofollow noopener noreferrer">00:03:00</A> Switching to the main scene showing some Pivotal documentation on OAuth 2.0, specifically describing four <A href="https://docs.pivotal.io/p-identity/1-10/grant-types.html" target="_blank" rel="nofollow noopener noreferrer">OAuth 2.0 Grant Types</A>: âAuthorization Codeâ, âClient Credentialsâ, âResource Owner Passwordâ and âImplicitâ. Considering what weâve done with OAuth so far, we remember that last week we used the âClient Credentialsâ grant type (or âflowâ).<BR />
<BR />
<A href="https://www.youtube.com/watch?v=AjuwSJeAUy8&amp;t=00h07m40s" target="_blank" rel="nofollow noopener noreferrer">00:07:40</A> Earlier on, back in <A href="https://bit.ly/handsonsapdev#ep51" target="_blank" rel="nofollow noopener noreferrer">Ep.51</A> we used the âResource Owner Passwordâ grant type which, as weâll see shortly, was quite controversial!<BR />
<BR />
<A href="https://www.youtube.com/watch?v=AjuwSJeAUy8&amp;t=00h08m15s" target="_blank" rel="nofollow noopener noreferrer">00:08:15</A> Now that weâve established the different grant types (or so we think), we have a brief look at the official OAuth 2.0 website (crazy idea, but hey) and notice something interesting. There are also four grant types listed here, under âmost commonâ â¦ but theyâre not the same four!<BR />
<BR />
Two are the same, specifically âAuthorization Codeâ and âClient Credentialsâ. These, as weâll figure out, are indeed very common and in use in many contexts. But then the other two are different. The first is âDevice Codeâ, which to me seems more of an edge case flow, for âbrowserless or input-constrained devicesâ. The second is more interesting. Itâs âRefresh Tokenâ, which turns out to be what Iâm suddenly going to call a âside flowâ, i.e.&nbsp;related to the âAuthorization Codeâ flow, where an access token can be refreshed.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=AjuwSJeAUy8&amp;t=00h09m40s" target="_blank" rel="nofollow noopener noreferrer">00:09:40</A> Scrolling further down, to our surprise, we see that the other two grant types that we listed already (from the Pivotal page), âImplicitâ and â[Resource Owner] Passwordâ, are listed under the title âLegacyâ! Looking into this a bit more, I came upon a definitive document from the Internet Engineering Task Force (IETF, one of the standards bodies that ensures that the interwebs work well) â<A href="https://tools.ietf.org/html/draft-ietf-oauth-security-topics-13" target="_blank" rel="nofollow noopener noreferrer">OAuth 2.0 Security Best Current Practice</A>, specifically <A href="https://tools.ietf.org/html/draft-ietf-oauth-security-topics-13#section-3.4" target="_blank" rel="nofollow noopener noreferrer">Section 3.4 Resource Owner Password Credentials Grant</A>, where it says <A href="https://tools.ietf.org/html/rfc2119" target="_blank" rel="nofollow noopener noreferrer">in no uncertain terms</A> that this flow MUST NOT be used. For good reasons, explained in the document. Moreover, theâImplicit" flow SHOULD NOT be used either.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=AjuwSJeAUy8&amp;t=00h11m45s" target="_blank" rel="nofollow noopener noreferrer">00:11:45</A> Weâre going to take a deep look at the âAuthorization Codeâ grant type now, which, along with the âClient Credentialsâ grant type, is the most common; and the former is relevant when thereâs a human involved.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=AjuwSJeAUy8&amp;t=00h12m40s" target="_blank" rel="nofollow noopener noreferrer">00:12:40</A> Describing where we left off in the <A href="https://bit.ly/handsonsapdev#ep57" target="_blank" rel="nofollow noopener noreferrer">previous episode</A>, with an instance of the Workflow service, and thereâs a couple of workflow definitions already deployed - <CODE>orderprocess</CODE>, which related to some other activity Iâm involved in, and <CODE>simpleworkflow</CODE> which weâll use for these experiments. Itâs just a definition that starts and then immediately ends.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=AjuwSJeAUy8&amp;t=00h14m15s" target="_blank" rel="nofollow noopener noreferrer">00:14:15</A> Just noting that when you deploy a workflow definition as an MTA module, a service key is generated for you. This is in case the other service key(s) disappear, as, in reality, they should be treated as potentially ephemeral, or at least deletable.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=AjuwSJeAUy8&amp;t=00h15m00s" target="_blank" rel="nofollow noopener noreferrer">00:15:00</A> Moving to the terminal now (yes, <A href="https://twitter.com/search?q=%23TheFutureIsTerminal" target="_blank" rel="nofollow noopener noreferrer">#TheFutureIsTerminal</A> to explore. Iâve already logged into and authenticaed with the CF endpoint with this temporary test user Iâm using today, and looking at the service instance list we can see the workflow service instance there. So far so good.<BR />
<PRE><CODE>-&gt; cf s<BR />
Getting services in org p2001351149trial / space dev ...<BR />
<BR />
name                               service           plan          bound apps                                 last operation     broker                                                       upgrade available<BR />
portal_resources_workflowtiles     portal            standard      workflowtilesApprouter, workflowtilesFLP   create succeeded   sm-portal-fbae912e-4046-4304-90ad-b6d8ed1fa3be<BR />
uaa_workflowtiles                  xsuaa             application   workflowtilesApprouter, workflowtilesFLP   create succeeded   sm-xsuaa-9ef36350-f975-4194-a399-54db361e79b5<BR />
workflow                           workflow          lite          workflowtilesApprouter, workflowtilesFLP   update succeeded   sm-workflow-broker-d2b48385-f83e-4601-9830-0db967aaa2f5<BR />
workflowtiles_html5_repo_runtime   html5-apps-repo   app-runtime   workflowtilesApprouter                     create succeeded   sm-html5-apps-repo-sb-ebcb2b69-24a5-408e-be00-02066b302b78</CODE></PRE><BR />
<A href="https://www.youtube.com/watch?v=AjuwSJeAUy8&amp;t=00h16m10s" target="_blank" rel="nofollow noopener noreferrer">00:16:10</A> We can also take a look at the service keys that we saw summarised in the web interface, like this:<BR />
<PRE><CODE>-&gt; cf service-keys workflow<BR />
Getting keys for service instance workflow ...<BR />
<BR />
name<BR />
OrderProcess-workflow-credentials<BR />
SimpleWorkflow-workflow-credentials</CODE></PRE><BR />
<A href="https://www.youtube.com/watch?v=AjuwSJeAUy8&amp;t=00h16m40s" target="_blank" rel="nofollow noopener noreferrer">00:16:40</A> Grabbing the service key details for the <CODE>SimpleWorkflow-workflow-credentials</CODE> service key so that we can dig into those details programatically later on:<BR />
<PRE><CODE>-&gt; cf service-key workflow SimpleWorkflow-workflow-credentials &gt; keys.json</CODE></PRE><BR />
We have to edit this now to remove the noise that the <CODE>cf</CODE> command spat out when executing this request (<CODE>cf</CODE> is great as itâs a command line tool, but I do think it lacks a certain finesse when it comes to usability, and unfortunately the <CODE>cf curl</CODE> approach, using a completely different API and therefore mental model, is not a good workaround).<BR />
<BR />
While editing, we take a look at some of the detail in the file:<BR />
<PRE><CODE>-&gt; cf service-key workflow SimpleWorkflow-workflow-credentials &gt; keys.json</CODE></PRE><BR />
We have to edit this now to remove the noise that the <CODE>cf</CODE> command spat out when executing this request (<CODE>cf</CODE> is great as itâs a command line tool, but I do t<BR />
hink it lacks a certain finesse when it comes to usability, and unfortunately the <CODE>cf curl</CODE> approach, using a completely different API and therefore mental model, is not a<BR />
good workaround).<BR />
<BR />
While editing, we take a look at some of the detail in the file:<BR />
<PRE><CODE>{                                                                                                                                                                          <BR />
 "content_endpoint": "https://api.workflow-sap.cfapps.eu10.hana.ondemand.com/workflow-deploy/rest/internal/v1",                                                   <BR />
 "endpoints": {<BR />
  "workflow_odata_url": "https://api.workflow-sap.cfapps.eu10.hana.ondemand.com/workflow-service/odata",                                                          <BR />
  "workflow_rest_url": "https://api.workflow-sap.cfapps.eu10.hana.ondemand.com/workflow-service/rest"                                                             <BR />
 },                                                                                                                                                                                   <BR />
 "html5-apps-repo": {                                                                                                                                                       <BR />
  "app_host_id": "2834263a-6e04-4f43-876a-67b81f32306e,1a5b93af-f1af-4acf-aee0-8c6cc8d3f315,8964e911-e35d-4cfd-972e-08e681a2df0f,9ea7410f-80ea-4b19-bbf0-4fca238ef098&amp;qu<BR />
ot;                                                                                                                                                                                   <BR />
 },                                                                                                                                                                                   <BR />
 "saasregistryappname": "workflow",                                                                                                                               <BR />
 "sap.cloud.service": "com.sap.bpm.workflow",                                                                                                                     <BR />
 "uaa": {                                                                                                                                                                   <BR />
  "apiurl": "https://api.authentication.eu10.hana.ondemand.com",                                                                                                  <BR />
  "clientid": "sb-clone-deadbeef-03b2-46bb-bd3d-f00b7d2db0d2!b37882|workflow!b10150",                                                                             <BR />
  "clientsecret": "1090976f-982a-3723-9a5d-723c913aba14$In4EKA1s5AIcfqo_juwHpKwGgh3o_bpYfeyIF0JE1Zg=",                                                            <BR />
  "identityzone": "p2001351149trial",                                                                                                                             <BR />
  "identityzoneid": "0a25d69a-6331-312a-bea9-1e90dc1f941f",                                                                                                       <BR />
  "sburl": "https://internal-xsuaa.authentication.eu10.hana.ondemand.com",                                                                                        <BR />
  "tenantid": "0a25d69a-6331-47ff-bea9-1e90dc1f941f",                                                                                                             <BR />
  "tenantmode": "dedicated",                                                                                                                                      <BR />
  "uaadomain": "authentication.eu10.hana.ondemand.com",<BR />
  "url": "https://p2001351149trial.authentication.eu10.hana.ondemand.com",<BR />
  "verificationkey": "-----BEGIN PUBLIC KEY-----MIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAwThn6OO9kj0bchkOGkqYBnV1dQ3zU/xtj7Kj7nDd8nyRMcEWCtVzrzjzh- [ ] sRhlrzlRIEY82<BR />
wRAZNGKMnw7cvCwNixcfcDJnjzgr2pJ+5/yDZUc0IXXyIWPZD+XdL+0EogC3d4+fqyvg/BF/F0t2hKHWr/UTXE6zrGhBKaL0d8rKfYd6olGWigFd+3+24CKI14zWVxUBtC+P9Fhngc9DRzkXqhxOK/EKn0HzSgotf5duq6Tmk9DCNM4sLW4+ERc<BR />
6xzrgbeEexakabvax/Az9WZ4qhwgw+fwIhKIC7WLwCEJaRs...=-----END PUBLIC KEY-----",<BR />
  "xsappname": "clone-b34de1f8-03b2-12de-bd3d-f00b7d2db0d2!b37882|workflow!b10150"<BR />
 }<BR />
}</CODE></PRE><BR />
<UL><BR />
 	<LI><CODE>endpoints.workflow_rest_url</CODE> is the base URL for the resource server (the Workflow API endpoint, in this case)</LI><BR />
 	<LI><CODE>uaa.clientid</CODE> is the client ID to be used in the flow</LI><BR />
 	<LI><CODE>uaa.clientsecret</CODE> is the client secret to be used in the flow</LI><BR />
 	<LI><CODE>uaa.url</CODE> is the based URL for the authorisation server (for requesting tokens and so on)</LI><BR />
</UL><BR />
<A href="https://www.youtube.com/watch?v=AjuwSJeAUy8&amp;t=00h18m50s" target="_blank" rel="nofollow noopener noreferrer">00:18:50</A> Briefly looking at an updated version of the <CODE>skv</CODE> function we created in the <A href="https://bit.ly/handsonsapdev#ep57" target="_blank" rel="nofollow noopener noreferrer">previous episode</A>, this time allowing me to use it on different JSON files. Hereâs what the definition looks like now:<BR />
<PRE><CODE>skv () { jq -r ."$2" "$1".json; }</CODE></PRE><BR />
So in this context, I can get the <CODE>uaa.url</CODE> value from the keys file like this:<BR />
<PRE><CODE>-&gt; skv keys uaa.url<BR />
<A href="https://p2001351149trial.authentication.eu10.hana.ondemand.com" target="test_blank" rel="nofollow noopener noreferrer">https://p2001351149trial.authentication.eu10.hana.ondemand.com</A></CODE></PRE><BR />
<A href="https://www.youtube.com/watch?v=AjuwSJeAUy8&amp;t=00h20m00s" target="_blank" rel="nofollow noopener noreferrer">00:20:00</A> Before we continue, weâll deliberately wipe out any authorities (scopes) we already have, from the perspective of what may already be allowed at the service instance level (for the âClient Credentialsâ flow), by updating the service instance like this:<BR />
<PRE><CODE>-&gt; cf update-service workflow -c '{"authorities":[]}'<BR />
Updating service instance workflow ...<BR />
OK</CODE></PRE><BR />
This should mean that we wonât have access to make any useful API calls using the âClient Credentialsâ flow.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=AjuwSJeAUy8&amp;t=00h20m45s" target="_blank" rel="nofollow noopener noreferrer">00:20:45</A> Looking briefly at what we have from last time, we still have the contents of the <CODE>~/.netrc</CODE> file with the client ID and secret to be used in a Basic Authentication header in calls to the authorisation server endpoint:<BR />
<PRE><CODE>machine p2001351149trial.authentication.eu10.hana.ondemand.com<BR />
login sb-clone-deadbeef-03b2-46bb-bd3d-f00b7d2db0d2!b37882|workflow!b10150<BR />
password 1090976f-982a-3723-9a5d-723c913aba14$In4EKA1s5AIcfqo_juwHpKwGgh3o_bpYfeyIF0JE1Zg=</CODE></PRE><BR />
<A href="https://www.youtube.com/watch?v=AjuwSJeAUy8&amp;t=00h21m28s" target="_blank" rel="nofollow noopener noreferrer">00:21:28</A> Starting to redo what we did last week, so we can compare that approach to what weâre going to do. This is what we did (using a backslash for <A href="http://www.gnu.org/savannah-checkouts/gnu/bash/manual/bash.html#Escape-Character" target="_blank" rel="nofollow noopener noreferrer">line continuation</A><span class="lia-unicode-emoji" title=":disappointed_face:">ð</span><BR />
<PRE><CODE>-&gt; curl -n \<BR />
&gt; -v \<BR />
&gt; -X POST \<BR />
&gt; "$(skv keys uaa.url)/oauth/token?grant_type=client_credentials" &gt; token.json</CODE></PRE><BR />
<A href="https://www.youtube.com/watch?v=AjuwSJeAUy8&amp;t=00h23m10s" target="_blank" rel="nofollow noopener noreferrer">00:23:10</A> In order to keep things clean and tidy as we move from exploring the âClient Credentialsâ flow to the âAuthorisation Codeâ flow, we now put this <CODE>token.json</CODE> file containing the results of this call into a separate folder signifying the flow that was used. Also, to have the service key details (in the <CODE>keys.json</CODE> file we wrote to earlier) in the same directory, but not repeated, we make a symbolic link, ending up with something like this:<BR />
<PRE><CODE>âââ client_credentials<BR />
â&nbsp;&nbsp; âââ keys.json -&gt; ../keys.json<BR />
â&nbsp;&nbsp; âââ token.json<BR />
âââ keys.json</CODE></PRE><BR />
<A href="https://www.youtube.com/watch?v=AjuwSJeAUy8&amp;t=00h23m30s" target="_blank" rel="nofollow noopener noreferrer">00:23:30</A> Pretty-printing the contents of the <CODE>token.json</CODE> file, we see that we have these properties returned to us:<BR />
<UL><BR />
 	<LI><CODE>access_token</CODE>: the token itself</LI><BR />
 	<LI><CODE>token_type</CODE>: the type of token (itâs a <A href="https://oauth.net/2/bearer-tokens/" target="_blank" rel="nofollow noopener noreferrer">bearer token</A>)</LI><BR />
 	<LI><CODE>expires_in</CODE>: how long the token lives for (we had a fun time guessing what the 43199 value represented, back in <A href="https://bit.ly/handsonsapdev#ep52" target="_blank" rel="nofollow noopener noreferrer">Episode 52</A> - see the <A href="https://blogs.sap.com/2020/02/07/annotated-links-episode-52-of-hands-on-sap-dev-with-qmacro/" target="_blank" rel="noopener noreferrer">annotations blog post</A> for more on that)</LI><BR />
 	<LI><CODE>scope</CODE>: an indication of the access we have with this particular token, in the form of scopes authorised by the UAA</LI><BR />
 	<LI><CODE>jti</CODE>: not mentioned here but this is a unique identifier for this token</LI><BR />
</UL><BR />
<A href="https://www.youtube.com/watch?v=AjuwSJeAUy8&amp;t=00h23m50s" target="_blank" rel="nofollow noopener noreferrer">00:23:50</A> We look at the value of the <CODE>scope</CODE> property using some basic tools, like this:<BR />
<PRE><CODE>-&gt; skv token scope | tr ' ' '\n' | sort<BR />
uaa.resource<BR />
workflow!b10150.FORM_DEFINITION_DEPLOY<BR />
workflow!b10150.TASK_DEFINITION_GET<BR />
workflow!b10150.TASK_GET<BR />
workflow!b10150.WORKFLOW_DEFINITION_DEPLOY</CODE></PRE><BR />
The scopes here relate to deploying artifacts, not anything else.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=AjuwSJeAUy8&amp;t=00h24m40s" target="_blank" rel="nofollow noopener noreferrer">00:24:40</A> With this freshly minted token, we try it out by attempting to list the workflow definitions:<BR />
<PRE><CODE>-&gt; curl -H "Authorization: Bearer $(skv token access_token)" \<BR />
&gt; "$(skv keys endpoints.workflow_rest_url)/v1/workflow-definitions" \<BR />
&gt; | jq .<BR />
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current<BR />
                                 Dload  Upload   Total   Spent    Left  Speed<BR />
100    65  100    65    0     0    137      0 --:--:-- --:--:-- --:--:--   137<BR />
{<BR />
  "error": {<BR />
    "message": "User does not have sufficient privileges."<BR />
  }<BR />
}</CODE></PRE><BR />
A successful fail! <span class="lia-unicode-emoji" title=":slightly_smiling_face:">ð</span> (BTW, we can suppress the progress output from curl with the <CODE>-s</CODE> switch).<BR />
<BR />
<A href="https://www.youtube.com/watch?v=AjuwSJeAUy8&amp;t=00h26m30s" target="_blank" rel="nofollow noopener noreferrer">00:26:30</A> So now we add the required scope back to the service instance, like this:<BR />
<PRE><CODE>-&gt; cf update-service workflow \<BR />
&gt; -c '{"authorities":["WORKFLOW_DEFINITION_GET"]}'<BR />
Updating service instance workflow ...<BR />
OK</CODE></PRE><BR />
Trying again after this, with the same <CODE>access_token</CODE>, gives us a result that we could have predicted, i.e.&nbsp;we still get the âUser does not have sufficient privilegesâ message. This is of course because when minted, that token didnât include the scope weâve just set.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=AjuwSJeAUy8&amp;t=00h27m00s" target="_blank" rel="nofollow noopener noreferrer">00:27:00</A> So, after asking for a new token, we get the result weâre looking for, like this:<BR />
<PRE><CODE>-&gt; curl -s \<BR />
&gt; -H "Authorization: Bearer $(skv token access_token)" \<BR />
&gt; "$(skv keys endpoints.workflow_rest_url)/v1/workflow-definitions"  \<BR />
&gt; | jq .<BR />
[<BR />
  {<BR />
    "id": "simpleworkflow",<BR />
    "version": "1",<BR />
    "name": "simpleworkflow",<BR />
    "createdBy": "sb-clone-deadbeef-03b2-46bb-bd3d-f00b7d2db0d2!b37882|workflow!b10150",<BR />
    "createdAt": "2020-03-20T05:57:50.933Z",<BR />
    "jobs": []<BR />
  },<BR />
  {<BR />
    "id": "orderprocess",<BR />
    "version": "8",<BR />
    "name": "orderprocess",<BR />
    "createdBy": "sb-clone-deadbeef-03b2-46bb-bd3d-f00b7d2db0d2!b37882|workflow!b10150",<BR />
    "createdAt": "2020-03-18T14:29:16.411Z",<BR />
    "jobs": []<BR />
  }<BR />
]</CODE></PRE><BR />
Great.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=AjuwSJeAUy8&amp;t=00h28m00s" target="_blank" rel="nofollow noopener noreferrer">00:28:00</A> At this stage, itâs only fair to mention that when I did this last week, I didnât even notice that I was using the HTTP POST method, when GET would have done the job just as well. The SAP authorisation serverâs service is pretty flexible and supports different ways of making these requests. After all, thereâs a reason that the Perl community motto <A href="https://en.wikipedia.org/wiki/There%27s_more_than_one_way_to_do_it" target="_blank" rel="nofollow noopener noreferrer">TMTOWTDI</A> exists!<BR />
<BR />
So to round out the recap, we try out a couple of alternatives (nothing majorly different, but different enough to look at).<BR />
<BR />
First, the same request format, but via GET:<BR />
<PRE><CODE>-&gt; curl -n \<BR />
&gt; -v \<BR />
&gt; "$(skv keys uaa.url)/oauth/token?grant_type=client_credentials" &gt; token.json</CODE></PRE><BR />
More interestingly, we can use a POST request in a rather different way, like this:<BR />
<PRE><CODE>-&gt; curl -v \<BR />
&gt; -d "grant_type=client_credentials&amp;client_id=$(skv keys uaa.clientid)&amp;client_secret=$(skv keys uaa.clientsecret)" \<BR />
&gt; "$(skv keys uaa.url)/oauth/token" &gt; token.json</CODE></PRE><BR />
This version of the request doesnât pass anything in a Basic Authentication header; instead, it passes the client ID and secret, along with the grant type, in the body of the POST request. Lovely!<BR />
<BR />
I point out here, having just edited the command in an editor before submitting it, that you can do this too; in bash, just set the option like this:<BR />
<PRE><CODE>-&gt; set -o vi</CODE></PRE><BR />
If youâre interested in learning more about vi mode in bash, have a quick watch of this 6 minute video from Luke Smith: <A href="https://www.youtube.com/watch?v=GqoJQft5R2E" target="_blank" rel="nofollow noopener noreferrer">TFW You Learn Thereâs a Vim Mode in Bashâ¦</A>.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=AjuwSJeAUy8&amp;t=00h32m30s" target="_blank" rel="nofollow noopener noreferrer">00:32:30</A> Moving on now to the âAuthorisation Codeâ flow, which is where a HUMAN is involved. Exciting! Ta show the contrast in sharper relief, we first add the scope to be able to start new workflow instances:<BR />
<PRE><CODE>-&gt; cf update-service workflow -c '{"authorities": ["WORKFLOW_DEFINITION_GET", "WORKFLOW_INSTANCE_START"]}'<BR />
Updating service instance workflow ...<BR />
OK</CODE></PRE><BR />
(Remember that the list passed like this is absolute, not relative, so that if weâd just passed âWORKFLOW_INSTANCE_STARTâ weâd have effectively removed âWORKFLOW_DEFINITION_GETâ).<BR />
<BR />
Then, after retrieving a fresh access token like this:<BR />
<PRE><CODE>-&gt; curl -v \<BR />
&gt; -d "grant_type=client_credentials&amp;client_id=$(skv keys uaa.clientid)&amp;client_secret=$(skv keys uaa.clientsecret)" \<BR />
&gt; "$(skv keys uaa.url)/oauth/token" &gt; token.json</CODE></PRE><BR />
we make a successful call to start a new workflow instance, using the <CODE>/v1/workflow-definitions</CODE> API endpoint, like this:<BR />
<PRE><CODE>-&gt; curl -s \<BR />
&gt; -H "Content-Type: application/json" \<BR />
&gt; -H "Authorization: Bearer $(skv token access_token)" \<BR />
&gt; -d '{"definitionId":"simpleworkflow", "context":{"number":42}}' \<BR />
&gt; "$(skv keys endpoints.workflow_rest_url)/v1/workflow-instances" | jq .<BR />
{<BR />
  "id": "1fce48e8-6d08-11ea-855a-eeee0a94224d",<BR />
  "definitionId": "simpleworkflow",<BR />
  "definitionVersion": "1",<BR />
  "subject": "simpleworkflow",<BR />
  "status": "RUNNING",<BR />
  "businessKey": "",<BR />
  "startedAt": "2020-03-23T13:13:44.900Z",<BR />
  "startedBy": "sb-clone-deadbeef-03b2-46bb-bd3d-f00b7d2db0d2!b37882|workflow!b10150",<BR />
  "completedAt": null<BR />
}</CODE></PRE><BR />
(At this point <A href="https://twitter.com/alexellisuk" target="_blank" rel="nofollow noopener noreferrer">Alex Ellis</A> pipes up with a lovely phrase that summarises this hard core session, and which is definitely going on a tshirt (thanks Alex!) - âOAuth at 8amâ!)<BR />
<BR />
<A href="https://www.youtube.com/watch?v=AjuwSJeAUy8&amp;t=00h37m15s" target="_blank" rel="nofollow noopener noreferrer">00:37:15</A> And when we go to the Workflow Monitor to look at this newly created instance (which of course is already in the COMPLETED state) we see that it was âStarted Byâ â¦ the client ID. Not me, not any human, but the curl command identified by the credentials granted to it via the token request for that client ID. Not ideal, but a situation we can solve with the use of the âAuthorisation Codeâ grant type, as weâll see now.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=AjuwSJeAUy8&amp;t=00h40m10s" target="_blank" rel="nofollow noopener noreferrer">00:40:10</A> Armed with the knowledge that two of the four grant types listed on the Pivotal site are now legacy, we revisit the SAP Help Portal pages, specifically the <A href="https://help.sap.com/viewer/e157c391253b4ecd93647bf232d18a83/Cloud/en-US/df943e71122448caaf3c49f5ffd80627.html" target="_blank" rel="noopener noreferrer">Using Workflow APIs</A> section, and now understand why there are only two subsections relating to the access via OAuth:<BR />
<UL><BR />
 	<LI><A href="https://help.sap.com/viewer/e157c391253b4ecd93647bf232d18a83/Cloud/en-US/9edeb36db8aa4628be092328e8810e5e.html" target="_blank" rel="noopener noreferrer">Access Workflow APIs Using OAuth 2.0 Authentication (Authorization Code Grant)</A></LI><BR />
 	<LI><A href="https://help.sap.com/viewer/e157c391253b4ecd93647bf232d18a83/Cloud/en-US/c2bd37c63dda47449e24b8830ba312f1.html" target="_blank" rel="noopener noreferrer">Access Workflow APIs Using OAuth 2.0 Authentication (Client Credentials Grant)</A></LI><BR />
</UL><BR />
Now we know why!<BR />
<BR />
<A href="https://www.youtube.com/watch?v=AjuwSJeAUy8&amp;t=00h40m30s" target="_blank" rel="nofollow noopener noreferrer">00:40:30</A> Looking at the âAuthorisation Codeâ flow details, we see that the flow is slightly longer, but thatâs because a HUMAN is involved, as we saw in the nice diagram on the Pivotal site for that flow section.<BR />
<BR />
This is how the flow goes, as we work through it, this time in a new directory <CODE>authorization_code/</CODE> that we create in a similar way to the first one, so we now have:<BR />
<PRE><CODE>.<BR />
âââ authorization_code<BR />
â&nbsp;&nbsp; âââ keys.json -&gt; ../keys.json<BR />
âââ client_credentials<BR />
â&nbsp;&nbsp; âââ keys.json -&gt; ../keys.json<BR />
â&nbsp;&nbsp; âââ token.json<BR />
âââ keys.json</CODE></PRE><BR />
Step 1 is to generate the URL with which we can request a code, noting that the endpoint URLâs path is <CODE>/oauth/authorize</CODE> as opposed to what weâve seen thus far, i.e. <CODE>/oauth/token</CODE>. This is because weâre not asking for a token directly at this stage.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=AjuwSJeAUy8&amp;t=00h42m50s" target="_blank" rel="nofollow noopener noreferrer">00:42:50</A> We actually need to go to the request URL in our browser, so at this stage we just need to produce the URL, i.e.&nbsp;echo it out to the terminal, so we can grab it to open.<BR />
<BR />
BTW, Iâve aliases a pair of little helpers for URL encoding and decoding, which you can see in my <CODE>~/.bash_aliases</CODE>, as weâll need to URL encode the values in the URLâs query string:<BR />
<PRE><CODE>-&gt; cat ~/.bash_aliases<BR />
alias urldecode='python3 -c "import sys, urllib.parse as ul; print(ul.unquote_plus(sys.argv[1]))"'<BR />
alias urlencode='python3 -c "import sys, urllib.parse as ul; print (ul.quote_plus(sys.argv[1]))"'</CODE></PRE><BR />
OK, so to the creation of the URL:<BR />
<PRE><CODE>-&gt; echo "$(skv keys uaa.url)/oauth/authorize?client_id=$(urlencode `skv keys uaa.clientid`)&amp;response_type=code"<BR />
<A href="https://p2001351149trial.authentication.eu10.hana.ondemand.com/oauth/authorize?client_id=sb-clone-deadbeef-03b2-46bb-bd3d-f00b7d2db0d2%21b37882%7Cworkflow%21b10150&amp;response_type=code" target="test_blank" rel="nofollow noopener noreferrer">https://p2001351149trial.authentication.eu10.hana.ondemand.com/oauth/authorize?client_id=sb-clone-deadbeef-03b2-46bb-bd3d-f00b7d2db0d2%21b37882%7Cworkflow%21b10150&amp;response_type=code</A></CODE></PRE><BR />
<A href="https://www.youtube.com/watch?v=AjuwSJeAUy8&amp;t=00h45m20s" target="_blank" rel="nofollow noopener noreferrer">00:45:20</A> Step 2 is to go to the generated URL, which we do now. And weâre asked, beautifully, to authenticate! Which we do, using my personal credentials in my role as âresource ownerâ here.<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/03/Screenshot-2020-03-23-at-16.15.26.png" /><BR />
<BR />
As a result of that, we get redirected to a URL that contains the code that weâre looking for:<BR />
<BR />
<A class="uri" href="http://localhost:8080?code=zCyAM2lqaQ" target="_blank" rel="nofollow noopener noreferrer">http://localhost:8080?code=zCyAM2lqaQ</A><BR />
<BR />
<A href="https://www.youtube.com/watch?v=AjuwSJeAUy8&amp;t=00h46m10s" target="_blank" rel="nofollow noopener noreferrer">00:46:10</A> Step 3 is to ask for an exchange of that code <CODE>zCyAM2lqaQ</CODE> for an access token. So we do that:<BR />
<PRE><CODE>-&gt; curl -n \<BR />
&gt; -v \<BR />
&gt; "$(skv keys uaa.url)/oauth/token?grant_type=authorization_code&amp;code=zCyAM2lqaQ"</CODE></PRE><BR />
In fact, I forgot to save the (JSON) response into a file, which is a nice mistake to have made, as it illustrated that such codes can only be used once. Trying again to exchange the same code for another access token resulted in an HTTP 400 response. Quite right too!<BR />
<BR />
So we request another code, and this time, when we ask for it to be exchanged for an access token, we save the response into a <CODE>token.json</CODE> file (remember, weâre in the <CODE>authorization_code/</CODE> directory here too).<BR />
<BR />
<A href="https://www.youtube.com/watch?v=AjuwSJeAUy8&amp;t=00h48m25s" target="_blank" rel="nofollow noopener noreferrer">00:48:25</A> Moreover, not only do we have an access token now, but also (and this is something that will hopefully pique <SPAN class="mention-scrubbed">phil.cooley</SPAN>âs interest) a refresh token!<BR />
<BR />
And thereâs more. There are far more scopes related to this access token than weâve seen thus far. The scopes related to the access token that was granted in our âClient Credentialsâ flow look like this:<BR />
<PRE><CODE>-&gt; cd ../client_credentials/<BR />
-&gt; skv token scope | tr ' ' '\n' | sort<BR />
uaa.resource<BR />
workflow!b10150.FORM_DEFINITION_DEPLOY<BR />
workflow!b10150.TASK_DEFINITION_GET<BR />
workflow!b10150.TASK_GET<BR />
workflow!b10150.WORKFLOW_DEFINITION_DEPLOY<BR />
workflow!b10150.WORKFLOW_DEFINITION_GET<BR />
workflow!b10150.WORKFLOW_INSTANCE_START</CODE></PRE><BR />
But the scopes related to the access token we just received, granted in our âAuthorisation Codeâ flow, look like this:<BR />
<PRE><CODE>-&gt; skv token scope | tr ' ' '\n' | sort<BR />
openid<BR />
uaa.user<BR />
workflow!b10150.AUTHORIZE_WITH_INSTANCE_ROLES<BR />
workflow!b10150.FORM_DEFINITION_DEPLOY<BR />
workflow!b10150.FORM_DEFINITION_GET_MODEL<BR />
workflow!b10150.FORM_DEFINITION_GET_MODEL_ANY<BR />
workflow!b10150.IMPERSONATION_TOKEN_GET<BR />
workflow!b10150.READ_FEATURE_FLAGS<BR />
workflow!b10150.RETRIEVE_XSRF_TOKEN<BR />
workflow!b10150.TASK_COMPLETE_ANY<BR />
workflow!b10150.TASK_DEFINITION_QUERY_ANY<BR />
workflow!b10150.TASK_GET_ATTRIBUTES_ANY<BR />
workflow!b10150.TASK_GET_CONTEXT_ANY<BR />
workflow!b10150.TASK_GET_FORM<BR />
workflow!b10150.TASK_GET_FORM_MODEL<BR />
workflow!b10150.TASK_MANAGE_OWN<BR />
workflow!b10150.TASK_PATCH_ANY<BR />
workflow!b10150.TASK_QUERY_ANY<BR />
workflow!b10150.WORKFLOW_DEFINITION_DEPLOY<BR />
workflow!b10150.WORKFLOW_DEFINITION_GET_MODEL<BR />
workflow!b10150.WORKFLOW_DEFINITION_QUERY_ANY<BR />
workflow!b10150.WORKFLOW_DEFINITION_VALIDATE<BR />
workflow!b10150.WORKFLOW_INSTANCE_CANCEL<BR />
workflow!b10150.WORKFLOW_INSTANCE_ERROR_MESSAGES_QUERY<BR />
workflow!b10150.WORKFLOW_INSTANCE_GET_ATTRIBUTES<BR />
workflow!b10150.WORKFLOW_INSTANCE_GET_CONTEXT<BR />
workflow!b10150.WORKFLOW_INSTANCE_QUERY_ANY<BR />
workflow!b10150.WORKFLOW_INSTANCE_QUERY_EXECUTION_LOGS<BR />
workflow!b10150.WORKFLOW_INSTANCE_QUERY_ROLES<BR />
workflow!b10150.WORKFLOW_INSTANCE_RETRY_RESUME<BR />
workflow!b10150.WORKFLOW_INSTANCE_START<BR />
workflow!b10150.WORKFLOW_INSTANCE_SUSPEND<BR />
workflow!b10150.WORKFLOW_INSTANCE_UPDATE_ROLES</CODE></PRE><BR />
Gosh!<BR />
<BR />
<A href="https://www.youtube.com/watch?v=AjuwSJeAUy8&amp;t=00h50m10s" target="_blank" rel="nofollow noopener noreferrer">00:50:10</A> Why is this? Well of course, because the access token has been granted on MY behalf, and I have lots of roles assigned to me via the <CODE>workflow</CODE> role collection, which we look at briefly now.<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/03/Screenshot-2020-03-23-at-16.16.24.png" /><BR />
<BR />
These roles are:<BR />
<UL><BR />
 	<LI>WorkflowAdmin</LI><BR />
 	<LI>WorkflowContextViewer</LI><BR />
 	<LI>WorkflowDeveloper</LI><BR />
 	<LI>WorkflowInitiator</LI><BR />
 	<LI>WorkflowParticipant</LI><BR />
 	<LI>WorkflowViewer</LI><BR />
</UL><BR />
<A href="https://www.youtube.com/watch?v=AjuwSJeAUy8&amp;t=00h50m40s" target="_blank" rel="nofollow noopener noreferrer">00:50:40</A> Now we have this access token, we can try to start a new workflow instance, just like we did before. While the token request and receipt has a different flow (and more importantly a different context), the use of the token in an actual API call is the same.<BR />
<PRE><CODE>-&gt; curl -s \<BR />
&gt; -H "Content-Type: application/json" \<BR />
&gt; -H "Authorization: Bearer $(skv token access_token)" \<BR />
&gt; -d '{"definitionId":"simpleworkflow", "context":{"number":43}}' \<BR />
&gt; "$(skv keys endpoints.workflow_rest_url)/v1/workflow-instances" | jq .<BR />
{<BR />
  "id": "1fce48e8-6d08-11ea-855a-209327de311",<BR />
  "definitionId": "simpleworkflow",<BR />
  "definitionVersion": "1",<BR />
  "subject": "simpleworkflow",<BR />
  "status": "RUNNING",<BR />
  "businessKey": "",<BR />
  "startedAt": "2020-03-23T13:13:44.900Z",<BR />
  "startedBy": "qmacro+workflowcodejam@gmail.com",<BR />
  "completedAt": null<BR />
}</CODE></PRE><BR />
<A href="https://www.youtube.com/watch?v=AjuwSJeAUy8&amp;t=00h53m10s" target="_blank" rel="nofollow noopener noreferrer">00:53:10</A> And which part of these successful results do we think is the most exciting? Well, itâs the value of the <CODE>startedBy</CODE> property, of course! Instead of referring to the non-human client ID, itâs referring to me, the human who actually started the workflow instance.<BR />
<BR />
A quick look via the Workflow Monitor shows this contrast between the different âStarted Byâ values. Great!<BR />
<BR />
<A href="https://www.youtube.com/watch?v=AjuwSJeAUy8&amp;t=00h54m50s" target="_blank" rel="nofollow noopener noreferrer">00:54:50</A> Flushed with this success, we talk briefly about how we might have different clients, different apps, with different access rights (as they might serve different purposes) in the context of the âClient Credentialsâ grant type. And the answer is to have multiple service instances of the workflow service, assign different scopes to these multiple instances, and use the client credentials (ID and secret) from the different service keys connected to these instances accordingly. Now it makes a lot of sense, right?<BR />
<BR />
<A href="https://www.youtube.com/watch?v=AjuwSJeAUy8&amp;t=00h56m10s" target="_blank" rel="nofollow noopener noreferrer">00:56:10</A> In the spirit of âpoke it and see what happensâ, we take a brief look at whether what weâve discovered makes sense and holds when we do something â¦ say, like remove a role from the role collection thatâs assigned to me.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=AjuwSJeAUy8&amp;t=00h56m30s" target="_blank" rel="nofollow noopener noreferrer">00:56:30</A> Before we do anything, we check whatâs in the scope relating to our current (Authorisation Code grant type related) access token. We see the list, which is the same as the one above, which includes the scope:<BR />
<PRE><CODE>workflow!b10150.WORKFLOW_INSTANCE_START</CODE></PRE><BR />
Good.<BR />
<BR />
Now, we remove the WorkflowInitiator role from the role collection thatâs assigned to me. Then we generate a new URL to request a new code, using the same <CODE>echo</CODE> command as before:<BR />
<PRE><CODE>-&gt; echo "$(skv keys uaa.url)/oauth/authorize?client_id=$(urlencode `skv keys uaa.clientid`)&amp;response_type=code"<BR />
<A href="https://p2001351149trial.authentication.eu10.hana.ondemand.com/oauth/authorize?client_id=sb-clone-deadbeef-03b2-46bb-bd3d-f00b7d2db0d2%21b37882%7Cworkflow%21b10150&amp;response_type=code" target="test_blank" rel="nofollow noopener noreferrer">https://p2001351149trial.authentication.eu10.hana.ondemand.com/oauth/authorize?client_id=sb-clone-deadbeef-03b2-46bb-bd3d-f00b7d2db0d2%21b37882%7Cworkflow%21b10150&amp;response_type=code</A></CODE></PRE><BR />
We must do a bit of jiggling about in order to remove the cookies to effectively invalidate my already-authenticated status so that weâll be asked to authenticate again, and once weâve done this, we do indeed get the authentication challenge screen again, asking me for my email address and password.<BR />
<BR />
We then exchange the code we receive for a new access token, and take a look at the scopes:<BR />
<PRE><CODE>-&gt; skv token scope | tr ' ' '\n' | sort<BR />
openid<BR />
uaa.user<BR />
workflow!b10150.AUTHORIZE_WITH_INSTANCE_ROLES<BR />
workflow!b10150.FORM_DEFINITION_DEPLOY<BR />
workflow!b10150.FORM_DEFINITION_GET_MODEL<BR />
workflow!b10150.FORM_DEFINITION_GET_MODEL_ANY<BR />
workflow!b10150.IMPERSONATION_TOKEN_GET<BR />
workflow!b10150.READ_FEATURE_FLAGS<BR />
workflow!b10150.RETRIEVE_XSRF_TOKEN<BR />
workflow!b10150.TASK_COMPLETE_ANY<BR />
workflow!b10150.TASK_DEFINITION_QUERY_ANY<BR />
workflow!b10150.TASK_GET_ATTRIBUTES_ANY<BR />
workflow!b10150.TASK_GET_CONTEXT_ANY<BR />
workflow!b10150.TASK_GET_FORM<BR />
workflow!b10150.TASK_GET_FORM_MODEL<BR />
workflow!b10150.TASK_MANAGE_OWN<BR />
workflow!b10150.TASK_PATCH_ANY<BR />
workflow!b10150.TASK_QUERY_ANY<BR />
workflow!b10150.WORKFLOW_DEFINITION_DEPLOY<BR />
workflow!b10150.WORKFLOW_DEFINITION_GET_MODEL<BR />
workflow!b10150.WORKFLOW_DEFINITION_QUERY_ANY<BR />
workflow!b10150.WORKFLOW_DEFINITION_VALIDATE<BR />
workflow!b10150.WORKFLOW_INSTANCE_CANCEL<BR />
workflow!b10150.WORKFLOW_INSTANCE_ERROR_MESSAGES_QUERY<BR />
workflow!b10150.WORKFLOW_INSTANCE_GET_ATTRIBUTES<BR />
workflow!b10150.WORKFLOW_INSTANCE_GET_CONTEXT<BR />
workflow!b10150.WORKFLOW_INSTANCE_QUERY_ANY<BR />
workflow!b10150.WORKFLOW_INSTANCE_QUERY_EXECUTION_LOGS<BR />
workflow!b10150.WORKFLOW_INSTANCE_QUERY_ROLES<BR />
workflow!b10150.WORKFLOW_INSTANCE_RETRY_RESUME<BR />
workflow!b10150.WORKFLOW_INSTANCE_SUSPEND<BR />
workflow!b10150.WORKFLOW_INSTANCE_UPDATE_ROLES</CODE></PRE><BR />
Can you see whatâs (successfully) missing? Yes, the <CODE>workflow!b10150.WORKFLOW_INSTANCE_START</CODE> scope. This is a direct result of the removal of the WorkflowInitiator role from the workflow role collection assigned to me.<BR />
<BR />
And of course, as you can guess, an attempt to start a new workflow instance fails, with:<BR />
<PRE><CODE>{<BR />
  "error": {<BR />
    "message": "User does not have sufficient privileges."<BR />
  }<BR />
}</CODE></PRE><BR />
Great, this is what we expect.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=AjuwSJeAUy8&amp;t=01h01m50s" target="_blank" rel="nofollow noopener noreferrer">01:01:50</A> As <SPAN class="mention-scrubbed">phil.cooley</SPAN> had been asking about refresh tokens, we extend the episode by a few minutes to see how we can follow the refresh token flow.<BR />
<BR />
First, we have a look at what we have in the <CODE>token.json</CODE> file, remembering which properties are in there:<BR />
<PRE><CODE>-&gt; jq keys token.json<BR />
[<BR />
  "access_token",<BR />
  "expires_in",<BR />
  "id_token",<BR />
  "jti",<BR />
  "refresh_token",<BR />
  "scope",<BR />
  "token_type"<BR />
]</CODE></PRE><BR />
(we didnât use this âkeysâ option of <CODE>jq</CODE> in the live stream but itâs useful for us here).<BR />
<BR />
The flow is described on the same documentation page (<A href="https://help.sap.com/viewer/e157c391253b4ecd93647bf232d18a83/Cloud/en-US/9edeb36db8aa4628be092328e8810e5e.html" target="_blank" rel="noopener noreferrer">Access Workflow APIs Using OAuth 2.0 Authentication (Authorization Code Grant)</A>) and is very simple:<BR />
<PRE><CODE>-&gt; curl -n -v "$(skv keys uaa.url)/oauth/token?grant_type=refresh_token&amp;refresh_token=$(skv token refresh_token)" &gt; refreshed-token.json</CODE></PRE><BR />
(At this stage, we also notice that the use of the value ârefresh_tokenâ for the <CODE>grant_type</CODE> query string parameter is most likely why âRefresh Tokenâ is <A href="https://oauth.net/2/grant-types/" target="_blank" rel="nofollow noopener noreferrer">listed on the OAuth 2.0 website</A> as a first class grant type citizen.)<BR />
<BR />
<A href="https://www.youtube.com/watch?v=AjuwSJeAUy8&amp;t=01h04m35s" target="_blank" rel="nofollow noopener noreferrer">01:04:35</A> Is this new, refreshed access token actually usable? We try it out by trying to get a list of workflow definitions, thus:<BR />
<PRE><CODE>-&gt; curl -s -H "Authorization: Bearer $(skv token access_token)" "$(skv keys endpoints.workflow_rest_url)/v1/workflow-definitions" | jq .<BR />
[<BR />
  {<BR />
    "id": "simpleworkflow",<BR />
    "version": "1",<BR />
    "name": "simpleworkflow",<BR />
    "createdBy": "sb-clone-b34de1f8-03b2-46bb-bd3d-f00b7d2db0d2!b37882|workflow!b10150",<BR />
    "createdAt": "2020-03-20T05:57:50.933Z",<BR />
    "jobs": []<BR />
  },<BR />
  {<BR />
    "id": "orderprocess",<BR />
    "version": "8",<BR />
    "name": "orderprocess",<BR />
    "createdBy": "sb-clone-b34de1f8-03b2-46bb-bd3d-f00b7d2db0d2!b37882|workflow!b10150",<BR />
    "createdAt": "2020-03-18T14:29:16.411Z",<BR />
    "jobs": []<BR />
  }<BR />
]</CODE></PRE><BR />
It is indeed usable - hurray!
---
Annotated links: Episode 57 of Hands-on SAP dev with qmacro
technology-blog-sap
2020-03-13
https://community.sap.com/t5/technology-blogs-by-sap/annotated-links-episode-57-of-hands-on-sap-dev-with-qmacro/ba-p/13428022
2020-03-13-annotated-links-episode-57-of-hands-on-sap-dev-with-qmacro
<EM>This is a searchable description of the content of a live stream recording, specifically <STRONG>âEp.57 - Setting up our first Workflow definition on CFâ</STRONG> in the â<A href="https://bit.ly/handsonsapdev" target="_blank" rel="nofollow noopener noreferrer">Hands-on SAP dev with qmacro</A>â series. There are links directly to specific highlights in the video recording. For links to annotations of other episodes, please see the â<A href="https://bit.ly/handsonsapdev#replays" target="_blank" rel="nofollow noopener noreferrer">Catch the replays</A>â section of the series blog post.</EM><BR />
<BR />
This episode was streamed live on Fri 13 Mar and is approximately 65 minutes in length. The stream recording is <A href="https://www.youtube.com/watch?v=ZE4P__ePFcM" target="_blank" rel="nofollow noopener noreferrer">available on YouTube</A>.<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/03/Screenshot-2020-03-13-at-16.24.18-1.png" /><BR />
<BR />
Brief synopsis: Now we have our Workflow tools set up on Cloud Foundry, itâs time to put them to use, with a simple workflow definition that weâll create and deploy. Whatâs more, we dive into a little OAuth 2.0 adventure of discovery!<BR />
<BR />
<A href="https://www.youtube.com/watch?v=ZE4P__ePFcM&amp;t=00h02m55s" target="_blank" rel="nofollow noopener noreferrer">00:02:55</A> After a brief moment of fail on my part where Iâd forgotten to reconfigure the mic settings since switching back to the MBP for this broadcast, my audio improves so that you can hear what Iâm saying.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=ZE4P__ePFcM&amp;t=00h04m00s" target="_blank" rel="nofollow noopener noreferrer">00:04:00</A> Showing off my Asus Chromebox 3 (i5, 8GB RAM) which, unusually, is not in use so I can hold it up the camera.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=ZE4P__ePFcM&amp;t=00h04m40s" target="_blank" rel="nofollow noopener noreferrer">00:04:40</A> Switching to show <SPAN class="mention-scrubbed">thomas.jung</SPAN>âs <A href="https://www.linkedin.com/feed/update/urn:li:activity:6643842077400592386/" target="_blank" rel="nofollow noopener noreferrer">update</A> on LinkedIn about the SAP Community Coding Challenge Finalist Announcement (with a brief return to the mic fail as itâs configured on a per-scene basis). The announcement is on 17 Mar - and you can head on over to Tomâs scheduled live stream session <A href="https://www.youtube.com/watch?v=4riDYGR_t_o&amp;feature=youtu.be" target="_blank" rel="nofollow noopener noreferrer">here</A> to set a reminder. Find out more about the challenge series in Tomâs post â<A href="https://blogs.sap.com/2020/02/28/sap-community-coding-challenge-series/" target="_blank" rel="noopener noreferrer">SAP Community Coding Challenge Series</A>â.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=ZE4P__ePFcM&amp;t=00h07m15s" target="_blank" rel="nofollow noopener noreferrer">00:07:15</A> Mentioning a new live stream initiative, which is related to our Hands-on SAP dev series. Itâs called <A href="https://www.youtube.com/playlist?list=PLfctWmgNyOIf9rXaZp9RSM2YVxAPGGthe" target="_blank" rel="nofollow noopener noreferrer">Brambleweeny Cluster Experiments</A> and itâs for exploring and learning about clouds, clusters and more, using the physical hardware medium of Raspberry Pi computers. Iâve not set a schedule up yet, and may just do this on a fairly ad-hoc basis, but in any case, watch out on my YouTube <A href="https://youtube.com/djadams-qmacro" target="_blank" rel="nofollow noopener noreferrer">home page</A> for upcoming live stream episodes and set reminders as appropriate. These topics are indeed relevant for us as developers and technicians in the SAP tech universe, and will become more so over time too.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=ZE4P__ePFcM&amp;t=00h09m20s" target="_blank" rel="nofollow noopener noreferrer">00:09:20</A> Looking at where weâd left off at the end of the last episode, with a fully deployed Workflow tools environment in my Cloud Foundry (CF) dev space, including the running <CODE>workflowtilesApprouter</CODE> app and the <CODE>workflowtilesFLP</CODE> app which is in the stopped status as the task (of deploying content to the portal service) had completed successfully.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=ZE4P__ePFcM&amp;t=00h12m00s" target="_blank" rel="nofollow noopener noreferrer">00:12:00</A> Jumping to the tiles in the Fiori Launchpad site, which are available (and to which weâre directed) at the <CODE>/cp.portal</CODE> path, as defined in the <CODE>xs-app.json</CODE>. Following this, I share some thoughts on how itâs important to properly understand OAuth in this context, i.e.&nbsp;in the context of exercising APIs on SAP Cloud Platform Cloud Foundry, to which end I intend to dig in a little bit to better grok how things fit together.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=ZE4P__ePFcM&amp;t=00h16m50s" target="_blank" rel="nofollow noopener noreferrer">00:16:50</A> To create a new workflow definition, and deploy it, we create a new Multi-Target Application template based project. This appears initially very empty, which makes sense as we havenât defined any modules (or dependencies) yet. The entirety of the project looks like this:<BR />
<PRE><CODE>Episode57/<BR />
  |<BR />
  +-- mta.yaml</CODE></PRE><BR />
Even the <CODE>mta.yaml</CODE> contents are very minimal:<BR />
<PRE><CODE>ID: Episode57<BR />
_schema-version: '2.1'<BR />
version: 0.0.1</CODE></PRE><BR />
<A href="https://www.youtube.com/watch?v=ZE4P__ePFcM&amp;t=00h17m50s" target="_blank" rel="nofollow noopener noreferrer">00:17:50</A> Using the context menu, we add a new Workflow Module which then appears in our project, so that we have something recognisable (from working in the SAP Web IDE with the Workflow service on Neo in the past), within our MTA project. We end out with the simplest workflow definition possible (the flow starts and then immediately ends) but itâs enough for now. More importantly, this is what we end up with in our project structure:<BR />
<PRE><CODE>Episode57/<BR />
  |<BR />
  +-- SimpleWorkflow/<BR />
  |     |<BR />
  |     +-- forms/<BR />
  |     +-- sample-data/<BR />
  |     +-- scripts/<BR />
  |     +-- webcontent/<BR />
  |     +-- workflows/<BR />
  |           |<BR />
  |           +-- simpleworkflow.workflow<BR />
  |<BR />
  +-- mta.yaml</CODE></PRE><BR />
(At this point <SPAN class="mention-scrubbed">rsletta</SPAN> arrives on the scene, prompting me to remind folks of the SAP Online Track update he posted recently: <A href="https://www.youtube.com/watch?v=Q-2PcZx3F70" target="_blank" rel="nofollow noopener noreferrer">SAP Online Track - Weekly Update #2</A>.)<BR />
<BR />
Weâve seen this type of module before, as a âcontent deploymentâ type - the <CODE>workflowtilesFLP</CODE> module is of type <CODE>com.sap.portal.content</CODE>, and this time we have a slightly more generic <CODE>com.sap.application.content</CODE> content deployment type that describes our <CODE>SimpleWorkflow</CODE> module.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=ZE4P__ePFcM&amp;t=00h20m50s" target="_blank" rel="nofollow noopener noreferrer">00:20:50</A> While weâre checking this type, we modify the name references for the workflow service instance in our <CODE>mta.yaml</CODE> which have been injected when we created the new <CODE>SimpleWorkflow</CODE> module, also changing the type of that resource to âexistingâ (<CODE>org.cloudfoundry.existing-service</CODE>).<BR />
<BR />
At this point, I also notice that the parameters in this resource definition, are probably not required if weâre specifying an existing service â¦ but then forget to come back and test that theory. While writing up these annotations, I did test it, removing the <CODE>parameters</CODE> node of the <CODE>workflow</CODE> resource definition:<BR />
<PRE><CODE>resources:<BR />
  - name: workflow<BR />
    parameters:               &lt;--- removed<BR />
      service-plan: standard  &lt;--- removed<BR />
      service: workflow       &lt;--- removed<BR />
    type: org.cloudfoundry.existing-service</CODE></PRE><BR />
I can happily confirm that after removing these three lines the deployment still succeeded. Makes sense, right?<BR />
<BR />
<A href="https://www.youtube.com/watch?v=ZE4P__ePFcM&amp;t=00h22m50s" target="_blank" rel="nofollow noopener noreferrer">00:22:50</A> Having checked through everything we build and deploy the MTA (in the same way we would build and deploy any MTA) which causes the <CODE>simpleworkflow</CODE> workflow definition to be deployed to our instance of the workflow service.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=ZE4P__ePFcM&amp;t=00h24m55s" target="_blank" rel="nofollow noopener noreferrer">00:24:55</A> Checking the deployment log, we notice this line:<BR />
<BR />
<EM>Creating service key âSimpleWorkflow-workflow-credentialsâ for service âworkflowââ¦</EM><BR />
<BR />
and weâll see this new service key shortly.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=ZE4P__ePFcM&amp;t=00h25m25s" target="_blank" rel="nofollow noopener noreferrer">00:25:25</A> We see, in the Workflow Definitions app, that we now have this new <CODE>simpleworkflow</CODE> definition alongside a definition Iâd deployed earlier this week (<CODE>orderprocess</CODE>) from another MTA project âOrderFlowâ. We test the definition out by creating an instance of it, and all looks well (remember, we have to widen the status filter to be able to see instances in COMPLETED status).<BR />
<BR />
<A href="https://www.youtube.com/watch?v=ZE4P__ePFcM&amp;t=00h27m10s" target="_blank" rel="nofollow noopener noreferrer">00:27:10</A> At this point, our thoughts turn towards using the SAP API Business Hub, specifically to use the Workflow API to list those definitions. Weâve used the API Hub many times before, for example in the context of the Workflow API for Neo, and the context of the Business Rules API for Cloud Foundry. Here, there are a couple of differences worth mentioning:<BR />
<UL><BR />
 	<LI>The Workflow API for Neo uses Basic Authentication and (as a consequence) also requires the use of CSRF tokens</LI><BR />
 	<LI>The Business Rules API for Cloud Foundry divides the âAPI spaceâ differently, in that it has separate API groups for designtime and runtime artifacts (think of this distinction as the difference between managing the artifacts in the repository - designtime - and actually invoking those APIs - runtime)</LI><BR />
</UL><BR />
Here, the Workflow API for CF, like all the APIs Iâve seen for CF, doesnât use Basic Authentication, but uses OAuth 2.0. This is an open standard that goes way beyond what Basic Authentication has to offer, and supports not only authentication but also authorisation, and does that across multiple parties - users, agents (clients), authentication servers and resource servers. Itâs an accomplished but complex standard â¦ and because itâs at the heart of many things weâll be doing on a day to day basis in real life with Cloud Foundry, itâs important to understand properly.<BR />
<BR />
Considering how the Business Rules APIs are organised, itâs worth noticing that the Workflow APIs are organised slightly differently. Thereâs no distinction between designtime and runtime (if you look at the <A href="https://api.sap.com/api/SAP_CP_Workflow_CF/resource" target="_blank" rel="noopener noreferrer">specifications on the API Hub</A> youâll see that a single API endpoint covers definitions and instances for tasks, workflows and more) but there is a distinction between this main endpoint, known as the âWorkflow REST APIâ, and the âWorkflow OData APIâ which is (surprise surprise) an OData service for task collection management, used in the My Inbox app, for example.<BR />
<BR />
Actually, you can see these endpoints spelled out in the service key data, the relevant section of which looks like this:<BR />
<PRE><CODE>{<BR />
  "endpoints": {<BR />
    "workflow_odata_url": "https://api.workflow-sap.cfapps.eu10.hana.ondemand.com/workflow-service/odata",<BR />
    "workflow_rest_url": "https://api.workflow-sap.cfapps.eu10.hana.ondemand.com/workflow-service/rest"<BR />
  },<BR />
  ...<BR />
}</CODE></PRE><BR />
<A href="https://www.youtube.com/watch?v=ZE4P__ePFcM&amp;t=00h29m30s" target="_blank" rel="nofollow noopener noreferrer">00:29:30</A> Anyway, getting back to what we want to focus on here, which is an initial exploration of OAuth, specifically, as weâll see shortly, the âClient Credentials Grantâ flow. We start with the very convenient configurable âEnvironmentsâ feature of the API Hub. Weâll be eventually able to summise, by poking this black box feature with a stick, that it performs the âClient Credentials Grantâ flow on our behalf, which is nice.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=ZE4P__ePFcM&amp;t=00h30m50s" target="_blank" rel="nofollow noopener noreferrer">00:30:50</A> In order to complete an environment configuration (modulo the slight hiccup with that feature during the live stream), we need to take information from our service key data from the workflow service instance that we have.<BR />
<BR />
First, we need the starting endpoint URL, which is our EU10 specific one, i.e. <CODE><A href="https://api.workflow-sap.cfapps.eu10.hana.ondemand.com/workflow-service/rest" target="test_blank" rel="nofollow noopener noreferrer">https://api.workflow-sap.cfapps.eu10.hana.ondemand.com/workflow-service/rest</A></CODE>. This is, as youâve probably spotted, exactly the value of our <CODE>workflow_rest_url</CODE> endpoint that we looked at earlier, within the <CODE>endpoints</CODE> section.<BR />
<BR />
Next, we need OAuth credentials, in the form of a client ID and secret. And, you guessed it, theyâre also in the service key data, in the <CODE>uaa</CODE> section.<BR />
<BR />
The authentication endpoint is next, in the form of the âToken URLâ (i.e.&nbsp;the URL that weâre going to send our request for a token to). This is (surprise surprise) also in the service key data, at the <CODE>uaa.url</CODE> node, and in our case itâs <CODE><A href="https://i347491trial.authentication.eu10.hana.ondemand.com" target="test_blank" rel="nofollow noopener noreferrer">https://i347491trial.authentication.eu10.hana.ondemand.com</A></CODE> which is based on the combination of the generic <CODE><A href="https://authentication.eu10.hana.ondemand.com" target="test_blank" rel="nofollow noopener noreferrer">https://authentication.eu10.hana.ondemand.com</A></CODE> URL with a hostname prefix reflecting my subaccount name <CODE>i347491trial</CODE>.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=ZE4P__ePFcM&amp;t=00h36m20s" target="_blank" rel="nofollow noopener noreferrer">00:36:20</A> Now that we have our âEU10â environment configured, we go to make an API call to list the workflow definitions, expecting to see the two we know about, i.e. <CODE>simpleworkflow</CODE> and <CODE>orderprocess</CODE>. We use the âTry outâ facility for this API endpoint:<BR />
<PRE><CODE>GET /v1/workflow-definitions</CODE></PRE><BR />
BUT â¦ this is what we get:<BR />
<PRE><CODE>{<BR />
  "error": {<BR />
    "message": "User does not have sufficient privileges."<BR />
  }<BR />
}</CODE></PRE><BR />
which accompanies an HTTP 403 response. Ouch! Why is this? Well, read on to find out. It will all make sense, when we dig into this a bit more.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=ZE4P__ePFcM&amp;t=00h37m20s" target="_blank" rel="nofollow noopener noreferrer">00:37:20</A> While trying to figure out why we get a 403 response (âForbiddenâ, of course, learn your <A href="https://i347491trial.authentication.eu10.hana.ondemand.com" target="_blank" rel="nofollow noopener noreferrer">HTTP response codes</A> if you donât know them already!), we go over to the subaccount level security settings and check that the role collection âworkflowâ, containing a myriad roles relating to workflow (WorkflowAdmin, WorkflowContextViewer, WorkflowDeveloper, et al.) giving me pretty much all access, is assigned to my user. Which it is.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=ZE4P__ePFcM&amp;t=00h38m45s" target="_blank" rel="nofollow noopener noreferrer">00:38:45</A> Taking a step back to look at the documentation at the top of this API endpoint, we see this:<BR />
<BR />
<EM>Roles permitted to execute this operation:</EM> <EM>- Global roles: WorkflowViewer, WorkflowAdmin, WorkflowDeveloper</EM> <EM>- Scope: WORKFLOW_DEFINITION_GET</EM><BR />
<BR />
The thing is, I have those roles listed, but <STRONG>I am not involved in the authentication flow here</STRONG>.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=ZE4P__ePFcM&amp;t=00h40m40s" target="_blank" rel="nofollow noopener noreferrer">00:40:40</A> Checking the SAP Help Portal, we see there are two sections relating to accessing workflow APIs using OAuth:<BR />
<UL><BR />
 	<LI><A href="https://help.sap.com/viewer/e157c391253b4ecd93647bf232d18a83/Cloud/en-US/9edeb36db8aa4628be092328e8810e5e.html" target="_blank" rel="noopener noreferrer">Access Workflow APIs Using OAuth 2.0 Authentication (Authorization Code Grant)</A></LI><BR />
 	<LI><A href="https://help.sap.com/viewer/e157c391253b4ecd93647bf232d18a83/Cloud/en-US/c2bd37c63dda47449e24b8830ba312f1.html" target="_blank" rel="noopener noreferrer">Access Workflow APIs Using OAuth 2.0 Authentication (Client Credentials Grant)</A></LI><BR />
</UL><BR />
While the âAuthorization Code Grantâ flow would involve me as a participant in the flow, whatâs being used in the API Hub environment and what it does for us, is the âClient Credentials Grantâ flow. This doesnât involve any request to an end user (me) to supply credentials (my email address and password), so how could any roles assigned to me be relevant here? Theyâre not.<BR />
<BR />
The âClient Credentials Grantâ flow is something weâve actually seen - and used - before. It involves requesting an access token, using the client ID and secret, and then using that token as a bearer token in an authentication header when making the actual API calls. To refresh your memory, you might want to check out the annotation blog post for, or recording of, <A href="https://bit.ly/handsonsapdev#ep51" target="_blank" rel="nofollow noopener noreferrer">Ep.51 - More fun with Business Rules API and OAuth</A>.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=ZE4P__ePFcM&amp;t=00h43m00s" target="_blank" rel="nofollow noopener noreferrer">00:43:00</A> In this flow, itâs not any global roles that are relevant - itâs the <STRONG>scopes</STRONG> that are relevant, the scopes that are, in the form of so-called âauthoritiesâ, assigned to the service instance. And the scope thatâs required in this particular case is, as we now know, âWORKFLOW_DEFINITION_GETâ.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=ZE4P__ePFcM&amp;t=00h44m20s" target="_blank" rel="nofollow noopener noreferrer">00:44:20</A> So to solve the authentication issue we have, we need to add that scope to the service instance. We do that using the command line CF CLI <CODE>cf</CODE>.<BR />
<BR />
First, letâs see what service keys there are:<BR />
<PRE><CODE>-&gt; cf service-keys workflow<BR />
<BR />
Getting keys for service instance workflow as dj.adams@sap.com...<BR />
<BR />
name<BR />
OrderProcess-workflow-credentials<BR />
SimpleWorkflow--workflow-credentials</CODE></PRE><BR />
Now, letâs have a look at the second one specifically:<BR />
<PRE><CODE>-&gt; cf service-key workflow SimpleWorkflow-workflow-credentials<BR />
<BR />
Getting key SimpleWorkflow-workflow-credentials for service instance workflow as dj.adams@sap.com...<BR />
<BR />
{<BR />
 "content_endpoint": "https://api.workflow-sap.cfapps.eu10.hana.ondemand.com/workflow-deploy/rest/internal/v1",<BR />
 "endpoints": {<BR />
  "workflow_odata_url": "https://api.workflow-sap.cfapps.eu10.hana.ondemand.com/workflow-service/odata",<BR />
  "workflow_rest_url": "https://api.workflow-sap.cfapps.eu10.hana.ondemand.com/workflow-service/rest"<BR />
 },<BR />
 "html5-apps-repo": {<BR />
  "app_host_id": "1365363a-6e04-4f43-876a-67b81f32306e,1a5b93af-f1af-4acf-aee0-8c6cc8d3f315,8964e911-e35d-4cfd-972e-08e681a2df0f,9ea7410f-80ea-4b19-bbf0-4fca238ef098"<BR />
 },<BR />
 "saasregistryappname": "workflow",<BR />
 "sap.cloud.service": "com.sap.bpm.workflow",<BR />
 "uaa": {<BR />
  "apiurl": "https://api.authentication.eu10.hana.ondemand.com",<BR />
  "clientid": "sb-clone-9316c623-329a-4b3f-aacd-13cf03...",<BR />
  "clientsecret": "8f72614b-db26-42dd-9293-6139b1ffcecc$P-zEsLD...",<BR />
  "identityzone": "i347491trial",<BR />
  "identityzoneid": "119daf21-ae67-4ced-9bd3-5cddb5...",<BR />
  "sburl": "https://internal-xsuaa.authentication.eu10.hana.ondemand.com",<BR />
  "tenantid": "119daf21-ae67-4ced-9bd3-5cddb5...",<BR />
  "tenantmode": "dedicated",<BR />
  "uaadomain": "authentication.eu10.hana.ondemand.com",<BR />
  "url": "https://i347491trial.authentication.eu10.hana.ondemand.com",<BR />
  "verificationkey": "-----BEGIN PUBLIC KEY-----MIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAwThn6OO9kj0bchkOGkqYBnV1dQ3zU/xtj7Kj7nDd8nyRMcEWCtVzrzjzh- [ ] sRhlrzlRIEY82wRAZNGKMnw7cvCwNixcfcDJnjzgr2pJ+5/yDZUc0IXXyIWPZD+XdL+0EogC3d4+fqyvg/BF/F0t2hKHWr/UTXE6zrGhBKaL0d8rKfYd6olGWigFd+3+24CKI14zWVxUBtC+P9Fhngc9DRzkXqhxOK/EKn0HzSgotf5duq6Tmk9DCNM4sLW4+ERc6xzrgbeEexakabvax/Az9WZ4qhwgw+fwIhKIC7WLwCEJaRsW4m7NKkv+eJR2LKYesuQ9SVAJ3EXV86RwdnH4uAv7lQHsKURPVAQBlranSqyQu0EXs2N9OlWTxe+FyNkIvyZvoLrZl/CdlYc8AKxRm5rn2/88nkrYQ0XZSrnICM5FRWgVF2hn5KfZGwtBN85/D4Yck6B3ocMfyX7e4URUm9lRPQFUJGTXaZnEIge0R159HUwhTN1HvyXrs6uT1ZZmW+c3p47dw1+LmUf/hIf8zd+uvHQjIeHEJqxjqfyA8yqAFKRHKVFrwnwdMHIsRap2EKBhHMfeVf0P2th5C9MggYoGCvdIaIUgMBX3TtCdvGrcWML7hnyS2zkrlA8SoKJnRcRF2KxWKs355FhpHpzqyZflO5l98+O8wO...==-----END PUBLIC KEY-----",<BR />
  "xsappname": "clone-9316c623-329a-4b3f-aacd-13cf030e0216!b35963|workflow!b10150"<BR />
 }<BR />
}</CODE></PRE><BR />
<A href="https://www.youtube.com/watch?v=ZE4P__ePFcM&amp;t=00h45m35s" target="_blank" rel="nofollow noopener noreferrer">00:45:35</A> This is great, and weâll use this shortly, but for now, we want to add that scope to the instance.<BR />
<BR />
We can do this with the CF cli again, like this:<BR />
<PRE><CODE>-&gt; cf update-service workflow -c '{"authorities": ["WORKFLOW_DEFINITION_GET"]}'<BR />
Updating service instance workflow as dj.adams@sap.com...<BR />
OK</CODE></PRE><BR />
(Note that this list is absolute, not relative, so whatever is specified in the <CODE>[...]</CODE> list <STRONG>replaces</STRONG> whatâs already there.)<BR />
<BR />
<A href="https://www.youtube.com/watch?v=ZE4P__ePFcM&amp;t=00h47m40s" target="_blank" rel="nofollow noopener noreferrer">00:47:40</A> Now when we try the API call in the API Hub again, it works! We have the appropriate authorisations to list the workflow definitions, and we see the result:<BR />
<PRE><CODE>[<BR />
  {<BR />
    "id": "simpleworkflow",<BR />
    "version": "2",<BR />
    "name": "simpleworkflow",<BR />
    "createdBy": "sb-clone-9316c623-329a-4b3f-aacd-13cf030e0216!b35963|workflow!b10150",<BR />
    "createdAt": "2020-03-13T10:49:17.018Z",<BR />
    "jobs": []<BR />
  },<BR />
  {<BR />
    "id": "orderprocess",<BR />
    "version": "1",<BR />
    "name": "orderprocess",<BR />
    "createdBy": "sb-clone-9316c623-329a-4b3f-aacd-13cf030e0216!b35963|workflow!b10150",<BR />
    "createdAt": "2020-03-10T11:01:02.084Z",<BR />
    "jobs": []<BR />
  }<BR />
]</CODE></PRE><BR />
This also suggests that each time we make an API call in the API Hub, it probably goes through the entire Client Credentials Grant flow (otherwise, if it had reused the token, it would still have failed. In other words, the token returned reflects whatâs allowed).<BR />
<BR />
<A href="https://www.youtube.com/watch?v=ZE4P__ePFcM&amp;t=00h49m00s" target="_blank" rel="nofollow noopener noreferrer">00:49:00</A> <SPAN class="mention-scrubbed">31a8856c1f6f4bcfa7f3d890a0b88fd2</SPAN> mentions something in the chat that is a bit of a hint which reminds me of what weâve seen before but sort of ignored until now. That is, when creating a workflow service instance in the Cockpit with the âNew Instanceâ button, we go through the wizard and thereâs a âSpecify Parameters (Optional)â step â¦ that has a default value that looks like this:<BR />
<PRE><CODE>{<BR />
  "authorities": []<BR />
}</CODE></PRE><BR />
In other words, when we created the workflow instance a while back, we created it and <EM>explicitly</EM> (albeit unknowingly, at the time) said that it should have (from an Client Credentials Grant OAuth flow perspective) no authorities, no scopes. So itâs no wonder that when we first tried to make the API call to <CODE>/v1/workflow-definitions</CODE> in the API Hub, we were greeted by a 403 response!<BR />
<BR />
<A href="https://www.youtube.com/watch?v=ZE4P__ePFcM&amp;t=00h51m00s" target="_blank" rel="nofollow noopener noreferrer">00:51:00</A> We double check our understanding by removing the âWORKFLOW_DEFINITION_GETâ scope again from the instance, like this:<BR />
<PRE><CODE>-&gt; cf update-service workflow -c '{"authorities":[]}'<BR />
Updating service instance workflow as dj.adams@sap.com...</CODE></PRE><BR />
and noting that on retrying this API call, we get the 403 error again. Nice!<BR />
<BR />
<A href="https://www.youtube.com/watch?v=ZE4P__ePFcM&amp;t=00h53m20s" target="_blank" rel="nofollow noopener noreferrer">00:53:20</A> In the final stage of this episode, thereâs just enough time to dig in a little bit to how this Client Credentials Grant flow works â¦ and in fact, regulars of this live stream series already know how it works, because weâve used it before, albeit in a different context (the Business Rules CF API).<BR />
<BR />
<A href="https://www.youtube.com/watch?v=ZE4P__ePFcM&amp;t=00h54m00s" target="_blank" rel="nofollow noopener noreferrer">00:54:00</A> A short digression (digress? moi?) on what I think is a nicer way to enter JSON to a command. Instead of typing this:<BR />
<PRE><CODE>-&gt; cf update-service workflow -c '{"authorities": ["WORKFLOW_DEFINITION_GET"]}'</CODE></PRE><BR />
which involves lots of commas, double quotes and so on, we can type this:<BR />
<PRE><CODE>-&gt; cf update-service workflow -c $(yq r -j -)<BR />
authorities:<BR />
- WORKFLOW_DEFINITION_GET</CODE></PRE><BR />
which uses the <CODE>yq</CODE> tool to convert the YAML to JSON. Now I like that!<BR />
<BR />
<A href="https://www.youtube.com/watch?v=ZE4P__ePFcM&amp;t=00h55m30s" target="_blank" rel="nofollow noopener noreferrer">00:55:30</A> To work through this, we start at the command line, bearing in mind the prerequisites described in the documentation for <A href="https://help.sap.com/viewer/e157c391253b4ecd93647bf232d18a83/Cloud/en-US/c2bd37c63dda47449e24b8830ba312f1.html" target="_blank" rel="noopener noreferrer">Access Workflow APIs using OAuth 2.0 Authentication (Client Credentials Grant)</A>.<BR />
<BR />
We can use the command line to our advantage (remember, <A href="https://twitter.com/search?q=%23TheFutureIsTerminal" target="_blank" rel="nofollow noopener noreferrer">#TheFutureIsTerminal</A>!), as follows.<BR />
<BR />
First, we grab the service keys data for the workflow instance, specifically for the <CODE>SimpleWorkflow-workflow-credentials</CODE> service key:<BR />
<PRE><CODE>cf service-key workflow SimpleWorkflow-workflow-credentials &gt; keys.json</CODE></PRE><BR />
At this point we note that the output from various <CODE>cf</CODE> commands is really rather messy, in that we get headings as well as data, which we have to tidy up each time. Ugh. Anyway.<BR />
<BR />
We can now grab service key values using <CODE>jq</CODE>, which is nice; and we take a closer look at all the keys including the <CODE>endpoints</CODE> and <CODE>uaa</CODE> nodes that we saw earlier.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=ZE4P__ePFcM&amp;t=00h58m20s" target="_blank" rel="nofollow noopener noreferrer">00:58:20</A> Given that one of the philosophies of the Unix command line is âsmall pieces loosely joinedâ, we create a simple throwaway shell function (called âskvâ, for âservice key valueâ) that gives us some convenience for dipping into this rich seam of values:<BR />
<PRE><CODE>-&gt; skv () { jq -r "$1" keys.json; }</CODE></PRE><BR />
Now we can use this very comfortably, like this:<BR />
<PRE><CODE>-&gt; skv .uaa.clientid<BR />
sb-clone-9316c623-329a-4b3f-aacd-13cf03...</CODE></PRE><BR />
<A href="https://www.youtube.com/watch?v=ZE4P__ePFcM&amp;t=00h59m30s" target="_blank" rel="nofollow noopener noreferrer">00:59:30</A> At this stage, we turn to the next part of the documentation which instructs us to request an access token from the OAuth 2.0 endpoint, which we do, also updating the <CODE>.netrc</CODE> values for our authentication endpoint as we want to tell <CODE>curl</CODE> to use <CODE>.netrc</CODE>.<BR />
<BR />
This is what we end up doing to make the access token request and store the result in a file:<BR />
<PRE><CODE>-&gt; curl -n -v -X POST "$(skv .uaa.url)/oauth/token?grant_type=client_credentials" &gt; token.json</CODE></PRE><BR />
<A href="https://www.youtube.com/watch?v=ZE4P__ePFcM&amp;t=01h02m50s" target="_blank" rel="nofollow noopener noreferrer">01:02:50</A> Now we have the access token to use in an authorisation header for the actual API call, as weâve done before, and we get the result weâre expecting!<BR />
<PRE><CODE>-&gt; curl -H "Authorization: Bearer $(jq -r .access_token token.json)" \<BR />
&gt; "$(skv .endpoints.workflow_rest_url)/v1/workflow-definitions" | jq .<BR />
[<BR />
  {<BR />
    "id": "simpleworkflow",<BR />
    "version": "2",<BR />
    "name": "simpleworkflow",<BR />
    "createdBy": "sb-clone-9316c623-329a-4b3f-aacd-13cf030e0216!b35963|workflow!b10150",<BR />
    "createdAt": "2020-03-13T10:49:17.018Z",<BR />
    "jobs": []<BR />
  },<BR />
  {<BR />
    "id": "orderprocess",<BR />
    "version": "1",<BR />
    "name": "orderprocess",<BR />
    "createdBy": "sb-clone-9316c623-329a-4b3f-aacd-13cf030e0216!b35963|workflow!b10150",<BR />
    "createdAt": "2020-03-10T11:01:02.084Z",<BR />
    "jobs": []<BR />
  }<BR />
]</CODE></PRE><BR />
And thatâs it for this episode. Hopefully that makes some sense, thereâs a lot more to discover, especially the other flow which is the Authorisation Code Grant type, which weâll try next time.<BR />
<BR />
Just before we finish, <SPAN class="mention-scrubbed">iinside</SPAN> points out that thereâs also <CODE>cf curl</CODE> which is definitely worth looking into for more predictable and parseable output from <CODE>cf</CODE>. Thanks Max!
---
Annotated links: Episode 53 of Hands-on SAP dev with qmacro
technology-blog-sap
2020-02-14
https://community.sap.com/t5/technology-blogs-by-sap/annotated-links-episode-53-of-hands-on-sap-dev-with-qmacro/ba-p/13425974
2020-02-14-annotated-links-episode-53-of-hands-on-sap-dev-with-qmacro
<EM>This is a searchable description of the content of a live stream recording, specifically <STRONG>âEp.53 - Starting to construct a HandsOnSAPDev info APIâ</STRONG> in the â<A href="https://bit.ly/handsonsapdev" target="_blank" rel="nofollow noopener noreferrer">Hands-on SAP dev with qmacro</A>â series. There are links directly to specific highlights in the video recording. For links to annotations of other episodes, please see the â<A href="https://bit.ly/handsonsapdev#replays" target="_blank" rel="nofollow noopener noreferrer">Catch the replays</A>â section of the series blog post.</EM><BR />
<BR />
This episode was streamed live on Fri 14 Feb 2020 and is approximately 60 minutes in length. The stream recording is <A href="https://www.youtube.com/watch?v=1-9vsPn2eF0" target="_blank" rel="nofollow noopener noreferrer">available on YouTube</A>.<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/02/Screenshot-2020-02-14-at-15.19.17.png" /><BR />
<BR />
Brief synopsis: In previous episodes, and particularly in Ep.52, we chatted about introducing a way to programmatically search for episodes of this series, by title, tag, date, or someother metadata. We talked about the possibility of an OData service (CAP-powered, of course) and / or an npm module on the GitHub package registry. In this episode weâll make some first steps towards this goal.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=1-9vsPn2eF0&amp;t=00h01m00s" target="_blank" rel="nofollow noopener noreferrer">00:01:00</A> Stream starts, welcome to the Valentineâs Day stream!<BR />
<BR />
<A href="https://www.youtube.com/watch?v=1-9vsPn2eF0&amp;t=00h02m30s" target="_blank" rel="nofollow noopener noreferrer">00:02:30</A> Moving to the description of what weâre going to do on the stream today, with a bit of an explanationof how the topics we want to cover can interweave with other topics that I also want to work on such as the Workflow Service on Cloud Foundry. As <SPAN class="mention-scrubbed">31a8856c1f6f4bcfa7f3d890a0b88fd2</SPAN> said in the chat, too - so many topics, so little time!<BR />
<BR />
<A href="https://www.youtube.com/watch?v=1-9vsPn2eF0&amp;t=00h04m50s" target="_blank" rel="nofollow noopener noreferrer">00:04:50</A> Celebrating the fact that <SPAN class="mention-scrubbed">pieter.janssens</SPAN> has caught up with every episode recording, which is quite a feat! Some stickers coming your way, Pieter, congratulations!<BR />
<BR />
<A href="https://www.youtube.com/watch?v=1-9vsPn2eF0&amp;t=00h05m45s" target="_blank" rel="nofollow noopener noreferrer">00:05:45</A> Pointing out the Valentineâs Day gift I gave to M this morning - the <A href="https://mathsgear.co.uk/products/amicable-numbers-pair-of-keyrings-nerd-romance" target="_blank" rel="nofollow noopener noreferrer">Amicable Numbers pair of keyrings</A> that I got from Maths Gear. Very nice!<BR />
<BR />
<A href="https://www.youtube.com/watch?v=1-9vsPn2eF0&amp;t=00h07m30s" target="_blank" rel="nofollow noopener noreferrer">00:07:30</A> Talking about the approach to what weâre setting off on doing, building as we go, making âthe simplest thing that could possibly workâ, a phrase I learned from one of my heroes <A href="https://en.wikipedia.org/wiki/Ward_Cunningham" target="_blank" rel="nofollow noopener noreferrer">Ward Cunningham</A> (inventor of the Wiki and much more). You can listen to an interview with him on my <A href="https://qmacro.org/2019/09/17/new-podcast-tech-aloud/" target="_blank" rel="nofollow noopener noreferrer">Tech Aloud podcast</A>, specifically this episode: <A href="https://anchor.fm/tech-aloud/episodes/The-Simplest-Thing-that-Could-Possibly-Work--A-conversation-with-Ward-Cunningham--Part-V---Bill-Venners-e5dpts" target="_blank" rel="nofollow noopener noreferrer">The Simplest Thing that Could Possibly Work, A conversation with Ward Cunningham, Part V with Bill Venners</A>.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=1-9vsPn2eF0&amp;t=00h09m10s" target="_blank" rel="nofollow noopener noreferrer">00:09:10</A> Thinking of the two different forms the API could or should take - an HTTP-based service (CAP-based OData, of course) (and then perhaps a GraphQL endpoint if thereâs interest) plus a JSON representation of the entityset in the form of the value exported from an installable Node.js npm module. Sort of an âonline and offlineâ pair of API endpoints.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=1-9vsPn2eF0&amp;t=00h11m15s" target="_blank" rel="nofollow noopener noreferrer">00:11:15</A> A quick shoutout to <A href="https://openui5.org/ui5con/belgium2020/" target="_blank" rel="nofollow noopener noreferrer">UI5con Belgium</A>, including a<A href="https://twitter.com/nicgoris/status/1228062175601795073" target="_blank" rel="nofollow noopener noreferrer">tweet</A> from <SPAN class="mention-scrubbed">nicolasgoris</SPAN> listing the live stream (and recording) links.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=1-9vsPn2eF0&amp;t=00h12m10s" target="_blank" rel="nofollow noopener noreferrer">00:12:10</A> Sharing link to a great video from <A href="https://www.youtube.com/channel/UCgdeMp2ZBnovi12THmLc47g" target="_blank" rel="nofollow noopener noreferrer">Harry Wolff</A> which takes you through the new <A href="https://github.com/features/packages" target="_blank" rel="nofollow noopener noreferrer">GitHub Package Registry</A> in 10 mins, showing how to create and publish a package and thenconsume it. Well worth watching: <A href="https://www.youtube.com/watch?v=2-77KhGWlRg" target="_blank" rel="nofollow noopener noreferrer">How to use the GitHub Package Registry</A>. Thereâs also the GitHub documentation on this subject, which is what weâre about to loosely follow to get things set up: <A href="https://help.github.com/en/packages/using-github-packages-with-your-projects-ecosystem/configuring-npm-for-use-with-github-packages" target="_blank" rel="nofollow noopener noreferrer">Configuring npm for use with GitHub Packages</A>.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=1-9vsPn2eF0&amp;t=00h13m20s" target="_blank" rel="nofollow noopener noreferrer">00:13:20</A> A quick discussion on npm package scopes. Originally there was just the main npm registry (at <A href="https://npmjs.com" target="_blank" rel="nofollow noopener noreferrer">npmjs.com</A>) but since then there are other registries for so-called âscopedâ packages, i.e.&nbsp;packages with a sort of n~amespace prefix. We know of one of those, of course, the SAP npm registry, which is at <A href="https://npm.sap.com" target="_blank" rel="noopener noreferrer">npm.sap.com</A> and contains lots of goodness including the <CODE><a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a>/cds-dk</CODE> package family. With initiativeslike the GitHub Package Registry, package sharing and reuse is now democratised, in that anyone can publish packages in their own scope, which in this case reflects that personâs usernameon GitHub. So for example (and this is what weâre about to do) I can publish packages in the <CODE><a href="https://community.sap.com/t5/user/viewprofilepage/user-id/53">@qmacro</a></CODE> scope.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=1-9vsPn2eF0&amp;t=00h16m30s" target="_blank" rel="nofollow noopener noreferrer">00:16:30</A> Mentioning another GitHub feature that appeared last year, and thatâs <A href="https://github.com/features/actions" target="_blank" rel="nofollow noopener noreferrer">GitHub Actions</A>, which is what Iâd also like to include in this melting pot of tech and ideas. Itâs a way of automating software development workflows, and is super powerful. I use it every day in the management of my own activities tracking (which I do as issues in a project in a GitHub repo, displayed and managed in a Kanban style board), and at this point I <A href="https://github.com/qmacro/test" target="_blank" rel="nofollow noopener noreferrer">demonstrate a version</A> of what Iâd previously built - a GitHub action to <A href="https://github.com/qmacro/action-add-issue-to-project-column" target="_blank" rel="nofollow noopener noreferrer">add an issue to a projectâs column</A>.<BR />
<BR />
The idea is that we could potentially use the GitHub Actions feature to automatically build new versions of the npm flavour of the API, and publish a new version, when another episode was added to the OData service and appeared there. But I havenât yet thought any of that through - I think it will be fun and educational to explore this together.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=1-9vsPn2eF0&amp;t=00h21m20s" target="_blank" rel="nofollow noopener noreferrer">00:21:20</A> Starting to go through the process of publishing a simple npm package (module) on the GitHub Package Registry, in my own namespace (scope) <CODE><a href="https://community.sap.com/t5/user/viewprofilepage/user-id/53">@qmacro</a></CODE>.<BR />
<BR />
First, we generate a <A href="https://github.com/settings/tokens" target="_blank" rel="nofollow noopener noreferrer">Personal Access Token</A>, with the appropriate authorisation scopes set, with which we can then use to authenticate the npm CLI with the GitHub Package Registry endpoint.<BR />
<BR />
I have to be careful here not to reveal the token (altho Iâve already deleted it since the live stream ended) which I do by juggling screen displays around â¦ whereupon long-time #HandsOnSAPDev family member <A href="https://twitter.com/roberdinhoNL" target="_blank" rel="nofollow noopener noreferrer">Roberdinho</A> reminds us that I used to use a âsuper sekritâ scene in OBS.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=1-9vsPn2eF0&amp;t=00h23m20s" target="_blank" rel="nofollow noopener noreferrer">00:23:20</A> To store the freshly generated token I use the trusty <CODE>pass</CODE> program to save it in a new node.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=1-9vsPn2eF0&amp;t=00h24m25s" target="_blank" rel="nofollow noopener noreferrer">00:24:25</A> Next we create a new barebones npm package <CODE>hosd</CODE> (short for HandsOnSAPDev of course) thus:<BR />
<PRE><CODE>â mkdir hosd &amp;&amp; cd $_ &amp;&amp; npm init -y</CODE></PRE><BR />
<A href="https://www.youtube.com/watch?v=1-9vsPn2eF0&amp;t=00h25m15s" target="_blank" rel="nofollow noopener noreferrer">00:25:15</A> Now we can authenticate our local npm environment (via the <CODE>npm</CODE> command) with the remote package registry at GitHub which we do like this:<BR />
<PRE><CODE>â npm login --registry=https://npm.pkg.github.com<BR />
Username: qmacro<BR />
Password: &lt;this is where we paste the token in&gt;<BR />
Email: (this IS public): dj.adams@pobox.com</CODE></PRE><BR />
supplying our username, token, and email address.<BR />
<BR />
This results in the authentication being stored in our home <CODE>.npmrc</CODE> file, which we have a brief look at shortly.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=1-9vsPn2eF0&amp;t=00h26m50s" target="_blank" rel="nofollow noopener noreferrer">00:26:50</A> At this stage weâre ready to start building out our fledgling package, and so compose the âsimplest thing that could possibly workâ in terms of what we want to export by default, in <CODE>index.js</CODE>:<BR />
<PRE><CODE>module.exports = 42</CODE></PRE><BR />
We can test this out immediately and locally like this:<BR />
<PRE><CODE>â node<BR />
&gt; const life = require('./index')<BR />
undefined<BR />
&gt; life<BR />
42<BR />
&gt;</CODE></PRE><BR />
<A href="https://www.youtube.com/watch?v=1-9vsPn2eF0&amp;t=00h28m20s" target="_blank" rel="nofollow noopener noreferrer">00:28:20</A> Now we create a project-local <CODE>.npmrc</CODE> file containing a reference to the user-specific npm package registry endpoint on GitHub, that reflects âmyâ packages:<BR />
<PRE><CODE>registry=https://npm.pkg.github.com/qmacro</CODE></PRE><BR />
<A href="https://www.youtube.com/watch?v=1-9vsPn2eF0&amp;t=00h28m50s" target="_blank" rel="nofollow noopener noreferrer">00:28:50</A> The last step in setting this package up for publishing is to ensure the right values are specified in the <CODE>package.json</CODE> file, paying particular attention to the value for the <CODE>name</CODE> (<CODE><a href="https://community.sap.com/t5/user/viewprofilepage/user-id/53">@qmacro</a>/hosd</CODE>) and <CODE>repository:url</CODE> (<CODE>git://github.com/qmacro/hosd.git</CODE>) properties. We end up with contents like this:<BR />
<PRE><CODE>{<BR />
  "name": "@qmacro/hosd",<BR />
  "version": "1.0.1",<BR />
  "description": "",<BR />
  "main": "index.js",<BR />
  "scripts": {<BR />
    "test": "echo \"Error: no test specified\" &amp;&amp; exit 1"<BR />
  },<BR />
  "repository": {<BR />
    "url": "git://github.com/qmacro/hosd.git"<BR />
  },<BR />
  "keywords": [],<BR />
  "author": "",<BR />
  "license": "ISC"<BR />
}</CODE></PRE><BR />
<A href="https://www.youtube.com/watch?v=1-9vsPn2eF0&amp;t=00h30m10s" target="_blank" rel="nofollow noopener noreferrer">00:30:10</A> Weâre almost ready to publish the package! But first, thereâs something we need to do, of course, andthatâs to get the repository set up locally (on my machine) and also remotely (on GitHub). So first we set everything up locally:<BR />
<PRE><CODE>â git init<BR />
â git add .<BR />
â git commit -m 'initial commit'</CODE></PRE><BR />
Now we have to set up the repo on GitHub. And for this, rather than use the native GUI in the browser (yes, kids, donât forget, native means Web â¦ anything else is âOS-specificâ! ;-)) we use one of the two (two!) command line GitHub clients.<BR />
<BR />
Announced this week was the new <A href="https://github.blog/2020-02-12-supercharge-your-command-line-experience-github-cli-is-now-in-beta/" target="_blank" rel="nofollow noopener noreferrer">gh</A> but thereâs also the existing <A href="https://github.com/github/hub" target="_blank" rel="nofollow noopener noreferrer">hub</A> which I only discovered a week or so ago, and have been enjoying using ever since.<BR />
<BR />
With <CODE>hub</CODE> we create the repo remotely, which still feels a little bit like magic:<BR />
<PRE><CODE>â hub create hosd<BR />
Updating origin<BR />
<A href="https://github.com/qmacro/hosd" target="test_blank" rel="nofollow noopener noreferrer">https://github.com/qmacro/hosd</A></CODE></PRE><BR />
This not only creates <A href="https://github.com/qmacro/hosd" target="_blank" rel="nofollow noopener noreferrer">the repo on GitHub</A> but also adds it as a remote to this local repo, as we can see when we check:<BR />
<PRE><CODE>â git remote -v<BR />
origin git@github.com:qmacro/hosd.git (fetch)<BR />
origin git@github.com:qmacro/hosd.git (push)</CODE></PRE><BR />
We make immediate use of this by pushing our changes:<BR />
<PRE><CODE>â git push -u origin master</CODE></PRE><BR />
<A href="https://www.youtube.com/watch?v=1-9vsPn2eF0&amp;t=00h34m25s" target="_blank" rel="nofollow noopener noreferrer">00:34:25</A> Now is the time for publishing our fledgling package!<BR />
<BR />
Just before we do, we take a look at what files we have, and the sight of the project-local <CODE>.npmrc</CODE> file reminds me to share a peek inside the main file in my home directory, i.e.&nbsp;<CODE>~/.npmrc</CODE>. I use <CODE>cut</CODE> to only show a certain slice of characters, so as not to reveal the entire token, and with that we can see the configuration I have:<BR />
<PRE><CODE>â cut -c1-45 ~/.npmrc<BR />
@sap:registry=https://npm.sap.com<BR />
@qmacro:registry=https://npm.pkg.github.com<BR />
depth=0<BR />
//npm.pkg.github.com/:_authToken=0f868fab3c0b</CODE></PRE><BR />
This includes pointers to the registries for <CODE><a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a></CODE> scoped packages and for <CODE><a href="https://community.sap.com/t5/user/viewprofilepage/user-id/53">@qmacro</a></CODE> scoped packages, and in the last line you can see how the token auth is stored.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=1-9vsPn2eF0&amp;t=00h36m42s" target="_blank" rel="nofollow noopener noreferrer">00:36:42</A> So, letâs do it:<BR />
<PRE><CODE>â npm publish<BR />
npm notice<BR />
npm notice ?  @qmacro/hosd@1.0.0<BR />
npm notice === Tarball Contents ===<BR />
npm notice 20B  index.js<BR />
npm notice 295B package.json<BR />
npm notice === Tarball Details ===<BR />
npm notice name:          @qmacro/hosd<BR />
npm notice version:       1.0.0<BR />
npm notice package size:  335 B<BR />
npm notice unpacked size: 315 B<BR />
npm notice shasum:        ca4f0f7bbd3bda931e05d49899fae6e6376b4fd0<BR />
npm notice integrity:     sha512-UdkPTdS4IUvMa[...]1Fch9aOqm1Chg==<BR />
npm notice total files:   2<BR />
npm notice<BR />
+ @qmacro/hosd@1.0.0</CODE></PRE><BR />
Success! And we see this package reflected in the repo on GitHub, in the âPackageâ section, with instructions on how to consume it (which is basically the same as everywhere else, i.e.&nbsp;<CODE>npm install <a href="https://community.sap.com/t5/user/viewprofilepage/user-id/53">@qmacro</a>/hosd@1.0.0</CODE>). So we give it a quick try, first by installing it:<BR />
<PRE><CODE>â mkdir consume &amp;&amp; cd $_ &amp;&amp; npm init -y<BR />
â npm install @qmacro/hosd</CODE></PRE><BR />
And then by using it in a simple script:<BR />
<PRE><CODE>const life = require('@qmacro/hosd')<BR />
console.log(life)</CODE></PRE><BR />
Which happily (but unsurprisingly) produces the result we want:<BR />
<PRE><CODE>â node index.js<BR />
42</CODE></PRE><BR />
<A href="https://www.youtube.com/watch?v=1-9vsPn2eF0&amp;t=00h41m35s" target="_blank" rel="nofollow noopener noreferrer">00:41:35</A> At this stage we can start to imagine what this could eventually look like, i.e.&nbsp;instead of the scalar value 42, weâd emit an object that reflected the metadata of the HandsOnSAPDev series of episodes, a bit like this:<BR />
<PRE><CODE>module.exports = [<BR />
  { ID: 0,<BR />
    title: "Getting our feet wet",<BR />
    topics: "adventofcode,javascript,nodemon"<BR />
  }<BR />
]</CODE></PRE><BR />
This could be the basis of a local, âtrain-compatibleâ API, but whatâs more, it could be sourced from the âupstreamâ online API which will be in the form of a RESTful endpoint (yes, the CAP Node.js OData service that weâre about to start building).<BR />
<BR />
<A href="https://www.youtube.com/watch?v=1-9vsPn2eF0&amp;t=00h44m10s" target="_blank" rel="nofollow noopener noreferrer">00:44:10</A> Now itâs time to turn our attention to kicking off this OData service, by having a look at the metadata I gathered just before going live on the stream. Itâs (for now, to keep things simple) a list of episodes, with ID, title and some comma-separated topics, and in an <A href="https://docs.google.com/spreadsheets/d/1Uwl7gcZLh9sXEz8LHtQmRwXE0_RTmkk-bVVeUX40bpk/edit?usp=sharing" target="_blank" rel="nofollow noopener noreferrer">online spreadsheet</A> that I can easily export to CSV.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=1-9vsPn2eF0&amp;t=00h44m40s" target="_blank" rel="nofollow noopener noreferrer">00:44:40</A> Iâd originally experimented with storing the metadata as issues in a GitHub repo and pulling those out programmatically, but while GitHub repo issues are awesome, they didnât quite stretch to the various bits of metadata I wanted to store about the Episodes. I did however show how to pullissues, in the terminal, on the command line, from a repo, with the new <CODE>gh</CODE> command line tool mentioned earlier, which works out which repo is relevant based on the local repoyouâre already in (in this instance, qmacro/test):<BR />
<PRE><CODE>qmacro@penguin:~/local/projects/github.com/qmacro/test<BR />
â gh issue list<BR />
<BR />
Issues for qmacro/test<BR />
<BR />
#35  handsonsapdev demo issue   (bug)<BR />
#34  and another issue, hurray  (episode, javascript, nodejs)<BR />
#33  new issue                  (cap, episode)</CODE></PRE><BR />
(I donât particularly like the âIssues for qmacro/testâ heading that is output, it reminds me of how the Cloud Foundry command line tool <CODE>cf</CODE> produces output, with headers that also get in the way, but anyway, what do I know?)<BR />
<BR />
<A href="https://www.youtube.com/watch?v=1-9vsPn2eF0&amp;t=00h46m30s" target="_blank" rel="nofollow noopener noreferrer">00:46:30</A> Starting a new CAP project to kick things off from the OData service perspective, and at least at theoutset I intend to follow the âsimplest thing that could possibly workâ approach again. There are many ways to organise data like this (episodes, topics, and many-to-many relationships between them), including the use of link entities, as described in the <A href="https://cap.cloud.sap/docs/guides/domain-models#managed-many-to-many-associations" target="_blank" rel="nofollow noopener noreferrer">Domain Models - Managed Many-To-Many Associations</A> section of the CAP documentation.<BR />
<BR />
But for now letâs keep it simple, and just have a single String type property with the topics in there, comma-separated. Thatâs not half as bad as it seems, as weâll be able to use thepower of OData system query options such as <A href="https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part2-url-conventions.html#_Toc31360982" target="_blank" rel="nofollow noopener noreferrer">contains</A>.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=1-9vsPn2eF0&amp;t=00h47m30s" target="_blank" rel="nofollow noopener noreferrer">00:47:30</A> Checking we have the latest <CODE><a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a>/cds-dk</CODE> installed globally (remember the <CODE>depth=0</CODE> setting in <CODE>~/.npmrc</CODE> is limiting the output here to something much more useful):<BR />
<PRE><CODE>â npm list -g<BR />
/home/qmacro/.config/nvm/versions/node/v10.17.0/lib<BR />
âââ @sap/cds-dk@1.4.4<BR />
âââ mbt@1.0.8<BR />
âââ npm@6.13.7</CODE></PRE><BR />
we initiate a new CAP Node.js project thus:<BR />
<PRE><CODE>â cds init handsonsapdev<BR />
[cds] - creating new project in ./handsonsapdev<BR />
done.<BR />
...</CODE></PRE><BR />
and add the simplest combination of data model and service definition that we can get:<BR />
<BR />
<CODE>db/schema.cds</CODE>:<BR />
<PRE><CODE>namespace qmacro;<BR />
<BR />
entity Episodes {<BR />
  key ID    : Integer;<BR />
  title     : String;<BR />
  topics    : String;<BR />
}</CODE></PRE><BR />
<CODE>srv/service.cds</CODE>:<BR />
<PRE><CODE>using qmacro from '../db/schema';<BR />
<BR />
service handsonsapdev {<BR />
<BR />
  entity Episodes as projection on qmacro.Episodes;<BR />
<BR />
}</CODE></PRE><BR />
We do take a look at the <A href="https://cap.cloud.sap/docs/cds/common#code-lists" target="_blank" rel="nofollow noopener noreferrer"><CODE>CodeList</CODE></A> aspect as something we might use at some stage for the management of the topics, but save that up for another time.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=1-9vsPn2eF0&amp;t=00h52m10s" target="_blank" rel="nofollow noopener noreferrer">00:52:10</A> We bring in the downloaded CSV file into the right place, as the right name (<CODE>db/csv/qmacro-Episodes.csv</CODE> of course), install the npm <CODE>sqlite3</CODE> package, and deploy. And lo &amp; behold, we have our OData service. Thanks CAP!<BR />
<BR />
<A href="https://www.youtube.com/watch?v=1-9vsPn2eF0&amp;t=00h56m20s" target="_blank" rel="nofollow noopener noreferrer">00:56:20</A> At this stage we can grab the value of the <CODE>value</CODE> property in the JSON representation of the Episodes entityset, using the classic combo of <CODE>curl</CODE> and <CODE>jq</CODE>, like this:<BR />
<PRE><CODE>â curl <A href="http://localhost:4004/handsonsapdev/Episodes" target="test_blank" rel="nofollow noopener noreferrer">http://localhost:4004/handsonsapdev/Episodes</A> | jq -rc '.value'<BR />
[{"ID":0,"title":"Getting our feet wet","topics":"javascript,nodemon,nodejs,adventofcode"},{"ID":1,"title":"Setting up for the Node.js flavoured version of SAPâs Cloud Application Programming Model","topics":"nodejs,cap,npm,vscode,editorconfig,cf,cloudfoundry,fzf,jq,cds"},{"ID":2,"title":"Starting to build a bookshop backend service with CAPM","topics":"bookshop,cap,nodejs,cds"},{"ID":3,"title":"Special guest edition: Interview with core CAPM developers from the mothership!","topics":"guest,christiangeorgi,vscode,cap,cds"},{"ID":4,"title":"Debugging CAPM and a look at the cds REPL","topics":"nodejs,repl,debugging,cap,cds"},{"ID":5,"title":"Continuation ...","topics":"businessrules,cloudplatform,cloudfoundry,api,curl,netrc,ansible,raspberrypi"},{"ID":50,"title":"Calling our Business Rule viathe runtime API","topics":"businessrules,cloudplatform,cloudfoundry,api,curl,netrc,bash,oauth,cds,cap"},{"ID":51,"title":"More fun with Business Rules API and OAuth","topics":"businessrules,cloudplatform,cloudfoundry,api,curl,netrc,bash,oauth,apihub,javascript"},{"ID":52,"title":"Tidying up the JS script for Business Rules OAuth flow","topics":"ssh,javascript,businessrules,api,oauth,docker,dry"}]</CODE></PRE><BR />
(output redacted)<BR />
<BR />
<A href="https://www.youtube.com/watch?v=1-9vsPn2eF0&amp;t=00h57m50s" target="_blank" rel="nofollow noopener noreferrer">00:57:50</A> Adding this JSON to the <CODE><a href="https://community.sap.com/t5/user/viewprofilepage/user-id/53">@qmacro</a>/hosd</CODE> packageâs <CODE>index.js</CODE>, i.e.&nbsp;setting the data to be the thing that is exported by default, we can now access that data with <CODE>require</CODE>. Lovely!<BR />
<BR />
<A href="https://www.youtube.com/watch?v=1-9vsPn2eF0&amp;t=00h59m10s" target="_blank" rel="nofollow noopener noreferrer">00:59:10</A> Incrementing the patch level of the <CODE><a href="https://community.sap.com/t5/user/viewprofilepage/user-id/53">@qmacro</a>/hosd</CODE> package (in <CODE>package.json</CODE>) and republishing the package, we then use <CODE>npm update</CODE> in our consumer project and see that it has indeed worked:<BR />
<PRE><CODE>â node<BR />
&gt; const eps = require('@qmacro/hosd')<BR />
undefined<BR />
&gt; eps.filter(x =&gt; x.topics.match(/businessrules/))<BR />
[ { ID: 40,<BR />
    title: 'Catchup from SAP TechEd',<BR />
    topics:<BR />
     'cap,cds,composition,association,deepinsert,capcommunityrepo,teched,apihub,businessrules' },<BR />
  { ID: 41,<BR />
    title: 'Business Rules API on the BTP',<BR />
    topics: 'businessrules,cloudplatform,neo,bash,curl,api' },<BR />
  { ID: 44,<BR />
    title: 'Business Rules in Cloud Foundry â setting things up',<BR />
    topics: 'cloudplatform,cloudfoundry,businessrules' },<BR />
  { ID: 48,<BR />
    title: 'Continuing with the Business Rules service on CF',<BR />
    topics: 'businessrules,mta,cloudplatform,cloudfoundry,cf,mbt' },<BR />
  { ID: 49,<BR />
    title: 'Defining our first Business Rules project',<BR />
    topics:<BR />
     'businessrules,cloudplatform,cloudfoundry,api,curl,netrc,ansible,raspberrypi' },<BR />
  { ID: 50,<BR />
    title: 'Calling our Business Rule via the runtime API',<BR />
    topics:<BR />
     'businessrules,cloudplatform,cloudfoundry,api,curl,netrc,bash,oauth,cds,cap' },<BR />
  { ID: 51,<BR />
    title: 'More fun with Business Rules API and OAuth',<BR />
    topics:<BR />
     'businessrules,cloudplatform,cloudfoundry,api,curl,netrc,bash,oauth,apihub,javascript' },<BR />
  { ID: 52,<BR />
    title: 'Tidying up the JS script for Business Rules OAuth flow',<BR />
    topics: 'ssh,javascript,businessrules,api,oauth,docker,dry' } ]<BR />
&gt;</CODE></PRE><BR />
Wonderful!<BR />
<BR />
Thatâs it for this episode - a lot of stuff to take in, but hopefully it all fits together in our brains. And sets us up for some interesting learning and discovery together too.<BR />
<BR />
Thanks for joining and taking part â¦ and remember - <A href="https://twitter.com/search?q=%23TheFutureIsTerminal" target="_blank" rel="nofollow noopener noreferrer">#TheFutureIsTerminal</A>!
---
Annotated links: Episode 52 of Hands-on SAP dev with qmacro
technology-blog-sap
2020-02-07
https://community.sap.com/t5/technology-blogs-by-sap/annotated-links-episode-52-of-hands-on-sap-dev-with-qmacro/ba-p/13451752
2020-02-07-annotated-links-episode-52-of-hands-on-sap-dev-with-qmacro
<EM>This is a searchable description of the content of a live stream recording, specifically <STRONG>âEp.52 - Tidying up the JS script for Business Rules OAuth flowâ</STRONG> in the â<A href="https://bit.ly/handsonsapdev" target="_blank" rel="nofollow noopener noreferrer">Hands-on SAP devwith qmacro</A>â series. There are links directly to specific highlights in the video recording. For links to annotations of other episodes, please see the â<A href="https://bit.ly/handsonsapdev#replays" target="_blank" rel="nofollow noopener noreferrer">Catch the replays</A>â section of the series blog post.</EM><BR />
<BR />
This episode was streamed live on Fri 07 Feb 2020 and is approximately 60 minutes in length. The stream recording is <A href="https://www.youtube.com/watch?v=pyV_2G5MOTk" target="_blank" rel="nofollow noopener noreferrer">available on YouTube</A>.<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/02/Screenshot-2020-02-07-at-12.10.52.png" /><BR />
<BR />
Brief synopsis: In Ep.51 we finished on a cliffhanger - having retrieved a bearer token by authenticating using the resource owner password credentials grant flow, we made the call to the runtime API endpoint, but got a 401. Find out why in this episode, and work with me on making the script neater and more reusable.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=pyV_2G5MOTk&amp;t=00h01m55s" target="_blank" rel="nofollow noopener noreferrer">00:01:55</A> Stream starts.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=pyV_2G5MOTk&amp;t=00h04m55s" target="_blank" rel="nofollow noopener noreferrer">00:04:55</A> Highlighting a series of blog posts from <SPAN class="mention-scrubbed">vitaliy.rudnytskiy</SPAN> on the subject of containers in general, and Docker in particular. Iâm enjoying these posts, which Witalij has tagged with the user tag <A href="https://blogs.sap.com/tag/understandcontainers/" target="_blank" rel="noopener noreferrer">UnderstandContainers</A> so you can find them easily. Thanks Witalij!<BR />
<BR />
<A href="https://www.youtube.com/watch?v=pyV_2G5MOTk&amp;t=00h06m25s" target="_blank" rel="nofollow noopener noreferrer">00:06:25</A> Highlighted this morning by <SPAN class="mention-scrubbed">jakob_bourne</SPAN> is a post on deploying an ABAP stack server on Kubernetes, by <SPAN class="mention-scrubbed">richard.treu</SPAN> - <A href="https://blogs.sap.com/2020/02/06/proof-of-concept-deploying-abap-in-kubernetes/" target="_blank" rel="noopener noreferrer">Proof of Concept: Deploying ABAP in Kubernetes</A>. A fascinating experiment, even more so because of my recent interest in containers and Kubernetes.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=pyV_2G5MOTk&amp;t=00h08m15s" target="_blank" rel="nofollow noopener noreferrer">00:08:15</A> This post reminded me that I wanted to show a lovely example of a Terminal User Interface (TUI), in the form of a frontend for managing Kubernetes resources - <A href="https://github.com/derailed/k9s" target="_blank" rel="nofollow noopener noreferrer">k9s</A>. Itâs an implementation of a wonderful (and well established) idea - the ability to have a user interface thatâs efficient, attractive to power users, with great key bindings, no requirement to use the mouse, and can run pretty much anywhere.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=pyV_2G5MOTk&amp;t=00h08m50s" target="_blank" rel="nofollow noopener noreferrer">00:08:50</A> Showing off my recent âfunctorâ tshirt, which I like very much <span class="lia-unicode-emoji" title=":slightly_smiling_face:">ð</span><BR />
<BR />
<A href="https://www.youtube.com/watch?v=pyV_2G5MOTk&amp;t=00h10m00s" target="_blank" rel="nofollow noopener noreferrer">00:10:00</A> Connecting via <CODE>ssh</CODE> to my host âgargantubrainâ (an old MBP on the shelves behind me), to demonstrate <CODE>k9s</CODE> which Iâd already installed and connected to the Kubernetes installation provided by <A href="https://kubernetes.io/docs/tasks/tools/install-minikube/" target="_blank" rel="nofollow noopener noreferrer">Minikube</A>.<BR />
<BR />
I mentioned that I found it useful that while I was the user âqmacroâ on the local host âpenguinâ I didnât have to explicitly specify the user âdjâ that I needed to be over on âgargantubrainâ â normally it would have attempted to connect as âqmacro@gargantubrainâ which would have failed. And thatâs because of the richness of <CODE>ssh</CODE> which Iâve been looking into as part of <A href="https://blogs.sap.com/2020/01/12/my-learning-list-for-2020/" target="_blank" rel="noopener noreferrer">my learning list for 2020</A>.<BR />
<BR />
I didnât actually show how Iâd set that up, so Iâll explain now; I maintain <CODE>ssh</CODE> configuration in <CODE>~/.ssh/config</CODE> and it looks like this:<BR />
<PRE><CODE>Host pixel<BR />
     Port 8022<BR />
<BR />
Host github.com<BR />
     ForwardX11 no<BR />
<BR />
Host c02w4e8ff9zq<BR />
     User i347491<BR />
<BR />
Host zino gargantubrain<BR />
     User dj<BR />
<BR />
Host *<BR />
     ForwardX11 yes</CODE></PRE><BR />
So you can see that part of this says that when connecting to âgargantubrainâ, connect as the user âdjâ. Nice!<BR />
<BR />
For those wondering, I like to forward X11, another one of my 2020 topics to dig into more, when Iâm connecting to any host, apart from âgithub.comâ of course, which is just to use ssh to authenticate to interact with repositories with <CODE>git</CODE>.<BR />
<BR />
(And yes, some of you guessed that the name âgargantubrainâ comes from <A href="https://hitchhikers.fandom.com/wiki/Milliard_Gargantubrain" target="_blank" rel="nofollow noopener noreferrer">The Hitch Hikerâs Guide To The Galaxy</A> of course).<BR />
<BR />
<A href="https://www.youtube.com/watch?v=pyV_2G5MOTk&amp;t=00h11m20s" target="_blank" rel="nofollow noopener noreferrer">00:11:20</A> Talking of Kubernetes, I mention a great book that Iâm reading, by <A href="https://www.jeffgeerling.com/" target="_blank" rel="nofollow noopener noreferrer">Jeff Geerling</A>, called <A href="https://www.ansibleforkubernetes.com/" target="_blank" rel="nofollow noopener noreferrer">Ansible for Kubernetes</A>, which is teaching me not only about Kubernetes but about Ansible too, and also Docker. Recommended.<BR />
<BR />
Moreover, talking of Docker, I bring up another TUI in the form of <A href="https://moncho.github.io/dry/" target="_blank" rel="nofollow noopener noreferrer">dry - a Docker manager for the terminal</A>. We have a look at this too, having paused briefly to marvel at the power of running tools without having to install them - <STRONG>as Docker containers</STRONG> â¦ which in turn reminds me of <A href="https://www.npmjs.com/package/npx" target="_blank" rel="nofollow noopener noreferrer"><CODE>npx</CODE></A>. We are in the future, right?<BR />
<BR />
<A href="https://www.youtube.com/watch?v=pyV_2G5MOTk&amp;t=00h16m00s" target="_blank" rel="nofollow noopener noreferrer">00:16:00</A> The final part of todayâs preamble is about <A href="https://github.com/features/packages" target="_blank" rel="nofollow noopener noreferrer">GitHub Packages</A> which gives us citizen developers the ability to have our own Node.js modules (or Docker images, and other packages) hosted in a registry. The democratisation of NPM registries! (I couldnât remember this word on the stream and âmade upâ a word âpeopleisationâ which of course is the same thing (<A href="https://en.wiktionary.org/wiki/demos" target="_blank" rel="nofollow noopener noreferrer">Î´á¿Î¼Î¿Ï / demos = people</A>).<BR />
<BR />
<A href="https://www.youtube.com/watch?v=pyV_2G5MOTk&amp;t=00h19m30s" target="_blank" rel="nofollow noopener noreferrer">00:19:30</A> Oh yes and I got to use my <CODE>rules.bash</CODE> script to recreate the Business Rules setup in my freshly minted (post-expired and destroyed) trial subaccount related Cloud Foundry environment. I wrote about this script in a recent blog post <A href="https://blogs.sap.com/2020/01/28/scripting-cloud-foundry-activities-in-trial/" target="_blank" rel="noopener noreferrer">Scripting Cloud Foundry activities in trial</A>.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=pyV_2G5MOTk&amp;t=00h24m30s" target="_blank" rel="nofollow noopener noreferrer">00:24:30</A> Moving now to the task at hand for this episode, which was to fix and enhance the Node.js script that we wrote in the previous episode (&lt;ahref="<A href="https://bit.ly/handsonsapdev#ep51" target="_blank" rel="nofollow noopener noreferrer">https://bit.ly/handsonsapdev#ep51</A>"&gt;Ep.51) to call the business rule service weâd created.<BR />
<BR />
Iâd already modified the OAuth token request credentials to match the new Business Rules service setup, so we first ran the script to remind ourselves of what the problem was - a 401 âunauthorizedâ error.<BR />
<BR />
The problem had been that I hadnât properly set the defaults on the request object Iâd set up. Iâd written this:<BR />
<PRE><CODE>req = request.defaults({<BR />
  Authorization: 'Bearer ' + token.accessToken,<BR />
}),</CODE></PRE><BR />
but of course I wanted to set default headers (of which <CODE>Authorization</CODE> is one), so it should have been like this:<BR />
<PRE><CODE>req = request.defaults({<BR />
  headers: {<BR />
    Authorization: 'Bearer ' + token.accessToken,<BR />
  }<BR />
}),</CODE></PRE><BR />
What a fool.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=pyV_2G5MOTk&amp;t=00h27m50s" target="_blank" rel="nofollow noopener noreferrer">00:27:50</A> Explaining what parts of the script I was not particularly enamoured about - specifically the hard-coding of the OAuth credential information (and, worse, the repetition of it, seeing that itâs already stored in my <CODE>~/.netrc</CODE> file), and the lazy way of specifying the URLs for the authorisation and runtime API endpoints.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=pyV_2G5MOTk&amp;t=00h29m55s" target="_blank" rel="nofollow noopener noreferrer">00:29:55</A> To address the first of these issues, thereâs a nice <A href="https://www.npmjs.com/package/netrc" target="_blank" rel="nofollow noopener noreferrer">netrc</A> package that we can use. Thisallows us to get rid of the hard coded section that looks like this:<BR />
<PRE><CODE>client = new oauth2client({<BR />
  clientId: 'sb-clone-b9cdd759-e0ad-4f1d-b0be-b38f2da71f95!b34464|bpmrulebroker!b2466',<BR />
  clientSecret: 'xs+ExbQiieTZLBX857nQOGkbKj4=',<BR />
  accessTokenUri: 'https://qmacrosubdomain.authentication.eu10.hana.ondemand.com/oauth/token'<BR />
})</CODE></PRE><BR />
and replace it with this:<BR />
<PRE><CODE>const<BR />
  netrc = require('netrc'),<BR />
  ...<BR />
  uaaHost = 'i347491trial.authentication.eu10.hana.ondemand.com',<BR />
  authInfo = new netrc()[uaaHost],<BR />
<BR />
  client = new oauth2client({<BR />
    clientId: authInfo.login,<BR />
    clientSecret: authInfo.password,<BR />
    ...<BR />
  })</CODE></PRE><BR />
Much neater!<BR />
<BR />
<A href="https://www.youtube.com/watch?v=pyV_2G5MOTk&amp;t=00h37m00s" target="_blank" rel="nofollow noopener noreferrer">00:37:00</A> After a brief bit of confusion where I mistook âuriâ for âuri-jsâ, we light upon the <A href="https://npmjs.com/package/uri-js" target="_blank" rel="nofollow noopener noreferrer">uri-js</A>package which will help us manage our URLs more cleanly, to address the second of the issues.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=pyV_2G5MOTk&amp;t=00h37m40s" target="_blank" rel="nofollow noopener noreferrer">00:37:40</A> While riffing on the fact that the âhttp(s)â part of a URL is called the â<STRONG>scheme</STRONG>â, I digress slightly into other schemes,and reflecting on the <A href="https://en.wikipedia.org/wiki/Gopher_(protocol)" target="_blank" rel="nofollow noopener noreferrer">gopher</A> protocol, which <SPAN class="mention-scrubbed">jbm1991</SPAN> points out is still in use today. Who knew?! I also mention a couple of old browsers that I used to use, <A href="https://en.wikipedia.org/wiki/Cello_(web_browser)" target="_blank" rel="nofollow noopener noreferrer">Cello</A> and <A href="https://en.wikipedia.org/wiki/ViolaWWW" target="_blank" rel="nofollow noopener noreferrer">Viola</A>. Gosh.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=pyV_2G5MOTk&amp;t=00h38m20s" target="_blank" rel="nofollow noopener noreferrer">00:38:20</A> Using this âuri-jsâ module, we can rewrite the opaque URL strings and construct them, instead, like this for the OAuth token request endpoint:<BR />
<PRE><CODE>const<BR />
  uri = require('uri-js'),<BR />
  ...<BR />
  uaaHost = 'i347491trial.authentication.eu10.hana.ondemand.com',<BR />
  ...<BR />
  client = new oauth2client({<BR />
    ...<BR />
    accessTokenUri: uri.serialize({<BR />
      scheme: 'https',<BR />
      host: uaaHost,<BR />
      path: '/oauth/token'<BR />
    })<BR />
  })</CODE></PRE><BR />
and like this, for the Business Rules runtime API base endpoint:<BR />
<PRE><CODE>runtimeApiEndpoint = uri.serialize({<BR />
  scheme: 'https',<BR />
  host: 'bpmruleruntime.cfapps.eu10.hana.ondemand.com',<BR />
  path: '/rules-service/rest'<BR />
})</CODE></PRE><BR />
(remember that all of the <A href="https://api.sap.com/api/SAP_CF_BusinessRules_Runtime_V2/resource" target="_blank" rel="noopener noreferrer">Cloud Foundry Rule Execution API resources</A> have a base path of <CODE>/rules-service/rest</CODE> - we double-check this by looking into the environment configuration for my âEU10â environment.)<BR />
<BR />
<A href="https://www.youtube.com/watch?v=pyV_2G5MOTk&amp;t=00h51m10s" target="_blank" rel="nofollow noopener noreferrer">00:51:10</A> Thinking about a further possible enhancement, specifically how weâd go about caching the OAuth token once received, instead of requesting a new one each time, which is what weâre doing right now. This leads into a small investigation as to whether requesting a new token returns a new one each time, which (after some confusion based on foolishness on my part) it appears it does, sending a fresh expiration (43199 seconds) each time (this is what <SPAN class="mention-scrubbed">huseyin.dereli</SPAN> had already guessed).<BR />
<BR />
Hereâs what the entire contents of the retrieved token object look like - thereâs plenty for us to be able to use to cache and calculate remaining lifetime:<BR />
<PRE><CODE>ClientOAuth2Token {<BR />
  client:<BR />
   ClientOAuth2 {<BR />
     options:<BR />
      { clientId:<BR />
         'sb-clone-fe154511-fa4d-4b59-9865-92404f5ae664!b35963|bpmrulebroker!b2466',<BR />
        clientSecret: 'KreSs824GXFFPJy8WaAVWOPmI/w=',<BR />
        accessTokenUri:<BR />
         'https://i347491trial.authentication.eu10.hana.ondemand.com/oauth/token' },<BR />
     request: [Function: request],<BR />
     code: CodeFlow { client: [Circular] },<BR />
     token: TokenFlow { client: [Circular] },<BR />
     owner: OwnerFlow { client: [Circular] },<BR />
     credentials: CredentialsFlow { client: [Circular] },<BR />
     jwt: JwtBearerFlow { client: [Circular] } },<BR />
  data:<BR />
   { access_token:<BR />
      'eyJhbGciO...',<BR />
     token_type: 'bearer',<BR />
     id_token:<BR />
      'eyJhbGciO...',<BR />
     refresh_token: '9e0de6aec13a4788871b6b3ce33c5e32-r',<BR />
     expires_in: 43199,<BR />
     scope:<BR />
      'bpmrulecompiler!t2466.RuleCompiler.JavaCompile bpmrulecompiler!t2466.RuleCompiler.SqlCompile openid bpmrulesqlcompiler!t2466.RuleSqlCompiler.SqlCompile bpmrulerepository!t2466.RuleRepository.SuperUser bpmruleruntime!t2466.RuleRuntime.SuperUser',<BR />
     jti: '2acab2bd037a429dbe805d9f90155cdd' },<BR />
  tokenType: 'bearer',<BR />
  accessToken:<BR />
   'eyJhbGciO...',<BR />
  refreshToken: '9e0de6aec13a4788871b6b3ce33c5e32-r',<BR />
  expires: 2020-02-07T23:50:54.001Z }</CODE></PRE><BR />
(This, by the way, also explains why I was almost certain Iâd seen an actual timestamp in the expiry information before now, whereas today I didnât. Itâs because the date - in this case <CODE>2020-02-07T23:50:54.001Z</CODE> - is part of the object properties, and not returned in the <CODE>access_token</CODE> property itself.)<BR />
<BR />
This is a nice place to bring the stream to an end, and in fact that is where it does end! I hope you enjoyed it, and that it inspires you to think a bit more about OAuth, tokens and related topics over the weekend. Happyruminating!
---
Annotated links: Episode 51 of Hands-on SAP dev with qmacro
technology-blog-sap
2020-02-06
https://community.sap.com/t5/technology-blogs-by-sap/annotated-links-episode-51-of-hands-on-sap-dev-with-qmacro/ba-p/13449431
2020-02-06-annotated-links-episode-51-of-hands-on-sap-dev-with-qmacro
<EM>This is a searchable description of the content of a live stream recording, specifically <STRONG>"Ep.51 - More fun with Business Rules API and OAuth"</STRONG> in the "<A href="https://bit.ly/handsonsapdev" target="_blank" rel="nofollow noopener noreferrer">Hands-on SAP dev with qmacro</A>" series. There are links directly to specific highlights in the video recording. For links to annotations of other episodes, please see the "<A href="https://bit.ly/handsonsapdev#replays" target="_blank" rel="nofollow noopener noreferrer">Catch the replays</A>" section of the series blog post.</EM><BR />
<BR />
This episode was streamed live on Fri 31 Jan 2020 and is approximately 60 minutes in length. The stream recording is <A href="https://www.youtube.com/watch?v=PaZ_2n9XclY0" target="_blank" rel="nofollow noopener noreferrer">available on YouTube</A>.<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/02/Screenshot-2020-02-06-at-11.53.02.png" /><BR />
<BR />
Brief synopsis: In the previous episode we got as far as staring at the OAuth Bearer token that we could use to authenticate calls to the API. In this episode we see how far we can get in using one of those tokens to do so. Perhaps even a bit of JavaScript with Axios might be nice to look at too - promises promises! (geddit)<BR />
<BR />
<A href="https://www.youtube.com/watch?v=PaZ_2n9XclY0&amp;t=00h01m55s" target="_blank" rel="nofollow noopener noreferrer">00:01:55</A> Stream starts.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=PaZ_2n9XclY0&amp;t=00h03m00s" target="_blank" rel="nofollow noopener noreferrer">00:03:00</A> Talking briefly about "behind the scenes" of the HandsOnSAPDev "studio" (which I changed around a little bit recently so the video is showing me in a different angle).<BR />
<BR />
We see my setup on the main desk, which includes the Blue Yeti microphone and my single 4K monitor which, when streaming, I switch to run at twice the resolution of 720p (1280x720), i.e. 2560x1440, so that I can use my version of the <A href="https://www.youtube.com/watch?v=KjeXVK7wVO4" target="_blank" rel="nofollow noopener noreferrer">Tiling Window Manager for Chrome OS</A> extension (which I've modified to give me the ability to adjust the gaps between windows) to run four 720p sized windows, one of which (the top left one) I capture and stream. This minimises scaling and the untidy visual artifacts that go with that sort of thing. That also means I've got three more windows to manage the streaming and other stuff.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=PaZ_2n9XclY0&amp;t=00h05m40s" target="_blank" rel="nofollow noopener noreferrer">00:05:40</A> A small warning that my typing may be louder than usual as I've switched back from my Anne Pro 2 (with Gateron Brown switches) to my Vortex Race 3 which has Cherry MX Blue switches - tactile AND clicky, nice!<BR />
<BR />
<A href="https://www.youtube.com/watch?v=PaZ_2n9XclY0&amp;t=00h06m00s" target="_blank" rel="nofollow noopener noreferrer">00:06:00</A> Reminding folks about the very first conference on the SAP Cloud Application Programming Model, <A href="https://sapmentors.github.io/reCAP/" target="_blank" rel="nofollow noopener noreferrer">reCAP</A>, which is taking place in Heidelberg, Germany, on Fri 15 May 2020. I'm looking forward to this very much and hope to be able to make it. The call for papers is open, so head over and submit a session proposal!<BR />
<BR />
<A href="https://www.youtube.com/watch?v=PaZ_2n9XclY0&amp;t=00h07m50s" target="_blank" rel="nofollow noopener noreferrer">00:07:50</A> Talking about the <A href="https://anchor.fm/sap-community-podcast/episodes/Episode-34-Thomas-Jungs-new-role-as-Head-of-Developer-Advocacy-at-SAP-eaan0u" target="_blank" rel="nofollow noopener noreferrer">recent Coffee Corner Radio podcast episode</A> which has an interview with the one and only <SPAN class="mention-scrubbed">thomas.jung</SPAN> our new head of Developer Advocacy at SAP.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=PaZ_2n9XclY0&amp;t=00h08m55s" target="_blank" rel="nofollow noopener noreferrer">00:08:55</A> Looking at what we're going to cover in the main part of this episode, which is to continue with the SAP Business Rules API. We hadn't got as far as calling the runtime API last time, so this time that's what we'll aim to do, starting with some Bash script goodness in the terminal to get us warmed up.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=PaZ_2n9XclY0&amp;t=00h11m30s" target="_blank" rel="nofollow noopener noreferrer">00:11:30</A> Reminding ourselves of the different APIs that we have for <A href="https://api.sap.com/package/SAPCPBusinessRulesAPIs?section=Artifacts" target="_blank" rel="noopener noreferrer">the SAP Business Rules on the API Hub</A>, which can be divided up into APIs for Neo and Cloud Foundry, for designtime ('authoring') and runtime ('execution'), and for different versions.<BR />
<BR />
Last time, we used the designtime API endpoint <CODE>/v1/projects</CODE> to get a brief summary of our Business Rules project (airline discounts).<BR />
<BR />
<A href="https://www.youtube.com/watch?v=PaZ_2n9XclY0&amp;t=00h13m00s" target="_blank" rel="nofollow noopener noreferrer">00:13:00</A> To get back into the swing of things, we switch to a terminal running <CODE>tmux</CODE> and open a couple of panes to run simple scripts that will monitor the apps and services in my Cloud Foundry space. I wrote about these scripts, and related subjects, in a couple of recent blog posts: <A href="https://blogs.sap.com/2020/01/28/scripting-cloud-foundry-activities-in-trial/" target="_blank" rel="noopener noreferrer">Scripting Cloud Foundry activities in trial</A> and <A href="https://blogs.sap.com/2020/01/29/mini-adventures-with-mtas-and-the-cloud-foundry-cli/" target="_blank" rel="noopener noreferrer">Mini adventures with MTAs and the Cloud Foundry CLI</A>.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=PaZ_2n9XclY0&amp;t=00h16m20s" target="_blank" rel="nofollow noopener noreferrer">00:16:20</A> Having a look at the <CODE>gettoken.bash</CODE> script, and where we get some of the information that it requires. Here's the entirety of the <A href="https://github.com/qmacro/handsonsapdev/blob/master/episodes/ep51/gettoken.bash" target="_blank" rel="nofollow noopener noreferrer">script</A>:<BR />
<DIV><BR />
<PRE class="sourceCode bash"><CODE class="sourceCode bash"><SPAN class="co">#!/bin/bash</SPAN><BR />
<BR />
<SPAN class="co"># Run this script in the context of an eval $(...) to get a fresh</SPAN><BR />
<SPAN class="co"># access token set in TOKEN</SPAN><BR />
<BR />
<SPAN class="ex">curl</SPAN> \<BR />
  --silent \<BR />
  --netrc \<BR />
  --header <SPAN class="st">"Content-Type: application/x-www-form-urlencoded"</SPAN> \<BR />
  --data <SPAN class="st">"grant_type=password&amp;response_type=token&amp;username=</SPAN><SPAN class="va">$USERNAME</SPAN><SPAN class="st">&amp;password=</SPAN><SPAN class="va">$(</SPAN><SPAN class="ex">pass</SPAN> SAP/trial<SPAN class="va">)</SPAN><SPAN class="st">"</SPAN> \<BR />
  <A href="https://qmacrosubdomain.authentication.eu10.hana.ondemand.com/oauth/token" target="test_blank" rel="nofollow noopener noreferrer">https://qmacrosubdomain.authentication.eu10.hana.ondemand.com/oauth/token</A> \<BR />
<SPAN class="kw">|</SPAN> <SPAN class="ex">jq</SPAN> -r <SPAN class="st">'"export TOKEN=\(.access_token)"'</SPAN></CODE></PRE><BR />
</DIV><BR />
The purpose of this script is to retrieve a fresh access token and present it in a way that can be <CODE>eval</CODE>'d into the environment. It does this by calling the authentication endpoint (<CODE>qmacrosubdomain.authentication.eu10.hana.ondemand.com/oauth/token</CODE> in this case) and passing the appropriate credentials and request information.<BR />
<BR />
Note that the authentication for this endpoint is Basic Authentication with the username and password provided by the 'netrc' facility which we've seen on recent previous live stream episodes - basically, credentials are managed on a per-host basis in a private <CODE>.netrc</CODE> file and <CODE>curl</CODE> will use those when told to with the <CODE>--netrc</CODE> option.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=PaZ_2n9XclY0&amp;t=00h17m10s" target="_blank" rel="nofollow noopener noreferrer">00:17:10</A> On the subject of token requests in OAuth flows, there's a really nice post by <SPAN class="mention-scrubbed">carlos.roggan</SPAN> - <A href="https://blogs.sap.com/2019/05/06/sap-cloud-platform-backend-service-tutorial-14-about-oauth-mechanism/" target="_blank" rel="noopener noreferrer">SAP Cloud Platform Backend service: Tutorial [14]: about OAuth mechanism</A> - which explains lots of things and is, along with its companion blog posts, well worth reading, not least to understand more about the different OAuth based authentication mechanisms, or 'grant types'.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=PaZ_2n9XclY0&amp;t=00h17m50s" target="_blank" rel="nofollow noopener noreferrer">00:17:50</A> The grant type we're going to use is the 'resource owner password credentials grant type', and is also described in the documentation for the NPM module <A href="https://www.npmjs.com/package/client-oauth2" target="_blank" rel="nofollow noopener noreferrer">client-oauth2</A> that we're about to use in our JavaScript code.<BR />
<BR />
This grant type, or flow, is when the client is trusted by the user, because the user gives the client their credentials to send to the OAuth endpoint. This is different to other flows where the client is not trusted, and in these cases the user is temporarily redirected to be asked for their credentials, and a short-lived token is returned to the client with which an access token can then be requested.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=PaZ_2n9XclY0&amp;t=00h18m55s" target="_blank" rel="nofollow noopener noreferrer">00:18:55</A> For managing my credentials securely in my terminal, I'm using the classic <A href="https://www.passwordstore.org/" target="_blank" rel="nofollow noopener noreferrer"><CODE>pass</CODE> password manager</A> which you can see in action in the <CODE>$(pass SAP/trial)</CODE> part of the script.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=PaZ_2n9XclY0&amp;t=00h20m25s" target="_blank" rel="nofollow noopener noreferrer">00:20:25</A> Having retrieved a token, we look briefly at the other data that is returned with it, including the value of the <CODE>expires_in</CODE> property, which is 43199. If you weren't on the live stream at the time, can you make a guess as to why that is a significant number? Put your thoughts in the comments to this post.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=PaZ_2n9XclY0&amp;t=00h21m00s" target="_blank" rel="nofollow noopener noreferrer">00:21:00</A> Once we have a token in the <CODE>TOKEN</CODE> environment variable, we can make the actual API call to <CODE>/v1/projects</CODE> (this is still warming ourselves up from last week) to retrieve information from the designtime API, about the projects we have. This is in the <A href="https://github.com/qmacro/handsonsapdev/blob/master/episodes/ep51/getprojectinfo.bash" target="_blank" rel="nofollow noopener noreferrer"><CODE>getprojectinfo.bash</CODE> script</A> which looks like this:<BR />
<DIV><BR />
<PRE class="sourceCode bash"><CODE class="sourceCode bash"><SPAN class="co">#!/bin/bash</SPAN><BR />
<BR />
<SPAN class="ex">curl</SPAN> \<BR />
  --silent \<BR />
  --header <SPAN class="st">"Authorization: Bearer </SPAN><SPAN class="va">${TOKEN}</SPAN><SPAN class="st">"</SPAN> \<BR />
  <A href="https://bpmrulerepository.cfapps.eu10.hana.ondemand.com/rules-service/rest/v1/projects" target="test_blank" rel="nofollow noopener noreferrer">https://bpmrulerepository.cfapps.eu10.hana.ondemand.com/rules-service/rest/v1/projects</A></CODE></PRE><BR />
</DIV><BR />
That all works fine. So far so good.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=PaZ_2n9XclY0&amp;t=00h23m00s" target="_blank" rel="nofollow noopener noreferrer">00:23:00</A> Thinking now about calls not to the designtime API but to the runtime API, we pause briefly to think about the version management that has been introduced to the Business Rules service, which is explained by <SPAN class="mention-scrubbed">archana.shukla</SPAN> in the blog post <A href="https://blogs.sap.com/2019/08/03/version-management-in-sap-cloud-platform-business-rules/" target="_blank" rel="noopener noreferrer">Version Management in SAP Cloud Platform Business Rules</A>, and means that our new airline discounts rule project that we're currently authoring is accessible to call as a 'working set' rule, for which we need the <CODE>/v2/workingset-rule-services</CODE> endpoint.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=PaZ_2n9XclY0&amp;t=00h23m50s" target="_blank" rel="nofollow noopener noreferrer">00:23:50</A> We try out this call in the SAP API Hub using my 'EU10' environment that I've already got set up, using a payload that I'd stored in <A href="https://github.com/qmacro/handsonsapdev/blob/master/episodes/ep51/payload.json" target="_blank" rel="nofollow noopener noreferrer"><CODE>payload.json</CODE></A>, that looks like this:<BR />
<DIV><BR />
<PRE class="sourceCode json"><CODE class="sourceCode json"><SPAN class="fu">{</SPAN><BR />
  <SPAN class="dt">"RuleServiceId"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="st">"8ebbf08e24f84790a99f1e8f32be59a9"</SPAN><SPAN class="fu">,</SPAN><BR />
  <SPAN class="dt">"Vocabulary"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="ot">[</SPAN><BR />
    <SPAN class="fu">{</SPAN><BR />
      <SPAN class="dt">"flightinfo"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="fu">{</SPAN><BR />
        <SPAN class="dt">"carrier"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="st">"LH"</SPAN><BR />
      <SPAN class="fu">}</SPAN><BR />
    <SPAN class="fu">}</SPAN><BR />
  <SPAN class="ot">]</SPAN><BR />
<SPAN class="fu">}</SPAN></CODE></PRE><BR />
</DIV><BR />
I think that's a nice way of calling rules in runtime, nicer than the previous version (v1).<BR />
<BR />
By the way, the value for the <CODE>RuleServiceId</CODE> property is available in the URL when we're looking at the business rule service within the project in the Business Rules Editor.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=PaZ_2n9XclY0&amp;t=00h26m55s" target="_blank" rel="nofollow noopener noreferrer">00:26:55</A> We copy the <CODE>getprojectinfo.bash</CODE> script to a new one, <A href="https://github.com/qmacro/handsonsapdev/blob/master/episodes/ep51/callrule.bash" target="_blank" rel="nofollow noopener noreferrer"><CODE>callrule.bash</CODE></A> which we modify to look like this:<BR />
<DIV><BR />
<PRE class="sourceCode bash"><CODE class="sourceCode bash"><SPAN class="co">#!/bin/bash</SPAN><BR />
<BR />
<SPAN class="ex">curl</SPAN> \<BR />
  --silent \<BR />
  --header <SPAN class="st">"Authorization: Bearer </SPAN><SPAN class="va">${TOKEN}</SPAN><SPAN class="st">"</SPAN> \<BR />
  -d@payload.json \<BR />
  --header <SPAN class="st">"Content-Type: application/json"</SPAN> \<BR />
  <A href="https://bpmruleruntime.cfapps.eu10.hana.ondemand.com/rules-service/rest/v2/workingset-rule-services" target="test_blank" rel="nofollow noopener noreferrer">https://bpmruleruntime.cfapps.eu10.hana.ondemand.com/rules-service/rest/v2/workingset-rule-services</A></CODE></PRE><BR />
</DIV><BR />
As you can see, we're calling the runtime API (<CODE>bpmruleruntime.cfapps.eu10.hana.ondemand.com</CODE> in my case) with the <CODE>/v2/workingset-rule-services</CODE> endpoint, passing the contents of <CODE>payload.json</CODE> using the <CODE>-d@</CODE> option to <CODE>curl</CODE>. Of course, we pass the token we already have as a bearer token in the <CODE>Authorization</CODE> header of the request.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=PaZ_2n9XclY0&amp;t=00h30m00s" target="_blank" rel="nofollow noopener noreferrer">00:30:00</A> Starting to move across to doing this now in JavaScript, and we initialise a new Node.js project <A href="https://github.com/qmacro/handsonsapdev/tree/master/episodes/ep51/callrule" target="_blank" rel="nofollow noopener noreferrer"><CODE>callrule</CODE></A> ... and while I do that <SPAN class="mention-scrubbed">christian.drumm</SPAN> gently challenges me on my continued use of the Bash shell, rather than, say, the Z shell.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=PaZ_2n9XclY0&amp;t=00h32m10s" target="_blank" rel="nofollow noopener noreferrer">00:32:10</A> At this stage we go back and take a closer look at the <A href="https://npmjs.com/package/client-oauth2" target="_blank" rel="nofollow noopener noreferrer">client-oauth2</A> that we glanced at earlier, as this is what we're going to use for the OAuth flow.<BR />
<BR />
We also look at the <A href="https://npmjs.com/package/request-promise" target="_blank" rel="nofollow noopener noreferrer">request-promise</A> package for making the actual HTTP requests, in a promise context (this package is essentially a wrapper around the request package). This is a deprecated package but serves our purpose for now.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=PaZ_2n9XclY0&amp;t=00h33m50s" target="_blank" rel="nofollow noopener noreferrer">00:33:50</A> First, we install the <A href="https://www.npmjs.com/package/nodemon" target="_blank" rel="nofollow noopener noreferrer">nodemon</A> package as a development dependency - everyone likes a bit of nodemon, right? We start running it in a new <CODE>tmux</CODE> pane and create the simplest thing that could possibly work to satisfy nodemon, in a sort of "nodemon driven development" style.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=PaZ_2n9XclY0&amp;t=00h55m30s" target="_blank" rel="nofollow noopener noreferrer">00:55:30</A> After lots of thinking and typing, we end up with something that looks like this in <A href="https://github.com/qmacro/handsonsapdev/blob/master/episodes/ep51/callrule/index.js" target="_blank" rel="nofollow noopener noreferrer"><CODE>index.js</CODE></A>:<BR />
<DIV><BR />
<PRE class="sourceCode javascript"><CODE class="sourceCode javascript"><SPAN class="kw">const</SPAN><BR />
  oauth2client <SPAN class="op">=</SPAN> <SPAN class="at">require</SPAN>(<SPAN class="st">'client-oauth2'</SPAN>)<SPAN class="op">,</SPAN><BR />
  request <SPAN class="op">=</SPAN> <SPAN class="at">require</SPAN>(<SPAN class="st">'request-promise'</SPAN>)<SPAN class="op">,</SPAN><BR />
<BR />
  client <SPAN class="op">=</SPAN> <SPAN class="kw">new</SPAN> <SPAN class="at">oauth2client</SPAN>(<SPAN class="op">{</SPAN><BR />
    <SPAN class="dt">clientId</SPAN><SPAN class="op">:</SPAN> <SPAN class="st">'sb-clone-b9c9-e0ad-4f1d-b0be-b38f2da71f95!b34464|bpmrulebroker!b2466'</SPAN><SPAN class="op">,</SPAN><BR />
    <SPAN class="dt">clientSecret</SPAN><SPAN class="op">:</SPAN> <SPAN class="st">'xs+ExbQ-eTZLBX857nQOGkbKj4='</SPAN><SPAN class="op">,</SPAN><BR />
    <SPAN class="dt">accessTokenUri</SPAN><SPAN class="op">:</SPAN> <SPAN class="st">'https://qmacrosubdomain.authentication.eu10.hana.ondemand.com/oauth/token'</SPAN><BR />
  <SPAN class="op">}</SPAN>)<BR />
<BR />
async <SPAN class="kw">function</SPAN> <SPAN class="at">main</SPAN>() <SPAN class="op">{</SPAN><BR />
  <SPAN class="kw">const</SPAN><BR />
    token <SPAN class="op">=</SPAN> await <SPAN class="va">client</SPAN>.<SPAN class="va">owner</SPAN>.<SPAN class="at">getToken</SPAN>(<SPAN class="va">process</SPAN>.<SPAN class="va">env</SPAN>.<SPAN class="at">USERNAME</SPAN><SPAN class="op">,</SPAN> <SPAN class="va">process</SPAN>.<SPAN class="va">env</SPAN>.<SPAN class="at">PASSWORD</SPAN>)<BR />
<BR />
  <SPAN class="va">console</SPAN>.<SPAN class="at">log</SPAN>(<SPAN class="va">token</SPAN>.<SPAN class="at">accessToken</SPAN>)<BR />
<BR />
  <SPAN class="kw">const</SPAN><BR />
    req <SPAN class="op">=</SPAN> <SPAN class="va">request</SPAN>.<SPAN class="at">defaults</SPAN>(<SPAN class="op">{</SPAN><BR />
      headers: { <SPAN class="dt">Authorization</SPAN><SPAN class="op">:</SPAN> <SPAN class="st">'Bearer '</SPAN> <SPAN class="op">+</SPAN> <SPAN class="va">token</SPAN>.<SPAN class="at">accessToken }</SPAN><SPAN class="op">,</SPAN><BR />
    <SPAN class="op">}</SPAN>)<BR />
<BR />
<BR />
  <SPAN class="kw">const</SPAN> result <SPAN class="op">=</SPAN> await <SPAN class="va">req</SPAN>.<SPAN class="at">post</SPAN>(<SPAN class="st">'https://bpmruleruntime.cfapps.eu10.hana.ondemand.com/rules-service/rest/v2/workingset-rule-services'</SPAN><SPAN class="op">,</SPAN> <SPAN class="op">{</SPAN><BR />
    <SPAN class="dt">json</SPAN><SPAN class="op">:</SPAN> <SPAN class="op">{</SPAN><BR />
      <SPAN class="dt">RuleServiceId</SPAN><SPAN class="op">:</SPAN> <SPAN class="st">"8ebbf08e24f84790a99f1e8f32be59a9"</SPAN><SPAN class="op">,</SPAN><BR />
      <SPAN class="dt">Vocabulary</SPAN><SPAN class="op">:</SPAN> [<BR />
        <SPAN class="op">{</SPAN><BR />
          <SPAN class="dt">flightinfo</SPAN><SPAN class="op">:</SPAN> <SPAN class="op">{</SPAN><BR />
            <SPAN class="dt">carrier</SPAN><SPAN class="op">:</SPAN> <SPAN class="st">"LH"</SPAN><BR />
          <SPAN class="op">}</SPAN><BR />
        <SPAN class="op">}</SPAN><BR />
      ]<BR />
    <SPAN class="op">}</SPAN><BR />
  <SPAN class="op">}</SPAN>)<BR />
<BR />
  <SPAN class="va">console</SPAN>.<SPAN class="at">log</SPAN>(result)<BR />
<BR />
<BR />
<SPAN class="op">}</SPAN><BR />
<BR />
<SPAN class="at">main</SPAN>()</CODE></PRE><BR />
</DIV><BR />
You can get a good idea of what each part of this does by watching this section of the recording, but here's a brief rundown too:<BR />
<UL><BR />
 	<LI>We use a set of <CODE>const</CODE> declarations to bring in the two modules we want to use (client-oauth2 and request-promise), and to initialise a new client-oauth2 object that has the client ID and secret set, along with the authorisation endpoint, ready for calls to be made (this set of ID and secret is now no longer in existence, in case you're wondering).</LI><BR />
 	<LI>As we're using a promise-based request mechanism, we can wrap the actual calls inside a function <CODE>main</CODE> that's declared as asynchronous, and then call it right at the bottom of the script (with <CODE>main()</CODE>) when everything is ready. This reminds me a little of the Python pattern involving <CODE>__name__ == "__main__"</CODE>, but that's a story for another time I guess. Anyway, that allows us to make the actual calls in a synchronous fashion, using <CODE>await</CODE>.</LI><BR />
 	<LI>Inside the <CODE>main</CODE> function we pass the user credentials (remember this is the 'resource owner password credentials' grant type flow) in the call to actually request a token (<CODE>getToken</CODE>). We get the credential values from environment variables so you don't see them in the script.</LI><BR />
 	<LI>Assuming that a token is returned successfully (remember, this is just demo code and not robust!) we make an HTTP POST request with the request-promise module, having first set some defaults for requests with the <CODE>request.defaults</CODE> call, setting the bearer token in an Authorization header.</LI><BR />
 	<LI>The request-promise's <CODE>post</CODE> mechanism is very convenient, allowing us to send JSON directly via the <CODE>json</CODE> parameter, which we do, supplying the same payload as we've seen already to invoke the business rule.</LI><BR />
</UL><BR />
Unfortunately (or fortunately, if you like live streams that end with some suspense!) I forget something small but fundamental in the code, which we don't manage to catch before the hour is up. For those of you following this in the future, I'll give you a <A href="https://twitter.com/qmacro/status/1223171926216101888" target="_blank" rel="nofollow noopener noreferrer">clue</A> - it's in the call to <CODE>request.defaults</CODE>, and I will cover it in <A href="https://bit.ly/handsonsapdev#ep52" target="_blank" rel="nofollow noopener noreferrer">Ep.52</A> which at the time of writing this post is tomorrow! <span class="lia-unicode-emoji" title=":slightly_smiling_face:">ð</span><BR />
<BR />
That wrapped it up for this episode. Tune in for the next one for some more (hopefully exciting) hands-on stuff with SAP development!
---
Mini adventures with MTAs and the Cloud Foundry CLI
technology-blog-sap
2020-01-29
https://community.sap.com/t5/technology-blogs-by-sap/mini-adventures-with-mtas-and-the-cloud-foundry-cli/ba-p/13439593
2020-01-29-mini-adventures-with-mtas-and-the-cloud-foundry-cli
<EM>A few more small adventures using the cf command line client, as well as some shell pipeline goodness and that nifty tip from Marius Obert about radically reducing the size of your deployment archive.&nbsp;</EM><BR />
<BR />
Further to my blog post yesterday on <A href="https://blogs.sap.com/2020/01/28/scripting-cloud-foundry-activities-in-trial/" target="_blank" rel="noopener noreferrer">scripting Cloud Foundry activities</A> I extended my experiments into using the 'cf' command line interface (CLI) tool to quickly remove the Business Rules Editor app and supporting services.<BR />
<BR />
Along the way I tweaked a couple of existing command pipelines to display the lists of services and apps on Cloud Foundry (CF), and tried out <SPAN class="mention-scrubbed">mariusobert</SPAN> 's <A href="https://twitter.com/IObert_/status/1220321066029142018" target="_blank" rel="nofollow noopener noreferrer">great tip</A> on reducing the size of your deployment archive.<BR />
<BR />
&nbsp;<BR />
<BR />
<A name="tldr" target="_blank"></A><STRONG>TL;DR</STRONG><BR />
<BR />
If you're like me, and want -- (in the immortal words of Boycie in the Only Fools And Horses episode "Chain Gang") -- to "<A href="https://www.youtube.com/watch?v=WcrsW8CAC5s" target="_blank" rel="nofollow noopener noreferrer">let the dog see the rabbit</A>" to see what this is all about, you can watch this little Asciinema recording of what I describe in the rest of this post.<BR />
<BR />
<A href="https://asciinema.org/a/296532" target="_blank" rel="noopener noreferrer nofollow"><IMG src="https://asciinema.org/a/296532.svg" /></A><BR />
<BR />
&nbsp;<BR />
<BR />
Still around and want the nitty-gritty? Read on!<BR />
<BR />
&nbsp;<BR />
<BR />
<STRONG>The app and supporting services</STRONG><BR />
<BR />
The Business Rules Editor runs in a space in my CF org connected to my SAP Cloud Platform (SCP) trial subaccount. There's the app itself (which is actually just an approuter fronting the actual editor app artifacts) named "businessruleseditor_appRouter".<BR />
<BR />
This app is bound to service instances, thus:<BR />
<UL><BR />
 	<LI>an instance of the 'business-rules' service called 'businessrules' that I created shortly after re-creating my SCP subaccount and CF org and space</LI><BR />
 	<LI>an instance of the 'xsuaa' service called 'businessrules_uaa'</LI><BR />
 	<LI>an instance of the 'html5-apps-repo' service (to serve the actual app artifacts) called 'businessruleseditor_html5_repo_runtime'</LI><BR />
</UL><BR />
&nbsp;<BR />
<BR />
<STRONG>Checking the running app and services</STRONG><BR />
<BR />
At the start, the app is running, along with the bound services. I check this with the 'cf' command line client, combined with a bit of shell pipeline to massage the output. The output from 'cf' is relatively messy and <A href="https://github.com/cloudfoundry/cli/issues/604#issuecomment-562571995" target="_blank" rel="nofollow noopener noreferrer">harder than it should be to parse</A> (yes, there's the 'cf curl' approach but that's a sledgehammer solution to a problem that should be addressed with better text-based output), so I have to pass it through some classic Unix command line tools to get what I want.<BR />
<BR />
For parsing and displaying service information, I have a small shell script 'service_status', which looks like this:<BR />
<PRE class="language-swift"><CODE>cf s \<BR />
| sed '/^OK$/d' \<BR />
| awk 'NR&gt;3 { printf "%s ", $1; $1=$2=$3=$NF=""; printf "\n%s\n\n", $0 }' \<BR />
| awk '{$1=$1};1'</CODE></PRE><BR />
This runs the 'cf s' command to retrieve the service information. The output from 'cf s' looks like this:<BR />
<PRE class="language-swift"><CODE>Getting services in org I347491trial_qmacrosubdomain / space dev as dj.adams@sap.com...<BR />
<BR />
name                                     service           plan          bound apps                      last operation     broker                                                       upgrade available<BR />
businessrules                            business-rules    lite          businessruleseditor_appRouter   create succeeded   sm-businessrules-e73ec4d2-a715-4849-a5e9-77b521e7a086        <BR />
businessrules_uaa                        xsuaa             application   businessruleseditor_appRouter   create succeeded   sm-xsuaa-9ef36350-f975-4194-a399-54db361e79b5                <BR />
businessruleseditor_html5_repo_runtime   html5-apps-repo   app-runtime   businessruleseditor_appRouter   create succeeded   sm-html5-apps-repo-sb-ebcb2b69-24a5-408e-be00-02066b302b78   </CODE></PRE><BR />
You might think that looks quite neat, but don't be deceived - if there are no bound apps, the column is empty, which makes parsing of the output more unpredictable that it should be (why can't something like 'none' be emitted for this column so it has a consistent value?). Moreover, the contents of the column showing the last operation is also unpredictable, in that the value or values can contain spaces, which makes text-based parsing harder than it should be.<BR />
<BR />
Anyway, before I go on a mini-rant about this, let me explain what I do to reduce this output down to the essentials.<BR />
<BR />
The second line of the 'service_status' script removes any line that is simply 'OK'. When retrieving the app information (with 'cf a') you get an 'OK', but when retrieving service information, you don't. Again, unpredictable. So let's just get rid of it anyway.<BR />
<BR />
The third line uses the venerable <A href="https://en.wikipedia.org/wiki/AWK" target="_blank" rel="nofollow noopener noreferrer">awk</A> language to print the first column of the actual output, which is a single value on each line (in this case 'businessrules', 'businessrules_uaa' and 'businessruleseditor_html5_repo_runtime'). With 'NR&gt;3' it skips over the first three lines of output so that only the actual service lines are processed.<BR />
<BR />
Finally, the last line uses awk again to strip spaces from the start and end of the lines.<BR />
<BR />
So running this script produces this output:<BR />
<PRE class="language-swift"><CODE>businessrules<BR />
businessruleseditor_appRouter create succeeded<BR />
<BR />
businessrules_uaa<BR />
businessruleseditor_appRouter create succeeded<BR />
<BR />
businessruleseditor_html5_repo_runtime<BR />
businessruleseditor_appRouter create succeeded</CODE></PRE><BR />
This is much nicer and what I want for a display in my terminal. Note that I take advantage of the poor formatting from the output of 'cf s' by (inadvertently) grabbing the value of the 'bound apps' column if it contains values. This is what the output looks like when the services have just been created but before they've been bound to the 'businessruleseditor_appRouter' app:<BR />
<PRE class="language-swift"><CODE>businessrules<BR />
create succeeded<BR />
<BR />
businessrules_uaa<BR />
create succeeded<BR />
<BR />
businessruleseditor_html5_repo_runtime<BR />
create succeeded</CODE></PRE><BR />
I have another script to display the apps information, called 'app_status', which looks very similar:<BR />
<PRE class="language-swift"><CODE>cf a \<BR />
| sed '/^OK$/d' \<BR />
| awk 'NR&gt;3 { printf "%s\n%s\n\n", $1, $2 }' \<BR />
| awk '{$1=$1};1'</CODE></PRE><BR />
There's just a bit of difference in the main awk invocation - I simply want to print the first and second columns, on separate lines. Here's what the output looks like when the 'businessruleseditor_appRouter' app is running:<BR />
<PRE class="language-swift"><CODE>businessruleseditor_appRouter<BR />
started<BR />
</CODE></PRE><BR />
I use the terminal multiplexor app '<A href="https://en.wikipedia.org/wiki/Tmux" target="_blank" rel="nofollow noopener noreferrer">tmux</A>' to manage individual windows and panes (sub-windows) in my terminal, and divide up the space to show the output of my 'service_status' and 'app_status' scripts in separate areas. The output is always up-to-date as I drive the execution of these scripts with the excellent '<A href="https://en.wikipedia.org/wiki/Watch_(Unix)" target="_blank" rel="nofollow noopener noreferrer">watch</A>' command, which by default will re-execute the specified script every 2 seconds.<BR />
<BR />
This is what it looks like in action:<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/01/Screenshot-2020-01-29-at-10.22.42.png" /><BR />
<BR />
&nbsp;<BR />
<BR />
<STRONG>Removing the app and supporting services</STRONG><BR />
<BR />
I wanted to remove the running app and the services it was bound directly to, i.e. the 'businessrules_uaa' and 'businessruleseditor_html5_repo_runtime' services'. Of course, I could have simply used a combination of the 'cf delete' and 'cf delete-service' commands ('cf d' and 'cf ds' in short form). But there's a neater way, with '<A href="https://help.sap.com/viewer/65de2977205c403bbc107264b8eccf4b/Cloud/en-US/fab96a603a004bd992822c83d4b01370.html" target="_blank" rel="noopener noreferrer">cf undeploy</A>'.<BR />
<BR />
The 'cf undeploy' command requires the MTA ID, which can be retrieved with the 'cf mtas' command, which shows output like this:<BR />
<PRE class="language-swift"><CODE>Getting multi-target apps in org I347491trial_qmacrosubdomain / space dev as dj.adams@sap.com...<BR />
OK<BR />
mta id                version<BR />
businessruleseditor   0.0.1</CODE></PRE><BR />
In this case, the ID is 'businessruleseditor'.<BR />
<BR />
Now I can use the 'cf undeploy', along with the '-delete-services' option, to clean out exactly the right parts, in the right order, too. If there's any issue with deleting services, there's a number of times the operation will be retried, too:<BR />
<PRE class="language-swift"><CODE>cf undeploy businessruleseditor -delete-services -f</CODE></PRE><BR />
This is what the output looks like:<BR />
<PRE class="language-swift"><CODE>Undeploying multi-target app businessruleseditor in org I347491trial_qmacrosubdomain / space dev as dj.adams@sap.com...<BR />
Detected deployed MTA with ID "businessruleseditor" and version "0.0.1"<BR />
Deleting routes for application "businessruleseditor_appRouter"...<BR />
Deleting route "i347491trial-qmacrosubdomain-dev-businessruleseditor-approuter.cfapps.eu10.hana.ondemand.com"...<BR />
Stopping application "businessruleseditor_appRouter"...<BR />
Deleting application "businessruleseditor_appRouter"...<BR />
Deleting service "businessrules_uaa"...<BR />
Deleting service "businessruleseditor_html5_repo_runtime"...<BR />
Error deleting services: Error deleting service "businessruleseditor_html5_repo_runtime" from offering "html5-apps-repo" and plan "app-runtime": Service broker operation failed: 502 Bad Gateway: CF-ServiceBrokerBadResponse(10001): Service instance businessruleseditor_html5_repo_runtime: Service broker error: Service broker html5-apps-repo-sb failed with: Internal Server Error<BR />
Proceeding with automatic retry... (3 of 3 attempts left)<BR />
Services "[businessrules_uaa]" are already deleted<BR />
Deleting service "businessruleseditor_html5_repo_runtime"...<BR />
1 of 1 done<BR />
Process finished.<BR />
Use "cf dmol -i aad5f179-4286-11ea-be81-eeee0a930fbf" to download the logs of the process.</CODE></PRE><BR />
&nbsp;<BR />
<BR />
<STRONG>Redeploying, with a reduced size MTA archive</STRONG><BR />
<BR />
When I'm ready to redeploy I can do so, following the flow I described in yesterday's post "<A href="https://blogs.sap.com/2020/01/28/scripting-cloud-foundry-activities-in-trial/" target="_blank" rel="noopener noreferrer">Scripting Cloud Foundry activities in trial</A>".<BR />
<BR />
However, there's a <A href="https://twitter.com/IObert_/status/1220321066029142018" target="_blank" rel="nofollow noopener noreferrer">lovely bit of advice</A> from my friend and colleague <SPAN class="mention-scrubbed">mariusobert</SPAN> that can be used to reduce the size of the MTA deployment archive. Shown in a <A href="https://gist.github.com/IObert/220cb211a63a4030c25b31d912243d6a" target="_blank" rel="nofollow noopener noreferrer">Gist</A>, there's a '<A href="https://gist.github.com/IObert/220cb211a63a4030c25b31d912243d6a#file-mta-yaml-L18-L19" target="_blank" rel="nofollow noopener noreferrer">build-parameters' setting</A> that can be added to a module definition, so that the 'node_modules/' directory, which is often the bulk of the archive, can be omitted (it will be created in the cloud once deployed). This is what the parameter looks like:<BR />
<PRE class="language-swift"><CODE>build-parameters:<BR />
  ignore: ["node_modules/"]</CODE></PRE><BR />
Adding this to the definition of the 'businessruleseditor_appRouter' module (effectively the definition for the app itself) like this, reduces the archive file size from<BR />
<PRE class="language-swift"><CODE> - name: businessruleseditor_appRouter                                                                                           <BR />
   type: approuter.nodejs                                                                                                        <BR />
   path: businessruleseditor_appRouter                                                                                           <BR />
   parameters:                                                                                                                   <BR />
      disk-quota: 256M                                                                                                           <BR />
      memory: 256M<BR />
   build-parameters:<BR />
       ignore: ["node_modules/"]<BR />
   requires:<BR />
    - name: businessruleseditor_html5_repo_runtime<BR />
    - name: businessrules_uaa<BR />
    - name: businessrules</CODE></PRE><BR />
Without this setting, the size of the 'businessruleseditor_0.0.1.mtar' archive is 12 megabytes:<BR />
<PRE class="language-swift"><CODE>-&gt; ls -l --block-size=M mta_archives/<BR />
total 12M<BR />
-rw-r--r-- 1 qmacro qmacro 12M Jan 29 11:09 businessruleseditor_0.0.1.mtar</CODE></PRE><BR />
With this setting, the size is only 17 kilobytes!<BR />
<PRE class="language-swift"><CODE>-&gt; ls -l --block-size=K mta_archives/<BR />
total 20K<BR />
-rw-r--r-- 1 qmacro qmacro 17K Jan 29 11:13 businessruleseditor_0.0.1.mtar</CODE></PRE><BR />
As a bonus, the build is slightly quicker, and the deploy is definitely quicker!<BR />
<BR />
Take a look at the Asciinema recording (<A href="#tldr" target="_blank" rel="nofollow noopener noreferrer">above</A>) to see this in action - where you can also see the appearance of the binding information in the service output, as the app is created and bindings are made.<BR />
<BR />
&nbsp;<BR />
<BR />
<STRONG>Wrapping up</STRONG><BR />
<BR />
When I started hacking around with the 'cf' command earlier this morning, I didn't intend to write a blog post, but I thought it was worthwhile in the end to share some of my learnings. I hope you found it interesting - and more importantly, I'd love to know what sort of automation and convenience tools you have set up for yourself. Let me know in the comments. And as always, happy hacking!<BR />
<BR />
&nbsp;<BR />
<BR />
&nbsp;<BR />
<BR />
&nbsp;
---
Scripting Cloud Foundry activities in trial
technology-blog-sap
2020-01-28
https://community.sap.com/t5/technology-blogs-by-sap/scripting-cloud-foundry-activities-in-trial/ba-p/13438137
2020-01-28-scripting-cloud-foundry-activities-in-trial
<EM>In this post I share a simple script that I use to recreate my Business Rules environment in the Cloud Foundry environment of my SAP Cloud Platform trial account. Scripting and the CLI in general is very powerful in today's "new mainframe" era.</EM><BR />
<BR />
It's <A href="https://youtu.be/hpMiXp8WLvo?t=680" target="_blank" rel="nofollow noopener noreferrer">no secret</A> that I feel that we're in the era of the new mainframe (it never really went away) and the power of the command line and terminal based user interfaces are more relevant and powerful than ever (yes, <A href="https://twitter.com/search?q=%23TheFutureIsTerminal&amp;src=typed_query" target="_blank" rel="nofollow noopener noreferrer">#TheFutureIsTerminal</A>!).<BR />
<BR />
Scripting is a much misunderstood discipline, and is a whole universe of languages, techniques, and contexts. But it's worth putting yourself on the learning path here, because it can be incredibly useful even for small tasks.<BR />
<BR />
While preparing and researching for content for the recent episodes of my <A href="https://bit.ly/handsonsapdev" target="_blank" rel="nofollow noopener noreferrer">#HandsOnSAPDev live stream series</A>, particularly in the area of exploring the Business Rules service in the Cloud Foundry environment on the SAP Cloud Platform (see in particular the annotated links for episodes <A href="https://blogs.sap.com/2019/11/26/annotated-links-episode-44-of-hands-on-sap-dev-with-qmacro/" target="_blank" rel="noopener noreferrer">44</A> and <A href="https://blogs.sap.com/2020/01/02/annotated-links-episode-48-of-hands-on-sap-dev-with-qmacro/" target="_blank" rel="noopener noreferrer">48</A>), I decided to write a short script to help me recreate the Business Rules service and Editor facility ... I often clean out my environment, and sometimes even recreate my Cloud Foundry organisation and spaces, to clear cruft ready for the next live stream episode.<BR />
<BR />
It was so easy to write, I thought I'd share it, and perhaps encourage you to stare at it for a few minutes over a coffee to see how it works. It's very specific, and does what I want it to do (there's no smarts in there, but I have written it to be re-runnable).<BR />
<BR />
Here it is, warts and all:<BR />
<PRE class="language-perl"><CODE>#!/bin/bash<BR />
<BR />
# Prerequisites:<BR />
# - Cloud Foundry trial account on SAP Cloud Platform with <BR />
#   entitlement for Business Rules service and application runtime<BR />
# - Build tool 'mbt' installed globally<BR />
# - cf CLI installed with the 'multiapps' plugin installed<BR />
# - cf CLI already authenticated against the CF endpoint<BR />
<BR />
# Recommended:<BR />
# - Role collection containing RuleRepositorySuperUser and<BR />
#   RuleRuntimeSuperUser assigned tothe trial account user<BR />
<BR />
<BR />
# Show current CF target<BR />
echo Deploying to:<BR />
cf target<BR />
<BR />
# Create an instance of the service, with the free 'lite' service plan, called businessrules<BR />
# (reason for the name is because that's how it's referred to in the mta.yaml to come). If the<BR />
# service instance 'businessrules' already exists it won't be re-created.<BR />
cf create-service business-rules lite businessrules<BR />
<BR />
# Download the project containing the multi target application descriptor for the rules editor<BR />
# (see <A href="https://bit.ly/handsonsapdev#ep44" target="test_blank" rel="nofollow noopener noreferrer">https://bit.ly/handsonsapdev#ep44</A> for background).<BR />
rm -rf archive.zip editor/<BR />
curl -o archive.zip -s <A href="https://raw.githubusercontent.com/SAP-samples/cloud-businessrules-samples/master/cf-apps/cf-businessruleseditor.zip" target="test_blank" rel="nofollow noopener noreferrer">https://raw.githubusercontent.com/SAP-samples/cloud-businessrules-samples/master/cf-apps/cf-businessruleseditor.zip</A><BR />
unzip -q -d editor ./archive.zip<BR />
<BR />
# Kick off the build - this should produce an archive in mta_archives/ directory.<BR />
cd editor/<BR />
mbt build<BR />
<BR />
# Deploy the archive<BR />
cf deploy mta_archives/businessruleseditor_0.0.1.mtar</CODE></PRE><BR />
Here's a brief description of each of the sections:<BR />
<BR />
I use the 'cf target' command to show the current Cloud Foundry target that my cf CLI tools is pointing to.<BR />
<BR />
With the 'cf create-service' command I create an instance of the 'business-rules' service, using the 'lite' service plan. Note that if an instance with this name exists already, another won't be created.<BR />
<BR />
I grab the archive containing the mta.yaml file that describes the Business Rules Editor multi target application (it's <A href="https://github.com/SAP-samples/cloud-businessrules-samples/" target="_blank" rel="nofollow noopener noreferrer">available on GitHub</A>), and then unzip it into a new directory 'editor/'.<BR />
<BR />
Before deploying this Editor it needs to be built, so that's next - within the 'editor/' directory I use the <A href="https://sap.github.io/cloud-mta-build-tool/" target="_blank" rel="nofollow noopener noreferrer">SAP Cloud MTA Build Tool</A> 'mbt' to do this.<BR />
<BR />
The result of a successful build is that an 'mtar' archive file will be created in a new directory 'mta_archives/' - this archive file contains everything that should be pushed up to the Cloud Foundry environment, and I do this with the 'cf deploy' command.<BR />
<BR />
That's pretty much it - it works very well for me, doing 80% of what I need, for 20% of the effort (I spent around 15 mins writing it).<BR />
<BR />
In case you're interested, here's some sample output, so you can get a feel for how it runs.<BR />
<PRE class="language-perl"><CODE>qmacro@penguin:~/local/projects/github.com/qmacro/handsonsapdev/episodes/ep51<BR />
-&gt; ./rules.bash<BR />
Deploying to:<BR />
api endpoint:   <A href="https://api.cf.eu10.hana.ondemand.com" target="test_blank" rel="nofollow noopener noreferrer">https://api.cf.eu10.hana.ondemand.com</A><BR />
api version:    2.144.0<BR />
user:           dj.adams<BR />
org:            I347491trial_qmacrosubdomain<BR />
space:          dev<BR />
Creating service instance businessrules in org I347491trial_qmacrosubdomain / space dev as dj.adams@sap.com...<BR />
OK<BR />
<BR />
Service businessrules already exists<BR />
[2020-01-28 12:09:52]  INFO Cloud MTA Build Tool version 1.0.8<BR />
[2020-01-28 12:09:52]  INFO generating the "Makefile_20200128120952.mta" file...<BR />
[2020-01-28 12:09:52]  INFO done<BR />
[2020-01-28 12:09:52]  INFO executing the "make -f Makefile_20200128120952.mta p=cf mtar= strict=true mode=" command...<BR />
[2020-01-28 12:09:52]  INFO validating the MTA project<BR />
[2020-01-28 12:09:52]  INFO validating the MTA project<BR />
[2020-01-28 12:09:52]  INFO building the "businessruleseditor_appRouter" module...<BR />
[2020-01-28 12:09:52]  INFO executing the "npm install --production" command...<BR />
.....npm WARN deprecated scmp@1.0.0: scmp v2 uses improved core crypto comparison since Node v6.6.0<BR />
.....<BR />
&gt; @sap/node-jwt@1.6.5 install /home/qmacro/local/projects/github.com/qmacro/handsonsapdev/episodes/ep51/editor/businessruleseditor_appRouter/node_modules/@sap/node-jwt<BR />
&gt; node ./build.js<BR />
<BR />
`linux-x64-v8-6.8` exists; testing<BR />
Binary is fine; exiting<BR />
npm notice created a lockfile as package-lock.json. You should commit this file.<BR />
npm WARN html5-apps-approuter@ No repository field.<BR />
npm WARN html5-apps-approuter@ No license field.<BR />
<BR />
added 236 packages from 133 contributors and audited 407 packages in 10.319s<BR />
found 5 high severity vulnerabilities<BR />
  run `npm audit fix` to fix them, or `npm audit` for details<BR />
[2020-01-28 12:10:03]  INFO the build results of the "businessruleseditor_appRouter" modulewill be packed and saved in the "/home/qmacro/local/projects/github.com/qmacro/handsonsapdev/episodes/ep51/editor/.editor_mta_build_tmp/businessruleseditor_appRouter" folder<BR />
[2020-01-28 12:10:04]  INFO finished building the "businessruleseditor_appRouter" module<BR />
[2020-01-28 12:10:04]  INFO generating the metadata...<BR />
[2020-01-28 12:10:04]  INFO generating the MTA archive...<BR />
[2020-01-28 12:10:05]  INFO the MTA archive generated at: /home/qmacro/local/projects/github.com/qmacro/handsonsapdev/episodes/ep51/editor/mta_archives/businessruleseditor_0.0.1.mtar<BR />
[2020-01-28 12:10:05]  INFO cleaning temporary files...<BR />
Deploying multi-target app archive mta_archives/businessruleseditor_0.0.1.mtar in org I347491trial_qmacrosubdomain / space dev as dj.adams@sap.com...<BR />
<BR />
Uploading 1 files...<BR />
  /home/qmacro/local/projects/github.com/qmacro/handsonsapdev/episodes/ep51/editor/mta_archives/businessruleseditor_0.0.1.mtar<BR />
OK<BR />
Deploying in org "I347491trial_qmacrosubdomain" and space "dev"<BR />
Detected MTA schema version: "3"<BR />
Detected deployed MTA with ID "businessruleseditor" and version "0.0.1"<BR />
Detected new MTA version: "0.0.1"<BR />
Deployed MTA version: "0.0.1"<BR />
kProcessing service "businessruleseditor_html5_repo_runtime"...<BR />
Processing service "businessrules_uaa"...<BR />
Updating service "businessrules_uaa"...<BR />
Updating application "businessruleseditor_appRouter"...<BR />
Application "businessruleseditor_appRouter" attributes are not modified and will not be updated<BR />
Uploading application "businessruleseditor_appRouter"...<BR />
Stopping application "businessruleseditor_appRouter"...<BR />
Staging application "businessruleseditor_appRouter"...<BR />
Application "businessruleseditor_appRouter" staged<BR />
Starting application "businessruleseditor_appRouter"...<BR />
Application "businessruleseditor_appRouter" started and available at "i347491trial-qmacrosubdomain-dev-businessruleseditor-approuter.cfapps.eu10.hana.ondemand.com"<BR />
Deleting discontinued configuration entries for application "businessruleseditor_appRouter"...<BR />
Skipping deletion of services, because the command line option "--delete-services" is not specified.<BR />
Process finished.<BR />
Use "cf dmol -i 25e31dd8-41c7-11ea-a559-eeee0a8615fb" to download the logs of the process.</CODE></PRE><BR />
This results in what I'm looking for, which is the Business Rules Editor application and the service instances that support it - all described by the 'mta.yaml' file mentioned earlier.<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/01/Screenshot-2020-01-28-at-12.23.47.png" /><BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/01/Screenshot-2020-01-28-at-12.23.37.png" /><BR />
<BR />
What have you automated with simple scripts? Let us know in the comments below. And happy scripting!<BR />
<BR />
---<BR />
<BR />
For more thoughts on mainframes today, see the following posts:<BR />
<BR />
<A href="https://blogs.sap.com/2018/08/06/monday-morning-thoughts-mainframes-and-message-documentation/" target="_blank" rel="noopener noreferrer">Monday morning thoughts: mainframes and message documentation</A><BR />
<BR />
<A href="https://blogs.sap.com/2018/04/16/monday-morning-thoughts-upload-download-in-a-cloud-native-world/" target="_blank" rel="noopener noreferrer">Monday morning thoughts: upload / download in a cloud native world</A><BR />
<BR />
and a post from my <A href="https://qmacro.org/" target="_blank" rel="nofollow noopener noreferrer">personal blog</A> that I've been writing posts on for almost two decades:<BR />
<BR />
<A href="https://qmacro.org/2009/09/09/mainframes-and-the-cloud-everything-old-is-new-again/" target="_blank" rel="nofollow noopener noreferrer">Mainframes and the cloud - everything old is new again</A>
---
Annotated links: Episode 50 of Hands-on SAP dev with qmacro
technology-blog-sap
2020-01-17
https://community.sap.com/t5/technology-blogs-by-sap/annotated-links-episode-50-of-hands-on-sap-dev-with-qmacro/ba-p/13424377
2020-01-17-annotated-links-episode-50-of-hands-on-sap-dev-with-qmacro
<EM>This is a searchable description of the content of a live stream recording, specifically <STRONG>âEp.50 - Calling our Business Rule via the runtime APIâ</STRONG> in the â<A href="https://bit.ly/handsonsapdev" target="_blank" rel="nofollow noopener noreferrer">Hands-on SAP dev with qmacro</A>â series. There are links directly to specific highlights in the video recording. For links to annotations of other episodes, please see the â<A href="https://bit.ly/handsonsapdev#replays" target="_blank" rel="nofollow noopener noreferrer">Catch the replays</A>â section of the series blog post.</EM><BR />
<BR />
This episode was streamed live on Fri 17 Jan 2020 and is approximately 60 minutes in length. The stream recording is <A href="https://www.youtube.com/watch?v=5k_iMXJ3J0E" target="_blank" rel="nofollow noopener noreferrer">available on YouTube</A>.<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/01/Screenshot-2020-01-17-at-10.24.17.png" /><BR />
<BR />
(Nominal title: "Chinposin'")<BR />
<BR />
Brief synopsis: We have a simple business rule defined - now itâs time to use the runtime API to call it. As itâs on Cloud Foundry and authentication is via OAuth, weâre in for a fun and interesting episode! (There is a slight change to the plans here after the cloud platform outage yesterday, which has left me bereft of a fully functional Cloud Foundry trial account.)<BR />
<BR />
<A href="https://www.youtube.com/watch?v=5k_iMXJ3J0E&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h01m20s" target="_blank" rel="nofollow noopener noreferrer">00:01:20</A> Saying good morning to everyone, including <SPAN class="mention-scrubbed">31a8856c1f6f4bcfa7f3d890a0b88fd2</SPAN> in Melbourne, who is working his way through the <A href="https://bit.ly/handsonsapdev#replays" target="_blank" rel="nofollow noopener noreferrer">Hands-on SAP Dev live stream recordings</A> and <A href="https://blogs.sap.com/2019/03/05/annotated-links-episode-1-of-hands-on-sap-dev-with-qmacro/#comment-490014" target="_blank" rel="noopener noreferrer">came across</A> an interesting gotcha in <A href="https://bit.ly/handsonsapdev#ep1" target="_blank" rel="nofollow noopener noreferrer">Ep.1</A>, relating to interpolation in the Bash shell. Nice one!<BR />
<BR />
<A href="https://www.youtube.com/watch?v=5k_iMXJ3J0E&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h05m20s" target="_blank" rel="nofollow noopener noreferrer">00:05:20</A> Highlighting an SAP CodeJam that Iâll be running next week, on Thu 23 Feb, (on CAP - Node.js) in Lyon, organised by <SPAN class="mention-scrubbed">pdominique-bio</SPAN> which is documented in his blog post <A href="https://blogs.sap.com/2020/01/16/sap-codejam-goes-south/" target="_blank" rel="noopener noreferrer">SAP CodeJam goes south!</A>.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=5k_iMXJ3J0E&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h07m05s" target="_blank" rel="nofollow noopener noreferrer">00:07:05</A> Also thereâs another SAP CodeJam Iâll be running shortly after that, in Oslo, on the same subject, organised this time by the one and only <SPAN class="mention-scrubbed">rsletta</SPAN>. Itâs on Wed 05 Feb and there are still <A href="https://www.eventbrite.com/e/sap-codejam-oslo-registration-83952954547" target="_blank" rel="nofollow noopener noreferrer">some places available</A>.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=5k_iMXJ3J0E&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h08m15s" target="_blank" rel="nofollow noopener noreferrer">00:08:15</A> I wander briefly off piste trying to think of why ârailway tracksâ reminded me of Bob Dylan. Turns out (having just looked it up) it was a combination of two things that combined to bring about this distraction. In 1975 he released the (now legendary) album â<A href="https://open.spotify.com/album/4WD4pslu83FF6oMa1e19mF" target="_blank" rel="nofollow noopener noreferrer">Blood On The Tracks</A>â and also painted a art piece called âTrain Tracksâ. So there you have it, not a completely bonkers association <span class="lia-unicode-emoji" title=":slightly_smiling_face:">ð</span><BR />
<BR />
<A href="https://www.youtube.com/watch?v=5k_iMXJ3J0E&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h08m40s" target="_blank" rel="nofollow noopener noreferrer">00:08:40</A> Bringing to our attention the re&gt;â¡CAP (un)conference! Organised by a wonderful bunch of folks (get involved, head on over to the <A href="https://app.slack.com/client/T0AFV1C95/CS2TXSR7C/details/info" target="_blank" rel="nofollow noopener noreferrer">recap2020 Slack channel</A>) - it will be in Heidelberg on 15 May this year. The website will be appearing soon, so watch out for it!<BR />
<BR />
<A href="https://www.youtube.com/watch?v=5k_iMXJ3J0E&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h13m50s" target="_blank" rel="nofollow noopener noreferrer">00:13:50</A> Talking about <A href="https://www.openfaas.com/" target="_blank" rel="nofollow noopener noreferrer">OpenFaaS</A> as a Functions-as-a-Service project that we can run on a Raspberry Pi based cluster (amongst other places!) - this is something I definitely want to start looking into as a means to an end (something to run over a Docker Swarm or Kubernetes managed cluster) and an end in itself (FaaS is an important layer in todayâs cloud world).<BR />
<BR />
<A href="https://www.youtube.com/watch?v=5k_iMXJ3J0E&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h14m05s" target="_blank" rel="nofollow noopener noreferrer">00:14:05</A> Donât forget to subscribe to <SPAN class="mention-scrubbed">iinside</SPAN>âs <A href="https://www.youtube.com/channel/UCkzNZP9fzLxRyhnGT2ziSRw" target="_blank" rel="nofollow noopener noreferrer">YouTube Channel</A> - Max is live streaming on a regular (monthly) basis.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=5k_iMXJ3J0E&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h14m40s" target="_blank" rel="nofollow noopener noreferrer">00:14:40</A> A quick shoutout to a great blog post from <SPAN class="mention-scrubbed">rsletta</SPAN> talking about their live streaming approach and equipment for SAP Inside Track Oslo last year - â<A href="https://blogs.sap.com/2020/01/14/stream-on-a-look-at-how-we-broadcasted-sap-inside-track-oslo-2019/" target="_blank" rel="noopener noreferrer">Stream on! - A look at how we broadcasted SAP Inside Track OSLO 2019</A>â.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=5k_iMXJ3J0E&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h14m55s" target="_blank" rel="nofollow noopener noreferrer">00:14:55</A> This brings us neatly on to a related and relatively new initiative called <A href="https://opensit.net" target="_blank" rel="nofollow noopener noreferrer">OpenSIT</A>, from <SPAN class="mention-scrubbed">oliver</SPAN> and friends. The mission is âto make the session content recorded at SAP Inside Tracks easily accessible to SAP community membersâ. Check out this introductory blog post to find out more: â<A href="https://blogs.sap.com/2020/01/09/introducing-opensit/" target="_blank" rel="noopener noreferrer">Introducing OpenSIT</A>â.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=5k_iMXJ3J0E&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h16m00s" target="_blank" rel="nofollow noopener noreferrer">00:16:00</A> Talking about yesterdayâs outage in Frankfurt, which caused me to rethink the plans for this live stream quite quickly! <span class="lia-unicode-emoji" title=":slightly_smiling_face:">ð</span> In any case, you can use the <A href="https://sapcp.statuspage.io" target="_blank" rel="nofollow noopener noreferrer">SAP Cloud Platform status page</A> to monitor services.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=5k_iMXJ3J0E&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h18m50s" target="_blank" rel="nofollow noopener noreferrer">00:18:50</A> Delighted that <SPAN class="mention-scrubbed">christian.drumm</SPAN> picked up on the two command line utilities I used to create a little logo, those are <A href="http://www.figlet.org/" target="_blank" rel="nofollow noopener noreferrer">figlet</A> and <A href="https://github.com/busyloop/lolcat/" target="_blank" rel="nofollow noopener noreferrer">lolcat</A>.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=5k_iMXJ3J0E&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h20m00s" target="_blank" rel="nofollow noopener noreferrer">00:20:00</A> Setting the scene for something I wanted to share on CAP environments, and managing, say, development and production profiles separately. This means you can use SQLite in development locally, for example, but use HANA for production, and use the same build and deploy process, controlling the environment switch with an environment variable (<CODE>NODE_ENV</CODE>). The scene is the <A href="https://github.com/SAP-samples/cloud-cap-nodejs-codejam/tree/master/exercises/10" target="_blank" rel="nofollow noopener noreferrer">last exercise</A> in the CAP - Node.js CodeJam content, specifically step 6 where I had just modified the instructions to get the attendees to overwrite the DB type in <CODE>package.json</CODE>. Thereâs a better way, which I knew at the time but just couldnât remember fully.<BR />
<BR />
The better way, as we see from the short demo (using the relatively new design time package <CODE><a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a>/cds-dk</CODE>), is to use the âprofileâ concept, described in the <A href="https://cap.cloud.sap/docs/advanced/config" target="_blank" rel="nofollow noopener noreferrer">Runtime Configuration for Node.js</A> section of the CAP docs.<BR />
<BR />
(And yes, during this demo I installed the <CODE>mbt</CODE> build tool for no reason - as I was only intending to do a <CODE>cds build/all</CODE> - doh!).<BR />
<BR />
<A href="https://www.youtube.com/watch?v=5k_iMXJ3J0E&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h34m30s" target="_blank" rel="nofollow noopener noreferrer">00:34:30</A> Another short distraction on languages that start indexing at 1 rather than 0, ABAP being one of them, as well as FORTRAN, Julia, Smalltalk and APL. I dug into this just now a little bit more and it seems that zero-indexing came from BCPL and specifically from compilation of that language for the classic <A href="https://en.wikipedia.org/wiki/IBM_7090#IBM_7094" target="_blank" rel="nofollow noopener noreferrer">IBM 7094</A> mainframe from the early 1960âs. My vague (and ultimately incorrect) musing that Pascal or Modula 2 might also be languages that are one-indexed was because I was confusing the father of these two languages, Nilkaus Wirth, with Edsger W. Dijkstra, who wrote a paper â<A href="https://www.cs.utexas.edu/users/EWD/transcriptions/EWD08xx/EWD831.html" target="_blank" rel="nofollow noopener noreferrer">Why numbering should start at zero</A>â. The amount of rubbish that is wrongly tangled up in my brain is ridiculous.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=5k_iMXJ3J0E&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h36m30s" target="_blank" rel="nofollow noopener noreferrer">00:36:30</A> This is what the resulting modified <CODE>cds -&gt; requires</CODE> section of <CODE>package.json</CODE> looks like after the addition of a <CODE>[production]</CODE> section:<BR />
<PRE class="cds"><CODE>"cds": {<BR />
  "requires": {<BR />
    "db": {<BR />
      "kind": "sqlite",<BR />
      "model": [<BR />
        "db/",<BR />
        "srv/",<BR />
        "app/"<BR />
      ],<BR />
      "[production]": {<BR />
        "kind": "hana"<BR />
      },<BR />
      "credentials": {<BR />
        "database": "db.db"<BR />
      }<BR />
    }<BR />
  }</CODE></PRE><BR />
When <CODE>NODE_ENV</CODE> is set to <CODE>[production]</CODE>, the value of âhanaâ is used for <CODE>cds -&gt; requires -&gt; db -&gt; kind</CODE> rather than âsqliteâ. Neat! (Thanks very much to <SPAN class="mention-scrubbed">david.kunz2</SPAN> who was very patient with me on this yesterday, by the way!)<BR />
<BR />
You may be interested to know that Iâve now updated the CodeJam content (exercise 10 step 6) to include this, with this commit: <A href="https://github.com/SAP-samples/cloud-cap-nodejs-codejam/commit/86280ab0fd9a815e9a6554860649244f7f22a198" target="_blank" rel="nofollow noopener noreferrer">update 10.6 to describe use of profiles</A>.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=5k_iMXJ3J0E&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h40m30s" target="_blank" rel="nofollow noopener noreferrer">00:40:30</A> Moving over to Business Rules and the API Hub now, to complete the chain of HTTP calls that we need to invoke API endpoints in the set of Business Rules APIs, following on from where we left off in <A href="https://bit.ly/handsonsapdev#ep49" target="_blank" rel="nofollow noopener noreferrer">Ep.49</A>.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=5k_iMXJ3J0E&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h43m25s" target="_blank" rel="nofollow noopener noreferrer">00:43:25</A> Looking at what we had in that previous episode, which I now have formed into a simple shell script (<CODE>gettoken</CODE>) for the purposes of demonstration and quick re-running:<BR />
<PRE class="shell"><CODE>#!/bin/bash<BR />
<BR />
curl \<BR />
  --silent \<BR />
  --netrc \<BR />
  --header "Content-Type: application/x-www-form-urlencoded" \<BR />
  --data "grant_type=password&amp;response_type=token&amp;username=dj.adams@sap.com&amp;password=$PASSWORD" \<BR />
  <A href="https://i347491trial.authentication.eu10.hana.ondemand.com/oauth/token" target="test_blank" rel="nofollow noopener noreferrer">https://i347491trial.authentication.eu10.hana.ondemand.com/oauth/token</A></CODE></PRE><BR />
This is a call to the OAuth 2.0 authentication endpoint, to request a bearer token with which to make subsequent calls to the actual Business Rules API endpoints.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=5k_iMXJ3J0E&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h45m10s" target="_blank" rel="nofollow noopener noreferrer">00:45:10</A> Using <A href="https://www.gnu.org/software/bash/manual/html_node/Command-Substitution.html" target="_blank" rel="nofollow noopener noreferrer">command substitution</A>, we grab the token using <CODE>jq --raw-output '.access_token'</CODE> and save the value in the <CODE>TOKEN</CODE> environment variable (the name of this variable is not significant).<BR />
<BR />
<A href="https://www.youtube.com/watch?v=5k_iMXJ3J0E&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h47m50s" target="_blank" rel="nofollow noopener noreferrer">00:47:50</A> We can then use this token to authenticate an actual API call, which we pick from the rules repository (i.e.&nbsp;design time) endpoint. The call looks like this:<BR />
<PRE class="shell"><CODE>#!/bin/bash<BR />
<BR />
curl \<BR />
  --silent \<BR />
  --netrc \<BR />
  --header "Authorization: Bearer ${TOKEN}" \<BR />
  <A href="https://bpmrulerepository.cfapps.eu10.hana.ondemand.com/rules-service/rest/v1/projects" target="test_blank" rel="nofollow noopener noreferrer">https://bpmrulerepository.cfapps.eu10.hana.ondemand.com/rules-service/rest/v1/projects</A></CODE></PRE><BR />
And in fact, thereâs something we used in this call that was actually completely unnecessary - can you spot what it was? Let me know in the comments to this blog post.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=5k_iMXJ3J0E&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h52m10s" target="_blank" rel="nofollow noopener noreferrer">00:52:10</A> We finish off with a little bit of <CODE>jq</CODE> syntax, to pull out properties from the response returned from the design time API endpoint:<BR />
<PRE class="shell"><CODE>./getprojectinfo | jq '.[0].name'</CODE></PRE><BR />
â¦ as well as a short discussion on OAuth 2.0 authorisation endpoints, real API endpoints, and CSRF (XSRF) tokens.<BR />
<BR />
And that just about wraps it up for this episode - thanks as always for helping make our live stream series fun and engaging!
---
My learning list for 2020
technology-blog-sap
2020-01-12
https://community.sap.com/t5/technology-blogs-by-sap/my-learning-list-for-2020/ba-p/13453862
2020-01-12-my-learning-list-for-2020
<EM>Turning the page into a new year is often useful to reflect on the previous period and look forward to the next one. I usually don't set hard and fast "new year resolutions" but like some of you out there I have a general idea of what I'd like to dig deeper into over the next 12 months. Here's some of what's on that list.</EM><BR />
<BR />
My colleagues <SPAN class="mention-scrubbed">mariusobert</SPAN> and <SPAN class="mention-scrubbed">vitaliy.rudnytskiy</SPAN> have already shared their learning bucket lists for this year, and I thought I'd do the same. I find it fascinating to see what other people are interested in, both in how they differ and how they overlap.<BR />
<BR />
<STRONG>Looking back</STRONG><BR />
<BR />
Learning is what I do, and 2019 was no exception. While live streaming still reminds me of the art of plate spinning, I've become more comfortable with the tech. Along the way of course I've also become more proficient in some of the subjects we've covered, such as the SAP Cloud Application Programming Model, OData V4, Business Rules (and other business services) on SAP Cloud Platform Cloud Foundry, functional programming and more besides.<BR />
<BR />
That said, I still feel as though <A href="https://blogs.sap.com/2018/10/01/monday-morning-thoughts-impostor-syndrome/" target="_blank" rel="noopener noreferrer">I've no idea what I'm doing</A>. But I've learned to accept that - it's part of who I am, and that's fine.<BR />
<BR />
&nbsp;<BR />
<BR />
<STRONG>Looking forward</STRONG><BR />
<BR />
As <SPAN class="mention-scrubbed">james.governor</SPAN> and I talked briefly about in the last part of <A href="https://www.youtube.com/watch?v=hpMiXp8WLvo" target="_blank" rel="nofollow noopener noreferrer">our interview at SAP TechEd 2019 Barcelona</A> I feel quite strongly that the cloud is forming into what I'm going to call "the new mainframe", with characteristics such as boundless computing resources, different forms of compute unit (from serverless through to VMs, from black box APIs through to software-as-as-service offerings) and consumption-based billing that I remember from the mid 1980s when we ran IBM big iron; in this context the billing was internal, but still measured in a similar way to what we see today.<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/01/Screenshot-2020-01-12-at-18.54.13.png" /><BR />
<BR />
But I think the most significant part of all of this is that, for the most part, the almost infinite power is at our fingertips in two very simple forms: web browser (i.e. native*) based GUIs and character terminals. In other words, the present and future of computing, in my eyes, is very much mainframe based in that we require very limited compute complexity on our desktops. This is partly why Chrome OS as a workstation operating system makes so much sense to me (beyond it also being more reliable, stable, and secure than anything else I've used).<BR />
<BR />
*<EM>Yes, native. Web is the true native GUI, everything else is merely OS-specific.</EM><BR />
<BR />
This is the thinking behind my hashtag-based mantra <A href="https://twitter.com/search?q=%23TheFutureIsTerminal&amp;src=typed_query" target="_blank" rel="nofollow noopener noreferrer">#TheFutureIsTerminal</A> - heck, I even have a tshirt that helps me make the point.<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/01/Screenshot-2020-01-12-at-16.12.38.png" /><BR />
<BR />
For me the terminal is the ultimate UI. Simple, reliable and pretty much ubiquitous. And it's built on solid technology that has been around for as long as I have, so it's stable and well understood. And much of the headless cloud computing power we have runs natively on Linux where remote terminal access is the obvious choice.<BR />
<BR />
Add to this the scriptable nature of command line interfaces (CLIs) and application programming interfaces (APIs), combine it with some shell magic (such as bash or zsh) and you have a wonderful environment in which to work, and that is accessible from pretty much anywhere and from any device, <A href="https://blogs.sap.com/2020/01/03/spice-up-your-windows-terminal/" target="_blank" rel="noopener noreferrer">even Windows-based devices!</A> <span class="lia-unicode-emoji" title=":winking_face:">ð</span> Joking aside, you may also be interested to listen to a reading aloud of <A href="https://www.hanselman.com/" target="_blank" rel="nofollow noopener noreferrer">Scott Hanselman</A>'s post on consoles, terminals &amp; shells: <A href="https://anchor.fm/tech-aloud/episodes/Whats-the-difference-between-a-console--a-terminal--and-a-shell----Scott-Hanselman---20-Sep-2019-e5qbdu" target="_blank" rel="nofollow noopener noreferrer">What's the difference between a console, a terminal, and a shell?</A><BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/01/2310259-1568661278810-bf47ea92c8b6-1.jpg" height="186" width="186" /><BR />
<BR />
So some of the items that I'd like to dig deeper into and learn more about this year are a result of this way of looking at computing, both in business and as a hobby.<BR />
<BR />
&nbsp;<BR />
<BR />
<STRONG>Part 1 - Understanding core things better</STRONG><BR />
<BR />
And so to the list, where I begin with a category that contains important generic topics that I know something about already, but not enough.<BR />
<BR />
Too often I hack around with core services and utilities on the command line, and find myself googling how to do simple things, instead of reading the manual (the man pages that are automatically available right there in the terminal environment) and building up a more solid and long lasting understanding.<BR />
<BR />
An example this weekend was the <A href="https://en.wikipedia.org/wiki/Secure_Shell" target="_blank" rel="nofollow noopener noreferrer">Secure Shell</A> (SSH), which I was using without knowing as much as I feel as though I should do. I <A href="https://twitter.com/qmacro/status/1216384864800387078" target="_blank" rel="nofollow noopener noreferrer">hacked around with configuration</A> (ssh_config and sshd_config, if you're interested) until I got things working. But I knew that I was really just doing the equivalent of thrashing around until things stopped being broken.<BR />
<BR />
Another related example is the vast <A href="https://en.wikipedia.org/wiki/X_Window_System" target="_blank" rel="nofollow noopener noreferrer">X Windows System</A>, which, while pretty old, still works well and reliably, and compliments the terminal environment nicely. I have a fondness for X which is a little arcane, but hits that sweet spot for me in being both interesting as an old set of technologies to dig into as a hobbyist (or perhaps a computing archaeologist) and useful as tech that still works today. X is perhaps as relevant now in the new mainframe era as it ever was. I have an old book that I've taken from my shelves that I'd like to dig into for this.<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/01/IMG_20200112_151618.jpg" height="395" width="296" /><BR />
<BR />
So SSH and the X Windows System are just two technologies that I'd like to understand better. But that's only the tip of the iceberg. In the same vein, I'd like to grow my understanding of Cloud Foundry and have the <A href="https://docs.cloudfoundry.org/cf-cli/" target="_blank" rel="nofollow noopener noreferrer">CF CLI</A> be second nature to me. Similarly with <A href="https://www.ansible.com/" target="_blank" rel="nofollow noopener noreferrer">Ansible</A>, which I used recently for the first time to manage the Raspberry Pi cluster I set up with my son Joseph to eventually run a local Kubernetes cluster.<BR />
<BR />
&nbsp;<BR />
<BR />
<STRONG>Part 2 - New technologies</STRONG><BR />
<BR />
And so we come to the second part of the list, of technologies that are mostly new to me, but ones that I see will play an important part in the new mainframe era future.<BR />
<BR />
With that, <A href="https://kubernetes.io/" target="_blank" rel="nofollow noopener noreferrer">Kubernetes</A> is in first place (this is why I built the cluster over the holiday period), as a specific example of a more general topic that represents containerisation.<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/01/IMG_20200103_132947-1.jpg" /><BR />
<BR />
This covers virtualisation in the form of virtual machines (VMs), but more specifically <A href="https://en.wikipedia.org/wiki/LXC" target="_blank" rel="nofollow noopener noreferrer">LXC</A> powered containers and related technologies such as <A href="https://www.docker.com/" target="_blank" rel="nofollow noopener noreferrer">Docker</A> (if you want to learn more about Docker, <SPAN class="mention-scrubbed">vitaliy.rudnytskiy</SPAN> has a nice series "<A href="https://blogs.sap.com/tag/understandcontainers/" target="_blank" rel="noopener noreferrer">Understanding Containers</A>" here on the SAP Community).<BR />
<BR />
I guess there's an irony in the title of this part of the list ("New technologies"), in that none of them are really new - the mainframe operating systems that I used in the 1980s ran on virtual machines way back then, specifically I remember that the MVS/XA and MVS/ESA operating system environments were actually hosted on <A href="https://en.wikipedia.org/wiki/VM_(operating_system)" target="_blank" rel="nofollow noopener noreferrer">VM/CMS</A> which dates back to the 1970s.<BR />
<BR />
One thing that is relatively new, in terms of being available, is <A href="https://github.com/actions" target="_blank" rel="nofollow noopener noreferrer">GitHub Actions</A> which is one of the building blocks that has been released on the platform since Microsoft took over, and is one of the things that has helped cement my thoughts about the cloud being the new mainframe. I've dabbled already with GitHub Actions, having built <A href="https://github.com/qmacro/action-add-issue-to-project-column" target="_blank" rel="nofollow noopener noreferrer">an action to auto-assign a new issue to a specific project</A> (and I use this action every day), in an attempt to get my head around the concepts, but I'd like to extend my knowledge here too.<BR />
<BR />
&nbsp;<BR />
<BR />
<STRONG>Part 3 - Language and expression</STRONG><BR />
<BR />
It's no secret that I am a big fan of the functional programming style. This is something I want to dig into more this year, and move closer towards a more natural, second-nature understanding of some of the concepts that this style embraces and enables. I'd like to dig even more into <A href="https://ramdajs.com" target="_blank" rel="nofollow noopener noreferrer">Ramda</A>, the functional programming library for JavaScript, and its companion library <A href="https://char0n.github.io/ramda-adjunct/2.23.0/" target="_blank" rel="nofollow noopener noreferrer">Ramda Adjunct</A>.<BR />
<BR />
Along the same lines as others such as <SPAN class="mention-scrubbed">mariusobert</SPAN> and <SPAN class="mention-scrubbed">helmut.tammen2</SPAN> I'd like to look more into <A href="https://www.typescriptlang.org/" target="_blank" rel="nofollow noopener noreferrer">TypeScript</A> too, pretty much for similar reasons. I've long been a user of dynamically typed scripting languages but my journey into functional programming has taught me the benefits of strong typing and type systems generally. And it's just JavaScript underneath, which helps a lot.<BR />
<BR />
&nbsp;<BR />
<BR />
<STRONG>Part 4 - SAP technologies</STRONG><BR />
<BR />
There's no particular reason why this part is at the end; as you might have guessed, everything on my list so far is to help my working life in the SAP world. As SAP has moved more and more towards embracing open standards and technologies, it's natural that the overlap between SAP and non-SAP topics is getting larger and larger all the time.<BR />
<BR />
I'm particularly looking forward to diving deeper into the <A href="https://developers.sap.com/topics/cloud-sdk.html" target="_blank" rel="noopener noreferrer">Cloud SDK</A>, and how to use that, along with services on SAP Cloud Platform generally, to build upon existing "brownfield" installations. This of course means using lots of different technologies together, combining the <A href="https://api.sap.com/" target="_blank" rel="noopener noreferrer">API Hub</A> as a directory for available services, Cloud Foundry as the deployment target platform, using the <A href="https://blogs.sap.com/2019/05/07/now-available-the-sap-cp-extension-factory/" target="_blank" rel="noopener noreferrer">Extension Factory</A> (and, by association, <A href="https://kyma-project.io/" target="_blank" rel="nofollow noopener noreferrer">Kyma</A>).<BR />
<BR />
Not to mention keeping my brain sharp on all things <A href="https://cap.cloud.sap/" target="_blank" rel="nofollow noopener noreferrer">CAP</A>. Because we shouldn't forget, that <A href="https://blogs.sap.com/2019/11/06/cap-is-important-because-its-not-important/" target="_blank" rel="noopener noreferrer">CAP is important, because it's not important</A>.<BR />
<BR />
&nbsp;<BR />
<BR />
<STRONG>Wrapping up</STRONG><BR />
<BR />
So there you have it. If nothing drastic changes, this is the learning trajectory that I hope to keep myself following. One thing is for certain, and that's I'm looking forward to learning and sharing, whatever the topic.<BR />
<BR />
See you <A href="https://bit.ly/handsonsapdev" target="_blank" rel="nofollow noopener noreferrer">online</A>!
---
Annotated links: Episode 49 of Hands-on SAP dev with qmacro
technology-blog-sap
2020-01-03
https://community.sap.com/t5/technology-blogs-by-sap/annotated-links-episode-49-of-hands-on-sap-dev-with-qmacro/ba-p/13442933
2020-01-03-annotated-links-episode-49-of-hands-on-sap-dev-with-qmacro
<EM>This is a searchable description of the content of a live stream recording, specifically <STRONG>"Ep.49 â Defining our first Business Rules project"</STRONG> in the "<A href="https://bit.ly/handsonsapdev" target="_blank" rel="nofollow noopener noreferrer">Hands-on SAP dev with qmacro</A>" series. There are links directly to specific highlights in the video recording. For links to annotations of other episodes, please see the "<A href="https://bit.ly/handsonsapdev#replays" target="_blank" rel="nofollow noopener noreferrer">Catch the replays</A>" section of the series blog post.</EM><BR />
<BR />
This episode was streamed live on Fri 03 Jan 2020 and is approximately 65 minutes in length. The stream recording is <A href="https://www.youtube.com/watch?v=B-jgIxwPOic" target="_blank" rel="nofollow noopener noreferrer">available on YouTube</A>.<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/01/Screenshot-2020-01-03-at-13.11.54.png" /><BR />
<BR />
Brief synopsis: Now we have the admin âManage Projectsâ UI (and understand how the magic works) itâs time to create our first Business Rules project.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=B-jgIxwPOic&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h00m20s" target="_blank" rel="nofollow noopener noreferrer">00:00:20</A> The first live stream of 2020, and the first live stream on YouTube rather than Twitter. And the FIFTIETH so far. Exciting!<BR />
<BR />
<A href="https://www.youtube.com/watch?v=B-jgIxwPOic&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h03m00s" target="_blank" rel="nofollow noopener noreferrer">00:03:00</A> I've been tweaking my YouTube channel to fill it out with hopefully useful information - check it out at <A class="uri" href="https://youtube.com/djadams-qmacro" target="_blank" rel="nofollow noopener noreferrer">https://youtube.com/djadams-qmacro</A> and of course please don't forget to SUBSCRIBE, and you can set reminders for upcoming live streams too.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=B-jgIxwPOic&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h05m35s" target="_blank" rel="nofollow noopener noreferrer">00:05:35</A> Tshirt giveaway! In a previous live stream <SPAN class="mention-scrubbed">jbm1991</SPAN> mentioned that his UI5 tshirt was getting pretty old, and that prompted me to dig out some tshirts that I can give away. I have the following (all in large):<BR />
<UL><BR />
 	<LI>A custom "&gt;The Future Is Terminal_" tshirt (that I got printed via Spreadshirt)</LI><BR />
 	<LI>A semi-vintage UI5 tshirt with the Phoenix logo</LI><BR />
 	<LI>An SAP Cloud Application Programming Model tshirt with the logo on it too</LI><BR />
 	<LI>An SAP CodeJam Wroclaw tshirt from when I was over there giving a CodeJam</LI><BR />
</UL><BR />
I'll draw the winner of the first tshirt on the next live stream - if you would like to be considered in that draw, please add a comment saying so, to the <A href="https://www.youtube.com/watch?v=B-jgIxwPOic" target="_blank" rel="nofollow noopener noreferrer">recording of this Ep.49live stream on my channel</A>.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=B-jgIxwPOic&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h09m45s" target="_blank" rel="nofollow noopener noreferrer">00:09:45</A> My son Joseph and I have been working on a Raspberry Pi based cluster over the holiday period, which I showed to the camera. All powered via power-over-ethernet (PoE) via additional PoE HATs. Right now I'm controlling them remotely via <A href="https://www.ansible.com" target="_blank" rel="nofollow noopener noreferrer">Ansible</A>. The intention is to build a Kubernetes cluster with them (one primary and three secondary nodes). We learned everything we needed to know from <A href="https://jeffgeerling.com" target="_blank" rel="nofollow noopener noreferrer">Jeff Geerling</A> and his <A href="https://www.jeffgeerling.com/project/raspberry-pi-dramble" target="_blank" rel="nofollow noopener noreferrer">Pi Dramble</A> project.<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/01/pi.jpg" /><BR />
<BR />
As an aside, I learned that "Bramble" is the name given to a cluster of Raspberry Pis (and I guess "Dramble" = "Drupal" + "Bramble"), and in Douglas Adams's honour, I decided to set the hostnames of my our Raspberry Pis to "brambleweeny1", "brambleweeny2", "brambleweeny3" and "brambleweeny4", in reference to <A href="https://www.clivebanks.co.uk/THHGTTG/THHGTTGradio2.htm" target="_blank" rel="nofollow noopener noreferrer">the "Bambleweeny 57 Sub-Meson Brain" in Hitch Hiker's Guide To The Galaxy.</A>:<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/01/IMG_20200103_132947.jpg" /><BR />
<BR />
"<EM>The Infinite Improbability Drive is a wonderful new method of crossing interstellar distances in a few seconds, without all that tedious mucking about in hyperspace. The principle of generating small amounts of finite probability by simply hooking the logic circuits of a Bambleweeny Fifty-Seven Sub-Meson Brain to an atomic vector plotter suspended in a strong Brownian Motion producer - say a nice hot cup of tea - were, of course, well understood.</EM>"<BR />
<BR />
<A href="https://www.youtube.com/watch?v=B-jgIxwPOic&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h12m00s" target="_blank" rel="nofollow noopener noreferrer">00:12:00</A> Note that the "upcoming" section of the canonical Hands-on SAP dev with qmacro blog post, whichyou can always get here (this link including the "upcoming" reference): <A class="uri" href="https://bit.ly/handsonsapdev#upcoming" target="_blank" rel="nofollow noopener noreferrer">https://bit.ly/handsonsapdev#upcoming</A>, now has a "Live Stream Link" which will take you directly to the upcoming live stream video link on YouTube, for which you can set a reminder. If you want to find out how to set reminders, have a look at this 30 second video I recorded yesterday: <A href="https://www.youtube.com/watch?v=mEaHqShesMw" target="_blank" rel="nofollow noopener noreferrer">Subscribing and setting reminders for upcoming HandsOnSAPDev live stream episodes</A>.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=B-jgIxwPOic&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h15m05s" target="_blank" rel="nofollow noopener noreferrer">00:15:05</A> Having a quick look, via the <A href="https://blogs.sap.com/2020/01/02/annotated-links-episode-48-of-hands-on-sap-dev-with-qmacro/" target="_blank" rel="noopener noreferrer">annotation blog post for Ep.48</A>, where we left off with the Business Rules service on SAP Cloud Platform Cloud Foundry environment.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=B-jgIxwPOic&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h20m10s" target="_blank" rel="nofollow noopener noreferrer">00:20:10</A> Opening up my SAP Cloud Platform cockpit, and navigating to the apps and services running already in my CF trial subaccount, specifically in the DEV space. There's a single app, which is the Business Rules Editor app, and three service instances upon which the app relies (the Business Rules service itself, a UAA service instance and an instance of the HTML5 repo service supplying the app artifacts themselves).<BR />
<BR />
<A href="https://www.youtube.com/watch?v=B-jgIxwPOic&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h25m00s" target="_blank" rel="nofollow noopener noreferrer">00:25:00</A> Starting to put together our first Business Rules project, which will be what we have seen in previous episodes, i.e. a very simple "Flight Discount" project that gives discounts for given airlines.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=B-jgIxwPOic&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h25m30s" target="_blank" rel="nofollow noopener noreferrer">00:25:30</A> I'd noticed by accident that there is a reference to the Business Rules service on SAP Cloud Platform ...over on the Cloud Foundry website! Unfortunately the link there takes you to a "not found" page in the SAP Help Portal. A partial success, I guess <span class="lia-unicode-emoji" title=":confused_face:">ð</span> (I've informed the team).<BR />
<BR />
<A href="https://www.youtube.com/watch?v=B-jgIxwPOic&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h26m00s" target="_blank" rel="nofollow noopener noreferrer">00:26:00</A> We start to build out the simple project by creating and activating the artifacts, over the next 20 mins or so. Here's a quick summary of the artifacts we created, in some sort of structure -- that makes sense to me, anyway! (Note that we forgot to associate the ruleset with the ruleservice, so I've just done that now.)<BR />
<PRE><CODE>            Project: airlinediscounts<BR />
            -------------------------<BR />
+--------&gt;&gt; Dataobject: flightinfo<BR />
|                       |<BR />
|                       +-- Attribute: carrier (String)<BR />
|<BR />
|   +----&gt;&gt; Dataobject: discountinfo  &lt;&lt;-------------------+<BR />
|   |                    |                                 |<BR />
|   |                    +-- Attribute: discount (Number)  |<BR />
|   |                                                      |<BR />
|   |  +-&gt;&gt; Rule: airlinediscount                          |<BR />
|   |  |          |                                        |<BR />
|   |  |          +-- Result: discountinfo ----------------+<BR />
|   |  |<BR />
|   |  |    Ruleset: discountruleset<BR />
|   |  |             |<BR />
|   |  +-----------  +-- Rule: airlinediscount<BR />
|   |                |<BR />
|   |                +-- Rule Service: airlinediscount<BR />
|   |<BR />
|   |       Ruleservice: discountruleservice<BR />
|   |                    |<BR />
|   +-----------------   +-- Vocabulary (Result): discountinfo<BR />
|                        |<BR />
+---------------------   +-- Vocabulary (Input): flightinfo</CODE></PRE><BR />
<A href="https://www.youtube.com/watch?v=B-jgIxwPOic&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h44m50s" target="_blank" rel="nofollow noopener noreferrer">00:44:50</A> Now we have this simple Business Rules project set up, we go over to the <A href="https://api.sap.com" target="_blank" rel="noopener noreferrer">API Business Hub</A> to check out the <A href="https://api.sap.com/package/SAPCPBusinessRulesAPIs?section=Artifacts" target="_blank" rel="noopener noreferrer">Business Rules service API collection</A>, which includes a three-way combination of offerings, based on environment (CF and Neo), target (designtime / rule authoring and runtime / rule execution) and version (the runtime API set has a deprecated version 1 for both Neo and CF environments).<BR />
<BR />
<A href="https://www.youtube.com/watch?v=B-jgIxwPOic&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h51m05s" target="_blank" rel="nofollow noopener noreferrer">00:51:05</A> Having reviewed the different areas of the <A href="https://api.sap.com/api/SAP_CF_BusinessRules_Repository/resource" target="_blank" rel="noopener noreferrer">Rule Authoring API for Cloud Foundry</A>, such as Export/Import, Projects, Data Objects and so on, we pick a simple Projects based endpoint to get basic information for projects:<BR />
<PRE><CODE>GET /v1/projects</CODE></PRE><BR />
<A href="https://www.youtube.com/watch?v=B-jgIxwPOic&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h51m30s" target="_blank" rel="nofollow noopener noreferrer">00:51:30</A> We look at my "EU10" environment configuration to understand how things work from an authentication perspective, noting that unlike in the Neo environment where we had been able to use HTTP Basic Authentication, we must embrace OAuth 2.0. So first of all thank goodness for the API Business Hub's "environments" feature, which does a lot of magic for us. But of course while we like magic, we want to know what's going on, and that's what we endeavour to find out next. We note first that there are two sections to the environment definition:<BR />
<OL style="list-style-type: decimal"><BR />
 	<LI>the endpoint definition (the root URL of what we'll be using in the actual API calls). My endpoint is <CODE><A href="https://bpmrulerepository.cfapps.eu10.hana.ondemand.com/rules-service/rest" target="test_blank" rel="nofollow noopener noreferrer">https://bpmrulerepository.cfapps.eu10.hana.ondemand.com/rules-service/rest</A></CODE>.</LI><BR />
 	<LI>the OAuth 2.0 authentication detail, consisting of the Client Id, Secret, and Token URL.</LI><BR />
</OL><BR />
All three parts of the authentication details are obtained from the service key data that we created in a previous episode, which we briefly review at this point too, to match up what we have there with what we have in this environment definition.<BR />
<BR />
What the environment magic does when we want to make a call is first obtain an access token with this endpoint information, and then that access token, one retrieved, is used in the actual API calls for bearer token based authentication. This is described briefly but very nicely by <SPAN class="mention-scrubbed">archana.shukla</SPAN> in Step VII "Test Business Rules" of her blog post <A href="https://blogs.sap.com/2018/03/29/quick-start-guide-to-sap-business-rules-service-in-cloud-foundry/" target="_blank" rel="noopener noreferrer">Quick Start Guide to SAP Cloud Platform Business Rules Service in Cloud Foundry</A>.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=B-jgIxwPOic&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h54m00s" target="_blank" rel="nofollow noopener noreferrer">00:54:00</A> With that explanation out of the way, we hit the API endpoint <CODE>/v1/projects</CODE>, in other words the URL <CODE><A href="https://bpmrulerepository.cfapps.eu10.hana.ondemand.com/rules-service/rest/v1/projects" target="test_blank" rel="nofollow noopener noreferrer">https://bpmrulerepository.cfapps.eu10.hana.ondemand.com/rules-service/rest/v1/projects</A></CODE>, using the magic of the API Business Hub and get a response, which is a list containing a single project, like this, and that project data is what we're looking for. Nice!<BR />
<DIV><BR />
<PRE class="sourceCode json"><CODE class="sourceCode json"><SPAN class="ot">[</SPAN><BR />
  <SPAN class="fu">{</SPAN><BR />
    <SPAN class="dt">"Id"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="st">"94ad349cbeec476ea259354805b35520"</SPAN><SPAN class="fu">,</SPAN><BR />
    <SPAN class="dt">"Name"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="st">"airlinediscounts"</SPAN><SPAN class="fu">,</SPAN><BR />
    <SPAN class="dt">"Description"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="ot">[</SPAN><BR />
      <SPAN class="fu">{</SPAN><BR />
        <SPAN class="dt">"Language"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="st">"en"</SPAN><SPAN class="fu">,</SPAN><BR />
        <SPAN class="dt">"Text"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="st">"airlinediscounts"</SPAN><BR />
      <SPAN class="fu">}</SPAN><SPAN class="ot">,</SPAN><BR />
      <SPAN class="fu">{</SPAN><BR />
        <SPAN class="dt">"Language"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="st">""</SPAN><SPAN class="fu">,</SPAN><BR />
        <SPAN class="dt">"Text"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="st">"airlinediscounts"</SPAN><BR />
      <SPAN class="fu">}</SPAN><BR />
    <SPAN class="ot">]</SPAN><SPAN class="fu">,</SPAN><BR />
    <SPAN class="dt">"ChangedOn"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="st">"2020-01-03T08:42:50.824Z"</SPAN><SPAN class="fu">,</SPAN><BR />
    <SPAN class="dt">"ChangedBy"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="st">"dj.adams@sap.com"</SPAN><SPAN class="fu">,</SPAN><BR />
    <SPAN class="dt">"Annotations"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="ot">[]</SPAN><SPAN class="fu">,</SPAN><BR />
    <SPAN class="dt">"Version"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="fu">{</SPAN><BR />
      <SPAN class="dt">"Id"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="st">"000000000000000000"</SPAN><SPAN class="fu">,</SPAN><BR />
      <SPAN class="dt">"Revision"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="st">"000000000000000000"</SPAN><SPAN class="fu">,</SPAN><BR />
      <SPAN class="dt">"Description"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="st">"Initial"</SPAN><SPAN class="fu">,</SPAN><BR />
      <SPAN class="dt">"ChangedOn"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="st">"2020-01-03T08:27:17.096Z"</SPAN><SPAN class="fu">,</SPAN><BR />
      <SPAN class="dt">"ChangedBy"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="st">"dj.adams@sap.com"</SPAN><SPAN class="fu">,</SPAN><BR />
      <SPAN class="dt">"ParentId"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="st">"000000000000000000"</SPAN><BR />
    <SPAN class="fu">}</SPAN><BR />
  <SPAN class="fu">}</SPAN><BR />
<SPAN class="ot">]</SPAN></CODE></PRE><BR />
</DIV><BR />
<A href="https://www.youtube.com/watch?v=B-jgIxwPOic&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h59m50s" target="_blank" rel="nofollow noopener noreferrer">00:59:50</A> With time pressing, we take one more step, to understand even better what is going on under the hood, in the magic that's supplied by the API Business Hub. And that of course is terminal based, because as we all know, "the future is terminal", right? <span class="lia-unicode-emoji" title=":slightly_smiling_face:">ð</span><BR />
<BR />
Using <A href="https://community.apigee.com/articles/39911/do-you-use-curl-stop-using-u-please-use-curl-n-and.html" target="_blank" rel="nofollow noopener noreferrer">curl and .netrc</A> we set up an HTTP request to ask for an access token, which is the first step in being able to make an actual API call, as described just above.<BR />
<BR />
The call ended up looking like this, split into separate lines for better readability:<BR />
<PRE class="shell"><CODE>curl \<BR />
  --verbose \<BR />
  -n \<BR />
  -X POST \<BR />
  -H "Content-Type: application/x-www-form-urlencoded" \<BR />
  -d "grant_type=password&amp;response_type=token&amp;username=dj.adams@sap.com&amp;password=$PASSWORD" \<BR />
  <A href="https://i347491trial.authentication.eu10.hana.ondemand.com/oauth/token" target="test_blank" rel="nofollow noopener noreferrer">https://i347491trial.authentication.eu10.hana.ondemand.com/oauth/token</A> &gt; token.json</CODE></PRE><BR />
Going down the list of switches, we have:<BR />
<UL><BR />
 	<LI><CODE>--verbose</CODE>: show more info!</LI><BR />
 	<LI><CODE>-n</CODE>: use .netrc</LI><BR />
 	<LI><CODE>-X</CODE>: use the following HTTP method</LI><BR />
 	<LI><CODE>-H</CODE>: include this header in the request</LI><BR />
 	<LI><CODE>-d</CODE>: send this data as payload</LI><BR />
</UL><BR />
(Note that my password is not shown - I'd deliberately stored it in an environment variable <CODE>$PASSWORD</CODE>)<BR />
<BR />
We captured the response payload into the file <CODE>token.json</CODE> to have a look at it, first in Vim, and then using the wonderful <CODE>jq</CODE>:<BR />
<PRE class="shell"><CODE>qmacro@penguin:/tmp/ep49<BR />
-&gt; jq &lt; token.json<BR />
{<BR />
  "access_token": "eyJhbGciOiJSUzI1NiIsImprdSI6Imh0dHBzOi8vaTM0NzQ5MXRyaWFsLmF1dGhlbnRpY2F0aW9uLmV1MTAuaGFuYS5vbmRlbWFuZC5jb20vdG9rZW5fa2V5cyIsImtpZCI6ImtleS1pZC0xIiwidHlwIjoiSldUIn0.eyJqdGkiOiI0NGU4MDllNWRmNDk0NjAyYTYwZmIyOTNkMjBkNGZiMSIsImV4dF9hdHRyIjp7ImVuaGFuY2VyIjoiWFNVQUEiLCJ6ZG4iOiJpMzQ3NDkxdHJpYWwiLCJzZXJ2aWNlaW5zdGFuY2VpZCI6ImE0ZDJmMTU4LTRlMzgtNGY5Yi05OTc5LTkzNTExYzE2ZWQ4MSJ9LCJ4cy5zeXN0ZW0uYXR0cmlidXRlcyI6eyJ4cy5yb2xlY29sbGVjdGlvbnMiOlsiYnVzaW5lc3MtcnVsZXMiXX0sImdpdmVuX25hbWUiOiJESiIsInhzLnVzZXIuYXR0cmlidXRlcyI6e30sImZhbWlseV9uYW1lIjoiQWRhbXMiLCJzdWIiOiI4NTY5NzU0ZS0yYTZjLTQzZWYtYTdiYS01ZjIxMDM5ZjZlYzUiLCJzY29wZSI6WyJicG1ydWxlcmVwb3NpdG9yeSF0MjQ2Ni5SdWxlUmVwb3NpdG9yeS5TdXBlclVzZXIiLCJicG1ydWxlY29tcGlsZXIhdDI0NjYuUnVsZUNvbXBVyLkphdmFDb21wnBtcnVsZWNvbXBpbGVyIXQyNDY2LlJ1bGVDb21waWxlci5TcWxDb21waWxlIiwib3BlbmlkIiwiYnBtcnVsZXNxbGNvbXBpbGVyIXQyNDY2LlJ1bGVTcWxDb21waWxlci5TcWxDb21waWxlIiwiYnBtcnVsZXJ1bnRpbWUhdDI0NjYuUnVsZVJ1bnRpbWUuU3VwZXJVc2VyIl0sImNsaWVudF9pZCI6InNiLWNsb25lLWE0ZDJmMTU4LTRlMzgtNGY5Yi05OTc5LTkzNTExYzE2ZWQ4MSFiMzAwNjh8YnBtcnVsZWJyb2tlciFiMjQ2NiIsImNpZCI6InNiLWNsb25lLWE0ZDJmMTU4LTRlMzgtNGY5Yi05OTc5LTkzNTExYzE2ZWQ4MSFiMzAwNjh8YnBtcnVsZWJyb2tlciFiMjQ2NiIsImF6cCI6InNiLWNsb25lLWE0ZDJmMTU4LTRlMzgtNGY5Yi05OTc5LTkzNTExYzE2ZWQ4MSFiMzAwNjh8YnBtcnVsZWJyb2tlciFiMjQ2NiIsImdyYW50X3R5cGUiOiJwYXNzd29yZCIsInVzZXJfaWQiOiI4NTY5NzU0ZS0yYTZjLTQzZWYtYTdiYS01ZjIxMDM5ZjZlYzUiLCJvcmlnaW4iOiJsZGFwIiwidXNlcl9uYW1lIjoiZGouYWRhbXNAc2FwLmNvbSIsImVtYWlsIjoiZGouYWRhbXNAc2FwLmNvbSIsImF1dGhfdGltZSI6MTU3ODA0MjI2NSwicmV2X3NpZyI6IjEzYTUzNjAzIiwiaWF0IjoxNTc4MDQyMjY2LCJleHAiOjE1NzgwODU0NjYsImlzcyI6Imh0dHA6Ly9pMzQ3NDkxdHJpYWwubG9jYWxob3N0OjgwODAvdWFhL29hdXRoL3Rva2VuIiwiemlkIjoiYzk4M2VkOWYtNDEwZi00MDdjLTkzZjYtODE2NjA0ZTExMjhjIiwiYXVkIjpbImJwbXJ1bGVjb21waWxlciF0MjQ2Ni5SdWxlQ29tcGlsZXIiLCJvcGVuaWQiLCJicG1ydWxlc3FsY29tcGlsZXIhdDI0NjYuUnVsZVNxbENvbXBpbGVyIiwic2ItY2xvbmUtYTRkMmYxNTgtNGUzOC00ZjliLTk5NzktOTM1MTFjMTZlZDgxIWIzMDA2OHxicG1ydWxlYnJva2VyIWIyNDY2IiwiYnBtcnVsZXJlcG9zaXRvcnkhdDI0NjYuUnVsZVJlcG9zaXRvcnkiLCJicG1ydWxlcnVudGltZSF0MjQ2Ni5SdWxlUnVudGltZSJdfQ.HcZTis_E9Nrn28VbW1Js8_yMRGgFwOfywcsXnj-LluP8I7SKa3n9z7OwdiJxYxrYhBl6tGc9HFCDbfyD3xJ9bfiEHxlGmUR7K7LNyMWjEQExn5joEOrqqzL9oQ9mI3SVQd93taKqgTaSzaoTwlz_g2horzrZOU8D1fuS-69F2aRoGptB228-wG9TnaVV-RFS8XJYjyMoEjCgTyhZyVxuC1h16inF4NvmtT_Q_QA1UGt3g6CyhV_k-wSrc2m1nsmfW2UGlUZ4V4zTxuWJIuEILaqBk1zXX_pO3wUlwE02jTMazI0AdsC1uPa3F6SqoMNwFgx2gx5paGRAraeLeoZJ_VWWwy2Mw8mpvuvHIYaVVZ6rIu-dta8JRtQWcjt_bxTU_SvWm1dwIfOCHORpU99iROLnlhJKGWVhOnQZqpxSMTIYw668Ms1OTpd3Z2DB9xm5nV1TLvJwpcD3yTUnxhpcy6azMoMpEXwquobs2g4u9uHJ5QCDPanFwZWwg75fa7Wq4ahHHEGFaAztNxm4gxAFkt7coHJrk9xLsYvu4gC2akYBLO4k7wy385DgmhWYrFDQgjog-R79SHiHTd0upxqQIM-7gTWtno2Uf5Ve682DNrQz-8AhI5WEGdplj2_YH-tWHdjUUp1Mc7Bmn3yFS-3dxRTB6xtMT56NhuuuAn7S0qo",<BR />
  "token_type": "bearer",<BR />
  "id_token": "eyJhbGciOiJSUzI1NiIsImprdSI6Imh0dHBzOi8vaTM0NzQ5MXRyaWFsLmF1dGhlbnRpY2F0aW9uLmV1MTAuaGFuYS5vbmRlbWFuZC5jb20vdG9rZW5fa2V5cyIsImtpZCI6ImtleS1pZC0xIiwidHlwIjoiSldUIn0.eyJzdWIiOiI4NTY5NzU0ZS0yYTZjLTQzZWYtYTdiYS01ZjIxMDM5ZjZlYzUiLCJhdWQiOlsic2ItY2xvbmUtYTRkMmYxNTgtNGUzOC00ZjliLTk5NzktOTM1MTFjMTZlZDgxIWIzMDA2OHxicG1ydWxlYnJva2VyIWIyNDY2Il0sImlzcyI6Imh0dHA6Ly9pMzQ3NDkxdHJpYWwubG9jYWxob3N0OjgwODAvdWFhL29hdXRoL3Rva2VuIiwiZXhwIjoxNTc4MDg1NDY2LCJpYXQiOjE1NzgwNDIyNjYsImFtciI6WyJleHQiLCJwd2QiXSwiYXpwIjoic2ItY2xvbmUtYTRkMmYxNTgtNGUzOC00ZjliLTk5NzktOTM1MTFjMTZlZDgxIWIzMDA2OHxicG1ydWxlYnJva2VyIWIyNDY2Iiwic2NvcGUiOlsib3BlbmlkIl0sImVtYWlsIjoiZGouYWRhbXNAc2FwLmNvbSIsInppZCI6ImM5ODNlZDlmLTQxMGYtNDA3Yy05M2Y2LTgxNjYwNGUxMTI4YyIsIm9yaWdpbiI6ImxkYXAiLRpbWUiOjE1NzgwNDIyNTcyODUsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJjbGllbnRfaWQiOiJzYi1jbG9uZS1hNGQyZjE1OC00ZTM4LTRmOWItOTk3OS05MzUxMWMxNmVkODEhYjMwMDY4fGJwbXJ1bGVicm9rZXIhYjI0NjYiLCJjaWQiOiJzYi1jbG9uZS1hNGQyZjE1OC00ZTM4LTRmOWItOTk3OS05MzUxMWMxNmVkODEhYjMwMDY4fGJwbXJ1bGVicm9rZXIhYjI0NjYiLCJncmFudF90eXBlIjoicGFzc3dvcmQiLCJ1c2VyX25hbWUiOiJkai5hZGFtc0BzYXAuY29tIiwicmV2X3NpZyI6IjEzYTUzNjAzIiwiYXV0aF90aW1lIjoxNTc4MDQyMjY1LCJ1c2VyX2lkIjoiODU2OTc1NGUtMmE2Yy00M2VmLWE3YmEtNWYyMTAzOWY2ZWM1In0.XfjRKJyOWJ3p-HzQ-cr1PSSxp7fBIGXlszBA1D_E7W54anPFynVhdRmD3wuQJ_ubknj_ICH7DN2OJy1IZ5SBktTT_prveT9w47sfSlGlztiUl72SYdMloe07VB3sr63jah86jm0I3SgTyOue-v3dYRanB4CtJIojTe8KKOaboBJ2NmcsVsjQphkIR2Gmc2QxXi23fLY5VQPFgCBw8aiKAggn_5o2oK4LWATm5k688cT97wHsiwHOBJQyTtoiy21T1pOgmxTdI7eIEjFonRyiTzbg7ucbf2Q4QIprP5MZYEXeI-q0SC45DOCXXse5U2C8cfy_kOhyIlTrEECWpq4ixgpRBlwH5SDZLKa4ULrhrMPKZiQDLijD-2Veo0AZfwDkFPhbT71HqAihRo1K927cgC2fMbthzs3WUoBPDCu9sYfzQdGTGoLKfGG6Muqw_lK_z7WJCKfv8PfwOrc3Aol2LCMK9W3aZ- [ ] vo1LofWSgZqAFSnrXtjbSHz8RXGEY9My_vzOnWHZqojPU6g2BNaH6y7qEuok2FZHMGAcUKrnjTtH5u858oKAAc00k9WluXgLIJCBUzLZxIeJpsIf-zWryNXjftWbT9KIMR_jmz9kPvKzdNJAHJQgfLk5DEvuQzfwrnvl4xmHOOhJmf0hay5WaoEcw6XwlaVtFOIayWCMW_E4",<BR />
  "refresh_token": "7dc0315fcae449c29b48a441137ca723-r",<BR />
  "expires_in": 43199,<BR />
  "scope": "bpmrulerepository!t2466.RuleRepository.SuperUser bpmrulecompiler!t2466.RuleCompiler.JavaCompile bpmrulecompiler!t2466.RuleCompiler.SqlCompile openid bpmrulesqlcompiler!t2466.RuleSqlCompiler.SqlCompile bpmruleruntime!t2466.RuleRuntime.SuperUser",<BR />
  "jti": "44e809e5df494602a60fb293d20d4fb1"<BR />
}</CODE></PRE><BR />
(If you're thinking of trying to use these tokens, don't bother - I've doctored them and you need my password anyway :-))<BR />
<BR />
For those wondering, you can just grab the access token value itself like this:<BR />
<PRE class="shell"><CODE>qmacro@penguin:/tmp/ep49<BR />
-&gt; jq --raw-output '.access_token' &lt; token.json<BR />
eyJhbGciOiJSUzI1NiIsImprdSI6Imh0dHBzOi8vaTM0NzQ5MXRyaWFsLmF1dGhlbnRpY2F0aW9uLmV1MTAuaGFuYS5vbmRlbWFuZC5jb20vdG9rZW5fa2V5cyIsImtpZCI6ImtleS1pZC0xIiwidHlwIjoiSldUIn0.eyJqdGkiOiI0NGU4MDllNWRmNDk0NjAyYTYwZmIyOTNkMjBkNGZiMSIsImV4dF9hdHRyIjp7ImVuaGFuY2VyIjoiWFNVQUEiLCJ6ZG4iOiJpMzQ3NDkxdHJpYWwiLCJzZXJ2aWNlaW5zdGFuY2VpZCI6ImE0ZDJmMTU4LTRlMzgtNGY5Yi05OTc5LTkzNTExYzE2ZWQ4MSJ9LCJ4cy5zeXN0ZW0uYXR0cmlidXRlcyI6eyJ4cy5yb2xlY29sbGVjdGlvbnMiOlsiYnVzaW5lc3MtcnVsZXMiXX0sImdpdmVuX25hbWUiOiJESiIsInhzLnVzZXIuYXR0cmlidXRlcyI6e30sImZhbWlseV9uYW1lIjoiQWRhbXMiLCJzdWIiOiI4NTY5NzU0ZS0yYTZjLTQzZWYtYTdiYS01ZjIxMDM5ZjZlYzUiLCJzY29wZSI6WyJicG1ydWxlcmVwb3NpdG9yeSF0MjQ2Ni5SdWxlUmVwb3NpdG9yeS5TdXBlclVzZXIiLCJicG1ydWxlY29tcGlsZXIhdDI0NjYuUnVsZUNvbXBvbXBpbGVyIXQyNDY2LlJ1bGVDb21waWxlci5TcWxDb21waWxlIiwib3BlbmlkIiwiYnBtcnVsZXNxbGNvbXBpbGVyIXQyNDY2LlJ1bGVTcWxDb21waWxlci5TcWxDb21waWxlIiwiYnBtcnVsZXJ1bnRpbWUhdDI0NjYuUnVsZVJ1bnRpbWUuU3VwZXJVc2VyIl0sImNsaWVudF9pZCI6InNiLWNsb25lLWE0ZDJmMTU4LTRlMzgtNGY5Yi05OTc5LTkzNTExYzE2ZWQ4MSFiMzAwNjh8YnBtcnVsZWJyb2tlciFiMjQ2NiIsImNpZCI6InNiLWNsb25lLWE0ZDJmMTU4LTRlMzgtNGY5Yi05OTc5LTkzNTExYzE2ZWQ4MSFiMzAwNjh8YnBtcnVsZWJyb2tlciFiMjQ2NiIsImF6cCI6InNiLWNsb25lLWE0ZDJmMTU4LTRlMzgtNGY5Yi05OTc5LTkzNTExYzE2ZWQ4MSFiMzAwNjh8YnBtcnVsZWJyb2tlciFiMjQ2NiIsImdyYW50X3R5cGUiOiJwYXNzd29yZCIsInVzZXJfaWQiOiI4NTY5NzU0ZS0yYTZjLTQzZWYtYTdiYS01ZjIxMDM5ZjZlYzUiLCJvcmlnaW4iOiJsZGFwIiwidXNlcl9uYW1lIjoiZGouYWRhbXNAc2FwLmNvbSIsImVtYWlsIjoiZGouYWRhbXNAc2FwLmNvbSIsImF1dGhfdGltZSI6MTU3ODA0MjI2NSwicmV2X3NpZyI6IjEzYTUzNjAzIiwiaWF0IjoxNTc4MDQyMjY2LCJleHAiOjE1NzgwODU0NjYsImlzcyI6Imh0dHA6Ly9pMzQ3NDkxdHJpYWwubG9jYWxob3N0OjgwODAvdWFhL29hdXRoL3Rva2VuIiwiemlkIjoiYzk4M2VkOWYtNDEwZi00MDdjLTkzZjYtODE2NjA0ZTExMjhjIiwiYXVkIjpbImJwbXJ1bGVjb21waWxlciF0MjQ2Ni5SdWxlQ29tcGlsZXIiLCJvcGVuaWQiLCJicG1ydWxlc3FsY29tcGlsZXIhdDI0NjYuUnVsZVNxbENvbXBGUzOC00ZjliLTk5NzktOTM1MTFjMTZlZDgxIWIzMDA2OHxicG1ydWxlYnJva2VyIWIyNDY2IiwiYnBtcnVsZXJlcG9zaXRvcnkhdDI0NjYuUnVsZVJlcG9zaXRvcnkiLCJicG1ydWxlcnVudGltZSF0MjQ2Ni5SdWxlUnVudGltZSJdfQ.HcZTis_E9Nrn28VbW1Js8_yMRGgFwOfywcsXnj-LluP8I7SKa3n9z7OwdiJxYxrYhBl6tGc9HFCDbfyD3xJ9bfiEHxlGmUR7K7LNyMWjEQExn5joEOrqqzL9oQ9mI3SVQd93taKqgTaSzaoTwlz_g2horzrZOU8D1fuS-69F2aRoGptB228-wG9TnaVV-RFS8XJYjyMoEjCgTyhZyVxuC1h16inF4NvmtT_Q_QA1UGt3g6CyhV_k-wSrc2m1nsmfW2UGlUZ4V4zTxuWJIuEILaqBk1zXX_pO3wUlwE02jTMazI0AdsC1uPa3F6SqoMNwFgx2gx5paGRAraeLeoZJ_VWWwy2Mw8mpvuvHIYaVVZ6rIu-dta8JRtQWcjt_bxTU_SvWm1dwIfOCHORpU99iROLnlhJKGWVhOnQZqpxSMTIYw668Ms1OTpd3Z2DB9xm5nV1TLvJwpcD3yTUnxhpcy6azMoMpEXwquobs2g4u9uHJ5QCDPanFwZWwg75fa7Wq4ahHHEGFaAztNxm4gxAFkt7coHJrk9xLsYvu4gC2akYBLO4k7wy385DgmhWYrFDQgjog-R79SHiHTd0upxqQIM-7gTWtno2Uf5Ve682DNrQz-8AhI5WEGdplj2_YH-tWHdjUUp1Mc7Bmn3yFS-3dxRTB6xtMT56NhuuuAn7S0qo</CODE></PRE><BR />
And we'll be using this raw value extraction technique in the next episode, where we specify the value as the bearer token in an API call from the command line. Stay tuned, until the next episode!
---
Annotated links: Episode 48 of Hands-on SAP dev with qmacro
technology-blog-sap
2020-01-02
https://community.sap.com/t5/technology-blogs-by-sap/annotated-links-episode-48-of-hands-on-sap-dev-with-qmacro/ba-p/13441215
2020-01-02-annotated-links-episode-48-of-hands-on-sap-dev-with-qmacro
<EM>This is a searchable description of the content of a live stream recording, specifically <STRONG>"Ep.48 â Continuing with the Business Rules service on CF"</STRONG> in the "<A href="https://bit.ly/handsonsapdev" target="_blank" rel="nofollow noopener noreferrer">Hands-on SAP dev with qmacro</A>" series. There are links directly to specific highlights in the video recording. For links to annotations of other episodes, please see the "<A href="https://bit.ly/handsonsapdev#replays" target="_blank" rel="nofollow noopener noreferrer">Catch the replays</A>" section of the series blog post.</EM><BR />
<BR />
This episode was streamed live on Fri 13 Dec 2019 and is approximately 60 minutes in length. The stream recording is <A href="https://www.youtube.com/watch?v=7d3Jh9LXiGA&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;index=49" target="_blank" rel="nofollow noopener noreferrer">available on YouTube</A>.<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/01/Screenshot-2020-01-02-at-09.16.49-2.png" /><BR />
<BR />
Brief synopsis: In this episode we continue on from where we left off in Ep.44 and dig further into the Business Rules service on SAP Cloud Platform Cloud Foundry environment.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=7d3Jh9LXiGA&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h03m55s" target="_blank" rel="nofollow noopener noreferrer">00:03:55</A> Talking about a small "tshirt giveaway" that I can do in early 2020 - I have a few tshirts that I haven't worn and that I can give away on some sort of random lottery.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=7d3Jh9LXiGA&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h04m45s" target="_blank" rel="nofollow noopener noreferrer">00:04:45</A> Don't forget to fill in the <A href="https://surveys.sap.com/jfe/form/SV_0uozKWOYSgTrBFX" target="_blank" rel="noopener noreferrer">SAP Developer Insights</A> Survey which runs until sometime in mid Jan 2020.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=7d3Jh9LXiGA&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h05m50s" target="_blank" rel="nofollow noopener noreferrer">00:05:50</A> My friend and colleague <SPAN class="mention-scrubbed">iinside</SPAN> had his first live stream on 12 Dec 2019! Well done Max, and we'll see more in 2020, I'm sure!<BR />
<BR />
<A href="https://www.youtube.com/watch?v=7d3Jh9LXiGA&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h07m20s" target="_blank" rel="nofollow noopener noreferrer">00:07:20</A> A short discussion on the possibility of me moving my live streaming from Twitch to YouTube ... and as you may know, I made that decision over the holiday period, and from the next episode I'll be live streaming on my channel on YouTube, which you can get to here:<BR />
<BR />
<A class="uri" href="https://youtube.com/djadams-qmacro" target="_blank" rel="nofollow noopener noreferrer">https://youtube.com/djadams-qmacro</A><BR />
<BR />
<A href="https://www.youtube.com/watch?v=7d3Jh9LXiGA&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h08m40s" target="_blank" rel="nofollow noopener noreferrer">00:08:40</A> Reminding ourselves of what we're going to do in this episode, which is to continue more or less where we left off in <A href="http://bit.ly/handsonsapdev#ep44" target="_blank" rel="nofollow noopener noreferrer">Ep.44</A>, i.e. getting to a position in CF which is the equivalent of where I was in Neo. We also discussed briefly the issue we'd been left with last time, caused by my inconsistent editing of <CODE>mta.yaml</CODE>.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=7d3Jh9LXiGA&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h14m00s" target="_blank" rel="nofollow noopener noreferrer">00:14:00</A> Looking at the Business Rules Editor project in the SAP Web IDE, and in particular the contents of that <CODE>mta.yaml</CODE> file, including upon which resources the editor module relies. Here's the entire contents of the <CODE>mta.yaml</CODE> file:<BR />
<DIV><BR />
<PRE class="sourceCode yaml"><CODE class="sourceCode yaml"><SPAN class="fu">ID:</SPAN> businessruleseditor<BR />
<SPAN class="fu">_schema-version:</SPAN> <SPAN class="st">'2.1'</SPAN><BR />
<SPAN class="fu">parameters:</SPAN><BR />
   <SPAN class="fu">deploy_mode:</SPAN> html5-repo<BR />
<SPAN class="fu">version:</SPAN> 0.0.1<BR />
<BR />
<SPAN class="fu">modules:</SPAN><BR />
 <SPAN class="kw">-</SPAN> <SPAN class="fu">name:</SPAN> businessruleseditor_appRouter<BR />
   <SPAN class="fu">type:</SPAN> approuter.nodejs<BR />
   <SPAN class="fu">path:</SPAN> businessruleseditor_appRouter<BR />
   <SPAN class="fu">parameters:</SPAN><BR />
      <SPAN class="fu">disk-quota:</SPAN> 256M<BR />
      <SPAN class="fu">memory:</SPAN> 256M<BR />
   <SPAN class="fu">requires:</SPAN><BR />
    <SPAN class="kw">-</SPAN> <SPAN class="fu">name:</SPAN> businessruleseditor_html5_repo_runtime<BR />
    <SPAN class="kw">-</SPAN> <SPAN class="fu">name:</SPAN> businessrules_uaa<BR />
    <SPAN class="kw">-</SPAN> <SPAN class="fu">name:</SPAN> business-rules<BR />
<SPAN class="fu">resources:</SPAN><BR />
 <SPAN class="kw">-</SPAN> <SPAN class="fu">name:</SPAN> businessruleseditor_html5_repo_runtime<BR />
   <SPAN class="fu">parameters:</SPAN><BR />
      <SPAN class="fu">service-plan:</SPAN> app-runtime<BR />
      <SPAN class="fu">service:</SPAN> html5-apps-repo<BR />
   <SPAN class="fu">type:</SPAN> org.cloudfoundry.managed-service<BR />
 <SPAN class="kw">-</SPAN> <SPAN class="fu">name:</SPAN> business-rules<BR />
   <SPAN class="fu">type:</SPAN> org.cloudfoundry.existing-service<BR />
 <SPAN class="kw">-</SPAN> <SPAN class="fu">name:</SPAN> businessrules_uaa<BR />
   <SPAN class="fu">type:</SPAN> com.sap.xs.uaa<BR />
   <SPAN class="fu">parameters:</SPAN><BR />
      <SPAN class="fu">config:</SPAN><BR />
         <SPAN class="fu">xsappname:</SPAN> businessrules_uaa-appname<BR />
         <SPAN class="fu">tenant-mode:</SPAN> dedicated<BR />
         <SPAN class="fu">role-templates:</SPAN><BR />
            <SPAN class="kw">-</SPAN> <SPAN class="fu">name :</SPAN> UaaUser<BR />
              <SPAN class="fu">description:</SPAN> Role template for accessing SAP Business Rule APIs.Editor via user token flow<BR />
              <SPAN class="fu">scope-references:</SPAN><BR />
                <SPAN class="kw">-</SPAN> uaa.user</CODE></PRE><BR />
</DIV><BR />
<A href="https://www.youtube.com/watch?v=7d3Jh9LXiGA&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h17m20s" target="_blank" rel="nofollow noopener noreferrer">00:17:20</A> Moving over to the SAP Cloud Platform cockpit, and to my 'trial' subaccount that has a CF organisation linked to it, where we see that while I still have the 'business-rules' service in my DEV space, I have deleted the previous instance of the Business Rules Editor so we can do it again here now.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=7d3Jh9LXiGA&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h19m35s" target="_blank" rel="nofollow noopener noreferrer">00:19:35</A> Building the project with the (Java-based) deprecated build tool first of all, to see what happens, and what messages are output. We note that there's a shell script invoked, called <CODE>webide_mta_build.sh</CODE>. Here's an example of what the build output looks like:<BR />
<PRE><CODE>(MTA BUILD) Build of "cf-businessruleseditor" started.<BR />
(Executor) The "Task for mta build" process started.<BR />
(Executor) Starting process: "cd /projects/cf-businessruleseditor; webide_mta_build.sh"<BR />
(Executor) SAP Multitarget Application Archive Builder 1.1.20<BR />
(Executor) Module "businessruleseditor_appRouter": invoking npm install --production<BR />
(Executor) Module "businessruleseditor_appRouter": command output<BR />
(Executor) npm WARN deprecated scmp@1.0.0: scmp v2 uses improved core crypto comparison since Node v6.6.0<BR />
(Executor)<BR />
(Executor) &gt; @sap/node-jwt@1.6.5 install /projects/cf-businessruleseditor/businessruleseditor_appRouter/node_modules/@sap/node-jwt<BR />
(Executor) &gt; node ./build.js<BR />
(Executor)<BR />
(Executor) `linux-x64-v8-6.2` exists; testing<BR />
(Executor) Binary is fine; exiting<BR />
(Executor) npm notice created a lockfile as package-lock.json. You should commit this file.<BR />
(Executor) npm WARN html5-apps-approuter@ No repository field.<BR />
(Executor) npm WARN html5-apps-approuter@ No license field.<BR />
(Executor)<BR />
(Executor) added 236 packages from 133 contributors and audited 407 packages in 7.784s<BR />
(Executor) found 5 high severity vulnerabilities<BR />
(Executor)   run `npm audit fix` to fix them, or `npm audit` for details<BR />
(Executor) Module "businessruleseditor_appRouter": zipping directory businessruleseditor_appRouter<BR />
(Executor) Generating archive /projects/cf-businessruleseditor/mta_archives/businessruleseditor_0.0.1.mtar<BR />
(Executor) Done<BR />
(Executor)   adding: mta_archives/businessruleseditor_0.0.1.mtar (deflated 0%)<BR />
(mtaBuildTask) Build of "cf-businessruleseditor" completed.</CODE></PRE><BR />
After the build completes, there's a new archive <CODE>businessruleseditor_0.0.1.mtar</CODE> created ready for deployment.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=7d3Jh9LXiGA&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h23m50s" target="_blank" rel="nofollow noopener noreferrer">00:23:50</A> We now deploy this archive MTAR file to CF (to my DEV space in the "I347491trial_trial" organisation). We see further log messages in the console that look like this:<BR />
<PRE><CODE>(DeploymentToCF) Deployment of the "businessruleseditor" project started.<BR />
(DeployService) Deployment in progress.<BR />
(DeployService) Deploying /cf-businessruleseditor/mta_archives/businessruleseditor_0.0.1.mtar to endpoint: <A href="https://api.cf.eu10.hana.ondemand.com" target="test_blank" rel="nofollow noopener noreferrer">https://api.cf.eu10.hana.ondemand.com</A>, organization: I347491trial_trial, space: dev.<BR />
(DeployService) Target: <A href="https://deploy-service.cfapps.eu10.hana.ondemand.com/slprot/I347491trial_trial/dev/slpPreparing" target="test_blank" rel="nofollow noopener noreferrer">https://deploy-service.cfapps.eu10.hana.ondemand.com/slprot/I347491trial_trial/dev/slpPreparing</A> to deploy /cf-businessruleseditor/mta_archives/businessruleseditor_0.0.1.mtarPrepare deployment filesChecking if there are conflicting processesFound 0 conflicting processesUploading mtar archiveStarting deploymentDeploying in org "I347491trial_trial" and space "dev"Detected MTA schema version: "3"Detected deployed MTA with ID "businessruleseditor" and version "0.0.1"Detected new MTA version: "0.0.1"Deployed MTA version: "0.0.1"Processing service "businessrules_uaa"...Processing service "businessruleseditor_html5_repo_runtime"...Updating service "businessrules_uaa"...Updating application "businessruleseditor_appRouter"...Application "businessruleseditor_appRouter" attributes are not modified and will not be updatedUploading application "businessruleseditor_appRouter"...Staging application "businessruleseditor_appRouter"...Application "businessruleseditor_appRouter" stagedStarting application "businessruleseditor_appRouter"...Application "businessruleseditor_appRouter" started and available at "i347491trial-trial-dev-businessruleseditor-approuter.cfapps.eu10.hana.ondemand.com"Deleting discontinued configuration entries for application "businessruleseditor_appRouter"...Skipping deletion of services, because the command line option "--delete-services" is not specified.To download logs of the process, use the multi-target application plug-in for the Cloud Foundry CLI command "cf dmol -i a040b006-2d32-11ea-aec7-eeee0a91b4b0" directly in your Cloud Foundry space.For more information see <A href="https://help.sap.com/viewer/65de2977205c403bbc107264b8eccf4b/Cloud/en-US/e93b231895b64cbc9221a62953563a6f.html.Job" target="test_blank" rel="noopener noreferrer">https://help.sap.com/viewer/65de2977205c403bbc107264b8eccf4b/Cloud/en-US/e93b231895b64cbc9221a62953563a6f.html.Job</A> finished successfully.<BR />
(DeploymentToCF) Could not fetch information for businessruleseditor<BR />
(DeploymentToCF) The "businessruleseditor" project has been deployed.</CODE></PRE><BR />
<A href="https://www.youtube.com/watch?v=7d3Jh9LXiGA&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h28m05s" target="_blank" rel="nofollow noopener noreferrer">00:28:05</A> Staring at the actual artifacts in the <CODE>cf-businessruleseditor</CODE> project in the SAP Web IDE we see that there's hardly anything there at all - in particular, no application code. What this project does is bundle together, via configuration, <EM>things that already exist</EM>.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=7d3Jh9LXiGA&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h30m20s" target="_blank" rel="nofollow noopener noreferrer">00:30:20</A> After a bit of jiggery-pokery we get a fresh Business Rules Editor app that we now use to create a very simple Business Rules project (called <CODE>ep48</CODE>), mainly to see that it (hopefully) survives the destruction and subsequent recreation of the app itself.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=7d3Jh9LXiGA&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h31m55s" target="_blank" rel="nofollow noopener noreferrer">00:31:55</A> In a terminal, we check the results of running <CODE>cf api</CODE> which shows that we're connected to the EU10 (Europe - Frankfurt) CF area:<BR />
<PRE class="shell"><CODE>qmacro@penguin:/tmp/ep48<BR />
-&gt; cf api<BR />
api endpoint:   <A href="https://api.cf.eu10.hana.ondemand.com" target="test_blank" rel="nofollow noopener noreferrer">https://api.cf.eu10.hana.ondemand.com</A><BR />
api version:    3.76.0</CODE></PRE><BR />
We also check what services exist already:<BR />
<PRE class="shell"><CODE>qmacro@penguin:/tmp/ep48<BR />
-&gt; cf s<BR />
Getting services in org I347491trial_trial / space dev as dj.adams@sap.com...<BR />
name                                     service           plan          bound apps                      last operation     broker                                                       upgrade available<BR />
business-rules                           business-rules    lite          businessruleseditor_appRouter   create succeeded   sm-businessrules-e73ec4d2-a715-4849-a5e9-77b521e7a086<BR />
businessrules_uaa                        xsuaa             application   businessruleseditor_appRouter   update succeeded   sm-xsuaa-9ef36350-f975-4194-a399-54db361e79b5<BR />
businessruleseditor_html5_repo_runtime   html5-apps-repo   app-runtime   businessruleseditor_appRouter   create succeeded   sm-html5-apps-repo-sb-ebcb2b69-24a5-408e-be00-02066b302b78</CODE></PRE><BR />
We then proceed to enjoy using basic command line tools such as <CODE>awk</CODE> to modify the output of <CODE>cf s</CODE> and <CODE>watch</CODE> to bring about a simple "monitor" effect, a basic equivalent of what we have in the cockpit, in <CODE>tmux</CODE> panes.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=7d3Jh9LXiGA&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h35m50s" target="_blank" rel="nofollow noopener noreferrer">00:35:50</A> After a brief pause while I rearrange the screen so that everything can be viewed properly, we remove the Business Rules Editor app with <CODE>cf d businessruleseditor_appRouter -f</CODE>, and also the two services thus: <CODE>cf ds businessrules_uaa</CODE> and <CODE>cf ds businessruleseditor_html5_repo_runtime</CODE>, leaving us with just the <CODE>business-rules</CODE> service itself.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=7d3Jh9LXiGA&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h38m10s" target="_blank" rel="nofollow noopener noreferrer">00:38:10</A> Looking at <A class="uri" href="https://tools.hana.ondemand.com/#cloud" target="_blank" rel="nofollow noopener noreferrer">https://tools.hana.ondemand.com/#cloud</A> to see the (deprecated) Multi-Target Application Archive Builder, which is a Java jar file, which we download.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=7d3Jh9LXiGA&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h39m30s" target="_blank" rel="nofollow noopener noreferrer">00:39:30</A> Downloading the <CODE>cf-businessruleseditor.zip</CODE> file from the <A href="http://github.com/sap-samples/cloud-businessrules-samples" target="_blank" rel="nofollow noopener noreferrer">SAP-samples/cloud-businessrules</A> GitHub repo so we can start again with it locally in the terminal.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=7d3Jh9LXiGA&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h40m20s" target="_blank" rel="nofollow noopener noreferrer">00:40:20</A> We have a brief peek inside the downloaded ZIP file before unpacking it, to create exactly what we had in the SAP Web IDE. We can see this with the <CODE>tree</CODE> command thus:<BR />
<PRE class="shell"><CODE>qmacro@penguin:/tmp/ep48<BR />
-&gt; tree<BR />
.<BR />
âââ cf-businessruleseditor<BR />
    âââ businessruleseditor_appRouter<BR />
    â   âââ package.json<BR />
    â   âââ xs-app.json<BR />
    âââ mta.yaml<BR />
<BR />
2 directories, 3 files</CODE></PRE><BR />
Of course, we have to remember to edit the <CODE>mta.yaml</CODE> file to change the name references for the Business Rules service from <CODE>businessrules</CODE> to <CODE>business-rules</CODE>, which we do at this point.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=7d3Jh9LXiGA&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h42m05s" target="_blank" rel="nofollow noopener noreferrer">00:42:05</A> At this stage we have a look at some of the options available to us in this (deprecated) archive builder, in particular <CODE>--list-targets</CODE> which shows us a list of build targets:<BR />
<PRE class="shell"><CODE>qmacro@penguin:/tmp/ep48/cf-businessruleseditor<BR />
-&gt; java -jar ../mta_archive_builder-1.1.20.jar --list-targets<BR />
CF<BR />
NEO<BR />
XSA</CODE></PRE><BR />
<A href="https://www.youtube.com/watch?v=7d3Jh9LXiGA&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h42m30s" target="_blank" rel="nofollow noopener noreferrer">00:42:30</A> We can now confidently invoke the build, and messages appear that we recognise, fancy that!<BR />
<PRE class="shell"><CODE>qmacro@penguin:/tmp/ep48/cf-businessruleseditor<BR />
-&gt; java -jar ../mta_archive_builder-1.1.20.jar --build-target=CF build<BR />
SAP Multitarget Application Archive Builder 1.1.20<BR />
Module "businessruleseditor_appRouter": invoking npm install --production<BR />
Module "businessruleseditor_appRouter": command output<BR />
npm WARN deprecated scmp@1.0.0: scmp v2 uses improved core crypto comparison since Node v6.6.0<BR />
<BR />
&gt; @sap/node-jwt@1.6.5 install /tmp/ep48/cf-businessruleseditor/businessruleseditor_appRouter/node_modules/@sap/node-jwt<BR />
&gt; node ./build.js<BR />
<BR />
`linux-x64-v8-6.8` exists; testing<BR />
Binary is fine; exiting<BR />
npm notice created a lockfile as package-lock.json. You should commit this file.<BR />
npm WARN html5-apps-approuter@ No repository field.<BR />
npm WARN html5-apps-approuter@ No license field.<BR />
<BR />
added 236 packages from 133 contributors and audited 407 packages in 10.082s<BR />
found 5 high severity vulnerabilities<BR />
  run `npm audit fix` to fix them, or `npm audit` for details<BR />
Module "businessruleseditor_appRouter": zipping directory businessruleseditor_appRouter<BR />
Generating archive /tmp/ep48/cf-businessruleseditor/cf-businessruleseditor.mtar<BR />
Done</CODE></PRE><BR />
As a result of this build, we have a deployable archive file - it has a slightly different name (<CODE>cf-businessruleseditor.mtar</CODE>), but it's basically the same as what we had in the SAP Web IDE:<BR />
<PRE class="shell"><CODE>qmacro@penguin:/tmp/ep48/cf-businessruleseditor<BR />
-&gt; ls -l<BR />
total 11448<BR />
drwxr-xr-x 1 qmacro qmacro      132 Jan  2 08:32 businessruleseditor_appRouter<BR />
-rw------- 1 qmacro qmacro 11715381 Jan  2 08:32 cf-businessruleseditor.mtar<BR />
-rw-r--r-- 1 qmacro qmacro     1022 Sep 17 06:25 mta.yaml</CODE></PRE><BR />
<A href="https://www.youtube.com/watch?v=7d3Jh9LXiGA&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h45m30s" target="_blank" rel="nofollow noopener noreferrer">00:45:30</A> Invoking <CODE>cf plugins</CODE>, we see the plugins I've installed for my <CODE>cf</CODE> command tool:<BR />
<PRE><CODE>qmacro@penguin:/tmp/ep48/cf-businessruleseditor<BR />
-&gt; cf plugins<BR />
Listing installed plugins...<BR />
<BR />
plugin      version   command name                 command help<BR />
multiapps   2.2.0     bg-deploy                    Deploy a multi-target app using blue-green deployment<BR />
multiapps   2.2.0     deploy                       Deploy a new multi-target app or sync changes to an existing one<BR />
multiapps   2.2.0     download-mta-op-logs, dmol   Download logs of multi-target app operation<BR />
multiapps   2.2.0     mta                          Display health and status for a multi-target app<BR />
multiapps   2.2.0     mta-ops                      List multi-target app operations<BR />
multiapps   2.2.0     mtas                         List all multi-target apps<BR />
multiapps   2.2.0     purge-mta-config             Purge no longer valid configuration entries<BR />
multiapps   2.2.0     undeploy                     Undeploy a multi-target app<BR />
<BR />
Use 'cf repo-plugins' to list plugins in registered repos available to install.</CODE></PRE><BR />
<A href="https://www.youtube.com/watch?v=7d3Jh9LXiGA&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h46m25s" target="_blank" rel="nofollow noopener noreferrer">00:46:25</A> We're now ready to deploy, which we do by invoking <CODE>cf deploy</CODE>:<BR />
<PRE class="shell"><CODE>qmacro@penguin:/tmp/ep48/cf-businessruleseditor<BR />
-&gt; cf deploy ./cf-businessruleseditor.mtar<BR />
Deploying multi-target app archive ./cf-businessruleseditor.mtar in org I347491trial_trial / space dev as dj.adams@sap.com...<BR />
Uploading 1 files...<BR />
  /tmp/ep48/cf-businessruleseditor/cf-businessruleseditor.mtar<BR />
OK<BR />
Deploying in org "I347491trial_trial" and space "dev"<BR />
Detected MTA schema version: "3"<BR />
Detected deployed MTA with ID "businessruleseditor" and version "0.0.1"<BR />
Detected new MTA version: "0.0.1"<BR />
Deployed MTA version: "0.0.1"<BR />
Processing service "businessrules_uaa"...<BR />
Processing service "businessruleseditor_html5_repo_runtime"...<BR />
Updating service "businessrules_uaa"...<BR />
Updating application "businessruleseditor_appRouter"...<BR />
Application "businessruleseditor_appRouter" attributes are not modified and will not be updated<BR />
Uploading application "businessruleseditor_appRouter"...<BR />
Stopping application "businessruleseditor_appRouter"...<BR />
Staging application "businessruleseditor_appRouter"...<BR />
Application "businessruleseditor_appRouter" staged<BR />
Starting application "businessruleseditor_appRouter"...<BR />
Application "businessruleseditor_appRouter" started and available at "i347491trial-trial-dev-businessruleseditor-approuter.cfapps.eu10.hana.ondemand.com"<BR />
Deleting discontinued configuration entries for application "businessruleseditor_appRouter"...<BR />
Skipping deletion of services, because the command line option "--delete-services" is not specified.<BR />
Process finished.<BR />
Use "cf dmol -i 9086c32f-2d3c-11ea-b272-eeee0a8ae9c6" to download the logs of the process.</CODE></PRE><BR />
It's not a surprise by now that the output from this deploy invocation is also familiar to us - basically the same as what we saw in the console in the SAP Web IDE.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=7d3Jh9LXiGA&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h50m00s" target="_blank" rel="nofollow noopener noreferrer">00:50:00</A> Attempting to access the Business Rules Editor app again shows that we've been successful. Not only that but we can also see that our simple project <CODE>ep48</CODE> is still there (of course it is, we've only destroyed -- and recreated -- the editor app, not the project itself!).<BR />
<BR />
<A href="https://www.youtube.com/watch?v=7d3Jh9LXiGA&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h50m50s" target="_blank" rel="nofollow noopener noreferrer">00:50:50</A> We remove the app and the two services again, because this time we want to try out the new (non-deprecated) build tool, the Cloud MTA Build Tool, described very nicely in this blog post "<A href="https://blogs.sap.com/2019/11/19/enjoy-our-new-tool-for-building-mta-archives/" target="_blank" rel="noopener noreferrer">Enjoy our new tool for building MTA archives!</A>" by <SPAN class="mention-scrubbed">natalia.katunin</SPAN>.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=7d3Jh9LXiGA&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h52m55s" target="_blank" rel="nofollow noopener noreferrer">00:52:55</A> While the removal happens, we go over and check what's already installed, from a global NPM perspective, on my machine (the new build tools is JavaScript-based and available via NPM - nice!):<BR />
<PRE class="shell"><CODE>qmacro@penguin:/tmp/ep48<BR />
-&gt; npm ls -g --depth=0<BR />
/home/qmacro/.config/nvm/versions/node/v10.17.0/lib<BR />
âââ @sap/cds@3.20.1<BR />
âââ mbt@1.0.5<BR />
âââ npm@6.13.4</CODE></PRE><BR />
As we can see, I've already installed the tool (which we'll refer to as <CODE>mbt</CODE>), which I did earlier with <CODE>npm i -g mbt</CODE>.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=7d3Jh9LXiGA&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h55m00s" target="_blank" rel="nofollow noopener noreferrer">00:55:00</A> At this point we create a new directory and unpack the <CODE>cf-businessruleseditor</CODE> project into it again, ready for a new build with <CODE>mbt</CODE>. Of course, we have to remember to make the changes to <CODE>mta.yaml</CODE> again but after that, we're set to go with the new build tool, which completes much more quickly too!<BR />
<PRE class="shell"><CODE>qmacro@penguin:/tmp/ep48/cf-businessruleseditor<BR />
-&gt; mbt build<BR />
[2020-01-02 09:05:26]  INFO Cloud MTA Build Tool version 1.0.6<BR />
[2020-01-02 09:05:26]  INFO generating the "Makefile_20200102090526.mta" file...<BR />
[2020-01-02 09:05:26]  INFO done<BR />
[2020-01-02 09:05:26]  INFO executing the "make -f Makefile_20200102090526.mta p=cf mtar= strict=true mode=" command...<BR />
[2020-01-02 09:05:26]  INFO validating the MTA project<BR />
[2020-01-02 09:05:26]  INFO validating the MTA project<BR />
[2020-01-02 09:05:26]  INFO building the "businessruleseditor_appRouter" module...<BR />
[2020-01-02 09:05:26]  INFO executing the "npm install --production" command...<BR />
....npm WARN deprecated scmp@1.0.0: scmp v2 uses improved core crypto comparison since Node v6.6.0<BR />
......<BR />
&gt; @sap/node-jwt@1.6.5 install /tmp/ep48/cf-businessruleseditor/businessruleseditor_appRouter/node_modules/@sap/node-jwt<BR />
&gt; node ./build.js<BR />
<BR />
`linux-x64-v8-6.8` exists; testing<BR />
Binary is fine; exiting<BR />
npm notice created a lockfile as package-lock.json. You should commit this file.<BR />
npm WARN html5-apps-approuter@ No repository field.<BR />
npm WARN html5-apps-approuter@ No license field.<BR />
<BR />
added 236 packages from 133 contributors and audited 407 packages in 9.982s<BR />
found 5 high severity vulnerabilities<BR />
  run `npm audit fix` to fix them, or `npm audit` for details<BR />
[2020-01-02 09:05:36]  INFO the build results of the "businessruleseditor_appRouter" module will be packed and saved in the "/tmp/ep48/cf-businessruleseditor/.cf-businessruleseditor_mta_build_tmp/businessruleseditor_appRouter" folder<BR />
[2020-01-02 09:05:38]  INFO finished building the "businessruleseditor_appRouter" module<BR />
[2020-01-02 09:05:38]  INFO generating the metadata...<BR />
[2020-01-02 09:05:38]  INFO generating the MTA archive...<BR />
[2020-01-02 09:05:38]  INFO the MTA archive generated at: /tmp/ep48/cf-businessruleseditor/mta_archives/businessruleseditor_0.0.1.mtar<BR />
[2020-01-02 09:05:38]  INFO cleaning temporary files...</CODE></PRE><BR />
<A href="https://www.youtube.com/watch?v=7d3Jh9LXiGA&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h56m20s" target="_blank" rel="nofollow noopener noreferrer">00:56:20</A> We go back to the SAP Web IDE to invoke the equivalent build, to check that the output in the console is the same as what we see in our terminal, and it is, of course. We note in passing that the script that the SAP Web IDE invokes in this case is <CODE>webide_mbt_build.sh</CODE>, as opposed to the one that was invoked with the deprecated build tool (<CODE>webide_mta_build.sh</CODE>) earlier.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=7d3Jh9LXiGA&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h58m20s" target="_blank" rel="nofollow noopener noreferrer">00:58:20</A> We note that this new build tool creates the archive file in a similar way to what we saw in the SAP Web IDE, i.e. <CODE>mta_archives/businessruleseditor_0.0.1.mtar</CODE>. Deploying this in the same way as before (with <CODE>cf deploy</CODE>) leads to success, too. Lovely!<BR />
<BR />
Hopefully this episode demystified (or "de-magic-ified") what goes on in the build and deploy features of the SAP Web IDE!
---
Annotated links: Episode 47 of Hands-on SAP dev with qmacro
technology-blog-sap
2019-12-13
https://community.sap.com/t5/technology-blogs-by-sap/annotated-links-episode-47-of-hands-on-sap-dev-with-qmacro/ba-p/13454684
2019-12-13-annotated-links-episode-47-of-hands-on-sap-dev-with-qmacro
<EM>This is a searchable description of the content of a live stream recording, specifically <STRONG>"Ep.47 - ABAP and SAP Cloud Platform functions for Advent of Code"</STRONG> in the "<A href="https://bit.ly/handsonsapdev" target="_blank" rel="nofollow noopener noreferrer">Hands-on SAP dev with qmacro</A>" series. There are links directly to specific highlights in the video recording. For links to annotations of other episodes, please see the "<A href="https://bit.ly/handsonsapdev#replays" target="_blank" rel="nofollow noopener noreferrer">Catch the replays</A>" section of the series blog post.</EM><BR />
<BR />
This episode was streamed live on Fri 06 Dec 2019 and is approximately 60 minutes in length. The stream recording is <A href="https://www.youtube.com/watch?v=Om8AvzbabR8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;index=48" target="_blank" rel="nofollow noopener noreferrer">available on YouTube</A>.<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2019/12/Screenshot-2019-12-13-at-15.49.51-1.png" /><BR />
<BR />
Brief synopsis: It's December and many of us are furiously hacking away on solutions to the excellent Advent of Code daily puzzles. We're using different languages, platforms and tools, for different reasons; in this episode we get Hendrik Neumann and Gregor Wolf to show us how they're solving the puzzles with SAP tech.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=Om8AvzbabR8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h03m15s" target="_blank" rel="nofollow noopener noreferrer">00:03:15</A> Setting the scene, showing <A href="https://adventofcode.com" target="_blank" rel="nofollow noopener noreferrer">Advent of Code</A> - a series of daily programming puzzles that many folks, a vast number of folks around the world, are using to have some fun, learn a new language or a new programming technique, and generally improve their skills.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=Om8AvzbabR8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h04m25s" target="_blank" rel="nofollow noopener noreferrer">00:04:25</A> Also, introduced to us by <SPAN class="mention-scrubbed">gregorw</SPAN>, there's <A href="https://25daysofserverless.com" target="_blank" rel="nofollow noopener noreferrer">25 Days of Serverless</A> which follows a similar pattern of daily programming challenges, this time to be solved in a serverless context.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=Om8AvzbabR8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h04m55s" target="_blank" rel="nofollow noopener noreferrer">00:04:55</A> A quick reminder that the SAP Cloud Platform has a beta Functions-as-a-Service (FaaS) offering, for which I've created a second subaccount in my trial account, in order to be able to turn on "beta features" to access this offering.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=Om8AvzbabR8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h05m50s" target="_blank" rel="nofollow noopener noreferrer">00:05:50</A> <SPAN class="mention-scrubbed">hendrik.neumann</SPAN> is going to show us some of his coding for Advent of Code solutions that he wrote in ABAP, and that reminded me to share the link to the SAP TechEd <A href="https://developers.sap.com/app-space.html" target="_blank" rel="noopener noreferrer">App Space missions</A> from this year, which includes one for the <A href="https://developers.sap.com/tutorials/abap-environment-trial-onboarding.html" target="_blank" rel="noopener noreferrer">SAP Cloud Platform ABAP Environment</A>.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=Om8AvzbabR8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h06m50s" target="_blank" rel="nofollow noopener noreferrer">00:06:50</A> Moving to the main scene to bring in Hendrik and Gregor who have been waiting patiently in the Green Room (!). We had some issues with Hendrik's audio initially, so we started with Gregor.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=Om8AvzbabR8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h10m20s" target="_blank" rel="nofollow noopener noreferrer">00:10:20</A> We get going with Gregor showing us a solution to the first challenge relating to generating a service that effectively "rolls the dice" for a dreidel with four different values.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=Om8AvzbabR8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h11m25s" target="_blank" rel="nofollow noopener noreferrer">00:11:25</A> We talk about continous trial renewal (on SAP Cloud Platform Cloud Foundry), and that after 90 days all artifacts are deleted, but can be re-created afterwards. Gregor (and I, and others, I'm sure) uses GitHub to store artifacts to be able to more easily re-create them in this way.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=Om8AvzbabR8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h11m45s" target="_blank" rel="nofollow noopener noreferrer">00:11:45</A> Gregor started off with the SAP Web IDE using the project wizard to get a template for creating a FaaS application. The resulting simple application is effectively a single <CODE>handler</CODE> function that is exported, and simply responds to an incoming event (an HTTP request, in this case).<BR />
<BR />
<A href="https://www.youtube.com/watch?v=Om8AvzbabR8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h13m10s" target="_blank" rel="nofollow noopener noreferrer">00:13:10</A> Just before deploying this simple function to the SAP Cloud Platform, Gregor points out a gotcha that you need to pay attention to, otherwise things won't work generally. This is documented in the help document <A href="https://help.sap.com/viewer/94fafb5bcf8f4c5cbdd0cdd8e358183c/Cloud/en-US/da73ff53ebc44ce2a12ee73911367c01.html" target="_blank" rel="noopener noreferrer">Create a Functions (Beta) Service Instance</A> and basically involves manually specifying the service instance name in a small JSON stanza like this:<BR />
<DIV><BR />
<PRE class="sourceCode json"><CODE class="sourceCode json"><SPAN class="fu">{</SPAN><BR />
  <SPAN class="dt">"name"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="st">"faas-test"</SPAN><BR />
<SPAN class="fu">}</SPAN></CODE></PRE><BR />
</DIV><BR />
<A href="https://www.youtube.com/watch?v=Om8AvzbabR8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h14m20s" target="_blank" rel="nofollow noopener noreferrer">00:14:20</A> After deployment, we test it out, via a FaaS cockpit page relating to Gregor's FaaS subscription. The URL of this cockpit page will look something like this:<BR />
<PRE><CODE><A href="https://&lt;your-id&gt;beta.cockpit.&lt;region&gt;.functions.ondemand.com/#/overview" target="test_blank" rel="nofollow noopener noreferrer">https://&lt;your-id&gt;beta.cockpit.&lt;region&gt;.functions.ondemand.com/#/overview</A></CODE></PRE><BR />
It's a nice overview with access to the functions, triggers, and so on. Taking the HTTP endpoint that represents the trigger for the FaaS handler, Gregor calls the service.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=Om8AvzbabR8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h16m30s" target="_blank" rel="nofollow noopener noreferrer">00:16:30</A> Moving on to the challenge in Day 3, Gregor takes us through what was involved, including <A href="https://developer.github.com/webhooks/" target="_blank" rel="nofollow noopener noreferrer">GitHub Webhooks</A>. This time Gregor shows that he moved to a local development context for this one, using the Functions (Beta) Library, described in the SAP Help document <A href="https://help.sap.com/viewer/94fafb5bcf8f4c5cbdd0cdd8e358183c/Cloud/en-US/ee7340af22b74e109b32d0d67c72bf94.html" target="_blank" rel="noopener noreferrer">Create a Function Project with Functions (Beta) Library</A>. Nice find, Gregor!<BR />
<BR />
<A href="https://www.youtube.com/watch?v=Om8AvzbabR8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h18m10s" target="_blank" rel="nofollow noopener noreferrer">00:18:10</A> We see that after creating the project, he transferred it via a git repo to his local environment, using VS Code as the IDE, and adding a few scripts to the project's <CODE>package.json</CODE>. Running <CODE>npm run watch</CODE> spins up a local server with endpoints representing the functions. Lovely!<BR />
<BR />
<A href="https://www.youtube.com/watch?v=Om8AvzbabR8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h20m00s" target="_blank" rel="nofollow noopener noreferrer">00:20:00</A> Gregor shows us the content of his <CODE>githubwebhook.js</CODE> code, and we take a short digression on coding and putting things together. There's no shame in what your code looks like, and if it works and is maintainable, so much the better! We notice that Gregor is using the built-in <CODE>http</CODE> module to make the HTTP requests - this is because he didn't want to rely upon any further external packages here.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=Om8AvzbabR8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h22m30s" target="_blank" rel="nofollow noopener noreferrer">00:22:30</A> There's another component to this Day 3 puzzle solution, which is a backend, which Gregor has put together using of course CAP. He has a really simple data model which looks like this:<BR />
<PRE class="cds"><CODE>namespace media;<BR />
<BR />
entity Pictures {<BR />
  key ID : String(64);<BR />
  @Core.MediaType: 'image/png'<BR />
  content : LargeBinary;<BR />
}</CODE></PRE><BR />
along with an even simpler service definition:<BR />
<PRE class="cds"><CODE>using media as db from '../db/data-model';<BR />
<BR />
service MediaService {<BR />
  entity Pictures as projection on db.Pictures;<BR />
}</CODE></PRE><BR />
<A href="https://www.youtube.com/watch?v=Om8AvzbabR8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h24m40s" target="_blank" rel="nofollow noopener noreferrer">00:24:40</A> Looking briefly at the <A href="https://marketplace.visualstudio.com/items?itemName=humao.rest-client" target="_blank" rel="nofollow noopener noreferrer">REST Client</A> extension for VS Code which allows you to write HTTP client request definitions really simply. Recommended!<BR />
<BR />
<A href="https://www.youtube.com/watch?v=Om8AvzbabR8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h27m00s" target="_blank" rel="nofollow noopener noreferrer">00:27:00</A> After inserting a picture, Gregor demonstrates the deletion facility. He also shows the test he set up to simulate what is sent from GitHub in the webhook call - this was fairly straightforward to set up as GitHub documents that very nicely.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=Om8AvzbabR8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h29m25s" target="_blank" rel="nofollow noopener noreferrer">00:29:25</A> Making the 'real' test - taking a screenshot, committing it into the git repo and pushing the change to GitHub, whereupon the webhook call is triggered. And we see both from the GitHub webhook status page, and from requesting a list of images from the CAP-powered backend, that everything was successful. Well done Gregor, and thank you!<BR />
<BR />
<A href="https://www.youtube.com/watch?v=Om8AvzbabR8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h33m35s" target="_blank" rel="nofollow noopener noreferrer">00:33:35</A> Bringing in Hendrik now, who is happily free of audio issues too by now. He's been solving Advent of Code puzzles, in a test driven development (TDD) approach, in ABAP, on a privately installed virtual machine running a developer edition ABAP stack on his laptop.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=Om8AvzbabR8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h35m45s" target="_blank" rel="nofollow noopener noreferrer">00:35:45</A> He fires up Eclipse, and we see the (by now) familiar sight of the ABAP Development Tools (ADT) in action there. He's solved the puzzles for Days 1 through 4. He points out, rightly, that with the innovations that have been arriving since 7.4, the ABAP language is great and far from 'dead'!<BR />
<BR />
<A href="https://www.youtube.com/watch?v=Om8AvzbabR8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h36m40s" target="_blank" rel="nofollow noopener noreferrer">00:36:40</A> Hendrik starts by showing the Day 1 puzzle, which involves some calculations of fuel. He also shows how the second part of the day's puzzle appears once a correct answer for the first part has been submitted.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=Om8AvzbabR8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h38m00s" target="_blank" rel="nofollow noopener noreferrer">00:38:00</A> He shows us the ABAP code for calculating the fuel in all its glory. It's a wonder to see, and rather beautiful in its own way. Here's what the implementation section looks like:<BR />
<PRE class="abap"><CODE>CLASS zfuel IMPLEMENTATION.<BR />
<BR />
  METHOD calc.<BR />
    DATA(x) = CONV i( floor( CONV float( mass / 3 ) ) ) - 2.<BR />
    fuel = COND #( WHEN x &lt; 0 THEN 0 ELSE x + calc( x ) ).<BR />
  ENDMETHOD.<BR />
<BR />
  METHOD calc_total_fuel.<BR />
    total_fuel = REDUCE #( INIT x = 0 FOR module in modules<BR />
                           NEXT x = x + calc( module ) ).<BR />
  ENDMETHOD.<BR />
<BR />
ENDCLASS.</CODE></PRE><BR />
I have typed this in here so we can all stare at it for a few minutes. Go over to the video to watch Hendrik's explanation, but before you do, notice here that you're looking at recursion (in the <CODE>calc</CODE> method) and also a <CODE>reduce</CODE> call (even though it looks a little unusual, to say the least!). Wonderful.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=Om8AvzbabR8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h40m30s" target="_blank" rel="nofollow noopener noreferrer">00:40:30</A> Hendrik takes us briefly through his local test class too, containing tests taken from the examples in the puzzle.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=Om8AvzbabR8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h41m00s" target="_blank" rel="nofollow noopener noreferrer">00:41:00</A> To get the solution output, Hendrik has created a small program that uses <CODE>CL_GUI_FRONTEND_SERVICES</CODE> to facilitate the upload of the input data file, and to call the solution functions in the context of a call to the static <CODE>DISPLAY</CODE> method of <CODE>CL_DEMO_OUTPUT</CODE>, which allows him to see the output directly in Eclipse.<BR />
<BR />
Here's the line, so we can stare at that, in all its glory, too:<BR />
<PRE class="abap"><CODE>cl_demo_output=&gt;display( |Total fuel: { NEW zfuel( )-&gt;calc_total_fuel(<BR />
  VALUE #( FOR module IN modules ( CONV #( module ) ) ) )  }| ).</CODE></PRE><BR />
And Hendrik even wrote the tests first, a proper TDD approach. Good work Hendrik!<BR />
<BR />
<A href="https://www.youtube.com/watch?v=Om8AvzbabR8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h43m25s" target="_blank" rel="nofollow noopener noreferrer">00:43:25</A> We move over to Day 3 and talk about the challenges presented by that day's puzzle. In the chat, <SPAN class="mention-scrubbed">helmut.tammen2</SPAN> notes that this puzzle caused difficulties for him in the solution - he has been using <A href="https://github.com/lodash/lodash/wiki/FP-Guide" target="_blank" rel="nofollow noopener noreferrer">Lodash FP</A> and it turned out that the built-in <CODE>intersection</CODE> function was basically too slow. The odd thing is that the same thing happened to me, while using <A href="https://ramdajs.com" target="_blank" rel="nofollow noopener noreferrer">Ramda</A>, a similar FP library for JavaScript. Furthermore, my son Joseph had the same issue. We all ended up writing our own implementations of <CODE>intersection</CODE>. How's that for interesting?<BR />
<BR />
In case you're wondering, here's what <A href="https://github.com/qmacro/adventofcode2019/blob/master/day/lib/utils.js#L4-L11" target="_blank" rel="nofollow noopener noreferrer">my implementation</A> of a faster <CODE>intersection</CODE> looks like:<BR />
<DIV><BR />
<PRE class="sourceCode javascript"><CODE class="sourceCode javascript"><SPAN class="kw">const</SPAN> fasterIntersection <SPAN class="op">=</SPAN> (list1<SPAN class="op">,</SPAN> list2) <SPAN class="op">=&gt;</SPAN> <SPAN class="op">{</SPAN><BR />
  <SPAN class="kw">const</SPAN> serialise <SPAN class="op">=</SPAN> <SPAN class="va">JSON</SPAN>.<SPAN class="at">stringify</SPAN><BR />
  <SPAN class="kw">const</SPAN> deserialise <SPAN class="op">=</SPAN> <SPAN class="va">JSON</SPAN>.<SPAN class="at">parse</SPAN><BR />
  <SPAN class="kw">const</SPAN> [shorter<SPAN class="op">,</SPAN> longer] <SPAN class="op">=</SPAN> <SPAN class="at">lift</SPAN>(<SPAN class="at">map</SPAN>(serialise))(list1 <SPAN class="op">&lt;</SPAN> list2 <SPAN class="op">?</SPAN> [list1<SPAN class="op">,</SPAN> list2] : [list2<SPAN class="op">,</SPAN> list1])<BR />
  <SPAN class="cf">return</SPAN> <SPAN class="at">map</SPAN>(deserialise)(<SPAN class="at">reduce</SPAN>((a<SPAN class="op">,</SPAN> x) <SPAN class="op">=&gt;</SPAN> <SPAN class="at">concat</SPAN>(a<SPAN class="op">,</SPAN> <SPAN class="at">gte</SPAN>(<SPAN class="at">indexOf</SPAN>(x<SPAN class="op">,</SPAN> longer)<SPAN class="op">,</SPAN> <SPAN class="dv">0</SPAN>) <SPAN class="op">?</SPAN> [x] : [])<SPAN class="op">,</SPAN> []<SPAN class="op">,</SPAN> shorter))<BR />
<SPAN class="op">}</SPAN></CODE></PRE><BR />
</DIV><BR />
<A href="https://www.youtube.com/watch?v=Om8AvzbabR8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h46m40s" target="_blank" rel="nofollow noopener noreferrer">00:46:40</A> After a comment in the chat, we go back to examine the <CODE>COND</CODE> conditional operator, which reminds me of the ternary operator in other languages. Hendrik explains a little bit more about this expression, in particular the type inference from <CODE>fuel</CODE> and what it must construct from the expression evaluation. These are referred to as "constructor expressions".<BR />
<BR />
<A href="https://www.youtube.com/watch?v=Om8AvzbabR8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h50m00s" target="_blank" rel="nofollow noopener noreferrer">00:50:00</A> We take a brief philosophical view of how the <CODE>reduce</CODE> concept has been realised in ABAP, which is different from most of the implementations one sees in the wild in other languages which are more closely aligned with functional approaches.<BR />
<BR />
Note that Hendrik has shared his ABAP solutions to these Advent of Code puzzles in a GitHub repo: <A class="uri" href="https://github.com/hendrik77/Advent_of_Code_2019" target="_blank" rel="nofollow noopener noreferrer">https://github.com/hendrik77/Advent_of_Code_2019</A>, thanks to <A href="https://docs.abapgit.org" target="_blank" rel="nofollow noopener noreferrer">abapGit</A>, which in turn is thanks to <SPAN class="mention-scrubbed">lars.hvam</SPAN> who is live with us in this live stream episode too - excellent (and thanks Lars)! Hendrik gives a further shout out to <SPAN class="mention-scrubbed">enno.wulff</SPAN> who is also sharing his ABAP based solutions to Advent of Code here: <A class="uri" href="https://github.com/tricktresor/AdventOfCode2019" target="_blank" rel="nofollow noopener noreferrer">https://github.com/tricktresor/AdventOfCode2019</A>, and to <SPAN class="mention-scrubbed">nabheetscn</SPAN> who wrote a blog post on the subject: <A href="https://blogs.sap.com/2019/12/02/advent-of-code-lets-do-it-using-abap/" target="_blank" rel="noopener noreferrer">Advent of code - Let's do it using ABAP</A>.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=Om8AvzbabR8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h56m10s" target="_blank" rel="nofollow noopener noreferrer">00:56:10</A> Just before we finish this episode, Hendrik points us to some regular expressions he's used to implement part of the solution to Day 4. This reminds me to mention an excellent book from which I learned a lot about regular expressions - Jeffrey Friedl's <A href="http://regex.info/book.html" target="_blank" rel="nofollow noopener noreferrer">Mastering Regular Expressions</A> - definitely recommended!<BR />
<BR />
And we finish on a quote, <A href="https://en.wikiquote.org/wiki/Jamie_Zawinski" target="_blank" rel="nofollow noopener noreferrer">from Jamie Zawinski</A>: <EM>Some people, when confronted with a problem, think "I know, I'll use regular expressions." Now they have two problems.</EM>.<BR />
<BR />
Until next time, happy hacking!
---
Annotated links: Episode 46 of Hands-on SAP dev with qmacro
technology-blog-sap
2019-12-03
https://community.sap.com/t5/technology-blogs-by-sap/annotated-links-episode-46-of-hands-on-sap-dev-with-qmacro/ba-p/13430348
2019-12-03-annotated-links-episode-46-of-hands-on-sap-dev-with-qmacro
<EM>This is a searchable description of the content of a live stream recording, specifically <STRONG>"Ep.46 - The SAP Business Application Studio with Marius Obert"</STRONG> in the "<A href="https://bit.ly/handsonsapdev" target="_blank" rel="nofollow noopener noreferrer">Hands-on SAP dev with qmacro</A>" series. There are links directly to specific highlights in the video recording. For links to annotations of other episodes, please see the "<A href="https://bit.ly/handsonsapdev#replays" target="_blank" rel="nofollow noopener noreferrer">Catch the replays</A>" section of the series blog post.</EM><BR />
<BR />
This episode was streamed live on Fri 29 Nov 2019 and is approximately 60 minutes in length. The stream recording is <A href="https://www.youtube.com/watch?v=wG4iVredIwc&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;index=47" target="_blank" rel="nofollow noopener noreferrer">available on YouTube</A>.<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2019/12/Screenshot-2019-12-03-at-09.56.53.png" /><BR />
<BR />
Brief synopsis: In this episode we take a look at the new IDE from SAP - the Business Application Studio. We have an old friend of the stream Marius Obert to tell us about it and demo it live too. Don't miss this!<BR />
<BR />
<A href="https://www.youtube.com/watch?v=wG4iVredIwc&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h03m15s" target="_blank" rel="nofollow noopener noreferrer">00:03:15</A> A quick reminder that <A href="https://adventofcode.com" target="_blank" rel="nofollow noopener noreferrer">Advent of Code</A> (AoC) starts in and runs throughout the December month, get your brain fired up and enjoy practising thinking and writing in a language you know, or improve your knowledge of a new language, while solving interesting programming puzzles. If you're interested in chatting with other developers in the wider SAP Developer community about this, join the #adventofcode channel on the SAP Mentors &amp; Friends workspace - everyone is welcome (if you're not already on that workspace, you can find an invite link <A href="https://sapmentors-slack-invite.cfapps.eu10.hana.ondemand.com/" target="_blank" rel="nofollow noopener noreferrer">here</A>).<BR />
<BR />
As DerEinzigeWaherKobold points out, I'm an <A href="https://adventofcode.com/2019/support" target="_blank" rel="nofollow noopener noreferrer">Advent of Code supporter</A> - you can be too if you're interested.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=wG4iVredIwc&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h04m00s" target="_blank" rel="nofollow noopener noreferrer">00:04:00</A> The structure that we used in <A href="https://bit.ly/handsonsapdev#ep00" target="_blank" rel="nofollow noopener noreferrer">Ep.00</A> to solve an older AoC puzzle is available (particularly for <SPAN class="mention-scrubbed">pdominique-bio</SPAN> who asked about it) in the <A href="https://github.com/qmacro/handsonsapdev" target="_blank" rel="nofollow noopener noreferrer">HandsOnSAPDev annotations repo</A> (in the <CODE>ep00</CODE> directory).<BR />
<BR />
<A href="https://www.youtube.com/watch?v=wG4iVredIwc&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h04m45s" target="_blank" rel="nofollow noopener noreferrer">00:04:45</A> If you're looking for programming puzzles that are slightly less intense than those in AoC, there's always <A href="https://projecteuler.net" target="_blank" rel="nofollow noopener noreferrer">Project Euler</A>, which, <A href="https://twitter.com/greg_not_so/status/1200783753431441409" target="_blank" rel="nofollow noopener noreferrer">according to</A> Former Member I've been pronouncing "oddly" (my word). Fair enough <span class="lia-unicode-emoji" title=":slightly_smiling_face:">ð</span><BR />
<BR />
<A href="https://www.youtube.com/watch?v=wG4iVredIwc&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h05m00s" target="_blank" rel="nofollow noopener noreferrer">00:05:00</A> A quick mention of <A href="https://repl.it" target="_blank" rel="nofollow noopener noreferrer">repl.it</A> which is a lovely online lightweight IDE that you use to write in all sorts of languages and environments, and it has facilities to sync your code with GitHub repos. Recommended (and I'm <A href="https://repl.it/@qmacro/Advent-of-Code-2019" target="_blank" rel="nofollow noopener noreferrer">using it</A> for my AoC puzzles at the moment).<BR />
<BR />
<A href="https://www.youtube.com/watch?v=wG4iVredIwc&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h05m30s" target="_blank" rel="nofollow noopener noreferrer">00:05:30</A> Welcoming <SPAN class="mention-scrubbed">mariusobert</SPAN> to the episode, who has of course been on #HandsOnSAPDev before, in <A href="https://bit.ly/handsonsapdev#ep24" target="_blank" rel="nofollow noopener noreferrer">Ep.24 â Going from local CAP to cloud CAP with MTA based deployments</A> in fact.<BR />
<BR />
Marius is going to show us the SAP Business Application Studio, and we start with a brief look at a couple of blog posts: <A href="https://blogs.sap.com/2019/10/15/showcasing-sap-business-application-studio-the-next-generation-of-sap-web-ide/" target="_blank" rel="noopener noreferrer">Showcasing: SAP Business Application Studio (the next generation of SAP Web IDE)</A> by <SPAN class="mention-scrubbed">nirm.kol</SPAN> and indeed one of Marius's own posts, from his Cloud Foundry Fun series - <A href="https://blogs.sap.com/2019/10/30/cloudfoundryfun-9-develop-with-the-sap-business-application-studio/" target="_blank" rel="noopener noreferrer">#CloudFoundryFun #9 â Develop with the SAP Business Application Studio</A>.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=wG4iVredIwc&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h10m20s" target="_blank" rel="nofollow noopener noreferrer">00:10:20</A> Marius starts out by describing what we're going to build - a simple application consuming everyone's favourite OData service - Northwind!<BR />
<BR />
<A href="https://www.youtube.com/watch?v=wG4iVredIwc&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h11m00s" target="_blank" rel="nofollow noopener noreferrer">00:11:00</A> There's a tutorial group in our <A href="https://developers.sap.com/tutorial-navigator.html" target="_blank" rel="noopener noreferrer">Tutorial Navigator</A> that Marius highlights, that relates to what we're going to build: <A href="https://developers.sap.com/group.cp-frontend-ui5-1.html" target="_blank" rel="noopener noreferrer">Create a Web Front End with SAPUI5 in Web IDE</A>.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=wG4iVredIwc&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h11m50s" target="_blank" rel="nofollow noopener noreferrer">00:11:50</A> Looking at Marius's Northwind destination definition, which is at the subaccount level.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=wG4iVredIwc&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h13m00s" target="_blank" rel="nofollow noopener noreferrer">00:13:00</A> In our first touch point with the Business Application Studio we see for the first time the concept of "Dev Spaces". Each Dev Space comes with all the tools you need to develop your solution (such as plugins, cli tools, and so on).<BR />
<BR />
<A href="https://www.youtube.com/watch?v=wG4iVredIwc&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h15m30s" target="_blank" rel="nofollow noopener noreferrer">00:15:30</A> Seeing the UI for the first time, it looks very familiar - based on, and compatible with, VS Code. Very nice!<BR />
<BR />
<A href="https://www.youtube.com/watch?v=wG4iVredIwc&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h16m15s" target="_blank" rel="nofollow noopener noreferrer">00:16:15</A> Discussing the "Format on Save" feature of the IDE, which on the whole I think is a very good thing.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=wG4iVredIwc&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h17m40s" target="_blank" rel="nofollow noopener noreferrer">00:17:40</A> Using the command line to install some software, specifically Marius's <A href="https://blogs.sap.com/2019/02/05/introducing-the-easy-ui5-generator/" target="_blank" rel="noopener noreferrer">UI5 generator</A>:<BR />
<PRE><CODE>npm i generator-easy-ui5</CODE></PRE><BR />
<A href="https://www.youtube.com/watch?v=wG4iVredIwc&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h19m15s" target="_blank" rel="nofollow noopener noreferrer">00:19:15</A> The beauty of the Business Application Studio is (for me) that it gives each developer a full, working environment, in the cloud. One of the challenges we see when running CodeJams is the requirement to set up a development environment locally, especially on Windows devices. These challenges are completely neutralised in this context.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=wG4iVredIwc&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h21m30s" target="_blank" rel="nofollow noopener noreferrer">00:21:30</A> Checking what version of Node.js is automatically available, we see that it's the LTS version of Node.js 10. That's good.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=wG4iVredIwc&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h22m15s" target="_blank" rel="nofollow noopener noreferrer">00:22:15</A> Using the IDE's Command Palette to invoke a Yeoman (<CODE>yo</CODE>) command, where we see that the palette is used as a generic UI for input and selection, which looks really nice.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=wG4iVredIwc&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h24m00s" target="_blank" rel="nofollow noopener noreferrer">00:24:00</A> Choosing the view type for the UI5 project, and we joke about choosing JavaScript views (this did remind me of an old blog post I wrote comparing the different view types in UI5 (XML, HTML, JavaScript and JSON), but I can't seem to find where that got to - if you know, or have a link, please let me know!).<BR />
<BR />
<A href="https://www.youtube.com/watch?v=wG4iVredIwc&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h25m50s" target="_blank" rel="nofollow noopener noreferrer">00:25:50</A> Looking at the <CODE>xs-app.json</CODE> file in the App Router, where we define a mapping to the Northwind destination, and discussing the challenges of ensuring the route definitions are in the right order so that URLs are appropriately matched ... and whether the editor should do something to help us here.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=wG4iVredIwc&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h28m50s" target="_blank" rel="nofollow noopener noreferrer">00:28:50</A> Looking at how the App Router can be started from a local directory.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=wG4iVredIwc&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h29m20s" target="_blank" rel="nofollow noopener noreferrer">00:29:20</A> Comparing the destination definitions in Neo and Cloud Foundry (CF), and how they're very similar, but that in CF the destination is created as an instance of the Destination service (and that, as we see shortly after this, the application needs to be bound to this instance).<BR />
<BR />
<A href="https://www.youtube.com/watch?v=wG4iVredIwc&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h30m30s" target="_blank" rel="nofollow noopener noreferrer">00:30:30</A> Connecting to and authenticating with CF, and selecting the organisation and space; following this we can also immediately use the command line <CODE>cf</CODE> CLI client (or the Command Palette equivalents).<BR />
<BR />
<A href="https://www.youtube.com/watch?v=wG4iVredIwc&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h31m25s" target="_blank" rel="nofollow noopener noreferrer">00:31:25</A> Creating a new service instance, using the Command Palette - very comfortable and convenient!<BR />
<BR />
<A href="https://www.youtube.com/watch?v=wG4iVredIwc&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h34m45s" target="_blank" rel="nofollow noopener noreferrer">00:34:45</A> Discussing the generation and use of service keys, which are required to be able to access and interact with services from outside the SAP Cloud Platform context directly.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=wG4iVredIwc&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h35m30s" target="_blank" rel="nofollow noopener noreferrer">00:35:30</A> Highlighting <SPAN class="mention-scrubbed">graham.robinson</SPAN> observation that the Business Application Studio is much more "target aware", in that we can carry out deployment target activities without having to jump out to other tools.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=wG4iVredIwc&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h35m50s" target="_blank" rel="nofollow noopener noreferrer">00:35:50</A> Checking the success of the service binding, by looking at the <CODE>.env</CODE> file in the <CODE>dist/</CODE> directory (and we then move <CODE>.env</CODE> into the <CODE>approuter/</CODE> directory for it to be accessed and used.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=wG4iVredIwc&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h36m50s" target="_blank" rel="nofollow noopener noreferrer">00:36:50</A> Even more goodness - on startup we see that the Business Application Studio offers a port forwarding facility so that an application started up and listening in the context of the development space (in the cloud, but "pseudo-local" to the developer in the IDE) can be accessed from a regular workstation-local web browser.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=wG4iVredIwc&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h39m00s" target="_blank" rel="nofollow noopener noreferrer">00:39:00</A> Following a question on the <CODE>mbt</CODE> tool (the cloud MTA Build Tool), we note that the tool is now no longer in beta, and is in fact accessible from <A class="uri" href="https://www.npmjs.com/package/mbt" target="_blank" rel="nofollow noopener noreferrer">https://www.npmjs.com/package/mbt</A>. Note that <CODE>mbt</CODE> will replace the now-deprecated Java-based build tool.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=wG4iVredIwc&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h44m20s" target="_blank" rel="nofollow noopener noreferrer">00:44:20</A> Roberdinho points to a great set of blog posts by <SPAN class="mention-scrubbed">kevin_hu</SPAN> on building an English Premier League app with CAP, using Visual Studio Online - see this post for more details: <A href="https://blogs.sap.com/2019/11/22/part-5-try-out-visual-studio-online-with-cloud-programming-model-epl-app/" target="_blank" rel="noopener noreferrer">Part 5 Try out Visual Studio Online with Cloud Programming Model #epl-app</A>.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=wG4iVredIwc&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h44m55s" target="_blank" rel="nofollow noopener noreferrer">00:44:55</A> Talking about <A href="https://aws.amazon.com/cloud9/" target="_blank" rel="nofollow noopener noreferrer">Cloud9</A>, another cloud IDE, which in fact was (I seem to remember) based on Bespin, <A href="http://web.archive.org/web/20130729203222id_/http://itc.conversationsnetwork.org/shows/detail4025.html" target="_blank" rel="nofollow noopener noreferrer">created originally</A> by Dion Almaer and Ben Galbraith (both at Mozilla, at the time). Find out more about this at <A class="uri" href="https://ace.c9.io/" target="_blank" rel="nofollow noopener noreferrer">https://ace.c9.io/</A>.<BR />
<BR />
In fact, online IDEs and editors abound - we also mention the <A href="https://cloud.google.com/blog/products/gcp/introducing-google-cloud-shels-new-code-editor" target="_blank" rel="nofollow noopener noreferrer">code editor available in Google Cloud Shell</A>, <A href="https://www.gitpod.io/" target="_blank" rel="nofollow noopener noreferrer">Gitpod</A>, a one-click online IDE for GitHub and of course <A href="https://repl.it" target="_blank" rel="nofollow noopener noreferrer">repl.it</A>.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=wG4iVredIwc&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h47m00s" target="_blank" rel="nofollow noopener noreferrer">00:47:00</A> Getting back to the app, we start to add to the view with a <CODE>StandardListItem</CODE> (my favourite control, I think), and add to the controller with a handler.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=wG4iVredIwc&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h51m00s" target="_blank" rel="nofollow noopener noreferrer">00:51:00</A> Reminiscing about the early days of UI5 - the first version of UI5 I played with (when it was first released publicly) was 1.2.0 (a beta version) - I wrote about it in a post in 2012: <A href="https://www.bluefinsolutions.com/insights/dj-adams/january-2014/sapui5-the-future-direction-of-sap-ui-developmen" target="_blank" rel="nofollow noopener noreferrer">SAPUI5 - The Future direction of SAP UI Development?</A>, and indeed it seems a long time ago already since we were celebrating the milestone release of 1.30 with the series of articles under the theme "<A href="https://qmacro.org/2015/07/04/30-days-of-ui5/" target="_blank" rel="nofollow noopener noreferrer">30 Days of UI5</A>".<BR />
<BR />
<A href="https://www.youtube.com/watch?v=wG4iVredIwc&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h51m35s" target="_blank" rel="nofollow noopener noreferrer">00:51:35</A> <SPAN class="mention-scrubbed">rsletta</SPAN> has a great website and service that tells us about the latest UI5 versions - check it out at <A class="uri" href="https://latest-openui5.rikosjett.com/" target="_blank" rel="nofollow noopener noreferrer">https://latest-openui5.rikosjett.com/</A>!<BR />
<BR />
<A href="https://www.youtube.com/watch?v=wG4iVredIwc&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h52m40s" target="_blank" rel="nofollow noopener noreferrer">00:52:40</A> Following a successful test "locally", as a final part of the demo, given the time, Marius starts the build and deploy process:<BR />
<PRE><CODE>npm run deploy</CODE></PRE><BR />
<A href="https://www.youtube.com/watch?v=wG4iVredIwc&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h54m35s" target="_blank" rel="nofollow noopener noreferrer">00:54:35</A> Sorting out a quick demo-based issue, by using <CODE>npx</CODE> to more specifically point to the <CODE>mbt</CODE> tool so that the build runs correctly.<BR />
<BR />
And with a quick <CODE>cf deploy</CODE> we're off to CF! While that happens, Marius takes us on a brief tour of the plugins in his Business Application Studio instance.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=wG4iVredIwc&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h57m20s" target="_blank" rel="nofollow noopener noreferrer">00:57:20</A> Marius shows an example of the work that the teams have been doing, to bring over the extensions from SAP Web IDE so that they can be used in the SAP Business Application Studio. The example here is the Layout Editor for XML Views in UI5. Very nice!<BR />
<BR />
<A href="https://www.youtube.com/watch?v=wG4iVredIwc&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h58m20s" target="_blank" rel="nofollow noopener noreferrer">00:58:20</A> And to round this episode off, Marius loads the actual deployed application in his browser, served from CF. Not only that, but he shows a use of command line tools and pipelining to get a clickable URL:<BR />
<PRE><CODE>echo "https://"$(cf apps | grep started | awk '{print $6}')</CODE></PRE><BR />
... which is the perfect way to end this episode and this annotations blog post (remember - #<A href="https://twitter.com/search?q=%23TheFutureIsTerminal" target="_blank" rel="nofollow noopener noreferrer">TheFutureIsTerminal</A>!). Thanks to Marius for this great session, and to you all for your continued support and following of <A href="https://bit.ly/handsonsapdev" target="_blank" rel="nofollow noopener noreferrer">Hands-on SAP dev with qmacro</A>!
---
Annotated links: Episode 45 of Hands-on SAP dev with qmacro
technology-blog-sap
2019-11-29
https://community.sap.com/t5/technology-blogs-by-sap/annotated-links-episode-45-of-hands-on-sap-dev-with-qmacro/ba-p/13425611
2019-11-29-annotated-links-episode-45-of-hands-on-sap-dev-with-qmacro
<EM>This is a searchable description of the content of a live stream recording, specifically <STRONG>"Ep.45 â Cool initiatives and projects with CAP with Tom Jung"</STRONG> in the "<A href="https://bit.ly/handsonsapdev" target="_blank" rel="nofollow noopener noreferrer">Hands-on SAP dev with qmacro</A>" series. There are links directly to specific highlights in the video recording. For links to annotations of other episodes, please see the "<A href="https://bit.ly/handsonsapdev#replays" target="_blank" rel="nofollow noopener noreferrer">Catch the replays</A>" section of the series blog post.</EM><BR />
<BR />
This episode was streamed live on Wed 27 Nov 2019 and is approximately 60 minutes in length. The stream recording is <A href="https://www.youtube.com/watch?v=tVvnmBAWY5o&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;index=46" target="_blank" rel="nofollow noopener noreferrer">available on YouTube</A>.<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2019/11/Screenshot-2019-11-29-at-13.57.37.png" /><BR />
<BR />
Brief synopsis: In this episode Tom Jung joins us and show us some of the cool stuff heâs been hacking on in the CAP area. Tom has always got some fascinating tech to share, so make sure you tune in!<BR />
<BR />
<A href="https://www.youtube.com/watch?v=tVvnmBAWY5o&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h02m40s" target="_blank" rel="nofollow noopener noreferrer">00:02:40</A> Screen sharing fail - I'll get the hang of this live streaming eventually! What I wanted to share on my screen was <A href="https://projecteuler.net" target="_blank" rel="nofollow noopener noreferrer">Project Euler</A> which is a great set of math-related puzzles to riff on when you want to practice programming in a new language or improve prowess in an existing language.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=tVvnmBAWY5o&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h04m15s" target="_blank" rel="nofollow noopener noreferrer">00:04:15</A> Switching to show <SPAN class="mention-scrubbed">thomas.jung</SPAN>'s screen and video ready for the main part of this particular episode. Talking about timezones, and that we try to do the occasional Wednesday afternoon (for me) live stream to catch the US timezone based folks like Tom.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=tVvnmBAWY5o&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h06m20s" target="_blank" rel="nofollow noopener noreferrer">00:06:20</A> Tom begins to describe the project he's going to show us, by starting with what it looks like from the user perspective (a <A href="https://product-roadmap.cfapps.us10.hana.ondemand.com/" target="_blank" rel="nofollow noopener noreferrer">new way to discover</A> and consume the SAP product roadmap documents). A much more attractive, interactive and intelligent frontend - kudos!<BR />
<BR />
It's powered by HANA and CAP on the backend, and by React on the frontend. Internally it also uses a Fiori Elements powered UI for administration and maintenance of the data.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=tVvnmBAWY5o&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h09m00s" target="_blank" rel="nofollow noopener noreferrer">00:09:00</A> Tom learned a lot doing this project because it was a real one, with specialised security, circuit breaking, blue-green deployment, and many other moving parts. But the particular aspect Tom is about to show is the search capabilities, which are powered by HANA's fuzzy search and text analytics, and tied together in CAP. In answer to a question from mayjay139, Tom says that the project took around 4-5 weeks all told (plus a lot of design work that was done up front).<BR />
<BR />
<A href="https://www.youtube.com/watch?v=tVvnmBAWY5o&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h12m45s" target="_blank" rel="nofollow noopener noreferrer">00:12:45</A> Tom picks out an OData operation in the Chrome Developer Tools that represents the search that he just carried out in the UI ("SuccessFactors UX harmonization"), and digs into the query parameters. This is the magic that the team wanted to achieve - use standard OData protocol aspects but provide a rich search experience from HANA, including search scoring, snippets, and weighted columns (which means, for example, that a search for "suc" will favour results like "SuccessFactors" higher than regular words like "such").<BR />
<BR />
<A href="https://www.youtube.com/watch?v=tVvnmBAWY5o&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h16m05s" target="_blank" rel="nofollow noopener noreferrer">00:16:05</A> Moving from the UI to the backend, to explore how things work in this regard. Tom has also prepared a cut-down version that can be shared - this is available in his <A href="https://github.com/jungsap/cap-fuzzy-search" target="_blank" rel="nofollow noopener noreferrer">cap-fuzzy-search</A> repo on GitHub. Thanks Tom!<BR />
<BR />
<A href="https://www.youtube.com/watch?v=tVvnmBAWY5o&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h17m00s" target="_blank" rel="nofollow noopener noreferrer">00:17:00</A> Looking first at how the <CODE>$search</CODE> initiated process works, i.e. which fields are to be used when searching for the string supplied. This is done via an annotation, as Tom shows us here (<CODE>@Search.defaultSearchElement</CODE>).<BR />
<BR />
<A href="https://www.youtube.com/watch?v=tVvnmBAWY5o&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h18m15s" target="_blank" rel="nofollow noopener noreferrer">00:18:15</A> There are a lot of annotations used in this project, and Tom has a separate file for annotations relating to the Fiori Elements frontend (in <CODE>fiori-annotations-cat-service.cds</CODE>).<BR />
<BR />
<A href="https://www.youtube.com/watch?v=tVvnmBAWY5o&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h18m30s" target="_blank" rel="nofollow noopener noreferrer">00:18:30</A> Ordering search results by score goes hand in hand with fuzzy search, as you want to be able to rank the results and reflect that in the display. To have this work, Tom created a virtual column which means it's not persisted in the database, but it's available in the output and in the custom handler related to the service. There are virtual columns for <CODE>score</CODE> and <CODE>titleSnippet</CODE> properties.<BR />
<BR />
There are different approaches for handling virtual or computed properties - see for example the post "<A href="https://blogs.sap.com/2019/08/21/computed-field-example-in-cap/" target="_blank" rel="noopener noreferrer">Computed field example in CAP</A>", but this virtual property at the entity level is a nice approach because it then appears in DB views for reporting.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=tVvnmBAWY5o&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h21m00s" target="_blank" rel="nofollow noopener noreferrer">00:21:00</A> Tom points out that he's not using the standard <CODE>managed</CODE> aspect from <CODE><a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a>/cds/common</CODE>, but a custom set of properties to address some issues they had with DateTime data type quite correctly, relating to the V4 -&gt; V2 adapter.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=tVvnmBAWY5o&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h21m50s" target="_blank" rel="nofollow noopener noreferrer">00:21:50</A> Tom now talks about the full text indices he created, and shows us some of the HANA configuration files for those (also including the turning on of text analysis and mining). HANA is also able to pull out product names and recognise them as such. What is surprising is the large number of tables that are generated as a result of this (which can be selected upon directly too, which is nice).<BR />
<BR />
<A href="https://www.youtube.com/watch?v=tVvnmBAWY5o&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h28m00s" target="_blank" rel="nofollow noopener noreferrer">00:28:00</A> Starting to look at the custom handler, the "exit", in <CODE>srv/cat-service.js</CODE>, and noting how easy it is to handle error scenarios, by just calling <CODE>reject</CODE> on the request object and supplying an appropriate HTTP status code, like this example:<BR />
<DIV><BR />
<PRE class="sourceCode javascript"><CODE class="sourceCode javascript"><SPAN class="va">req</SPAN>.<SPAN class="at">reject</SPAN>(<SPAN class="dv">409</SPAN><SPAN class="op">,</SPAN> <SPAN class="vs">`Invalid Status Value: </SPAN><SPAN class="sc">${</SPAN><SPAN class="va">req</SPAN>.<SPAN class="va">data</SPAN>.<SPAN class="at">status</SPAN><SPAN class="sc">}</SPAN><SPAN class="vs">.`</SPAN>)</CODE></PRE><BR />
</DIV><BR />
(By the way Tom, I've only just noticed, while annotating this recording, that you aren't using semicolons - kudos! :-))<BR />
<BR />
<A href="https://www.youtube.com/watch?v=tVvnmBAWY5o&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h30m00s" target="_blank" rel="nofollow noopener noreferrer">00:30:00</A> Noting that in handling specific operations, it's also very simple to turn around and make one's own extra calls to the database, using the philosophy of abstraction and myriad Domain Specific Languages (DSLs) - see the <A href="https://blogs.sap.com/2019/09/18/tech-aloud-podcast-an-introduction/#dsls" target="_blank" rel="noopener noreferrer">DSL section of the post "Tech Aloud podcast â an introduction"</A> for a little more on that, too.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=tVvnmBAWY5o&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h32m25s" target="_blank" rel="nofollow noopener noreferrer">00:32:25</A> Starting to focus in on the handling of the search itself, with the code in this section:<BR />
<DIV><BR />
<PRE class="sourceCode javascript"><CODE class="sourceCode javascript"><SPAN class="kw">this</SPAN>.<SPAN class="at">on</SPAN>(<SPAN class="st">"READ"</SPAN><SPAN class="op">,</SPAN> <SPAN class="st">"Roadmap"</SPAN><SPAN class="op">,</SPAN> <SPAN class="at">async</SPAN> (req<SPAN class="op">,</SPAN> next) <SPAN class="op">=&gt;</SPAN> <SPAN class="op">{</SPAN><BR />
  ...<BR />
<SPAN class="op">}</SPAN>)</CODE></PRE><BR />
</DIV><BR />
The fascinating thing here is that what's going on is just a subtle massaging of the in-flight call, again using the power of CAP in the form of the mutable programmatic structure of that request. If you want to learn more about this, have a look at the tutorial "<A href="https://developers.sap.com/tutorials/cap-cloudsdk-5-srv-logic.html" target="_blank" rel="noopener noreferrer">Add Service Logic to Consume Remote Address Data</A> which does something similar (this tutorial is part of the mission "<A href="https://blogs.sap.com/2019/11/08/sap-teched-mission-api-hub-cloud-sdk-and-cap-an-overview/" target="_blank" rel="noopener noreferrer">Use CAP and SAP Cloud SDK to Extend S/4HANA</A>).<BR />
<BR />
<A href="https://www.youtube.com/watch?v=tVvnmBAWY5o&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h36m20s" target="_blank" rel="nofollow noopener noreferrer">00:36:20</A> A short discussion on the fuzziness percentage value, and the fact that it took a while to adjust to the right value (0.7 in this case) to get the best results. Talk about 80/20 effort - the crazy thing is that it took Tom far longer to get that value right than it did to write the entirety of the <CODE>on</CODE> handler!<BR />
<BR />
<A href="https://www.youtube.com/watch?v=tVvnmBAWY5o&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h39m25s" target="_blank" rel="nofollow noopener noreferrer">00:39:25</A> We turn at this stage briefly to the "TOKEN SEPARATORS" value in the fulltext indexing configuration, which had a set of default values that tripped Tom up first of all - the backslash and forward slash symbols were included by default, but this meant that the string "S/4" wasn't being recognised as a viable result in the fuzzy search! Removal of the slashes from the list of characters fixed this. Nice tip!<BR />
<BR />
<A href="https://www.youtube.com/watch?v=tVvnmBAWY5o&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h40m33s" target="_blank" rel="nofollow noopener noreferrer">00:40:33</A> Switching over to his <A href="https://github.com/jungsap/cap-fuzzy-search" target="_blank" rel="nofollow noopener noreferrer">cut down version on GitHub</A>, where he has a reduced set of entities and properties, but at least it shows the query exit, which is super helpful. Noting at this point that <CODE>req._</CODE> gives access to the whole raw request - which can be extremely useful.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=tVvnmBAWY5o&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h43m00s" target="_blank" rel="nofollow noopener noreferrer">00:43:00</A> Having set a breakpoint, Tom triggers a search to have a look what goes on inside a select, in debug mode, including what CDS generates for us.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=tVvnmBAWY5o&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h47m00s" target="_blank" rel="nofollow noopener noreferrer">00:47:00</A> A short discussion on CQL and the power it gives you when handling the request yourself - instead of parsing SQL you're just manipulating objects, while Tom fights gently with his HANA backend.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=tVvnmBAWY5o&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h48m20s" target="_blank" rel="nofollow noopener noreferrer">00:48:20</A> Asking a question about Tom's experience with building the React frontend using the OData service, and how that went. This led to a very fascinating conversation about how it was simply treaded as "yet another REST API" via the Swagger API interface documentation that Tom generated (via the library 'odata2openapi'), by taking EDMX and converting it to Swagger, and which we look at now.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=tVvnmBAWY5o&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h53m50s" target="_blank" rel="nofollow noopener noreferrer">00:53:50</A> We approach the end of this live stream by a lovely conversation about fonts and ligatures. Tom is using <A href="https://dev.to/expertsinside/cascadia-code-a-new-font-for-visual-studio-code-and-terminal-47oc" target="_blank" rel="nofollow noopener noreferrer">Cascadia Code</A>, and has <A href="https://github.com/tonsky/FiraCode/wiki/VS-Code-Instructions" target="_blank" rel="nofollow noopener noreferrer">turned on ligatures</A> in VS Code. (I've been recently experimenting with ligatures too, as I was bowled over by how beautiful the code looked in this video on Elm: <A href="https://www.youtube.com/watch?v=pF8gSF5QlP" target="_blank" rel="nofollow noopener noreferrer">Advent of Code 2018: Day 1, Part One</A>).<BR />
<BR />
<A href="https://www.youtube.com/watch?v=tVvnmBAWY5o&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h55m50s" target="_blank" rel="nofollow noopener noreferrer">00:55:50</A> Based on a question by <SPAN class="mention-scrubbed">speri</SPAN> we confirm that Swagger also works with OData V2, which we can generate with the OData V2 Adapter Proxy, which you can also explore with another tutorial in the mission mentioned earlier: "<A href="https://developers.sap.com/tutorials/cap-cloudsdk-2-v2-adapter.html" target="_blank" rel="noopener noreferrer">Install an OData V2 Adapter</A>". In fact, Tom briefly shows the Fiori Elements based UI that is based on OData V2 via that very proxy.<BR />
<BR />
That brings us to the end of this episode, thanks again so much to <SPAN class="mention-scrubbed">thomas.jung</SPAN> for coming on and showing us this stuff. Until next time!
---
Annotated links: Episode 44 of Hands-on SAP dev with qmacro
technology-blog-sap
2019-11-26
https://community.sap.com/t5/technology-blogs-by-sap/annotated-links-episode-44-of-hands-on-sap-dev-with-qmacro/ba-p/13456763
2019-11-26-annotated-links-episode-44-of-hands-on-sap-dev-with-qmacro
<EM>This is a searchable description of the content of a live stream recording, specifically <STRONG>"Ep.44 â Business Rules in Cloud Foundry â setting things up"</STRONG> in the "<A href="https://bit.ly/handsonsapdev" target="_blank" rel="nofollow noopener noreferrer">Hands-on SAP dev with qmacro</A>" series. There are links directly to specific highlights in the video recording. For links to annotations of other episodes, please see the "<A href="https://bit.ly/handsonsapdev#replays" target="_blank" rel="nofollow noopener noreferrer">Catch the replays</A>" section of the series blog post.</EM><BR />
<BR />
This episode was streamed live on Fri 22 Nov 2019 and is approximately 60 minutes in length. The stream recording is <A href="https://www.youtube.com/watch?v=Mn9xU4BCVcM&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;index=45" target="_blank" rel="nofollow noopener noreferrer">available on YouTube</A>.<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2019/11/Screenshot-2019-11-26-at-08.42.00.png" /><BR />
<BR />
Brief synopsis: In previous recent episodes we've taken a look at the Business Rules service on Neo, and kicked the tyres with a simple rules service. Now it's time to move to Cloud Foundry and set things up there. Let's go!<BR />
<BR />
<A href="https://www.youtube.com/watch?v=Mn9xU4BCVcM&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h02m00s" target="_blank" rel="nofollow noopener noreferrer">00:02:00</A> It's #TShirtDay today and I'm wearing my favourite Rush tshirt - you should definitely check out their music: <A class="uri" href="https://open.spotify.com/artist/2Hkut4rAAyrQxRdof7FVJq" target="_blank" rel="nofollow noopener noreferrer">https://open.spotify.com/artist/2Hkut4rAAyrQxRdof7FVJq</A>.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=Mn9xU4BCVcM&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h06m10s" target="_blank" rel="nofollow noopener noreferrer">00:06:10</A> If you want to request an SAP CodeJam, check out the main <A href="https://community.sap.com/events/codejam" target="_blank">CodeJam page</A> where you can find the topics and a link to request one.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=Mn9xU4BCVcM&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h07m10s" target="_blank" rel="nofollow noopener noreferrer">00:07:10</A> As I <A href="https://twitter.com/qmacro/status/1197752299461992448" target="_blank" rel="nofollow noopener noreferrer">mentioned earlier today</A>, on the SAP Cloud Platform Cockpit there's a new Starter Scenario available, "<A href="https://developers.sap.com/mission.cp-starter-extensions-cap.html" target="_blank" rel="noopener noreferrer">Build a Business Application using Node.js</A>" - nice work <SPAN class="mention-scrubbed">iwona.jirschitzka</SPAN> &amp; team!<BR />
<BR />
<A href="https://www.youtube.com/watch?v=Mn9xU4BCVcM&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h09m10s" target="_blank" rel="nofollow noopener noreferrer">00:09:10</A> I'm trying to work more openly, and am now editing my draft annotations for the <A href="https://bit.ly/handsonsapdev#replays" target="_blank" rel="nofollow noopener noreferrer">live stream replays</A> in a <A href="https://github.com/qmacro/handsonsapdev" target="_blank" rel="nofollow noopener noreferrer">public GitHub repo</A>. So you'll see the draft annotations as they're written, and most likely even before they're made live. In fact, I'll go and <A href="https://github.com/qmacro/handsonsapdev/commit/c02a6f71fb418e733b75f1d679e704175dc1ed21" target="_blank" rel="nofollow noopener noreferrer">push this new file right now</A>!<BR />
<BR />
<A href="https://www.youtube.com/watch?v=Mn9xU4BCVcM&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h10m45s" target="_blank" rel="nofollow noopener noreferrer">00:10:45</A> Now, in the <A href="https://bit.ly/handsonsapdev#upcoming" target="_blank" rel="nofollow noopener noreferrer">upcoming section</A> of the main <A href="https://bit.ly/handsonsapdev" target="_blank" rel="nofollow noopener noreferrer">Hands-on SAP dev</A> post, I'm maintaining not only the upcoming episode but, where appropriate, I've added future planned episodes - there are already two episodes planned next week, with <SPAN class="mention-scrubbed">thomas.jung</SPAN> on Wednesday and <SPAN class="mention-scrubbed">mariusobert</SPAN> on Friday.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=Mn9xU4BCVcM&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h11m40s" target="_blank" rel="nofollow noopener noreferrer">00:11:40</A> Starting where we left off on this topic last time, looking at what we have with respect to the Business Rules service in the Neo environment, so that we know what we're aiming for in Cloud Foundry (CF). This includes the service itself and also the administration UI.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=Mn9xU4BCVcM&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h14m45s" target="_blank" rel="nofollow noopener noreferrer">00:14:45</A> Mentioning one of the great folks from the Intelligent Enterprise Process Orchestration team <SPAN class="mention-scrubbed">archana.shukla</SPAN> - you should definitely take a look at her blog posts on the subjects of the Business Rules and Workflow services!<BR />
<BR />
<A href="https://www.youtube.com/watch?v=Mn9xU4BCVcM&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h16m00s" target="_blank" rel="nofollow noopener noreferrer">00:16:00</A> Exploring my SAP Cloud Platform CF trial account, and the relationships between the subaccount, the organisation and the space(s), as well as basic CF concepts such as applications, services, service instances and bindings.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=Mn9xU4BCVcM&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h19m50s" target="_blank" rel="nofollow noopener noreferrer">00:19:50</A> <SPAN class="mention-scrubbed">gregorw</SPAN> points out that while you can renew your Cloud Foundry trial three times up to a total of 90 days, you can actually keep renewing, it's just that your artifacts are removed after 90 days (but you can redeploy and set things up again). He points to a <A href="https://twitter.com/Chuergo16/status/1197580905314996226" target="_blank" rel="nofollow noopener noreferrer">tweet</A> by <SPAN class="mention-scrubbed">chuergo16</SPAN> that relates to this.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=Mn9xU4BCVcM&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h23m50s" target="_blank" rel="nofollow noopener noreferrer">00:23:50</A> Mentioning the <A href="https://surveys.sap.com/jfe/form/SV_0uozKWOYSgTrBFX" target="_blank" rel="noopener noreferrer">SAP Developer Insights Survey</A>, in a conversation about feedback. If you have already completed it - thank you! If you haven't, please do, it should take you no more than 10 mins.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=Mn9xU4BCVcM&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h24m15s" target="_blank" rel="nofollow noopener noreferrer">00:24:15</A> Creating a new instance of the Business Rules service, with the 'lite' plan, and talking about a strategy for naming things, to help with my problem of (a) never knowing what to pick and (b) regardless of what I pick ('business-rules' in this case) I forget what it was 5 mins later. This is particularly and painfully prescient as indeed at the end of this episode, the build / deploy process fails ... because I forgot what name I'd chosen!<BR />
<BR />
<A href="https://www.youtube.com/watch?v=Mn9xU4BCVcM&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h25m30s" target="_blank" rel="nofollow noopener noreferrer">00:25:30</A> A quick mention of the SAP <A href="https://anchor.fm/sap-community-podcast" target="_blank" rel="nofollow noopener noreferrer">Coffee Corner Radio Podcast</A>, to which you should definitely subscribe. Recommended!<BR />
<BR />
<A href="https://www.youtube.com/watch?v=Mn9xU4BCVcM&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h26m10s" target="_blank" rel="nofollow noopener noreferrer">00:26:10</A> About to create a Service Key for the new instance of this service, so we can make calls to it from other endpoints such as the <A href="https://api.sap.com" target="_blank" rel="noopener noreferrer">SAP API Business Hub</A>. Note that the authentication will be based on OAuth 2.0.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=Mn9xU4BCVcM&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h29m05s" target="_blank" rel="nofollow noopener noreferrer">00:29:05</A> There are three pieces of information in the Service Key that we'll need eventually to make our API calls: the client ID, the client secret, and the endpoint URL.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=Mn9xU4BCVcM&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h30m15s" target="_blank" rel="nofollow noopener noreferrer">00:30:15</A> <SPAN class="mention-scrubbed">mark.teichmann</SPAN> shares a link to a useful resource regarding OAuth 2.0 and SAP service resources: <A href="https://wiki.scn.sap.com/wiki/display/Security/OAuth+2.0+-+Integrating+access+protected+web+services+using+the+OAuth+2.0+Client" target="_blank" rel="noopener noreferrer">OAuth 2.0 - Integrating access protected web services using the OAuth 2.0 Client Skip to end of metadata</A>. Thanks Mark!<BR />
<BR />
<A href="https://www.youtube.com/watch?v=Mn9xU4BCVcM&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h31m00s" target="_blank" rel="nofollow noopener noreferrer">00:31:00</A> At this stage we move back to the organisation level in CF to create a collection of Business Service related roles and assign that collection to myself. The roles cover superuser access to both of the areas - design-time and runtime, in other words, Repository and Runtime contexts.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=Mn9xU4BCVcM&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h38m10s" target="_blank" rel="nofollow noopener noreferrer">00:38:10</A> With the role collection created, we add it to my user, via Trust Configuration, in the context of the identity provider used (the SAP ID Service).<BR />
<BR />
<A href="https://www.youtube.com/watch?v=Mn9xU4BCVcM&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h40m10s" target="_blank" rel="nofollow noopener noreferrer">00:40:10</A> Almost everything is set up now, but one thing that we still have to do is manually and explicitly bring to life the equivalent of the "Manage Business Rules" app that we know and love from the Neo environment. In Neo it was automatically available to us, but in this CF context we need to build and deploy the app ourselves. It's a one-time activity, yes, it's extra work, but I think in this case it's worth it as it teaches us more stuff about how CF and multi-target apps work.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=Mn9xU4BCVcM&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h42m40s" target="_blank" rel="nofollow noopener noreferrer">00:42:40</A> Downloading the <A href="https://github.com/SAP/cloud-businessrules-samples/blob/master/cf-apps/cf-businessruleseditor.zip" target="_blank" rel="nofollow noopener noreferrer">cf-businessruleseditor.zip</A> file from the <A href="https://github.com/SAP/cloud-businessrules-samples" target="_blank" rel="nofollow noopener noreferrer">SAP/cloud-businessrules-samples</A> repo, which we'll import into the SAP Web IDE to build and deploy.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=Mn9xU4BCVcM&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h43m40s" target="_blank" rel="nofollow noopener noreferrer">00:43:40</A> I mentioned that this process is described in a relatively new tutorial, <A href="https://developers.sap.com/tutorials/cp-cf-businessrules03-setup-mrp.html" target="_blank" rel="noopener noreferrer">Set Up the Manage Rules Project Application</A>, which is part of a new mission <A href="https://developers.sap.com/mission.cp-rules-get-started.html" target="_blank" rel="noopener noreferrer">Get Started with SAP Cloud Platform Business Rules</A>. Check it out!<BR />
<BR />
<A href="https://www.youtube.com/watch?v=Mn9xU4BCVcM&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h45m50s" target="_blank" rel="nofollow noopener noreferrer">00:45:50</A> Loading the SAP Web IDE, straight into a nice workspace "HandsOnSAPDev" that I've created for this live stream series purpose, importing the ZIP file, and exploring the contents, and marvelling that there is very little there - most importantly there's the <CODE>mta.yaml</CODE> file which we look at in detail.<BR />
<BR />
For those (like me) who like to stare at configuration, here's the content of the <CODE>mta.yaml</CODE> file (including the change from "businessrules" to "business-rules" I had to <A href="https://twitter.com/qmacro/status/1197806803217723393" target="_blank" rel="nofollow noopener noreferrer">make at the end</A> to get the build to work and the deploy to be successful (yes, this is the name change that I'd forgotten about!):<BR />
<DIV><BR />
<PRE class="sourceCode yaml"><CODE class="sourceCode yaml"><SPAN class="fu">ID:</SPAN> businessruleseditor<BR />
<SPAN class="fu">_schema-version:</SPAN> <SPAN class="st">'2.1'</SPAN><BR />
<SPAN class="fu">parameters:</SPAN><BR />
   <SPAN class="fu">deploy_mode:</SPAN> html5-repo<BR />
<SPAN class="fu">version:</SPAN> 0.0.1<BR />
<BR />
<SPAN class="fu">modules:</SPAN><BR />
 <SPAN class="kw">-</SPAN> <SPAN class="fu">name:</SPAN> businessruleseditor_appRouter<BR />
   <SPAN class="fu">type:</SPAN> approuter.nodejs<BR />
   <SPAN class="fu">path:</SPAN> businessruleseditor_appRouter<BR />
   <SPAN class="fu">parameters:</SPAN><BR />
      <SPAN class="fu">disk-quota:</SPAN> 256M<BR />
      <SPAN class="fu">memory:</SPAN> 256M<BR />
   <SPAN class="fu">requires:</SPAN><BR />
    <SPAN class="kw">-</SPAN> <SPAN class="fu">name:</SPAN> businessruleseditor_html5_repo_runtime<BR />
    <SPAN class="kw">-</SPAN> <SPAN class="fu">name:</SPAN> businessrules_uaa<BR />
    <SPAN class="kw">-</SPAN> <SPAN class="fu">name:</SPAN> business-rules<BR />
<SPAN class="fu">resources:</SPAN><BR />
 <SPAN class="kw">-</SPAN> <SPAN class="fu">name:</SPAN> businessruleseditor_html5_repo_runtime<BR />
   <SPAN class="fu">parameters:</SPAN><BR />
      <SPAN class="fu">service-plan:</SPAN> app-runtime<BR />
      <SPAN class="fu">service:</SPAN> html5-apps-repo<BR />
   <SPAN class="fu">type:</SPAN> org.cloudfoundry.managed-service<BR />
 <SPAN class="kw">-</SPAN> <SPAN class="fu">name:</SPAN> business-rules<BR />
   <SPAN class="fu">type:</SPAN> org.cloudfoundry.existing-service<BR />
 <SPAN class="kw">-</SPAN> <SPAN class="fu">name:</SPAN> businessrules_uaa<BR />
   <SPAN class="fu">type:</SPAN> com.sap.xs.uaa<BR />
   <SPAN class="fu">parameters:</SPAN><BR />
      <SPAN class="fu">config:</SPAN><BR />
         <SPAN class="fu">xsappname:</SPAN> businessrules_uaa-appname<BR />
         <SPAN class="fu">tenant-mode:</SPAN> dedicated<BR />
         <SPAN class="fu">role-templates:</SPAN><BR />
            <SPAN class="kw">-</SPAN> <SPAN class="fu">name :</SPAN> UaaUser<BR />
              <SPAN class="fu">description:</SPAN> Role template for accessing SAP Business Rule APIs.Editor via user token flow<BR />
              <SPAN class="fu">scope-references:</SPAN><BR />
                <SPAN class="kw">-</SPAN> uaa.user</CODE></PRE><BR />
</DIV><BR />
<A href="https://www.youtube.com/watch?v=Mn9xU4BCVcM&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h53m30s" target="_blank" rel="nofollow noopener noreferrer">00:53:30</A> We build the project, deliberately choosing the deprecated tool, to remember what it does and how the logs look as we can look at the new build tool <CODE>mbt</CODE> in a future episode (the deprecated, Java-based build tool will be supported to 31 May 2020). The build process completes and a new multi-target application archive <CODE>businessruleseditor_0.0.1.mtar</CODE> is created.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=Mn9xU4BCVcM&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h56m00s" target="_blank" rel="nofollow noopener noreferrer">00:56:00</A> We deploy this to CF, specifying the API endpoint, organisation and space ... and it fails! It's because I'd forgotten I'd named the Business Rules service instance 'business-rules' (with a dash) - I needed to adjust the <CODE>mta.yaml</CODE> references to deal with this. Oops! The nice thing was that the failure was fairly clean and obvious - the error message told us exactly what was wrong.<BR />
<BR />
One more issue (again, my fault) - in rushing to make the change, I only changed the reference in a single place, not in both places (referer and referee) so the build failed again. Doh! Shortly after the stream finished, I fixed it. An exciting end to the stream, don't you think?<BR />
<BR />
And ... as Former Member pointed out in the chat right at the end: "<EM>Problems are where we learn</EM>". Well said!
---
Annotated links: Episode 43 of Hands-on SAP dev with qmacro
technology-blog-sap
2019-11-26
https://community.sap.com/t5/technology-blogs-by-sap/annotated-links-episode-43-of-hands-on-sap-dev-with-qmacro/ba-p/13456571
2019-11-26-annotated-links-episode-43-of-hands-on-sap-dev-with-qmacro
<EM>This is a searchable description of the content of a live stream recording, specifically <STRONG>"Ep.43 - SAP TechEd Functional Programming recap"</STRONG> in the "<A href="https://bit.ly/handsonsapdev" target="_blank" rel="nofollow noopener noreferrer">Hands-on SAP dev with qmacro</A>" series. There are links directly to specific highlights in the video recording. For links to annotations of other episodes, please see the "<A href="https://bit.ly/handsonsapdev#replays" target="_blank" rel="nofollow noopener noreferrer">Catch the replays</A>" section of the series blog post.</EM><BR />
<BR />
This episode was streamed live on Tue 19 Nov 2019 and is approximately 90 minutes in length. The stream recording is <A href="https://www.youtube.com/watch?v=72fkd4TBDtA&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0" target="_blank" rel="nofollow noopener noreferrer">available on YouTube</A>.<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2019/11/Screenshot-2019-11-26-at-08.29.58-1.png" /><BR />
<BR />
Brief synopsis: At SAP TechEd 2019 in Bangalore we had this session "Write Solid Code with Functional Programming Techniques" where, using JS, we covered some functional programming aspects such as higher order functions, composition and reuse, partial application and immutability. It was a popular session and was repeated the next day. This episode gives us all the chance to look at the content of this session, and some related FP goodness.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=72fkd4TBDtA&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h04m30s" target="_blank" rel="nofollow noopener noreferrer">00:04:30</A> An overview of what this episode is going to cover, including a recap of my Community Theatre session at SAP TechEd 2019 Bangalore "<A href="https://sessioncatalog.sapevents.com/go/agendabuilder.speakers/?l=222&amp;speaker_id=46905&amp;locale=en_US" target="_blank" rel="nofollow noopener noreferrer">Write Solid Code with Functional Programming Techniques</A>" which was repeated the next day due to popularity, which was nice. A quick shoutout to to my colleague <SPAN class="mention-scrubbed">mynyna.chau</SPAN> who ran the Community Theatre really well last week.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=72fkd4TBDtA&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h07m00s" target="_blank" rel="nofollow noopener noreferrer">00:07:00</A> Reminded by A couple of my documents that I shared, covering more beginner functional programming topics:<BR />
<UL><BR />
 	<LI><A href="https://docs.google.com/document/d/1mNhHOWKuRrTsSeQuCZ_0yT_mkFqLYsIL754G3neyaXo/edit" target="_blank" rel="nofollow noopener noreferrer">Programming in a more functional style in JavaScript</A></LI><BR />
 	<LI><A href="https://docs.google.com/document/d/1Nx2PFqObMtir0rSzjU804PAAVkC3j4lZTtfRRoLSocQ/edit" target="_blank" rel="nofollow noopener noreferrer">Functional Programming for your UI5 Apps - Hands-On Worksheet</A></LI><BR />
</UL><BR />
<A href="https://www.youtube.com/watch?v=72fkd4TBDtA&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h07m30s" target="_blank" rel="nofollow noopener noreferrer">00:07:30</A> Looking at the <A href="https://twitter.com/kyleshevlin/status/1196278263401734145" target="_blank" rel="nofollow noopener noreferrer">tweet</A> that <SPAN class="mention-scrubbed">rsletta</SPAN> shared, describing a way to turn an array of records into a map (object) of those records, keyed by the value of a given property - this is also something that we are to cover in this episode.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=72fkd4TBDtA&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h07m50s" target="_blank" rel="nofollow noopener noreferrer">00:07:50</A> A quick mention of <A href="https://codesandbox.io/" target="_blank" rel="nofollow noopener noreferrer">Code Sandbox</A> which seems a great online code editor for lots of web dev goodness.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=72fkd4TBDtA&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h12m00s" target="_blank" rel="nofollow noopener noreferrer">00:12:00</A> Not to forget that <A href="https://adventofcode.com" target="_blank" rel="nofollow noopener noreferrer">Advent Of Code</A> is almost upon us! We used a puzzle from Advent Of Code to warm our brains up at the very start of this series - if you're interested, check out <A href="https://bit.ly/handsonsapdev#ep0" target="_blank" rel="nofollow noopener noreferrer">Episode 0</A>!<BR />
<BR />
<A href="https://www.youtube.com/watch?v=72fkd4TBDtA&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h13m20s" target="_blank" rel="nofollow noopener noreferrer">00:13:20</A> I think I've mentioned this video before, but it's worth mentioning again, which I did at this point - a great talk by Brian Lonsdorf (aka <A href="https://twitter.com/drboolean" target="_blank" rel="nofollow noopener noreferrer">Dr Boolean</A>) "<A href="https://www.youtube.com/watch?v=m3svKOdZijA" target="_blank" rel="nofollow noopener noreferrer">Hey Underscore, You're Doing It Wrong!</A>".<BR />
<BR />
<A href="https://www.youtube.com/watch?v=72fkd4TBDtA&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h14m20s" target="_blank" rel="nofollow noopener noreferrer">00:14:20</A> Finally, a quick pointer to a video on my own YouTube channel, "<A href="https://www.youtube.com/watch?v=R-Ej68re8uE" target="_blank" rel="nofollow noopener noreferrer">Implementing 'partition' three ways in JS and Ramda</A>". Don't forget to please consider subscribing to <A href="https://youtube.com/user/qmacro99" target="_blank" rel="nofollow noopener noreferrer">my YouTube channel</A> and let's see if I can get to 1000 subscribers by the end of the year!<BR />
<BR />
<A href="https://www.youtube.com/watch?v=72fkd4TBDtA&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h15m30s" target="_blank" rel="nofollow noopener noreferrer">00:15:30</A> OK, starting with the <A href="https://services.odata.org/V4/Northwind/Northwind.svc/Products" target="_blank" rel="nofollow noopener noreferrer">Northwind Products</A> that we'll use as a small data set for our experiments.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=72fkd4TBDtA&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h17m50s" target="_blank" rel="nofollow noopener noreferrer">00:17:50</A> Starting to work on producing a list of discontinued items for sale, with reduced prices, using a more "traditional" ("old fashioned"?) approach, with a <CODE>for</CODE> loop.<BR />
<BR />
During this part, we see how many difficults we encounter, or rather cause for ourselves. Code and data that moves, changes. Worse, perhaps, is that we're having to instruct the computer <EM>how</EM> to work through a list, rather than simply <EM>what</EM> we want it to give us. But the ultimate issue is that we're clobbering data "upstream", our source of truth data set, without even realising! Not good, not now, and not further down the line when our program has grown and things are going wrong and we can't work out why.<BR />
<BR />
Here's what the code looks like (this is the code that we <EM>don't</EM> like!):<BR />
<DIV><BR />
<PRE class="sourceCode javascript"><CODE class="sourceCode javascript">aSaleItems <SPAN class="op">=</SPAN> []<BR />
<BR />
<SPAN class="cf">for</SPAN> (<SPAN class="kw">var</SPAN> i <SPAN class="op">=</SPAN> <SPAN class="dv">0</SPAN><SPAN class="op">;</SPAN> i <SPAN class="op">&lt;</SPAN> <SPAN class="va">Products</SPAN>.<SPAN class="at">length</SPAN><SPAN class="op">;</SPAN> i<SPAN class="op">++</SPAN>) <SPAN class="op">{</SPAN><BR />
  <SPAN class="kw">var</SPAN> product <SPAN class="op">=</SPAN> Products[i]<BR />
  <SPAN class="cf">if</SPAN> (<SPAN class="va">product</SPAN>.<SPAN class="at">Discontinued</SPAN> <SPAN class="op">===</SPAN> <SPAN class="kw">true</SPAN>) <SPAN class="op">{</SPAN><BR />
    <SPAN class="va">product</SPAN>.<SPAN class="at">UnitPrice</SPAN> <SPAN class="op">=</SPAN> <SPAN class="va">Math</SPAN>.<SPAN class="at">round</SPAN>(<SPAN class="va">product</SPAN>.<SPAN class="at">UnitPrice</SPAN> <SPAN class="op">*</SPAN> <SPAN class="fl">0.9</SPAN>)<BR />
    <SPAN class="va">aSaleItems</SPAN>.<SPAN class="at">push</SPAN>(product)<BR />
  <SPAN class="op">}</SPAN><BR />
<SPAN class="op">}</SPAN></CODE></PRE><BR />
</DIV><BR />
<A href="https://www.youtube.com/watch?v=72fkd4TBDtA&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h25m40s" target="_blank" rel="nofollow noopener noreferrer">00:25:40</A> A small digression on the meaning of 'idempotent', which is an important concept in REST (and how idempotency is different from having side-effects).<BR />
<BR />
<A href="https://www.youtube.com/watch?v=72fkd4TBDtA&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h27m50s" target="_blank" rel="nofollow noopener noreferrer">00:27:50</A> It's clear that we don't want this, we want more "solid-state" programming. And for that we can adopt some functional programming techniques, which we start to have a look at now.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=72fkd4TBDtA&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h28m50s" target="_blank" rel="nofollow noopener noreferrer">00:28:50</A> I explain the concepts that we covered in the Community Theatre talk, and <SPAN class="mention-scrubbed">chris.whealy</SPAN> kindly writes them down in the chat for me (thanks Chris!) ready to cover in this episode now:<BR />
<UL><BR />
 	<LI>higher order functions</LI><BR />
 	<LI>reuse and chaining</LI><BR />
 	<LI>partial application</LI><BR />
 	<LI>immutability</LI><BR />
</UL><BR />
<A href="https://www.youtube.com/watch?v=72fkd4TBDtA&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h31m10s" target="_blank" rel="nofollow noopener noreferrer">00:31:10</A> Talking about the "<A href="https://en.wikipedia.org/wiki/Triumvirate" target="_blank" rel="nofollow noopener noreferrer">triumvirate</A>" of functions <CODE>map</CODE>, <CODE>filter</CODE> and <CODE>reduce</CODE> and pointing out that <CODE>reduce</CODE> is the mother of all functions, in that, for example, you can implement both <CODE>map</CODE> and <CODE>filter</CODE> using <CODE>reduce</CODE>.<BR />
<BR />
A bit later on, we note that these functions have built-in "list machinery" - see my post "<A href="https://langram.org/2017/02/19/the-beauty-of-recursion-and-list-machinery/" target="_blank" rel="nofollow noopener noreferrer">The beauty of recursion and list machinery</A>" if you want to dig into this a little more.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=72fkd4TBDtA&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h32m40s" target="_blank" rel="nofollow noopener noreferrer">00:32:40</A> Starting to build out the functional style equivalent, beginning with a simple <CODE>isDiscontinued</CODE> function definition.<BR />
<DIV><BR />
<PRE class="sourceCode javascript"><CODE class="sourceCode javascript">isDiscontinued <SPAN class="op">=</SPAN> x <SPAN class="op">=&gt;</SPAN> <SPAN class="va">x</SPAN>.<SPAN class="at">Discontinued</SPAN> <SPAN class="op">===</SPAN> <SPAN class="kw">true</SPAN></CODE></PRE><BR />
</DIV><BR />
<A href="https://www.youtube.com/watch?v=72fkd4TBDtA&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h45m50s" target="_blank" rel="nofollow noopener noreferrer">00:45:50</A> A bit later on we also define a helper function for discounts, which is written in such a way that we can partially apply it:<BR />
<DIV><BR />
<PRE class="sourceCode javascript"><CODE class="sourceCode javascript">applyDiscount <SPAN class="op">=</SPAN> percent <SPAN class="op">=&gt;</SPAN> price <SPAN class="op">=&gt;</SPAN> <SPAN class="va">Math</SPAN>.<SPAN class="at">round</SPAN>(price <SPAN class="op">*</SPAN> ((<SPAN class="dv">100</SPAN> <SPAN class="op">-</SPAN> percent) / <SPAN class="dv">100</SPAN>))</CODE></PRE><BR />
</DIV><BR />
Then we can create new functions based on a partial application of <CODE>applyDiscount</CODE> thus:<BR />
<DIV><BR />
<PRE class="sourceCode javascript"><CODE class="sourceCode javascript">tenPercentOff <SPAN class="op">=</SPAN> <SPAN class="at">applyDiscount</SPAN>(<SPAN class="dv">10</SPAN>)</CODE></PRE><BR />
</DIV><BR />
which will allow us to call it like this:<BR />
<DIV><BR />
<PRE class="sourceCode javascript"><CODE class="sourceCode javascript"><SPAN class="at">tenPercentOff</SPAN>(<SPAN class="dv">200</SPAN>)<BR />
<SPAN class="co">//&gt; 180</SPAN></CODE></PRE><BR />
</DIV><BR />
<A href="https://www.youtube.com/watch?v=72fkd4TBDtA&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h49m50s" target="_blank" rel="nofollow noopener noreferrer">00:49:50</A> At this stage we have our new, solid-state equivalent code, which looks like this:<BR />
<DIV><BR />
<PRE class="sourceCode javascript"><CODE class="sourceCode javascript">Products<BR />
.<SPAN class="at">filter</SPAN>(isDiscontinued)<BR />
.<SPAN class="at">map</SPAN>(x <SPAN class="op">=&gt;</SPAN> <SPAN class="op">{</SPAN><BR />
  <SPAN class="kw">let</SPAN> <SPAN class="op">{</SPAN> <SPAN class="dt">ProductName</SPAN><SPAN class="op">:</SPAN> Name<SPAN class="op">,</SPAN> UnitPrice <SPAN class="op">}</SPAN> <SPAN class="op">=</SPAN> x<BR />
  <SPAN class="cf">return</SPAN> <SPAN class="op">{</SPAN><BR />
    Name<SPAN class="op">,</SPAN><BR />
    <SPAN class="dt">SalePrice</SPAN><SPAN class="op">:</SPAN> <SPAN class="at">tenPercentOff</SPAN>(UnitPrice)<BR />
  <SPAN class="op">}</SPAN><BR />
<SPAN class="op">}</SPAN>)</CODE></PRE><BR />
</DIV><BR />
Doesn't that make you feel a lot more comfortable? No mutating of data, no moving parts (just implicit list machinery); solid-state code that just evaluates. Lovely!<BR />
<BR />
By the way - we also used some other ES6 facilities in this code, can you remember and name them? Put your thoughts in the comments below.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=72fkd4TBDtA&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h54m20s" target="_blank" rel="nofollow noopener noreferrer">00:54:20</A> Mentioning the concept of a <A href="https://en.wikipedia.org/wiki/Functor" target="_blank" rel="nofollow noopener noreferrer">Functor</A>, which is a lot less scary than the Wikipedia article might lead you to believe, and is a nice word to put on a tshirt <span class="lia-unicode-emoji" title=":slightly_smiling_face:">ð</span><BR />
<BR />
<A href="https://www.youtube.com/watch?v=72fkd4TBDtA&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h55m00s" target="_blank" rel="nofollow noopener noreferrer">00:55:00</A> Starting to look at the next section, specifically the "challenge" set in the <A href="https://twitter.com/kyleshevlin/status/1196278263401734145" target="_blank" rel="nofollow noopener noreferrer">tweet from Kyle Shevlin</A>.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=72fkd4TBDtA&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h56m40s" target="_blank" rel="nofollow noopener noreferrer">00:56:40</A> There is, in fact, a higher order function <CODE>find</CODE>, a sibling, so to speak, of <CODE>map</CODE>, <CODE>filter</CODE> and <CODE>reduce</CODE>, and it's quite effective and easy to read, but can of course have performance issues if the data set is large. Here's what we did with <CODE>find</CODE>, again on the Products data set, looking for the product record for 'Ikura':<BR />
<DIV><BR />
<PRE class="sourceCode javascript"><CODE class="sourceCode javascript"><SPAN class="va">Products</SPAN>.<SPAN class="at">find</SPAN>(x <SPAN class="op">=&gt;</SPAN> <SPAN class="va">x</SPAN>.<SPAN class="at">ProductName</SPAN> <SPAN class="op">===</SPAN> <SPAN class="st">'Ikura'</SPAN>)<BR />
<SPAN class="co">//&gt; {ProductID: 10, ProductName: "Ikura", SupplierID: 4, ... }</SPAN></CODE></PRE><BR />
</DIV><BR />
<A href="https://www.youtube.com/watch?v=72fkd4TBDtA&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h59m00s" target="_blank" rel="nofollow noopener noreferrer">00:59:00</A> Effectively, we want to reshape (a term I learned from APL) the Products data like this:<BR />
<PRE><CODE>[ ... ] -&gt; { ... }</CODE></PRE><BR />
In other words, from an array to an object. Given that <CODE>map</CODE> takes an array and produces an array (as does <CODE>filter</CODE>), we can't use it. But we <EM>can</EM> use <CODE>reduce</CODE>, which we can use to produce a result of any shape!<BR />
<BR />
<A href="https://www.youtube.com/watch?v=72fkd4TBDtA&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=01h01m00s" target="_blank" rel="nofollow noopener noreferrer">01:01:00</A> The <CODE>reduce</CODE> function is often used to reshape an array of data to a scalar, for example tranforming a list of numbers ...<BR />
<DIV><BR />
<PRE class="sourceCode javascript"><CODE class="sourceCode javascript">nums <SPAN class="op">=</SPAN> [<SPAN class="dv">1</SPAN><SPAN class="op">,</SPAN><SPAN class="dv">2</SPAN><SPAN class="op">,</SPAN><SPAN class="dv">3</SPAN>]</CODE></PRE><BR />
</DIV><BR />
... to what they all add up to:<BR />
<DIV><BR />
<PRE class="sourceCode javascript"><CODE class="sourceCode javascript"><SPAN class="va">nums</SPAN>.<SPAN class="at">reduce</SPAN>((a<SPAN class="op">,</SPAN> x) <SPAN class="op">=&gt;</SPAN> a <SPAN class="op">+</SPAN> x<SPAN class="op">,</SPAN> <SPAN class="dv">0</SPAN>)<BR />
<SPAN class="co">//&gt; 6</SPAN></CODE></PRE><BR />
</DIV><BR />
This is the equivalent of this "long hand" version:<BR />
<DIV><BR />
<PRE class="sourceCode javascript"><CODE class="sourceCode javascript"><SPAN class="va">nums</SPAN>.<SPAN class="at">reduce</SPAN>(<SPAN class="kw">function</SPAN>(accumulator<SPAN class="op">,</SPAN> item) <SPAN class="op">{</SPAN><BR />
  accumulator <SPAN class="op">=</SPAN> accumulator <SPAN class="op">+</SPAN> item<BR />
  <SPAN class="cf">return</SPAN> accumulator<BR />
<SPAN class="op">}</SPAN>)</CODE></PRE><BR />
</DIV><BR />
<A href="https://www.youtube.com/watch?v=72fkd4TBDtA&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=01h03m00s" target="_blank" rel="nofollow noopener noreferrer">01:03:00</A> Looking briefly at <A href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce" target="_blank" rel="nofollow noopener noreferrer">the documentation for <CODE>reduce</CODE></A>, on MDN, the Mozilla Developer Network and a great resource for JS docu.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=72fkd4TBDtA&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=01h12m20s" target="_blank" rel="nofollow noopener noreferrer">01:12:20</A> Now we're ready to produce an object from the Products array, keyed on the product name. We do it manually, directly, first of all, and this is what it looks like:<BR />
<DIV><BR />
<PRE class="sourceCode javascript"><CODE class="sourceCode javascript">Products<BR />
.<SPAN class="at">reduce</SPAN>((a<SPAN class="op">,</SPAN> x) <SPAN class="op">=&gt;</SPAN> <SPAN class="op">{</SPAN> a[<SPAN class="va">x</SPAN>.<SPAN class="at">ProductName</SPAN>] <SPAN class="op">=</SPAN> x<SPAN class="op">;</SPAN> <SPAN class="cf">return</SPAN> a <SPAN class="op">},</SPAN> <SPAN class="op">{}</SPAN>)<BR />
<SPAN class="co">//&gt; { Chai: {...}, Chang: {...}, ... }</SPAN></CODE></PRE><BR />
</DIV><BR />
The key thing to note here is that the starting value is an empty object, which puts us on the right path for our desired transformation:<BR />
<PRE><CODE>[ ... ] -&gt; { ... }</CODE></PRE><BR />
<A href="https://www.youtube.com/watch?v=72fkd4TBDtA&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=01h15m20s" target="_blank" rel="nofollow noopener noreferrer">01:15:20</A> Now we think about adding this functionality to the Array object itself, to make it available on all arrays. To discover how to add a function to the Array prototype, we explore first, with a silly example:<BR />
<DIV><BR />
<PRE class="sourceCode javascript"><CODE class="sourceCode javascript"><SPAN class="va">Array</SPAN>.<SPAN class="va">prototype</SPAN>.<SPAN class="at">someRandomThing</SPAN> <SPAN class="op">=</SPAN> <SPAN class="kw">function</SPAN>(n) <SPAN class="op">{</SPAN> <SPAN class="cf">return</SPAN> <SPAN class="kw">this</SPAN>.<SPAN class="at">length</SPAN> <SPAN class="op">*</SPAN> n <SPAN class="op">}</SPAN><BR />
[<SPAN class="dv">1</SPAN><SPAN class="op">,</SPAN><SPAN class="dv">2</SPAN><SPAN class="op">,</SPAN><SPAN class="dv">3</SPAN><SPAN class="op">,</SPAN><SPAN class="dv">4</SPAN>].<SPAN class="at">someRandomThing</SPAN>(<SPAN class="dv">5</SPAN>)<BR />
<SPAN class="co">//&gt; 20</SPAN></CODE></PRE><BR />
</DIV><BR />
Note that we use the <CODE>function() { ... }</CODE> approach because we need to refer to <CODE>this</CODE> (to get to the actual array instance) which is not available in fat-arrow based function definitions.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=72fkd4TBDtA&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=01h18m00s" target="_blank" rel="nofollow noopener noreferrer">01:18:00</A> Now we're ready. This is what we end up with:<BR />
<DIV><BR />
<PRE class="sourceCode javascript"><CODE class="sourceCode javascript"><SPAN class="va">Array</SPAN>.<SPAN class="va">prototype</SPAN>.<SPAN class="at">makeObjectOn</SPAN> <SPAN class="op">=</SPAN> <SPAN class="kw">function</SPAN>(prop) <SPAN class="op">{</SPAN><BR />
  <SPAN class="cf">return</SPAN> <SPAN class="kw">this</SPAN>.<SPAN class="at">reduce</SPAN>((a<SPAN class="op">,</SPAN> x<SPAN class="op">,</SPAN> i) <SPAN class="op">=&gt;</SPAN> <SPAN class="op">{</SPAN> a[x[prop] <SPAN class="op">||</SPAN> i] <SPAN class="op">=</SPAN> x<SPAN class="op">;</SPAN> <SPAN class="cf">return</SPAN> a <SPAN class="op">},</SPAN> <SPAN class="op">{}</SPAN>)<BR />
<SPAN class="op">}</SPAN></CODE></PRE><BR />
</DIV><BR />
Note that we're using the third parameter <CODE>i</CODE> that's passed to the callback function, to use a fallback index parameter if the one supplied doesn't exist.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=72fkd4TBDtA&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=01h28m00s" target="_blank" rel="nofollow noopener noreferrer">01:28:00</A> As a final flourish, we add a really nice affectation which allows us to do away with multiple statements inside the inner function - this was introduced to me by <SPAN class="mention-scrubbed">chris.whealy</SPAN> a while ago, and allows us to write functions with single expressions only:<BR />
<DIV><BR />
<PRE class="sourceCode javascript"><CODE class="sourceCode javascript"><SPAN class="va">Array</SPAN>.<SPAN class="va">prototype</SPAN>.<SPAN class="at">makeObjectOn</SPAN> <SPAN class="op">=</SPAN> <SPAN class="kw">function</SPAN>(prop) <SPAN class="op">{</SPAN><BR />
  <SPAN class="cf">return</SPAN> <SPAN class="kw">this</SPAN>.<SPAN class="at">reduce</SPAN>((a<SPAN class="op">,</SPAN> x<SPAN class="op">,</SPAN> i) <SPAN class="op">=&gt;</SPAN> (_ <SPAN class="op">=&gt;</SPAN> a)(a[x[prop] <SPAN class="op">||</SPAN> i] <SPAN class="op">=</SPAN> x<SPAN class="op">,</SPAN> <SPAN class="op">{}</SPAN>)<BR />
<SPAN class="op">}</SPAN></CODE></PRE><BR />
</DIV><BR />
Take a few minutes to stare at this for a bit, especially the construction <CODE>(_ =&gt; a)(...)</CODE>, which is an immediately invoked function expression (IIFE). You may grow to love it <span class="lia-unicode-emoji" title=":slightly_smiling_face:">ð</span>
---
Annotated links: Episode 42 of Hands-on SAP dev with qmacro
technology-blog-sap
2019-11-25
https://community.sap.com/t5/technology-blogs-by-sap/annotated-links-episode-42-of-hands-on-sap-dev-with-qmacro/ba-p/13456130
2019-11-25-annotated-links-episode-42-of-hands-on-sap-dev-with-qmacro
<EM>This is a searchable description of the content of a live stream recording, specifically <STRONG>"Ep.42 - Impromptu stream on GitHub CAP Community work"</STRONG> in the "<A href="https://bit.ly/handsonsapdev" target="_blank" rel="nofollow noopener noreferrer">Hands-on SAP dev with qmacro</A>" series. There are links directly to specific highlights in the video recording. For links to annotations of other episodes, please see the "<A href="https://bit.ly/handsonsapdev#replays" target="_blank" rel="nofollow noopener noreferrer">Catch the replays</A>" section of the series blog post.</EM><BR />
<BR />
This episode was streamed live on Fri 01 Nov 2019 and is approximately 60 minutes in length. The stream recording is <A href="https://www.youtube.com/watch?v=jizaiV6EwzM&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;index=43" target="_blank" rel="nofollow noopener noreferrer">available on YouTube</A>.<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2019/11/Screenshot-2019-11-25-at-14.17.45.png" /><BR />
<BR />
Brief synopsis: After being unable to stream well enough since the Catalina upgrade I took the opportunity to investigate Lightstream, a Chrome extension for streaming. In this impromptu, unplanned stream I work through an issue assigned to me on the CAP Community repository.<BR />
<BR />
<SPAN style="font-size: 1rem">Note: Although the details can still be seen OK, this particular recording has some encoding and compression artifacts that were a result of me running my display at too high a resolution for the stream resolution target. I've fixed this now, and in fact reduced the artifact issue half way through this particular session too.</SPAN><BR />
<BR />
<A href="https://www.youtube.com/watch?v=jizaiV6EwzM&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h01m30s" target="_blank" rel="nofollow noopener noreferrer">00:01:30</A> Start to look at the work that is assigned to me on the <A href="https://bit.ly/cap-com" target="_blank" rel="nofollow noopener noreferrer">CAP Community GitHub repo</A>, which was issue #11 "<A href="https://github.com/sapmentors/cap-community/issues/11" target="_blank" rel="nofollow noopener noreferrer">Add 'calculated fields' example to /examples please</A>".<BR />
<BR />
<A href="https://www.youtube.com/watch?v=jizaiV6EwzM&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h03m00s" target="_blank" rel="nofollow noopener noreferrer">00:03:00</A> Looking at the <A href="https://chrome.google.com/webstore/detail/tiling-window-manager-for/aikaaejchodabfpkipfonnekofgepakh" target="_blank" rel="nofollow noopener noreferrer">Tiling Window Manager for Chrome OS</A>, and mentioning my modification of it that gives me the ability to increase and decrease the window gaps dynamically via keyboard shortcuts (I <A href="https://www.youtube.com/watch?v=KjeXVK7wVO4" target="_blank" rel="nofollow noopener noreferrer">recorded a brief demo of this</A>) - give me a shout if you're interested in learning more about this.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=jizaiV6EwzM&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h05m30s" target="_blank" rel="nofollow noopener noreferrer">00:05:30</A> Explaining the background to this Calculated Fields issue, by referring to a blog post I wrote as an extended reply to a <A href="https://answers.sap.com/questions/12845830/counting-associated-entities-using-cds.html" target="_blank" rel="noopener noreferrer">question</A> from <SPAN class="mention-scrubbed">pdominique-bio</SPAN>. The post is this one: "<A href="https://blogs.sap.com/2019/08/21/computed-field-example-in-cap/" target="_blank" rel="noopener noreferrer">Computed field example in CAP</A>" and describes one way of using computed properties.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=jizaiV6EwzM&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h10m00s" target="_blank" rel="nofollow noopener noreferrer">00:10:00</A> I've already forked the <A href="https://bit.ly/cap-com" target="_blank" rel="nofollow noopener noreferrer">CAP Community</A> repo and the first thing I do is to clone this fork. In this session you'll see how I keep a fork of a repo up to date.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=jizaiV6EwzM&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h12m15s" target="_blank" rel="nofollow noopener noreferrer">00:12:15</A> In order to keep the fork up to date, I need to reference the upstream source repo. The upstream repo is the original repo at <A class="uri" href="https://github.com/sapmentors/cap-community" target="_blank" rel="nofollow noopener noreferrer">https://github.com/sapmentors/cap-community</A> and my fork is at <A class="uri" href="https://github.com/qmacro/cap-community" target="_blank" rel="nofollow noopener noreferrer">https://github.com/qmacro/cap-community</A>.<BR />
<BR />
Right now, there's no reference in my clone to the upstream repo, as I can see with this command, which shows all the remote sources:<BR />
<DIV><BR />
<PRE class="sourceCode bash"><CODE class="sourceCode bash"><SPAN class="ex">-</SPAN><SPAN class="op">&gt;</SPAN> git remote -v<BR />
<SPAN class="ex">origin</SPAN>  git@github.com:qmacro/cap-community.git (fetch)<BR />
<SPAN class="ex">origin</SPAN>  git@github.com:qmacro/cap-community.git (push)</CODE></PRE><BR />
</DIV><BR />
Only the "origin" is shown, which is my fork that is the source of this clone on my local machine.<BR />
<BR />
To refer to the upstream repo, I add a remote, and call it "upstream", by convention:<BR />
<DIV><BR />
<PRE class="sourceCode bash"><CODE class="sourceCode bash"><SPAN class="ex">-</SPAN><SPAN class="op">&gt;</SPAN> git remote add upstream git@github.com:sapmentors/cap-community.git</CODE></PRE><BR />
</DIV><BR />
Now when I check again to see the remotes that are defined, I see both the origin and the upstream:<BR />
<DIV><BR />
<PRE class="sourceCode bash"><CODE class="sourceCode bash"><SPAN class="ex">-</SPAN><SPAN class="op">&gt;</SPAN> git remote -v<BR />
<SPAN class="ex">origin</SPAN>  git@github.com:qmacro/cap-community.git (fetch)<BR />
<SPAN class="ex">origin</SPAN>  git@github.com:qmacro/cap-community.git (push)<BR />
<SPAN class="ex">upstream</SPAN>        git@github.com:sapmentors/cap-community.git (fetch)<BR />
<SPAN class="ex">upstream</SPAN>        git@github.com:sapmentors/cap-community.git (push)</CODE></PRE><BR />
</DIV><BR />
<A href="https://www.youtube.com/watch?v=jizaiV6EwzM&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h13m35s" target="_blank" rel="nofollow noopener noreferrer">00:13:35</A> At this stage, we see that my fork is behind the source (upstream) by a number of commits, so we have to bring the fork up to date and apply the upstream commits to it.<BR />
<BR />
This is what we do now, and the commands used are shown here, along with sample output.<BR />
<BR />
First we fetch the commits from upstream:<BR />
<DIV><BR />
<PRE class="sourceCode bash"><CODE class="sourceCode bash"><SPAN class="ex">-</SPAN><SPAN class="op">&gt;</SPAN> git fetch upstream<BR />
<SPAN class="ex">remote</SPAN>: Enumerating objects: 2, done.<BR />
<SPAN class="ex">remote</SPAN>: Counting objects: 100% (2/2), <SPAN class="kw">done</SPAN><SPAN class="ex">.</SPAN><BR />
<SPAN class="ex">Unpacking</SPAN> objects: 100% (5/5), <SPAN class="kw">done</SPAN><SPAN class="ex">.</SPAN><BR />
<SPAN class="ex">remote</SPAN>: Total 5 (delta 2), <SPAN class="ex">reused</SPAN> 2 (delta 2), <SPAN class="ex">pack-reused</SPAN> 3<BR />
<SPAN class="ex">From</SPAN> github.com:sapmentors/cap-community<BR />
 <SPAN class="ex">*</SPAN> [new branch]      master     -<SPAN class="op">&gt;</SPAN> upstream/master</CODE></PRE><BR />
</DIV><BR />
Next, we make sure we're on the "master" branch locally:<BR />
<DIV><BR />
<PRE class="sourceCode bash"><CODE class="sourceCode bash"><SPAN class="ex">-</SPAN><SPAN class="op">&gt;</SPAN> git checkout master<BR />
<SPAN class="ex">Already</SPAN> on <SPAN class="st">'master'</SPAN><BR />
<SPAN class="ex">Your</SPAN> branch is up-to-date with <SPAN class="st">'origin/master'</SPAN>.</CODE></PRE><BR />
</DIV><BR />
There's actually only the "master" branch right now anyway, as we can see:<BR />
<DIV><BR />
<PRE class="sourceCode bash"><CODE class="sourceCode bash"><SPAN class="ex">-</SPAN><SPAN class="op">&gt;</SPAN> git branch<BR />
<SPAN class="ex">*</SPAN> master</CODE></PRE><BR />
</DIV><BR />
Now we can merge the commits into the "master" branch of this clone of the fork:<BR />
<DIV><BR />
<PRE class="sourceCode bash"><CODE class="sourceCode bash"><SPAN class="ex">-</SPAN><SPAN class="op">&gt;</SPAN> git merge upstream/master<BR />
<SPAN class="ex">Updating</SPAN> 994fa05..81236e9<BR />
<SPAN class="ex">Fast-forward</SPAN><BR />
 <SPAN class="ex">README.md</SPAN> <SPAN class="kw">|</SPAN> <SPAN class="ex">3</SPAN> ++-<BR />
 [<SPAN class="ex">...</SPAN> other changes shown too ]<BR />
 <SPAN class="ex">.</SPAN><BR />
 <SPAN class="ex">.</SPAN><BR />
 <SPAN class="ex">.</SPAN></CODE></PRE><BR />
</DIV><BR />
Finally, we can push those changes to the origin, i.e. the fork that this local clone is from:<BR />
<DIV><BR />
<PRE class="sourceCode bash"><CODE class="sourceCode bash"><SPAN class="ex">-</SPAN><SPAN class="op">&gt;</SPAN> git push origin master<BR />
<SPAN class="ex">Total</SPAN> 0 (delta 0), <SPAN class="ex">reused</SPAN> 0 (delta 0)<BR />
<SPAN class="ex">To</SPAN> github.com:qmacro/cap-community.git<BR />
   <SPAN class="ex">994fa05..81236e9</SPAN>  master -<SPAN class="op">&gt;</SPAN> master</CODE></PRE><BR />
</DIV><BR />
Now our fork is up to date with the original source!<BR />
<BR />
<A href="https://www.youtube.com/watch?v=jizaiV6EwzM&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h17m10s" target="_blank" rel="nofollow noopener noreferrer">00:17:10</A> Creating the new directory for the example, with:<BR />
<DIV><BR />
<PRE class="sourceCode bash"><CODE class="sourceCode bash"><SPAN class="ex">-</SPAN><SPAN class="op">&gt;</SPAN> cds init --modules db,srv computed-field</CODE></PRE><BR />
</DIV><BR />
Subsequent exploration of what has been created shows us a nice fresh CAP Node.js project to start with.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=jizaiV6EwzM&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h18m45s" target="_blank" rel="nofollow noopener noreferrer">00:18:45</A> At this stage we start to refer to the <A href="https://blogs.sap.com/2019/08/21/computed-field-example-in-cap/" target="_blank" rel="noopener noreferrer">original blog post</A> and fill out the example code based upon the samples in that post, starting with the <CODE>data-model.cds</CODE> contents, following on with the <CODE>cat-service.cds</CODE> contents, which is where the computed field comes in.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=jizaiV6EwzM&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h23m10s" target="_blank" rel="nofollow noopener noreferrer">00:23:10</A> We check what the computed field definition has given us in at the service definition layer with <CODE>cds compile srv/cat-service.cds --to sql</CODE> and note that the <CODE>numberOfBooks</CODE> property really only exists at the service definition layer and not at the data model layer.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=jizaiV6EwzM&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h24m05s" target="_blank" rel="nofollow noopener noreferrer">00:24:05</A> Renaming the <CODE>.cds</CODE> files and references to match what's in the blog post.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=jizaiV6EwzM&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h24m40s" target="_blank" rel="nofollow noopener noreferrer">00:24:40</A> Compiling to EDMX, with <CODE>cds compile srv/service.cds --to edmx</CODE>, we can see that the <CODE>numberOfBooks</CODE> property has been automatically annotated as a <CODE>Core.Computed</CODE> property:<BR />
<DIV><BR />
<PRE class="sourceCode xml"><CODE class="sourceCode xml">      <SPAN class="kw">&lt;Annotations</SPAN><SPAN class="ot"> Target=</SPAN><SPAN class="st">"CatalogService.Authors/numberOfBooks"</SPAN><SPAN class="kw">&gt;</SPAN><BR />
        <SPAN class="kw">&lt;Annotation</SPAN><SPAN class="ot"> Term=</SPAN><SPAN class="st">"Core.Computed"</SPAN><SPAN class="ot"> Bool=</SPAN><SPAN class="st">"true"</SPAN><SPAN class="kw">/&gt;</SPAN><BR />
      <SPAN class="kw">&lt;/Annotations&gt;</SPAN></CODE></PRE><BR />
</DIV><BR />
Nice!<BR />
<BR />
<A href="https://www.youtube.com/watch?v=jizaiV6EwzM&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h25m10s" target="_blank" rel="nofollow noopener noreferrer">00:25:10</A> Starting to look at the service definition layer implementation, in the form of an event, by creating <CODE>service.js</CODE> alongside the <CODE>service.cds</CODE> file - the former will be taken automatically as an "implementation" for the latter.<BR />
<BR />
Note: Please refer to the <A href="https://blogs.sap.com/2019/08/21/computed-field-example-in-cap/" target="_blank" rel="noopener noreferrer">blog post</A> for details and discussion of the <CODE>service.js</CODE> implementation.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=jizaiV6EwzM&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h35m40s" target="_blank" rel="nofollow noopener noreferrer">00:35:40</A> Noting that <CODE>localhost</CODE> on the Crostini-hosted Linux VM is available to the parent host (Chrome OS) via a special hostname <CODE>&lt;containername&gt;.linux.test</CODE>, in my case, with the default Linux VM name, it's <A class="uri" href="http://penguin.linux.test" target="_blank" rel="nofollow noopener noreferrer">http://penguin.linux.test</A>.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=jizaiV6EwzM&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h37m55s" target="_blank" rel="nofollow noopener noreferrer">00:37:55</A> Looking briefly at the device I'm working on, which is the <A href="https://www.asus.com/uk/Mini-PCs/ASUS-Chromebox-3/" target="_blank" rel="nofollow noopener noreferrer">Asus Chromebox 3</A> running the excellent ChromeOS of course.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=jizaiV6EwzM&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h38m20s" target="_blank" rel="nofollow noopener noreferrer">00:38:20</A> Getting together some sample data for the example, in the form of CSV files. Luckily I remember there is some CSV data that we can use in one of the <A href="https://developers.sap.com/tutorials/cap-cloudsdk-3-basic-service.html" target="_blank" rel="noopener noreferrer">tutorials</A> from the <A href="https://developers.sap.com/mission.cap-s4hana-cloud-extension.html" target="_blank" rel="noopener noreferrer">SAP TechEd 2019 mission on CAP, Cloud SDK and S/4HANA extensions</A>.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=jizaiV6EwzM&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h41m15s" target="_blank" rel="nofollow noopener noreferrer">00:41:15</A> After adding the data, we run a <CODE>cds deploy</CODE> and restart the service, which now gives us some books and authors data. Lovely. And a quick test shows us that the computed field is indeed appearing and is filled with the correct data. Also lovely!<BR />
<BR />
<A href="https://www.youtube.com/watch?v=jizaiV6EwzM&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h44m15s" target="_blank" rel="nofollow noopener noreferrer">00:44:15</A> At this stage it's just time to add some helpful information to this example, in the form of a <A href="https://github.com/sapmentors/cap-community/blob/master/examples/computed-field/README.md" target="_blank" rel="nofollow noopener noreferrer">README</A> which explains what the example is and how to try it out.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=jizaiV6EwzM&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h49m05s" target="_blank" rel="nofollow noopener noreferrer">00:49:05</A> Arranging the example directory contents so that it's ready to be pushed, and run by others. We test this briefly by blasting away the <CODE>node_modules/</CODE> directory, and starting again, with:<BR />
<DIV><BR />
<PRE class="sourceCode bash"><CODE class="sourceCode bash"><SPAN class="ex">-</SPAN><SPAN class="op">&gt;</SPAN> npm i <SPAN class="kw">&amp;&amp;</SPAN> <SPAN class="ex">cds</SPAN> run --in-memory</CODE></PRE><BR />
</DIV><BR />
All seems to work as expected (including a slight digression installing <CODE>jq</CODE> on this VM to format the JSON output nicely!).<BR />
<BR />
<A href="https://www.youtube.com/watch?v=jizaiV6EwzM&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h55m55s" target="_blank" rel="nofollow noopener noreferrer">00:55:55</A> So we add the README to a commit and push the changes too (also removing the <CODE>.vscode/</CODE> directory that we don't really want in this context). This push is of course to the origin, i.e. my fork of the main CAP Community repo, and we're then advised by GitHub, appropriately, that "This branch is 1 commit ahead of sapmentors master".<BR />
<BR />
<A href="https://www.youtube.com/watch?v=jizaiV6EwzM&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h57m48s" target="_blank" rel="nofollow noopener noreferrer">00:57:48</A> So we create a Pull Request (PR) which GitHub allows us to do, specifically for requesting a pull of these changes in my fork to the upstream source repository, adding <SPAN class="mention-scrubbed">vobu</SPAN> as a reviewer.<BR />
<BR />
All done!
---
Help us to help you - good questions beget good answers
welcome-cornerblog-board
2019-11-25
https://community.sap.com/t5/welcome-corner-blog-posts/help-us-to-help-you-good-questions-beget-good-answers/ba-p/13455380
2019-11-25-help-us-to-help-you-good-questions-beget-good-answers
<EM>Composing good questions is important and will help your fellow community members answer them more easily. This post suggests some key aspects of a good question, and also gives some tips on how to respond.</EM><BR />
<BR />
<EM>This post is available via the shortlink: <A href="https://bit.ly/help-us-to-help-you" target="_blank" rel="nofollow noopener noreferrer">bit.ly/help-us-to-help-you</A>.</EM><BR />
<BR />
The concept of Q&amp;A in online communities goes back as far as I can remember, way before the days of the Web, even before the days of the Internet. And what's held true all this time is that the availability, quality and usefulness of the answers relates directly to the quality of the questions. Ask a question well, and you're more likely to get engagement from fellow community members and they're more likely to try to, and be able to, help you.<BR />
<BR />
Almost 6 years ago I wrote a post "<A href="https://blogs.sap.com/2014/01/09/help-us-to-help-you-share-your-code/#" target="_blank" rel="noopener noreferrer">Help&nbsp; us to help you - Share Your Code</A>" which is still relevant today, but I thought this new post might be more appropriate with new information that will hopefully help us all build a corpus of Q&amp;A content that is easy to add to and useful to refer to. Then and now I'm primarily referring to questions related to development topics, but the sentiments are relevant beyond that too.<BR />
<BR />
<STRONG>Asking questions</STRONG><BR />
<BR />
Here's what a good question looks like:<BR />
<UL><BR />
 	<LI>It describes the context clearly, both via an initial sentence or two and via appropriate tags</LI><BR />
 	<LI>Relevant code is shown in-line in the question, appropriately formatted, so that the reader can see the code directly in the same flow as trying to understand what is being asked (all unnecessary code and comments have been removed to make the code shown as small as possible)</LI><BR />
 	<LI>The question has a link to a complete reproducible minimal scenario that has been put together specifically to demonstrate the problem, and this scenario is easily cloneable and runnable by the reader (see the "<A href="https://blogs.sap.com/2014/01/09/help-us-to-help-you-share-your-code/#" target="_blank" rel="noopener noreferrer">Help&nbsp; us to help you - Share Your Code</A>" post for more information on using e.g. JSBin, GitHub / Gists or other mechanisms*)</LI><BR />
 	<LI>If a diagram or screenshot would help with explaining the scenario, that would be provided too, also in-line</LI><BR />
 	<LI>You've described what you've tried so far, and what the results of those efforts have been</LI><BR />
 	<LI>Any additional detail you've been subsequently asked to provide has been edited into the original question</LI><BR />
</UL><BR />
(*In the case of CAP related questions, you can consider using the issues section of the CAP Community GitHub repo at <A href="https://bit.ly/cap-com" target="_blank" rel="nofollow noopener noreferrer">bit.ly/cap-com</A>)<BR />
<BR />
While I've described some "Do"s, I'll list some "Don't"s which should be obvious but are probably worth listing enumerating here:<BR />
<UL><BR />
 	<LI>Don't provide code that is not properly formatted - it just makes it hard for the reader to comprehend; use the code formatting features appropriately</LI><BR />
 	<LI>Don't provide code as attachments to the question - that's even worse than providing unformatted code as it places the onus on the reader to take pains to download the attachments, load them into an editor, work out what's what, and then continue reading</LI><BR />
 	<LI>Don't add further information anywhere else (except for the cloneable and runnable scenario) - if you need to add more information, do it in the original question by editing it</LI><BR />
 	<LI>Unless you are directly answering your own question, don't use any of the "Answer" sections - if you are responding to a comment, either do it with a further comment or (if appropriate) update your question content</LI><BR />
</UL><BR />
<STRONG>Responding to questions</STRONG><BR />
<BR />
There's an art to responding to questions too, here are some thoughts on that (note that I wrote "responding to questions", as there's more to it than just "answering"):<BR />
<UL><BR />
 	<LI>If you need the person asking the question (often referred to as the "Original Poster" or "OP") to clarify something or otherwise improve or provide more detail to the question, use a Comment to ask them to do so (i.e. don't use an Answer)</LI><BR />
 	<LI>In general, use Comments to correspond with the OP and other participants, *unless* you're answering the question (in which case of course use an Answer)</LI><BR />
 	<LI>If you need to show code in your answer, follow the same guidelines as for asking questions - make sure it's formatted appropriately, and either in-line in the answer (that's the ideal scenario, not the whole solution, just the relevant parts) or linked to elsewhere</LI><BR />
</UL><BR />
<STRONG>Upvoting and downvoting</STRONG><BR />
<BR />
There's a reason we have upvoting and downvoting buttons. If you think a question or answer is a good one, then upvote it with the up-arrow. It will help the author of the upvoted item understand that they provided something of value. If you feel you should downvote a question or an answer, do so but always provide a reason, as a comment, as to why you downvoted it.<BR />
<BR />
If you're the OP and someone's provided an answer to your question that's appropriate, ensure you mark it as such.<BR />
<BR />
<STRONG>Summary</STRONG><BR />
<BR />
Hopefully the advice in this post is useful. Some of it is practical, some of it is related to etiquette. I'll leave it up to you to work out which bits are what. It's not polite to ask a question "lazily", by not stating the problem clearly, not showing what efforts you've made to solve it, and by not making it as easy as possible for your fellow community members to help out.<BR />
<BR />
Help us to help you, and let's do our best to build a valuable database of knowledge through the next decade.<BR />
<BR />
For a more in-depth set of guidelines, see "<A href="https://codeblog.jonskeet.uk/2010/08/29/writing-the-perfect-question/" target="_blank" rel="nofollow noopener noreferrer">Writing the perfect question</A>" (thanks <SPAN class="mention-scrubbed">frehu</SPAN> for the pointer).<BR />
<BR />
<STRONG>Examples</STRONG><BR />
<BR />
As and when I come across what I think are nice examples of good questions, I'll post links to them here.<BR />
<UL><BR />
 	<LI><A href="https://answers.sap.com/questions/12951244/cap-custom-logic-not-receiving-query-parameters.html" target="_blank" rel="noopener noreferrer">CAP: Custom logic not receiving query parameters</A> from&nbsp;<SPAN class="mention-scrubbed">krishnakishor.kammaje2</SPAN></LI><BR />
</UL><BR />
&nbsp;<BR />
<BR />
&nbsp;<BR />
<BR />
<STRONG>Updates</STRONG><BR />
<BR />
<EM>2020-01-15 Added Examples section</EM>
---
Mission "Use CAP and SAP Cloud SDK to Extend S/4HANA" - an overview
technology-blog-sap
2019-11-08
https://community.sap.com/t5/technology-blogs-by-sap/mission-quot-use-cap-and-sap-cloud-sdk-to-extend-s-4hana-quot-an-overview/ba-p/13435998
2019-11-08-mission-quot-use-cap-and-sap-cloud-sdk-to-extend-s-4hana-quot-an-overview
<EM>This post serves to outline what you can build in the "Use CAP and SAP Cloud SDK to Extend S/4HANA" mission created for SAP TechEd 2019.</EM><BR />
<BR />
<STRONG>Update Feb 2021: This mission has now been retired as the details relating to the products and topics at hand have moved on; features have changed and improved over the last year and a half.&nbsp;</STRONG><BR />
<BR />
There are <A href="https://developers.sap.com/app-space.html" target="_blank" rel="noopener noreferrer">four missions</A> that have been put together specifically for SAP TechEd 2019, covering Cloud Platform Portal, Cloud Platform ABAP Environment, HANA Advanced Analytics, and (my favourite) S/4HANA Extensions with CAP.<BR />
<BR />
<STRONG>Overview</STRONG><BR />
<BR />
The S/4HANA Extensions with CAP mission consists of six tutorials, with some checkpoints in between.<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2019/11/Screenshot-2019-11-08-at-10.44.18.png" /><BR />
<BR />
These six tutorials take you on a journey, covering API Business Hub APIs, the Cloud SDK, CAP (the Cloud Application Programming Model), some application logic in JavaScript, and Fiori elements powered by annotations.<BR />
<BR />
Even after TechEd, the mission is available to you, and you can jump in right now here:<BR />
<BR />
Mission: <A href="https://developers.sap.com/mission.cap-s4hana-cloud-extension.html" target="_blank" rel="noopener noreferrer">Use CAP and SAP Cloud SDK to Extend S/4HANA</A><BR />
<BR />
<STRONG>Detail</STRONG><BR />
<BR />
To give you a bit of a heads-up, here are the titles of those tutorials:<BR />
<OL><BR />
 	<LI><A href="https://developers.sap.com/tutorials/cap-cloudsdk-1-mock-service.html" target="_blank" rel="noopener noreferrer">Set Up a Basic Mock S/4HANA Service</A></LI><BR />
 	<LI><A href="https://developers.sap.com/tutorials/cap-cloudsdk-2-v2-adapter.html" target="_blank" rel="noopener noreferrer">Install an OData V2 Adapter</A></LI><BR />
 	<LI><A href="https://developers.sap.com/tutorials/cap-cloudsdk-3-basic-service.html" target="_blank" rel="noopener noreferrer">Create a Basic CAP-Based Service</A></LI><BR />
 	<LI><A href="https://developers.sap.com/tutorials/cap-cloudsdk-4-enhance-consume.html" target="_blank" rel="noopener noreferrer">Enhance CAP-Based Service to Refer to Remote Addresses</A></LI><BR />
 	<LI><A href="https://developers.sap.com/tutorials/cap-cloudsdk-5-srv-logic.html" target="_blank" rel="noopener noreferrer">Add Service Logic to Consume Remote Address Data</A></LI><BR />
 	<LI><A href="https://developers.sap.com/tutorials/cap-cloudsdk-6-fiori-frontend.html" target="_blank" rel="noopener noreferrer">Create a Frontend with SAP Fiori Elements and Annotations</A></LI><BR />
</OL><BR />
In essence, you use CAP to mock an S/4HANA API, which produces a nice OData v4 service, stick an OData v2 adapter proxy in front of it, try it out manually with the SAP Cloud SDK in the Node.js REPL, then go and build another OData service with CAP that has its own entities but also reaches out to consume the first service (the mocked S/4HANA API) too, using the SAP Cloud SDK in some custom service implementation logic. Finally you add some annotations to drive a simple Fiori elements based app.<BR />
<BR />
To provide you with a map of sorts, for your journey, here's a diagram showing the essential parts of what you'll be building, and how they relate to each other.<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2019/11/Screenshot-2019-11-08-at-10.46.17.png" /><BR />
<BR />
<STRONG>Tutorials 1 and 2</STRONG> concern themselves with the green components (in the middle), <STRONG>tutorials 3, 4 and 5</STRONG> concern themselves with the blue components (on the left hand side), and <STRONG>tutorial 6</STRONG> is where you drive the Fiori elements app shown at the bottom.<BR />
<BR />
If you are attending SAP TechEd in Bangalore next week, come on down to the Developer Garage where you can follow this journey yourself on workstations set up for you all to complete the missions.<BR />
<BR />
If you can't make it to SAP TechEd this year, no problem - you can complete this mission at home too!<BR />
<BR />
Good luck, and don't forget to pack a flask of decent coffee before you set off on your journey!
---
CAP is important because it's not important
technology-blog-sap
2019-11-06
https://community.sap.com/t5/technology-blogs-by-sap/cap-is-important-because-it-s-not-important/ba-p/13431580
2019-11-06-cap-is-important-because-it-s-not-important
<EM>In this post, I consider what CAP really is, what it gives us, and why we should consider it a fundamental piece of the puzzle in the cloud context and beyond.</EM><BR />
<BR />
â Update (08 Nov): This blog post is available in audio format as an <A href="https://anchor.fm/tech-aloud/episodes/CAP-is-important-because-its-not-important---6-Nov-2019---DJ-Adams-e8rg7s" target="_blank" rel="nofollow noopener noreferrer">episode</A> on the <A href="https://qmacro.org/2019/09/17/new-podcast-tech-aloud/" target="_blank" rel="nofollow noopener noreferrer">Tech Aloud podcast</A>. Also, I recorded a CodeTalk episode on this subject with <SPAN class="mention-scrubbed">ian.thain</SPAN> - watch it here: <A href="https://www.youtube.com/watch?v=5ffTjFdjs8M" target="_blank" rel="nofollow noopener noreferrer">https://www.youtube.com/watch?v=5ffTjFdjs8M</A>.<BR />
<BR />
If you read one technical article today*, make it the <A href="https://cap.cloud.sap/docs/about/" target="_blank" rel="nofollow noopener noreferrer">About CAP</A> page in the online documentation, which starts with the following overview:<BR />
<BLOCKQUOTE><BR />
<P style="text-align: left">The âSAP Cloud Application Programming Modelâ is an open and opinionated, framework of languages, libraries, and tools for building enterprise-grade services and applications. It guides developers through proven best practices and a great wealth of out-of-the-box solutions to recurring tasks.</P><BR />
</BLOCKQUOTE><BR />
Key for me here is that the design principles that are at CAP's core (open and opinionated, zero lock-in, non-intrusive and platform agnostic) and that have influenced what CAP is and what it can do for us, explain why it is fundamental.<BR />
<BR />
*(If you don't have time to read it, it's also available as a podcast episode in the <A href="https://qmacro.org/2019/09/17/new-podcast-tech-aloud/" target="_blank" rel="nofollow noopener noreferrer">Tech Aloud podcast</A> here: <A href="https://anchor.fm/tech-aloud/episodes/SAP-Cloud-Application-Programming-Model-About-CAP---SAP---September-2019-e5f76p" target="_blank" rel="nofollow noopener noreferrer">SAP Cloud Application Programming Model (About CAP) - SAP - September 2019</A>.)<BR />
<BR />
<STRONG>What CAP is for me</STRONG><BR />
<BR />
CAP provides the <STRONG>substrate</STRONG> within or upon which actual services and applications can be designed and built, cloud-ready.<BR />
<BR />
It is the fresh, fertile and well-watered <STRONG>soil </STRONG>in which we can grow our flowers and food.<BR />
<BR />
It is the&nbsp;<STRONG>backbone</STRONG> which is the stable base that connects everything together, the <STRONG>trunk</STRONG> from which all branches can flourish.<BR />
<BR />
To bring these metaphors a little closer to the subject at hand, CAP is like the combination of <A href="https://en.wikipedia.org/wiki/Mores" target="_blank" rel="nofollow noopener noreferrer">mores</A> and spoken languages upon which society is built ... or, in a narrower computing context, it's the programming language that we use to express our solutions.<BR />
<BR />
What this suggests to me is that if we see CAP in this way, we should master enough of it to express ourselves, to start building services, to plant seeds and nurture them into blossom, to build upon and build with.<BR />
<BR />
Just like we learn a language with which to express ourselves, whether that language is English, international sign language, or APL, we should make a point of learning what CAP is, how it works, what it can do for us, and how to embrace and wield the power that it gives us as developers.<BR />
<BR />
<STRONG>A means to an end</STRONG><BR />
<BR />
CAP is not an end in itself, it is a means to other ends. And my goodness, in my experience, what a means it is!<BR />
<BR />
It's hard now to remember the times when the effort to create a functioning read-write OData service was so great that proof-of-concept projects didn't even get off the ground. Now, literally with less than ten lines of declarative code you can spin up a fully formed CRUD+Q OData service, and what's more, adding custom handlers to augment the standard handlers is also only a few lines of code away.<BR />
<BR />
Similarly, I had never really seriously attempted mocking a business service from the SAP API Business Hub before, as the effort was too great. Now with CAP it's a <A href="https://developers.sap.com/tutorials/cap-cloudsdk-1-mock-service.html" target="_blank" rel="noopener noreferrer">matter of minutes</A>.<BR />
<BR />
It's hard to remember what it was like to explore how annotations actually drive Fiori elements, because of the complexity involved in establishing where to store and how to serve up annotations along with an existing OData service. With CAP you just add them to a file, using Notepad or similar, and you're done. The time between tweaking annotations and refreshing your Fiori elements app to see what those tweaks do is now measured in seconds (and yes, I do that, I'm just like you :-)).<BR />
<BR />
I can't actually remember a time when I didn't have to think about specific persistence layers and machinery when prototyping a service, until CAP came along.<BR />
<BR />
And the mental heavy lifting previously needed to consider how I might go about building a solution that involved persistence, built-in extensibility, enterprise messaging and more ... well, as a regular developer with limited brain power, I'm now in a much better position to create solutions like that.<BR />
<BR />
<STRONG>Start smart</STRONG><BR />
<BR />
With the building blocks such as the family of <A href="https://blogs.sap.com/2019/09/18/tech-aloud-podcast-an-introduction/#dsls" target="_blank" rel="noopener noreferrer">Domain Specific Languages</A>*, with the convention-over-configuration approach, with the first class support for <A href="https://qmacro.org/2019/04/18/brief-thoughts-on-the-2019-stack-overflow-developer-survey-results/#languages" target="_blank" rel="nofollow noopener noreferrer">today's most popular language</A>, CAP helps you start smart, start your development project at a level far higher up, far nearer the business domain, than you could have started previously.<BR />
<BR />
You could say that this higher level starting point puts you closer to the cloud before you've even begun!<BR />
<BR />
*(See the <A href="https://cap.cloud.sap/docs/cds/" target="_blank" rel="nofollow noopener noreferrer">CDS language reference documentation</A> to learn more about the CAP DSLs.)<BR />
<BR />
So, my advice is - learn CAP, understand how to make use of the superpowers it gives you, and be mindful of its key role as a development substrate letting you focus on the business domain at hand.<BR />
<BR />
And, in the nicest possible way, just as for me my knowledge of the English language and and my understanding of social rules and customs fades into unimportance when interacting with my fellow human beings, consider CAP as unimportant in the same way. Fundamental, something you should learn and be able to make full use of, but a means to an end.
---
Annotated links: Episode 41 of Hands-on SAP dev with qmacro
technology-blog-sap
2019-10-26
https://community.sap.com/t5/technology-blogs-by-sap/annotated-links-episode-41-of-hands-on-sap-dev-with-qmacro/ba-p/13422161
2019-10-26-annotated-links-episode-41-of-hands-on-sap-dev-with-qmacro
<EM>This is a searchable description of the content of a live stream recording, specifically <STRONG>âEp.41 - Business Rules API on the BTPâ</STRONG> in the â<A href="https://bit.ly/handsonsapdev" target="_blank" rel="nofollow noopener noreferrer">Hands-on SAP dev with qmacro</A>â series. There are links directly to specific highlights in the video recording. For links to annotations of other episodes, please see the â<A href="https://bit.ly/handsonsapdev#replays" target="_blank" rel="nofollow noopener noreferrer">Catch the replays</A>â section of the series blog post.</EM><BR />
<BR />
This episode was streamed live on Fri 25 Oct 2019 and is approximately one hour in length. The stream recording is <A href="https://www.youtube.com/watch?v=xhis86osj1s&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;index=42" target="_blank" rel="nofollow noopener noreferrer">available on YouTube</A>.<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2019/10/Screenshot-2019-10-26-at-08.51.33.png" /><BR />
<BR />
Brief synopsis: Continuing on from where we left off in Ep.40, we dig further into the Business Rules APIs and start our journey to the Cloud Foundry environment.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=xhis86osj1s&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;index=42&amp;t=02m50s" target="_blank" rel="nofollow noopener noreferrer">02:50</A> Explaining the path we want to take over the next few live stream episodes, on the way to consuming Business Services on the SAP Cloud Platform (SCP) Cloud Foundry (CF) environment, given that SCP is the Business Technology Platform that helps us extend and build business apps in the cloud, in particular to look at a couple of classic business services, the orchestration pair Workflow and <A href="https://api.sap.com/package/SAPCPBusinessRulesAPIs?section=Artifacts" target="_blank" rel="noopener noreferrer">Business Rules</A>.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=xhis86osj1s&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;index=42&amp;t=06m10s" target="_blank" rel="nofollow noopener noreferrer">06:10</A> Mentioning the excellent <A href="https://open.sap.com" target="_blank" rel="noopener noreferrer">openSAP</A> - the goto learning place for SAP technology subjects, and looking specifically at the course â<A href="https://open.sap.com/courses/mobile3" target="_blank" rel="noopener noreferrer">Build Mobile Applications with SAP Cloud Platform Mobile Services</A>â with <SPAN class="citation" data-cites="Martin"><a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1736">@Martin</a></SPAN> Grasshoff and others. That course has just recently come to an end, so itâs now available as a self-paced course (this is my favourite feature of openSAP), and has a rating of 4.49 (out of 5) - recommended! We also looked briefly at a current course â<A href="https://open.sap.com/courses/suse1-pc" target="_blank" rel="noopener noreferrer">Introduction to SUSE Linux Enterprise Server (SLES)</A>â which appeals to me generally and specifically because my hardware hacker tentacles were vibrating having seen this really interesting blog post on the SAP Community by <SPAN class="mention-scrubbed">kimveasna_xyz</SPAN> - "<A href="https://blogs.sap.com/2019/10/23/another-diy-for-geeks-build-your-home-data-center-and-install-s4hana/" target="_blank" rel="noopener noreferrer">Another DIY for geeks: build your home Data Center and install S/4HANA</A>.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=xhis86osj1s&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;index=42&amp;t=13m40s" target="_blank" rel="nofollow noopener noreferrer">13:40</A> Briefly noting that you can still submit an article or blog post for me to read out on the <A href="https://qmacro.org/2019/09/17/new-podcast-tech-aloud/" target="_blank" rel="nofollow noopener noreferrer">Tech Aloud</A> podcast - see this blog post for more details on how to do it and whatâs required: â<A href="https://blogs.sap.com/2019/10/04/submit-suggestions-for-tech-aloud-during-sap-teched-barcelona/" target="_blank" rel="noopener noreferrer">Submit suggestions for Tech Aloud during SAP TechEd 2019</A>â.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=xhis86osj1s&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;index=42&amp;t=14m25s" target="_blank" rel="nofollow noopener noreferrer">14:25</A> Starting our journey by looking where the destination is - the business services in a trial CF subaccount on SCP. We can see in there that thereâs the Business Rules service available, with a âliteâ service plan, which is the CF equivalent service to where weâre starting from in Neo.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=xhis86osj1s&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;index=42&amp;t=16m55s" target="_blank" rel="nofollow noopener noreferrer">16:55</A> Starting up the administrative UI âManage Rules Projectâ where we take a look at a simple project Iâd already created: âairlinediscountsâ. In this UI we explore how a Business Rules project is set up, looking at the project itself and what it contains, i.e.&nbsp;Data Objects, Rules, Rulesets and Rule Services.<BR />
<BR />
In the Data Objects context we have a couple of structures, each with a single attribute. The first structure is used for the data flowing into an invocation call, and the second is to convey the results:<BR />
<PRE><CODE>Data Objects<BR />
 |<BR />
 +-- structure: flightinfo (used for Input)<BR />
 |    |<BR />
 |    +-- attribute: airline (String)<BR />
 |<BR />
 +-- structure: discountinfo (used for Result)<BR />
      |<BR />
      +-- attribute: discount (Number)</CODE></PRE><BR />
These structures (and attributes) are used in the Rule âdiscountruleâ which is rolled up into the Ruleset âdiscountrulesetâ, which in turn is made available in the deployable unit, the Rule Service âdiscountruleserviceâ. The deployment is done using the runtime (execution) API.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=xhis86osj1s&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;index=42&amp;t=29m40s" target="_blank" rel="nofollow noopener noreferrer">29:40</A> Looking at the <A href="https://api.sap.com/package/SAPCPBusinessRulesAPIs?section=Artifacts" target="_blank" rel="noopener noreferrer">Business Rules API Package on the SAP API Business Hub</A> and we see there are multiple APIs because of the dimensions of: Neo and CF, Authoring and Execution (or designtime and runtime) plus the fact that the Execution API for Neo has gone from v1 to v2 and v1 is still around, albeit deprecated (and still supported until May 2020).<BR />
<BR />
<A href="https://www.youtube.com/watch?v=xhis86osj1s&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;index=42&amp;t=33m40s" target="_blank" rel="nofollow noopener noreferrer">33:40</A> Taking a closer look at v1 of the Rule Execution API for Neo, and the different categories of API endpoints (Deploy and Undeply Rule Service, Get Rule Services, Invoke Rule Service and XSRF Handling), then diving in specifically to examine the Invoke Rule Service category, which has a single verb/noun combination:<BR />
<PRE><CODE>POST /v1/rule-services/java/{projectName}/{ruleserviceName}</CODE></PRE><BR />
Remember this is the deprecated v1 version but it provides us with a good first step to start our journey from, and appreciate the changes in v2. Note also that the âjavaâ part of the path conflicts with the philosophies expressed in Tim Berners-Leeâs classic article âCool URIs Donât Changeâ which you can listen to on Tech Aloud in this episode â<A href="https://anchor.fm/tech-aloud/episodes/Cool-URIs-dont-change---Tim-Berners-Lee---1998-e7gb1v" target="_blank" rel="nofollow noopener noreferrer">Cool URIs Donât Change</A>â â¦ and one of the changes in v2 is to address this.<BR />
<BR />
Note that the project name is âairlinediscountsâ and the rule service name is âdiscountruleserviceâ.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=xhis86osj1s&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;index=42&amp;t=37m20s" target="_blank" rel="nofollow noopener noreferrer">37:20</A> Talking briefly about Cross Site Request Forgery (CSRF) protection via the token mechanism, which is used for this API and many others on the SAP API Business Hub, and noting the subtle reference to validity for âthe current sessionâ.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=xhis86osj1s&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;index=42&amp;t=39m10s" target="_blank" rel="nofollow noopener noreferrer">39:10</A> Trying a fetch request for a CSRF token in the API Hub itself, passing this header in the request:<BR />
<PRE><CODE>X-CSRF-Token: Fetch</CODE></PRE><BR />
In the response, a corresponding header is returned:<BR />
<PRE><CODE>X-CSRF-Token: 01ECAF[...]</CODE></PRE><BR />
We can (and must) use this token in subsequent POST requests, i.e.&nbsp;requests with side-effects (think âRESTâ).<BR />
<BR />
<A href="https://www.youtube.com/watch?v=xhis86osj1s&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;index=42&amp;t=41m30s" target="_blank" rel="nofollow noopener noreferrer">41:30</A> Examining briefly what the payload of a call to the Invoke Rule Service endpoint needs to look like, in v1:<BR />
<PRE><CODE>[<BR />
  {<BR />
    "__type__": "flightinfo",<BR />
    "airline": "BA"<BR />
  }<BR />
]</CODE></PRE><BR />
<A href="https://www.youtube.com/watch?v=xhis86osj1s&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;index=42&amp;t=42m10s" target="_blank" rel="nofollow noopener noreferrer">42:10</A> Looking at the <CODE>invokeruleservice</CODE> script that weâll be spending our time using for the rest of this episode. Before we go on, here it is in its entirety:<BR />
<DIV><BR />
<PRE class="sourceCode bash"><CODE class="sourceCode bash"><SPAN id="cb6-1"><SPAN class="co">#!/bin/bash</SPAN></SPAN><BR />
<SPAN id="cb6-2"></SPAN><BR />
<SPAN id="cb6-3"><SPAN class="co"># Invokes the discountruleservice in the airlinediscounts Business Rule project</SPAN></SPAN><BR />
<SPAN id="cb6-4"></SPAN><BR />
<SPAN id="cb6-5"><SPAN class="va">RULEPROJECTNAME=</SPAN>airlinediscounts</SPAN><BR />
<SPAN id="cb6-6"><SPAN class="va">RULESERVICENAME=</SPAN>discountruleservice</SPAN><BR />
<SPAN id="cb6-7"><SPAN class="va">AIRLINECODE=$1</SPAN></SPAN><BR />
<SPAN id="cb6-8"><SPAN class="va">USER=</SPAN>i347491</SPAN><BR />
<SPAN id="cb6-9"><SPAN class="va">COOKIES=</SPAN>cookiejar-<SPAN class="va">${USER}</SPAN>.dat</SPAN><BR />
<SPAN id="cb6-10"><SPAN class="va">HEADERDATA=</SPAN>headers.dat</SPAN><BR />
<SPAN id="cb6-11"></SPAN><BR />
<SPAN id="cb6-12"><SPAN class="va">BPMRULESRUNTIME=</SPAN><A href="https://bpmrulesruntimebpm-" target="test_blank" rel="nofollow noopener noreferrer">https://bpmrulesruntimebpm-</A><SPAN class="va">${USER}</SPAN>trial.hanatrial.ondemand.com</SPAN><BR />
<SPAN id="cb6-13"><SPAN class="va">BPMRULESRUNTIMEPREFIX=</SPAN>/rules-service</SPAN><BR />
<SPAN id="cb6-14"></SPAN><BR />
<SPAN id="cb6-15"><SPAN class="va">ENDPOINT=${BPMRULESRUNTIME}${BPMRULESRUNTIMEPREFIX}</SPAN></SPAN><BR />
<SPAN id="cb6-16"></SPAN><BR />
<SPAN id="cb6-17"><SPAN class="co"># Abort if no airline code has been specified</SPAN></SPAN><BR />
<SPAN id="cb6-18"><SPAN class="bu">[</SPAN> <SPAN class="ot">-z</SPAN> <SPAN class="st">"</SPAN><SPAN class="va">$AIRLINECODE</SPAN><SPAN class="st">"</SPAN><SPAN class="bu"> ]</SPAN> <SPAN class="kw">&amp;&amp;</SPAN> <SPAN class="bu">echo</SPAN> Specify an airline code <SPAN class="dt">\(</SPAN>e.g. BA<SPAN class="dt">\)</SPAN> <SPAN class="kw">&amp;&amp;</SPAN> <SPAN class="bu">exit</SPAN> 1</SPAN><BR />
<SPAN id="cb6-19"></SPAN><BR />
<SPAN id="cb6-20"><SPAN class="co"># Retrieve CSRF token</SPAN></SPAN><BR />
<SPAN id="cb6-21"><SPAN class="fu">rm</SPAN> -f <SPAN class="va">$HEADERDATA</SPAN></SPAN><BR />
<SPAN id="cb6-22"><SPAN class="ex">curl</SPAN> \</SPAN><BR />
<SPAN id="cb6-23">        --netrc \</SPAN><BR />
<SPAN id="cb6-24">        --header <SPAN class="st">"X-CSRF-Token: Fetch"</SPAN> \</SPAN><BR />
<SPAN id="cb6-25">        --cookie-jar <SPAN class="va">$COOKIES</SPAN> \</SPAN><BR />
<SPAN id="cb6-26">        --verbose \</SPAN><BR />
<SPAN id="cb6-27">        <SPAN class="st">"</SPAN><SPAN class="va">${ENDPOINT}</SPAN><SPAN class="st">/v1/rules/xsrf-token"</SPAN> <SPAN class="op">2&gt;</SPAN> <SPAN class="op">&gt;(</SPAN><SPAN class="fu">grep</SPAN> -v Authorization <SPAN class="op">&gt;</SPAN> <SPAN class="va">$HEADERDATA</SPAN><SPAN class="op">)</SPAN></SPAN><BR />
<SPAN id="cb6-28"></SPAN><BR />
<SPAN id="cb6-29"><SPAN class="co"># Capture token</SPAN></SPAN><BR />
<SPAN id="cb6-30"><SPAN class="va">TOKEN=</SPAN><SPAN class="kw">`</SPAN><SPAN class="fu">grep</SPAN> <SPAN class="st">'&lt; X-CSRF-Token'</SPAN> <SPAN class="va">$HEADERDATA</SPAN> <SPAN class="kw">|</SPAN> <SPAN class="fu">awk</SPAN> <SPAN class="st">'{print $3}'</SPAN><SPAN class="kw">`</SPAN></SPAN><BR />
<SPAN id="cb6-31"></SPAN><BR />
<SPAN id="cb6-32"><SPAN class="co"># Invoke rule</SPAN></SPAN><BR />
<SPAN id="cb6-33"><SPAN class="ex">curl</SPAN> \</SPAN><BR />
<SPAN id="cb6-34">        --netrc \</SPAN><BR />
<SPAN id="cb6-35">        --request POST \</SPAN><BR />
<SPAN id="cb6-36">        --header <SPAN class="st">"X-CSRF-Token: </SPAN><SPAN class="va">$TOKEN</SPAN><SPAN class="st">"</SPAN> \</SPAN><BR />
<SPAN id="cb6-37">        --header <SPAN class="st">"Content-Type: application/json"</SPAN> \</SPAN><BR />
<SPAN id="cb6-38">        --data <SPAN class="st">"[{</SPAN><SPAN class="dt">\"</SPAN><SPAN class="st">__type__</SPAN><SPAN class="dt">\"</SPAN><SPAN class="st">:</SPAN><SPAN class="dt">\"</SPAN><SPAN class="st">flightinfo</SPAN><SPAN class="dt">\"</SPAN><SPAN class="st">,</SPAN><SPAN class="dt">\"</SPAN><SPAN class="st">airline</SPAN><SPAN class="dt">\"</SPAN><SPAN class="st">:</SPAN><SPAN class="dt">\"</SPAN><SPAN class="va">${AIRLINECODE}</SPAN><SPAN class="dt">\"</SPAN><SPAN class="st">}]"</SPAN> \</SPAN><BR />
<SPAN id="cb6-39">        --cookie <SPAN class="va">$COOKIES</SPAN> \</SPAN><BR />
<SPAN id="cb6-40">        --silent \</SPAN><BR />
<SPAN id="cb6-41">        <SPAN class="st">"</SPAN><SPAN class="va">${ENDPOINT}</SPAN><SPAN class="st">/rest/v1/rule-services/java/</SPAN><SPAN class="va">${RULEPROJECTNAME}</SPAN><SPAN class="st">/</SPAN><SPAN class="va">${RULESERVICENAME}</SPAN><SPAN class="st">"</SPAN> <SPAN class="kw">|</SPAN> <SPAN class="ex">jq</SPAN></SPAN></CODE></PRE><BR />
</DIV><BR />
<A href="https://www.youtube.com/watch?v=xhis86osj1s&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;index=42&amp;t=46m05s" target="_blank" rel="nofollow noopener noreferrer">46:05</A> Looking at the first HTTP request weâre about to make, with curl, to retrieve the CSRF token. This includes a brief foray into the <A href="https://ec.haxx.se/usingcurl-netrc.html" target="_blank" rel="nofollow noopener noreferrer">.netrc support in curl</A> for a more comfortable way of handling credentials. Hereâs the relevant part of my <CODE>.netrc</CODE> file:<BR />
<PRE><CODE>machine bpmrulesruntimebpm-i347491trial.hanatrial.ondemand.com<BR />
login i347491<BR />
password SEKRIT!</CODE></PRE><BR />
(thatâs not the real password, obviously!)<BR />
<BR />
<A href="https://www.youtube.com/watch?v=xhis86osj1s&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;index=42&amp;t=47m40s" target="_blank" rel="nofollow noopener noreferrer">47:40</A> Mentioning the use of process substitution in the redirection of STDERR from curl. If you want to learn more about process substitution, see the brief (10 minute!) bonus <A href="https://bit.ly/handsonsapdev#ep39" target="_blank" rel="nofollow noopener noreferrer">Ep.39</A>.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=xhis86osj1s&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;index=42&amp;t=49m55s" target="_blank" rel="nofollow noopener noreferrer">49:55</A> The first invocation of the script, stopping deliberately once a token has been retrieved. What we also get is the cookie jar (which weâll look at in a moment) and also the headers, captured in <CODE>headers.dat</CODE>. Note that outgoing (request) headers are denoted by curl with â&gt;â symbols in the first column, and incoming (response) headers are denoted by curl with â&lt;â symbols. Nice!<BR />
<BR />
<A href="https://www.youtube.com/watch?v=xhis86osj1s&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;index=42&amp;t=53m15s" target="_blank" rel="nofollow noopener noreferrer">53:15</A> What we get back, as well as the CSRF token, are cookies! The <CODE>Set-Cookie</CODE> headers in the response supply cookies that represent the session within which, and only within which, the token is actually valid. So if we make our subsequent POST request with the token, <EM>without</EM> passing the cookies to contextualise the token, things wonât work (as we see - we try this out and we get a 403 HTTP response).<BR />
<BR />
<A href="https://www.youtube.com/watch?v=xhis86osj1s&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;index=42&amp;t=54m15s" target="_blank" rel="nofollow noopener noreferrer">54:15</A> We use <CODE>awk</CODE> to pull out the token from the response line. For more on <CODE>awk</CODE> see this recent post "<A href="https://langram.org/2019/10/23/shell-power-simplicity/" target="_blank" rel="nofollow noopener noreferrer">Shell power and simplicity</A>.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=xhis86osj1s&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;index=42&amp;t=55m10s" target="_blank" rel="nofollow noopener noreferrer">55:10</A> Now we have the token, we can make the main POST invocation, which we do very quickly before the episode comes to an end (<A href="https://open.spotify.com/album/7isYifHXAT7wbuxbJziBG3" target="_blank" rel="nofollow noopener noreferrer">who knows where the time goes?</A>!). We need to make sure that we pass the cookies we received (we do that with the <CODE>--cookie</CODE> parameter) as well as the token (in the <CODE>--header</CODE> parameter) and of course the actual payload, in the <CODE>--data</CODE> parameter:<BR />
<DIV><BR />
<PRE class="sourceCode bash"><CODE class="sourceCode bash"><SPAN id="cb8-1"><SPAN class="ex">curl</SPAN> \</SPAN><BR />
<SPAN id="cb8-2">        --netrc \</SPAN><BR />
<SPAN id="cb8-3">        --request POST \</SPAN><BR />
<SPAN id="cb8-4">        --header <SPAN class="st">"X-CSRF-Token: </SPAN><SPAN class="va">$TOKEN</SPAN><SPAN class="st">"</SPAN> \</SPAN><BR />
<SPAN id="cb8-5">        --header <SPAN class="st">"Content-Type: application/json"</SPAN> \</SPAN><BR />
<SPAN id="cb8-6">        --data <SPAN class="st">"[{</SPAN><SPAN class="dt">\"</SPAN><SPAN class="st">__type__</SPAN><SPAN class="dt">\"</SPAN><SPAN class="st">:</SPAN><SPAN class="dt">\"</SPAN><SPAN class="st">flightinfo</SPAN><SPAN class="dt">\"</SPAN><SPAN class="st">,</SPAN><SPAN class="dt">\"</SPAN><SPAN class="st">airline</SPAN><SPAN class="dt">\"</SPAN><SPAN class="st">:</SPAN><SPAN class="dt">\"</SPAN><SPAN class="va">${AIRLINECODE}</SPAN><SPAN class="dt">\"</SPAN><SPAN class="st">}]"</SPAN> \</SPAN><BR />
<SPAN id="cb8-7">        --cookie <SPAN class="va">$COOKIES</SPAN> \</SPAN><BR />
<SPAN id="cb8-8">        --silent \</SPAN><BR />
<SPAN id="cb8-9">        <SPAN class="st">"</SPAN><SPAN class="va">${ENDPOINT}</SPAN><SPAN class="st">/rest/v1/rule-services/java/</SPAN><SPAN class="va">${RULEPROJECTNAME}</SPAN><SPAN class="st">/</SPAN><SPAN class="va">${RULESERVICENAME}</SPAN><SPAN class="st">"</SPAN> <SPAN class="kw">|</SPAN> <SPAN class="ex">jq</SPAN></SPAN></CODE></PRE><BR />
</DIV><BR />
If you blur your eyes slightly at the value of that <CODE>--data</CODE> parameter, youâll see it resolves into the payload we saw earlier (with <CODE>${AIRLINECODE}</CODE> representing the value passed in on the command line:<BR />
<PRE><CODE>[<BR />
  {<BR />
    "__type__": "flightinfo",<BR />
    "airline": "${AIRLINECODE}"<BR />
  }<BR />
]</CODE></PRE><BR />
Next time weâll go through a little bit of this again, a bit slower, to make sure we understand everything properly. Phew!
---
Annotated links: Episode 40 of Hands-on SAP dev with qmacro
technology-blog-sap
2019-10-22
https://community.sap.com/t5/technology-blogs-by-sap/annotated-links-episode-40-of-hands-on-sap-dev-with-qmacro/ba-p/13415122
2019-10-22-annotated-links-episode-40-of-hands-on-sap-dev-with-qmacro
<EM>This is a searchable description of the content of a live stream recording, specifically <STRONG>âEp.40 â Catchup from SAP TechEd"</STRONG> in the â<A href="https://bit.ly/handsonsapdev" target="_blank" rel="nofollow noopener noreferrer">Hands-on SAP dev with qmacro</A>â series. There are links directly to specific highlights in the video recording. For links to annotations of other episodes, please see the â<A href="https://bit.ly/handsonsapdev#replays" target="_blank" rel="nofollow noopener noreferrer">Catch the replays</A>â section of the series blog post.</EM><BR />
<BR />
This episode, titled â<A href="https://bit.ly/handsonsapdev#ep40" target="_blank" rel="nofollow noopener noreferrer">Catchup from SAP TechEd</A>â, was streamed live on Wed 05 Jun 2019 and is approximately one hour in length. The stream recording is&nbsp;<A href="https://www.youtube.com/watch?v=c3B2Nxqxwv4&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;index=2" target="_blank" rel="nofollow noopener noreferrer">available on YouTube</A>.<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2019/10/Screenshot-2019-10-22-at-21.06.41.png" /><BR />
<BR />
Brief synopsis: Weâre in the midst of the SAP TechEd season â in this episode we catch up with whatâs been going on and dig into whatever takes our fancy.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=c3B2Nxqxwv4&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;index=2&amp;t=02m10s" target="_blank" rel="nofollow noopener noreferrer">02:10</A> Talking about the sort of direction I want to take the episodes in, building on what we learned from SAP TechEd recently.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=c3B2Nxqxwv4&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;index=2&amp;t=03m10s" target="_blank" rel="nofollow noopener noreferrer">03:10</A> A reminder of the badges and stickers I have to give away, thanks again to <SPAN class="mention-scrubbed">rsletta</SPAN> for the awesome <A href="https://twitter.com/search?q=%23HandsOnSAPDev" target="_blank" rel="nofollow noopener noreferrer">#HandsOnSAPDev</A> laptop stickers, they rock!<BR />
<BR />
<A href="https://www.youtube.com/watch?v=c3B2Nxqxwv4&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;index=2&amp;t=08m50s" target="_blank" rel="nofollow noopener noreferrer">08:50</A> Looking at the new repo on GitHub that <SPAN class="mention-scrubbed">gregorw</SPAN> created to coordinate and provide a read/write platform for technical activities and sharing around all things related to the SAP Cloud Application Programming Model. Itâs in the <A href="https://github.com/sapmentors" target="_blank" rel="nofollow noopener noreferrer">https://github.com/sapmentors</A> organisation and can be found here: â <A class="uri" href="https://github.com/sapmentors/cap-community" target="_blank" rel="nofollow noopener noreferrer">https://github.com/sapmentors/cap-community</A>. Get to it with this canonical short URL &lt;bit.ly/cap-com&gt;.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=c3B2Nxqxwv4&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;index=2&amp;t=10m40s" target="_blank" rel="nofollow noopener noreferrer">10:40</A> Talking about our coffee chats with <SPAN class="mention-scrubbed">daniel.hutzel</SPAN> at SAP TechEd 2019 in Barcelona; turns out heâs on Twitter as <A href="https://twitter.com/aragonX" target="_blank" rel="nofollow noopener noreferrer">aragonX</A>. These chats are the birthplace of this &lt;bit.ly/cap-com&gt; repo.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=c3B2Nxqxwv4&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;index=2&amp;t=12m50s" target="_blank" rel="nofollow noopener noreferrer">12:50</A> Within the repo right now there are a couple of subdirectories. The first (created initially by <SPAN class="mention-scrubbed">vobu</SPAN>) is called <CODE>issues/</CODE> where code can be shared that reproduces an issue that youâre asking about. (First rule of asking a technical question: make sure you ask it precisely and accurately. Second rule of asking a technical question: make it as easy as possible for those trying to help you reproduce the issue so they can understand and diagnose). Volker does this very well in the first instance of an issue in the <CODE>structured-types/</CODE> directory. The second is <CODE>examples/</CODE> where we can share simple, running examples of concepts; the first item in here is <A href="https://github.com/sapmentors/cap-community/tree/master/examples/deep-insert" target="_blank" rel="nofollow noopener noreferrer">deep-insert/</A> which shows a running, simple example of how to perform a deep insert (of parent and child entities in a single operation).<BR />
<BR />
<A href="https://www.youtube.com/watch?v=c3B2Nxqxwv4&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;index=2&amp;t=16m20s" target="_blank" rel="nofollow noopener noreferrer">16:20</A> Describing briefly how to easily contribute to the <A href="https://github.com/sapmentors/cap-community" target="_blank" rel="nofollow noopener noreferrer">CAP Community repo</A> by forking it, making changes in your fork, and then sending a pull request with those changes.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=c3B2Nxqxwv4&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;index=2&amp;t=19m25s" target="_blank" rel="nofollow noopener noreferrer">19:25</A> Examining the <CODE>deep-insert/</CODE> example contents, starting with the <A href="https://github.com/sapmentors/cap-community/blob/master/examples/deep-insert/README.md" target="_blank" rel="nofollow noopener noreferrer">README</A>, and then the simple parent-child relationship expressed between two basic entities in the <CODE>db/schema.cds</CODE> file, and finally the simple exposure of both those entities in the <CODE>srv/main.cds</CODE> service file.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=c3B2Nxqxwv4&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;index=2&amp;t=22m10s" target="_blank" rel="nofollow noopener noreferrer">22:10</A> A first look at <CODE>Composition</CODE>, and how it relates to (and differs from) <CODE>Association</CODE> in CDS. Basically, a composition represents a contained-in relationship, <A href="https://cap.cloud.sap/docs/cds/cdl#compositions" target="_blank" rel="nofollow noopener noreferrer">as described</A> in CAPâs CDL documentation. This also includes a quick discussion on whether a navigation property should be capitalised or not. Basically the consensus is that such properties should be in lowercase (here <CODE>items</CODE>), but the target entity itself should be in uppercase (here: <CODE>Items</CODE><span class="lia-unicode-emoji" title=":disappointed_face:">ð</span><BR />
<PRE class="cds"><CODE>namespace demo;<BR />
using { cuid, managed } from '@sap/cds/common';<BR />
<BR />
entity Headers : cuid, managed {<BR />
    identifier : String;<BR />
    items      : Composition of many Items on items.parent = $self;<BR />
}<BR />
<BR />
entity Items : cuid {<BR />
    parent : Association to Headers;<BR />
    data   : String;<BR />
}</CODE></PRE><BR />
<A href="https://www.youtube.com/watch?v=c3B2Nxqxwv4&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;index=2&amp;t=26m20s" target="_blank" rel="nofollow noopener noreferrer">26:20</A> Starting the service up and checking that there are no existing headers or items.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=c3B2Nxqxwv4&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;index=2&amp;t=27m10s" target="_blank" rel="nofollow noopener noreferrer">27:10</A> Performing our first deep insert, causing a header entity to be created, and two related child item entities, as follows (in a single request!):<BR />
<PRE class="shell"><CODE>curl <A href="http://localhost:4004/main/Headers" target="test_blank" rel="nofollow noopener noreferrer">http://localhost:4004/main/Headers</A> \<BR />
  -H "Content-Type: application/json" \<BR />
  -d '{ "identifier": "Header 1", "items": [ { "data": "A" }, { "data": "B" } ] }'</CODE></PRE><BR />
<A href="https://www.youtube.com/watch?v=c3B2Nxqxwv4&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;index=2&amp;t=31m10s" target="_blank" rel="nofollow noopener noreferrer">31:10</A> Performing a second deep insert, this time using <CODE>jq</CODE> to format the JSON output nicely, and also looking at the HTTP request and response headers (with <CODE>curl</CODE>âs <CODE>-v</CODE> verbose option), where we note the proper HTTP 201 response with a âLocationâ header.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=c3B2Nxqxwv4&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;index=2&amp;t=33m20s" target="_blank" rel="nofollow noopener noreferrer">33:20</A> Looking at the results of the deep inserts with the OData <CODE>$expand</CODE> system query option: <A class="uri" href="http://localhost:4004/main/Headers?$expand=items" target="_blank" rel="nofollow noopener noreferrer">http://localhost:4004/main/Headers?$expand=items</A>.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=c3B2Nxqxwv4&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;index=2&amp;t=34m10s" target="_blank" rel="nofollow noopener noreferrer">34:10</A> Now we can see the effect of the use of âCompositionâ by performing an OData DELETE operation on a header entity and we see in the browser that the items that are âcontained-inâ that header are also deleted. Lovely!<BR />
<BR />
<A name="debug" target="_blank"></A><A href="https://www.youtube.com/watch?v=c3B2Nxqxwv4&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;index=2&amp;t=37m20s" target="_blank" rel="nofollow noopener noreferrer">37:20</A> David Kunz reminds us that we can use <CODE>DEBUG=true</CODE> to see whatâs going on behind the scenes - use this as follows:<BR />
<PRE class="shell"><CODE>DEBUG=true cds run --in-memory</CODE></PRE><BR />
<A href="https://www.youtube.com/watch?v=c3B2Nxqxwv4&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;index=2&amp;t=39m30s" target="_blank" rel="nofollow noopener noreferrer">39:30</A> I completely fail to parse <SPAN class="mention-scrubbed">gregorw</SPAN>âs statement (in the chat) â<SPAN class="citation" data-cites="qmacro"><a href="https://community.sap.com/t5/user/viewprofilepage/user-id/53">@qmacro</a></SPAN> does <SPAN class="citation" data-cites="francis3745">@francis3745</SPAN>â. Doh! âdoes [work for SAP]â, of course!<BR />
<BR />
<A href="https://www.youtube.com/watch?v=c3B2Nxqxwv4&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;index=2&amp;t=40m30s" target="_blank" rel="nofollow noopener noreferrer">40:30</A> Thinking about what I want to be talking about in the upcoming episodes, in particular Business Services on the SAP Cloud Platform, which we can now also refer to as SAPâs Business Technology Platfom (BTP) - this was a big part of <SPAN class="mention-scrubbed">juergen.mueller</SPAN>âs keynote at SAP TechEd 2019 in Barcelona (you can watch the replay here: <A href="https://events.sap.com/teched/en/session/48841" target="_blank" rel="noopener noreferrer">The Technical Foundation of the Intelligent Enterprise</A>. My journey is likely to be starting from a similar place to yours, i.e.&nbsp;in the Neo environment, where Iâve already established services using Workflow, Business Rules, Portal and other subscriptions â¦ but where I want to get to of course is those equivalent business services in the Cloud Foundry environment. I thought it would be good to make that journey openly and share my learning as I go.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=c3B2Nxqxwv4&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;index=2&amp;t=42m40s" target="_blank" rel="nofollow noopener noreferrer">42:40</A> Mentioning my talk at UI5con 2018 "Diving into the sap.rules.ui library" <A href="https://www.youtube.com/watch?v=CTgtS6Cd98Y" target="_blank" rel="nofollow noopener noreferrer">(YouTube link)</A>, which I recommend you watch, at least in 1.5X, to see the API calls and structure that I make use of when building, deploying and executing business rules.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=c3B2Nxqxwv4&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;index=2&amp;t=43m00s" target="_blank" rel="nofollow noopener noreferrer">43:00</A> Looking at the <A href="https://api.sap.com" target="_blank" rel="noopener noreferrer">SAP API Business Hub</A> to start to understand what the business services are about, âfrom underneathâ, picking specifically the Business Rules API package here: <A class="uri" href="https://api.sap.com/package/SAPCPBusinessRulesAPIs?section=Artifacts" target="_blank" rel="noopener noreferrer">https://api.sap.com/package/SAPCPBusinessRulesAPIs?section=Artifacts</A>.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=c3B2Nxqxwv4&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;index=2&amp;t=45m00s" target="_blank" rel="nofollow noopener noreferrer">45:00</A> Noting that the APIs are split multiple ways: there are APIs for Neo and Cloud Foundry, those APIs are either for Authoring or Execution, and the APIs are versioned (the Rule Execution API v1 is already deprecated in favour of v2, as we see here).<BR />
<BR />
<A href="https://www.youtube.com/watch?v=c3B2Nxqxwv4&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;index=2&amp;t=49m00s" target="_blank" rel="nofollow noopener noreferrer">49:00</A> Thereâs some great information out there on orchestration services (such as Workflow and Business Rules) on the SAP Cloud Platform - look out for content from <SPAN class="mention-scrubbed">christian.loos</SPAN>, <SPAN class="mention-scrubbed">archana.shukla</SPAN> and <SPAN class="mention-scrubbed">stephan.schluchter</SPAN>.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=c3B2Nxqxwv4&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;index=2&amp;t=51m40s" target="_blank" rel="nofollow noopener noreferrer">51:40</A> Looking at setting up an environment within which to explore and try out the APIs within the SAP API Hub; rather than use the sandbox environment (which is not always available anyway) you can use your own trial account on the SAP Cloud Platform.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=c3B2Nxqxwv4&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;index=2&amp;t=54m25s" target="_blank" rel="nofollow noopener noreferrer">54:25</A> Trying out the API (specifically a GET on the <CODE>/v2/workingeset-rule-definitions</CODE>) within the SAP API Hub and we can see some results.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=c3B2Nxqxwv4&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;index=2&amp;t=56m00s" target="_blank" rel="nofollow noopener noreferrer">56:00</A> Now trying to make the same API call from the command line (with <CODE>curl</CODE>), and talking about the different components that make up an entire business rules service, starting with âworking setâ. We remind ourselves also about the <A href="https://ec.haxx.se/usingcurl-netrc.html" target="_blank" rel="nofollow noopener noreferrer">.netrc</A> file and facilities that it offers, especially in conjunction with <CODE>curl</CODE>.
---
Annotated links: Episode 39 of Hands-on SAP dev with qmacro
technology-blog-sap
2019-10-18
https://community.sap.com/t5/technology-blogs-by-sap/annotated-links-episode-39-of-hands-on-sap-dev-with-qmacro/ba-p/13410264
2019-10-18-annotated-links-episode-39-of-hands-on-sap-dev-with-qmacro
<EM>This is a searchable description of the content of a live stream recording, specifically <STRONG>âEp.39 â Looking at process substitutionâ</STRONG> in the â<A href="https://bit.ly/handsonsapdev" target="_blank" rel="nofollow noopener noreferrer">Hands-on SAP dev with qmacro</A>â series. There are links directly to specific highlights in the video recording. For links to annotations of other episodes, please see the â<A href="https://bit.ly/handsonsapdev#replays" target="_blank" rel="nofollow noopener noreferrer">Catch the replays</A>â section of the series blog post.</EM><BR />
<BR />
This episode, titled â<A href="http://bit.ly/handsonsapdev#ep39" target="_blank" rel="nofollow noopener noreferrer">Looking at process substitution</A>â, was streamed live on Sun 06 Oct 2019 and is approximately 10 minutes in length. The stream recording is <A href="https://www.youtube.com/watch?v=JF4lGw4Itpk&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;index=40" target="_blank" rel="nofollow noopener noreferrer">available on YouTube</A>.<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2019/10/Screenshot-2019-10-18-at-10.46.10.png" /><BR />
<BR />
Brief synopsis: This is an impromptu live stream where we look briefly at process substitution in the shell, a powerful construct useful for command line processing.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=JF4lGw4Itpk&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;index=40&amp;t=00m10s" target="_blank" rel="nofollow noopener noreferrer">00:10</A> Explaining the purpose of this impromptu episode on a Sunday morning, to test out a reconfiguration of my <A href="https://obsproject.com/" target="_blank" rel="nofollow noopener noreferrer">OBS</A> streaming software - to encode and stream a smaller base canvas in order to try and reduce the load on the machine (I noticed an increase load since I started to use a 4K monitor).<BR />
<BR />
<A href="https://www.youtube.com/watch?v=JF4lGw4Itpk&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;index=40&amp;t=01m30s" target="_blank" rel="nofollow noopener noreferrer">01:30</A> Taking a quick look at the Window Manager (WM) <A href="https://github.com/ianyh/Amethyst" target="_blank" rel="nofollow noopener noreferrer">Amethyst</A> that Iâm trying out instead of <A href="https://github.com/koekeishiya/chunkwm" target="_blank" rel="nofollow noopener noreferrer">ChunkWM</A>.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=JF4lGw4Itpk&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;index=40&amp;t=02m30s" target="_blank" rel="nofollow noopener noreferrer">02:30</A> Looking at what we did at the end of the previous episode (<A href="https://bit.ly/handsonsapdev#ep38" target="_blank" rel="nofollow noopener noreferrer">Ep38</A>) - comparing two different JSON representations of the Core Schema Notation (CSN) for the Business Partner API. In the previous episode we created intermediate files before firing up <CODE>vimdiff</CODE>. This works but is a little pedestrian and we have to remember to clean up those files afterwards.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=JF4lGw4Itpk&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;index=40&amp;t=04m50s" target="_blank" rel="nofollow noopener noreferrer">04:50</A> I discovered the concept of Process Substitution a few weeks ago, which is a shell feature. Looking at the <A href="https://en.wikipedia.org/wiki/Process_substitution" target="_blank" rel="nofollow noopener noreferrer">Wikipedia entry for Process Substitution</A> we see a nice succinct and helpful definition, telling us that it ââ¦ allows the input or output of a command to appear as a fileâ. This will enable us to use <CODE>vimdiff</CODE>, which expects to work on files, with the STDOUT of sub processes (rather than having to create intermediate files). Amazing!<BR />
<BR />
<A href="https://www.youtube.com/watch?v=JF4lGw4Itpk&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;index=40&amp;t=06m20s" target="_blank" rel="nofollow noopener noreferrer">06:20</A> Reminding ourselves of what we did previously:<BR />
<PRE class="shell"><CODE>jq &lt; ./API_BUSINESS_PARTNER.json &gt; tut.json<BR />
jq &lt; ./conv/API_BUSINESS_PARTNER.json &gt; new.json # the file we created with edmx2csn<BR />
<BR />
vimdiff tut.json new.json<BR />
rm tut.json new.json</CODE></PRE><BR />
<A href="https://www.youtube.com/watch?v=JF4lGw4Itpk&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;index=40&amp;t=07m35s" target="_blank" rel="nofollow noopener noreferrer">07:35</A> With process substitution in Bash, we have the <CODE>&lt;()</CODE> construct for input; thereâs also <CODE>&lt;()</CODE> for output, which we donât use here. This is all we have to do:<BR />
<PRE class="shell"><CODE>vimdiff &lt;(jq &lt; ./API_BUSINESS.PARTNER.json) &lt;(jq &lt; ./conv/API_BUSINESS_PARTNER.json)</CODE></PRE><BR />
No pre-step to create files, and no cleanup of those files afterwards. Beautiful.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=JF4lGw4Itpk&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;index=40&amp;t=08m30s" target="_blank" rel="nofollow noopener noreferrer">08:30</A> Noting that the âfileâ names (e.g.&nbsp;<CODE>/dev/fd/63</CODE>) in Vim are non-writeable âfile descriptorsâ which youâll learn more about when you look into how process substitution works.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=JF4lGw4Itpk&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;index=40&amp;t=09m30s" target="_blank" rel="nofollow noopener noreferrer">09:30</A> We see that process substitution first appeared in the Korn shell in 1988. The Korn shell was written by David Korn, who Iâve seen modelling a tshirt with a wonderful statement on the front that I think should make it onto a #HandsOnSAPDev tshirt, donât you? <span class="lia-unicode-emoji" title=":slightly_smiling_face:">ð</span>
---
Annotated links: Episode 38 of Hands-on SAP dev with qmacro
technology-blog-sap
2019-10-04
https://community.sap.com/t5/technology-blogs-by-sap/annotated-links-episode-38-of-hands-on-sap-dev-with-qmacro/ba-p/13388795
2019-10-04-annotated-links-episode-38-of-hands-on-sap-dev-with-qmacro
<EM>This is a searchable description of the content of a live stream recording, specifically <STRONG>âEp.38 â Converting API EDMX metadata to CSN"</STRONG> in the â<A href="https://bit.ly/handsonsapdev" target="_blank" rel="nofollow noopener noreferrer">Hands-on SAP dev with qmacro</A>â series. There are links directly to specific highlights in the video recording. For links to annotations of other episodes, please see the â<A href="https://bit.ly/handsonsapdev#replays" target="_blank" rel="nofollow noopener noreferrer">Catch the replays</A>â section of the series blog post.</EM><BR />
<BR />
This episode, titled â<A href="http://bit.ly/handsonsapdev#ep38" target="_blank" rel="nofollow noopener noreferrer">Converting API EDMX metadata to CSN</A>â, was streamed live on Fri 04 Oct 2019 and is approximately one hour in length. The stream recording is <A href="https://www.youtube.com/watch?v=JjY2MC3kJgM" target="_blank" rel="nofollow noopener noreferrer">available on YouTube</A>.<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2019/10/Screenshot-2019-10-04-at-15.37.14.jpg" /><BR />
<BR />
Brief synopsis: In this episode we take a look at how OData metadata information, in the form of EDMX, can be converted to Core Schema Notation (CSN), and take a look at some SAP API Hub features along the way.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=JjY2MC3kJgM&amp;t=01m50s" target="_blank" rel="nofollow noopener noreferrer">01:50</A> The latest edition to my keyboard family, the <A href="http://www.vortexgear.tw/vortex2_2.asp?kind=47&amp;kind2=224&amp;kind3=&amp;kind4=1033" target="_blank" rel="nofollow noopener noreferrer">Vortex Core</A>, a 40% keyboard layout.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=JjY2MC3kJgM&amp;t=04m05s" target="_blank" rel="nofollow noopener noreferrer">04:05</A> Some small giveaways for #HandsOnSAPDev live stream family members - badges from SAP TechEd and some awesome #HandsOnSAPDev stickers that <A href="https://twitter.com/rsletta/status/1178030720045989890" target="_blank" rel="nofollow noopener noreferrer">Ronnie Sletta got made</A> for us. Weâll bring some to TechEd and can give away up to 20 here.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=JjY2MC3kJgM&amp;t=09m50s" target="_blank" rel="nofollow noopener noreferrer">09:50</A> The special secret keyword you need to send me when you request some badges or stickers <span class="lia-unicode-emoji" title=":slightly_smiling_face:">ð</span><BR />
<BR />
<A href="https://www.youtube.com/watch?v=JjY2MC3kJgM&amp;t=11m20s" target="_blank" rel="nofollow noopener noreferrer">11:20</A> The Developer Garage is the place to be at <A href="https://events.sap.com/teched-emea/en/home" target="_blank" rel="noopener noreferrer">SAP TechEd Barcelona next week</A>, where youâll be able to also get your hands on a #HandsOnSAPDev sticker (you will have to âearnâ it though!).<BR />
<BR />
<A href="https://www.youtube.com/watch?v=JjY2MC3kJgM&amp;t=12m10s" target="_blank" rel="nofollow noopener noreferrer">12:10</A> Reminding everyone of the upcoming <A href="https://adventofcode.com" target="_blank" rel="nofollow noopener noreferrer">Advent Of Code</A> in December; Iâd like to be better prepared this year, possibly with a setup similar to what we used in <A href="http://bit.ly/handsonsapdev" target="_blank" rel="nofollow noopener noreferrer">Ep.0</A> (using <A href="https://www.npmjs.com/package/nodemon" target="_blank" rel="nofollow noopener noreferrer">nodemon</A>).<BR />
<BR />
<A href="https://www.youtube.com/watch?v=JjY2MC3kJgM&amp;t=14m15s" target="_blank" rel="nofollow noopener noreferrer">14:15</A> Looking at <A href="https://help.github.com/en/categories/automating-your-workflow-with-github-actions" target="_blank" rel="nofollow noopener noreferrer">GitHub Actions</A>; I created a JavaScript based action to automate the assignment of new issues in a repo to a column in a project in that same repo (I use GitHub repo projects to organise a lot of my working activities).<BR />
<BR />
<A href="https://www.youtube.com/watch?v=JjY2MC3kJgM&amp;t=15m15s" target="_blank" rel="nofollow noopener noreferrer">15:15</A> Looking at <A href="https://worldwideweb.cern.ch/browser/#https://qmacro.org" target="_blank" rel="nofollow noopener noreferrer">the original WWW browser</A> that Tim Berners-Lee developed on the NeXT Cube, a beautiful simulation, and also pleasing that my blog can be rendered even with the very first browser that existed. Nice!<BR />
<BR />
<A href="https://www.youtube.com/watch?v=JjY2MC3kJgM&amp;t=16m30s" target="_blank" rel="nofollow noopener noreferrer">16:30</A> Info on the new <A href="https://anchor.fm/tech-aloud" target="_blank" rel="nofollow noopener noreferrer">Tech Aloud</A> podcast that I created, read more about it (especially how to subscribe and listen!) in this blog post: <A href="https://qmacro.org/2019/09/17/new-podcast-tech-aloud/" target="_blank" rel="nofollow noopener noreferrer">New podcast - Tech Aloud</A>.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=JjY2MC3kJgM&amp;t=18m00s" target="_blank" rel="nofollow noopener noreferrer">18:00</A> A quick note on <A href="https://martinfowler.com/books/dsl.html" target="_blank" rel="nofollow noopener noreferrer">Domain Specific Languages</A> (DSLs), which are wonderful and something that is evident in CAP, as I explain in this SAP Community post: <A href="https://blogs.sap.com/2019/09/18/tech-aloud-podcast-an-introduction/" target="_blank" rel="noopener noreferrer">Tech Aloud podcast - an introduction</A>.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=JjY2MC3kJgM&amp;t=19m30s" target="_blank" rel="nofollow noopener noreferrer">19:30</A> Showing how I manage the activities relating to Tech Aloud - using a GitHub <A href="https://github.com/qmacro/tech-aloud/projects/1" target="_blank" rel="nofollow noopener noreferrer">repo related project</A>, with various kanban style columns (Submitted, Planned, Recorded, Published in this particular case).<BR />
<BR />
<A href="https://www.youtube.com/watch?v=JjY2MC3kJgM&amp;t=21m20s" target="_blank" rel="nofollow noopener noreferrer">21:20</A> Feel free to <A href="https://github.com/qmacro/tech-aloud/issues" target="_blank" rel="nofollow noopener noreferrer">submit articles / posts that you think are relevant and worthwhile</A> for the Tech Aloud podcast. Read more about that in this post: <A href="https://blogs.sap.com/2019/10/04/submit-suggestions-for-tech-aloud-during-sap-teched-barcelona/" target="_blank" rel="noopener noreferrer">Submit suggestions for Tech Aloud during SAP TechEd Barcelona</A>.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=JjY2MC3kJgM&amp;t=21m50s" target="_blank" rel="nofollow noopener noreferrer">21:50</A> Demonstrating the automatic assignment of a new issue in a repo to a project in that repo, specifically to a particular column in that project. Done using a GitHub Action, which you can find here: <A href="https://github.com/qmacro/action-add-issue-to-project-column/" target="_blank" rel="nofollow noopener noreferrer">action-add-issue-to-project-column</A>.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=JjY2MC3kJgM&amp;t=24m55s" target="_blank" rel="nofollow noopener noreferrer">24:55</A> Looking at the workflow definition in the Tech Aloud podcast management repo to see how the job (that uses the GitHub Action) is set up. See <A href="https://github.com/qmacro/tech-aloud/blob/master/.github/workflows/submission.yml" target="_blank" rel="nofollow noopener noreferrer">submission.yml</A>.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=JjY2MC3kJgM&amp;t=25m40s" target="_blank" rel="nofollow noopener noreferrer">25:40</A> A quick reading recommendation: â<A href="https://d.dam.sap.com/a/21EPJi8/SAP%20Fiori%20elements%20Usage%20Guide%20-%20August%202019.pdf" target="_blank" rel="noopener noreferrer">When to use SAP Fiori elements</A>â that was recently shared by the Twitter <SPAN class="citation" data-cites="sapdevs">@sapdevs</SPAN> account.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=JjY2MC3kJgM&amp;t=26m40s" target="_blank" rel="nofollow noopener noreferrer">26:40</A> Looking at the <A href="https://answers.sap.com/questions/12878338/csn-file-in-the-cloud-programming-model-s4-hana-cl.html" target="_blank" rel="noopener noreferrer">question</A> asked by Kevin Hu on the SAP Community about the conversion of an S/4HANA API (from the SAP API Business Hub) to Core Schema Notation (CSN).<BR />
<BR />
<A href="https://www.youtube.com/watch?v=JjY2MC3kJgM&amp;t=27m55s" target="_blank" rel="nofollow noopener noreferrer">27:55</A> Going to <A class="uri" href="https://developers.sap.com" target="_blank" rel="noopener noreferrer">https://developers.sap.com</A> you can get to the missions available in the SAP TechEd <A href="https://developers.sap.com/app-space.html" target="_blank" rel="noopener noreferrer">App Space</A>, one of which is on CAP &amp; the SAP Cloud SDK: âS/4HANA Extensions with Cloud Application Programming Model (CAP)â.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=JjY2MC3kJgM&amp;t=29m10s" target="_blank" rel="nofollow noopener noreferrer">29:10</A> The <A href="https://developers.sap.com/tutorials/cap-cloudsdk-1-mock-service.html" target="_blank" rel="noopener noreferrer">first tutorial in that mission</A> is what Kevin was referring to, where a file called <CODE>API_BUSINESS_PARTNER.json</CODE> is presented to be used in the tutorial (and a subsequent tutorial too). The question is - what format is it in (CSN) and how was it actually generated?<BR />
<BR />
<A href="https://www.youtube.com/watch?v=JjY2MC3kJgM&amp;t=31m55s" target="_blank" rel="nofollow noopener noreferrer">31:55</A> There are two packages available in the SAP NPM Registry: <CODE><a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a>/edm-converters</CODE> and <CODE><a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a>/edmx2csn</CODE> for exactly this sort of requirement.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=JjY2MC3kJgM&amp;t=33m00s" target="_blank" rel="nofollow noopener noreferrer">33:00</A> Logging on to the <A href="http://api.sap.com" target="_blank" rel="noopener noreferrer">SAP API Business Hub</A> to get to the API so we can look at it and download the definition in the form of an EDMX file (OData FTW!).<BR />
<BR />
<A href="https://www.youtube.com/watch?v=JjY2MC3kJgM&amp;t=35m45s" target="_blank" rel="nofollow noopener noreferrer">35:45</A> Adding the API to the SAP API Hub âAPI Cockpitâ to try it out in the browser.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=JjY2MC3kJgM&amp;t=38m20s" target="_blank" rel="nofollow noopener noreferrer">38:20</A> Poking the API from the terminal with curl, one step at a time. First getting a 401 (Unauthorized) response of course, then (eventually!) a 307 Temporary Redirect, which is better.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=JjY2MC3kJgM&amp;t=39m45s" target="_blank" rel="nofollow noopener noreferrer">39:45</A> The tutorial that explains the use of the APIKey header is this one: <A href="https://developers.sap.com/tutorials/hcp-abh-test-locally.html" target="_blank" rel="noopener noreferrer">Testing API Business Hub APIs with Curl</A>.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=JjY2MC3kJgM&amp;t=41m20s" target="_blank" rel="nofollow noopener noreferrer">41:20</A> Looking briefly at the difference between HTTP response codes 307 (Temporary Redirect) and 302 (Moved Temporarily). Looks like this Stack Overflow answer is useful to read: <A href="https://stackoverflow.com/questions/2068418/whats-the-difference-between-a-302-and-a-307-redirect" target="_blank" rel="nofollow noopener noreferrer">Whatâs the difference between a 302 and a 307 redirect?</A>.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=JjY2MC3kJgM&amp;t=43m40s" target="_blank" rel="nofollow noopener noreferrer">43:40</A> Grabbing the APIâs metadata from the <A href="https://api.sap.com/api/API_BUSINESS_PARTNER/overview" target="_blank" rel="noopener noreferrer">API specification page</A> in EDMX format (JSON and YAML are also available).<BR />
<BR />
<A href="https://www.youtube.com/watch?v=JjY2MC3kJgM&amp;t=44m30s" target="_blank" rel="nofollow noopener noreferrer">44:30</A> To convert this EDMX we need one of two packages mentioned earlier. We opt to install <CODE><a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a>/edmx2csn</CODE> into a skeleton NPM project locally.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=JjY2MC3kJgM&amp;t=45m35s" target="_blank" rel="nofollow noopener noreferrer">45:35</A> Looking at the metadata of the package with <CODE>npm info <a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a>/edmx2csn</CODE> before installing it with <CODE>npm i -D <a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a>/edmx2csn</CODE>.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=JjY2MC3kJgM&amp;t=46m50s" target="_blank" rel="nofollow noopener noreferrer">46:50</A> Exploring what weâve got inside <CODE>node_modules/</CODE> as a result of the package install, including the âbinaryâ (executable!) and its location and invocation options.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=JjY2MC3kJgM&amp;t=50m20s" target="_blank" rel="nofollow noopener noreferrer">50:20</A> Downloading the tutorial-specific, older version of <CODE>API_BUSINESS_PARTNER.json</CODE> to compare it with the one weâve just created with the <CODE>edmx2csn</CODE> tool, to see if itâs the same or if there are some differences.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=JjY2MC3kJgM&amp;t=53m40s" target="_blank" rel="nofollow noopener noreferrer">53:40</A> Using the excellent <A href="https://stedolan.github.io/jq/" target="_blank" rel="nofollow noopener noreferrer">jq</A> tool to format both the old and the new JSON CSN files so we can compare them properly, and it turns out that thereâs only a single (repeated) difference, in the end: part of the Cardinality is expressed now using âmaxâ rather than âtargetMaxâ. And thatâs it!<BR />
<BR />
<A href="https://www.youtube.com/watch?v=JjY2MC3kJgM&amp;t=58m10s" target="_blank" rel="nofollow noopener noreferrer">58:10</A> Come and see us in the Developer Garage next week if youâre at SAP TechEd in Barcelona, and perhaps pick up a #HandsOnSAPDev sticker when youâre there!
---
Submit suggestions for Tech Aloud during SAP TechEd 2019
SAP-TechEd-Groupblog-board
2019-10-04
https://community.sap.com/t5/sap-teched-blog-posts/submit-suggestions-for-tech-aloud-during-sap-teched-2019/ba-p/13388772
2019-10-04-submit-suggestions-for-tech-aloud-during-sap-teched-2019
<EM>Learn how you can submit suggestions for content to be included in the Tech Aloud podcast.</EM><BR />
<BR />
The Tech Aloud podcast is relatively new, and consists of blog posts &amp; articles read aloud for you to consume while on the go (who has time to read everything in their bookmark list?). You can read more about it in this post: <A href="https://blogs.sap.com/2019/09/18/tech-aloud-podcast-an-introduction/" target="_blank" rel="noopener noreferrer">Tech Aloud podcast â an introduction</A>.<BR />
<BR />
<STRONG>How I manage Tech Aloud</STRONG><BR />
<BR />
I use a project within a GitHub repo to manage the work needed to select, plan, record and publish episodes, and the repo is public: <A href="https://github.com/qmacro/tech-aloud" target="_blank" rel="nofollow noopener noreferrer">https://github.com/qmacro/tech-aloud</A>. The project is here: <A href="https://github.com/qmacro/tech-aloud/projects/1" target="_blank" rel="nofollow noopener noreferrer">Episodes</A>.<BR />
<BR />
You can see how the kanban style columns in the project reflect the workflow.<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2019/10/Screenshot-2019-10-04-at-14.23.30.png" /><BR />
<BR />
Each card you see reflects a blog post or article item that will become, or has already become, an episode. These items are in the form of issues, which I'm sure you're familiar with in the GitHub context.<BR />
<BR />
I create each of my issues in the same way, where the title has this format, reflecting the detail of the article or blog post:<BR />
<BR />
&lt;title&gt; - &lt;author&gt; - &lt;date&gt;<BR />
<BR />
The date will be anything from simply a year (especially for classic texts), a month &amp; year, or a full date with day-of-month too.<BR />
<BR />
In the body of the issue I put the source URL for the article or blog post, and then a short description (a sentence or two maximum) describing why I think it's a good candidate for the podcast.<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2019/10/Screenshot-2019-10-04-at-14.27.35.png" /><BR />
<BR />
And that's it. The issue appears first in the "Submitted" column in the project, and if I select it, it makes its way through "Planned" and "Recorded" to "Published" on the right, which signifies that it's actually live on the podcast as an episode.<BR />
<BR />
<STRONG>What makes a good candidate</STRONG><BR />
<BR />
Not all articles or blog posts are appropriate for the podcast. I have some objective criteria and some subjective criteria too.<BR />
<BR />
Objective criteria: Will it take more than 10-15 mins to read out / listen to? Are there pictures in there that if you can't see them it will be harder to understand in this audio-only medium? Is there program code (or other technical detail) that is hard to read out?<BR />
<BR />
Subjective criteria: Does it provide a good background or overview to a general technical topic related to development? If it's specific, is it relevant for today's developers? Is it what I would consider interesting?<BR />
<BR />
Any submission that generally tends towards "no" for the objective questions and "yes" for the subjective questions is a candidate for consideration. Anything else probably won't make it.<BR />
<BR />
<STRONG>What can you suggest?</STRONG><BR />
<BR />
As an experiment, for the duration of SAP TechEd 2019 (i.e. the three instances of this event, in Las Vegas, Barcelona and Bangalore), I invite you to submit candidate blog posts or articles for consideration. I would love to hear from you and see what you can come up with - I love that I'm always discovering fascinating things from my friends and colleagues.<BR />
<BR />
If you have a candidate blog post or article that you found interesting and think others will, and it fits the objective and subjective criteria as described above, please submit it by <A href="https://github.com/qmacro/tech-aloud/issues/new" target="_blank" rel="nofollow noopener noreferrer">creating an issue</A> in the repo, and I'll handle it from there. Don't worry about adding anything else at all to the issue, other than the title and the description, also making sure they are formatted as I've described above.<BR />
<BR />
I reserve the right to reject candidate submissions for technical or other reasons, but that's how it goes when you work in public, right? <span class="lia-unicode-emoji" title=":slightly_smiling_face:">ð</span><BR />
<BR />
I can't wait to see what you suggest!<BR />
<BR />
(Thanks to <SPAN class="mention-scrubbed">john.patterson5</SPAN> for being my submission guinea pig!)
---
Tech Aloud podcast - an introduction
technology-blog-sap
2019-09-18
https://community.sap.com/t5/technology-blogs-by-sap/tech-aloud-podcast-an-introduction/ba-p/13403583
2019-09-18-tech-aloud-podcast-an-introduction
<EM>I started a new podcast called Tech Aloud, where I read aloud blog posts and articles so you can consume them on the go. There's no specific theme to the episodes I've published so far ... or is there?</EM><BR />
<BR />
<A href="https://anchor.fm/tech-aloud" target="_blank" rel="nofollow noopener noreferrer">Tech Aloud</A> is a humble and simple new podcast that I've created to satisfy an itch - I wanted to use travel time to consume (in an audio format) articles and blog posts that I probably wouldn't otherwise get time to sit down read. There simply isn't enough time to keep up with all the interesting stuff that's published.<BR />
<BR />
There wasn't a podcast that did that, so I created one, as I'm sure there are folks amongst you that are like me and also want to consume more, on the go.<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2019/09/2310259-1568661278464-ed94fe70b513e.jpeg" height="216" width="216" /><BR />
<BR />
Anyway, you can read more about it here in this other post on my home blog: <A href="https://qmacro.org/2019/09/17/new-podcast-tech-aloud/" target="_blank" rel="nofollow noopener noreferrer">New podcast - Tech Aloud</A> which should tell you all you need to know, like how to subscribe (there's a growing list of podcast services there where it's already available), and a little bit more about the general idea.<BR />
<BR />
Including the short introductory episode, <A href="https://anchor.fm/tech-aloud/episodes/Welcome-to-Tech-Aloud-e5ddsh" target="_blank" rel="nofollow noopener noreferrer">Welcome to Tech Aloud</A>, I've recorded and published 6 episodes so far. I've dipped into my article &amp; blog post bookmarks and just recorded the first ones that jumped out at me. So there's definitely some randomness to what I've picked so far, from a practical perspective, but I've noticed a theme, or at least a relationship, amongst the episodes so far (this theme will change, I'm sure, over the subsequent episodes!) and thought I'd highlight it.<BR />
<BR />
Here are the titles of the first podcast episodes thus far, along with the original article or blog post sources:<BR />
<UL><BR />
 	<LI>?<A href="https://anchor.fm/tech-aloud/episodes/Its-Steampunk-now---Harald-Kuck---20-Aug-2019-e5de5m" target="_blank" rel="nofollow noopener noreferrer">Itâs Steampunk now - Harald Kuck - 20 Aug 2019</A><BR />
Source: <A href="https://blogs.sap.com/2019/08/20/its-steampunk-now/" target="_blank" rel="noopener noreferrer">https://blogs.sap.com/2019/08/20/its-steampunk-now/</A></LI><BR />
 	<LI>?<A href="https://anchor.fm/tech-aloud/episodes/The-Standard-of-Code-Review---Googles-Engineering-Practices-documentation-e5deiv" target="_blank" rel="nofollow noopener noreferrer">The Standard of Code Review - Google's Engineering Practices documentation</A><BR />
Source: <A href="https://google.github.io/eng-practices/review/reviewer/standard.html" target="_blank" rel="nofollow noopener noreferrer">https://google.github.io/eng-practices/review/reviewer/standard.html</A></LI><BR />
 	<LI>?<A href="https://anchor.fm/tech-aloud/episodes/Domain-Specific-Languages-Guide---Martin-Fowler---28-Aug-2019-e5do0b" target="_blank" rel="nofollow noopener noreferrer">Domain-Specific Languages Guide - Martin Fowler - 28 Aug 2019</A><BR />
Source: <A href="https://www.martinfowler.com/dsl.html" target="_blank" rel="nofollow noopener noreferrer">https://www.martinfowler.com/dsl.html</A></LI><BR />
 	<LI>?<A href="https://anchor.fm/tech-aloud/episodes/DSL-Q--A---Martin-Fowler---9-Sep-2008-e5do2c" target="_blank" rel="nofollow noopener noreferrer">DSL Q &amp; A - Martin Fowler - 9 Sep 2008</A><BR />
Source: <A href="https://www.martinfowler.com/bliki/DslQandA.html" target="_blank" rel="nofollow noopener noreferrer">https://www.martinfowler.com/bliki/DslQandA.html</A></LI><BR />
 	<LI>?<A href="https://anchor.fm/tech-aloud/episodes/The-Simplest-Thing-that-Could-Possibly-Work--A-conversation-with-Ward-Cunningham--Part-V---Bill-Venners-e5dpts" target="_blank" rel="nofollow noopener noreferrer">The Simplest Thing that Could Possibly Work, A conversation with Ward Cunningham, Part V - Bill Venners</A><BR />
Source: <A href="https://www.artima.com/intv/simplest.html" target="_blank" rel="nofollow noopener noreferrer">https://www.artima.com/intv/simplest.html</A></LI><BR />
</UL><BR />
I included <SPAN class="mention-scrubbed">harald.kuck</SPAN>'s specific post on Steampunk because it was something that I'd wanted to read soon but hadn't yet got round to. Nice work Harald and team!<BR />
<BR />
But the other articles are more general, and some are what I'd call classics.<BR />
<BR />
<A name="dsls" target="_blank"></A>The Domain Specific Language Q&amp;A from Martin Fowler is already over a decade old but still super relevant - perhaps even more relevant - today. I am mindful of internal DSLs almost every day, when I use the SAP Cloud Application Programming Model (CAP), specifically in the Node.js flavour. If you look at the source code of some of the core libraries, you'll find stylised JavaScript that can be considered, at least to some extent, an internal DSL.<BR />
<BR />
You don't even have to look behind the curtain of CAP Node.js to see an internal DSL standing proud - look at how the CDS Query Language (CQL) is made available almost as a "little language" within the JavaScript that you write inside of <A href="https://help.sap.com/viewer/65de2977205c403bbc107264b8eccf4b/Cloud/en-US/94c7b69cc4584a1a9dfd9cb2da295d5e.html" target="_blank" rel="noopener noreferrer">custom handlers</A>. There's a simple example of this in Step 10 of the <A href="https://developers.sap.com" target="_blank" rel="noopener noreferrer">developers.sap.com</A> tutorial <A href="https://developers.sap.com/tutorials/cp-apm-nodejs-create-service.html" target="_blank" rel="noopener noreferrer">Create a Business Service with Node.js using Visual Studio Code</A> (look at the UPDATE mechanism):<BR />
<PRE class="language-javascript"><CODE>module.exports = (srv) =&gt; {<BR />
<BR />
  const {Books} = cds.entities ('my.bookshop')<BR />
<BR />
  // Reduce stock of ordered books<BR />
  srv.before ('CREATE', 'Orders', async (req) =&gt; {<BR />
    const order = req.data<BR />
    if (!order.amount || order.amount &lt;= 0)  return req.error (400, 'Order at least 1 book')<BR />
    const tx = cds.transaction(req)<BR />
    const affectedRows = await tx.run (<BR />
      UPDATE (Books)<BR />
        .set   ({ stock: {'-=': order.amount}})<BR />
        .where ({ stock: {'&gt;=': order.amount},/*and*/ ID: order.book_ID})<BR />
    )<BR />
    if (affectedRows === 0)  req.error (409, "Sold out, sorry")<BR />
  })<BR />
<BR />
  // Add some discount for overstocked books<BR />
  srv.after ('READ', 'Books', each =&gt; {<BR />
    if (each.stock &gt; 111)  each.title += ' -- 11% discount!'<BR />
  })<BR />
<BR />
}</CODE></PRE><BR />
Moreover, for those forward thinking enough to embrace the CDS REPL (see my post <A href="https://blogs.sap.com/2018/03/26/monday-morning-thoughts-cloud-native/" target="_blank" rel="noopener noreferrer">Monday morning thoughts: cloud native</A> for more on REPLs), there's a rich seam of CDS API just ready to be mined - look at this tiny example from Getting Started - Define Services:<BR />
<PRE class="language-javascript"><CODE>cds.load('srv/cat-service') .then (cds.compile.to.edmx)</CODE></PRE><BR />
While not a complete internal DSL it sure feels like a language specifically designed to <STRONG>flow</STRONG>, especially in the way that it positively embraces and even celebrates whitespace.<BR />
<BR />
Talking of flow, the SAP Cloud SDK comes to mind. It has a wonderfully <A href="https://en.wikipedia.org/wiki/Fluent_interface" target="_blank" rel="nofollow noopener noreferrer">fluent interface</A> which you can see in this simple example (taken from a tutorial that will feature in one of this year's SAP TechEd App Space missions, so don't forget to come by the Developer Garage next week in Las Vegas!):<BR />
<PRE class="language-javascript"><CODE>BusinessPartnerAddress<BR />
        .requestBuilder()<BR />
        .getAll()<BR />
        .select(<BR />
                BusinessPartnerAddress.BUSINESS_PARTNER,<BR />
                BusinessPartnerAddress.ADDRESS_ID,<BR />
                BusinessPartnerAddress.CITY_NAME,<BR />
        )<BR />
        .execute({url:'http://localhost:3000/v2'})<BR />
        .then(xs =&gt; xs.map(x =&gt; x.cityName))<BR />
        .then(console.log)</CODE></PRE><BR />
Look at the way that chain of calls "flows" from one part to the next - some parts being provided by custom functions, others by language features such as 'then'.<BR />
<BR />
In a nice reference that completes the circuit loop, it may delight you to know that "fluent interface" was in fact co-coined by the author of the two items on DSLs that feature in the Tech Aloud episodes so far - <A href="https://martinfowler.com/" target="_blank" rel="nofollow noopener noreferrer">Martin Fowler</A>.<BR />
<BR />
Martin Fowler is one seriously big thinker. Another is Ward Cunningham (as one of my all-time heroes, I'd made it my mission to meet him at OSCON, which I did in 2003), inventor of the Wiki, and pioneer of design patterns and extreme programming (XP).<BR />
<BR />
There's a multi-part interview that <A href="https://twitter.com/bvenners" target="_blank" rel="nofollow noopener noreferrer">Bill Venners</A> did with Ward, and the conversation and thinking is wonderful. If you want to read more from that interview, find the other parts (I - IV) here: <A href="https://www.artima.com/intv/simplest.html" target="_blank" rel="nofollow noopener noreferrer">https://www.artima.com/intv/simplest.html</A>.<BR />
<BR />
And moving on from thinking about writing "the simplest thing that could possible work", how about reviewing it? This is where the Google Code Review standards come in. Google released to the public their Code Review guidelines very recently, and I was keen to take a look. So I've decided to read through each of the parts in <A href="https://google.github.io/eng-practices/review/reviewer/" target="_blank" rel="nofollow noopener noreferrer">How to do a code review</A>, as wisdom that we might all be able to learn from (in fact as we speak I've got the second part of that series waiting to publish on the podcast right now).<BR />
<BR />
Anyway, that's about it for now. Please consider subscribing to the <A href="https://anchor.fm/tech-aloud" target="_blank" rel="nofollow noopener noreferrer">Tech Aloud podcast</A> - it's already available for example on <A href="https://player.fm/series/tech-aloud" target="_blank" rel="nofollow noopener noreferrer">Player FM</A>, <A href="https://pca.st/kyepz7uy" target="_blank" rel="nofollow noopener noreferrer">Pocket Casts</A>, <A href="https://open.spotify.com/show/5l4AR3Q3HKZEpE7x9j0tdJ" target="_blank" rel="nofollow noopener noreferrer">Spotify</A>, <A href="https://tunein.com/podcasts/Technology-Podcasts/Tech-Aloud-p1251488/" target="_blank" rel="nofollow noopener noreferrer">TuneIn</A>, and (soon, fingers crossed!) Apple iTunes Podcasts. Of course, you can simply take the podcast RSS feed URL and plug it into your own favourite podcast player:<BR />
<BR />
<A href="https://anchor.fm/s/e5dc36c/podcast/rss" target="_blank" rel="nofollow noopener noreferrer">https://anchor.fm/s/e5dc36c/podcast/rss</A><BR />
<BR />
Thanks!<BR />
<BR />
&nbsp;
---
Happy Programmers Day!
welcome-cornerblog-board
2019-09-13
https://community.sap.com/t5/welcome-corner-blog-posts/happy-programmers-day/ba-p/13397057
2019-09-13-happy-programmers-day
<EM>Today is Programmers Day, and I take a moment to reflect on a couple of folks who have inspired me in my growth as a programmer.&nbsp;</EM><BR />
<BR />
Happy <A href="https://en.wikipedia.org/wiki/Day_of_the_Programmer" target="_blank" rel="nofollow noopener noreferrer">Programmers Day</A>! Today is the 256th day of the calendar year, and to those programmers amongst us, 256 is of course a significant number, in that it's the total number of different values that can be stored in 1 byte.<BR />
<BR />
In other words, in a single byte, a range of values between 0 and 255 can be stored, or more pertinently, in binary, that's a range of values between 00000000 and 11111111.<BR />
<BR />
So 256 is represented as 2^8, or 0x100. It's a nice enough round number to determine when to celebrate Programmers Day, right?<BR />
<BR />
If there's one thing programmers do, it's learn from each other. And speaking for myself, I've learned from so many other folks out there - whether that's from poring over their code line by line, listening to them give a talk, or reading one of their articles or blog posts.<BR />
<BR />
Moreover, there are a number of people who have really made an impact, and inspired me in ways that have never left me. These people have, directly or indirectly, changed the way I think, for the better.<BR />
<BR />
I was lucky enough to be asked to record a short video with my thoughts on this, and I picked out a couple of folks who came to mind immediately. There are many more, but one of the constraints is that this video had to be 60 seconds or less, so there you go.<BR />
<BR />
You can watch the video here: <A href="https://twitter.com/SAPCommunity/status/1172422213414244352" target="_blank" rel="nofollow noopener noreferrer">https://twitter.com/SAPCommunity/status/1172422213414244352</A><BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2019/09/Screenshot-2019-09-13-at-11.17.30.png" /><BR />
<BR />
I thought it might be useful to put the transcript here too, just in case you prefer to read. Here goes:<BR />
<BR />
<EM>Hello, my name's DJ Adams, and I'd like to talk about a couple of folks who've inspired me as a programmer ... to be constantly curious &amp; share knowledge about programming with others. I still enjoy doing that today, especially in my role as Developer Advocate at SAP.</EM><BR />
<BR />
<EM>The first is <A href="http://jonudell.net/" target="_blank" rel="nofollow noopener noreferrer">Jon Udell</A>, writer for the fabulous <A href="https://en.wikipedia.org/wiki/Byte_(magazine)" target="_blank" rel="nofollow noopener noreferrer">BYTE magazine</A>, author and big thinker. His approach to solving problems with software was amazing; I still remember the moment I read one of his articles about running a web server LOCALLY on a laptop, unheard of then. Now it's completely normal.</EM><BR />
<BR />
<EM>The second is <A href="http://www.stonehenge.com/merlyn/" target="_blank" rel="nofollow noopener noreferrer">Randal Schwartz</A>, the original "<A href="https://en.wikipedia.org/wiki/Just_another_Perl_hacker" target="_blank" rel="nofollow noopener noreferrer">Just Another Perl Hacker</A>". Through his articles in tech magazines back in the day, he taught me not only about Perl, but about Open Source, and showed me that sharing knowledge about programming is win-win.</EM><BR />
<BR />
<EM>Their writing and knowledge sharing are embedded in my DNA and influences what I do here at SAP.</EM><BR />
<BR />
Like I say at the end, I'd love to know who has inspired you, and why - please feel free to put your thoughts on that in the comments to this post, and perhaps even publish a post here on the SAP Community yourself. Let's use the hashtag #programmersday, too.<BR />
<BR />
Happy Programmers Day!
---
Computed field example in CAP
technology-blog-sap
2019-08-21
https://community.sap.com/t5/technology-blogs-by-sap/computed-field-example-in-cap/ba-p/13408603
2019-08-21-computed-field-example-in-cap
<EM>In this post, I show one way of using computed properties in CAP, using CDS and service events in Node.js.</EM><BR />
<BR />
Over in the <A href="https://answers.sap.com/tags/9f13aee1-834c-4105-8e43-ee442775e5ce" target="_blank" rel="noopener noreferrer">CAP section of the Community Q&amp;A</A>, <SPAN class="mention-scrubbed">pdominique-bio</SPAN> asked an interesting question that I thought I'd have a go at answering in the form of a short post. Here's the question: <A href="https://answers.sap.com/questions/12845830/counting-associated-entities-using-cds.html" target="_blank" rel="noopener noreferrer">Counting association entities using CDS</A> - go ahead and have a quick read of it, then come back here to find out one way of doing it.<BR />
<BR />
Given the bookshop sample data as a basis, how do we extend the service to include a property which indicates, for each author, how many books they have written?<BR />
<BR />
&nbsp;<BR />
<BR />
<STRONG>Step 1 - the definitions</STRONG><BR />
<BR />
Here's the basic schema. It's very similar to the example that Pierre gives, but doesn't have the extra 'numberOfBooks' property at this level - I wanted to give myself an extra challenge by not defining it at the data model layer, but defining it only at the service definition layer. If we're going to have a computed property, we should avoid having it pollute the space at the persistence layer.<BR />
<PRE class="language-javascript"><CODE>namespace my.bookshop;<BR />
<BR />
entity Books {<BR />
	key ID : Integer;<BR />
	title  : String;<BR />
	stock  : Integer;<BR />
	author : Association to Authors;<BR />
}<BR />
<BR />
entity Authors {<BR />
	key ID : Integer;<BR />
	name   : String;<BR />
	books  : Association to many Books on books.author = $self;<BR />
}</CODE></PRE><BR />
<EM>db/schema.cds</EM><BR />
<BR />
&nbsp;<BR />
<BR />
It's possible to add computed properties to an entity at the service definition level. Here's what the service definition looks like with a computed property for the requirement at hand:<BR />
<PRE class="language-javascript"><CODE>using my.bookshop as my from '../db/schema';<BR />
<BR />
service CatalogService {<BR />
<BR />
	entity Books as projection on my.Books;<BR />
	entity Authors as select from my.Authors {<BR />
		*,<BR />
		null as numberOfBooks: Integer<BR />
	};<BR />
<BR />
}</CODE></PRE><BR />
<EM>srv/service.cds</EM><BR />
<BR />
&nbsp;<BR />
<BR />
Notice the "as select from", as opposed to the simpler "as projection on". It allows us to specify properties, which is what we do in the block that follows:<BR />
<UL><BR />
 	<LI>the "*" brings in all the existing properties from the my.Authors definition</LI><BR />
 	<LI>then we define a new property "numberOfBooks" as an Integer type</LI><BR />
</UL><BR />
&nbsp;<BR />
<BR />
Let's take a moment to have a look what that produces. Running this at the command line:<BR />
<PRE class="language-javascript"><CODE>cds compile srv/service.cds --to sql</CODE></PRE><BR />
... gives us the schema definition, which includes these two views that have been generated from the two entities defined at the service level:<BR />
<PRE class="language-sql"><CODE>CREATE VIEW CatalogService_Authors AS SELECT<BR />
  Authors_0.ID,<BR />
  Authors_0.name,<BR />
  NULL AS numberOfBooks<BR />
FROM my_bookshop_Authors AS Authors_0;<BR />
<BR />
CREATE VIEW CatalogService_Books AS SELECT<BR />
  Books_0.ID,<BR />
  Books_0.title,<BR />
  Books_0.stock,<BR />
  Books_0.author_ID<BR />
FROM my_bookshop_Books AS Books_0;</CODE></PRE><BR />
Take note of the "numberOfBooks" property in the "CatalogService_Authors" view.<BR />
<BR />
While we're in the mood for looking at generated compilations, let's do the same, but this time see what the service definition will look like, in the form of Entity Data Model XML (EDMX) - which you and I know more comfortably as OData metadata.<BR />
<BR />
Running this at the command line:<BR />
<PRE class="language-javascript"><CODE>cds compile srv/service.cds --to edmx</CODE></PRE><BR />
... gives us this:<BR />
<PRE class="language-markup"><CODE>&lt;?xml version="1.0" encoding="utf-8"?&gt;<BR />
&lt;edmx:Edmx Version="4.0" xmlns:edmx="http://docs.oasis-open.org/odata/ns/edmx"&gt;<BR />
  &lt;edmx:Reference Uri="https://oasis-tcs.github.io/odata-vocabularies/vocabularies/Org.OData.Core.V1.xml"&gt;<BR />
    &lt;edmx:Include Alias="Core" Namespace="Org.OData.Core.V1"/&gt;<BR />
  &lt;/edmx:Reference&gt;<BR />
  &lt;edmx:DataServices&gt;<BR />
    &lt;Schema Namespace="CatalogService" xmlns="http://docs.oasis-open.org/odata/ns/edm"&gt;<BR />
      &lt;EntityContainer Name="EntityContainer"&gt;<BR />
        &lt;EntitySet Name="Authors" EntityType="CatalogService.Authors"&gt;<BR />
          &lt;NavigationPropertyBinding Path="books" Target="Books"/&gt;<BR />
        &lt;/EntitySet&gt;<BR />
        &lt;EntitySet Name="Books" EntityType="CatalogService.Books"&gt;<BR />
          &lt;NavigationPropertyBinding Path="author" Target="Authors"/&gt;<BR />
        &lt;/EntitySet&gt;<BR />
      &lt;/EntityContainer&gt;<BR />
      &lt;EntityType Name="Authors"&gt;<BR />
        &lt;Key&gt;<BR />
          &lt;PropertyRef Name="ID"/&gt;<BR />
        &lt;/Key&gt;<BR />
        &lt;Property Name="ID" Type="Edm.Int32" Nullable="false"/&gt;<BR />
        &lt;Property Name="name" Type="Edm.String"/&gt;<BR />
        &lt;NavigationProperty Name="books" Type="Collection(CatalogService.Books)" Partner="author"/&gt;<BR />
        &lt;Property Name="numberOfBooks" Type="Edm.Int32"/&gt;<BR />
      &lt;/EntityType&gt;<BR />
      &lt;EntityType Name="Books"&gt;<BR />
        &lt;Key&gt;<BR />
          &lt;PropertyRef Name="ID"/&gt;<BR />
        &lt;/Key&gt;<BR />
        &lt;Property Name="ID" Type="Edm.Int32" Nullable="false"/&gt;<BR />
        &lt;Property Name="title" Type="Edm.String"/&gt;<BR />
        &lt;Property Name="stock" Type="Edm.Int32"/&gt;<BR />
        &lt;NavigationProperty Name="author" Type="CatalogService.Authors" Partner="books"&gt;<BR />
          &lt;ReferentialConstraint Property="author_ID" ReferencedProperty="ID"/&gt;<BR />
        &lt;/NavigationProperty&gt;<BR />
        &lt;Property Name="author_ID" Type="Edm.Int32"/&gt;<BR />
      &lt;/EntityType&gt;<BR />
      &lt;Annotations Target="CatalogService.Authors/numberOfBooks"&gt;<BR />
        &lt;Annotation Term="Core.Computed" Bool="true"/&gt;<BR />
      &lt;/Annotations&gt;<BR />
    &lt;/Schema&gt;<BR />
  &lt;/edmx:DataServices&gt;<BR />
&lt;/edmx:Edmx&gt;</CODE></PRE><BR />
There's one thing in there that's of particular interest - the annotation of this new property. You can either stare at this XML until you see it, or just look at it as extracted from that sea of angle brackets:<BR />
<PRE class="language-markup"><CODE>&lt;Annotations Target="CatalogService.Authors/numberOfBooks"&gt;<BR />
  &lt;Annotation Term="Core.Computed" Bool="true"/&gt;<BR />
&lt;/Annotations&gt;</CODE></PRE><BR />
This has been automatically generated from that simple service definition earlier. Thanks, CAP!<BR />
<BR />
&nbsp;<BR />
<BR />
<STRONG>Step 2 - the implementation</STRONG><BR />
<BR />
Implementing the logic to provide values for this computed property is next up. As you may know, we can <A href="https://help.sap.com/viewer/65de2977205c403bbc107264b8eccf4b/Cloud/en-US/94c7b69cc4584a1a9dfd9cb2da295d5e.html" target="_blank" rel="noopener noreferrer">provide custom logic in the form of functions attached to specific events</A> in the request/response lifecycle as OData operations are processed, and in a very comfortable way, via the "<A href="https://en.wikipedia.org/wiki/Convention_over_configuration" target="_blank" rel="nofollow noopener noreferrer">convention over configuration</A>" approach of simply providing a JavaScript file of the same base name as the service definition file, in the same directory.<BR />
<BR />
The Node.js CAP runtime will then discover this file and use it as extra (or overriding) implementation logic. This is what it looks like:<BR />
<PRE class="language-javascript"><CODE>module.exports = srv =&gt; {<BR />
<BR />
  const { Books } = srv.entities<BR />
<BR />
  srv.after('READ', 'Authors', (authors, req) =&gt; {<BR />
<BR />
    return authors.map(async author =&gt; {<BR />
      const publications = await cds.transaction(req).run(<BR />
        SELECT .from(Books) .where({ author_ID: author.ID })<BR />
      )<BR />
      author.numberOfBooks = publications.length<BR />
    })<BR />
<BR />
  })<BR />
<BR />
}</CODE></PRE><BR />
<EM>srv/service.js</EM><BR />
<BR />
(In case you're wondering: yes, I am trying to avoid semicolons and double quotes, and yes, I like the ES6 fat arrow syntax for functional style, and no, I am not writing and will not write any "class" based code here - in my opinion the whole "object orientation comes to JS" is the wrong direction entirely. Stick <EM>that</EM> in your pipe and smoke it! :-))<BR />
<BR />
Anyway, here's what's going on in the code:<BR />
<UL><BR />
 	<LI>we grab the Books entity from within the service object</LI><BR />
 	<LI>we hook in a function to be called when READ requests are processed on the Authors entity, specifically after the main part of the request has been fulfilled (i.e. using srv.after)</LI><BR />
 	<LI>that function expects the results of the request fulfilment (i.e. the author(s) retrieved), plus the original request object, from which we can create a context in which to run a CDS query</LI><BR />
 	<LI>the query is within a map function over the authors retrieved, and goes to get the books for that author</LI><BR />
</UL><BR />
The CDS query is made using the CDS Query Language (CQL) fluent API, which I've tried to illustrate with some gratuitous whitespace (before .from and .where, in particular).<BR />
<BR />
Once the value for "numberOfBooks" has been computed and assigned, we simply "let go" and the enhanced result set is returned in the response.<BR />
<BR />
&nbsp;<BR />
<BR />
<STRONG>Step 3 - profit!</STRONG><BR />
<BR />
Here's what this results in, after deploying the definitions and starting the service (I have a few books and authors in some sample CSV files):<BR />
<PRE class="language-javascript"><CODE>=&gt; cds deploy &amp;&amp; cds run<BR />
 &gt; filling my.bookshop.Authors from db/csv/my.bookshop-Authors.csv<BR />
 &gt; filling my.bookshop.Books from db/csv/my.bookshop-Books.csv<BR />
/&gt; successfully deployed database to ./bookshop.db<BR />
<BR />
[cds] - connect to datasource - sqlite:bookshop.db<BR />
[cds] - serving CatalogService at /catalog - impl: service.js<BR />
[cds] - service definitions loaded from:<BR />
<BR />
  srv/service.cds<BR />
  db/schema.cds<BR />
<BR />
[cds] - server listens at <A href="http://localhost:4004" target="test_blank" rel="nofollow noopener noreferrer">http://localhost:4004</A> ... (terminate with ^C)<BR />
[cds] - launched in: 1126.872ms</CODE></PRE><BR />
And here's some sample output, retrieved with "curl" and nicely pretty-printed with "jq" (yes, folks, this is all in a terminal, ON THE COMMAND LINE)*:<BR />
<PRE class="language-javascript"><CODE>=&gt; curl -s <A href="http://localhost:4004/catalog/Authors" target="test_blank" rel="nofollow noopener noreferrer">http://localhost:4004/catalog/Authors</A> | jq<BR />
{<BR />
  "@odata.context": "$metadata#Authors",<BR />
  "@odata.metadataEtag": "W/\"8q5jjLD6vJ0ARrjnkajTONXIn38vpa1wxoXucua4kzU=\"",<BR />
  "value": [<BR />
    {<BR />
      "ID": 42,<BR />
      "name": "Douglas Adams",<BR />
      "numberOfBooks": 3<BR />
    },<BR />
    {<BR />
      "ID": 101,<BR />
      "name": "Emily BrontÃ«",<BR />
      "numberOfBooks": 1<BR />
    },<BR />
    {<BR />
      "ID": 107,<BR />
      "name": "Charlote BrontÃ«",<BR />
      "numberOfBooks": 1<BR />
    },<BR />
    {<BR />
      "ID": 150,<BR />
      "name": "Edgar Allen Poe",<BR />
      "numberOfBooks": 2<BR />
    },<BR />
    {<BR />
      "ID": 170,<BR />
      "name": "Richard Carpenter",<BR />
      "numberOfBooks": 1<BR />
    }<BR />
  ]<BR />
}</CODE></PRE><BR />
&nbsp;<BR />
<BR />
That's pretty much all there is to it, at least as far as I can see. I hope you find this useful. I had fun writing it, thanks Pierre for a good question.<BR />
<BR />
&nbsp;<BR />
<BR />
*i.e. the future
---
Annotated links: Episode 28 of Hands-on SAP dev with qmacro
technology-blog-sap
2019-07-11
https://community.sap.com/t5/technology-blogs-by-sap/annotated-links-episode-28-of-hands-on-sap-dev-with-qmacro/ba-p/13399163
2019-07-11-annotated-links-episode-28-of-hands-on-sap-dev-with-qmacro
<EM>This is a searchable description of the content of a live stream recording, specifically <STRONG>âEpisode 28 - Digging into Workflow user task UIsâ</STRONG> in the â<A href="https://bit.ly/handsonsapdev" target="_blank" rel="nofollow noopener noreferrer">Hands-on SAP dev with qmacro</A>â series. There are links directly to specific highlights in the video recording. For links to annotations of other episodes, please see the â<A href="https://bit.ly/handsonsapdev#replays" target="_blank" rel="nofollow noopener noreferrer">Catch the replays</A>â section of the series blog post.</EM><BR />
<BR />
This episode, titled â<A href="https://bit.ly/handsonsapdev#ep28" target="_blank" rel="nofollow noopener noreferrer">Digging into Workflow user task UIs</A>â, was streamed live on Wed 05 Jun 2019 and is approximately one hour in length. The stream recording is <A href="https://www.youtube.com/watch?v=anfNCr-WYDk&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0" target="_blank" rel="nofollow noopener noreferrer">available on YouTube</A>.<BR />
<BR />
<SPAN style="text-decoration: underline"><IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2019/07/Screenshot-2019-07-11-at-18.15.49.jpg" /></SPAN><BR />
<BR />
Below is a brief synopsis, and links to specific highlights - use these links to jump directly to particular places of interest in the recording, based on âhh:mm:ssâ style timestamps.<BR />
<H2 id="brief-synopsis" id="toc-hId-908690877">Brief synopsis</H2><BR />
Continuing on from the previous episode, we dig in a little deeper to user task UIs, looking at the Workflow API and task info, as well as the My Inbox API, to understand how the generic UI component actually works.<BR />
<H2 id="links-to-specific-highlights" id="toc-hId-712177372">Links to specific highlights</H2><BR />
<STRONG><A href="https://www.youtube.com/watch?v=anfNCr-WYDk&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h02m50s" target="_blank" rel="nofollow noopener noreferrer">00:02:50</A>:</STRONG> Mentioning <A href="https://community.sap.com/Graham%20Robinson's" target="_blank" rel="nofollow noopener noreferrer">https://people.sap.com/grahamrobinson</A> <A href="https://www.asug.com/events/test-driven-development-with-abap" target="_blank" rel="nofollow noopener noreferrer">Test-Driven Development with ABAP</A> webinar which was to take place directly after this live stream episode - obviously itâs over now, but you should definitely search for the recording and check it out if you can.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=anfNCr-WYDk&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h03m55s" target="_blank" rel="nofollow noopener noreferrer">00:03:55</A>:</STRONG> Looking briefly at a tweet via <SPAN class="mention-scrubbed">john.patterson5</SPAN> at a blog post that was doing what Iâve seen others do before, which is to treat an OData service as a plain JSON endpoint, which technically you can do, but probably you donât really want to be doing. In a great way, community member <SPAN class="mention-scrubbed">uxkjaer</SPAN> provides some helpful hints and even some <A href="https://github.com/kovboyjder/BASIC_CRUD_COMMUNITY" target="_blank" rel="nofollow noopener noreferrer">sample code</A> to nudge the blog post author in the right direction. Nice work Jakob!<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=anfNCr-WYDk&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h07m28s" target="_blank" rel="nofollow noopener noreferrer">00:07:28</A>:</STRONG> Talking about the recent news that Apple will replace the default <A href="https://en.wikipedia.org/wiki/Bash_(Unix_shell)" target="_blank" rel="nofollow noopener noreferrer">Bash shell</A> with the <A href="https://en.wikipedia.org/wiki/Z_shell" target="_blank" rel="nofollow noopener noreferrer">Z shell</A> in upcoming releases of macOS, noting that they have different licences, which may be part of the reason for the move on Appleâs part.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=anfNCr-WYDk&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h09m45s" target="_blank" rel="nofollow noopener noreferrer">00:09:45</A>:</STRONG> Looking at where we left off <A href="https://bit.ly/handsonsapdev#ep27" target="_blank" rel="nofollow noopener noreferrer">last time</A>, which is that weâre at the stage where we have a service task and a user task in the definition of the workflow that weâre building in the SAP Web IDE.<BR />
<BR />
We have a running workflow instance, with a user task waiting for us in My Inbox, referencing product HT-1000, but (as we remember from the end of the previous episode), we note that the breakpoint weâd set wasnât being reached.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=anfNCr-WYDk&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h14m13s" target="_blank" rel="nofollow noopener noreferrer">00:14:13</A>:</STRONG> Starting to figure out why the breakpoint wasnât being reached, as well as looking at the bindings in the view, and what they are - there are bindings to the default model and to the âappâ model.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=anfNCr-WYDk&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h16m10s" target="_blank" rel="nofollow noopener noreferrer">00:16:10</A>:</STRONG> In looking at the component startup, I mention that thereâs a specific blog post on this topic in my â<A href="https://qmacro.org/2018/01/16/discovering-SAP%20Cloud%20Platform-workflow/" target="_blank" rel="nofollow noopener noreferrer">Discovering SCP Workflow</A>â series - called <A href="https://blogs.sap.com/2018/01/22/discovering-SAP%20Cloud%20Platform-workflow-component-startup/" target="_blank" rel="noopener noreferrer">Component Startup</A>.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=anfNCr-WYDk&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h20m50s" target="_blank" rel="nofollow noopener noreferrer">00:20:50</A>:</STRONG> In the course of debugging, we look briefly at the documentation for the actual Workflow API we are using, which is available on the SAP API Business Hub: <A href="https://api.sap.com/api/SAP_CP_Workflow/resource" target="_blank" rel="noopener noreferrer">Workflow API for Neo</A> - the actual resource weâre retrieving is this one:<BR />
<PRE><CODE>/v1/task-instances/{taskInstanceId}/context</CODE></PRE><BR />
<STRONG><A href="https://www.youtube.com/watch?v=anfNCr-WYDk&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h23m21s" target="_blank" rel="nofollow noopener noreferrer">00:23:21</A>:</STRONG> It turns out that the breakpoint wasnât being reached as there were some undefined values that were needed. So at this stage we add a script task to the workflow definition to specify those values.<BR />
<BR />
Having inserted the script task before the user task, we comment out the sample code inside it and specify the following, based on analysis of whatâs required:<BR />
<DIV><BR />
<PRE class="sourceCode javascript"><CODE class="sourceCode javascript"><SPAN id="cb2-1"><SPAN class="va">$</SPAN>.<SPAN class="va">context</SPAN>.<SPAN class="at">genericusertask</SPAN> <SPAN class="op">=</SPAN> <SPAN class="op">{</SPAN></SPAN><BR />
<SPAN id="cb2-2">  <SPAN class="dt">control</SPAN><SPAN class="op">:</SPAN> <SPAN class="op">{</SPAN></SPAN><BR />
<SPAN id="cb2-3">    <SPAN class="dt">source</SPAN><SPAN class="op">:</SPAN> <SPAN class="st">"/productdata/d"</SPAN><SPAN class="op">,</SPAN></SPAN><BR />
<SPAN id="cb2-4">    <SPAN class="dt">properties</SPAN><SPAN class="op">:</SPAN> [ <SPAN class="st">"Name"</SPAN><SPAN class="op">,</SPAN> <SPAN class="st">"StockQuantity"</SPAN><SPAN class="op">,</SPAN> <SPAN class="st">"AverageRating"</SPAN> ]</SPAN><BR />
<SPAN id="cb2-5"><SPAN class="op">}</SPAN></SPAN></CODE></PRE><BR />
</DIV><BR />
<STRONG><A href="https://www.youtube.com/watch?v=anfNCr-WYDk&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h28m28s" target="_blank" rel="nofollow noopener noreferrer">00:28:28</A>:</STRONG> We create a new instance of the workflow definition to test this out (obviously, because the existing instance doesnât have this required data in its context).<BR />
<BR />
This time we see that the breakpoints are indeed reached, and on continuing, the task UI correctly shows what weâre expecting, i.e.&nbsp;the data from the three product properties. Nice!<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=anfNCr-WYDk&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h30m20s" target="_blank" rel="nofollow noopener noreferrer">00:30:20</A>:</STRONG> A quick digression into something we talked about in the previous episode, i.e.&nbsp;why JSON representations of OData start with âdâ. Basically, the focus is not on the choice of âdâ for the property name, itâs on the choice of actually embedding the real data within an object (a map) in the resource returned, to foil attempts at cross-site scripting attacks.<BR />
<BR />
For more information about this, see the section âJSON Representationsâ in the <A href="https://www.odata.org/documentation/odata-version-2-0/json-format/" target="_blank" rel="nofollow noopener noreferrer">JSON Format (OData Version 2.0)</A> documentation.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=anfNCr-WYDk&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h33m10s" target="_blank" rel="nofollow noopener noreferrer">00:33:10</A>:</STRONG> We now switch back to the <A href="https://api.sap.com/api/SAP_CP_Workflow/resource" target="_blank" rel="noopener noreferrer">Workflow API home</A> on the SAP API Business Hub, to see if we can work out how to find the workflow instance thatâs still running.<BR />
<BR />
While thereâs a sandbox API environment to try things out on generically, you can also define your own environments, and thatâs what we do here, to reflect our SAP Cloud Platform trial subaccount.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=anfNCr-WYDk&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h36m43s" target="_blank" rel="nofollow noopener noreferrer">00:36:43</A>:</STRONG> We first make a more general call to the <CODE>/v1/task-instances</CODE> endpoint to list all of our workflow instances (included those already in âCompletedâ status, for example).<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=anfNCr-WYDk&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h37m35s" target="_blank" rel="nofollow noopener noreferrer">00:37:35</A>:</STRONG> Itâs worth at this stage trying the API out directly (i.e.&nbsp;not within the SAP API Business Hub), and what better way than to use <A href="https://curl.haxx.se/" target="_blank" rel="nofollow noopener noreferrer">curl</A>. It turns out that curl supports the <CODE>.netrc</CODE> standard (for storing and using authentication details), which you can read about here: <A class="uri" href="https://ec.haxx.se/usingcurl-netrc.html" target="_blank" rel="nofollow noopener noreferrer">https://ec.haxx.se/usingcurl-netrc.html</A>.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=anfNCr-WYDk&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h39m48s" target="_blank" rel="nofollow noopener noreferrer">00:39:48</A>:</STRONG> We invoke curl against the <CODE>/v1/task-instances</CODE> endpoint thus (lines only split for readability):<BR />
<PRE><CODE>curl -n<BR />
  "https://bpmworkflowruntimewfs-p2001351149trial.hanatrial.ondemand.com<BR />
  /workflow-service/rest/v1/task-instances?<BR />
  %24skip=0&amp;<BR />
  %24top=100&amp;<BR />
  %24inlinecount=none&amp;<BR />
  %24orderby=createdAt%20asc"</CODE></PRE><BR />
We get all sorts of data back, albeit in a way thatâs hard to read as a human.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=anfNCr-WYDk&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h40m45s" target="_blank" rel="nofollow noopener noreferrer">00:40:45</A>:</STRONG> So, enter <A href="https://stedolan.github.io/jq/" target="_blank" rel="nofollow noopener noreferrer"><CODE>jq</CODE></A>, which is described as a âlightweight and flexible command-line JSON processorâ. Iâve mentioned <CODE>jq</CODE> before and even recorded a short video on it: â<A href="https://www.youtube.com/watch?v=yI5IQooQzW4" target="_blank" rel="nofollow noopener noreferrer">Using jq to parse out SCP destination info</A>â. This will enable us to more easily read the JSON output and pull data from it.<BR />
<BR />
We start first with âthe simplest thing that could possible workâ* and pipe the output from <CODE>curl</CODE> into <CODE>jq</CODE>:<BR />
<PRE><CODE>curl -n<BR />
  "https://bpmworkflowruntimewfs-p2001351149trial.hanatrial.ondemand.com<BR />
  /workflow-service/rest/v1/task-instances?<BR />
  %24skip=0&amp;<BR />
  %24top=100&amp;<BR />
  %24inlinecount=none&amp;<BR />
  %24orderby=createdAt%20asc" | jq</CODE></PRE><BR />
<BLOCKQUOTE>*one of my favourite phrases, coined, or at least <A href="http://wiki.c2.com/?DoTheSimplestThingThatCouldPossiblyWork" target="_blank" rel="nofollow noopener noreferrer">nurtured</A> by that hero of great technology and thinking, <A href="https://en.wikipedia.org/wiki/Ward_Cunningham" target="_blank" rel="nofollow noopener noreferrer">Ward Cunningham</A> (who, amongst other things, is the father of the Wiki).</BLOCKQUOTE><BR />
This gives us a much more readable layout:<BR />
<DIV><BR />
<PRE class="sourceCode json"><CODE class="sourceCode json"><SPAN id="cb5-1"><SPAN class="ot">[</SPAN></SPAN><BR />
<SPAN id="cb5-2">  <SPAN class="fu">{</SPAN></SPAN><BR />
<SPAN id="cb5-3">    <SPAN class="dt">"activityId"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="st">"usertask1"</SPAN><SPAN class="fu">,</SPAN></SPAN><BR />
<SPAN id="cb5-4">    <SPAN class="dt">"claimedAt"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="kw">null</SPAN><SPAN class="fu">,</SPAN></SPAN><BR />
<SPAN id="cb5-5">    <SPAN class="dt">"completedAt"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="st">"2019-05-30T10:15:29.119Z"</SPAN><SPAN class="fu">,</SPAN></SPAN><BR />
<SPAN id="cb5-6">    <SPAN class="dt">"createdAt"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="st">"2019-05-30T09:28:32.853Z"</SPAN><SPAN class="fu">,</SPAN></SPAN><BR />
<SPAN id="cb5-7">    <SPAN class="dt">"description"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="st">"Please review this request for 25 of stock item Notebook Basic 19."</SPAN><SPAN class="fu">,</SPAN></SPAN><BR />
<SPAN id="cb5-8">    <SPAN class="dt">"id"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="st">"4ae5e1b5-82bd-11e9-9df2-00163e8e2888"</SPAN><SPAN class="fu">,</SPAN></SPAN><BR />
<SPAN id="cb5-9">    <SPAN class="dt">"processor"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="kw">null</SPAN><SPAN class="fu">,</SPAN></SPAN><BR />
<SPAN id="cb5-10">    <SPAN class="dt">"recipientUsers"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="ot">[</SPAN></SPAN><BR />
<SPAN id="cb5-11">      <SPAN class="st">"P2001351149"</SPAN></SPAN><BR />
<SPAN id="cb5-12">    <SPAN class="ot">]</SPAN><SPAN class="fu">,</SPAN></SPAN><BR />
<SPAN id="cb5-13">    <SPAN class="dt">"recipientGroups"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="ot">[]</SPAN><SPAN class="fu">,</SPAN></SPAN><BR />
<SPAN id="cb5-14">    <SPAN class="dt">"status"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="st">"CANCELED"</SPAN><SPAN class="fu">,</SPAN></SPAN><BR />
<SPAN id="cb5-15">    <SPAN class="dt">"subject"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="st">"Request for Notebook Basic 19"</SPAN><SPAN class="fu">,</SPAN></SPAN><BR />
<SPAN id="cb5-16">    <SPAN class="dt">"workflowDefinitionId"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="st">"orderprocess"</SPAN><SPAN class="fu">,</SPAN></SPAN><BR />
<SPAN id="cb5-17">    <SPAN class="dt">"workflowInstanceId"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="st">"49075dac-82bd-11e9-9df2-00163e8e2888"</SPAN><SPAN class="fu">,</SPAN></SPAN><BR />
<SPAN id="cb5-18">    <SPAN class="dt">"priority"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="st">"MEDIUM"</SPAN><SPAN class="fu">,</SPAN></SPAN><BR />
<SPAN id="cb5-19">    <SPAN class="dt">"dueDate"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="kw">null</SPAN><SPAN class="fu">,</SPAN></SPAN><BR />
<SPAN id="cb5-20">    <SPAN class="dt">"createdBy"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="st">"P2001351149"</SPAN><SPAN class="fu">,</SPAN></SPAN><BR />
<SPAN id="cb5-21">    <SPAN class="dt">"definitionId"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="st">"usertask1@orderprocess"</SPAN><SPAN class="fu">,</SPAN></SPAN><BR />
<SPAN id="cb5-22">    <SPAN class="dt">"lastChangedAt"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="st">"2019-05-30T10:15:29.119Z"</SPAN></SPAN><BR />
<SPAN id="cb5-23">  <SPAN class="fu">}</SPAN><SPAN class="ot">,</SPAN></SPAN><BR />
<SPAN id="cb5-24">  <SPAN class="fu">{</SPAN></SPAN><BR />
<SPAN id="cb5-25">    <SPAN class="dt">"activityId"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="st">"usertask1"</SPAN><SPAN class="fu">,</SPAN></SPAN><BR />
<SPAN id="cb5-26">    <SPAN class="dt">"claimedAt"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="kw">null</SPAN><SPAN class="fu">,</SPAN></SPAN><BR />
<SPAN id="cb5-27">    <SPAN class="dt">"completedAt"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="st">"2019-05-30T10:15:21.280Z"</SPAN><SPAN class="fu">,</SPAN></SPAN><BR />
<SPAN id="cb5-28">    <SPAN class="dt">"createdAt"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="st">"2019-05-30T09:34:57.591Z"</SPAN><SPAN class="fu">,</SPAN></SPAN><BR />
<SPAN id="cb5-29">    <SPAN class="dt">"..."</SPAN><SPAN class="fu">:</SPAN> <SPAN class="st">"..."</SPAN></SPAN><BR />
<SPAN id="cb5-30">  <SPAN class="fu">}</SPAN></SPAN><BR />
<SPAN id="cb5-31"><SPAN class="ot">]</SPAN></SPAN></CODE></PRE><BR />
</DIV><BR />
<STRONG><A href="https://www.youtube.com/watch?v=anfNCr-WYDk&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h43m20s" target="_blank" rel="nofollow noopener noreferrer">00:43:20</A>:</STRONG> As weâve digressed slightly to look at <CODE>jq</CODE>, we might as well digress a little further and have a look at involving the excellent <CODE>fzf</CODE> which in fact we did look at briefly in <A href="http://bit.ly/handsonsapdev#ep1" target="_blank" rel="nofollow noopener noreferrer">Ep.1</A>!<BR />
<BR />
First, we supply <CODE>jq</CODE> with some instructions, thus (noting the addition of the <CODE>-r</CODE> parameter to ask for ârawâ output that will honour the â<CODE>\\t</CODE>â tab characters):<BR />
<PRE><CODE>jq -r '.[] | "\(.id)\t\(.status)\t\(.subject)"'</CODE></PRE><BR />
This gives us:<BR />
<PRE><CODE>4ae5e1b5-82bd-11e9-9df2-00163e8e2888  CANCELED  Request for Notebook Basic 19<BR />
3037056b-82be-11e9-9df2-00163e8e2888  CANCELED  Request for Notebook Basic 19<BR />
bde70c73-82c3-11e9-9df2-00163e8e2888  CANCELED  Request for Notebook Basic 19<BR />
e05c9cd0-82c3-11e9-9df2-00163e8e2888  CANCELED  Request for Notebook Basic 19<BR />
2125625c-82cf-11e9-9df2-00163e8e2888  COMPLETED  Request for Notebook Basic 19<BR />
84c1b859-82cf-11e9-9df2-00163e8e2888  COMPLETED  Request for Notebook Basic 19<BR />
e54a0188-8377-11e9-a4b8-00163e8e2aef  COMPLETED  The Notebook Basic 15 !<BR />
b7d42a9d-8378-11e9-a4b8-00163e8e2aef  CANCELED  The Notebook Basic 15 !<BR />
0839d7ed-82c4-11e9-9df2-00163e8e2888  READY  Request for Notebook Basic 19</CODE></PRE><BR />
This allows us to search quickly for the items given, say, a status criteria.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=anfNCr-WYDk&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h46m40s" target="_blank" rel="nofollow noopener noreferrer">00:46:40</A>:</STRONG> We go one step further now to use <CODE>cut</CODE> to modify what <CODE>fzf</CODE> gives us, thus:<BR />
<PRE><CODE>jq -r '.[] | "\(.id)\t\(.status)\t\(.subject)"' | cut -f1</CODE></PRE><BR />
to give us just the ID of the item selected. Lovely.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=anfNCr-WYDk&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h48m00s" target="_blank" rel="nofollow noopener noreferrer">00:48:00</A>:</STRONG> Moving on to what we really want to do, which is to modify the status of an instance, we look at the following API endpoint (and method):<BR />
<PRE><CODE>PATCH /v1/task-instances/{taskInstanceId}</CODE></PRE><BR />
In order to make an API call that has side effects, we need a Cross Site Request Forgery (CSRF) token, and we can retrieve one with another Workflow API endpoint:<BR />
<PRE><CODE>GET /v1/xsrf-token</CODE></PRE><BR />
<STRONG><A href="https://www.youtube.com/watch?v=anfNCr-WYDk&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h51m15s" target="_blank" rel="nofollow noopener noreferrer">00:51:15</A>:</STRONG> So we do that, using <CODE>curl</CODE> in a script (called âfetchâ) like this (we could just write the whole thing out on the command line, but having it in a script like this makes it easier to remember and modify):<BR />
<PRE><CODE>#!/bin/bash<BR />
<BR />
USER=p2001351149<BR />
<BR />
curl \<BR />
        --netrc \<BR />
        --header "X-CSRF-Token: Fetch" \<BR />
        --cookie-jar cookiejar.dat \<BR />
        --verbose \<BR />
        <A href="https://bpmworkflowruntimewfs-${USER}trial.hanatrial.ondemand.com/workflow-service/rest/v1/xsrf-token" target="test_blank" rel="nofollow noopener noreferrer">https://bpmworkflowruntimewfs-${USER}trial.hanatrial.ondemand.com/workflow-service/rest/v1/xsrf-token</A></CODE></PRE><BR />
Running this gives us back a token in the X-CSRF-Token header in the HTTP response, a token that we then save in an environmental variable:<BR />
<PRE class="shell"><CODE>export CSRFTOKEN=...</CODE></PRE><BR />
<STRONG><A href="https://www.youtube.com/watch?v=anfNCr-WYDk&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h52m15s" target="_blank" rel="nofollow noopener noreferrer">00:52:15</A>:</STRONG> This is then referenced in a second script âpostâ, that looks like this:<BR />
<PRE><CODE>#!/bin/bash<BR />
<BR />
USER=p2001351149<BR />
<BR />
curl \<BR />
        --netrc \<BR />
        --header "Content-Type: application/json" \<BR />
        --header "X-CSRF-Token: $CSRFTOKEN" \<BR />
        --cookie cookiejar.dat \<BR />
        --request PATCH \<BR />
        --verbose \<BR />
        --data @data.json \<BR />
        <A href="https://bpmworkflowruntimewfs-${USER}trial.hanatrial.ondemand.com/workflow-service/rest/v1/task-instances/&lt;task-instance-id&gt;" target="test_blank" rel="nofollow noopener noreferrer">https://bpmworkflowruntimewfs-${USER}trial.hanatrial.ondemand.com/workflow-service/rest/v1/task-instances/&lt;task-instance-id&gt;</A>;</CODE></PRE><BR />
(where <CODE>&lt;task-instance-id&gt;</CODE> is the ID of the task instance for which we want to modify the priority).<BR />
<BR />
The content of the <CODE>data.json</CODE> file referred to in the <CODE>--data</CODE> parameter looks like this:<BR />
<DIV><BR />
<PRE class="sourceCode json"><CODE class="sourceCode json"><SPAN id="cb14-1"><SPAN class="fu">{</SPAN></SPAN><BR />
<SPAN id="cb14-2">  <SPAN class="dt">"priority"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="st">"VERY_HIGH"</SPAN></SPAN><BR />
<SPAN id="cb14-3"><SPAN class="fu">}</SPAN></SPAN></CODE></PRE><BR />
</DIV><BR />
Note that the default HTTP method used when the <CODE>--data</CODE> parameter is specified is âPOSTâ, so we needed to explicitly specify the âPATCHâ method with the <CODE>--request</CODE> parameter.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=anfNCr-WYDk&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h57m18s" target="_blank" rel="nofollow noopener noreferrer">00:57:18</A>:</STRONG> On execution, the response is returned quickly, and note the HTTP 204 status code, signifying a successful result with no content returned. Checking in the MyInbox app we see that the user taskâs priority is now marked as âVery Highâ - success.<BR />
<BR />
That brings us to the end of this episode, which I thought was quite exciting. Hope you did too!
---
Annotated links: Episode 27 of Hands-on SAP dev with qmacro
technology-blog-sap
2019-07-11
https://community.sap.com/t5/technology-blogs-by-sap/annotated-links-episode-27-of-hands-on-sap-dev-with-qmacro/ba-p/13398297
2019-07-11-annotated-links-episode-27-of-hands-on-sap-dev-with-qmacro
<EM>This is a searchable description of the content of a live stream recording, specifically <STRONG>âEpisode 27 - Continuation of the Cloud Platform Workflow projectâ</STRONG> in the â<A href="https://bit.ly/handsonsapdev" target="_blank" rel="nofollow noopener noreferrer">Hands-on SAP dev with qmacro</A>â series. There are links directly to specific highlights in the video recording. For links to annotations of other episodes, please see the â<A href="https://bit.ly/handsonsapdev#replays" target="_blank" rel="nofollow noopener noreferrer">Catch the replays</A>â section of the series blog post.</EM><BR />
<BR />
This episode, titled â<A href="https://bit.ly/handsonsapdev#ep27" target="_blank" rel="nofollow noopener noreferrer">Continuation of the Cloud Platform Workflow project</A>â, was streamed live on Fri 31 May 2019 and is approximately one hour in length. The stream recording is <A href="https://www.youtube.com/watch?v=Gq_XfrLe_kg&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0" target="_blank" rel="nofollow noopener noreferrer">available on YouTube</A>.<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2019/07/Screen-Shot-2019-07-11-at-07.57.01.png" /><BR />
<BR />
Below is a brief synopsis, and links to specific highlights - use these links to jump directly to particular places of interest in the recording, based on âhh:mm:ssâ style timestamps.<BR />
<H2 id="brief-synopsis" id="toc-hId-908662144">Brief synopsis</H2><BR />
In this episode we continue where we left off in <A href="https://bit.ly/handsonsapdev#ep25" target="_blank" rel="nofollow noopener noreferrer">Ep.25</A>, to build out the workflow scenario on SAP Cloud Platform, exploring features as we go for service and script tasks, and more.<BR />
<H2 id="links-to-specific-highlights" id="toc-hId-712148639">Links to specific highlights</H2><BR />
<STRONG><A href="https://www.youtube.com/watch?v=Gq_XfrLe_kg&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h03m03s" target="_blank" rel="nofollow noopener noreferrer">00:03:03</A>:</STRONG> Looking at where we left off last time - in the workflow editor in the SAP Web IDE, in the middle of creating a service task to access an OData service on the ES5 system, via the SAP Cloud Connector that weâd set up, running in a Docker container. We have a brief look inside the <CODE>Dockerfile</CODE> that was used to create the image from which the container was instantiated.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=Gq_XfrLe_kg&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h08m40s" target="_blank" rel="nofollow noopener noreferrer">00:08:40</A>:</STRONG> Checking what we have via the SAP Cloud Connector, by looking at the âCloud Connectorsâ page in the SAP Cloud Plaform Cockpit - an exposed backend system with the virtual name âvirtuales5â on port 8000, with all resources at <CODE>/sap/opu/odata</CODE> and below available.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=Gq_XfrLe_kg&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h10m00s" target="_blank" rel="nofollow noopener noreferrer">00:10:00</A>:</STRONG> Similarly, checking the destination âshopserviceâ that we set up, we see that it uses this backend system to point to a specific OData service, thus:<BR />
<PRE><CODE><A href="http://virtuales5:8000/sap/opu/odata/sap/EPM_REF_APPS_SHOP_SRV/" target="test_blank" rel="nofollow noopener noreferrer">http://virtuales5:8000/sap/opu/odata/sap/EPM_REF_APPS_SHOP_SRV/</A></CODE></PRE><BR />
which, with the additional property <CODE>sap-client=002</CODE>, translates to:<BR />
<BR />
<A class="uri" href="https://sapes5.sapdevcenter.com/sap/opu/odata/sap/EPM_REF_APPS_SHOP_SRV?sap-client=002" target="_blank" rel="nofollow noopener noreferrer">https://sapes5.sapdevcenter.com/sap/opu/odata/sap/EPM_REF_APPS_SHOP_SRV?sap-client=002</A><BR />
<BR />
(Donât forget, youâll need a logon to ES5 to access this URL.)<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=Gq_XfrLe_kg&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h12m45s" target="_blank" rel="nofollow noopener noreferrer">00:12:45</A>:</STRONG> Reviewing our âdestinationproxyâ test HTML5 app, specifically the details inside the application descriptor (<CODE>neo-app.json</CODE>), which include a route that points to the destination referred to above.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=Gq_XfrLe_kg&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h15m03s" target="_blank" rel="nofollow noopener noreferrer">00:15:03</A>:</STRONG> Following an observant comment from <A href="https://twitter.com/fbeuret" target="_blank" rel="nofollow noopener noreferrer">Fabien</A> about the scheme in a destination URL, we talk briefly about the use of HTTP (vs HTTPS) in an SAP Cloud Connector based situation, where the traffic is secured not at the protocol level (i.e.&nbsp;not with HTTPS) but at the tunnel level.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=Gq_XfrLe_kg&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h17m00s" target="_blank" rel="nofollow noopener noreferrer">00:17:00</A>:</STRONG> Looking briefly at the SAP Fiori launchpad site we set up with the SAP Cloud Platform Portal service last time - which contains the 4 tiles related to the Workflow service.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=Gq_XfrLe_kg&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h18m45s" target="_blank" rel="nofollow noopener noreferrer">00:18:45</A>:</STRONG> Now turning our attention to the workflow definition as we left it at the end of the <A href="https://bit.ly/handsonsapdev#ep26" target="_blank" rel="nofollow noopener noreferrer">previous episode</A>, we start to add details to the service taskâs properties to point it to where we want it to go.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=Gq_XfrLe_kg&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h22m20s" target="_blank" rel="nofollow noopener noreferrer">00:22:20</A>:</STRONG> Looking at the Products entityset, and changing from the default representation content type (which is XML) to our preferred JSON representation (with query parameter <CODE>$format=json</CODE>).<BR />
<BR />
As a small digression, I have a bit of a rant about how people distinguish between OData and âREST APIsâ, suggesting theyâre different, and implying that OData is less RESTful. Thatâs nonsense. In fact, one of the lovely things about OData is that itâs a formalised approach to a REST API. Point me to something thatâs called a âREST APIâ and Iâll either point out what that API does not do that is RESTful (or does do that is not RESTful) or point out 10 other APIs that are designated REST APIs that are in fact not. Or different in approach. The point is that REST is not a definition of a protocol, or how a protocol (or API) should work. REST is an architectural style, and OData is as much a REST API as any other so-called REST APIs. So there - stick <EM>that</EM> in your pipe and smoke it <span class="lia-unicode-emoji" title=":winking_face:">ð</span><BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=Gq_XfrLe_kg&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h24m50s" target="_blank" rel="nofollow noopener noreferrer">00:24:50</A>:</STRONG> Using the relative path of the URL we just tried in the browser, i.e.&nbsp;<CODE>Products('HT-1000')</CODE>, and specifying it in the Path property for the service task definition, noting also that right now, the service task mechanism doesnât support the <CODE>sap-client</CODE> additional property that one can define in the destination on the SAP Cloud Platform (so we end up adding <CODE>?sap-client=002</CODE> to the Path propertyâs value).<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=Gq_XfrLe_kg&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h26m25s" target="_blank" rel="nofollow noopener noreferrer">00:26:25</A>:</STRONG> Taking a small digression into the difference between OData operations âREADâ and âQUERYâ, and noting that both map to the HTTP method âGETâ. Going deeper into how OData maps onto familiar technologies, we look at the difference between the (XML) representations of responses to READ and QUERY operations, where the former have <CODE>&lt;entry&gt;</CODE> as the root element and the latter have <CODE>&lt;feed&gt;</CODE>, exposing the Atom and Atom Publishing Protocol ancestry of OData quite nicely.<BR />
<BR />
If youâre interested in learning more about this, I recommend you follow the following SAP Developers tutorial: <A href="https://developers.sap.com/tutorials/odata-01-intro-origins.html" target="_blank" rel="noopener noreferrer">Learn about OData Fundamentals</A> which is part of the tutorial group <A href="https://developers.sap.com/group.SAP%20Cloud%20Platform-6-odata-intro.html" target="_blank" rel="noopener noreferrer">Get an Introduction to OData</A> which in turn is part of the mission <A href="https://developers.sap.com/mission.SAP%20Cloud%20Platform-3-odata.html" target="_blank" rel="noopener noreferrer">Take a Deep Dive into OData</A>.<BR />
<BR />
Thereâs also some more you can read in the form of a <A href="https://blogs.sap.com/tag/mondaymorningthoughts/" target="_blank" rel="noopener noreferrer">Monday Morning Thoughts</A> post: <A href="https://blogs.sap.com/2018/08/20/monday-morning-thoughts-odata/" target="_blank" rel="noopener noreferrer">Monday morning thoughts: OData</A> if youâre so inclined.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=Gq_XfrLe_kg&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h27m14s" target="_blank" rel="nofollow noopener noreferrer">00:27:14</A>:</STRONG> I donât know what was in my coffee that day but I have a micro rant also about the major difference between âblogâ and âpostâ. Goodness me!<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=Gq_XfrLe_kg&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h28m20s" target="_blank" rel="nofollow noopener noreferrer">00:28:20</A>:</STRONG> We specify a location in the workflow instance in the Response Variable property using Java Unified Expression Language (JUEL) <A href="https://blogs.sap.com/2018/01/29/discovering-SAP%20Cloud%20Platform-workflow-service-tasks/#comment-409097" target="_blank" rel="noopener noreferrer">expressions</A>.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=Gq_XfrLe_kg&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h29m25s" target="_blank" rel="nofollow noopener noreferrer">00:29:25</A>:</STRONG> Deploying the workflow definition to the SAP Cloud Platform Workflow service for the first time (where we see that the definition is given an incrementing ID, starting at 1).<BR />
<BR />
We can see the definition using the âWorkflow Monitor - Workflow Definitionsâ app. This is where we can start a new instance with sample data, which we do, and then jump to look at the instance, which of course is not found directly as the status filter omits instances in âCompletedâ status â¦ and of course this is the status our newly created instance already has!<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=Gq_XfrLe_kg&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h32m38s" target="_blank" rel="nofollow noopener noreferrer">00:32:38</A>:</STRONG> Looking at the details of the completed instance, including the Execution Log and the Workflow Context, which shows the data that was retrieved via the service task stored in the <CODE>productdata</CODE> property. Success!<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=Gq_XfrLe_kg&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h34m10s" target="_blank" rel="nofollow noopener noreferrer">00:34:10</A>:</STRONG> Wondering about why JSON representations of OData resources always start with a property called âdâ. If you want to know why this is, look at the subsequent episode (<A href="https://bit.ly/handsonsapdev#ep28" target="_blank" rel="nofollow noopener noreferrer">https://bit.ly/handsonsapdev#ep28</A>) where I explain (I had to research it between this episode and the next one).<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=Gq_XfrLe_kg&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h35m40s" target="_blank" rel="nofollow noopener noreferrer">00:35:40</A>:</STRONG> Now defining a user task, and making use of the fact that we can include JUEL expressions in the values for some of the properties in this user task, e.g.:<BR />
<PRE><CODE>The ${context.productdata.d.Name}</CODE></PRE><BR />
<STRONG><A href="https://www.youtube.com/watch?v=Gq_XfrLe_kg&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h38m05s" target="_blank" rel="nofollow noopener noreferrer">00:38:05</A>:</STRONG> Specifying the details of the user interface in this user task, and talking about the difference between specifying a custom-built UI5 Component for the user interface, and using a Forms feature based UI which is super easy to create. We opt for a Forms based user UI in this case to show some of the product data thatâs been retrieved and stored in the context.<BR />
<BR />
There was a question as to whether the texts and labels defined in Workflow forms can be translated; I asked internally after the stream, and found that itâs currently not supported, but is definitely on the backlog and being prioritised.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=Gq_XfrLe_kg&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h44m10s" target="_blank" rel="nofollow noopener noreferrer">00:44:10</A>:</STRONG> After deploying, we start a new workflow instance and examine it - itâs in the âRunningâ status as the user task is, of course, still pending.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=Gq_XfrLe_kg&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h45m10s" target="_blank" rel="nofollow noopener noreferrer">00:45:10</A>:</STRONG> In the last part of this live stream we now try to bring in a generic user task UI Component that Iâd previously built (before the advent of Forms), just to show how one would do it.<BR />
<BR />
Called âgenericusertaskâ, it lives in another instance (and workspace) of the SAP Web IDE so I export it from there and bring it into my SAP Web IDE that Iâm using for this live stream.<BR />
<BR />
Looking at the application descriptor in this âgenericusertaskâ project, we see that thereâs a route reference to destination âbpmworkflowruntimeâ, which was added automatically when I enabled the Workflow service. Of course, we can guess from the name of this destination that it points to the Workflow API, which weâll need in the user task UI Component to access the task instance data.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=Gq_XfrLe_kg&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h49m10s" target="_blank" rel="nofollow noopener noreferrer">00:49:10</A>:</STRONG> In digging through the UI Component code, we look at the view and the JavaScript code in the component, and examine how we access the right context and data therein, via the information passed to the component on startup via the <CODE>startupParameters</CODE> property.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=Gq_XfrLe_kg&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h56m30s" target="_blank" rel="nofollow noopener noreferrer">00:56:30</A>:</STRONG> We deploy the âgenericusertaskâ app to the SAP Cloud Platform, so we can use it in the workflow user tasks, and then modify the user task specification in the workflow definition to use this UI Component instead of the form we created.<BR />
<BR />
At this point we start to dig in to how the UI Component starts up, by debugging the loading of the Component. But we run out of time, learning the lesson again that if youâre going to start a debugging session, the one thing (apart from coffee) that you need to ensure you have is â¦ time.<BR />
<BR />
So we leave the debugging until the next episode!
---
Annotated links: Episode 26 of Hands-on SAP dev with qmacro
technology-blog-sap
2019-07-10
https://community.sap.com/t5/technology-blogs-by-sap/annotated-links-episode-26-of-hands-on-sap-dev-with-qmacro/ba-p/13397959
2019-07-10-annotated-links-episode-26-of-hands-on-sap-dev-with-qmacro
<EM>This is a searchable description of the content of a live stream recording, specifically<STRONG> âEpisode 26 - Vim CDS plugin with new <a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a>/cds-lsp packageâ</STRONG> in the â<A href="https://bit.ly/handsonsapdev" target="_blank" rel="nofollow noopener noreferrer">Hands-on SAP dev with qmacro</A>â series. There are links directly to specific highlights in the video recording. For links to annotations of other episodes, please see the â<A href="https://bit.ly/handsonsapdev#replays" target="_blank" rel="nofollow noopener noreferrer">Catch the replays</A>â section of the series blog post.</EM><BR />
<BR />
This episode, titled â<A href="https://bit.ly/handsonsapdev#ep26" target="_blank" rel="nofollow noopener noreferrer">Vim CDS plugin with new @sap/cds-lsp package</A>â, was streamed live on Wed 29 May 2019 and is approximately one hour in length. The stream recording is <A href="https://www.youtube.com/watch?v=S7PaeN4r7vQ&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0" target="_blank" rel="nofollow noopener noreferrer">available on YouTube</A>.<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2019/07/Screen-Shot-2019-07-10-at-14.34.12-2.png" /><BR />
<BR />
Below is a brief synopsis, and links to specific highlights - use these links to jump directly to particular places of interest in the recording, based on âhh:mm:ssâ style timestamps.<BR />
<H2 id="brief-synopsis" id="toc-hId-908638958">Brief synopsis</H2><BR />
Now that the <SPAN class="citation" data-cites="sap/cds-lsp"><a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a>/cds-lsp</SPAN> package is published to the public SAP NPM registry, itâs a good time to look how we can incorporate that into the Vim CDS plugin.<BR />
<H2 id="links-to-specific-highlights" id="toc-hId-712125453">Links to specific highlights</H2><BR />
<STRONG><A href="https://www.youtube.com/watch?v=S7PaeN4r7vQ&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h01m50s" target="_blank" rel="nofollow noopener noreferrer">00:01:50</A>:</STRONG> Talking about the news from the CAP team that theyâve released the <CODE><a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a>/cds-lsp</CODE> package on the SAP NPM registry.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=S7PaeN4r7vQ&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h02m24s" target="_blank" rel="nofollow noopener noreferrer">00:02:24</A>:</STRONG> Highlighting a fellow live coding streamer <A href="https://www.twitch.tv/jamiepinelive" target="_blank" rel="nofollow noopener noreferrer">Jamie Pine</A> who does all sorts of interesting stuff and indeed a prolific streamer. Heâs building live, in public as it were, his app and service <A href="https://notify.me" target="_blank" rel="nofollow noopener noreferrer">Notify</A>, which is very impressive. Definitely worth a follow on Twitch.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=S7PaeN4r7vQ&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h04m10s" target="_blank" rel="nofollow noopener noreferrer">00:04:10</A>:</STRONG> Looking at the CDS Language Support for VS Code extension available on the <A href="https://tools.hana.ondemand.com/#cloud" target="_blank" rel="nofollow noopener noreferrer">SAP Development Tools</A> site, which is where the <CODE><a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a>/cds-lsp</CODE> originally appeared (inside the compressed vsix file, which represented everything needed for the extension).<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=S7PaeN4r7vQ&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h07m15s" target="_blank" rel="nofollow noopener noreferrer">00:07:15</A>:</STRONG> In my quest to bring in CDS language goodness into Vim I originally started with the Vim plugin â<A href="https://github.com/autozimu/LanguageClient-neovim" target="_blank" rel="nofollow noopener noreferrer">LanguageClient-neovim</A>â (donât let the name fool you - it also works with regular Vim as well as NeoVim). But I moved across to the <A href="https://github.com/w1rp/ale" target="_blank" rel="nofollow noopener noreferrer">Asynchronous Lint Engine (ALE)</A> recently and itâs been working quite nicely for me.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=S7PaeN4r7vQ&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h09m30s" target="_blank" rel="nofollow noopener noreferrer">00:09:30</A>:</STRONG> The version of <CODE><a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a>/cds-lsp</CODE> inside the 1.1.4 version of the CDS extension for VS Code is 2.0.7. Asking the SAP NPM registry for information about the newly independent version, we see that itâs already at 2.1.2. Now (at the time of writing this post) itâs at 2.1.4:<BR />
<PRE class="shell"><CODE>=&gt; npm info @sap/cds-lsp<BR />
@sap/cds-lsp@2.1.4 | SEE LICENSE IN LICENSE.txt | deps: 8 | versions: 2<BR />
Language server for CDS<BR />
<BR />
dist<BR />
.tarball: <A href="https://npm.sap.com/@sap/cds-lsp/-/cds-lsp-2.1.4.tgz" target="test_blank" rel="noopener noreferrer">https://npm.sap.com/@sap/cds-lsp/-/cds-lsp-2.1.4.tgz</A><BR />
.shasum: 5d9a7720a6278cc4299271194229b9c4f6b616e9<BR />
.integrity: sha512-NAoXcRviGbFMHZZwg7dY4+VNoocS4KABIsxbPwMS7PhYCig1naT6xCKac+VCUQYpQOiatvQgHooFrZOjz7lo9g==<BR />
<BR />
dependencies:<BR />
@sap/cds-compiler: 1.15.0<BR />
@types/antlr4: 4.7.0<BR />
fs.realpath: 1.0.0<BR />
ignore: 5.0.4<BR />
ts-md5: 1.2.4<BR />
vscode-languageserver-protocol: 3.14.1<BR />
vscode-languageserver: 5.2.1<BR />
vscode-uri: 1.0.6<BR />
<BR />
maintainers:<BR />
- https-support.sap.com &lt;do.not.reply@sap.com&gt;<BR />
<BR />
dist-tags:<BR />
latest: 2.1.4<BR />
<BR />
published a week ago by https-support.sap.com &lt;do.not.reply@sap.com&gt;</CODE></PRE><BR />
<STRONG><A href="https://www.youtube.com/watch?v=S7PaeN4r7vQ&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h13m50s" target="_blank" rel="nofollow noopener noreferrer">00:13:50</A>:</STRONG> Looking at the current state of the <CODE>vim-cds</CODE> plugin, examining each of the components in turn:<BR />
<UL><BR />
 	<LI>the file type detector</LI><BR />
 	<LI>the syntax highlighting specifications</LI><BR />
 	<LI>the hook for ALE</LI><BR />
</UL><BR />
While looking through them, we also take a quick look at my Vim configuration, which is using a new plugin manager (<A href="https://github.com/junegunn/vim-plug" target="_blank" rel="nofollow noopener noreferrer">vim-plug</A>) which allows me to organise my plugins in a cleaner way, and also allows me to specify <EM>local</EM> plugins such as this in-development <CODE>vim-cds</CODE> plugin:<BR />
<PRE><CODE>" vim-plug configuration<BR />
if empty(glob('~/.vim/autoload/plug.vim'))<BR />
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs<BR />
    \ <A href="https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim" target="test_blank" rel="nofollow noopener noreferrer">https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim</A><BR />
  autocmd VimEnter * PlugInstall | source $MYVIMRC<BR />
endif<BR />
<BR />
call plug#begin('~/.vim/plugged')<BR />
<BR />
Plug 'w0rp/ale'<BR />
Plug 'vim-airline/vim-airline'<BR />
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }<BR />
Plug 'junegunn/fzf.vim'<BR />
Plug 'junegunn/goyo.vim'<BR />
Plug 'junegunn/limelight.vim'<BR />
Plug 'tpope/vim-fugitive'<BR />
Plug 'tpope/vim-surround'<BR />
Plug 'tpope/vim-repeat'<BR />
Plug 'tpope/vim-unimpaired'<BR />
Plug 'morhetz/gruvbox'<BR />
Plug 'leafgarland/typescript-vim'<BR />
Plug '$HOME/local/projects/vim-cds'<BR />
<BR />
" Add plugins to &amp;runtimepath<BR />
call plug#end()</CODE></PRE><BR />
(The local plugin is the last one in the list).<BR />
<BR />
Going back to the hook for ALE, this is in the form of a short Vimscript that uses various built-in ALE functions to define and register <CODE>vim-cds</CODE>.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=S7PaeN4r7vQ&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h21m18s" target="_blank" rel="nofollow noopener noreferrer">00:21:18</A>:</STRONG> The ALE hook script references another helper script <CODE>startcdslsp</CODE> which starts up the language server from the <CODE><a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a>/cds-lsp</CODE> package, which right now has been lifted out of the vsix archive and placed directly inside the <CODE>vim-cds</CODE> plugin directory.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=S7PaeN4r7vQ&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h23m45s" target="_blank" rel="nofollow noopener noreferrer">00:23:45</A>:</STRONG> A quick check in a CDS file <CODE>db/data-model.cds</CODE> shows us that the <CODE>vim-cds</CODE> plugin, as it stands right now, is working for us, connected to the <CODE><a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a>/cds-lsp</CODE> based language server, and active in the context of ALE.<BR />
<BR />
We also try out some LSP based standard functions that are facilitated by ALE and implemented by the <CODE><a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a>/cds-lsp</CODE> package, such as <CODE>ALEGoToDefinition</CODE>.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=S7PaeN4r7vQ&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h28m52s" target="_blank" rel="nofollow noopener noreferrer">00:28:52</A>:</STRONG> Wanting to replace the âdropped-inâ version of the <CODE><a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a>/cds-lsp</CODE> package with one that will be installed via <CODE>npm</CODE>, we look in <CODE>startcdslsp</CODE> to first of all find out where and how itâs used (via STDIO), before renaming it to move it out of the way.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=S7PaeN4r7vQ&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h33m00s" target="_blank" rel="nofollow noopener noreferrer">00:33:00</A>:</STRONG> Pondering the question whether we want to require a global install of <CODE><a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a>/cds-lsp</CODE> or one only local to the installation location of the <CODE>vim-cds</CODE> plugin.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=S7PaeN4r7vQ&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h33m55s" target="_blank" rel="nofollow noopener noreferrer">00:33:55</A>:</STRONG> Initialising the <CODE>vim-cds</CODE> plugin location as an NPM project (with <CODE>npm init</CODE>) and installing <CODE><a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a>/cds-lsp</CODE> locally in that location.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=S7PaeN4r7vQ&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h35m30s" target="_blank" rel="nofollow noopener noreferrer">00:35:30</A>:</STRONG> Noticing the presence also (in the <CODE>node_modules/</CODE> directory) of the <CODE><a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a>/cds-compiler</CODE> package, we check with <CODE>npm info</CODE> to see why - and yes, our suspicions are confirmed - thereâs a dependency upon it (we saw this in the output earlier).<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=S7PaeN4r7vQ&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h37m09s" target="_blank" rel="nofollow noopener noreferrer">00:37:09</A>:</STRONG> Noticing that this version of <CODE><a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a>/cds-lsp</CODE> has no intermediate <CODE>src/</CODE> directory. Regardless, we now attempt to kick off this new version / instance of the server code, by adding the <CODE>--stdio</CODE> parameter on invocation directly in the <CODE>startcdslsp</CODE> script.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=S7PaeN4r7vQ&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h47m30s" target="_blank" rel="nofollow noopener noreferrer">00:47:30</A>:</STRONG> Pondering how to make a Vim plugin completely independent and portable. Some questions Iâm finding hard to answer right now, and we use a bit of loose brained hacking on the ALE <CODE>cds.vim</CODE> script to think about the questions.<BR />
<BR />
As we come to the end of this episode, theyâre still not completely resolved. But thatâs fine - this is very much a side project, and something to learn from as we go.<BR />
<BR />
Until next time!
---
Annotated links: Episode 25 of Hands-on SAP dev with qmacro
technology-blog-sap
2019-07-09
https://community.sap.com/t5/technology-blogs-by-sap/annotated-links-episode-25-of-hands-on-sap-dev-with-qmacro/ba-p/13397084
2019-07-09-annotated-links-episode-25-of-hands-on-sap-dev-with-qmacro
<EM>This is a searchable description of the content of a live stream recording, specifically <STRONG>âEpisode 25 - System resetâ</STRONG> in the â<A href="https://bit.ly/handsonsapdev" target="_blank" rel="nofollow noopener noreferrer">Hands-on SAP dev with qmacro</A>â series. There are links directly to specific highlights in the video recording. For links to annotations of other episodes, please see the â<A href="https://bit.ly/handsonsapdev#replays" target="_blank" rel="nofollow noopener noreferrer">Catch the replays</A>â section of the series blog post.</EM><BR />
<BR />
This episode, titled â<A href="https://bit.ly/handsonsapdev#ep25" target="_blank" rel="nofollow noopener noreferrer">System reset</A>â, was streamed live on Wed 24 May 2019 and is approximately one and a half hours in length. The stream recording is <A href="https://www.youtube.com/watch?v=9yL-mxX-rxo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0" target="_blank" rel="nofollow noopener noreferrer">available on YouTube</A>.<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2019/07/Screen-Shot-2019-07-09-at-14.18.47-1.png" /><BR />
<BR />
Below is a brief synopsis, and links to specific highlights - use these links to jump directly to particular places of interest in the recording, based on âhh:mm:ssâ style timestamps.<BR />
<H2 id="brief-synopsis" id="toc-hId-908630397">Brief synopsis</H2><BR />
The past week has been a little bit hectic and distracting, so I use this episode as a sort of âsystem resetâ to figure out where things are, what we want to work on, and share some items that have come up recently.<BR />
<H2 id="links-to-specific-highlights" id="toc-hId-712116892">Links to specific highlights</H2><BR />
<STRONG><A href="https://www.youtube.com/watch?v=9yL-mxX-rxo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h30m00s" target="_blank" rel="nofollow noopener noreferrer">00:30:00</A>:</STRONG> Coming to you live from the shared offices of <A href="https://innov8ion.nl" target="_blank" rel="nofollow noopener noreferrer">Innov8ion</A> + iQibt in Utrecht, just before the start of the SAP CodeJam on the SAP Cloud Application Programming Model that day. Turns out that one of the live stream family members <A href="https://www.twitch.tv/roberdinho" target="_blank" rel="nofollow noopener noreferrer">roberdinho</A> is due to attend the CodeJam too!<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=9yL-mxX-rxo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h02m00s" target="_blank" rel="nofollow noopener noreferrer">00:02:00</A>:</STRONG> Saying hello to <SPAN class="mention-scrubbed">wim.snoep2</SPAN>, or at least trying to, as I fail to manage my audio equipment properly - doh!<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=9yL-mxX-rxo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h06m05s" target="_blank" rel="nofollow noopener noreferrer">00:06:05</A>:</STRONG> Talking of the <A href="https://www.elgato.com/en/gaming/stream-deck" target="_blank" rel="nofollow noopener noreferrer">Elgato Streamdeck</A> which is a handy hardware device for managing activities while live streaming, including, for example, switching between scenes in OBS.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=9yL-mxX-rxo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h06m55s" target="_blank" rel="nofollow noopener noreferrer">00:06:55</A>:</STRONG> Starting with <SPAN class="mention-scrubbed">rsletta</SPAN>âs <A href="https://github.com/rsletta/dotfiles" target="_blank" rel="nofollow noopener noreferrer">dotfiles</A> which inspired me to get my act together and share some of my own dotfile stuff. Iâve tidied everything up and republished my dotfiles in the form of a repo in the new <A href="https://github.com/SAP-samples" target="_blank" rel="nofollow noopener noreferrer">SAP-samples</A> namespace on GitHub: <A class="uri" href="https://github.com/SAP-samples/devenv-dotfiles-qmacro" target="_blank" rel="nofollow noopener noreferrer">https://github.com/SAP-samples/devenv-dotfiles-qmacro</A>.<BR />
<BR />
As you can tell from the name of this namespace, itâs primarily for us to be able to publish sample code (and for folks to find it).<BR />
<BR />
My dotfiles are based upon <A href="https://github.com/mathiasbynens/dotfiles" target="_blank" rel="nofollow noopener noreferrer">Mathias Bynensâ dotfiles</A> which Ronnie drew my attention to via his dotfiles repo. I liked and used his bootstrap script, which uses <CODE>rsync</CODE>, which we look at briefly here.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=9yL-mxX-rxo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h10m50s" target="_blank" rel="nofollow noopener noreferrer">00:10:50</A>:</STRONG> A nice question from <SPAN class="mention-scrubbed">helmut.tammen2</SPAN> on whether itâs possible to âfollowâ an entire namespace on GitHub. If you know the answer, please let us know in the comments to this post!<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=9yL-mxX-rxo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h12m00s" target="_blank" rel="nofollow noopener noreferrer">00:12:00</A>:</STRONG> Iâve started to use a new plugin manager for Vim - <A href="https://github.com/junegunn/vim-plug" target="_blank" rel="nofollow noopener noreferrer">vim-plug</A> which is working very nicely for me.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=9yL-mxX-rxo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h14m35s" target="_blank" rel="nofollow noopener noreferrer">00:14:35</A>:</STRONG> Thereâs a new version of the <CODE>cds</CODE> command line client - 3.10.0. The updates appear every 3 or 4 weeks.<BR />
<BR />
The CAP team have also started to make available one of the SAP CDS packages which until now wasnât directly available in the SAP NPM registry (it was previously only available inside the VS Code extension archive). This is the <CODE><a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a>/cds-lsp</CODE> package which as you may know from previous episodes is the code that provides server-based services for the <A href="https://langserver.org/" target="_blank" rel="nofollow noopener noreferrer">Language Server Protocol</A>. Hurray!<BR />
<PRE><CODE>=&gt; npm info @sap/cds-lsp<BR />
<BR />
@sap/cds-lsp@2.1.4 | SEE LICENSE IN LICENSE.txt | deps: 8 | versions: 2<BR />
Language server for CDS<BR />
<BR />
dist<BR />
.tarball: <A href="https://npm.sap.com/@sap/cds-lsp/-/cds-lsp-2.1.4.tgz" target="test_blank" rel="noopener noreferrer">https://npm.sap.com/@sap/cds-lsp/-/cds-lsp-2.1.4.tgz</A><BR />
.shasum: 5d9a7720a6278cc4299271194229b9c4f6b616e9<BR />
.integrity: sha512-NAoXcRviGbFMHZZwg7dY4+VNoocS4KABIsxbPwMS7PhYCig1naT6xCKac+VCUQYpQOiatvQgHooFrZOjz7lo9g==<BR />
<BR />
dependencies:<BR />
@sap/cds-compiler: 1.15.0<BR />
@types/antlr4: 4.7.0<BR />
fs.realpath: 1.0.0<BR />
ignore: 5.0.4<BR />
ts-md5: 1.2.4<BR />
vscode-languageserver-protocol: 3.14.1<BR />
vscode-languageserver: 5.2.1<BR />
vscode-uri: 1.0.6<BR />
<BR />
maintainers:<BR />
- https-support.sap.com &lt;do.not.reply@sap.com&gt;<BR />
<BR />
dist-tags:<BR />
latest: 2.1.4<BR />
<BR />
published a week ago by https-support.sap.com &lt;do.not.reply@sap.com&gt;</CODE></PRE><BR />
Now we can start to think about how we best incorporate this package into the <CODE>vim-cds</CODE> Vim plugin.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=9yL-mxX-rxo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h19m48s" target="_blank" rel="nofollow noopener noreferrer">00:19:48</A>:</STRONG> Starting to think about sharing my preparation work for another (new) SAP CodeJam on SAP Cloud Platform in general, and in particular on connectivity and the SAP Cloud Platform Workflow service, and how I might share that preparation in combination with the live stream.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=9yL-mxX-rxo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h21m18s" target="_blank" rel="nofollow noopener noreferrer">00:21:18</A>:</STRONG> Looking at <A href="https://twitter.com/_nzamani/status/1131814090656165888" target="_blank" rel="nofollow noopener noreferrer">a tweet from Nabi</A> pointing to a post in a series of posts that heâs been writing: â<A href="https://blogs.sap.com/2018/05/22/installing-sap-cloud-connector-into-docker-and-connecting-it-to-sap-cloud-platform/" target="_blank" rel="noopener noreferrer">Installing SAP Cloud Connector into Docker and connecting it to SAP Cloud Platform</A>â.<BR />
<BR />
This is his repo on GitHub: <A class="uri" href="https://github.com/nzamani/sap-cloud-connector-docker" target="_blank" rel="nofollow noopener noreferrer">https://github.com/nzamani/sap-cloud-connector-docker</A>.<BR />
<BR />
The idea of using Docker specifically, and a container-based approach in general, is great - it abstracts and neutralises any OS-specifics and is, in my opinion, very aligned with the cloud-first approach to computing.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=9yL-mxX-rxo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h23m40s" target="_blank" rel="nofollow noopener noreferrer">00:23:40</A>:</STRONG> We also look at the <A href="https://blogs.sap.com/2017/06/16/netweaver-gateway-demo-es5-now-in-beta/" target="_blank" rel="noopener noreferrer">blog post</A> describing the availability of the ES5 system which works well as a classic ABAP stack backend system to connect to with the SAP Cloud Connector. While it is actually on the public Internet, we can âpretendâ itâs an on-prem system and consume information from it from a service task in the Workflow service via SAP Cloud Connector powered connectivity.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=9yL-mxX-rxo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h26m00s" target="_blank" rel="nofollow noopener noreferrer">00:26:00</A>:</STRONG> Cloning Nabiâs âsap-cloud-connector-dockerâ repo into my <CODE>dockerbuilds/</CODE> directory.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=9yL-mxX-rxo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h27m30s" target="_blank" rel="nofollow noopener noreferrer">00:27:30</A>:</STRONG> Looking at the details inside of the <CODE>Dockerfile</CODE>, noting that the image is based on a <A href="https://hub.docker.com/_/centos/" target="_blank" rel="nofollow noopener noreferrer">CentOS based distribution</A> (which uses the <CODE>yum</CODE> package manager).<BR />
<BR />
Noting how the software components are automatically downloaded from the <A href="https://tools.hana.ondemand.com" target="_blank" rel="nofollow noopener noreferrer">SAP Development Tools</A> website (via the use of Cookie headers in the <CODE>wget</CODE> requests) - I will get the CodeJam attendees to download these components manually so they can check and accept the licence agreements themselves.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=9yL-mxX-rxo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h28m25s" target="_blank" rel="nofollow noopener noreferrer">00:28:25</A>:</STRONG> Examining the use of the <CODE>RUN</CODE> command, which is used in <CODE>Dockerfile</CODE>s to add layers to a Docker image.<BR />
<BR />
The two components we need are the SAP Cloud Connector and a Java runtime, which are both available from the website.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=9yL-mxX-rxo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h30m10s" target="_blank" rel="nofollow noopener noreferrer">00:30:10</A>:</STRONG> Thinking about trying the <CODE>Dockerfile</CODE> out, as it stands, checking beforehand which versions of the components will be downloaded, before examining the rest of the commands in the <CODE>Dockerfile</CODE>, including those that switch to a bash shell and also expose port 8443 in containers that are created from the image.<BR />
<BR />
We build the image thus:<BR />
<PRE><CODE>=&gt; docker build -t sapcc:2.12.0.1 .</CODE></PRE><BR />
(donât forget that final period!)<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=9yL-mxX-rxo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h33m00s" target="_blank" rel="nofollow noopener noreferrer">00:33:00</A>:</STRONG> We note that the specific version of the SAP JVM requested, 8.1.053, was no longer available, so we fix it by changing the reference to 8.1.055 that is shown on the website.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=9yL-mxX-rxo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h34m10s" target="_blank" rel="nofollow noopener noreferrer">00:34:10</A>:</STRONG> As we wait for the components to download, <SPAN class="mention-scrubbed">nabheet.madan3</SPAN> shares some information in relation to a question I had earlier about how to restrict the number of columns in Docker command output.<BR />
<BR />
We try this out immediately, first the base case with which gives us a whole load of columns in the output:<BR />
<PRE><CODE>=&gt; docker image ls<BR />
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE<BR />
debiancap           latest              a8fd0c3eb330        2 months ago        293MB<BR />
node                10                  64c810caf95a        3 months ago        899MB<BR />
node                lts                 64c810caf95a        3 months ago        899MB<BR />
centos              7                   9f38484d220f        3 months ago        202MB<BR />
debian              latest              a0bd3e1c8f9e        5 months ago        101MB</CODE></PRE><BR />
Now, we try various <CODE>--format</CODE> options, ending up with something like this:<BR />
<PRE><CODE>=&gt; docker image ls --format '{{.Repository}}\t{{.Size}}'<BR />
debiancap       293MB<BR />
node    899MB<BR />
node    899MB<BR />
centos  202MB<BR />
debian  101MB</CODE></PRE><BR />
Nice!<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=9yL-mxX-rxo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h36m30s" target="_blank" rel="nofollow noopener noreferrer">00:36:30</A>:</STRONG> While weâd been playing around with <CODE>--format</CODE>, the build of the <CODE>sapcc</CODE> Docker image completes successfully! So itâs time to create an instance of this image, i.e.&nbsp;a container, thus:<BR />
<PRE><CODE>=&gt; docker run -p 8443:8443 -h mysapcc --name sapcc -d sapcc:2.12.0.1</CODE></PRE><BR />
<STRONG><A href="https://www.youtube.com/watch?v=9yL-mxX-rxo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h39m20s" target="_blank" rel="nofollow noopener noreferrer">00:39:20</A>:</STRONG> We can see that the container has been successfully created, with the <CODE>docker ps -a</CODE> command, and check (with <CODE>netstat -atn | grep LISTEN</CODE>) that we can, from our Docker host machine (i.e.&nbsp;my laptop), reach port 8443, which is a locally exposed tunnel through to the 8443 in the container.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=9yL-mxX-rxo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h39m50s" target="_blank" rel="nofollow noopener noreferrer">00:39:50</A>:</STRONG> Opening up the URL <A class="uri" href="https://localhost:8443" target="_blank" rel="nofollow noopener noreferrer">https://localhost:8443</A> weâre presented with the familiar login screen of the SAP Cloud Connector. Nice! Logging in as the administrator, we proceed to add basic configuration to have it connect to the subaccount related to a new Workflow CodeJam related trial account.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=9yL-mxX-rxo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h44m00s" target="_blank" rel="nofollow noopener noreferrer">00:44:00</A>:</STRONG> We use âsapcc-dockerâ for the Location ID property, because it allows us to think about what the Location ID means, and where itâs useful. After that, the setup is done and the SAP Cloud Connector should be already connected to the subaccount.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=9yL-mxX-rxo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h44m50s" target="_blank" rel="nofollow noopener noreferrer">00:44:50</A>:</STRONG> We check in the SAP Cloud Platform Cockpit, and it is indeed connected, although we see that (of course) there are no backend systems configured.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=9yL-mxX-rxo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h45m38s" target="_blank" rel="nofollow noopener noreferrer">00:45:38</A>:</STRONG> We go to the âCloud To On-Premiseâ settings to add the ES5 system as a backend ABAP stack system. Weâre going to use a specific OData service available in this system, which is the Enterprise Procurement Model (EPM) Reference Apps âShopâ service, or <A href="https://sapes5.sapdevcenter.com/sap/opu/odata/sap/EPM_REF_APPS_SHOP_SRV/" target="_blank" rel="nofollow noopener noreferrer">EPM_REF_APPS_SHOP_SRV</A> for short.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=9yL-mxX-rxo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h47m35s" target="_blank" rel="nofollow noopener noreferrer">00:47:35</A>:</STRONG> Talking about the fact that in the ES5 system, the default client is 002, not 000, which has caused some issues in the past with folks unable to authenticate, or rather, unable to remember that they have to authenticate with the right client.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=9yL-mxX-rxo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h48m30s" target="_blank" rel="nofollow noopener noreferrer">00:48:30</A>:</STRONG> Setting up the âCloud To On-Premiseâ connection to the ES5 system, using a virtual hostname and port number that are different from the real hostname and port number, for added security.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=9yL-mxX-rxo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h51m00s" target="_blank" rel="nofollow noopener noreferrer">00:51:00</A>:</STRONG> Once this is saved, we now see (in the Cockpit) that thereâs a system available via the SAP Cloud Connector connection, but that there are no resources yet available. We address this now, by defining a âpath and all sub-pathsâ resource for the main set of OData services available in that SAP system: <CODE>/sap/opu/odata</CODE>. We take a little digression looking at what âOPUâ actually stands for (âoccasional platform userâ), and why.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=9yL-mxX-rxo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h53m02s" target="_blank" rel="nofollow noopener noreferrer">00:53:02</A>:</STRONG> Next thing we do is to make sure we can access resources in this ES5 system thatâs available via the SAP Cloud Connector connection, which is to use a pretend HTML5 application thatâs stored in and served from the SAP Cloud Platform subaccount, which only has an application descriptor file, otherwise known as the <A href="https://help.sap.com/saphelp_uiaddon20/helpdata/en/28/fa7538c67e4280a0b7708de2951278/frameset.htm" target="_blank" rel="noopener noreferrer"><CODE>neo-app.json</CODE></A> file.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=9yL-mxX-rxo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h53m00s" target="_blank" rel="nofollow noopener noreferrer">00:53:00</A>:</STRONG> Before we create this pretend app, we create the destination that will point to the remote (ES5-based) service. In the approach to this, I discuss briefly the choice of destination definition - how specific, how narrow you should make it. To a backend system in general, to a collection of OData (or other Web-based) services, or to a specific service endpoint. Of course, I guess it depends, but itâs an interesting question on how one should use the destinations.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=9yL-mxX-rxo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h57m10s" target="_blank" rel="nofollow noopener noreferrer">00:57:10</A>:</STRONG> The destination name we create is âshopserviceâ, and we need to use the virtual hostname and port we specified earlier when we construct the URL to the destination endpoint (we also include the âsapcc-dockerâ Location ID of course, and add an additional property to specify that the âsap-clientâ should be 002.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=9yL-mxX-rxo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=01h03m15s" target="_blank" rel="nofollow noopener noreferrer">01:03:15</A>:</STRONG> Next we start up the SAP Web IDE Full-Stack to create a super-simple empty application (âdestinationproxyâ), with just an application descriptor file (<CODE>neo-app.json</CODE>) with the following content:<BR />
<DIV><BR />
<PRE class="sourceCode json"><CODE class="sourceCode json"><SPAN id="cb6-1"><SPAN class="fu">{</SPAN></SPAN><BR />
<SPAN id="cb6-2">  <SPAN class="dt">"authenticationMethod"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="st">"none"</SPAN><SPAN class="fu">,</SPAN></SPAN><BR />
<SPAN id="cb6-3">  <SPAN class="dt">"routes"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="ot">[</SPAN></SPAN><BR />
<SPAN id="cb6-4">    <SPAN class="fu">{</SPAN></SPAN><BR />
<SPAN id="cb6-5">      <SPAN class="dt">"path"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="st">"/myshop"</SPAN><SPAN class="fu">,</SPAN></SPAN><BR />
<SPAN id="cb6-6">      <SPAN class="dt">"target"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="fu">{</SPAN></SPAN><BR />
<SPAN id="cb6-7">        <SPAN class="dt">"type"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="st">"destination"</SPAN><SPAN class="fu">,</SPAN></SPAN><BR />
<SPAN id="cb6-8">        <SPAN class="dt">"name"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="st">"shopservice"</SPAN></SPAN><BR />
<SPAN id="cb6-9">      <SPAN class="fu">},</SPAN></SPAN><BR />
<SPAN id="cb6-10">      <SPAN class="dt">"description"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="st">"Shop service backend"</SPAN></SPAN><BR />
<SPAN id="cb6-11">    <SPAN class="fu">}</SPAN></SPAN><BR />
<SPAN id="cb6-12">  <SPAN class="ot">]</SPAN></SPAN><BR />
<SPAN id="cb6-13"><SPAN class="fu">}</SPAN></SPAN></CODE></PRE><BR />
</DIV><BR />
<STRONG><A href="https://www.youtube.com/watch?v=9yL-mxX-rxo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=01h07m50s" target="_blank" rel="nofollow noopener noreferrer">01:07:50</A>:</STRONG> After deploying this application to the SAP Cloud Platform, we see that thereâs an application URL for us to try out, which we do, first appending <CODE>neo-app.json</CODE> to actually have a look at the contents of the application descriptor file, but then appending <CODE>myshop</CODE>, which is of course correctly resolved by the Connectivity service, to travel along the SAP Cloud Connector connection down to the âon-premiseâ ABAP stack system ES5 and to the <CODE>EPM_REF_APPS_SHOP</CODE> service. I find this way of testing reverse proxy connectivity very useful.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=9yL-mxX-rxo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h15m10s" target="_blank" rel="nofollow noopener noreferrer">00:15:10</A>:</STRONG> Within the SAP Web IDE Full-Stack, we turn on the âWorkflow Editorâ extension. We also check that we have the Portal service enabled in SAP Cloud Platform, and that thereâs a Fiori launchpad based website available to us. There is: âCloud Platform Workflow CodeJamâ, and it contains tiles for each of the four standard Workflow related activities:<BR />
<UL><BR />
 	<LI>My Inbox (All Tasks)</LI><BR />
 	<LI>Monitor Workflows (Workflow Definitions)</LI><BR />
 	<LI>Monitor Workflows (Workflow Instances)</LI><BR />
 	<LI>My Inbox (Expert View)</LI><BR />
</UL><BR />
<STRONG><A href="https://www.youtube.com/watch?v=9yL-mxX-rxo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=01h19m20s" target="_blank" rel="nofollow noopener noreferrer">01:19:20</A>:</STRONG> A quick reminder that I wrote a series of Workflow service related deep-dive posts, called â<A href="https://qmacro.org/2018/01/16/discovering-SAP%20Cloud%20Platform-workflow/" target="_blank" rel="nofollow noopener noreferrer">Discovering SCP Workflow</A>â â¦ and we take a brief look at that series here.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=9yL-mxX-rxo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=01h20m40s" target="_blank" rel="nofollow noopener noreferrer">01:20:40</A>:</STRONG> Creating a very simple Workflow definition âshopstuffâ to try out a Service Task that retrieves data from ES5 via our previously created destination. At this point, I run out of time, and prompted by folks having to leave the stream, I make a decision to call time, leaving the specification of the values for the properties of the Service Task to next time - a nice little cliff hanger <span class="lia-unicode-emoji" title=":slightly_smiling_face:">ð</span><BR />
<BR />
Until next time!
---
Double SAP CodeJam Athens - a report
technology-blog-sap
2019-06-27
https://community.sap.com/t5/technology-blogs-by-sap/double-sap-codejam-athens-a-report/ba-p/13422986
2019-06-27-double-sap-codejam-athens-a-report
<EM>Last week I travelled to Athens to give not one but two SAP CodeJams. It was exhausting but very rewarding. Read on to find out how it went.</EM><BR />
<BR />
As you may already know, my colleagues <SPAN class="mention-scrubbed">iinside</SPAN> and <SPAN class="mention-scrubbed">mariusobert</SPAN> have been running SAP CodeJams with me on the SAP Cloud Application Programming Model (CAP) for the last few months, starting in Frankfurt, Germany, moving through Wroclaw (Poland) and Utrecht (The Netherlands) in May, and then Mechelen (Belgium) earlier this month.<BR />
<BR />
Of course, I'm a big fan of CAP and we've been covering some CAP topics on the <A href="https://bit.ly/handsonsapdev" target="_blank" rel="nofollow noopener noreferrer">Hands-on SAP dev with qmacro</A> series recently (the series is <A href="https://twitter.com/qmacro/status/1144232097747525632" target="_blank" rel="nofollow noopener noreferrer">restarting</A> next week too, hurray!). So it wasn't a surprise when a request came in for an SAP CodeJam event on CAP in Athens, to be hosted at the SAP Hellas offices there. What was surprising was that the request was a double one - could I run a second SAP CodeJam on an SAP Cloud Platform topic?<BR />
<BR />
Perhaps foolishly, I said "yes", and set to work putting together content for a Workflow service focused SAP CodeJam event, to include also the Connectivity service &amp; destinations, the SAP Cloud Connector, the API Business Hub, the SAP Web IDE and all kinds of hacking around with Workflow APIs with the API Hub itself, with Postman, and of course with <A href="https://curl.haxx.se" target="_blank" rel="nofollow noopener noreferrer">curl</A>. A highlight of the content creation was taking inspiration from <SPAN class="mention-scrubbed">pars.man</SPAN>'s Dockerfile recipe for running the SAP Cloud Connector in a Docker container - this worked really well and helped neutralise many of the vagaries of different workstation operating systems by embracing a key cloud philosophy - containerisation. Thanks Nabi!<BR />
<BR />
&nbsp;<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2019/06/Screen-Shot-2019-06-27-at-14.50.02.png" height="238" width="345" /><BR />
<BR />
For some odd reason I couldn't get a direct flight from Manchester to Athens, so ended up going via Zurich and the journey took all day. I rewarded myself with a quick visit to an excellent local craft brewery "<A href="http://strangebrew.gr/" target="_blank" rel="nofollow noopener noreferrer">Strange Brew</A>" for a <A href="https://untappd.com/user/qmacro/checkin/765027188" target="_blank" rel="nofollow noopener noreferrer">small DIPA</A> before the day was out.<BR />
<BR />
&nbsp;<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2019/06/Screen-Shot-2019-06-27-at-14.58.03.png" height="233" width="345" /><BR />
<BR />
The next day, after a delicious breakfast with a rather nice view out of the window, I set off from the hotel to walk the couple of kilometres to the SAP Hellas offices.<BR />
<BR />
&nbsp;<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2019/06/Screen-Shot-2019-06-27-at-14.47.04.jpg" height="249" width="345" /><BR />
<BR />
I hadn't been prepared for how warm it was even in the early morning, so stopped off to cool down at a local cafe half way there.<BR />
<BR />
&nbsp;<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2019/06/Screen-Shot-2019-06-27-at-14.48.56.png" height="212" width="346" /><BR />
<BR />
When I got to the office, I was greeted warmly by all the folks there and the room was ready and waiting for us. There was plenty of coffee and cakes waiting for us too.<BR />
<BR />
&nbsp;<BR />
<BR />
Like all the other SAP CodeJams I've been involved with before, the attendees were wonderful - friendly, open minded, relaxed and ready to learn &amp; share - exactly the right state of mind to be in to get the most from events like these.<BR />
<BR />
On Day 1 we ran through the new "SAP Cloud Platform - Workflow" CodeJam content, and completed the series of 10 exercises. I think it's fair to say that this went generally very well (we had an issue in the morning when someone in the basement was standing on the Internet pipe, or something like that, and access was very slow for a time), and we covered a lot of ground, even managing to get in a little bit of routes action in a neo-app.json descriptor file to test the reverse proxy provided by the Connectivity service.<BR />
<BR />
My favourite part was waiting to see who would use Postman and who would use curl to make the API calls. It turned out that nearly everyone used Postman, which is fair enough, as it's a great tool. Only one person used curl, but his (excellent) choice in HTTP client tools was amplified by a comment he left in the feedback, in the "any other remarks" field, which was simply:<BR />
<BR />
<EM>"curl 4 ever!"</EM><BR />
<BR />
That made my day!<BR />
<BR />
On Day 2 we ran through the now-venerable "CAP - Node.js" CodeJam content; Marius and I had revised some of it just a few days before, to streamline some of the activities required to build the Multi Target Archive (MTA) artifact and deploy it to the Cloud Foundry space on SAP Cloud Platform - this worked well as we had fewer issues with getting the build tools to install and execute correctly on the various Windows platforms, upon which I will not comment further ... except to say that I might wear "that tshirt" next time <span class="lia-unicode-emoji" title=":winking_face:">ð</span><BR />
<BR />
&nbsp;<BR />
<BR />
Overall it was a great double SAP CodeJam event, and I want to thank Mary Margeta, Spyros Sampakoulis and Dimitris Hagigeorgiou for being excellent hosts and shepherds for the fledgling "Southern Europe" group of SAP technicians and developers who attended!<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2019/06/Screen-Shot-2019-06-27-at-15.51.33.png" height="217" width="347" /><BR />
<BR />
&nbsp;<BR />
<BR />
&nbsp;<BR />
<BR />
Find out more about SAP CodeJam events here: <A href="https://www.sap.com/community/events/codejam.html" target="_blank" rel="noopener noreferrer">https://www.sap.com/community/events/codejam.html</A>.<BR />
<BR />
&nbsp;
---
Revisiting UI5 on CodeTalk
technology-blog-sap
2019-05-15
https://community.sap.com/t5/technology-blogs-by-sap/revisiting-ui5-on-codetalk/ba-p/13407237
2019-05-15-revisiting-ui5-on-codetalk
<EM>A few days ago <SPAN class="mention-scrubbed">mariusobert</SPAN> and I took part in an SAP CodeTalk session with host <SPAN class="mention-scrubbed">ian.thain</SPAN>, where we revisited the subject of UI5 - <A href="https://www.youtube.com/watch?v=iin9oKSyaso" target="_blank" rel="nofollow noopener noreferrer">SAP CodeTalk - SAPUI5 Update</A>. We decided it might be useful to write the session up in the form of a blog post, so here it is. Share &amp; enjoy!</EM><BR />
<BR />
Co-authors: DJ Adams &amp; Marius Obert.<BR />
<BR />
The video is here: <A href="https://www.youtube.com/watch?v=iin9oKSyaso" target="_blank" rel="nofollow noopener noreferrer">https://www.youtube.com/watch?v=iin9oKSyaso</A> and we wrote up the conversation in this blog post too.<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2019/05/Screen-Shot-2019-05-15-at-16.07.03.png" /><BR />
<BR />
&nbsp;<BR />
<BR />
<B>What is SAPUI5 and what does it let developers do?</B><BR />
<BR />
<SPAN style="font-weight: 400">SAPUI5 is an enterprise-ready UI development framework for building web apps. Nice looking web apps too, in our opinion. Enterprise ready? For us that means it has features such as: </SPAN><BR />
<UL><BR />
 	<LI style="font-weight: 400"><SPAN style="font-weight: 400">accessibility &amp; internationalisation (including support for right-to-left languages)</SPAN></LI><BR />
 	<LI style="font-weight: 400"><SPAN style="font-weight: 400">support for data-driven UIs (for a consistent user experience)</SPAN></LI><BR />
 	<LI style="font-weight: 400"><SPAN style="font-weight: 400">a comprehensive suite of tools for testing, performance analysis and debugging (to mitigate bugs and deal with them efficiently when they do occur)</SPAN></LI><BR />
 	<LI style="font-weight: 400"><SPAN style="font-weight: 400">separation of data, UI and behaviour (via the native support for the Model-View-Controller (MVC) approach to app design)</SPAN></LI><BR />
</UL><BR />
<SPAN style="font-weight: 400">... and much more. All baked in.</SPAN><BR />
<BR />
<SPAN style="font-weight: 400">The framework comes complete with a large collection of controls - UI elements - and other building blocks such as model mechanisms for interacting with different data sources. How many controls? Last time we counted there were over 500. </SPAN><BR />
<BR />
<SPAN style="font-weight: 400">The UI elements are many and varied - from simple buttons and switches, to table views, Gantt charts, graphical displays for analytics, and everything in between. It also takes care of the rendering of the HTML elements in a responsive way. </SPAN><BR />
<BR />
<B>How is SAPUI5 related to SAP Fiori, and how do they differ?</B><BR />
<BR />
<SPAN style="font-weight: 400">That's a good question, especially as we just released Fiori 3.0 a few days ago. Fiori is many things: a set of user experience (UX) design principles, a design language, a suite of apps that look and work in a consistent fashion ... some even have said that Fiori is a state of mind. </SPAN><BR />
<BR />
<SPAN style="font-weight: 400">SAP Fiori is realised in nearly all cases with SAPUI5, the development framework. The libraries of UI controls in SAPUI5 are designed to follow the Fiori design principles, so it's easy to build smart looking custom apps that fit right alongside what SAP deliver. </SPAN><BR />
<BR />
<SPAN style="font-weight: 400">One way to think about it is that SAP Fiori is UX, while SAPUI5 is UI. Another way is to think about SAP Fiori being the UX concept, and SAPUI5 is the actual implementation as a web UI framework.</SPAN><BR />
<BR />
<B>Whatâs the difference between SAPUI5 and OpenUI5?</B><BR />
<BR />
<SPAN style="font-weight: 400">OpenUI5 is a subset of SAPUI5 and itâs Open Source, SAPUI5 contains some smart controls like charts and plot, which are not available in OpenUI5. The great thing about OpenUI5 is, that you donât need an SAP license to get started. So, once you started to love UI5, you can even use it for your spare time projects as well. </SPAN><BR />
<BR />
<SPAN style="font-weight: 400">Both SAPUI5 and OpenUI5 are developed on a single code line. SAPUI5 and OpenUI5 are so closely related that they're often referred to with the short form, just "UI5". </SPAN><BR />
<BR />
<B>What sort of apps can you build with UI5?</B><BR />
<BR />
<SPAN style="font-weight: 400">What sort of apps </SPAN><I><SPAN style="font-weight: 400">can't</SPAN></I><SPAN style="font-weight: 400"> you build with UI5? Of course, many folks see and use UI5 as the workhorse for their responsive enterprise application needs. SAP does too - UI5 powers the SAP Fiori revolution that started with the Business Suite, and continues to do so as we move to S/4HANA. So just as SAP developers produce apps with UI5, so can you. But that's not where it stops. While you can build apps using the UI controls delivered with the framework, you can create your own controls, customise the styling and generally create anything you want. </SPAN><BR />
<BR />
<SPAN style="font-weight: 400">We've seen Pacman implemented in UI5 - in fact we showed it off at OSCON in 2014:</SPAN><BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2019/05/image002.png" height="325" width="535" /><BR />
<BR />
<I><SPAN style="font-weight: 400">Pacman written in UI5</SPAN></I><BR />
<BR />
<SPAN style="font-weight: 400">If you want to check out something just as crazy written with UI5 have a look at the </SPAN><A href="https://sap.github.io/ui5-flush-game/" target="_blank" rel="nofollow noopener noreferrer"><SPAN style="font-weight: 400">Flush! game</SPAN></A><SPAN style="font-weight: 400">, with the source code </SPAN><A href="https://github.com/SAP/ui5-flush-game" target="_blank" rel="nofollow noopener noreferrer"><SPAN style="font-weight: 400">available on GitHub</SPAN></A><SPAN style="font-weight: 400">.</SPAN><BR />
<BR />
<SPAN style="font-weight: 400">Beyond the regular app situations, there are entire solutions built with UI5 - check out </SPAN><A href="https://www.sap.com/products/sports-one.html" target="_blank" rel="noopener noreferrer"><SPAN style="font-weight: 400">SAP Sports One</SPAN></A><SPAN style="font-weight: 400"> and </SPAN><A href="https://www.sap.com/products/board-room.html" target="_blank" rel="noopener noreferrer"><SPAN style="font-weight: 400">SAP Digital Boardroom</SPAN></A><SPAN style="font-weight: 400"> for just a couple of examples!</SPAN><BR />
<BR />
<B>What are the main takeaways for people new to UI5?</B><BR />
<BR />
<SPAN style="font-weight: 400">Well, there are many, but keeping it short:</SPAN><BR />
<UL><BR />
 	<LI style="font-weight: 400"><SPAN style="font-weight: 400">it's a key framework to learn more about</SPAN></LI><BR />
 	<LI style="font-weight: 400"><SPAN style="font-weight: 400">with UI5 simple apps are simple, and complex apps are possible (repurposing a quote from </SPAN><A href="https://en.wikiquote.org/wiki/Alan_Kay#/media/File:Alan_Kay_and_the_prototype_of_Dynabook,_pt._5_(3010032738).jpg" target="_blank" rel="nofollow noopener noreferrer"><SPAN style="font-weight: 400">Alan Kay</SPAN></A><SPAN style="font-weight: 400">)</SPAN></LI><BR />
 	<LI style="font-weight: 400"><SPAN style="font-weight: 400">UI5 has many rich controls that allow even inexperienced UI developers to build usable frontend apps</SPAN></LI><BR />
</UL><BR />
<SPAN style="font-weight: 400">If you want to get started, have a look at our new beginner tutorial </SPAN><A href="https://developers.sap.com/mission.sapui5-cf-first.html" target="_blank" rel="noopener noreferrer"><SPAN style="font-weight: 400">Develop Your First SAPUI5 Web App on Cloud Foundry</SPAN></A><SPAN style="font-weight: 400">. There's also a new UI5 course that started recently on openSAP: </SPAN><A href="https://open.sap.com/courses/ui52" target="_blank" rel="noopener noreferrer"><SPAN style="font-weight: 400">Evolved Web Apps with SAPUI5</SPAN></A><SPAN style="font-weight: 400"> which we highly recommend; if you've not followed the original openSAP course we recommend that too: </SPAN><A href="https://open.sap.com/courses/ui51" target="_blank" rel="noopener noreferrer"><SPAN style="font-weight: 400">Developing Web Apps with SAPUI5</SPAN></A><SPAN style="font-weight: 400">. Also visit the OpenUI5 home at </SPAN><A href="https://openui5.org" target="_blank" rel="nofollow noopener noreferrer"><SPAN style="font-weight: 400">openui5.org</SPAN></A><SPAN style="font-weight: 400"> and the main UI5 home at </SPAN><A href="https://ui5.sap.com/" target="_blank" rel="noopener noreferrer"><SPAN style="font-weight: 400">ui5.sap.com</SPAN></A><SPAN style="font-weight: 400">. </SPAN><BR />
<BR />
<SPAN style="font-weight: 400">You can even start with some window shopping and see controls in action in the the </SPAN><A href="https://ui5.sap.com/#/controls" target="_blank" rel="noopener noreferrer"><SPAN style="font-weight: 400">demo kit</SPAN></A><SPAN style="font-weight: 400"> - and you can look behind the scenes at the code behind each sample that you can study and even download to run locally.</SPAN><BR />
<BR />
<B>What can a seasoned SAP developer do with UI5?</B><BR />
<BR />
<SPAN style="font-weight: 400">Beyond what we've described already, UI5 supports </SPAN><A href="https://ui5.sap.com/#/topic/3d18f20bd2294228acb6910d8e8a5fb5" target="_blank" rel="noopener noreferrer"><SPAN style="font-weight: 400">routing &amp; navigation</SPAN></A><SPAN style="font-weight: 400">, which means complex apps can be built to be easy for the user to move around in, and to allow deep links to specific business objects or states. UI5 supports modularisation of code which also helps with more involved developments and makes for better code management in the software lifecycle context.</SPAN><BR />
<BR />
<SPAN style="font-weight: 400">UI5 also now offers </SPAN><A href="https://github.com/SAP/ui5-webcomponents" target="_blank" rel="nofollow noopener noreferrer"><SPAN style="font-weight: 400">web components</SPAN></A><SPAN style="font-weight: 400"> that provide a set of reusable UI elements to you which can be used for your static web sites or for web application using any web framework of your choice. It also sports a clean extension framework making it possible to build upon and modify existing apps (both your own and those from SAP), and also provides the ability to extend more general Fiori infrastructure such as the launchpad itself.</SPAN><BR />
<BR />
<SPAN style="font-weight: 400">While it's very easy to consume OData services in UI5, that's not the whole story. You can build integration scenarios and bring in other REST based services too. And if you do have OData services you can use annotations to drive automated UIs, which is the ultimate in a declarative based approach to apps. This is supported by </SPAN><A href="https://help.sap.com/viewer/468a97775123488ab3345a0c48cadd8f/7.51.4/en-US/03265b0408e2432c9571d6b3feb6b1fd.html" target="_blank" rel="noopener noreferrer"><SPAN style="font-weight: 400">SAP Fiori elements</SPAN></A><SPAN style="font-weight: 400"> which provide designs for UI patterns and predefined templates for commonly used application patterns. These application patterns are not only transactional but analytical - there are graphical apps that you can put together too, such as the rather good looking (in our opinion) Overview Page (OVP):</SPAN><BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2019/05/2015_11_ovp_procurement_demo_831136.png" /><BR />
<BR />
<I><SPAN style="font-weight: 400">An example of the SAP Fiori elements OVP, responsive across different devices</SPAN></I><BR />
<BR />
<B>Whatâs new in SAPUI5 that developers need to know about?</B><BR />
<BR />
<SPAN style="font-weight: 400">UI5 development doesn't stand still. We recommend you check out the UI5 home's </SPAN><A href="https://ui5.sap.com/#/topic/99ac68a5b1c3416ab5c84c99fefa250d" target="_blank" rel="noopener noreferrer"><SPAN style="font-weight: 400">What's New section</SPAN></A><SPAN style="font-weight: 400"> which also will lead you to short update videos on YouTube in the </SPAN><A href="https://www.youtube.com/channel/UC8cXSTGDhiZK5229zi-KTXA" target="_blank" rel="nofollow noopener noreferrer"><SPAN style="font-weight: 400">SAP Technology channel</SPAN></A><SPAN style="font-weight: 400">.</SPAN><BR />
<BR />
<SPAN style="font-weight: 400">And here's the killer last question from Ian:</SPAN><BR />
<BR />
<B>Why should I invest in a web app framework that is already over eight years old?</B><BR />
<BR />
<SPAN style="font-weight: 400">Well, come to think of it, React and Angular arenât much younger. And in the web world, newer is not always better. The framework has thousands of person-days of effort invested and it shows. Not only that but that investment is continuing. </SPAN><BR />
<BR />
<SPAN style="font-weight: 400">One huge benefit of investing in UI5 is that compatibility is retained all the time, and bug &amp; security fixes will reliably be provided for years to come. You could think of this being another aspect of being enterprise ready. It's a framework you can bet on, when you don't want to switch to a different "modern" framework every couple of years. And even though you can rely on it for years, it's not a framework that's standing still - it is continuously evolving and embracing new concepts.</SPAN><BR />
<BR />
<SPAN style="font-weight: 400">The way we build solutions based on UI5 is evolving too. While at first we used a plugin with Eclipse, many today develop UI5 in their favourite editors and IDEs, assisted by tooling of all kind. Of course, it would be remiss of us to mention SAP Web IDE, the de facto standard cloud-based development environment which was built from the ground up to create and maintain Fiori apps with UI5, for deployment to both on-prem and cloud targets. And if you're wondering ... yes, SAP Web IDE is itself built with UI5. </SPAN><BR />
<BR />
<SPAN style="font-weight: 400">With initiatives like default asynchronous loading, web components and </SPAN><A href="https://blogs.sap.com/2018/12/06/ui5ers-buzz-39-ui5-evolution-a-quantum-leap-ahead/" target="_blank" rel="noopener noreferrer"><SPAN style="font-weight: 400">UI5 Evolution</SPAN></A><SPAN style="font-weight: 400"> well underway, the future is definitely looking bright for UI5. </SPAN><BR />
<BR />
<SPAN style="font-weight: 400">Get your best steel toecap boots on and kick the tyres, or enrol yourself in </SPAN><A href="https://open.sap.com/courses/ui52" target="_blank" rel="noopener noreferrer"><SPAN style="font-weight: 400">the new openSAP course</SPAN></A><SPAN style="font-weight: 400"> to improve your existing UI5 skills. </SPAN><BR />
<BR />
<SPAN style="font-weight: 400">You won't be disappointed.</SPAN><BR />
<BR />
&nbsp;
---
Annotated links: Episode 23 of Hands-on SAP dev with qmacro
technology-blog-sap
2019-05-09
https://community.sap.com/t5/technology-blogs-by-sap/annotated-links-episode-23-of-hands-on-sap-dev-with-qmacro/ba-p/13407272
2019-05-09-annotated-links-episode-23-of-hands-on-sap-dev-with-qmacro
<EM>This is a searchable description of the content of a live stream recording, specifically <STRONG>"Episode 23 - Digging in to the sitregcapm project"</STRONG> in the "<A href="https://bit.ly/handsonsapdev" target="_blank" rel="nofollow noopener noreferrer">Hands-on SAP dev with qmacro</A>" series. There are links directly to specific highlights in the video recording. For links to annotations of other episodes, please see the "<A href="https://bit.ly/handsonsapdev#replays" target="_blank" rel="nofollow noopener noreferrer">Catch the replays</A>" section of the series blog post.</EM><BR />
<BR />
This episode, titled "<A href="https://bit.ly/handsonsapdev#ep23" target="_blank" rel="nofollow noopener noreferrer">Digging in to the sitregcapm project</A>", was streamed live on Fri 03 May 2019 and is approximately one hour in length. The stream recording is <A href="https://www.youtube.com/watch?v=iettgjZyA2E&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0" target="_blank" rel="nofollow noopener noreferrer">available on YouTube</A>.<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2019/05/Screen-Shot-2019-05-09-at-17.33.09.png" /><BR />
<BR />
Below is a brief synopsis, and links to specific highlights - use these links to jump directly to particular places of interest in the recording, based on 'hh:mm:ss' style timestamps.<BR />
<H2 id="brief-synopsis" id="toc-hId-928949748">Brief synopsis</H2><BR />
In this episode we take a closer look at the project to rewrite the SAP Event Registration app backend using CAP, in the form of the sitregcapm repo on GitHub.<BR />
<H2 id="links-to-specific-highlights" id="toc-hId-732436243">Links to specific highlights</H2><BR />
<STRONG><A href="https://www.youtube.com/watch?v=iettgjZyA2E&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h02m01s" target="_blank" rel="nofollow noopener noreferrer">00:02:01</A>:</STRONG> Highlighting another live streamer, David Poindexter, who goes by the moniker <A href="https://www.twitch.tv/roberttables" target="_blank" rel="nofollow noopener noreferrer">roberttables</A> on Twitch. It turns out that I've highlighted Robert before, in <A href="https://bit.ly/handsonsapdev#ep20" target="_blank" rel="nofollow noopener noreferrer">Ep.20</A>, but anyway, David is definitely someone you should follow on Twitch for all sorts of hardware and software activities.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=iettgjZyA2E&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h04m15s" target="_blank" rel="nofollow noopener noreferrer">00:04:15</A>:</STRONG> Along the same theme of "re-highlighting", I also point out the list <A href="http://awesome.livecoders.dev" target="_blank" rel="nofollow noopener noreferrer">Awesome Developer Streams</A> which is full of lovely folks who stream on development topics.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=iettgjZyA2E&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h05m10s" target="_blank" rel="nofollow noopener noreferrer">00:05:10</A>:</STRONG> Mentioning my colleague <SPAN class="mention-scrubbed">mariusobert</SPAN> and his great <A href="https://blogs.sap.com/tag/cloudfoundryfun/" target="_blank" rel="noopener noreferrer">Cloud Foundry Fun</A> series. While I do this, <SPAN class="mention-scrubbed">gregorw</SPAN> suggests that the ABAP topic is missing from the list of streamers! He's right. I think it would be awesome to see. Who's up for it - any volunteers? I can definitely help folks get set up for streaming, having gone through the process myself. But also, if you would just to come on as a guest here and show us some cool ABAP stuff, I'd love to host you - let me know!<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=iettgjZyA2E&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h08m12s" target="_blank" rel="nofollow noopener noreferrer">00:08:12</A>:</STRONG> Looking briefly at <A href="http://sap.github.io/fundamental/" target="_blank" rel="nofollow noopener noreferrer">SAP Fiori Fundamentals</A>, a light-weight presentation layer for building Fiori apps in any web-based technology. The team run <A href="https://sap.github.io/fundamental/office-hours/" target="_blank" rel="nofollow noopener noreferrer">office hours</A> which are regular live sessions, the recordings of which are available on YouTube. Worth a visit!<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=iettgjZyA2E&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h09m42s" target="_blank" rel="nofollow noopener noreferrer">00:09:42</A>:</STRONG> Next we turn our attention to some really exciting news from the VS Code team, in a <A href="https://twitter.com/code/status/1124071825451909120" target="_blank" rel="nofollow noopener noreferrer">tweet</A> highlighted by <SPAN class="mention-scrubbed">rsletta</SPAN> just before we started this stream. It's now possible to use a Docker container (or remote SSH host) with a local copy of VS Code. I think this is pretty darn good and a great set of facilities for an already very accomplished IDE.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=iettgjZyA2E&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h11m30s" target="_blank" rel="nofollow noopener noreferrer">00:11:30</A>:</STRONG> This is definitely something worth looking into now, even for a quick peek. So that's what we do. Looking at the page linked from the tweet, we see it's the location in the Visual Studio Marketplace for this <A href="https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.vscode-remote-extensionpack" target="_blank" rel="nofollow noopener noreferrer">Remote Development</A> extension.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=iettgjZyA2E&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h13m50s" target="_blank" rel="nofollow noopener noreferrer">00:13:50</A>:</STRONG> This extension preview requires the <A href="https://code.visualstudio.com/insiders/" target="_blank" rel="nofollow noopener noreferrer">insiders</A> version of VS Code, so I'd blasted away my standard installation ready for this version instead. (I could have run both versions side by side, but I had been having some issues with one of the extensions (for SQLite) anyway so a clean reinstall couldn't harm, I figured).<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=iettgjZyA2E&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h14m30s" target="_blank" rel="nofollow noopener noreferrer">00:14:30</A>:</STRONG> Installing the insiders version of VS Code, before attempting to install the Remote Development extension pack.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=iettgjZyA2E&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h15m00s" target="_blank" rel="nofollow noopener noreferrer">00:15:00</A>:</STRONG> Looking briefly at my Docker setup, in particular the images I have for CAP development and testing.<BR />
<PRE><CODE>=&gt; docker image ls<BR />
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE<BR />
cap                 latest              35042912625f        5 days ago          365MB<BR />
debiancap           latest              a8fd0c3eb330        5 days ago          293MB<BR />
node                10                  64c810caf95a        5 weeks ago         899MB<BR />
node                lts                 64c810caf95a        5 weeks ago         899MB<BR />
debian              latest              a0bd3e1c8f9e        3 months ago        101MB</CODE></PRE><BR />
Here's what I have in my <CODE>Dockerfile</CODE> for building the "debiancap" image:<BR />
<PRE><CODE>FROM debian<BR />
MAINTAINER DJ Adams dj.adams@sap.com<BR />
<BR />
RUN apt-get update &amp;&amp; apt-get install -y \<BR />
    ranger \<BR />
    unzip \<BR />
    curl \<BR />
    git \<BR />
    vim</CODE></PRE><BR />
This means I can start a level slightly higher than the base Debian install, with tools that I use all the time.<BR />
<BR />
On top of that I have another <CODE>Dockerfile</CODE> to create the "cap" image:<BR />
<PRE><CODE>FROM debiancap<BR />
MAINTAINER DJ Adams dj.adams@sap.com<BR />
<BR />
RUN rm /bin/sh &amp;&amp; ln -s /bin/bash /bin/sh<BR />
<BR />
RUN groupadd -g 999 user &amp;&amp; \<BR />
    useradd -m -r -u 999 -g user user<BR />
USER user<BR />
<BR />
WORKDIR /home/user<BR />
<BR />
COPY installcds .<BR />
COPY bashrc_additions .<BR />
RUN cat bashrc_additions &gt;&gt; .bashrc<BR />
<BR />
RUN mkdir /home/user/.nvm<BR />
ENV NVM_DIR /home/user/.nvm<BR />
RUN curl -o- <A href="https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh" target="test_blank" rel="nofollow noopener noreferrer">https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh</A> | bash \<BR />
    &amp;&amp; source $NVM_DIR/nvm.sh \<BR />
    &amp;&amp; nvm install --lts</CODE></PRE><BR />
<STRONG><A href="https://www.youtube.com/watch?v=iettgjZyA2E&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h17m45s" target="_blank" rel="nofollow noopener noreferrer">00:17:45</A>:</STRONG> I can then instantiate an instance of the "cap" image - a container - with:<BR />
<DIV><BR />
<PRE class="sourceCode sh"><CODE class="sourceCode bash"><SPAN class="ex">docker</SPAN> run -it cap</CODE></PRE><BR />
</DIV><BR />
<STRONG><A href="https://www.youtube.com/watch?v=iettgjZyA2E&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h19m54s" target="_blank" rel="nofollow noopener noreferrer">00:19:54</A>:</STRONG> Having fired up the newly installed "insiders" version of VS Code I attempt to install the Remote Development extension, but this doesn't work. It seems that the link behind the big green "Install" button is a custom one, that looks like this:<BR />
<PRE><CODE>vscode:extension/ms-vscode-remote.vscode-remote-extensionpack</CODE></PRE><BR />
It looks like standard VS Code, and not the "insiders" version, is set up on my machine to handle this sort of link.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=iettgjZyA2E&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h21m11s" target="_blank" rel="nofollow noopener noreferrer">00:21:11</A>:</STRONG> So we take an alternative route and download the extension. We know this route as we've used it before when installing the <A href="https://tools.hana.ondemand.com/#cloud" target="_blank" rel="nofollow noopener noreferrer">CDS Language Support for Visual Studio Code</A>.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=iettgjZyA2E&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h22m24s" target="_blank" rel="nofollow noopener noreferrer">00:22:24</A>:</STRONG> As I ramble on about bit rates, Gregor suggests we follow the "Trouble Installing" link but that doesn't give us any immediate clues that seem relevant. Not to worry though as the install-from-downloaded-VSIX file is something that I think will work.<BR />
<BR />
As we look at this documentation we spot how extensions can be installed from the command line; moreover, we've seen this before when Ronnie tooks us through his dotfiles - I remember glimpsing it when I was browsing through the <CODE>macOS.sh</CODE> file, specifically <A href="https://github.com/rsletta/dotfiles/blob/master/macOS.sh#L91-L102" target="_blank" rel="nofollow noopener noreferrer">lines 91-102</A>. Nice!<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=iettgjZyA2E&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h24m05s" target="_blank" rel="nofollow noopener noreferrer">00:24:05</A>:</STRONG> Looking briefly at some short (some one-liner!) scripts I've created in a new <CODE>.scripts/</CODE> directory, including <CODE>drmexited</CODE>, <CODE>rdminone</CODE>, <CODE>dsession</CODE> and <CODE>genannopost</CODE>.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=iettgjZyA2E&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h26m35s" target="_blank" rel="nofollow noopener noreferrer">00:26:35</A>:</STRONG> Installing the extension with:<BR />
<DIV><BR />
<PRE class="sourceCode sh"><CODE class="sourceCode bash"><SPAN class="ex">code-insiders</SPAN> --install-extension ~/Desktop/ms-vscode-remote.vscode-remote-extensionpack-0.12.0.vsix</CODE></PRE><BR />
</DIV><BR />
And it worked! (We also see some of my older extensions in there, perhaps from the previous VS Code install).<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=iettgjZyA2E&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h28m10s" target="_blank" rel="nofollow noopener noreferrer">00:28:10</A>:</STRONG> Now the extension pack is installed, we have a new feature in the bottom left corner of VS Code with which we can ... "attach to running container"!<BR />
<BR />
We start up an instance of the "cap" image (a container) but have an initial issue as that image sets up a non-root user (see the <CODE>USER</CODE> command in the <CODE>Dockerfile</CODE> earlier). So we fire up an instance of the standard "debian" image to try instead ... successfully. We create a directory (<CODE>banana</CODE>) inside the container and can see it in VS Code. Result!<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=iettgjZyA2E&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h31m18s" target="_blank" rel="nofollow noopener noreferrer">00:31:18</A>:</STRONG> Jumping now to looking at the <A href="https://github.com/sapmentors/sitregcapm" target="_blank" rel="nofollow noopener noreferrer">sitregcapm</A> repository on GitHub, in the "sapmentors" namespace. This is a project initiated by Gregor as a rewrite of the backend for the <A href="https://wiki.scn.sap.com/wiki/display/events/SAP+Inside+Track" target="_blank" rel="noopener noreferrer">SAP Inside Track</A> registration and management app suite. A rewrite from HANA XS Classic to the Application Programming Model - as the description states: "SITreg implemented in the SAP Cloud Application Programming Model".<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=iettgjZyA2E&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h33m00s" target="_blank" rel="nofollow noopener noreferrer">00:33:00</A>:</STRONG> We take a quick look at one of the frontends for this suite, to contextualise the app backend, specifically the SAP Event Organiser app.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=iettgjZyA2E&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h37m18s" target="_blank" rel="nofollow noopener noreferrer">00:37:18</A>:</STRONG> We clone the repository and start looking at it in VS Code, for an initial exploration of the contents - including the <CODE>.vscode/</CODE> directory and the two "usual suspects" <CODE>.db/</CODE> and <CODE>.srv</CODE>.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=iettgjZyA2E&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h39m25s" target="_blank" rel="nofollow noopener noreferrer">00:39:25</A>:</STRONG> We look at the CSV files and notice that a couple have been "commented out" in that the extension has been changed to <CODE>xcsv</CODE>. It looks like these files are to contain the localised values of texts, as they each end in <CODE>_texts</CODE>.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=iettgjZyA2E&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h41m27s" target="_blank" rel="nofollow noopener noreferrer">00:41:27</A>:</STRONG> Looking at more details of the repository we see that there are already six contributors so far - <A href="https://github.com/gregorwolf" target="_blank" rel="nofollow noopener noreferrer">Gregor Wolf</A>, <A href="https://github.com/NabheetCloud" target="_blank" rel="nofollow noopener noreferrer">Nabheet Madan</A>, <A href="https://github.com/balbinosoares" target="_blank" rel="nofollow noopener noreferrer">Balbino Soares</A>, <A href="https://github.com/lechnerc77" target="_blank" rel="nofollow noopener noreferrer">Christian Lechner</A>, <A href="https://github.com/thulium3" target="_blank" rel="nofollow noopener noreferrer">Mark Teichmann</A> and <A href="https://github.com/mattiastrr" target="_blank" rel="nofollow noopener noreferrer">mattiastrr</A>.<BR />
<BR />
But I guess the main point of the focus on this repository is that it deserves more love, and contributors. It would be great if you could get involved, clone the repository, start having a poke around, and make your first contribution. There's a #sitregdiscussion channel on the SAP Mentors &amp; Friends Slack workspace - head on over there (you can register <A href="https://community.sap.com/sapmentors-slack-invite.cfapps.eu10.hana.ondemand.com" target="_blank" rel="nofollow noopener noreferrer">here</A> if you need to) and say hi.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=iettgjZyA2E&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h43m50s" target="_blank" rel="nofollow noopener noreferrer">00:43:50</A>:</STRONG> Noting the pairs of <CODE>cds</CODE> and <CODE>js</CODE> files in the <CODE>srv/</CODE> directory, where there's an accompanying custom implementation file paired with each service definition. Turns out there's no custom implementation just yet ... but the project is still young.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=iettgjZyA2E&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h47m16s" target="_blank" rel="nofollow noopener noreferrer">00:47:16</A>:</STRONG> Looking briefly at the <CODE>.cdsrc.json</CODE> file, which is part of the hierarchy (or precedence order) of configuration. Think of this file as at the bottom of the stack (i.e. the least significant), where you have the following cascading locations (higher in this stack overrides levels beneath):<BR />
<PRE><CODE>Command line parameters<BR />
Environment variables<BR />
`package.json`<BR />
`.cdsrc.json`</CODE></PRE><BR />
<STRONG><A href="https://www.youtube.com/watch?v=iettgjZyA2E&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h50m20s" target="_blank" rel="nofollow noopener noreferrer">00:50:20</A>:</STRONG> Having a quick look at the errors that currently are highlighted in the <CODE>data-model.cds</CODE> file ... this is because we haven't yet installed anything inside this project! This means that we don't have a <CODE>node_modules/</CODE> directory which is where <CODE><a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a>/cds/common.cds</CODE> lives of course, as we know from a couple of earlier episodes in this series.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=iettgjZyA2E&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h51m15s" target="_blank" rel="nofollow noopener noreferrer">00:51:15</A>:</STRONG> So we start to perform the installs, with <CODE>npm install</CODE>. Looking in the <CODE>package.json</CODE> file we see this:<BR />
<PRE><CODE>  "dependencies": {<BR />
    "@sap/cds": "^3.5.2",<BR />
    "express": "^4.16.4"<BR />
  },</CODE></PRE><BR />
and we head off for a short digression into <A href="https://docs.npmjs.com/misc/semver" target="_blank" rel="nofollow noopener noreferrer">semantic versioning with NPM</A>.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=iettgjZyA2E&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h55m23s" target="_blank" rel="nofollow noopener noreferrer">00:55:23</A>:</STRONG> One thing we haven't seen so far is the use of enumerations, which are used here in the type definitions:<BR />
<PRE class="cds"><CODE>type URL            : String(256);<BR />
type HashT          : Binary(32);<BR />
type AnswerOption   : Integer enum { yes = 1; no = 2; maybe = 3; };<BR />
type DeviceT        : String(36);<BR />
type TicketUsedT    : String(1) enum{ YES = 'Y'; NO = 'N'; };<BR />
type ActiveT        : String(1) enum{ YES = 'Y'; NO = 'N'; };<BR />
type PrintStatusT   : String(1) enum{ QUEUED = 'Q'; SENT = 'S'; PRINTED = 'P' };</CODE></PRE><BR />
You can find out more about enumerations (Enums) in the <A href="https://help.sap.com/viewer/65de2977205c403bbc107264b8eccf4b/Cloud/en-US/73ff4d2e372c425bbfab9124cb048d52.html?q=enum" target="_blank" rel="noopener noreferrer">Elements and Types</A> of the SAP Help Portal.<BR />
<BR />
Triggered by a question from Gregor, we look briefly again into how the <CODE>cds</CODE> command line bootstraps the CDS core - bringing in a local version if present, and falling back to a globally installed version otherwise. That is why here, while I have version 3.7.1 installed globally, 3.5.2 is installed locally to this project, which means that when I run <CODE>cds version</CODE> inside the <CODE>sitregcapm</CODE> project directory, I get this:<BR />
<PRE><CODE>@sap/cds: 3.5.2<BR />
@sap/cds-compiler: 1.8.1<BR />
@sap/cds-ql: 1.5.1<BR />
@sap/cds-hana: 1.5.1<BR />
@sap/cds-sql: 1.5.1<BR />
@sap/cds-sqlite: 1.5.1<BR />
@sap/cds-reflect: 2.3.0<BR />
@sap/cds-services: 1.5.2<BR />
@sap/odata-server: 1.0.0<BR />
@sap/odata-commons: 1.0.0<BR />
@sap/generator-cds: 2.3.9<BR />
CDS home: /private/tmp/sitregcapm/node_modules/@sap/cds</CODE></PRE><BR />
And that about wraps it up for this episode - the time went very quickly! Until the next time, happy hacking!
---
Annotated links: Episode 22 of Hands-on SAP dev with qmacro
technology-blog-sap
2019-05-09
https://community.sap.com/t5/technology-blogs-by-sap/annotated-links-episode-22-of-hands-on-sap-dev-with-qmacro/ba-p/13407297
2019-05-09-annotated-links-episode-22-of-hands-on-sap-dev-with-qmacro
<EM>This is a searchable description of the content of a live stream recording, specifically <STRONG>"Episode 22 - Live stream community share â dotfiles and Google Cloud Run goodness"</STRONG> in the "<A href="https://bit.ly/handsonsapdev" target="_blank" rel="nofollow noopener noreferrer">Hands-on SAP dev with qmacro</A>" series. There are links directly to specific highlights in the video recording. For links to annotations of other episodes, please see the "<A href="https://bit.ly/handsonsapdev#replays" target="_blank" rel="nofollow noopener noreferrer">Catch the replays</A>" section of the series blog post.</EM><BR />
<BR />
This episode, titled "<A href="https://bit.ly/handsonsapdev#ep22" target="_blank" rel="nofollow noopener noreferrer">Live stream community share â dotfiles and Google Cloud Run goodness</A>", was streamed live on Wed 01 May 2019 and is approximately one hour in length. The stream recording is <A href="https://www.youtube.com/watch?v=10NnzXZLjTQ&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0" target="_blank" rel="nofollow noopener noreferrer">available on YouTube</A>.<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2019/05/Screen-Shot-2019-05-09-at-17.29.27.png" /><BR />
<BR />
Below is a brief synopsis, and links to specific highlights - use these links to jump directly to particular places of interest in the recording, based on 'hh:mm:ss' style timestamps.<BR />
<H2 id="brief-synopsis" id="toc-hId-928949815">Brief synopsis</H2><BR />
In this midweek episode we enjoy a little off piste activity with two special guests from the #HandsOnSAPDev community. Ronnie Sletta describes his setup and takes us through his dotfiles for new machine setups, and Nabheet Madan shows us how he deployed a CAP project to Google Cloud Run.<BR />
<H2 id="links-to-specific-highlights" id="toc-hId-732436310">Links to specific highlights</H2><BR />
<STRONG><A href="https://www.youtube.com/watch?v=10NnzXZLjTQ&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h02m05s" target="_blank" rel="nofollow noopener noreferrer">00:02:05</A>:</STRONG> Drawing our attention to <A href="https://twitter.com/scottdillon1" target="_blank" rel="nofollow noopener noreferrer">Scott Dillon</A> who runs a regular series of "Garage" online sessions on SAP Cloud Platform technical topics. You can find out more at his <A href="http://whyscp.com/wp/scp-garage-scott-dillons-technical-workshops/" target="_blank" rel="nofollow noopener noreferrer">WhySCP</A> page and the recordings of the sessions are available in a YouTube playlist <A href="https://www.youtube.com/playlist?list=PLWV533hWWvDnWRZAUjcDvwlGJ-0npJxlL" target="_blank" rel="nofollow noopener noreferrer">SAP Cloud Platform in the Garage</A> on the <A href="https://www.youtube.com/channel/UC8cXSTGDhiZK5229zi-KTXA" target="_blank" rel="nofollow noopener noreferrer">SAP Technology</A> channel. Great stuff!<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=10NnzXZLjTQ&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h03m36s" target="_blank" rel="nofollow noopener noreferrer">00:03:36</A>:</STRONG> Pointing out another coding live streamer, <A href="https://twitter.com/brendoneus" target="_blank" rel="nofollow noopener noreferrer">Brendan Enrick</A> who streams live on Twitch with the <A href="https://twitch.tv/devchatter" target="_blank" rel="nofollow noopener noreferrer">DevChatter</A> handle. All sorts of interesting stuff and right now he's building something that will help folks like you and me find other code based live streams. Definitely worth following.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=10NnzXZLjTQ&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h04m28s" target="_blank" rel="nofollow noopener noreferrer">00:04:28</A>:</STRONG> Mentioning an update to SAP Web IDE relating to building Node.js based CAP apps - see the blog post <A href="https://blogs.sap.com/2019/04/29/develop-business-services-with-node.js-in-sap-web-ide/" target="_blank" rel="noopener noreferrer">Develop Business Services with Node.js in SAP Web IDE</A> by <SPAN class="mention-scrubbed">liat.borenshtein#overview</SPAN> for more info.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=10NnzXZLjTQ&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h07m15s" target="_blank" rel="nofollow noopener noreferrer">00:07:15</A>:</STRONG> Introducing today's guests <SPAN class="mention-scrubbed">rsletta</SPAN> and <SPAN class="mention-scrubbed">nabheet.madan3</SPAN>, and dialling in Ronnie to the stream.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=10NnzXZLjTQ&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h08m50s" target="_blank" rel="nofollow noopener noreferrer">00:08:50</A>:</STRONG> Ronnie introduces himself and what he's going to be showing us, with some background about how he uses virtual machines and spins them up at a moment's notice - which means that he's had to come up with a solution for automating some of the post-creation setup, using dotfiles and shell scripts. Cross platform too!<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=10NnzXZLjTQ&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h15m10s" target="_blank" rel="nofollow noopener noreferrer">00:15:10</A>:</STRONG> Ronnie switches over to show his screen, and explains dotfiles, giving us examples from his own set, including <CODE>.vimrc</CODE>, <CODE>.tmux.conf</CODE> and - possibly the most important here - <CODE>.bashrc</CODE> (which differs from <CODE>.bash_profile</CODE> as described in <A href="https://apple.stackexchange.com/questions/51036/what-is-the-difference-between-bash-profile-and-bashrc" target="_blank" rel="nofollow noopener noreferrer">this StackExchange post</A>).<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=10NnzXZLjTQ&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h22m58s" target="_blank" rel="nofollow noopener noreferrer">00:22:58</A>:</STRONG> There's also a <CODE>.functions</CODE> file that allows Ronnie to keep his code and setup nice and modular. In a similar way, there are also the <CODE>.aliases</CODE> and <CODE>.nvm_path</CODE> files.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=10NnzXZLjTQ&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h23m19s" target="_blank" rel="nofollow noopener noreferrer">00:23:19</A>:</STRONG> <A href="https://twitter.com/tiagobalmeida" target="_blank" rel="nofollow noopener noreferrer">Tiago</A> asks about the VS Code extension that Ronnie is using to show the commit info in-line with the file content - and answered directly in the chat by Nabheet - it's <A href="https://gitlens.amod.io/" target="_blank" rel="nofollow noopener noreferrer">GitLens</A>.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=10NnzXZLjTQ&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h24m20s" target="_blank" rel="nofollow noopener noreferrer">00:24:20</A>:</STRONG> Ronnie uses <A href="https://github.com/creationix/nvm" target="_blank" rel="nofollow noopener noreferrer">nvm</A> to manage his Node.js installations; this is a great way to do it - and we've seen its use also in a previous episode in this series. One bonus of using <CODE>nvm</CODE> is that you can install and manage Node.js without needing root access. If you're in charge of your own VMs that is not so much of an issue, but it's nice to know you can be independent of any BOFHs! <span class="lia-unicode-emoji" title=":slightly_smiling_face:">ð</span><BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=10NnzXZLjTQ&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h24m55s" target="_blank" rel="nofollow noopener noreferrer">00:24:55</A>:</STRONG> Starting to look at Ronnie's <CODE>.bash_profile</CODE> which has all sorts of goodness, including platform specific logic. He has taken some of the content from others, which is a great way to bootstrap your shell skills. The references he gives are in his repo's README. In fact all the code Ronnie is showing is available online in the repo, which is here: <A class="uri" href="https://github.com/rsletta/dotfiles" target="_blank" rel="nofollow noopener noreferrer">https://github.com/rsletta/dotfiles</A>.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=10NnzXZLjTQ&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h28m20s" target="_blank" rel="nofollow noopener noreferrer">00:28:20</A>:</STRONG> Moving on now to the real star of the repo, which is the <CODE>bootstrap.sh</CODE> script. Ronnie talks about how he came to write this, and why. At this point we dig in deeper with a demo where Ronnie uses his iPad as a terminal, using an SSH client (<A href="https://www.blink.sh/" target="_blank" rel="nofollow noopener noreferrer">Blink Shell</A> and shows us how he sets up a newly minted (but otherwise bare) virtual machine.<BR />
<BR />
He follows the instructions in his repo's README which is essentially to clone the repo, and run the <CODE>bootstrap.sh</CODE> script:<BR />
<PRE class="shell"><CODE>git clone <A href="https://github.com/rsletta/dotfiles.git" target="test_blank" rel="nofollow noopener noreferrer">https://github.com/rsletta/dotfiles.git</A> &lt;DIRECTORY_NAME&gt; &amp;&amp; cd &lt;DIRECTORY_NAME&gt; &amp;&amp; ./bootstrap.sh</CODE></PRE><BR />
Running this script sets up lots of different things, including Node.js itself and of course the <CODE><a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a>/cds</CODE> package!<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=10NnzXZLjTQ&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h33m25s" target="_blank" rel="nofollow noopener noreferrer">00:33:25</A>:</STRONG> At this stage, the shell's prompt is nice and attractive and informative, and he can jump into <CODE>tmux</CODE> and <CODE>vim</CODE> to finalise the setup (for example of the Vim plugins). All done!<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=10NnzXZLjTQ&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h34m20s" target="_blank" rel="nofollow noopener noreferrer">00:34:20</A>:</STRONG> Ronnie encourages you to go into the repo and check out what's inside of the platform specific scripts <CODE>macOS.sh</CODE> and <CODE>Ubuntu.sh</CODE>. So what are you waiting for? <span class="lia-unicode-emoji" title=":winking_face:">ð</span><BR />
<BR />
Thanks Ronnie!<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=10NnzXZLjTQ&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h35m30s" target="_blank" rel="nofollow noopener noreferrer">00:35:30</A>:</STRONG> Ronnie shares with us a quick reminder of <A href="https://wiki.scn.sap.com/wiki/display/events/SAP+Inside+Track+Oslo+-+17+August+2019" target="_blank" rel="noopener noreferrer">SAP Inside Track OSLO</A> which is on 17 Aug 2019. Head on over to the homepage for more info!<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=10NnzXZLjTQ&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h36m50s" target="_blank" rel="nofollow noopener noreferrer">00:36:50</A>:</STRONG> Now it's time to bring Nabheet onto the stream. After being dialled in, Nabheet introduces himself and sets the scene for what he's going to show us. He's written it all up in a blog post too, which you can read here: <A href="https://blogs.sap.com/2019/04/26/capm-meet-google-cloud-run-serverless-containers/" target="_blank" rel="noopener noreferrer">CAPM meet Google Cloud Run â Serverless Containers</A>.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=10NnzXZLjTQ&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h38m40s" target="_blank" rel="nofollow noopener noreferrer">00:38:40</A>:</STRONG> Nabheet highlights <SPAN class="mention-scrubbed">lsubatin</SPAN>'s blog post <A href="https://blogs.sap.com/2019/04/13/post-google-next-19-curiosity-playing-with-cloud-run-and-sap-hana/" target="_blank" rel="noopener noreferrer">Post Google Next '19 curiosity - Playing with Cloud Run and HANA</A> which got him started on this particular journey of discovery of deploying a CAP app to the Google Cloud and running it there.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=10NnzXZLjTQ&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h40m30s" target="_blank" rel="nofollow noopener noreferrer">00:40:30</A>:</STRONG> He also highlights his series of posts <A href="https://blogs.sap.com/2019/02/08/helloworld-sapui5-meets-kubernetes-containers/" target="_blank" rel="noopener noreferrer">#HelloWorld SAPUI5 meets Kubernetes - Containers</A> (a series which also contains a post from Ronnie - nice teamwork!), thinking about progressing to serverless functions to serverless containers ... and Google Cloud Run is about scaled serverless containers.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=10NnzXZLjTQ&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h41m55s" target="_blank" rel="nofollow noopener noreferrer">00:41:55</A>:</STRONG> Nabheet describes his starting point with a CAP app based on the tutorial <A href="https://developers.sap.com/tutorials/cp-apm-nodejs-create-service.html" target="_blank" rel="noopener noreferrer">Create a Business Service with Node.js using Visual Studio Code</A> on <A href="https://developers.sap.com" target="_blank" rel="noopener noreferrer">developers.sap.com</A>. The plan is first to deploy it to Google Cloud and run it "locally" in that it will be run from the Google Cloud Shell, and then build a container image and deploy &amp; run that.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=10NnzXZLjTQ&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h42m42s" target="_blank" rel="nofollow noopener noreferrer">00:42:42</A>:</STRONG> And now it's demo time, where Nabheet shows us the new Cloud Run feature in the Google Cloud Platform console.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=10NnzXZLjTQ&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h44m25s" target="_blank" rel="nofollow noopener noreferrer">00:44:25</A>:</STRONG> Looking at the Google Cloud Shell (of which I'm a big fan and user too) - a browser accessible shell environment which gives you a pretty decent environment with many of the tools you expect, plus the <CODE>gcloud</CODE> tool, and a 5GB filesystem which persists (so you can install other tools there* and store files too).<BR />
<BR />
* There's a new feature, still in alpha, which now allows you to <A href="https://console.cloud.google.com/cloudshell/environment/view" target="_blank" rel="nofollow noopener noreferrer">define your own build instructions for the image that is used for Google Cloud Shell</A>.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=10NnzXZLjTQ&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h46m03s" target="_blank" rel="nofollow noopener noreferrer">00:46:03</A>:</STRONG> Nabheet shows us that as well as regular tools such as the Vim editor, Google Cloud Shell has a web-based IDE too, which you can invoke with a button or from the command line with the <CODE>edit</CODE> command. Lucia had referred to this in the chat too.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=10NnzXZLjTQ&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h47m35s" target="_blank" rel="nofollow noopener noreferrer">00:47:35</A>:</STRONG> Running the CAP app locally, with <CODE>cds run</CODE>, and we see, as expected, the service is available on <A class="uri" href="http://localhost:4004" target="_blank" rel="nofollow noopener noreferrer">http://localhost:4004</A>. This port on the Google Cloud Shell is proxied so it can be accessed directly from the browser ... but how does this actually work?<BR />
<BR />
There's a bit of Google magic here at play that I think we missed, and during the playback just now (while I write these annotations) I looked into it. Nabheet clicked on the <A class="uri" href="http://localhost:4004" target="_blank" rel="nofollow noopener noreferrer">http://localhost:4004</A> link and what actually happened is that that link (which is made available in the shell to us via an HTML5 link) was actually a link to this URL:<BR />
<PRE><CODE><A href="https://ssh.cloud.google.com/devshell/proxy?authuser=0&amp;port=4004" target="test_blank" rel="nofollow noopener noreferrer">https://ssh.cloud.google.com/devshell/proxy?authuser=0&amp;port=4004</A></CODE></PRE><BR />
This seems to be a generic service that will cause ports to be automatically proxied by what appears to be a Google App Engine based service (I'm assuming that from the resulting URL which includes the giveaway string <CODE>appspot</CODE>). In my experiment just now, doing what Nabheet did, the end URL is:<BR />
<PRE><CODE><A href="https://4004-dot-3208420-dot-devshell.appspot.com/?authuser=0" target="test_blank" rel="nofollow noopener noreferrer">https://4004-dot-3208420-dot-devshell.appspot.com/?authuser=0</A></CODE></PRE><BR />
Nice!<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=10NnzXZLjTQ&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h47m50s" target="_blank" rel="nofollow noopener noreferrer">00:47:50</A>:</STRONG> So at this stage we see the familiar "Welcome to cds.service" page in the browser, showing that the CAP app is running successfully ... in Nabheet's Google Cloud Shell.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=10NnzXZLjTQ&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h48m10s" target="_blank" rel="nofollow noopener noreferrer">00:48:10</A>:</STRONG> So now it's time to create a container image. Here is the build command that Nabheet used, referring to the "capm3" image definition:<BR />
<PRE class="shell"><CODE>gcloud builds submit --tag gcr.io/steel-signifier-225916/capm3</CODE></PRE><BR />
(the <CODE>steel-signifier-225916</CODE> is an identifier that is specific to Nabheet's session).<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=10NnzXZLjTQ&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h48m55s" target="_blank" rel="nofollow noopener noreferrer">00:48:55</A>:</STRONG> We have a quick look at the <CODE>Dockerfile</CODE> which contains the build instructions for the image, which is based on the <A href="https://hub.docker.com/_/node" target="_blank" rel="nofollow noopener noreferrer">official Node.js 10 image</A> which Lucia has also used (note that the contents of the file are in Nabheet's post mentioned earlier).<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=10NnzXZLjTQ&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h49m40s" target="_blank" rel="nofollow noopener noreferrer">00:49:40</A>:</STRONG> At this point the image has now been built (builds can be checked in the Cloud Build section of the console). So now it's time to deploy, with:<BR />
<PRE class="shell"><CODE>gcloud beta run deploy --image gcr.io/steel-signifier-225916/capm3</CODE></PRE><BR />
<STRONG><A href="https://www.youtube.com/watch?v=10NnzXZLjTQ&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h52m00s" target="_blank" rel="nofollow noopener noreferrer">00:52:00</A>:</STRONG> Going to the Cloud Run section of the console we now see the new "capm3" service where we look briefly at the logs before accessing the CAP service that's running there, via this URL:<BR />
<PRE><CODE><A href="https://capm3-ngsx6q2qma-uc.a.run.app" target="test_blank" rel="nofollow noopener noreferrer">https://capm3-ngsx6q2qma-uc.a.run.app</A></CODE></PRE><BR />
There's a small issue with the service URLs not appearing below the "Welcome to cds.services" but they are available all the same, via the usual paths, and we can retrieve the book and author entities via OData query operations as usual.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=10NnzXZLjTQ&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h52m18s" target="_blank" rel="nofollow noopener noreferrer">00:52:18</A>:</STRONG> Nabheet points out that there are <A href="https://github.com/GoogleCloudPlatform/cloud-shell-tutorials" target="_blank" rel="nofollow noopener noreferrer">Cloud Shell tutorials on GitHub</A>, and you can run them interactively in the shell like this:<BR />
<PRE class="shell"><CODE>cloudshell launch-tutorial -d &lt;path-to-the-tutorials&gt;</CODE></PRE><BR />
Thanks Nabheet!<BR />
<BR />
I really enjoyed Ronnie and Nabheet's share of experimentation and knowledge - thanks so much again. Until next time!
---
Annotated links: Episode 11 of Hands-on SAP dev with qmacro
technology-blog-sap
2019-04-30
https://community.sap.com/t5/technology-blogs-by-sap/annotated-links-episode-11-of-hands-on-sap-dev-with-qmacro/ba-p/13401796
2019-04-30-annotated-links-episode-11-of-hands-on-sap-dev-with-qmacro
<EM>This is a searchable description of the content of a live stream recording, specifically <STRONG>"Episode 11 - A CAP project for âGeonamesâ &amp; funcprog style with Chris Whealy"</STRONG> in the "<A href="https://bit.ly/handsonsapdev" target="_blank" rel="nofollow noopener noreferrer">Hands-on SAP dev with qmacro</A>" series. There are links directly to specific highlights in the video recording. For links to annotations of other episodes, please see the "<A href="https://bit.ly/handsonsapdev#replays" target="_blank" rel="nofollow noopener noreferrer">Catch the replays</A>" section of the series blog post.</EM><BR />
<BR />
This episode, titled "<A href="https://bit.ly/handsonsapdev#ep11" target="_blank" rel="nofollow noopener noreferrer">A CAP project for âGeonamesâ &amp; funcprog style with Chris Whealy</A>", was streamed live on Fri 08 Mar 2019 and is approximately one hour in length. The stream recording is <A href="https://www.youtube.com/watch?v=c5KVuCNOv4g&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0" target="_blank" rel="nofollow noopener noreferrer">available on YouTube</A>.<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2019/04/Screen-Shot-2019-04-02-at-14.11.39.jpg" /><BR />
<BR />
Below is a brief synopsis, and links to specific highlights - use these links to jump directly to particular places of interest in the recording, based on 'hh:mm:ss' style timestamps.<BR />
<H2 id="brief-synopsis" id="toc-hId-928775873">Brief synopsis</H2><BR />
In this episode we have developer <A href="https://twitter.com/logarhythm" target="_blank" rel="nofollow noopener noreferrer">Chris Whealy</A> as a guest, taking us through his <A href="https://github.com/ChrisWhealy/geonames_hana" target="_blank" rel="nofollow noopener noreferrer">personal project</A> making use of <A href="https://www.geonames.org/" target="_blank" rel="nofollow noopener noreferrer">Geonames</A> data and built using CAP with Node.js. Along the way we look at Chrisâs programming style which takes a lot from the functional programming world.<BR />
<H2 id="links-to-specific-highlights" id="toc-hId-732262368">Links to specific highlights</H2><BR />
<STRONG><A href="https://www.youtube.com/watch?v=c5KVuCNOv4g&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h01m30s" target="_blank" rel="nofollow noopener noreferrer">00:01:30</A>:</STRONG> Good morning to Chris Whealy, our special guest for this episode! The project we're going to take a look at with Chris is available on GitHub - see the <A href="https://github.com/ChrisWhealy/geonames_hana" target="_blank" rel="nofollow noopener noreferrer">geonames_hana</A> repository.q<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=c5KVuCNOv4g&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h03m20s" target="_blank" rel="nofollow noopener noreferrer">00:03:20</A>:</STRONG> Starting out by looking at the <A href="https://twitter.com/qmacro/status/1102874725578092550" target="_blank" rel="nofollow noopener noreferrer">tweet</A> on 5th March showing the functional "tick" that I learned from Chris, specifically:<BR />
<DIV><BR />
<PRE class="sourceCode javascript"><CODE class="sourceCode javascript"><SPAN class="va">data</SPAN>.<SPAN class="va">results</SPAN>.<SPAN class="at">reduce</SPAN>((a<SPAN class="op">,</SPAN> x) <SPAN class="op">=&gt;</SPAN> (_ <SPAN class="op">=&gt;</SPAN> a)(a[<SPAN class="va">x</SPAN>.<SPAN class="at">Id</SPAN>] <SPAN class="op">=</SPAN> <SPAN class="va">x</SPAN>.<SPAN class="at">Name</SPAN>)<SPAN class="op">,</SPAN> <SPAN class="op">{}</SPAN>)</CODE></PRE><BR />
</DIV><BR />
<STRONG><A href="https://www.youtube.com/watch?v=c5KVuCNOv4g&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h05m25s" target="_blank" rel="nofollow noopener noreferrer">00:05:25</A>:</STRONG> Chris explains in what circumstances such a construct can be used, and why it's useful (especially referring to the fact that some standard JavaScript array functions such as <CODE>Array.prototype.push</CODE> don't return the array as a result, which is, on the whole, less than helpful, as we can't chain functions together).<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=c5KVuCNOv4g&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h08m20s" target="_blank" rel="nofollow noopener noreferrer">00:08:20</A>:</STRONG> Reminding ourselves that the <CODE>Array.prototype.reduce</CODE> function can turn an array into any shape, either another array, a map (an object) or even a scalar.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=c5KVuCNOv4g&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h09m40s" target="_blank" rel="nofollow noopener noreferrer">00:09:40</A>:</STRONG> While <CODE>map</CODE> and <CODE>reduce</CODE> are relatively well known, functional programming is a lot more than just those two functions. Also, <CODE>map</CODE> is just a special case of <CODE>reduce</CODE>.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=c5KVuCNOv4g&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h11m10s" target="_blank" rel="nofollow noopener noreferrer">00:11:10</A>:</STRONG> In other languages, <CODE>reduce</CODE> is known as <CODE>fold</CODE> (and there's a fold left and a fold right, by the way).<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=c5KVuCNOv4g&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h12m00s" target="_blank" rel="nofollow noopener noreferrer">00:12:00</A>:</STRONG> Chris starts to share his screen to introduce the project and start taking us through some of the codebase.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=c5KVuCNOv4g&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h13m02s" target="_blank" rel="nofollow noopener noreferrer">00:13:02</A>:</STRONG> The data is taken from the website <A href="https://www.geonames.org/" target="_blank" rel="nofollow noopener noreferrer">geonames.org</A> which is open and crowdsourced, updated daily.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=c5KVuCNOv4g&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h15m58s" target="_blank" rel="nofollow noopener noreferrer">00:15:58</A>:</STRONG> Chris takes us through a few of the REST API calls to see some of the data that's stored and served by the service, including modifying the requests with values in query parameters in the URL.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=c5KVuCNOv4g&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h21m35s" target="_blank" rel="nofollow noopener noreferrer">00:21:35</A>:</STRONG> Switching to the GitHub project to start to take a look at the code behind the service. We notice straight away the now-familiar <CODE>db</CODE> and <CODE>srv</CODE> directories therein, this being a CAP project.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=c5KVuCNOv4g&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h22m20s" target="_blank" rel="nofollow noopener noreferrer">00:22:20</A>:</STRONG> Chris points out that he built the project using the <A href="https://cloudplatform.sap.com/capabilities/product-info.SAP-Web-IDE.9e5c9d90-e8e0-4e82-aed2-09087a10c973.html" target="_blank" rel="noopener noreferrer">SAP Web IDE</A>, mostly because he specifically wanted to use HANA for the persistence layer immediately.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=c5KVuCNOv4g&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h24m00s" target="_blank" rel="nofollow noopener noreferrer">00:24:00</A>:</STRONG> Taking a first look at some of the annotations, and also specifically at the <CODE>index.cds</CODE> and the role that plays in a CAP project. If found by the CDS compiler, that <CODE>index.cds</CODE> file, and only that <CODE>index.cds</CODE> file will be opened and its contents (including references to other files) compiled. Otherwise any and all files with a <CODE>cds</CODE> extension will be opened and compiled. This way you can manage how the data model gets compiled.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=c5KVuCNOv4g&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h26m00s" target="_blank" rel="nofollow noopener noreferrer">00:26:00</A>:</STRONG> Chris highlights that once the HDI container is created, he can interact with it directly, in JavaScript, using the <CODE><a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a>/cds</CODE> module. We saw some of this in <A href="http://bit.ly/handsonsapdev#ep4" target="_blank" rel="nofollow noopener noreferrer">Ep.4 - Debugging CAPM and a look at the cds REPL</A>.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=c5KVuCNOv4g&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h26m40s" target="_blank" rel="nofollow noopener noreferrer">00:26:40</A>:</STRONG> It's the <CODE>srv/server.js</CODE> script that responds to the HTTP requests that we've already seen when exploring the frontend (via the HTML index) and the API calls.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=c5KVuCNOv4g&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h27m53s" target="_blank" rel="nofollow noopener noreferrer">00:27:53</A>:</STRONG> Chris explains that instead of using the normal <CODE>express</CODE> based HTTP server that comes set up with any new CAP project, he's using his own HTTP server based on the lower-level <CODE>http</CODE> module.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=c5KVuCNOv4g&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h29m05s" target="_blank" rel="nofollow noopener noreferrer">00:29:05</A>:</STRONG> Relaying a message from Former Member who has spotted a <CODE>vue/</CODE> directory in the project, which has piqued his (and others') interest! This is the next part of the project that Chris intends to work on.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=c5KVuCNOv4g&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h30m38s" target="_blank" rel="nofollow noopener noreferrer">00:30:38</A>:</STRONG> Starting to look at some of the JS in the <CODE>srv/server.js</CODE> file, specifically the <CODE>genApiHandler</CODE> function, which has a certain style and has a noticeable lack of curly braces. Chris tries to write every function as a single expression, holding to the principle that a function should do one thing and one thing only.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=c5KVuCNOv4g&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h32m25s" target="_blank" rel="nofollow noopener noreferrer">00:32:25</A>:</STRONG> Noticing that the initial lines of the <CODE>genApiHandler</CODE> definition is somewhat familiar to us, in that it is a function that returns a function, enabling <A href="https://en.wikipedia.org/wiki/Partial_application" target="_blank" rel="nofollow noopener noreferrer">partial application</A>. Chris also talks about how he tries to be consistent with variable names.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=c5KVuCNOv4g&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h35m05s" target="_blank" rel="nofollow noopener noreferrer">00:35:05</A>:</STRONG> Chris explains how he has to build something on the server side that services API calls with paths like this:<BR />
<PRE><CODE>/api/v1/geonames</CODE></PRE><BR />
<STRONG><A href="https://www.youtube.com/watch?v=c5KVuCNOv4g&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h36m25s" target="_blank" rel="nofollow noopener noreferrer">00:36:25</A>:</STRONG> Chris describes the function as giving back a function, i.e. it is a partial function, in that the complete evaluation of the arguments doesn't happen necessarily all at once.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=c5KVuCNOv4g&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h38m05s" target="_blank" rel="nofollow noopener noreferrer">00:38:05</A>:</STRONG> Looking at the config that encapsulates the different possible paths in the API.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=c5KVuCNOv4g&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h39m50s" target="_blank" rel="nofollow noopener noreferrer">00:39:50</A>:</STRONG> Essentially, the <CODE>genApiHandler</CODE> function is abstraction across every object in the config, and returns a function that is immediately invoked, i.e. an immediately invoked function expression (IIFE).<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=c5KVuCNOv4g&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h41m05s" target="_blank" rel="nofollow noopener noreferrer">00:41:05</A>:</STRONG> Chris explains one of the challenges with the traditional "for loop", in that you have to keep track of how many times the loop has executed. Very low level, using things that are changing. Functional programming is in many ways all about moving from such a "how" to a "what" approach to describing what you want.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=c5KVuCNOv4g&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h45m30s" target="_blank" rel="nofollow noopener noreferrer">00:45:30</A>:</STRONG> Looking specifically at how request handlers are created for each of the possible API URLs, with this bit of code in <CODE>srv/server.js</CODE>:<BR />
<DIV><BR />
<PRE class="sourceCode javascript"><CODE class="sourceCode javascript">Object<BR />
  .<SPAN class="at">keys</SPAN>(<SPAN class="va">config</SPAN>.<SPAN class="at">urls</SPAN>)<BR />
  .<SPAN class="at">map</SPAN>(assignRequestHandler)</CODE></PRE><BR />
</DIV><BR />
<STRONG><A href="https://www.youtube.com/watch?v=c5KVuCNOv4g&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h47m25s" target="_blank" rel="nofollow noopener noreferrer">00:47:25</A>:</STRONG> Considering that we might be in a "strange land" somewhere between programming and configuration, using higher order functions (functions that receive and / or produce functions) as solid-state building blocks, upon which basis Chris likens his creation to a functional finite state machine.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=c5KVuCNOv4g&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h48m50s" target="_blank" rel="nofollow noopener noreferrer">00:48:50</A>:</STRONG> Noticing the use of a ternary operator (of which <SPAN class="mention-scrubbed">rsletta</SPAN> is fond, in fact there's a nested ternary operator in there too. Chris points out that one of the advantages of these ternary expressions is using the alternative, an <CODE>if</CODE> statement, introduces something that is <EM>not</EM> an expression (it is a statement).<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=c5KVuCNOv4g&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h51m50s" target="_blank" rel="nofollow noopener noreferrer">00:51:50</A>:</STRONG> Jumping to a different place now in <CODE>srv/server.js</CODE> to look at some usage of the CDS API, which starts with:<BR />
<DIV><BR />
<PRE class="sourceCode javascript"><CODE class="sourceCode javascript"><SPAN class="va">cds</SPAN>.<SPAN class="at">connect</SPAN>(connectionObj)</CODE></PRE><BR />
</DIV><BR />
<STRONG><A href="https://www.youtube.com/watch?v=c5KVuCNOv4g&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h52m58s" target="_blank" rel="nofollow noopener noreferrer">00:52:58</A>:</STRONG> We look at the contents of the <CODE>connectionObj</CODE> which in fact looks like this:<BR />
<DIV><BR />
<PRE class="sourceCode javascript"><CODE class="sourceCode javascript"><SPAN class="kw">const</SPAN> connectionObject <SPAN class="op">=</SPAN> <SPAN class="op">{</SPAN><BR />
  <SPAN class="st">"kind"</SPAN><SPAN class="op">:</SPAN> <SPAN class="st">"hana"</SPAN><SPAN class="op">,</SPAN><BR />
  <SPAN class="st">"model"</SPAN><SPAN class="op">:</SPAN> <SPAN class="st">"gen/csn.json"</SPAN><SPAN class="op">,</SPAN><BR />
  <SPAN class="st">"credentials"</SPAN><SPAN class="op">:</SPAN> (vcapSrv[<SPAN class="st">'hana'</SPAN>] <SPAN class="op">||</SPAN> vcapSrv[<SPAN class="st">'hanatrial'</SPAN>])[<SPAN class="dv">0</SPAN>].<SPAN class="at">credentials</SPAN></CODE></PRE><BR />
</DIV><BR />
and specifically focus on the value for the "credentials" property, which is using the "or" operator (<CODE>||</CODE>) in place of an <CODE>if ... else</CODE> expression. Again, a functional approach which is as easy to read as it is concise.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=c5KVuCNOv4g&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h54m00s" target="_blank" rel="nofollow noopener noreferrer">00:54:00</A>:</STRONG> Examining the promise chain of <CODE>.then</CODE> calls after the CDS connection (the <CODE>cds.connect</CODE> function actually returns a promise); much preferable than using a callback approach.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=c5KVuCNOv4g&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h55m13s" target="_blank" rel="nofollow noopener noreferrer">00:55:13</A>:</STRONG> Then we look briefly at the next CDS API call, which is this:<BR />
<DIV><BR />
<PRE class="sourceCode javascript"><CODE class="sourceCode javascript"><SPAN class="va">cds</SPAN>.<SPAN class="at">run</SPAN>(<SPAN class="st">'SELECT * FROM ORG_GEONAMES_BASE_GEO_COUNTRIES'</SPAN>).<SPAN class="at">catch</SPAN>(<SPAN class="va">console</SPAN>.<SPAN class="at">error</SPAN>))</CODE></PRE><BR />
</DIV><BR />
and this in turn returns a promise, and so on.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=c5KVuCNOv4g&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h57m30s" target="_blank" rel="nofollow noopener noreferrer">00:57:30</A>:</STRONG> I note that in a couple of our previous episodes we see another promise chain in action, specifically in <A href="https://bit.ly/handsonsapdev#ep9" target="_blank" rel="nofollow noopener noreferrer">Ep.9</A> and <A href="https://bit.ly/handsonsapdev#ep10" target="_blank" rel="nofollow noopener noreferrer">Ep.10</A>, in our data retrieval script.
---
Annotated links: Episode 19 of Hands-on SAP dev with qmacro
technology-blog-sap
2019-04-25
https://community.sap.com/t5/technology-blogs-by-sap/annotated-links-episode-19-of-hands-on-sap-dev-with-qmacro/ba-p/13390127
2019-04-25-annotated-links-episode-19-of-hands-on-sap-dev-with-qmacro
<EM>This is a searchable description of the content of a live stream recording, specifically <STRONG>"Episode 19 - Some fun with CAP related tooling"</STRONG> in the "<A href="https://bit.ly/handsonsapdev" target="_blank" rel="nofollow noopener noreferrer">Hands-on SAP dev with qmacro</A>" series. There are links directly to specific highlights in the video recording. For links to annotations of other episodes, please see the "<A href="https://bit.ly/handsonsapdev#replays" target="_blank" rel="nofollow noopener noreferrer">Catch the replays</A>" section of the series blog post.</EM><BR />
<BR />
This episode, titled "<A href="https://bit.ly/handsonsapdev#ep19" target="_blank" rel="nofollow noopener noreferrer">Some fun with CAP related tooling</A>", was streamed live on Wed 17 Apr 2019 and is approximately one hour in length. The stream recording is <A href="https://www.youtube.com/watch?v=m9H5bSLsRTs&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0" target="_blank" rel="nofollow noopener noreferrer">available on YouTube</A>.<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2019/04/Screen-Shot-2019-04-25-at-14.46.11.jpg" /><BR />
<BR />
Below is a brief synopsis, and links to specific highlights - use these links to jump directly to particular places of interest in the recording, based on 'hh:mm:ss' style timestamps.<BR />
<H2 id="brief-synopsis" id="toc-hId-908422638">Brief synopsis</H2><BR />
This being a midweek episode, we allow ourselves a little bit flexibility and look into developer tooling; we look a bit more at syntax highlighting in Vim, some more LSP usage and try to come up with a workflow for setting up to answer <A href="https://answers.sap.com/tags/9f13aee1-834c-4105-8e43-ee442775e5ce" target="_blank" rel="noopener noreferrer">CAP questions on the SAP Community Q&amp;A site</A>.<BR />
<H2 id="links-to-specific-highlights" id="toc-hId-711909133">Links to specific highlights</H2><BR />
<STRONG><A href="https://www.youtube.com/watch?v=m9H5bSLsRTs&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h05m00s" target="_blank" rel="nofollow noopener noreferrer">00:05:00</A>:</STRONG> Highlighting another Twitch live streamer (a "twitcher"?) - Suz Hinton, aka <A href="https://twitch.tv/noopkat" target="_blank" rel="nofollow noopener noreferrer">noopkat</A>, from whom I've learnt an awful lot about live streaming, especially in the early days. JavaScript, IoT and more. Follow Suz for some really interesting streams!<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=m9H5bSLsRTs&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h06m35s" target="_blank" rel="nofollow noopener noreferrer">00:06:35</A>:</STRONG> Just a reminder that we have a #handsonsapdev channel in the SAP Mentors and Friends Slack workspace - I recommend you join this workspace (via this <A href="https://sapmentors-slack-invite.cfapps.eu10.hana.ondemand.com" target="_blank" rel="nofollow noopener noreferrer">form</A> and head on over to the channel to say hi!<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=m9H5bSLsRTs&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h07m40s" target="_blank" rel="nofollow noopener noreferrer">00:07:40</A>:</STRONG> Pointing out the <A href="https://answers.sap.com/tags/9f13aee1-834c-4105-8e43-ee442775e5ce" target="_blank" rel="noopener noreferrer">CAP space on the Community Q&amp;A</A> where we can and should ask questions and (if we can) answer them too, to build up a body of knowledge there.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=m9H5bSLsRTs&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h11m45s" target="_blank" rel="nofollow noopener noreferrer">00:11:45</A>:</STRONG> Looking at what I've been using so far to connect to the CDS language server (via the <CODE><a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a>/cds-lsp</CODE> package that is delivered inside of the VS Code extension for CDS, available from the <A href="https://tools.hana.ondemand.com/#cloud" target="_blank" rel="nofollow noopener noreferrer">cloud section of the SAP Developer Tools</A> site), which is the <A href="https://github.com/autozimu/LanguageClient-neovim" target="_blank" rel="nofollow noopener noreferrer">LanguageClient-neovim</A> plugin for Vim.<BR />
<BR />
This operated in a synchronous fashion, which meant that I got syntax issues highlighted for example only when I saved changes to my CDS sources.<BR />
<BR />
Since then I found the <A href="https://github.com/w0rp/ale" target="_blank" rel="nofollow noopener noreferrer">Asynchronous Lint Engine (ALE)</A> which provides all sorts of linting connectivity plus works very well as a Language Server Protocol (LSP) client!<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=m9H5bSLsRTs&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h14m00s" target="_blank" rel="nofollow noopener noreferrer">00:14:00</A>:</STRONG> Looking at what NPM packages I have installed globally on my workstation:<BR />
<PRE class="shell"><CODE>=&gt; npm list -g --depth=0<BR />
/Users/i347491/.nvm/versions/node/v8.12.0/lib<BR />
âââ @sap/cds@3.7.1<BR />
âââ csvf@1.0.0 -&gt; /Users/i347491/local/projects/csvf<BR />
âââ npm@6.9.0<BR />
âââ typescript@3.4.3<BR />
âââ typescript-language-server@0.3.7</CODE></PRE><BR />
which shows I've installed TypeScript tools and the TypeScript LSP server. This combination supports JavaScript too, which we look at briefly in a test file in Vim, exploring standard LSP features (beyond syntax error highlighting) such as "go-to-definition" and "find-references".<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=m9H5bSLsRTs&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h16m35s" target="_blank" rel="nofollow noopener noreferrer">00:16:35</A>:</STRONG> So ALE is a plugin I've installed in my Vim setup, and we see that it has a number of linter configurations built in, in the <CODE>ale_linters/</CODE> directory. For example, looking in the <CODE>ale_linters/javascript/tsserver.vim</CODE> file we see how it bootstraps and connects to the TypeScript LSP server for language services.<BR />
<BR />
So can we use ALE with the <CODE><a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a>/cds-lsp</CODE> implementation to get CDS language services in Vim, asynchronously? Turns out the answer is yes!<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=m9H5bSLsRTs&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h20m02s" target="_blank" rel="nofollow noopener noreferrer">00:20:02</A>:</STRONG> Creating a new project for a test Vim plugin, that we call <CODE>vim-cds</CODE> (and getting frustrated in my inconsistent use of 'folder' and 'directory' - see <A href="https://twitter.com/qmacro/status/1121302030864257024" target="_blank" rel="nofollow noopener noreferrer">this Twitter poll</A> for what others thing). In here we create an <CODE>ftdetect</CODE> directory that we can use to put some code to work out what file type we're dealing with when we load files with a <CODE>cds</CODE> extension:<BR />
<PRE class="vimscript"><CODE>au BufNewFile,BufRead *.cds set filetype=cds</CODE></PRE><BR />
<STRONG><A href="https://www.youtube.com/watch?v=m9H5bSLsRTs&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h24m05s" target="_blank" rel="nofollow noopener noreferrer">00:24:05</A>:</STRONG> Adding this <CODE>vim-cds/</CODE> directory to Vim configuration so it's used as a plugin, we can see that we now have Vim recognising CDS files. So far so good.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=m9H5bSLsRTs&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h25m55s" target="_blank" rel="nofollow noopener noreferrer">00:25:55</A>:</STRONG> Adding another directory called <CODE>syntax/</CODE>, also containing a <CODE>cds.vim</CODE> file for syntax highlighting code, which is usually bookended like this:<BR />
<PRE class="vimscript"><CODE>if (exists "b:current_syntax")<BR />
  finish<BR />
endif<BR />
<BR />
[...]<BR />
<BR />
let b:current_syntax = "cds"</CODE></PRE><BR />
I learnt this (and the rest of the stuff about syntax highlighting in Vim) from the <A href="http://learnvimscriptthehardway.stevelosh.com/chapters/45.html" target="_blank" rel="nofollow noopener noreferrer">Basic Syntax Highlighting</A> chapter of the excellent online resource <A href="http://learnvimscriptthehardway.stevelosh.com/" target="_blank" rel="nofollow noopener noreferrer">Learn Vimscript the Hard Way</A> by Steve Losh.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=m9H5bSLsRTs&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h28m00s" target="_blank" rel="nofollow noopener noreferrer">00:28:00</A>:</STRONG> Over the course of this next section we build up the "pairs" of syntax highlighting definitions (which you can learn about in the resource referenced above) - basically one defines how to match certain sections of (CDS) code and identifies those matched sections with labels, then one defines how each labelled section should be highlighted using an convention set of group name abstractions (such as Comment, Function, Keyword etc).<BR />
<BR />
To test new syntax highlighting definitions in a sample CDS file, we used the command <CODE>syn off | syn on</CODE> to restart syntax highlighting in Vim.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=m9H5bSLsRTs&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h33m10s" target="_blank" rel="nofollow noopener noreferrer">00:33:10</A>:</STRONG> I had looked inside the VS Code extension for CDS (remember, the <CODE>vsix</CODE> extension is just a compressed tarball in disguise) to find out how various sections of the CDS language had been defined. Specifically, there's a file <CODE>syntaxes/cds.tmLanguage</CODE> that identifies various keywords, how they appear, and what they are. This file extension and format (<CODE>tmLanguage</CODE>) comes from that (now-classic) editor TextMate and is used in VS Code.<BR />
<BR />
If you look at the definitions, you'll see that the identifications of different keyword groups are named - <CODE>meta.controld.yield.cds</CODE>, <CODE>keyword.strong.control.cds</CODE> and <CODE>support.class.cds</CODE> are examples of these.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=m9H5bSLsRTs&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h37m40s" target="_blank" rel="nofollow noopener noreferrer">00:37:40</A>:</STRONG> These names are available in VS Code for you to look at - at this point we turn on a Developer Mode feature "Inspect TM Scopes" to see what scope each CDS keyword is in. Wonderful!<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=m9H5bSLsRTs&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h41m00s" target="_blank" rel="nofollow noopener noreferrer">00:41:00</A>:</STRONG> Turning our attention now to the mechanism we need to get the CDS language server working via ALE.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=m9H5bSLsRTs&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h42m10s" target="_blank" rel="nofollow noopener noreferrer">00:42:10</A>:</STRONG> Looking inside the <CODE>ale_linters/</CODE> directory in the ALE plugin to create a new directory <CODE>cds/</CODE> to put what we need in there. Note that this is just temporary, we don't really want to be modifying another plugin, but for now, just to get things working, this will do.<BR />
<BR />
Inside this new <CODE>cds/</CODE> directory we need some Vimscript to bootstrap and connect to the CDS language server via the <CODE><a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a>/cds-lsp</CODE> package, but we use a symbolic link to this Vimscript file which we create as <CODE>cds.vim</CODE> inside the <CODE>vim-cds/</CODE> plugin directory.<BR />
<BR />
Here's an overview of what we've got:<BR />
<PRE><CODE>.vim/                                  local/<BR />
 |                                      |<BR />
 +- bundle/                             +- projects/<BR />
 |   |                    symbolic          |<BR />
 |   +- vim-cds/  -----------------------&gt;  +- vim-cds/<BR />
 |   |                      link                |<BR />
 |   +- ale/                                    +- cds-lsp/    (extracted from the vsix file)<BR />
 |       |                              +----&gt;  +- cds.vim<BR />
 |       +- ale_linters/                |       +- ftdetect/<BR />
 |           |                          |       |   |<BR />
 |           +- cds/                    |       |   +- cds.vim<BR />
 |               |             symbolic |       |<BR />
 |               +- cds.vim ------------+       +- syntax/<BR />
 |                               link           |   |<BR />
 +- vimrc                                       |   +- cds.vim<BR />
                                                |<BR />
                                                +- startcdslsp</CODE></PRE><BR />
<STRONG><A href="https://www.youtube.com/watch?v=m9H5bSLsRTs&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h45m40s" target="_blank" rel="nofollow noopener noreferrer">00:45:40</A>:</STRONG> Looking at the contents of <CODE>cds.vim</CODE>, which starts up the language server in a way that ALE can connect to and make use of it:<BR />
<PRE class="vimscript"><CODE>" Description: Simple config for using cds-lsp with ALE<BR />
<BR />
call ale#Set('cds_cds_executable', $HOME . '/local/projects/vim-cds/startcdslsp')<BR />
<BR />
function! ale_linters#cds#cds#GetProjectRoot(buffer) abort<BR />
    let l:project_file = ale#path#FindNearestFile(a:buffer, '.cdsrc.json')<BR />
<BR />
    return fnamemodify(l:project_file, ':h')<BR />
endfunction<BR />
<BR />
function! ale_linters#cds#cds#GetCommand(buffer) abort<BR />
    let l:executable = ale#Var(a:buffer, 'cds_cds_executable')<BR />
<BR />
    return l:executable<BR />
endfunction<BR />
<BR />
call ale#linter#Define('cds', {<BR />
\   'name': 'cds',<BR />
\   'lsp': 'stdio',<BR />
\   'command': function('ale_linters#cds#cds#GetCommand'),<BR />
\   'executable': {b -&gt; ale#Var(b, 'cds_cds_executable')},<BR />
\   'project_root': function('ale_linters#cds#cds#GetProjectRoot'),<BR />
\})</CODE></PRE><BR />
This uses a little starter script <CODE>startcdslsp</CODE> which looks like this:<BR />
<DIV><BR />
<PRE class="sourceCode bash"><CODE class="sourceCode bash"><SPAN class="co">#!/bin/bash</SPAN><BR />
<BR />
<SPAN class="co"># Simple bootstrap script to start the CDS LSP server in STDIO mode.</SPAN><BR />
<SPAN class="co"># It assumes that the cds-lsp package directory is in the same directory</SPAN><BR />
<SPAN class="co"># as this script itself, for example:</SPAN><BR />
<SPAN class="co">#</SPAN><BR />
<SPAN class="co"># &lt;dir&gt;/</SPAN><BR />
<SPAN class="co">#   |</SPAN><BR />
<SPAN class="co">#   +-- cds-lsp/</SPAN><BR />
<SPAN class="co">#   +-- startcdslsp</SPAN><BR />
<BR />
<SPAN class="co"># Get the full name of the directory this script is in</SPAN><BR />
<SPAN class="va">DIR=</SPAN><SPAN class="st">"</SPAN><SPAN class="va">$(</SPAN> <SPAN class="bu">cd</SPAN> <SPAN class="st">"</SPAN><SPAN class="va">$(</SPAN> <SPAN class="fu">dirname</SPAN> <SPAN class="st">"</SPAN><SPAN class="va">${BASH_SOURCE[0]}</SPAN><SPAN class="st">"</SPAN> <SPAN class="va">)</SPAN><SPAN class="st">"</SPAN> <SPAN class="op">&gt;</SPAN> /dev/null <SPAN class="op">2&gt;&amp;1</SPAN> <SPAN class="kw">&amp;&amp;</SPAN> <SPAN class="bu">pwd</SPAN><SPAN class="va">)</SPAN><SPAN class="st">"</SPAN><BR />
<BR />
<SPAN class="co"># Start the server</SPAN><BR />
<SPAN class="ex">node</SPAN> <SPAN class="st">"</SPAN><SPAN class="va">${DIR}</SPAN><SPAN class="st">/cds-lsp/out/src/server.js"</SPAN> --stdio</CODE></PRE><BR />
</DIV><BR />
<STRONG><A href="https://www.youtube.com/watch?v=m9H5bSLsRTs&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h47m40s" target="_blank" rel="nofollow noopener noreferrer">00:47:40</A>:</STRONG> At this point we need to run <CODE>npm install</CODE> inside the <CODE>cds-lsp/</CODE> directory that we took out of the vsix file, to bring in the packages that it needs, including the important one, <CODE><a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a>/cds-compiler</CODE>!<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=m9H5bSLsRTs&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h50m10s" target="_blank" rel="nofollow noopener noreferrer">00:50:10</A>:</STRONG> Time to try things out. Opening up a sample CDS file, we see that we get syntax highlighting, and an error is indicated in the gutter (or the "sign column"). Great!<BR />
<BR />
We see the detail of the error at the bottom of the buffer too.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=m9H5bSLsRTs&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h52m00s" target="_blank" rel="nofollow noopener noreferrer">00:52:00</A>:</STRONG> Adding the final touches for this initial foray with ALE, by adding some configuration to <CODE>vimrc</CODE>:<BR />
<PRE class="vimscript"><CODE>set signcolumn=yes<BR />
let g:ale_completion_enabled = 1<BR />
let g:ale_sign_column_always = 1<BR />
let g:airline#extension#ale#enabled = 1<BR />
let g:ale_open_list = 1<BR />
<BR />
nmap &lt;silent&gt;&lt;leader&gt;j :lnext&lt;cr&gt;<BR />
nmap &lt;silent&gt;&lt;leader&gt;k :lprevious&lt;cr&gt;</CODE></PRE><BR />
This sets some options as follows:<BR />
<UL><BR />
 	<LI>always show the sign column (the gutter)</LI><BR />
 	<LI>enable language server powered command completion</LI><BR />
 	<LI>show indication of errors in my bottom "airline" bar</LI><BR />
 	<LI>automatically open the problems list when there are issues</LI><BR />
</UL><BR />
It also allows me to navigate up and down errors in the problems list (actually it's the "location list" in Vim, hence the "l" prefix) with a couple of key mappings in normal mode.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=m9H5bSLsRTs&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h57m20s" target="_blank" rel="nofollow noopener noreferrer">00:57:20</A>:</STRONG> We see that everything is working - if we make a mistake now, we have a similar experience as we see in VS Code, in that the error is highlighted on the actual line, and it also is detailed in a problem list at the bottom, where we can navigate from problem to problem. Hurray!
---
Annotated links: Episode 17 of Hands-on SAP dev with qmacro
technology-blog-sap
2019-04-24
https://community.sap.com/t5/technology-blogs-by-sap/annotated-links-episode-17-of-hands-on-sap-dev-with-qmacro/ba-p/13388103
2019-04-24-annotated-links-episode-17-of-hands-on-sap-dev-with-qmacro
<EM>This is a searchable description of the content of a live stream recording, specifically <STRONG>"Episode 17 - Digging into the annotation driven UI"</STRONG> in the "<A href="https://bit.ly/handsonsapdev" target="_blank" rel="nofollow noopener noreferrer">Hands-on SAP dev with qmacro</A>" series. There are links directly to specific highlights in the video recording. For links to annotations of other episodes, please see the "<A href="https://bit.ly/handsonsapdev#replays" target="_blank" rel="nofollow noopener noreferrer">Catch the replays</A>" section of the series blog post.</EM><BR />
<BR />
This episode, titled "<A href="https://bit.ly/handsonsapdev#ep17" target="_blank" rel="nofollow noopener noreferrer">Digging into the annotation driven UI</A>", was streamed live on Fri 05 Apr 2019 and is approximately one hour in length. The stream recording is <A href="https://www.youtube.com/watch?v=nmfAVcrQuzM&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0" target="_blank" rel="nofollow noopener noreferrer">available on YouTube</A>.<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2019/04/Screen-Shot-2019-04-24-at-17.56.27.jpg" /><BR />
<BR />
Below is a brief synopsis, and links to specific highlights - use these links to jump directly to particular places of interest in the recording, based on 'hh:mm:ss' style timestamps.<BR />
<H2 id="brief-synopsis" id="toc-hId-907737379">Brief synopsis</H2><BR />
We take a look at the simple UI that we created in the previous episode and look a little bit behind the scenes, to learn a bit more about annotations, OData calls and more.<BR />
<H2 id="links-to-specific-highlights" id="toc-hId-711223874">Links to specific highlights</H2><BR />
<STRONG><A href="https://www.youtube.com/watch?v=nmfAVcrQuzM&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h02m58s" target="_blank" rel="nofollow noopener noreferrer">00:02:58</A>:</STRONG> Pointing out the Subreddit <A href="https://www.reddit.com/r/MechanicalKeyboards" target="_blank" rel="nofollow noopener noreferrer">Mechanical Keyboards</A> where I get my fill of news and advice. Recommended, and talking about different keyboards such as the Vortex Race 3 (75% keyboard) and the Anne Pro 2 (60% keyboard), as <SPAN class="mention-scrubbed">rsletta</SPAN> is thinking about taking the plunge and getting one (perhaps a Ducky One).<BR />
<BR />
Also I mention the geekiest (and possibly the best) Subreddit ever - which is <A href="https://www.reddit.com/r/vimkeyboard" target="_blank" rel="nofollow noopener noreferrer">vimkeyboard</A>. Wonderful.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=nmfAVcrQuzM&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h07m48s" target="_blank" rel="nofollow noopener noreferrer">00:07:48</A>:</STRONG> Reviewing what we did in the previous episode, getting a simple UI on the screen powered by UI annotations and Fiori Elements.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=nmfAVcrQuzM&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h09m00s" target="_blank" rel="nofollow noopener noreferrer">00:09:00</A>:</STRONG> Introducing the Slack channel I recently created as a backchannel for the Hands-on SAP dev series. I did think of using Discord (as Ronnie mentions) but I thought that Slack was more likely to be a tool that folks like us use already, and may already be a member of the SAP Mentors and Friends Slack workspace where this new channel lives.<BR />
<BR />
The idea of this channel is to have a continuum for chat between episodes, nothing strenuous or high-volume, just an ambient space for us to hang out in. You can join the workspace via this link here: <A class="uri" href="https://sapmentors-slack-invite.cfapps.eu10.hana.ondemand.com" target="_blank" rel="nofollow noopener noreferrer">https://sapmentors-slack-invite.cfapps.eu10.hana.ondemand.com</A> and then head on over to the #handsonsapdev channel. See you there!<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=nmfAVcrQuzM&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h11m30s" target="_blank" rel="nofollow noopener noreferrer">00:11:30</A>:</STRONG> While we're on the subject of Slack channels, there's also a channel for discussion of the work on the GitHub project <A href="https://github.com/sapmentors/sitregcapm" target="_blank" rel="nofollow noopener noreferrer">SITreg implemented in the SAP Cloud Application Programming Model</A>, which is #sitregdiscussion, in the same SAP Mentors and Friends Slack workspace.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=nmfAVcrQuzM&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h12m45s" target="_blank" rel="nofollow noopener noreferrer">00:12:45</A>:</STRONG> Introducing another live streamer <A href="https://www.twitch.tv/csharpfritz" target="_blank" rel="nofollow noopener noreferrer">Jeff Fritz</A>, who has a great channel on Twitch and is building software for the <A href="https://www.elgato.com/en/gaming/stream-deck" target="_blank" rel="nofollow noopener noreferrer">Elgato Streamdeck</A>.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=nmfAVcrQuzM&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h13m45s" target="_blank" rel="nofollow noopener noreferrer">00:13:45</A>:</STRONG> Announcing that <SPAN class="mention-scrubbed">iinside</SPAN> will be joining us on the next episode, talking about CAP and Java!<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=nmfAVcrQuzM&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h15m30s" target="_blank" rel="nofollow noopener noreferrer">00:15:30</A>:</STRONG> Looking at what we have as far as the Northbreeze app is concerned, exploring the contents of the <CODE>northbreeze</CODE> directory.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=nmfAVcrQuzM&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h16m30s" target="_blank" rel="nofollow noopener noreferrer">00:16:30</A>:</STRONG> Noting, in passing, the function import <CODE>hello</CODE>'s definition (in <CODE>service.cds</CODE>) and implementation (in <CODE>service.js</CODE>), and also (trivially) that I <A href="https://github.com/qmacro/scripts/commit/7c7f0b957ac7a008d37ddd5f7d266cdfc5ae2c64" target="_blank" rel="nofollow noopener noreferrer">turned on the 'box' outline in my Ranger setup</A>.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=nmfAVcrQuzM&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h17m40s" target="_blank" rel="nofollow noopener noreferrer">00:17:40</A>:</STRONG> Starting the app up with <CODE>cds deploy &amp;&amp; cds serve all</CODE> and looking at the app in its natural habitat (i.e. the sandbox launchpad).<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=nmfAVcrQuzM&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h19m45s" target="_blank" rel="nofollow noopener noreferrer">00:19:45</A>:</STRONG> Opening up the Chrome Developer Tools to see what's going on behind the scenes.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=nmfAVcrQuzM&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h21m40s" target="_blank" rel="nofollow noopener noreferrer">00:21:40</A>:</STRONG> Looking more closely at the annotations in <CODE>index.cds</CODE>. First, we're using <CODE>SelectionFields: []</CODE> (i.e. an empty list) to cause no selection (filter) fields to appear in the UI. Then, we have a set of in-line label definitions for the line item columns, like this:<BR />
<PRE class="cds"><CODE>LineItem: [<BR />
  { Value: ID, Label: 'ID' },<BR />
  { Value: name, Label: 'Name' },<BR />
  { Value: country, Label: 'Country' }<BR />
]</CODE></PRE><BR />
These labels appear in the column headings in the UI.<BR />
<BR />
Finally we have the <CODE>TypeNamePlural</CODE> annotation in the <CODE>HeaderInfo</CODE> section which is where the text for the section title in the UI comes from.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=nmfAVcrQuzM&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h28m50s" target="_blank" rel="nofollow noopener noreferrer">00:28:50</A>:</STRONG> Looking at the OData requests that are being made, and peering inside the <CODE>$batch</CODE> requests to see what's going on (OData v4 uses batching significantly). We also look at the Breezy service's <A href="http://localhost:4004/breezy/$metadata" target="_blank" rel="nofollow noopener noreferrer">metadata document</A> and note that the annotation texts we just changed are in there which sort of explains why we have to redeploy on CDS (annotation) changes.<BR />
<BR />
Talking of OData batch, we look briefly at the contructors for the UI5 OData model mechanisms, specifically <A href="https://sapui5.hana.ondemand.com/#/api/sap.ui.model.odata.v2.ODataModel" target="_blank" rel="nofollow noopener noreferrer">sap.ui.model.odata.v2.ODataModel</A> and <A href="https://sapui5.hana.ondemand.com/#/api/sap.ui.model.odata.v4.OdataModel" target="_blank" rel="nofollow noopener noreferrer">sap.ui.model.odata.v4.ODataModel</A> and noting that the constructor for v4 does not have a <CODE>useBatch</CODE> option in the parameters, suggesting that OData v4 is (as they say) "all batch, all the time".<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=nmfAVcrQuzM&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h35m05s" target="_blank" rel="nofollow noopener noreferrer">00:35:05</A>:</STRONG> Looking back at the code now to see what we need to do to internationalise the app, following a question in the previous episode from <A href="https://twitter.com/fbeuret" target="_blank" rel="nofollow noopener noreferrer">Fabien Beuret</A>.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=nmfAVcrQuzM&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h35m50s" target="_blank" rel="nofollow noopener noreferrer">00:35:50</A>:</STRONG> First, we remove the labels from the <CODE>LineItem</CODE> annotation section and add them to a new, separate section. This is a small example of how you can separate annotation work (and, more generally, CDS definitions) into sections that can be individually and independently maintained.<BR />
<BR />
This is where we put the label information:<BR />
<PRE class="cds"><CODE>annotate northbreeze.Suppliers with {<BR />
  ID @title: '{i18n&gt;ID}';<BR />
  [...]</CODE></PRE><BR />
Note even at this stage that the VS Code extension for CDS is giving us a warning on the <CODE>{i18n&gt;ID}</CODE> part: "Text for translation ID 'ID' not defined CDS(no-translation-text/title)". Nice!<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=nmfAVcrQuzM&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h39m20s" target="_blank" rel="nofollow noopener noreferrer">00:39:20</A>:</STRONG> It's now time to resolve these warnings by creating an annotation file, but first we have a quick look in the SAP Help Portal at the relevant documentation on <A href="https://help.sap.com/viewer/65de2977205c403bbc107264b8eccf4b/Cloud/en-US/b3a0321c94194a21a17a991b0f879fbb.html" target="_blank" rel="noopener noreferrer">Localization</A>, where we see how we can organise our internationalisation (i18n) properties files.<BR />
<BR />
We take the option of specifying some configuration in the <CODE>cds</CODE> section of our <CODE>package.json</CODE> file like this:<BR />
<DIV><BR />
<PRE class="sourceCode json"><CODE class="sourceCode json"><SPAN class="er">"cds":</SPAN> <SPAN class="fu">{</SPAN><BR />
  <SPAN class="dt">"i18n"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="fu">{</SPAN><BR />
    <SPAN class="dt">"folders"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="ot">[</SPAN><BR />
      <SPAN class="st">"languages"</SPAN><BR />
    <SPAN class="ot">]</SPAN><BR />
  <SPAN class="fu">}</SPAN><BR />
<SPAN class="fu">}</SPAN></CODE></PRE><BR />
</DIV><BR />
to specify that i18n properties files are to be found in a directory called <CODE>languages</CODE>.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=nmfAVcrQuzM&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h44m10s" target="_blank" rel="nofollow noopener noreferrer">00:44:10</A>:</STRONG> In a new directory <CODE>srv/languages/</CODE> we create a new file <CODE>i18n.properties</CODE>, the "default fallback" file, and start adding regular i18n properties and values.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=nmfAVcrQuzM&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h46m16s" target="_blank" rel="nofollow noopener noreferrer">00:46:16</A>:</STRONG> In passing, we note how the CDS compiler inside the VS Code extension is working; it can read the new configuration in <CODE>package.json</CODE> that we've just added, find relevant translations for the annotations for ID, name and country and stop giving us warnings about the fact that none exist. Now they do, it looks good!<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=nmfAVcrQuzM&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h48m30s" target="_blank" rel="nofollow noopener noreferrer">00:48:30</A>:</STRONG> After a redeploy we refresh the app to see what's happened. We can see the texts in our new properties file are now in use.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=nmfAVcrQuzM&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h49m28s" target="_blank" rel="nofollow noopener noreferrer">00:49:28</A>:</STRONG> We now test this out further by specifying a different language in the UI. We do this by using a query parameter on the app's URL to specify the German language is required. Doing this with a query parameter (<CODE>sap-language</CODE>) this is just one way of doing this, of course:<BR />
<BR />
<A class="uri" href="http://localhost:4004/?sap-language=de#browse-suppliers" target="_blank" rel="nofollow noopener noreferrer">http://localhost:4004/?sap-language=de#browse-suppliers</A><BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=nmfAVcrQuzM&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h51m00s" target="_blank" rel="nofollow noopener noreferrer">00:51:00</A>:</STRONG> Even though we haven't yet added any specific German translations to our properties files, we do see some German already ("Suchen" in the search field) because of the fact that UI5 controls come already internationalised!<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=nmfAVcrQuzM&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h51m39s" target="_blank" rel="nofollow noopener noreferrer">00:51:39</A>:</STRONG> Adding a second i18n properties file, <CODE>i18n_de.properties</CODE>, with some German texts.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=nmfAVcrQuzM&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h52m30s" target="_blank" rel="nofollow noopener noreferrer">00:52:30</A>:</STRONG> Note that the request for the metadata document of the OData service is also made with the German language request, which we can see in the Chrome Developer Tools - in the form of a request header:<BR />
<PRE><CODE>Accept-Language: de</CODE></PRE><BR />
<STRONG><A href="https://www.youtube.com/watch?v=nmfAVcrQuzM&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h54m24s" target="_blank" rel="nofollow noopener noreferrer">00:54:24</A>:</STRONG> We note now, when the app is refreshed, the new German texts are being picked up!<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=nmfAVcrQuzM&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h55m50s" target="_blank" rel="nofollow noopener noreferrer">00:55:50</A>:</STRONG> Just for fun, we try a different language, this time a right-to-left one, in the form of Hebrew, where we see that UI5 allows the app to precisely adapt to the locale requirements of that language. Did I mention I think UI5 is awesome? <span class="lia-unicode-emoji" title=":slightly_smiling_face:">ð</span>
---
Annotated links: Episode 16 of Hands-on SAP dev with qmacro
technology-blog-sap
2019-04-23
https://community.sap.com/t5/technology-blogs-by-sap/annotated-links-episode-16-of-hands-on-sap-dev-with-qmacro/ba-p/13422429
2019-04-23-annotated-links-episode-16-of-hands-on-sap-dev-with-qmacro
<EM>This is a searchable description of the content of a live stream recording, specifically <STRONG>"Episode 16 - Getting to a basic frontend with Fiori Elements, and sandbox launchpad"</STRONG> in the "<A href="https://bit.ly/handsonsapdev" target="_blank" rel="nofollow noopener noreferrer">Hands-on SAP dev with qmacro</A>" series. There are links directly to specific highlights in the video recording. For links to annotations of other episodes, please see the "<A href="https://bit.ly/handsonsapdev#replays" target="_blank" rel="nofollow noopener noreferrer">Catch the replays</A>" section of the series blog post.</EM><BR />
<BR />
This episode, titled "<A href="https://bit.ly/handsonsapdev#ep16" target="_blank" rel="nofollow noopener noreferrer">Getting to a basic frontend with Fiori Elements, and sandbox launchpad</A>", was streamed live on Wed 03 Apr 2019 and is approximately one hour in length. The stream recording is <A href="https://www.youtube.com/watch?v=es0eAtAQPzk&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0" target="_blank" rel="nofollow noopener noreferrer">available on YouTube</A>.<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2019/04/Screen-Shot-2019-04-23-at-15.03.46.png" /><BR />
<BR />
Below is a brief synopsis, and links to specific highlights - use these links to jump directly to particular places of interest in the recording, based on 'hh:mm:ss' style timestamps.<BR />
<H2 id="brief-synopsis" id="toc-hId-930649609">Brief synopsis</H2><BR />
Following on from the previous episode broadcast from the SAP CodeJam in Frankfurt, we continue moving towards a first UI using a sandbox Fiori launchpad and a basic Fiori elements app driven by a small set of annotations.<BR />
<H2 id="links-to-specific-highlights" id="toc-hId-734136104">Links to specific highlights</H2><BR />
<STRONG><A href="https://www.youtube.com/watch?v=es0eAtAQPzk&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h04m51s" target="_blank" rel="nofollow noopener noreferrer">00:04:51</A>:</STRONG> A few announcements - on SAP CodeJam events (find out more at the <A href="https://www.sap.com/uk/community/events.html" target="_blank" rel="noopener noreferrer">SAP Community and Developer Events</A> page), on <A href="https://wiki.scn.sap.com/wiki/display/events/SAP+Inside+Track" target="_blank" rel="noopener noreferrer">SAP Inside Tracks</A> and stickers! I have some SAP Cloud Application Programming Model stickers as well as some developers.sap.com stickers - if you would like a couple, please join the next live stream and let me know.<BR />
<BR />
I also mentioned the <A href="https://github.com/bnb/awesome-developer-streams" target="_blank" rel="nofollow noopener noreferrer">Awesome Developer Streams</A> page which lists all sorts of different developers who also stream live - definitely worth checking out.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=es0eAtAQPzk&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h09m28s" target="_blank" rel="nofollow noopener noreferrer">00:09:28</A>:</STRONG> In answer to a question from <A href="https://twitter.com/fbeuret" target="_blank" rel="nofollow noopener noreferrer">Fabien Beuret</A> I mention that the CAP CodeJam content was temporarily "resting" ... and it's now available online at <A class="uri" href="https://github.com/SAP/cloud-cap-nodejs-codejam" target="_blank" rel="nofollow noopener noreferrer">https://github.com/SAP/cloud-cap-nodejs-codejam</A>.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=es0eAtAQPzk&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h09m50s" target="_blank" rel="nofollow noopener noreferrer">00:09:50</A>:</STRONG> Highlighting streamer <A href="https://twitch.tv/codebasealpha" target="_blank" rel="nofollow noopener noreferrer">CodebaseAlpha</A> who covers interesting topics including GraphQL and Alexa skills.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=es0eAtAQPzk&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h10m25s" target="_blank" rel="nofollow noopener noreferrer">00:10:25</A>:</STRONG> Starting with today's topic, that we started to look at in the previous episode (<A href="https://bit.ly/handsonsapdev#ep15" target="_blank" rel="nofollow noopener noreferrer">Ep.15</A>) - building a UI for our little Northbreeze backend service, using annotations and Fiori Elements.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=es0eAtAQPzk&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h12m50s" target="_blank" rel="nofollow noopener noreferrer">00:12:50</A>:</STRONG> Looking at the project in VS Code to see what we've got so far, including a glimpse at the data model and the CSV files. We note that we're using the <CODE>managed</CODE> and <CODE>cuid</CODE> aspects to give us some default properties in some of our entity definitions.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=es0eAtAQPzk&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h15m50s" target="_blank" rel="nofollow noopener noreferrer">00:15:50</A>:</STRONG> Checking the latest version of the CDS Language Support for VS Code extension (available in the <A href="https://tools.hana.ondemand.com/#cloud" target="_blank" rel="nofollow noopener noreferrer">Cloud section of the SAP Development Tools site</A> ... it is still at 1.1.1 but I hear that it will be updated before the end of this month.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=es0eAtAQPzk&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h17m10s" target="_blank" rel="nofollow noopener noreferrer">00:17:10</A>:</STRONG> Checking the latest version of <CODE><a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a>/cds</CODE> with <CODE>npm info <a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a>/cds</CODE> shows that it's still at 3.7.1.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=es0eAtAQPzk&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h17m30s" target="_blank" rel="nofollow noopener noreferrer">00:17:30</A>:</STRONG> Looking at the Northbreeze service definition (in <CODE>service.cds</CODE>) and noting that according to best practice, we should actually omit the extension of referenced files, so they're not language specific. Here that means changing from:<BR />
<PRE class="cds"><CODE>using northbreeze from '../db/model.cds';</CODE></PRE><BR />
to<BR />
<PRE class="cds"><CODE>using northbreeze from '../db/model';</CODE></PRE><BR />
which subtly allows for those definitions to be available not only in "source" CDS format but perhaps also in the canonical Core Schema Notation (CSN) (pronounced "season") format that we have seen in early episodes when we explored the cds command line tool and the REPL.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=es0eAtAQPzk&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h18m35s" target="_blank" rel="nofollow noopener noreferrer">00:18:35</A>:</STRONG> Deploying and running the service, and checking that we can see the suppliers in the appropriate entityset (via URL <A class="uri" href="http://localhost:4004/breezy/Suppliers" target="_blank" rel="nofollow noopener noreferrer">http://localhost:4004/breezy/Suppliers</A>).<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=es0eAtAQPzk&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h19m40s" target="_blank" rel="nofollow noopener noreferrer">00:19:40</A>:</STRONG> Noticing the message:<BR />
<PRE><CODE>[cds] - serving static resources from ./app</CODE></PRE><BR />
which implies that it will make available resources that we put there.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=es0eAtAQPzk&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h20m00s" target="_blank" rel="nofollow noopener noreferrer">00:20:00</A>:</STRONG> So we create the <CODE>app/</CODE> directory with an <CODE>index.html</CODE> file in there with a simple "hello". When reloading the root resource at <A class="uri" href="http://localhost:4004" target="_blank" rel="nofollow noopener noreferrer">http://localhost:4004</A> we now get that "hello" resource, rather than the default "Welcome to cds.services" page. Nice! The name <CODE>app/</CODE> is also a convention, just like <CODE>db/</CODE> and <CODE>srv/</CODE>.<BR />
<BR />
Of course, we can still access the individual services via their normal URLs too. This also gives us a clue as to why the services themselves are not at the root (for example our main service in this project is at <CODE>/breezy/</CODE>).<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=es0eAtAQPzk&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h22m10s" target="_blank" rel="nofollow noopener noreferrer">00:22:10</A>:</STRONG> Bringing in some sample content for our new <CODE>index.html</CODE>, which looks like this:<BR />
<DIV><BR />
<PRE class="sourceCode html"><CODE class="sourceCode html"><SPAN class="kw">&lt;html&gt;</SPAN><BR />
<SPAN class="kw">&lt;head&gt;</SPAN><BR />
<BR />
    <SPAN class="kw">&lt;title&gt;</SPAN>Northbreeze<SPAN class="kw">&lt;/title&gt;</SPAN><BR />
<BR />
    <SPAN class="kw">&lt;script</SPAN><BR />
<SPAN class="ot">        src=</SPAN><SPAN class="st">"https://sapui5.hana.ondemand.com/test-resources/sap/ushell/bootstrap/sandbox.js"</SPAN><SPAN class="kw">&gt;&lt;/script&gt;</SPAN><BR />
<BR />
    <SPAN class="kw">&lt;script</SPAN><SPAN class="ot"> id=</SPAN><SPAN class="st">"sap-ui-bootstrap"</SPAN><BR />
<SPAN class="ot">        src=</SPAN><SPAN class="st">"https://sapui5.hana.ondemand.com/resources/sap-ui-core.js"</SPAN><BR />
<SPAN class="ot">        data-sap-ui-compatVersion=</SPAN><SPAN class="st">"edge"</SPAN><BR />
<SPAN class="ot">        data-sap-ui-theme=</SPAN><SPAN class="st">"sap_belize"</SPAN><SPAN class="kw">&gt;&lt;/script&gt;</SPAN><BR />
<BR />
<SPAN class="kw">&lt;/head&gt;</SPAN><BR />
<SPAN class="kw">&lt;body</SPAN><SPAN class="ot"> class=</SPAN><SPAN class="st">"sapUiBody"</SPAN><SPAN class="ot"> id=</SPAN><SPAN class="st">"content"</SPAN><SPAN class="kw">&gt;&lt;/body&gt;</SPAN><BR />
<SPAN class="kw">&lt;/html&gt;</SPAN></CODE></PRE><BR />
</DIV><BR />
This, if you're not familiar, is a typical "bootstrap" page for UI5, and it also includes a script tag to include the SAP Fiori launchpad sandbox, a fully functional Fiori launchpad that you can run locally, which is especially useful for development and testing.<BR />
<BR />
When we load this resource we see a blank page, but note that it's been styled (via the <CODE>sapUiBody</CODE> class on the <CODE>body</CODE> element), so we can see that <EM>something</EM> is already happening!<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=es0eAtAQPzk&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h26m10s" target="_blank" rel="nofollow noopener noreferrer">00:26:10</A>:</STRONG> In response to a good question from Fabien, we talk briefly about different app serving constellations - the CAP can serve an entire full stack setup, or just the backend services. Flexibility is key.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=es0eAtAQPzk&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h27m30s" target="_blank" rel="nofollow noopener noreferrer">00:27:30</A>:</STRONG> We start to flesh out the configuration for the sandbox launchpad, by adding another script tag with some JavaScript assignments to a global property at the window level, which looks like this:<BR />
<DIV><BR />
<PRE class="sourceCode javascript"><CODE class="sourceCode javascript">window[<SPAN class="st">'sap-ushell-config'</SPAN>] <SPAN class="op">=</SPAN> <SPAN class="op">{</SPAN><BR />
    <SPAN class="dt">applications</SPAN><SPAN class="op">:</SPAN> <SPAN class="op">{</SPAN><BR />
        <SPAN class="st">'browse-suppliers'</SPAN><SPAN class="op">:</SPAN> <SPAN class="op">{</SPAN><BR />
            <SPAN class="dt">title</SPAN><SPAN class="op">:</SPAN> <SPAN class="st">'Browse Suppliers'</SPAN><SPAN class="op">,</SPAN><BR />
            <SPAN class="dt">additionalInformation</SPAN><SPAN class="op">:</SPAN> <SPAN class="st">'SAPUI5.Component=suppliers'</SPAN><SPAN class="op">,</SPAN><BR />
            <SPAN class="dt">applicationType </SPAN><SPAN class="op">:</SPAN> <SPAN class="st">'URL'</SPAN><SPAN class="op">,</SPAN><BR />
            <SPAN class="dt">url</SPAN><SPAN class="op">:</SPAN> <SPAN class="st">'/browse/webapp'</SPAN><SPAN class="op">,</SPAN><BR />
        <SPAN class="op">}</SPAN><BR />
    <SPAN class="op">}</SPAN><BR />
<SPAN class="op">};</SPAN></CODE></PRE><BR />
</DIV><BR />
This configuration defines a "Browse Suppliers" tile that will appear on the sandbox launchpad, and I'm following the convention here of putting each individial app in its own directory, which is why the <CODE>url</CODE> parameter points to a directory called <CODE>/browse/</CODE>.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=es0eAtAQPzk&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h31m40s" target="_blank" rel="nofollow noopener noreferrer">00:31:40</A>:</STRONG> Now we another bit of JavaScript in a further script tag to run a function when UI5 bootstrapping is complete:<BR />
<DIV><BR />
<PRE class="sourceCode javascript"><CODE class="sourceCode javascript"><SPAN class="va">sap</SPAN>.<SPAN class="va">ui</SPAN>.<SPAN class="at">getCore</SPAN>().<SPAN class="at">attachInit</SPAN>(<SPAN class="kw">function</SPAN>() <SPAN class="op">{</SPAN><BR />
    <SPAN class="va">sap</SPAN>.<SPAN class="va">ushell</SPAN>.<SPAN class="va">Container</SPAN>.<SPAN class="at">createRenderer</SPAN>(<SPAN class="st">'fiori2'</SPAN>).<SPAN class="at">placeAt</SPAN>(<SPAN class="st">'content'</SPAN>)<BR />
<SPAN class="op">}</SPAN>)</CODE></PRE><BR />
</DIV><BR />
This just creates the sandbox launchpad and places it in the main body of the browser tab (as <CODE>content</CODE> refers to the HTML body element).<BR />
<BR />
The result is that we now have our sandbox Fiori launchpad with a nice new tile with "Browse Suppliers" as the title! Of course, at this point there isn't any app to load, so we'll add the app itself next.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=es0eAtAQPzk&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h35m00s" target="_blank" rel="nofollow noopener noreferrer">00:35:00</A>:</STRONG> Starting to create the <CODE>/browse/webapp/</CODE> directory structure, with some initial content, so we end up with:<BR />
<PRE><CODE>app/<BR />
 |<BR />
 +-- browse/<BR />
      |<BR />
      +-- webapp/<BR />
           |<BR />
           +-- Component.js<BR />
           +-- manifest.json</CODE></PRE><BR />
<STRONG><A href="https://www.youtube.com/watch?v=es0eAtAQPzk&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h39m20s" target="_blank" rel="nofollow noopener noreferrer">00:39:20</A>:</STRONG> Adding the content for our UI5 Component file, we get this:<BR />
<DIV><BR />
<PRE class="sourceCode javascript"><CODE class="sourceCode javascript"><SPAN class="va">sap</SPAN>.<SPAN class="va">ui</SPAN>.<SPAN class="at">define</SPAN>(<BR />
    [<SPAN class="st">'sap/fe/AppComponent'</SPAN>]<SPAN class="op">,</SPAN><BR />
    ac <SPAN class="op">=&gt;</SPAN> <SPAN class="va">ac</SPAN>.<SPAN class="at">extend</SPAN>(<SPAN class="st">'suppliers.Component'</SPAN><SPAN class="op">,</SPAN> <SPAN class="op">{</SPAN><BR />
        <SPAN class="dt">metadata</SPAN><SPAN class="op">:</SPAN> <SPAN class="op">{</SPAN> <SPAN class="dt">manifest</SPAN><SPAN class="op">:</SPAN> <SPAN class="st">'json'</SPAN> <SPAN class="op">}</SPAN><BR />
    <SPAN class="op">}</SPAN>)<BR />
)</CODE></PRE><BR />
</DIV><BR />
This refers to a manifest file which contains pretty much everything the app needs to know about itself, regarding data models, routing, and in fact what is displayed, in terms of views.<BR />
<BR />
So let's look at that now:<BR />
<DIV><BR />
<PRE class="sourceCode json"><CODE class="sourceCode json"><SPAN class="fu">{</SPAN><BR />
    <SPAN class="dt">"sap.app"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="fu">{</SPAN><BR />
        <SPAN class="dt">"id"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="st">"suppliers"</SPAN><SPAN class="fu">,</SPAN><BR />
        <SPAN class="dt">"title"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="st">"Browse Suppliers"</SPAN><SPAN class="fu">,</SPAN><BR />
        <SPAN class="dt">"dataSources"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="fu">{</SPAN><BR />
            <SPAN class="dt">"Breezy"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="fu">{</SPAN><BR />
                <SPAN class="dt">"uri"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="st">"/breezy/"</SPAN><SPAN class="fu">,</SPAN><BR />
                <SPAN class="dt">"settings"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="fu">{</SPAN><BR />
                    <SPAN class="dt">"odataVersion"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="st">"4.0"</SPAN><BR />
                <SPAN class="fu">}</SPAN><BR />
            <SPAN class="fu">}</SPAN><BR />
        <SPAN class="fu">}</SPAN><BR />
    <SPAN class="fu">},</SPAN><BR />
    <SPAN class="dt">"sap.ui5"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="fu">{</SPAN><BR />
        <SPAN class="dt">"dependencies"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="fu">{</SPAN> <SPAN class="dt">"libs"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="fu">{</SPAN> <SPAN class="dt">"sap.fe"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="fu">{}</SPAN> <SPAN class="fu">}</SPAN> <SPAN class="fu">},</SPAN><BR />
        <SPAN class="dt">"models"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="fu">{</SPAN><BR />
            <SPAN class="dt">""</SPAN><SPAN class="fu">:</SPAN> <SPAN class="fu">{</SPAN><BR />
                <SPAN class="dt">"dataSource"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="st">"Breezy"</SPAN><SPAN class="fu">,</SPAN><BR />
                <SPAN class="dt">"settings"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="fu">{</SPAN> <SPAN class="dt">"synchronizationMode"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="st">"None"</SPAN> <SPAN class="fu">}</SPAN><BR />
            <SPAN class="fu">}</SPAN><BR />
        <SPAN class="fu">},</SPAN><BR />
        <SPAN class="dt">"routing"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="fu">{</SPAN><BR />
            <SPAN class="dt">"routes"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="ot">[</SPAN><BR />
                <SPAN class="fu">{</SPAN><BR />
                    <SPAN class="dt">"pattern"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="st">""</SPAN><SPAN class="fu">,</SPAN><BR />
                    <SPAN class="dt">"name"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="st">"SuppliersList"</SPAN><SPAN class="fu">,</SPAN><BR />
                    <SPAN class="dt">"target"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="st">"SuppliersList"</SPAN><BR />
                <SPAN class="fu">}</SPAN><BR />
            <SPAN class="ot">]</SPAN><SPAN class="fu">,</SPAN><BR />
            <SPAN class="dt">"targets"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="fu">{</SPAN><BR />
                <SPAN class="dt">"SuppliersList"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="fu">{</SPAN><BR />
                    <SPAN class="dt">"entitySet"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="st">"Suppliers"</SPAN><SPAN class="fu">,</SPAN><BR />
                    <SPAN class="dt">"viewName"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="st">"sap.fe.templates.ListReport"</SPAN><BR />
                <SPAN class="fu">}</SPAN><BR />
            <SPAN class="fu">}</SPAN><BR />
        <SPAN class="fu">}</SPAN><BR />
    <SPAN class="fu">}</SPAN><BR />
<SPAN class="fu">}</SPAN></CODE></PRE><BR />
</DIV><BR />
<STRONG><A href="https://www.youtube.com/watch?v=es0eAtAQPzk&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h45m45s" target="_blank" rel="nofollow noopener noreferrer">00:45:45</A>:</STRONG> Note that the data source that we've been creating (in the form of the "Breezy" service) is defined in the "sap.app" section of this manifest file.<BR />
<BR />
The rest of the manifest file consists of an "sap.ui5" section, which defines dependencies, models and routing (which is also where the views are defined, in the form of views from the <CODE>sap.fe.templates</CODE> library).<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=es0eAtAQPzk&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h48m40s" target="_blank" rel="nofollow noopener noreferrer">00:48:40</A>:</STRONG> We have a quick look at the standard tutorial on Routing in the UI5 SDK, which is the <A href="https://ui5.sap.com/#/topic/1b6dcd39a6a74f528b27ddb22f15af0d" target="_blank" rel="noopener noreferrer">Navigation and Routing</A> tutorial, which you can have a look at if you want to understand more of what's being defined in the "routing" section of the manifest file here.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=es0eAtAQPzk&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h51m35s" target="_blank" rel="nofollow noopener noreferrer">00:51:35</A>:</STRONG> Now when we select the tile in the sandbox launchpad, we get a sort of app, already half-working. There's no data displayed, but we can see that it is indeed showing a "list report" style UI. Wonderful!<BR />
<BR />
We note that the four filter fields in the UI are there because there are four fields in the entity definition (Suppliers) to which we're referring in the manifest file. As a reminder, here's what the Suppliers entity definition looks like in <CODE>model.cds</CODE>:<BR />
<PRE class="cds"><CODE>entity Suppliers {<BR />
    key ID       : Integer;<BR />
    name         : String(40);<BR />
    country      : String(15);<BR />
    products     : Association to many Products on products.supplier = $self;<BR />
}</CODE></PRE><BR />
<STRONG><A href="https://www.youtube.com/watch?v=es0eAtAQPzk&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h52m45s" target="_blank" rel="nofollow noopener noreferrer">00:52:45</A>:</STRONG> Tantalisingly close! What we need to do now is add some annotations that will glue everything together (the generic Fiori Elements based view, and the data in the OData service).<BR />
<BR />
So we add a new file <CODE>index.cds</CODE> at the same level as <CODE>index.html</CODE>, with the following content:<BR />
<PRE class="cds"><CODE>using from '../srv/service';<BR />
<BR />
annotate northbreeze.Suppliers with @(<BR />
    UI: {<BR />
        SelectionFields: [],<BR />
        LineItem: [<BR />
            { Value: ID, Label: 'ID' },<BR />
            { Value: name, Label: 'Name' },<BR />
            { Value: country, Label: 'Country' }<BR />
        ],<BR />
        HeaderInfo: {<BR />
            TypeNamePlural: 'Suppliers'<BR />
        }<BR />
    }<BR />
);</CODE></PRE><BR />
<STRONG><A href="https://www.youtube.com/watch?v=es0eAtAQPzk&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h57m25s" target="_blank" rel="nofollow noopener noreferrer">00:57.25</A>:</STRONG> After adding this, we redeploy (as these are CDS changes) and restart, and check what we get in the UI (we're already on the appropriate <A href="http://localhost:4004/#browse-suppliers" target="_blank" rel="nofollow noopener noreferrer">hashpath based URL</A> in the launchpad).<BR />
<BR />
After sorting out some browser cacheing issue, we finally see that through the power of annotations and Fiori Elements, we get a wonderfully pretty fully-functional app for very little effort at all. Result! Just in time to end the stream. See you next time!
---
Annotated links: Episode 15 of Hands-on SAP dev with qmacro
technology-blog-sap
2019-04-15
https://community.sap.com/t5/technology-blogs-by-sap/annotated-links-episode-15-of-hands-on-sap-dev-with-qmacro/ba-p/13415416
2019-04-15-annotated-links-episode-15-of-hands-on-sap-dev-with-qmacro
<EM>This is a searchable description of the content of a live stream recording, specifically <STRONG>"Episode 15 - Starting to look at a frontend for our Northbreeze app"</STRONG> in the "<A href="https://bit.ly/handsonsapdev" target="_blank" rel="nofollow noopener noreferrer">Hands-on SAP dev with qmacro</A>" series. There are links directly to specific highlights in the video recording. For links to annotations of other episodes, please see the "<A href="https://bit.ly/handsonsapdev#replays" target="_blank" rel="nofollow noopener noreferrer">Catch the replays</A>" section of the series blog post.</EM><BR />
<BR />
This episode, titled "<A href="https://bit.ly/handsonsapdev#ep15" target="_blank" rel="nofollow noopener noreferrer">Starting to look at a frontend for our Northbreeze app</A>", was streamed live on Fri 29 Mar 2019 and is approximately one hour in length. The stream recording is <A href="https://www.youtube.com/watch?v=qqi64GOMGY8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0" target="_blank" rel="nofollow noopener noreferrer">available on YouTube</A>.<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2019/04/Screen-Shot-2019-04-15-at-17.35.11.png" /><BR />
<BR />
Below is a brief synopsis, and links to specific highlights - use these links to jump directly to particular places of interest in the recording, based on 'hh:mm:ss' style timestamps.<BR />
<H2 id="brief-synopsis" id="toc-hId-929815427">Brief synopsis</H2><BR />
This session comes to you live from the location of the SAP CodeJam event in the AOK offices in Frankfurt. In this episode we investigate at a few more cool features of CAP and CDS and start to look at a user interface for our Northbreeze app, and even get to serve it from the CAP runtime itself.<BR />
<H2 id="links-to-specific-highlights" id="toc-hId-733301922">Links to specific highlights</H2><BR />
<STRONG><A href="https://www.youtube.com/watch?v=qqi64GOMGY8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h01m00s" target="_blank" rel="nofollow noopener noreferrer">00:01:00</A>:</STRONG> Introducing <SPAN class="mention-scrubbed">riley.rainey</SPAN> to this episode, who tells us a bit about himself and the work of the evangelists and developer relations as a whole, and mentions the CodeJams that are running that day. By the way, if you would like to know more about CodeJams or request one, visit the <A href="https://www.sap.com/community/events.html" target="_blank" rel="noopener noreferrer">Community Events</A> page.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=qqi64GOMGY8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h05m00s" target="_blank" rel="nofollow noopener noreferrer">00:05:00</A>:</STRONG> Talking about the recent announcement relating to the SAP S/4HANA Cloud SDK - which is the availability of release 1.0.0 of the JavaScript version. This has been in beta for a while but has now gone Generally Available (GA). This is great news! See the post <A href="https://blogs.sap.com/2019/03/28/announcing-the-sap-s4hana-cloud-sdk-for-javascript/" target="_blank" rel="noopener noreferrer">Announcing the SAP S/4HANA Cloud SDK</A> by <SPAN class="mention-scrubbed">henning.heitkoetter#overview</SPAN> for more info on this.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=qqi64GOMGY8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h09m00s" target="_blank" rel="nofollow noopener noreferrer">00:09:00</A>:</STRONG> Using <CODE>npm info <a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a>/cds</CODE> we look at the latest info on the <CODE><a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a>/cds</CODE> module, we can see that it's at version 3.7.1. I've deliberately not upgraded the version I have installed globally, which is still at 3.5.2. This resulted in some interesting effects, for new projects created (with <CODE>cds init</CODE>) which we explore at this point.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=qqi64GOMGY8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h14m24s" target="_blank" rel="nofollow noopener noreferrer">00:14:24</A>:</STRONG> Looking at which actual <CODE>cds</CODE> executable is being used:<BR />
<DIV><BR />
<PRE class="sourceCode bash"><CODE class="sourceCode bash">=<SPAN class="op">&gt;</SPAN> <SPAN class="fu">which</SPAN> cds<BR />
<SPAN class="ex">/Users/i347491/.nvm/versions/node/v8.12.0/bin/cds</SPAN></CODE></PRE><BR />
</DIV><BR />
which is the globally installed one, and also looking what type of file that is:<BR />
<DIV><BR />
<PRE class="sourceCode bash"><CODE class="sourceCode bash">=<SPAN class="op">&gt;</SPAN> <SPAN class="fu">file</SPAN> <SPAN class="kw">`</SPAN><SPAN class="fu">which</SPAN> cds<SPAN class="kw">`</SPAN><BR />
<SPAN class="ex">/Users/i347491/.nvm/versions/node/v8.12.0/bin</SPAN>/cds: <SPAN class="ex">a</SPAN> /usr/bin/env node script text executable, ASCII text</CODE></PRE><BR />
</DIV><BR />
This is also possible with the following sequence of commands:<BR />
<DIV><BR />
<PRE class="sourceCode bash"><CODE class="sourceCode bash">=<SPAN class="op">&gt;</SPAN> <SPAN class="fu">which</SPAN> cds<BR />
<SPAN class="ex">/Users/i347491/.nvm/versions/node/v8.12.0/bin/cds</SPAN><BR />
=<SPAN class="op">&gt;</SPAN> <SPAN class="fu">file</SPAN> <SPAN class="va">$(</SPAN>!!<SPAN class="va">)</SPAN><BR />
<SPAN class="ex">/Users/i347491/.nvm/versions/node/v8.12.0/bin</SPAN>/cds: <SPAN class="ex">a</SPAN> /usr/bin/env node script text executable, ASCII text</CODE></PRE><BR />
</DIV><BR />
<STRONG><A href="https://www.youtube.com/watch?v=qqi64GOMGY8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h17m45s" target="_blank" rel="nofollow noopener noreferrer">00:17:45</A>:</STRONG> Looking a bit more closely at the <CODE>cds</CODE> file, we see that it's actually a symbolic link to another file elsewhere in the <CODE><a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a>/cds</CODE> package:<BR />
<DIV><BR />
<PRE class="sourceCode bash"><CODE class="sourceCode bash">=<SPAN class="op">&gt;</SPAN> <SPAN class="fu">ls</SPAN> -l ~/.nvm/versions/node/v8.12.0/bin/cds<BR />
<SPAN class="ex">lrwxr-xr-x</SPAN>  1 i347491  staff  39 12 Apr 07:14 /Users/i347491/.nvm/versions/node/v8.12.0/bin/cds@ -<SPAN class="op">&gt;</SPAN> ../lib/node_modules/@sap/cds/bin/cds.js</CODE></PRE><BR />
</DIV><BR />
<STRONG><A href="https://www.youtube.com/watch?v=qqi64GOMGY8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h18m35s" target="_blank" rel="nofollow noopener noreferrer">00:18:35</A>:</STRONG> A cameo appearance from <SPAN class="mention-scrubbed">iinside</SPAN>, who, along with Former Member (who also makes an appearance a few minutes later - bearing gifts in the form of SAP Cloud Application Programming Model sticksers!) is co-running the CAP CodeJam there at AOK Systems.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=qqi64GOMGY8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h23m20s" target="_blank" rel="nofollow noopener noreferrer">00:23:20</A>:</STRONG> Having a look inside the <CODE>cds</CODE> entrypoint, in particular, the "bootstrap" section which has this comment: "try to find a locally installed cds, otherwise launch this one".<BR />
<BR />
This is something we'll try to debug, to see it in action.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=qqi64GOMGY8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h25m30s" target="_blank" rel="nofollow noopener noreferrer">00:25:30</A>:</STRONG> We're going to use the Node Inspector to debug:<BR />
<DIV><BR />
<PRE class="sourceCode bash"><CODE class="sourceCode bash">=<SPAN class="op">&gt;</SPAN> <SPAN class="ex">node</SPAN> --inspect-brk <SPAN class="kw">`</SPAN><SPAN class="fu">which</SPAN> cds<SPAN class="kw">`</SPAN><BR />
<SPAN class="ex">Debugger</SPAN> listening on ws://127.0.0.1:9229/d4274321-3b28-4ae2-90a0-fbf02c5bf1e0<BR />
<SPAN class="ex">For</SPAN> help see <A href="https://nodejs.org/en/docs/inspector" target="test_blank" rel="nofollow noopener noreferrer">https://nodejs.org/en/docs/inspector</A></CODE></PRE><BR />
</DIV><BR />
We can now attach the Chrome Developer tools to this, to debug! Opening up the special <A class="uri" href="https://blogs.sap.com//inspect" target="_blank" rel="noopener noreferrer">chrome://inspect</A> address we can see the Node process waiting for us to connect and start inspecting.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=qqi64GOMGY8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h29m00s" target="_blank" rel="nofollow noopener noreferrer">00:29:00</A>:</STRONG> We stop on the use of <CODE>require_local</CODE> which is a module inside the global <CODE><a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a>/cds</CODE> package, specifically in <CODE>lib/utils/</CODE>. This module attempts to load a project-local version of the module specified, and back in <CODE>cds.js</CODE> we see the result of this, if successful, is assigned to the <CODE>_main</CODE> constant, falling back to the <CODE>main</CODE> function that's defined further down in this global <CODE>cds.js</CODE> script.<BR />
<BR />
We can see how this works now, and understand why, when we invoke <CODE>cds</CODE> from within a CAP project directory,We can see how this works now, and understand why, when we invoke <CODE>cds</CODE> from within a CAP project directory, we get a different version of <CODE>cds</CODE> compared to when we invoke it from outside a CAP project directory. The power of Node, Chrome Developer Tools and debugging in general! (And of course this would be almost impossible if we didn't have access to the source code).<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=qqi64GOMGY8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h33m00s" target="_blank" rel="nofollow noopener noreferrer">00:33:00</A>:</STRONG> Discussing the differences (and similarities) between <CODE>cds run</CODE> and <CODE>cds serve all</CODE>.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=qqi64GOMGY8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h35m00s" target="_blank" rel="nofollow noopener noreferrer">00:35:00</A>:</STRONG> Getting back to our Northbreeze project, to remind ourselves where we ended up last time, and starting to talk a bit about a function import on our OData service, something we haven't previously considered. This causes me to go on a bit about how function imports are quite orthogonal to the rest of the OData protocol, how they are more like remote procedure calls, in the context of OData's otherwise nicely RESTful design.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=qqi64GOMGY8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h37m50s" target="_blank" rel="nofollow noopener noreferrer">00:37:50</A>:</STRONG> So despite my (mostly philosophical) reservations about function imports, we plan to take a quick look at how we go about defining one in the service definition in this Northbreeze project.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=qqi64GOMGY8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h39m00s" target="_blank" rel="nofollow noopener noreferrer">00:39:00</A>:</STRONG> Reminding ourselves that adding a <CODE>.js</CODE> file, with the same base name as a service definition file, allows us to provide custom implementation logic for the contents of that service. You can use this technique to enhance or override standard CAP service functionality as you see fit.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=qqi64GOMGY8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h40m35s" target="_blank" rel="nofollow noopener noreferrer">00:40:35</A>:</STRONG> To warm up, we add a <CODE>service.js</CODE> file alongside the <CODE>service.cds</CODE> file, with the following contents:<BR />
<DIV><BR />
<PRE class="sourceCode javascript"><CODE class="sourceCode javascript"><SPAN class="va">module</SPAN>.<SPAN class="at">exports</SPAN> <SPAN class="op">=</SPAN> srv <SPAN class="op">=&gt;</SPAN> <SPAN class="op">{</SPAN><BR />
  <SPAN class="va">console</SPAN>.<SPAN class="at">log</SPAN>(<SPAN class="st">"IN SERVICE IMPLEMENTATION"</SPAN><SPAN class="op">,</SPAN> srv)<BR />
<SPAN class="op">}</SPAN></CODE></PRE><BR />
</DIV><BR />
When we start the service, we see a whole lot of information produced by this <CODE>console.log</CODE> statement.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=qqi64GOMGY8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h41m49s" target="_blank" rel="nofollow noopener noreferrer">00:41:49</A>:</STRONG> Changing the reference in the <CODE>console.log</CODE> statement from <CODE>srv</CODE> to <CODE>srv.name</CODE>, and we can more easily see that in fact the function we've defined gets called <EM>for each of the services defined</EM> in <CODE>service.cds</CODE>:<BR />
<PRE><CODE>IN SERVICE IMPLEMENTATION Breezy<BR />
IN SERVICE IMPLEMENTATION Restricted</CODE></PRE><BR />
This is because we have both these services defined in <CODE>service.cds</CODE>, thus:<BR />
<PRE class="cds"><CODE>using northbreeze from '../db/model';<BR />
<BR />
service Breezy {<BR />
        entity Products as projection on northbreeze.Products;<BR />
        entity Suppliers as projection on northbreeze.Suppliers;<BR />
        entity Categories as projection on northbreeze.Categories;<BR />
        function hello (to:String) returns String;<BR />
}<BR />
<BR />
service Restricted {<BR />
        entity Orders as projection on northbreeze.Orders;<BR />
}</CODE></PRE><BR />
<STRONG><A href="https://www.youtube.com/watch?v=qqi64GOMGY8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h44m15s" target="_blank" rel="nofollow noopener noreferrer">00:44:15</A>:</STRONG> Next up, having replaced the body of the exported function in <CODE>service.js</CODE> with this:<BR />
<DIV><BR />
<PRE class="sourceCode javascript"><CODE class="sourceCode javascript"><SPAN class="cf">if</SPAN> (<SPAN class="va">srv</SPAN>.<SPAN class="at">name</SPAN> <SPAN class="op">===</SPAN> <SPAN class="st">'Breezy'</SPAN>) <SPAN class="op">{</SPAN><BR />
  <SPAN class="va">srv</SPAN>.<SPAN class="at">before</SPAN>(<SPAN class="st">'READ'</SPAN><SPAN class="op">,</SPAN> <SPAN class="st">'Products'</SPAN><SPAN class="op">,</SPAN> x <SPAN class="op">=&gt;</SPAN> <SPAN class="op">{</SPAN><BR />
    <SPAN class="va">console</SPAN>.<SPAN class="at">log</SPAN>(x)<BR />
  <SPAN class="op">}</SPAN><BR />
<SPAN class="op">}</SPAN></CODE></PRE><BR />
</DIV><BR />
... we can get a glimpse of the sort of information that's passed to such a custom hook function.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=qqi64GOMGY8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h45m00s" target="_blank" rel="nofollow noopener noreferrer">00:45:00</A>:</STRONG> We define a simple function import definition in the <CODE>service.cds</CODE> file. Of course, a function import will belong to a specific OData service, so we write the definition inside one of the two services defined there, specifically the 'Breezy' service, and the definition looks like this:<BR />
<PRE class="cds"><CODE>function hello (to:String) returns String;</CODE></PRE><BR />
The corresponding implementation for this function definition can be written in the <CODE>service.js</CODE> implementation file, which we do, like this:<BR />
<DIV><BR />
<PRE class="sourceCode javascript"><CODE class="sourceCode javascript"><SPAN class="va">srv</SPAN>.<SPAN class="at">on</SPAN>(<SPAN class="st">'hello'</SPAN><SPAN class="op">,</SPAN> x <SPAN class="op">=&gt;</SPAN> <SPAN class="op">{</SPAN><BR />
  <SPAN class="va">console</SPAN>.<SPAN class="at">log</SPAN>(x)<BR />
<SPAN class="op">}</SPAN></CODE></PRE><BR />
</DIV><BR />
<STRONG><A href="https://www.youtube.com/watch?v=qqi64GOMGY8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h46m45s" target="_blank" rel="nofollow noopener noreferrer">00:46:45</A>:</STRONG> Calling the function import like this:<BR />
<PRE><CODE>http://localhost:4004/breezy/hello(to='dj')</CODE></PRE><BR />
we see, via a breakpoint, that the data passed to the function import definition contains all sorts of information, including, in <CODE>data</CODE>, the value of the <CODE>to</CODE> parameter that we passed ("dj"), which we now use in what we return, modifying the function so it now looks like this:<BR />
<DIV><BR />
<PRE class="sourceCode javascript"><CODE class="sourceCode javascript"><SPAN class="va">srv</SPAN>.<SPAN class="at">on</SPAN>(<SPAN class="st">'hello'</SPAN><SPAN class="op">,</SPAN> x <SPAN class="op">=&gt;</SPAN> <SPAN class="vs">`Hello there </SPAN><SPAN class="sc">${</SPAN><SPAN class="va">x</SPAN>.<SPAN class="va">data</SPAN>.<SPAN class="at">to</SPAN><SPAN class="sc">}</SPAN><SPAN class="vs"> !`</SPAN>)</CODE></PRE><BR />
</DIV><BR />
And with that, I end the stream a little bit early, to allow the CAP CodeJam participants to enter the room and get set up for the day's session! We'll continue the move towards looking at a UI layer next time!
---
Annotated links: Episode 14 of Hands-on SAP dev with qmacro
technology-blog-sap
2019-04-11
https://community.sap.com/t5/technology-blogs-by-sap/annotated-links-episode-14-of-hands-on-sap-dev-with-qmacro/ba-p/13411948
2019-04-11-annotated-links-episode-14-of-hands-on-sap-dev-with-qmacro
<EM>This is a searchable description of the content of a live stream recording, specifically <STRONG>"Episode 14 - Exploring CAP service level features and annotations"</STRONG> in the "<A href="https://bit.ly/handsonsapdev" target="_blank" rel="nofollow noopener noreferrer">Hands-on SAP dev with qmacro</A>" series. There are links directly to specific highlights in the video recording. For links to annotations of other episodes, please see the "<A href="https://bit.ly/handsonsapdev#replays" target="_blank" rel="nofollow noopener noreferrer">Catch the replays</A>" section of the series blog post.</EM><BR />
<BR />
This episode, titled "<A href="https://bit.ly/handsonsapdev#ep14" target="_blank" rel="nofollow noopener noreferrer">Exploring CAP service level features and annotations</A>", was streamed live on Fri 22 Mar 2019 and is approximately one hour in length. The stream recording is <A href="https://www.youtube.com/watch?v=E-0BR62oX-Q&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0" target="_blank" rel="nofollow noopener noreferrer">available on YouTube</A>.<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2019/04/Screen-Shot-2019-04-11-at-16.47.11.png" /><BR />
<BR />
Below is a brief synopsis, and links to specific highlights - use these links to jump directly to particular places of interest in the recording, based on 'hh:mm:ss' style timestamps.<BR />
<H2 id="brief-synopsis" id="toc-hId-929701163">Brief synopsis</H2><BR />
After a pleasant detour hacking together some CSV related utilities with Node.js we return to our Northbreeze CAP project and take a look at some of the service level features, looking how they can complement the data model, and playing around with some of the annotations available to us, to see what effect they have. We also take a look at fixing the issue we had with the boolean property :-0 back in Ep.10.<BR />
<H2 id="links-to-specific-highlights" id="toc-hId-733187658">Links to specific highlights</H2><BR />
<STRONG><A href="https://www.youtube.com/watch?v=E-0BR62oX-Q&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h03m35s" target="_blank" rel="nofollow noopener noreferrer">00:03:35</A>:</STRONG> I was reminded by <SPAN class="mention-scrubbed">nabheet.madan3</SPAN> that we finished <A href="https://bit.ly/handsonsapdev#ep10" target="_blank" rel="nofollow noopener noreferrer">Ep.10</A> on a cliffhanger, in that all the values for the <CODE>discontinued</CODE> property were "true", which is not actually the case when we look at the source data in Northwind itself.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=E-0BR62oX-Q&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h05m10s" target="_blank" rel="nofollow noopener noreferrer">00:05:10</A>:</STRONG> Remember that <A href="https://wiki.scn.sap.com/wiki/display/events/SAP+Inside+Track+Oslo+-+17+August+2019" target="_blank" rel="noopener noreferrer">SAP Inside Track OSLO</A> is on 17 August 2019!<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=E-0BR62oX-Q&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h05m45s" target="_blank" rel="nofollow noopener noreferrer">00:05:45</A>:</STRONG> Proud of the latest keyboard in my growing collection of mechanical keyboards: an Anne Pro 2 with Gateron Brown switches, purchased from the same place I got my Vortex Race 3 - <A href="https://candykeys.com/" target="_blank" rel="nofollow noopener noreferrer">Candy Keys</A> - recommended! The Anne Pro 2 is a so-called "60% keyboard" which refers to the size and number of keys.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=E-0BR62oX-Q&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h07m10s" target="_blank" rel="nofollow noopener noreferrer">00:07:10</A>:</STRONG> There are no dedicated arrow keys on this keyboard so I've adjusted my <A href="https://www.spectacleapp.com/" target="_blank" rel="nofollow noopener noreferrer">Spectacle</A> settings accordingly. (It turns out that I <EM>can</EM> define arrow keys in a layer, and use the Fn, Menu, Ctrl and Shift key cluster on the right, works very well in fact!).<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=E-0BR62oX-Q&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h08m40s" target="_blank" rel="nofollow noopener noreferrer">00:08:40</A>:</STRONG> Reminding ourselves of the detail of the <CODE>discontinued</CODE> problem, looking at the data model and specifically at the definition of the <CODE>Products</CODE> entity which includes the <CODE>discontinued</CODE> property.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=E-0BR62oX-Q&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h10m35s" target="_blank" rel="nofollow noopener noreferrer">00:10:35</A>:</STRONG> In the CSV file for the Products data we can see various values for the <CODE>discontinued</CODE> property, specifically <CODE>true</CODE> and <CODE>false</CODE> randomly throughout. But when we look at the data via <A href="http://localhost:4004/breezy/Products?$select=name,discontinued" target="_blank" rel="nofollow noopener noreferrer">an OData query operation</A>, we can see that every value for <CODE>discontinued</CODE> is <CODE>true</CODE>!<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=E-0BR62oX-Q&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h12m00s" target="_blank" rel="nofollow noopener noreferrer">00:12:00</A>:</STRONG> I've installed the <A href="https://chrome.google.com/webstore/detail/vimium/dbepggeogbaibhgnhhndojpepiihcmeb?hl=en" target="_blank" rel="nofollow noopener noreferrer">Vimium</A> Chrome extension which allows me to operate Chrome pretty-much mouse-less, and more specifically, using Vim style key bindings. Wonderful! I demonstrate this using my home website <A href="https://qmacro.org" target="_blank" rel="nofollow noopener noreferrer">qmacro.org</A>.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=E-0BR62oX-Q&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h12m55s" target="_blank" rel="nofollow noopener noreferrer">00:12:55</A>:</STRONG> We check directly in the persistence layer (the SQLite database) to see what values are actually stored:<BR />
<PRE><CODE>14:10 $ sqlite3 northbreeze.db<BR />
SQLite version 3.22.0 2018-01-22 18:45:57<BR />
Enter ".help" for usage hints.<BR />
sqlite&gt; .tables<BR />
Breezy_Categories       Restricted_Orders       northbreeze_Products<BR />
Breezy_Products         northbreeze_Categories  northbreeze_Suppliers<BR />
Breezy_Suppliers        northbreeze_Orders<BR />
sqlite&gt; select * from northbreeze_Products;<BR />
1|Chai|10 boxes x 20 bags|18|39|0|10|false|1|1<BR />
2|Chang|24 - 12 oz bottles|19|17|40|25|false|1|1<BR />
3|Aniseed Syrup|12 - 550 ml bottles|10|13|70|25|false|1|2<BR />
4|Chef Anton's Cajun Seasoning|48 - 6 oz jars|22|53|0|0|0|2|2<BR />
5|Chef Anton's Gumbo Mix|36 boxes|21.35|0|0|0|true|2|2<BR />
6|Grandma's Boysenberry Spread|12 - 8 oz jars|25|120|0|25|false|3|2<BR />
[...]</CODE></PRE><BR />
<STRONG><A href="https://www.youtube.com/watch?v=E-0BR62oX-Q&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h13m20s" target="_blank" rel="nofollow noopener noreferrer">00:13:20</A>:</STRONG> It turns out that the problem lay in the conversion from JSON to CSV in the <CODE>grab.js</CODE> script, using the <CODE>json2csv</CODE> package.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=E-0BR62oX-Q&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h14m45s" target="_blank" rel="nofollow noopener noreferrer">00:14:45</A>:</STRONG> To illustrate, we created a quick CDS project in my <CODE>/tmp/</CODE> directory:<BR />
<DIV><BR />
<PRE class="sourceCode bash"><CODE class="sourceCode bash">=<SPAN class="op">&gt;</SPAN> <SPAN class="ex">cds</SPAN> init --modules db,srv x</CODE></PRE><BR />
</DIV><BR />
... then the definition of the <CODE>Books</CODE> entity to have a Boolean type property thus:<BR />
<PRE class="cds"><CODE>entity Books {<BR />
  key ID  : Integer;<BR />
  title   : String;<BR />
  instock : Boolean;<BR />
}</CODE></PRE><BR />
and then added a CSV file <CODE>my.bookshop-Books.csv</CODE> with this content:<BR />
<PRE class="csv"><CODE>ID,title,instock<BR />
1,Book Title A,false<BR />
2,Book Title B,true</CODE></PRE><BR />
Then, after an <CODE>npm install --save sqlite3</CODE> we ran <CODE>cds deploy --to sqlite:x.db</CODE>, which meant then we could immediately thereafter start the server with <CODE>cds run</CODE>, which gave us the <A href="https://community.sap.com/endpoint" target="_blank" rel="nofollow noopener noreferrer">http://localhost:4004</A> to check.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=E-0BR62oX-Q&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h17m40s" target="_blank" rel="nofollow noopener noreferrer">00:17:40</A>:</STRONG> Lo and behold, we observed the problem first hand - both books were shown to be in stock!Turns out this issue is known, and I found an issue logged against the package's repository: <A href="https://github.com/zemirco/json2csv/issues/156" target="_blank" rel="nofollow noopener noreferrer">Issue converting columns with boolean values</A>. Basically, the conversion is treating <CODE>true</CODE> and <CODE>false</CODE> as strings, rather than boolean values, and as we know, any non-empty string is "truthy", resulting in every value for the <CODE>discontinued</CODE> property being true.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=E-0BR62oX-Q&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h20m50s" target="_blank" rel="nofollow noopener noreferrer">00:20:50</A>:</STRONG> We create a second launch configuration in the project's <CODE>launch.json</CODE> for the <CODE>deploy</CODE> command, so we can put a breakpoint in <CODE>init-from-csv.js</CODE> (which is part of <CODE><a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a>/cds</CODE>).<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=E-0BR62oX-Q&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h22m15s" target="_blank" rel="nofollow noopener noreferrer">00:22:15</A>:</STRONG> A side note on VS Code's search facility, which by default explicitly excludes any <CODE>node_modules/</CODE> directory when searching for files. This is usually what we want. But when we don't, like now, we can change the setting, by opening the settings JSON and adding this:<BR />
<DIV><BR />
<PRE class="sourceCode json"><CODE class="sourceCode json"><SPAN class="er">"search.exclude":</SPAN> <SPAN class="fu">{</SPAN><BR />
  <SPAN class="dt">"**/node_modules"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="kw">false</SPAN><BR />
<SPAN class="fu">}</SPAN></CODE></PRE><BR />
</DIV><BR />
Nice!<BR />
<BR />
This means we can now navigate to <CODE>init-from-csv.js</CODE> and set a breakpoint in the <CODE>_init</CODE> function to see what's going on.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=E-0BR62oX-Q&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h24m34s" target="_blank" rel="nofollow noopener noreferrer">00:24:34</A>:</STRONG> Kicking off the launch configuration that we just created for the <CODE>cds deploy</CODE> command, we now hit the breakpoint we just sent, and can examine the data, which looks like this:<BR />
<PRE><CODE>rows[1]<BR />
&gt; Array(3) ["2", "Book Title B", "true"]</CODE></PRE><BR />
The third value is a string, rather than a boolean!<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=E-0BR62oX-Q&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h26m20s" target="_blank" rel="nofollow noopener noreferrer">00:26:20</A>:</STRONG> To fix this quickly, we go into the CSV file and modify the values - changing <CODE>false</CODE> to <CODE>0</CODE> and <CODE>true</CODE> to <CODE>1</CODE>. Not the best solution, but why not, especially as we have control of the input data! <span class="lia-unicode-emoji" title=":slightly_smiling_face:">ð</span><BR />
<BR />
Here are the global substitution commands used:<BR />
<PRE><CODE>%s/,false,/,0,/<BR />
%s/,true,/,1,/</CODE></PRE><BR />
After a new <CODE>cds deploy</CODE> invocation, we can see that the <CODE>discontinued</CODE> values are now correct. Good!<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=E-0BR62oX-Q&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h28m30s" target="_blank" rel="nofollow noopener noreferrer">00:28:30</A>:</STRONG> Thinking about the explicit difference in layers, between the data model and the service definition, in our project (and many typical CAP projects).<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=E-0BR62oX-Q&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h31m05s" target="_blank" rel="nofollow noopener noreferrer">00:31:05</A>:</STRONG> Starting to play around with a couple of annotations: <CODE>@readonly</CODE> and <CODE>@insertonly</CODE> to see what their effect is.<BR />
<BR />
In the temporary project we created earlier, the <CODE>CatalogService</CODE> is defined as having a single entity <CODE>Books</CODE> which is annotated with <CODE>@readonly</CODE>:<BR />
<PRE class="cds"><CODE>service CatalogService {<BR />
  @readonly entity Books as projection on my.Books;<BR />
}</CODE></PRE><BR />
<STRONG><A href="https://www.youtube.com/watch?v=E-0BR62oX-Q&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h35m10s" target="_blank" rel="nofollow noopener noreferrer">00:35:10</A>:</STRONG> We look briefly at the <A href="https://github.com/qmacro/scripts" target="_blank" rel="nofollow noopener noreferrer">scripts</A> repo content, which contains various configuration settings, including the shortcuts that I used, and a mechanism to generate them. The one in question here is <CODE>t</CODE> which I use to change to the <CODE>/tmp/</CODE> directory, and in fact, like other shortcuts I have that take me to specific directories, I have the shortcut do for me what I'd do anyway, which is to call <CODE>ls</CODE> to show the files. This is how <CODE>t</CODE> is defined:<BR />
<PRE class="shell"><CODE>alias t='cd /tmp &amp;&amp; ls -a'</CODE></PRE><BR />
<STRONG><A href="https://www.youtube.com/watch?v=E-0BR62oX-Q&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h36m40s" target="_blank" rel="nofollow noopener noreferrer">00:36:40</A>:</STRONG> In order to test whether we can make non-read-only calls on the <CODE>Books</CODE> entity, we prepare some book data in JSON format, in a new file <CODE>book.json</CODE>:<BR />
<DIV><BR />
<PRE class="sourceCode json"><CODE class="sourceCode json"><SPAN class="fu">{</SPAN><BR />
  <SPAN class="dt">"ID"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="dv">42</SPAN><SPAN class="fu">,</SPAN><BR />
  <SPAN class="dt">"title"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="st">"The Hitch Hiker's Guide To The Galaxy"</SPAN><SPAN class="fu">,</SPAN><BR />
  <SPAN class="dt">"instock"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="kw">true</SPAN><BR />
<SPAN class="fu">}</SPAN></CODE></PRE><BR />
</DIV><BR />
Now we can test, using <A href="https://curl.haxx.se/" target="_blank" rel="nofollow noopener noreferrer">curl</A>:<BR />
<PRE class="shell"><CODE>=&gt; curl -d @book.json -H "Content-Type: application/json" <A href="http://localhost:4004/catalog/Books" target="test_blank" rel="nofollow noopener noreferrer">http://localhost:4004/catalog/Books</A></CODE></PRE><BR />
And as expected (or at least hoped for), we get a proper and appropriate HTTP response code - 405 Method Not Allowed!<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=E-0BR62oX-Q&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h40m25s" target="_blank" rel="nofollow noopener noreferrer">00:40:25</A>:</STRONG> We check in the service's metadata document to have a quick look at the UI focused annotations that are related (and are generated from the same <CODE>@readonly</CODE> annotation in the service definition.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=E-0BR62oX-Q&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h42m00s" target="_blank" rel="nofollow noopener noreferrer">00:42:00</A>:</STRONG> We now try an OData delete operation on one of the entities, and receive the same response:<BR />
<PRE class="shell"><CODE>=&gt; curl -X DELETE 'http://localhost:4004/catalog/Books(1)'<BR />
{"error":{"code":"405","message":"Method Not Allowed"}}</CODE></PRE><BR />
Great!<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=E-0BR62oX-Q&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h43m15s" target="_blank" rel="nofollow noopener noreferrer">00:43:15</A>:</STRONG> Having a brief look at another small modification of the service definition, this time using the <CODE>excluding</CODE> keyword, to move from a simple pass-through of an entity definition in the data model, to a custom, tuned version thereof. Going back to the main Northbreeze project, we add the following service to the <CODE>service.cds</CODE> file:<BR />
<PRE class="cds"><CODE>service Restricted {<BR />
  entity Orders as projection on northbreeze.Orders;<BR />
}</CODE></PRE><BR />
This is for a new entity we also define, in <CODE>model.cds</CODE>, using the <CODE>managed</CODE> aspect from <CODE><a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a>/cds/common</CODE>:<BR />
<PRE class="cds"><CODE>entity Orders : managed {<BR />
  key ID   : UUID;<BR />
  quantity : Integer;<BR />
}</CODE></PRE><BR />
Looking at the output of <CODE>cds compile</CODE> for this, we see the following SQL:<BR />
<DIV><BR />
<PRE class="sourceCode sql"><CODE class="sourceCode sql"><SPAN class="kw">CREATE</SPAN> <SPAN class="kw">TABLE</SPAN> northbreeze_Orders (<BR />
  modifiedAt SECONDDATE,<BR />
  createdAt SECONDDATE,<BR />
  createdBy <SPAN class="dt">NVARCHAR</SPAN>(<SPAN class="dv">255</SPAN>),<BR />
  modifiedBy <SPAN class="dt">NVARCHAR</SPAN>(<SPAN class="dv">255</SPAN>),<BR />
  <SPAN class="kw">ID</SPAN> <SPAN class="dt">NVARCHAR</SPAN>(<SPAN class="dv">36</SPAN>),<BR />
  quantity <SPAN class="dt">INTEGER</SPAN>,<BR />
  <SPAN class="kw">PRIMARY</SPAN> <SPAN class="kw">KEY</SPAN>(<SPAN class="kw">ID</SPAN>)<BR />
);</CODE></PRE><BR />
</DIV><BR />
This shows us that the use of the <CODE>managed</CODE> aspect brings in the modified and created fields here, which are reflected in the metadata document.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=E-0BR62oX-Q&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h50m00s" target="_blank" rel="nofollow noopener noreferrer">00:50:00</A>:</STRONG> So for the sake of demonstration, we now <EM>exclude</EM> the <CODE>createdAt</CODE> and <CODE>createdBy</CODE> properties:<BR />
<PRE class="cds"><CODE>service Restricted {<BR />
  entity Orders as projection on northbreeze.Orders<BR />
  excluding { createdAt, createdBy };<BR />
}</CODE></PRE><BR />
and, as expected, the metadata document describes the <CODE>Orders</CODE> entity <EM>without</EM> the created properties. <A href="https://en.wikipedia.org/wiki/John_%22Hannibal%22_Smith" target="_blank" rel="nofollow noopener noreferrer">I love it when a plan comes together.</A>.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=E-0BR62oX-Q&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h52m45s" target="_blank" rel="nofollow noopener noreferrer">00:52:45</A>:</STRONG> Preparing for the final test, we replace the explicit UUID based key property <CODE>ID</CODE> by something that's the same but implicit, brought about by the use of the <CODE>cuid</CODE> aspect:<BR />
<PRE class="cds"><CODE>entity Orders : managed, cuid {<BR />
  quantity : Integer;<BR />
}</CODE></PRE><BR />
And now we try creating a new order, thus:<BR />
<PRE class="shell"><CODE>=&gt; curl -d '{"quantity":42}' -v -H "Content-Type: application/json" <A href="http://localhost:4004/restricted/Orders" target="test_blank" rel="nofollow noopener noreferrer">http://localhost:4004/restricted/Orders</A></CODE></PRE><BR />
And as a happy end to this episode, we indeed get back the HTTP response we were expecting, i.e. an HTTP 201 CREATED with the data in the response payload. Note in passing the <CODE>Location</CODE> header in the response (which goes hand-in-hand with a 201 response code), showing the (relative) address of the entity that was just created:<BR />
<PRE><CODE>Location: Orders(a374413d-612f-4a8f-b3b3-1a9812311e53d)</CODE></PRE><BR />
<STRONG><A href="https://www.youtube.com/watch?v=E-0BR62oX-Q&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h58m50s" target="_blank" rel="nofollow noopener noreferrer">00:58:50</A>:</STRONG> Checking in the persistence layer with <CODE>sqlite3</CODE>, we see the data!<BR />
<PRE><CODE>sqlite&gt; select * from northbreeze_Orders;<BR />
|2019-03-22T08:58:16Z|anonymous||a374413d-612f-4a8f-b3b3-1a9812311e53d|42</CODE></PRE>
---
Annotated links: Episode 13 of Hands-on SAP dev with qmacro
technology-blog-sap
2019-04-11
https://community.sap.com/t5/technology-blogs-by-sap/annotated-links-episode-13-of-hands-on-sap-dev-with-qmacro/ba-p/13411936
2019-04-11-annotated-links-episode-13-of-hands-on-sap-dev-with-qmacro
<EM>This is a searchable description of the content of a live stream recording, specifically <STRONG>"Episode 13 - Stdio-ifying the CSV filter mechanism"</STRONG> in the "<A href="https://bit.ly/handsonsapdev" target="_blank" rel="nofollow noopener noreferrer">Hands-on SAP dev with qmacro</A>" series. There are links directly to specific highlights in the video recording. For links to annotations of other episodes, please see the "<A href="https://bit.ly/handsonsapdev#replays" target="_blank" rel="nofollow noopener noreferrer">Catch the replays</A>" section of the series blog post.</EM><BR />
<BR />
This episode, titled "<A href="https://bit.ly/handsonsapdev#ep13" target="_blank" rel="nofollow noopener noreferrer">Stdio-ifying the CSV filter mechanism</A>", was streamed live on Wed 20 Mar 2019 and is approximately one hour in length. The stream recording is <A href="https://www.youtube.com/watch?v=vwPE7IaEfbc&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0" target="_blank" rel="nofollow noopener noreferrer">available on YouTube</A>.<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2019/04/Screen-Shot-2019-04-11-at-16.42.15.png" /><BR />
<BR />
Below is a brief synopsis, and links to specific highlights - use these links to jump directly to particular places of interest in the recording, based on 'hh:mm:ss' style timestamps.<BR />
<H2 id="brief-synopsis" id="toc-hId-929701130">Brief synopsis</H2><BR />
In the previous episode (Ep.12) we looked at a simple CSV filter utility. In this episode we improve it by giving it the ability to read from STDIN and write to STDOUT so it plays nicely in pipeline contexts. Then weâll be ready to use it to finalise our data for our CAP based âNorthbreezeâ service.<BR />
<H2 id="links-to-specific-highlights" id="toc-hId-733187625">Links to specific highlights</H2><BR />
<STRONG><A href="https://www.youtube.com/watch?v=vwPE7IaEfbc&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h03m45s" target="_blank" rel="nofollow noopener noreferrer">00:03:45</A>:</STRONG> A brief glimpse behind the scenes, as it were, where I produce the annotation blog posts for the video recordings that get uploaded to the <A href="https://www.youtube.com/playlist?list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0" target="_blank" rel="nofollow noopener noreferrer">SAP Developers YouTube playlist</A>. I write in <A href="https://en.wikipedia.org/wiki/Markdown" target="_blank" rel="nofollow noopener noreferrer">Markdown</A> in Vim, which is a pretty nice combination of reliable and comfortable tech.<BR />
<BR />
I use a Vim macro while writing the content, which we have a look at, starting from a simple template, and converting the HH:MM:SS timestamps to a Markdown-annotated link. I don't have this macro in my standard <CODE>.vimrc</CODE>, as it's only really relevant for this particular task, so I have it in a "project-local" <CODE>.vimrc</CODE> which is possible via this configuration:<BR />
<PRE><CODE>set exrc</CODE></PRE><BR />
(see my <A href="https://github.com/qmacro/dotvim" target="_blank" rel="nofollow noopener noreferrer">dotvim</A> repo for more details).<BR />
<BR />
This is what the macro looks like:<BR />
<PRE><CODE>let @t = '0Ypihttps://www.youtube.com/watch?v=VIDEOID&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=wwrhwrmAs0ys$)A:k0ys$]Jx0ys$*.'</CODE></PRE><BR />
(note the escape characters just after the <CODE>t=</CODE>, <CODE>As</CODE> and <CODE>A:</CODE> bits).<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=vwPE7IaEfbc&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h10m30s" target="_blank" rel="nofollow noopener noreferrer">00:10:30</A>:</STRONG> Based on <SPAN class="mention-scrubbed">speri</SPAN>'s question, we have a quick go at creating a simple macro in Vim.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=vwPE7IaEfbc&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h14m30s" target="_blank" rel="nofollow noopener noreferrer">00:14:30</A>:</STRONG> A recap of the Unix STDIO philosophy, thinking about the three streams STDIN, STDOUT and STDERR, and the power that brings. There's a parallel between that and the dotchains that we're writing in JS with the Axios library.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=vwPE7IaEfbc&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h15m55s" target="_blank" rel="nofollow noopener noreferrer">00:15:55</A>:</STRONG> Talking about Node.js debugging, based on a comment from <SPAN class="mention-scrubbed">nabheet.madan3</SPAN>.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=vwPE7IaEfbc&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h17m04s" target="_blank" rel="nofollow noopener noreferrer">00:17:04</A>:</STRONG> Reminding ourselves of what we have in the project directory <CODE>csvf</CODE>, including taking a quick look inside the project's <CODE>package.json</CODE>. This shows us that we have two dependencies, one on <CODE><a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a>/cds</CODE> and the other on the <CODE>command-line-args</CODE> package.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=vwPE7IaEfbc&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h17m40s" target="_blank" rel="nofollow noopener noreferrer">00:17:40</A>:</STRONG> A feature in the terminal file manager <A href="https://github.com/ranger/ranger" target="_blank" rel="nofollow noopener noreferrer">Ranger</A> that I discovered accidentally is the "zoom" feature with <CODE>i</CODE>, which I show here.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=vwPE7IaEfbc&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h20m18s" target="_blank" rel="nofollow noopener noreferrer">00:20:18</A>:</STRONG> Setting out our new intentions by modifying the option definitions in the constant <CODE>optionDefinitions</CODE>. Remembering how it works right now with a simple example:<BR />
<PRE class="shell"><CODE>=&gt; ./cli.js -v -i tmp/Suppliers.csv --fields supplierID city<BR />
&gt;&gt; Processing tmp/Suppliers.csv<BR />
&gt;&gt; Filtering to supplierID,city<BR />
&gt;&gt; Written to _out.csv</CODE></PRE><BR />
What we actually want to be able to do now is something more like this:<BR />
<PRE class="shell"><CODE>=&gt; cat tmp/Suppliers.csv | ./cli.js --fields supplierID city &gt; file.csv 2&gt; error.log</CODE></PRE><BR />
using the pipe operator (<CODE>|</CODE>), the redirect operator (<CODE>&gt;</CODE>) and the redirect-to-stderr operator (<CODE>2&gt;</CODE>).<BR />
<BR />
Anyway, we end up with options that look like this (from the help text):<BR />
<PRE><CODE>Options:<BR />
    -i, --input    Input CSV file (reads from STDIN if not specified)<BR />
    -o, --output   Output CSV file (defaults to STDOUT)<BR />
    -f, --fields   List of fields to output (space separated)<BR />
<BR />
    -h, --help     Shows this help<BR />
    -v, --verbose  Talkative mode<BR />
<BR />
Examples:<BR />
    csvf -i data.csv -f supplierID companyName city -o smaller.csv<BR />
    csvf --fields supplierID city &lt; input.csv &gt; output.csv<BR />
    cat input.csv | csvf -f supplierID city | less</CODE></PRE><BR />
<STRONG><A href="https://www.youtube.com/watch?v=vwPE7IaEfbc&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h28m45s" target="_blank" rel="nofollow noopener noreferrer">00:28:45</A>:</STRONG> I fix the call to <CODE>process.exit()</CODE> by changing the value passed from a 1 to a 0, denoting success rather than failure (!).<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=vwPE7IaEfbc&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h29m10s" target="_blank" rel="nofollow noopener noreferrer">00:29:10</A>:</STRONG> Looking at the NPM module <A href="https://www.npmjs.com/package/get-stdin" target="_blank" rel="nofollow noopener noreferrer">get-stdin</A> which allows us to read from STDIN, which we will use. And it's promised-based, too!<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=vwPE7IaEfbc&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h29m50s" target="_blank" rel="nofollow noopener noreferrer">00:29:50</A>:</STRONG> We install <CODE>get-stdin</CODE> with:<BR />
<PRE class="shell"><CODE>=&gt; npm install --save get-stdin</CODE></PRE><BR />
... write a simple test script to try it out:<BR />
<DIV><BR />
<PRE class="sourceCode javascript"><CODE class="sourceCode javascript"><SPAN class="kw">const</SPAN> getStdin <SPAN class="op">=</SPAN> <SPAN class="at">require</SPAN>(<SPAN class="st">'get-stdin'</SPAN>)<BR />
<SPAN class="at">getStdin</SPAN>()<BR />
  .<SPAN class="at">then</SPAN>(xs <SPAN class="op">=&gt;</SPAN> <SPAN class="va">console</SPAN>.<SPAN class="at">log</SPAN>(<SPAN class="st">"GOT:"</SPAN><SPAN class="op">,</SPAN> xs))</CODE></PRE><BR />
</DIV><BR />
... and try it out:<BR />
<PRE class="shell"><CODE>=&gt; echo "hello" | node stdin.js<BR />
GOT: hello</CODE></PRE><BR />
and also:<BR />
<PRE class="shell"><CODE>=&gt; node stdin.js &lt; /etc/hosts<BR />
GOT: ...</CODE></PRE><BR />
<STRONG><A href="https://www.youtube.com/watch?v=vwPE7IaEfbc&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h32m00s" target="_blank" rel="nofollow noopener noreferrer">00:32:00</A>:</STRONG> Someprogrammingdude points out that a future version of JS will indeed get a pipeline operator - this is great. See <A class="uri" href="https://github.com/tc39/proposal-pipeline-operator" target="_blank" rel="nofollow noopener noreferrer">https://github.com/tc39/proposal-pipeline-operator</A> for more details. This information causes me to think of a talk on the F# language that I saw at <A href="http://lambdalounge.org.uk" target="_blank" rel="nofollow noopener noreferrer">Manchester Lambda Lounge</A> which in turn reminded me of the Elm language.<BR />
<BR />
At this point I dug out the content from a talk I gave at Lambda Lounge a couple of years ago: <A href="https://docs.google.com/presentation/d/1zpN8150gIiYEC-o_Nc35T3xshXJIorEBEcjaarSw9z8/edit#slide=id.p" target="_blank" rel="nofollow noopener noreferrer">Discovering the beauty of pattern matching and recursion</A> where I look at these two language features in different languages, including Elm, Elixir, Haskell, JavaScript and Clojure. This talk was slide based but the slides are mostly full of code, so that's OK, right? <span class="lia-unicode-emoji" title=":slightly_smiling_face:">ð</span><BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=vwPE7IaEfbc&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h35m08s" target="_blank" rel="nofollow noopener noreferrer">00:35:08</A>:</STRONG> Starting to refactor the code a little bit, turning the main part of the script into a new function <CODE>process</CODE> - this lays the ground for a really odd error which we'll come across a bit further on!<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=vwPE7IaEfbc&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h37m20s" target="_blank" rel="nofollow noopener noreferrer">00:37:20</A>:</STRONG> Now we can refactor the final part which looks at the value of <CODE>options.input</CODE> and we use <CODE>util.promisify</CODE> to make things a little nicer - see the post <A href="http://2ality.com/2017/05/util-promisify.html" target="_blank" rel="nofollow noopener noreferrer">Node.js: util.promisify()</A> for more detail.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=vwPE7IaEfbc&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h47m58s" target="_blank" rel="nofollow noopener noreferrer">00:47:58</A>:</STRONG> So we end up with this:<BR />
<DIV><BR />
<PRE class="sourceCode javascript"><CODE class="sourceCode javascript"><SPAN class="cf">if</SPAN> (<SPAN class="va">options</SPAN>.<SPAN class="at">input</SPAN>) <SPAN class="op">{</SPAN><BR />
  <SPAN class="at">readFileAsync</SPAN>(<SPAN class="va">options</SPAN>.<SPAN class="at">input</SPAN><SPAN class="op">,</SPAN> <SPAN class="op">{</SPAN> <SPAN class="dt">encoding</SPAN><SPAN class="op">:</SPAN> <SPAN class="st">'utf8'</SPAN> <SPAN class="op">}</SPAN>)<BR />
    .<SPAN class="at">then</SPAN>(process)<BR />
    .<SPAN class="at">then</SPAN>(<SPAN class="va">console</SPAN>.<SPAN class="at">log</SPAN>)</CODE></PRE><BR />
</DIV><BR />
Notice how this is so clean and solid state, there's nothing really "moving" in here, not even any explicit arguments passed to the functions in the <CODE>then()</CODE> calls, nothing that can go awry.<BR />
<BR />
Notice also, however, a glaring oversight that we'll discover shortly!<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=vwPE7IaEfbc&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h49m40s" target="_blank" rel="nofollow noopener noreferrer">00:49:40</A>:</STRONG> We note that right now, while we can write to STDOUT already (with <CODE>console.log</CODE>), both our verbose output (prefixed with "&gt;&gt;") and also the real data output goes to the same place, which we see in a test run. We fix this in the <CODE>log</CODE> function by changing the <CODE>console.log</CODE> call to <CODE>process.stderr.write</CODE>.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=vwPE7IaEfbc&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h51m10s" target="_blank" rel="nofollow noopener noreferrer">00:51:10</A>:</STRONG> Bang! When we try the new script out, we get a nice error: "Cannot read property 'write' of undefined". What the heck? Anyway, after a few brief moments of head scratching, we realise that this is because I inadvertently <STRONG>redefined</STRONG> a major feature of the Node.js runtime in that we created our own function called <CODE>process</CODE>, clobbering the standard <CODE>process</CODE> object which has, amongst other things, the <CODE>stderr</CODE> property (to which we're referring with <CODE>process.stderr.write</CODE>).<BR />
<BR />
What a fool!<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=vwPE7IaEfbc&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h57m30s" target="_blank" rel="nofollow noopener noreferrer">00:57:30</A>:</STRONG> Renaming our function from <CODE>process</CODE> to something else (<CODE>filtercsv</CODE>) fixes the problem <span class="lia-unicode-emoji" title=":slightly_smiling_face:">ð</span><BR />
<BR />
We can now finish the refactoring of the script, which we do, including writing an <CODE>output</CODE> function in a way that we can partially apply it, too.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=vwPE7IaEfbc&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=01h01m50s" target="_blank" rel="nofollow noopener noreferrer">01:01:50</A>:</STRONG> Trying the refactored script out, with STDIN and appending to the STDERR output using the append (<CODE>&gt;&gt;</CODE>) operator (as opposed to the (over)write operator (<CODE>&gt;</CODE>)), and trying the write-to-file option too. All seems to work as intended. Great!<BR />
<BR />
Phew!
---
Annotated links: Episode 12 of Hands-on SAP dev with qmacro
technology-blog-sap
2019-04-04
https://community.sap.com/t5/technology-blogs-by-sap/annotated-links-episode-12-of-hands-on-sap-dev-with-qmacro/ba-p/13405044
2019-04-04-annotated-links-episode-12-of-hands-on-sap-dev-with-qmacro
<EM>This is a searchable description of the content of a live stream recording, specifically <STRONG>"Episode 12 - Exploring and understanding parts of <SPAN class="citation"><a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a>/cds</SPAN> JS - code &amp; style"</STRONG> in the "<A href="https://bit.ly/handsonsapdev" target="_blank" rel="nofollow noopener noreferrer">Hands-on SAP dev with qmacro</A>" series. There are links directly to specific highlights in the video recording. For links to annotations of other episodes, please see the "<A href="https://bit.ly/handsonsapdev#replays" target="_blank" rel="nofollow noopener noreferrer">Catch the replays</A>" section of the series blog post.</EM><BR />
<BR />
This episode, titled "<A href="https://bit.ly/handsonsapdev#ep12" target="_blank" rel="nofollow noopener noreferrer"><SPAN class="citation">Exploring and understanding parts of @sap/cds JS - code &amp; style</SPAN></A>", was streamed live on Fri 15 Mar 2019 and is approximately one hour in length. The stream recording is <A href="https://www.youtube.com/watch?v=c93FYLw8DfI&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0" target="_blank" rel="nofollow noopener noreferrer">available on YouTube</A>.<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2019/04/Screen-Shot-2019-04-04-at-14.57.12.jpg" /><BR />
<BR />
Below is a brief synopsis, and links to specific highlights - use these links to jump directly to particular places of interest in the recording, based on 'hh:mm:ss' style timestamps.<BR />
<H2 id="brief-synopsis" id="toc-hId-928888153">Brief synopsis</H2><BR />
I had an itch to scratch, in that I wanted to be able to filter out columns in CSV files. In this episode we take a look at some of the JavaScript within the <SPAN class="citation"><a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a>/cds</SPAN> module â what it offers and how itâs written. We then see how some of that was useful in building a simple CSV filter mechanism.<BR />
<BR />
This episode was live streamed from the SAP offices in Maidenhead, just before the start of <A href="https://wiki.scn.sap.com/wiki/display/events/SAP+Inside+Track+Maidenhead,+Friday+March+15th+2019,+%23sitMAI" target="_blank" rel="noopener noreferrer">SAP Inside Track Maidenhead</A> which was taking place that day.<BR />
<H2 id="links-to-specific-highlights" id="toc-hId-732374648">Links to specific highlights</H2><BR />
<STRONG><A href="https://www.youtube.com/watch?v=c93FYLw8DfI&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h03m30s" target="_blank" rel="nofollow noopener noreferrer">00:03:30</A>:</STRONG> A quick update, showing the new <A href="https://www.youtube.com/playlist?list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0" target="_blank" rel="nofollow noopener noreferrer">playlist of live stream recordings on YouTube</A> in the <A href="https://www.youtube.com/channel/UCNfmelKDrvRmjYwSi9yvrMg" target="_blank" rel="nofollow noopener noreferrer">SAP Developers</A> channel (if you're not suscribed already to the channel, please consider doing so!).<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=c93FYLw8DfI&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h05m00s" target="_blank" rel="nofollow noopener noreferrer">00:05:00</A>:</STRONG> A look at the annotations of the live stream recordings - check out the links in <A href="https://bit.ly/handsonsapdev#replays" target="_blank" rel="nofollow noopener noreferrer">the main Hands-on SAP dev blog post</A>.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=c93FYLw8DfI&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h07m48s" target="_blank" rel="nofollow noopener noreferrer">00:07:48</A>:</STRONG> Looking at the brand new updated UI5 course on openSAP: <A href="https://open.sap.com/courses/ui52" target="_blank" rel="noopener noreferrer">Evolved Web Apps with SAPUI5</A> - don't forget to enrol!<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=c93FYLw8DfI&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h08m50s" target="_blank" rel="nofollow noopener noreferrer">00:08:50</A>:</STRONG> There's another new course on openSAP that we look at too, and this one, <A href="https://open.sap.com/courses/cp1-3" target="_blank" rel="noopener noreferrer">SAP Cloud Platform Essentials (Update Q2/2019)</A>, which covers the SAP Cloud Application Programming Model, hurray!<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=c93FYLw8DfI&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h11m10s" target="_blank" rel="nofollow noopener noreferrer">00:11:10</A>:</STRONG> Starting to take a look at what we're going to do in this episode, talking about the source code of the <CODE><a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a>/cds</CODE> module family, which is a rich source of learning for us in our journey towards ES6 mastery.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=c93FYLw8DfI&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h12m35s" target="_blank" rel="nofollow noopener noreferrer">00:12:35</A>:</STRONG> Looking at the <CODE>grab.js</CODE> script that we've been building, which allows us to retrieve data from the <A href="http://services.odata.org/V3/Northwind/Northwind.svc" target="_blank" rel="nofollow noopener noreferrer">Northwind service</A>, paging through it where skip tokens are used.<BR />
<BR />
In grabbing this data we naturally get all of the fields, i.e. values for all of the properties in the entities that we're retrieving (Products, Suppliers and Categories). If we want fewer fields, it is quite cumbersome to manually remove from from the CSV files that are produced. This gave me the idea to write something that would do it for me, taking some ideas and code from the <CODE><a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a>/cds</CODE> module family.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=c93FYLw8DfI&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h15m52s" target="_blank" rel="nofollow noopener noreferrer">00:15:52</A>:</STRONG> Hacking my sitting position by finding a couple of stackable chairs and sitting on them both instead for a better posture. Stacked chairs ftw!<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=c93FYLw8DfI&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h16m32s" target="_blank" rel="nofollow noopener noreferrer">00:16:32</A>:</STRONG> The "initializing from csv files at ./db/csv..." message that we see when invoking <CODE>cds deploy</CODE> gave me a clue that parts of <CODE><a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a>/cds</CODE> were indeed (of course) handling CSV data, and I was curious to take a look:<BR />
<DIV><BR />
<PRE class="sourceCode bash"><CODE class="sourceCode bash"><SPAN class="fu">grep</SPAN> -R <SPAN class="st">'initializing from csv'</SPAN> *</CODE></PRE><BR />
</DIV><BR />
This pointed me to the <CODE>node_modules/@sap/cds/bin/etc/init-from-csv.js</CODE> file.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=c93FYLw8DfI&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h18m00s" target="_blank" rel="nofollow noopener noreferrer">00:18:00</A>:</STRONG> Reminding ourselves of the different options available to us with the <CODE>cds</CODE> command line tool, and taking a brief look at how the other <CODE><a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a>/cds</CODE> modules are related via the "dependencies" information shown in the output of:<BR />
<DIV><BR />
<PRE class="sourceCode bash"><CODE class="sourceCode bash"><SPAN class="ex">npm</SPAN> info @sap/cds</CODE></PRE><BR />
</DIV><BR />
<STRONG><A href="https://www.youtube.com/watch?v=c93FYLw8DfI&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h19m00s" target="_blank" rel="nofollow noopener noreferrer">00:19:00</A>:</STRONG> Digging further into the <CODE><a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a>/cds/</CODE> directory in the <CODE>node_modules/</CODE> directory in the project, we see the <CODE>common.cds</CODE> file that we've looked at before, and also <CODE>lib/</CODE> and <CODE>bin/</CODE> directories.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=c93FYLw8DfI&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h19m34s" target="_blank" rel="nofollow noopener noreferrer">00:19:34</A>:</STRONG> It does occur to me that the name "bin" (short for "binary") is a little anachronistic, or at least not particularly appropriate, given that the contents are not binary files as they're not compiled - they're JavaScript, after all. Perhaps a better term is "executable".<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=c93FYLw8DfI&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h21m45s" target="_blank" rel="nofollow noopener noreferrer">00:21:45</A>:</STRONG> In the <CODE>bin/</CODE> directory we have <CODE>cds.js</CODE> that responds when we invoke the cds command line client, and we can then also see more or less a one-to-one relationship between what you commands are available:<BR />
<DIV><BR />
<PRE class="sourceCode bash"><CODE class="sourceCode bash">=<SPAN class="op">&gt;</SPAN> <SPAN class="ex">cds</SPAN><BR />
<BR />
<SPAN class="ex">USAGE</SPAN><BR />
<BR />
    <SPAN class="ex">cds</SPAN> <SPAN class="op">&lt;</SPAN>command<SPAN class="op">&gt;</SPAN> [<SPAN class="op">&lt;</SPAN>args<SPAN class="op">&gt;</SPAN>]<BR />
<BR />
<SPAN class="ex">COMMANDS</SPAN><BR />
<BR />
  <SPAN class="ex">c</SPAN> <SPAN class="kw">|</SPAN> <SPAN class="ex">compile</SPAN>    ...individual models (= the default)<BR />
  <SPAN class="ex">d</SPAN> <SPAN class="kw">|</SPAN> <SPAN class="ex">deploy</SPAN>     ...data models to a database<BR />
  <SPAN class="ex">s</SPAN> <SPAN class="kw">|</SPAN> <SPAN class="ex">serve</SPAN>      ...service models to REST clients<BR />
  <SPAN class="ex">b</SPAN> <SPAN class="kw">|</SPAN> <SPAN class="ex">build</SPAN>      ...whole modules or projects<BR />
  <SPAN class="ex">i</SPAN> <SPAN class="kw">|</SPAN> <SPAN class="ex">init</SPAN>       ...jump-starts a new project<BR />
  <SPAN class="ex">e</SPAN> <SPAN class="kw">|</SPAN> <SPAN class="fu">env</SPAN>        get/set current cds configuration<BR />
  <SPAN class="ex">r</SPAN> <SPAN class="kw">|</SPAN> <SPAN class="ex">repl</SPAN>       cds<SPAN class="st">'s read-eval-event-loop</SPAN><BR />
<SPAN class="st">  h | help       shows usage for cds and individual commands</SPAN><BR />
<SPAN class="st">  v | version    prints detailed version information</SPAN><BR />
<BR />
<SPAN class="st">[...]</SPAN></CODE></PRE><BR />
</DIV><BR />
... and the JavaScript files in that <CODE>bin/</CODE> directory:<BR />
<DIV><BR />
<PRE class="sourceCode bash"><CODE class="sourceCode bash">=<SPAN class="op">&gt;</SPAN> <SPAN class="fu">ls</SPAN> -1 node_modules/@sap/cds/bin <SPAN class="kw">|</SPAN> <SPAN class="fu">grep</SPAN> .js<BR />
<SPAN class="ex">cds.js*</SPAN><BR />
<SPAN class="ex">compile.js</SPAN><BR />
<SPAN class="ex">deploy.js</SPAN><BR />
<SPAN class="ex">dev.js</SPAN><BR />
<SPAN class="ex">env.js</SPAN><BR />
<SPAN class="ex">eval.js</SPAN><BR />
<SPAN class="ex">help.js</SPAN><BR />
<SPAN class="ex">init.js</SPAN><BR />
<SPAN class="ex">repl.js</SPAN><BR />
<SPAN class="ex">run.js</SPAN><BR />
<SPAN class="ex">serve.js</SPAN><BR />
<SPAN class="ex">version.js</SPAN></CODE></PRE><BR />
</DIV><BR />
<STRONG><A href="https://www.youtube.com/watch?v=c93FYLw8DfI&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h22m28s" target="_blank" rel="nofollow noopener noreferrer">00:22:28</A>:</STRONG> We take a look at one of these scripts - <CODE>deploy.js</CODE> - where we see a promise chain that makes use of the <CODE>init-from-csv</CODE> module! Inside this module we place a breakpoint to see what happens when we invoke the <CODE>cds deploy</CODE> command.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=c93FYLw8DfI&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h24m00s" target="_blank" rel="nofollow noopener noreferrer">00:24:00</A>:</STRONG> Running <CODE>cds d</CODE> within the integrated terminal in VS Code - but of course we don't hit the breakpoint like this as we're not in debug mode.<BR />
<BR />
So we start debug mode with F5, but that also is not quite what we want - what is executed is <CODE>cds run</CODE> not <CODE>cds deploy</CODE> here.<BR />
<BR />
This is because of the default <A href="https://code.visualstudio.com/docs/editor/debugging#_launch-configurations" target="_blank" rel="nofollow noopener noreferrer">launch configuration</A> in VS Code that comes with a new CAP initialised project, in <CODE>.vscode/launch.json</CODE>:<BR />
<DIV><BR />
<PRE class="sourceCode json"><CODE class="sourceCode json"><SPAN class="fu">{</SPAN><BR />
    <SPAN class="dt">"version"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="st">"0.2.0"</SPAN><SPAN class="fu">,</SPAN><BR />
    <SPAN class="dt">"configurations"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="ot">[</SPAN><BR />
        <SPAN class="fu">{</SPAN><BR />
            <SPAN class="dt">"name"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="st">"cds run"</SPAN><SPAN class="fu">,</SPAN><BR />
            <SPAN class="dt">"type"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="st">"node"</SPAN><SPAN class="fu">,</SPAN><BR />
            <SPAN class="dt">"request"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="st">"launch"</SPAN><SPAN class="fu">,</SPAN><BR />
            <SPAN class="dt">"program"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="st">"${workspaceFolder}/.vscode/cds"</SPAN><SPAN class="fu">,</SPAN> <SPAN class="dt">"args"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="ot">[</SPAN> <SPAN class="st">"run"</SPAN> <SPAN class="ot">]</SPAN><SPAN class="fu">,</SPAN><BR />
            <SPAN class="dt">"skipFiles"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="ot">[</SPAN><BR />
                <SPAN class="st">"&lt;node_internals&gt;/**/*.js"</SPAN><SPAN class="ot">,</SPAN><BR />
                <SPAN class="st">"**/cds-reflect/lib/index.js"</SPAN><SPAN class="ot">,</SPAN><BR />
                <SPAN class="st">"**/cds/lib/index.js"</SPAN><SPAN class="ot">,</SPAN><BR />
                <SPAN class="st">"**/.vscode/cds.js"</SPAN><SPAN class="ot">,</SPAN><BR />
            <SPAN class="ot">]</SPAN><SPAN class="fu">,</SPAN><BR />
            <SPAN class="dt">"autoAttachChildProcesses"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="kw">true</SPAN><SPAN class="fu">,</SPAN><BR />
            <SPAN class="dt">"console"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="st">"integratedTerminal"</SPAN><BR />
        <SPAN class="fu">}</SPAN><BR />
    <SPAN class="ot">]</SPAN><BR />
<SPAN class="fu">}</SPAN></CODE></PRE><BR />
</DIV><BR />
We can see here that the argument to <CODE>cds</CODE> here is "run".<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=c93FYLw8DfI&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h25m30s" target="_blank" rel="nofollow noopener noreferrer">00:25:30</A>:</STRONG> So what we do is duplicate the launch configuration stanza, creating a new one for <CODE>cds deploy</CODE>. Then we can re-start debugging mode, choose the specific "cds deploy" launch configuration, and we end up at the breakpoint we set. Lovely!<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=c93FYLw8DfI&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h27m11s" target="_blank" rel="nofollow noopener noreferrer">00:27:11</A>:</STRONG> In the debug console we look at the data available to us at the breakpoint, specifically <CODE>model</CODE>, which is an Array with two values, "db" and "srv". Now we know that, reading the code in <CODE>init-from-csv</CODE> becomes easier - it looks for CSV files and loads the contents into the persistence layer via the CDS API.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=c93FYLw8DfI&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h28m45s" target="_blank" rel="nofollow noopener noreferrer">00:28:45</A>:</STRONG> A look at how the module uses destructuring, a feature available in ES6, to pull specific functions from <CODE>lib/utils/fs.js</CODE>, and in turn, how this custom <CODE>fs</CODE> module bases itself on the builtin <CODE>fs</CODE> module, via the <CODE>__proto__</CODE> feature.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=c93FYLw8DfI&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h30m55s" target="_blank" rel="nofollow noopener noreferrer">00:30:55</A>:</STRONG> The <CODE>_init</CODE> function in the <CODE>init-from-csv</CODE> module parses the CSV data and then inserts into the tables. We take a quick look at what exactly the expression <CODE>.slice(0,-4)</CODE> is doing here, which looks initially a bit odd, until we realise that slice works on strings on a character-by-character basis: <CODE>'filename.ext'.slice(0,-4)</CODE> produces "filename".<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=c93FYLw8DfI&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h34m35s" target="_blank" rel="nofollow noopener noreferrer">00:34:35</A>:</STRONG> Looking into where <CODE>csv.parse</CODE> comes from, which is another module in the <CODE><a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a>/cds</CODE> bundle - in <CODE>lib/utils/csv.js</CODE>. There is a parsing function and a serialising function in this module - I can definitely make use of the former!<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=c93FYLw8DfI&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h36m10s" target="_blank" rel="nofollow noopener noreferrer">00:36:10</A>:</STRONG> Someone (an SAP Inside Track Maidenhead attendee) looking at me through the internal office window, wondering, perhaps, what the heck I'm doing.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=c93FYLw8DfI&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h36m40s" target="_blank" rel="nofollow noopener noreferrer">00:36:40</A>:</STRONG> Switching over to the CSV filter project <CODE>csvf</CODE>, and having a look what it does:<BR />
<DIV><BR />
<PRE class="sourceCode bash"><CODE class="sourceCode bash">=<SPAN class="op">&gt;</SPAN> <SPAN class="ex">node</SPAN> ./cli.js<BR />
<SPAN class="ex">Usage</SPAN>: csvf [options]<BR />
<SPAN class="ex">Options</SPAN>:<BR />
        <SPAN class="ex">-i</SPAN>, --input    Input CSV file (mandatory)<BR />
        <SPAN class="ex">-o</SPAN>, --output   Output CSV file (defaults to _out.csv)<BR />
        <SPAN class="ex">-f</SPAN>, --fields   List of fields to output (space separated)<BR />
<BR />
        <SPAN class="ex">-h</SPAN>, --help     Shows this help<BR />
        <SPAN class="ex">-v</SPAN>, --verbose  Talkative mode<BR />
<BR />
<SPAN class="ex">Example</SPAN>:<BR />
        <SPAN class="ex">csvf</SPAN> -i data.csv -f supplierID companyName city -o smaller.csv</CODE></PRE><BR />
</DIV><BR />
A sample run is successful:<BR />
<DIV><BR />
<PRE class="sourceCode bash"><CODE class="sourceCode bash">=<SPAN class="op">&gt;</SPAN> <SPAN class="ex">node</SPAN> ./cli.js -i tmp/Suppliers.csv --fields supplierID companyName -v<BR />
<SPAN class="op">&gt;&gt;</SPAN> <SPAN class="ex">Processing</SPAN> tmp/Suppliers.csv<BR />
<SPAN class="op">&gt;&gt;</SPAN> <SPAN class="ex">Filtering</SPAN> to supplierID,companyName<BR />
<SPAN class="op">&gt;&gt;</SPAN> <SPAN class="ex">Written</SPAN> to _out.csv</CODE></PRE><BR />
</DIV><BR />
and in <CODE>_out.csv</CODE> we see that we have a reduced CSV set:<BR />
<PRE class="csv"><CODE>supplierID,companyName<BR />
1,Exotic Liquids<BR />
2,New Orleans Cajun Delights<BR />
3,Grandma Kelly's Homestead</CODE></PRE><BR />
<STRONG><A href="https://www.youtube.com/watch?v=c93FYLw8DfI&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h40m20s" target="_blank" rel="nofollow noopener noreferrer">00:40:20</A>:</STRONG> Taking a look in <CODE>cli.js</CODE> to see how we can use the <CODE><a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a>/cds</CODE>'s <CODE>csv</CODE> module in our own program - by installing <CODE><a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a>/cds</CODE> in the project, I have access to all the modules in the bundle, which means I can do this:<BR />
<DIV><BR />
<PRE class="sourceCode javascript"><CODE class="sourceCode javascript"><SPAN class="kw">const</SPAN> csv <SPAN class="op">=</SPAN> <SPAN class="at">require</SPAN>(<SPAN class="st">'@sap/cds/lib/utils/csv'</SPAN>)</CODE></PRE><BR />
</DIV><BR />
I'm also using the <A href="https://www.npmjs.com/package/command-line-args" target="_blank" rel="nofollow noopener noreferrer">command-line-args</A> module which allows me to very simply build a nice command line interface with a rich set of options.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=c93FYLw8DfI&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h45m10s" target="_blank" rel="nofollow noopener noreferrer">00:45:10</A>:</STRONG> Cameo appearance in the room from <A href="https://www.linkedin.com/in/janvanansem/" target="_blank" rel="nofollow noopener noreferrer">Jan van Ansem</A>, one of the organisers of SAP Inside Track Maidenhead!<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=c93FYLw8DfI&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h45m49s" target="_blank" rel="nofollow noopener noreferrer">00:45:49</A>:</STRONG> Looking at my attempts to write functions that are pure, by looking at how I approached writing the logging function. While in the past I would have written a logging function to refer to a global value (outside of the function) that indicated whether log output was generally required, I wrote this logging function that didn't refer to any values outside of itself, by writing it so it can be partially applied, and then adopting the IIFE (immediately invoked function expression) technique, like this:<BR />
<DIV><BR />
<PRE class="sourceCode javascript"><CODE class="sourceCode javascript"><SPAN class="kw">const</SPAN> log <SPAN class="op">=</SPAN> (isVerbose <SPAN class="op">=&gt;</SPAN> x <SPAN class="op">=&gt;</SPAN> isVerbose <SPAN class="op">&amp;&amp;</SPAN> <SPAN class="va">console</SPAN>.<SPAN class="at">log</SPAN>(<SPAN class="st">"&gt;&gt;"</SPAN><SPAN class="op">,</SPAN> x))(<SPAN class="va">options</SPAN>.<SPAN class="at">verbose</SPAN>)</CODE></PRE><BR />
</DIV><BR />
Note the two <A href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions" target="_blank" rel="nofollow noopener noreferrer">fat arrows</A> in there, and the implicit use of a <A href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures" target="_blank" rel="nofollow noopener noreferrer">closure</A>.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=c93FYLw8DfI&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h50m07s" target="_blank" rel="nofollow noopener noreferrer">00:50:07</A>:</STRONG> Looking at the simple <CODE>serialise</CODE> function which also uses an ES6 feature, specifically <A href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Default_parameters" target="_blank" rel="nofollow noopener noreferrer">default function parameters</A>.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=c93FYLw8DfI&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h51m40s" target="_blank" rel="nofollow noopener noreferrer">00:51:40</A>:</STRONG> Looking how the <CODE>csv.parse</CODE> function is used in this script:<BR />
<DIV><BR />
<PRE class="sourceCode javascript"><CODE class="sourceCode javascript"><SPAN class="kw">let</SPAN> [cols<SPAN class="op">,</SPAN> ...<SPAN class="at">rows</SPAN>] <SPAN class="op">=</SPAN> <SPAN class="va">csv</SPAN>.<SPAN class="at">parse</SPAN>(src)</CODE></PRE><BR />
</DIV><BR />
<STRONG><A href="https://www.youtube.com/watch?v=c93FYLw8DfI&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h53m00s" target="_blank" rel="nofollow noopener noreferrer">00:53:00</A>:</STRONG> Looking at the <CODE>indices</CODE> function in the script, where we use the interesting function application thus:<BR />
<DIV><BR />
<PRE class="sourceCode javascript"><CODE class="sourceCode javascript"><SPAN class="kw">const</SPAN> selectedIndices <SPAN class="op">=</SPAN> <SPAN class="at">indices</SPAN>(cols)(<SPAN class="va">options</SPAN>.<SPAN class="at">fields</SPAN>)</CODE></PRE><BR />
</DIV><BR />
In other words we're calling <CODE>indices(cols)</CODE> which produces a function, which we then call, passing <CODE>options.fields</CODE>.<BR />
<BR />
When we look at the definition of the <CODE>indices</CODE> function, we can better understand how this works:<BR />
<DIV><BR />
<PRE class="sourceCode javascript"><CODE class="sourceCode javascript"><SPAN class="kw">const</SPAN> indices <SPAN class="op">=</SPAN> ref <SPAN class="op">=&gt;</SPAN> fields <SPAN class="op">=&gt;</SPAN> <SPAN class="va">fields</SPAN>.<SPAN class="at">map</SPAN>(x <SPAN class="op">=&gt;</SPAN> <SPAN class="va">ref</SPAN>.<SPAN class="at">indexOf</SPAN>(x))</CODE></PRE><BR />
</DIV><BR />
<STRONG><A href="https://www.youtube.com/watch?v=c93FYLw8DfI&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h55m10s" target="_blank" rel="nofollow noopener noreferrer">00:55:10</A>:</STRONG> Now our confidence has grown by looking at the <CODE>indices</CODE> function, we take a quick look in the last moments at the <CODE>pick</CODE> function which is possibly a little bit more exciting:<BR />
<DIV><BR />
<PRE class="sourceCode javascript"><CODE class="sourceCode javascript"><SPAN class="kw">const</SPAN> pick <SPAN class="op">=</SPAN> indices <SPAN class="op">=&gt;</SPAN> source <SPAN class="op">=&gt;</SPAN><BR />
    <SPAN class="va">indices</SPAN>.<SPAN class="at">reduce</SPAN>((a<SPAN class="op">,</SPAN> x) <SPAN class="op">=&gt;</SPAN> (_ <SPAN class="op">=&gt;</SPAN> a)(<SPAN class="va">a</SPAN>.<SPAN class="at">push</SPAN>(source[x]))<SPAN class="op">,</SPAN> [])</CODE></PRE><BR />
</DIV><BR />
One interesting thing is that I changed the original definition of this function, to switch around the order of the arguments, so it could be more easily (and usefully) partially applied. Of course, we can't continue without a quick reference to the excellent talk "<A href="http://functionaltalks.org/2013/05/27/brian-lonsdorf-hey-underscore-youre-doing-it-wrong/" target="_blank" rel="nofollow noopener noreferrer">Hey Underscore, You're Doing It Wrong!</A>" by Brian Lonsdorf. If you haven't watched this talk, go and watch it now! And if you have watched it already, go and watch it again!<BR />
<BR />
Let's finish this annotation post by looking at where that <CODE>pick</CODE> function is partially applied:<BR />
<DIV><BR />
<PRE class="sourceCode javascript"><CODE class="sourceCode javascript"><SPAN class="at">writefile</SPAN>(<BR />
    <SPAN class="va">options</SPAN>.<SPAN class="va">output</SPAN>.<BR />
    <SPAN class="at">serialise</SPAN>(outCols<SPAN class="op">,</SPAN> <SPAN class="va">rows</SPAN>.<SPAN class="at">map</SPAN>(<SPAN class="at">pick</SPAN>(selectedIndices)))<SPAN class="op">,</SPAN><BR />
    <SPAN class="st">'utf8'</SPAN><SPAN class="op">,</SPAN><BR />
    e <SPAN class="op">=&gt;</SPAN> <SPAN class="at">err</SPAN>(e) <SPAN class="op">||</SPAN> <SPAN class="at">log</SPAN>(<SPAN class="vs">`Written to </SPAN><SPAN class="sc">${</SPAN><SPAN class="va">options</SPAN>.<SPAN class="at">output</SPAN><SPAN class="sc">}</SPAN><SPAN class="vs">`</SPAN>)<BR />
)</CODE></PRE><BR />
</DIV><BR />
Take a moment to stare at that, especially the <CODE>map</CODE> call. And then go and watch that video! <span class="lia-unicode-emoji" title=":winking_face:">ð</span>
---
Annotated links: Episode 10 of Hands-on SAP dev with qmacro
technology-blog-sap
2019-03-26
https://community.sap.com/t5/technology-blogs-by-sap/annotated-links-episode-10-of-hands-on-sap-dev-with-qmacro/ba-p/13390293
2019-03-26-annotated-links-episode-10-of-hands-on-sap-dev-with-qmacro
<EM>This is a searchable description of the content of a live stream recording, specifically <STRONG>"Episode 10 - Finishing off the data retrieval mechanism in Node.js"</STRONG> in the "<A href="https://bit.ly/handsonsapdev" target="_blank" rel="nofollow noopener noreferrer">Hands-on SAP dev with qmacro</A>" series. There are links directly to specific highlights in the video recording. For links to annotations of other episodes, please see the "<A href="https://bit.ly/handsonsapdev#replays" target="_blank" rel="nofollow noopener noreferrer">Catch the replays</A>" section of the series blog post.</EM><BR />
<BR />
This episode, titled "<A href="https://bit.ly/handsonsapdev#ep10" target="_blank" rel="nofollow noopener noreferrer">Finishing off the data retrieval mechanism in Node.js</A>", was streamed live on Thu 07 Mar 2019 and is approximately one hour in length. The stream recording is <A href="https://www.youtube.com/watch?v=4uu3fCGiZ6U&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0" target="_blank" rel="nofollow noopener noreferrer">available on YouTube</A>.<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2019/03/Screen-Shot-2019-03-21-at-08.38.56.png" /><BR />
<BR />
Below is a brief synopsis, and links to specific highlights - use these links to jump directly to particular places of interest in the recording, based on 'hh:mm:ss' style timestamps.<BR />
<H2 id="brief-synopsis" id="toc-hId-908423812">Brief synopsis</H2><BR />
Following the previous episode thereâs a bit more work to do to finish off the data retrieval mechanism we have been building to extract data from the original Northwind service and turn it into CSV files that can be loaded into a persistence layer with <CODE>cds deploy</CODE>. In this episode we finish this off and load the data.<BR />
<H2 id="links-to-specific-highlights" id="toc-hId-711910307">Links to specific highlights</H2><BR />
<STRONG><A href="https://www.youtube.com/watch?v=4uu3fCGiZ6U&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h02m20s" target="_blank" rel="nofollow noopener noreferrer">00:02:20</A>:</STRONG> Remembering where we left off, which was just having loaded the Categories CSV file into Northbreeze, and we have a <CODE>northbreeze.db</CODE> command from the use of the <CODE>cds deploy</CODE> invocation. Thinking also about what we have to do from a CSV column header perspective to make the navigation property relationships work "underneath".<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=4uu3fCGiZ6U&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h04m55s" target="_blank" rel="nofollow noopener noreferrer">00:04:55</A>:</STRONG> Looking at the data definitions in the persistence layer with the <CODE>sqlite3</CODE> ".dump" command, and noticing how the entities are related via the "_ID" suffixed property names (<CODE>supplier_ID</CODE> and <CODE>category_ID</CODE>).<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=4uu3fCGiZ6U&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h07m30s" target="_blank" rel="nofollow noopener noreferrer">00:07:30</A>:</STRONG> We see that this is similar in the Northwind service, when we look at the properties available in the Products entityset.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=4uu3fCGiZ6U&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h08m08s" target="_blank" rel="nofollow noopener noreferrer">00:08:08</A>:</STRONG> Re-attaching to the tmux session we had yesterday, with <CODE>tmux a</CODE>, and behold, all our work is still there ready for us to continue. <A href="https://en.wikipedia.org/wiki/Tmux" target="_blank" rel="nofollow noopener noreferrer">Terminal multiplexers</A> ftw!<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=4uu3fCGiZ6U&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h08m30s" target="_blank" rel="nofollow noopener noreferrer">00:08:30</A>:</STRONG> Showing that you can zoom a tmux pane to expand to the entire window size with the prefix key + 'z' (for "zoom"). By default the prefix key is set to Ctrl-b, but I've set it to Ctrl-a as I find that an easier key combination to type. So "Ctrl-a z" will zoom a pane to full window size, and that same combination will toggle it (un-zoom it) back again.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=4uu3fCGiZ6U&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h10m02s" target="_blank" rel="nofollow noopener noreferrer">00:10:02</A>:</STRONG> Using the Vim plugin <A href="https://github.com/scrooloose/nerdtree" target="_blank" rel="nofollow noopener noreferrer">Nerdtree</A> to explore the directory structure and find the file I'm looking for, which is the <CODE>model.cds</CODE> file, so I can have that as reference when I'm filling out the configuration in the <CODE>entities</CODE> map in the <CODE>grab.js</CODE> script.<BR />
<BR />
I toggle Nerdtree with a key combination in Vim, specifically with this configuration:<BR />
<PRE><CODE>nnoremap &lt;leader&gt;n :NERDTreeToggle&lt;cr&gt;</CODE></PRE><BR />
See my Vim config in the <A href="https://github.com/qmacro/dotvim" target="_blank" rel="nofollow noopener noreferrer">dotvim</A> repository on GitHub for more details.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=4uu3fCGiZ6U&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h15m15s" target="_blank" rel="nofollow noopener noreferrer">00:15:15</A>:</STRONG> The default cds command is "compile", but we can also invoke it explicitly, which we do, to check what data definition language (DDL) statements will be generated for the service:<BR />
<PRE><CODE>cds compile srv --to sql</CODE></PRE><BR />
<STRONG><A href="https://www.youtube.com/watch?v=4uu3fCGiZ6U&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h17m15s" target="_blank" rel="nofollow noopener noreferrer">00:17:15</A>:</STRONG> Disabling the Ctrl key on my keyboard to try and force myself to use the CapsLock key which I'd previously redefined to work as a Ctrl key. I think this trips me up later on, but hey. (Update: it does!)<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=4uu3fCGiZ6U&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h18m55s" target="_blank" rel="nofollow noopener noreferrer">00:18:55</A>:</STRONG> Accidentally discovering a <A href="https://github.com/ranger/ranger" target="_blank" rel="nofollow noopener noreferrer">Ranger</A> feature, which is that if you select multiple files (with space, for example), selecting one of them (with "l", to go "right" into it) will open up the default handler for that file type, which in this case is my editor Vim, but it will open up Vim <EM>for all selected files</EM>, which means I can then navigate between then in Vim. Nice!<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=4uu3fCGiZ6U&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h20m30s" target="_blank" rel="nofollow noopener noreferrer">00:20:30</A>:</STRONG> We replace the value of the base URL with the real Northwind service URL in <CODE>grab.js</CODE>, so that the real and final execution of the script uses Northwind rather than our saved data files.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=4uu3fCGiZ6U&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h23m30s" target="_blank" rel="nofollow noopener noreferrer">00:23:30</A>:</STRONG> Triggered by a comment by <SPAN class="mention-scrubbed">nabheet.madan3</SPAN> we look at a Tweet thread on ABAP editor nostalgia, remembering how I edited ABAP in the late 1980's when it first appeared on the scene, and wondering whether we'll ever see ABAP being edited in Vim, via a language server implementation. Gosh!<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=4uu3fCGiZ6U&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h25m32s" target="_blank" rel="nofollow noopener noreferrer">00:25:32</A>:</STRONG> Creating a new window in tmux and copying the CSV files we've just generated with the <CODE>grab.js</CODE> script into the <CODE>db/csv/</CODE> directory in our Northbreeze project.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=4uu3fCGiZ6U&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h26m30s" target="_blank" rel="nofollow noopener noreferrer">00:26:30</A>:</STRONG> Someone at the door! Announced (and displayed) on my Google Home Hub via the Nest Hello device in the porch.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=4uu3fCGiZ6U&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h27m40s" target="_blank" rel="nofollow noopener noreferrer">00:27:40</A>:</STRONG> Using the Vim keybinding approach to rename files in Ranger, and there's also a "mass rename" feature, which I couldn't remember how to use at the time, but it's described here: <A href="https://github.com/ranger/ranger/wiki/Official-user-guide#bulk-renaming" target="_blank" rel="nofollow noopener noreferrer">Bulk renaming</A>.<BR />
<BR />
Now we have the CSV files renamed to follow the convention that says the names should be <CODE>&lt;namespace&gt;-&lt;Entityname&gt;.csv</CODE>.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=4uu3fCGiZ6U&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h30m55s" target="_blank" rel="nofollow noopener noreferrer">00:30:55</A>:</STRONG> Using <CODE>cds deploy</CODE> to have the CSV data loaded into the persistence layer. We don't need to specify the <CODE>--to sqlite:northbreeze.db</CODE> option as that detail has already been saved in the <CODE>package.json</CODE> file from a previous invocation.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=4uu3fCGiZ6U&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h32m20s" target="_blank" rel="nofollow noopener noreferrer">00:32:20</A>:</STRONG> Using <CODE>cds run</CODE> to start the service, where we can successfully see only the metadata document, including the navigation properties that are a result of the associations we've defined in <CODE>model.cds</CODE>. Lovely!<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=4uu3fCGiZ6U&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h36m32s" target="_blank" rel="nofollow noopener noreferrer">00:36:32</A>:</STRONG> Looking at the data too, in the Categories, Suppliers and Products entitysets, which is now available as it's been loaded into the persistence layer, from the CSV files, in the <CODE>cds deploy</CODE> activity.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=4uu3fCGiZ6U&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h37m55s" target="_blank" rel="nofollow noopener noreferrer">00:37:55</A>:</STRONG> Trying some OData query options, such as these:<BR />
<PRE><CODE><A href="http://localhost:4004/breezy/Categories?$expand=products" target="test_blank" rel="nofollow noopener noreferrer">http://localhost:4004/breezy/Categories?$expand=products</A><BR />
<A href="http://localhost:4004/breezy/Suppliers?$expand=products" target="test_blank" rel="nofollow noopener noreferrer">http://localhost:4004/breezy/Suppliers?$expand=products</A></CODE></PRE><BR />
and also<BR />
<PRE><CODE><A href="http://localhost:4004/breezy/Products?$select=name,discontinued" target="test_blank" rel="nofollow noopener noreferrer">http://localhost:4004/breezy/Products?$select=name,discontinued</A></CODE></PRE><BR />
... where we discover something odd about the values of the <CODE>discontinued</CODE> property: they are all set to <CODE>true</CODE>, which is not correct (we double check this by looking at the "same" query on the original Northwind service: <A href="https://services.odata.org/V3/Northwind/Northwind.svc/Products?$format=json&amp;$select=Discontinued" target="_blank" rel="nofollow noopener noreferrer"></A><A href="https://services.odata.org/V3/Northwind/Northwind.svc/Products" target="test_blank" rel="nofollow noopener noreferrer">https://services.odata.org/V3/Northwind/Northwind.svc/Products</A>?<SPAN class="math inline">$format=json&amp;$</SPAN>select=Discontinued.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=4uu3fCGiZ6U&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h40m40s" target="_blank" rel="nofollow noopener noreferrer">00:40:40</A>:</STRONG> Looking at the persistence layer, we can see that the values in the database are actually correct (i.e. we have some <CODE>false</CODE> values for the <CODE>discontinued</CODE> property).<BR />
<BR />
We leave it there, on this exciting cliffhanger! What is up with the <CODE>discontinued</CODE> property values? Let's find out soon!
---
Annotated links: Episode 9 of Hands-on SAP dev with qmacro
technology-blog-sap
2019-03-26
https://community.sap.com/t5/technology-blogs-by-sap/annotated-links-episode-9-of-hands-on-sap-dev-with-qmacro/ba-p/13388506
2019-03-26-annotated-links-episode-9-of-hands-on-sap-dev-with-qmacro
<EM>This is a searchable description of the content of a live stream recording, specifically <STRONG>"Episode 9 - Continuing with data retrieval for Northbreeze"</STRONG> in the "<A href="https://bit.ly/handsonsapdev" target="_blank" rel="nofollow noopener noreferrer">Hands-on SAP dev with qmacro</A>" series. There are links directly to specific highlights in the video recording. For links to annotations of other episodes, please see the "<A href="https://bit.ly/handsonsapdev#replays" target="_blank" rel="nofollow noopener noreferrer">Catch the replays</A>" section of the series blog post.</EM><BR />
<BR />
This episode, titled "<A href="https://bit.ly/handsonsapdev#ep9" target="_blank" rel="nofollow noopener noreferrer">Continuing with data retrieval for Northbreeze</A>", was streamed live on Wed 06 Mar 2019 and is approximately one hour in length. The stream recording is <A href="https://www.youtube.com/watch?v=FoK25WbVg_M&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0" target="_blank" rel="nofollow noopener noreferrer">available on YouTube</A>.<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2019/03/Screen-Shot-2019-03-20-at-09.13.49.png" /><BR />
<BR />
Below is a brief synopsis, and links to specific highlights - use these links to jump directly to particular places of interest in the recording, based on 'hh:mm:ss' style timestamps.<BR />
<H2 id="brief-synopsis" id="toc-hId-907741226">Brief synopsis</H2><BR />
In <A href="https://bit.ly/handsonsapdev#ep8" target="_blank" rel="nofollow noopener noreferrer">episode 8</A> last Friday we were constructing the data retrieval script using Axios and promises. In this episode we continue to build that out, and then convert the data thus retrieved to CSV for loading into the database with <CODE>cds deploy</CODE>.<BR />
<H2 id="links-to-specific-highlights" id="toc-hId-711227721">Links to specific highlights</H2><BR />
<STRONG><A href="https://www.youtube.com/watch?v=FoK25WbVg_M&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h02m20s" target="_blank" rel="nofollow noopener noreferrer">00:02:20</A>:</STRONG> Starting off with some SAP Inside Track announcements! - <A href="https://wiki.scn.sap.com/wiki/display/events/SAP+Inside+Track+Maidenhead,+Friday+March+15th+2019,+%23sitMAI" target="_blank" rel="noopener noreferrer">Maidenhead</A> - Friday 15 March - <A href="https://wiki.scn.sap.com/wiki/display/events/SAP+Inside+Track+Frankfurt+2019%2C+March+30th%2C+%23sitFRA" target="_blank" rel="noopener noreferrer">Frankfurt</A> - Saturday 30 March - <A href="https://wiki.scn.sap.com/wiki/display/events/SAP+Inside+Track+Oslo+-+17+August+2019" target="_blank" rel="noopener noreferrer">Oslo</A> - Saturday 17 August<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=FoK25WbVg_M&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h03m00s" target="_blank" rel="nofollow noopener noreferrer">00:03:00</A>:</STRONG> Spotting an update to the VS Code extension for CDS - from 1.0.36 to 1.1.1.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=FoK25WbVg_M&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h04m50s" target="_blank" rel="nofollow noopener noreferrer">00:04:50</A>:</STRONG> Looking at the <A href="https://www.youtube.com/channel/UCNfmelKDrvRmjYwSi9yvrMg" target="_blank" rel="nofollow noopener noreferrer">SAP Developers</A> YouTube channel, to which you should definitely subscribe!<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=FoK25WbVg_M&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h06m50s" target="_blank" rel="nofollow noopener noreferrer">00:06:50</A>:</STRONG> Looking at where we left off with the Northbreeze project, looking at the model and service definitions that we set up before detouring to grab some seed data from the original Northwind service with our "grab" project.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=FoK25WbVg_M&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h08m20s" target="_blank" rel="nofollow noopener noreferrer">00:08:20</A>:</STRONG> Opening a tmux session and looking at the "grab" project details, and in particular reminding ourselves how the <CODE>skipToken</CODE> works, and looking where we've saved local copies of the entity data, to serve to ourselves as we develop the script.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=FoK25WbVg_M&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h10m30s" target="_blank" rel="nofollow noopener noreferrer">00:10:30</A>:</STRONG> Opening up the <CODE>grab.js</CODE> script and looking through where we'd got to, and also starting up our local HTTP server in another tmux pane to serve the local data to the script.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=FoK25WbVg_M&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h16m55s" target="_blank" rel="nofollow noopener noreferrer">00:16:55</A>:</STRONG> Starting up <CODE>nodemon</CODE> in yet another tmux pane, to monitor and rerun the script as we make modifications.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=FoK25WbVg_M&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h18m00s" target="_blank" rel="nofollow noopener noreferrer">00:18:00</A>:</STRONG> Inserting another entry in the dot chain to see how many entities there are for each type, thus:<BR />
<PRE><CODE>.then(xs =&gt; xs.length)</CODE></PRE><BR />
This shows us that there's something not quite right ... of course, we've hardcoded "Products" in the <CODE>baseurl</CODE> constant, so we'll never manage to get any Categories or Suppliers in this configuration.<BR />
<BR />
We fix this by using placeholders in the constant instead:<BR />
<PRE><CODE><A href="http://localhost:8000/ENTITY-TOKEN" target="test_blank" rel="nofollow noopener noreferrer">http://localhost:8000/ENTITY-TOKEN</A></CODE></PRE><BR />
Also, even for the minimum number of pages of data, we're still getting 40 entities. That's because, for reasons unknown, I'd added 1 to the number of skip tokens like this:<BR />
<PRE><CODE>range(entities[entity].tokens + 1)</CODE></PRE><BR />
I can't for the life of me remember why I did that, and it's not correct. So we remove that <CODE>+ 1</CODE>.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=FoK25WbVg_M&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h21m00s" target="_blank" rel="nofollow noopener noreferrer">00:21:00</A>:</STRONG> To simplify things now, we create a new function <CODE>buildurl</CODE> that takes an entity name and a token count and constructs a real URL to be used in the Axios calls. This function includes the value of the <CODE>baseurl</CODE> constant so it can be pure.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=FoK25WbVg_M&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h21m50s" target="_blank" rel="nofollow noopener noreferrer">00:21:50</A>:</STRONG> The nice thing about the <CODE>replace</CODE> function in JS is that it's well behaved, in that (a) it doesn't mutate the source, and (b) what it produces is a new string, which we can then of course use to chain a further call to <CODE>replace</CODE> or whatever operation we want on that string.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=FoK25WbVg_M&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h23m39s" target="_blank" rel="nofollow noopener noreferrer">00:23:39</A>:</STRONG> With those changes, we've now fixes what we had, and can see the correct numbers of entities being returned: 77 Products, 29 Suppliers and 8 Categories.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=FoK25WbVg_M&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h24m15s" target="_blank" rel="nofollow noopener noreferrer">00:24:15</A>:</STRONG> Looking at another package <A href="https://www.npmjs.com/package/json2csv" target="_blank" rel="nofollow noopener noreferrer">json2csv</A> which will convert JSON to, you guessed it, CSV. It is in the form of a command line utility as well as having an API that can be used from within a JS script.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=FoK25WbVg_M&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h25m38s" target="_blank" rel="nofollow noopener noreferrer">00:25:38</A>:</STRONG> For now, to build out the next part, we'll just focus on Categories, and for that we insert a filter into the dot chain thus:<BR />
<PRE><CODE>.filter(x =&gt; x == 'Categories')</CODE></PRE><BR />
In looking at what we get as output, we notice that there's a whole load of data for a <CODE>picture</CODE> property - some sort of encoded image, which we don't want. And in digging deeper, we also notice that the properties we've defined in our entities (in CDS) are not the same as the properties we have in the JSON, so we'll have to convert them (for example we have <CODE>name</CODE> in the entity definition but <CODE>CategoryName</CODE> in the Northwind source that has come through as JSON).<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=FoK25WbVg_M&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h30m08s" target="_blank" rel="nofollow noopener noreferrer">00:30:08</A>:</STRONG> In the context of talking about Chris coming onto the next live stream episode to talk about functional programming, I point out that the filter we just added is a little ugly, in that it's hardcoded and also only useful there. What we would like to do ideally (partly, admittedly, to explore some functional programming aspects) is to write something like:<BR />
<PRE><CODE>.filter(onlyCategories)</CODE></PRE><BR />
because that's easy to understand and also "solid state".<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=FoK25WbVg_M&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h30m50s" target="_blank" rel="nofollow noopener noreferrer">00:30:50</A>:</STRONG> To do this, we start by defining a new function <CODE>is</CODE>:<BR />
<PRE><CODE>is = (val, x) =&gt; x == val</CODE></PRE><BR />
With this we can now say:<BR />
<PRE><CODE>.filter(x =&gt; is('Categories', x))</CODE></PRE><BR />
which is a bit nicer but not much. But we're on our way to a micro-nirvana.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=FoK25WbVg_M&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h32m55s" target="_blank" rel="nofollow noopener noreferrer">00:32:55</A>:</STRONG> Defining the <CODE>is</CODE> function like this instead:<BR />
<PRE><CODE>is =&gt; val =&gt; x =&gt; x == val</CODE></PRE><BR />
we can now define an <CODE>onlyCategories</CODE> like this:<BR />
<PRE><CODE>onlyCategories = is('Categories')</CODE></PRE><BR />
which is effectively the result of partially applying the call to the <CODE>is</CODE> function, with the first argument it wants; and now we have a function <CODE>onlyCategories</CODE> which is expecting also a single argument, which is the equivalent of the second argument to <CODE>is</CODE>.<BR />
<BR />
We can then do what we want, which is:<BR />
<PRE><CODE>.filter(onlyCategories)</CODE></PRE><BR />
Stare that that for a bit.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=FoK25WbVg_M&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h36m01s" target="_blank" rel="nofollow noopener noreferrer">00:36:01</A>:</STRONG> Installing <CODE>json2csv</CODE> and double-checking, with <CODE>npm list --depth=1</CODE>, what packages we have installed locally in this project (directory).<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=FoK25WbVg_M&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h37m30s" target="_blank" rel="nofollow noopener noreferrer">00:37:30</A>:</STRONG> Looking at <A href="https://www.npmjs.com/package/json2csv#example-3" target="_blank" rel="nofollow noopener noreferrer">Example 3</A> in the <CODE>json2csv</CODE> package documentation which shows how we can match up and rename properties during the conversion.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=FoK25WbVg_M&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h40m05s" target="_blank" rel="nofollow noopener noreferrer">00:40:05</A>:</STRONG> Starting to introduce the <CODE>json2csv</CODE> package use to our script, looking in particular at the destructuring construct (from ES6) in the example:<BR />
<PRE><CODE>const opts = { fields }</CODE></PRE><BR />
<STRONG><A href="https://www.youtube.com/watch?v=FoK25WbVg_M&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h42m00s" target="_blank" rel="nofollow noopener noreferrer">00:42:00</A>:</STRONG> A reference to a recording of a great talk by Brian Lonsdorf called "<A href="https://youtu.be/m3svKOdZijA" target="_blank" rel="nofollow noopener noreferrer">Hey Underscore, You're Doing It Wrong!</A>" which talks a lot about the importance of parameter order in function definitions, and how that affects how well (or not) functions can be used in a functional (point free) style.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=FoK25WbVg_M&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h44m33s" target="_blank" rel="nofollow noopener noreferrer">00:44:33</A>:</STRONG> Defining the fields that we want in the <CODE>entities</CODE> map we defined earlier, alongside the token information. We can then refer to this information in the options parameter in the call to <CODE>json2csv</CODE>.<BR />
<BR />
The next execution of the script shows us that it's doing what we want (in this case, creating CSV data with the new (and reduced) field set).<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=FoK25WbVg_M&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h50m51s" target="_blank" rel="nofollow noopener noreferrer">00:50:51</A>:</STRONG> Removing the call to <CODE>console.log</CODE> in the dot chain to see if we get the CSV written to files, and in fact we do!<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=FoK25WbVg_M&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h51m42s" target="_blank" rel="nofollow noopener noreferrer">00:51:42</A>:</STRONG> So we bring those CSV files into a new <CODE>csv</CODE> directory within the <CODE>db</CODE> directory in our CAP-based Northbreeze project, remembering the CSV file naming convention: <CODE>&lt;namespace&gt;-Entity.csv</CODE>.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=FoK25WbVg_M&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h55m00s" target="_blank" rel="nofollow noopener noreferrer">00:55:00</A>:</STRONG> Installing the <CODE>sqlite3</CODE> package, so we can deploy the data and service definitions, and the CSV data, to a SQLite database like this:<BR />
<PRE><CODE>cds deploy --to sqlite:northbreeze.db</CODE></PRE><BR />
<STRONG><A href="https://www.youtube.com/watch?v=FoK25WbVg_M&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h56m10s" target="_blank" rel="nofollow noopener noreferrer">00:56:10</A>:</STRONG> In response to a question from Jluiizz, I explain that the keyboard I'm using is the Vortex Race 3 with Cherry MX Blue switches. I buy my keyboards from <A href="https://candykeys.com" target="_blank" rel="nofollow noopener noreferrer">Candykeys</A>.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=FoK25WbVg_M&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h57m45s" target="_blank" rel="nofollow noopener noreferrer">00:57:45</A>:</STRONG> We use the <CODE>sqlite3</CODE> command line client to check if everything has worked ... and it has!
---
Annotated links: Episode 8 of Hands-on SAP dev with qmacro
technology-blog-sap
2019-03-26
https://community.sap.com/t5/technology-blogs-by-sap/annotated-links-episode-8-of-hands-on-sap-dev-with-qmacro/ba-p/13422149
2019-03-26-annotated-links-episode-8-of-hands-on-sap-dev-with-qmacro
<EM>This is a searchable description of the content of a live stream recording, specifically <STRONG>"Episode 8 - Using Axios, ES6, promises &amp; pure functions to grab data"</STRONG> in the "<A href="https://bit.ly/handsonsapdev" target="_blank" rel="nofollow noopener noreferrer">Hands-on SAP dev with qmacro</A>" series. There are links directly to specific highlights in the video recording. For links to annotations of other episodes, please see the "<A href="https://bit.ly/handsonsapdev#replays" target="_blank" rel="nofollow noopener noreferrer">Catch the replays</A>" section of the series blog post.</EM><BR />
<BR />
This episode, titled "<A href="https://bit.ly/handsonsapdev#ep8" target="_blank" rel="nofollow noopener noreferrer">Using Axios, ES6, promises &amp; pure functions to grab data</A>", was streamed live on Fri 01 Mar 2019 and is approximately one hour in length. The stream recording is <A href="https://www.youtube.com/watch?v=xUDSnNPFTQo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0" target="_blank" rel="nofollow noopener noreferrer">available on YouTube</A>.<BR />
<BR />
<EM><IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2019/03/Screen-Shot-2019-03-26-at-05.26.51.png" /></EM><BR />
<BR />
Below is a brief synopsis, and links to specific highlights - use these links to jump directly to particular places of interest in the recording, based on 'hh:mm:ss' style timestamps.<BR />
<H2 id="brief-synopsis" id="toc-hId-930646788">Brief synopsis</H2><BR />
In <A href="https://bit.ly/handsonsapdev#ep6" target="_blank" rel="nofollow noopener noreferrer">Episode 6</A> we set out creating our mini Northwind service, called Northbreeze, and started to write some code to grab the Northwind data, exploring Axios as an HTTP client library that supports promises and (therefore) dot chaining. In this episode we continue on towards completing this code to produce CSV files as input to our CAP model, exploring pure functions along the way.<BR />
<H2 id="links-to-specific-highlights" id="toc-hId-734133283">Links to specific highlights</H2><BR />
<STRONG><A href="https://www.youtube.com/watch?v=xUDSnNPFTQo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h03m15s" target="_blank" rel="nofollow noopener noreferrer">00:03:15</A>:</STRONG> Reminding ourselves of what we'd been doing on this subject last time: We had created an initial Node.js project with a <CODE>grab.js</CODE> script to pull data from the Northwind OData service.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=xUDSnNPFTQo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h04m35s" target="_blank" rel="nofollow noopener noreferrer">00:04:35</A>:</STRONG> <SPAN class="mention-scrubbed">rsletta</SPAN> shares a fun fact with us - Coffee Corner Radio is partially the reason why there will be an SAP Inside Track in Oslo this year, and it's on 17 Aug 2019! See the <A href="https://wiki.scn.sap.com/wiki/display/events/SAP+Inside+Track+Oslo+-+17+August+2019" target="_blank" rel="noopener noreferrer">sitOSLO wiki page</A> for more details.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=xUDSnNPFTQo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h04m54s" target="_blank" rel="nofollow noopener noreferrer">00:04:54</A>:</STRONG> Noting we'd installed the Axios package, an HTTP client that supports the use of promises, and taking a look where we'd got to in the <CODE>grab.js</CODE> script, using Axios's <CODE>.all()</CODE> function which allows us to fire off multiple HTTP requests, and which returns a promise.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=xUDSnNPFTQo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h07m30s" target="_blank" rel="nofollow noopener noreferrer">00:07:30</A>:</STRONG> Adding a function that does effectively nothing just so we can add a breakpoint in VS Code, to inspect what we get from the multiple HTTP calls:<BR />
<PRE><CODE>.then(xs =&gt; {<BR />
  return xs<BR />
})</CODE></PRE><BR />
What we get is an array of two objects representing the responses to the HTTP requests. The object is the response data from an HTTP perspective, but also a nicely parsed data object.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=xUDSnNPFTQo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h09m27s" target="_blank" rel="nofollow noopener noreferrer">00:09:27</A>:</STRONG> Looking at the <CODE>odata.nextLink</CODE> based paging mechanism that's used to return pages of data where the whole data set is deemed to large to return in one go (there are, for example, 77 products).<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=xUDSnNPFTQo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h12m33s" target="_blank" rel="nofollow noopener noreferrer">00:12:33</A>:</STRONG> Noting that I've downloaded, into a <CODE>data</CODE> directory, the JSON representing the data resources for the entitysets we want to download, so we can store and serve them locally, rather than run any risk of being (rightly) rate-limited or banned for overuse of the public Northwind service.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=xUDSnNPFTQo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h13m40s" target="_blank" rel="nofollow noopener noreferrer">00:13:40</A>:</STRONG> Based on a question from <SPAN class="mention-scrubbed">christian.drumm</SPAN>, we take a brief look at <A href="https://github.com/ranger/ranger" target="_blank" rel="nofollow noopener noreferrer">ranger</A>, a terminal based file manager with lots of features including Vim keybindings. My ranger config, and more, is available in my <A href="https://github.com/qmacro/scripts" target="_blank" rel="nofollow noopener noreferrer">scripts</A> repo on GitHub.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=xUDSnNPFTQo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h16m28s" target="_blank" rel="nofollow noopener noreferrer">00:16:28</A>:</STRONG> Starting up a quick HTTP server using Python's <CODE>http.server</CODE> module, which is super useful. We use this in the <CODE>data/</CODE> directory to serve up the JSON resources we've previously downloaded. Note that the module name changed between Python versions 2 and 3 (it was <CODE>SimpleHTTPServer</CODE> with Python 2).<BR />
<PRE><CODE>=&gt; python -mhttp.server<BR />
Serving HTTP on 0.0.0.0 port 8000 (http://0.0.0.0:8000)</CODE></PRE><BR />
<STRONG><A href="https://www.youtube.com/watch?v=xUDSnNPFTQo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h18m00s" target="_blank" rel="nofollow noopener noreferrer">00:18:00</A>:</STRONG> Starting to edit the <CODE>grab.js</CODE> script, changing the <CODE>baseurl</CODE> to point to this local HTTP server endpoint.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=xUDSnNPFTQo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h19m15s" target="_blank" rel="nofollow noopener noreferrer">00:19:15</A>:</STRONG> Noting that my ultimate goal is to be able to work on this sort of stuff on an original VT100 terminal from DEC. I have (or used to have) many terminals, they're a wonderful thing to collect.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=xUDSnNPFTQo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h19m40s" target="_blank" rel="nofollow noopener noreferrer">00:19:40</A>:</STRONG> Installing <CODE>nodemon</CODE> (which we first saw in <A href="https://bit.ly/handsonsapdev#ep0" target="_blank" rel="nofollow noopener noreferrer">episode 0</A>) locally inside this project, and starting it up thus:<BR />
<PRE><CODE>./node_modules/nodemon/bin/nodemon.js grab.js</CODE></PRE><BR />
<STRONG><A href="https://www.youtube.com/watch?v=xUDSnNPFTQo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h22m40s" target="_blank" rel="nofollow noopener noreferrer">00:22:40</A>:</STRONG> Considering the steps in the code as a 'dot chain', a series of steps that are processed one after the other, where the output from one step becomes the input for the next. We explore this with:<BR />
<PRE><CODE>.then(xs =&gt; xs.reduce((a, x) =&gt; a.concat(x.data.value), []))<BR />
.then(xs =&gt; xs.length)<BR />
.then(console.log)</CODE></PRE><BR />
and can see that we get the right "count" of items in the output.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=xUDSnNPFTQo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h24m40s" target="_blank" rel="nofollow noopener noreferrer">00:24:40</A>:</STRONG> Reminding ourselves of what the first <CODE>.then(...)</CODE> call is doing, with the <CODE>reduce</CODE> function; basically, here's an example, from the Node.js REPL:<BR />
<PRE><CODE>&gt; stuff<BR />
[ [ 1, 2, 3 ], [ 4, 5, 6 ], [ 7, 8, 9 ] ]<BR />
&gt; stuff.reduce((a, x) =&gt; a.concat(x), [])<BR />
[ 1, 2, 3, 4, 5, 6, 7, 8, 9 ]</CODE></PRE><BR />
<STRONG><A href="https://www.youtube.com/watch?v=xUDSnNPFTQo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h28m00s" target="_blank" rel="nofollow noopener noreferrer">00:28:00</A>:</STRONG> Removing the static list of calls we've used so far (<CODE>axios.get(baseurl + '0')</CODE> etc) and writing something to generate them instead. In this part, we look again at Python, to briefly explore the difference between <CODE>range</CODE> and <CODE>xrange</CODE>, noting the difference between the two - one is lazy, the other is not. Laziness is a good thing! BTW there is <CODE>range</CODE> and <CODE>xrange</CODE> in Python 2, but Python 3's <CODE>range</CODE> is the equivalent of Python 2's <CODE>xrange</CODE>.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=xUDSnNPFTQo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h31m55s" target="_blank" rel="nofollow noopener noreferrer">00:31:55</A>:</STRONG> Now looking at the equivalent of <CODE>range</CODE> in JavaScript (I make a brief reference to Gary Bernhardt's excellent and very entertaining talk titled "<A href="https://www.destroyallsoftware.com/talks/wat" target="_blank" rel="nofollow noopener noreferrer">Wat</A>", on JavaScript), we create a <CODE>range</CODE> function like this:<BR />
<PRE><CODE>range = x =&gt; [...Array(x).keys()]</CODE></PRE><BR />
Lovely!<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=xUDSnNPFTQo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h37m00s" target="_blank" rel="nofollow noopener noreferrer">00:37:00</A>:</STRONG> Starting to replace the static list of <CODE>get()</CODE> calls in the <CODE>all()</CODE> call by generating the calls dynamically, making use of our new <CODE>range</CODE> function.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=xUDSnNPFTQo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h40m00s" target="_blank" rel="nofollow noopener noreferrer">00:40:00</A>:</STRONG> Slightly annoyed by myself for using a less than perfect Vim motion and action command to start appending at the end of the line. I used <CODE>$</CODE> to get to the end of the line, then <CODE>a</CODE> to start appending from there. I should have simply used <CODE>A</CODE> which does both those things.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=xUDSnNPFTQo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h41m25s" target="_blank" rel="nofollow noopener noreferrer">00:41:25</A>:</STRONG> The resulting reworking of the <CODE>all()</CODE> call looks like this:<BR />
<PRE><CODE>.all(range(4).map(x =&gt; axios.get(baseurl + (x * 20))))</CODE></PRE><BR />
<STRONG><A href="https://www.youtube.com/watch?v=xUDSnNPFTQo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h42m30s" target="_blank" rel="nofollow noopener noreferrer">00:42:30</A>:</STRONG> Creating a configuration map for the entities (Products, Suppliers, Categories), where we can supply the number of skipTokens required to retrieve everything (and implicitly, via the keys, have a list of the entities that we need).<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=xUDSnNPFTQo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h44m50s" target="_blank" rel="nofollow noopener noreferrer">00:44:50</A>:</STRONG> Starting to turn the main call into a function <CODE>grab</CODE> that we can then make calls to later. The function will return a promise.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=xUDSnNPFTQo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h46m48s" target="_blank" rel="nofollow noopener noreferrer">00:46:48</A>:</STRONG> Now we start to flesh out the call to <CODE>grab</CODE> like this:<BR />
<PRE><CODE>grab('Products')<BR />
  .then(xs =&gt; xs.length)<BR />
  .then(console.log)</CODE></PRE><BR />
(For the observant amongst you, I didn't notice that at this point I was making one HTTP call too many - note the call to '/Products-80' in the top left pane, and there are only 77 products!).<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=xUDSnNPFTQo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h47m43s" target="_blank" rel="nofollow noopener noreferrer">00:47:43</A>:</STRONG> Starting to wrap the call to <CODE>grab</CODE> in an <CODE>Object.keys</CODE> that works on the entities configuration map we previously defined, noting that the simple use of <CODE>console.log</CODE> in the <CODE>map</CODE> call, we get what is really passed to the function in a <CODE>map</CODE> call, i.e. three arguments (not just a single argument) - current value, index and array. See <A class="uri" href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map#Parameters" target="_blank" rel="nofollow noopener noreferrer">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map#Parameters</A> for details about this.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=xUDSnNPFTQo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h51m00s" target="_blank" rel="nofollow noopener noreferrer">00:51:00</A>:</STRONG> <SPAN class="mention-scrubbed">chris.whealy#overview</SPAN> makes the point, in a comment, that the <CODE>grab</CODE> function could be curried, to allow us to remove the reliance that it currently has on the global <CODE>baseurl</CODE> constant. This is a good idea and something we should look at if we cover this code again in the next few sessions. If you're interested in what this means and why it's a good idea, you might want to take a look at <A href="https://bit.ly/handsonsapdev#ep12" target="_blank" rel="nofollow noopener noreferrer">episode 12</A> ("Exploring and understanding parts of <SPAN class="citation"><a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a>/cds</SPAN> JS - code &amp; style") where we look at pure functions and partial application in the course of exploring a short JS script.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=xUDSnNPFTQo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h54m05s" target="_blank" rel="nofollow noopener noreferrer">00:54:05</A>:</STRONG> Using the <CODE>fs</CODE> module to start to write the JSON data to output files. When we run this, it causes <CODE>nodemon</CODE> to repeatedly restart, endlessly! This is because we're creating files that it notices, causing it to restart, and recreate the files, causing it to notice those files, restarting, etc. Ad infinitum.<BR />
<BR />
We fix this by modifying the call to <CODE>nodemon</CODE> to ignore files in the data directory, so it looks like this:<BR />
<PRE><CODE>./node_modules/nodemon/bin/nodemon.js grab.js --ignore data</CODE></PRE><BR />
<STRONG><A href="https://www.youtube.com/watch?v=xUDSnNPFTQo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h57m01s" target="_blank" rel="nofollow noopener noreferrer">00:57:01</A>:</STRONG> We notice that in the JSON files, we have <CODE>[object Object]</CODE> which is not quite right. This is fixed by adding another process in the dot chain, to stringify the data (the objects) into JSON. Along the way, I write this:<BR />
<PRE><CODE>.then(x =&gt; JSON.stringify(x))</CODE></PRE><BR />
which I pick up as a "bad [code] smell" because actually this is a redundant use of function parameterisation. This is better, and more concisely written, as<BR />
<PRE><CODE>.then(JSON.stringify)</CODE></PRE><BR />
Stare at that for a couple of minutes and you'll see why.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=xUDSnNPFTQo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h58m35s" target="_blank" rel="nofollow noopener noreferrer">00:58:35</A>:</STRONG> Phone call from Michelle, which I ignore. Yikes!
---
Annotated links: Episode 7 of Hands-on SAP dev with qmacro
technology-blog-sap
2019-03-19
https://community.sap.com/t5/technology-blogs-by-sap/annotated-links-episode-7-of-hands-on-sap-dev-with-qmacro/ba-p/13420995
2019-03-19-annotated-links-episode-7-of-hands-on-sap-dev-with-qmacro
<EM>This is a searchable description of the content of a live stream recording, specifically <STRONG>"Episode 7 - Digging into the language server protocol, cds-lsp and Vim"</STRONG> in the "<A href="https://bit.ly/handsonsapdev" target="_blank" rel="nofollow noopener noreferrer">Hands-on SAP dev with qmacro</A>" series. There are links directly to specific highlights in the video recording. For links to annotations of other episodes, please see the "<A href="https://bit.ly/handsonsapdev#replays" target="_blank" rel="nofollow noopener noreferrer">Catch the replays</A>" section of the series blog post.</EM><BR />
<BR />
This episode, titled "<A href="https://bit.ly/handsonsapdev#ep7" target="_blank" rel="nofollow noopener noreferrer">Digging into the language server protocol, cds-lsp and Vim</A>", was streamed live on Wed 27 Feb 2019 and is approximately one hour in length. The stream recording is <A href="https://www.youtube.com/watch?v=WLkFAtgEWs8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0" target="_blank" rel="nofollow noopener noreferrer">available on YouTube</A>.<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2019/03/Screen-Shot-2019-03-19-at-08.22.28-1.png" /><BR />
<BR />
Below is a brief synopsis, and links to specific highlights - use these links to jump directly to particular places of interest in the recording, based on 'hh:mm:ss' style timestamps.<BR />
<H2 id="brief-synopsis" id="toc-hId-930595045">Brief synopsis</H2><BR />
One of the things we looked at briefly in the previous episode was the language server protocol (LSP) implementation for the CDS language, in the VS Code extension. In this midweek episode we explore getting a Vim LSP client working and connected to the cds-lsp server.<BR />
<H2 id="links-to-specific-highlights" id="toc-hId-734081540">Links to specific highlights</H2><BR />
<STRONG><A href="https://www.youtube.com/watch?v=WLkFAtgEWs8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h00m22s" target="_blank" rel="nofollow noopener noreferrer">00:00:22</A>:</STRONG> Talking about the occasional midweek slot, compared with the regular Friday slot. Remember - Friday is the regular slot and we sometimes do other slots too midweek.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=WLkFAtgEWs8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h03m08s" target="_blank" rel="nofollow noopener noreferrer">00:03:08</A>:</STRONG> Showing the <A href="https://calendar.google.com/calendar/r?cid=MGFjbzlnbXQzYTZyMWNjMmJoYTZiczlhM2NAZ3JvdXAuY2FsZW5kYXIuZ29vZ2xlLmNvbQ" target="_blank" rel="nofollow noopener noreferrer">Google Calendar</A> that I maintain for the live stream episodes, to which you can subscribe and get notifications of upcoming episodes. More info here: <A class="uri" href="http://bit.ly/handsonsapdev#upcoming" target="_blank" rel="nofollow noopener noreferrer">http://bit.ly/handsonsapdev#upcoming</A>.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=WLkFAtgEWs8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h04m05s" target="_blank" rel="nofollow noopener noreferrer">00:04:05</A>:</STRONG> Starting at the <A href="https://tools.hana.ondemand.com/#cloud" target="_blank" rel="nofollow noopener noreferrer">SAP Development Tools</A> page for cloud topics, looking at the details of what's on offer with the "CDS Language Support for Visual Studio Code" extension.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=WLkFAtgEWs8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h04m50s" target="_blank" rel="nofollow noopener noreferrer">00:04:50</A>:</STRONG> Looking inside the extension download, by renaming the file, changing the extension <CODE>vsix</CODE> to <CODE>tgz</CODE> because the extension file is actually a gzipped tarball. Now we can unpack it into a temporary folder to have a look around.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=WLkFAtgEWs8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h06m00s" target="_blank" rel="nofollow noopener noreferrer">00:06:00</A>:</STRONG> We see that there are two Node.js modules in the <CODE><a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a></CODE> namespace - <CODE>cds-compiler</CODE> and <CODE>cds-lsp</CODE>.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=WLkFAtgEWs8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h06m40s" target="_blank" rel="nofollow noopener noreferrer">00:06:40</A>:</STRONG> Noting the differences between versions of these two modules in the VSIX extension and those in the latest released version of <CODE><a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a>/cds</CODE> a few days previously.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=WLkFAtgEWs8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h07m50s" target="_blank" rel="nofollow noopener noreferrer">00:07:50</A>:</STRONG> Starting up VS Code to examine the extension as installed, including a quick look at the Changelog.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=WLkFAtgEWs8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h08m45s" target="_blank" rel="nofollow noopener noreferrer">00:08:45</A>:</STRONG> Noting that I've taken a slightly more recent version of the <CODE><a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a>/cds-lsp</CODE> module for the purposes of this episode, as we need a slightly newer version than the one that's in the 1.0.36 release of the extension, which is 1.4.24. The extension is about to be updated (at the time of the live stream) with a new version of the <CODE>cds-compiler</CODE> and <CODE>cds-lsp</CODE> modules.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=WLkFAtgEWs8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h09m42s" target="_blank" rel="nofollow noopener noreferrer">00:09:42</A>:</STRONG> Examining the details of what the extension offers, to see what sort of language server features we should be looking for (noting that syntax highlighting doesn't come from the <CODE>cds-lsp</CODE> package, but from the syntaxes files in the extension, taking a look at a snippet of the configuration for 'Association to many').<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=WLkFAtgEWs8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h12m15s" target="_blank" rel="nofollow noopener noreferrer">00:12:15</A>:</STRONG> Having a look at the <A href="https://langserver.org" target="_blank" rel="nofollow noopener noreferrer">Language Server Protocol homepage</A> to understand what it is and does.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=WLkFAtgEWs8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h13m34s" target="_blank" rel="nofollow noopener noreferrer">00:13:34</A>:</STRONG> Having a quick look at the things we should be able to achieve when we wire up a language client in Vim with the language server from <CODE><a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a>/cds-lsp</CODE> via the Language Server Protocol (LSP), via a really simple CAP project with a <CODE>service.cds</CODE> and <CODE>model.cds</CODE> file: error highlighting, go-to-definition, find-references (and jumping to those references).<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=WLkFAtgEWs8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h18m00s" target="_blank" rel="nofollow noopener noreferrer">00:18:00</A>:</STRONG> Looking at my <CODE>.vim</CODE> folder, noting the packages including the 'languageclient' and 'fzf' packages which we looked at in <A href="https://bit.ly/handsonsapdev#ep1" target="_blank" rel="nofollow noopener noreferrer">episode 1</A> and which is a dependency of the 'languageclient' package.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=WLkFAtgEWs8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h19m00s" target="_blank" rel="nofollow noopener noreferrer">00:19:00</A>:</STRONG> The language client we are using for Vim is <A href="https://github.com/autozimu/LanguageClient-neovim" target="_blank" rel="nofollow noopener noreferrer">LanguageClient-neovim</A> which also works with regular Vim (as well as NeoVim). We look at a list of features the client supports, a quick start guide and some install documentation (I've already got this and 'fzf' installed).<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=WLkFAtgEWs8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h20m20s" target="_blank" rel="nofollow noopener noreferrer">00:20:20</A>:</STRONG> Loading up <CODE>model.cds</CODE> in Vim, noting that it initially looks very boring, no syntax highlighting or any error notifications.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=WLkFAtgEWs8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h21m00s" target="_blank" rel="nofollow noopener noreferrer">00:21:00</A>:</STRONG> Starting to modify our Vim configuration to connect up the language client to the <CODE><a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a>/cds-lsp</CODE>-based language server and looking inside the server package to find the <CODE>server.js</CODE> entrypoint.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=WLkFAtgEWs8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h23m00s" target="_blank" rel="nofollow noopener noreferrer">00:23:00</A>:</STRONG> Simply starting <CODE>node out/src/server.js</CODE> does nothing much at all, but supplying the <CODE>--stdio</CODE> option causes the language server to start listening.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=WLkFAtgEWs8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h23m30s" target="_blank" rel="nofollow noopener noreferrer">00:23:30</A>:</STRONG> Quick chat with my neighbour on whose drive I've parked my car temporarily. Oops!<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=WLkFAtgEWs8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h24m00s" target="_blank" rel="nofollow noopener noreferrer">00:24:00</A>:</STRONG> Understanding how to invoke the language server from the client, by looking at the sample configuration in the <A href="https://github.com/autozimu/LanguageClient-neovim/blob/next/INSTALL.md#5-configure-this-plugin" target="_blank" rel="nofollow noopener noreferrer">"Configure this plugin" section of the language client install guide</A>.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=WLkFAtgEWs8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h25m50s" target="_blank" rel="nofollow noopener noreferrer">00:25:50</A>:</STRONG> Going to the language client package directory (<CODE>./vim/bundle/languageclient</CODE>), where I've already unpacked the <CODE><a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a>/cds-lsp</CODE> package (noting that I have the old 1.4.24 version as well as the newer 2.0.1 version which we'll be using).<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=WLkFAtgEWs8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h26m50s" target="_blank" rel="nofollow noopener noreferrer">00:26:50</A>:</STRONG> Opening my Vim config file (in <CODE>.vimrc</CODE>) and adding some initial configuration thus:<BR />
<PRE><CODE>set runtimepath+=~/.vim/bundle/languageclient<BR />
<BR />
autocmd BufRead,BufNewFile *.cds setfiletype cds<BR />
<BR />
set hidden<BR />
let g:LanguageClient_serverCommands = {<BR />
    \ 'cds': [expand('~/.vim/bundle/languageclient/startcdslsp')]<BR />
    \ }</CODE></PRE><BR />
<STRONG><A href="https://www.youtube.com/watch?v=WLkFAtgEWs8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h31m09s" target="_blank" rel="nofollow noopener noreferrer">00:31:09</A>:</STRONG> Creating a <CODE>startcdslsp</CODE> in the same directory, that looks like this:<BR />
<DIV><BR />
<PRE class="sourceCode bash"><CODE class="sourceCode bash"><SPAN class="co">#!/bin/bash</SPAN><BR />
<BR />
<SPAN class="va">VERSION=</SPAN>2.0.1<BR />
<SPAN class="ex">node</SPAN> <SPAN class="st">"</SPAN><SPAN class="va">${HOME}</SPAN><SPAN class="st">/.vim/bundle/languageclient/cds-lsp-</SPAN><SPAN class="va">${VERSION}</SPAN><SPAN class="st">/out/src/server.js"</SPAN> --stdio</CODE></PRE><BR />
</DIV><BR />
This is what we need to start up the language server so that the language client can connect to it and start using its services.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=WLkFAtgEWs8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h32m25s" target="_blank" rel="nofollow noopener noreferrer">00:32:25</A>:</STRONG> Discussing a question about opening VS Code from a Docker container to edit files within it.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=WLkFAtgEWs8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h33m25s" target="_blank" rel="nofollow noopener noreferrer">00:33:25</A>:</STRONG> All the configuration we see in this episode is in my <A href="https://github.com/qmacro/dotvim" target="_blank" rel="nofollow noopener noreferrer">dotvim</A> repository.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=WLkFAtgEWs8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h34m15s" target="_blank" rel="nofollow noopener noreferrer">00:34:15</A>:</STRONG> Opening up the simple CAP project in Vim to see what happens now we have this basic configuration in place. Will anything happen? Yes! We see a message from the language client package:<BR />
<BR />
"[LC] Project root: /Users/i347491/local/projects/livestream/capm/lsp"<BR />
<BR />
That's all, so far though. I restored my saved configuration as I suspected I'd entered something incorrectly, and we then get the error highlighting!<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=WLkFAtgEWs8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h36m34s" target="_blank" rel="nofollow noopener noreferrer">00:36:34</A>:</STRONG> On removing the 'e' from 'entity' to cause an error, we see an 'error' symbol (an 'x') in the gutter on the left hand side, along with the error description at the bottom: "[Error][syntax-mismatched-token]Mismatched identifier, expecting ...". Success!<BR />
<BR />
The restored configuration also included this to ensure the gutter is shown:<BR />
<PRE><CODE>set signcolumn=yes</CODE></PRE><BR />
<STRONG><A href="https://www.youtube.com/watch?v=WLkFAtgEWs8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h38m05s" target="_blank" rel="nofollow noopener noreferrer">00:38:05</A>:</STRONG> Investigating more features, such as "go-to-definition" via the <CODE>LanguageClient#textDocument_definition()</CODE> command, which for now we call manually with <CODE>:call</CODE>, and also the "find-references" feature via the <CODE>LanguageClient#textDocument_references()</CODE> command, which shows references in a window that pops up at the bottom - using <CODE>fzf</CODE> for selection. Note that jumping to references also works across different files, as we saw here.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=WLkFAtgEWs8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h40m20s" target="_blank" rel="nofollow noopener noreferrer">00:40:20</A>:</STRONG> Back in the Vim config, mapping some keypresses as shortcuts for these commands:<BR />
<PRE><CODE>nnoremap &lt;silent&gt; gd :call LanguageClient#textDocument_definition()&lt;CR&gt;<BR />
nnoremap &lt;silent&gt; fr :call LanguageClient#textDocument_references()&lt;CR&gt;</CODE></PRE><BR />
This makes using the "go-to-definition" and "find-references" features much quicker and more comfortable.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=WLkFAtgEWs8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h42m15s" target="_blank" rel="nofollow noopener noreferrer">00:42:15</A>:</STRONG> Starting to turn our attention to syntax highlighting, which is done separately from the language server facilities, taking some hints from the <A href="http://learnvimscriptthehardway.stevelosh.com/chapters/45.html" target="_blank" rel="nofollow noopener noreferrer">Syntax Highlighting</A> chapter of <A href="http://learnvimscriptthehardway.stevelosh.com" target="_blank" rel="nofollow noopener noreferrer">Learn Vimscript the Hard Way</A>. We also use the resource <A href="https://vim.fandom.com/wiki/Creating_your_own_syntax_files" target="_blank" rel="nofollow noopener noreferrer">Creating your own syntax files</A>.<BR />
<BR />
We end up with this, in <CODE>.vim/syntax/cds.vim</CODE>:<BR />
<PRE><CODE>if exists("b:current_syntax")<BR />
    finish<BR />
endif<BR />
<BR />
let b:current_syntax = "cds"<BR />
<BR />
syntax keyword cdsKeyword entity namespace key to on<BR />
syntax keyword cdsType Integer String Association to Decimal Boolean<BR />
highlight link cdsKeyword Keyword<BR />
highlight link cdsType Constant</CODE></PRE>
---
Annotated links: Episode 5 of Hands-on SAP dev with qmacro
technology-blog-sap
2019-03-08
https://community.sap.com/t5/technology-blogs-by-sap/annotated-links-episode-5-of-hands-on-sap-dev-with-qmacro/ba-p/13413217
2019-03-08-annotated-links-episode-5-of-hands-on-sap-dev-with-qmacro
<EM>This is a searchable description of the content of a live stream recording, specifically <STRONG>"Episode 5 - Continuation of the CAPM Node.js bookshop tutorial"</STRONG> in the "<A href="https://bit.ly/handsonsapdev" target="_blank" rel="nofollow noopener noreferrer">Hands-on SAP dev with qmacro</A>" series. There are links directly to specific highlights in the video recording. For links to annotations of other episodes, please see the "<A href="https://bit.ly/handsonsapdev#replays" target="_blank" rel="nofollow noopener noreferrer">Catch the replays</A>" section of the series blog post.</EM><BR />
<BR />
This episode, titled "<A href="https://bit.ly/handsonsapdev#ep5" target="_blank" rel="nofollow noopener noreferrer">Continuation of the CAPM Node.js bookshop tutorial</A>", was streamed live on Wed 13 Feb 2019 and is approximately one hour in length. The stream recording is <A href="https://www.youtube.com/watch?v=bwaRcTD5zLs&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0" target="_blank" rel="nofollow noopener noreferrer">available on YouTube</A>.<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2019/03/Screen-Shot-2019-03-08-at-16.42.01.png" /><BR />
<BR />
Below is a brief synopsis, and links to specific highlights â use these links to jump directly to particular places of interest in the recording, based on âhh:mm:ssâ style timestamps.<BR />
<H2 id="brief-synopsis" id="toc-hId-929753924">Brief synopsis</H2><BR />
We continue working our way through the tutorial â<A href="https://developers.sap.com/tutorials/cp-apm-nodejs-create-service.html" target="_blank" rel="noopener noreferrer">Create a Business Service with Node.js using Visual Studio Code</A>â on the <A href="https://developers.sap.com/" target="_blank" rel="noopener noreferrer">SAP Developer Centre</A>.<BR />
<H2 id="links-to-specific-highlights" id="toc-hId-733240419">Links to specific highlights</H2><BR />
<STRONG><A href="https://www.youtube.com/watch?v=bwaRcTD5zLs&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h04m02s" target="_blank" rel="nofollow noopener noreferrer">00:04:02</A>:</STRONG> I'm using the <A href="https://usemodify.com/fonts/3270/" target="_blank" rel="nofollow noopener noreferrer">3270 font</A> by Ricardo BÃ¡nffy in my terminal.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=bwaRcTD5zLs&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h05m22s" target="_blank" rel="nofollow noopener noreferrer">00:05:22</A>:</STRONG> Noted what happened since last time we looked at the tutorial, which was <A href="https://www.twitch.tv/videos/377043179" target="_blank" rel="nofollow noopener noreferrer">live stream episode 3</A> where we had Christian Georgi on as a guest, <A href="https://www.twitch.tv/videos/379997882" target="_blank" rel="nofollow noopener noreferrer">live stream episode 4</A> where we looked at the CDS REPL, and the fact that CDS has been updated.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=bwaRcTD5zLs&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h06m00s" target="_blank" rel="nofollow noopener noreferrer">00:06:00</A>:</STRONG> Looking briefly at the CDS update from 3.0.0 to 3.5.0.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=bwaRcTD5zLs&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h07m39s" target="_blank" rel="nofollow noopener noreferrer">00:07:39</A>:</STRONG> Looking at the environment shortcuts I have for my shell and for <A href="https://github.com/ranger/ranger" target="_blank" rel="nofollow noopener noreferrer">ranger</A>, via alias settings that are controlled by a scripts mechanism that I have in my <A href="https://github.com/qmacro/scripts" target="_blank" rel="nofollow noopener noreferrer">scripts repo</A>. I also note that my Vim configuration is also available in my <A href="https://github.com/qmacro/dotvim" target="_blank" rel="nofollow noopener noreferrer">dotvim repo</A>.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=bwaRcTD5zLs&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h09m35s" target="_blank" rel="nofollow noopener noreferrer">00:09:35</A>:</STRONG> Discussion of whether we can have a lowest-common-denominator style configuration that can work across different environments. It's easier with *nix style environments like Linux, macOS and the Linux VM on Chrome OS, and perhaps possible with the Windows subsystem for Linux too.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=bwaRcTD5zLs&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h11m00s" target="_blank" rel="nofollow noopener noreferrer">00:11:00</A>:</STRONG> Looking at the <SPAN class="citation"><a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a>/cds</SPAN> module with <A href="https://docs.npmjs.com/cli/ls.html" target="_blank" rel="nofollow noopener noreferrer">npm list</A> and <A href="https://docs.npmjs.com/cli/view.html" target="_blank" rel="nofollow noopener noreferrer">npm info</A>.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=bwaRcTD5zLs&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h12m00s" target="_blank" rel="nofollow noopener noreferrer">00:12:00</A>:</STRONG> Start a fresh project with <CODE>cds init my-bookshop</CODE>.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=bwaRcTD5zLs&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h12m32s" target="_blank" rel="nofollow noopener noreferrer">00:12:32</A>:</STRONG> A brief exploration of what we have in project generated by running <CODE>cds init</CODE>, including <CODE>cds.js</CODE> and <CODE>launch.json</CODE> in the <CODE>.vscode</CODE> directory, and the <CODE>common.cds</CODE> file inside the <SPAN class="citation"><a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a>/cds</SPAN> module within the <CODE>node_modules</CODE> directory.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=bwaRcTD5zLs&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h14m38s" target="_blank" rel="nofollow noopener noreferrer">00:14:38</A>:</STRONG> Noting that the <CODE>readme.md</CODE> contains a nice tutorial which is similar to the one we're following.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=bwaRcTD5zLs&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h15m05s" target="_blank" rel="nofollow noopener noreferrer">00:15:05</A>:</STRONG> An overview of the db/srv/app directory name convention in the programming model, and what they are for, and the subtle difference between data definitions in db, and services, for example with an OData flavour, in srv.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=bwaRcTD5zLs&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h16m35s" target="_blank" rel="nofollow noopener noreferrer">00:16:35</A>:</STRONG> Creating <CODE>srv/cat-service.cds</CODE>, which at this stage includes the definition of the entities that would normally go in the data model (in the <CODE>db</CODE> directory).<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=bwaRcTD5zLs&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h17m00s" target="_blank" rel="nofollow noopener noreferrer">00:17:00</A>:</STRONG> Creating the service implementation that provides mock data, noting the fact that the convention is that a js file with the same name as the cds file will provide implementation logic for that service.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=bwaRcTD5zLs&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h17m54s" target="_blank" rel="nofollow noopener noreferrer">00:17:54</A>:</STRONG> Chocolate treat fail.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=bwaRcTD5zLs&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h18m28s" target="_blank" rel="nofollow noopener noreferrer">00:18:28</A>:</STRONG> Considering the advantages of <A href="http://es6-features.org/" target="_blank" rel="nofollow noopener noreferrer">ES6</A> (the 2015 version of JavaScript, effectively) is that some of the constructs allow us to read and write code that flows much more easily when we see it. Case in point here is the <CODE>srv.on ('READ', 'Books', ()=&gt;[ ... ])</CODE> construction.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=bwaRcTD5zLs&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h19m45s" target="_blank" rel="nofollow noopener noreferrer">00:19:45</A>:</STRONG> Adding a <CODE>console.log</CODE> statement to the second function definition in <CODE>cat-service.js</CODE>, expanding the single-expression in the fat arrow definition to a block so we can add a second statement.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=bwaRcTD5zLs&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h20m14s" target="_blank" rel="nofollow noopener noreferrer">00:20:14</A>:</STRONG> A plugin for VS Code that integrates with Twitch to allow participants to cause lines of code to be highlighted: <A class="uri" href="https://github.com/clarkio/vscode-twitch-highlighter" target="_blank" rel="nofollow noopener noreferrer">https://github.com/clarkio/vscode-twitch-highlighter</A>.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=bwaRcTD5zLs&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h20m37s" target="_blank" rel="nofollow noopener noreferrer">00:20:37</A>:</STRONG> Idea of us using <A href="https://code.visualstudio.com/blogs/2017/11/15/live-share" target="_blank" rel="nofollow noopener noreferrer">Live Share</A> on a future episode to collaborate live in the stream on some code.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=bwaRcTD5zLs&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h21m05s" target="_blank" rel="nofollow noopener noreferrer">00:21:05</A>:</STRONG> Currently the service definition contains the entity definitions, which really belong in the data model, not the service. Note, however, that creating a high level service definition is a great way to bootstrap a project, because everyone is on the same page and then two parallel streams of activities can take place after the basic idea has been established - refining the data model and service(s) and building out the UI (based on the service metadata).<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=bwaRcTD5zLs&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h22m30s" target="_blank" rel="nofollow noopener noreferrer">00:22:30</A>:</STRONG> Starting up VS Code's integrated terminal with the shortcut Cmd-`. Also a small ramble about mechanical keyboards, I'm using a <A href="https://candykeys.com/product/vortex-race-3-ansi" target="_blank" rel="nofollow noopener noreferrer">Vortex Race 3</A> with Cherry MX Blue switches, and have an <A href="https://candykeys.com/product/anne-pro-2-gateron-black" target="_blank" rel="nofollow noopener noreferrer">Anne Pro 2</A> with Gateron Brown switches on order.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=bwaRcTD5zLs&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h23m01s" target="_blank" rel="nofollow noopener noreferrer">00:23:01</A>:</STRONG> Starting up the service with <CODE>cds run</CODE>, noting the small difference that we see in the log output from 3.5.0, compared to what we previously saw with 3.0.0, specifically the "serving static resources from ./app" line. We also note that another line of the log output points to a JS implementation for the CatalogService, in <CODE>cat-service.js</CODE>.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=bwaRcTD5zLs&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h24m26s" target="_blank" rel="nofollow noopener noreferrer">00:24:26</A>:</STRONG> Adding a breakpoint to the <CODE>srv.on ('READ', 'Authors', () =&gt; { ... })</CODE> section in <CODE>cat-service.js</CODE>, then a first attempt at running the service in debug mode. The attempt fails, and we look at a solution based on the information in <CODE>launch.json</CODE> and <CODE>cds.js</CODE> within the <CODE>.vscode</CODE> directory.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=bwaRcTD5zLs&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h25m51s" target="_blank" rel="nofollow noopener noreferrer">00:25:51</A>:</STRONG> Making debugging work by replacing the contents of <CODE>cds.js</CODE> with:<BR />
<PRE><CODE>const cds = require('@sap/cds')<BR />
cds.exec()</CODE></PRE><BR />
Debugging launches successfully after this change.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=bwaRcTD5zLs&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h27m08s" target="_blank" rel="nofollow noopener noreferrer">00:27:08</A>:</STRONG> Noting that the indicator on the browser tab is still spinning, followed by a random reminicence, remembering the fact that the indicator on a browser that showed that resources were still being retrieved on a page was called a "<A href="https://en.wikipedia.org/wiki/Throbber" target="_blank" rel="nofollow noopener noreferrer">throbber</A>", which I remember from the <A href="https://en.wikipedia.org/wiki/Cello_(web_browser)" target="_blank" rel="nofollow noopener noreferrer">Cello</A>, <A href="https://en.wikipedia.org/wiki/ViolaWWW" target="_blank" rel="nofollow noopener noreferrer">Viola</A> and <A href="https://en.wikipedia.org/wiki/Netscape_Navigator" target="_blank" rel="nofollow noopener noreferrer">Netscape Navigator</A> browsers of yesteryear.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=bwaRcTD5zLs&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h28m50s" target="_blank" rel="nofollow noopener noreferrer">00:28:50</A>:</STRONG> Starting to modify the service definition by moving the entity definitions out of <CODE>cat-service.cds</CODE> into <CODE>db/data-model.cds</CODE>.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=bwaRcTD5zLs&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h30m15s" target="_blank" rel="nofollow noopener noreferrer">00:30:15</A>:</STRONG> Noting a (new) bug in VS Code where a newly minted directory (<CODE>db/</CODE>), created implicitly when we add that directory name as a path to a new file, doesn't show up immediately in the Explorer.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=bwaRcTD5zLs&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h31m30s" target="_blank" rel="nofollow noopener noreferrer">00:31:30</A>:</STRONG> At this point we have the <CODE>srv/cat-service.cds</CODE> definitions as views, as a series of projections, on individual entity definitions in <CODE>db/data-model.cds</CODE>. These are known as API facades to the entities in the data model, controlling what is and isn't exposed, also restricting access via annotations.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=bwaRcTD5zLs&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h32m58s" target="_blank" rel="nofollow noopener noreferrer">00:32:58</A>:</STRONG> Calling up the Command Palette (Shift-Cmd-P) to use the Refresh facility, which will force a refresh of the Explorer display. Great, thanks Ronnie!<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=bwaRcTD5zLs&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h34m00s" target="_blank" rel="nofollow noopener noreferrer">00:34:00</A>:</STRONG> Looking briefly at the CDS annotations in the projections, specifically <CODE>@readonly</CODE> and <CODE>@insertonly</CODE> that restrict operation access.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=bwaRcTD5zLs&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h34m32s" target="_blank" rel="nofollow noopener noreferrer">00:34:32</A>:</STRONG> Now it's time to generate the SQL DDL to deploy to an actual persistence layer, in this case based on SQLite.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=bwaRcTD5zLs&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h35m12s" target="_blank" rel="nofollow noopener noreferrer">00:35:12</A>:</STRONG> We open up <CODE>package.json</CODE> to see what gets added when we install the <CODE>sqlite3</CODE> module as a development dependency (with the <CODE>-D</CODE> or <CODE>--save-dev</CODE> options).<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=bwaRcTD5zLs&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h37m22s" target="_blank" rel="nofollow noopener noreferrer">00:37:22</A>:</STRONG> Looking at the cds command options, and compiling the <CODE>db/data-model.cds</CODE> definitions. The default output (in the form of Core Schema Notation (CSN) is shown).<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=bwaRcTD5zLs&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h38m26s" target="_blank" rel="nofollow noopener noreferrer">00:38:26</A>:</STRONG> We also look at getting the output in SQL with the <CODE>--to sql</CODE> option (<CODE>-2</CODE> can be used as a shortcut for <CODE>--to</CODE>), plus look at the compiled output for the <CODE>srv/cat-service.cds</CODE> where we see that TABLE and VIEW creation statements have been generated, noting the names of the views as projections (<CODE>SELECT ... FROM</CODE>) on tables.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=bwaRcTD5zLs&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h40m20s" target="_blank" rel="nofollow noopener noreferrer">00:40:20</A>:</STRONG> Deploying the definitions to the persistence layer like this:<BR />
<PRE><CODE>cds deploy --to sqlite:db/my-bookshop.db</CODE></PRE><BR />
and noting a new stanza appearing in the <CODE>package.json</CODE> file that describes the database.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=bwaRcTD5zLs&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h41m19s" target="_blank" rel="nofollow noopener noreferrer">00:41:19</A>:</STRONG> Answering a question about the relationship between the <CODE>namespace my.bookshop</CODE> declaration and the underlying database, including looking at what happens to the generated DDL statements when we temporarily change the namespace definition to <CODE>my.banana</CODE>.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=bwaRcTD5zLs&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h43m14s" target="_blank" rel="nofollow noopener noreferrer">00:43:14</A>:</STRONG> At this stage we have our data model and service deployed to the persistence layer, so we have a look around with the <CODE>sqlite</CODE> command line client, using the <CODE>.dump</CODE> command to see the data definitions. We also tried to look at the database with the SQLite extension for VS Code but there was a strange issue with that for some unknown reason (it has been working very well for me until now).<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=bwaRcTD5zLs&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h47m09s" target="_blank" rel="nofollow noopener noreferrer">00:47:09</A>:</STRONG> Adding some initial data by supplying it in CSV files (in a <CODE>csv/</CODE> directory within <CODE>db/</CODE>) that follow a specific naming convention, which is based on the fully qualified table names - for example <CODE>my.bookshop-Authors.csv</CODE>.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=bwaRcTD5zLs&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h49m10s" target="_blank" rel="nofollow noopener noreferrer">00:49:10</A>:</STRONG> Deploying again, we see a new message "initializing from csv files at ./db/csv..." and when we inspect the statements with <CODE>.dump</CODE> again in <CODE>sqlite3</CODE> we see <CODE>INSERT</CODE> statements for the data.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=bwaRcTD5zLs&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h49m55s" target="_blank" rel="nofollow noopener noreferrer">00:49:55</A>:</STRONG> We can now remove the static data implementation in <CODE>srv/cat-service.js</CODE> (we didn't remove the file itself, which means that we still get an "impl: cat-service.js" message when we execute <CODE>cds run</CODE> but of course that's only because the file is still there (but empty).<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=bwaRcTD5zLs&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h50m48s" target="_blank" rel="nofollow noopener noreferrer">00:50:48</A>:</STRONG> We now check to see if there are any books available via the service on localhost, and indeed there are - the data is coming from the database.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=bwaRcTD5zLs&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h51m28s" target="_blank" rel="nofollow noopener noreferrer">00:51:28</A>:</STRONG> Firing up Postman to load in a collection of test requests - we do this directly from the collection URL rather than downloading the file and uploading it into Postman (see "<A href="https://blogs.sap.com/2018/04/16/monday-morning-thoughts-upload-download-in-a-cloud-native-world/" target="_blank" rel="noopener noreferrer">Monday morning thoughts: upload / download in a cloud native world</A>" for more on this).<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=bwaRcTD5zLs&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h52m10s" target="_blank" rel="nofollow noopener noreferrer">00:52:10</A>:</STRONG> Using some of the OData requests in the collection to test the service.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=bwaRcTD5zLs&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h53m00s" target="_blank" rel="nofollow noopener noreferrer">00:53:00</A>:</STRONG> Adding some custom logic to the (currently empty) <CODE>srv/cat-service.js</CODE> implementation file. It also adds a discount when books are retrieved, using a special version of the callback with the <CODE>each</CODE> parameter for the function definition.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=bwaRcTD5zLs&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h55m42s" target="_blank" rel="nofollow noopener noreferrer">00:55:42</A>:</STRONG> Restarting the service in debug mode and testing it via Postman, checking first the stock for one of the books, then placing an order for that book, inspecting thereafter the stock level.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=bwaRcTD5zLs&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h56m50s" target="_blank" rel="nofollow noopener noreferrer">00:56:50</A>:</STRONG> Looking briefly at the UUID type (in <CODE>node_modules/@sap/cds/common.cds</CODE>), which will be used in the order operations we're about to perform.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=bwaRcTD5zLs&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h58m51s" target="_blank" rel="nofollow noopener noreferrer">00:58:51</A>:</STRONG> Debugging the implementation for the <CODE>srv.before ('CREATE', 'Orders', async (req) =&gt; { ... })</CODE> and inspecting the incoming request that was received.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=bwaRcTD5zLs&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h59m48s" target="_blank" rel="nofollow noopener noreferrer">00:59:48</A>:</STRONG> Noting that the mechanism to reduce stock when books are ordered has the success of the order (and reduction) controlled with a <CODE>.where</CODE> clause in the fluid API of CAPM's CDS Query Language (CQL).
---
Annotated links: Episode 4 of Hands-on SAP dev with qmacro
technology-blog-sap
2019-03-08
https://community.sap.com/t5/technology-blogs-by-sap/annotated-links-episode-4-of-hands-on-sap-dev-with-qmacro/ba-p/13412505
2019-03-08-annotated-links-episode-4-of-hands-on-sap-dev-with-qmacro
<EM>This is a searchable description of the content of a live stream recording, specifically <STRONG>"Episode 4 - Debugging CAPM and a look at the cds REPL"</STRONG> in the "<A href="https://bit.ly/handsonsapdev" target="_blank" rel="nofollow noopener noreferrer">Hands-on SAP dev with qmacro</A>" series. There are links directly to specific highlights in the video recording. For links to annotations of other episodes, please see the "<A href="https://bit.ly/handsonsapdev#replays" target="_blank" rel="nofollow noopener noreferrer">Catch the replays</A>" section of the series blog post.</EM><BR />
<BR />
This episode, titled "<A href="https://bit.ly/handsonsapdev#ep4" target="_blank" rel="nofollow noopener noreferrer">Debugging CAPM and a look at the cds REPL</A>", was streamed live on Wed 13 Feb 2019 and is approximately one hour in length. The stream recording is <A href="https://www.youtube.com/watch?v=Dc0XZXoirf8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0" target="_blank" rel="nofollow noopener noreferrer">available on YouTube</A>.<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2019/03/Screen-Shot-2019-03-08-at-15.41.28.png" /><BR />
<BR />
Below is a brief synopsis, and links to specific highlights - use these links to jump directly to particular places of interest in the recording, based on 'hh:mm:ss' style timestamps.<BR />
<H2 id="brief-synopsis" id="toc-hId-929726983">Brief synopsis</H2><BR />
We take a look at how we can use VS Code debugging facilities to debug CAPM services, and also start to explore the cds command line toolâs REPL (Read Evaluate Print Loop) environment.<BR />
<H2 id="links-to-specific-highlights" id="toc-hId-733213478">Links to specific highlights</H2><BR />
<STRONG><A href="https://www.youtube.com/watch?v=Dc0XZXoirf8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h01m15s" target="_blank" rel="nofollow noopener noreferrer">00:01:15</A>:</STRONG> Answering Pierre Dominique's question about Wednesday streams. Basically Friday is the regular slot that I run every week, always at the same time - 0800 UTC+0 (Manchester). I run an <EM>occasional</EM> midweek slot, and that will be on Wednesdays when it does happen. See the <A href="https://bit.ly/handsonsapdev#schedule" target="_blank" rel="nofollow noopener noreferrer">schedule</A> section of the main live stream blog post for details, including start times around the world.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=Dc0XZXoirf8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h03m38s" target="_blank" rel="nofollow noopener noreferrer">00:03:38</A>:</STRONG> Looking at the blog post <A href="https://blogs.sap.com/2019/02/04/cloudfoundryfun-upgrade-cloud-foundry-with-a-new-repl-feature/" target="_blank" rel="noopener noreferrer">#CloudFoundryFun - Upgrade Cloud Foundry With A New REPL Feature</A> by <SPAN class="mention-scrubbed">mariusobert</SPAN>, where he says "a REPL makes your application runtime more tangible".<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=Dc0XZXoirf8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h06m30s" target="_blank" rel="nofollow noopener noreferrer">00:06:30</A>:</STRONG> Looking at where we are in the tutorial, and opening up (in VS Code) a copy of the project at where we'd got to, in the <CODE>bookshop/</CODE> directory.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=Dc0XZXoirf8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h07m30s" target="_blank" rel="nofollow noopener noreferrer">00:07:30</A>:</STRONG> Looking at the SQLite database using the Database Explorer extension.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=Dc0XZXoirf8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h08m15s" target="_blank" rel="nofollow noopener noreferrer">00:08:15</A>:</STRONG> Executing <CODE>cds help repl</CODE> to get a quick overview of what the REPL is and does for us. Noting also that the overview points to the regular <A href="https://nodejs.org/api/repl.html" target="_blank" rel="nofollow noopener noreferrer">Node.js REPL documentation</A> ... because that is what the CDS REPL is based on ... a Node.js REPL with extra magic.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=Dc0XZXoirf8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h09m34s" target="_blank" rel="nofollow noopener noreferrer">00:09:34</A>:</STRONG> Starting a Node.js REPL and having a little play, noting that there's command line history built in. We look in <CODE>~/.node_repl_history</CODE>.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=Dc0XZXoirf8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h11m00s" target="_blank" rel="nofollow noopener noreferrer">00:11:00</A>:</STRONG> Looking inside the <CODE>node_modules/</CODE> directory, particularly in the <CODE>bin/</CODE> subdirectory, and we find the <CODE>repl.js</CODE> script which represents the CDS REPL, and as expected it's just using the Node.js REPL. Lovely!<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=Dc0XZXoirf8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h13m04s" target="_blank" rel="nofollow noopener noreferrer">00:13:04</A>:</STRONG> Starting up a CDS REPL with <CODE>cds repl</CODE>, and looking at the <A href="https://help.sap.com/viewer/65de2977205c403bbc107264b8eccf4b/Cloud/en-US/d2ee648522044ea19d3b5126c29692b5.html" target="_blank" rel="noopener noreferrer">References</A> section of the CAP documentation on the SAP Help Portal which gives us some insight into the JavaScript API.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=Dc0XZXoirf8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h14m25s" target="_blank" rel="nofollow noopener noreferrer">00:14:25</A>:</STRONG> Starting up <CODE>tmux</CODE> to manage our workspace better.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=Dc0XZXoirf8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h15m50s" target="_blank" rel="nofollow noopener noreferrer">00:15:50</A>:</STRONG> Instantiating a reference to the CDS package which also represents a connection, with<BR />
<DIV><BR />
<PRE class="sourceCode javascript"><CODE class="sourceCode javascript"><SPAN class="kw">const</SPAN> cds <SPAN class="op">=</SPAN> <SPAN class="at">require</SPAN>(<SPAN class="st">'@sap/cds'</SPAN>).<SPAN class="at">connect</SPAN>()</CODE></PRE><BR />
</DIV><BR />
Note that the CDS REPL history is in <CODE>~/.cds_repl_history</CODE> as opposed to <CODE>~/.node_repl_history</CODE>.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=Dc0XZXoirf8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h16m52s" target="_blank" rel="nofollow noopener noreferrer">00:16:52</A>:</STRONG> Exploring what we have in the <CODE>cds</CODE> constant, using <CODE>tmux</CODE>'s pane scroll feature (Ctrl-A [) to scroll up.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=Dc0XZXoirf8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h20m05s" target="_blank" rel="nofollow noopener noreferrer">00:20:05</A>:</STRONG> Examining a more detailed version of the call, specifying a value 'db' for the <CODE>connect()</CODE> call, and seeing that it refers to a section in the <CODE>cds</CODE> stanza inside <CODE>package.json</CODE>.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=Dc0XZXoirf8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h21m15s" target="_blank" rel="nofollow noopener noreferrer">00:21:15</A>:</STRONG> Pierre Dominique reminds us that we can use some of the builtin REPL commands, for example to disconnect. Using <CODE>.help</CODE> to see what they are, we get:<BR />
<PRE><CODE>.break    Sometimes you get stuck, this gets you out<BR />
.clear    Alias for .break<BR />
.editor   Enter editor mode<BR />
.exit     Exit the repl<BR />
.help     Print this help message<BR />
.load     Load JS from a file into the REPL session<BR />
.save     Save all evaluated commands in this REPL session to a file</CODE></PRE><BR />
<STRONG><A href="https://www.youtube.com/watch?v=Dc0XZXoirf8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h21m50s" target="_blank" rel="nofollow noopener noreferrer">00:21:50</A>:</STRONG> Seeing that we can use command completion on the <CODE>cds</CODE> constant, and looking at <CODE>cds.env</CODE>, which comes from <CODE>package.json</CODE>.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=Dc0XZXoirf8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h22m15s" target="_blank" rel="nofollow noopener noreferrer">00:22:15</A>:</STRONG> Because we're connected to the database we can use <CODE>cds.entities</CODE> to look at the entities in there.The output is in canonical form (CSN), and we look at the keys of the object returned with <CODE>Object.keys(cds.entities)</CODE> to get <CODE>['Books', 'Authors', 'Orders']</CODE>. We dig in further by looking at one of the entities with <CODE>cds.entities.Authors</CODE>.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=Dc0XZXoirf8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h23m15s" target="_blank" rel="nofollow noopener noreferrer">00:23:15</A>:</STRONG> We can do more, such as <CODE>cds.entities.Authors.keys</CODE> and <CODE>cds.entities.Authors.elements</CODE> to inspect the keys and elements (respectively) of the Authors entity.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=Dc0XZXoirf8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h24m13s" target="_blank" rel="nofollow noopener noreferrer">00:24:13</A>:</STRONG> Looking at the documentation for <A href="https://help.sap.com/viewer/65de2977205c403bbc107264b8eccf4b/Cloud/en-US/d844e8c7fa7f4160a3b17e564a2a4352.html" target="_blank" rel="noopener noreferrer">cds.ql</A> in the SAP Help Portal to see that it provides fluent API functions for writing queries in JavaScript, including <CODE>INSERT.into</CODE>, <CODE>UPDATE</CODE>, <CODE>DELETE.from</CODE> and <CODE>SELECT.from</CODE>.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=Dc0XZXoirf8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h27m30s" target="_blank" rel="nofollow noopener noreferrer">00:27:30</A>:</STRONG> Starting to play around with the fluent API, using command completion to help us. We try: <CODE>cds.ql.SELECT</CODE>, or actually (as <CODE>SELECT</CODE> is available globally):<BR />
<PRE><CODE>SELECT.from('Books')</CODE></PRE><BR />
(which is not SQL but JavaScript, remember!) which returns:<BR />
<PRE><CODE>{ SELECT: { from: {ref:['Books']} } }</CODE></PRE><BR />
which is in the canonical representation of CDS queries known as Core Query Notation (CQN), the query equivalent of Core Schema Notation (CSN).<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=Dc0XZXoirf8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h30m00s" target="_blank" rel="nofollow noopener noreferrer">00:30:00</A>:</STRONG> Looking at loading and compiling definitions programatically, like this:<BR />
<DIV><BR />
<PRE class="sourceCode javascript"><CODE class="sourceCode javascript"><SPAN class="va">cds</SPAN>.<SPAN class="at">load</SPAN>(<SPAN class="st">'db'</SPAN>).<SPAN class="at">then</SPAN>(<SPAN class="st">'cds.compile.to.sql'</SPAN>)</CODE></PRE><BR />
</DIV><BR />
which produces something like this:<BR />
<PRE><CODE>[ 'CREATE TABLE my_bookshop_Authors (\n  ID INTEGER,\n  name NVARCHAR(5000),\n  PRIMARY KEY(ID)\n)',<BR />
  'CREATE TABLE my_bookshop_Books (\n  ID INTEGER,\n  title NVARCHAR(5000),\n  stock INTEGER,\n  author_ID INTEGER,\n  PRIMARY KEY(ID)\n)',<BR />
  'CREATE TABLE my_bookshop_Orders (\n  modifiedAt SECONDDATE,\n  createdAt SECONDDATE,\n  createdBy NVARCHAR(255),\n  modifiedBy NVARCHAR(255),\n  ID NVARCHAR(36),\n  amount INTEGER,\n  book_ID INTEGER,\n  country_code NVARCHAR(3),\n  PRIMARY KEY(ID)\n)',<BR />
  'CREATE TABLE sap_common_Countries (\n  name NVARCHAR(255),\n  descr NVARCHAR(1000),\n  code NVARCHAR(3),\n  PRIMARY KEY(code)\n)' ]</CODE></PRE><BR />
Note the use of promises here!<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=Dc0XZXoirf8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h30m55s" target="_blank" rel="nofollow noopener noreferrer">00:30:55</A>:</STRONG> Getting back to <CODE>{ SELECT: { from: {ref:['Books']} } }</CODE>, we continue our journey, by feeding that in to the <CODE>cds.run</CODE> function:<BR />
<DIV><BR />
<PRE class="sourceCode javascript"><CODE class="sourceCode javascript"><SPAN class="va">cds</SPAN>.<SPAN class="at">run</SPAN>(<SPAN class="va">SELECT</SPAN>.<SPAN class="at">from</SPAN>(<SPAN class="st">'Books'</SPAN>))</CODE></PRE><BR />
</DIV><BR />
Note however that we actually have to specify the full name of the table, i.e.<BR />
<DIV><BR />
<PRE class="sourceCode javascript"><CODE class="sourceCode javascript"><SPAN class="va">cds</SPAN>.<SPAN class="at">run</SPAN>(<SPAN class="va">SELECT</SPAN>.<SPAN class="at">from</SPAN>(<SPAN class="st">'my.bookshop.Books'</SPAN>))</CODE></PRE><BR />
</DIV><BR />
and this produces:<BR />
<PRE><CODE>[ { ID: 201, title: 'Wuthering Heights', stock: 3, author_ID: 101 },<BR />
  { ID: 207, title: 'Jane Eyre', stock: 11, author_ID: 107 },<BR />
  { ID: 251, title: 'The Raven', stock: 333, author_ID: 150 },<BR />
  { ID: 252, title: 'Eleonora', stock: 555, author_ID: 150 },<BR />
  { ID: 271, title: 'Catweazle', stock: 22, author_ID: 170 } ]</CODE></PRE><BR />
Excellent!<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=Dc0XZXoirf8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h32m05s" target="_blank" rel="nofollow noopener noreferrer">00:32:05</A>:</STRONG> We see that we don't actually have to know the 'my.bookshop' prefix for 'Books' ... we can do this:<BR />
<DIV><BR />
<PRE class="sourceCode javascript"><CODE class="sourceCode javascript">b <SPAN class="op">=</SPAN> <SPAN class="va">cds</SPAN>.<SPAN class="va">entities</SPAN>.<SPAN class="at">Books</SPAN><BR />
<SPAN class="va">cds</SPAN>.<SPAN class="at">run</SPAN>(<SPAN class="va">SELECT</SPAN>.<SPAN class="at">from</SPAN>(b))</CODE></PRE><BR />
</DIV><BR />
and get the same result (the five records) ... as <CODE>b</CODE> is now a representation of the Books entityset. (We see that the value of <CODE>b.name</CODE> is 'my.bookshop.Books' too).<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=Dc0XZXoirf8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h33m45s" target="_blank" rel="nofollow noopener noreferrer">00:33:45</A>:</STRONG> Trying an insert. First we build up the CQN object (the output from each line is shown in subsequent comment lines):<BR />
<PRE><CODE>add_dna = INSERT.into(cds.entities.Authors)<BR />
// -&gt; { INSERT: { into: 'my.bookshop.Authors' } }<BR />
<BR />
add_dna.columns('ID', 'name')<BR />
// -&gt; { INSERT: { into: 'my.bookshop.Authors', columns: ['ID', 'name'] } }<BR />
<BR />
add_dna.columns('ID', 'name').values(42, 'Douglas Adams')</CODE></PRE><BR />
This final evaluation gives us:<BR />
<PRE><CODE>{ INSERT:<BR />
  { into: 'my.bookshop.Authors',<BR />
    columns: [ 'ID', 'name' ],<BR />
    values: [ 42, 'Douglas Adams' ] } }</CODE></PRE><BR />
<STRONG><A href="https://www.youtube.com/watch?v=Dc0XZXoirf8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h37m10s" target="_blank" rel="nofollow noopener noreferrer">00:37:10</A>:</STRONG> Running the query gives us some result:<BR />
<PRE><CODE>cds.run(add_dna)<BR />
// -&gt; 1</CODE></PRE><BR />
Running a query on the Authors entity (<CODE>cds.run(SELECT.from(cds.entities.Authors))</CODE>) shows that the insert was successful:<BR />
<PRE><CODE>[ { ID: 42, name: 'Douglas Adams' },<BR />
  { ID: 101, name: 'Emily BrontÃ«' },<BR />
  { ID: 107, name: 'Charlote BrontÃ«' },<BR />
  { ID: 150, name: 'Edgar Allen Poe' },<BR />
  { ID: 170, name: 'Richard Carpenter' } ]</CODE></PRE><BR />
We can also see the new record with the OData query: <CODE><A href="http://localhost:4004/catalog/Authors" target="test_blank" rel="nofollow noopener noreferrer">http://localhost:4004/catalog/Authors</A></CODE>.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=Dc0XZXoirf8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h39m00s" target="_blank" rel="nofollow noopener noreferrer">00:39:00</A>:</STRONG> Moving to VS Code now for a bit of debugging.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=Dc0XZXoirf8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h40m51s" target="_blank" rel="nofollow noopener noreferrer">00:40:51</A>:</STRONG> Looking at the <CODE>.vscode/launch.json</CODE> configuration file which has some debugging settings, not CDS specific or CAP specific but general to VS Code. By the way, this is the newer version of the "Bookshop" sample project that Christian was using to demonstrate features to us in the <A href="https://bit.ly/handsonsapdev#ep3" target="_blank" rel="nofollow noopener noreferrer">previous episode</A>.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=Dc0XZXoirf8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h43m23s" target="_blank" rel="nofollow noopener noreferrer">00:43:23</A>:</STRONG> Using <CODE>npm run setup</CODE> to install the Node modules and perform the deployment, as in <CODE>package.json</CODE> the 'setup' script is defined to be:<BR />
<PRE><CODE>npm i &amp;&amp; cds deploy -2 sqlite:bookshop.db</CODE></PRE><BR />
<STRONG><A href="https://www.youtube.com/watch?v=Dc0XZXoirf8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h45m00s" target="_blank" rel="nofollow noopener noreferrer">00:45:00</A>:</STRONG> With 'convention over configuration', we have a file <CODE>cat-service.js</CODE>, and this means that the runtime will use the code in <CODE>cat-service.js</CODE> to extend the default implementation of the CRUD+Q service defined in <CODE>cat-service.cds</CODE>. We spend some time exploring what the different handlers are, and how to inject logic into the flow, with service provider methods like <CODE>.before</CODE> and <CODE>.after</CODE>.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=Dc0XZXoirf8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h49m25s" target="_blank" rel="nofollow noopener noreferrer">00:49:25</A>:</STRONG> A brief reminder of the naming convetions in the <A href="https://help.sap.com/viewer/65de2977205c403bbc107264b8eccf4b/Cloud/en-US/e4a7559baf9f4e4394302442745edcd9.html" target="_blank" rel="noopener noreferrer">Best Practices</A> section of the documentation on SAP Help Portal.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=Dc0XZXoirf8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h51m28s" target="_blank" rel="nofollow noopener noreferrer">00:51:28</A>:</STRONG> We dig into the signature of the <CODE>.after</CODE> method ("service.after (event, entity?, handler) : this"), noting that the single parameter <CODE>each</CODE> is a special case, a convenient shortcut for a per-row handler. We insert a <CODE>console.log</CODE> statement to see what the values are when we run it.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=Dc0XZXoirf8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h53m35s" target="_blank" rel="nofollow noopener noreferrer">00:53:35</A>:</STRONG> Adding a breakpoint to the <CODE>console.log</CODE> line, we can see that execution pauses for us to have a look around and even modify things.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=Dc0XZXoirf8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h54m47s" target="_blank" rel="nofollow noopener noreferrer">00:54:47</A>:</STRONG> Modifying the <CODE>srv.after</CODE> call to use the <CODE>req</CODE> pattern that makes available the inbound request:<BR />
<DIV><BR />
<PRE class="sourceCode javascript"><CODE class="sourceCode javascript"><SPAN class="va">srv</SPAN>.<SPAN class="at">after</SPAN> (<SPAN class="st">'READ'</SPAN><SPAN class="op">,</SPAN> <SPAN class="st">'Books'</SPAN><SPAN class="op">,</SPAN> (books<SPAN class="op">,</SPAN> req) <SPAN class="op">=&gt;</SPAN> <SPAN class="op">{</SPAN><BR />
  ...<BR />
<SPAN class="op">}</SPAN>)</CODE></PRE><BR />
</DIV><BR />
Now in this approach we can get access, in the debug console, to all the entries that have been retrieved (in <CODE>books</CODE>), and also look at the actual request (in <CODE>req</CODE>). This is just the start, we're just scratching the surface!
---
Annotated links: Episode 3 of Hands-on SAP dev with qmacro
technology-blog-sap
2019-03-07
https://community.sap.com/t5/technology-blogs-by-sap/annotated-links-episode-3-of-hands-on-sap-dev-with-qmacro/ba-p/13411938
2019-03-07-annotated-links-episode-3-of-hands-on-sap-dev-with-qmacro
<EM>This is a searchable description of the content of a live stream recording, specifically <STRONG>"Episode 3 - Special guest edition: Interview with core CAPM developers from the mothership!"</STRONG> in the "<A href="https://bit.ly/handsonsapdev" target="_blank" rel="nofollow noopener noreferrer">Hands-on SAP dev with qmacro</A>" series. There are links directly to specific highlights in the video recording. For links to annotations of other episodes, please see the "<A href="https://bit.ly/handsonsapdev#replays" target="_blank" rel="nofollow noopener noreferrer">Catch the replays</A>" section of the series blog post.</EM><BR />
<BR />
This episode, titled "<A href="https://bit.ly/handsonsapdev#ep3" target="_blank" rel="nofollow noopener noreferrer">Special guest edition: Interview with core CAPM developers from the mothership!</A>", was streamed live on Fri 08 Feb 2019 and is approximately one hour in length. The stream recording is <A href="https://www.youtube.com/watch?v=iFLlTpwOujw&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0" target="_blank" rel="nofollow noopener noreferrer">available on YouTube</A>.<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2019/03/Screen-Shot-2019-03-07-at-18.56.07.png" /><BR />
<BR />
Below is a brief synopsis, and links to specific highlights - use these links to jump directly to particular places of interest in the recording, based on 'hh:mm:ss' style timestamps.<BR />
<H2 id="brief-synopsis" id="toc-hId-929701132">Brief synopsis</H2><BR />
This episode is rather special, in that I interview Christian Georgi from the core CAPM development team at the mothership in Walldorf. We talk CAPM, have some Q&amp;A Christian shows us some cool live demos.<BR />
<H2 id="links-to-specific-highlights" id="toc-hId-733187627">Links to specific highlights</H2><BR />
<STRONG><A href="https://www.youtube.com/watch?v=iFLlTpwOujw&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h03m10s" target="_blank" rel="nofollow noopener noreferrer">00:03:10</A>:</STRONG> Welcoming Christian Georgi to the live stream.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=iFLlTpwOujw&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h03m50s" target="_blank" rel="nofollow noopener noreferrer">00:03:50</A>:</STRONG> Noticing that we are both extra geeky as we're wearing not only the same tshirt (the SAP Cloud Application Programming Model one) but also the same white long sleeve shirt underneath. As <A href="https://twitter.com/fredverheul" target="_blank" rel="nofollow noopener noreferrer">Fred Verheul</A> remarked: "Fashionistas"!<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=iFLlTpwOujw&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h05m38s" target="_blank" rel="nofollow noopener noreferrer">00:05:38</A>:</STRONG> Learning from Christian how CAPM (or "CAP") came about.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=iFLlTpwOujw&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h10m15s" target="_blank" rel="nofollow noopener noreferrer">00:10:15</A>:</STRONG> Hearing from Christian about how CAPM fits into the SAP developers overall toolkit today.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=iFLlTpwOujw&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h13m20s" target="_blank" rel="nofollow noopener noreferrer">00:13:20</A>:</STRONG> Talking about how guidance and opinionated software &amp; best practices can be useful in a world full of choices.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=iFLlTpwOujw&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h14m40s" target="_blank" rel="nofollow noopener noreferrer">00:14:40</A>:</STRONG> Finding out where CAPM is used by internal teams within SAP, as this is often where toolkits and other offerings start out and find their feet. One example is the app formerly known as "Excise Duty", a special tax app for breweries in Germany. Wonderful!<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=iFLlTpwOujw&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h16m58s" target="_blank" rel="nofollow noopener noreferrer">00:16:58</A>:</STRONG> Talking about support for Java and Node.js in SAP Web IDE and locally, from a question asked by Pierre Dominique. (Node.js support is coming back to SAP Web IDE, for CDS 3.x ... and it's already possible to build and run Java locally).<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=iFLlTpwOujw&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h18m00s" target="_blank" rel="nofollow noopener noreferrer">00:18:00</A>:</STRONG> Breaking news! Announcement on the stream that a new version of the <CODE><a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a>/cds</CODE> is being released today, and Christian will be pressing the big red button.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=iFLlTpwOujw&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h19m20s" target="_blank" rel="nofollow noopener noreferrer">00:19:20</A>:</STRONG> Talking about the REPL (Read-Evaluate-Print-Loop) feature in the <CODE>cds</CODE> command line utility, born from one of Daniel Hutzel's "night programming sessions" :-). With the REPL you can programmatically interact with the runtime. See <A href="https://blogs.sap.com/2019/02/04/cloudfoundryfun-upgrade-cloud-foundry-with-a-new-repl-feature" target="_blank" rel="noopener noreferrer">CloudFoundryFun #1 â Upgrade Cloud Foundry With A New REPL Feature</A> by <SPAN class="mention-scrubbed">mariusobert</SPAN> for more on REPLs.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=iFLlTpwOujw&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h21m12s" target="_blank" rel="nofollow noopener noreferrer">00:21:12</A>:</STRONG> Christian refers to CSN, pronounced "season", which is the canonical model structure used internally in CAP (and we've seen this in other episodes, in fact, including the <A href="https://blogs.sap.com//bit.ly/handsonsapdev#ep2" target="_blank" rel="noopener noreferrer">previous episode</A> as the default output from the execution of a <CODE>cds compile</CODE> command.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=iFLlTpwOujw&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h22m56s" target="_blank" rel="nofollow noopener noreferrer">00:22:56</A>:</STRONG> Time for the live demonstrations by Christian.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=iFLlTpwOujw&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h24m08s" target="_blank" rel="nofollow noopener noreferrer">00:24:08</A>:</STRONG> A message from OBS, my streaming software: "Streaming encoding overload"!<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=iFLlTpwOujw&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h24m44s" target="_blank" rel="nofollow noopener noreferrer">00:24:44</A>:</STRONG> Starting to look at a slightly updated version of the "bookshop" demo app, which is going to be used consistently throughout the CAP rollout materials, especially for Node.js.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=iFLlTpwOujw&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h25m10s" target="_blank" rel="nofollow noopener noreferrer">00:25:10</A>:</STRONG> The updated VS Code has new features, which Christian briefly explores, before enabling the "screencast mode" feature. And he's bringing the feature to Eclipse, too. Awesome!<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=iFLlTpwOujw&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h27m00s" target="_blank" rel="nofollow noopener noreferrer">00:27:00</A>:</STRONG> Taking a look at the <CODE>data-model.cds</CODE>, talking about how easy it is to navigate through the code, across the files, in VS Code too. Remembering that CAP uses the NPM module system to load up and find CDS files.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=iFLlTpwOujw&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h28m35s" target="_blank" rel="nofollow noopener noreferrer">00:28:35</A>:</STRONG> Mention of dependencies that can be defined, in <CODE>package.json</CODE>, on another CDS model, using the <CODE>git</CODE> URL scheme.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=iFLlTpwOujw&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h29m30s" target="_blank" rel="nofollow noopener noreferrer">00:29:30</A>:</STRONG> Noting that you don't need to include the <CODE>.cds</CODE> extension explicitly when referring to other files. This gives the module provider the chance to provide not only CDS sources but compiled CSN. Nice! Also, putting files manually directly into the <CODE>node_modules</CODE> directory works too - you don't need to use NPM to install.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=iFLlTpwOujw&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h31m52s" target="_blank" rel="nofollow noopener noreferrer">00:31:52</A>:</STRONG> Showing code completion for file and directory paths when specifying a <CODE>using</CODE> statement, powered also by the Language Server Protocol (LSP).<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=iFLlTpwOujw&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h34m10s" target="_blank" rel="nofollow noopener noreferrer">00:34:10</A>:</STRONG> Relaying Fred Verheul's question on extending S/4HANA, on reusing existing data models from the ABAP backends, just applying the necessary extensions. The answer involves translating the OData API back into CSN!<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=iFLlTpwOujw&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h36m45s" target="_blank" rel="nofollow noopener noreferrer">00:36:45</A>:</STRONG> Looking at the elements in the <CODE>managed</CODE> type (in <CODE>common.cds</CODE>) that provide administrative data, avoiding re-invention each time. A lovely simple solution, with some complexity &amp; heavy lifting hidden, no doubt!<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=iFLlTpwOujw&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h38m45s" target="_blank" rel="nofollow noopener noreferrer">00:38:45</A>:</STRONG> Looking at the <CODE>localized</CODE> keyword, which is a feature that is nearing completion at the time of recording. We got a sneak preview on Christian's machine, too, in the context of the Fiori frontend part to the bookshop sample, which is also new. BrontÃ«'s "Wuthering Heights" in German is "SturmhÃ¶he". Who knew?! The localisation feature requires some heavy lifting on the database, as you can well imagine.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=iFLlTpwOujw&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h43m38s" target="_blank" rel="nofollow noopener noreferrer">00:43:38</A>:</STRONG> You don't need to specify the <CODE>compile</CODE> option as it's default for the <CODE>cds</CODE> command, so when Christian uses <CODE>cds srv/ -2 sql</CODE> it works fine. Here in the output we see a window into how things are generated underneath for the localisation. Note that it's different between SQL and HANA because of the features that can be used in HANA itself.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=iFLlTpwOujw&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h45m00s" target="_blank" rel="nofollow noopener noreferrer">00:45:00</A>:</STRONG> Looking at some early works on temporal aspects of data, with the abstract entity <CODE>temporal</CODE>, which we recognise from HR data sets.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=iFLlTpwOujw&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h47m25s" target="_blank" rel="nofollow noopener noreferrer">00:47:25</A>:</STRONG> Discussing <A href="https://twitter.com/vobu" target="_blank" rel="nofollow noopener noreferrer">Volker Buzek</A>'s question on exposing CDS as openAPI, and then Pierre Dominique's question on exposing a GraphQL endpoint (for more on GraphQL see <A href="https://blogs.sap.com/2018/09/03/monday-morning-thoughts-considering-graphql/" target="_blank" rel="noopener noreferrer">Monday morning thoughts: considering GraphQL</A>). GraphQL is on the roadmap but with no fixed date yet.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=iFLlTpwOujw&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h53m00s" target="_blank" rel="nofollow noopener noreferrer">00:53:00</A>:</STRONG> Looking at the <CODE>admin-service.cds</CODE> which has service notation exposing entities to the outside world, and the use of the <CODE>excluding</CODE> keyword to exclude fields from entities (which is often better than implicitly <EM>including</EM> fields because of the problems that causes with extensibility).<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=iFLlTpwOujw&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h55m06s" target="_blank" rel="nofollow noopener noreferrer">00:55:06</A>:</STRONG> Mentioning a small gotcha I encountered when trying to use <CODE>excluding</CODE> - I'd forgotten to re-deploy to the persistence layer - the keyword implies modifications at the view level in the database (note that the services are reflected using views in the database, leveraging native database capabilities rather than writing code above the persistence layer).<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=iFLlTpwOujw&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h57m15s" target="_blank" rel="nofollow noopener noreferrer">00:57:15</A>:</STRONG> Talking about the <A href="https://marketplace.visualstudio.com/items?itemName=alexcvzz.vscode-sqlite" target="_blank" rel="nofollow noopener noreferrer">SQLite Explorer extension</A> for VS Code, very useful.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=iFLlTpwOujw&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h57m41s" target="_blank" rel="nofollow noopener noreferrer">00:57:41</A>:</STRONG> Wrapping up with Christian, what a great guest. Thank you <SPAN class="mention-scrubbed">christian.georgi</SPAN>!
---
Annotated links: Episode 2 of Hands-on SAP dev with qmacro
technology-blog-sap
2019-03-06
https://community.sap.com/t5/technology-blogs-by-sap/annotated-links-episode-2-of-hands-on-sap-dev-with-qmacro/ba-p/13411298
2019-03-06-annotated-links-episode-2-of-hands-on-sap-dev-with-qmacro
<EM>This is a searchable description of the content of a live stream recording, specifically <STRONG>"Episode 2 - Starting to build a bookshop backend service with CAPM"</STRONG> in the "<A href="https://bit.ly/handsonsapdev" target="_blank" rel="nofollow noopener noreferrer">Hands-on SAP dev with qmacro</A>" series. There are links directly to specific highlights in the video recording. For links to annotations of other episodes, please see the "<A href="https://bit.ly/handsonsapdev#replays" target="_blank" rel="nofollow noopener noreferrer">Catch the replays</A>" section of the series blog post.</EM><BR />
<BR />
This episode, titled "<A href="https://bit.ly/handsonsapdev#ep2" target="_blank" rel="nofollow noopener noreferrer">Starting to build a bookshop backend service with CAPM</A>", was streamed live on Fri 01 Feb 2019 and is approximately one hour in length. The stream recording is <A href="https://www.youtube.com/watch?v=583eQZFfWgE&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0" target="_blank" rel="nofollow noopener noreferrer">available on YouTube</A>.<BR />
<H2 id="toc-hId-929694591"><IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2019/03/Screen-Shot-2019-03-06-at-17.33.07.png" /></H2><BR />
&nbsp;<BR />
<BR />
Below is a brief synopsis, and links to specific highlights - use these links to jump directly to particular places of interest in the recording, based on 'hh:mm:ss' style timestamps.<BR />
<H2 id="toc-hId-733181086">Brief synopsis</H2><BR />
In the <A href="https://bit.ly/handsonsapdev#ep1" target="_blank" rel="nofollow noopener noreferrer">previous episode</A> we set up our tools and development environment ready for some SAP Cloud Application Programming Model (CAPM) action of the Node.js (JavaScript) flavour. So now weâre ready to start exploring our first data and service definitions in the language of CAPM, i.e. CDS (Core Data &amp; Services).<BR />
<BR />
We follow the â<A href="https://developers.sap.com/tutorials/cp-apm-nodejs-create-service.html" target="_blank" rel="noopener noreferrer">Create a Business Service with Node.js using Visual Studio Code</A>â tutorial on the SAP Developers tutorial navigator and start to explore what CAPM and CDS can do for us.<BR />
<H2 id="links-to-specific-highlights" id="toc-hId-536667581">Links to specific highlights</H2><BR />
<STRONG><A href="https://www.youtube.com/watch?v=583eQZFfWgE&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h06m15s" target="_blank" rel="nofollow noopener noreferrer">00:06:15</A>:</STRONG> This time I'm holding my coffee mug the right way round to show the <A href="https://anchor.fm/sap-community-podcast" target="_blank" rel="nofollow noopener noreferrer">Coffee Corner Radio</A> podcast logo to the camera!<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=583eQZFfWgE&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h06m46s" target="_blank" rel="nofollow noopener noreferrer">00:06:46</A>:</STRONG> A recap of what we did in <A href="https://bit.ly/handsonsapdev#ep1" target="_blank" rel="nofollow noopener noreferrer">the previous episode</A> and how far into the tutorial we got.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=583eQZFfWgE&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h08m55s" target="_blank" rel="nofollow noopener noreferrer">00:08:55</A>:</STRONG> Talking about what we get out of the box from CAP - built in core services for CRUD+Q, not boilerplate code that we must take over and manage ourselves.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=583eQZFfWgE&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h10m05s" target="_blank" rel="nofollow noopener noreferrer">00:10:05</A>:</STRONG> Starting the CAP project with <CODE>cds init my-bookshop</CODE>.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=583eQZFfWgE&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h10m50s" target="_blank" rel="nofollow noopener noreferrer">00:10:50</A>:</STRONG> Looking at what was installed when we installed the <CODE><a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a>/cds</CODE> package and wondering why the <CODE><a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a>/generator-cds</CODE> package has a different name pattern (all the other packages are <CODE>cds-...</CODE>). On this subject, Fred later makes what I think is a nice oblique reference to <A href="https://en.wikipedia.org/wiki/Conway%27s_law" target="_blank" rel="nofollow noopener noreferrer">Conway's Law</A>: "<EM>Organizations which design systems ... are constrained to produce designs which are copies of the communication structures of these organizations</EM>".<BR />
<BR />
Talking of <CODE><a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a>/generator-cds</CODE>, we can see that this provides a "binary" (executable) <CODE>cds-gen</CODE> by looking at the output of <CODE>npm info <a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a>/generator</CODE>. This is used in turn by the <CODE>cds</CODE> command.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=583eQZFfWgE&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h11m55s" target="_blank" rel="nofollow noopener noreferrer">00:11:55</A>:</STRONG> Taking a first quick look at what's been generated in the <CODE>my-bookshop</CODE> project, and noting that the <CODE>README.md</CODE> file contains a tutorial similar to what we're following here. We also briefly explore the <CODE><a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a></CODE> packages inside the <CODE>node_modules</CODE> directory, especially the "binaries" in the <CODE>.bin</CODE> directory such as <CODE>cds</CODE>, <CODE>cds-gen</CODE>, <CODE>cdsc</CODE>, <CODE>mime</CODE> and <CODE>uuid</CODE>.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=583eQZFfWgE&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h15m02s" target="_blank" rel="nofollow noopener noreferrer">00:15:02</A>:</STRONG> Initialising this project as a git repository so we can see and track changes, and then opening up the project in VS Code.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=583eQZFfWgE&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h16m50s" target="_blank" rel="nofollow noopener noreferrer">00:16:50</A>:</STRONG> Looking at some VS Code specific items that have been created as part of the <CODE>cds init</CODE> based project generation, in particular the contents of the <CODE>.vscode</CODE> directory, relating to the launch and debug facilities that VS Code offers.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=583eQZFfWgE&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h17m45s" target="_blank" rel="nofollow noopener noreferrer">00:17:45</A>:</STRONG> Creating the <CODE>cat-service.cds</CODE> file in the <CODE>srv</CODE> directory, and noticing immediately what the extension for CDS is doing for us (in terms of highlighting errors and even suggesting completions).<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=583eQZFfWgE&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h19m00s" target="_blank" rel="nofollow noopener noreferrer">00:19:00</A>:</STRONG> Thinking about what we're doing with this first line:<BR />
<PRE><CODE>using { Country, managed } from '@sap/cds/common';</CODE></PRE><BR />
This refers to <CODE>common.cds</CODE> inside the <CODE><a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a>/cds</CODE> package itself; the file provides some basic types and definitions that are common to many projects. Definitions for languages, currencies and countries are in this file, for example. We explore this <CODE>common.cds</CODE> file here, looking at the <CODE>managed</CODE> type and the concept of <A href="https://help.sap.com/viewer/65de2977205c403bbc107264b8eccf4b/Cloud/en-US/40582e7bbeca4311b0b165c8b9745094.html" target="_blank" rel="noopener noreferrer">aspects</A>.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=583eQZFfWgE&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h23m39s" target="_blank" rel="nofollow noopener noreferrer">00:23:39</A>:</STRONG> Noting the convention for names of entity definitions is capitalised and in the plural (e.g. "Books") - this comes from CAP Best Practices - see the <A href="https://help.sap.com/viewer/65de2977205c403bbc107264b8eccf4b/Cloud/en-US/8fd8fa7687504f2aaa4bf6670cfad1ea.html" target="_blank" rel="noopener noreferrer">Using our Naming Conventions</A> section.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=583eQZFfWgE&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h25m38s" target="_blank" rel="nofollow noopener noreferrer">00:25:38</A>:</STRONG> Using the F8 shortcut to jump between errors that have been found in the CDS definition so far (which of course is because we're using the VS Code extension for the CDS language that is pointing out these nrrors).<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=583eQZFfWgE&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h28m25s" target="_blank" rel="nofollow noopener noreferrer">00:28:25</A>:</STRONG> Looking in detail at how the <CODE>managed</CODE> aspect is used on the definition of the <CODE>Orders</CODE> entity, and what that aspect brings to the entity in terms of extra fields that are automatically filled on certain events.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=583eQZFfWgE&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h32m05s" target="_blank" rel="nofollow noopener noreferrer">00:32:05</A>:</STRONG> Looking at the <CODE>sap.common</CODE> context, which is like a namespace, but within a file.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=583eQZFfWgE&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h35m58s" target="_blank" rel="nofollow noopener noreferrer">00:35:58</A>:</STRONG> Bringing up the integrated terminal (with the shortcut Ctrl-]`) and maximising it with a custom keyboard shortcut. Here we use <CODE>cds compile</CODE> to see what is produced. In fact we don't even use the <CODE>compile</CODE> command as that is the default, as we can see here:<BR />
<PRE><CODE>COMMANDS<BR />
<BR />
  c | compile    ...individual models (= the default)<BR />
  d | deploy     ...data models to a database<BR />
  s | serve      ...service models to REST clients<BR />
  b | build      ...whole modules or projects<BR />
  i | init       ...jump-starts a new project<BR />
  e | env        get/set current cds configuration<BR />
  r | repl       cds's read-eval-event-loop<BR />
  h | help       shows usage for cds and individual commands<BR />
  v | version    prints detailed version information</CODE></PRE><BR />
So invoking <CODE>cds srv/cat-service.cds</CODE> we get a whole load of output, which is in fact Core Schema Notation (CSN), specifically a plain JavaScript object representation thereof (there are different representations possible - see the <A href="https://help.sap.com/viewer/65de2977205c403bbc107264b8eccf4b/Cloud/en-US/73ac472d2cd048629cd592983d9ac56a.html" target="_blank" rel="noopener noreferrer">cds.compile</A> documentation for details).<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=583eQZFfWgE&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h36m57s" target="_blank" rel="nofollow noopener noreferrer">00:36:57</A>:</STRONG> But this is too much to wrap our heads around right now, so we look at what else we can do here. Looking in the <CODE>node_modules/.bin/</CODE> directory we see the <CODE>cdsc</CODE> executable which is the CDS compiler, and what the <CODE>cds</CODE> command uses for compilation. LET'S RUN IT! We see that it shows us all sorts of output in a help format, and we can explore what different types of compiler output are possible.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=583eQZFfWgE&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h38m50s" target="_blank" rel="nofollow noopener noreferrer">00:38:50</A>:</STRONG> The options we see translate into parameters available for the <CODE>cds compile</CODE> command, like this one which we run now: <CODE>cds srv/cat-service.cds --to sql</CODE> which perhaps is more palatable to us right now:<BR />
<PRE><CODE>CREATE TABLE my_bookshop_Authors (<BR />
  ID INTEGER,<BR />
  name NVARCHAR(5000),<BR />
  PRIMARY KEY(ID)<BR />
);<BR />
...</CODE></PRE><BR />
<STRONG><A href="https://www.youtube.com/watch?v=583eQZFfWgE&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h39m39s" target="_blank" rel="nofollow noopener noreferrer">00:39:39</A>:</STRONG> We can also do this for HANA, thus: <CODE>cds srv/cat-service.cds --to hana</CODE> which produces something like this:<BR />
<PRE><CODE>using MY_BOOKSHOP_BOOKS as MY_BOOKSHOP_BOOKS;<BR />
entity MY_BOOKSHOP_AUTHORS {<BR />
  key ID : Integer;<BR />
  NAME : String(5000);<BR />
  BOOKS : association[*] to MY_BOOKSHOP_BOOKS on BOOKS.AUTHOR_ID = ID;<BR />
};<BR />
...</CODE></PRE><BR />
<STRONG><A href="https://www.youtube.com/watch?v=583eQZFfWgE&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h40m44s" target="_blank" rel="nofollow noopener noreferrer">00:40:44</A>:</STRONG> Even though we don't even have a persistence layer (a database) yet, we can start this service up, with <CODE>cds run</CODE>, which we do now, and we see a local server start up, listening by default on port 4004 (there's a story behind why the port is 4004 ... and it's not because of the first commercial the Intel microprocessor as I'd thought ... but I'll leave that for another time :-)). We can change this port by setting the value of the <CODE>PORT</CODE> environmental variable too (e.g. <CODE>PORT=1234 cds run</CODE>).<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=583eQZFfWgE&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h44m10s" target="_blank" rel="nofollow noopener noreferrer">00:44:10</A>:</STRONG> Changing the service name from <CODE>CatalogService</CODE> to <CODE>Banana</CODE> we can see what effect this has on how the service is served.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=583eQZFfWgE&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h44m50s" target="_blank" rel="nofollow noopener noreferrer">00:44:50</A>:</STRONG> We now examine the output from <CODE>cds run</CODE> and make sure we understand what's going on:<BR />
<PRE><CODE>[cds] - server listens at <A href="http://localhost:4004" target="test_blank" rel="nofollow noopener noreferrer">http://localhost:4004</A><BR />
[cds] - serving CatalogService at /catalog<BR />
[cds] - service definitions loaded from:<BR />
<BR />
  srv/cat-service.cds<BR />
  node_modules/@sap/cds/common.cds<BR />
<BR />
[cds] - launched in: 1350.885ms</CODE></PRE><BR />
The service definitions are loaded of course not only from our <CODE>srv/cat-service.cds</CODE> file but also the <CODE>common.cds</CODE> file that we're using for the <CODE>Country</CODE> and <CODE>managed</CODE> definitions.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=583eQZFfWgE&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h45m30s" target="_blank" rel="nofollow noopener noreferrer">00:45:30</A>:</STRONG> We can now explore what has been generated and is running for us (in the form of the OData V4 service document and metadata document), even though we have only a very simple definition, and no data!<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=583eQZFfWgE&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h45m35s" target="_blank" rel="nofollow noopener noreferrer">00:45:35</A>:</STRONG> Slightly controversially I make known my dislike for the choice of font for the "Welcome to cds.services" at this point <span class="lia-unicode-emoji" title=":winking_face:">ð</span><BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=583eQZFfWgE&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h46m35s" target="_blank" rel="nofollow noopener noreferrer">00:46:35</A>:</STRONG> Thanks to a question from MEXICO_MAN we explore how we might define <EM>multiple</EM> services in a single CDS definition file at this point. We add a second service definition to <CODE>cat-service.cds</CODE>:<BR />
<PRE><CODE>service Mexico {<BR />
  entity Things {<BR />
    key ID : Integer;<BR />
    name   : String;<BR />
  }<BR />
}</CODE></PRE><BR />
and when we reinvoke <CODE>cds run</CODE> we see:<BR />
<PRE><CODE>[cds] - serving CatalogService at /catalog<BR />
[cds] - serving Mexico at /mexico</CODE></PRE><BR />
And we see the corresponding second group of links in the root web page. Nice!<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=583eQZFfWgE&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h52m40s" target="_blank" rel="nofollow noopener noreferrer">00:52:40</A>:</STRONG> Getting towards the end of this episode, we create a JavaScript based implementation of our service, by creating a file of the same name but with a <CODE>.js</CODE> extension, i.e. <CODE>cat-service.js</CODE>, in the same directory. By following this convention we can have the runtime use our JavaScript code to enhance the implementation of our definitions. This is Step 5 in the tutorial, by the way.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=583eQZFfWgE&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h54m35s" target="_blank" rel="nofollow noopener noreferrer">00:54:35</A>:</STRONG> Finally we extend the implementation of the function for <CODE>srv.on ('READ', 'Books', ...)</CODE> in the <CODE>cat-service.js</CODE> implementation by changing the body of the function from a single expression that is returning an array, to a block that executes a <CODE>console.log</CODE> statement, and then returns the array.<BR />
<BR />
After fixing an error due to the fact that I missed the definition of the "stock" property in the original Books entity definition, we can see the output from the <CODE>console.log</CODE> statement, which is a very small step towards a future investigation into logging and debugging (which we do in <A href="https://bit.ly/handsonsapdev#ep4" target="_blank" rel="nofollow noopener noreferrer">Episode 4</A>). Hurray!
---
Annotated links: Episode 1 of Hands-on SAP dev with qmacro
technology-blog-sap
2019-03-05
https://community.sap.com/t5/technology-blogs-by-sap/annotated-links-episode-1-of-hands-on-sap-dev-with-qmacro/ba-p/13409864
2019-03-05-annotated-links-episode-1-of-hands-on-sap-dev-with-qmacro
<EM>This is a searchable description of the content of a live stream recording, specifically <STRONG>"Episode 1 - Setting up for the Node.js flavoured version of SAPâs Cloud Application Programming Model"</STRONG> in the "<A href="https://bit.ly/handsonsapdev" target="_blank" rel="nofollow noopener noreferrer">Hands-on SAP dev with qmacro</A>" series. There are links directly to specific highlights in the video recording. For links to annotations of other episodes, please see the "<A href="https://bit.ly/handsonsapdev#replays" target="_blank" rel="nofollow noopener noreferrer">Catch the replays</A>" section of the series blog post.</EM><BR />
<BR />
This episode, titled "<A href="https://bit.ly/handsonsapdev#ep1" target="_blank" rel="nofollow noopener noreferrer">Setting up for the Node.js flavoured version of SAPâs Cloud Application Programming Model</A>", was streamed live on Fri 25 Jan 2019 and is approximately one hour in length. The stream recording is <A href="https://www.youtube.com/watch?v=rQ3MU_fWK-Y&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0" target="_blank" rel="nofollow noopener noreferrer">available on YouTube</A>.<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2019/03/Screenshot-2020-02-13-at-15.01.31.png" /><BR />
<BR />
Below is a brief synopsis, and links to specific highlights - use these links to jump directly to particular places of interest in the recording, based on 'hh:mm:ss' style timestamps.<BR />
<H2 id="brief-synopsis" id="toc-hId-929015067">Brief synopsis</H2><BR />
While we warmed our grey matter up in the previous episode, in this episode we set up what we need to build with the Node.js (JavaScript) flavoured version of SAP's Cloud Application Programming Model (CAPM). This version allows us to build locally, with tools on our own machines, so that's what we'll be doing.<BR />
<BR />
Therefore, we use the SAP NPM registry to find &amp; install the command line tool 'cds' that we can use to generate and manage Node.js based CAPM projects and also install the CDS language support for the VS Code editor, which comes in the form of an VS Code extension. Then we set up our Cloud Foundry environment on SAP Cloud Platform and install the 'cf' command line tool which we can use to interact with that environment.<BR />
<H2 id="links-to-specific-highlights" id="toc-hId-732501562">Links to specific highlights</H2><BR />
<STRONG><A href="https://www.youtube.com/watch?v=rQ3MU_fWK-Y&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h01m12s" target="_blank" rel="nofollow noopener noreferrer">00:01:12</A>:</STRONG> Live stream starts.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=rQ3MU_fWK-Y&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h02m35s" target="_blank" rel="nofollow noopener noreferrer">00:02:35</A>:</STRONG> Starting to look at the setup section of the <A href="https://developers.sap.com/tutorials/cp-apm-nodejs-create-service.html" target="_blank" rel="noopener noreferrer">Create a Business Service with Node.js using Visual Studio Code</A> tutorial.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=rQ3MU_fWK-Y&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h07m30s" target="_blank" rel="nofollow noopener noreferrer">00:07:30</A>:</STRONG> Talking about wanting to be able to try things out on my own machine, in a way that I can then blast away those attempts to get back to a clean state.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=rQ3MU_fWK-Y&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h08m45s" target="_blank" rel="nofollow noopener noreferrer">00:08:45</A>:</STRONG> Achieving this via Docker. Starting a minimal Linux environment Docker container with <CODE>docker run -t -i debian /bin/bash</CODE>.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=rQ3MU_fWK-Y&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h10m30s" target="_blank" rel="nofollow noopener noreferrer">00:10:30</A>:</STRONG> Looking at using <A href="https://github.com/creationix/nvm" target="_blank" rel="nofollow noopener noreferrer">nvm</A> - the Node Version Manager, to install and manage Node.js versions.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=rQ3MU_fWK-Y&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h11m20s" target="_blank" rel="nofollow noopener noreferrer">00:11:20</A>:</STRONG> Installing <CODE>curl</CODE> via <CODE>apt-get</CODE>, so we can then use <CODE>curl</CODE> to download and install <CODE>nvm</CODE>. We also set 'vi mode' in my shell, and bind Ctrl-L so that it will work for clearing the screen for us:<BR />
<PRE><CODE>set -o vi<BR />
bind -x '"\C-l": clear'</CODE></PRE><BR />
Note that we also have to do an <CODE>apt-get update</CODE> in this minimal Linux container before we can get it to find and install <CODE>curl</CODE>.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=rQ3MU_fWK-Y&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h13m30s" target="_blank" rel="nofollow noopener noreferrer">00:13:30</A>:</STRONG> Finally getting to be able to install <CODE>nvm</CODE> with <CODE>curl</CODE>.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=rQ3MU_fWK-Y&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h13m56s" target="_blank" rel="nofollow noopener noreferrer">00:13:56</A>:</STRONG> Now we can use <CODE>nvm</CODE> to install Node.js, and we choose version 8 (see <A class="uri" href="https://nodejs.org/en/download/" target="_blank" rel="nofollow noopener noreferrer">https://nodejs.org/en/download/</A> for other versions).<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=rQ3MU_fWK-Y&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h15m14s" target="_blank" rel="nofollow noopener noreferrer">00:15:14</A>:</STRONG> Starting out with the setup by trying to search for the <CODE><a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a>/cds</CODE> package with <CODE>npm search <a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a>/cds</CODE>. This doesn't give us what we're really looking for, so we search simply for 'cds' with <CODE>npm search cds</CODE>, but this yields results that don't look quite right.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=rQ3MU_fWK-Y&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h16m45s" target="_blank" rel="nofollow noopener noreferrer">00:16:45</A>:</STRONG> The <CODE><a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a></CODE> prefix in <CODE><a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a>/cds</CODE> is a scope, which relates packages to a specific registry. The searches we've done thus far are using the default registry, which we can see in the npm configuration with <CODE>npm config ls -l | grep registry</CODE>, which gives us:<BR />
<PRE><CODE>registry = <A href="https://registry.npmjs.org/" target="test_blank" rel="nofollow noopener noreferrer">https://registry.npmjs.org/</A></CODE></PRE><BR />
We can also get that info via <CODE>npm config get registry</CODE>.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=rQ3MU_fWK-Y&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h18m10s" target="_blank" rel="nofollow noopener noreferrer">00:18:10</A>:</STRONG> Looking at the blog post announcing the SAP NPM registry: <A class="uri" href="https://blogs.sap.com/2017/05/16/sap-npm-registry-launched-making-the-lives-of-node.js-developers-easier/" target="_blank" rel="noopener noreferrer">https://blogs.sap.com/2017/05/16/sap-npm-registry-launched-making-the-lives-of-node.js-developers-easier/</A>.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=rQ3MU_fWK-Y&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h18m39s" target="_blank" rel="nofollow noopener noreferrer">00:18:39</A>:</STRONG> Modifying the previous search command with the <CODE>--registry</CODE> option, thus: <CODE>npm search <a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a>/cds --registry <A href="https://npm.sap.com" target="test_blank" rel="noopener noreferrer">https://npm.sap.com</A></CODE>, where we get much better results that look something like this:<BR />
<PRE><CODE>NAME                      | DESCRIPTION          | AUTHOR          | DATE       | VERSION  | KEYWORDS<BR />
@sap/cds                  | Entry Point and APIâ¦ |                 | 2019-02-19 | 3.5.2    |<BR />
@sap/generator-cds        | Project generatorâ¦   |                 | 2019-02-19 | 2.3.9    | cds cdx<BR />
@sap/cds-compiler         | CDS (Core Dataâ¦      |                 | 2019-02-14 | 1.8.1    | CDS<BR />
@sap/cds-hana             | Driver package forâ¦  |                 | 2019-02-14 | 1.5.1    |<BR />
@sap/cds-ql               | This package dealsâ¦  |                 | 2019-02-14 | 1.5.1    |<BR />
@sap/cds-services         | This packageâ¦        |                 | 2019-02-14 | 1.5.2    |<BR />
@sap/cds-sql              | This package offersâ¦ |                 | 2019-02-14 | 1.5.1    |<BR />
@sap/cds-sqlite           | Driver package forâ¦  |                 | 2019-02-14 | 1.5.1    |<BR />
@sap/cds-reflect          | Reflection for CDSâ¦  |                 | 2019-02-08 | 2.3.0    |</CODE></PRE><BR />
<STRONG><A href="https://www.youtube.com/watch?v=rQ3MU_fWK-Y&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h19m50s" target="_blank" rel="nofollow noopener noreferrer">00:19:50</A>:</STRONG> Using <CODE>npm view</CODE> (as an alternative to <CODE>npm search</CODE>) to look at details of a package. At the time of writing these annotations, this is what <CODE>npm view</CODE> gives us:<BR />
<PRE><CODE>@sap/cds@3.5.2 | SEE LICENSE IN developer-license-3.1.txt | deps: 6 | versions: 16<BR />
Entry Point and API Facade for CDS<BR />
<BR />
bin: cds<BR />
<BR />
dist<BR />
.tarball: <A href="https://npm.sap.com/@sap/cds/-/cds-3.5.2.tgz" target="test_blank" rel="noopener noreferrer">https://npm.sap.com/@sap/cds/-/cds-3.5.2.tgz</A><BR />
.shasum: 975fe7d2c64550c71d30f6f869e63c3250a21ca0<BR />
.integrity: sha512-8NKmfpLFSW4GwKnnnoMB1l+srhDhJ8wlkGrC7cf7NxW+XUDO2bnlPIt/dSKlCSQRnHgssAlyjGffrbMMQknVRw==<BR />
<BR />
dependencies:<BR />
@sap/cds-compiler: 1.8.1  @sap/cds-reflect: 2.3.0   @sap/generator-cds: 2.3.9<BR />
@sap/cds-ql: 1.5.1        @sap/cds-services: 1.5.2  fs-extra: 7.0.1<BR />
<BR />
maintainers:<BR />
- https-support.sap.com &lt;do.not.reply@sap.com&gt;<BR />
<BR />
dist-tags:<BR />
latest: 3.5.2<BR />
<BR />
published a week ago by https-support.sap.com &lt;do.not.reply@sap.com&gt;</CODE></PRE><BR />
<STRONG><A href="https://www.youtube.com/watch?v=rQ3MU_fWK-Y&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h22m00s" target="_blank" rel="nofollow noopener noreferrer">00:22:00</A>:</STRONG> Now it's time to install the package with <CODE>npm install</CODE>. But before we do, we check the list of packages already installed, with <CODE>npm list</CODE>, using the <CODE>-g</CODE> option to check globally (rather than only local to the directory / project I'm currently in).<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=rQ3MU_fWK-Y&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h22m55s" target="_blank" rel="nofollow noopener noreferrer">00:22:55</A>:</STRONG> Restricting the output of <CODE>npm list</CODE> with the <CODE>--depth</CODE> option, to see the top level packages installed (with <CODE>npm list -g --depth=0</CODE>).<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=rQ3MU_fWK-Y&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h23m08s" target="_blank" rel="nofollow noopener noreferrer">00:23:08</A>:</STRONG> A (cultural) reference to lyrics from the track Natural Science by Canadian rock band Rush.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=rQ3MU_fWK-Y&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h23m38s" target="_blank" rel="nofollow noopener noreferrer">00:23:38</A>:</STRONG> An attempt at install with <CODE>npm install -g <a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a>/cds --registry <A href="https://npm.sap.com" target="test_blank" rel="noopener noreferrer">https://npm.sap.com</A></CODE>, and a brief look at the error that occurs (via the <CODE>--verbose</CODE> flag).<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=rQ3MU_fWK-Y&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h26m15s" target="_blank" rel="nofollow noopener noreferrer">00:26:15</A>:</STRONG> Setting the registry for <CODE><a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a></CODE> with <CODE>npm config set <a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a>:registry=<A href="https://npm.sap.com" target="_blank" rel="noopener noreferrer">https://npm.sap.com</A></CODE> (and checking the results with <CODE>npm config list</CODE> to see that this configuration was indeed successfully recorded.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=rQ3MU_fWK-Y&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h26m55s" target="_blank" rel="nofollow noopener noreferrer">00:26:55</A>:</STRONG> Now retrying the install, with <CODE>npm install -g <a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a>/cds</CODE>, and seeing that this is now successful, and that <CODE><a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a>/cds</CODE> version 3.0.0 was installed globally (checking with <CODE>npm list -g --depth=1</CODE>, and also noticing the dependencies).<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=rQ3MU_fWK-Y&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h28m08s" target="_blank" rel="nofollow noopener noreferrer">00:28:08</A>:</STRONG> Removing the experimental Docker container.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=rQ3MU_fWK-Y&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h28m26s" target="_blank" rel="nofollow noopener noreferrer">00:28:26</A>:</STRONG> "Back" on my own local machine, we check what is installed globally (again with <CODE>npm list -g --depth=0</CODE>), and go through the process of installing <CODE><a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a>/cds</CODE> globally here now.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=rQ3MU_fWK-Y&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h28m56s" target="_blank" rel="nofollow noopener noreferrer">00:28:56</A>:</STRONG> What that gives us is a whole lot of stuff, including the command line program <CODE>cds</CODE>:<BR />
<PRE><CODE>=&gt; cds<BR />
<BR />
USAGE<BR />
<BR />
    cds &lt;command&gt; [&lt;args&gt;]<BR />
<BR />
<BR />
COMMANDS<BR />
<BR />
  c | compile    ...individual models (= the default)<BR />
  d | deploy     ...data models to a database<BR />
  s | serve      ...service models to REST clients<BR />
  b | build      ...whole modules or projects<BR />
  i | init       ...jump-starts a new project<BR />
  e | env        get/set current cds configuration<BR />
  r | repl       cds's read-eval-event-loop<BR />
  h | help       shows usage for cds and individual commands<BR />
  v | version    prints detailed version information<BR />
<BR />
  cds help &lt;command&gt; gives more help about each (also with --help)<BR />
  cds &lt;file&gt; without &lt;command&gt; defaults to cds compile.<BR />
  cds without any arguments shows this help.<BR />
<BR />
<BR />
EXAMPLES<BR />
<BR />
  cds model.cds<BR />
  cds compile model.cds<BR />
  cds compile model.json --to cdl<BR />
  cds serve cat-service<BR />
  cds build --clean<BR />
  cds compile --help</CODE></PRE><BR />
<STRONG><A href="https://www.youtube.com/watch?v=rQ3MU_fWK-Y&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h29m50s" target="_blank" rel="nofollow noopener noreferrer">00:29:50</A>:</STRONG> Starting to look at the VS Code extension that's available on the <A href="https://tools.hana.ondemand.com/#cloud" target="_blank" rel="nofollow noopener noreferrer">SAP Development Tools</A> website, downloading the file <CODE>vscode-cds-1.0.36.vsix</CODE>, and noting that it's actually a gzipped tarball in disguise. So changing the <CODE>.vsix</CODE> extension to <CODE>.tgz</CODE> makes it more palatable and we can look inside it with <CODE>tar tvzf vscode-cds-1.0.36.tgz</CODE>!<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=rQ3MU_fWK-Y&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h31m15s" target="_blank" rel="nofollow noopener noreferrer">00:31:15</A>:</STRONG> Being curious of course, we therefore then proceed to unpack it with <CODE>tar xzf vscode-cds-1.0.36.tgz</CODE> and have a look what we have, particularly at the SAP Node.js packages in the <CODE>node_modules/</CODE> directory. It's at this point we get a first glimpse of <CODE><a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a>/cds-lsp</CODE> which is a <A href="http://langserver.org" target="_blank" rel="nofollow noopener noreferrer">Language Protocol Server</A> implementation for the CDS language.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=rQ3MU_fWK-Y&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h32m50s" target="_blank" rel="nofollow noopener noreferrer">00:32:50</A>:</STRONG> Removing the existing extension in VS Code so we can install it together ("Install from VSIX..."), noting that the latest version is 1.0.36 and the details for this show up in the Change Log. The extension will automatically look for updates, as we see in the configuration.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=rQ3MU_fWK-Y&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h35m02s" target="_blank" rel="nofollow noopener noreferrer">00:35:02</A>:</STRONG> Talking about <A href="https://editorconfig.org/" target="_blank" rel="nofollow noopener noreferrer">EditorConfig</A> which I was reminded about in the PluralSight course I'm following. EditorConfig is a way of keeping configuration in sync across editors. I <A href="https://github.com/qmacro/dotvim/commit/f34c37333461732b09670495e2065484e660c430" target="_blank" rel="nofollow noopener noreferrer">added an EditorConfig plugin to my Vim config</A>, and you can see my <CODE>editorconfig</CODE> file (which I took from the UI5 team) here: <A class="uri" href="https://github.com/qmacro/scripts/blob/master/editorconfig" target="_blank" rel="nofollow noopener noreferrer">https://github.com/qmacro/scripts/blob/master/editorconfig</A>. The PluralSight course is "<A href="https://www.pluralsight.com/courses/javascript-development-environment" target="_blank" rel="nofollow noopener noreferrer">Building a JavaScript Development Environment</A>".<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=rQ3MU_fWK-Y&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h36m35s" target="_blank" rel="nofollow noopener noreferrer">00:36:35</A>:</STRONG> Taking a quick look through the rest of the extensions I've installed in VS Code (including EditorConfig, DraculaOfficial, Python, Quokka.js, SQLite, Vim, vimL and VS Live Share).<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=rQ3MU_fWK-Y&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h37m38s" target="_blank" rel="nofollow noopener noreferrer">00:37:38</A>:</STRONG> Talking about eventual deployment to the Cloud Foundry environment on SAP Cloud Platform, and taking a look at my trial account to orientate ourselves.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=rQ3MU_fWK-Y&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h39m25s" target="_blank" rel="nofollow noopener noreferrer">00:39:25</A>:</STRONG> Looking at what the the Cloud Foundry <A href="https://github.com/cloudfoundry/cli" target="_blank" rel="nofollow noopener noreferrer">command line interface</A> (CLI) is and ways to install it (I already had it installed and available to me in <CODE>/usr/local/bin/cf</CODE> via Homebrew for macOS).<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=rQ3MU_fWK-Y&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h40m50s" target="_blank" rel="nofollow noopener noreferrer">00:40:50</A>:</STRONG> Examining the <CODE>cf</CODE> configuration that's maintained in my home directory in the <CODE>.cf/</CODE> directory, and logging in to a Cloud Foundry endpoint with <CODE>cf login</CODE>, specifically the endpoint that I have in my trial at <A href="https://api.cf.eu10.hana.ondemand.com" target="test_blank" rel="nofollow noopener noreferrer">https://api.cf.eu10.hana.ondemand.com</A>.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=rQ3MU_fWK-Y&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h42m50s" target="_blank" rel="nofollow noopener noreferrer">00:42:50</A>:</STRONG> Noticing that <CODE>cf</CODE> asks me to select an organisation.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=rQ3MU_fWK-Y&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h42m58s" target="_blank" rel="nofollow noopener noreferrer">00:42:58</A>:</STRONG> A subtle reference by one of the live stream participants HunterGatherer to the classic quote on QDB: <A href="http://bash.org/?244321" target="test_blank" rel="nofollow noopener noreferrer">http://bash.org/?244321</A> - nicely done <span class="lia-unicode-emoji" title=":slightly_smiling_face:">ð</span><BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=rQ3MU_fWK-Y&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h43m00s" target="_blank" rel="nofollow noopener noreferrer">00:43:00</A>:</STRONG> Thinking about why I was asked to select an organisation, and examining the other organisations available to me in other SAP Cloud Platform accounts, so the selection makes more sense.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=rQ3MU_fWK-Y&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h44m10s" target="_blank" rel="nofollow noopener noreferrer">00:44:10</A>:</STRONG> Selecting the <CODE>I347491trial_trial</CODE> organisation automatically causes the <CODE>dev</CODE> space to be selected within that, because that's the only space that exists inside <CODE>I347491trial_trial</CODE>.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=rQ3MU_fWK-Y&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h44m35s" target="_blank" rel="nofollow noopener noreferrer">00:44:35</A>:</STRONG> Looking at what's available from a services perspective with <CODE>cf marketplace</CODE>.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=rQ3MU_fWK-Y&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h45m00s" target="_blank" rel="nofollow noopener noreferrer">00:45:00</A>:</STRONG> Looking at the current target with <CODE>cf target</CODE> and switching targets. First looking at what the possible target orgs are with <CODE>cf orgs</CODE>, which gives me this:<BR />
<PRE><CODE>Getting orgs as dj.adams@sap.com...<BR />
<BR />
name<BR />
I347491trial_trial<BR />
serverlessorg<BR />
tdash</CODE></PRE><BR />
and then selecting one of them with <CODE>cf target -o serverlessorg</CODE> (noting again that the single <CODE>dev</CODE> space is automatically selected within that).<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=rQ3MU_fWK-Y&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h46m20s" target="_blank" rel="nofollow noopener noreferrer">00:46:20</A>:</STRONG> Targeting an organisation with multiple spaces (<CODE>cf target -o tdash</CODE>) gives us "No space targeted, use cf target -S SPACE" because there are multiple spaces within the <CODE>tdash</CODE> organisation, which we can see with <CODE>cf spaces</CODE>, which gives this:<BR />
<PRE><CODE>name<BR />
prod<BR />
qa</CODE></PRE><BR />
<STRONG><A href="https://www.youtube.com/watch?v=rQ3MU_fWK-Y&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h46m45s" target="_blank" rel="nofollow noopener noreferrer">00:46:45</A>:</STRONG> Referring to <A href="https://blogs.sap.com//lukesmith.xyz" target="_blank" rel="noopener noreferrer">Luke Smith</A> from whom I've learned a lot recently, and talking about <A href="https://wiki.archlinux.org/index.php/dmenu" target="_blank" rel="nofollow noopener noreferrer">dmenu</A>, and a similar utility called <A href="https://github.com/junegunn/fzf" target="_blank" rel="nofollow noopener noreferrer">fzf</A> which is wonderful (the author of <CODE>fzf</CODE> also wrote the Vim plugins <A href="https://github.com/junegunn/goyo" target="_blank" rel="nofollow noopener noreferrer">Goyo</A> and <A href="https://github.com/junegunn/limelight" target="_blank" rel="nofollow noopener noreferrer">Limelight</A> which are also wonderful).<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=rQ3MU_fWK-Y&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h48m15s" target="_blank" rel="nofollow noopener noreferrer">00:48:15</A>:</STRONG> A brief look at what the Goyo plugin does, in conjunction with Limelight. Fab.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=rQ3MU_fWK-Y&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h49m00s" target="_blank" rel="nofollow noopener noreferrer">00:49:00</A>:</STRONG> Taking a look at how <CODE>fzf</CODE> works, by looking at the sort of things it can do. We end up taking the names of the <A href="https://services.odata.org/V3/Northwind/Northwind.svc/Products" target="_blank" rel="nofollow noopener noreferrer">Northwind products</A> and offering them as a selection like this:<BR />
<PRE><CODE>curl 'https://services.odata.org/V3/Northwind/Northwind.svc/Products?$format=json?$select=ProductName' | jq -r '.value[].ProductName' | fzf</CODE></PRE><BR />
Note that we use the equally wonderful <A href="https://stedolan.github.io/jq/" target="_blank" rel="nofollow noopener noreferrer">jq</A> to process the JSON. If you're interested in learning more about <CODE>jq</CODE> you might want to watch this short video "<A href="https://www.youtube.com/watch?v=yI5IQooQzW4" target="_blank" rel="nofollow noopener noreferrer">Using jq to parse out SCP destination info</A>".<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=rQ3MU_fWK-Y&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h54m17s" target="_blank" rel="nofollow noopener noreferrer">00:54:17</A>:</STRONG> Using <CODE>fzf</CODE> to improve the experience of selecting choosing and setting target organisations and spaces. Check out the <A href="https://github.com/qmacro/scripts/blob/7e2ed78969e253626e07e389354337866417dbb0/fzfutils.sh" target="_blank" rel="nofollow noopener noreferrer">fzfutils.sh</A> script to see how we did this. Basically, introducing <CODE>fzf</CODE> into the <CODE>cf</CODE> CLI mix looks like this, from a CF organisation perspective, for example:<BR />
<PRE><CODE>function cfto() {<BR />
    local org<BR />
    org=$(cf orgs | sed -e '1,3d' | fzf -1 -q "$1")<BR />
    if [ -n "$org" ]; then<BR />
        echo Setting target org to "$org"<BR />
        cf target -o "$org"<BR />
    fi<BR />
}</CODE></PRE>
---
Annotated links: Episode 6 of Hands-on SAP dev with qmacro
technology-blog-sap
2019-02-22
https://community.sap.com/t5/technology-blogs-by-sap/annotated-links-episode-6-of-hands-on-sap-dev-with-qmacro/ba-p/13395704
2019-02-22-annotated-links-episode-6-of-hands-on-sap-dev-with-qmacro
<EM>This is a searchable description of the content of a live stream recording, specifically <STRONG>"Episode 6 - Extending the CAPM bookshop tutorial â hacking &amp; learning"</STRONG> in the "<A href="https://bit.ly/handsonsapdev" target="_blank" rel="nofollow noopener noreferrer">Hands-on SAP dev with qmacro</A>" series. There are links directly to specific highlights in the video recording. For links to annotations of other episodes, please see the "<A href="https://bit.ly/handsonsapdev#replays" target="_blank" rel="nofollow noopener noreferrer">Catch the replays</A>" section of the series blog post.</EM><BR />
<BR />
This episode, titled "<A href="https://bit.ly/handsonsapdev#ep6" target="_blank" rel="nofollow noopener noreferrer">Extending the CAPM bookshop tutorial â hacking &amp; learning</A>", was streamed live on Fri 22 Feb 2019 and is approximately one hour in length. The stream recording is <A href="https://www.youtube.com/watch?v=kIDTvoSvpa0&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0" target="_blank" rel="nofollow noopener noreferrer">available on YouTube</A>.<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2019/02/Screen-Shot-2019-03-13-at-21.06.18.png" /><BR />
<H2 id="brief-synopsis" id="toc-hId-908577294">Brief synopsis</H2><BR />
Weâre pretty much at the end of the tutorial as it stands. But thereâs always more to learn by hacking on it, to tweak and extend it. We do that in this episode, uncovering more features of CAPM and CDS.<BR />
<H2 id="links-to-specific-highlights" id="toc-hId-712063789">Links to specific highlights</H2><BR />
<STRONG><A href="https://www.youtube.com/watch?v=kIDTvoSvpa0&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h05m07s" target="_blank" rel="nofollow noopener noreferrer">00:05:07</A>:</STRONG> A quick look at the CDS Language Support extension for VS Code, which is based on the use of the <A href="https://langserver.org/" target="_blank" rel="nofollow noopener noreferrer">Language Server Protocol</A> which was created by Microsoft.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=kIDTvoSvpa0&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h07m15s" target="_blank" rel="nofollow noopener noreferrer">00:07:15</A>:</STRONG> Downloading the CDS Language Support extension from the <A href="https://tools.hana.ondemand.com/#cloud" target="_blank" rel="nofollow noopener noreferrer">SAP Development Tools (cloud)</A> site so we can have a look inside it.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=kIDTvoSvpa0&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h08m15s" target="_blank" rel="nofollow noopener noreferrer">00:08:15</A>:</STRONG> The <CODE>.vsix</CODE> file is actually a bundle that is a gzipped tarball, which means that we can change the extension to <CODE>.tgz</CODE> and unpack it to have a look inside, where we see, amongst other things, the <CODE>cds-compiler</CODE> package and the <CODE>cds-lsp</CODE> package within the <CODE><a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a></CODE> namespace.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=kIDTvoSvpa0&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h10m00s" target="_blank" rel="nofollow noopener noreferrer">00:10:00</A>:</STRONG> We notice that the CDS package is now at 3.5.2, following a couple of point updates since the move from 3.0.0 to 3.5.0 a couple of weeks ago.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=kIDTvoSvpa0&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h11m09s" target="_blank" rel="nofollow noopener noreferrer">00:11:09</A>:</STRONG> We note that the <CODE>cds-lsp</CODE> package is not part of the main <CODE><a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a>/cds</CODE> install, i.e. it's not a dependency that we can see with <CODE>npm info <a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a>/cds</CODE>. It's the language server implementation for the VS Code language server client.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=kIDTvoSvpa0&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h11m59s" target="_blank" rel="nofollow noopener noreferrer">00:11:59</A>:</STRONG> Using the <CODE>cds-lsp</CODE> package "standalone" as a server for another language server client ... in Vim. The config in my <CODE>.vimrc</CODE> for this looks like <A href="https://github.com/qmacro/dotvim/blob/a6567d431119527aa5764363fdddc61a1fa2275d/vimrc#L94-L100" target="_blank" rel="nofollow noopener noreferrer">this</A>:<BR />
<PRE><CODE>set runtimepath+=~/.vim/bundle/languageclient<BR />
set hidden<BR />
autocmd BufRead,BufNewFile *.cds setfiletype cds<BR />
set signcolumn=yes<BR />
let g:LanguageClient_serverCommands = {<BR />
    \ 'cds': ['/Users/i347491/.vim/bundle/languageclient/startcdslsp']<BR />
    \ }</CODE></PRE><BR />
and I'm using the <A href="https://github.com/autozimu/LanguageClient-neovim" target="_blank" rel="nofollow noopener noreferrer">LanguageClient-neovim</A> plugin.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=kIDTvoSvpa0&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h13m22s" target="_blank" rel="nofollow noopener noreferrer">00:13:22</A>:</STRONG> Seeing the language client in Vim in action, connecting to the language server provided by the <CODE><a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a>/cds-lsp</CODE> package and offering autocompletion (in Vim via Ctrl-X Ctrl-O) as well as CDS syntax checks.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=kIDTvoSvpa0&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h14m58s" target="_blank" rel="nofollow noopener noreferrer">00:14:58</A>:</STRONG> Talking briefly about a very useful macOS app, in response to a question from Ronnie about keyboard-shortcut based anchoring of windows. I use <A href="https://www.spectacleapp.com/" target="_blank" rel="nofollow noopener noreferrer">Spectacle</A> which is the single most useful little app I have on this machine. Recommended!<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=kIDTvoSvpa0&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h16m23s" target="_blank" rel="nofollow noopener noreferrer">00:16:23</A>:</STRONG> Looking quickly at a keyboard shortcut I have in my config that can quickly take me to inside the globally installed <CODE><a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a>/cds</CODE> package directory so I can hunt around and discover things. I manage this with features in my <A href="https://github.com/qmacro/scripts" target="_blank" rel="nofollow noopener noreferrer">scripts</A> repo (look at the <CODE>.bmdirs</CODE>, <CODE>.bmfiles</CODE> and <CODE>shortcuts</CODE> files in particular).<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=kIDTvoSvpa0&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h17m36s" target="_blank" rel="nofollow noopener noreferrer">00:17:36</A>:</STRONG> Starting the new project with <CODE>cds init</CODE>. This project will be to create a cut down version of the Northwind dataset and services, and so we call it "northbreeze" (naming things is hard).<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=kIDTvoSvpa0&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h18m49s" target="_blank" rel="nofollow noopener noreferrer">00:18:49</A>:</STRONG> Security alert - some strange person in the field.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=kIDTvoSvpa0&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h19m50s" target="_blank" rel="nofollow noopener noreferrer">00:19:50</A>:</STRONG> Creating a new file <CODE>db/model.cds</CODE>, using the command palette to refresh the Explorer to see the newly created directory <CODE>db/</CODE>. Pierre points out that you can actually create the <CODE>db</CODE> and <CODE>srv</CODE> folders automatically when you initialise the project. Have a look at <CODE>cds help init</CODE> to find out more on this.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=kIDTvoSvpa0&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h21m39s" target="_blank" rel="nofollow noopener noreferrer">00:21:39</A>:</STRONG> Looking at the Products data in Northwind, via <A class="uri" href="https://services.odata.org/V3/Northwind/Northwind.svc/Products?$format=json" target="_blank" rel="nofollow noopener noreferrer">https://services.odata.org/V3/Northwind/Northwind.svc/Products?$format=json</A>.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=kIDTvoSvpa0&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h22m26s" target="_blank" rel="nofollow noopener noreferrer">00:22:26</A>:</STRONG> Talking about a nice triple of data types that we can use: Products, Suppliers and Categories - there are relationships between them.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=kIDTvoSvpa0&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h23m19s" target="_blank" rel="nofollow noopener noreferrer">00:23:19</A>:</STRONG> Noting that for Products, we don't get all the entities in the entityset (there are 77 in total) in one go - we can see that at the end of the output there's a link to the next 'batch', via the use of a <CODE>$skiptoken</CODE>. We have to bear this in mind when thinking about grabbing the data from the Northwind servers programmatically.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=kIDTvoSvpa0&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h26m45s" target="_blank" rel="nofollow noopener noreferrer">00:26:45</A>:</STRONG> Starting to define our model, something like the definition in the tutorial we followed previously - <A href="https://developers.sap.com/tutorials/cp-apm-nodejs-create-service.html" target="_blank" rel="noopener noreferrer">Create a Business Service with Node.js using Visual Studio Code</A>.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=kIDTvoSvpa0&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h27m40s" target="_blank" rel="nofollow noopener noreferrer">00:27:40</A>:</STRONG> Delighted by the autocompletion providing us with an entity definition skeleton that includes the <CODE>cuid</CODE> aspect which we saw in a previous live stream episode ... it comes from the <CODE><a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a>/common.cds</CODE> file we explored in episode 1. The definition looks like this:<BR />
<PRE><CODE>/**<BR />
 * Aspect for entities with canonical universal IDs.<BR />
 */<BR />
abstract entity cuid {<BR />
  key ID : UUID;  //&gt; automatically filled in<BR />
}</CODE></PRE><BR />
This aspect will cause the entity to have a key property <CODE>ID</CODE> defined as a <CODE>UUID</CODE> type, automatically.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=kIDTvoSvpa0&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h28m50s" target="_blank" rel="nofollow noopener noreferrer">00:28:50</A>:</STRONG> Talking about how the CAPM <A href="https://help.sap.com/viewer/65de2977205c403bbc107264b8eccf4b/Cloud/en-US/e4a7559baf9f4e4394302442745edcd9.html" target="_blank" rel="noopener noreferrer">best practices</A> influence how we name our things. So for example our first entity is capitalised and plural (Products) and the properties are simple (e.g. "name" rather than "product_name"). Perhaps I should have used more underscores in the property names, or camel case, but there you go.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=kIDTvoSvpa0&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h32m40s" target="_blank" rel="nofollow noopener noreferrer">00:32:40</A>:</STRONG> Rather than me typing everything in, I bring in the model definition from another file, to save time.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=kIDTvoSvpa0&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h33m45s" target="_blank" rel="nofollow noopener noreferrer">00:33:45</A>:</STRONG> Looking at the relationships between Products, Suppliers and Categories as described by the <CODE>Association</CODE> keyword, noting that the definitions are bi-directional. These definitions result in the appropriate navigation properties in the OData service that we get.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=kIDTvoSvpa0&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h35m25s" target="_blank" rel="nofollow noopener noreferrer">00:35:25</A>:</STRONG> Adding a simple service that just reflects the entities we have so far, in a one-to-one mapping.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=kIDTvoSvpa0&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h37m06s" target="_blank" rel="nofollow noopener noreferrer">00:37:06</A>:</STRONG> Trying the service out on localhost, even before we've set up the database as a persistence layer. Inspecting the metadata document. Confirming the service is working.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=kIDTvoSvpa0&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h38m25s" target="_blank" rel="nofollow noopener noreferrer">00:38:25</A>:</STRONG> Looking at a blog post <A href="https://www.twilio.com/blog/2017/08/http-requests-in-node-js.html" target="_blank" rel="nofollow noopener noreferrer">5 Ways to Make HTTP Requests in Node.js</A> which takes us through different ways to make HTTP requests when in the Node.js context, from the simple (and builtin) <CODE>http</CODE> library which is standard, through to <A href="https://www.npmjs.com/package/axios" target="_blank" rel="nofollow noopener noreferrer">axios</A> which supports the Promise API.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=kIDTvoSvpa0&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h40m08s" target="_blank" rel="nofollow noopener noreferrer">00:40:08</A>:</STRONG> Creating a new project ('grab') where we'll write the JavaScript to grab the data from the Northwind service, using <CODE>npm init -y</CODE> to set up a basic <CODE>package.json</CODE> file and then immediately installing (locally to this project) the <CODE>axios</CODE> package.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=kIDTvoSvpa0&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h41m55s" target="_blank" rel="nofollow noopener noreferrer">00:41:55</A>:</STRONG> Looking at the blog post example to see how we use <CODE>axios</CODE>, especially taking advantage of <CODE>axios.all([...])</CODE>.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=kIDTvoSvpa0&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h44m07s" target="_blank" rel="nofollow noopener noreferrer">00:44:07</A>:</STRONG> Starting to create <CODE>grab.js</CODE>, bringing in the <CODE>axios</CODE> module and trying out a first HTTP request to <A class="uri" href="https://services.odata.org/V3/Northwind/Northwind.svc/Products?$skiptoken=0" target="_blank" rel="nofollow noopener noreferrer">https://services.odata.org/V3/Northwind/Northwind.svc/Products?$skiptoken=0</A>.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=kIDTvoSvpa0&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h46m45s" target="_blank" rel="nofollow noopener noreferrer">00:46:45</A>:</STRONG> We see that the result of the call to <CODE>axios.get</CODE> is a Promise. And that holds a lot of, err, promise.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=kIDTvoSvpa0&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h46m55s" target="_blank" rel="nofollow noopener noreferrer">00:46:55</A>:</STRONG> Extending the basic call to specify <CODE>console.log</CODE> to a chained <CODE>.then()</CODE>, noticing that we're supplying a reference to the function (<CODE>console.log</CODE>) and not actually <EM>invoking</EM> the function. In other words, <CODE>then</CODE> takes a function as its parameter here.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=kIDTvoSvpa0&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h48m34s" target="_blank" rel="nofollow noopener noreferrer">00:48:34</A>:</STRONG> We get the axios object as output.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=kIDTvoSvpa0&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h49m06s" target="_blank" rel="nofollow noopener noreferrer">00:49:06</A>:</STRONG> Now we change the call to <CODE>axios.get</CODE> to <CODE>axios.all</CODE> which will enable us to specify multiple HTTP request, which we do, for the first and the second batch of 20 products.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=kIDTvoSvpa0&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h50m25s" target="_blank" rel="nofollow noopener noreferrer">00:50:25</A>:</STRONG> We start up VS Code to run this in now, so we can use the debug feature to inspect what we get after the <CODE>axios.all</CODE> finishes. We use F9 to set a breakpoint on the <CODE>console.log(x)</CODE> statement so we can stop and have a look at what we get.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=kIDTvoSvpa0&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h51m44s" target="_blank" rel="nofollow noopener noreferrer">00:51:44</A>:</STRONG> We see that what we get (in <CODE>x</CODE>) is an array of two objects (maps). Each is from axios, and represents the HTTP response, and a nicely parsed bit of data from the payload (converted from JSON into a JavaScript object) in <CODE>x[0].data</CODE> (for the first one, of course).<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=kIDTvoSvpa0&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h53m33s" target="_blank" rel="nofollow noopener noreferrer">00:53:33</A>:</STRONG> Sir Rodney's Scones! Clearly the correct pronunciation of "scones" matches "stones".<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=kIDTvoSvpa0&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h53m55s" target="_blank" rel="nofollow noopener noreferrer">00:53:55</A>:</STRONG> Finally in this episode we'll coalesce the data from the two objects into a single array (i.e. to get all 40 products into a single structure).<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=kIDTvoSvpa0&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h55m15s" target="_blank" rel="nofollow noopener noreferrer">00:55:15</A>:</STRONG> Noting that we can use <CODE>concat</CODE> to bring together values from different arrays, noting that the function is pure, i.e. it doesn't modify either of the two source arrays, rather, it produces a new array.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=kIDTvoSvpa0&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h55m57s" target="_blank" rel="nofollow noopener noreferrer">00:55:57</A>:</STRONG> Now we know we can use <CODE>concat</CODE>, we'll employ it in a single expression function definition that we'll pass to <CODE>then</CODE>. This expression is a call to <CODE>reduce</CODE> on the array of objects, and looks like this:<BR />
<PRE><CODE>xs.reduce((a, x) =&gt; a.concat(x.data.value), [])</CODE></PRE><BR />
I'll leave that there for us to stare at for a bit. Single expression, no moving parts, no mutation and pure, in a promise context (which therefore causes the result of this expression to be available to the next <CODE>then</CODE> in the chain. Nice. Well, <EM>I</EM> like it anyway!<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=kIDTvoSvpa0&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h58m17s" target="_blank" rel="nofollow noopener noreferrer">00:58:17</A>:</STRONG> As a result of this, we get a nice single array of 40 product objects, which is exactly what we wanted. And we can tidy the code up now to make it really clean.
---
Annotated links: Episode 0 of Hands-on SAP dev with qmacro
technology-blog-sap
2019-02-20
https://community.sap.com/t5/technology-blogs-by-sap/annotated-links-episode-0-of-hands-on-sap-dev-with-qmacro/ba-p/13393497
2019-02-20-annotated-links-episode-0-of-hands-on-sap-dev-with-qmacro
<EM>This is a searchable description of the content of a live stream recording, specifically <STRONG>"Episode 0 - Getting our feet wet"</STRONG> in the "<A href="https://bit.ly/handsonsapdev" target="_blank" rel="nofollow noopener noreferrer">Hands-on SAP dev with qmacro</A>" series. There are links directly to specific highlights in the video recording. For links to annotations of other episodes, please see the "<A href="https://bit.ly/handsonsapdev#replays" target="_blank" rel="nofollow noopener noreferrer">Catch the replays</A>" section of the series blog post.</EM><BR />
<BR />
This episode, titled "<A href="https://bit.ly/handsonsapdev#ep0" target="_blank" rel="nofollow noopener noreferrer">Getting our feet wet</A>", was streamed live on Fri 18 Jan 2019 and is approximately one hour in length. The stream recording is <A href="https://www.youtube.com/watch?v=V7UCloLcPyo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0" target="_blank" rel="nofollow noopener noreferrer">available on YouTube</A>.<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2019/02/Screen-Shot-2019-02-28-at-13.03.36-2.png" /><BR />
<BR />
Below is a brief synopsis, and links to specific highlights - use these links to jump directly to particular places of interest in the recording, based on 'hh:mm:ss' style timestamps.<BR />
<H2 id="brief-synopsis" id="toc-hId-908515111">Brief synopsis</H2><BR />
In this initial episode of the "Hands-on SAP dev with qmacro" series, we take a brief look at what using SAP's Cloud Application Programming Model in a Node.js context means for us JavaScript developers, and warm our brains up by solving some puzzles with a bit of ES6 flavoured code (with some functional aspects thrown in for good measure).<BR />
<H2 id="links-to-specific-highlights" id="toc-hId-712001606">Links to specific highlights</H2><BR />
<STRONG><A href="https://www.youtube.com/watch?v=V7UCloLcPyo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h00m49s" target="_blank" rel="nofollow noopener noreferrer">00:00:49</A>:</STRONG> Shoutout to the <A href="https://anchor.fm/sap-community-podcast" target="_blank" rel="nofollow noopener noreferrer">Coffee Corner Radio</A> podcast show.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=V7UCloLcPyo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h02m20s" target="_blank" rel="nofollow noopener noreferrer">00:02:20</A>:</STRONG> A callout to just be nice to each other (which I'm sure you all are and will continue to be), and reference to the Participation Etiquette in the <A href="https://www.sap.com/community/resources/rules-of-engagement.html" target="_blank" rel="noopener noreferrer">SAP Community Rules of Engagement</A>.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=V7UCloLcPyo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h03m47s" target="_blank" rel="nofollow noopener noreferrer">00:03:47</A>:</STRONG> A quick look at my <A href="https://streamlabs.com" target="_blank" rel="nofollow noopener noreferrer">Streamlabs</A> setup.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=V7UCloLcPyo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h05m02s" target="_blank" rel="nofollow noopener noreferrer">00:05:02</A>:</STRONG> Taking a first look at the <A href="https://developers.sap.com/tutorial-navigator.html" target="_blank" rel="noopener noreferrer">tutorial navigator</A> on <A href="https://developers.sap.com" target="_blank" rel="noopener noreferrer">developers.sap.com</A> and specifically the <A href="https://developers.sap.com/tutorials/cp-apm-nodejs-create-service.html" target="_blank" rel="noopener noreferrer">Create a Business Service with Note.js using Visual Studio Code</A> tutorial.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=V7UCloLcPyo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h07m12s" target="_blank" rel="nofollow noopener noreferrer">00:07:12</A>:</STRONG> Jumping ahead to the "Provide Mock Data" step in the tutorial we see that the JavaScript used is quite modern, specifically embracing many ECMAScript 6 (ES6) features, possibly less recognisable to many of us.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=V7UCloLcPyo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h08m27s" target="_blank" rel="nofollow noopener noreferrer">00:08:27</A>:</STRONG> We see a similar pattern with the "Add custom logic" step later on in the tutorial, with modern JavaScript, including ES6 aspects such as destructuring and the fat arrow syntax.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=V7UCloLcPyo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h09m37s" target="_blank" rel="nofollow noopener noreferrer">00:09:37</A>:</STRONG> Moving into the terminal for the rest of this episode, and bringing up a simple task for us to work on and practise our JavaScript. We'll be using the Christmas themed <A href="https://adventofcode.com/2018/day/1" target="_blank" rel="nofollow noopener noreferrer">Advent of Code day 1</A> pair of puzzles to warm up our brains a little bit.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=V7UCloLcPyo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h11m17s" target="_blank" rel="nofollow noopener noreferrer">00:11:17</A>:</STRONG> Diving straight into part 1 of the puzzle, looking at what's required.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=V7UCloLcPyo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h13m07s" target="_blank" rel="nofollow noopener noreferrer">00:13:07</A>:</STRONG> Looking at the puzzle input (which is user-specific), and then grabbing the example input from the puzzle description itself.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=V7UCloLcPyo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h13m37s" target="_blank" rel="nofollow noopener noreferrer">00:13:37</A>:</STRONG> Thinking about a good development environment for this, with quick feedback turnaround.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=V7UCloLcPyo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h13m57s" target="_blank" rel="nofollow noopener noreferrer">00:13:57</A>:</STRONG> Initialising a new repo for the solution project with <CODE>npm init</CODE>.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=V7UCloLcPyo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h14m05s" target="_blank" rel="nofollow noopener noreferrer">00:14:05</A>:</STRONG> Looking at <CODE>package.json</CODE> as it initially is generated.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=V7UCloLcPyo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h15m40s" target="_blank" rel="nofollow noopener noreferrer">00:15:40</A>:</STRONG> Examining the 'test harness' in the form of <CODE>index.js</CODE> (which is referenced in <CODE>package.json</CODE>) - this works as a test runner for the solutions, which provides a <CODE>clean</CODE> function, loads the day's solvers (for parts 1 and 2) and then loads the puzzle input and tries each solution.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=V7UCloLcPyo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h16m13s" target="_blank" rel="nofollow noopener noreferrer">00:16:13</A>:</STRONG> Taking a brief look at two beautiful Vim plugins <A href="https://github.com/junegunn/goyo.vim" target="_blank" rel="nofollow noopener noreferrer">Goyo</A> and <A href="https://github.com/junegunn/limelight.vim" target="_blank" rel="nofollow noopener noreferrer">Limelight</A>.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=V7UCloLcPyo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h17m23s" target="_blank" rel="nofollow noopener noreferrer">00:17:23</A>:</STRONG> Taking a bit of a closer look at how the <CODE>clean</CODE> function processes the puzzle data that's read in, turning the string into a clean array of values.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=V7UCloLcPyo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h19m05s" target="_blank" rel="nofollow noopener noreferrer">00:19:05</A>:</STRONG> Starting with a basic skeleton solver module with functions <CODE>a</CODE> and <CODE>b</CODE> for parts 1 and 2 of the day's puzzle, respectively.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=V7UCloLcPyo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h20m42s" target="_blank" rel="nofollow noopener noreferrer">00:20:42</A>:</STRONG> Creating the initial contents of the <CODE>day1.input</CODE> file from the test data in the example.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=V7UCloLcPyo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h21m21s" target="_blank" rel="nofollow noopener noreferrer">00:21:21</A>:</STRONG> Initial run of <CODE>index.js</CODE> shows that we have some work to do, not least creating a <CODE>day1.js</CODE> from the <CODE>day0.js</CODE> skeleton.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=V7UCloLcPyo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h21m39s" target="_blank" rel="nofollow noopener noreferrer">00:21:39</A>:</STRONG> Using <A href="https://en.wikipedia.org/wiki/Tmux" target="_blank" rel="nofollow noopener noreferrer">tmux</A> to let us see the execution output of our tests as well as the contents of what we're editing. My tmux configuration is <A href="https://github.com/qmacro/scripts/blob/master/tmux.conf" target="_blank" rel="nofollow noopener noreferrer">available</A> online if you're interested, in my <A href="https://github.com/qmacro/scripts" target="_blank" rel="nofollow noopener noreferrer">scripts</A> repo.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=V7UCloLcPyo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h22m36s" target="_blank" rel="nofollow noopener noreferrer">00:22:36</A>:</STRONG> Looking at the less than ideal situation of having to manually flip over from editor to runtime to test changes to the puzzle solutions.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=V7UCloLcPyo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h23m46s" target="_blank" rel="nofollow noopener noreferrer">00:23:46</A>:</STRONG> The answer here is <A href="https://github.com/remy/nodemon" target="_blank" rel="nofollow noopener noreferrer">nodemon</A> which we install directly into our project as a dev dependency, with <CODE>npm i nodemon --save-dev</CODE>, looking at the addition to the <CODE>package.json</CODE> that this caused.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=V7UCloLcPyo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h24m27s" target="_blank" rel="nofollow noopener noreferrer">00:24:27</A>:</STRONG> First run of <CODE>nodemon</CODE> directly, using the path via the project's <CODE>node_modules</CODE> directory (<CODE>node_modules/nodemon/bin/nodemon.js</CODE>) which will automatically run the existing <CODE>index.js</CODE> and rerun it if anything is modified.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=V7UCloLcPyo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h26m02s" target="_blank" rel="nofollow noopener noreferrer">00:26:02</A>:</STRONG> Reminding ourselves of the challenge at hand, and considering an "old fashioned" approach with a for-loop, adding one such loop to the <CODE>a</CODE> function (as this is part 1 from this day's pair of puzzles).<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=V7UCloLcPyo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h27m12s" target="_blank" rel="nofollow noopener noreferrer">00:27:12</A>:</STRONG> First, simply getting <CODE>a</CODE> to return the input so we can see and confirm what the function is receiving and must act upon.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=V7UCloLcPyo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h28m02s" target="_blank" rel="nofollow noopener noreferrer">00:28:02</A>:</STRONG> Using a shortcut to get to my Vim configuration, so we can examine an alternative way of saving file content (with <CODE>&lt;leader&gt;w</CODE>). Check out my entire Vim config in my <A href="https://github.com/qmacro/dotvim" target="_blank" rel="nofollow noopener noreferrer">dotvim</A> repo online.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=V7UCloLcPyo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h28m45s" target="_blank" rel="nofollow noopener noreferrer">00:28:45</A>:</STRONG> Just going for a first attempt, in the knowledge that something with the input data isn't yet quite right. Building a simple for-loop as the basis for the solution first.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=V7UCloLcPyo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h29m32s" target="_blank" rel="nofollow noopener noreferrer">00:29:32</A>:</STRONG> Talking about <CODE>fold</CODE> and its close relation to <CODE>reduce</CODE> (they're pretty much the same thing, see <A href="https://en.wikipedia.org/wiki/Fold_(higher-order_function)" target="_blank" rel="nofollow noopener noreferrer">Fold (higher-order function)</A>).<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=V7UCloLcPyo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h30m32s" target="_blank" rel="nofollow noopener noreferrer">00:30:32</A>:</STRONG> Seeing the result of the data not being quite right ... JavaScript is taking the values literally, i.e. is adding the strings together. We therefore have to turn the strings into numbers which we do with the <CODE>Number</CODE> class. We get the right answer now.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=V7UCloLcPyo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h31m32s" target="_blank" rel="nofollow noopener noreferrer">00:31:32</A>:</STRONG> Referencing <A href="https://lukesmith.xyz/" target="_blank" rel="nofollow noopener noreferrer">Luke Smith</A> from whom I've learned a great deal in the *nix shell and tools configuration area.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=V7UCloLcPyo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h32m11s" target="_blank" rel="nofollow noopener noreferrer">00:32:11</A>:</STRONG> Getting rid of the for-loop to embrace a modicum of functional programming, using <A href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map" target="_blank" rel="nofollow noopener noreferrer"><CODE>map</CODE></A> and also <A href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce" target="_blank" rel="nofollow noopener noreferrer"><CODE>reduce</CODE></A>. Also a quick look at the fat-arrow syntax for function definitions, not requiring curly braces to denote a block or even a return statement (if there's only a single expression to evaluate).<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=V7UCloLcPyo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h35m27s" target="_blank" rel="nofollow noopener noreferrer">00:35:27</A>:</STRONG> Copying in the real puzzle input, using <A href="https://langui.sh/2010/11/14/pbpaste-pbcopy-in-mac-os-x-or-terminal-clipboard-fun/" target="_blank" rel="nofollow noopener noreferrer"><CODE>pbpaste</CODE></A> and rerunning the solution, which gives us the correct answer.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=V7UCloLcPyo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h36m22s" target="_blank" rel="nofollow noopener noreferrer">00:36:22</A>:</STRONG> Getting ready to solve part 2 of this puzzle.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=V7UCloLcPyo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h38m29s" target="_blank" rel="nofollow noopener noreferrer">00:38:29</A>:</STRONG> Examining the details of part 2.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=V7UCloLcPyo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h40m44s" target="_blank" rel="nofollow noopener noreferrer">00:40:44</A>:</STRONG> Starting to build the solution to part 2 in the <CODE>b</CODE> function. We use the rather stylish (IMHO) <CODE>xs</CODE> as the parameter name for the input. "X over XS" is a phrase I remember fondly from Erik Meijer's wonderful videos on Functional Programming, F# and Haskell which you can find on YouTube here: <A href="https://www.youtube.com/playlist?list=PLoJC20gNfC2gpI7Dl6fg8uj1a-wfnWTH8" target="_blank" rel="nofollow noopener noreferrer">Haskell - Functional Programming Fundamentals (Dr. Erik Meijer)</A>.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=V7UCloLcPyo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h42m02s" target="_blank" rel="nofollow noopener noreferrer">00:42:02</A>:</STRONG> Switching back to the test input ready to code and test our solution for this part 2.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=V7UCloLcPyo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h42m42s" target="_blank" rel="nofollow noopener noreferrer">00:42:42</A>:</STRONG> Starting to build out the <CODE>b</CODE> function, looking at a functional approach, and using the concept of a <A href="https://en.wikipedia.org/wiki/Closure_(computer_programming)" target="_blank" rel="nofollow noopener noreferrer">closure</A> which is a super powerful idea which is implemented in many languages including of course JavaScript.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=V7UCloLcPyo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h44m12s" target="_blank" rel="nofollow noopener noreferrer">00:44:12</A>:</STRONG> We create the closure in the form of an Immediately Invoked Function Expression (IIFE) which you can find details about here: <A class="uri" href="https://developer.mozilla.org/en-US/docs/Glossary/IIFE" target="_blank" rel="nofollow noopener noreferrer">https://developer.mozilla.org/en-US/docs/Glossary/IIFE</A>.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=V7UCloLcPyo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h46m49s" target="_blank" rel="nofollow noopener noreferrer">00:46:49</A>:</STRONG> We now have a little function that has some memory, that we can use to check whether we've already seen a value or not. We evaluate the call to the lambda function (immediately invoke it) and capture the returned value in the <CODE>seen</CODE> constant - this value is actually the function that is defined, taking a single parameter <CODE>x</CODE>, directly following the <CODE>return</CODE> statement:<BR />
<DIV><BR />
<PRE class="sourceCode javascript"><CODE class="sourceCode javascript"><SPAN class="kw">const</SPAN> seen <SPAN class="op">=</SPAN> (() <SPAN class="op">=&gt;</SPAN> <SPAN class="op">{</SPAN><BR />
  <SPAN class="kw">const</SPAN> values <SPAN class="op">=</SPAN> []<BR />
  <SPAN class="cf">return</SPAN> x <SPAN class="op">=&gt;</SPAN> <SPAN class="op">{</SPAN><BR />
    <SPAN class="cf">if</SPAN> (<SPAN class="va">values</SPAN>.<SPAN class="at">indexOf</SPAN>(x) <SPAN class="op">&gt;</SPAN> <SPAN class="op">-</SPAN><SPAN class="dv">1</SPAN>) <SPAN class="op">{</SPAN><BR />
      <SPAN class="cf">return</SPAN> <SPAN class="kw">true</SPAN><BR />
    <SPAN class="op">}</SPAN> <SPAN class="cf">else</SPAN> <SPAN class="op">{</SPAN><BR />
      <SPAN class="va">values</SPAN>.<SPAN class="at">push</SPAN>(x)<BR />
      <SPAN class="cf">return</SPAN> <SPAN class="kw">false</SPAN><BR />
    <SPAN class="op">}</SPAN><BR />
  <SPAN class="op">}</SPAN><BR />
<SPAN class="op">}</SPAN>)()</CODE></PRE><BR />
</DIV><BR />
<STRONG><A href="https://www.youtube.com/watch?v=V7UCloLcPyo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h50m12s" target="_blank" rel="nofollow noopener noreferrer">00:50:12</A>:</STRONG> We try this out with the following test invocation: <CODE>return [1, 2, 3, 2, 1].map(seen)</CODE> which gives us, correctly, <CODE>[ false, false, false, true, true ]</CODE>.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=V7UCloLcPyo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h51m02s" target="_blank" rel="nofollow noopener noreferrer">00:51:02</A>:</STRONG> Now we start to build out the latter part of this solution, that uses <CODE>seen</CODE>. Starting with an initial frequency of 0, iterating over the list of frequencies with a view to having to wrap around in case the list is exhausted before we get to the solution (which it will be) - modulo arithmetic is required here.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=V7UCloLcPyo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h52m57s" target="_blank" rel="nofollow noopener noreferrer">00:52:57</A>:</STRONG> Now we bring in the real input again, and run the solution upon it, and the answer it returns is the correct one (hurray). Adding a bit of code to count how many frequency changes the solution must iterate through shows a value of more than 139k!
---
Hands-on SAP dev with qmacro - onwards and upwards!
technology-blog-sap
2019-01-21
https://community.sap.com/t5/technology-blogs-by-sap/hands-on-sap-dev-with-qmacro-onwards-and-upwards/ba-p/13396497
2019-01-21-hands-on-sap-dev-with-qmacro-onwards-and-upwards
<EM>My first live stream happened last week, and I think on balance I can say it was successful. Read more about it here.</EM><BR />
<BR />
On Friday last week I live streamed for the first time, on Twitch. A couple of days beforehand, I published the post "<A href="https://blogs.sap.com/2019/01/16/hands-on-sap-dev-with-qmacro-new-live-stream-series/" target="_blank" rel="noopener noreferrer">Hands-on SAP dev with qmacro - new live stream series</A>" to give folks a heads up.&nbsp;That post is still relevant, and it's where you can find out more about the idea for live streaming, the plans, a schedule, and how to watch.<BR />
<BR />
<STRONG>Setup</STRONG><BR />
<BR />
I'd set up as much as could beforehand, in terms of hardware and software (I plan to write a separate blog post on the details of this setup, it's a fascinating area and was completely new to me).<BR />
<BR />
In my streaming software setup I have three main "scenes" set up: "Standby", "Video &amp; Chat" and "Main", which I can switch between as and when I need to.<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2019/01/Screen-Shot-2019-01-21-at-15.05.46.png" /><BR />
<BR />
I hit the "go live" switch at a few minutes before the hour, with my "Standby" scene active. This allows the early viewers to know that the stream will be starting soon, and exposes the stream chat&nbsp; in the stream video itself, too which is a useful touch, I think.<BR />
<BR />
At 0800 Manchester time (I'm trying to make this an official timezone, not sure how successful I'll be) I switched from the "Standby" scene to the "Video &amp; Chat" scene which adds a large webcam capture window, which gives me a chance to get closer to the viewers while I explained the idea of the live stream initiative and the plan for the next hour.<BR />
<BR />
Then it was on to the main business of the episode, and for that I switched to the "Main" scene, which included (as you can see in the screenshot) lots of detail including the capture of one of my Displays, as well as a smaller webcam capture window and of course the live chat.<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2019/01/Screen-Shot-2019-01-21-at-15.10.05.png" height="341" width="614" /><BR />
<BR />
<STRONG>The episode</STRONG><BR />
<BR />
I was absolutely overwhelmed by the number of viewers who not only came watch the live stream, but also to interact with each other in the chat. The expectations I'd set were quite modest, and it's fair to say that these expectations were far surpassed. Thank you to all of you who joined the session - you all made it what it was, super successful, fun, interactive and an event where I hope all of us learned something (I know I did!).<BR />
<BR />
Here are some stats from Twitch about the session itself:<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2019/01/Screen-Shot-2019-01-21-at-14.55.49.png" /><BR />
<BR />
Over 50 average viewers, peaking at over 60 - I think that's wonderful for the first episode. I am looking forward very much to the next episode, which of course is <STRONG>this coming Friday (25 Jan)</STRONG>. For those of you who don't know, the idea is that it's weekly, on Fridays, always at the same time, for an hour, starting at 0800 Manchester time, which translates into the following times around the world: 0900 in Berlin, 1330 in Bengaluru and 1900 in Sydney&nbsp;(more in the <A href="https://blogs.sap.com/2019/01/16/hands-on-sap-dev-with-qmacro-new-live-stream-series/#schedule" target="_blank" rel="noopener noreferrer">schedule section of my previous post</A>).<BR />
<BR />
Discussion was active throughout, too, with 134 chat messages in total.<BR />
<BR />
We looked briefly at this tutorial on the <A href="https://developers.sap.com" target="_blank" rel="noopener noreferrer">developers.sap.com</A> site: "<A href="https://developers.sap.com/tutorials/cp-apm-nodejs-create-service.html" target="_blank" rel="noopener noreferrer">Create a Business Service with Node.js using Visual Studio Code</A>"&nbsp;and specifically examined the nicely modern JavaScript in the "Provide mock data" and "Add custom logic" steps, noting various modern constructs and techniques such as destructuring, fat arrow function definition syntax, and more.<BR />
<BR />
We then used parts A and B of the <A href="https://adventofcode.com/2018/day/1" target="_blank" rel="nofollow noopener noreferrer">Day 1 puzzle from Advent Of Code 2018</A>&nbsp;to warm up our collective grey matter a little. We based our hacking activities around a simple test harness that expects a dayN.js file with two exported solver functions <CODE>a</CODE>&nbsp;and <CODE>b</CODE>, and a dayN.input file with the day's input.<BR />
<BR />
This is what the test harness (<CODE>index.js</CODE>) looked like:<BR />
<PRE class="language-javascript"><CODE>// Test runner for AOC solutions<BR />
<BR />
// The day is expected to be passed via an env var 'DAY'<BR />
// From this we make the JS module (e.g. day1.js) and the input (e.g. day1.input)<BR />
const<BR />
	solver = './day' + (process.env.DAY || 1),<BR />
	input = solver + '.input'<BR />
<BR />
	// To clean the input generically<BR />
	clean = x =&gt; x<BR />
		.split(/\n/)                    // split lines into array<BR />
		.map(x =&gt; x.replace(/\r$/, '')) // remove any carriage returns<BR />
		.filter(x =&gt; x.length),         // drop any empty lines<BR />
<BR />
	// Load the day's solver (which should have 'a' and 'b' functions)<BR />
	solve = require(solver)<BR />
<BR />
// Load the input, clean up, and run the solvers a and b<BR />
require('fs').readFile(input, 'utf8', (err, data) =&gt; {<BR />
<BR />
	const input = clean(data)<BR />
<BR />
	// Output solutions<BR />
	console.log(solve.a(input))<BR />
	console.log(solve.b(input))<BR />
})</CODE></PRE><BR />
We used some <CODE>map</CODE>&nbsp;and <CODE>reduce</CODE>&nbsp;goodness to solve part <CODE>a</CODE>, and then looked at building a "seen" mechanism using a <A href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures" target="_blank" rel="nofollow noopener noreferrer">closure</A> and an <A href="https://developer.mozilla.org/en-US/docs/Glossary/IIFE" target="_blank" rel="nofollow noopener noreferrer">Immediately Invoked Function Expression</A> (IIFE) to solve part <CODE>b</CODE>.<BR />
<BR />
It was fun!<BR />
<BR />
<STRONG>Thank you</STRONG><BR />
<BR />
I'm leaving the most important section to the end of this post, which is to recognise and thank everyone who joined, you are the ones who made the episode successful. Some of you had already started following me on Twitch, and some joined the stream and followed there and then.<BR />
<BR />
abapfreak, Espersura, StErMi87, avhbn, hobru2000, aminmarsafy, ccmehil, saffronsoul, uwek0, larshp, fredverheul, christianguenter, nocheintobi, dn1977, venkymachineni, pimpmycode, CariFaine, pjcools, chandanpraharaj, ljadhav, bharath86, sygyzmundovych, rgeeks_mrd, hausenhexe, mexlance, nabheetmadan, 5PERI, henrik_da, cleSAP, tpham207, Roberdinho, lvhengel, mexico_man, hfumey, ennowulff, imyourtwitchdoctor, Seiivo, ceedee666, koehntopp, rileyrainey, sevladimirs, darkworld2255, fullstackdaun, aydogdumurat, tassie_rocks, thulium3, mylesfenton, patrizia0103, IchBimsDeiMudda, nzamani, BungaloX, harunkar, CoreKeeper, callaghan001, sun150690, rohith480, alancecchini, hamzoo, ankit403, grabenschlaefer, tgrassl, fabianorosa1, rsletta, nypesap, sw1fm4n, Lupomania, ssurampally, vaihbavshetkar, uxkjaer, fulstak.<BR />
<BR />
A special thank you to those that took part in the conversation. This series is all about learning from each other, so good on you.<BR />
<BR />
For those who are interested in the subsequent episodes in this "<A href="https://blogs.sap.com/tag/handsonsapdev/" target="_blank" rel="noopener noreferrer">Hands on SAP dev with qmacro</A>" series and who are not already following, may I recommend you follow me on Twitch - go here: <A href="https://twitch.tv/qmacro99" target="_blank" rel="nofollow noopener noreferrer">https://twitch.tv/qmacro99</A> and hit the "Follow" button:<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2019/01/Screen-Shot-2019-01-21-at-15.26.47.png" /><BR />
<BR />
Find out in the <A href="https://blogs.sap.com/2019/01/16/hands-on-sap-dev-with-qmacro-new-live-stream-series/#updates" target="_blank" rel="noopener noreferrer">updates section of my previous post</A>&nbsp;how to get reminded of upcoming events.<BR />
<BR />
Finally, in the words of the Sirius Cybernetic Corporation Complaints division (<A href="https://hitchhikers.fandom.com/wiki/Share_and_Enjoy" target="_blank" rel="nofollow noopener noreferrer">from Hitch Hiker's Guide to the Galaxy</A>, of course): <STRONG>share and enjoy</STRONG>!
---
Hands-on SAP dev with qmacro - new live stream series
technology-blog-sap
2019-01-16
https://community.sap.com/t5/technology-blogs-by-sap/hands-on-sap-dev-with-qmacro-new-live-stream-series/ba-p/13393464
2019-01-16-hands-on-sap-dev-with-qmacro-new-live-stream-series
<EM>I live stream on a regular basis, and have been doing so since early 2019, first on Twitch, and now <STRONG>on YouTube</STRONG>. I have an approximately weekly schedule, with episodes on SAP development topics. The show is called "Hands-on SAP dev with qmacro" and you can join to watch and take part live on <A href="https://youtube.com/djadams-qmacro" target="_blank" rel="nofollow noopener noreferrer">my YouTube channel</A>, usually&nbsp;on Fridays. This post tells you what else you might need to know.&nbsp;</EM><BR />
<BR />
<STRONG>Update 17 Jun 2020</STRONG><BR />
<BR />
<EM>I've been keeping this blog post up to date since I started streaming at the start of 2019 and it's served us well, but it's time to retire it in favour of other ways of helping you find and join upcoming live streams, not least because it's not only me but my colleagues such as <SPAN class="mention-scrubbed">iinside</SPAN>, <SPAN class="mention-scrubbed">thomas.jung</SPAN> and <SPAN class="mention-scrubbed">kevin.muessig</SPAN> that are streaming too.&nbsp;</EM><BR />
<BR />
<EM>So here are new ways of finding, being reminded of and joining upcoming live stream episodes:</EM><BR />
<UL><BR />
 	<LI><EM>Head over to <A href="https://youtube.com/djadams-qmacro" target="_blank" rel="nofollow noopener noreferrer">youtube.com/djadams-qmacro</A> and hit that red <SPAN style="color: #ff0000">SUBSCRIBE</SPAN> button</EM></LI><BR />
 	<LI><EM>Use the "SET REMINDER" buttons on upcoming streams you'd like to watch</EM><BR />
<BR />
<EM><IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2019/01/Screen-Shot-2020-06-17-at-16.01.07.png" height="275" width="424" /></EM></LI><BR />
 	<LI><EM>Add the publicly available calendar <A href="https://bit.ly/live-stream-times" target="_blank" rel="nofollow noopener noreferrer">bit.ly/live-stream-times</A> to your calendar system for automatic reminders</EM></LI><BR />
</UL><BR />
<EM>Don't forget to do this for Max, Tom and Kevin's channels too - you can find links to them in the Featured Channel section of my channel (see the right hand side of the screenshot above).</EM><BR />
<BR />
<EM>We're looking forward to seeing you online!&nbsp;</EM><BR />
<BR />
(end of update)<BR />
<BR />
If you're looking for the recordings of the live streams, jump down to the <A href="#replays" target="_blank" rel="nofollow noopener noreferrer">Catch the replays</A> section below.<BR />
<BR />
This post has multiple sections - here are quick links to them all: <A href="#background" target="_blank" rel="nofollow noopener noreferrer">Background</A>&nbsp;|&nbsp;<A href="#livestreaming" target="_blank" rel="nofollow noopener noreferrer">Live streaming</A> |&nbsp;<A href="#watch" target="_blank" rel="nofollow noopener noreferrer">How to watch</A>&nbsp;|&nbsp;<A href="#replays" target="_blank" rel="nofollow noopener noreferrer">Catch the replays</A> |&nbsp;<A href="#upcoming" target="_blank" rel="nofollow noopener noreferrer">Upcoming episodes</A>&nbsp;|&nbsp;<A href="#updates" target="_blank" rel="nofollow noopener noreferrer">Updates</A>.<BR />
<BR />
This post is also available via the short link <A href="http://bit.ly/handsonsapdev" target="_blank" rel="nofollow noopener noreferrer">http://bit.ly/handsonsapdev</A>.<BR />
<BR />
<A name="background" target="_blank"></A><BR />
<STRONG>Background</STRONG><BR />
<BR />
One subject I've been thinking about for a while, especially in the context of my <A href="https://blogs.sap.com/tag/mondaymorningthoughts/" target="_blank" rel="noopener noreferrer">Monday morning thoughts series</A>&nbsp;last year (in particular <A href="https://blogs.sap.com/2018/06/04/monday-morning-thoughts-the-learning-continuum/" target="_blank" rel="noopener noreferrer">the learning continuum</A>, <A href="https://blogs.sap.com/2018/09/24/monday-morning-thoughts-growth-is-upwards/" target="_blank" rel="noopener noreferrer">growth is upwards</A> and <A href="https://blogs.sap.com/2018/11/26/monday-morning-thoughts-learning-media-and-mechanisms/" target="_blank" rel="noopener noreferrer">learning media and mechanisms</A>&nbsp;posts)&nbsp;is how I take on new information.<BR />
<BR />
One of the ways is to watch videos, and for me that is a medium that is easy and enjoyable to consume.<BR />
<BR />
A wonderful bonus for me is the side effect of getting inside the heads of developers, learning, on a high level, how they operate, and noticing, on a low level, how they work on a day to day basis. On many occasions, the things I've learned have been serendipitous and only partially connected to the subject at hand. How a developer goes about editing, what tools they use, and what workflows they employ, deliberate or otherwise.<BR />
<BR />
<A name="livestreaming" target="_blank"></A><BR />
<STRONG>Live streaming</STRONG><BR />
<BR />
One of the consumption styles in this vein is to watch live streams, where folks work on stuff, figuring things out, building up solutions piece by piece, or sharing knowledge or experience in specific areas ... in full view of an audience who are present there with that host, over the Internet. Moreover, in the live streams I've joined, it's two-way. The viewers can interact with each other and with the host, via chat and other mechanisms.<BR />
<BR />
It's a fascinating idea, and one that caught my imagination last year, so much so that I thought I'd give it a try.<BR />
<BR />
<A name="watch" target="_blank"></A><BR />
<STRONG>How to watch</STRONG><BR />
<BR />
I used to stream on Twitch (in 2019), but I now stream on YouTube. All you need to do is visit my channel and subscribe (so you get updates and notifications):<BR />
<BR />
<STRONG><A href="https://youtube.com/djadams-qmacro" target="_blank" rel="nofollow noopener noreferrer">https://youtube.com/djadams-qmacro</A></STRONG><BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2019/01/Screenshot-2019-12-31-at-15.15.37.png" /><BR />
<BR />
<SPAN style="font-size: 1rem">If you're signed in to YouTube when you join a live stream, you'll be able to chat and take part in the live stream discussions, which is great!&nbsp;</SPAN><BR />
<BR />
<A name="replays" target="_blank"></A><BR />
<STRONG>Catch the replays</STRONG><BR />
<BR />
If you missed a live episode, you can watch the recording, which will be available on my channel pretty much straight after the the live episode finishes.<BR />
<BR />
Each recording is then also available on the <A href="https://www.youtube.com/channel/UCNfmelKDrvRmjYwSi9yvrMg" target="_blank" rel="nofollow noopener noreferrer">SAP Developers channel</A> organised in a playlist <A href="https://www.youtube.com/playlist?list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0" target="_blank" rel="nofollow noopener noreferrer">Hands-on SAP dev with qmacro</A> - by the way, don't forget to subscribe to this channel too!<BR />
<BR />
Annotated links: For each recording on YouTube, there will be annotated hh:mm:ss links so you can jump straight to the part you're looking for. One annotations blog post per episode - and the links are in the rightmost column in the table. <A href="https://twitter.com/qmacro/status/1102927789089525760" target="_blank" rel="nofollow noopener noreferrer">This tweet</A> shows an example of how you might use the annotated links feature.<BR />
<BR />
&nbsp;<BR />
<DIV><BR />
<TABLE style="height: 8353px"><BR />
<TBODY><BR />
<TR style="height: 43px"><BR />
<TD style="width: 31px;height: 43px" width="5%"><STRONG>Ep.</STRONG></TD><BR />
<TD style="width: 91px;height: 43px" width="15%"><STRONG>Date</STRONG></TD><BR />
<TD style="width: 494px;height: 43px" width="55%"><STRONG>Title &amp; description with link to full video recording</STRONG></TD><BR />
</TR><BR />
<TR style="height: 178px"><BR />
<TD style="width: 31px;height: 178px"><A name="ep0" target="_blank"></A>0</TD><BR />
<TD style="width: 91px;height: 178px">Friday<BR />
18 Jan 2019</TD><BR />
<TD style="width: 494px;height: 178px"><BR />
<BR />
Ep.0 - Getting our feet wet<BR />
<BR />
In this initial episode of the "Hands-on SAP dev with qmacro" series, we take a brief look at what using SAP's Cloud Application Programming Model in a <A href="https://node.js/" target="_blank" rel="noopener noreferrer nofollow">Node.js</A> context means for us JavaScript developers, and warm our brains up by solving some puzzles with a bit of ES6 flavoured code (with some functional aspects thrown in for good measure).<BR />
<BR />
<A href="https://www.youtube.com/watch?v=V7UCloLcPyo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0" target="_blank" rel="nofollow noopener noreferrer">Watch replay on YouTube</A><BR />
<BR />
<A href="https://blogs.sap.com/2019/02/20/annotated-links-hands-on-sap-dev-with-qmacro-episode-0/" target="_blank" rel="noopener noreferrer">Read annotations</A></TD><BR />
</TR><BR />
<TR style="height: 315px"><BR />
<TD style="width: 31px;height: 315px"><A name="ep1" target="_blank"></A>1</TD><BR />
<TD style="width: 91px;height: 315px">Friday<BR />
25 Jan 2019</TD><BR />
<TD style="width: 494px;height: 315px">Ep.1 - Setting up for the Node.js flavoured version of SAP's Cloud Application Programming Model<BR />
<P class="">While we warmed our grey matter up in the previous episode, in this episode we set up what we need to build with the <A href="https://node.js/" target="_blank" rel="noopener noreferrer nofollow">Node.js</A> (JavaScript) flavoured version of SAP's Cloud Application Programming Model (CAPM). This version allows us to build locally, with tools on our own machines, so that's what we'll be doing.</P><BR />
<P class="">Therefore, we use the SAP NPM registry to find &amp; install the command line tool 'cds' that we can use to generate and manage Node.js based CAPM projects and also install the CDS language support for the VS Code editor, which comes in the form of an VS Code extension. Then we set up our Cloud Foundry environment on SAP Cloud Platform and install the 'cf' command line tool which we can use to interact with that environment.</P><BR />
<A href="https://www.youtube.com/watch?v=rQ3MU_fWK-Y&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0" target="_blank" rel="nofollow noopener noreferrer">Watch replay on YouTube</A><BR />
<BR />
<A href="https://blogs.sap.com/2019/03/05/annotated-links-episode-1-of-hands-on-sap-dev-with-qmacro/" target="_blank" rel="noopener noreferrer">Read annotations</A></TD><BR />
</TR><BR />
<TR style="height: 260px"><BR />
<TD style="width: 31px;height: 260px"><A name="ep2" target="_blank"></A>2</TD><BR />
<TD style="width: 91px;height: 260px">Friday<BR />
01 Feb 2019</TD><BR />
<TD style="width: 494px;height: 260px"><BR />
<BR />
Ep.2 - Starting to build a bookshop backend service with CAPM<BR />
<BR />
In the <A href="https://bit.ly/handsonsapdev#ep1" target="_blank" rel="nofollow noopener noreferrer">previous episode</A> we set up our tools and development environment ready for some SAP Cloud Application Programming Model (CAPM) action of the Node.js (JavaScript) flavour. So now we're ready to start exploring our first data and service definitions in the language of CAPM, i.e. CDS (Core Data &amp; Services).<BR />
<BR />
We follow the "<A href="https://developers.sap.com/tutorials/cp-apm-nodejs-create-service.html" target="_blank" rel="noopener noreferrer">Create a Business Service with Node.js using Visual Studio Code</A>" tutorial on the SAP Developers tutorial navigator and start to explore what CAPM and CDS can do for us.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=583eQZFfWgE&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0" target="_blank" rel="nofollow noopener noreferrer">Watch replay on YouTube</A><BR />
<BR />
<A href="https://blogs.sap.com/2019/03/06/annotated-links-episode-2-of-hands-on-sap-dev-with-qmacro/" target="_blank" rel="noopener noreferrer">Read annotations</A></TD><BR />
</TR><BR />
<TR style="height: 165px"><BR />
<TD style="width: 31px;height: 165px"><A name="ep3" target="_blank"></A>3</TD><BR />
<TD style="width: 91px;height: 165px">Friday<BR />
08 Feb 2019</TD><BR />
<TD style="width: 494px;height: 165px"><BR />
<BR />
Ep.3 - Special guest edition: Interview with core CAPM developers from the mothership!<BR />
<BR />
This episode is rather special, in that I interview Christian Georgi from the core CAPM development team at the mothership in Walldorf. We talk CAPM, have some Q&amp;A Christian shows us some cool live demos.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=iFLlTpwOujw&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0" target="_blank" rel="nofollow noopener noreferrer">Watch replay on YouTube</A><BR />
<BR />
<A href="https://blogs.sap.com/2019/03/07/annotated-links-episode-3-of-hands-on-sap-dev-with-qmacro/" target="_blank" rel="noopener noreferrer">Read annotations</A></TD><BR />
</TR><BR />
<TR style="height: 138px"><BR />
<TD style="width: 31px;height: 138px"><A name="ep4" target="_blank"></A>4</TD><BR />
<TD style="width: 91px;height: 138px">Wednesday<BR />
13 Feb 2019</TD><BR />
<TD style="width: 494px;height: 138px"><BR />
<BR />
Ep.4 - Debugging CAPM and a look at the cds REPL<BR />
<BR />
We take a look at how we can use VS Code debugging facilities to debug CAPM services, and also start to explore the cds command line tool's REPL (Read Evaluate Print Loop) environment.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=Dc0XZXoirf8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0" target="_blank" rel="nofollow noopener noreferrer">Watch on YouTube</A><BR />
<BR />
<A href="https://blogs.sap.com/2019/03/08/annotated-links-episode-4-of-hands-on-sap-dev-with-qmacro/" target="_blank" rel="noopener noreferrer">Read annotations</A></TD><BR />
</TR><BR />
<TR style="height: 138px"><BR />
<TD style="width: 31px;height: 138px"><A name="ep5" target="_blank"></A>5</TD><BR />
<TD style="width: 91px;height: 138px">Friday<BR />
15 Feb 2019</TD><BR />
<TD style="width: 494px;height: 138px"><BR />
<BR />
Ep.5 - Continuation of the CAPM Node.js bookshop tutorial<BR />
<BR />
We continue working our way through the tutorial "<A href="https://developers.sap.com/tutorials/cp-apm-nodejs-create-service.html" target="_blank" rel="noopener noreferrer">Create a Business Service with Node.js using Visual Studio Code</A>" on the <A href="https://developers.sap.com" target="_blank" rel="noopener noreferrer">SAP Developer Centre</A>.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=bwaRcTD5zLs&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0" target="_blank" rel="nofollow noopener noreferrer">Watch replay on YouTube</A><BR />
<BR />
<A href="https://blogs.sap.com/2019/03/08/annotated-links-episode-5-of-hands-on-sap-dev-with-qmacro/" target="_blank" rel="noopener noreferrer">Read annotations</A></TD><BR />
</TR><BR />
<TR style="height: 151px"><BR />
<TD style="width: 31px;height: 151px"><A name="ep6" target="_blank"></A>6</TD><BR />
<TD style="width: 91px;height: 151px">Friday<BR />
22 Feb 2019</TD><BR />
<TD style="width: 494px;height: 151px"><BR />
<BR />
Ep.6 - Extending the CAPM bookshop tutorial - hacking &amp; learning<BR />
<BR />
We're pretty much at the end of the tutorial as it stands. But there's always more to learn by hacking on it, to tweak and extend it. We do that in this episode, uncovering more features of CAPM and CDS.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=kIDTvoSvpa0&amp;t=2447s&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;index=8" target="_blank" rel="nofollow noopener noreferrer">Watch replay on YouTube</A><BR />
<BR />
<A href="https://blogs.sap.com/2019/02/22/annotated-links-hands-on-sap-dev-with-qmacro-episode-6/" target="_blank" rel="noopener noreferrer">Read annotations</A></TD><BR />
</TR><BR />
<TR style="height: 178px"><BR />
<TD style="width: 31px;height: 178px"><A name="ep7" target="_blank"></A>7</TD><BR />
<TD style="width: 91px;height: 178px">Wednesday<BR />
27 Feb 2019</TD><BR />
<TD style="width: 494px;height: 178px"><BR />
<BR />
Ep.7 - Digging into the language server protocol, cds-lsp and Vim<BR />
<BR />
One of the things we looked at briefly in the previous episode was the language server protocol (LSP) implementation for the CDS language, in the VS Code extension. In this midweek episode we explore getting a Vim LSP client working and connected to the cds-lsp server.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=WLkFAtgEWs8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0" target="_blank" rel="nofollow noopener noreferrer">Watch replay on YouTube</A><BR />
<BR />
<A href="https://blogs.sap.com/2019/03/19/annotated-links-episode-7-of-hands-on-sap-dev-with-qmacro/" target="_blank" rel="noopener noreferrer">Read annotations</A></TD><BR />
</TR><BR />
<TR style="height: 206px"><BR />
<TD style="width: 31px;height: 206px"><A name="ep8" target="_blank"></A>8</TD><BR />
<TD style="width: 91px;height: 206px">Friday<BR />
01 Mar 2019</TD><BR />
<TD style="width: 494px;height: 206px"><BR />
<BR />
Ep.8 - Using Axios, ES6, promises &amp; pure functions to grab data<BR />
<BR />
In <A href="https://blogs.sap.com/2019/01/16/hands-on-sap-dev-with-qmacro-new-live-stream-series/#ep6" target="_blank" rel="noopener noreferrer">Episode 6</A> we set out creating our mini Northwind service, called Northbreeze, and started to write some code to grab the Northwind data, exploring Axios as an HTTP client library that supports promises and (therefore) dot chaining. In this episode we continue on towards completing this code to produce CSV files as input to our CAP model, exploring pure functions along the way.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=xUDSnNPFTQo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0" target="_blank" rel="nofollow noopener noreferrer">Watch replay on YouTube</A><BR />
<BR />
<A href="https://blogs.sap.com/2019/03/26/annotated-links-episode-8-of-hands-on-sap-dev-with-qmacro/" target="_blank" rel="noopener noreferrer">Read annotations</A></TD><BR />
</TR><BR />
<TR style="height: 151px"><BR />
<TD style="width: 31px;height: 151px"><A name="ep9" target="_blank"></A>9</TD><BR />
<TD style="width: 91px;height: 151px">Wednesday<BR />
06 Mar 2019</TD><BR />
<TD style="width: 494px;height: 151px"><BR />
<BR />
Ep.9 - Continuing with data retrieval for Northbreeze<BR />
<BR />
In&nbsp;<A href="https://bit.ly/handsonsapdev#ep8" rel="nofollow noopener noreferrer" target="_blank">episode 8 last Friday</A>&nbsp;we were constructing the data retrieval script using Axios and promises. In this episode we continue to build that out, and then convert the data thus retrieved to CSV for loading into the database with&nbsp;<CODE>cds deploy</CODE>.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=FoK25WbVg_M&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;index=10" target="_blank" rel="nofollow noopener noreferrer">Watch replay on YouTube</A><BR />
<BR />
<A href="https://blogs.sap.com/2019/03/26/annotated-links-episode-9-of-hands-on-sap-dev-with-qmacro/" target="_blank" rel="noopener noreferrer">Read annotations</A></TD><BR />
</TR><BR />
<TR style="height: 178px"><BR />
<TD style="width: 31px;height: 178px"><A name="ep10" target="_blank"></A>10</TD><BR />
<TD style="width: 91px;height: 178px">Thursday<BR />
07 Mar 2019</TD><BR />
<TD style="width: 494px;height: 178px"><BR />
<BR />
Ep.10 - Finishing off the data retrieval mechanism in Node.js<BR />
<BR />
Following the previous episode there's a bit more work to do to finish off the data retrieval mechanism we have been building to extract data from the original Northwind service and turn it into CSV files that can be loaded into a persistence layer with 'cds deploy'. In this episode we finish this off and load the data.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=4uu3fCGiZ6U&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;index=11" target="_blank" rel="nofollow noopener noreferrer">Watch replay on YouTube</A><BR />
<BR />
<A href="https://blogs.sap.com/2019/03/26/annotated-links-episode-10-of-hands-on-sap-dev-with-qmacro/" target="_blank" rel="noopener noreferrer">Read annotations</A></TD><BR />
</TR><BR />
<TR style="height: 178px"><BR />
<TD style="width: 31px;height: 178px"><A name="ep11" target="_blank"></A>11</TD><BR />
<TD style="width: 91px;height: 178px">Friday<BR />
08 Mar 2019</TD><BR />
<TD style="width: 494px;height: 178px"><BR />
<BR />
Ep.11 - A CAP project for "Geonames" &amp; funcprog style with Chris Whealy<BR />
<BR />
In this episode we have developer <A href="https://twitter.com/logarhythm" rel="nofollow noopener noreferrer" target="_blank">Chris Whealy</A>&nbsp;as a guest, taking us through his&nbsp;<A href="https://github.com/ChrisWhealy/geonames_hana" target="_blank" rel="nofollow noopener noreferrer">personal project</A> making use of&nbsp;<A href="https://www.geonames.org/" rel="nofollow noopener noreferrer" target="_blank">Geonames</A>&nbsp;data and built using CAP with Node.js. Along the way we look at Chris's programming style which takes a lot from the functional programming world.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=c5KVuCNOv4g&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0" target="_blank" rel="nofollow noopener noreferrer">Watch replay on YouTube</A><BR />
<BR />
<A href="https://blogs.sap.com/2019/04/30/annotated-links-episode-11-of-hands-on-sap-dev-with-qmacro/" target="_blank" rel="noopener noreferrer">Read annotations</A></TD><BR />
</TR><BR />
<TR style="height: 178px"><BR />
<TD style="width: 31px;height: 178px"><A name="ep12" target="_blank"></A>12</TD><BR />
<TD style="width: 91px;height: 178px">Friday<BR />
15 Mar 2019</TD><BR />
<TD style="width: 494px;height: 178px"><BR />
<BR />
Ep.12 - Exploring and understanding parts of <a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a>/cds JS - code &amp; style<BR />
<BR />
I had an itch to scratch, in that I wanted to be able to filter out columns in CSV files. In this episode we take a look at some of the JavaScript within the <a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a>/cds module - what it offers and how it's written. We then see how some of that was useful in building a simple CSV filter mechanism.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=c93FYLw8DfI&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;index=13" target="_blank" rel="nofollow noopener noreferrer">Watch replay on YouTube</A><BR />
<BR />
<A href="https://blogs.sap.com/2019/04/04/annotated-links-episode-12-of-hands-on-sap-dev-with-qmacro/" target="_blank" rel="noopener noreferrer">Read annotations</A></TD><BR />
</TR><BR />
<TR style="height: 165px"><BR />
<TD style="width: 31px;height: 165px"><A name="ep13" target="_blank"></A>13</TD><BR />
<TD style="width: 91px;height: 165px">Wednesday<BR />
20 Mar 2019</TD><BR />
<TD style="width: 494px;height: 165px"><BR />
<BR />
Ep.13 - Stdio-ifying the CSV filter mechanism<BR />
<BR />
In the previous episode (<A href="https://bit.ly/handsonsapdev#ep12" target="_blank" rel="nofollow noopener noreferrer">Ep.12</A>) we looked at a simple CSV filter utility. In this episode we improve it by giving it the ability to read from STDIN and write to STDOUT so it plays nicely in pipeline contexts. Then we'll be ready to use it to finalise our data for our CAP based "Northbreeze" service.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=vwPE7IaEfbc&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0" target="_blank" rel="nofollow noopener noreferrer">Watch replay on YouTube</A><BR />
<BR />
<A href="https://blogs.sap.com/2019/04/11/annotated-links-episode-13-of-hands-on-sap-dev-with-qmacro/" target="_blank" rel="noopener noreferrer">Read annotations</A></TD><BR />
</TR><BR />
<TR style="height: 206px"><BR />
<TD style="width: 31px;height: 206px"><A name="ep14" target="_blank"></A>14</TD><BR />
<TD style="width: 91px;height: 206px">Friday<BR />
22 Mar 2019</TD><BR />
<TD style="width: 494px;height: 206px"><BR />
<BR />
Ep.14 - Exploring CAP service level features and annotations<BR />
<BR />
After a pleasant detour hacking together some CSV related utilities with Node.js we return to our Northbreeze CAP project and take a look at some of the service level features, looking how they can complement the data model, and playing around with some of the annotations available to us, to see what effect they have. We also take a look at fixing the issue we had with the boolean property :-0 back in Ep.10.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=E-0BR62oX-Q&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0" target="_blank" rel="nofollow noopener noreferrer">Watch replay on YouTube</A><BR />
<BR />
<A href="https://blogs.sap.com/2019/04/11/annotated-links-episode-14-of-hands-on-sap-dev-with-qmacro/" target="_blank" rel="noopener noreferrer">Read annotations</A></TD><BR />
</TR><BR />
<TR style="height: 178px"><BR />
<TD style="width: 31px;height: 178px"><A name="ep15" target="_blank"></A>15</TD><BR />
<TD style="width: 91px;height: 178px">Friday<BR />
29 Mar 2019</TD><BR />
<TD style="width: 494px;height: 178px"><BR />
<BR />
Ep.15 - Starting to look at a frontend for our Northbreeze app<BR />
<BR />
This session comes to you from the location of the SAP CodeJam event in the AOK offices in Frankfurt. In this episode we investigate at a few more cool features of CAP and CDS and start to look at a user interface for our Northbreeze app, and even get to serve it from the CAP runtime itself.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=qqi64GOMGY8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;index=16" target="_blank" rel="nofollow noopener noreferrer">Watch replay on YouTube</A><BR />
<BR />
<A href="https://blogs.sap.com/2019/04/15/annotated-links-episode-15-of-hands-on-sap-dev-with-qmacro/" target="_blank" rel="noopener noreferrer">Read annotations</A></TD><BR />
</TR><BR />
<TR style="height: 165px"><BR />
<TD style="width: 31px;height: 165px"><A name="ep16" target="_blank"></A>16</TD><BR />
<TD style="width: 91px;height: 165px">Wednesday<BR />
03 Apr 2019</TD><BR />
<TD style="width: 494px;height: 165px"><BR />
<BR />
Ep.16 - Getting to a basic frontend with Fiori Elements, and sandbox launchpad<BR />
<BR />
Following on from the previous episode broadcast from the SAP CodeJam in Frankfurt, we continue moving towards a first UI using a sandbox Fiori launchpad and a basic Fiori elements app driven by a small set of annotations.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=es0eAtAQPzk&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;index=17" target="_blank" rel="nofollow noopener noreferrer">Watch replay on YouTube</A><BR />
<BR />
<A href="https://blogs.sap.com/2019/04/23/annotated-links-episode-16-of-hands-on-sap-dev-with-qmacro/" target="_blank" rel="noopener noreferrer">Read annotations</A></TD><BR />
</TR><BR />
<TR style="height: 138px"><BR />
<TD style="width: 31px;height: 138px"><A name="ep17" target="_blank"></A>17</TD><BR />
<TD style="width: 91px;height: 138px">Friday<BR />
05 Apr 2019</TD><BR />
<TD style="width: 494px;height: 138px"><BR />
<BR />
Ep.17 - Digging into the annotation driven UI<BR />
<BR />
We take a look at the simple UI that we created in the previous episode and look a little bit behind the scenes, to learn a bit more about annotations, OData calls and more.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=nmfAVcrQuzM&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0" target="_blank" rel="nofollow noopener noreferrer">Watch replay on YouTube</A><BR />
<BR />
<A href="https://blogs.sap.com/2019/04/24/annotated-links-episode-17-of-hands-on-sap-dev-with-qmacro/" target="_blank" rel="noopener noreferrer">Read annotations</A></TD><BR />
</TR><BR />
<TR style="height: 165px"><BR />
<TD style="width: 31px;height: 165px"><A name="ep18" target="_blank"></A>18</TD><BR />
<TD style="width: 91px;height: 165px">Friday<BR />
12 Apr 2019</TD><BR />
<TD style="width: 494px;height: 165px"><BR />
<BR />
Ep.18 - A first look at CAP with Java<BR />
<BR />
In this episode we take a break from Node.js and JavaScript, and take a first look at the SAP Cloud Application Programming Model with Java. Developer Evangelist <SPAN class="mention-scrubbed">iinside</SPAN> is our expert for the episode, for an interesting and fun overview of what CAP with Java is all about.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=6vEDSPv_-Ok&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;index=19" target="_blank" rel="nofollow noopener noreferrer">Watch replay on YouTube</A><BR />
<BR />
<A href="https://blogs.sap.com/2019/04/25/annotated-links-episode-18-of-hands-on-sap-dev-with-qmacro/#" target="_blank" rel="noopener noreferrer">Read annotations</A></TD><BR />
</TR><BR />
<TR style="height: 165px"><BR />
<TD style="width: 31px;height: 165px"><A name="ep19" target="_blank"></A>19</TD><BR />
<TD style="width: 91px;height: 165px">Wednesday<BR />
17 Apr 2019</TD><BR />
<TD style="width: 494px;height: 165px"><BR />
<BR />
Ep.19 - Some fun with CAP related tooling<BR />
<BR />
This being a midweek episode, we allow ourselves a little bit flexibility and look into developer tooling; we look a bit more at syntax highlighting in Vim, some more LSP usage and try to come up with a workflow for setting up to answer <A href="https://answers.sap.com/tags/9f13aee1-834c-4105-8e43-ee442775e5ce" target="_blank" rel="noopener noreferrer">CAP questions on the SAP Community Q&amp;A site</A>.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=m9H5bSLsRTs&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0" target="_blank" rel="nofollow noopener noreferrer">Watch replay on YouTube</A><BR />
<BR />
<A href="https://blogs.sap.com/2019/04/25/annotated-links-episode-19-of-hands-on-sap-dev-with-qmacro/" target="_blank" rel="noopener noreferrer">Read annotations</A></TD><BR />
</TR><BR />
<TR style="height: 151px"><BR />
<TD style="width: 31px;height: 151px"><A name="ep20" target="_blank"></A>20</TD><BR />
<TD style="width: 91px;height: 151px">Friday<BR />
19 Apr 2019</TD><BR />
<TD style="width: 494px;height: 151px"><BR />
<BR />
Ep.20 - Continuing with CAP and Java<BR />
<BR />
Following on from <A href="https://bit.ly/handsonsapdev#ep18" target="_blank" rel="nofollow noopener noreferrer">Ep.18</A> where we took a first look at CAP with Java, in the SAP Web IDE, we continue our journey and look more closely at adding hooks and debugging. As a bonus, this is again led by our friend and my colleague <SPAN class="mention-scrubbed">iinside</SPAN>!<BR />
<BR />
<A href="https://www.youtube.com/watch?v=zGDFg48YOb0&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;index=22" target="_blank" rel="nofollow noopener noreferrer">Watch replay on YouTube</A><BR />
<BR />
<A href="https://blogs.sap.com/2019/05/06/annotated-links-episode-20-of-hands-on-sap-dev-with-qmacro/" target="_blank" rel="noopener noreferrer">Read annotations</A></TD><BR />
</TR><BR />
<TR style="height: 165px"><BR />
<TD style="width: 31px;height: 165px"><A name="ep21" target="_blank"></A>21</TD><BR />
<TD style="width: 91px;height: 165px">Friday<BR />
26 Apr 2019</TD><BR />
<TD style="width: 494px;height: 165px"><BR />
<BR />
Ep.21 - CAP, Java, Maven and the cloud<BR />
<BR />
This episode brings a selection of related topics. With&nbsp;<SPAN class="mention-scrubbed">iinside</SPAN>&nbsp;we continue where we left off in the&nbsp;<A href="https://github.com/qmacro/one-to-one/issues/bit.ly/handsonsapdev#ep20" target="_blank" rel="nofollow noopener noreferrer">previous episode</A>&nbsp;and then dig a little bit into Maven tooling. After that we switch back to our Northbreeze service and look at deploying to the Cloud Foundry environment on SAP Cloud Platform.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=UR4xPXk0MeI&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;index=22" target="_blank" rel="nofollow noopener noreferrer">Watch replay on YouTube</A><BR />
<BR />
<A href="https://blogs.sap.com/2019/05/09/annotated-links-episode-21-of-hands-on-sap-dev-with-qmacro" target="_blank" rel="noopener noreferrer">Read annotations</A></TD><BR />
</TR><BR />
<TR style="height: 192px"><BR />
<TD style="width: 31px;height: 192px"><A name="ep22" target="_blank"></A>22</TD><BR />
<TD style="width: 91px;height: 192px">Wednesday<BR />
01 May<BR />
2019</TD><BR />
<TD style="width: 494px;height: 192px"><BR />
<BR />
Ep.22 - Live stream community share - dotfiles and Google Cloud Run goodness<BR />
<BR />
In this midweek episode we enjoy a little off piste activity with two special guests from the #HandsOnSAPDev community. Ronnie Sletta describes his setup and takes us through his dotfiles for new machine setups, and Nabheet Madan shows us how he deployed a CAP project to Google Cloud Run.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=10NnzXZLjTQ&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0" target="_blank" rel="nofollow noopener noreferrer">Watch replay on YouTube</A><BR />
<BR />
<A href="https://blogs.sap.com/2019/05/09/annotated-links-episode-22-of-hands-on-sap-dev-with-qmacro/" target="_blank" rel="noopener noreferrer">Read annotations</A></TD><BR />
</TR><BR />
<TR style="height: 124px"><BR />
<TD style="width: 31px;height: 124px"><A name="ep23" target="_blank"></A>23</TD><BR />
<TD style="width: 91px;height: 124px">Friday<BR />
03 May 2019</TD><BR />
<TD style="width: 494px;height: 124px"><BR />
<BR />
Ep.23 - Digging in to the sitregcapm project<BR />
<BR />
In this episode we take a closer look at the project to rewrite the SAP Event Registration app backend using CAP, in the form of the&nbsp;<A href="https://github.com/sapmentors/sitregcapm" target="_blank" rel="nofollow noopener noreferrer">sitregcapm</A>&nbsp;repo on GitHub.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=iettgjZyA2E&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0" target="_blank" rel="nofollow noopener noreferrer">Watch replay on YouTube</A><BR />
<BR />
<A href="https://blogs.sap.com/2019/05/09/annotated-links-episode-23-of-hands-on-sap-dev-with-qmacro/" target="_blank" rel="noopener noreferrer">Read annotations</A></TD><BR />
</TR><BR />
<TR style="height: 178px"><BR />
<TD style="width: 31px;height: 178px"><A name="ep24" target="_blank"></A>24</TD><BR />
<TD style="width: 91px;height: 178px">Friday<BR />
10 May 2019</TD><BR />
<TD style="width: 494px;height: 178px"><BR />
<BR />
Ep.24 - Going from local CAP to cloud CAP with MTA based deployments<BR />
<BR />
In this episode we have&nbsp;<SPAN class="mention-scrubbed">mariusobert</SPAN> who takes us on a journey from our local CAP development environment to the cloud. Specifically he shows us how to deploy a simple CAP project to SAP Cloud Platform Cloud Foundry environment and gives us some tips and tricks along the way.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=cXbCGVHFsf0&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0" target="_blank" rel="nofollow noopener noreferrer">Watch replay on YouTube</A><BR />
<BR />
<A href="https://blogs.sap.com/2019/05/29/annotated-links-episode-24-of-hands-on-sap-dev-with-qmacro-and-iobert/" target="_blank" rel="noopener noreferrer">Read annotations</A></TD><BR />
</TR><BR />
<TR style="height: 151px"><BR />
<TD style="width: 31px;height: 151px"><A name="ep25" target="_blank"></A>25</TD><BR />
<TD style="width: 91px;height: 151px">Friday<BR />
24 May 2019</TD><BR />
<TD style="width: 494px;height: 151px"><BR />
<BR />
Ep.25 - System reset<BR />
<BR />
The past week has been a little bit hectic and distracting, so I use this episode as a sort of âsystem resetâ to figure out where things are, what we want to work on, and share some items that have come up recently.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=9yL-mxX-rxo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0" target="_blank" rel="nofollow noopener noreferrer">Watch replay on YouTube</A><BR />
<BR />
<A href="https://blogs.sap.com/2019/07/09/annotated-links-episode-25-of-hands-on-sap-dev-with-qmacro/" target="_blank" rel="noopener noreferrer">Read annotations</A></TD><BR />
</TR><BR />
<TR style="height: 165px"><BR />
<TD style="width: 31px;height: 165px"><A name="ep26" target="_blank"></A>26</TD><BR />
<TD style="width: 91px;height: 165px">Wednesday<BR />
29 May 2019</TD><BR />
<TD style="width: 494px;height: 165px"><BR />
<BR />
Ep.26 - Vim CDS plugin with new <a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a>/cds-lsp package<BR />
<BR />
Now that the <a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a>/cds-lsp package is published to the public SAP NPM registry, it's a good time to look how we can incorporate that into the Vim CDS plugin. Plus more SAP Cloud Platform Workflow goodness too!<BR />
<BR />
<A href="https://www.youtube.com/watch?v=S7PaeN4r7vQ&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0" target="_blank" rel="nofollow noopener noreferrer">Watch replay on YouTube</A><BR />
<BR />
<A href="https://blogs.sap.com/2019/07/10/annotated-links-episode-26-of-hands-on-sap-dev-with-qmacro/" target="_blank" rel="noopener noreferrer">Read annotations</A></TD><BR />
</TR><BR />
<TR style="height: 151px"><BR />
<TD style="width: 31px;height: 151px"><A name="ep27" target="_blank"></A>27</TD><BR />
<TD style="width: 91px;height: 151px">Friday<BR />
31 May 2019</TD><BR />
<TD style="width: 494px;height: 151px"><BR />
<BR />
Ep.27 - Continuation of the Cloud Platform Workflow project<BR />
<BR />
In this episode we continue where we left off in <A href="https://bit.ly/handsonsapdev#ep25" target="_blank" rel="nofollow noopener noreferrer">Ep.25</A>, to build out the workflow scenario on SAP Cloud Platform, exploring features as we go for service and script tasks, and more.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=Gq_XfrLe_kg&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0" target="_blank" rel="nofollow noopener noreferrer">Watch replay on YouTube</A><BR />
<BR />
<A href="https://blogs.sap.com/2019/07/11/annotated-links-episode-27-of-hands-on-sap-dev-with-qmacro/" target="_blank" rel="noopener noreferrer">Read annotations</A></TD><BR />
</TR><BR />
<TR style="height: 151px"><BR />
<TD style="width: 31px;height: 151px"><A name="ep28" target="_blank"></A>28</TD><BR />
<TD style="width: 91px;height: 151px">Wednesday<BR />
05 Jun 2019</TD><BR />
<TD style="width: 494px;height: 151px"><BR />
<BR />
Ep.28 - Digging into Workflow user task UIs<BR />
<BR />
Continuing on from the previous episode, we dig in a little deeper to user task UIs, looking at the Workflow API and task info, as well as the My Inbox API, to understand how the generic UI component actually works.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=anfNCr-WYDk&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0" target="_blank" rel="nofollow noopener noreferrer">Watch replay on YouTube</A><BR />
<BR />
<A href="https://blogs.sap.com/2019/07/11/annotated-links-episode-28-of-hands-on-sap-dev-with-qmacro/" target="_blank" rel="noopener noreferrer">Read annotations</A></TD><BR />
</TR><BR />
<TR style="height: 151px"><BR />
<TD style="width: 31px;height: 151px"><A name="ep29" target="_blank"></A>29</TD><BR />
<TD style="width: 91px;height: 151px">Friday<BR />
05 Jul 2019</TD><BR />
<TD style="width: 494px;height: 151px"><BR />
<BR />
Ep.29 - Restarting - catchup and stretching<BR />
<BR />
This is the first episode for a few weeks, so it's worth spending some time catching up with where things are, and having a bit of a warmup and stretch, brain-wise, so we can get back into things the right way, including a first look at mocked authorisations in CAP.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=zjAZ7ejvkiU&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;index=31&amp;t=0s" target="_blank" rel="nofollow noopener noreferrer">Watch replay on YouTube</A></TD><BR />
</TR><BR />
<TR style="height: 151px"><BR />
<TD style="width: 31px;height: 151px"><A name="ep30" target="_blank"></A>30</TD><BR />
<TD style="width: 91px;height: 151px">Friday<BR />
19 Jul 2019</TD><BR />
<TD style="width: 494px;height: 151px"><BR />
<BR />
Ep.30 â More on CAP auth and Fiori Elements features<BR />
<BR />
Following on from the previous episode we continue with digging into CAP authorisations and start to take a look at the new built-in Fiori Elements rendering feature in CAP 3.13.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=et61nPmoawM&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;index=32" target="_blank" rel="nofollow noopener noreferrer">Watch replay on YouTube</A></TD><BR />
</TR><BR />
<TR style="height: 138px"><BR />
<TD style="width: 31px;height: 138px"><A name="ep31" target="_blank"></A>31</TD><BR />
<TD style="width: 91px;height: 138px">Wednesday<BR />
24 Jul 2019</TD><BR />
<TD style="width: 494px;height: 138px"><BR />
<BR />
Ep.31 - Digging into CAP's fiori-preview<BR />
<BR />
With 3.13 we saw the appearance of a nifty little feature available in the services via HTTP - the "Fiori preview". In this episode we dig in a little bit to find out how that works. Express middleware? Yes please!<BR />
<BR />
<A href="https://www.youtube.com/watch?v=LSY_hcTHzGw&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;index=32" target="_blank" rel="nofollow noopener noreferrer">Watch replay on YouTube</A></TD><BR />
</TR><BR />
<TR style="height: 151px"><BR />
<TD style="width: 31px;height: 151px"><A name="ep32" target="_blank"></A>32</TD><BR />
<TD style="width: 91px;height: 151px">Friday<BR />
26 Jul 2019</TD><BR />
<TD style="width: 494px;height: 151px"><BR />
<BR />
Ep.32 - Annotations to power the CAP fiori-preview<BR />
<BR />
Now that we're familiar with the fiori-preview feature in CAP, and understand (from the previous episode) how it actually works underneath, we now look a bit deeper at annotations that we can use to power the dynamically rendered Fiori Elements based displays.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=vVSkFKoTeac&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;index=33" target="_blank" rel="nofollow noopener noreferrer">Watch replay on YouTube</A></TD><BR />
</TR><BR />
<TR style="height: 165px"><BR />
<TD style="width: 31px;height: 165px"><A name="ep33" target="_blank"></A>33</TD><BR />
<TD style="width: 91px;height: 165px">Friday<BR />
02 Aug 2019</TD><BR />
<TD style="width: 494px;height: 165px"><BR />
<BR />
Ep.33 - More CAP exploration<BR />
<BR />
Following on from the previous couple of Friday episodes, we continue to explore CAP features, to see what we can find. As an experiment this episode's description remains deliberately loose until we get down to it during the actual stream, so we can just follow our noses and see where we end up.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=FF2-6NTGZto&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;index=34" target="_blank" rel="nofollow noopener noreferrer">Watch replay on YouTube</A></TD><BR />
</TR><BR />
<TR style="height: 151px"><BR />
<TD style="width: 31px;height: 151px"><A name="ep34" target="_blank"></A>34</TD><BR />
<TD style="width: 91px;height: 151px">Friday<BR />
23 Aug 2019</TD><BR />
<TD style="width: 494px;height: 151px"><BR />
<BR />
Ep.34 - Exploring actions and functions in CAP<BR />
<BR />
In this episode we explore the "dark side" of the otherwise RESTful OData protocol (that's fighting talk, I know!) and dig in a little bit to actions and functions. If you've encountered function imports in OData before, you'll feel right at home.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=NurHqhmZm4E&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;index=35" target="_blank" rel="nofollow noopener noreferrer">Watch replay on YouTube</A></TD><BR />
</TR><BR />
<TR style="height: 124px"><BR />
<TD style="width: 31px;height: 124px"><A name="ep35" target="_blank"></A>35</TD><BR />
<TD style="width: 91px;height: 124px">Friday<BR />
30 Aug 2019</TD><BR />
<TD style="width: 494px;height: 124px"><BR />
<BR />
Ep.35 - More on actions and functions in CAP<BR />
<BR />
In this episode we pick up where we left off in the previous episode and continue to dig into actions and functions.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=FoQzyRZK8Sw&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;index=36" target="_blank" rel="nofollow noopener noreferrer">Watch replay on YouTube</A></TD><BR />
</TR><BR />
<TR style="height: 138px"><BR />
<TD style="width: 31px;height: 138px"><A name="ep36" target="_blank"></A>36</TD><BR />
<TD style="width: 91px;height: 138px">Wednesday<BR />
11 Sep 2019</TD><BR />
<TD style="width: 494px;height: 138px"><BR />
<BR />
Ep.36 - Actions and value help in CAP<BR />
<BR />
We get to look a bit more at the orthogonal parts of OData V4 in the form of actions (remember: may have side effects and may (might) not return data) and perhaps investigate value help with code lists.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=bKtcucYCpJU&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;index=37" target="_blank" rel="nofollow noopener noreferrer">Watch replay on YouTube</A></TD><BR />
</TR><BR />
<TR style="height: 151px"><BR />
<TD style="width: 31px;height: 151px"><A name="ep37" target="_blank"></A>37</TD><BR />
<TD style="width: 91px;height: 151px">Friday<BR />
20 Sep 2019</TD><BR />
<TD style="width: 494px;height: 151px"><BR />
<BR />
Ep.37 - Digging into annotations<BR />
<BR />
In this episode we dig into annotations to get closer to an understanding of how value help works. There's a long way to go, but we know the journey will be pleasant and interesting. Come along and enjoy the ride!<BR />
<BR />
<A href="https://www.youtube.com/watch?v=vmDHfFfAank&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;index=38" target="_blank" rel="nofollow noopener noreferrer">Watch replay on YouTube</A></TD><BR />
</TR><BR />
<TR style="height: 138px"><BR />
<TD style="width: 31px;height: 138px"><A name="ep38" target="_blank"></A>38</TD><BR />
<TD style="width: 91px;height: 138px">Friday<BR />
04 Oct 2019</TD><BR />
<TD style="width: 494px;height: 138px"><BR />
<BR />
Ep.38 - Converting API EDMX metadata to CSN<BR />
<BR />
In this episode we take a look at how OData metadata information, in the form of EDMX, can be converted to Core Schema Notation (CSN), and take a look at some SAP API Hub features along the way.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=JjY2MC3kJgM&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;index=39" target="_blank" rel="nofollow noopener noreferrer">Watch replay on YouTube</A><BR />
<BR />
<A href="https://blogs.sap.com/2019/10/04/annotated-links-episode-38-of-hands-on-sap-dev-with-qmacro/" target="_blank" rel="noopener noreferrer">Read annotations</A></TD><BR />
</TR><BR />
<TR style="height: 124px"><BR />
<TD style="width: 31px;height: 124px"><A name="ep39" target="_blank"></A>39</TD><BR />
<TD style="width: 91px;height: 124px">Sunday<BR />
06 Oct 2019</TD><BR />
<TD style="width: 494px;height: 124px"><BR />
<BR />
Ep.39 - Looking at process substitution<BR />
<BR />
This is an impromptu live stream where we look briefly at process substitution in the shell, a powerful construct useful for command line processing.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=JF4lGw4Itpk&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;index=40" target="_blank" rel="nofollow noopener noreferrer">Watch replay on YouTube</A><BR />
<BR />
<A href="https://blogs.sap.com/2019/10/18/annotated-links-episode-39-of-hands-on-sap-dev-with-qmacro/" target="_blank" rel="noopener noreferrer">Read annotations</A></TD><BR />
</TR><BR />
<TR style="height: 124px"><BR />
<TD style="width: 31px;height: 124px"><A name="ep40" target="_blank"></A>40</TD><BR />
<TD style="width: 91px;height: 124px">Friday<BR />
18 Oct 2019</TD><BR />
<TD style="width: 494px;height: 124px"><BR />
<BR />
Ep.40 - Catchup from SAP TechEd<BR />
<BR />
Weâre in the midst of the SAP TechEd season â in this episode we catch up with whatâs been going on and dig into whatever takes our fancy.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=c3B2Nxqxwv4&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;index=2" target="_blank" rel="nofollow noopener noreferrer">Watch replay on YouTube</A><BR />
<BR />
<A href="https://blogs.sap.com/2019/10/22/annotated-links-episode-40-of-hands-on-sap-dev-with-qmacro/" target="_blank" rel="noopener noreferrer">Read annotations</A></TD><BR />
</TR><BR />
<TR style="height: 124px"><BR />
<TD style="width: 31px;height: 124px"><A name="ep41" target="_blank"></A>41</TD><BR />
<TD style="width: 91px;height: 124px">Friday<BR />
25 Oct 2019</TD><BR />
<TD style="width: 494px;height: 124px"><BR />
<BR />
Ep.41 - Business Rules API on the BTP<BR />
<BR />
Continuing on from where we left off in Ep.40, we dig further into the Business Rules APIs and start our journey to the Cloud Foundry environment.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=xhis86osj1s&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;index=42" target="_blank" rel="nofollow noopener noreferrer">Watch replay on YouTube</A><BR />
<BR />
<A href="https://blogs.sap.com/2019/10/26/annotated-links-episode-41-of-hands-on-sap-dev-with-qmacro/" target="_blank" rel="noopener noreferrer">Read annotations</A></TD><BR />
</TR><BR />
<TR style="height: 192px"><BR />
<TD style="width: 31px;height: 192px"><A name="ep42" target="_blank"></A>42</TD><BR />
<TD style="width: 91px;height: 192px">Friday<BR />
01 Nov 2019</TD><BR />
<TD style="width: 494px;height: 192px"><BR />
<BR />
Ep.42 - Impromptu stream on GitHub CAP Community work<BR />
<BR />
After being unable to stream well enough since the Catalina upgrade I took the opportunity to investigate Lightstream, a Chrome extension for streaming. In this impromptu, unplanned stream I work through an issue assigned to me on the CAP Community repository (please forgive the video quality, working on improving that).<BR />
<BR />
<A href="https://www.youtube.com/watch?v=jizaiV6EwzM&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;index=43" target="_blank" rel="nofollow noopener noreferrer">Watch replay on YouTube</A><BR />
<BR />
<A href="https://blogs.sap.com/2019/11/25/annotated-links-episode-42-of-hands-on-sap-dev-with-qmacro/" target="_blank" rel="noopener noreferrer">Read annotations</A></TD><BR />
</TR><BR />
<TR style="height: 206px"><BR />
<TD style="width: 31px;height: 206px"><A name="ep43" target="_blank"></A>43</TD><BR />
<TD style="width: 91px;height: 206px">Tuesday<BR />
19 Nov 2019</TD><BR />
<TD style="width: 494px;height: 206px"><BR />
<BR />
Ep.43 - SAP TechEd Functional Programming recap<BR />
<BR />
At SAP TechEd 2019 in Bangalore we had the session "Write Solid Code with Functional Programming Techniques" where, using JS, we covered some functional programming aspects such as higher order functions, composition and reuse, partial application and immutability. It was a popular session and was repeated the next day. This episode gives us all the chance to look at the content of this session, and some related FP goodness.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=72fkd4TBDtA&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;index=44" target="_blank" rel="nofollow noopener noreferrer">Watch replay on YouTube</A><BR />
<BR />
<A href="https://blogs.sap.com/2019/11/26/annotated-links-episode-43-of-hands-on-sap-dev-with-qmacro/" target="_blank" rel="noopener noreferrer">Read annotations</A></TD><BR />
</TR><BR />
<TR style="height: 151px"><BR />
<TD style="width: 31px;height: 151px"><A name="ep44" target="_blank"></A>44</TD><BR />
<TD style="width: 91px;height: 151px">Friday<BR />
22 Nov 2019</TD><BR />
<TD style="width: 494px;height: 151px"><BR />
<BR />
Ep.44 - Business Rules in Cloud Foundry - setting things up<BR />
<BR />
In previous recent episodes we've taken a look at the Business Rules service on Neo, and kicked the tyres with a simple rules service. Now it's time to move to Cloud Foundry and set things up there. Let's go!<BR />
<BR />
<A href="https://www.youtube.com/watch?v=Mn9xU4BCVcM&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;index=45" target="_blank" rel="nofollow noopener noreferrer">Watch replay on YouTube</A><BR />
<BR />
<A href="https://blogs.sap.com/2019/11/26/annotated-links-episode-44-of-hands-on-sap-dev-with-qmacro/" target="_blank" rel="noopener noreferrer">Read annotations</A></TD><BR />
</TR><BR />
<TR style="height: 151px"><BR />
<TD style="width: 31px;height: 151px"><A name="ep45" target="_blank"></A>45</TD><BR />
<TD style="width: 91px;height: 151px">Wednesday<BR />
27 Nov 2019</TD><BR />
<TD style="width: 494px;height: 151px"><BR />
<BR />
Ep.45 - Cool initiatives and projects with CAP with Tom Jung<BR />
<BR />
In this episode Tom Jung is going to join us and show us some of the cool stuff he's been hacking on in the CAP area. Tom has always got some fascinating tech to share, so make sure you tune in!<BR />
<BR />
<A href="https://www.youtube.com/watch?v=tVvnmBAWY5o&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;index=46" target="_blank" rel="nofollow noopener noreferrer">Watch replay on YouTube</A><BR />
<BR />
<A href="https://blogs.sap.com/2019/11/29/annotated-links-episode-45-of-hands-on-sap-dev-with-qmacro/" target="_blank" rel="noopener noreferrer">Read annotations</A></TD><BR />
</TR><BR />
<TR style="height: 151px"><BR />
<TD style="width: 31px;height: 151px"><A name="ep46" target="_blank"></A>46</TD><BR />
<TD style="width: 91px;height: 151px">Friday<BR />
29 Nov 2019</TD><BR />
<TD style="width: 494px;height: 151px"><BR />
<BR />
Ep.46 - The SAP Business Application Studio with Marius Obert<BR />
<BR />
In this episode we take a look at the new IDE from SAP - the Business Application Studio. We have an old friend of the stream Marius Obert to tell us about it and demo it live too. Don't miss this!<BR />
<BR />
<A href="https://www.youtube.com/watch?v=wG4iVredIwc&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;index=47" target="_blank" rel="nofollow noopener noreferrer">Watch replay on YouTube</A><BR />
<BR />
<A href="https://blogs.sap.com/2019/12/03/annotated-links-episode-46-of-hands-on-sap-dev-with-qmacro/" target="_blank" rel="noopener noreferrer">Read annotations</A></TD><BR />
</TR><BR />
<TR style="height: 192px"><BR />
<TD style="width: 31px;height: 192px"><A name="ep47" target="_blank"></A>47</TD><BR />
<TD style="width: 91px;height: 192px">Friday<BR />
06 Dec 2019</TD><BR />
<TD style="width: 494px;height: 192px"><BR />
<BR />
Ep.47 - ABAP and SAP Cloud Platform functions for Advent of Code<BR />
<BR />
It's December and many of us are furiously hacking away on solutions to the excellent <A href="https://adventofcode.com" target="_blank" rel="nofollow noopener noreferrer">Advent of Code</A> daily puzzles. We're using different languages, platforms and tools, for different reasons; in this episode we get <SPAN class="mention-scrubbed">hendrik.neumann</SPAN> and <SPAN class="mention-scrubbed">gregorw</SPAN> to show us how they're solving the puzzles with SAP tech.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=Om8AvzbabR8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;index=48" target="_blank" rel="nofollow noopener noreferrer">Watch replay on YouTube</A><BR />
<BR />
<A href="https://blogs.sap.com/2019/12/13/annotated-links-episode-47-of-hands-on-sap-dev-with-qmacro/" target="_blank" rel="noopener noreferrer">Read annotations</A></TD><BR />
</TR><BR />
<TR style="height: 138px"><BR />
<TD style="width: 31px;height: 138px"><A name="ep48" target="_blank"></A>48</TD><BR />
<TD style="width: 91px;height: 138px">Friday<BR />
13 Dec 2019</TD><BR />
<TD style="width: 494px;height: 138px"><BR />
<BR />
Ep.48 - Continuing with the Business Rules service on CF<BR />
<BR />
In this episode we continue on from where we left off in <A href="https://bit.ly/handsonsapdev#ep44" target="_blank" rel="nofollow noopener noreferrer">Ep.44</A> and dig further into the Business Rules service on SAP Cloud Platform Cloud Foundry environment.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=7d3Jh9LXiGA&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;index=49" target="_blank" rel="nofollow noopener noreferrer">Watch replay on YouTube</A><BR />
<BR />
<A href="https://blogs.sap.com/2020/01/02/annotated-links-episode-48-of-hands-on-sap-dev-with-qmacro/" target="_blank" rel="noopener noreferrer">Read annotations</A></TD><BR />
</TR><BR />
<TR style="height: 124px"><BR />
<TD style="width: 31px;height: 124px"><A name="ep49" target="_blank"></A>49</TD><BR />
<TD style="width: 91px;height: 124px">Friday<BR />
03 Jan 2020</TD><BR />
<TD style="width: 494px;height: 124px"><BR />
<BR />
Ep.49 - Defining our first Business Rules project<BR />
<BR />
Now we have the admin "Manage Projects" UI (and understand how the magic works) it's time to create our first Business Rules project.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=B-jgIxwPOic" target="_blank" rel="nofollow noopener noreferrer">Watch replay on YouTube</A><BR />
<BR />
<A href="https://blogs.sap.com/2020/01/03/annotated-links-episode-49-of-hands-on-sap-dev-with-qmacro/" target="_blank" rel="noopener noreferrer">Read annotations</A></TD><BR />
</TR><BR />
<TR style="height: 138px"><BR />
<TD style="width: 31px;height: 138px"><A name="ep50" target="_blank"></A>50</TD><BR />
<TD style="width: 91px;height: 138px">Friday<BR />
17 Jan 2020</TD><BR />
<TD style="width: 494px;height: 138px"><BR />
<BR />
Ep.50 - Calling our Business Rule via the runtime API<BR />
<BR />
We have a simple business rule defined - now it's time to use the runtime API to call it. As it's on Cloud Foundry and authentication is via OAuth, we're in for a fun and interesting episode!<BR />
<BR />
<A href="https://www.youtube.com/watch?v=5k_iMXJ3J0E" target="_blank" rel="nofollow noopener noreferrer">Watch replay on YouTube</A><BR />
<BR />
<A href="https://blogs.sap.com/2020/01/17/annotated-links-episode-50-of-hands-on-sap-dev-with-qmacro/" target="_blank" rel="noopener noreferrer">Read annotations</A></TD><BR />
</TR><BR />
<TR style="height: 13px"><BR />
<TD style="width: 31px;height: 13px"><A name="ep51" target="_blank"></A>51</TD><BR />
<TD style="width: 91px;height: 13px">Fri 31 Jan 2020</TD><BR />
<TD style="width: 494px;height: 13px"><BR />
<BR />
Ep.51 - More fun with Business Rules API and OAuth<BR />
<BR />
In the previous episode we got as far as staring at the OAuth Bearer token that we could use to authenticate calls to the API. In this episode we see how far we can get in using one of those tokens to do so. Perhaps even a bit of JavaScript with Axios might be nice to look at too - promises promises! (geddit)<BR />
<BR />
<A href="https://www.youtube.com/watch?v=PaZ_2n9XclY" target="_blank" rel="nofollow noopener noreferrer">Watch replay on YouTube</A><BR />
<BR />
<A href="https://blogs.sap.com/2020/02/06/annotated-links-episode-51-of-hands-on-sap-dev-with-qmacro/" target="_blank" rel="noopener noreferrer">Read annotations</A></TD><BR />
</TR><BR />
<TR style="height: 178px"><BR />
<TD style="width: 31px;height: 178px"><A name="ep52" target="_blank"></A>52</TD><BR />
<TD style="width: 91px;height: 178px">Fri 07 Feb</TD><BR />
<TD style="width: 494px;height: 178px"><BR />
<BR />
Ep.52 - Tidying up the JS script for Business Rules OAuth flow<BR />
<BR />
In Ep.51 we finished on a cliffhanger - having retrieved a bearer token by authenticating using the resource owner password credentials grant flow, we made the call to the runtime API endpoint, but got a 401. Find out why in this episode, and work with me on making the script neater and more reusable.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=PaZ_2n9XclY" target="_blank" rel="nofollow noopener noreferrer">Watch replay on YouTube</A><BR />
<BR />
<A href="https://blogs.sap.com/2020/02/07/annotated-links-episode-52-of-hands-on-sap-dev-with-qmacro/" target="_blank" rel="noopener noreferrer">Read annotations</A></TD><BR />
</TR><BR />
<TR style="height: 205px"><BR />
<TD style="width: 31px;height: 205px"><A name="ep53" target="_blank"></A>53</TD><BR />
<TD style="width: 91px;height: 205px">Fri 14 Feb</TD><BR />
<TD style="width: 494px;height: 205px"><BR />
<BR />
Ep.53 - Starting to construct a HandsOnSAPDev info API<BR />
<BR />
In previous episodes, and particularly in Ep.52, we chatted about introducing a way to programmatically search for episodes of this series, by title, tag, date, or some other metadata. We talked about the possibility of an OData service (CAP-powered, of course) and / or an NPM module on the GitHub package registry. In this episode we'll make some first steps towards this goal.<BR />
<BR />
<A href="https://youtu.be/1-9vsPn2eF0" target="_blank" rel="nofollow noopener noreferrer">Watch replay on YouTube</A><BR />
<BR />
<A href="https://blogs.sap.com/2020/02/14/annotated-links-episode-53-of-hands-on-sap-dev-with-qmacro/" target="_blank" rel="noopener noreferrer">Read annotations</A></TD><BR />
</TR><BR />
<TR style="height: 151px"><BR />
<TD style="width: 31px;height: 151px"><A name="ep54" target="_blank"></A>54</TD><BR />
<TD style="width: 91px;height: 151px">Fri 21 Feb</TD><BR />
<TD style="width: 494px;height: 151px"><BR />
<BR />
Ep.54 - Continuing with the HandsOnSAPDev API<BR />
<BR />
In the previous episode we took our first steps towards a multi-faceted API for this live stream series. In this episode we continue our exploratory journey into OData V4 options, conjunction tables with CDS and more.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=Ihjf9pRcR_s" target="_blank" rel="nofollow noopener noreferrer">Watch replay on YouTube</A></TD><BR />
</TR><BR />
<TR style="height: 205px"><BR />
<TD style="width: 31px;height: 205px"><A name="ep55" target="_blank"></A>55</TD><BR />
<TD style="width: 91px;height: 205px">Fri 28 Feb</TD><BR />
<TD style="width: 494px;height: 205px"><BR />
<BR />
Ep.55 - Getting set up with Workflow on Cloud Foundry<BR />
<BR />
Taking a quick break from our HandsOnSAPDev API adventure, we'll use this episode to take a look at how to get started with Workflow on SAP Cloud Platform, and specifically in the Cloud Foundry environment. There's a lot to cover, and it's all fascinating!<BR />
<BR />
<A href="https://www.youtube.com/watch?v=osi9sD_lRi4" target="_blank" rel="nofollow noopener noreferrer">Watch replay on YouTube</A><BR />
<BR />
&nbsp;</TD><BR />
</TR><BR />
<TR style="height: 151px"><BR />
<TD style="width: 31px;height: 151px"><A name="ep56" target="_blank"></A>56</TD><BR />
<TD style="width: 91px;height: 151px">Fri 06 Mar</TD><BR />
<TD style="width: 494px;height: 151px"><BR />
<BR />
Ep.56 â Continuing our Workflow on Cloud Foundry setup journey<BR />
<BR />
In the previous episode we took our time over the juicy details of the Multi-Target Application that will give us our Workflow tools in a Fiori Launchpad. In this episode we continue that journey of discovery.<BR />
<BR />
<A href="https://youtu.be/wVjBtGldkIs" target="_blank" rel="nofollow noopener noreferrer">Watch replay on YouTube</A></TD><BR />
</TR><BR />
<TR style="height: 123px"><BR />
<TD style="width: 31px;height: 123px"><A name="ep57" target="_blank"></A>57</TD><BR />
<TD style="width: 91px;height: 123px">Fri 13 Mar</TD><BR />
<TD style="width: 494px;height: 123px"><BR />
<BR />
Ep.57 - Setting up our first Workflow definition on CF<BR />
<BR />
Now we have our Workflow tools set up on Cloud Foundry, it's time to put them to use, with a simple workflow definition that we'll create and deploy. What's more, we dive into a little OAuth 2.0 adventure of discovery!<BR />
<BR />
<A href="https://youtu.be/ZE4P__ePFcM" target="_blank" rel="nofollow noopener noreferrer">Watch replay on YouTube</A><BR />
<BR />
<A href="https://blogs.sap.com/2020/03/13/annotated-links-episode-57-of-hands-on-sap-dev-with-qmacro/" target="_blank" rel="noopener noreferrer">Read annotations</A></TD><BR />
</TR><BR />
<TR style="height: 178px"><BR />
<TD style="width: 31px;height: 178px"><A name="ep58" target="_blank"></A>58</TD><BR />
<TD style="width: 91px;height: 178px">Fri 20 Mar</TD><BR />
<TD style="width: 494px;height: 178px"><BR />
<BR />
Ep.58 - Digging deeper into OAuth 2.0 for CF APIs<BR />
<BR />
In the previous episode we put the pieces together on how the Client Credentials Grant flow works with the API Hub and the CF Workflow APIs. Now it's time for us to dig even deeper and look into alternative flows. Buckle up!<BR />
<BR />
<A href="https://www.youtube.com/watch?v=AjuwSJeAUy8" target="_blank" rel="nofollow noopener noreferrer">Watch replay on YouTube</A><BR />
<BR />
<A href="https://blogs.sap.com/2020/03/23/annotated-links-episode-58-of-hands-on-sap-dev-with-qmacro/" target="_blank" rel="noopener noreferrer">Read annotations</A></TD><BR />
</TR><BR />
<TR style="height: 219px"><BR />
<TD style="width: 31px;height: 219px"><A name="ep59" target="_blank"></A>59</TD><BR />
<TD style="width: 91px;height: 219px">Wed 25 Mar</TD><BR />
<TD style="width: 494px;height: 219px"><BR />
<BR />
Ep.59 - Appleâs Mac Catalyst and the SAP Cloud Platform SDK for iOS 5.0<BR />
<BR />
In this special episode we get to hear about and see the SAP Cloud Platform SDK for iOS version 5.0 and its Mac Catalyst support. Our iOS/Mobile advocate <SPAN class="mention-scrubbed">kevin.muessig</SPAN> takes us through creating a Mac Catalyst-ready Xcode project using the SAP CP SDK for iOS. There are important considerations of bringing your app to Mac which he covers too.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=Ytyi91E--jw" target="_blank" rel="nofollow noopener noreferrer">Watch replay on YouTube</A></TD><BR />
</TR><BR />
<TR style="height: 219px"><BR />
<TD style="width: 31px;height: 219px"><A name="ep60" target="_blank"></A>60</TD><BR />
<TD style="width: 91px;height: 219px">Fri 27 Mar</TD><BR />
<TD style="width: 494px;height: 219px"><BR />
<BR />
Ep.60 - App router and the "simplest thing that could possibly work"<BR />
<BR />
Now that we have a good understanding of how OAuth 2.0 is used in the context of CF APIs, we turn our attention to some other fundamentals - in this episode it's how we can access a remote SAP system using "the simplest thing that could possibly work" (with a hat tip to the great Ward Cunningham), causing us to explore the app router, and destination &amp; connectivity services on CF.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=UaErY6VOWsQ" target="_blank" rel="nofollow noopener noreferrer">Watch replay on YouTube</A></TD><BR />
</TR><BR />
<TR style="height: 137px"><BR />
<TD style="width: 31px;height: 137px"><A name="ep61" target="_blank"></A>61</TD><BR />
<TD style="width: 91px;height: 137px">Wed 01 Apr</TD><BR />
<TD style="width: 494px;height: 137px"><BR />
<BR />
Ep.61 - Continuing to dive into the approuter on CF<BR />
<BR />
In the previous episode we started to take a deep dive into how we could access a remote system from the Cloud Platform in Cloud Foundry. We ended on a wonderful cliffhanger â why is the âshopinfoâ destination not recognised? Find out the answer to this, and more, in this continuation episode.<BR />
<BR />
<A href="https://youtu.be/DvnHIwU5AVM" target="_blank" rel="nofollow noopener noreferrer">Watch replay on YouTube</A></TD><BR />
</TR><BR />
<TR style="height: 123px"><BR />
<TD style="width: 31px;height: 123px"><A name="ep62" target="_blank"></A>62</TD><BR />
<TD style="width: 91px;height: 123px">Fri 03 Apr</TD><BR />
<TD style="width: 494px;height: 123px"><BR />
<BR />
Ep.62 - What else can we learn about the approuter?<BR />
<BR />
As we've seen in the previous two episodes, the approuter is not only an essential component, it's quite an impressive one too. Let's use this episode to see what else we can learn about it.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=7rcIc_UrENY" target="_blank" rel="nofollow noopener noreferrer">Watch replay on YouTube</A></TD><BR />
</TR><BR />
<TR style="height: 137px"><BR />
<TD style="width: 31px;height: 137px"><A name="ep63" target="_blank"></A>63</TD><BR />
<TD style="width: 91px;height: 137px">Fri 10 Apr</TD><BR />
<TD style="width: 494px;height: 137px"><BR />
<BR />
Ep.63 - Tracing the OAuth 2.0 Authorisation Code grant type with approuter and CF<BR />
<BR />
Continuing with our deep dive into approuter we finally get to the part where we can see how it provides us with the Authorisation Code flow to allow users access to protected resources. Let's dig into that together!<BR />
<BR />
<A href="https://youtu.be/DnWlEv-mnn8" target="_blank" rel="nofollow noopener noreferrer">Watch replay on YouTube</A></TD><BR />
</TR><BR />
<TR style="height: 123px"><BR />
<TD style="width: 31px;height: 123px"><A name="ep64" target="_blank"></A>64</TD><BR />
<TD style="width: 91px;height: 123px">Fri 17 Apr</TD><BR />
<TD style="width: 494px;height: 123px"><BR />
<BR />
Ep.64 - Providing CF comfort in the terminal<BR />
<BR />
We wrap up the approuter's OAuth flow with a bit more hard-core debugging, then turn our attention to some terminal skills that can make our lives in the Cloud Foundry more comfortable.<BR />
<BR />
<A href="https://youtu.be/aKyBwPd1wo8" target="_blank" rel="nofollow noopener noreferrer">Watch replay on YouTube</A></TD><BR />
</TR><BR />
<TR style="height: 123px"><BR />
<TD style="width: 31px;height: 123px">65<A name="ep65" target="_blank"></A></TD><BR />
<TD style="width: 91px;height: 123px">Fri 24 Apr</TD><BR />
<TD style="width: 494px;height: 123px"><BR />
<BR />
Ep.65 - Custom Workflow UIs on CF<BR />
<BR />
Riffing off what we saw briefly in <A href="https://bit.ly/handsonsapdev#ep63" target="_blank" rel="nofollow noopener noreferrer">Ep.63</A> with the cf html5 plugin, we turn our attention to how that might be useful in a practical context. So we start building a custom Workflow UI to deploy and use in Cloud Foundry.<BR />
<BR />
<A href="https://youtu.be/ZLtwMSq0DKo" target="_blank" rel="nofollow noopener noreferrer">Watch replay on YouTube</A></TD><BR />
</TR><BR />
<TR><BR />
<TD style="width: 31px">66<A name="ep66" target="_blank"></A></TD><BR />
<TD style="width: 91px">Fri 01 May</TD><BR />
<TD style="width: 494px"><BR />
<BR />
Ep.66 - Continuing our journey to a custom task UI on CF<BR />
<BR />
We continue our journey towards getting a custom task UI up on the CF environment for our Workflow context, exploring juicy and interesting details of everything we see along the way.<BR />
<BR />
<A href="https://youtu.be/mP1iWZgNmsE" target="_blank" rel="nofollow noopener noreferrer">Watch replay on YouTube</A></TD><BR />
</TR><BR />
<TR><BR />
<TD style="width: 31px">67<A name="ep67" target="_blank"></A></TD><BR />
<TD style="width: 91px">Fri 08 May</TD><BR />
<TD style="width: 494px"><BR />
<BR />
Ep.67 - Hacking an existing Custom Task UI on CF<BR />
<BR />
At the end of the previous episode, we got to the stage where we were ready to take a look at the existing Custom Task UI from the sample project. In this episode we dig in further.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=Zq9jFrfiePE" target="_blank" rel="nofollow noopener noreferrer">Watch replay on YouTube</A></TD><BR />
</TR><BR />
<TR><BR />
<TD style="width: 31px">68<A name="ep68" target="_blank"></A></TD><BR />
<TD style="width: 91px">Wed 20 May</TD><BR />
<TD style="width: 494px"><BR />
<BR />
Ep.68 - Data pipelines and HANA HDI containers<BR />
<BR />
In this episode we have special guest <SPAN class="mention-scrubbed">vitaliy.rudnytskiy</SPAN> with his Data Engineer hat on, building data pipelines and connecting them to a HANA HDI container. This continues the journey he started over on Max's channel in <A href="https://www.youtube.com/watch?v=ChaPiSF5q9c" target="_blank" rel="nofollow noopener noreferrer">Ep.8</A>.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=77mVvbXsGPo" target="_blank" rel="nofollow noopener noreferrer">Watch replay on YouTube</A></TD><BR />
</TR><BR />
<TR><BR />
<TD style="width: 31px">69<A name="ep69" target="_blank"></A></TD><BR />
<TD style="width: 91px">Fri 22 May</TD><BR />
<TD style="width: 494px"><BR />
<BR />
Ep.69 - Construction begins of our own custom task UI<BR />
<BR />
We've looked at an existing workflow definition and a related custom task UI, and now it's time to start to build our own. Let's go!<BR />
<BR />
<A href="https://youtu.be/QGg6eVQ6oF0" target="_blank" rel="nofollow noopener noreferrer">Watch replay on YouTube</A></TD><BR />
</TR><BR />
<TR><BR />
<TD style="width: 31px"><A name="ep70" target="_blank"></A>70</TD><BR />
<TD style="width: 91px">Fri 29 May</TD><BR />
<TD style="width: 494px"><BR />
<BR />
Ep.70 - Finalisation of our custom task UI<BR />
<BR />
In Ep.69 we started building a custom task UI for our Workflow definition on CF, using the Inbox API and the Workflow API. In this episode we finalise that.<BR />
<BR />
<A href="https://youtu.be/Of-ReX6Try8" target="_blank" rel="nofollow noopener noreferrer">Watch replay on YouTube</A></TD><BR />
</TR><BR />
</TBODY><BR />
</TABLE><BR />
</DIV><BR />
<A name="upcoming" target="_blank"></A><STRONG>Upcoming Episodes</STRONG><BR />
<DIV><BR />
<BR />
You can get reminders for upcoming episodes by adding this <A href="https://bit.ly/live-stream-times" target="_blank" rel="nofollow noopener noreferrer">public Google Calendar</A> (available at <A href="https://bit.ly/live-stream-times" target="_blank" rel="nofollow noopener noreferrer">bit.ly/live-stream-times</A>) to your own calendar system - entries in that calendar will be added&nbsp; as appropriate, and each entry will have default reminders settings so you won't forget. Also, you can get reminders by subscribing to my <A href="https://youtube.com/djadams-qmacro" target="_blank" rel="nofollow noopener noreferrer">YouTube channel</A> - hit the big red subscribe button and the notification bell too. Thanks!<BR />
<BR />
<A name="updates" target="_blank"></A><BR />
<EM><STRONG>Updates</STRONG></EM><BR />
<BR />
<EM>17 Jun 2020: Retiring this post (see note at the top)</EM><BR />
<BR />
<EM>31 Dec 2019: Added updates to reflect the move from Twitch to YouTube, and removed a few now-redundant sections.</EM><BR />
<BR />
<EM>17 Jan 2019: I've created a public Google calendar that you can subscribe to and from where you receive event reminders, which are set to fire 1 day and 30 mins before the event starts: <A href="https://calendar.google.com/calendar?cid=MGFjbzlnbXQzYTZyMWNjMmJoYTZiczlhM2NAZ3JvdXAuY2FsZW5kYXIuZ29vZ2xlLmNvbQ" target="_blank" rel="nofollow noopener noreferrer">Hands-on SAP dev with qmacro Calendar</A>.</EM><BR />
<BR />
<EM>I've also set up a series on Twitch and I'll define each episode as an event in this series. You can go to Twitch, <A href="https://www.twitch.tv/qmacro99/events" target="_blank" rel="nofollow noopener noreferrer">see the upcoming events</A>, view the details and request reminders.</EM><BR />
<BR />
<EM>23 Jan 2019: Added an "Upcoming episode" section.</EM><BR />
<BR />
<EM>25 Jan 2019: Added a "Feedback" section.</EM><BR />
<BR />
<EM>12 Feb 2019: Reworked the "Schedule" section to include the new occasional midweek slot schedule and moved the episode replay links into the "Replays" section.</EM><BR />
<BR />
<EM>13 Feb 2019: Added the bit.ly link to this post (<A href="http://bit.ly/handsonsapdev" target="_blank" rel="nofollow noopener noreferrer">http://bit.ly/handsonsapdev</A>).</EM><BR />
<BR />
<EM>20 Feb 2019: Reworked the <A href="#replays" target="_blank" rel="nofollow noopener noreferrer">Catch the replays</A> section, adding links to the new annotated descriptions.</EM><BR />
<BR />
<EM>28 Feb 2019: Improved the&nbsp;<A href="#replays" target="_blank" rel="nofollow noopener noreferrer">Catch the replays</A> section, adding each episode's description, and separate links to the recordings on Twitch. Eventually we will have links to the recordings on YouTube also.</EM><BR />
<BR />
<EM>05 Mar 2019: Added a note about the annotated links blog posts to the&nbsp;<A href="#replays" target="_blank" rel="nofollow noopener noreferrer">Catch the replays</A> section.</EM><BR />
<BR />
<EM>05 Apr 2019: Updated the <A href="#feedback" target="_blank" rel="nofollow noopener noreferrer">Feedback</A> section with a link to a new episode-specific feedback form.</EM><BR />
<BR />
<EM>12 Apr 2019: Changed the occasional midweek slot to a regular fortnightly cadence.</EM><BR />
<BR />
</DIV>
---
Monday morning thoughts: looking back and forwards
welcome-cornerblog-board
2018-12-17
https://community.sap.com/t5/welcome-corner-blog-posts/monday-morning-thoughts-looking-back-and-forwards/ba-p/13401221
2018-12-17-monday-morning-thoughts-looking-back-and-forwards
<EM>In this post, I look back on the posts in this series, reflect upon the journey we've made, and think about what 2019 might hold for us.</EM><BR />
<BR />
The holiday season is pretty much upon us, and for many it's a time for bringing things to a close, with a view to getting some rest and making mental room for what's to come next year. So it is with me and this series.<BR />
<BR />
I started this series back in March, not really paying too much attention to the regularity that the title of the post suggested. I made things worse, as it were, by writing a second Monday morning thoughts post on the following Monday. Thereafter I had some folks reach out to me saying that they were looking forward to the next instalment. Whoops! What had I done? I hadn't really set out with the intention of writing each and every Monday. I'd thought I'd write on the occasional Monday here and there.<BR />
<BR />
I guess it all turned out OK in the end, and perhaps even became a nice challenge for me, to write something weekly, something that was hopefully interesting, relating to aspects and ideas in our SAP ecosphere and beyond. Perhaps it even became a micro obsession of mine, as I found myself publishing a post on my birthday (<A href="https://blogs.sap.com/2018/09/03/monday-morning-thoughts-considering-graphql/" target="_blank" rel="noopener noreferrer">Considering GraphQL</A>) and another from the balcony of our hotel room in Gran Canaria (on <A href="https://blogs.sap.com/2018/11/12/monday-morning-thoughts-longevity-and-loose-coupling/" target="_blank" rel="noopener noreferrer">longevity and loose coupling</A>). That's not to say that I'm encouraging you to write on your days off - but perhaps I am suggesting that you should follow your passions and do what you feel is right.<BR />
<BR />
&nbsp;<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2018/12/Screenshot-2018-12-17-at-08.26.51.png" height="400" width="367" /><BR />
<BR />
<EM>View from the balcony of our hotel room in Gran Canaria in November</EM><BR />
<BR />
&nbsp;<BR />
<BR />
I've had the privilege of publishing audio recordings of a few of the posts on&nbsp;<SPAN class="mention-scrubbed">jakob_bourne</SPAN>&nbsp;and&nbsp;Former Member's excellent podcast show <A href="https://anchor.fm/sap-community-podcast" target="_blank" rel="nofollow noopener noreferrer">Coffee Corner Radio</A>&nbsp;and have been surprised and delighted to find folks coming to say hello at the SAP TechEd locations this year saying they've been reading and enjoying the posts.<BR />
<BR />
In total, including this one, there are 38 posts in the&nbsp;series and they're all available via the usertag "<A href="https://blogs.sap.com/tag/mondaymorningthoughts/" target="_blank" rel="noopener noreferrer">mondaymorningthoughts</A>" (hurray for <A href="https://en.wikipedia.org/wiki/Folksonomy" target="_blank" rel="nofollow noopener noreferrer">folksonomy</A> systems). If you're curious, yes I did write them all on each Monday morning; while I might have mused on topics over the weekends, it would have been only semi-consciously; I got to grips with the subjects at hand there and then at the very start of each week (often helped by a run before dawn - my favourite time).<BR />
<BR />
Talking of curiosity, I was wondering this morning what the dominant subjects might turn out to be. So this morning I grabbed all of the user tags from each of the posts, cleaned them up, and fed them into a <A href="https://tagcrowd.com/" target="_blank" rel="nofollow noopener noreferrer">tag cloud generator</A>.<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2018/12/Screenshot-2018-12-17-at-08.14.05.png" /><BR />
<BR />
In one sense, what it produced was not unpredictable.<BR />
<BR />
But what I noticed was that the largest tag, <A href="https://blogs.sap.com/tag/cloudnative/" target="_blank" rel="noopener noreferrer">cloudnative</A>, was the subject of, even the title of, my very first Monday morning thoughts post: "<A href="https://blogs.sap.com/2018/03/26/monday-morning-thoughts-cloud-native/" target="_blank" rel="noopener noreferrer">Cloud Native</A>". This made me smile, but also reflect on where we are in the SAP Cloud Platform journey together. And I think that's what I have in mind when I think of 2019 and what it holds in store for us.<BR />
<BR />
We're moving ever closer to open tools, standards &amp; processes, with Cloud Foundry as our new bread &amp; butter, and with Kubernetes, Knative and concepts the <A href="https://12factor.net/" target="_blank" rel="nofollow noopener noreferrer">12 factor app</A>&nbsp;being understood and embraced. Moreover, we have serverless offerings becoming a reality on SAP Cloud Platform, with functions, messaging and backend as a service features available now. Serverless is even topic of the month here in the SAP Community!<BR />
<BR />
&nbsp;<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2018/12/Screenshot-2018-12-17-at-08.42.51.png" height="397" width="542" /><BR />
<BR />
<EM>Serverless is&nbsp;featured as topic of the month here in the SAP Community</EM><BR />
<BR />
&nbsp;<BR />
<BR />
So 2019 has lots of exciting things in store for us. What I know for sure is that we'll continue to learn, with new topics to embrace and existing topics to master (see "<A href="https://blogs.sap.com/2018/12/10/monday-morning-thoughts-digging-deeper/" target="_blank" rel="noopener noreferrer">digging deeper</A>"), and we'll continue to grow as an ecosphere and as a community.<BR />
<BR />
This then marks the end of the <A href="https://blogs.sap.com/tag/mondaymorningthoughts/" target="_blank" rel="noopener noreferrer">Monday morning thoughts series</A>, at least in its current form. I've really enjoyed writing them, and that's mostly because of you folks - your comments, engagement, and conversations that have started because of what you've read. Thank you, enjoy the holiday season, and I look forward to seeing you in the new year!<BR />
<BR />
&nbsp;<BR />
<BR />
This post was brought to you by <A href="https://www.pactcoffee.com/coffees/la-valentina" target="_blank" rel="nofollow noopener noreferrer">Pact Coffee's La Valentina</A>, the happiness of the prospect of some downtime, and a slight sadness that this series is over.<BR />
<BR />
&nbsp;
---
Monday morning thoughts: digging deeper
technology-blog-sap
2018-12-10
https://community.sap.com/t5/technology-blogs-by-sap/monday-morning-thoughts-digging-deeper/ba-p/13394293
2018-12-10-monday-morning-thoughts-digging-deeper
<EM>In this post, I think about the tools we use in our day-to-day activities, the feeling I have that I'm just scratching the surface with regards to their capabilities, and what I plan to do about it in 2019.</EM><BR />
<BR />
Last week I found myself installing a Vim plugin in order to use a key feature, in an attempt to streamline my editing workflow. I ended up being slightly underwhelmed with the improvements, but on reflection, that was down to the fact that I didn't take the time to read the documentation and learn properly how to use the plugin. So I ended up slightly worse off from a workflow perspective, with extra mental and software logistics baggage (I now had another plugin to think about and keep up to date) on top. This only added to the feeling that <A href="https://blogs.sap.com/2018/07/09/monday-morning-thoughts-curiosity-and-understanding/#noidea" target="_blank" rel="noopener noreferrer">I've no idea what I'm doing</A>.<BR />
<BR />
I <A href="https://twitter.com/qmacro/status/1070232169996414977" target="_blank" rel="nofollow noopener noreferrer">tweeted</A> my thoughts at the time, and they seemed to resonate with folks:<BR />
<H4 id="toc-hId-1166708414"><IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2018/12/Screenshot-2018-12-10-at-08.29.26.png" height="262" width="428" /></H4><BR />
&nbsp;<BR />
<BR />
<STRONG>Editor usage</STRONG><BR />
<BR />
While Vim itself is not new to me, many plugins are, so even within the context of something that is familiar, I have the feeling that my use of tools is superficial at most. Moreover, I remain a "moderately advanced beginner" even at Vim itself. That's partly because most people anyway only tend to use 10% of Vim's power*, and partly because I oscillate, or perhaps vacillate, between different editors and IDEs anyway - sometimes because of context (for example I'll use SAP Web IDE for the super features it offers with respect to UI5 development) and sometimes simply because I'm fickle and attracted to shiny things.<BR />
<BR />
This latter reason is why I also use Visual Studio Code, which has turned out to be a very accomplished and pleasant environment indeed, and of course for which there is an excellent extension for SAP's Cloud Application Programming Model. See "<A href="https://blogs.sap.com/2018/10/16/set-up-vs-code-on-chrome-os-for-local-application-programming-model-development/" target="_blank" rel="noopener noreferrer">Set up VS Code on Chrome OS for local Application Programming Model development</A>" for more details on this.<BR />
<BR />
*I didn't make that statistic up, but I suspect that the person who wrote that (which is where I got it from) might have done.<BR />
<BR />
&nbsp;<BR />
<BR />
<STRONG>Cloud related tools</STRONG><BR />
<BR />
The feeling that I'm only just scratching the surface of tools extends beyond editors. For example, I have used a variety of HTTP client tools over the years. I started my HTTP journey when I was a big Perl user, and the GET and POST command-line tools that came as part of the venerable <A href="https://metacpan.org/release/libwww-perl" target="_blank" rel="nofollow noopener noreferrer">libwww-Perl</A> (LWP) package (they were just symbolic links to the lwp-request script) were my go-to tools for making HTTP calls.<BR />
<BR />
&nbsp;<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2018/12/Screenshot-2018-12-10-at-08.46.37.png" height="403" width="499" /><BR />
<BR />
&nbsp;<BR />
<BR />
Of course since then I've discovered the perhaps now equally venerable <A href="https://curl.haxx.se/" target="_blank" rel="nofollow noopener noreferrer">cURL</A>, but I also use GNU's <A href="https://www.gnu.org/software/wget/" target="_blank" rel="nofollow noopener noreferrer">wget</A>&nbsp;(which I extended in script space at one stage - see this post "<A href="http://pipetree.com/qmacro/blog/2002/05/24/etag-enabled-wget/" target="_blank" rel="nofollow noopener noreferrer">ETag-enabled wget</A>" from 2002). So in the same way that I flit between editors, I switch also between HTTP client tools, and invariably have to look up even basic parameters and switches because they differ from tool to tool.<BR />
<BR />
More recently I've been embracing Cloud Foundry on SAP Cloud Platform, creating &amp; managing service instances and deploying applications as one does. I've been doing this mostly through the SAP Cloud Platform Cockpit (the performance of which has improved nicely recently) which is very comfortable, but a month or two back I dusted off the command line tool 'cf' which I'd <A href="https://github.com/cloudfoundry/cli" target="_blank" rel="nofollow noopener noreferrer">downloaded</A>&nbsp;and tried out briefly earlier this year.<BR />
<BR />
I knew in theory that everything I was doing in the Cockpit I could do with the command line tool, so I started to perform basic activities from the shell. But even today I know that my use of 'cf' is limited, and so is my knowledge.<BR />
<BR />
Related to the 'cf' command and the artefacts one manages with it, I'm also acutely aware that while I can get by with a high level understanding of <A href="https://docs.run.pivotal.io/devguide/deploy-apps/environment-variable.html" target="_blank" rel="nofollow noopener noreferrer">VCAP_SERVICES</A>, I really don't know that much about how environmental variables are really managed in this environment, and I should (or want to) have a much better understanding.<BR />
<BR />
&nbsp;<BR />
<BR />
<STRONG>Programming</STRONG><BR />
<BR />
And what about actual programming? Well, there are languages and frameworks that immediately come to mind. Yesterday I was helping out at <A href="https://mcrcoderdojo.org.uk/" target="_blank" rel="nofollow noopener noreferrer">Manchester CoderDojo</A>&nbsp;<A href="https://twitter.com/qmacro/status/1071886022353584128" target="_blank" rel="nofollow noopener noreferrer">teaching some JavaScript</A> to some youngsters (and enjoying the delight on their faces when they solved some simple cryptography puzzles programmatically). We managed to solve the puzzles using some basic procedural approaches, and even managed to talk about functional approaches, contrasting what we'd written with how else the problem (or solution) might be expressed.<BR />
<BR />
We finished the session with me showing them a short, single expression solution to another puzzle. I got them to take it home and research how it works, knowing that they'd uncover depths of wonder that we didn't have time for during the day yesterday:<BR />
<PRE class="language-javascript"><CODE>input<BR />
  .split(/\n/)<BR />
  .map(Number)<BR />
  .reduce((a, x) =&gt; a + x)</CODE></PRE><BR />
(Those following this year's excellent <A href="http://adventofcode.com" target="_blank" rel="nofollow noopener noreferrer">Advent of Code</A> series may recognise this as a solution to the first puzzle on Day 1).<BR />
<BR />
I'd love to be able to do this with Python too - I know Python and can certainly survive, and at one stage was able to enjoy speaking various dialects and styles, but not any more. This feeling extends to other languages that I've used in the past, too.<BR />
<BR />
I have similar experiences with frameworks such as the Cloud Application Programming Model. While I understand quite a lot of the basics, there are depths I have not yet had time to explore, so I feel I am just scratching the surface of possibilities, especially when it comes to the rich &amp; expressive <A href="https://help.sap.com/viewer/65de2977205c403bbc107264b8eccf4b/Cloud/en-US/855e00bd559742a3b8276fbed4af1008.html" target="_blank" rel="noopener noreferrer">Core Data &amp; Services (CDS) Language</A>.<BR />
<BR />
&nbsp;<BR />
<BR />
<STRONG>Intention</STRONG><BR />
<BR />
It's not as if there isn't information out there on the subjects I've mentioned in this post. Far from it - there's almost too much. But that's a nice problem to have. So in terms of the core ingredients that are needed to improve one's knowledge in a given area, that's one covered already. Another key ingredient is time. Time to think about what to improve on, time to choose the areas of focus. Time to sift through the mountains of content out there, working out what's relevant and what's not, what's contemporary and what's out of date, and what works best for consumption (documentation, blog posts, videos, and so on). And time to actually start consuming that information and putting what one's learned into practice.<BR />
<BR />
I've already started. For example, I've been watching YouTube videos on Vim and my chosen plugins already, and can feel the bewilderment and panic start to subside, ever so slightly, as I learn more about what I'm trying to use on a daily basis. I'm not yet happy with the amount of time I'm dedicating to practising, but my plan is to overlay a path on top of the rest of my activities in 2019, focusing in week long chunks on certain topics. Over the next two weeks I will sketch out that path, so I won't be constantly making and changing decisions along the way.<BR />
<BR />
I'm not sure how I'll fare, but that's my intention, at least. One underlying philosophy that I've just realised is permeating this intention (it took me over a thousands words in this blog post to actually realise it) is that I want to avoid, as far as possible, learning new subjects, and instead concentrate on improving my knowledge in existing subjects. I've found that in my years in the SAP ecosphere there are peaks and troughs, of broad then deep periods. I've gone as broad as I should this year, so next year I want to at least be consciously influencing a return to depth.<BR />
<BR />
Wish me luck!<BR />
<BR />
&nbsp;<BR />
<BR />
This post was brought to you by the happy feeling of a good run this morning, by a nice cup of <A href="https://www.pactcoffee.com/coffees/la-concepcion" target="_blank" rel="nofollow noopener noreferrer">Pact Coffee's La Concepcion</A>&nbsp;and the calming purple tones of my <A href="https://twitter.com/qmacro/status/1071079866265669635" target="_blank" rel="nofollow noopener noreferrer">Dracula themed desktop</A>.
---
Monday morning thoughts: indirect influence
welcome-cornerblog-board
2018-12-03
https://community.sap.com/t5/welcome-corner-blog-posts/monday-morning-thoughts-indirect-influence/ba-p/13383686
2018-12-03-monday-morning-thoughts-indirect-influence
<EM>In this post, I think about how our work can directly and even indirectly influence those that come after us, and about what this means for how we should act.</EM><BR />
<BR />
Last week's I attended SAP TechEd 2018 in Bangalore. Most of the time I was helping out at the Developer Garage space, assisting the attendees with <A href="https://developers.sap.com/app-space.html" target="_blank" rel="noopener noreferrer">their progress through tutorial missions</A>. The atmosphere was wonderful, I can't remember when I last experienced such an intense collection of keen &amp; enthusiastic minds. During that time, I had folks come up to me to say hello, mentioning at times that they had read my blog posts over the years and that it had helped them in their growth.<BR />
<BR />
&nbsp;<BR />
<BR />
<STRONG>Accidental influence</STRONG><BR />
<BR />
One particular person was&nbsp;<SPAN class="mention-scrubbed">speri</SPAN>&nbsp;whom I ended up interviewing on SAP TechEd Live during the show (<A href="https://events.sap.com/teched/en/session/42606" target="_blank" rel="noopener noreferrer">Learning with the SAP Community and Beyond</A>), and he pointed out that I had worked with him around a decade ago, remotely, when we were both at AstraZeneca.<BR />
<BR />
<IMG src="https://pbs.twimg.com/media/DtP6eSDU8AEmD2I.jpg:small" width="396" height="222" /><BR />
<BR />
Back then, I had designed and built some integration mechanisms, and also some RESTful web services, for a project that was integrating SAP and Ariba business processes. I had spent some time thinking about the design of the URL space in particular, and how the methods &amp; responses would represent the actual business requests, and the responses thereto. It turns out that that design approach had resonated with Srikanth and had an influence on the way he saw things and approached integration going forwards.<BR />
<BR />
Beyond being a pleasant trip down memory lane, this really made me realise that what we do day to day can have an impact on how others see things. One person can indirectly steer another towards -- or at least reveal to them -- technology paths that might be alternative or even hitherto unknown.<BR />
<BR />
&nbsp;<BR />
<BR />
<STRONG>Starting young</STRONG><BR />
<BR />
I've been involved in teaching kids to code for a while. I am a <A href="http://pipetree.com/qmacro/blog/2012/12/05/codeclub-and-becoming-a-stem-ambassador/" target="_blank" rel="nofollow noopener noreferrer">STEM Ambassador</A>, and&nbsp;<A href="http://pipetree.com/qmacro/blog/2013/04/18/codeclub-thoughts/" target="_blank" rel="nofollow noopener noreferrer">ran a Code Club at our local primary school</A> a few years ago. I volunteer at <A href="https://mcrcoderdojo.org.uk/" target="_blank" rel="nofollow noopener noreferrer">Manchester CoderDojo</A> where we have monthly sessions that see up to 150 kids come by to learn and build with all sorts of software and hardware tech. I even gave a TEDx talk on "<A href="https://www.youtube.com/watch?v=-gvOCaExeK0" target="_blank" rel="nofollow noopener noreferrer">Our Computational Future</A>" at one stage.<BR />
<BR />
I ran a Manchester Digital Laboratory (<A href="https://madlab.org.uk/" target="_blank" rel="nofollow noopener noreferrer">MadLab</A>) centre for Young Rewired State (YRS) where we had a whole host of kids design and build apps for a nationwide competition (see <A href="https://madlab.org.uk/2013/10/young-re-wired-state-2013-the-film/" target="_blank" rel="nofollow noopener noreferrer">Young Re-Wired State - The Film</A> for more info) that was sponsored by SAP - thanks again&nbsp;<SPAN class="mention-scrubbed">thomas.grassl</SPAN>&nbsp;&amp; co.<BR />
<BR />
In all these circumstances I and my fellow volunteers get to introduce young folks to technologies - programming languages, frameworks and the like, as well as analytical &amp; logical thought. Reflecting on my time running the YRS centre at MadLab in particular, I can see how the amazing volunteers, with their diverse technical skills and passions, will have had an influence upon those folks directly and indirectly. The mentorship was sometimes one-on-one, sometimes in groups (and sometimes peer-to-peer, which was wonderful to see).<BR />
<BR />
Some of the volunteers are or have become well-known influencers in their own right; a couple of examples that immediately come to mind are the BBC's <A href="http://www.bbc.co.uk/blogs/internet/entries/2e3004e0-ab13-4ccf-b921-ca2bd2ff0cae" target="_blank" rel="nofollow noopener noreferrer">Jacob Clark</A>&nbsp;and the co-creator of Wordpress <A href="https://en.wikipedia.org/wiki/Mike_Little" target="_blank" rel="nofollow noopener noreferrer">Mike Little</A>*.<BR />
<BR />
*I love the fact that the photo on Mike's Wikipedia page is one taken at MadLab during the YRS event that I'm recounting.<BR />
<BR />
While I don't have any empirical evidence, I get the feeling that with the young attendees of the YRS centre at MadLab, of the CoderDojo sessions and even the very young CodeClubbers around the UK, there's an unavoidable level of influence that is being generated, as the volunteers share their passions and interests.<BR />
<BR />
&nbsp;<BR />
<BR />
<STRONG>Show your workings</STRONG><BR />
<BR />
Srikanth wrote a blog post on the back of his experience at SAP TechEd last week -&nbsp;<A href="https://blogs.sap.com/2018/12/02/learning-with-the-sap-community-and-beyond-2018-bangalore/" target="_blank" rel="noopener noreferrer">Learning with the SAP Community and Beyond, 2018 Bangalore</A>. In it, he exhorts us to "start sharing", in the hashtagged mantra "#LearnShareRepeat". I'd like to echo this. Not only does sharing strengthen one's learning, it has that added side-effect of helping others grow, and influencing their thoughts and behaviours. I'm very proud of how Srikanth described how he was influenced by the RESTful design of those web services. I hadn't really thought anything of it, I was, I guess, merely enjoying the wonder of what I'd recently discovered and putting it into practice. Little did I know that it would have an effect beyond making the mechanism work efficiently.<BR />
<BR />
So I exhort you also to show your workings, explain your thought processes, share your learnings, as much as you are able. Only then do we grow as a community, only then can we help those coming after us to make informed decisions on the paths they themselves might take.<BR />
<BR />
It doesn't matter what form this sharing takes - blog posts, answers to questions, thoughtful questions themselves, talks at events, videos, even shared code on social sites such as GitHub. You never know when what you say or write will have an effect on someone.<BR />
<BR />
&nbsp;<BR />
<BR />
This post was brought to you by a rainy Manchester morning, and the feeling of not nearly enough coffee as I recover from the SAP TechEd Bangalore trip and the corresponding jet lag from my return home.<BR />
<BR />
&nbsp;<BR />
<BR />
Read more posts in this series here:&nbsp;<A href="https://blogs.sap.com/tag/mondaymorningthoughts/" target="_blank" rel="noopener noreferrer">Monday morning thoughts</A>.<BR />
<BR />
&nbsp;<BR />
<BR />
&nbsp;<BR />
<BR />
&nbsp;
---
Monday morning thoughts: learning media and mechanisms
welcome-cornerblog-board
2018-11-26
https://community.sap.com/t5/welcome-corner-blog-posts/monday-morning-thoughts-learning-media-and-mechanisms/ba-p/13378616
2018-11-26-monday-morning-thoughts-learning-media-and-mechanisms
<EM>In this post, I think about the different ways I learn, and wonder how that translates to how we learn in the SAP developer ecosphere.&nbsp;</EM><BR />
<BR />
This will be a shorter post than usual*, as I've just arrived at the (second worst) airport (in the world) on my way to the third and final instance of this year's SAP TechEd event, in Bangalore. As I sit here with some coffee, I've been thinking about my experiences at the recent <A href="https://london-2018.devrel.net" target="_blank" rel="nofollow noopener noreferrer">Developer Relations Conference</A>&nbsp;(DevRelCon) in London earlier this month.<BR />
<BR />
*some of you may be breathing a sigh of relief!<BR />
<BR />
I've written about some of my experiences already at DevRelCon in a previous <A href="https://blogs.sap.com/tag/mondaymorningthoughts/" target="_blank" rel="noopener noreferrer">Monday morning thoughts</A> post on <A href="https://blogs.sap.com/2018/11/12/monday-morning-thoughts-longevity-and-loose-coupling/" target="_blank" rel="noopener noreferrer">longevity and loose coupling</A>, where I thought about some of GitHub's features in relation to webhooks and serverless computing in general. But this time I'd like to dwell a short while on some other stuff that I learned during the conference. The bottom line is that technology is changing all the time, and to remain relevant, one needs to keep learning. That means that there's a requirement for education. What sort of education is that, and what does it look like <A href="https://en.wiktionary.org/wiki/the_rubber_meets_the_road" target="_blank" rel="nofollow noopener noreferrer">where the rubber meets the road</A>?<BR />
<BR />
&nbsp;<BR />
<BR />
<STRONG>A complete education experience</STRONG><BR />
<BR />
Conversations at the conference confirmed to me that rather than islands of information, developers are looking for that "complete education experience". What does that mean? Well, to me, and based on what I heard from others, it's long term learning based on focused paths through the myriad options and directions, with a personalised platform that keeps track of where you are and what you've achieved. Moreover, it includes a clear indication of learning goals, and definitions of "what good looks like" with respect to mastery of a subject.<BR />
<BR />
I'm mindful of our <A href="https://developers.sap.com/tutorial-navigator.html" target="_blank" rel="noopener noreferrer">tutorial system</A>&nbsp;within our developer home space at <A href="https://developers.sap.com" target="_blank" rel="noopener noreferrer">https://developers.sap.com</A>, and with the recent revamp for the start of the SAP TechEd season, I do think we're on the right path, especially having heard from others at the conference, and what their and their companies' aspirations in this respect were. If you've not tried the new tutorial experience, with groups of tutorials around a certain topic, and missions that cluster together tutorial groups, I'd definitely recommend you give it a try - kick those rubber tyres.<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2018/11/Screen-Shot-2018-11-26-at-06.15.15.png" /><BR />
<BR />
But of course there's content beyond our tutorial navigator in the wider SAP ecosphere world. There's the <A href="https://help.sap.com/viewer/" target="_blank" rel="noopener noreferrer">SAP Help Portal</A>, various YouTube channels, such as the <A href="https://www.youtube.com/user/saphanaacademy" target="_blank" rel="nofollow noopener noreferrer">SAP HANA Academy</A>, and who could omit the wonderful Massive Open Online Course (MOOC) <A href="https://open.sap.com" target="_blank" rel="noopener noreferrer">openSAP</A>&nbsp;with some excellent courses that run over weeks.<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2018/11/Screen-Shot-2018-11-26-at-06.16.34.png" /><BR />
<BR />
And we can't forget the less structured but nevertheless essential content here in the SAP Community, written by and for the community members themselves (us, in other words).<BR />
<BR />
&nbsp;<BR />
<BR />
<STRONG>How do you learn best?</STRONG><BR />
<BR />
What I've been pondering, though, is - moving a layer above - how do people really learn? What are the different media (mediums if we're being post-Latin, but who wants to be post-Latin?) available, and what are the pros and cons of each. More importantly, what works for us? Conversations with work colleagues over the years has shown me that we're all different, we all consume information our own way, at our own pace, and different media resonates differently with each of us.<BR />
<BR />
I've even been looking into the modern realms of <A href="https://www.twitch.tv/" target="_blank" rel="nofollow noopener noreferrer">Twitch TV</A> recently (based on some other conversations at DevRelCon). It has certainly been eye opening - who knew there were so many games out there and so many folks not only playing but spectating? I found the <A href="https://www.twitch.tv/directory/game/Science%20%26%20Technology" target="_blank" rel="nofollow noopener noreferrer">Science &amp; Technology channel</A>&nbsp;in which various folks teach, indirectly, I guess, by streaming their live coding experiences. Fascinating, and I learned stuff almost by accident while transfixed by the experience.<BR />
<BR />
So, as I head to the gate to take my first flight of the day, I'd like to leave the rest of this Monday morning thoughts post in your hands. Let me know in the comments below how you learn. What's your preferred medium, and why? What learning experiences have you had, what has worked well, what hasn't worked so well? Are you a video watcher, or a reader? For a new subject, do you reach for YouTube, the SAP Help Portal, blog posts, Q&amp;A or something else? As we move further and further into the cloud and merge with the wider developer ecosphere, what experiences have you had there that we could learn from?<BR />
<BR />
I look forward to hearing from you in the comments.<BR />
<BR />
And if you're at <A href="https://events.sap.com/teched-2018-india/en/home" target="_blank" rel="noopener noreferrer">SAP TechEd in Bangalore</A>, come and say hi at the Developer Garage, and tell me directly how you learn best!<BR />
<BR />
&nbsp;<BR />
<BR />
This post was brought to you by the hustle and bustle of an early Monday morning in Manchester airport, by Pret-A-Manger's filter coffee (not too bad actually), and by the prospect of the "travel-daze" that I'm going to be experiencing for the next 16 hours or so.<BR />
<BR />
&nbsp;<BR />
<BR />
Read more posts in this series here:&nbsp;<A href="https://blogs.sap.com/tag/mondaymorningthoughts/" target="_blank" rel="noopener noreferrer">Monday morning thoughts</A>.
---
Monday morning thoughts: rethinking like the web
technology-blog-sap
2018-11-19
https://community.sap.com/t5/technology-blogs-by-sap/monday-morning-thoughts-rethinking-like-the-web/ba-p/13371656
2018-11-19-monday-morning-thoughts-rethinking-like-the-web
<EM>In this post, I revisit some principles that help us "think like the web" and think about them in the context of today's SAP technology landscape and community.</EM><BR />
<BR />
Last week I watched someone I was with <A href="https://www.linkedin.com/help/linkedin/answer/75815/applying-for-jobs-on-linkedin?lang=en" target="_blank" rel="nofollow noopener noreferrer">apply for a job on LinkedIn</A>, using the Easy Apply feature, and it left me feeling a little depressed.<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2018/11/Screenshot-2018-11-19-at-06.31.21.png" height="348" width="505" /><BR />
<BR />
I think the ability to apply to jobs via sites like this is a good feature, it's just the mechanism we see at the top of this screenshot that's the problem.<BR />
<BR />
The problem is this part:<BR />
<BR />
<EM>Browse files to upload --&nbsp;</EM><EM>Microsoft Word or PDF only (5MB)</EM><BR />
<BR />
Don't worry, this isn't some point about productivity suite tools. It's about the process assumed and implied. It's the assumption that one will *upload* a document to LinkedIn's servers. The implication is that one is being asked to party like it's 1999 (with apologies to the artist formerly known as Prince), almost the equivalent of giving someone a floppy disk with some out of date files on it.<BR />
<BR />
In the age of the web, why are we still thinking and acting this way? Uniform Resource Locators (URLs) aren't just some way of getting to resources on the web, they are a fundamental part of the hypermedia world that we are embracing when we use the web. As soon as we upload a file to a server, as a way of sharing information, we're taking the bread out of the packet and triggering a countdown to its "use-by" date, asking for it - the data and the bread - to start going stale immediately.<BR />
<BR />
We should be thinking and acting like web citizens, not some <A href="https://en.wikipedia.org/wiki/Sneakernet" target="_blank" rel="nofollow noopener noreferrer">sneakernet</A>-like generation. In other words, why isn't there an option to supply a *link* to the canonical source of one's CV (rÃ©sumÃ©)?<BR />
<BR />
(As an aside, I've had challenges with some conference organisers in this respect too. Not only do they expect slides to be prepared weeks in advance but some reactions to "here is a *link* to my slides" have been less than encouraging).<BR />
<BR />
&nbsp;<BR />
<BR />
<STRONG>Seven ways to think like the web</STRONG><BR />
<BR />
Dramatically &amp; metaphorically I rolled my eyes at this anachronistic mechanism, and as they rotated in their sockets they caught sight of a memory of a set of principles enumerated by <A href="http://jonudell.net/" target="_blank" rel="nofollow noopener noreferrer">Jon Udell</A> - principles to help us "think like the web". Readers of some of my previous <A href="https://blogs.sap.com/tag/mondaymorningthoughts/" target="_blank" rel="noopener noreferrer">Monday morning thoughts</A>&nbsp;posts may remember that I'm a long-time fan of Jon and his thoughts. LinkedIn's upload-a-copy-of-your-CV-in-the-form-of-a-file process jarred so much in my brain that it caused me to remember the first two principles, which the process broke.<BR />
<BR />
So I thought it worth pointing to these principles, which Jon outlines in his blog post "<A href="https://blog.jonudell.net/2011/01/24/seven-ways-to-think-like-the-web/" target="_blank" rel="nofollow noopener noreferrer">Seven ways to think like the web</A>",&nbsp;and consider them in a context that resonates with us - in our community. I also thought it would be an interesting exercise to see how they might also apply as we build solutions on the web with SAP Cloud Platform.<BR />
<BR />
&nbsp;<BR />
<BR />
<STRONG>1. Be the authoritative source for your own data</STRONG><BR />
<BR />
In relation to this principle, Jon writes about the power of public identity and how it is formed and maintained. For us in the SAP Community, this means associating our identity with the content we produce. For some of us, that means maintaining a blog of our own. If you don't have that, or want the overhead of maintaining your own domain, server, blog system and so on, then the SAP Community blog system is the next best thing - it associates your identity with what you write. What one loses from this principle in this context is offset by the tremendous value we get from sharing ideas on the same conversational platform.<BR />
<BR />
In the context of solutions that we build on SAP Cloud Platform there are multiple aspects to consider. One that immediately comes to mind is the concept of multitenant application provision &amp; subscription (see&nbsp;<SPAN class="mention-scrubbed">hariprasauth.r</SPAN>&nbsp;'s post "<A href="https://blogs.sap.com/2018/09/17/developing-multitenant-applications-on-sap-cloud-platform-cloud-foundry-environment/" target="_blank" rel="noopener noreferrer">Developing Multitenant Applications on SAP Cloud Platform, Cloud Foundry environment</A>" for an overview of this). When we subscribe to and use such an app on SAP Cloud Platform we're reminded of the authority and identity of the app's functionality by the very fact that the URL pattern includes the app name as well as our own (subscriber) identity ... I'm thinking in particular of the tenant host pattern.<BR />
<BR />
By the way, this is the first of the two principles broken by the Easy Apply system - as soon as the file containing a copy of the CV content was uploaded, all identity and source connection was lost.<BR />
<BR />
&nbsp;<BR />
<BR />
<STRONG>2. Pass by reference not by value</STRONG><BR />
<BR />
This is strongly connected with the first principle, and is the second of the two principles broken by the Easy Apply system. As soon as you pass by value, you lose control, and the recipient also loses accuracy over time - any copy of data is stale by definition. Moreover, if you need to update the data you've shared, it's a lot harder for you to do so if you've made copies and scattered them to the wind.<BR />
<BR />
In the context of SAP Cloud Platform, the concept of an API-first approach to development comes to mind. Rather than base solutions upon the requirement to replicate data between apps or services, think about exposing an API to that data, so it remains the single source of truth in a single place (see the first principle).<BR />
<BR />
&nbsp;<BR />
<BR />
<STRONG>3. Know the difference between structured and unstructured data</STRONG><BR />
<BR />
The example Jon gives again relates to blogging, and is the difference between data for human consumption and data for machine consumption. Remember that Internet citizens are not all human* so different representations are required.<BR />
<BR />
*a fun corollary to that is the cartoon from the New Yorker, with the caption "On the Internet, nobody knows you're a dog".<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2018/11/Internet_dog.jpg" /><BR />
<BR />
<EM>From the New Yorker, a cartoon by Peter Steiner, 1993.</EM><BR />
<BR />
&nbsp;<BR />
<BR />
In fact, resources and representations are core building blocks of HTTP and the web, and I'd recommend looking into how these two concepts relate. Briefly, resources are individually addressable bits of content on the web (a resource has a URL). Representations are different actual realities of those resources. In blogging terms, one representation of a blog resource is HTML, for human consumption. Another representation of the same resource is Rich Site Summary (RSS).<BR />
<BR />
The representation requested and delivered is negotiated in the HTTP request and response via "Accept" and "Content-Type" headers and is called "content negotiation" or "conneg" for short. There are some links in these following two posts that you may find useful for further reading: "<A href="http://pipetree.com/qmacro/blog/2003/02/28/conneg-and-the-duality-of-weblogs-2/" target="_blank" rel="nofollow noopener noreferrer">Conneg and the duality of weblogs</A>" and "<A href="http://pipetree.com/qmacro/blog/2009/08/20/coffeeshop-screencast-http-conneg-resource-representations-and-json/" target="_blank" rel="nofollow noopener noreferrer">Coffeeshop screencast: HTTP conneg, resource representations and JSON</A>".<BR />
<BR />
The concept of resources, representations and content negotiation applies equally well beyond blogging; a flexible HTTP-based, API-driven architecture on SAP Cloud Platform is one that embraces content negotiation as a matter of course.<BR />
<BR />
&nbsp;<BR />
<BR />
<STRONG>4. Create and adopt disciplined naming conventions</STRONG><BR />
<BR />
A great example of where this principle is very effective is in the user tag space within the SAP Community. Two examples come immediately to mind - I decided to tag each of the Monday morning thoughts posts with the user tag "<A href="https://blogs.sap.com/tag/mondaymorningthoughts/" target="_blank" rel="noopener noreferrer">mondaymorningthoughts</A>" and immediately I have a quick and efficient way to refer to the entire collection of posts.<BR />
<BR />
Likewise, I took it upon myself to tag my posts about the Application Programming Model with the user tag "<A href="https://blogs.sap.com/tag/applicationprogrammingmodel/" target="_blank" rel="noopener noreferrer">applicationprogrammingmodel</A>", with a similar effect. I managed to encourage other authors to do the same, so we now have a collective and minimum-effort mechanism for organising and sharing information about the topic.<BR />
<BR />
When it comes to SAP Cloud Platform, perhaps the principle is harder to apply. While there are ideas at work in the app URL space that we referred to earlier, I think how we scale apps and services generally means that there's less relevance. Have a read of "<A href="https://blogs.sap.com/2018/04/09/monday-morning-thoughts-a-cloud-native-smell/" target="_blank" rel="noopener noreferrer">Monday morning thoughts: a cloud native smell</A>" for some thoughts on URLs for the cloud native era to see what I mean.<BR />
<BR />
&nbsp;<BR />
<BR />
<STRONG>5. Push your data to the widest appropriate scope</STRONG><BR />
<BR />
The idea that stands out the most in Jon's explanation of this principle is the concept of "directed or serendipitous discovery and ad-hoc collaboration". When you write something and share it on the web, you don't know how it will be received, much less how it will be used, be recombined with other material to form new ideas or to inspire thoughts in a related direction.<BR />
<BR />
It's this principle that allows me to be a little more relaxed that I otherwise would be about the first principle and that some folks are blogging on a platform they don't control. The value of serendipitous discovery of ideas and solutions simply as a side-effect of belonging to and participating in the SAP Community is great.<BR />
<BR />
&nbsp;<BR />
<BR />
<STRONG>6. Participate in pub/sub networks as both a publisher and a subscriber.</STRONG><BR />
<BR />
In a previous post "<A href="https://blogs.sap.com/2018/08/13/monday-morning-thoughts-the-cloud-is-the-computer/" target="_blank" rel="noopener noreferrer">Monday morning thoughts: the cloud is the computer</A>"&nbsp;I talked a little bit about publish / subscribe (pub/sub or <A href="https://blogs.sap.com/tag/pubsub/" target="_blank" rel="noopener noreferrer">pubsub</A> for short). There's an obvious connection for us in the SAP Community, where we publish blog posts and Q&amp;A content using tags, and subscribe to those we're interested in.<BR />
<BR />
But I think there's a much more interesting connection with solutions that are possible today on SAP Cloud Platform, particularly in the area of decoupled extensions to S/4HANA software. I've just started following the new openSAP course "<A href="https://open.sap.com/courses/s4h13/" target="_blank" rel="noopener noreferrer">Create and Deliver Cloud-Native SAP S/4HANA Extensions</A>" and there's this slide in Week 1 Unit 2 (SAP S/4HANA and Extensibility):<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2018/11/Screenshot-2018-11-19-at-08.57.16.png" /><BR />
<BR />
<SPAN class="mention-scrubbed">bjoern.goerke</SPAN>'s exhortation "<A href="https://blogs.sap.com/2018/11/08/keep-the-core-clean-clarifying-points-from-bjorn-goerkes-keynote/" target="_blank" rel="noopener noreferrer">keep the core clean</A>" means, amongst other things, extending rather than modifying, and building side-by-side extensions on SAP Cloud Platform allows us to do that.<BR />
<BR />
Interaction with the digital core can be multi-faceted, but the "Business Events" part of the slide reminds me of what we saw at SAP TechEd in Las Vegas and Barcelona - loose coupling in the form of events, which are published and subscribed to by relevant software parties. You can read more about this in last Monday's post on <A href="https://blogs.sap.com/2018/11/12/monday-morning-thoughts-longevity-and-loose-coupling/" target="_blank" rel="noopener noreferrer">longevity and loose coupling</A>.<BR />
<BR />
&nbsp;<BR />
<BR />
<STRONG>7. Reuse components and services</STRONG><BR />
<BR />
As the first and second principles are strongly linked, I think this principle has a strong connection to the previous one too. In his comments on this principle, Jon reminds us of the "small pieces loosely joined" architecture that in part echoes a major principle of the Unix design and philosophy*.<BR />
<BR />
*As an aside, this reminds me of a wonderful post by <A href="https://sinclairtarget.com/" target="_blank" rel="nofollow noopener noreferrer">Sinclair Target</A> on his Two Bit History blog: "<A href="https://twobithistory.org/2018/11/12/cat.html" target="_blank" rel="nofollow noopener noreferrer">The Source History of Cat</A>". If you haven't read his posts, you really have something to look forward to and enjoy.<BR />
<BR />
In another section of the first week's content on the openSAP course referenced above, the concept of cloud native is described in terms of four key pillars: DevOps, Microservices, Containers and Continous Delivery. I think microservices embodies this principle very well - solutions are broken down into small components, which can be built using different technologies, composed into bigger solutions, be more easily deployed and relatively simply replaced.<BR />
<BR />
When we build solutions on SAP Cloud Platform, following this principle will not only bring benefits from software lifecycle &amp; resilience perspectives, but will also mean that what is built is not orthogonal to the underlying platform upon which everything (well, nearly everything) is built - the web.<BR />
<BR />
&nbsp;<BR />
<BR />
Jon's blog post is relatively old (it's from January 2011), but I think that the principles he outlines &amp; comments upon are still totally relevant today; moreso, perhaps, as there's still a lot we are aspiring to, rather than doing. And as we continue to aspire, we can allow those aspirations to flow beyond the original ideas of us humans participating on the web, to how we think about and design solutions in the new cloud native world.<BR />
<BR />
&nbsp;<BR />
<BR />
This post was brought to you by a wintry morning back home after a few days in Gran Canaria and by <A href="https://www.pactcoffee.com/coffees/la-concepcion" target="_blank" rel="nofollow noopener noreferrer">Pact Coffee's La Concepcion</A> in my SAP <A href="https://anchor.fm/sap-community-podcast" target="_blank" rel="nofollow noopener noreferrer">Coffee Corner Radio</A> podcast mug.<BR />
<BR />
&nbsp;<BR />
<BR />
Read more posts in this series here:&nbsp;<A href="https://blogs.sap.com/tag/mondaymorningthoughts/" target="_blank" rel="noopener noreferrer">Monday morning thoughts</A>.
---
Monday morning thoughts: longevity and loose coupling
technology-blog-sap
2018-11-12
https://community.sap.com/t5/technology-blogs-by-sap/monday-morning-thoughts-longevity-and-loose-coupling/ba-p/13365146
2018-11-12-monday-morning-thoughts-longevity-and-loose-coupling
<EM>In this post, I think about the importance of core technologies, and how the arrival of functions-as-a-service might be merely the next incarnation of an idea that's existed for a while.</EM><BR />
<BR />
This weekend I picked up on a conversation about RSS (alternatively standing for RDF Site Summary, Really Simple Syndication and Rich Site Summary) and how authors should include the whole blog post contents in the RSS feed. There was some wonder within the conversation thread that RSS was still being used; despite the disappearance a few years ago of arguably the pre-eminent RSS reader, <A href="https://www.google.com/reader/about/" target="_blank" rel="nofollow noopener noreferrer">Google Reader</A>, RSS is alive and well and powering syndication &amp; sharing on the web even today. (If you want to know more about RSS, its history and its relation to OData, you might want to read "<A href="https://blogs.sap.com/2018/08/20/monday-morning-thoughts-odata/" target="_blank" rel="noopener noreferrer">Monday morning thoughts: OData</A>".)<BR />
<BR />
That got me thinking of the protocol upon which RSS relies - the venerable HyperText Transfer Protocol (HTTP). HTTP has been around for a long time, and in the same way that email has become a sort of universal mechanism for asynchronous communication, HTTP is a universal mechanism for all sorts of things. Why is that? Well, I think one reason is its beautiful simplicity. When HTTP first arrived on the scene, I remember being delighted by it and indeed by the similarities with email.<BR />
<BR />
&nbsp;<BR />
<BR />
<STRONG>The beautiful simplicity of email and HTTP</STRONG><BR />
<BR />
The official <A href="https://en.wikipedia.org/wiki/Request_for_Comments" target="_blank" rel="nofollow noopener noreferrer">request for comments</A> (RFC) document number <A href="https://www.ietf.org/rfc/rfc0822.txt" target="_blank" rel="nofollow noopener noreferrer">822</A>, from the Internet Engineering Task Force (IETF) describes, amongst other things, what an email looks like. There are headers, and a body - the email message, effectively. Headers are name:value pairs, and the headers are separated from the body by an empty line. Here's a simplified example:<BR />
<PRE id="raw_message_text" class="raw_message_text">Message-ID: &lt;23944892.154212220.SomeMail.root@2ea9232e1&gt;<BR />
From: Sender &lt;sender@example.com&gt;<BR />
To: recipient@example.com<BR />
Subject: The email subject line<BR />
Date: Sat, 10 Nov 2018 14:25:13 +0000 (UTC)<BR />
Content-Type: text/plain; charset=UTF-8<BR />
<BR />
Greetings, earthling!<BR />
<BR />
</PRE><BR />
In HTTP, described in RFC <A href="https://www.ietf.org/rfc/rfc2616.txt" target="_blank" rel="nofollow noopener noreferrer">2616</A>, messages are either requests or responses, and in both cases, the structure is the same: headers in the form of name:value pairs, an empty line, then the payload of the request or the response. Here's a simplified example of an HTTP request (this one doesn't have a payload) and the corresponding HTTP response:<BR />
<BR />
Request:<BR />
<PRE class="result notranslate">GET /qmacro/blog/ HTTP/1.1<BR />
User-Agent: Mozilla/5.0 (X11; CrOS x86_64 11151.17.0)<BR />
Host: pipetree.com<BR />
Accept-Language: en-gb<BR />
Accept-Encoding: gzip, deflate<BR />
Connection: Keep-Alive<BR />
<BR />
</PRE><BR />
Response:<BR />
<PRE class="result notranslate">HTTP/1.1 200 OK<BR />
Date: Mon, 12 Nov 2018 06:43:07 GMT<BR />
Server: Apache/2.4.18 (Ubuntu)<BR />
Content-Type: text/html; charset=utf-8<BR />
Content-Length: 10557<BR />
<BR />
&lt;!DOCTYPE HTML&gt;<BR />
&lt;html&gt;<BR />
&lt;head&gt;<BR />
&lt;title&gt;DJ's Weblog&lt;/title&gt;<BR />
<BR />
</PRE><BR />
There's a beauty in the simplicity and similarity across all these different examples - they follow the same pattern, even sharing some headers (such as Date and Content-Type), and above all they are human-readable*.<BR />
<BR />
*the advent of HTML email has made that a little more challenging, and brought about the death of many excellent text-only email clients such as (my favourite email client of all time) <A href="https://en.wikipedia.org/wiki/Mutt_(email_client)" target="_blank" rel="nofollow noopener noreferrer">mutt</A>, but that's a story for another time.<BR />
<BR />
There have been attempts at improving upon today's HTTP, and you can see those attempts in the form of <A href="https://www.chromium.org/spdy" target="_blank" rel="nofollow noopener noreferrer">SPDY</A> and HTTP/2.0. And of course we have web sockets and the WS protocol prefix being utilised between server and client (browser) ... but ultimately the core of HTTP remains strong and ubiquitous. Indeed, in the Las Vegas and Barcelona editions of one of my SAP TechEd sessions this year - LT106 "<A href="https://sessioncatalog.sapevents.com/go/agendabuilder.sessions/?l=192&amp;sid=62863&amp;locale=en_US" target="_blank" rel="nofollow noopener noreferrer">Understanding the Available Paths for Developers Throughout SAP</A>", I have exhorted the attendees to learn core technologies regardless of the path they take. One of these core technologies that I think everyone should learn is HTTP.<BR />
<BR />
&nbsp;<BR />
<BR />
<STRONG>Probot and Webhooks&nbsp;</STRONG><BR />
<BR />
Something else I looked into this weekend was a result of my attendance last week at <A href="https://london-2018.devrel.net" target="_blank" rel="nofollow noopener noreferrer">DevRelCon 2018 London</A>, where, amongst other things, I learned about all sorts of tools that <A href="https://github.com/" target="_blank" rel="nofollow noopener noreferrer">GitHub</A> has to offer above and beyond what I consider core (social coding via repository &amp; project management based around the distributed source code control system "git"). One of these tools is <A href="https://probot.github.io/" target="_blank" rel="nofollow noopener noreferrer">Probot</A>, which allows you to use apps to extend processes managed within GitHub.<BR />
<BR />
<IMG src="https://probot.github.io/assets/logo.png" alt="Probot logo" width="106" height="126" /><BR />
<BR />
<EM>The Probot character</EM><BR />
<BR />
The apps can be pre-built, or you can create your own. Essentially Probot is a layer built on top of a couple of fundamental mechanisms - <A href="https://developer.github.com/webhooks/" target="_blank" rel="nofollow noopener noreferrer">webhooks and the GitHub event API</A>, making it easier for these apps to be constructed.<BR />
<BR />
Let's look at webhooks for a minute. What are they? Think of webhooks as an architectural pattern based usage of HTTP. The concept of webhooks has been around for more than a decade - first invented and popularised by Jeff Lindsay - see his post "<A href="http://progrium.com/blog/2007/05/03/web-hooks-to-revolutionize-the-web/" target="_blank" rel="nofollow noopener noreferrer">Web hooks to revolutionize the web</A>" from 2007. He describes them as "user defined callbacks made with HTTP POST"*, and a core use case for webhooks at the time was to address the challenges of polling - the repeated requests one piece of software makes to another, asking, over and over again: "anything new?", "have you finished it yet?", "do you have anything for me?" and similar requests. The polling pattern is often the simplest to think about and implement, but it's rather wasteful and inefficient.<BR />
<BR />
*Interestingly, Jeff likens webhooks to <EM>pingbacks</EM>, which I wrote about in last week's post: "<A href="https://blogs.sap.com/2018/11/05/monday-morning-thoughts-on-starting-blogging/" target="_blank" rel="noopener noreferrer">Monday morning thoughts: on starting blogging</A>".<BR />
<BR />
Back in 2007 when Jeff described this architectural pattern, we immediately saw the possibilities of a web of event-driven services, loosely connected via HTTP. At that time, HTTP was the lingua franca of inter-application communication.<BR />
<BR />
Today, it still is. Look at the other half of what Probot is built upon - GitHub's event API. Want to have some checks automatically carried out when source code is updated?&nbsp;Want to trigger a process in your organisation when a pull request is made to a specific repository? Register a callback, to be executed when these events happen. The form of that execution is simply some code, somewhere, that responds to an HTTP request, a request that is made by the system that is raising the event (GitHub in this case), and making that HTTP POST to the callback endpoint you registered. Again, this is where knowing about the HTTP protocol in general, and understanding the nature of how HTTP server frameworks function, is an essential skill, in my opinion*.<BR />
<BR />
*one of the ideas that drove me originally to create the Alternative Dispatcher Layer (ADL) for the ABAP stack was the lovely similarity between HTTP server frameworks large and small, across different languages and environments. See "<A href="https://blogs.sap.com/2009/09/21/a-new-rest-handler-dispatcher-for-the-icf/" target="_blank" rel="noopener noreferrer">A new REST handler / dispatcher for the ICF</A>" and&nbsp;<SPAN class="mention-scrubbed">nigel.james</SPAN>'s presentation "<A href="https://www.slideshare.net/squarecloud/alternative-dispatcher-layer-overview-12170192" target="_blank" rel="nofollow noopener noreferrer">Alternative Dispatcher Layer Overview</A>" for a little bit of background reading.<BR />
<BR />
&nbsp;<BR />
<BR />
<STRONG>Functions-as-a-Service (FaaS)</STRONG><BR />
<BR />
Today's serverless paradigm is a utility computing model where cloud vendors (such as SAP) provide compute resources, dynamically managing the allocation according to load, and&nbsp;charging based directly (and only) on resources consumed, rather than on pre-allocated units. This is a perfect example of cloud native computing, and amongst other things, it allows, even encourages us to think in terms of small computational executions, and to construct solutions out of loosely coupled building blocks.<BR />
<BR />
I've written about FaaS in a previous post: "<A href="https://blogs.sap.com/2018/05/14/functions-what-functions/" target="_blank" rel="noopener noreferrer">Monday morning thoughts: functions - what functions?</A>" but I thought it was worth continuing the "loosely coupled" idea in this direction. The appeal of SAP's FaaS offering is especially interesting to us as folks who build enterprise business solutions because the serverless fabric extends into the business processes themselves, as we saw for example in the SAP TechEd 2018 Las Vegas keynote demo from&nbsp;<SPAN class="mention-scrubbed">jana.richter</SPAN>&nbsp;and&nbsp;<SPAN class="mention-scrubbed">ian.kimbell</SPAN>&nbsp;(see "<A href="https://www.youtube.com/watch?v=JDVDY1jMsuQ" target="_blank" rel="nofollow noopener noreferrer">Speed with Serverless Apps: SAP Cloud Platform Functions at SAP TechEd 2018</A>").<BR />
<BR />
Essentially we can see that there are commonalities between various FaaS solutions, not only with SAP but with the hyperscale providers too, on how code is invoked:<BR />
<UL><BR />
 	<LI>Triggers: you can invoke a function directly with an HTTP call</LI><BR />
 	<LI>Events: functions can be invoked as and when appropriate, based on the occurrence of various events, whether those events are <A href="https://help.sap.com/viewer/788fa4c7585e415187e347e904010cee/1808.500/en-US/82e97d5329044732af1efd996bfdc2ab.html" target="_blank" rel="noopener noreferrer">business related</A>&nbsp;or service related (for example - <A href="https://cloud.google.com/functions/docs/concepts/events-triggers" target="_blank" rel="nofollow noopener noreferrer">Google Cloud Functions offer events</A> based upon Cloud Storage and Cloud Pub/Sub)</LI><BR />
 	<LI>Timers: in a wonderful acknowledgement of the enduring nature of various Unix designs, you can use the language of&nbsp;<A href="https://en.wikipedia.org/wiki/Cron" target="_blank" rel="nofollow noopener noreferrer">cron</A>&nbsp;to <A href="https://help.sap.com/viewer/94fafb5bcf8f4c5cbdd0cdd8e358183c/Cloud/en-US/e5d2c92959b94b7e98612ca577cbba2e.html" target="_blank" rel="noopener noreferrer">schedule time-based invocations</A> of functions on SAP Cloud Platform</LI><BR />
</UL><BR />
Moreover, the commonality doesn't stop at the invocation level. At the end of the day, what are being invoked are functions, and the API is HTTP flavoured. Discrete functions with a well-defined, (well-loved, perhaps?) interface: The function receives the call and its context, in the form of an object representing the HTTP request, with the method, the URL path of the resource, the headers and any payload that is sent. It also receives an empty object representing the HTTP response, and it can and should populate that object appropriately, before "letting go" and allowing the server infrastructure take care of what happens after that.<BR />
<BR />
Note that the primary purpose of these loosely coupled HTTP-invoked functions is not always to return a rich response, but to perhaps perform some computation, store some data, change some state, as an appropriate reaction to the original event. These are not pure functions - many will have side effects (so it's appropriate for the method to be POST). But now I'm (semi-deliberately) mixing in functional programming concepts, which is a valid thing to think about here too, but perhaps I'll leave that for another time.<BR />
<BR />
&nbsp;<BR />
<BR />
<STRONG>Loose coupling and management</STRONG><BR />
<BR />
I'd like to end this post by encouraging you to think about the nature of this idea of loose coupling of functions, and event-based invocation. There's a huge amount of potential, and of flexibility, especially in the context of trying to keep the core clean (see "<A href="https://blogs.sap.com/2018/11/08/keep-the-core-clean-clarifying-points-from-bjorn-goerkes-keynote/" target="_blank" rel="noopener noreferrer">Keep the Core Clean: Clarifying Points from BjÃ¶rn Goerkeâs Keynote</A>" by&nbsp;<SPAN class="mention-scrubbed">jerry.janda</SPAN>) by extending computation for business services in the cloud.<BR />
<BR />
One challenge is the management of the events and the functions written to be invoked at the events' occurrences. In a similar way to how we have to think about managing a large software project, with modules and libraries, we have to think about how we will go about managing this new style of resources.<BR />
<BR />
How will we retain an overview of what we have, and what is invoked when? Our tools should help us there to some extent. How do we manage the intersection of business process requirements and the triggering of actions and reactions? Perhaps that's more of a human-led activity that is only assisted by tools. I don't know yet. It's something that&nbsp;<SPAN class="mention-scrubbed">dahowlett</SPAN>&nbsp;and I touched upon at SAP TechEd 2018 Barcelona (see the audio content "<A href="https://www.youtube.com/watch?v=cFN5OQ2D9R8" target="_blank" rel="nofollow noopener noreferrer">Towards a more open SAP?</A>" that Den and I recorded at the event), and a topic that we should explore more together.<BR />
<BR />
&nbsp;<BR />
<BR />
If you learn about one thing this week, I hope I can make an argument for it to be about HTTP, and how you write HTTP services in the framework relating to your favourite language. As well as being a meditation on a now-venerable protocol, it will help you step into this new era of cloud computing.<BR />
<BR />
&nbsp;<BR />
<BR />
This post was brought to you by the prospect of a relaxing week off, by the distraction of the falling leaves outside, and by <A href="https://www.pactcoffee.com/coffees/asomuprisma" target="_blank" rel="nofollow noopener noreferrer">Pact Coffee's Asomuprisma</A>.<BR />
<BR />
&nbsp;<BR />
<BR />
Read more posts in this series here:&nbsp;<A href="https://blogs.sap.com/tag/mondaymorningthoughts/" target="_blank" rel="noopener noreferrer">Monday morning thoughts</A>.<BR />
<BR />
&nbsp;<BR />
<BR />
<EM>Update 20 Nov 2018: See James Governor's post "<A href="https://redmonk.com/jgovernor/2018/11/07/github-universe-2018-low-key-revolutionary/" target="_blank" rel="nofollow noopener noreferrer">GitHub Universe 2018: Low Key Revolutionary</A>" on the recent GitHub conference and more on serverless in relation to the recently released <A href="https://github.com/features/actions" target="_blank" rel="nofollow noopener noreferrer">GitHub Actions</A>.</EM>
---
Monday morning thoughts: on starting blogging
welcome-cornerblog-board
2018-11-05
https://community.sap.com/t5/welcome-corner-blog-posts/monday-morning-thoughts-on-starting-blogging/ba-p/13359766
2018-11-05-monday-morning-thoughts-on-starting-blogging
<EM>In this post, I think about what it is that made me start blogging, and about the reasons to start blogging that might resonate with you, if you've not yet made that step.</EM><BR />
<BR />
Deep down I'm a shy person. I'm not great at casual conversation, and, via a wonderful SAP Inside Track session a few years ago from the great&nbsp;<SPAN class="mention-scrubbed">thorstenster</SPAN>&nbsp;I worked out that I'm an introvert, in that I recharge alone, rather than in a crowd. So blogging for me has become one way of expressing myself.<BR />
<BR />
Like everyone, I have things to say, ideas to share, and writing in blog post form is one way I speak. To communicate is natural, and today we have many ways to do that.<BR />
<BR />
&nbsp;<BR />
<BR />
<STRONG>The early days</STRONG><BR />
<BR />
In fact, that reminds me of why I started blogging in the first place. Back in the day, when the Internet was younger, there were different channels in which we interacted. In the early days, there was Email of course (via the SMTP and POP3 protocols) which gave us the venerable <A href="https://blogs.sap.com/2005/07/04/the-sap-developer-community-10-years-ago/" target="_blank" rel="noopener noreferrer">mailing list</A> concept. There was also Usenet (via the NNTP protocol) with a wider array of subject-based groups than you could shake a stick at.<BR />
<BR />
In both these communication scenarios there was an etiquette which involved the idea of deliberately "lurking". According to various dictionaries, to lurk is "to&nbsp;read the postings in an Internet forum without actively contributing". The etiquette was that one should lurk long enough to get the gist of what was being discussed, to understand what was implicitly expected, to breathe rules of engagement unspoken or explicit; generally, to be better prepared to contribute appropriately.<BR />
<BR />
With today's Web (via the HTTP protocol*, to complete the picture) the concept of lurking has declined, as the gap between producers and consumers has widened.&nbsp;But early on in the days of the Web we saw another mechanism for multi-way communication: blogging.<BR />
<BR />
*the distinction between Email, Web, Usenet and so on, each being provided by different protocols on the Internet, gives me a reason to continue to be doggedly pedantic about the difference between the Web and the Internet.<BR />
<BR />
While pretty much all forms of communication on the Internet are asynchronous, the protohistory of blogging exemplified an extreme asynchronous communication style, certainly the most loosely coupled. With the Web in general, and blogging in particular, to participate in a conversation, you'd read someone's blog post and then respond by writing a post of your own, on your own blog*. And you'd connect the two using <A href="https://make.wordpress.org/support/user-manual/building-your-wordpress-community/trackbacks-and-pingbacks/" target="_blank" rel="nofollow noopener noreferrer">trackbacks and pingbacks</A> and other related mechanisms, whereby the author(s) you were responding to would be notified that you'd written a response. Often, their blogging platform would also display any trackbacks automatically at the end of a post, too.<BR />
<BR />
*this time I'm using the word "blog" because it's appropriate here - a *collection* of posts, not an individual post!<BR />
<BR />
This is one of the main reasons why I started blogging - to be able to participate in conversations and to contribute, to give value back.<BR />
<BR />
&nbsp;<BR />
<BR />
<STRONG>The new blogging</STRONG><BR />
<BR />
And as we moved from the world of mailing lists and Usenet to the world of blogging on the Web, so too did the concept of lurking (as a deliberate passive period before diving in) fade away. Moreover, as time progressed, two-way communication between blogging became even more asynchronous (and trackback systems started to disappear) to the point of morphing into publishing platforms with conversation in the form of comment systems at the end of each post (like we have now in the SAP Community).<BR />
<BR />
So while blogging today is still predominantly about sharing and expression, it's also completely normal to see posts starting new subjects each time, starting new conversations.<BR />
<BR />
&nbsp;<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2018/11/Screenshot-2018-11-05-at-08.57.12.png" /><BR />
<BR />
<EM>Mostly unrelated to this post, but a nice picture nonetheless, I think. The view I got when looking up from my favourite bar in Barcelona (La MÃ©s Petita) - a quiet place to recharge.</EM><BR />
<BR />
&nbsp;<BR />
<BR />
<STRONG>Tips for starting</STRONG><BR />
<BR />
If you've not taken the plunge yet, you might want to consider doing so. Previously in this <A href="https://blogs.sap.com/tag/mondaymorningthoughts/" target="_blank" rel="noopener noreferrer">Monday morning thoughts series</A> I wrote about what makes a good blog post, and also what writing such a post does for the author - see "<A href="https://blogs.sap.com/2018/08/27/monday-morning-thoughts-a-good-blog-post/" target="_blank" rel="noopener noreferrer">Monday morning thoughts: a good blog post</A>".<BR />
<BR />
But I thought it might be useful to give some tips that are worth considering, and that might persuade you to take the plunge and write your first post.<BR />
<OL><BR />
 	<LI><STRONG>Express yourself</STRONG>: Everyone has a voice, everyone has something to say, some experience to share. As I mentioned in the earlier post, and <A href="https://blogs.sap.com/2018/08/27/monday-morning-thoughts-a-good-blog-post/#comment-434799" target="_blank" rel="noopener noreferrer">amplified</A> by&nbsp;<SPAN class="mention-scrubbed">chris.paine</SPAN>&nbsp;in the comments, find your own voice. This will make it easier to compose what you have to say, because you're not trying to be someone else.</LI><BR />
 	<LI><STRONG>Be original</STRONG>: This is related to "Express yourself", but has a greater focus on content. Avoid regurgitating content that exists already. That doesn't mean avoiding subjects that others have covered -- while there's only a limited number of subjects, there's a much greater number of angles and experiences. If you're going to write about something, make sure the piece adds some value.</LI><BR />
 	<LI><STRONG>Allay your fears</STRONG>: You may have an element of trepidation if you're about to write your first post. That's not unexpected. But remember that everyone has to start somewhere, with the first step. Remember also that you're writing your own journal, your own articles. Yes, if you write them on the SAP Community they have to have some relation to SAP and follow the <A href="https://www.sap.com/community/resources/rules-of-engagement.html" target="_blank" rel="noopener noreferrer">rules of engagement</A>, but that's about it. The first two tips here should help you remember that you're constructing a narrative with your own voice, which is grouped in a blog -- a collection of content -- for easy consumption. Mine, for example is here:&nbsp;<A href="https://people.sap.com/dj.adams.sap#content" target="_blank" rel="noopener noreferrer">https://people.sap.com/dj.adams.sap#content</A> (and also here:&nbsp;<A href="https://people.sap.com/dj.adams#content" target="_blank" rel="noopener noreferrer">https://people.sap.com/dj.adams#content</A> as I switched users when I joined SAP). It's also here:&nbsp;<A href="http://pipetree.com/qmacro/blog/" target="_blank" rel="nofollow noopener noreferrer">http://pipetree.com/qmacro/blog/</A> and here: <A href="http://langram.org" target="_blank" rel="nofollow noopener noreferrer">http://langram.org</A> and some other places scattered over the Web.</LI><BR />
 	<LI><STRONG>Listen to the moderators</STRONG>: If you're just starting out, the moderators will get to look at your post before it's published. That's so they can guide you and suggest adjustments before publication. They're not trying to make it difficult, rather, they want to help you create good content. They won't necessarily police the content itself - the community as a whole is great at doing that, through the comments system (which makes the conversations so much richer).</LI><BR />
 	<LI><STRONG>Solicit feedback</STRONG>: One technique I see some folks using is to write a draft post and ask friends to review it. Even great writers such as <A href="http://www.paulgraham.com/articles.html" target="_blank" rel="nofollow noopener noreferrer">Paul Graham</A> do this - it's not a sign of weakness, it's a sign of strength. So if you get the chance, and have the inclination, share your post content with colleagues and ask for their feedback.</LI><BR />
 	<LI><STRONG>Go for it</STRONG>: If you're a member of this SAP Community and are reading this, chances are that you have experience in certain areas of SAP. Use that experience as a basis for your writing. If you're not inspired that way, have a look at content that's already out there - whether that's blog post content, Q&amp;A content or even <A href="https://events.sap.com/teched/en/sessions.aspx" target="_blank" rel="noopener noreferrer">SAP TechEd replays</A> - and write down your thoughts. If nothing else, the process will help you organise those thoughts in your head. As a wonderful bonus, those same thoughts may inspire others, teaching them something or at the very least, pointing them to some interesting content that they may have otherwise not come across.</LI><BR />
</OL><BR />
&nbsp;<BR />
<BR />
<STRONG>Go for it</STRONG><BR />
<BR />
I'd like to end this post by reiterating the last tip. Go for it. A journey into blogging starts with a single step - that first blog post. Find your voice and start writing.<BR />
<BR />
&nbsp;<BR />
<BR />
This post was brought to you by <A href="https://www.pactcoffee.com/coffees/asomuprisma" target="_blank" rel="nofollow noopener noreferrer">Pact Coffee's Asomuprisma</A>, the zen-like serenity of this Chrome OS device, and unusually stiff legs from <A href="https://twitter.com/qmacro/status/1059329572985036801" target="_blank" rel="nofollow noopener noreferrer">my run earlier this morning</A>.<BR />
<BR />
&nbsp;<BR />
<BR />
Read more posts in this series here:&nbsp;<A href="https://blogs.sap.com/tag/mondaymorningthoughts/" target="_blank" rel="noopener noreferrer">Monday morning thoughts</A>.<BR />
<BR />
&nbsp;<BR />
<BR />
<EM>Update 05 Nov:</EM>&nbsp;<SPAN class="mention-scrubbed">oddss</SPAN>&nbsp;has published a nice post "<A href="https://blogs.sap.com/2018/11/05/hello-world-three-easy-ways-to-get-started-with-sap-community/" target="_blank" rel="noopener noreferrer">Hello World! Three Easy Ways to Get Started with SAP Community</A>" which is a useful resource for beginners and fits well into the context of this post.
---
Monday morning thoughts: exploring reuse
technology-blog-sap
2018-10-29
https://community.sap.com/t5/technology-blogs-by-sap/monday-morning-thoughts-exploring-reuse/ba-p/13350771
2018-10-29-monday-morning-thoughts-exploring-reuse
<EM>In this post, I think about reuse and extension, in the context of the Application Programming Model for SAP Cloud Platform, and mindful of BjÃ¶rn Goerke's SAP TechEd 2018 keynote message in Barcelona - "keep the core clean".</EM><BR />
<BR />
Last week saw the Barcelona edition of SAP TechEd 2018, where&nbsp;SAP CTO BjÃ¶rn Goerke and a great team of role models on stage gave us a keynote with something for everyone - technical and business alike. During the keynote, I <A href="https://twitter.com/qmacro/status/1054640660400295936" target="_blank" rel="nofollow noopener noreferrer">tweeted</A>:<BR />
<BLOCKQUOTE><EM>My three keywords from the #SAPTechEd keynote so far:</EM><BR />
<BR />
<EM>Open (standards, protocols, APIs)</EM><BR />
<BR />
<EM>Reuse (important superpower of&nbsp;@sapcp application programming model)&nbsp;</EM><BR />
<BR />
<EM>Clean (keep the core clean by extending outside of it)</EM></BLOCKQUOTE><BR />
I want to think about the "reuse" and "clean" keywords, because in many ways they're complementary, in that reuse (and by association, extension) can help to achieve the goal of a clean core.<BR />
<BR />
Of course, there's a lot more to it than that, but reusing &amp; extending definitions and services is a key part of building outside of the core, whether for net new applications or to extend existing solutions. That implies that the application programming model, which has reuse as a "superpower", is a very useful model to know about.<BR />
<BR />
So I thought I'd look into an example of reuse and extension that exist for us to meditate upon and learn from.<BR />
<BR />
&nbsp;<BR />
<BR />
<STRONG>cloud-samples-itelo</STRONG><BR />
<BR />
Earlier this year&nbsp;<SPAN class="mention-scrubbed">oliver.welzel</SPAN>&nbsp;wrote "<A href="https://blogs.sap.com/2018/06/27/itelo-a-sample-business-application-for-the-new-application-programming-model-for-sap-cloud-platform/" target="_blank" rel="noopener noreferrer">ITelO â A Sample Business Application for the new Application Programming Model for SAP Cloud Platform</A>" in which he described an application with ra product catalog, and reviews, for the fictitious company ITelO. The data model is in three layers, with each building on the one beneath it.<BR />
<BR />
This diagram from the post provides a nice summary of that:<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2018/10/ITelOCatalog.png" /><BR />
<BR />
<EM>The component overview, showing how the data model is built up in layers</EM><BR />
<BR />
(Perhaps before continuing with this post, it might be worth you going and taking a read of Oliver's post. Don't forget to come back, though!)<BR />
<BR />
&nbsp;<BR />
<BR />
<STRONG>Multiple layers</STRONG><BR />
<BR />
The idea is that there are core artefacts in the "foundation" layer, the "product-catalog" layer builds on top of that, and then there's the "itelo" specific application layer at the top.<BR />
<BR />
Each layer is represented by a repository in GitHub, so all the source is available to study. If we start at the top, and look at the data model definition at the "itelo" layer, this is what we see*, specifically in the <A href="https://github.com/SAP/cloud-samples-itelo/blob/rel-1.0/db/model.cds" target="_blank" rel="nofollow noopener noreferrer">db/model.cds</A> source:<BR />
<PRE class="language-sql"><CODE>namespace clouds.itelo;<BR />
<BR />
using clouds.products.Products from '@sap/cloud-samples-catalog';<BR />
using clouds.foundation as fnd from '@sap/cloud-samples-foundation';<BR />
<BR />
extend Products with {<BR />
	reviews: Association to many Reviews on reviews.product = $self @title: '{i18n&gt;review}';<BR />
	averageRating: Decimal(4, 2) @(<BR />
		title: '{i18n&gt;averageRating}',<BR />
		Common.FieldControl: #ReadOnly<BR />
	);<BR />
	numberOfReviews: Integer @(<BR />
		title: '{i18n&gt;numberOfReviews}',<BR />
		Common.FieldControl: #ReadOnly<BR />
	);<BR />
}<BR />
<BR />
entity Reviews: fnd.BusinessObject {<BR />
	product: Association to Products @title: '{i18n&gt;product}';<BR />
	reviewer: Association to Reviewers @title: '{i18n&gt;reviewer_XTIT}';<BR />
	title: String(60) @title: '{i18n&gt;reviewTitle}';<BR />
	message: String(1024) @title: '{i18n&gt;reviewText}';<BR />
	rating: Decimal(4, 2) @title: '{i18n&gt;rating}';<BR />
	helpfulCount: Integer @title: '{i18n&gt;ratedHelpful}';<BR />
	helpfulTotal: Integer @title: '{i18n&gt;ratedTotal}';<BR />
}<BR />
<BR />
annotate Reviews with {<BR />
	ID @title: '{i18n&gt;review}';<BR />
}<BR />
<BR />
entity Reviewers: fnd.Person, fnd.BusinessObject {<BR />
}<BR />
<BR />
annotate Reviewers with {<BR />
	ID @title: '{i18n&gt;reviewer_XTIT}';<BR />
}</CODE></PRE><BR />
&nbsp;<BR />
<BR />
*I'm specifically using the "rel-1.0" branch in each case, because that's what's also used in the dependency references that we'll see shortly, and represents a stable version that we can examine.<BR />
<BR />
&nbsp;<BR />
<BR />
<STRONG>Reuse through "using" statements</STRONG><BR />
<BR />
Looking at the first few lines, we see some "using" statements:<BR />
<PRE class="language-sql"><CODE>using clouds.products.Products from '@sap/cloud-samples-catalog';<BR />
using clouds.foundation as fnd from '@sap/cloud-samples-foundation';</CODE></PRE><BR />
So this is already interesting. Is this reuse in action? It is. But what does it mean, exactly? Let's investigate. Taking the first "using" statement, something called "clouds.products.Products" is being used from something called "@sap/cloud-samples-catalog".<BR />
<BR />
In the <A href="https://help.sap.com/viewer/65de2977205c403bbc107264b8eccf4b/Cloud/en-US/c6f83f47d8364a06922a60aa57a699f8.html" target="_blank" rel="noopener noreferrer">Model Reuse</A> section of the documentation on the SAP Help Portal, we can see that this is effectively an import of a definition from another CDS model. OK, which one? Well, we can recognise the "cloud-samples-catalog" name as it's one of the layers in the diagram we looked at earlier. But how is that resolved?<BR />
<BR />
For that, we have to look in the "itelo" layer project's <A href="https://github.com/SAP/cloud-samples-itelo/blob/rel-1.0/package.json" target="_blank" rel="nofollow noopener noreferrer">package.json</A> file, where, amongst other things, we see some dependencies defined:<BR />
<PRE class="language-javascript"><CODE>"dependencies": {<BR />
	"@sap/cloud-samples-foundation": "https://github.com/SAP/cloud-samples-foundation.git#rel-1.0",<BR />
	"@sap/cloud-samples-catalog": "https://github.com/SAP/cloud-samples-catalog.git#rel-1.0"<BR />
}<BR />
</CODE></PRE><BR />
Ooh, well that's exciting, for a start! The package.json file is <A href="https://docs.npmjs.com/files/package.json" target="_blank" rel="nofollow noopener noreferrer">from the Node Package Manager (NPM) world</A> and the dependencies section is where one defines dependencies to other packages, typically ones like "express", if you're building services that handle HTTP requests, for example. But what do we have here?<BR />
<BR />
Well, we can see the names referenced in the "using" statements earlier, in other words "@sap/cloud-samples-catalog" and "@sap/cloud-samples-foundation". But instead of simple package names, they're mapped to GitHub URLs. And not just any GitHub URLs, but URLs that refer to specific repositories, and indeed specific branches! Taking the URL for the "@sap/cloud-samples-catalog" name, we have:<BR />
<PRE><CODE><A href="https://github.com/SAP/cloud-samples-catalog.git#rel-1.0" target="test_blank" rel="nofollow noopener noreferrer">https://github.com/SAP/cloud-samples-catalog.git#rel-1.0</A></CODE></PRE><BR />
which refers to the <A href="https://github.com/SAP/cloud-samples-catalog/tree/rel-1.0" target="_blank" rel="nofollow noopener noreferrer">rel-1.0 branch</A> of the cloud-samples-catalog repository belonging to SAP.<BR />
<BR />
&nbsp;<BR />
<BR />
<STRONG>The "product-catalog" layer</STRONG><BR />
<BR />
Looking there, we see a fully formed application - the middle "product-catalog" layer that we saw earlier, with app, srv and db folders representing each of the three components of a typical fully fledged solution based on the application programming model.<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2018/10/Screenshot-2018-10-29-at-10.19.20.png" height="464" width="620" /><BR />
<BR />
In the db folder we see the <A href="https://github.com/SAP/cloud-samples-catalog/blob/rel-1.0/db/model.cds" target="_blank" rel="nofollow noopener noreferrer">model.cds</A> file, which starts like this:<BR />
<PRE class="language-sql"><CODE>namespace clouds.products;<BR />
<BR />
using clouds.foundation as fnd from '@sap/cloud-samples-foundation';<BR />
using clouds.foundation.CodeList;<BR />
<BR />
entity Products: fnd.BusinessObject {<BR />
	// general info<BR />
	key ID: String(36);<BR />
	name: localized String @(<BR />
		title: '{i18n&gt;name}',<BR />
		Common.FieldControl: #Mandatory,<BR />
		Capabilities.SearchRestrictions.Searchable<BR />
	);<BR />
	description: localized String @(<BR />
		title: '{i18n&gt;description}',<BR />
		Common.FieldControl: #Mandatory<BR />
	);<BR />
<BR />
	[...]</CODE></PRE><BR />
&nbsp;<BR />
<BR />
<STRONG>Fractals</STRONG><BR />
<BR />
In a wonderfully fractal way, we notice immediately that this model definition also refers to another package with a "using" statement, but let's resist descending deeper just at this moment. Instead, we can concentrate on looking at what's going on with the "using" statement we've seen in the consuming definition earlier, which looked like this:<BR />
<PRE><CODE>using clouds.products.Products from '@sap/cloud-samples-catalog';</CODE></PRE><BR />
We realise that "clouds.products.Products" refers to the Products entity in the "cloud.products" namespace, which is defined here with the "entity" definition:<BR />
<PRE><CODE>entity Products: fnd.BusinessObject { ... }</CODE></PRE><BR />
But what is that "fnd.BusinessObject" sitting between the entity name and the block definition in curly braces? Why, it's more reuse, this time of the underlying "foundation" layer. Just above in the same file, we can see that this layer is referenced in a "using" statement, this time with a local alias "fnd" defined:<BR />
<PRE><CODE>using&nbsp;clouds.foundation as fnd from '@sap/cloud-samples-foundation';</CODE></PRE><BR />
So now let's briefly descend into the fractal. The reference to "fnd.BusinessObject" is to an entity defined in the "foundation" layer, which we can see if we follow the <A href="https://github.com/SAP/cloud-samples-catalog/blob/rel-1.0/package.json#L9" target="_blank" rel="nofollow noopener noreferrer">dependency reference in the "product-catalog" layer's package.json</A>:<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2018/10/Screenshot-2018-10-29-at-10.22.27.png" /><BR />
<BR />
(It's worth observing that in this layer we only have data definitions -- in the form of ".cds" files -- rather than a full blown solution with app, srv and db folders.)<BR />
<BR />
In this repository (again, branch "rel-1.0") we can find the definition of the BusinessObject entity <A href="https://github.com/SAP/cloud-samples-foundation/blob/rel-1.0/common.cds#L3-L8" target="_blank" rel="nofollow noopener noreferrer">in the common.cds file</A>&nbsp;looking like this:<BR />
<PRE class="language-sql"><CODE>abstract entity BusinessObject : ManagedObject {<BR />
	key ID : UUID @(<BR />
		title: '{i18n&gt;uuid}',<BR />
		Common.Text: {$value: name, "@UI.TextArrangement": #TextOnly}<BR />
	);<BR />
}</CODE></PRE><BR />
Note in passing that here the "BusinessObject" entity is defined as "abstract" which means that it's just a type declaration rather than something for which instances should exist. Note also that it's further defined, using a similar pattern to where we saw the "fnd.BusinessObject" reference, by another abstract entity definition "ManagedObject" (you can <A href="https://github.com/SAP/cloud-samples-foundation/blob/rel-1.0/common.cds#L10-L34" target="_blank" rel="nofollow noopener noreferrer">find this definition of ManagedObject</A> also in the common.cds file).<BR />
<BR />
&nbsp;<BR />
<BR />
<STRONG>Extension through "extend" statements</STRONG><BR />
<BR />
Moving back up the layers for some air, we see that directly following the "using" statements, there is this:<BR />
<PRE class="language-sql"><CODE>extend Products with {<BR />
	reviews: Association to many Reviews on reviews.product = $self @title: '{i18n&gt;review}';<BR />
	averageRating: Decimal(4, 2) @(<BR />
		title: '{i18n&gt;averageRating}',<BR />
		Common.FieldControl: #ReadOnly<BR />
	);<BR />
	numberOfReviews: Integer @(<BR />
		title: '{i18n&gt;numberOfReviews}',<BR />
		Common.FieldControl: #ReadOnly<BR />
	);<BR />
}</CODE></PRE><BR />
With the "extend" <A href="https://help.sap.com/viewer/65de2977205c403bbc107264b8eccf4b/Cloud/en-US/40582e7bbeca4311b0b165c8b9745094.html" target="_blank" rel="noopener noreferrer">aspect</A>, entity definitions can be repurposed with extra properties, for example. In this case, the existing Products entity (from the "product-catalog" layer's data definition) is extended with three properties: "reviews", "averageRating" and "numberOfReviews". Note that the "reviews" property is an association to a <A href="https://github.com/SAP/cloud-samples-itelo/blob/1.0.0/db/model.cds#L18-L26" target="_blank" rel="nofollow noopener noreferrer">Reviews entity</A> at this (itelo) application layer, defined expressly for this purpose.<BR />
<BR />
Moreover, some of the properties in the Reviews entity are also defined as associations to further entities therein, such as the reviewer property which points to the <A href="https://github.com/SAP/cloud-samples-itelo/blob/1.0.0/db/model.cds#L32-L33" target="_blank" rel="nofollow noopener noreferrer">Reviewers entity</A>, which has no properties of its own, but in a beautiful way inherits from some of the definitions (Person and BussinessObject) at the "foundation" layer:<BR />
<PRE class="language-sql"><CODE>entity Reviewers: fnd.Person, fnd.BusinessObject {<BR />
}</CODE></PRE><BR />
&nbsp;<BR />
<BR />
<STRONG>Wrapping up</STRONG><BR />
<BR />
That might be a lot to take in, in one sitting. It has become quite clear to me that the facilities afforded by the CDS language in the application programming model are very rich when it comes to reuse and extensions. Not only at the definition level, but also in the simplicity of how package based references are realised.<BR />
<BR />
While at first I thought it was a little odd to see the GitHub repository &amp; branch URLs, and indeed to realise that the package.json mechanism was fundamental to how artefacts in the application programming model are related, I've come to think that it's a natural way to do it, and a celebration of adopting an approach that's already out there in the world beyond our SAP ecosphere.<BR />
<BR />
What's more, we haven't even touched on how annotations work and what we are able to do in terms of reuse there too. But I'll leave that for another time, instead leaving you with the suggestion that reuse is indeed an important superpower of the application programming model, and demonstrably so. And keeping the core clean - well, the more extension and reuse we can achieve, the closer we can get to a cleaner core.<BR />
<BR />
&nbsp;<BR />
<BR />
This post was brought to you by a chilly Monday morning, by <A href="https://www.pactcoffee.com/coffees/asomuprisma" target="_blank" rel="nofollow noopener noreferrer">Pact Coffee's Asomuprisma</A> in my&nbsp;<SPAN id="autocomplete"><SPAN id="autocomplete-delimiter"><A href="https://anchor.fm/sap-community-podcast" target="_blank" rel="nofollow noopener noreferrer">SAP Coffee Corner Radio</A> mug, and by a <A href="https://open.spotify.com/station/user/qmacro/cluster/3JqLjzwr3h5mESenCGHsbr" target="_blank" rel="nofollow noopener noreferrer">Spotify mix</A> designed for concentration.</SPAN></SPAN><BR />
<BR />
&nbsp;<BR />
<BR />
Read more posts in this series here:&nbsp;<A href="https://blogs.sap.com/tag/mondaymorningthoughts/" target="_blank" rel="noopener noreferrer">Monday morning thoughts</A>.
---
Monday morning thoughts: dynamic language
technology-blog-sap
2018-10-22
https://community.sap.com/t5/technology-blogs-by-sap/monday-morning-thoughts-dynamic-language/ba-p/13383046
2018-10-22-monday-morning-thoughts-dynamic-language
<EM>In this post, I think about a particular function definition in JavaScript, and how it represents beauty and practicality in equal measure.</EM><BR />
<BR />
On Friday evening, I <A href="https://twitter.com/qmacro/status/1053322908813148165" target="_blank" rel="nofollow noopener noreferrer">tweeted</A>:<BR />
<BLOCKQUOTE>Heading to the woodstore with a beer and cigar. I was reminded of this little gem just now. Lovely.<BR />
<PRE><CODE>const push = (xs, x) =&gt; (_ =&gt; xs)(xs.push(x))</CODE></PRE><BR />
</BLOCKQUOTE><BR />
It was something I'd come across while idly perusing some source code, and I thought it was quite beautiful. I had a few responses to the tweet. In one of them, <SPAN class="mention-scrubbed">speri</SPAN>&nbsp;asked for an explanation, and then&nbsp;<SPAN class="mention-scrubbed">julie.plummer</SPAN>&nbsp;<A href="https://twitter.com/JuliePlummer20/status/1053526571745755137" target="_blank" rel="nofollow noopener noreferrer">suggested</A>&nbsp;I do it in the form of a post in this <A href="https://blogs.sap.com/tag/mondaymorningthoughts/" target="_blank" rel="noopener noreferrer">Monday morning thoughts series</A>. This was a great idea, as I was already on my way to the woodstore.<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2018/10/woodstore.jpg" height="282" width="501" /><BR />
<BR />
<EM>The woodstore, where I read and think about things (and enjoy a beer or two).</EM><BR />
<BR />
&nbsp;<BR />
<BR />
<STRONG>The context</STRONG><BR />
<BR />
The source code in question is a utility program, <A href="https://github.com/SAP/cloud-sample-spaceflight/blob/master/db/reuseTableData.js" target="_blank" rel="nofollow noopener noreferrer">reuseTableData.js</A>, part of the base repository <A href="https://github.com/SAP/cloud-sample-spaceflight" target="_blank" rel="nofollow noopener noreferrer">SAP/cloud-sample-spaceflight</A> which contains the base Core Data &amp; Services data model for the Application Programming Model sessions at SAP TechEd this year (see "<A href="https://blogs.sap.com/2018/10/10/application-programming-model-start-here/" target="_blank" rel="noopener noreferrer">Application Programming Model for SAP Cloud Platform - start here</A>") and written by&nbsp;<SPAN class="mention-scrubbed">christian.georgi</SPAN>&nbsp;&amp; my <A href="http://langram.org/" target="_blank" rel="nofollow noopener noreferrer">Language Ramblings</A> partner in crime&nbsp;<SPAN class="mention-scrubbed">chris.whealy</SPAN>.<BR />
<BR />
Why was I reading this? Well, out of curiosity, and a desire to learn more, of course. I have heard that programmers spend only around 10% of their time writing code, and 90% reading it. That sounds extreme, but I can imagine it being true in some circumstances. I'm guessing this covers not only reading code to work out what it does before extending or modifying it, but also reading code for pleasure, to learn how other people write.<BR />
<BR />
<IMG src="http://pipetree.com/qmacro/images/programmingjabber.jpg" alt="Programming Jabber" width="169" height="222" /><BR />
<BR />
I remember researching for my first book "<A href="http://shop.oreilly.com/product/9780596002022.do" target="_blank" rel="nofollow noopener noreferrer">Programming Jabber</A>" in the early 2000's. I spent many hours in the local coffee shop reading through the source code of the reference implementation of the Jabber (now <A href="https://xmpp.org/" target="_blank" rel="nofollow noopener noreferrer">XMPP</A>) protocol - the jabberd source code, written in C by <A href="https://en.wikipedia.org/wiki/Jeremie_Miller" target="_blank" rel="nofollow noopener noreferrer">Jeremie Miller</A> and others. I learned a lot from it, and I enjoy reading other people's code now and then - not least to see how each author's character gently but inevitably leaks through into the code.<BR />
<BR />
So back to the program in question. To add a little context, here's the <A href="https://github.com/SAP/cloud-sample-spaceflight/blob/c3c152e192b1d3dcfea23242681f3521d32b22f2/db/reuseTableData.js#L36-L37" target="_blank" rel="nofollow noopener noreferrer">line of code</A> again, with the comment that accompanies it:<BR />
<PRE class="language-javascript"><CODE>// A useful version of Array push that returns the modified array <BR />
// rather than the index of the newly added item...<BR />
const push = (arr, newEl) =&gt; (_ =&gt; arr)(arr.push(newEl))</CODE></PRE><BR />
In JavaScript, Array is a global object used to represent lists, and has a number of built-in functions, or methods, that operate on Array object instances.<BR />
<BR />
For example, you can create an array and then use the Array object's join() function like this:<BR />
<PRE class="language-javascript"><CODE>&gt; const colours = ['red', 'green', 'blue']<BR />
undefined<BR />
&gt; colours.join(' and ')<BR />
'red and green and blue'<BR />
&gt; </CODE></PRE><BR />
(Code samples here are from Chrome console sessions, using <A href="https://bytearcher.com/articles/es6-vs-es2015-name/" target="_blank" rel="nofollow noopener noreferrer">ES6</A>).<BR />
<BR />
Another built-in function for the Array object is push(), one of a group of four functions I mentally think about together as a family, as they do very similar things:<BR />
<PRE><CODE>  shift() &lt;---+           +---&gt; pop()<BR />
             &nbsp;|           |<BR />
              |           |<BR />
             [1, 2, 3, 4, 5]<BR />
 &nbsp;            ^           ^<BR />
              |           |<BR />
unshift() ----+           +---- push()</CODE></PRE><BR />
The functions shift() and unshift() operate on the front of an array, removing or adding elements respectively. The functions pop() and push() operate on the end of an array, removing or adding elements respectively.<BR />
<BR />
There are also other functions for manipulating elements in other places in an array, functions such as splice() and slice(), but what we want to concentrate on right now is push() and its sibling unshift(). Both add one or more elements to the array. And in both cases, what's returned is the length of the new array. For example:<BR />
<PRE class="language-javascript"><CODE>&gt; const colours = ['red', 'green', 'blue']<BR />
undefined<BR />
&gt; colours.push('yellow')<BR />
4<BR />
&gt; </CODE></PRE><BR />
This is not unreasonable, but it's also less useful than you might think.<BR />
<BR />
&nbsp;<BR />
<BR />
<STRONG>Practicality</STRONG><BR />
<BR />
In many situations, you'll want to create something - an array, a map, another higher level object, and manipulate it. One approach to this which feels to many quite natural is to use method chaining, which is effectively like saying: "do this, then that, then the other".<BR />
<BR />
This is common in UI5, where for example standard controls, such as the Button control in the sap.m library has methods, many of which return the Button instance upon which they're operating, explicitly to allow method chaining (see for example <A href="https://ui5.sap.com/#/api/sap.m.Button/methods/attachPress" target="_blank" rel="noopener noreferrer">attachPress</A>). So we can end up with something like this, where four methods are "chained" together:<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2018/10/Screenshot-2018-10-22-at-08.36.39.png" /><BR />
<BR />
In a similar way, you might want to create a list of elements, rearrange it by some means, add something to the end of it, and then map over each of the final collection of elements to end up with what you really need. Like this, for example:<BR />
<PRE class="language-javascript"><CODE>['red', 'white', 'blue']<BR />
	.push('orange')<BR />
	.sort()<BR />
	.map(x =&gt; x.toUpperCase())</CODE></PRE><BR />
You'd hope to get this:<BR />
<PRE class="language-javascript"><CODE>["BLUE", "ORANGE", "RED", "WHITE"] </CODE></PRE><BR />
However, you'd end up with this:<BR />
<PRE class="language-javascript"><CODE>Uncaught TypeError: ["red","white","blue"].push(...).sort is not a function<BR />
    at &lt;anonymous&gt;:3:3</CODE></PRE><BR />
This is because the push() function returns the new length of the array (4) rather than the array itself. Not ideal.<BR />
<BR />
What's perhaps worse is that it makes it cumbersome to employ higher level functions like reduce(), in combination with the shorter ES6 based <A href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions" target="_blank" rel="nofollow noopener noreferrer">arrow function</A> style of function definition. With arrow functions, the function definition itself is much shorter and (without curly braces) there's an implicit return of whatever is evaluated as a result of that function's execution.<BR />
<BR />
If you're not familiar with using reduce() and taking advantage of the new ES6 arrow function style, here's a contrived example:<BR />
<PRE class="language-javascript"><CODE>&gt; [1,2,3,4,5].reduce((a, x) =&gt; a * x, 1)<BR />
120</CODE></PRE><BR />
Here, we multiply a list of numbers, and take advantage of the fact that the function definition being passed to reduce:<BR />
<PRE class="language-javascript"><CODE>(a, x) =&gt; a * x</CODE></PRE><BR />
<EM>implicitly returns</EM>&nbsp;the result of the expression a * x, to be fed into the next element iteration until the list of elements is exhausted.<BR />
<BR />
In other words, if you want to use Array's push() function as the function definition passed in a reduce() scenario, you can't, or at least, what it evaluates to (the new length of the array) is almost certainly not what you want fed into the next iteration - you want the new (modified) array*.<BR />
<BR />
*the keen readers amongst you will guess that I'm currently slightly uncomfortable at completely ignoring the fact that push() is mutating the array, which is generally a Bad Thing(tm) - but I'm ignoring it deliberately, as that's a whole other subject for another time.<BR />
<BR />
If you read further on in the <A href="https://github.com/SAP/cloud-sample-spaceflight/blob/master/db/reuseTableData.js" target="_blank" rel="nofollow noopener noreferrer">reuseTableData.js</A>&nbsp;program, you'll see that there's a reduce() in <A href="https://github.com/SAP/cloud-sample-spaceflight/blob/c3c152e192b1d3dcfea23242681f3521d32b22f2/db/reuseTableData.js#L73" target="_blank" rel="nofollow noopener noreferrer">line 73</A> function being employed to gather table names together:<BR />
<PRE class="language-javascript"><CODE>var tableNames = _getTableDataSync(path.join('db/src/csv')).<BR />
  reduce(<BR />
    (accOuter, filePath) =&gt;<BR />
      JSON.<BR />
        parse(fs.readFileSync(filePath)).<BR />
        imports.<BR />
        reduce((accInner, entry) =&gt; push(accInner, entry.target_table), accOuter)<BR />
  , [])</CODE></PRE><BR />
This use of<BR />
<PRE class="language-javascript"><CODE>push(accInner, entry.target_table)</CODE></PRE><BR />
is not the standard push() function from the Array object. Rather, it's our push() function defined earlier, the subject of this post:<BR />
<PRE class="language-javascript"><CODE>const push = (arr, newEl) =&gt; (_ =&gt; arr)(arr.push(newEl))</CODE></PRE><BR />
Now we understand the context of where it's used, and why the standard push() function is no good, let's dig in to this definition to see how it works, and why it can be used.<BR />
<BR />
&nbsp;<BR />
<BR />
<STRONG>Beauty</STRONG><BR />
<BR />
So first off, we can see it's a function definition using the fat arrow (=&gt;) syntax from ES6. We're now already somewhat familiar with that, but it still looks a little odd, with that strange looking underscore, and what initially looks like a slightly uncomfortable number of brackets.<BR />
<BR />
Remember that contrived example using a reduce() function above? You can see that the function passed to reduce() is one with two parameters - the accumulator 'a', and 'x' to represent the elements that are passed in, one iteration at a time. So also here we have a function definition with two parameters, again, an accumulator 'arr' (array) and 'newEl' representing the elements passed to the function as reduce's list mechanics iterate over the array, one element at a time.<BR />
<BR />
So what's the actual function definition here? Well, it's this bit:<BR />
<PRE class="language-javascript"><CODE>(_ =&gt; arr)(arr.push(newEl))</CODE></PRE><BR />
The first part, (_ =&gt; arr) is yet another function definition. What the heck does it do?<BR />
<BR />
Well, it takes one parameter, and promptly ignores it, simply returning the value of 'arr'. The use of the underscore for this ignored parameter is convention - it tells the reader "we're expecting a parameter to be passed to this function, but we're not actually interested in it". (It's often used where there's more than one parameter in a function definition signature, and the intention is to ignore one or more of them.)<BR />
<BR />
The body of this function is simply 'arr' which returns whatever value 'arr' has. Which is what?<BR />
<BR />
To answer that, we need to look at the other part of the definition. This is the 'arr.push(newEl)' bit, but we can't and shouldn't ignore all those brackets. Breaking those brackets down, we have a first pair surrounding '_ =&gt; arr', a second pair surrounding 'arr.push(newEl)' and the pair around 'newEl'.<BR />
<BR />
We can be happy enough with this last pair, it's just a standard invocation of the push() function, where the value of 'newEl' is the new element being pushed onto the end of 'arr'.<BR />
<BR />
So what about the other two pairs of brackets? Well, in JavaScript, you can define an anonymous function on the fly, and call it immediately. When you do this, you wrap the anonymous function definition in brackets:<BR />
<PRE class="language-javascript"><CODE>(_ =&gt; arr)</CODE></PRE><BR />
and then call it, passing any arguments in brackets, as normal. In this case, there's one argument to pass (to match up with the single '_' parameter the function is expecting). This argument is the result of the evaluation of this:<BR />
<PRE class="language-javascript"><CODE>arr.push(newEl)</CODE></PRE><BR />
which, as we know, will be the new length of the 'arr' array. But by the time this is evaluated, the 'arr' array will already have had 'newEl' added as a new last element, and so we don't have to worry about the value returned from this (the new length), as we're going to capture it in the '_' parameter of '(_ =&gt; arr)' and ignore it anyway.&nbsp;The sole purpose of the '(_ =&gt; arr)' function is to return the value of 'arr' -- which now has the value of 'newEl' on the end.<BR />
<BR />
The upshot of this definition of a custom push function is that we can use it to push an element onto the end of an array, and have it return the infinitely more useful modified array, rather than the almost useless new length of the array. We can then employ it in higher order function invocations such as those with reduce().<BR />
<BR />
Beyond the ability to define anonymous functions (to use in higher order functions) and generally program in this dynamic way, the mechanic that allows this whole idea to work is called a <A href="https://en.wikipedia.org/wiki/Closure_(computer_programming)" target="_blank" rel="nofollow noopener noreferrer">closure</A>.<BR />
<PRE class="language-javascript"><CODE>const push = (arr, newEl) =&gt; (_ =&gt; arr)(arr.push(newEl))<BR />
</CODE></PRE><BR />
The value of 'arr', initially passed to the outer function definition as the accumulator, by reduce's list mechanics, is available on the right hand side of the main fat arrow, both in the inner function definition as well as the on-the-fly call to push that is passed as the argument to that inner function.<BR />
<BR />
Dynamic programming in general, and this style of extension in particular, is a wonderful thing, and I consider this particular definition of push to be quite beautiful.<BR />
<BR />
There are alternatives, of course - my friend <A href="https://twitter.com/martinrue" target="_blank" rel="nofollow noopener noreferrer">Martin Rue</A>&nbsp;<A href="https://twitter.com/martinrue/status/1053332526285144064" target="_blank" rel="nofollow noopener noreferrer">suggested</A> this:<BR />
<PRE class="language-javascript"><CODE>const push = (xs, x) =&gt; xs.push(x) &amp;&amp; xs</CODE></PRE><BR />
which achieves the same effect by relying on the fact that the last value evaluated in the execution of a function (again, without curly braces) is the value that is returned. In this case, that is simply 'xs'*. Also very elegant.<BR />
<BR />
*I note that Martin used 'xs' to represent a list of 'x' elements, which is a rather nice meme, or at least an idea, that I picked up from various functional programming treatises and used, for example, by <A href="https://en.wikipedia.org/wiki/Erik_Meijer_(computer_scientist)" target="_blank" rel="nofollow noopener noreferrer">Erik Meijer</A>&nbsp;in his wonderful series on Haskell and F#. Perhaps more on that another time.<BR />
<BR />
So, here's a hat tip to Chris Whealy who I'm guessing had some influence on the distinctive style of this reuseTableData.js code. I know Chris and have started to recognise his 'signature' in code. And I'll leave you with a recommendation to study other people's code every now and then. It can be a lot of fun, and educational to boot. Happy reading!<BR />
<BR />
&nbsp;<BR />
<BR />
This post was brought to you by a cold Monday morning, before setting off to the airport for Barcelona and the European instance of SAP TechEd. If you're there, stop by the Developer Garage for a chat about this or anything else!<BR />
<BR />
&nbsp;<BR />
<BR />
Read more posts in this series here:&nbsp;<A href="https://blogs.sap.com/tag/mondaymorningthoughts/" target="_blank" rel="noopener noreferrer">Monday morning thoughts</A>.
---
Set up VS Code on Chrome OS for local Application Programming Model development
technology-blog-sap
2018-10-16
https://community.sap.com/t5/technology-blogs-by-sap/set-up-vs-code-on-chrome-os-for-local-application-programming-model/ba-p/13377868
2018-10-16-set-up-vs-code-on-chrome-os-for-local-application-programming-model
<EM>In this post I walk through the process I used to set up a development environment for CAP on my Chromebook.</EM><BR />
<BR />
(See the <A href="#updates" target="_blank" rel="nofollow noopener noreferrer">Updates</A> section end of this post for a couple of notes on things that have changed since this content was published.)<BR />
<BR />
I'm a big fan of Chrome OS, it's my primary choice for computing for many reasons including high security, consistency, efficiency and practicality. I have a lot of devices running it - a Google Pixelbook as well as an older Samsung Chromebook, an ASUS Chromebit and a shiny new ASUS Chromebox - the N005U. I even have a version of Chrome OS running on my old iMac 24", via Neverware's <A href="https://www.neverware.com/" target="_blank" rel="nofollow noopener noreferrer">CloudReady</A>&nbsp;system.<BR />
<BR />
The advent of beta support for Linux on Chrome OS is very interesting and an opportunity for me to try out running Visual Studio Code (VSCode) locally. I wasn't disappointed.<BR />
<BR />
I'm also very interested in the Application Programming Model for SAP Cloud Platform, and its agnostic approach to development environments and deployment targets &amp; runtimes. I installed the cds tool and the extension for VSCode to get a feel for local development with the model on Chrome OS. This post is a brief account of the steps I took, in case you want to do that also.<BR />
<BR />
&nbsp;<BR />
<BR />
<STRONG>Turning on Linux support</STRONG><BR />
<BR />
Initially only in the Chrome OS beta channel, the support for Linux, at least on my Pixelbook and Chromebox is now also available on the stable channel. That said, I use the beta channel on both of these devices, in case you're wondering.<BR />
<BR />
Turning it on is simply a matter of a single click in the settings, whereupon a Linux container will be downloaded and started up:<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2018/10/Screenshot-2018-10-16-at-15.22.18.png" /><BR />
<BR />
&nbsp;<BR />
<BR />
A short while later, a lovely calming terminal appears, the sign for me of a real operating system. This signals the successful completion of the process:<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2018/10/Screenshot-2018-10-16-at-17.23.16.png" /><BR />
<BR />
&nbsp;<BR />
<BR />
<STRONG>Installing VS Code and CDS Language Support</STRONG><BR />
<BR />
(See the end of this post for an update on this.)<BR />
<BR />
VS Code is available for different platforms from the "<A href="https://code.visualstudio.com/download" target="_blank" rel="nofollow noopener noreferrer">Download Visual Studio Code</A>" page. As the image is Debian GNU/Linux 9 (you can see this in the /etc/issue file), I chose the 64 bit .deb file. At the time of writing, this is&nbsp;code_1.28.1-1539281690_amd64.deb reflecting VS Code version 1.28.<BR />
<BR />
While I was in download mode, I went to the <A href="https://tools.hana.ondemand.com/#cloud" target="_blank" rel="nofollow noopener noreferrer">SAP Development Tools for Cloud</A> download page and downloaded the official CDS Language Support feature for VS Code:<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2018/10/Screenshot-2018-10-16-at-17.34.56.png" /><BR />
<BR />
Note that as the Linux support is via a container, you have to transfer downloaded files to it. The File Manager makes this easy. I just dragged the two downloaded files into the "Linux files" folder that represents the home directory of "qmacro" (my Google ID) in the terminal above:<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2018/10/Screenshot-2018-10-16-at-15.51.41.png" height="383" width="485" /><BR />
<BR />
&nbsp;<BR />
<BR />
You can install Linux packages like the .deb file very easily, by using the file's context menu item "Install with Linux (Beta)". I did this for the VS Code package:<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2018/10/Screenshot-2018-10-16-at-15.52.15.png" height="434" width="494" /><BR />
<BR />
and in a short time received a notification that the install had completed:<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2018/10/Screenshot-2018-10-16-at-15.53.45.png" /><BR />
<BR />
I then had a new icon in the tray:<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2018/10/Screenshot-2018-10-16-at-15.54.01.png" height="173" width="507" /><BR />
<BR />
I started VS Code up and used the instructions on the SAP Development Tools for Cloud download page (see above screenshot - basically following "step 3") to install the CDS Language Support extension directly from the VSIX file.<BR />
<BR />
So far so good!<BR />
<BR />
&nbsp;<BR />
<BR />
<STRONG>Install other extensions</STRONG><BR />
<BR />
I installed a couple of other VSCode extensions, but these aren't essential. I'm a big vim user, so I use the Vim extension for VSCode, and I also installed the SQLite extension for comfortable in-IDE browsing of SQLite databases.<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2018/10/Screenshot-2018-10-16-at-19.49.32.png" /><BR />
<BR />
&nbsp;<BR />
<BR />
<STRONG>Installing Node.js</STRONG><BR />
<BR />
Next I needed to install Node.js. There are many ways to do this, but I find the <A href="https://github.com/creationix/nvm" target="_blank" rel="nofollow noopener noreferrer">Node Version Manager</A> (nvm) to be very useful, and it has a nice side effect of preventing you from getting into a tangle with root privilege requirements - everything you do in Node.js installations via nvm should *not* require the use of root (sudo) so you can't shoot yourself in the foot.<BR />
<BR />
In the Linux terminal, I used the curl-based installation approach described on the nvm GitHub repository homepage:<BR />
<PRE><CODE>curl -o- <A href="https://raw.githubusercontent.com/creationix/nvm/v0.33.11/install.sh" target="test_blank" rel="nofollow noopener noreferrer">https://raw.githubusercontent.com/creationix/nvm/v0.33.11/install.sh</A> <SPAN class="pl-k">|</SPAN> bash</CODE></PRE><BR />
and after a few seconds I was ready to use nvm to install version 8 of Node.js, which I did like this:<BR />
<PRE><CODE>nvm install 8</CODE></PRE><BR />
Simple! That gave me node version 8.12.0 and npm version 6.4.1.<BR />
<BR />
&nbsp;<BR />
<BR />
<STRONG>Installing the cds tool</STRONG><BR />
<BR />
(See the end of this post for an update on this.)<BR />
<BR />
CDS is at the heart of the Application Programming Model and there's command line support in the form of a tool called 'cds' in the '@sap' npm namespace, available from the SAP NPM registry. Read more about this registry in this post by&nbsp;<SPAN class="mention-scrubbed">sven.kohlhaas</SPAN>&nbsp;"<A href="https://blogs.sap.com/2017/05/16/sap-npm-registry-launched-making-the-lives-of-node.js-developers-easier/" target="_blank" rel="noopener noreferrer">SAP NPM Registry launched: Making the lives of Node.js developers easier</A>".<BR />
<BR />
To make use of the '@sap' namespaced modules, it's necessary to tell npm about this registry:<BR />
<PRE><CODE>npm config set&nbsp;@sap:registry <A href="https://npm.sap.com" target="test_blank" rel="noopener noreferrer">https://npm.sap.com</A></CODE></PRE><BR />
Now we can install the cds tool. I did it globally, rather than for a specific Node.js project. Note that because of the nice side effect of nvm mentioned earlier, globally still means within my user space:<BR />
<PRE><CODE>npm i -g&nbsp;@sap/cds</CODE></PRE><BR />
That's the cds tool installed.<BR />
<BR />
If you're following the SAP TechEd related set of exercises that I mentioned in "<A href="https://blogs.sap.com/2018/10/10/application-programming-model-start-here/" target="_blank" rel="noopener noreferrer">Application Programming Model for SAP Cloud Platform â start here</A>", then you probably also want to explicitly install the cds generator too:<BR />
<PRE><CODE>npm i -g @sap/generator-cds</CODE></PRE><BR />
&nbsp;<BR />
<BR />
<STRONG>All set!</STRONG><BR />
<BR />
At this point, I'm all set, and if you've been following along, you are too!<BR />
<BR />
We've got a lovely local development environment for the Application Programming Model, on a proper operating system, with great tools and a competent IDE with rich support for the CDS work we'll be doing.<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2018/10/DpppwFfW0AAq-MU.jpg" /><BR />
<BR />
If you're wondering what to do next, you might want to try the exercises in the GitHub repository "<A href="https://github.com/SAP/cloud-sample-spaceflight-node" target="_blank" rel="nofollow noopener noreferrer">SAP/cloud-sample-spaceflight-node</A>" - happy hacking!<BR />
<BR />
&nbsp;<BR />
<BR />
<STRONG><A name="updates" target="_blank"></A>Updates</STRONG><BR />
<BR />
2020-09-28 Since the publication of this post, a couple of things have changed. First, you can get the VS Code Extension for CAP directly from the Visual Studio Marketplace, see the <A href="https://cap.cloud.sap/docs/releases/july20" target="_blank" rel="nofollow noopener noreferrer">July 2020 CAP Release Notes</A> for details. Also, the Node.js packages for CAP are now in the public NPM registry, and the main wrapper package for development is <A href="https://www.npmjs.com/search?q=sap%2Fcds-dk" target="_blank" rel="nofollow noopener noreferrer">@sap/cds-dk</A>. This means that to install CAP for Node.js globally, all you need to do is: <CODE>run npm i -g <a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a>/cds-dk</CODE>.
---
Monday morning thoughts: big school and community
technology-blog-sap
2018-10-15
https://community.sap.com/t5/technology-blogs-by-sap/monday-morning-thoughts-big-school-and-community/ba-p/13374396
2018-10-15-monday-morning-thoughts-big-school-and-community
<EM>In this post, I think about my experience going from primary school to secondary school - "big school", how that parallels our collective move from on-prem to the cloud, and how the community is more important than ever in this transition.</EM><BR />
<BR />
My first school, Norman House in New Moston, Manchester, was a small place, for pupils aged 4 to 11. We had fixed desks where we kept all our exercise books and pencils, stayed in the same classroom for each year, played in a small playground with a huge oak tree, and got dropped off and picked up by our parents each morning and afternoon in a regular and fixed routine. We went to the swimming baths once a week, following the same route along the pavement hand-in-hand two by two.<BR />
<BR />
After a short time the school became a very comfortable place, everything was familiar, even down to the daily delivery of small bottles of milk for us to consume. We learned the basics early on -- reading, writing, Maths, English -- and improved upon them as we progressed through the years.<BR />
<BR />
&nbsp;<BR />
<BR />
<STRONG>Moving to big school</STRONG><BR />
<BR />
Moving on from that school to "big school", William Hulme's Grammar School, in my case, was a whole new experience. Rather than be shuttled back and forth in the car, I, like many of the other boys, was to use public transport. The school was in Whalley Range, and as we lived at the time in Stalybridge, it was quite a journey.<BR />
<BR />
One weekend just before the start of the first term of the first year, my mum took me on the bus route, so I could learn where I was going. The route consisted of a 10 minute walk from the house, followed by three buses - one into Stalybridge bus station, one from there to the centre of Manchester (Piccadilly bus station), and one from there to the school. The entire journey took between an hour and a half and two hours, each way.<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2018/10/Screenshot-2018-10-15-at-07.31.38.png" height="185" width="602" /><BR />
<BR />
<EM>William Hulme's Grammar School, courtesy of Google Maps satellite view</EM><BR />
<BR />
That's where the excitement and trepidation started. Not because the journey was so long, but because all of a sudden I was in the real world where variations and different options presented themselves. There were different buses that I could take for any given segment of the journey. Some took slightly different routes but got me to the intermediate or end destinations with advantages (less crowded, more frequent) and disadvantages (slightly longer routes). I had choices to make as soon as I closed the front door of the house in the morning.<BR />
<BR />
And the choices and variety exploded at school. No longer did we learn just the basics. As well as Maths and English there was also Geography, History, French, Latin, Physics, Chemistry, Biology and eventually Ancient Greek and Ancient History. Some subjects were mandatory, others optional. The timetable for each class and stream was a huge affair, an A0-sized sheet with hieroglyphic-like legends depicting the schedule of each class's periods over the day. The school was huge and there were many buildings and areas serving different purposes*. It was easy to get lost, or find yourself in a place where you ought not to be.<BR />
<BR />
*there was even a computer room with terminals available (and this was in the 1970's) - see this O'Reilly Radar interview:&nbsp;<A href="http://radar.oreilly.com/2005/11/burn-in-7-dj-adams.html" target="_blank" rel="nofollow noopener noreferrer">Burn In 7: DJ Adams</A>&nbsp;for more info on that.<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2018/10/Screenshot-2018-10-15-at-07.42.24.png" height="354" width="480" /><BR />
<BR />
<EM>A grainy picture from a "Hulmeian" school magazine I've kept from 1979, showing the terminal room with a Systime terminal in the foreground and a paper terminal (yes, a printer head and a sprocket-fed continuous stream of paper instead of a screen) in the background.</EM><BR />
<BR />
William Hulme's was a wonderfully complex environment, as different and varied as Norman House was fixed and rigid. In this complex environment we could start to forge our own paths. As we progressed through the years, some opted to study modern languages, others science. Each pupil did what he needed or wanted to do according to what he had to learn and in which direction he was going. (I found myself playing a lot of lacrosse and rugby, studying dead languages, and spending all my free time in the terminal room. But that's a story for another time.) There were more opportunities for failure, but there were also many different paths to success.<BR />
<BR />
&nbsp;<BR />
<BR />
<STRONG>Moving to the cloud</STRONG><BR />
<BR />
The move from Norman House to William Hulme's reminds me a little of where we are in the SAP ecosphere, with moves from on-prem to the cloud.<BR />
<BR />
Norman House is the regular, rigid, predictable, dare I say "safe" on-prem environment, where we can walk down to the computer facility and see round all sides of the machines that sit there and hum. The systems themselves are complex, yes, but follow a definitely regular and predictable pattern. To a large extent, ABAP is the reading &amp; writing, Maths and English studied in primary school. That's not to say it's anything simplistic - far from it. But for many it's the dominant of two languages (the other being Java), with which solutions are built, using the familar NetWeaver design time and run time architecture. We know where to log on, where to develop, and our tools are fixed. We know how to move our solutions through the landscape tiers, where and how they run, and how they're monitored.<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2018/10/Screenshot-2018-10-15-at-07.34.32.png" height="361" width="542" /><BR />
<BR />
<EM>From&nbsp;<A href="https://cloudplatform.sap.com/index.html" target="_blank" rel="noopener noreferrer">https://cloudplatform.sap.com/index.html</A>&nbsp;</EM><BR />
<BR />
&nbsp;<BR />
<BR />
But we also know that there's a world outside that's just waiting for us to explore, a world described by older siblings as they recount tales from big school when they come home in the evening, tales that impart a sense of wonder, confusion, and excitement in the young mind that's only experienced the fixed and regular environment of primary school.<BR />
<BR />
&nbsp;<BR />
<BR />
<STRONG>A cloud-first approach</STRONG><BR />
<BR />
There are many reasons to move to the cloud, to embrace a cloud-first approach to computing in general and to building business solutions in particular, and these reasons have been well documented elsewhere so I won't go into them here. But moving to the cloud can have that same degree of mystery, of wonder, excitement and also of bewilderment. There are choices. Not only in how to get to the cloud, but also in what to do when you're there. Languages. Environments. Models. There are choices in what you build, and how you build. Hybrid integration and orchestration, cloud native architecture and development, container-oriented computing, microservices, 12-factor apps, languages galore, and differing (and complementary) approaches to designing and implementing an enterprise wide set of services.<BR />
<BR />
Moreover, there's the world outside of SAP too. No longer are there fixed borders; rather, the computing worlds run together and overlap like watercolours on a canvas, and influence each other like never before. We're buying new studs for our rugby boots from a shop in Manchester that's also selling football kits to other folks who don't have anything to do with our school. We're building new SAP solutions in the cloud using development tools that the rest of the world are also using.<BR />
<BR />
&nbsp;<BR />
<BR />
<STRONG>The importance of the SAP Community</STRONG><BR />
<BR />
There's more to learn, more to share, and more possibilities than ever before. I'm reminded of what&nbsp;<SPAN class="mention-scrubbed">graham.robinson</SPAN>&nbsp;and <A href="http://www.jonerp.com/" target="_blank" rel="nofollow noopener noreferrer">Jon Reed</A>&nbsp;talked about in the recent SAP and Enterprise Trends podcast episode "<A href="https://player.fm/series/sap-and-enterprise-trends-podcasts-from-jon-reed-jonerp-of-diginomicacom/sap-teched-vegas-in-review-abap-on-scp-serverless-erp-community-and-more-with-grahamrobbo" target="_blank" rel="nofollow noopener noreferrer">SAP TechEd Vegas in Review - ABAP on SCP, serverless ERP, community and more with @grahamrobbo</A>". Early on in this episode they think about the SAP Community, how it has undergone changes over the years, and how this year in particular, at the Las Vegas edition of SAP TechEd 2018 it had a&nbsp; prominent presence with the App Space and the Developer Garage, where folks could come by to chat and learn. More than that, though - Jon says:<BR />
<BR />
<EM>"A healthy community is the core of what a modern software company needs to succeed [...] it's not a nice-to-have at all."</EM><BR />
<BR />
This resonates very well with me. Not only because I'm proudly part of&nbsp;<SPAN class="mention-scrubbed">thomas.grassl</SPAN>'s team that is behind the Developer Garage and the tutorial missions in the App Space, but also because I believe that the community is the place that will keep us sane, keep us on the right tracks and help us support and learn from each other. That community, like my fellow first year pupils at William Hulme's, is full of folks who are in the same situation, and who implicitly - and sometime explicitly - help each other to survive and grow in an initially unfamiliar and sometimes perplexing environment.<BR />
<BR />
When I put together one of the <A href="https://blogs.sap.com/2005/07/04/the-sap-developer-community-10-years-ago/" target="_blank" rel="noopener noreferrer">first mailing lists</A> for SAP folks in the early 1990's, when I got involved in co-creating the SAP Developer Network (what has become the SAP Community today) in the early 2000's, I had a feeling that the communities that would form would likely be key to a greater understanding and sharing of knowledge. With the SAP Community today we have a rebooted environment with the great <SPAN class="mention-scrubbed">craig.cmehil</SPAN>&nbsp;at the helm, and a wide array of offerings, including my favourite which is the <A href="https://developers.sap.com" target="_blank" rel="noopener noreferrer">Developer Centre</A> with a whole heap of tutorials, groups and missions (with progress tracking and a great new look and feel), alongside developer resources and downloads.<BR />
<BR />
There's still work to do in the reboot, but we're going in the right direction for sure. The main ingredient for success, however, is not any particular community website or feature. It's you. Us. We're all travelling the route to school together, from different locations, but with similar thoughts and wonder, and we're converging as we walk up the path in the morning, through the rugby and lacrosse pitches to the school buildings to learn &amp; master new subjects, and to grow together.<BR />
<BR />
&nbsp;<BR />
<BR />
This post was brought to you by the clackety clack of <A href="https://www.reddit.com/r/MechanicalKeyboards/comments/9n9olz/delurking_with_a_race_3/" target="_blank" rel="nofollow noopener noreferrer">my new Vortex Race 3</A> mechanical keyboard (with Cherry MX Blue switches, oh yes) and <A href="https://www.pactcoffee.com/coffees/el-silencio-espresso" target="_blank" rel="nofollow noopener noreferrer">Pact Coffee's El Silencio Espresso</A>, in my <A href="https://anchor.fm/sap-community-podcast" target="_blank" rel="nofollow noopener noreferrer">SAP Coffee Corner Radio</A> mug. Have a good week!<BR />
<BR />
&nbsp;<BR />
<BR />
Read more posts in this series here:&nbsp;<A href="https://blogs.sap.com/tag/mondaymorningthoughts/" target="_blank" rel="noopener noreferrer">Monday morning thoughts</A>.<BR />
<BR />
&nbsp;
---
SAP Cloud Application Programming Model (CAP) - start here
technology-blog-sap
2018-10-10
https://community.sap.com/t5/technology-blogs-by-sap/sap-cloud-application-programming-model-cap-start-here/ba-p/13370128
2018-10-10-sap-cloud-application-programming-model-cap-start-here
<EM>Note: While this blog post was originally published in 2018, it's been <STRONG>updated for 2020 and now also for 2021</STRONG>&nbsp;thanks to great help and input from the excellent <SPAN class="mention-scrubbed">iwona.hahn</SPAN>. Take a few mins to have a fresh look through, as you'll find that many items have been updated. And don't forget to "<A href="https://hitchhikers.fandom.com/wiki/Share_and_Enjoy" target="_blank" rel="nofollow noopener noreferrer">share &amp; enjoy</A>"!</EM><BR />
<BR />
There's been a lot of activity and interest around CAP for SAP Business Technology Platform (BTP), not least during the last couple of years of SAP TechEd events, and also as it <A href="https://blogs.sap.com/2019/11/06/cap-is-important-because-its-not-important/" target="_blank" rel="noopener noreferrer">coalesces into a fundamental technology in the cloud development stack</A>. I thought it would be useful to provide an overview of the key resources, for folks who are wondering how to get started.<BR />
<BR />
Briefly, CAP for SAP BTP is a framework of tools, languages and libraries, some from SAP, some open source. With these tools, languages and libraries you can efficiently and rapidly build enterprise services and applications in a full-stack development approach. It guides you along a golden path of best practices, allowing you to focus on your domain while relieving you from tedious technical tasks.<BR />
<BR />
You can find core documentation for CAP in <A href="https://cap.cloud.sap/docs/" target="_blank" rel="nofollow noopener noreferrer">capire</A>.<BR />
<P style="overflow: hidden;margin-bottom: 0px"><IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2018/10/Screen-Shot-2020-07-01-at-09.27.28.png" /></P><BR />
Begin with the <A href="https://cap.cloud.sap/docs/get-started/" target="_blank" rel="nofollow noopener noreferrer">Getting Started</A> section, as that will take you through the basics as well as detailing some best practices and reference material.<BR />
<BR />
You can also find what's new in the new <A href="https://cap.cloud.sap/docs/releases/" target="_blank" rel="nofollow noopener noreferrer">Release Notes</A> section.<BR />
<BR />
<STRONG>SAP Developer Center&nbsp;</STRONG><BR />
<BR />
In the <A href="https://developers.sap.com/index.html" target="_blank" rel="noopener noreferrer">SAP Developer Center</A>, there are missions, tutorial groups and tutorials.<BR />
<BR />
In the beginner-level mission "<A href="https://developers.sap.com/mission.scp-3-odata.html" target="_blank" rel="noopener noreferrer">Take a Deep Dive into OData</A>" there's a tutorial group "<A href="https://developers.sap.com/group.scp-8-odata-service.html" target="_blank" rel="noopener noreferrer">Build Your First OData-based Backend Service</A>" which gives you a high level taster.<BR />
<BR />
<A href="https://developers.sap.com/mission.scp-3-odata.html" target="_blank" rel="noopener noreferrer"><IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2018/10/Screen-Shot-2018-10-10-at-16.26.31.png" height="233" width="351" /></A><BR />
<BR />
If you're feeling more adventurous, or more hungry for knowledge and insight, there are a couple of complete missions available too:<BR />
<P style="overflow: hidden;margin-bottom: 0px"><IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2018/10/Screen-Shot-2020-07-01-at-09.29.24.png" height="252" width="335" /></P><BR />
The mission <A href="https://developers.sap.com/mission.cp-starter-extensions-cap.html" target="_blank" rel="noopener noreferrer">Build a Business Application Using CAP for Node.js</A> guides you through developing a business application using CAP. Start on your local environment and deploy to the cloud.<BR />
<BR />
If you're of the Java persuasion, there's a similar mission you may like - <A href="https://developers.sap.com/mission.cap-java-app.html" target="_blank" rel="noopener noreferrer">Build a Business Application Using CAP for Java</A>:<BR />
<P style="overflow: hidden;margin-bottom: 0px"><IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2018/10/Screen-Shot-2020-07-01-at-09.30.29.png" height="252" width="333" /></P><BR />
You can also find other tutorials tagged with "SAP Cloud Application Programming Model" via this URL:<BR />
<BR />
<A href="https://developers.sap.com/tutorial-navigator.html?tag=software-product-function:sap-cloud-application-programming-model" target="_blank" rel="noopener noreferrer">https://developers.sap.com/tutorial-navigator.html?tag=software-product-function:sap-cloud-application-programming-model</A><BR />
<BR />
and you'll be presented with appropriately filtered content like this:<BR />
<P style="overflow: hidden;margin-bottom: 0px"><IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2018/10/screenshot-2021-02-16-at-07.45.29.png" /></P><BR />
&nbsp;<BR />
<BR />
<STRONG>SAP Community</STRONG><BR />
<BR />
Here on the SAP Community you'll find an array of posts talking directly or indirectly about CAP. You can find the complete set using the tag:<BR />
<BR />
<A href="https://blogs.sap.com/tags/9f13aee1-834c-4105-8e43-ee442775e5ce/" target="_blank" rel="noopener noreferrer">SAP Cloud Application Programming Model</A><BR />
<BR />
Daniel's post "<A href="https://blogs.sap.com/2018/06/05/introducing-the-new-application-programming-model-for-sap-cloud-platform/" target="_blank" rel="noopener noreferrer">Introducing the new Application Programming Model</A>" is a great place to start.<BR />
<P style="overflow: hidden;margin-bottom: 0px"><IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2018/10/overview.png" /></P><BR />
There's also a dedicated topic page which you should definitely check out: <A href="https://community.sap.com/topics/cloud-application-programming" target="_blank">https://community.sap.com/topics/cloud-application-programming</A> - this has all sorts of links including a summary of the latest blog posts and also the latest Q&amp;A, which you can get to directly too via the <A href="https://answers.sap.com/tags/9f13aee1-834c-4105-8e43-ee442775e5ce" target="_blank" rel="noopener noreferrer">tag specifically for CAP related questions and answers</A>.<BR />
<BR />
&nbsp;<BR />
<BR />
<STRONG>SAP TechEd sessions</STRONG><BR />
<BR />
CAP has proved to have been a popular topic in the sessions and in the corridors at SAP TechEd over the last couple of years.<BR />
<BR />
<STRONG>2019</STRONG><BR />
<BR />
There was an array of sessions at SAP TechEd Barcelona - check out the <A href="https://sessioncatalog.sapevents.com/go/agendabuilder.sessions/?l=221&amp;locale=en_US" target="_blank" rel="nofollow noopener noreferrer">Agenda Builder</A>&nbsp;to find out more.<BR />
<BR />
Here are a couple of them:<BR />
<UL><BR />
 	<LI>CNA376 "Build Applications with the Programming Model on SAP Cloud Platform" - hands-on workshop (2hr)</LI><BR />
 	<LI>CNA652 "Less Than One Hour to a SaaS Application with SAP Cloud Platform" -&nbsp; CodeJam (mini-edition) (1hr)</LI><BR />
</UL><BR />
The exercise material "spaceflight" for CNA376 is <A href="https://github.com/SAP/cloud-sample-spaceflight-node" target="_blank" rel="nofollow noopener noreferrer">on GitHub</A>&nbsp;for both&nbsp;<A href="https://github.com/SAP/cloud-sample-spaceflight-node" target="_blank" rel="nofollow noopener noreferrer">Node</A> and <A href="https://github.com/SAP/cloud-sample-spaceflight-java" target="_blank" rel="nofollow noopener noreferrer">Java</A>.<BR />
<BR />
If you're wanting a brief overview of CAP, you could watch this brief (7min) interview between the wonderful <SPAN class="mention-scrubbed">gregorw</SPAN>, and me, from SAP TechEd 2019 in Barcelona: <A href="https://events.sap.com/teched/en/session/48917" target="_blank" rel="noopener noreferrer">CAPM for Developers, Barcelona 2019</A>:<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2018/10/Screenshot-2020-03-25-at-07.05.37.png" /><BR />
<BR />
<STRONG>2020</STRONG><BR />
<BR />
There is a great session from <SPAN class="mention-scrubbed">christian.georgi</SPAN> <A href="https://events.sapteched.com/widget/sap/sapteched2020/Catalog/session/1602555751912001uqld" target="_blank" rel="nofollow noopener noreferrer">SAP Cloud Application Programming Model Evolution â Whatâs New [DEV103]</A> which is a lecture session with all the news on both the Node.js and Java runtimes.<BR />
<BR />
&nbsp;<BR />
<BR />
<STRONG>Tools</STRONG><BR />
<BR />
If you have a look at the exercises for CNA376 you'll see they're for a Node.js (JavaScript) runtime. As well as tools and features for the Application Programming Model being available in the SAP Web IDE Full-Stack, there's also an extension for Visual Studio Code.<BR />
<BR />
Read more about this <STRONG>SAP CDS Language Support</STRONG> extension in <SPAN class="mention-scrubbed">joerg.mann</SPAN>'s post "<A href="https://blogs.sap.com/2018/10/09/introducing-core-data-services-cds-for-vs-code/" target="_blank" rel="noopener noreferrer">Introducing Core Data &amp; Services (CDS) for VS Code</A>" and grab it from the <A href="https://marketplace.visualstudio.com/items?itemName=SAPSE.vscode-cds#overview" target="_blank" rel="nofollow noopener noreferrer">Visual Studio Marketplace</A> - find out more in the <A href="https://cap.cloud.sap/docs/get-started/tools#add-cds-editor" target="_blank" rel="nofollow noopener noreferrer">tools section</A> of the CAP documentation.<BR />
<BR />
There's also a short (12 minute) video which gives an overview of all the great features of this extension: <A href="https://www.youtube.com/watch?v=eY7BTzch8w0" target="_blank" rel="nofollow noopener noreferrer">An overview of the SAP CDS Language Support extension for VS Code</A><BR />
<BR />
What's more, there's CAP support in the new <A href="https://blogs.sap.com/2020/02/27/sap-business-application-studio-is-generally-available/" target="_blank" rel="noopener noreferrer">SAP Business Application Studio</A> too!<BR />
<P style="overflow: hidden;margin-bottom: 0px"><IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2018/10/screenshot-2021-02-16-at-07.43.30.png" /></P><BR />
&nbsp;<BR />
<BR />
<STRONG>Other media</STRONG><BR />
<BR />
On SAP's unofficial community podcast, <A href="https://anchor.fm/sap-community-podcast/" target="_blank" rel="nofollow noopener noreferrer">Coffee Corner Radio</A>, there's a <A href="https://anchor.fm/sap-community-podcast/episodes/Pod-bite-5---DJ-Adams---interview-with-Rui-Nogueira-e1n1mu" target="_blank" rel="nofollow noopener noreferrer">16 minute pod bite (#5)</A> where I interview&nbsp;<SPAN class="mention-scrubbed">rui.nogueira</SPAN>&nbsp;on the Application Programming Model.<BR />
<BR />
On SAP CodeTalk, there's a short interview with Ian Thain and me talking about CAP at a high level: <A href="https://www.youtube.com/watch?v=GhEpcB7x4UA" target="_blank" rel="nofollow noopener noreferrer">https://www.youtube.com/watch?v=GhEpcB7x4UA</A><BR />
<BR />
On the SAP Mentors GitHub organisation there's a repo representing CAP community activity - check it out at <A href="https://bit.ly/cap-com" target="_blank" rel="nofollow noopener noreferrer">bit.ly/cap-com</A>.<BR />
<BR />
If you like to learn by watching folks hack around on screen, and perhaps also take part, then you probably want to check out the <A href="https://bit.ly/handsonsapdev" target="_blank" rel="nofollow noopener noreferrer">Hands-on SAP dev series</A> of live streams which cover all sorts of SAP development topics including of course CAP. Check out the recordings of past episodes here: <A href="https://bit.ly/handsonsapdev#replays" target="_blank" rel="nofollow noopener noreferrer">bit.ly/handsonsapdev#replays</A>.<BR />
<BR />
That's what comes to mind to me this evening - if there's anything else (please let me know) I'll add it to this post as and when it appears or occurs to me.<BR />
<BR />
Happy hacking!<BR />
<BR />
&nbsp;<BR />
<BR />
<A name="updates" target="_blank"></A><BR />
<EM>Updates:</EM><BR />
<BR />
<EM>11 Oct 2018 - added link to SAP CodeTalk interview; added link to Java exercise materials for CNA376</EM><BR />
<BR />
<EM>21 Dec 2018 - replaced reference to the original user tag <A href="https://blogs.sap.com/tag/applicationprogrammingmodel/" target="_blank" rel="noopener noreferrer">applicationprogrammingmodel</A>&nbsp;with the new tag <A href="https://blogs.sap.com/tags/9f13aee1-834c-4105-8e43-ee442775e5ce/" target="_blank" rel="noopener noreferrer">SAP Cloud Application Programming Model</A>&nbsp;(hat tip to&nbsp;<SPAN class="mention-scrubbed">mike.doyle4</SPAN>&nbsp;for the <A href="https://blogs.sap.com/2018/10/10/application-programming-model-start-here/#comment-446336" target="_blank" rel="noopener noreferrer">reminder</A>)</EM><BR />
<BR />
<EM>03 Jan 2019 - added info on finding tutorials by tag via a URL (hat tip to&nbsp;<SPAN class="mention-scrubbed">a.pfohlmann</SPAN>). Also added info on how to see what's new with the Application Programming Model, via an answer in the Community Q&amp;A from&nbsp;<SPAN class="mention-scrubbed">jijoroyjacob</SPAN>&nbsp;</EM><BR />
<BR />
<EM>25 Mar 2020 - major update with huge help from <SPAN class="mention-scrubbed">iwona.hahn</SPAN>&nbsp;</EM><BR />
<BR />
<EM>28 Sep 2020 - new location for VS Code Extension</EM><BR />
<BR />
<EM>16 Feb 2021 - more great updates thanks again to <SPAN class="mention-scrubbed">iwona.hahn</SPAN>&nbsp;</EM>
---
Monday morning thoughts: more on ABAP in the cloud
technology-blog-sap
2018-10-08
https://community.sap.com/t5/technology-blogs-by-sap/monday-morning-thoughts-more-on-abap-in-the-cloud/ba-p/13365539
2018-10-08-monday-morning-thoughts-more-on-abap-in-the-cloud
<EM>In this post, following my <A href="https://blogs.sap.com/2018/09/10/monday-morning-thoughts-abap-in-the-cloud/" target="_blank" rel="noopener noreferrer">previous post on the subject</A>, I think a bit more about the SAP Cloud Platform ABAP Environment, inspired by the conversations around the subject at SAP TechEd in Las Vegas last week.&nbsp;</EM><BR />
<BR />
Last month,&nbsp;<SPAN class="mention-scrubbed">harald.kuck</SPAN>&nbsp;published a post "<A href="https://blogs.sap.com/2018/09/04/sap-cloud-platform-abap-environment/" target="_blank" rel="noopener noreferrer">SAP Cloud Platform ABAP Environment</A>" which many of us had been eagerly anticipating. The post has already had around 24K views and over 60 likes, which says something for the popularity of the subject matter. I followed up with a Monday morning thoughts post "<A href="https://blogs.sap.com/2018/09/10/monday-morning-thoughts-abap-in-the-cloud/" target="_blank" rel="noopener noreferrer">ABAP in the cloud</A>" a few days later.<BR />
<BR />
Last week at SAP TechEd,&nbsp;<SPAN class="mention-scrubbed">bernd.leukert</SPAN>&nbsp;included references to this new ABAP environment in his keynote, which was wonderful to hear. (There were a lot of other great things in the keynote, such as SAP Cloud Platform Functions, but that's a subject for another time). And so the conversations that started last month were reinvigorated, which is always a good thing. There's a lot of different opinions out there, so I thought in this posts I'd share some of my own thinking on the subject.<BR />
<BR />
To set the scene, though, I first wanted to share a couple of tweets from our <A href="https://events.sap.com/teched-2018-usa/en/developer_garage" target="_blank" rel="noopener noreferrer">Developer Garage</A> at SAP TechEd last week*. One of the areas offered workstations and a number of tutorial missions for attendees to come and work through (and win prizes, hurray!).<BR />
<BR />
*The Developer Garage will of course also be at SAP TechEd in Barcelona later this month!<BR />
<BR />
This year there are four <A href="https://developers.sap.com/app-space.html" target="_blank" rel="noopener noreferrer">missions</A>:<BR />
<UL><BR />
 	<LI>SAP Cloud Platform (Application Programming Model)</LI><BR />
 	<LI>SAP Cloud Platform ABAP Environment</LI><BR />
 	<LI>S/4HANA</LI><BR />
 	<LI>SAP Cloud Platform Portal</LI><BR />
</UL><BR />
<IMG src="https://pbs.twimg.com/media/DomUyOJX0AAgD3L.jpg" width="304" height="284" /><BR />
<BR />
<EM>The developer garage with tutorial missions in full swing at SAP TechEd Las Vegas last week, from a <A href="https://twitter.com/SAPdevs/status/1047531980643028992" target="_blank" rel="nofollow noopener noreferrer">tweet</A> by&nbsp;@sapdevs</EM><BR />
<BR />
Throughout most of the week, not surprisingly, the SAP Cloud Platform ABAP Environment mission was leading the pack, in terms of number of tutorials completed. There is huge interest in the offering! In a fun bit of technology rivalry, however, at one stage the SAP Cloud Platform (Application Programming Model) took the lead, as you can see from this <A href="https://twitter.com/qmacro/status/1047882500528209921" target="_blank" rel="nofollow noopener noreferrer">tweet</A>:<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2018/10/Screen-Shot-2018-10-08-at-10.58.42.png" height="258" width="303" /><BR />
<BR />
<EM>"At <A class="twitter-hashtag pretty-link js-nav" href="https://twitter.com/hashtag/SAPTechEd?src=hash" target="_blank" rel="nofollow noopener noreferrer"></A></EM><S><EM><A class="twitter-hashtag pretty-link js-nav" href="https://twitter.com/hashtag/SAPTechEd?src=hash" target="_blank" rel="nofollow noopener noreferrer">#</A></EM></S><B>SAPTechEd</B> the application programming model for <A class="twitter-atreply pretty-link js-nav" href="https://twitter.com/sapcp" target="_blank" rel="nofollow noopener noreferrer"></A><S><A class="twitter-atreply pretty-link js-nav" href="https://twitter.com/sapcp" target="_blank" rel="nofollow noopener noreferrer">@</A></S><B>sapcp</B> tutorials at the <A class="twitter-atreply pretty-link js-nav" href="https://twitter.com/SAPdevs" target="_blank" rel="nofollow noopener noreferrer"></A><S><A class="twitter-atreply pretty-link js-nav" href="https://twitter.com/SAPdevs" target="_blank" rel="nofollow noopener noreferrer">@</A></S><B>SAPdevs</B> garage are in the lead - yas!" -- <a href="https://community.sap.com/t5/user/viewprofilepage/user-id/53">@qmacro</a><BR />
<BR />
But in the end, the sheer weight of enthusiasm and desire to get a first hands-on experience meant that&nbsp;the SAP Cloud Platform ABAP Environment mission ended up on top, as you can see from this <A href="https://twitter.com/anfisc/status/1048009973320404992" target="_blank" rel="nofollow noopener noreferrer">tweet</A> from&nbsp;<SPAN class="mention-scrubbed">andre.fischer</SPAN>&nbsp;(the total number of tutorials completed finished a little bit over 2000 by the time SAP TechEd finished last week):<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2018/10/Screen-Shot-2018-10-08-at-11.01.25.png" height="183" width="304" /><BR />
<BR />
<EM>"<A class="twitter-hashtag pretty-link js-nav" href="https://twitter.com/hashtag/abap?src=hash" target="_blank" rel="nofollow noopener noreferrer"></A></EM><S><EM><A class="twitter-hashtag pretty-link js-nav" href="https://twitter.com/hashtag/abap?src=hash" target="_blank" rel="nofollow noopener noreferrer">#</A></EM></S><B>abap</B> in front again. 30 minutes to go" --&nbsp;@anfisc<BR />
<BR />
Although I'm a huge fan of the new <A href="https://blogs.sap.com/tag/applicationprogrammingmodel/" target="_blank" rel="noopener noreferrer">Application Programming Model</A> (which also drew great interest last week), I have to say that the new SAP Cloud Platform ABAP Environment was a worthy winner in this case.<BR />
<BR />
&nbsp;<BR />
<BR />
<STRONG>ABAP PaaS&nbsp;&nbsp;</STRONG><BR />
<BR />
I'm going to refer to the SAP Cloud Platform ABAP Environment in the rest of this post unofficially as "ABAP PaaS", as that's what others are calling it too. In fact, that's already sparked some interesting conversation, as some folks are&nbsp;not convinced that the moniker is appropriate.<BR />
<BR />
I remember the first release of Google's <A href="https://cloud.google.com/appengine/" target="_blank" rel="nofollow noopener noreferrer">App Engine</A>, quite a few years ago now. What that offered at the outset was a cloud based runtime for Python based apps. There was a particular deployment process, and you had to think in a certain way if you wanted to take advantage of the features offered, especially when it came to using facilities such as the persistence layer or message queues. This was fine, and sort of part of the point of the "platform" part of PaaS - the platform offered certain features and required you to think in certain ways and employ certain approaches.<BR />
<BR />
To me, ABAP PaaS is similar, in that it allows me to write in a language with which I'm familiar, take advantage of certain platform level features -- such as a HANA-backed persistence layer -- and also causes me to think in a particular way (more on this shortly). Like App Engine, I don't have to worry about the maintenance, operation or upkeep of the ABAP platform - it just happens. New features are rolled out and available to me as they appear. I don't have to concern myself with differing releases of differing target runtimes - unlike in the on-prem world.<BR />
<BR />
&nbsp;<BR />
<BR />
<STRONG>The ABAP language</STRONG><BR />
<BR />
ABAP appeared on the scene in the late 1980's, and I have fond memories of trying early versions of this new "report writing" language, as an alternative to the 370 assembly language in which R/2 was written by the SAP developers themselves, but which was also used by customers who needed extensions and custom reports.<BR />
<BR />
The language has grown over the decades, taking on significant new features along the way (such as support for SQL and object orientation) and today enjoying rather <A href="https://blogs.sap.com/2016/11/04/abap-news-for-release-7.51/" target="_blank" rel="noopener noreferrer">modern features</A>, not only as part of the language itself but also within the layers of the greater ABAP environment as a whole - I'm thinking of Core Data Services (CDS), for example. The article "<A href="https://sapinsider.wispubs.com/Assets/Articles/2017/November/SPI-ABAP-and-the-Cloud" target="_blank" rel="nofollow noopener noreferrer">ABAP and the Cloud</A>" by&nbsp;<SPAN class="mention-scrubbed">karl.kessler</SPAN>&nbsp;gives a good overview of what today's ABAP looks like.<BR />
<BR />
And this is something that I think about a lot, in the context of the modernisation of ABAP as we move to the cloud. Some language features are being deprecated, perhaps those that should have been deprecated a long time ago if it hadn't been for the requirement for backward compatibility - again, on-prem legacy challenges which disappear in the ABAP PaaS context.<BR />
<BR />
&nbsp;<BR />
<BR />
<STRONG>The ABAP environment</STRONG><BR />
<BR />
But ABAP in general, and ABAP in the cloud in particular, is more than just a language. It's a whole set of building blocks that together present a rich set of features for building business apps - whether they're new apps or extensions to existing functionality. Some of the building blocks are themselves written in ABAP (rather than at kernel level). One notable example that comes to mind immediately is the layer supporting the development of HTTP based services in general, and supporting the development of OData services in particular. That layer itself is written in ABAP.<BR />
<BR />
So I find it more useful to think about the "ABAP environment" rather than the "ABAP language". It's greater than the sum of its parts. And with the advent of excellent initiatives from the community (<A href="https://github.com/larshp/abapGit" target="_blank" rel="nofollow noopener noreferrer">abapGit</A> from&nbsp;<SPAN class="mention-scrubbed">lars.hvam</SPAN>&nbsp;immediately comes to mind) it's becoming even greater.<BR />
<BR />
When we think of the ABAP language itself, there is sometimes the objection that it's proprietary. But for me, that's not the point. Open sourcing the language would be one thing, but is it really what we should be focusing on right now? As I've already mentioned, ABAP is more than a language. Moreover, there are other environments with their own language. An example that immediately comes to mind is <A href="https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/apex_intro_what_is_apex.htm" target="_blank" rel="nofollow noopener noreferrer">Apex</A>, a language specific to Salesforce for developing flow and transaction control in conjunction with calls to various APIs. And that's OK too.<BR />
<BR />
&nbsp;<BR />
<BR />
<STRONG>ABAP PaaS's focus</STRONG><BR />
<BR />
That mention of APIs brings me to the primary focus for ABAP PaaS. There are many reasons why I think ABAP PaaS is important.<BR />
<BR />
One is that we have a rich intellectual ocean of knowledge and experience in ABAP, amongst customers, partners and of course developers inside SAP too. To ignore that would be to effectively discard a vast skill base as we move to a cloud-first solutions paradigm.<BR />
<BR />
I do think that developers should master more than one language, but not everyone agrees with me, and that's OK. Moreover, considering that ABAP is more than just a language, as I've mentioned, there's plenty of scope for individuals to focus on an ABAP flavoured career and do very well. With ABAP PaaS, these individuals get to extend their career and their skills, and customers benefit from that. ABAP PaaS presents modern possibilities for these individuals, and for others who are deliberately and consciously versed in other languages, ABAP PaaS represents choice.<BR />
<BR />
That said, I think an even more important focus for ABAP PaaS is the use case which is one that is general to the cloud environment and a major raison d'Ãªtre for the initiative. That is the ability to stop customising the core and <EM>build out extensions and new apps in a separate environment</EM>.<BR />
<BR />
Business solutions these days span entire cloud and on-prem landscapes. We're moving away from monolithic runtimes for business applications, due to the distributed nature of apps and services in a cloud-first context. Implicit in that nature is the concept one level up from PaaS, which is SaaS (Software-as-a-Service) - business solution software that to all intents and purposes only has a consumption surface layer, rather than any depth into which we can dig.<BR />
<BR />
That surface layer consists of two types of interface - a user interface (UI) that is usually web-based, and a machine interface that is API (application programming interface) based. We can't see inside these systems, and it's not possible to extend or customise them directly. The massive advantage of this is that we don't have to worry about their operation, much less their maintenance or upkeep. But we need to differentiate ourselves somehow - to extend the solutions to meet our own business needs, to give us that competitive advantage or to solve an organisation-specific challenge.<BR />
<BR />
That's where ABAP PaaS comes in, as one of a set of environments perfectly suited for building these extensions (another is of course the Application Programming Model and the Cloud Foundry environment).<BR />
<BR />
But it's not just extensions to SaaS solutions (like SuccessFactors or S/4HANA Cloud), it's extensions for existing on-prem solutions, whether that's S/4HANA, Business Suite or something else R/3 based. Yes, there are plenty of these on-prem systems that have been customised, but that's not a reason to continue doing so. We need to think about making the journey to separate these concerns out - standard software and extensions to that standard software. And when I look at how ABAP PaaS has been designed, with the focus on CDS based and API focused service solutions, it starts to make a lot of sense to me.<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2018/09/Screen-Shot-2018-09-03-at-15.11.24.png" /><BR />
<BR />
<EM>From "<A href="https://blogs.sap.com/2018/09/04/sap-cloud-platform-abap-environment/" target="_blank" rel="noopener noreferrer">SAP Cloud Platform ABAP Environment</A>" by Harald Kuck</EM><BR />
<BR />
&nbsp;<BR />
<BR />
There's no concept of UI as we understand it from the traditional on-prem R/3-based world. No dynpros, no transactions, no reports, no SAPGUI. Thinking back to the reference to Google's App Engine earlier, it's very similar - that PaaS offering doesn't have a UI either. The focus of a PaaS is to provide facilities for "headless" solutions that both present and consume APIs that partake in landscape-wide solutions. The UI is separate - whether that UI follows the Fiori design language and is built with UI5, or whether it's with another Web UI framework altogether. There may not even be a UI in the traditional sense - one thing today's computing fabric is bringing us is a wider choice of how one interacts with solutions - think custom Internet of Things (IoT) devices and conversational UI such as bots in Slack and speech recognition in the form of the Google Assistant platform or Alexa (and of course there's SAP CoPilot too).<BR />
<BR />
What we miss from from the "legacy" ABAP platform is replaced by a sharp focus on openness - using <A href="https://en.wikipedia.org/wiki/Git" target="_blank" rel="nofollow noopener noreferrer">git</A> for software versioning and logistics, a RESTful programming model as the de facto approach to building solutions, and the use of HTTP in general to consume services from (and offer services to) other parts of the landscape.<BR />
<BR />
&nbsp;<BR />
<BR />
<STRONG>The near future</STRONG><BR />
<BR />
There's so much more to think about on this subject, but this post is already long enough. I think it's a rather exciting time for SAP's cloud-first initiatives in general, and for the ABAP community in particular. Many of us have already been learning about the programming model that is key to building solutions on ABAP PaaS, and that is the&nbsp;ABAP RESTful Programming Model. If you haven't yet had chance to dig in, I'd recommend this SAP TechEd session, which is available online already: "<A href="https://events.sap.com/teched/en/session/41240" target="_blank" rel="noopener noreferrer">CNA215 - See the Big Picture of the ABAP RESTful Programming Model, 2018 Las Vegas</A>" by Marcel Hermanns. If you're coming to SAP TechEd in Barcelona later this month, drop in to the Developer Garage to work through the SAP Cloud Platform ABAP Environment tutorials (access to an ABAP PaaS system will be provided).<BR />
<BR />
It's early days for ABAP PaaS. The team is taking a "<A href="https://en.wikipedia.org/wiki/Release_early,_release_often" target="_blank" rel="nofollow noopener noreferrer">release early, release often</A>" approach to delivery, so I'm seeing today's ABAP PaaS offering as a minimum viable product. Over time I expect to see the environment grow - in terms of whitelisting, in terms of comprehension and of course in terms of developer access.<BR />
<BR />
For me, ABAP PaaS is full of potential and I for one welcome the prospect of building extensions and net new apps using this modern environment. I'd love to hear from you too. Let me know what you think in the comments section below.<BR />
<BR />
&nbsp;<BR />
<BR />
This post was brought to you by <A href="https://www.pactcoffee.com/coffees/el-silencio-espresso" target="_blank" rel="nofollow noopener noreferrer">Pact Coffee's El Silencio</A>&nbsp;which is helping me battle the jet lag after returning home from Las Vegas, by the hashtag <A href="https://twitter.com/hashtag/abapsnotdead" target="_blank" rel="nofollow noopener noreferrer">#ABAPsNotDead</A>, and by the clackety-clack of the Cherry MX Blue switches in the mechanical keyboard I'm trying out, as I embark upon a new <A href="https://www.reddit.com/r/MechanicalKeyboards" target="_blank" rel="nofollow noopener noreferrer"></A><DEL><A href="https://www.reddit.com/r/MechanicalKeyboards" target="_blank" rel="nofollow noopener noreferrer">obsession</A></DEL> hobby.<BR />
<BR />
&nbsp;<BR />
<BR />
Read more posts in this series here:&nbsp;<A href="https://blogs.sap.com/tag/mondaymorningthoughts/" target="_blank" rel="noopener noreferrer">Monday morning thoughts</A>.
---
Monday morning thoughts: impostor syndrome
SAP-TechEd-Groupblog-board
2018-10-01
https://community.sap.com/t5/sap-teched-blog-posts/monday-morning-thoughts-impostor-syndrome/ba-p/13357879
2018-10-01-monday-morning-thoughts-impostor-syndrome
<EM>In this post I think about the impostor syndrome, how it relates to me, and one of the possible causes.</EM><BR />
<BR />
I'm in Las Vegas for the first SAP TechEd event of 2018 which starts in earnest tomorrow. Last night, I listened to an episode of my favourite radio series - the original <A href="https://en.wikipedia.org/wiki/The_Hitchhiker%27s_Guide_to_the_Galaxy_(radio_series)" target="_blank" rel="nofollow noopener noreferrer">Hitch Hiker's Guide To The Galaxy</A> by Douglas Adams. I remember listening to the episodes as they were first broadcast on the radio in the 1970's, and they're still as fresh and enjoyable today as they were then.<BR />
<BR />
&nbsp;<BR />
<BR />
<STRONG>The Total Perspective Vortex</STRONG><BR />
<BR />
The episode I listened to was Fit the Eighth&nbsp;where Zaphod Beeblebrox was fed into the <A href="https://en.wikipedia.org/wiki/Technology_in_The_Hitchhiker%27s_Guide_to_the_Galaxy#Total_Perspective_Vortex" target="_blank" rel="nofollow noopener noreferrer">Total Perspective Vortex</A>,&nbsp;allegedly the most horrible&nbsp;torture device to which a sentient being can be subjected, in that:<BR />
<BLOCKQUOTE>"When you are put into the Vortex you are given just one momentary glimpse of the entire unimaginable infinity of creation, and somewhere in it there's a tiny little speck, a microscopic dot on a microscopic dot, which says, 'You are here.'"<BR />
<BR />
-- from <A href="https://www.clivebanks.co.uk/THHGTTG/THHGTTGradio8.htm" target="_blank" rel="nofollow noopener noreferrer">Fit the Eighth</A></BLOCKQUOTE><BR />
The idea was, according to the inventor of the Total Perspective Vortex, that the one thing you can not afford to have is a sense of perspective, a sense of how insignificant you are in the context of the entire universe.<BR />
<BR />
I was thinking about this <A href="https://twitter.com/qmacro/status/1046763378553761792" target="_blank" rel="nofollow noopener noreferrer">on my run this morning</A>, and how the promise of an amazing week of learning at SAP TechEd reminded me of a great article I read recently.<BR />
<BR />
&nbsp;<BR />
<BR />
<STRONG>I'm an impostor!</STRONG><BR />
<BR />
Before pointing you to that article, I wanted to talk a little bit about how I see myself in the universe, or rather more precisely, in the SAP ecosphere. Not because I want this post to be about me - far from it. I want to talk about it because perhaps others might feel like this too, and it's often the case that merely knowing that other folks have the same challenges can help.<BR />
<BR />
I often think that at some stage, people are going to find out that I actually have no idea what I'm doing. That I'm no good at my job, and that people will eventually realise that I shouldn't be in the position that I'm in. I'm constantly thinking "how does he know that?", "I wish I was as good as she is", "I'm an idiot - I know nothing", "someone is going to discover what I'm really like!".<BR />
<BR />
There's a fear that I'll be eventually found out as a fraud, that I'm masquerading as someone who knows what they're doing, when in reality I don't.<BR />
<BR />
It turns out that this seems to be a common affliction, and is known as "<A href="https://en.wikipedia.org/wiki/Impostor_syndrome" target="_blank" rel="nofollow noopener noreferrer">impostor syndrome</A>".<BR />
<BR />
&nbsp;<BR />
<BR />
<STRONG>The reinvention cycle</STRONG><BR />
<BR />
Certain industries seem to reinvent themselves on a regular basis. One notable example is the software industry, and the enterprise software space, with SAP at the helm, is a good example. It's in the nature of software that ideas, approaches, techniques and concepts are constantly growing and changing. Yes, there are ideas that come round again and again, some that come in and out of fashion, but in a lot of ways, many software layers that we're building and approaches that we're discovering or inventing today are those that are built on layers and approaches that we only discovered yesterday.<BR />
<BR />
This means that the learning cycle is constant, and events like SAP TechEd are regular intense triple espresso shots of learning condensed into a short (and sometimes overwhelming) space of time.<BR />
<BR />
This brings me to the article that I was reminded of while thinking of this. It's "<A href="https://medium.com/@ashevat/everyone-has-an-imposter-syndrome-7bef0698a212" target="_blank" rel="nofollow noopener noreferrer">Everyone has an imposter syndrome</A>" by the VP of developer experience at Twitch, <A href="https://twitter.com/ashevat" target="_blank" rel="nofollow noopener noreferrer">Amir Shevat</A>. I'd heartily recommend you go and read it after this post, but there's one thing that I'd like to extract from it and share with you here, and that is what the modern tech career can look like. Here's an illustration from Amir's article:<BR />
<BR />
<IMG src="https://cdn-images-1.medium.com/max/800/1*ZGk8F0UdoEJMXeVFsDTt5w.png" /><BR />
<BR />
<EM>The "Modern Tech Career", from "<A href="https://medium.com/@ashevat/everyone-has-an-imposter-syndrome-7bef0698a212" target="_blank" rel="nofollow noopener noreferrer">Everyone has an imposter syndrome</A>"</EM><BR />
<BR />
&nbsp;<BR />
<BR />
I can see how the nature of our industry in particular is reflected in these short cycles of learning and working. In the article you'll see how this contrasts sharply with the more traditional "guild" style of career where one starts as an apprentice, working towards becoming a master, and then becoming obsolete, after dedicated and focused decades of work.<BR />
<BR />
&nbsp;<BR />
<BR />
<A name="tryingtokeepup" target="_blank"></A><BR />
<STRONG>Trying to keep up</STRONG><BR />
<BR />
So when people ask me what I do, I often reply, somewhat flippantly, but truthfully, "<A href="https://blogs.sap.com/2012/10/24/a-call-to-arms-for-abap-developers/comment-page-2/#comment-436250" target="_blank" rel="noopener noreferrer">I learn</A>". In the years since I started hacking around with SAP software back in the 1980's, I've found myself having to constantly reinvent myself. In many ways that's very enjoyable, but it comes with the challenge that I often feel inadequate and that someone is eventually going to realise that I am.<BR />
<BR />
So perhaps my impostor syndrome is partially caused by the act of attempting to keep up, of striving to understand new concepts and relate them to existing ones, as I travel on my learning journey, which, owing to the nature of our industry, will probably only end when I retire.<BR />
<BR />
&nbsp;<BR />
<BR />
<STRONG>Learning together</STRONG><BR />
<BR />
So I've "outed" myself, and in a funny way I don't know what the effect that will have. There's a part of me that's worried that people will think "Aha! I suspected all along that he was an idiot, I was right!". But mostly I hope that this might resonate with others, and for them to realise that it's neither unusual nor a bad thing - just perhaps a side effect of (certainly not helped by) the nature of what we do.<BR />
<BR />
If you're at SAP TechEd this week, remember that the overwhelming combination of feelings - wonder, confusion, excitement, bewilderment - is part of the process and not unusual. And remember that there's at least one other person who's experiencing these feelings - me.<BR />
<BR />
I enjoy SAP TechEd very much and while my default state is always "I've no idea what I'm doing", the event, and the people at the event, help me to join the dots a little bit more.<BR />
<BR />
Happy learning!<BR />
<BR />
&nbsp;<BR />
<BR />
This post was brought to you by a warm pre SAP TechEd morning in Las Vegas and some coffee from the hotel that was only just "OK".<BR />
<BR />
&nbsp;<BR />
<BR />
Read more posts in this series here:&nbsp;<A href="https://blogs.sap.com/tag/mondaymorningthoughts/" target="_blank" rel="noopener noreferrer">Monday morning thoughts</A>.
---
Monday morning thoughts: growth is upwards
technology-blog-sap
2018-09-24
https://community.sap.com/t5/technology-blogs-by-sap/monday-morning-thoughts-growth-is-upwards/ba-p/13385530
2018-09-24-monday-morning-thoughts-growth-is-upwards
<EM>In this post, I think about how we grow, how we improve ourselves by adding to our knowledge and experience, and consider that our growth is sometimes uphill but almost always rewarding.</EM><BR />
<BR />
I live to the east of the centre Manchester, in beautiful countryside that's rich and green from all the rain. It's a great place to run, and over the years <A href="https://twitter.com/qmacro/status/1043793450603180032" target="_blank" rel="nofollow noopener noreferrer">since I started running</A> I can see my fitness has improved, not least because of the hills I have at my disposal. While I do of course enjoy running fairly flat routes, the sense of achievement is heightened, literally, if I take in a hill or two.<BR />
<BR />
&nbsp;<BR />
<BR />
<STRONG><A name="runninguphills" target="_blank"></A>Running up hills</STRONG><BR />
<BR />
The journey to the summit, whether it's to the top of Hartshead Pike, or just up from Ashton to Oldham, is sometimes hard going, but when I get there, I know I've benefitted from the effort, and the view is pretty good too.<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2018/09/Screen-Shot-2018-09-24-at-08.18.22.png" height="233" width="597" /><BR />
<BR />
<EM>The view from&nbsp;<A href="https://goo.gl/maps/SCzNCHkNdoF2" target="_blank" rel="nofollow noopener noreferrer">Hartshead Pike</A>, looking south west</EM><BR />
<BR />
&nbsp;<BR />
<BR />
<STRONG><A name="readingunfamiliardialects" target="_blank"></A>Reading unfamiliar dialects</STRONG><BR />
<BR />
So it is also with literature sometimes, too. One of my favourite books, certainly one of the most memorable, is the post-apocalyptic novel "<A href="https://en.wikipedia.org/wiki/Riddley_Walker" target="_blank" rel="nofollow noopener noreferrer">Riddley Walker</A>", by Russell Hoban. It's set many years in the future, after a nuclear war has destroyed civilisation, and the world has regressed to a level last seen in the Iron Age.<BR />
<BR />
Not only has technology broken down, but language too, and the book is written in an imaginary and strange, devolved dialect of English, which is initially unfamiliar to the reader ...there's no soft on-ramp, the dialect hits you from the very first paragraph.<BR />
<DIV class="scn-scrollable-area"><BR />
<TABLE><BR />
<TBODY><BR />
<TR><BR />
<TD><IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2018/09/Screen-Shot-2018-09-24-at-08.37.58.png" height="423" width="283" /></TD><BR />
<TD><IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2018/09/Screen-Shot-2018-09-24-at-10.59.56.png" height="418" width="325" /></TD><BR />
</TR><BR />
</TBODY><BR />
</TABLE><BR />
</DIV><BR />
<EM>Riddley Walker, by Russell Hoban</EM><BR />
<BR />
&nbsp;<BR />
<BR />
Initially reading the book is a struggle, everything seems strange, but gradually you get to know the language and your fluency grows. I think the idea of using a strange dialect such as this is partly to reflect the arduous nature of survival in the regressed world in which the eponymous hero lives. As you travel through the language you travel with Riddley Walker and the other characters and your experience of their lives is that much more visceral.<BR />
<BR />
Like running in hilly areas, exploring this novel is also sometimes tough, but it's also ultimately rewarding. At first there's an almost automatic rejection of the text, because it appears so different. But after some thought and perseverance, the novel starts to flow, and the sense of reward and achievement is indeed great*. Looking back at these pages today, I read the text as a native of that period, with no hesitation or effort.<BR />
<BR />
<EM>*Beyond the language in this novel, there is almost always a richness of allegory and a classic erudition that permeates most of what Russell Hoban writes - this sometimes adds to the depth one must sometimes wade through.</EM><BR />
<BR />
&nbsp;<BR />
<BR />
<STRONG><A name="expandingonesknowledge" target="_blank"></A>Expanding one's knowledge</STRONG><BR />
<BR />
As with running up hills, and reading strange, imaginary dialects of English, there is also a great sense of achievement to be had when expanding one's technical knowledge - whether you decide to go wider or deeper in the subjects that interest you.<BR />
<BR />
Yesterday I was trying to satisfy my desire to learn more about the <A href="https://help.sap.com/viewer/65de2977205c403bbc107264b8eccf4b/Cloud/en-US/00823f91779d4d42aa29a498e0535cdf.html" target="_blank" rel="noopener noreferrer">Application Programming Model for SAP Cloud Platform</A> and I came across some code that looked initially a little strange but closer inspection turned out to make sense.<BR />
<BR />
Considering this closer inspection reminds me of a phrase that the inimitable <A href="https://en.wikipedia.org/wiki/Erik_Meijer_(computer_scientist)" target="_blank" rel="nofollow noopener noreferrer">Erik Meijer</A>&nbsp;seems to use* a lot: <EM>"If you stare at it long enough ..."</EM>, which he uses in reference to new programming language constructs he's introducing. If you've not seen his C9 Lecture series "<A href="https://www.youtube.com/watch?v=UIUlFQH4Cvo&amp;list=PLoJC20gNfC2gpI7Dl6fg8uj1a-wfnWTH8" target="_blank" rel="nofollow noopener noreferrer">Programming in Haskell</A>", I can highly recommend it - it's wonderful, and about so much more than Haskell itself.<BR />
<BR />
<EM>*Originally, I think, in reference to autostereograms.</EM><BR />
<BR />
Anyway, I digress.<BR />
<BR />
Here's the code I came across, more or less:<BR />
<PRE class="language-javascript"><CODE>/**<BR />
 * Custom logic for booking-service defined in ./booking-service.cds<BR />
 * Check to restrict number of passenger traveling on a space craft to 5<BR />
 */<BR />
module.exports = function ({ flight_trip_Bookings }) {<BR />
<BR />
  this.before ('CREATE', flight_trip_Bookings, (cds) =&gt; {<BR />
<BR />
    cds.run(()=&gt;{<BR />
       SELECT.from ('flight_trip_Bookings')<BR />
        .where ({DateOfTravel: cds.data.DateOfTravel, and : {Itinerary_ID: cds.data.Itinerary_ID} })<BR />
      <BR />
    }).then(( [bookings] ) =&gt; {<BR />
        let totalPassengers = 0<BR />
        for (let booking of bookings) {<BR />
          totalPassengers = totalPassengers + booking.NumberOfPassengers<BR />
          if (totalPassengers + cds.data.NumberOfPassengers &gt;= 5)<BR />
            cds.error (409, "Spacecraft Tickets Sold out for your Date and Destination, sorry")<BR />
        }<BR />
    })<BR />
    <BR />
  })<BR />
}</CODE></PRE><BR />
Is this a strange incantation which I see before me?<BR />
<BR />
Well, no, not quite. I'd like to spend the rest of this post taking a gentle look at it, and thinking about what it represents.<BR />
<BR />
First, what does this look like? Well, for many of us, it sort of looks like JavaScript but seems a little unfamiliar, a little odd. There are certain aspects that are missing, aspects might give us a more confident feeling that it's JavaScript. There are also other aspects that are present, that don't "feel" as though they're JavaScript. So at the outset we're having a bit of a Riddley Walker moment, so let's stare at it for a bit and see if we can't get closer to it, mentally.<BR />
<BR />
Of course, context is everything, so consider that this bit of code is the contents of a JavaScript file that is designed to be dropped into a Node.js based service in the context of the Application Programming Model for SAP Cloud Platform, specifically a bit of custom logic to be invoked on certain request operations.<BR />
<BR />
OK, so what we see at a high level, say, inside 10 seconds of staring, is that we have:<BR />
<UL><BR />
 	<LI>no semicolons</LI><BR />
 	<LI>some strange statements like <CODE>let</CODE>&nbsp;and <CODE>for ... of</CODE></LI><BR />
 	<LI>some odd looking punctuation reminiscent of what would be called "<A href="https://perl.plover.com/obfuscated/" target="_blank" rel="nofollow noopener noreferrer">line noise</A>" in Perl</LI><BR />
 	<LI>a significant amount of indentation</LI><BR />
</UL><BR />
In fact, looking at the indentation, there's only a single outermost statement in the whole file - and that's the <CODE>module.exports</CODE>&nbsp;assignment in the first line.<BR />
<BR />
But actually there's not much to worry about at all here. Semicolons in JavaScript are optional, and many, including&nbsp;Mattias Petter Johansson, who has a&nbsp;<A href="https://www.youtube.com/channel/UCO1cgjhGzsSYb1rsB4bFe4Q" target="_blank" rel="nofollow noopener noreferrer">YouTube channel called FunFunFunction</A>&nbsp;full of new JavaScript ideas and more, prefer to omit them. I think it's a "modern" choice.<BR />
<BR />
We'll look at the strange statements shortly, as well as the punctuation. But let's continue from where we started.<BR />
<BR />
<CODE>module.exports</CODE><BR />
<BR />
The reference to&nbsp;<CODE>module.exports</CODE>&nbsp;gives us confidence that what we're indeed looking at is something that is a <A href="https://nodejs.org/api/modules.html" target="_blank" rel="nofollow noopener noreferrer">module</A> in a Node.js context. So far so good, we can use that as an anchor for the rest of our interpretation. What's assigned to <CODE>module.exports</CODE>&nbsp;is an anonymous function, but that should be a fairly familiar idea to us, already.<BR />
<BR />
<CODE>({ flight_trip_Bookings })</CODE><BR />
<BR />
But further along the first line, we have something that looks unfamiliar. What are those curly braces doing inside of the brackets where we're expecting to see the function parameters? Well, that's a new feature of ECMAScript* 6 (EC6) which other languages such as Clojure already have - <A href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment" target="_blank" rel="nofollow noopener noreferrer">destructuring</A>. Here, the function expects a map (or "object") as input, and the value of the specific property <CODE>flight_trip_Bookings</CODE>&nbsp;in that map is what the function needs.<BR />
<BR />
<EM>*ECMAScript is the actual language, JavaScript is a dialect of that language.</EM><BR />
<BR />
<CODE>this.before</CODE><BR />
<BR />
What about the body of this anonymous function? Well, we see a function <CODE>before</CODE>&nbsp;being called, with an operation ("CREATE"), the value of the <CODE>flight_trip_Bookings</CODE>&nbsp;that we received in the call (remember, we're now inside the anonymous function), and another anonymous function, this time defined in the new ES6 style using <A href="https://www.sitepoint.com/es6-arrow-functions-new-fat-concise-syntax-javascript/" target="_blank" rel="nofollow noopener noreferrer">fat arrows</A>. This anonymous function, passed as the third argument to the call to <CODE>before</CODE>, expects a single value, in this case <CODE>cds</CODE>. Note that one of the beautiful things about JavaScript is the support for higher order functions - functions can be passed in, and received from, other functions.<BR />
<BR />
The effect of this call is that this inner anonymous function expecting the <CODE>cds</CODE>&nbsp;parameter will be registered as a callback to any CREATE operations on the "Bookings" table within the "flight_trip" namespace. What does this callback function do? Well, it uses the <CODE>cds</CODE>&nbsp;value passed in, which will represent the CDS runtime object (CDS is a core part of the Application Programming Model runtime, as well as being the language with which we declare data models and service definitions).<BR />
<BR />
<CODE>cds.run(()=&gt;{</CODE><BR />
<BR />
Let's stare at the parts inside this inner anonymous ES6 function now for a bit. We seem to have something like this:<BR />
<PRE class="language-javascript"><CODE>cds.run(A).then(B)</CODE></PRE><BR />
<P class="p1">In both cases, A and B are anonymous functions*.</P><BR />
<P class="p1"><EM>*Surprised? You shouldn't be - Scheme, a dialect of LISP, a functional language, was in JavaScript creator Brendan Eich's mind when he created JavaScript while working at Netscape.</EM></P><BR />
The first anonymous function expects no arguments, so is introduced in ES6 fat arrow style like this: <CODE>() =&gt; { ... }</CODE>. The second is expecting an argument. What is that argument? Well, notice the square brackets here: <CODE>( [bookings] ) =&gt; { ... }</CODE>. In a similar way to what we saw in the outermost function definition, here we also have destucturing at work. In this case, however, rather than expecting a map, this anonymous function is expecting an array, and only wants the first element in that array to work with, which it will assign to <CODE>bookings</CODE>.<BR />
<BR />
<CODE>SELECT.from</CODE><BR />
<BR />
What is this chain of functions doing? Well, in anonymous function A, we can see evidence of CDS's query language (CQL) which is based on standard SQL, with various enhancements. Without going too much into CQL here, we can see how the representation of CQL at the JavaScript syntax level has been constructed so we can read it more or less like English. This seems to be a common approach amongst domain specific languages and especially those standard languages favouring a more flexible approach to typing as well as embracing functional aspects.<BR />
<BR />
Knowing that with ES6 style function definitions, the results of the body's evaluation are automatically returned (i.e. there's no need for an explicit <CODE>return</CODE>&nbsp;statement), we can surmise that any results of the SELECT, from the "Bookings" table, will be returned from A.<BR />
<BR />
<CODE>}).then(( [bookings] ) =&gt; {</CODE><BR />
<BR />
With&nbsp;<CODE>then</CODE>&nbsp;we have effectively a promise style continuation, where the anonymous function B receives the array of possible results, including any "Bookings" entries in the first position of that array. Inside B we have more mundane JavaScript, made slightly more interesting by its use of more ES6 constructs - specifically the <CODE>let</CODE>&nbsp;and <CODE>for ... of</CODE>&nbsp;statements.<BR />
<BR />
The&nbsp;<CODE>let</CODE>&nbsp;statement is just used to declare a block scope local variable (a "proper" <CODE>var</CODE>, if you will) and the <CODE>for ... of</CODE>&nbsp;allows the processing of each of the items in the bookings that were passed in (so we can presume also that <CODE>bookings</CODE>, the first value in the array passed in, is itself an array).<BR />
<BR />
If the total number of passengers exceeds a certain number, then the error function of the CDS runtime object is used to return an exception which will bubble up the stack and be returned in the response, in this case with a rather handsome <A href="https://httpstatuses.com/409" target="_blank" rel="nofollow noopener noreferrer">HTTP 409</A> status code.<BR />
<BR />
In summary then, this module is a bit of custom logic that will cause the automatic handling of OData requests to react, specifically in the case of CREATE operations on the Bookings entity, if the number of passengers would mean that the total for the given Intinerary exceeded capacity. The context of this custom logic is the complete OData service that the Application Programming Model provides -- in this case in a Node.js context -- given a service definition written in CDS.<BR />
<BR />
&nbsp;<BR />
<BR />
<STRONG><A name="reflection" target="_blank"></A>Reflection</STRONG><BR />
<BR />
That for me was a pleasant reflection, and I hope that, like me, you went from looking at that piece of code with some wonder, to looking at it with more confidence. I've deliberately left out some details about the operation of the CDS runtime itself - perhaps I can come back to that another time.<BR />
<BR />
Instead, I wanted to show that it's straightforward and interesting to peel back the perhaps initially unfamiliar surface, even at the language syntax level, to reveal something that will educate us, enrich our understanding, and even make us smile.<BR />
<BR />
As I stare at the code, the blurriness give way to focus, the language and dialect becomes more familiar, and the summit starts to appear. It's clear to me that to be a good developer, I need to keep learning, and this growth and effort is something I enjoy, especially when I can do it by learning from folks who are bringing new techniques, frameworks and models to us. Not quite standing on the shoulders of giants, perhaps ... maybe just reading over their shoulder as they write.<BR />
<BR />
As we move further into the cloud, and embrace more new techniques, models and frameworks, we'll need to keep growing. And that, I think, is a good thing.<BR />
<BR />
&nbsp;<BR />
<BR />
<STRONG><A name="bonus" target="_blank"></A>Bonus</STRONG><BR />
<BR />
If you've got this far, thanks for persevering! There's a couple of bonus thoughts in this post. First, there's a semi-hidden literary quote. Can you find it and point to the original? Second, the code in the anonymous function B is one way of computing the total number of passengers. It's in a "how to do it" procedural style, rather than a "what I want" functional style. Can you come up with an alternative in the latter style? I'd love to hear from you in the comments below.<BR />
<BR />
&nbsp;<BR />
<BR />
This post was brought to you by a frosty morning, warmed up first by Pact Coffee's Planalto and the later the welcome appearance of some sunshine.<BR />
<BR />
&nbsp;<BR />
<BR />
Read more posts in this series here:&nbsp;<A href="https://blogs.sap.com/tag/mondaymorningthoughts/" target="_blank" rel="noopener noreferrer">Monday morning thoughts</A>.<BR />
<BR />
&nbsp;<BR />
<BR />
&nbsp;
---
Monday morning thoughts: Workflow Forms and the definition of a developer
technology-blog-sap
2018-09-17
https://community.sap.com/t5/technology-blogs-by-sap/monday-morning-thoughts-workflow-forms-and-the-definition-of-a-developer/ba-p/13379225
2018-09-17-monday-morning-thoughts-workflow-forms-and-the-definition-of-a-developer
<EM>In this post, I think briefly about the definition of a developer, and in that context look at the advent of Workflow Forms, a major new addition to the functionality of the Workflow service on SAP Cloud Platform.&nbsp;</EM><BR />
<BR />
&nbsp;<BR />
<BR />
<STRONG>How do you define a developer?</STRONG><BR />
<BR />
Last week, a question came up about developers. Specifically, do you define a developer as one who writes code, or is the definition broader than that? It's an interesting question. On the one hand, I class myself as a developer, I write code (or what passes for code), and I've traditionally considered these two things as being related. Of course they're related - "developer" is the name of someone who develops, or creates, software. And software is code that is executed on a machine.<BR />
<BR />
But thinking about it a little more, perhaps the definition is broader than that. The first developers wrote in machine code, then assembly language, and the growth of development as a practice and the number of developers increased as the language abstraction layers grew, as we got further and further away from the machine. This of course is a good thing. Most languages today bear little resemblance to the microcode that is only one step away from the hardware that actually processes what was written and translated.<BR />
<BR />
&nbsp;<BR />
<BR />
<EM><IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2018/09/Screen-Shot-2018-09-17-at-07.35.58.png" height="235" width="174" /> </EM><BR />
<BR />
<EM>In Byte magazine in the 1980s I remember adverts for 4GLs -- "fourth generation languages" -- that were designed to appeal to and be used by the "non-programmer" (</EM><A href="https://archive.org/details/byte-magazine-1981-04" target="_blank" rel="nofollow noopener noreferrer">image courtesy of archive.org</A><EM>)</EM><BR />
<BR />
&nbsp;<BR />
<BR />
Moreover, when thinking of this progression, there is perhaps an implicit connection between the concept of imperative constructions and programming, with little thought to anything that wasn't procedural, anything that wasn't "fluid". If you aren't telling the computer what to do, are you still "developing" code? Immediately my thoughts turn to languages that are deliberately non-imperative, non-procedural.<BR />
<BR />
Think of the logic oriented nature of PROLOG, which is more declarative than imperative. Think of the array oriented nature of APL, which is nearer to maths than to procedural programming. Think of the functional programming paradigm and languages in that space. One thing that permeates function orientation is the idea of "what not how" - you say <EM>what</EM> you want, rather than <EM>how</EM> you want it computed.<BR />
<BR />
So it stands to reason that when we define things declaratively, whether that's describing what a UI looks like using XML in the UI5 space, or specifying what a business entity looks like when using CDS with the Application Programming Model for SAP Cloud Platform, or on an ABAP stack, when we declare behaviour using annotations, are we still developing?<BR />
<BR />
I'd say yes, we are. Perhaps it's not too far fetched to say that to develop is to create something that executes on a machine. How you define how that something works is an implementation detail, as they say.<BR />
<BR />
&nbsp;<BR />
<BR />
<STRONG>The SAP Cloud Platform Workflow service</STRONG><BR />
<BR />
Why am I talking about this? Well, there are a number of services on SAP Cloud Platform that allow folks to build solutions to things, to create data visualisations, to connect systems together, to generally solve business problems, without much (or any) actual <EM>programming</EM> at all. One of these services is the SAP Cloud Platform Workflow service.<BR />
<BR />
I've written and talked about about the Workflow service before, so if you're not familiar with the service, you might want to take a look at some of these resources:<BR />
<UL><BR />
 	<LI>A 10-part series on various aspects of the Workflow service: <A href="http://pipetree.com/qmacro/blog/2018/01/16/discovering-scp-workflow/" target="_blank" rel="nofollow noopener noreferrer">Discovering SCP Workflow</A></LI><BR />
 	<LI>A replay and link summary from my ASUG webinar session: <A href="https://blogs.sap.com/2018/04/05/introduction-to-sap-cloud-platform-workflow-summary/" target="_blank" rel="noopener noreferrer">Introduction to SAP Cloud Platform Workflow - Summary</A></LI><BR />
 	<LI>A brief CodeTalk episode: <A href="https://www.youtube.com/watch?v=t5V0WRle1xc" target="_blank" rel="nofollow noopener noreferrer">SAP CodeTalk - SAP Cloud Platform Workflow Service</A></LI><BR />
 	<LI>An interview on <A href="https://anchor.fm/sap-community-podcast/episodes/Episode-1---Interview-with-DJ-Adams-e1ac40" target="_blank" rel="nofollow noopener noreferrer">Episode 1</A> of the Coffee Corner Radio podcast series</LI><BR />
 	<LI>An interview on <A href="http://integrationpodcast.com/2018/05/09/015-workflow-in-sap-cloud-platform-with-dj-adams/" target="_blank" rel="nofollow noopener noreferrer">Episode 015</A> of The Integration Podcast</LI><BR />
</UL><BR />
And of course there are plenty of very readable docs at the main Workflow landing page here:&nbsp;<A href="https://help.sap.com/viewer/product/WORKFLOW_SERVICE/Cloud/en-US" target="_blank" rel="noopener noreferrer">https://help.sap.com/viewer/product/WORKFLOW_SERVICE/Cloud/en-US</A>.<BR />
<BR />
&nbsp;<BR />
<BR />
<STRONG>The challenge</STRONG><BR />
<BR />
Designing and building a workflow definition and deploying it for use on SAP Cloud Platform is something that's pretty straightforward. Naturally, the more complex the workflow you're designing, the more steps you have to include. But on the whole, it's quite a pleasant experience. What's more, it's declarative, in the form of a workflow editor where you connect boxes together and define properties for them, and the overall diagram that you create represents the flow definition.<BR />
<BR />
However, for <A href="https://blogs.sap.com/2018/01/20/discovering-scp-workflow-user-tasks/" target="_blank" rel="noopener noreferrer">User Task</A> steps, you need a User Interface (UI) with which a workflow task recipient can interact, view and add data to the workflow instance context, and make decisions. There's a well-defined API for the standard My Inbox Fiori app and you build the UI as a component that is instantiated on a task by task basis inside the My Inbox app. That component is a UI5 component (see the <A href="https://blogs.sap.com/2018/01/22/discovering-scp-workflow-component-startup/" target="_blank" rel="noopener noreferrer">Component Startup</A> and <A href="https://blogs.sap.com/2018/01/24/discovering-scp-workflow-recommendation-ui/" target="_blank" rel="noopener noreferrer">Recommendation UI</A> posts in the <A href="http://pipetree.com/qmacro/blog/2018/01/16/discovering-scp-workflow/" target="_blank" rel="nofollow noopener noreferrer">Discovering SCP Workflow</A> series for more details).<BR />
<BR />
That's all well and good if you're a developer in the traditional sense, and a developer in the UI5 sense specifically, but the tantalising truth is that - with the exception of these User Tasks, you actually don't need to write any code to design and implement Workflow definitions.<BR />
<BR />
But programming skills in&nbsp;<A href="https://ui5.sap.com" target="_blank" rel="noopener noreferrer">UI5</A> have been needed to complete that "last mile" of definition.<BR />
<BR />
Until now.<BR />
<BR />
&nbsp;<BR />
<BR />
<STRONG>The solution</STRONG><BR />
<BR />
Last week, a major new feature was made generally available - Workflow Forms. With this feature, you can define user task UIs in a declarative fashion, using the form editor in the SAP Web IDE.<BR />
<BR />
&nbsp;<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2018/09/FormEditor-5.png" /><BR />
<BR />
<EM>The form editor in the SAP Web IDE, via&nbsp;<A href="https://blogs.sap.com/2018/09/14/new-feature-in-sap-cloud-platform-workflow-forms/" target="_blank" rel="noopener noreferrer">https://blogs.sap.com/2018/09/14/new-feature-in-sap-cloud-platform-workflow-forms/</A></EM><BR />
<BR />
&nbsp;<BR />
<BR />
The way it works is that you define the layout of the UI, and link up data in the workflow context with the fields in the UI definition. You also define actions.&nbsp;At runtime, there's a forms "player" that interprets your form definition to produce the appropriate user task interface. It's UI5 underneath, of course, but as a workflow definition creator, you don't have to know any UI5 any more.<BR />
<BR />
The Workflow Forms feature was announced last week by&nbsp;<SPAN class="mention-scrubbed">joachim.meyer</SPAN>&nbsp;in this post: "<A href="https://blogs.sap.com/2018/09/14/new-feature-in-sap-cloud-platform-workflow-forms/" target="_blank" rel="noopener noreferrer">New feature in SAP Cloud Platform Workflow â Forms</A>", and I for one am very pleased to see this announcement. I was lucky to get a sneak preview of the feature a while back, and it works very nicely indeed.<BR />
<BR />
&nbsp;<BR />
<BR />
<STRONG>Developing workflows</STRONG><BR />
<BR />
So if we're to take the wider definition of a "developer" as someone who builds solutions to run on a machines, using appropriate tools, then this Workflow Forms feature allows traditional non-programmers to do just that - to develop and deploy entire workflow definitions.<BR />
<BR />
If someone builds something using definitions and declarations alone, are they a developer? Following the thoughts earlier on in this post, one might say that they are. Of course, your opinion may be different, and that's fine. Heck, I might change my thinking when the words "programming" and "developing" re-merge in my head. To be honest, I guess it doesn't matter too much about how we define developers, although it's an interesting exercise to think about their nature.<BR />
<BR />
What does matter in this case is that the ability to create solutions that involve workflow definitions is now, with the advent of the forms feature, in reach of the non-programmer.<BR />
<BR />
As you might know, I'm a fan of the Workflow service, and the new feature is excellent. It doesn't preclude the use or definition of custom user task UIs with UI5 components - far from it. That approach is still possible, of course. But even as a UI5 programmer, I can see myself using the forms feature, and not worrying one iota whether people think less of me as a developer or not.<BR />
<BR />
Give the new Workflow Forms feature a try. There's documentation available for you in the Help Portal - see the new "<A href="https://help.sap.com/viewer/f85276c5069a429fa37d1cd352785c25/Cloud/en-US/bc57d645aee44e11afc8992fd27e544c.html" target="_blank" rel="noopener noreferrer">Creating a Workflow Form</A>" section. And there's even a revised tutorial in the tutorial group "<A href="https://www.sap.com/developer/groups/cp-workflow-service.html" target="_blank" rel="noopener noreferrer">Get Started with SAP Cloud Platform Workflows</A>", specifically the "<A href="https://www.sap.com/developer/tutorials/cp-workflow-build-approval-ui.html" target="_blank" rel="noopener noreferrer">Building a simple approval UI for your workflow with Workflow Forms</A>" tutorial, to help you get a head start.<BR />
<BR />
Here's to programming, developing, and building solutions!<BR />
<BR />
&nbsp;<BR />
<BR />
This post was brought to you on a rainy Monday morning and <A href="https://www.pactcoffee.com/coffees/el-silencio" target="_blank" rel="nofollow noopener noreferrer">Pact Coffee's El Silencio</A>.<BR />
<BR />
&nbsp;<BR />
<BR />
Read more posts in this series here:&nbsp;<A href="https://blogs.sap.com/tag/mondaymorningthoughts/" target="_blank" rel="noopener noreferrer">Monday morning thoughts</A>.
---
Monday morning thoughts: ABAP in the cloud
technology-blog-sap
2018-09-10
https://community.sap.com/t5/technology-blogs-by-sap/monday-morning-thoughts-abap-in-the-cloud/ba-p/13372577
2018-09-10-monday-morning-thoughts-abap-in-the-cloud
<EM>In this post, I think about the new SAP Cloud Platform ABAP Environment, what it is, what it isn't, and why I think it's a great move.</EM><BR />
<BR />
A day or two ago <A href="https://twitter.com/FishInWaterProd/status/1037879269471469568/photo/1" target="_blank" rel="nofollow noopener noreferrer">this tweet</A> appeared in my timeline, and it made me smile:<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2018/09/Screen-Shot-2018-09-10-at-07.45.15.png" height="455" width="377" /><BR />
<BR />
&nbsp;<BR />
<BR />
Last week,&nbsp;<SPAN class="mention-scrubbed">harald.kuck</SPAN>&nbsp;<A href="https://blogs.sap.com/2018/09/04/sap-cloud-platform-abap-environment/" target="_blank" rel="noopener noreferrer">announced the availability of the SAP Cloud Platform ABAP Environment</A>, and it was followed up a day later by a second post from&nbsp;<SPAN class="mention-scrubbed">karl.kessler</SPAN>: "<A href="https://blogs.sap.com/2018/09/05/sap-cloud-platform-abap-environment-is-live/" target="_blank" rel="noopener noreferrer">SAP Cloud Platform ABAP Environment is live</A>". While it was rather a big event, it wasn't that it came as a surprise - this is something that many of us have been looking forward to for a long time now. Nevertheless, it certainly provides me with lots to wonder about, which is a good thing.<BR />
<BR />
I'd encourage you to read both Harald's and Karl's posts as they provide lots of information about the environment in general, and if you're on Twitter, <A href="https://twitter.com/ABAP4H" target="_blank" rel="nofollow noopener noreferrer">Jens Weiler</A>&nbsp;is posting a series of tweets with the hashtag <A href="https://twitter.com/hashtag/abapPaaS" target="_blank" rel="nofollow noopener noreferrer">#ABAPPaaS</A>, which are definitely worth keeping an eye on.<BR />
<BR />
&nbsp;<BR />
<BR />
<STRONG>What ABAP has been</STRONG><BR />
<BR />
ABAP has been with us for a long time. When I think about what that exactly means, it turns out that it's hard for me to be precise. On the one hand, ABAP is a language, a language that's evolved over the years since its inception in the late 1980s (I remember writing early ABAP report constructs inside SYSIN DD statements in Job Control Language on a mainframe within an SAP R/2 installation back then).<BR />
<BR />
But ABAP has meant more than that - at least perhaps subtly or implicitly. Arguably, to be an ABAP programmer has meant to build transactions and reports, from both a backend &amp; frontend perspective, in an environment that is both design time &amp; runtime. It has meant using editor tools &amp; software logistics facilities that themselves are written in ABAP and also run within that same environment. Perhaps more significantly, when thinking about the new SAP Cloud Platform ABAP Environment, it has also largely implied SAP-specific user access mechanisms - SAPGUI of course, but also, latterly, the browser, with Web Dynpro ABAP constructions (although even here the main "mass" of UI execution remained within the ABAP stack itself).<BR />
<BR />
&nbsp;<BR />
<BR />
<IMG src="https://upload.wikimedia.org/wikipedia/commons/thumb/1/17/Yin_yang.svg/1024px-Yin_yang.svg.png" alt="Image result for yin yang" width="169" height="169" /><BR />
<BR />
<STRONG>The yin and yang of backend and frontend</STRONG><BR />
<BR />
The advent of SAP Fiori and the <A href="http://www.bluefinsolutions.com/insights/dj-adams/january-2014/sapui5-the-future-direction-of-sap-ui-developmen" target="_blank" rel="nofollow noopener noreferrer">outside-in</A> programming approach where we now build our user interfaces not only with open standards but also to run outside the traditional ABAP environment - in the browser directly using toolkits like UI5 - heralded a new era.<BR />
<BR />
Not only that, it introduced us, out of necessity, to new ways of working, to distributed source code control systems, to new editors, to the concept of deployment pipelines, and more besides. In parallel, we were seeing the rise in popularity of a new kind of editor environment for writing ABAP itself - the ABAP Development Tools (ADT) within the Eclipse editor framework*.<BR />
<BR />
*a part of me still looks back with fondness at the <A href="http://www.texteditors.org/cgi-bin/wiki.pl?Roscoe" target="_blank" rel="nofollow noopener noreferrer">Roscoe</A>-style ABAP editor available via R/2 transaction TM38; but that's perhaps a story for another time.<BR />
<BR />
The pragmatic approach to building Fiori apps is to use the UI5 toolkit to build the frontend components, which in turn consume backend components written on the ABAP stack (or natively in HANA) and exposed through a wire protocol, where the wire is HTTP shaped and the protocol is often&nbsp;(though not always) OData flavoured.<BR />
<BR />
So for the past few years, there's been a lovely yin/yang balance between backend and frontend, both equally important and each complementary to the other.<BR />
<BR />
&nbsp;<BR />
<BR />
<STRONG>The cloud, and extending SaaS solutions</STRONG><BR />
<BR />
<A href="https://en.wikipedia.org/wiki/Exit...Stage_Left" target="_blank" rel="nofollow noopener noreferrer">Enter, stage left</A>, software solutions such as SuccessFactors, S/4HANA Cloud, and more. What stage? Well, <A href="https://cloudplatform.sap.com" target="_blank" rel="noopener noreferrer">SAP Cloud Platform</A>, of course. And what do businesses need in this new age of cloud solutions? The ability to extend, to bend and shape these cloud solutions to their own needs - while, crucially, not getting themselves into a situation where software upgrades cannot happen. So we come to in-app extensions which are purely within the confines of the SaaS solutions themselves, but also -- and more significantly -- to side-by-side extensions where new frontends and even new backends are required, melding standard functionality with custom features to provide business-specific solutions.<BR />
<BR />
For these side-by-side extensions, we're going to need a backend runtime and persistence layer. Somewhere to write our application logic, or our custom OData service, some place to run code that connects into the SaaS solutions via the <A href="https://cloudplatform.sap.com/capabilities/product-info.SAP-Cloud-Platform-Connectivity.43bdae3a-bec5-4c47-83ed-44197926b024.html" target="_blank" rel="noopener noreferrer">connectivity fabric</A> of SAP Cloud Platform using&nbsp;<A href="https://api.sap.com/" target="_blank" rel="noopener noreferrer">well-defined APIs</A>. A place to call home, in other words.<BR />
<BR />
Of course, in the SAP Cloud Platform context, we already have places to call home - look, for example, at the excellent <A href="https://blogs.sap.com/tag/applicationprogrammingmodel/" target="_blank" rel="noopener noreferrer">Application Programming Model for SAP Cloud Platform</A> that provides us with language and persistence layer agnostic support for building the core data and services that are needed. That's for the Cloud Foundry environment.<BR />
<BR />
&nbsp;<BR />
<BR />
<STRONG>ABAP in the cloud</STRONG><BR />
<BR />
But one thing that I've learnt about cloud in general, and SAP Cloud Platform in particular, is that it's about choice. Yes, there are opinionated approaches to building stuff, but choice plays a big part, and for good reason. The combination of problem domains, existing software solution contexts, team availability, technology trajectory, skillset availability and a number of other factors means that there's never a one-size-fits-all solution.<BR />
<BR />
This leads me to think about the fact that there are different environments on SAP Cloud Platform, all with solid purposes. The two main environments that come to mind of course are Neo and Cloud Foundry. But last week's announcement means now that we have another environment to add to the choice - ABAP.<BR />
<BR />
In the context of backend and frontend, in the context of extending existing SaaS solutions, and building net new apps, the SAP Cloud Platform ABAP Environment is one which is appealing to organisations as well as individuals who have a significant skills investment in ABAP, and to whom it makes sense especially to build their future, which may still be hybrid (keeping some on-prem ABAP stack systems to look after core processes), using a homogenised language skills layer.<BR />
<BR />
&nbsp;<BR />
<BR />
<IMG src="https://digitalmarketplace-sapcpprd.s3.eu-central-1.amazonaws.com/CwYk7iKu4zsbhH_MY53MGi0Y-JnnSOk2g_pmOccujmK3wpYKkX-aj2RE5A0mCDuH.svg" alt="icon of product" width="318" height="143" /><BR />
<BR />
&nbsp;<BR />
<BR />
But as the saying goes, it's not your grandfather's ABAP. That much is clear, and for good reason. It's a chance to modernise the language by removing defunct constructs. It's a move away from that blurred combination of design time tools, language and, frankly, proprietary UI technologies. It's focused on building backend solutions, from complex custom application logic that's either standalone or working in conjunction with services available via SaaS Software Development Kits (SDKs) such as the <A href="https://www.sap.com/uk/developer/topics/s4hana-cloud-sdk.html" target="_blank" rel="noopener noreferrer">S/4HANA Cloud SDK</A>, to simple OData services that can be consumed elsewhere.<BR />
<BR />
I'm not just talking about OData, of course. As I mentioned in a previous <A href="https://blogs.sap.com/tag/mondaymorningthoughts/" target="_blank" rel="noopener noreferrer">Monday morning thoughts</A> post on <A href="https://blogs.sap.com/2018/05/21/monday-morning-thoughts-milestones/" target="_blank" rel="noopener noreferrer">milestones</A>, the Internet Communication Manager, and its user-space layer in the form of the Internet Communication Framework (ICF), is a thing of beauty, and allows us, as masters of the ABAP stack (on-prem as well as in this new cloud-based environment), to build all sorts of HTTP-based services.<BR />
<BR />
What's more, these days we have Core Data Services (CDS) on the ABAP stack to allow us to declaratively build data models and annotate them for consumption (think metadata extensions and use thereof by Fiori elements mechanisms) and the whole RESTful ABAP programming model to support us here too.<BR />
<BR />
So with the new ABAP in the cloud, don't think in the traditional mindset about ABAP List Viewer (ALV) based reports, or even any sort of dynpro based solution. Don't think about your users connecting to your cloud-based ABAP systems with SAPGUI. You won't even be connecting yourself with SAPGUI - you'll be using the ADT with Eclipse, and, gosh, eschewing the venerable SE11 for declarative, code-based data definitions! Moreover, you'll be using modern tools (think <A href="https://github.com/larshp/abapGit" target="_blank" rel="nofollow noopener noreferrer">abapGit</A>&nbsp;and more) for your all your software logistics needs. Think backend services, think extending cloud solutions, think future.<BR />
<BR />
&nbsp;<BR />
<BR />
<STRONG>Wrapping up</STRONG><BR />
<BR />
These thoughts here are based on wonder, and there's still lots to wonder about (so don't fret, Mr Waits). It's early days for the SAP Cloud Platform ABAP environment, and the journey ahead is one that we should travel together. There are still areas that need ironing out, for sure, but I for one am looking forward to taking my first steps.<BR />
<BR />
&nbsp;<BR />
<BR />
This post was brought to you by <A href="https://www.pactcoffee.com/coffees/planalto" target="_blank" rel="nofollow noopener noreferrer">Pact Coffee's Planalto</A>, and the stiffness of joints that are a result of a classic fall on my run yesterday.<BR />
<BR />
&nbsp;<BR />
<BR />
Read more posts in this series here:&nbsp;<A href="https://blogs.sap.com/tag/mondaymorningthoughts/" target="_blank" rel="noopener noreferrer">Monday morning thoughts</A>.<BR />
<BR />
&nbsp;
---
Monday morning thoughts: considering GraphQL
additional-blog-sap
2018-09-03
https://community.sap.com/t5/additional-blogs-by-sap/monday-morning-thoughts-considering-graphql/ba-p/13366720
2018-09-03-monday-morning-thoughts-considering-graphql
<EM>In this post, I think about GraphQL, and its relationship with existing ideas for managing data and structured exposure to that data over a wire protocol.&nbsp;</EM><BR />
<BR />
<STRONG><EM>Update: This post is now available in audio format too - see <A href="https://anchor.fm/tech-aloud/episodes/Monday-morning-thoughts-considering-GraphQL---DJ-Adams---3-Sep-2018-e5h54s" target="_blank" rel="nofollow noopener noreferrer">the episode on Tech Aloud</A>.</EM></STRONG><BR />
<BR />
Last week,&nbsp;<SPAN class="mention-scrubbed">chris.paine</SPAN>&nbsp;shared with us on Twitter some comments about GraphQL and how it compared with OData. It was an intriguing thought and led to all sorts of discussions. I didn't know much about GraphQL so I took a bit of time to look into it. Not too much time so far, so please take these thoughts as coming from someone with a very limited exposure to GraphQL itself.<BR />
<BR />
&nbsp;<BR />
<BR />
<STRONG>What is GraphQL?</STRONG><BR />
<BR />
GraphQL is an open sourced specification that originated from one of Facebook's engineering teams. One of the pieces I consumed was a talk by one of GraphQL's creators, Lee Byron: "<A href="https://www.youtube.com/watch?v=zVNrqo9XGOs" target="_blank" rel="nofollow noopener noreferrer">Lessons from 4 years of GraphQL</A>", and one of the takeaways for me was the clear passion that has provided GraphQL with the early success it has been seeing. Beyond the specification, there's a reference implementation in JavaScript, and over time, more than a dozen implementations have emerged, in different languages.<BR />
<BR />
&nbsp;<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2018/09/Screenshot-2018-09-03-at-09.39.22.png" /><BR />
<BR />
<EM>The sample on GraphQL's homepage is a nice overview of what it looks and feels like</EM><BR />
<BR />
&nbsp;<BR />
<BR />
GraphQL is a&nbsp;query language for APIs and a runtime for fulfilling those queries with your existing data. Like many combinations of specification and implementation, it's also a community, with developers creating implementations of server-side components as well as client-side libraries.<BR />
<BR />
One of the pieces of software you'll see everywhere is Graphiql, a browser-based REPL*-like explorer where you can enter GraphQL queries on the left hand side (see the "Ask for what you want" in the image above) and see the results of those queries on the right hand side (see the "Get predictable results" in the image above). Queries and response are in the form of JSON-like structures, which is nice.<BR />
<BR />
*REPL stands for Read Evaluate Print Loop and in many languages is a simple realtime environment in which you can interact with the language or service directly, to manually program or explore the possibilities it offers.<BR />
<BR />
&nbsp;<BR />
<BR />
<STRONG>A fundamentally different data store</STRONG><BR />
<BR />
One of the core features of GraphQL is the shape of the data store. It's not hierarchical, it's not relational, it's graphical. Entities persisted are generally either nodes - things - or arcs - relationships between things. I'm using the words "nodes" and "arcs" because the data store is nothing new - certainly not in my experience.<BR />
<BR />
Back in the day, even before the SAP Community Network was born (which was in 2003), there was a lot of activity and thinking around the theme of the Semantic Web, the idea that the content of what was stored and retrieved via HTTP could be described in a separate, rich, semantic layer that could bring meaning to entities on the Web. Meaning in terms of what types of things the resources represented, and meaning in terms of how they were related.<BR />
<BR />
This meaning was expressed in terms of nodes (the resources) and arcs (the relationships between those nodes), and the language that was used to describe these nodes and arcs was the Resource Description Framework (RDF), and the various ontological languages that were based on and used in conjunction with RDF (<A href="https://www.w3.org/OWL/" target="_blank" rel="nofollow noopener noreferrer">OWL</A> - the "Web Ontology Language" is one of the more well known of those, along with <A href="http://dublincore.org/" target="_blank" rel="nofollow noopener noreferrer">Dublin Core</A>).<BR />
<BR />
&nbsp;<BR />
<BR />
<IMG src="https://www.w3.org/2001/sw/RDFCore/Schema/200203/intro-example.jpg" alt="Image result for RDF example nodes arcs" /><BR />
<BR />
<EM>RDF nodes and arcs</EM><BR />
<BR />
&nbsp;<BR />
<BR />
I have been fascinated by RDF for a long time, and dabbled in various aspects in the early 2000's - see <A href="https://www.google.com/search?q=site%3Aqmacro.org+rdf" target="_blank" rel="nofollow noopener noreferrer">the RDF related posts on my blog</A> for some ramblings&nbsp;on that subject. Of course, RDF can be seen as one of the ancestors* of OData, which in a way is rather ironic.<BR />
<BR />
*RSS was originally an RDF-based language (RSS stood for RDF Site Summary at the time), Atom was a successor to RSS, and OData was an extension of Atom (along with the Atom Publishing Protocol). But that's a story for another time.<BR />
<BR />
&nbsp;<BR />
<BR />
<STRONG>RDF and graph databases</STRONG><BR />
<BR />
RDF information is expressed in so-called "triples" in the form:<BR />
<PRE><CODE>[subject] ---[predicate]---&gt; [object]</CODE></PRE><BR />
where "subject" and "object" entities are nodes and "predicates" are arcs - the lines between them. Triples are stored in "triplestores", and a more generalised form of a triplestore is ... wait for it ... a graph database.<BR />
<BR />
To me, there is a fundamental beauty in the tension between the simple structure of triples, and the unstructured, or perhaps unrestricted nature of what you can store with triples. It's quite far from the schema-restrained model of relational data stores. With a graph data store you can store information you hadn't planned for, and ask questions of the data that you could have never foreseen at the outset. You can imagine an ever-growing network of arcs and nodes, of differing types and properties, being added to a graph database, and new queries being made on that database, filtering on properties and relationships that weren't even around at the outset.<BR />
<BR />
GraphQL, as a data store, then, is rather powerful. There are of course other examples of graph data stores - one that comes to mind immediately is <A href="https://neo4j.com/" target="_blank" rel="nofollow noopener noreferrer">Neo4j</A>, which has been around for a long time.<BR />
<BR />
&nbsp;<BR />
<BR />
<A name="irony" target="_blank"></A><STRONG>Irony</STRONG><BR />
<BR />
Why is it ironic that RDF, with its closely related graph data store concept and link to GraphQL, is an ancestor of OData?<BR />
<BR />
Because when you move up the stack from the data store to the protocol, things could hardly be more different. Here's a quick summary of the major differences I see between OData and GraphQL, at a protocol level.<BR />
<DIV><BR />
<TABLE style="height: 53px" width="466"><BR />
<TBODY><BR />
<TR><BR />
<TD><STRONG>OData</STRONG></TD><BR />
<TD><STRONG>GraphQL</STRONG></TD><BR />
</TR><BR />
<TR><BR />
<TD>Treats HTTP as an application &nbsp;protocol and aims for rough parity between OData operations and HTTP methods</TD><BR />
<TD>Treats HTTP mainly as a transport protocol</TD><BR />
</TR><BR />
<TR><BR />
<TD>Operations are transparent at<BR />
an HTTP level</TD><BR />
<TD>Operations are opaque at an HTTP level</TD><BR />
</TR><BR />
<TR><BR />
<TD>Static schema-based data structures fixed at design time</TD><BR />
<TD>Dynamic schema-less data structures</TD><BR />
</TR><BR />
<TR><BR />
<TD>Fixed query options</TD><BR />
<TD>Powerful query options</TD><BR />
</TR><BR />
<TR><BR />
<TD>Easy to reason about from a security perspective</TD><BR />
<TD>Harder to reason about because of the opaque nature of the protocol implementation</TD><BR />
</TR><BR />
<TR><BR />
<TD>Endpoints that represent the business data</TD><BR />
<TD>Single endpoint that represents the query "socket"</TD><BR />
</TR><BR />
</TBODY><BR />
</TABLE><BR />
</DIV><BR />
&nbsp;<BR />
<BR />
In some ways GraphQL at the protocol level reminds me of web services. Not the entire WS-Deathstar panoply of specifications -- rather, the way that there's a single endpoint for all operations and all queries. This makes me somewhat uncomfortable. Not because it feels like a return to the bad old days of web services, but because it just doesn't feel right to me, as an advocate of what HTTP is (an application protocol and arguably the best example of a powerful, distributed web service, but that's a story for another time).<BR />
<BR />
&nbsp;<BR />
<BR />
<STRONG>Comparing and contrasting</STRONG><BR />
<BR />
The OData protocol treats data (entities) as first class citizens, &nbsp;in that it gives each resource a URL, a URL that can then be semantically described, a URL that is part of a near infinite set of resources (nouns), with a very finite and predictable set of methods (verbs). Moreover, it comes with a built-in metadata and annotation layer, which can be used by consuming clients to great effect.<BR />
<BR />
GraphQL, on the other hand, seems to treat data as merely the by-product of a query. If I want to point to some data which I want to describe with its own address, and then further annotate that (even at the RDF level, but perhaps that's going too far), I'm not sure how I'd do it with the GraphQL protocol.<BR />
<BR />
Talking of GraphQL queries, it would also seem that there's a URL encoding of the query which to my eyes is rather unappealing. Yes, URLs should be opaque, we've touched on that in a previous <A href="https://blogs.sap.com/tag/mondaymorningthoughts/" target="_blank" rel="noopener noreferrer">Monday morning thoughts</A> post, but I still maintain that there's a pragmatic aspect that means, at least for me, human readable URLs are super useful at the practical level.<BR />
<BR />
And talking of pragmatism and practicality, there's been a question about GraphQL implementation in SAP systems. The SAP systems with which I'm most acquainted -- the successors to the R/2 and R/3 line of products -- are based on a hierarchical database design, not a graph design. That's not to say that things can't change ... indeed, we moved from hierarchical to relational in the late 1980's when SAP introduced the support for IBM's (then) new relational data store DB/2, which eventually superseded IMS DB's hierarchical data store DL/1. Moreover, the power and simplicity that HANA brings is not graph store based, it's column store based. So I can't imagine any straightforward conversion any time soon, even if it was the right decision.<BR />
<BR />
That doesn't mean, however, that we can't embrace the ideas of GraphQL in different areas. While I can't imagine a straightforward replacement at the enterprise data store level, I can, for example, more easily imagine an annotation model in UI5 that would support data driven UIs with Fiori elements, based on a GraphQL powered backend.<BR />
<BR />
As I said at the start of this post, it's still very early days for me with GraphQL, and I have a lot more to learn. Rather than see GraphQL as any sort of competitor to the status quo, or as simply the new kid on the block that's better than anything that's been before, by default, I see GraphQL as something wonderful in how it challenges our thinking, reminds us of our past, and adds to the richness of how we consider data and protocol architecture at a high level.<BR />
<BR />
What are your thoughts about GraphQL and what it can bring to our architectural and development landscape? I'd love to hear what they are.<BR />
<BR />
&nbsp;<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2018/09/Screenshot-2018-09-03-at-11.00.56.png" /><BR />
<BR />
<EM>Our canal boat, moored this morning between Altrincham and Dunham Massey</EM><BR />
<BR />
&nbsp;<BR />
<BR />
This post was brought to you from the peace and quiet of a Monday morning here on the <A href="http://www.bridgewatercanal.co.uk/" target="_blank" rel="nofollow noopener noreferrer">Bridgewater Canal</A>, where I'm spending time on a canal boat with M on my birthday today.<BR />
<BR />
&nbsp;<BR />
<BR />
Read more posts in this series here:&nbsp;<A href="https://blogs.sap.com/tag/mondaymorningthoughts/" target="_blank" rel="noopener noreferrer">Monday morning thoughts</A>.<BR />
<BR />
&nbsp;<BR />
<BR />
<STRONG>Update 07 Sep 2018</STRONG>: This is the tweet from Chris Paine that started it off: <A href="https://twitter.com/wombling/status/1034949320519245824" target="_blank" rel="nofollow noopener noreferrer">https://twitter.com/wombling/status/1034949320519245824</A>, referring to a tweet by <A href="https://twitter.com/jeffhandley" target="_blank" rel="nofollow noopener noreferrer">Jeff Handley</A>.<BR />
<BR />
<STRONG>Update 14 Sep 2018</STRONG>: Jeff published a very interesting blog post yesterday: <A href="https://jeffhandley.com/2018-09-13/graphql-is-not-odata" target="_blank" rel="nofollow noopener noreferrer">GraphQL is not OData</A>. It's a super read, with lots of history and balanced thoughts, and I enjoyed it very much. I will have to read it at least one more time for the thoughts to sink in. I'd recommend it heartily.<BR />
<BR />
I certainly agree with the post's premise - GraphQL is certainly not OData, as you can see from Jeff's post, but perhaps also from this one. The key takeaway for me so far from Jeff's post (apart from the title) is that GraphQL and OData can actually live side by side, as GraphQL's fit seems to be as an intermediary. I need to think about that some more, but for now, let the conversation and education continue!<BR />
<BR />
&nbsp;<BR />
<BR />
&nbsp;<BR />
<BR />
&nbsp;
---
Monday morning thoughts: a good blog post
welcome-cornerblog-board
2018-08-27
https://community.sap.com/t5/welcome-corner-blog-posts/monday-morning-thoughts-a-good-blog-post/ba-p/13356547
2018-08-27-monday-morning-thoughts-a-good-blog-post
<EM>In this post, I think about what makes a good blog post, and also what writing such a post does for the author, too.&nbsp;</EM><BR />
<BR />
It's a bank holiday Monday today in England, and so of course it's raining*. I spent a bit of time earlier this morning perusing the news, marking blog posts that looked interesting additions to content for my <A href="https://blogs.sap.com/2018/06/04/monday-morning-thoughts-the-learning-continuum/" target="_blank" rel="noopener noreferrer">learning continuum</A>, and also looking at some draft blog posts here in the SAP Community.<BR />
<BR />
I've become involved in helping out with some moderation for blog posts (not "blogs"!) and have thereby have the chance to see what folks are writing in the early stages, and also what other, more experienced moderators are saying about those early stage drafts. It got me thinking about what makes a good blog post, and I thought I'd share those thoughts here.<BR />
<BR />
*but that's OK, <A href="https://twitter.com/qmacro/status/1033748664009797632" target="_blank" rel="nofollow noopener noreferrer">I do like the rain</A>.<BR />
<BR />
&nbsp;<BR />
<BR />
<A name="opinion" target="_blank"></A><STRONG>Opinion</STRONG><BR />
<BR />
Of course, these are just my opinions, yours may differ. But I think that's a generally useful ingredient for most posts - opinion, based on personal experience.<BR />
<BR />
There are many styles of post, but the ones I enjoy reading the most are those that educate &amp; entertain me, and also give me a bit of an insight into the thinking, and therefore the person, behind the words. That's not to say that your opinion must be something I or other readers agree with - the world is not black and white. If you write something that's not accurate, or where you appear to have got hold the wrong end of the stick, then someone's going to comment and put their side of the story, perhaps straightening things out, and so adding to the richness of the conversation.<BR />
<BR />
Nonetheless, opinions are nothing without substance - an opinion's worth is directly proportional to the thought process and experience directly behind it. So it follows that if you're going to offer your opinion, don't forget to include your reasons for that opinion.<BR />
<BR />
&nbsp;<BR />
<BR />
<A name="education" target="_blank"></A><B>Education</B><BR />
<BR />
In today's online world where everyone has a voice and can write about things, it's sometimes difficult to write about something that's not been written about before, even within the boundaries of the SAP Community. But that doesn't matter so much, as long as your post includes - implicitly or explicitly - content, or at least insight, that hasn't been shared before. If I read something about a subject in one post, my mind is looking out for another post on that same subject, but with perhaps a small proportion of different insight or context.<BR />
<BR />
The way I learn is in layers - I build up some core knowledge, often reading a post about a new subject, where&nbsp;often I don't fully understand the entire post's content. Then I read more posts on the same subject and, now comfortable with the backbone of what's being written about, can concentrate on the "delta" with each new post, helping me build a more complete picture and fill in some of the gaps from the first post. Then I read even more posts on the same subject and that's when a degree of richness starts to form, as I study a particular aspect of a subject a number of times, from different people, with different voices, experience and opinion, and that is very valuable to me.<BR />
<BR />
&nbsp;<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2018/08/Screen-Shot-2018-08-27-at-10.28.08.png" /><BR />
<BR />
<EM>I like to intersperse narrative with pictures, to break things up and give the reader's mind something to anchor around. I didn't have anything appropriate for the somewhat conceptual subject matter of this post, so here's a nice picture of a telegraph pole with the moon in the background.</EM><BR />
<BR />
&nbsp;<BR />
<BR />
<A name="clarity" target="_blank"></A><STRONG>Clarity</STRONG><BR />
<BR />
If you're going to write about something, it's good if you can make it worthwhile. Worth whose while? Well, first and foremost, make it worth your own while. If you don't, then you may be less inclined to focus on content and quality, and that's good for nobody. You may struggle to get the post published in a moderated context, you're less likely to hit that post button with a feeling of achievement, and you'll attract fewer comments and engagement generally. There are more benefits to making a post worth your own while, and I'll come to those in a minute.<BR />
<BR />
Naturally, you also want to aim to make the post worth your readers' while. Beyond giving them the benefit of your experience, the layering of your opinion and the appeal of educational prose, be sure to write clearly for them.<BR />
<BR />
Using good sentence structure, expressing a logical progression of thought, yes, all well and good. But for technical subjects, remember that not every reader will have the requisite amount of context to gain much from what you write. That doesn't disqualify them from reading your post - far from it. Help them by setting the scene. I find thinking about the right combination of <A href="https://underthecurve.github.io/jekyll/update/2016/12/29/hed-dek-led-graf.html" target="_blank" rel="nofollow noopener noreferrer">hed, dek and lede</A>&nbsp;very useful (I was first introduced to the concepts of heds, deks and ledes by <A href="http://radar.oreilly.com/2010/11/heds-deks-and-ledes.html" target="_blank" rel="nofollow noopener noreferrer">Jon Udell</A>). Not only does it help the reader "land" comfortably into your post, with the right antennae tuned, but it also helps you work out what you're going to say and stay on track while you work out how you're going to say it.<BR />
<BR />
&nbsp;<BR />
<BR />
<A name="learn" target="_blank"></A><STRONG>Learn something yourself</STRONG><BR />
<BR />
Another benefit of making a post worth your own while is that you learn something yourself. There's an idea that teaching something is often a really good way of making sure you know the subject well yourself. Properly committing information to paper, so to speak, is an act that requires precision of thought, conviction of opinions and a firm grasp of the details.<BR />
<BR />
I find that writing about a subject, regardless of how narrow or wide, forces me to ensure that I know what I'm talking about. The benefits are twofold - by writing about something you don't quite fully understand, you put yourself in the right frame of mind and in the right context for forming a complete picture, as you research the information for your post. A full understanding subsequently helps you write in a clear and concise way, too.<BR />
<BR />
Here's an example from a few years ago: <A href="https://blogs.sap.com/2013/11/29/custom-sorter-and-grouper/" target="_blank" rel="noopener noreferrer">Custom Sorting and Grouping</A>&nbsp;- researching the content for that post really cemented my understanding of the nuances of the subject I was writing about (relating to complex data binding features in UI5). I sort of had a general idea of the detail before I started writing that post, but by the time I'd finished, I'd really deepened and broadened my understanding.<BR />
<BR />
&nbsp;<BR />
<BR />
<A name="finalthoughts" target="_blank"></A><STRONG>Final thoughts</STRONG><BR />
<BR />
There are plenty more aspects to a good blog post, but if I covered them all, this would be a much longer affair. There are more basic angles such as writing coherently, taking care over terms and explanations, finding the right balance between screenshots and prose, and of course finding the right length.<BR />
<BR />
Avoid posts that are too short - it comes back to making it worthwhile for the reader - but equally avoid posts that are too long. That's subjective of course, but as a rule of thumb - if something is too long to read over a coffee or lunch break, then your readers might be less inclined to engage. Consider splitting a long piece into a series of shorter pieces, that are more manageable. I did this, for example, with my <A href="http://pipetree.com/qmacro/blog/2018/01/16/discovering-scp-workflow/" target="_blank" rel="nofollow noopener noreferrer">Discovering SCP Workflow</A> posts, and even then the individual posts are still on the long side.<BR />
<BR />
There are other aspects that should go without saying, so I'll end this piece with one bit of advice - find your voice, work on it, and enjoy the process. I've been blogging since 2000 and I'm still doing all those things.<BR />
<BR />
For more info on blogging on the SAP Community, it's worth having a read through the <A href="https://www.sap.com/community/about/rules-of-engagement.html" target="_blank" rel="noopener noreferrer">Rules Of Engagement</A>.<BR />
<BR />
&nbsp;<BR />
<BR />
This post was brought to you by a holiday Monday breakfast of black pudding and avocado, and the usual excellent <A href="https://www.pactcoffee.com/coffees/planalto" target="_blank" rel="nofollow noopener noreferrer">Pact Coffee Planalto</A>.<BR />
<BR />
&nbsp;<BR />
<BR />
Read more posts in this series here:&nbsp;<A href="https://blogs.sap.com/tag/mondaymorningthoughts/" target="_blank" rel="noopener noreferrer">Monday morning thoughts</A>.
---
Monday morning thoughts: OData
technology-blog-sap
2018-08-20
https://community.sap.com/t5/technology-blogs-by-sap/monday-morning-thoughts-odata/ba-p/13351220
2018-08-20-monday-morning-thoughts-odata
<EM>In this post, I think about OData, in particular where it came from and why it looks and acts like it does. I also consider why I think it was a good protocol for an organisation like SAP to embrace.</EM><BR />
<BR />
<STRONG><span class="lia-unicode-emoji" title=":speaker_high_volume:">ð</span>This post is also <A href="https://anchor.fm/tech-aloud/episodes/Monday-morning-thoughts-OData---20-Aug-2018---DJ-Adams-et0aot" target="_blank" rel="nofollow noopener noreferrer">available in audio format</A> on the <A href="https://anchor.fm/tech-aloud/" target="_blank" rel="nofollow noopener noreferrer">Tech Aloud podcast</A>.</STRONG><BR />
<BR />
OData. Or as some people write it (which causes me to gnash my teeth) "oData". Not as bad as "O'Data" as&nbsp;<SPAN class="mention-scrubbed">brenton.ocallaghan</SPAN>&nbsp;writes it, just to annoy me, though. Anyway, on a more serious note, I've been thinking about OData recently in the context of the fully formed and extensible CRUD+Q server that you can get for free with a small incantation of what seems to be magic in the form of the tools of the <A href="https://blogs.sap.com/tag/applicationprogrammingmodel/" target="_blank" rel="noopener noreferrer">Application Programming Model for SAP Cloud Platform</A>. I was also thinking about OData because of&nbsp;<SPAN class="mention-scrubbed">hobruche</SPAN>'s recent post "<A href="https://blogs.sap.com/2018/08/13/beauty-of-odata/" target="_blank" rel="noopener noreferrer">Beauty of OData</A>" - nice one Holger.<BR />
<BR />
&nbsp;<BR />
<BR />
<STRONG>OData fundamentals</STRONG><BR />
<BR />
OData is a protocol and a set of formats. It is strongly resource oriented, as opposed to service oriented, which to me as a fan of simplicity and RESTfulness is a very good thing. Consider Representational State Transfer (REST) as an architectural style, which it is, rather than a specific protocol (which it isn't), and you'll come across various design features that this style encompasses. For me, though, the key feature is the uniform interface - there are a small fixed number of verbs (OData operations) and an infinite set of nouns (resources) upon which the verbs operate. These OData operations map quite cleanly onto the HTTP methods that we know &amp; love, and understand at a semantic level:<BR />
<DIV><BR />
<TABLE><BR />
<TBODY><BR />
<TR><BR />
<TD><STRONG>OData operation</STRONG></TD><BR />
<TD><STRONG>HTTP method</STRONG></TD><BR />
</TR><BR />
<TR><BR />
<TD>C - Create</TD><BR />
<TD>POST</TD><BR />
</TR><BR />
<TR><BR />
<TD>R - Read</TD><BR />
<TD>GET</TD><BR />
</TR><BR />
<TR><BR />
<TD>U - Update</TD><BR />
<TD>PUT</TD><BR />
</TR><BR />
<TR><BR />
<TD>D - Delete</TD><BR />
<TD>DELETE</TD><BR />
</TR><BR />
<TR><BR />
<TD>Q - Query</TD><BR />
<TD>GET</TD><BR />
</TR><BR />
</TBODY><BR />
</TABLE><BR />
</DIV><BR />
&nbsp;<BR />
<BR />
There's more to this (e.g. the use of PATCH for merge semantics, or the batching of multiple operations within an HTTP POST request) but basically that's it. We have a standard set of CRUD+Q operations that cover the majority of use cases when thinking about the manipulation of resources. And for the edge cases where thinking in terms of resources and relationships between them would be too cumbersome, there's the function import mechanism (with which I have a love-hate relationship, as it's useful but also rather service oriented and therefore opaque).<BR />
<BR />
Beyond the protocol itself, there's the the shape of the data upon which the OData operations are carried out. I don't mean the format - that's separate, and multi-faceted too. OData formats, which relates to the RESTful idea of multiple possible <A href="https://qmacro.org/blog/posts/2009/08/20/coffeeshop-screencast:-http-conneg-resource-representations-and-json/" target="_blank" rel="nofollow noopener noreferrer">representations</A> of a resource, come in different flavours - predominantly XML and JSON based. What I mean with "shape" is how the data in OData resources is represented.<BR />
<BR />
One of the things I used to say a lot was that if something was important enough it should be addressable. More particularly, business data should be addressable in that elements should have addresses, not hidden behind some sort of opaque web services endpoint. In the case of an HTTP protocol like OData, these addresses are URLs. And the shape of the data can be seen in the way those URL addresses are made up*.<BR />
<BR />
*some absolute RESTful purists might argue that URLs should be opaque, that we should not imply meaning from their structure. That to me is a valid but extreme position, and there has to be a balance between the beautiful theory of absolute purity and the wonderful utility of real life pragmatism.<BR />
<BR />
And the shape of the data, which itself is uniform and predictable, allows this to happen. To understand what this shape is and how it works, I wanted to take a brief look at OData's origins.<BR />
<BR />
&nbsp;<BR />
<BR />
<STRONG>OData's origins</STRONG><BR />
<BR />
OData goes back further than you might think. Here's an image from a session on OData that I gave a few years ago:<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2018/08/Screen-Shot-2018-08-20-at-06.30.59.png" /><BR />
<BR />
<EM>The protohistory of OData</EM><BR />
<BR />
&nbsp;<BR />
<BR />
I'd suggest that if one looks at the big picture, OData's origins go back to 1995, with the advent of the Meta Content Framework (MCF). This was a format that was created by Ramanthan V Guha while working in Apple's Advanced Technology Group, and its application was in providing structured metadata about websites and other web-based data, providing a machine-readable version of information that humans dealt with.<BR />
<BR />
A few years later in 1999 Dan Libby worked with Guha at Netscape to produce the first version of a format that many of us still remember and perhaps a good portion of us still use, directly or indirectly - RSS. This first version of RSS built on the ideas of MCF and was specifically designed to be able to describe websites and in particular weblog style content - entries that were published over time, entries that had generally had a timestamp, a title, and some content. RSS was originally written to work with Netscape's "My Netscape Network" - to allow the combination of content from different sources (see <A href="https://github.com/simplepie/simplepie-ng/wiki/Spec:-RSS-0.9-(Netscape)" target="_blank" rel="nofollow noopener noreferrer">Spec: RSS 0.9 (Netscape)</A> for some background). RSS stood then for RDF Site Summary, as it used the Resource Description Framework (RDF) to provide the metadata language itself. (I have been <A href="https://qmacro.org/tags/rdf/" target="_blank" rel="nofollow noopener noreferrer">fascinated by RDF over the years</A>, but I'll leave that for another time.)<BR />
<BR />
I'll fast-forward through the period directly following this, as it involved changes to RSS as it suffered at the hands of competing factions, primarily caused by some parties unwilling to cooperate in an open process, and it wasn't particularly an altogether pleasant time (I remember, as I was around, close to the ongoing activities and knew some of the folks involved). But what did come out of this period was the almost inevitable fresh start at a new initiative, called Atom. Like RSS, the key to Atom was the structure with which weblog content was described, and actually the structure was very close indeed to what RSS looked like.<BR />
<BR />
An Atom feed, just like an RSS feed, was made up of some header information describing the weblog in general, and then a series of items representing the weblog posts themselves:<BR />
<PRE><CODE>header<BR />
&nbsp; item<BR />
&nbsp; item<BR />
&nbsp; ...</CODE></PRE><BR />
And like RSS feeds, Atom feeds - also for machine consumption - were made available in XML, in parallel to the HTML-based weblogs themselves, which of course were for human consumption.<BR />
<BR />
A few years later, in 2005, the Atom format became an Internet Engineering Task Force (IETF) standard, specifically&nbsp;<A href="https://tools.ietf.org/html/rfc4287" target="_blank" rel="nofollow noopener noreferrer">RFC 4287</A>, and became known as the Atom Syndication Format:<BR />
<BR />
<EM>"Atom is an XML-based document format that describes lists of related information known as "feeds". Feeds are composed of a number of items, known as "entries", each with an extensible set of attached metadata. For example, each entry has a title."</EM><BR />
<BR />
What was magic, though, was that in addition to this format, there was a fledgling protocol that was used to manipulate data described in this format. It was first created to enable remote authoring and maintenance of weblog posts - back in the day some folks liked to <A href="https://codex.wordpress.org/AtomPub" target="_blank" rel="nofollow noopener noreferrer">draft and publish posts in dedicated weblog clients</A>, which then needed to interact with the server that stored and served the weblogs themselves. This protocol was the Atom Publishing Protocol, "AtomPub" or APP for short, and a couple of years later in 2007 this also became an IETF standard,&nbsp;<A href="https://tools.ietf.org/html/rfc5023" target="_blank" rel="nofollow noopener noreferrer">RFC 5023</A>:<BR />
<BR />
<EM>"The Atom Publishing Protocol is an application-level protocol for publishing and editing Web Resources using HTTP [RFC2616] and XML 1.0 [REC-xml]. The protocol supports the creation of Web Resources and provides facilities for:</EM><BR />
<UL><BR />
 	<LI><EM>Collections: Sets of Resources, which can be retrieved in whole or</EM><BR />
<EM>in part.</EM></LI><BR />
 	<LI><EM>Services: Discovery and description of Collections.</EM></LI><BR />
 	<LI><EM>Editing: Creating, editing, and deleting Resources."</EM></LI><BR />
</UL><BR />
Is this starting to sound familiar, OData friends?<BR />
<BR />
Well, yes, of course it is. OData is exactly this - sets of resources, service discovery, and manipulation of individual entries.<BR />
<BR />
AtomPub and the Atom Syndication Format was <A href="https://bitworking.org/news/2006/04/Google_Data_APIs_Protocol" target="_blank" rel="nofollow noopener noreferrer">adopted by Google in its Google Data (GData) APIs Protocol</A> while this IETF formalisation was going on and the publish/subscribe protocol known as PubSubHubbub (now called <A href="https://en.wikipedia.org/wiki/WebSub" target="_blank" rel="nofollow noopener noreferrer">WebSub</A>) originally used Atom as a basis. And as we know, <A href="https://blogs.msdn.microsoft.com/odatateam/2007/07/18/welcome/" target="_blank" rel="nofollow noopener noreferrer">Microsoft embraced AtomPub</A> in the year it became an IETF standard and OData was born.<BR />
<BR />
Microsoft released the first three major versions of OData under the Open Specification Promise, and then OData was transferred to the guardianship of the&nbsp;Organization for the Advancement of Structured Information Standards (OASIS) and the rest is <A href="https://www.odata.org/" target="_blank" rel="nofollow noopener noreferrer">history</A>.<BR />
<BR />
&nbsp;<BR />
<BR />
<STRONG>Adoption at SAP</STRONG><BR />
<BR />
I remember an TechEd event quite a few years back (it may have been ten or more) where I had a conversation with a chap at SAP who had been one of the members of a group that had been searching for a data protocol to adopt to take SAP into a new era of interoperability and integration. After a lot of technical research they decided upon OData. It was an open standard, a standard with which they could get involved, alongside Microsoft, IBM and others. For example, in 2014 <A href="https://blogs.sap.com/2014/03/17/odata-40-is-now-an-oasis-standard/" target="_blank" rel="noopener noreferrer">OData version 4.0 was announced as an OASIS standard</A>.<BR />
<BR />
It was clear to me why such a standard was needed. In the aftermath of the <A href="https://en.wikipedia.org/wiki/List_of_web_service_specifications" target="_blank" rel="nofollow noopener noreferrer">WS-deathstar</A> implosion there was clearly a desire for simplicity, standardisation, openness, interoperability and perhaps above all (at least in my view) a need for something that humans could understand, as well as machines. The resource orientation approach has a combination of simplicity, power, utility and beauty that is reflected in (or by) the web as a whole. One could argue that the World Wide Web is the best example of a hugely distributed web service, but that's a discussion for another time.<BR />
<BR />
OData has constraints that make for consistent and predictable service designs - if you've seen one OData service you've seen them all. And it passes the tyre-kicking test, in that the <EM>tyres are there for you to kick</EM> - to explore an OData service using read and query operations all you need is your browser.<BR />
<BR />
OData's adoption at SAP is paying off big time. From the consistencies in what we see across various SAP system surfaces, especially in the SAP Cloud Platform environment, through the simple ability to eschew the OData flavour itself and navigate OData resources as simple HTTP resources (how often have I seen UI5 apps retrieving OData resources and plonking the results into a JSON model?) to the crazy (but cool) ability to consume OData from other tools such as Excel. (Why you'd want to use these tools is a complete mystery to me, but that's yet another story for another time, one best told down the pub.)<BR />
<BR />
If you do one thing before your next coffee, have a quick look at an OData service. The Northwind service maintained by OASIS will do nicely. Have a look at the <A href="https://services.odata.org/V2/Northwind/Northwind.svc/" target="_blank" rel="nofollow noopener noreferrer">service document</A>&nbsp;and, say, the <A href="https://services.odata.org/V2/Northwind/Northwind.svc/Products" target="_blank" rel="nofollow noopener noreferrer">Products collection</A>.<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2018/08/Screen-Shot-2018-08-20-at-07.51.43.png" /><BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2018/08/Screen-Shot-2018-08-20-at-07.50.35.png" /><BR />
<BR />
<EM>Excerpts from the service document and from the Products collection</EM><BR />
<BR />
&nbsp;<BR />
<BR />
Notice how rich and present Atom's ancestry is in OData today. In the service document, entity sets are described as collections, and the Atom standard is referenced directly in the "atom" XML namespace prefix. In the Products entity set, notice that the root XML element is "feed", an Atom construct (we refer to weblog Atom and RSS "feeds") and the product entities are "entry" elements, also a direct Atom construct.<BR />
<BR />
Today's business API interoperability and open standards are built upon a long history of collaboration and invention.<BR />
<BR />
&nbsp;<BR />
<BR />
This post was brought to you by <A href="https://www.pactcoffee.com/coffees/planalto" target="_blank" rel="nofollow noopener noreferrer">Pact Coffee's Planalto</A>&nbsp;and the delivery of the milk by the milkman even earlier than usual.<BR />
<BR />
&nbsp;<BR />
<BR />
Read more posts in this series here:&nbsp;<A href="https://blogs.sap.com/tag/mondaymorningthoughts/" target="_blank" rel="noopener noreferrer">Monday morning thoughts</A>.<BR />
<BR />
&nbsp;
---
Monday morning thoughts: the cloud is the computer
technology-blog-sap
2018-08-13
https://community.sap.com/t5/technology-blogs-by-sap/monday-morning-thoughts-the-cloud-is-the-computer/ba-p/13383893
2018-08-13-monday-morning-thoughts-the-cloud-is-the-computer
<EM>In this post, I think about what the future of programming in an enterprise environment might look like, and realise that it makes sense to consider that the cloud itself is the new computer.</EM><BR />
<BR />
Sun Microsystems, an incredibly venerable hardware and software company from back in the day, is the creator, directly or indirectly, of some of the technologies &amp; ideas we still use today.&nbsp;These technologies include the Network File System (NFS), Java, XML and even the ultimate editor, vi, originally written by one of Sun's co-founders Bill Joy. Sun's Solaris was one of the many Unix flavours upon which R/3 was made available.<BR />
<BR />
Sun's motto was "The Network Is The Computer" which resonated and inspired at the time. I guess this motto has been at the back of my mind the whole time, but I'd posit that perhaps the phrase "the cloud is the computer" is becoming more appropriate today.<BR />
<BR />
&nbsp;<BR />
<BR />
<STRONG>The future of programming</STRONG><BR />
<BR />
This weekend I watched a very interesting talk by Chris Granger called "<A href="https://www.youtube.com/watch?v=zQo4jUVWI_I" target="_blank" rel="nofollow noopener noreferrer">What does programming look like in 10 years?</A>". Chris is someone who has written some very interesting experimental software, notably (for me) <A href="http://lighttable.com/" target="_blank" rel="nofollow noopener noreferrer">Light Table</A>, a "next generation" code editor with many features including inline evaluation of code, as you type. This idea is more common today than it was back then - I use it in often in the form of the excellent <A href="https://quokkajs.com/" target="_blank" rel="nofollow noopener noreferrer">Quokka</A>&nbsp;editor plugin, it's also a core feature of the <A href="https://ramdajs.com/repl/" target="_blank" rel="nofollow noopener noreferrer">Ramda REPL</A>&nbsp;where you can explore seriously good functional programming in JavaScript, and in fact the latest version of Chrome, version 68, has <A href="https://developers.google.com/web/updates/2018/05/devtools#eagerevaluation" target="_blank" rel="nofollow noopener noreferrer">eager evaluation</A> built into the console.<BR />
<BR />
<IMG src="http://www.chris-granger.com/images/050/watches.png" alt="Image result for lighttable" width="587" height="343" /><BR />
<BR />
<EM>A screenshot of <A href="http://www.chris-granger.com/2013/08/22/light-table-050/" target="_blank" rel="nofollow noopener noreferrer">Light Table 0.5.0</A>&nbsp;showing the results of inline evaluation, the feature also known as "instarepl"&nbsp;&nbsp;</EM><BR />
<BR />
&nbsp;<BR />
<BR />
Light Table was one of many programming environments that Chris has explored over the years, and this talk is a great way to see some of the radical and wonderful ideas that he has built out into prototypes.<BR />
<BR />
Anyway, the talk caused me to think about what the future of programming in the enterprise space, particularly in the SAP ecosphere, might look like in 10 years time, and I was minded to think about the shape that is becoming the surface upon which, the target against which, we will be writing code.<BR />
<BR />
&nbsp;<BR />
<BR />
<STRONG>Where we came from, where we are now</STRONG><BR />
<BR />
Mindful of where some of us started, with R/2, there was a single monolith, <A href="http://wiki.c2.com/?MyGodItsFullOfStars" target="_blank" rel="nofollow noopener noreferrer">full of stars</A>. Everything we programmed got executed inside that monolith. Moving to the SAP R/3 architecture we did indeed see a shift to a more client-server architecture, although essentially there were still mini-monoliths in the form of ABAP stacks - after all, this was the pre-HANA era when it was anathema to treat the database as anything other than a data store - certainly not an execution environment (I think this was perhaps as much to do with portability as well as the mechanics of complex table definitions inherited from the R/2 era - think clusters and pools).<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2018/08/Screen-Shot-2018-08-13-at-08.15.17.png" /><BR />
<BR />
<EM>Programming R/2, courtesy of 2001 A Space Odyssey</EM><BR />
<BR />
&nbsp;<BR />
<BR />
Today we have an array of environments, both on-prem and in the cloud. Think about software-as-a-service (SaaS) environments like SuccessFactors and S/4HANA Cloud, about R/3 architecture systems still running in company specific or managed data centres, and the undulating surface of virtual runtime platforms: entire virtual machines (VMs), downscaled VMs in the form of containers, and - perhaps most radically - the concept of serverless computing.<BR />
<BR />
To many of us serverless means functions-as-a-service (FaaS). This is not incorrect, but it's more than that. Functions bristle with potential, but ultimately are useless without a context, without an environment, without a raison d'Ãªtre. There is of course a beauty to be had in the idea of a function with a single purpose, that does one thing, does it well, that wakes up to perform and then sleeps again until it's needed again. It allows us to dream that little bit closer to one academic ideal of the Lambda Calculus, which relates to defining functions that contain only a single expression*.<BR />
<BR />
By the way,&nbsp;for more thoughts on serverless, functions-as-a-service and the event fabric, see another post in this <A href="https://blogs.sap.com/tag/mondaymorningthoughts/" target="_blank" rel="noopener noreferrer">Monday morning thoughts series</A> - "<A href="https://blogs.sap.com/2018/05/14/functions-what-functions/" target="_blank" rel="noopener noreferrer">Functions, what functions?</A>".<BR />
<BR />
*I had a very interesting conversation yesterday with my fellow <A href="http://langram.org/" target="_blank" rel="nofollow noopener noreferrer">Language Rambling</A> writer&nbsp;<SPAN class="mention-scrubbed">chris.whealy</SPAN>&nbsp;yesterday about this academic ideal, in relation to his activities around <A href="https://twitter.com/LogaRhythm/status/1027867611902689280" target="_blank" rel="nofollow noopener noreferrer">writing succinct and functional JavaScript</A>&nbsp;in preparation for SAP TechEd.<BR />
<BR />
&nbsp;<BR />
<BR />
<STRONG>A rich diversity</STRONG><BR />
<BR />
So where we are now is at a place that is as varied as it is virtual, as diverse as it is ephemeral. The axiom "thou shalt not modify standard SAP code" is stronger than ever the closer we get to the SaaS model. Taking that first, what does that mean for building custom and focused solutions to business problems? Well, on the one hand it means building extensions and net new apps that reach into the SaaS world via well-defined APIs (this is where the <A href="https://api.sap.com/" target="_blank" rel="noopener noreferrer">SAP API Business Hub</A> comes in). That much is certain.<BR />
<BR />
Moreover, it also means writing exits and custom code at well-known extension points, in an "in-app" style, with development work where it's hard to say whether what you're doing is programming or configuring. This reminds me of something that came up briefly in my conversation with&nbsp;<SPAN class="mention-scrubbed">uxkjaer</SPAN>&nbsp;and&nbsp;Former Member&nbsp;in the <A href="https://anchor.fm/sap-community-podcast/episodes/Episode-1---Interview-with-DJ-Adams-e1ac40" target="_blank" rel="nofollow noopener noreferrer">inaugural SAP Coffee Corner episode</A> earlier this year.<BR />
<BR />
But this is not where it ends. Not only do we need to customise the user interface, or enhance functionality inside standard solutions, or create apps that business users need to interact with and reach into their core processes enshrined therein, we also need a way to orchestrate and participate in the general bloodflow of data and processes. How do we do this? In the form of events, messaging and functions.<BR />
<BR />
The idea of the publish/subscribe (pubsub) message pattern is certainly not new - I even remember building pubsub mechanisms in Jabber (XMPP) back in the early 2000's, as well as experimenting with <A href="https://www.youtube.com/watch?v=1E_1B8TD6Kw&amp;list=PLfctWmgNyOIcbRYRdPrbjN_ZM56Kc5YTL" target="_blank" rel="nofollow noopener noreferrer">coffeeshop</A>. And of course since then there's been <A href="https://en.wikipedia.org/wiki/WebSub" target="_blank" rel="nofollow noopener noreferrer">PubSubHubbub, now WebHub</A>, and many other incarnations of the pubsub idea, but in the new world of today and tomorrow's business computing environments, pubsub has a lot more relevance.<BR />
<BR />
What are the aspects of pubsub that are important here? Well, aspects that are similar to those in the serverless world. In fact, one might consider that pubsub and serverless share the same genes. And what exactly is this increased relevance for us as programmers? Think of the events that happen in business systems, and how we can connect with them. What are the different types of events, what shape do they come in? How do we react to them? How do we orchestrate and control what happens, and when? How can we manage the events, the messages, that are emitted and received by various participants in a constellation of systems, services &amp; platforms that make up a complete business solution? The answers to these questions and more are to be found in the serverless context, and I think it's fair to say that we'll be seeing the results of hard work in this area from SAP in the very near future.<BR />
<BR />
&nbsp;<BR />
<BR />
<STRONG>The cloud is the computer</STRONG><BR />
<BR />
Considering all of this, in the context of wondering what the future of programming will be like in building tomorrow's enterprise solutions, causes me to think about what exactly my target programming environment actually is. The answer is "all of the above". Backend services, frontend consumption apps, discrete functions that alternately fire and sleep, events that are emitted, queued and controlled, exposed layers of configuration that can be tweaked and customised, exits that can be activated and code supplied thereto, routines in the data layer that can be triggered.<BR />
<BR />
<IMG src="https://upload.wikimedia.org/wikipedia/commons/thumb/b/b9/Stormclouds.jpg/800px-Stormclouds.jpg" alt="File:Stormclouds.jpg" width="445" height="296" /><BR />
<BR />
<EM>Stormclouds, courtesy of <A href="https://commons.wikimedia.org/wiki/File:Stormclouds.jpg" target="_blank" rel="nofollow noopener noreferrer">Wikimedia Commons</A></EM><BR />
<BR />
&nbsp;<BR />
<BR />
When I think about all of this, when I think about what I am programming *on*, it's the cloud. Even if some of the system constellation elements are actually on-prem, they're still satellites to and connected with the breathing, living, amorphous being that is the cloud. And so I must conclude that when I think about the future of programming, I am compelled to conclude that in a virtual sense, and perhaps a real sense, the cloud is the computer.<BR />
<BR />
&nbsp;<BR />
<BR />
This post was brought to you on an early rainy Monday morning in Manchester by <A href="https://www.pactcoffee.com/coffees/ubumwe-kigoma" target="_blank" rel="nofollow noopener noreferrer">Pact Coffee's Ubumwe Kigoma</A> and new desktop background pictures courtesy of <A href="https://twitter.com/70sscifiart" target="_blank" rel="nofollow noopener noreferrer">70s Sci-Fi Art</A>.<BR />
<BR />
&nbsp;<BR />
<BR />
Read more posts in this series here:&nbsp;<A href="https://blogs.sap.com/tag/mondaymorningthoughts/" target="_blank" rel="noopener noreferrer">Monday morning thoughts</A>.<BR />
<BR />
&nbsp;<BR />
<BR />
&nbsp;
---
Monday morning thoughts: mainframes and message documentation
technology-blog-sap
2018-08-06
https://community.sap.com/t5/technology-blogs-by-sap/monday-morning-thoughts-mainframes-and-message-documentation/ba-p/13375699
2018-08-06-monday-morning-thoughts-mainframes-and-message-documentation
<EM>In this post, I think about mainframes and a message documentation aspect from the mainframe world that, while originally proprietary, is a big plus for operators and developers alike and something I'd love to see return.</EM><BR />
<BR />
On my route into Manchester for Saturday's run with the <A href="http://mikkellerrunningclub.dk/chapters/manchester/" target="_blank" rel="nofollow noopener noreferrer">Mikkeller Running Club Manchester chapter</A>&nbsp;I listened to an InfoQ interview: <A href="https://www.infoq.com/podcasts/adrian-cockcroft" target="_blank" rel="nofollow noopener noreferrer">Adrian Cockcroft on Microservices, Terraservices [sic] and Serverless Computing</A>. From 2016, it's a great interview conducted by Wesley Reisz, and contains much to ponder even today.<BR />
<BR />
<STRONG>Teraservices and mainframes</STRONG><BR />
<BR />
One of the subjects covered was "teraservices", starting around 17 minutes into the audio recording. I didn't really know what they were until Adrian explained; basically, they're services at the opposite end of the scale to microservices. You know the sort of thing:<BR />
<PRE><CODE>smaller &lt;-- pico nano micro milli ~~ kilo mega giga tera --&gt; larger</CODE></PRE><BR />
The irony of the misspelling in the InfoQ title makes me smile - the word "terra" (rather than tera) means ground, or earth in Latin, which couldn't be further from where these services have their home - in the cloud.<BR />
<BR />
Teraservices run in memory sizes far greater than microservices. Adrian made the comparison between microservices running in 100 megabytes of RAM and teraservices running in 2 terabytes of RAM, on machines available by the hour on Amazon Web Services.<BR />
<BR />
I'd like to think that the advent of in-memory data storage and processing with HANA and the corresponding demand for machines with super large memory footprints has pushed the industry to the point where terabyte-sized machines are available as commodities in the cloud today. Adrian and Wesley laughed about things turning full circle (towards the mainframe era) and running a whole bunch of services on one "great hulking machine". Making effective use of such a machine would involve using the internal memory as a communications backplane between all the containers running in that machine, a backplane much faster than any network-based backplane would allow.<BR />
<BR />
And yes, it does remind me* of the mainframe era in general. But more specifically, making best use of specialised hardware for giant workloads is what mainframes are all about.<BR />
<BR />
*Of course, I've written about the mainframe era before, when thinking about web terminals and the cloud in general in an earlier post in this&nbsp;<A href="https://blogs.sap.com/tag/mondaymorningthoughts/" target="_blank" rel="noopener noreferrer">Monday morning thoughts</A> series: "<A href="https://blogs.sap.com/2018/04/16/monday-morning-thoughts-upload-download-in-a-cloud-native-world/" target="_blank" rel="noopener noreferrer">upload / download in a cloud native world</A>", and way back beyond then too: "<A href="https://qmacro.org/2009/09/09/mainframes-and-the-cloud-everything-old-is-new-again/" target="_blank" rel="nofollow noopener noreferrer">Mainframes and the cloud - everything old is new again</A>".<BR />
<BR />
I read somewhere that the computing industry* cycle is at the decade scale - in other words, ideas and concepts come around and are (re)invented every ten years or so. I think the cycle is a little longer than that, but a cycle does exist. On the one hand, mainframes never really went away - they're still handling a large part of the world's transactional processing in specific sectors such as banking and airline industries. On the other hand, the conscious shift away from mainframes in enterprise computing in the early 90's is now perhaps being reflected, like an echoing musical phrase that comes later in the piece, by a move to the cloud ... perhaps it's fair to say that the general idea of mainframes are back, albeit in a different guise.<BR />
<BR />
*and not just the computing industry - companies today are looking at "insourcing", where a decade ago they were falling over themselves to outsource a lot of their processes.<BR />
<BR />
&nbsp;<BR />
<BR />
<STRONG>The IBM documentation machine</STRONG><BR />
<BR />
After leaving university in 1987 I started work at Esso Petroleum in London, and joined the Database Support Group. Esso was an IBM mainframe shop (I'd *just missed* the punched card era, which was a shame, on reflection) and in the data centre, sixty miles away out in Abingdon, Oxfordshire, there were IBM 3090 series mainframes running version of MVS - first MVS/XA and then MVS/ESA. While the machines were remote, the documentation was local, in the form of huge printed tomes that hung from their spine on a rack system, in a special documentation room.<BR />
<BR />
I have visceral memories of spending time in that room, selecting the right tome, carefully unhooking it from the rack (they were usually hundreds of pages each and quite heavy), opening it up on the desk and finding, invariably, exactly what I was looking for. Then getting sidetracked and spending more time than my initial investigations required me to, looking through related documentation and, discovering new worlds of related information.<BR />
<BR />
&nbsp;<BR />
<BR />
<STRONG>Message identification and documentation</STRONG><BR />
<BR />
What I remember the most though is how thoroughly messages were documented. Not just that, but how the messages were actually organised and catalogued. Messages were issued on consoles, and in batch job log output, for example, and each message was prefixed with the message ID, identifying the subsystem, the actual message number and the severity. Over time, I found myself being able to just glance at the "pattern" of messages in a job log, and discern, without much further investigation, what had happened.<BR />
<BR />
Even more impressive - and useful - than just the consistent identification of messages was the actual message documentation itself. Taking a printout of a job log, say, to the documentation room, I'd reach for one of the MVS system messages volumes and look up the documentation for the message identification specified. I'd find not just a rehashing of the message line, in a different format, but a decent and full description, thoughtfully and accurately written, and where there was relevant action required, an explanation of what we needed to do.<BR />
<BR />
My memory might be rose-tinted today, but I honestly can't think of an area of IBM big iron computing in that facility that was a mystery. Everything that happened was described in messages, every message was identified, and every identified message was documented in great detail.<BR />
<BR />
I've recently started carving out a little bit of time again for <A href="http://www.hercules-390.org/" target="_blank" rel="nofollow noopener noreferrer">Hercules</A>, the open source System/370, ESA/390, and z/Architecture emulator (I've played around with Hercules before: see the post <A href="https://qmacro.org/2005/05/30/turnkey-mvs-38j-on-hercules-s370-screenshot/" target="_blank" rel="nofollow noopener noreferrer">Turnkey MVS 3.8J on Hercules S/370 Screenshot</A> from 2005).<BR />
<BR />
More specifically, I've been looking at Juergen Winklemann's <A href="http://wotho.ethz.ch/tk4-/" target="_blank" rel="nofollow noopener noreferrer">TK4- turnkey distribution of MVS 3.8j</A> (a version of MVS that is now in the public domain). I powered up an emulated 3033 IBM mainframe and watched the Initial Program Load (IPL) sequence on the console before logging in.<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2018/08/Screen-Shot-2018-08-06-at-09.12.50.png" /><BR />
<BR />
<EM>Messages in an unattended console of an emulated IBM 3033 mainframe, and a connected 3270 session</EM><BR />
<BR />
&nbsp;<BR />
<BR />
Here's a really simple example of what I mean about message identification and documentation. Looking at the first two messages at the top of the display in the screenshot, we have:<BR />
<PRE><CODE>IEF236I ALLOC. FOR JES2 JES2<BR />
IEF237I 00E&nbsp; ALLOCATED TO PRINTER1</CODE></PRE><BR />
Both message identifiers show that the messages belong to the IEF family, which is for events relating to IPL, Job Entry Subsystem (JES) and scheduler services, and more (see the <A href="https://www.ibm.com/support/knowledgecenter/en/SSLTBW_2.1.0/com.ibm.zos.v2r1.ieam100/msgpre.htm" target="_blank" rel="nofollow noopener noreferrer">z/OS Message Directory</A>&nbsp;for more information). We're pointed to the system messages volume 8 (IEF-IGD), the older equivalent of which would have been hanging in that documentation room all those decades ago.<BR />
<BR />
This is the page from the volume that contains documentation for IEF236I:<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2018/08/Screen-Shot-2018-08-06-at-09.22.59.png" /><BR />
<BR />
Just look at the richness and precise nature of the information on that page. That volume (IEF-IGD) is almost 1000 pages in length, by the way.<BR />
<BR />
You can imagine that with some patience, a desire to master the very explicit skill of navigating &amp; using the IBM documentation, and some naus, there were few problems that occurred that you couldn't fathom. Everything was there, if you only took the time to find it and read it.<BR />
<BR />
&nbsp;<BR />
<BR />
<STRONG>A proprietary plus</STRONG><BR />
<BR />
One of the reasons why this was possible, of course, was because IBM dominated the market, and was large enough to cause customers to buy wall-to-wall IBM hardware and software. "No-one got fired for buying IBM" was the phrase. Their dominance and size &amp; breadth of offerings made it possible to produce such a wonderfully rich layer of information, the likes of which I have never seen since, not even close.<BR />
<BR />
The proprietary nature of that era meant that everything that one did as an operator, systems programmer or developer was within the context of what IBM produced. The word "proprietary" has now taken on negative tones, and there are good reasons for that. But I'd posit that one big plus from the proprietary circumstances in this age was that this was documentation done right. It shows that it's possible to build complex systems and subsystems and make them understandable at an operations level. One could argue, as well, that message documentation was more important when the source code wasn't available. But the availability of source code only helps a small percentage of those working with systems like this, and doesn't excuse good documentation.<BR />
<BR />
Today's open source world is wonderful and a major reason why we've progressed so much in terms of computing, research and enterprise. The nature of open source means, indirectly, that the kind of documentation that existed for the complex array of subsystems of an IBM facility is unlikely to be produced for the systems that we're building today. We take best of breed products, tools and processes and glue them together, and it's more or less guaranteed that the operator surface area is so disparate and disconnected that a uniform -- dare I say ivory tower -- approach to consistent documentation, even a consistent way to output and identify error messages, is not going to happen without some sort of massive concerted effort.<BR />
<BR />
One other thing that only occurred to me this morning while writing this - the messages being output on the console of my emulated 3033 mainframe from decades ago are documented in modern PDF-based files for IBM's z/OS series. <EM>They are the same messages, and are still relevant today</EM>. Now if that's not solid consistency I don't know what is.<BR />
<BR />
I yearn for the days when messages were consistent, easy to identify and read, and were documented to within an inch of their life. It's one aspect of the first mainframe era that I'd love to see revived in the second mainframe era. What's not to like?<BR />
<BR />
&nbsp;<BR />
<BR />
This post was brought to you by today's quiet run in the dawn light that rose on a new week, and by the happy nostalgia that looking through old IBM documentation (<A href="http://bitsavers.org/pdf/ibm/" target="_blank" rel="nofollow noopener noreferrer">available at bitsavers</A>) brings.<BR />
<BR />
&nbsp;<BR />
<BR />
Read more posts in this series here:&nbsp;<A href="https://blogs.sap.com/tag/mondaymorningthoughts/" target="_blank" rel="noopener noreferrer">Monday morning thoughts</A>.
---
Monday morning thoughts: local http servers and containerisation
technology-blog-sap
2018-07-30
https://community.sap.com/t5/technology-blogs-by-sap/monday-morning-thoughts-local-http-servers-and-containerisation/ba-p/13368372
2018-07-30-monday-morning-thoughts-local-http-servers-and-containerisation
<EM>In this post, I look back on an idea surfaced by a hero of mine, and think about how that idea laid the path for today's containerisation initiatives.</EM><BR />
<BR />
One of the periodicals I eagerly anticipated and regularly devoured every month, starting in the 1980's, was Byte magazine. From the fanciful and inventive artwork on the covers (many pieces by <A href="https://en.wikipedia.org/wiki/Robert_Tinney" target="_blank" rel="nofollow noopener noreferrer">Robert Tinney</A>), through the regular columns to the special subjects that were covered from time to time, I enjoyed the pioneering spirit and wonderful ideas that poured out of the pages.<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2018/07/Screen-Shot-2018-07-30-at-05.46.58.png" height="303" width="226" /><BR />
<BR />
One of my all time tech heroes&nbsp;<A href="http://jonudell.net/" target="_blank" rel="nofollow noopener noreferrer">Jon Udell</A>&nbsp;wrote regularly for Byte, and I had the honour of meeting him at O'Reilly's Open Source Convention (OSCON) back in the early 2000's.<BR />
<BR />
&nbsp;<BR />
<BR />
<STRONG>Client and server</STRONG><BR />
<BR />
The idea in one of the articles Jon wrote (and there were many - see his list of <A href="http://jonudell.net/bytecols/" target="_blank" rel="nofollow noopener noreferrer">1999-2002 BYTE.com columns</A> for example) has stayed with me since I read it. You have to remember that it was at a time when the web was young, and there was a clear distinction between client and server. On our workstations we ran clients - web browsers such as Netscape Navigator, and even <A href="https://arstechnica.com/information-technology/2011/10/before-netscape-forgotten-web-browsers-of-the-early-1990s/" target="_blank" rel="nofollow noopener noreferrer">earlier examples</A> such as Mosaic and Cello.<BR />
<BR />
It was a given that web servers (very often in the form of <A href="https://en.wikipedia.org/wiki/Apache_HTTP_Server" target="_blank" rel="nofollow noopener noreferrer">httpd</A> - Apache's web server software) ran on, well, servers, and that was that. Our traditional mindset was very much oriented around the concepts of client and server, not least since SAP released R/3 in 1992, a firmly client-server architecture in contrast to what we'd been used to before that with R/2.<BR />
<BR />
&nbsp;<BR />
<BR />
<STRONG>Local web servers</STRONG><BR />
<BR />
So when Jon wrote about the idea of a service running directly on one's local workstation, based around a local web server, it was something pretty new. The concept of pointing our local web browsers at a web server running <EM>on the same host</EM> - that was a light bulb moment for sure. Typing "localhost" into the URL address bar invoked a small degree of excitement, as if we were doing something ever so slightly futuristic. Sure, we'd used the file scheme (file:///) to load local static resources before, but to be able to interact with a service, especially a <A href="https://en.wikipedia.org/wiki/Common_Gateway_Interface" target="_blank" rel="nofollow noopener noreferrer">Common Gateway Interface</A> (CGI)* based service that we could control and alter, that was something almost magical.<BR />
<BR />
*I'm reminded of the venerable Internet Transaction Server (ITS) which has been the subject of fond reminiscences recently on Twitter. The ITS was essentially two components, the "agate" and the "wgate". The "wgate" (web gateway) came in various flavours, according to the web server APIs of the day. One was the generic CGI flavour, which was my favourite as I'd been building web based interfaces to SAP systems for quite a while before the ITS, using CGI and the <A href="https://help.sap.com/saphelp_nw73/helpdata/en/48/a88c805134307de10000000a42189b/frameset.htm" target="_blank" rel="noopener noreferrer">RFCSDK</A>. But I digress.<BR />
<BR />
&nbsp;<BR />
<BR />
<STRONG>Discrete and portable services</STRONG><BR />
<BR />
What that concept of a local web server did was democratise HTTP. Of course, the web itself was already pretty democratic - anyone with a plain text editor could create content with HTML, and learn how to create that content by looking at the source of existing content. But the ability, and more so the idea that anyone could run web servers locally, to serve up small services, single-purpose user interfaces, was rather enlightening.<BR />
<BR />
The idea of running a web server locally broke down the traditionally strict separation of client and server, broke down the conceptual barriers between what you ran on your workstation and what ran on servers that you couldn't see. Suddenly we were considering services that ran locally. Services that we spoke to over HTTP, that nearly always had a web-based interface, could now run locally. Once you'd seen the word "localhost" in that URL bar, you couldn't unsee it.<BR />
<BR />
And so began, at least for me, the idea that there was really little distinction between client and server. Services that you or others built could run locally or remotely. What mattered was that you talked to them, in some cases administered them, via your web browser. The only difference was that the hostname in the URL was different.<BR />
<BR />
What's more, running services locally like this became easier as more and more software producers and hobbyists offered bundles that were easy to install - whether because the target OS made it easy, or that the bundle itself was portable. Love or loathe the Java language itself, it's hard to deny the early portability of code provided by the real triumph of Java - the Java Virtual Machine (JVM). Download a Java archive, run it, and connect to the service you've just instantiated by specifying "localhost" and some port number*&nbsp;in your browser.<BR />
<BR />
*the port number was usually above 1024, as getting a service to listen on port numbers lower than that <A href="https://www.w3.org/Daemon/User/Installation/PrivilegedPorts.html" target="_blank" rel="nofollow noopener noreferrer">requires root privileges</A>.<BR />
<BR />
&nbsp;<BR />
<BR />
<STRONG>From portable services to containers</STRONG><BR />
<BR />
I was reminded this weekend of the concept of the near ubiquity of portable services fronted by web-based interfaces in a video I was watching on <A href="https://www.youtube.com/watch?v=zcC7iwbbEdc" target="_blank" rel="nofollow noopener noreferrer">Kafka and PCF Dev</A>. PCF Dev is a local Cloud Foundry installation for development purposes - I'll leave the musing on how this idea adds to the concepts of this post's subject as an exercise for the reader.<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2018/07/Screen-Shot-2018-07-30-at-06.41.31.png" height="185" width="528" /><BR />
<BR />
The Kafka service had a web interface that displayed stats on schemas, topics, connections and more. The fact that I couldn't work out whether the address in the URL bar (which you can see in the video) was something directly local or in a container (it was at least a <A href="https://www.youtube.com/watch?v=zcC7iwbbEdc" target="_blank" rel="nofollow noopener noreferrer">private address</A>) drove home the idea that discrete services and containers were in this context one and the same thing.<BR />
<BR />
Today we take for granted the concept of containers, whether those containers are explicit and managed by a local (or remote) Docker system, or whether they're ephemeral and practically conceptual in the context of the Cloud Foundry environment on the SAP Cloud Platform. But I think that the journey we're taking towards the realisation of an enterprise compute fabric has been influenced by fundamental ideas that appeared decades ago.<BR />
<BR />
Moreover, the very existence of tools like PCF Dev underlines the idea that there really is no distinction between client and server. Or rather, that workstations and cloud resources alike can be platforms to run these discrete, modular services. And as we expand the idea of what compute means, bringing in concepts such as serverless, that reduce to a minimum the idea of a unit of computation, we realise that perhaps the journey that started back in the days of Byte is far from over.<BR />
<BR />
&nbsp;<BR />
<BR />
<STRONG>The new pioneering spirit</STRONG><BR />
<BR />
I for one am genuinely intrigued and excited by the prospect and reality of cloud native computing, and what we are doing in the SAP world in that area - take a look at&nbsp;<SPAN class="mention-scrubbed">bjoern.goerke</SPAN>'s post "<A href="https://blogs.sap.com/2018/07/24/sap-cloud-platform-an-open-enterprise-platform-with-a-cloud-native-core/" target="_blank" rel="noopener noreferrer">SAP Cloud Platform: An open enterprise platform with a cloud-native core</A>" for examples of what open source and partnership initiatives are taking place in this area right now. I have a feeling that there's a pioneering spirit still very fresh in this age, and am looking forward to seeing where it takes us.<BR />
<BR />
&nbsp;<BR />
<BR />
This post was brought to you by <A href="https://www.pactcoffee.com/coffees/ubumwe-kigoma" target="_blank" rel="nofollow noopener noreferrer">Pact Coffee's Ubumwe Kigoma</A> and the odd feeling of not going out on a Monday dawn due to an enforced rest from running to give my tired legs a chance to recover.<BR />
<BR />
&nbsp;<BR />
<BR />
Read more posts in this series here: <A href="https://blogs.sap.com/tag/mondaymorningthoughts/" target="_blank" rel="noopener noreferrer">Monday morning thoughts</A>.
---
Monday morning thoughts: what not how
technology-blog-sap
2018-07-23
https://community.sap.com/t5/technology-blogs-by-sap/monday-morning-thoughts-what-not-how/ba-p/13361296
2018-07-23-monday-morning-thoughts-what-not-how
<EM>In this post, I think about how we program, about the way we describe what it is that we want the computer to do for us, and look at what has become for me the canonical example of the difference between 'what' and 'how'.</EM><BR />
<BR />
Over the past week, three worlds have collided, in a most pleasing way. First, I've been digging a little bit more into the powerful <A href="https://help.sap.com/viewer/65de2977205c403bbc107264b8eccf4b/Cloud/en-US/c94d921f740e4c66a15924fb53933eef.html" target="_blank" rel="noopener noreferrer">data model definition abstraction of Core Data Services</A>&nbsp;(CDS), following on from last week's post in this <A href="https://blogs.sap.com/tag/mondaymorningthoughts/" target="_blank" rel="noopener noreferrer">Monday morning thoughts series</A>, on <A href="https://blogs.sap.com/2018/07/16/monday-morning-thoughts-abstraction/" target="_blank" rel="noopener noreferrer">abstraction</A>.<BR />
<BR />
Then, in browsing the content of my bookshelves, I came across a copy of a wonderful course on SAP assembler macro programming, called IT400 and written by Peter Skov.<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2018/07/Screen-Shot-2018-07-23-at-06.55.09.png" height="448" width="321" /><BR />
<BR />
(I'd lost my original copy; this new copy was courtesy of&nbsp;<SPAN class="mention-scrubbed">chris.whealy</SPAN>, a good friend and fellow curious companion - he is one half of our shared blog <A href="http://langram.org/" target="_blank" rel="nofollow noopener noreferrer">Language Ramblings</A>, which you may wish to peruse at some stage).<BR />
<BR />
Finally, at the end of last week, I was honoured to be able to present a remote session at <A href="https://openui5.org/ui5conblr/" target="_blank" rel="nofollow noopener noreferrer">UI5con Bangalore</A>, and I chose to speak about an introduction to functional programming techniques in JavaScript, given that is the native language of the UI5 toolkit.<BR />
<BR />
&nbsp;<BR />
<BR />
<STRONG>Level of communication</STRONG><BR />
<BR />
These three things have something in common. Each relates to the way we communicate. Communicate to machines primarily, but actually to our fellow workers too. Although one might say that was the other way around - I read somewhere recently that only 10% of a programmer's time is spent writing code. The other 90% is spent reading it. Trying to understand the logic, the intent and the general complexities of other people's code. In some cases, of their own code, weeks or months later!<BR />
<BR />
There's a digression about code comments, how quickly they can go stale, and how unit testing is perhaps a better alternative for describing what code does, because the unit tests and the code cannot diverge in meaning or intent, like comments and code can do - this was a point made in the recent SAP Coffee Corner Radio podcast episode 4: "<A href="https://anchor.fm/sap-community-podcast/episodes/Episode-4-ABAP---The-Special-Snowflake-with-Nigel--Graham-e1qds0/a-a1ptlh" target="_blank" rel="nofollow noopener noreferrer">ABAP - The Special Snowflake</A> with <SPAN class="mention-scrubbed">nigel.james</SPAN> and <SPAN class="mention-scrubbed">graham.robinson</SPAN>". But I'll leave that for another time.<BR />
<BR />
With CDS, the purity of abstraction is very evident with how data models are described. With the three-entity bookshop example&nbsp;in the <A href="https://help.sap.com/viewer/65de2977205c403bbc107264b8eccf4b/Cloud/en-US/5ec8c983a0bf43b4a13186fcf59015fc.html" target="_blank" rel="noopener noreferrer">Getting Started tutorial</A>, even non-CDS initiates can understand the intent, even the detail, of what's written. Moreover, how the definitions and relationships are implemented - in a database-specific way - are not important at this level. The beauty of this is that it allows the extension of definitions to other models in a high-level and natural way. (If you're interested in learning more about this, see&nbsp;<SPAN class="mention-scrubbed">oliver.welzel</SPAN>'s post "<A href="https://blogs.sap.com/2018/06/27/itelo-a-sample-business-application-for-the-new-application-programming-model-for-sap-cloud-platform" target="_blank" rel="noopener noreferrer">ITelO â A Sample Business Application for the new Application Programming Model for SAP Cloud Platform</A>".)<BR />
<BR />
In contrast, one cannot help but feel close to the machine when writing assembler. The first assembler I learnt was 6502, alongside Atom Basic - you could <A href="http://www.acornatom.nl/atom_handleidingen/atap/atap02.html" target="_blank" rel="nofollow noopener noreferrer">intertwine the two languages</A> in a single program, for the Acorn Atom, which was one of the many features that made the Atom both quirky and much loved. With 6502 assembler or the mainframe <A href="https://en.wikipedia.org/wiki/IBM_Basic_assembly_language_and_successors" target="_blank" rel="nofollow noopener noreferrer">370 assembly language</A>&nbsp;upon which the R/2 systems that I worked with was based (and the subject of the IT400 course), while you felt close to the machine, you were very far away from your fellow programmers and an abstract layer of intent.<BR />
<BR />
You had to spell out exactly how you want the machine to go about some task, detailing the smallest and most mundane aspects - register storage and management, byte or word level processing, and so on. While of course a fellow programmer could read your code and understand it, it would take a while. Then again, with paper based forms being the equivalent of the activities we perform today with the Correction and Transport System (CTS) or any sort of Continuous Integration (CI) setup, everything moved slower anyway.<BR />
<BR />
And so we come to the subject of Friday's session at UI5con Bangalore. It's a session I've given before in a number of different forms - at SAP TechEd in 2016 (DEV219 "Building More Stable Business Apps with Functional Techniques in JavaScript"), at UI5con in 2016 ("An Introduction to Functional Techniques in JavaScript for UI5") and at UI5con@SAP in 2017 and 2018 in the form of a longer hands-on workshop "Functional programming for your UI5 apps"). It was for the hands-on format that I created a 20 page worksheet which is available for all online:<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2018/07/Screen-Shot-2018-07-23-at-06.53.35.png" height="399" width="283" /><BR />
<BR />
<A href="http://bit.ly/qmacro-ui5con-funcprog" target="_blank" rel="nofollow noopener noreferrer">Functional Programming for your UI5 Apps - Hands-On Worksheet</A><BR />
<BR />
&nbsp;<BR />
<BR />
<STRONG>The difference between how and what</STRONG><BR />
<BR />
In Part 1 of this worksheet I show the contrast between a low level, mechanical way to do something in JavaScript, and a higher level more abstract way. Moving from a "how you want the machine to do something" to a "what you want" is for me an underlying theme of functional programming, or at least a favourable by-product. Let's dive into the example that I use.<BR />
<BR />
We have a complex data structure of entities and samples for those entities (relating to the <A href="https://sapui5.hana.ondemand.com/explored.html" target="_blank" rel="nofollow noopener noreferrer">UI5 Explored app</A>, in case you're curious) and want to count the number of samples for the entities in a particular namespace. Here's the traditional way of doing it:<BR />
<PRE class="language-javascript"><CODE>var total = 0;<BR />
for (var i = 0; i &lt; aEntities.length; i++) {<BR />
    var mEntity = aEntities[i];<BR />
    if (mEntity.namespace === "sap.ui.core") {<BR />
        total = total + mEntity.sampleCount;<BR />
    }<BR />
}<BR />
</CODE></PRE><BR />
This for loop construction is not particular to JavaScript. The ideas expressed here, in the way we explain to the machine how to do something, can be found in very similar forms in <A href="https://en.wikipedia.org/wiki/For_loop#Timeline_of_the_for-loop_syntax_in_various_programming_languages" target="_blank" rel="nofollow noopener noreferrer">many other languages</A>. Beyond the fact that we're mutating state (worse: mutating state outside the computation block, but let's not go there), the key issue here is that even in this very simple form, there's a lot going on, and it's all rather mechanical.<BR />
<BR />
We're telling the machine *how* to go about checking each item in the aEntities array, giving it a lot of help with the use of the "i" variable to act as an incrementing array index. Doesn't that strike you as rather low-level? There are similar constructs in the C language, and one could argue that C is as close to assembler as you can get without being assembler.<BR />
<BR />
Surely there's a way to do this without telling the machine how to process an array of items, without thinking at the level of language implementation?<BR />
<BR />
Well, there is. Consider this equivalent:<BR />
<PRE class="language-javascript"><CODE>aEntities<BR />
  .filter(x =&gt; x.namespace === "sap.ui.core")<BR />
  .reduce((a, x) =&gt; a + x.sampleCount, 0)<BR />
</CODE></PRE><BR />
We can "say" this out loud as follows:<BR />
<UL><BR />
 	<LI>take the array of entities</LI><BR />
 	<LI>filter them down to those whose namespace is "sap.ui.core"</LI><BR />
 	<LI>fold* the filtered entities together, accumulating the "sampleCount" property values</LI><BR />
</UL><BR />
*I'm deliberately using the word "fold" here because that is what reduce is called in other functional languages. But that too is a digression for another time.<BR />
<BR />
At this level of abstraction, we're thinking not in terms of mechanics, not in terms of instructing the machine how to go about working through a list of things one explicitly indexed item at a time. In the previous example we're creating multiple variables that stay around after we've finished (and therefore things that we may have to now keep track of in our head when spending that 90% reading code). We're doing that because we're having to instruct the machine *how* to go about getting to the result.<BR />
<BR />
In this second example, we have none of that. No variables (save for those in the transient and anonymous helper functions that we pass to filter and reduce respectively), and certainly no plodding instructions about how to process a list of items.<BR />
<BR />
Instead, we are expressing *what* we want, in a higher level language. We don't care how the array gets processed, we leave that to the language implementation*. List machinery is built in and comes for free with this more functional approach. In fact, if you're interested in implicit list machinery like this, you might want to have a read of my post "<A href="http://langram.org/2017/02/19/the-beauty-of-recursion-and-list-machinery/" target="_blank" rel="nofollow noopener noreferrer">The beauty of recursion and list machinery</A>" over on Language Ramblings.<BR />
<BR />
*if you're wondering about performance, it's not to say that the implementation of this intent is not done in a way that parallels the for-loop, internally.<BR />
<BR />
I think there are powerful reasons for abstractions like those we find in functional programming and those we find in CDS, and one of those reasons relates to how we should perhaps constantly look to make things easier for ourselves, using the power of machinery to do the grunt work for us. Striving for the ability to express ourselves better, to talk in terms of what we want, rather than how to go about getting it, is surely a way we progress.<BR />
<BR />
&nbsp;<BR />
<BR />
This post was brought to you by <A href="https://www.pactcoffee.com/coffees/villa-rubiela-espresso" target="_blank" rel="nofollow noopener noreferrer">Pact Coffee's Villa Rubiela</A> and the peace and quiet of a very early (and damp) Monday morning in Manchester.<BR />
<BR />
&nbsp;<BR />
<BR />
Read more posts in this series here:&nbsp;<A href="https://blogs.sap.com/tag/mondaymorningthoughts/" target="_blank" rel="noopener noreferrer">Monday morning thoughts</A>.<BR />
<BR />
&nbsp;<BR />
<BR />
<STRONG>Update 03 Aug</STRONG>: There's now a <A href="https://www.youtube.com/watch?v=R8Z25evYw0o&amp;list=PLHUs_FUbq4dWi0NJg0o6-ztQ2lFgbfS5z&amp;t=0s&amp;index=6" target="_blank" rel="nofollow noopener noreferrer">recording of my remote session</A> "Functional programming for you UI5 apps" available, a cut-down version of the worksheet in the form of a presentation. The recording is one in a whole series of recordings from the UI5con Bangalore event.<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2018/07/Screen-Shot-2018-08-03-at-06.04.09.png" /><BR />
<BR />
&nbsp;
---
Monday morning thoughts: abstraction
technology-blog-sap
2018-07-16
https://community.sap.com/t5/technology-blogs-by-sap/monday-morning-thoughts-abstraction/ba-p/13356245
2018-07-16-monday-morning-thoughts-abstraction
<EM>In this post, I think about abstraction, the power and facility it affords, and consider CDS as one example of a modern abstraction language.</EM><BR />
<BR />
Last week I was chatting to some old friends. One of them had just remarked that Google was now considered the world's fourth largest hardware manufacturer. Some feat, considering hardware manufacture was really only a by-product. I added to the conversation by offering my memories of IBM being regarded, back in the mid to late 80's, as the world's largest publisher. Again, some feat, considering publishing documentation was a by-product of producing hardware and software.<BR />
<BR />
<STRONG>The early days</STRONG><BR />
<BR />
The happy memories from the early days of my career, memories of being alone with the wonderfully detailed technical information in the documentation room at work, with reference manuals as thick as your fist hanging vertically from racks, like giant paper bats in a cathedral, made me think of the early days of my work hacking on SAP R/2 implementations on the IBM mainframes running MVS/XA and IMS DB/DC.<BR />
<BR />
One of a few aspects that I remember the most about R/2 was the fact the assembler-based core of R/2 was, as far as I could see, a thing of beauty (it's where I took my online nickname "qmacro" from, by the way). In addition, there were subsystems and layers in R/2 that looked like facilities on MVS and in IMS, but were different. The spooling subsystem. The database layer. The job scheduling system. All facilities that were available natively on the IBM platform. But abstracted. It finally clicked when I got the chance to work on an R/2 system in Germany that was based on Siemens hardware, running not MVS, but <A href="https://en.wikipedia.org/wiki/BS2000" target="_blank" rel="nofollow noopener noreferrer">BS/2000</A> - an operating system from that hardware manufacturer. Everything seemed familiar, and the facilities for spooling, job scheduling and accessing the database were the same (and I had no idea how they worked natively on BS/2000).<BR />
<BR />
Another aspect from early on in my SAP career was the young ABAP language, built for writing reports. A key statement was "GET", which took a segment identifier (the equivalent of a database structure at a certain level - for example "GET MARA" relates to the retrieval of the top level material master data). It took some time for me to realise that the "GET" wasn't imperative; rather, it was the event-based hook to declare some activity if and when MARA segments were made available, by the underlying database read program. (If you want to read a little more about how these GET statements were reactive rather than proactive, have a look at this blog post from 2003: "<A href="https://blogs.sap.com/2003/11/13/food-for-thought-ldbs-and-abap-objects/" target="_blank" rel="noopener noreferrer">Food for thought: LDBs and ABAP Objects</A>".) Here too I experienced a level of abstraction, not having to worry about how or where the data segments came from.<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2018/07/Screen-Shot-2018-07-16-at-09.31.47.png" /><BR />
<BR />
<EM>Piet Mondrian's "Abstraction", from the collection of Kimbell Art Museum, <A href="https://artsandculture.google.com/asset/abstraction/agEBp4wD28aSfg" target="_blank" rel="nofollow noopener noreferrer">via Google Arts &amp; Culture</A></EM><BR />
<BR />
&nbsp;<BR />
<BR />
<STRONG>A fundamental lesson</STRONG><BR />
<BR />
The common thread here is of course that the surface of interaction for me and my colleagues was not tied to individual -- and different -- layers underneath. Once logged on, I could access data, write reports, send report output to a printer, without knowing or caring about the operating system or hardware underneath. The lesson I learned was that abstraction is a powerful and empowering concept.<BR />
<BR />
Since then I've been aware of abstraction layers, more consciously than subconsciously. Everywhere I look, there are abstractions. Not just in computing, but in life generally. I'm half tempted to talk about the reasons why Unix became so popular, because of the portability afforded to it by the C language, but I'll leave that for another time, perhaps. Instead, I'll mention something that occurred to me on <A href="https://twitter.com/qmacro/status/1018729969470582785" target="_blank" rel="nofollow noopener noreferrer">my run this morning</A>&nbsp;instead. The spoken word is also an abstraction. That seems obvious when you say it out loud, as it were. But the concept of a common "high level" language like English closely parallels programming languages. The hardware, or wetware, upon which the language is eventually processed, varies wildly (are intangible concepts are processed and understood the same way in each of us, without us even being aware of the differences between us?). Above this wild variation, however, the common level of communication, of abstraction, is the language in which we speak* to each other.<BR />
<BR />
*I'm wondering if this language abstraction layer will change when we eventually get direct access to each others brains, in a similar way to how the soldiers in the&nbsp;<A href="https://en.wikipedia.org/wiki/Old_Man%27s_War" target="_blank" rel="nofollow noopener noreferrer">Old Man's War</A> science fiction novel series communicate via their Brain Pals.<BR />
<BR />
The thing that made me smile was the realisation that just as we have dialects of English, so we also have dialects of programming languages. Look at the myriad dialects of BASIC, or LISP, for example. A question for us to ponder: languages that compile to other languages, like the family of language like ClojureScript, TypeScript, Dart and Elm - are they extreme dialects of JavaScript or something more?<BR />
<BR />
Anyway, I digress.<BR />
<BR />
<STRONG>Core Data Services (CDS)</STRONG><BR />
<BR />
It's that subject again, isn't it? I was perusing the <A href="https://help.sap.com/viewer/65de2977205c403bbc107264b8eccf4b/Cloud/en-US/855e00bd559742a3b8276fbed4af1008.html" target="_blank" rel="noopener noreferrer">CDS language reference</A> yesterday with an early morning coffee, and what struck me was the rich expressiveness.<BR />
<BR />
I'd already started to get acquainted with the various target compilation flavours from early experimentation, such as compiling CDS entity definitions from the <A href="https://help.sap.com/viewer/65de2977205c403bbc107264b8eccf4b/Cloud/en-US/8e6468092318414391ac3f53e62a5c68.html" target="_blank" rel="noopener noreferrer">canonical Books, Authors and Orders entity definitions</A>&nbsp;into SQL statements to create a persistence layer in a traditional RDBMS system:<BR />
<PRE class="language-markup"><CODE>i347491@C02W52RKHV2Q:~/local/projects/bookshop <BR />
=&gt; cds compile db/data-model.cds -2 sql<BR />
<BR />
CREATE TABLE my_bookshop_Orders (<BR />
   ID nvarchar(36),<BR />
   book_ID integer,<BR />
   buyer nvarchar(111),<BR />
   date datetime,<BR />
   amount integer,<BR />
   PRIMARY KEY (ID)<BR />
); <BR />
<BR />
CREATE TABLE my_bookshop_Authors (<BR />
   ID integer,<BR />
   name nvarchar(111),<BR />
   PRIMARY KEY (ID)<BR />
); <BR />
<BR />
CREATE TABLE my_bookshop_Books (<BR />
   ID integer,<BR />
   title nvarchar(111),<BR />
   author_ID integer,<BR />
   stock integer,<BR />
   PRIMARY KEY (ID)<BR />
); <BR />
<BR />
<BR />
i347491@C02W52RKHV2Q:~/local/projects/bookshop <BR />
=&gt; <BR />
</CODE></PRE><BR />
or even compiling the <A href="https://help.sap.com/viewer/65de2977205c403bbc107264b8eccf4b/Cloud/en-US/8e6468092318414391ac3f53e62a5c68.html" target="_blank" rel="noopener noreferrer">corresponding service definition</A>&nbsp;to the Swagger OpenAPI format (I found a reference to "swgr" being an output target by looking through the CDS compiler's source code):<BR />
<PRE class="language-markup"><CODE>i347491@C02W52RKHV2Q:~/local/projects/bookshop <BR />
=&gt; cds compile srv/cat-service.cds -2 swgr<BR />
CatalogService: <BR />
  openapi: 3.0.0<BR />
  info: {version: "", title: CatalogService}<BR />
  paths: {}<BR />
  components: <BR />
    schemas: <BR />
      Books: <BR />
        properties: <BR />
          ID: {type: integer, format: int32}<BR />
          title: {type: string}<BR />
          author: {'$ref': "#/components/schemas/Authors"}<BR />
          stock: {type: integer, format: int32}<BR />
      Error: <BR />
        required: [code, message]<BR />
        properties: {code: {type: integer, format: int32}, message: {type: string}}<BR />
      Authors: <BR />
        properties: <BR />
          ID: {type: integer, format: int32}<BR />
          name: {type: string}<BR />
          books: {type: array, items: {'$ref': "#/components/schemas/Books"}}<BR />
      Orders: <BR />
        properties: <BR />
          ID: {type: string, format: uuid}<BR />
          book: {'$ref': "#/components/schemas/Books"}<BR />
          buyer: {type: string}<BR />
          date: {type: string, format: date-time}<BR />
          amount: {type: integer, format: int32}<BR />
i347491@C02W52RKHV2Q:~/local/projects/bookshop <BR />
=&gt; <BR />
</CODE></PRE><BR />
Already we're seeing the power of abstraction at work here. CDS is a language independent of the backend persistence layer (a service provided by anything from HANA to SQLite) but also independent of the service layer - given that OData is a key open protocols of choice, we have EDMX as well as Swagger.<BR />
<BR />
<STRONG>An abstraction layer language for the cloud</STRONG><BR />
<BR />
But there's more. Like the English language with its various dialects, CDS offers a rich and powerful expressiveness, with its <A href="https://help.sap.com/viewer/65de2977205c403bbc107264b8eccf4b/Cloud/en-US/4fab1e2be122466d83fd7b84676945de.html" target="_blank" rel="noopener noreferrer">annotations</A>&nbsp;and <A href="https://help.sap.com/viewer/65de2977205c403bbc107264b8eccf4b/Cloud/en-US/40582e7bbeca4311b0b165c8b9745094.html" target="_blank" rel="noopener noreferrer">aspects</A> as two examples I would like to dig into and understand better.<BR />
<BR />
It seems to me that as we move to the SAP Cloud Platform, as we embrace the myriad tools, platforms, runtimes, procotols and techniques that make themselves available to us, a rich seam of abstraction that allows us to talk about, discuss, collaborate on and build (or generate) components across the layers is very much something of value. And CDS has all the makings of that abstraction.<BR />
<BR />
It's been working well for us thus far (in the ABAP stack and beyond, as&nbsp;<SPAN class="mention-scrubbed">se38</SPAN>&nbsp;and many others have been saying for a while) and it can continue to help us as we grow from our roots below ground, with stems and blossoms reaching up to the clouds.<BR />
<BR />
&nbsp;<BR />
<BR />
This post was brought to you today by a peaceful run through an east Manchester dawn, and <A href="https://www.pactcoffee.com/coffees/villa-rubiela-espresso" target="_blank" rel="nofollow noopener noreferrer">Pact Coffee's Villa Rubiela Espresso</A>.<BR />
<BR />
&nbsp;<BR />
<BR />
Read more posts in this series here:&nbsp;<A href="https://blogs.sap.com/tag/mondaymorningthoughts/" target="_blank" rel="noopener noreferrer">Monday morning thoughts</A>.
---
Monday morning thoughts: curiosity and understanding
technology-blog-sap
2018-07-09
https://community.sap.com/t5/technology-blogs-by-sap/monday-morning-thoughts-curiosity-and-understanding/ba-p/13386230
2018-07-09-monday-morning-thoughts-curiosity-and-understanding
<EM>In this post, I think about how curiosity can lead to a better understanding of things, and give a specific example concerning CDS and the new Application Programming Model for SAP Cloud Platform.</EM><BR />
<BR />
On Friday I tweeted something that seemed to capture the interest of some:<BR />
<BR />
<A href="https://twitter.com/qmacro/status/1015254046079422465" target="test_blank" rel="nofollow noopener noreferrer">https://twitter.com/qmacro/status/1015254046079422465</A><BR />
<BR />
It was a discovery that was the result of a natural curiosity which I think is part of my DNA, and I suspect a part of many folks' DNA here in the SAP Community. With the advent of new technologies, I've often wondered how things work, wondered about the underlying themes or features that have been put together to form a greater whole. It's like when you get a new device, and the first thing you do is to turn it around, upside down, to look at the ports, and open it up to see what's inside.<BR />
<BR />
<STRONG>Digging in</STRONG><BR />
<BR />
This curiosity has been especially prevalent in my various roles in the SAP technology ecosphere. It's driven me to look deeper into things, dive below the surface, primarily to find out how things work, but equally to understand what the creators were thinking and why they made the design decisions that they did. As a result, I've gained clarity, enjoyed a richer understanding, and perhaps most subtly improved my view of the bigger picture.<BR />
<BR />
Merely asking myself "why" and "how" more often than not results in a comprehension that really helps me. Not always directly - there are plenty of occasions where I've "felt" something was the right direction, or the wrong direction, not because of some innate sixth sense, but because of the layers of information I've unearthed by digging in, trying to get to the bottom of how certain things are put together.<BR />
<BR />
And so it was on Friday. It was the end of the day, and the end of a long week, and a good opportunity to "reward myself" with a bit of time to look into something that had been nagging me for a few weeks.<BR />
<BR />
<STRONG>The Application Programming Model and CDS</STRONG><BR />
<BR />
I've written about these subjects in this <A href="https://blogs.sap.com/tag/mondaymorningthoughts/" target="_blank" rel="noopener noreferrer">Monday morning thoughts series</A> before. In fact, I have two posts, one on <A href="https://blogs.sap.com/2018/06/25/monday-morning-thoughts-programming-models/" target="_blank" rel="noopener noreferrer">programming models</A> and one on <A href="https://blogs.sap.com/2018/06/11/monday-morning-thoughts-core-data-services/" target="_blank" rel="noopener noreferrer">CDS</A>. I'm fascinated by the fact that now I'm wearing my CDS tinted spectacles I can see it everywhere. And I was intrigued by the Application Programming Model's&nbsp;<A href="https://help.sap.com/viewer/65de2977205c403bbc107264b8eccf4b/Cloud/en-US/5ec8c983a0bf43b4a13186fcf59015fc.html" target="_blank" rel="noopener noreferrer">Getting Started tutorial</A>, in particular what was going on behind the scenes - what was the SAP Web IDE doing for us as we progressed, what was being generated, and perhaps most relevant for this post - *how*.<BR />
<BR />
I decided to dig in a little and let my curiosity loose. Here's a part of the journey I took, which resulted in the tweet.<BR />
<BR />
The tutorial starts off in the "Start a Project" step with generating a project using the template wizard, specifically choosing the "SAP Cloud Platform Business Application". Notably, there's quite an array of artefacts that appear from the get-go in the generated project. I was curious about these, what they were, and where they came from, particularly the db/data-model.cds and srv/my-service.cds files and perhaps moreso the outermost package.json file, which contained this:<BR />
<PRE class="language-javascript"><CODE>{<BR />
	"name": "my.app",<BR />
	"description": "A simple data model for SAP CP application",<BR />
	"version": "1.0.0",<BR />
	"dependencies": {<BR />
		"@sap/cds": "2.x"<BR />
	},<BR />
<BR />
	"scripts": {<BR />
		"build": "cds build --clean"<BR />
	},<BR />
	"private": true<BR />
}</CODE></PRE><BR />
There's an SAP NPM (Node Package Manager) registry at <A href="https://npm.sap.com" target="test_blank" rel="noopener noreferrer">https://npm.sap.com</A> - I remember reading about it in a post from&nbsp;<SPAN class="mention-scrubbed">sven.kohlhaas</SPAN>&nbsp;last year: "<A href="https://blogs.sap.com/2017/05/16/sap-npm-registry-launched-making-the-lives-of-node.js-developers-easier/" target="_blank" rel="noopener noreferrer">SAP NPM Registry launched: Making the lives of Node.js developers easier</A>".<BR />
<BR />
Moreover, I had seen, when previously going through the tutorial steps, that in the "Compile OData Models" step of the tutorial, I saw output appear in the SAP Web IDE console like this:<BR />
<PRE class="language-markup"><CODE>7:31:05 AM (CDS) Using language server v1.4.10 and compiler v1.0.30<BR />
<BR />
[...]<BR />
<BR />
7:32:52 AM (DIBuild) Build of /bookshop in progress<BR />
7:33:03 AM (DIBuild) [INFO] Injecting source code into builder...<BR />
[INFO] Source code injection finished<BR />
[INFO] ------------------------------------------------------------------------<BR />
npm install<BR />
added 20 packages from 8 contributors in 0.809s<BR />
npm run build<BR />
<BR />
&gt; my.app@1.0.0 build /home/vcap/app/.java-buildpack/tomcat/temp/builder/sap.cds.mta/builds/build-253077567018682723/bookshop<BR />
&gt; cds build --clean<BR />
<BR />
This is CDS 2.3.2, Compiler 1.0.30, Home: node_modules/@sap/cds<BR />
<BR />
Compiled 'db/data-model.cds' to  <BR />
  db/src/gen/.hdinamespace  <BR />
  db/src/gen/CATALOGSERVICE_AUTHORS.hdbcds  <BR />
  db/src/gen/CATALOGSERVICE_BOOKS.hdbcds  <BR />
  db/src/gen/CATALOGSERVICE_ORDERS.hdbcds  <BR />
  db/src/gen/MY_BOOKSHOP_AUTHORS.hdbcds  <BR />
  db/src/gen/MY_BOOKSHOP_BOOKS.hdbcds  <BR />
  db/src/gen/MY_BOOKSHOP_ORDERS.hdbcds<BR />
Compiled 'srv/my-service.cds' to  <BR />
  srv/src/main/resources/edmx/CatalogService.xml  <BR />
  srv/src/main/resources/edmx/csn.json<BR />
<BR />
CDS return code: 0<BR />
7:33:16 AM (DIBuild) ********** End of /bookshop Build Log **********<BR />
</CODE></PRE><BR />
Indeed, that first message "(CDS) Using language server ..." had kicked off my thoughts in the <A href="https://blogs.sap.com/2018/06/11/monday-morning-thoughts-core-data-services/" target="_blank" rel="noopener noreferrer">Monday morning thoughts post on Core Data Services</A>.<BR />
<BR />
Staring long enough at that output, it appears that the "Build CDS" command in the SAP Web IDE triggered some sort of npm based process.<BR />
<BR />
<STRONG>Challenge accepted</STRONG><BR />
<BR />
Could it be that I could find the&nbsp;<a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a>/cds package in the NPM registry, install it manually in a terminal session, and get to where I was here in the SAP Web IDE, but independent of it?<BR />
<BR />
The answer was yes.<BR />
<BR />
In my NPM configuration file (~/.npmrc) I have only a single setting:<BR />
<PRE class="language-markup"><CODE>prefix=/Users/i347491/.npm-packages</CODE></PRE><BR />
This means that globally installed packages end up there, rather than some directory controlled by root, so I can avoid all that <A href="http://hitchhikers.wikia.com/wiki/Infinite_Improbability_Drive" target="_blank" rel="nofollow noopener noreferrer">tedious mucking about in hyperspace</A> aka sudo-ing to root.<BR />
<BR />
Anyway, I added the SAP NPM registry to my config, crossed my fingers, and asked for a global install of the&nbsp;<a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a>/cds package:<BR />
<PRE class="language-c"><CODE>i347491@C02W52RKHV2Q:~<BR />
=&gt; npm config set @sap:registry <A href="https://npm.sap.com" target="test_blank" rel="noopener noreferrer">https://npm.sap.com</A><BR />
<BR />
i347491@C02W52RKHV2Q:~<BR />
=&gt; npm install -g @sap:cds<BR />
/Users/i347491/.npm-packages/bin/cds -&gt; /Users/i347491/.npm-packages/lib/node_modules/@sap/cds/bin/cds.js<BR />
+ @sap/cds@2.3.2<BR />
added 20 packages in 5.732s<BR />
<BR />
i347491@C02W52RKHV2Q:~<BR />
=&gt; </CODE></PRE><BR />
Happily, this ties up with part of the output we saw from the SAP Web IDE console, specifically the 'npm install' command, in the context of the package.json file directing, via the 'dependencies' section, that version 2.x of <a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a>/cds package should be installed.<BR />
<BR />
Immediately this gave me the 'cds' command, the output of which I posted in my tweet, above.<BR />
<BR />
Digging in a little more, I wondered about a couple of cds command options: init, and build. I investigated with the help documentation built into the command ('cds help init', and 'cds help build').<BR />
<BR />
It turns out that 'cds init' will create a new project folder with various artefacts, just like what happens with the template wizard. There's even a '--java' option for generating files for Java development (in the 'srv' folder, by default). If you run through the template wizard you'll see those files in the SAP Web IDE.<BR />
<BR />
More interestingly perhaps was the cds command invoked via the 'npm run build' command we saw in the SAP Web IDE console: specifically 'cds build --clean'. What does the help documentation tell us? Let's have a look:<BR />
<PRE class="language-css"><CODE>i347491@C02W52RKHV2Q:~ <BR />
=&gt; cds help build<BR />
<BR />
SYNOPSIS<BR />
<BR />
    cds build [&lt;project&gt;] [&lt;options&gt;]<BR />
<BR />
    Builds all modules in the given or current project by compiling contained<BR />
    cds sources according to the module types. The modules are folders in the<BR />
    project root. All well known modules or those configured in package.json<BR />
    are built.<BR />
<BR />
<BR />
OPTIONS<BR />
<BR />
    -in | --project &lt;folder&gt;<BR />
<BR />
        use the specified folder as the project root.<BR />
        default = current working directory ./<BR />
<BR />
    -c  | --clean<BR />
<BR />
        deletes target folders before building modules.<BR />
        default = true<BR />
<BR />
    -i  | --incremental<BR />
<BR />
        do not delete target folders before building modules.<BR />
<BR />
    -l  | --lang &lt;languages&gt; | all<BR />
<BR />
        localize the models with given &lt;languages&gt;, a comma-separated list<BR />
        of language/locale codes or all.<BR />
<BR />
    -o  | --dest &lt;folder&gt;<BR />
<BR />
        writes output to the given folder.<BR />
        default = &lt;project root&gt;<BR />
<BR />
<BR />
EXAMPLES<BR />
<BR />
   cds build<BR />
   cds build project -o _out<BR />
<BR />
<BR />
i347491@C02W52RKHV2Q:~ <BR />
=&gt; <BR />
</CODE></PRE><BR />
Gosh! This is exactly what I was looking for (even though I didn't realise it at the outset). CDS's wonderful role as an abstraction layer is very relevant here. The 'cds build' command seems to wrap the default 'cds compile' command, compiling CDS sources to their targets. What targets? Well, looking at the help documentation for the compile command ('cds help compile') reveals all sorts of goodness relating to targets such as CDL, EDMX, YAML and more.<BR />
<BR />
Indeed, the rest of the output we saw in the console confirms this - the db/data-model.cds file is compiled into 'hdbcds' files, which I can repeat locally on my command line like this:<BR />
<PRE class="language-markup"><CODE>i347491@C02W52RKHV2Q:/tmp <BR />
=&gt; cds init testproject<BR />
i347491@C02W52RKHV2Q:/tmp <BR />
=&gt; cd testproject/<BR />
i347491@C02W52RKHV2Q:/tmp/testproject <BR />
=&gt; cds build --clean<BR />
This is CDS 2.5.1, Compiler 1.0.30, Home: ../../../Users/i347491/.npm-packages/lib/node_modules/@sap/cds<BR />
<BR />
Compiled 'db/data-model.cds' to<BR />
  db/src/gen/.hdinamespace<BR />
  db/src/gen/MY_DATA_MODEL_FOO.hdbcds<BR />
  db/src/gen/MY_SERVICE_FOOSERVICE_FOO.hdbcds<BR />
Compiled 'srv/my-service.cds' to<BR />
  srv/src/main/resources/edmx/csn.json<BR />
  srv/src/main/resources/edmx/my.service.FooService.xml<BR />
i347491@C02W52RKHV2Q:/tmp/testproject <BR />
=&gt; <BR />
</CODE></PRE><BR />
What this tells me is that our hunch about CDS was not crazy:<BR />
<BR />
<EM>"[...] CDS â a layer that has hitherto been largely understated â has an identity, a version, all of its own. Even the CDS compiler has its own version. Rather than thinking about CDS as an amorphous blob of language that sits implicitly somewhere between the database and UI5 (especially Fiori Elements, with the annotations that CDS offers), CDS is very much something that we should sit up and pay attention to as an explicit part of SAPâs development technology stack."<BR />
</EM>-- from&nbsp;the post on <A href="https://blogs.sap.com/2018/06/11/monday-morning-thoughts-core-data-services/" target="_blank" rel="noopener noreferrer">Core Data Services</A><BR />
<BR />
<A name="noidea" target="_blank"></A><STRONG>Another win for curiosity</STRONG><BR />
<BR />
There's a meme out there which tickles me, because for me it's so true in many ways:<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2018/07/Screen-Shot-2018-07-09-at-08.35.02.png" /><BR />
<BR />
(via <A href="http://www.quickmeme.com/" target="_blank" rel="nofollow noopener noreferrer">quickmeme.com</A>)<BR />
<BR />
In this case, in trying to keep up, keep ahead, with technologies that I think are important, I've stumbled across something that I was curious about. And that curiosity caused me to investigate, with the journey and end result fairly enlightening. My understanding of the area has improved and my view of the surface relating to Core Data Services, the build process, tools &amp; approaches has become a little bit clearer. CDS is something I should continue to pay attention to, and the tooling promises to be wider than a single IDE. Additionally, it's clear that the tooling is in a shape and colour that is so very not SAP-proprietary - the NPM world in particular, and NodeJS in general.<BR />
<BR />
I don't think I could have got this from simply reading documentation. I often only have a chance to attain this level of understanding if I bumble my way through things, finding the right path between knowing what I know and don't know, awareness that there are things I don't know that I don't know, and a restless curiosity.<BR />
<BR />
I suspect there are many of you with a similar approach to things. What are your experiences, how do you learn and increase your understanding? Let me know in the comments. And in the meantime ... stay curious.<BR />
<BR />
&nbsp;<BR />
<BR />
This post was brought to you by a refreshingly cool run in the early Manchester sunrise, and <A href="https://www.pactcoffee.com/coffees/planalto" target="_blank" rel="nofollow noopener noreferrer">Pact Coffee's Planalto</A>.<BR />
<BR />
&nbsp;<BR />
<BR />
Read more posts in this series here:&nbsp;<A href="https://blogs.sap.com/tag/mondaymorningthoughts/" target="_blank" rel="noopener noreferrer">Monday morning thoughts</A>.
---
Monday morning thoughts: developers and advocacy
welcome-cornerblog-board
2018-07-02
https://community.sap.com/t5/welcome-corner-blog-posts/monday-morning-thoughts-developers-and-advocacy/ba-p/13380206
2018-07-02-monday-morning-thoughts-developers-and-advocacy
<EM>In this post, I think about what it means to me to be a part of the Developer Relations team, and talk a bit about evangelism, outreach and advocacy.</EM><BR />
<BR />
It's been just over four months since I joined SAP's Developer Relations team, and it's been a great experience so far. Primarily because of all the awesome people I now call my colleagues, but also because it helps me move towards being a better version of myself, which is what one should strive for in life, right?<BR />
<BR />
Developer relations is relatively new in the world of software, so it's a subject that we can almost continue to define, or refine, as we progress. It's a discipline that I first heard of almost 10 years ago, about the same time as the advent of one of the early web-based development tools, <A href="https://blog.mozilla.org/labs/2009/02/introducing-bespin/" target="_blank" rel="nofollow noopener noreferrer">Bespin</A>.<BR />
<BR />
<STRONG>Bespin</STRONG><BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2018/07/bespin.png" /><BR />
<BR />
<EM>The Bespin editor, from&nbsp;<A href="https://blog.mozilla.org/labs/2009/02/introducing-bespin/" target="_blank" rel="nofollow noopener noreferrer">https://blog.mozilla.org/labs/2009/02/introducing-bespin/</A></EM><BR />
<BR />
I remember being totally awestruck by the fact that there was a very usable editor that ran *in the browser*. Back then, it was unheard of, and for many, way beyond what we thought possible in a browser.<BR />
<BR />
That early version of Bespin was, as described in the post that introduced it, an experimental prototype demostrating concepts and the possibilities that it opened up. And my goodness did it open up possibilities. Shortly after Bespin we saw the advent of another great online Interactive Development Environment (IDE) in the form of <A href="https://ace.c9.io/" target="_blank" rel="nofollow noopener noreferrer">Cloud 9</A>&nbsp;- I remember going to talk to the developers of Cloud 9 at their booth at Google I/O in 2011, before they were eventually acquired by Amazon Web Services. Of course, this laid the path for what we have in the SAP world in the form of the great <A href="https://www.sap.com/developer/topics/sap-webide.html" target="_blank" rel="noopener noreferrer">SAP Web IDE</A> (and yes, I am a fan).<BR />
<BR />
Anyway, I digress.<BR />
<BR />
One of the folks behind Bespin was Dion Almaer, who wrote a piece on developer relations around that time, called "<A href="http://web.archive.org/web/20170930044857/http://almaer.com/blog/developer-advocate-versus-technical-evangelist-when-names-change-the-tone" target="_blank" rel="nofollow noopener noreferrer">Developer Advocate versus Techncial Evangelist; When names change the tone</A>" (I had to dig into the Wayback Machine to find it).<BR />
<BR />
That short piece makes some points that resonate with me even today, and in my new role I try to keep in mind the thoughts that these points - about the different meanings of "evangelism" and "advocacy" - conveyed. First and foremost, they're only words, and actions speak louder. But the words have connotations that might influence those actions, if one is not mindful.<BR />
<BR />
<STRONG>Evangelism and advocacy</STRONG><BR />
<BR />
Developer evangelism is a term now widely understood, as of course is the more umbrella term "developer relations" (which resonates very well with me). Developer outreach, or, more commonly, developer advocacy, is a term that is possibly less well known but to me better fits what the activities are within the Developer Relations context.<BR />
<BR />
Evangelism has possibly a broadcast tone, even a religious one. To me (not necessarily to everyone), outside of the developer relations context, it suggests more speaking and less listening.<BR />
<BR />
On the other hand, advocacy immediately conjures up the concept of "on behalf of". Advocating on behalf of developers. Fighting their corner, relating directly to them, acting on their behalf.&nbsp;Essentially, being their advocate.<BR />
<BR />
<STRONG>Developers</STRONG><BR />
<BR />
But there's one question that one should consider here: Who are the developers?<BR />
<BR />
For me, there are two main groups, and the goal is for them to work as one, learning from each other. The first group represents the developers that are using the software. There's a good chance that you, dear reader, fall into this group. The developers within (and beyond) the SAP ecosphere that work on a daily basis building solutions at customers and partners to solve business challenges using SAP software. This group is the most obvious group with which a member of a developer relations team has, well, a relation.<BR />
<BR />
The second group are the developers inside of SAP, the teams building the software that you use, or the platforms upon which you build. I had the good fortune a couple of weeks ago to visit the mothership (also known as SAP Walldorf), and popped in to building 03 where I had coffee and chats with various people, including&nbsp;<SPAN class="mention-scrubbed">carine.tchoutouodjomo</SPAN>&nbsp;and then&nbsp;<SPAN class="mention-scrubbed">rui.nogueira</SPAN>&nbsp;(with whom I chatted about the new Application Programming Model, the interview of which can be found here in transcription and audio format, courtesy of the excellent Coffee Corner Radio podcast:&nbsp;<A href="https://blogs.sap.com/2018/06/25/interview-with-rui-nogueira-on-the-new-application-programming-model-for-sap-cloud-platform/" target="_blank" rel="noopener noreferrer">Interview with Rui Nogueira on the new Application Programming Model for SAP Cloud Platform</A>).<BR />
<BR />
I also got a chance to go and meet the teams behind two of my favourite SAP Cloud Platform services: Workflow (see my <A href="http://pipetree.com/qmacro/blog/2018/01/16/discovering-scp-workflow/" target="_blank" rel="nofollow noopener noreferrer">Discovering SCP Workflow</A> series) and Business Rules (<A href="https://openui5.org/ui5con/agenda.html?view=speakers#letter_A" target="_blank" rel="nofollow noopener noreferrer">one of my sessions</A> at UI5con@SAP this year was on using the Business Rules service in UI5). I got a chance to chat with them for pretty much an entire hour, and we discussed all sorts of topics related to what they were building, features, priorities, hopes, fears, and more besides.<BR />
<BR />
<IMG src="https://pbs.twimg.com/media/DgNR7prWAAA6obe.jpg" /><BR />
<BR />
<EM>Meeting some of the Workflow and Business Rules team at the mothership (<A href="https://twitter.com/qmacro/status/1009740837243277312" target="_blank" rel="nofollow noopener noreferrer">11:12 AM - 21 Jun 2018</A>)</EM><BR />
<BR />
Reading back that last sentence, it strikes me that the image it conveys is that of normal people. And that's the point I guess I'm trying to make.<BR />
<BR />
These folks are developers, just like you and me. And that is something that I'm mindful of in the context of advocacy. All developers, regardless of where they sit, need guidance, need representation, need a channel over which they can communicate and share knowledge. If, in my role in developer relations, I can help with that, through two-way advocacy, then so much the better.<BR />
<BR />
I strive to represent the external developer, advocating for them, helping to start or improve in their understanding of various technical areas and technologies. But alongside that, I try not to forget the internal developers, for whom advocacy is also needed. Perhaps not in as strong or direct a way ... but they're not machines, they're not robots that build software, either.<BR />
<BR />
<STRONG>Keep on keeping on</STRONG><BR />
<BR />
In order to do this, there's something that is critical that I continue doing. That something is developing. The more I continue to develop, the better I can function as an advocate. If my development activities dwindle, so does my ability to directly relate to the people I'm trying to help.<BR />
<BR />
So one of my aims is to continue being curious, continue building, and continue learning. That's something I've done since starting with SAP technologies over three decades ago, so I don't think I'll be giving that up any time soon.<BR />
<BR />
So those are my thoughts on developer evangelism, outreach and advocacy. I'm extremely lucky and very happy to be a part of the developer relations team at SAP, and I hope that I be effective in helping developers inside and outside of SAP alike. I'd love to know what your thoughts are on this. As always, comments and thoughts are more than welcome.<BR />
<BR />
&nbsp;<BR />
<BR />
This post was brought to you this morning by Pact Coffee's <A href="https://www.pactcoffee.com/coffees/planalto" target="_blank" rel="nofollow noopener noreferrer">Planalto</A> coffee, a breezy but warm early Monday morning, and the quieter sound of my new <A href="https://www.logitech.com/en-gb/product/multi-device-keyboard-k380" target="_blank" rel="nofollow noopener noreferrer">Logitech K380 keyboard</A>.<BR />
<BR />
&nbsp;<BR />
<BR />
Read more posts in this series here:&nbsp;<A href="https://blogs.sap.com/tag/mondaymorningthoughts/" target="_blank" rel="noopener noreferrer">Monday morning thoughts</A>.
---
Interview with Rui Nogueira on the new Application Programming Model for SAP Cloud Platform
technology-blog-sap
2018-06-25
https://community.sap.com/t5/technology-blogs-by-sap/interview-with-rui-nogueira-on-the-new-application-programming-model-for/ba-p/13372313
2018-06-25-interview-with-rui-nogueira-on-the-new-application-programming-model-for
<EM>In this post you'll find a transcript of an interview between me and Rui Nogueira on the new Application Programming Model for SAP Cloud Platform. There's also a link to the audio version, available via Coffee Corner Radio.</EM><BR />
<BR />
Last week I was in Walldorf, and I managed to catch up with an old friend&nbsp;<SPAN class="mention-scrubbed">rui.nogueira</SPAN>&nbsp;where we chatted about the new Application Programming Model for SAP Cloud Platform (gosh, we're going to have to find a short way of saying that at some stage soon!). This new Application Programming model was <A href="https://blogs.sap.com/2018/06/05/introducing-the-new-application-programming-model-for-sap-cloud-platform" target="_blank" rel="noopener noreferrer">introduced</A> by&nbsp;<SPAN class="mention-scrubbed">daniel.hutzel</SPAN>&nbsp;and there's also a decent amount of information about it in the online SAP Help here: <A href="https://help.sap.com/viewer/65de2977205c403bbc107264b8eccf4b/Cloud/en-US/00823f91779d4d42aa29a498e0535cdf.html" target="_blank" rel="noopener noreferrer">SAP Cloud Platform - Business Applications</A>.<BR />
<BR />
I turned the chat into an interview that we could share with you. I transcribed it, and the transcription is below. I've also made the audio available, in the form of a podcast episode on&nbsp;<SPAN class="mention-scrubbed">uxkjaer</SPAN>&nbsp;and&nbsp;Former Member's <A href="https://twitter.com/SapCoffeeCorner" target="_blank" rel="nofollow noopener noreferrer">Coffee Corner Radio podcast</A>&nbsp;- the episode is here:<BR />
<BR />
<A href="https://anchor.fm/sap-community-podcast/episodes/Pod-bite-5---DJ-Adams---interview-with-Rui-Nogueira-e1n1mu" target="_blank" rel="nofollow noopener noreferrer">Pod bite 5 - DJ Adams - interview with Rui Nogueira</A><BR />
<BR />
I've done my best to find a balance between the "off the cuff" chat style, and a flow that is easy to read in transcribed form. Share &amp; enjoy!<BR />
<BR />
By the way, if you're interested in reading more about the concept of programming models, and how this model fits in, you might want to read this Monday morning thoughts post: "<A href="https://blogs.sap.com/2018/06/25/monday-morning-thoughts-programming-models/" target="_blank" rel="noopener noreferrer">Monday morning thoughts: programming models</A>".<BR />
<BR />
&nbsp;<BR />
<BR />
<STRONG>Transcription of interview</STRONG><BR />
<BR />
Date: 21 June 2018<BR />
Location: WDF03, SAP Walldorf<BR />
With: Rui Nogueira<BR />
<BR />
&nbsp;<BR />
<BR />
<STRONG>DJ: So I'm here today with Rui, hello Rui!</STRONG><BR />
<BR />
<SPAN style="font-weight: 400">Rui: Hello DJ!</SPAN><BR />
<BR />
<STRONG>DJ: And what we're going to do is just talk a little bit about something that I chatted with Rui about at Sapphire, just to find out a little bit more about it. We're just going to do it off the cuff ...</STRONG><BR />
<BR />
<SPAN style="font-weight: 400">Rui: Yes, we're just coming out of the coffee corner </SPAN><BR />
<BR />
<SPAN style="font-weight: 400"><STRONG>DJ: We're just coming out of the coffee corner</STRONG> </SPAN><BR />
<BR />
<SPAN style="font-weight: 400">Rui: at the mothership!</SPAN><BR />
<BR />
<STRONG>DJ: We *are* at the mothership! In building 03, I've just had a delicious lunch downstairs, including a very interesting asparagus &amp; herb soup, as well [random conversation about the soup redacted]</STRONG><BR />
<BR />
<STRONG>DJ: OK, so what Rui and I chatted about in Sapphire, was the new programming model in town.</STRONG><BR />
<BR />
<SPAN style="font-weight: 400">Rui: It's not just in town, it's even generally available</SPAN><BR />
<BR />
<STRONG>DJ: GA!</STRONG><BR />
<BR />
<SPAN style="font-weight: 400">Rui: Yes! But I thought we'd just ... say it</SPAN><BR />
<BR />
<STRONG>DJ: Yes, it's generally available. And if I remember rightly, it's called the "Application Programming model for SAP Cloud Platform". Is that right, and what it is?</STRONG><BR />
<BR />
<SPAN style="font-weight: 400">Rui: It is right indeed, and it's not a product, it's rather, as the name also proposes, also that strange long name, application programming *for* SAP Cloud Platform, to emphasise that this is not just a single product, right, it's actually leveraging some open source technologies as well as some SAP proprietary technologies. </SPAN><SPAN style="font-weight: 400">Mainly CDS, right, to help you create, quickly, enterprise grade applications with enterprise grade qualities on the cloud platform. So that's the main goal of this programming model. </SPAN><BR />
<BR />
<SPAN style="font-weight: 400"><STRONG>DJ: OK, cool, so CDS - Core Data Services, right?</STRONG> </SPAN><BR />
<BR />
<SPAN style="font-weight: 400">Rui: Exactly</SPAN><BR />
<BR />
<STRONG>DJ: So a lot of the listeners are going to be at least familiar with that is in general, but what does CDS bring to this programming model, how is it used?</STRONG><BR />
<BR />
<SPAN style="font-weight: 400">Rui: So first of all, what we wanted to achieve with the programming model is to not start from scratch with something new, but thinking: how can we actually leverage the knowledge which is out there already around HANA, around ABAP, and bring that to the cloud platform. And initially, CDS built to define data models, right, for databases</SPAN><BR />
<BR />
<STRONG>DJ: *annotated* data models!</STRONG><BR />
<BR />
<SPAN style="font-weight: 400">Rui: annotated, yes, so that you can derive out of that hdbcds files for HANA, so that the schema is created and so on and so forth, and what we have added to that, additional annotations for creating the corresponding services, to also create UIs on top</SPAN><BR />
<BR />
<STRONG>DJ: So I know there's a tutorial, I saw the blog post from Daniel</STRONG><BR />
<BR />
<SPAN style="font-weight: 400">Rui: Daniel Hutzel</SPAN><BR />
<BR />
<STRONG>DJ: Yes, exactly, and he pointed to the documentation in help.sap.com and there's a really nice tutorial which I've been through quite a few times &nbsp;</STRONG><BR />
<BR />
<SPAN style="font-weight: 400">Rui: The Bookstore example</SPAN><BR />
<BR />
<SPAN style="font-weight: 400"><STRONG>DJ: Yes, the Bookstore example, and talking of the Bookstore example, one of the things that struck me was the way that the entities were defined - the Book entity, the Author entity, and so on. They reminded me - I'm not sure if it's coincidence - of River, RDE.</STRONG> </SPAN><BR />
<BR />
<SPAN style="font-weight: 400">Rui: Oh, yes, long time ago! </SPAN><BR />
<BR />
<SPAN style="font-weight: 400"><STRONG>DJ: Yes, I mean, even the way that they were whitespaced out, and formatted and so on, I thought this reminds me of something, and I couldn't figure out what it was. So yeah, it's nice to see that some really cool ideas from way back when - I thought they were pretty cool - have sort of found their way into something that's new, right?</STRONG> </SPAN><BR />
<BR />
<SPAN style="font-weight: 400">Rui: Yes, and in addition, the other aspect, we also look into the application programming model that you can easily also add and combine other services, like business services, with it, so, again, via the model itself, right, to be able to, on the one hand side, create reusable business services, but also embed them into your application. </SPAN><BR />
<BR />
<SPAN style="font-weight: 400"><STRONG>DJ: Yes, I mean I get ... cos that seems pretty critical, with the programming model itself, to be able to create net new applications (to use that phrase "net new") - that's great, but I think a lot of people, including me, will want to be able to build side-by-side extensions for S/4HANA, for example, that's what you're talking about, right?</STRONG> </SPAN><BR />
<BR />
<SPAN style="font-weight: 400">Rui: Yes, exactly, and specifically for S/4HANA, there is also a connection to the S/4HANA SDK which works also pretty well, so both teams are working closely together to ensure that they can leverage each other, and in addition, what we have done, is also using the programming model to build here at SAP also applications. And also reusable services, so, really taking that technology before it was generally available, to test whether this really works to efficiently and effectively create enterprise grade apps or not and we found gaps last year, right, and we closed them, and I think we're now in a state where I feel pretty confident that the application programming model really helps you to create such applications. Is it perfect? Is maybe stuff missing? Most probably yes, but what is definitely also true is that we have been using this programming model now already last year, here with SAP, to create services, specifically around security and data privacy, and that worked out pretty well. </SPAN><BR />
<BR />
<STRONG>DJ: So you're basically drinking your own champagne before you actually give it to the public.</STRONG><BR />
<BR />
<SPAN style="font-weight: 400">Rui: Yes, so, improving the champagne, right? </SPAN><BR />
<BR />
<STRONG>DJ: No wonder your eyes look like they do!</STRONG><BR />
<BR />
<SPAN style="font-weight: 400">Rui: This is just sparkling water!</SPAN><BR />
<BR />
<STRONG>DJ: OK. This is audio only. Because this morning I was told I have "a face for radio".</STRONG><BR />
<BR />
<SPAN style="font-weight: 400">Rui: Makes sense, kind of! </SPAN><BR />
<BR />
<SPAN style="font-weight: 400"><STRONG>DJ: So, one thing that is on my mind and I think on other people's minds as well is that there do seem to be a lot of phrases, a lot of places where I'm seeing the phrase "programming model". There seem to be a number of programming models out there. Where does this fit in ... for example, there's the programming model for Fiori, and there's the RESTful ABAP programming model and so on, so where does this fit in?</STRONG> </SPAN><BR />
<BR />
<SPAN style="font-weight: 400">Rui: I think what has been developed before is still there, right, and if people called it "programming model" it's definitely true. Specifically for the application programming model, as I said before, we are trying to create a combination between open source topics and SAP proprietary technology and the way that the programming model is built is that yes for sure we currently start with for example on the persistence side with HANA, on the server side with OData, on the UI side with SAPUI5 and Fiori, but the whole model allows us to go beyond that and also maybe create other assets, right - on the persistence side to maybe create assets for other databases ...</SPAN><BR />
<BR />
<SPAN style="font-weight: 400"><STRONG>DJ: So create definitions for other targets?</STRONG> </SPAN><BR />
<BR />
<SPAN style="font-weight: 400">Rui: Exactly. So of course we start with these technologies now with SAP products, but the model itself open </SPAN><BR />
<BR />
<STRONG>DJ: Sort of an abstraction layer, really, isn't it?</STRONG><BR />
<BR />
<SPAN style="font-weight: 400">Rui: Yes</SPAN><BR />
<BR />
<STRONG>DJ: I know that from reading the documentation as well, for example, the target, the stuff that gets generated from an application programming perspective is, in the first incarnation, Java, but, you know, I can equally imagine ...</STRONG><BR />
<BR />
<SPAN style="font-weight: 400">Rui: NodeJS</SPAN><BR />
<BR />
<SPAN style="font-weight: 400"><STRONG>DJ: NodeJS, for example - and may be, I'm fishing here, maybe you know, when ABAP on the Cloud Platform goes GA, maybe generating some ABAP stuff as well? Is that in our vision?</STRONG> </SPAN><BR />
<BR />
<SPAN style="font-weight: 400">Rui: To be sure, I don't know.</SPAN><BR />
<BR />
<STRONG>DJ: I think that would be quite cool.</STRONG><BR />
<BR />
<SPAN style="font-weight: 400">Rui: Yeah, in essence the underlying technologies are the same, right, the model is very similar</SPAN><BR />
<BR />
<STRONG>DJ: It's a pattern, isn't it</STRONG><BR />
<BR />
<SPAN style="font-weight: 400">Rui: Yeah, so most probably yes, but I'm not sure if it's on the roadmap.</SPAN><BR />
<BR />
<STRONG>DJ: No, OK, that's cool. So, you were talking about the general way things work, and it seems to me as well, correct me if I'm wrong, this is probably the nearest we are so far to, what am I going to call it, a cloud native programming model. Because, if I understand it correctly, I was looking at what the Web IDE was doing for me, which seemed to be a lot, while following this tutorial, the assets that are created and deployed are deployed to Cloud Foundry on the SAP Cloud Platform, is that right?</STRONG><BR />
<BR />
<SPAN style="font-weight: 400">Rui: Yes, it is. </SPAN><BR />
<BR />
<SPAN style="font-weight: 400"><STRONG>DJ: Because that seems to be to be exactly the direction we should be looking at going, right?</STRONG> </SPAN><BR />
<BR />
<SPAN style="font-weight: 400">Rui: Yeah, so it's open, right, and you can in theory create any, or leverage any other programming language, right ... as you said, we are now starting with Java, NodeJS, and in general what we always look at is what are the programming languages that our customers demand most, and we certainly need to focus, right? To get things right, to start with Java first, because still, although we have all the other cool programming languages out there, I think there is still a huge community around Java. NodeJS ...</SPAN><BR />
<BR />
<STRONG>DJ: That's growing ...</STRONG><BR />
<BR />
<SPAN style="font-weight: 400">RuiL: It's growing a lot, but it's better to have at least one programming language kind of complete, right, instead of having stuff just half baked on two programming languages. </SPAN><BR />
<BR />
<SPAN style="font-weight: 400"><STRONG>DJ: I agree. Much as I would like, if not prefer, personally, to see NodeJS, I'm not the world's biggest fan of Java per se, but I value the whole idea of getting something first, and then expand.</STRONG> </SPAN><BR />
<BR />
<SPAN style="font-weight: 400">Rui: Who knows what happens in the next months, you never know!</SPAN><BR />
<BR />
<SPAN style="font-weight: 400"><STRONG>DJ: Woo, sounds exciting!</STRONG> </SPAN><BR />
<BR />
<SPAN style="font-weight: 400">Rui: Stuff coming kind of, soon ...</SPAN><BR />
<BR />
<STRONG>DJ: No, that sounds good, that sounds quite exciting. Actually, talking about soon, or next, I think it's fair to say that this is, for people like me, you know, like regular on-the-street developers, who have been doing stuff in the SAP ecosphere, it's quite a bit step, right, quite a big step to this new world. What would you recommend developers like me do to move closer to, and take the next step in this direction?</STRONG><BR />
<BR />
<SPAN style="font-weight: 400">Rui: I think initially really looking into CDS in general, to make yourself familiar, what CDS is, what it does, and I think, the best thing that you can do is take, for example, such an example in the help.sap.com web page, the bookstore example: Going through the tutorial, and then trying it out to make it work, and then actually modifying it, as long as you break it, and then getting to the next stage and saying OK, now I think I know how it works ... let me try to not do the straightforward way, right, let me say OK, now this stuff is generated for me, I would like to have some modifications in terms of: If I'm updating the table, or if I'm adding new rows to that table, before, I would like to execute my own code, right, and then finding out how these extension points work in the programming model. And then going to the next step, right, making it work, and then you modify, or you improve it until you break it, and then getting to the next stage</SPAN><BR />
<BR />
<SPAN style="font-weight: 400"><STRONG>DJ: That reminds me, one of the parodies of the O'Reilly books, called O'Rly, that you see sometimes on Twitter, and my favourite one is: "Developing: Changing things and seeing what happens". And I think that's basically what you were saying, in a roundabout way.</STRONG> </SPAN><BR />
<BR />
<SPAN style="font-weight: 400">Rui: I would say, still ... I have a young boy from school here with me, seventeen years old, and I think still it's important to have some basics, right? So that you know the technologies, you know how certain things work, and really ... yes, there's a craft[man]ship that you have to go through, but if you have that stage to really, now, find out how SAP technologies work, that's how I normally work, so I hope I have the foundation, and then I say OK, instead of reading books, how it should work, I just try it out. Then I just try crazy stuff, and then I find out oh - maybe I completely misunderstood the whole concept, and that's I think where you get to the next level, to really understand where this difference is coming from. &nbsp;&nbsp;</SPAN><BR />
<BR />
<STRONG>DJ: In fact you've mentioned something that we'll pick up another time, because we've run out of time now, but - extension points ... that reminds me a little of the actions, determinations and validations in the BOPF world, on the ABAP programming model side, but ...</STRONG><BR />
<BR />
<SPAN style="font-weight: 400">Rui: Let me tell you a secret</SPAN><BR />
<BR />
<STRONG>DJ: Go on, tell me a secret</STRONG><BR />
<BR />
<SPAN style="font-weight: 400">Rui: I can't do any ABAP</SPAN><BR />
<BR />
<SPAN style="font-weight: 400"><STRONG>DJ: What?!</STRONG> </SPAN><BR />
<BR />
<SPAN style="font-weight: 400">Rui: But keep that secret, don't tell anybody!</SPAN><BR />
<BR />
<STRONG>DJ: And on that bombshell ... &nbsp;Rui - I'm going to press STOP now, thank you very much! &nbsp;</STRONG><BR />
<BR />
&nbsp;
---
Monday morning thoughts: programming models
technology-blog-sap
2018-06-25
https://community.sap.com/t5/technology-blogs-by-sap/monday-morning-thoughts-programming-models/ba-p/13372944
2018-06-25-monday-morning-thoughts-programming-models
<EM>In this post, I think about the idea of the programming model and consider the occurrence of such over the recent years in the SAP development ecosphere.&nbsp;</EM><BR />
<BR />
<STRONG>Update (same day)</STRONG>: I interviewed Rui Nogueira on the new Application Programming Model for the SAP Cloud Platform. You can get the interview transcript and a link to the audio recording on this blog post: "<A href="https://blogs.sap.com/2018/06/25/interview-with-rui-nogueira-on-the-new-application-programming-model-for-sap-cloud-platform/" target="_blank" rel="noopener noreferrer">Interview with Rui Nogueira on the new Application Programming Model for SAP Cloud Platform</A>".<BR />
<BR />
I was lucky enough to be able to attend and speak at <A href="https://openui5.org/ui5con/" target="_blank" rel="nofollow noopener noreferrer">UI5con@SAP</A> this year - the event took place last Friday in SAP building ROT03 in St Leon-Rot. In the keynote, we learned about UI5 evolution, and one of the phrases that stood out to me, not specifically related to UI5, was "programming model":<BR />
<BLOCKQUOTE class="twitter-tweet"><BR />
<P dir="ltr" lang="en">Learning about the new <A href="https://twitter.com/hashtag/UI5?src=hash&amp;ref_src=twsrc%5Etfw" target="_blank" rel="nofollow noopener noreferrer">#UI5</A> programming model, moving beyond (but not abandoning) "UI5 classic" to a web component based approach. <A href="https://twitter.com/hashtag/UI5con?src=hash&amp;ref_src=twsrc%5Etfw" target="_blank" rel="nofollow noopener noreferrer">#UI5con</A> <A href="https://twitter.com/hashtag/angular?src=hash&amp;ref_src=twsrc%5Etfw" target="_blank" rel="nofollow noopener noreferrer">#angular</A></P><BR />
â DJ Adams (@qmacro) <A href="https://twitter.com/qmacro/status/1010070652294922240?ref_src=twsrc%5Etfw" target="_blank" rel="nofollow noopener noreferrer">June 22, 2018</A></BLOCKQUOTE><BR />
<STRONG>Programming model</STRONG><BR />
<BR />
Hearing "programming model" in a UI5 setting was not unexpected, but it certainly reminded me of a long-running background job in my mind which was occupied with noticing and collating various uses of this phrase.<BR />
<BR />
The idea of a programming model is not new; looking at the <A href="https://en.wikipedia.org/wiki/Programming_model" target="_blank" rel="nofollow noopener noreferrer">Wikipedia entry for the phrase</A>, and reading other articles that centre around the idea of a programming model reveals only that it's a general term that is useful for collecting together technologies and techniques that work well together in a certain context or for a certain purpose.<BR />
<BR />
So it stands to reason that the phrase has cropped up over time within SAP programming contexts.<BR />
<BR />
<STRONG>Spotting models in their natural habitats</STRONG><BR />
<BR />
I first started noticing the phrase back in 2016, in this form: "The ABAP Programming Model in S/4HANA". This particular instance was the title of a session (<A href="https://www.sap.com/documents/2017/03/867e02d4-ac7c-0010-82c7-eda71af511fa.html" target="_blank" rel="noopener noreferrer">DEV109</A>) at SAP TechEd 2016. Earlier that year,&nbsp;<SPAN class="mention-scrubbed">carine.tchoutouodjomo</SPAN>&nbsp;published an excellent blog post whose title also included the phrase, albeit in a slightly different guise: "<A href="https://blogs.sap.com/2016/04/04/getting-started-abap-programming-model/" target="_blank" rel="noopener noreferrer">Getting Started with ABAP Programming Model for SAP Fiori Apps in SAP S/4HANA</A>".<BR />
<BR />
In 2017&nbsp;<SPAN class="mention-scrubbed">andre.fischer</SPAN>&nbsp;posted "<A href="https://blogs.sap.com/2017/09/14/how-to-develop-a-transactional-app-using-the-new-abap-programming-model-for-sap-fiori/" target="_blank" rel="noopener noreferrer">How to develop a transactional app using the new ABAP Programming Model for SAP Fiori</A>" (Andre and Carine are colleagues from the same team, and I was very happy to be able to connect with them both while I was at the mothership last week). Later that year Karl Kessler published an article in SAPinsider called "<A href="https://sapinsider.wispubs.com/Assets/Articles/2017/November/SPI-ABAP-and-the-Cloud" target="_blank" rel="nofollow noopener noreferrer">ABAP and the Cloud</A>" and talked about the "RESTful ABAP programming model", a phrase I'd also seen before and even shortened to "RAP". Furthermore I've seen references to the "<A href="https://help.sap.com/doc/8f6fdeca4a26454185a19c96bfdd4e4e/1610%20000/en-US/frameset.htm" target="_blank" rel="noopener noreferrer">ABAP programming model for SAP Fiori</A>".<BR />
<BR />
So we have different terms that are used in variations of the same theme -- terms such as ABAP, HANA, S/4HANA, Fiori, RESTful, and so on.<BR />
<BR />
Fast forward to today. A couple of weeks ago at SAPPHIRENOW <A href="https://twitter.com/qmacro/status/1004687032411672576" target="_blank" rel="nofollow noopener noreferrer">we saw</A> the advent of the "Application Programming Model for SAP Cloud Platform", which Daniel Hutzel introduced in a blog post "<A href="https://blogs.sap.com/2018/06/05/introducing-the-new-application-programming-model-for-sap-cloud-platform/" target="_blank" rel="noopener noreferrer">Introducing the new Application Programming Model for SAP Cloud Platform</A>" and which I touched on in a couple of previous <A href="https://blogs.sap.com/tag/mondaymorningthoughts/" target="_blank" rel="noopener noreferrer">Monday morning thoughts</A> posts ("<A href="https://blogs.sap.com/2018/06/04/monday-morning-thoughts-the-learning-continuum/" target="_blank" rel="noopener noreferrer">the learning continuum</A>" and "<A href="https://blogs.sap.com/2018/06/11/monday-morning-thoughts-core-data-services/" target="_blank" rel="noopener noreferrer">Core Data Services</A>").<BR />
<BR />
<STRONG>Twisty little passages</STRONG><BR />
<BR />
I'm suddenly mindful of the famous phrase "a maze of twisty little passages, all alike" from the 1970's text adventure game "Colossal Cave Adventure"**.<BR />
<BR />
<IMG src="https://upload.wikimedia.org/wikipedia/commons/d/d8/Colossal_Cave_Adventure_on_VT100_terminal.jpg" alt="Image result for colossal cave adventure" width="514" height="386" /><BR />
<BR />
<EM>Playing the Colossal Cave Adventure on a VT100 terminal, courtesy of <A href="https://commons.wikimedia.org/wiki/File:Colossal_Cave_Adventure_on_VT100_terminal.jpg" target="_blank" rel="nofollow noopener noreferrer">Wikimedia Commons</A></EM><BR />
<BR />
(** Serendipity: In reading the Wikipedia article on Colossal Cave Adventure, I noticed that a <A href="https://en.wikipedia.org/wiki/Colossal_Cave_Adventure#cite_note-22" target="_blank" rel="nofollow noopener noreferrer">footnote</A> mentioned <A href="https://en.wikipedia.org/wiki/SHRDLU" target="_blank" rel="nofollow noopener noreferrer">SHRDLU</A>, which was an early natural language understanding program developed by Terry Winograd in the late 1960's. Back in the day, I took shrdlu's name for one of my machines, which co-incidentally features in <A href="https://twitter.com/qmacro/status/1010932700230889473" target="_blank" rel="nofollow noopener noreferrer">yesterday's "on this day" tweet</A>&nbsp;pointing to a post of mine from 2004 "<A href="https://blogs.sap.com/2004/06/24/forget-soap-build-real-web-services-with-the-icf/" target="_blank" rel="noopener noreferrer">Forget SOAP â build real web services with the ICF</A>".)<BR />
<BR />
Anyway, on first sight, it would seem that these are different, competing programming models. It doesn't take long to realise that that this isn't actually the case. The biggest difference (and it's not a big difference) is between all the previous programming models and the Application Programming Model for SAP Cloud Platform - and that difference is that the target runtime for the latter is the cloud generally, and the Cloud Foundry environment in particular. A model that moves us closer to cloud native development for sure.<BR />
<BR />
<STRONG>A general pattern</STRONG><BR />
<BR />
Digging in a little deeper, a general pattern emerges. There are many ways to express this pattern, but let's frame our thoughts using a couple of diagrams.<BR />
<BR />
The first diagram is from the aforementioned DEV109 session, and is titled "ABAP programming model for SAP Fiori and SAP S/4HANA". Yes, this is yet another variation, but it all amounts to the same thing - the technologies and techniques for building standardised, cloud-ready apps for S/4HANA:<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2018/06/Screen-Shot-2018-06-25-at-08.08.13.png" /><BR />
<BR />
Elsewhere in the session, one learns why this model has emerged: what's needed for today's cloud-first world is a stateless, scalable, extensible context where we can build and deploy apps that are pleasant to use, that are able to support continuous and team-based work (via the concepts of draft, device switching and explicit collaboration), that allow us to plug into standard SAP-delivered application layers and extend them, and that have the right frameworks to support consistent development and support.<BR />
<BR />
The result is a separation of concerns, with Fiori and UI5 providing the infrastructure that faces the user, HANA providing the database management system with a rich set of features that augment the application layer, and a family of frameworks in the middle that allow the use of standard, open protocols (such as the REST-informed <A href="http://www.odata.org/" target="_blank" rel="nofollow noopener noreferrer">OData</A>) and provide a consistent approach, via a common language, to modelling and implementing data and application logic.<BR />
<BR />
That language is Core Data Services, of course. But you knew that already, didn't you? Along with the Service Adaptation Definition Language (SADL), for dispatching requests and dealing with model-based data retrieval and processing, and with the Business Object Processing Framework (BOPF) which helps us handle persistency and locking as well as providing us with mechanisms and patterns for extending standard processing (with actions, determinations and validations), this middle layer is really the heart of the programming model.<BR />
<BR />
Not surprisingly, if you look at the new Application Programming Model for SAP Cloud Platform, the same patterns emerge. The abilities to drive the application design and development by concentrating on the data model, the way the user experience (UX) and user interface (UI) are separate from this, but not so separate as to require you to start from scratch (yes, I'm alluding to annotations and metadata extensions that can be used to inform, or influence, what the UI looks like at runtime) and the extension possibilities ... they're the same. It's just that right now, the target runtime for the middle layer is different. And that's pretty much the point - a good programming model might have variations, but it's the qualities of abstraction that are key.<BR />
<BR />
Let's have a look at another diagram, this time from an <A href="https://www.slideshare.net/thomasgr/whats-new-for-sap-developers" target="_blank" rel="nofollow noopener noreferrer">update for SAP developers</A> from&nbsp;<SPAN class="mention-scrubbed">thomas.grassl</SPAN>&nbsp;following SAP TechEd last year:<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2018/06/Screen-Shot-2018-06-25-at-08.25.51.png" /><BR />
<BR />
"Ooh, gosh" I hear you cry. The magic combination of the words "ABAP" and "SAP Cloud Platform" invokes in all of us some sort of feeling (dread, excitement, or a combination thereof). Yes. But once we get past the initial reaction and think about the context of what we're looking at, the wonder of the pattern emerges once again.<BR />
<BR />
The general programming model, that encompasses the minor variations that we've seen, extends to this brave new world** in which a clean and pure version of our favourite backend programming language could become available to us to implement the backend application logic part of our model directly in the cloud, dovetailing with CDS and the related frameworks that we have seen.<BR />
<BR />
(** Incidentally, one of the characters in Aldous Huxley's 1932 novel is <A href="https://en.wikipedia.org/wiki/Brave_New_World#Characters" target="_blank" rel="nofollow noopener noreferrer">Bernard Marx</A> who is a sleep-learning specialist; I've often wondered whether&nbsp;<A href="https://en.wikipedia.org/wiki/Sleep-learning" target="_blank" rel="nofollow noopener noreferrer">hypnopÃ¦dia</A> would help a lot with my <A href="https://blogs.sap.com/2018/06/04/monday-morning-thoughts-the-learning-continuum/" target="_blank" rel="noopener noreferrer">learning continuum</A>.)<BR />
<BR />
<STRONG>Wrapping up</STRONG><BR />
<BR />
The more I think about it, the clearer the picture becomes. What started out as a slightly bewildering array of variations of names has become clearer as I meditate on the core meaning and purpose of each. And rather than confuse matters, the SAP Cloud Platform flavour actually stabilises the idea of the programming model for me.<BR />
<BR />
I hope that this morning's post gives you some food for thought. Perhaps, like me, you've also been wondering about the array of programming models, and perhaps, if you've made it through my meanderings thus far, you will see the overarching patterns too. In any case, let me know your thoughts below.<BR />
<BR />
&nbsp;<BR />
<BR />
This post was brought to you by the clear sky of dawn over Manchester, and a friendly <A href="https://www.rspb.org.uk/birds-and-wildlife/wildlife-guides/bird-a-z/house-sparrow" target="_blank" rel="nofollow noopener noreferrer">house sparrow</A> that sat nearby as I tried to gather my thoughts into some sort of order.<BR />
<BR />
&nbsp;<BR />
<BR />
Read more posts in this series here:&nbsp;<A href="https://blogs.sap.com/tag/mondaymorningthoughts/" target="_blank" rel="noopener noreferrer">Monday morning thoughts</A>.
---
Monday morning thoughts: community engagement
welcome-cornerblog-board
2018-06-18
https://community.sap.com/t5/welcome-corner-blog-posts/monday-morning-thoughts-community-engagement/ba-p/13365553
2018-06-18-monday-morning-thoughts-community-engagement
<EM>In this post, I think about some of the basic ingredients of a good online community, and describe what I'm going to try to do to engage more with the SAP Community.</EM><BR />
<BR />
I was re-listening to a great episode of the <A href="https://anchor.fm/sap-community-podcast/" target="_blank" rel="nofollow noopener noreferrer">Coffee Corner Radio podcast</A>&nbsp;on my trip over to the mothership yesterday (I'm over in Walldorf this week helping out at a partner workshop and then of course attending and speaking at <A href="https://openui5.org/ui5con/" target="_blank" rel="nofollow noopener noreferrer">UI5con</A>, hurray!) The episode was&nbsp;<SPAN class="mention-scrubbed">uxkjaer</SPAN>&nbsp;and&nbsp;Former Member&nbsp;'s <A href="https://anchor.fm/sap-community-podcast/episodes/Episode-3-Interview-with-Craig-Cmehil-e1ievh" target="_blank" rel="nofollow noopener noreferrer">interview</A> with&nbsp;<SPAN class="mention-scrubbed">craig.cmehil</SPAN>&nbsp;on the SAP Community.<BR />
<BR />
Craig has his head screwed on right, and what was said in the interview resonated very well with me, in particular the conversation about engagement online. I co-created the SAP community back in the day, when it was born as the SAP Developer Network (aka "SDN"), so there will always be a part of me that wants to see the community survive and thrive.<BR />
<BR />
<STRONG>Upward curve</STRONG><BR />
<BR />
The community has been through some good times, and some bad, but I feel that we're on an upward curve, especially thanks to the goodwill of core participants, and of course to great initiatives like Coffee Corner Radio. Moreover, I think that Craig's leadership is just what the community in general, but the online community in particular, needs. I'm saying this as a long time observer of Craig as much as a colleague and good friend.<BR />
<BR />
Before SDN, I started an SAP practitioner mailing list "merlin" in the mid 1990's. Merlin merged with Bryan Thorp's "sapr3-list" mailing list some years later to become SAP-R3-L, and I know that some readers will certainly remember that mailing list!<BR />
<BR />
<STRONG>Aspects that keep a community healthy</STRONG><BR />
<BR />
While managing the mailing lists, I was working away from home on various projects, and I remember particularly my evenings in the Skean Dhu hotel in Aberdeen where I spent a couple of hours every evening after work, on my Sanyo laptop (with its built-in 2400baud modem!), administering and nurturing the conversations. In the context of today's challenges, those memories can be distilled into simple aspects that make for a good and healthy community.<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2018/06/Screen-Shot-2018-06-18-at-07.59.43.png" height="263" width="302" /><BR />
<BR />
<EM>The Sanyo MBC-17NB. Pic courtesy of vintage-laptops.com</EM><BR />
<BR />
There will always be those who come in directly, looking for someone else to do their work for them, even do their Googling for them, and then leave with no warning or goodbye. This is not particular to the SAP Community - you see it everywhere. But as Craig intimated - let them be. In my view, they have no manners, but we won't be able to change their ways, not all of them, anyway.<BR />
<BR />
On the flip side, there always has been, especially if not more so today, a backbone of sharing that has been the mainstay of the SAP Community. I'd like to concentrate on that, and suggest that there are a couple of things that only serve to amplify and encourage such great interaction.<BR />
<BR />
<STRONG>Acknowledgement and engagement</STRONG><BR />
<BR />
The first is something I've mentioned already - manners. It doesn't take much to say please and thank you, and simply acknowledge one's fellow Community members. And for such a small amount of effort, the return is immense. During the podcast episode, Craig, Simon and Jakob talked about recognition, being something that people enjoy and perhaps are driven by. This is true, and very good. But I think there's a more basic form of that, which is acknowledgement. If someone is making the effort to engage with you, reply to a question, make a comment, they can be acknowledged by a simple gesture, whether that's a reciprocal comment, a like, or an upvote. If folks' efforts are not acknowledged, there's a chance that it will discourage them over the long term from engaging and contributing further.<BR />
<BR />
The second is engagement. I see this as very closely linked to the acknowledgement I've just outlined, but perhaps more active and more "indiscriminate". Whereas I framed acknowledgement in the context of a direct conversation, say, a question and answer thread between a couple of Community members, engagement is the collective and open set of actions available to us all, whether we're in a particular conversation or not.<BR />
<BR />
The current incarnation of the online SAP Community affords us different ways to engage. At the macro level, there are activities such as&nbsp;sharing thoughts and knowledge in <A href="https://blogs.sap.com/" target="_blank" rel="noopener noreferrer">blog posts</A>. Asking questions and providing answers in <A href="https://answers.sap.com/index.html" target="_blank" rel="noopener noreferrer">Q&amp;A</A>.<BR />
<BR />
At the micro level, there are simple actions that cost only a second, but all add up. If you read a blog post that you enjoyed, you can "like" it (with a button at the top of the post). Similarly, you can "like" a comment to a post. In the Q&amp;A area, there are comments as well as answers, and you can "like" a comment there too, as well as upvote an answer. You can also downvote an answer; don't be afraid to do so if you think that's the right thing to do - but consider adding a comment explaining the downvote, so the recipient understands why.<BR />
<BR />
There's also a level in between, a level where I'd place engagement actions such as making comments on blog posts or in Q&amp;A.<BR />
<BR />
There are many folks that engage like this as a matter of course, and I take my hat off to them. While the SAP Community platform software is the base, it's the people who are the living, breathing spirit, and I think there's a balance that we need to try and maintain - encouraging these people to continue to engage, and welcoming &amp; encouraging net newcomers too.<BR />
<BR />
I've resolved to try my best to do my part. To acknowledge, to engage, to be polite, and show manners. All that is in my gift. That's what keeps communities going - acting by example. I hope you'll join me.<BR />
<BR />
&nbsp;<BR />
<BR />
&nbsp;<BR />
<BR />
This post was brought to you by the sunrise over the SAP mothership in Walldorf, and some OK tasting coffee from the breakfast area in the hotel. Definitely OK enough for me to want another cup.<BR />
<BR />
&nbsp;<BR />
<BR />
Read more posts in this series here:&nbsp;<A href="https://blogs.sap.com/tag/mondaymorningthoughts/" target="_blank" rel="noopener noreferrer">Monday morning thoughts</A>.
---
Monday morning thoughts: Core Data Services
technology-blog-sap
2018-06-11
https://community.sap.com/t5/technology-blogs-by-sap/monday-morning-thoughts-core-data-services/ba-p/13358970
2018-06-11-monday-morning-thoughts-core-data-services
<EM>In this post, I think about what Core Data Services (CDS) is, what it does, and why we should make it a priority to learn more about.</EM><BR />
<BR />
Earlier this morning, while following a tutorial, I came across this message in the console log of my SAP Web IDE:<BR />
<PRE><CODE>This is CDS 2.3.1, Compiler 1.0.27, Home: node_modules/@sap/cds</CODE></PRE><BR />
On the surface, it looks like many of the messages we see in process output - informational, and part of a series of lines that describe what's going on in the background.<BR />
<BR />
What struck me was the implied significance. What this message tells me is that CDS -- a layer that has hitherto been largely understated -- has an identity, a version, all of its own. Even the CDS compiler has its own version. Rather than thinking about CDS as an amorphous blob of language that sits implicitly somewhere between the database and UI5 (especially Fiori Elements, with the annotations that CDS offers), CDS is very much something that we should sit up and pay attention to as an explicit part of SAP's development technology stack.<BR />
<BR />
<STRONG>The origins of CDS</STRONG><BR />
<BR />
CDS was born in the early HANA era, which heralded paradigm changes in application programming. Instead of bringing data to code, as we did in the classic R/3 + RDBMS approach, the power of HANA suggested that the approach should be to bring code to data.<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2018/06/Screen-Shot-2018-06-11-at-08.04.37.png" /><BR />
<BR />
Some of us older hackers might suggest that this is nothing new, talking wistfully about <A href="https://en.wikipedia.org/wiki/Stored_procedure" target="_blank" rel="nofollow noopener noreferrer">stored procedures</A>, and how everything old eventually becomes new again. But we'll leave that for another time.<BR />
<BR />
One thing that SAP has done consistently well over the decades is to understand the importance of abstraction. With the advent of HANA and the switch to a data centric approach to development, an abstraction layer providing language for data definition, access and queries was born.<BR />
<BR />
Initially this layer, named Core Data Services, was used to bridge the semantic gap between low level SQL (as a kind of "database assembly language") and the actual data expressions needed to solve business problems, bringing declarations at conceptual and implementation levels closer together.<BR />
<BR />
<STRONG>From strength to strength</STRONG><BR />
<BR />
Initially available in the HANA space, CDS was then made available to the ABAP world, and with the advent of Fiori Elements, many of us became conscious of CDS as more than just a database abstraction layer.<BR />
<BR />
The power of CDS annotations and the possibilities of layering consumption views upon interface views, with the added facility of adding metadata for use in generated user interface (UI) scenarios is a heady combination. Add to that the possibilities that metadata extensions allow and CDS becomes one powerful layer indeed.<BR />
<BR />
<STRONG>A key ingredient</STRONG><BR />
<BR />
I'm seeing CDS as a key ingredient that pervades much of what we as developers in the SAP ecosphere do now and will be doing tomorrow too. It's the glue, the backbone, that binds together multiple layers and moving parts.<BR />
<BR />
In the past, we've talked about "full stack developers", meaning (in our world) folks who can build end-to-end Fiori apps with frontend components powered by UI5 and backend components powered by OData on the ABAP stack. Perhaps we need to broaden that view and think about the reality which might be better described as "multi stack". As we've now established that ABAP as a backend platform and UI5 as a frontend platform works well, we can and should consider alternatives at both ends.<BR />
<BR />
The idea of "bring your own language" (BYOL) on the SAP Cloud Platform actually extends outwards in all directions to "bring your own [database|frontend|backend]" and dilutes the meaning of "full stack developer" because few, if any, developers will be skilled in all the possible combinations.<BR />
<BR />
That said, CDS is a front runner for being a constant in this multi stack world and something we should all know about. I've mentioned already that CDS binds multiple layers and moving parts together. Perhaps more significantly it binds people together, being a language that's used and understood by technicians up and down the stack(s) and that has meaning and significance to all of them.<BR />
<BR />
<STRONG>The new canonical example</STRONG><BR />
<BR />
In last week's <A href="https://blogs.sap.com/tag/mondaymorningthoughts/" target="_blank" rel="noopener noreferrer">Monday morning thoughts</A>, on the <A href="https://blogs.sap.com/2018/06/04/monday-morning-thoughts-the-learning-continuum/" target="_blank" rel="noopener noreferrer">learning continuum</A>, I mentioned the new <A href="https://blogs.sap.com/2018/06/05/introducing-the-new-application-programming-model-for-sap-cloud-platform/" target="_blank" rel="noopener noreferrer">Application Programming Model for the SAP Cloud Platform</A>, which appeared to me in the form of a wonderful early <A href="https://help.sap.com/viewer/65de2977205c403bbc107264b8eccf4b/Cloud/en-US/5ec8c983a0bf43b4a13186fcf59015fc.html" target="_blank" rel="noopener noreferrer">"Getting Started" tutorial</A>&nbsp;that hints of a tantalising richness and depth that only multiple repeated journeys will start to extract.<BR />
<BR />
The tutorial is about building a full stack application on the SAP Cloud Platform (significantly as a Cloud Foundry app) using a variety of technology components: Fiori Elements and UI5 on the frontend, HANA as the persistency layer, and Java as the application service layer.<BR />
<BR />
A key point is that these are just examples of technology components. For example, the application service layer is, in this tutorial instance, Java, mainly because it's the runtime supported right now. But perhaps for the next incarnation of the Application Programming Model, there'll be support a NodeJS stack for an alternative application service layer. It's early days and I for one am glad that <A href="https://twitter.com/qmacro/status/1004692064188157952" target="_blank" rel="nofollow noopener noreferrer">rough consensus and running code</A>&nbsp;has meant that we're seeing a first glimpse of the entire model with a single runtime example, earlier than we might have done if multiple runtimes had been supported from day one.<BR />
<BR />
Most significantly, however, there's a notion that becomes clear as soon as you've run through the tutorial even just once. That notion is the extreme importance of CDS. CDS is used as a business level data definition source, and to generate the artifacts at the (HANA) persistence layer. It's used to define visual aspects relating to the data, with those definitions (annotations) making their way to the frontend to influence what the app looks like and how it behaves. Last but not least, it's used to generate the application service layer. There's even a top-level item in the project contextual menu for builds based on CDS.<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2018/06/Screen-Shot-2018-06-11-at-08.47.57.png" height="325" width="280" /><BR />
<BR />
&nbsp;<BR />
<BR />
<STRONG>Next steps</STRONG><BR />
<BR />
CDS has become a powerful set&nbsp;of languages: Data Definition Language (DDL), Query Language (QL) and Data Control Language (DCL). The <A href="https://help.sap.com/viewer/cc0c305d2fab47bd808adcad3ca7ee9d/7.5.9/en-US/630ce9b386b84e80bfade96779fbaeec.html" target="_blank" rel="noopener noreferrer">annotations are many and complex</A> (my CDS journey has introduced me to some, but there are others that I've yet to come across and understand).&nbsp;But in my view it's a technology, a layer, that we'd be foolish to ignore. Last month I even went so far as to suggest that CDS is one of <A href="https://blogs.sap.com/2018/05/21/monday-morning-thoughts-milestones/#todaysmilestones" target="_blank" rel="noopener noreferrer">today's milestones</A>.<BR />
<BR />
If you do only one thing this week to advance along your learning continuum, may I suggest it's to look into CDS. Start by looking into the <A href="https://help.sap.com/viewer/65de2977205c403bbc107264b8eccf4b/Cloud/en-US/5ec8c983a0bf43b4a13186fcf59015fc.html" target="_blank" rel="noopener noreferrer">Getting Started Tutorial</A> for the Application Programming Model. If you're only fleetingly familiar with CDS, let the tutorial wash over you, there will be parts that either don't make sense, or seem like magic. That doesn't matter at this stage. Just get to the stage where you've experienced CDS first hand, felt it under your fingertips, and grokked where and how it fits in as a lingua franca across the different territories of a single, multi stack application. Then you can branch out and sideways to other CDS tutorials on database facilities, annotations and metadata extensions.<BR />
<BR />
You won't regret it.<BR />
<BR />
&nbsp;<BR />
<BR />
This post was brought to you from a damp but warm early morning in Manchester,&nbsp;<A href="https://www.pactcoffee.com/coffees/nyarusiza-peaberry" target="_blank" rel="nofollow noopener noreferrer">Pact Coffee's&nbsp;Nyarusiza Peaberry</A> coffee and the lingering tiredness of transatlantic jet-lag.<BR />
<BR />
&nbsp;<BR />
<BR />
Read more posts in this series here:&nbsp;<A href="https://blogs.sap.com/tag/mondaymorningthoughts/" target="_blank" rel="noopener noreferrer">Monday morning thoughts</A>.
---
Monday morning thoughts: the learning continuum
technology-blog-sap
2018-06-04
https://community.sap.com/t5/technology-blogs-by-sap/monday-morning-thoughts-the-learning-continuum/ba-p/13353212
2018-06-04-monday-morning-thoughts-the-learning-continuum
<EM>In this post I contemplate the idea of the learning continuum, and think about the fact that we're all learning together, which is a good thing.</EM><BR />
<BR />
On a run last week I listened to an episode of Scott Hanselman's "Hanselminutes":&nbsp;<A href="https://www.hanselminutes.com/613/functional-programming-f-and-cloud-containers-with-lena-hall" target="_blank" rel="nofollow noopener noreferrer">Functional Programming, F#, and Cloud Containers with Lena Hall</A>. There was so much content in there that interests me, from functional programming with F# itself, to its application to serverless and the Kubernetes context. The wonderful thing is that pretty much all that is relevant to some degree or other in our enterprise software future.<BR />
<BR />
But the one thing that struck me as I followed the trails through <A href="https://en.wikipedia.org/wiki/Clayton_Vale" target="_blank" rel="nofollow noopener noreferrer">Clayton Vale</A>&nbsp;on my way in to Manchester was that there's something that's unsaid but clearly present in the developer communities at large and it was clear during the interview between Scott and Lena. That something is what I'm going to call a "learning continuum", and its relevance is even stronger this week as we prepare ourselves for one of the two major learning events of the year in the SAP calendar - SAPPHIRENOW (the other of course being SAP TechEd).<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2018/06/Screen-Shot-2018-06-04-at-09.48.20.png" /><BR />
<BR />
<EM>I have a "Learning Continuum" Trello board where I keep track of what to read next</EM><BR />
<BR />
<STRONG>The learning continuum</STRONG><BR />
<BR />
The pace of chance in computing is ever increasing. One consequence of this is, as I've said often enough, that to remain relevant as a developer, a key skill you need is the ability to learn, and you need to put that skill into practice often.<BR />
<BR />
Listening to&nbsp;Former Member&nbsp;and&nbsp;<SPAN class="mention-scrubbed">uxkjaer</SPAN>&nbsp;talk to&nbsp;<SPAN class="mention-scrubbed">craig.cmehil</SPAN>&nbsp;in the most recent episode of <A href="https://twitter.com/SapCoffeeCorner" target="_blank" rel="nofollow noopener noreferrer">SAP Coffee Corner Radio</A>&nbsp;I heard some definitions of community. I'd suggest that there's an extra definition that's relevant here, adding a layer of meaning, and that is the fact that we're all learning. At different paces, certainly in different subject areas, and to different degrees and depths, but we're all learning, and learning together.<BR />
<BR />
That's why the concepts of blog posts and Q&amp;A fit so well into the mechanics of the online presence of a community - because they're obvious outlets for learning and sharing. There's the idea, attributed to Albert Einstein, and also built into a process associated with Richard Feynman, that the best way to learn about something is to try to explain it, or teach it, to others. For me, at least, writing posts about certain technical subjects certainly helps me better understand those subjects.<BR />
<BR />
The concept of shared learning has existed since the dawn of <A href="https://blogs.sap.com/2005/07/04/the-sap-developer-community-10-years-ago/" target="_blank" rel="noopener noreferrer">the first SAP communities</A> in the form of the two mailing lists that Bryan Thorp and I ran back in the mid 1990's. People learning, and learning openly, helping each other out on their individual but ultimately shared journeys.<BR />
<BR />
Those shared journeys represent different pathways through the learning continuum. The learning continuum is ever present, and even more relevant today as we embark on perhaps one of the biggest sea changes in the SAP technical landscape.<BR />
<BR />
<STRONG>Integrity through transparency</STRONG><BR />
<BR />
One thing that resounded during the Hanselminutes episode was the unspoken idea that both Scott and Lena were learning, and in no way did they think that the learning journey was something to hide or be ashamed of. Scott was learning from Lena, and Lena herself, the expert being interviewed, talked about her learning journey too. Lena described how some aspects of her journey into functional programming "broke her mind", and Scott recounted a similar angle relating to the Dvorak keyboard. The point is that neither of them felt there was anything wrong with starting out as a beginner in a subject, and that is a wonderful thing.<BR />
<BR />
This is something that is perhaps obvious to some, but not so obvious to others. When a new subject comes along, there are very few experts - we're almost all beginners. That's just the natural order of things, and is a constant in the learning continuum.<BR />
<BR />
<STRONG>The continuum expansion</STRONG><BR />
<BR />
Take, for example, the recent blog post by&nbsp;<SPAN class="mention-scrubbed">yuval.anafi</SPAN>: "<A href="https://blogs.sap.com/2018/06/03/develop-sap-cloud-platform-business-applications-with-sap-web-ide/" target="_blank" rel="noopener noreferrer">Develop SAP Cloud Platform Business Applications with SAP Web IDE</A>". It was only last week when I came across the <A href="https://help.sap.com/viewer/65de2977205c403bbc107264b8eccf4b/Cloud/en-US/5ec8c983a0bf43b4a13186fcf59015fc.html" target="_blank" rel="noopener noreferrer">Getting Started tutorial</A>, to which the post refers, and&nbsp;which is part of a new documentation set on the&nbsp;<A href="https://help.sap.com/viewer/65de2977205c403bbc107264b8eccf4b/Cloud/en-US/00823f91779d4d42aa29a498e0535cdf.html" target="_blank" rel="noopener noreferrer">SAP Cloud Platform application programming model</A>. What struck me the most was not the amazing work that the SAP Web IDE team has put into the heavy-lifting magic relating to build &amp; deploy services on the SAP Cloud Platform (although that deserves some contemplation and is definitely worthy of another post sometime), but the fact that the subject of the post, and the tutorial, helps a great deal to crystallise the part of the continuum that lies just in front of us.<BR />
<BR />
<IMG src="https://upload.wikimedia.org/wikipedia/commons/8/83/Hartington_auditorium_cornerstone_3.JPG" alt="Image result for cornerstone" width="390" height="293" /><BR />
<BR />
<EM>Cornerstone at southwest corner of city auditorium in Hartington, Nebraska (from <A href="https://commons.wikimedia.org/wiki/File:Hartington_auditorium_cornerstone_3.JPG" target="_blank" rel="nofollow noopener noreferrer">Wikimedia Commons</A>)</EM><BR />
<BR />
In a previous post in this <A href="https://blogs.sap.com/tag/mondaymorningthoughts/" target="_blank" rel="noopener noreferrer">Monday morning thoughts</A> series (on <A href="https://blogs.sap.com/2018/05/21/monday-morning-thoughts-milestones/" target="_blank" rel="noopener noreferrer">milestones</A>) I suggested that Core Data Services (CDS) was worthy of being considered a major milestone. Mixing stone metaphors slightly, I would suggest that it is also a cornerstone in what we build, and how we build, in the next generation of SAP solutions. And the ideas &amp; concrete artifacts that explode outwards from the CDS core itself - annotations for the frontend, and databases and services for the backend - are suddenly squarely present in the learning continuum for us.<BR />
<BR />
<STRONG>Learn together, grow together</STRONG><BR />
<BR />
In our <A href="http://mikkellerrunningclub.dk/chapters/manchester/" target="_blank" rel="nofollow noopener noreferrer">Manchester chapter of the Mikkeller Running Club</A>&nbsp;we have an unofficial tagline which is "<A href="https://twitter.com/search?f=tweets&amp;q=%23runtogetherdrinktogether" target="_blank" rel="nofollow noopener noreferrer">run together, drink together</A>". That suits us well and fits what we're about (a running club that's based in a brewery, with members who all enjoy good beer). I think there's a similar idea that we can use for our collective journey along the next stage of the learning continuum, and that is "learn together, grow together".<BR />
<BR />
With many of the subjects at hand, there are hardly any of us that are experts. But that shouldn't stop us sharing our journeys of discovery, the highs of success (I got it to work!), the lows of frustration (why doesn't this do what I want?) resulting in a rich collective layering of knowledge and experience that in turn will attract and help others.<BR />
<BR />
I for one have gone through that tutorial three or four times, and expect to continue that repetition, because the seam I'm mining is so rich, and I'm such a beginner. I know I'm about to embark on the next stage of my self-education, and am looking forward to it very much.<BR />
<BR />
What areas of the learning continuum are you contemplating tackling, and what are you hoping to level up on?<BR />
<BR />
&nbsp;<BR />
<BR />
This post was brought to you while cooling down from a very hot and humid dawn run around the streets of Vineland in Orlando, Florida, and some pretty average tasting coffee from the hotel breakfast area.<BR />
<BR />
&nbsp;<BR />
<BR />
Read more posts in this series here:&nbsp;<A href="https://blogs.sap.com/tag/mondaymorningthoughts/" target="_blank" rel="noopener noreferrer">Monday morning thoughts</A>.
---
Monday morning thoughts: programmers and identity
technology-blog-sap
2018-05-28
https://community.sap.com/t5/technology-blogs-by-sap/monday-morning-thoughts-programmers-and-identity/ba-p/13380743
2018-05-28-monday-morning-thoughts-programmers-and-identity
<EM>In this post, I look at how some programmers identify strongly with a particular language, consider the meanings of 'programmer', 'coder' and 'developer', and what it means for us as the SAP enterprise programming landscape changes.</EM><BR />
<BR />
I watched <A href="https://www.youtube.com/results?search_query=kevlin+henney" target="_blank" rel="nofollow noopener noreferrer">a couple of talks by Kevlin Henney</A> last week while travelling to and from SAP CodeJam Guetersloh. One of the (many interesting) things he suggested was that some programmers strongly identify with a particular language. This immediately reminded me of the situation within our SAP developer ecosphere, where it appears that there are some programmers that strongly identify with the ABAP language. One could even go so far as to say that this strong identification is an exclusive one. "I'm an ABAP programmer" is a phrase that I've heard many times before and has carried the implication "... and I wouldn't consider taking on any other language, just give me ABAP programming tasks to complete, please".<BR />
<BR />
<STRONG>Single-language programmers</STRONG><BR />
<BR />
The recognition of this type of single-language programmer is not new, nor is it particular to the SAP or enterprise world. "I'm a &lt;insert name of popular language&gt; programmer" is something one hears in many situations. And "I'm an ABAP programmer" is definitely relevant in our shared journey right now, as the world beneath our feet changes and moves to the cloud.<BR />
<BR />
Naturally, there are advantages to specialism. Experts in any area are sought after, and their deep knowledge and close connection to the subject is very valuable. But this expertise shouldn't come at any cost, and the cost here is a restriction on what can be achieved.<BR />
<BR />
This isn't even about the idea that one should be passionate about one's subject area -- in this case, ABAP -- nor is it about whether someone should "take their work home with them" and spend some of their valuable free time reading up and around the subject of the ABAP language. (Finding something you're interested in beyond the day job makes work seem less like work, but that's a digression we should pick up another time).<BR />
<BR />
<STRONG>Coder, programmer, developer</STRONG><BR />
<BR />
Where does this concept of a single-language programmer come from? I think that&nbsp;it has a lot to do with architectures and software practices from earlier times.<BR />
<BR />
First, earlier architectures and computing infrastructure was simpler, and entire solutions were built on a specific OS using a single language. So having a look back at our own world, this has predominantly been ABAP, with&nbsp;the transaction-oriented, dynpro-based facilities where everything from integration mechanisms, backend business logic and frontend flow was written in ABAP and developed &amp; executed on a monolith.<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2018/05/Screenshot-2018-05-28-at-07.47.35.png" height="227" width="398" /><BR />
<BR />
<EM>SAP R/2 dynpro, image from SAP Design Guild</EM><BR />
<BR />
We see something similar in the Java world, and going back even further we come to COBOL. The story is the same each time. And while we're back in those times, let's consider the software practices of the day. The waterfall approach to building a solution dominated the industry. The role of an ABAP programmer was very defined, and you could point to the part in the flow where ABAP development kicked in. Turning specifications into modulpools for transactions, into function modules &amp; function groups (function pools, ahh, fond memories), and into reports.<BR />
<BR />
In the days when the phrase WRICEF, standing for "workflows, reports, interfaces, conversions, enhancements, forms", was used almost as a currency (it still is today in some areas, depressingly), the role of an ABAP programmer was someone who turned specifications into executable code.<BR />
<BR />
This role view meant that the act of programming was considered non value adding, and perhaps the meaning is carried today with the word "coder". After all the hard and creative work is done, talking to the users and designing a set of specifications, the subsequent step just turns that creativity into something that will execute and display the ideas on the screen. Right? Not quite. This idea is as wrong as it has been damaging. But let's leave this subject for another post.<BR />
<BR />
If "programmer" is what we're considering as the term for someone proficient in and focused on a particular language, and "coder" is the wrong extreme end of that concept, then perhaps we can think of "developer" as the correct other extreme end and a contrast to everything the word "coder" represents.<BR />
<BR />
Development is a creative task, and creators, artists, use more than a single tube of red pigment on the canvas. Except for, perhaps, someone like Mark Rothko.<BR />
<BR />
<IMG src="https://www.tate.org.uk/sites/default/files/styles/width-600/public/images/mark%20rothko%20untitled%201959%202.jpg" alt="Mark Rothko Untitled 1959" width="373" height="219" /><BR />
<BR />
<EM>Untitled 1959 (from the Seagram Murals), by Mark Rothko (from the <A href="http://www.tate.org.uk/whats-on/tate-modern/exhibition/rothko/rothko-room-guide/room-3-seagram-murals" target="_blank" rel="nofollow noopener noreferrer">Tate Modern</A>)</EM><BR />
<BR />
Like those artists, the developer's toolset is not restricted to one colour, or a single paintbrush. Moreover, the canvas that we find ourselves looking at has changed so dramatically that the idea of using a single dimension to express the ideas, to realise the design, to produce the solution, doesn't compute.<BR />
<BR />
<STRONG style="font-size: 1rem">Today's development canvas</STRONG><BR />
<BR />
In previous posts in this <A href="https://blogs.sap.com/tag/mondaymorningthoughts/" target="_blank" rel="noopener noreferrer">Monday morning thoughts series</A>, I've mused on the landscape of today: cloud first, and composed of many moving parts. The developer must grow and thrive to continue to be able to provide creative and effective solutions to business problems in today's multi-platform, multi-system and multi-layer world. Just look at the array of languages and toolkits that many folks wield on a daily basis. Let's pick just one scenario that should at least be familiar to many of us - developing apps in the Fiori world: ABAP, Core Data Services (CDS) definitions and metadata extensions, UI5, XML, JavaScript, Cascading Style Sheets (CSS), HTTP. There's a similar pattern beautifully illustrated in the new <A href="https://help.sap.com/viewer/65de2977205c403bbc107264b8eccf4b/Cloud/en-US/00823f91779d4d42aa29a498e0535cdf.html" target="_blank" rel="noopener noreferrer">Business Application programming model</A> documentation where the Getting Started tutorial, aimed at today's developers, takes the reader through a data definition language reminiscent of River Data Services (RDS), the OData protocol, and more in the first few minutes, without even the twitch of an eye.<BR />
<BR />
Beyond specific languages and syntax, the cloud native environment and runtimes on the SAP Cloud Platform ask for a breadth of competence that is beyond any single language. Even the platform itself is explicitly and proudly multi-lingual; sure, choose your own language, but be prepared to have conversations with your fellow developers and with other teams that might not speak the same language or see things through the same lenses.<BR />
<BR />
ABAP is coming to the cloud, that much we know. But remember what that is, and what that represents. It's not a lift-and-shift operation that brings with it the kitchen sink; it's a subset of language features that makes sense in a cloud runtime context, with a whitelist-based set of limitations. I see cloud flavoured ABAP as much a glue language as anything else, that allows us to bind together programmers and programming layers for new solutions. And any glue language is just that. Not the ABAP that we grew up with, but, shoulder to shoulder with other languages and protocols, just one part of the overall solution.<BR />
<BR />
The value of a developer in today's world is based not only on depth of knowledge, but on that depth multiplied by the breadth across the platform spectrum.<BR />
<BR />
<STRONG>Final observations</STRONG><BR />
<BR />
On a personal level I've always been fascinated by languages (spoken and programmed) and I've found that knowing about one language helps me understand another. Over my working life I've learnt enough languages to make myself dangerous, but also develop an appreciation of a wide range of subjects and techniques, thereby preventing myself from becoming totally irrelevant. And as the saying goes - if I can do it, anyone can.<BR />
<BR />
If you identify as an "ABAP programmer" and fit into the single-language category I've described, you have an exciting journey ahead of you. What's more, if we really dig into what we think about when we say "ABAP", you're already on the journey; ABAP isn't really a single language anyway - there's SQL, dynpro logic and even the declarative language one uses implicitly in the data dictionary.<BR />
<BR />
Rather than identify with a single language, it might help to identify as a developer of solutions, where the canvas, tools and colour palette is fluid, but what remains constant is your ability to be creative, and to express yourself, combining multiple moving parts into a single piece of art that is worthy of a long gaze and also gets the job done. Beyond that, it will re-educate those that consider you merely a machine that turns coffee and specifications into executable code.<BR />
<BR />
So what are you waiting for? Pick something that seems interesting, and dive in. If you were to ask me for a suggestion, I'd say CDS. It's close to where you feel comfortable already, almost the next ring out from your centre of gravity, and it's a critical piece of today and tomorrow's solution set in the SAP world. But if there's something else entirely that you've been wondering about, grab it and go. These days, in the increasingly open world of SAP enterprise software development, it's more likely that you'll be able to directly use what you learned in your day job as a developer.<BR />
<BR />
&nbsp;<BR />
<BR />
This post was brought to you by <A href="https://www.pactcoffee.com/coffees/umurage-mbazi" target="_blank" rel="nofollow noopener noreferrer">Pact Coffee's Umurage Mbazi</A> (I still have some beans left from last Monday), the gentle warmth and brightness of a promising Bank Holiday Monday here in England and a pleasant browse through my battered copy of The Thames and Hudson <A href="https://books.google.co.uk/books/about/The_Thames_and_Hudson_Dictionary_of_Art.html?id=xHxUAAAAMAAJ" target="_blank" rel="nofollow noopener noreferrer">Dictionary of Art and Artists</A>.<BR />
<BR />
&nbsp;<BR />
<BR />
Read more posts in this series here:&nbsp;<A href="https://blogs.sap.com/tag/mondaymorningthoughts/" target="_blank" rel="noopener noreferrer">Monday morning thoughts</A>.
---
The Business Rules service - overview and getting started
technology-blog-sap
2018-05-22
https://community.sap.com/t5/technology-blogs-by-sap/the-business-rules-service-overview-and-getting-started/ba-p/13375713
2018-05-22-the-business-rules-service-overview-and-getting-started
The Business Rules service is available on the SAP Cloud Platform (SCP) and is categorised within the "Integration" section, along with other services such as the Workflow service, and in fact the two services complement each other very well - I like to think of them as siblings.<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2018/05/Screen-Shot-2018-05-22-at-11.23.37.png" /><BR />
<BR />
Last week I was honoured to appear as a guest on the SAP CodeTalk series hosted by&nbsp;<SPAN class="mention-scrubbed">ian.thain</SPAN>&nbsp;and the subject was the Business Rules service. Here's the interview:<BR />
<BR />
<IFRAME width="560" height="315" src="https://www.youtube.com/embed/3pLz7xCXPHM" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen=""></IFRAME><BR />
<BR />
I thought it would be useful to gather together a few links to help get you started on your journey of discovery.<BR />
<BR />
You should absolutely visit the main <A href="https://help.sap.com/viewer/p/BUSINESS_RULES" target="_blank" rel="noopener noreferrer">Business Rules landing page in help.sap.com</A> because it contains pointers to key resources such as the core documentation, the API documentation on the SAP API Hub, and a "what's new" section.<BR />
<BR />
<SPAN class="mention-scrubbed">muralidaran.shanmugham2</SPAN>&nbsp;has a nice multi-part series on combining Workflow and Business Rules in an example scenario:&nbsp;<A href="https://blogs.sap.com/2017/07/31/implementing-a-user-self-registration-scenario-using-workflow-and-business-rules-in-sap-cloud-platform-part-1/" target="_blank" rel="noopener noreferrer">Implementing a user self-registration scenario using Workflow and Business rules in SAP Cloud Platform</A><BR />
<BR />
<SPAN class="mention-scrubbed">archana.shukla</SPAN> has written a number of useful posts on the Business Rules service - definitely worth having a browse through these.<BR />
<BR />
The Business Rules service was first available in SCP's Neo environment - it's now also available in the trial landscape of the Cloud Foundry (CF) environment. This in itself is interesting as it's a pattern that we could see more often. It's also a good way to start understanding more about the CF environment, as you have something similar to compare and contrast across the two different environments. See Archana's post for more info:&nbsp;<A href="https://blogs.sap.com/2018/03/29/quick-start-guide-to-sap-business-rules-service-in-cloud-foundry/" target="_blank" rel="noopener noreferrer">Quick Start Guide to SAP Cloud Platform Business Rules Service in Cloud Foundry</A>.<BR />
<BR />
As I mentioned in the video, there's a library of controls in UI5 for Business Rules - you can find them in the API reference here: <A href="https://sapui5.hana.ondemand.com/#/api/sap.rules.ui" target="_blank" rel="nofollow noopener noreferrer">sap.rules.ui</A>. There's also a related tutorial available in the UI5 SDK (something I've only just discovered!) which is here: <A href="https://sapui5.hana.ondemand.com/#/topic/67fcb301d0504fd4a24915edf4058c51" target="_blank" rel="nofollow noopener noreferrer">Rule Builder Control</A>&nbsp;where you can learn how to embed a rule builder control into your application.<BR />
<BR />
And last but not least, there's a tag here in the SAP Community that you can follow, to see <A href="https://answers.sap.com/tags/73554900100800000842" target="_blank" rel="noopener noreferrer">Business Rules Q&amp;A</A> and <A href="https://blogs.sap.com/tags/73554900100800000842/" target="_blank" rel="noopener noreferrer">blog post content</A>.<BR />
<BR />
Happy Business Ruling!
---
Monday morning thoughts: milestones
technology-blog-sap
2018-05-21
https://community.sap.com/t5/technology-blogs-by-sap/monday-morning-thoughts-milestones/ba-p/13371725
2018-05-21-monday-morning-thoughts-milestones
<EM>In this post, I look back at changes and developments that I consider milestones in SAP's technology history, and muse on some of the developments today that we'll consider milestones in the future.</EM><BR />
<BR />
<IMG src="https://upload.wikimedia.org/wikipedia/commons/a/a5/Milestone_rixton_greater_manchester.jpg" alt="Image result for manchester milestone" width="428" height="272" /><BR />
<BR />
<EM>A milestone on the A57, just outside of Manchester (<A href="https://commons.wikimedia.org/wiki/File:Milestone_rixton_greater_manchester.jpg" target="_blank" rel="nofollow noopener noreferrer">Wikimedia commons</A>).</EM><BR />
<BR />
I've been fortunate enough to have lived and worked through more than three decades of SAP technology.<BR />
<BR />
<STRONG>Seismic changes</STRONG><BR />
<BR />
In that time, I've seen seismic changes. Here are three of those that immediately come to mind:<BR />
<UL><BR />
 	<LI>the move from the use of hierarchical databases to relational databases - I remember the move from the database management component of IBM's Information Management System (IMS DB) to an early version of DB/2</LI><BR />
 	<LI>the transition from mainframe to Unix based systems - specifically with the move from R/2 to R/3, from monolith to client-server</LI><BR />
 	<LI>the introduction of the in-memory columnar store called HANA</LI><BR />
</UL><BR />
All three of these events are well-known SAP history and already deserve to be remembered as major changes in the timeline.<BR />
<BR />
What did they bring about? Well, initially the move from hierarchical to relational database management systems arguably didn't bring about anything immediately obvious (except for a wave of horror and unease as we wrestled with the new concepts) - but it was a move without which SAP could not have progressed as hierarchical systems were fixed firmly in the proprietary world of IBM.<BR />
<BR />
The transition from mainframe to Unix based system and the move to R/3 and the new architecture (which I still call "disp+work")&nbsp;brought about an an agility previously unknown. This architecture still underpins the vast majority of SAP application servers even today. The move to Unix, and initially the proprietary flavours from hardware vendors (AIX, HP-UX, Solaris, and so on) led to the eventual availability of R/3 on Linux, which I'll come to shortly.<BR />
<BR />
The introduction of HANA needs little explanation ... not only did it allow a rethinking of underlying data storage and performance, and collapse the previously dual concepts of transactional and analytical processing into a singularity, but it also brought about a return to monolith, in a way - the database as application server.<BR />
<BR />
Beyond these particular seismic changes, there are smaller but still hugely significant events that I consider major milestones.<BR />
<BR />
<STRONG>Major milestones</STRONG><BR />
<BR />
Various additions to the general SAP technology set have had huge impacts and effects that are seriously long-term. What makes it perhaps more interesting is that in some cases the significance wasn't immediately clear, or at least the implications weren't equally distributed.&nbsp;Over time, however, people came to understand.<BR />
<BR />
There are clearly more major milestones than I could fit into a reasonably sized blog post, so I've picked out a handful that are meaningful to me.<BR />
<BR />
<SPAN style="text-decoration: underline">Introduction of the ABAP language</SPAN><BR />
<BR />
I started working on SAP R/2 version 4.1D. There was no concept of ABAP - everything was written in mainframe assembly language; in my case that meant S/370 assembler. Code lived in modules and handled everything from the online transaction processing to the batch processing that was a significant portion of what happened in an R/2 installation.<BR />
<BR />
A year or two into my career we saw a release of R/2 that introduced a report writing language called ABAP - it stood for Allgemeiner Berichts Aufbereitungs Prozessor (English: General Report Preparation Processor) and it started life as a limited set of language elements that you added to your Job Control Language (JCL) to produce classic reports, with headers, subtotals and the like.<BR />
<BR />
ABAP matured as we all know, and is set to be reborn in cloud form, a glue language that binds people and data as we move towards a cloud native thinking powered by a whitelisted set of constructs that allow us to use the power of standard data and metadata definitions and integrate the classic with the new.<BR />
<BR />
<SPAN style="text-decoration: underline">R/3 on Linux</SPAN><BR />
<BR />
One could see Linux as just another Unix flavour, alongside the proprietary flavours, some of which I've mentioned earlier. But the porting of R/3 to Linux was more significant than that. It was one of the first major investments that SAP made in the open source world. SAP created a "Linux Lab" and its members contributed improvements to memory management in the Linux kernel so that R/3 would run, and run well.<BR />
<BR />
Moreover, it opened up the possibilities of mere mortals like us running an SAP system on their own hardware, under their control. Mainframes were beyond reach, but not only that - vendor and hardware specific Unix systems were prohibitively expensive. Downloadable installation packages for R/3, to run on your own home-brew kit? Amazing.<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2018/05/Screen-Shot-2018-05-21-at-08.20.09.png" height="344" width="511" /><BR />
<BR />
The ubiquity of Linux in general is well known, and the fact that one can see Linux as the standard delivery platform for SAP software (including HANA) is just wonderful.<BR />
<BR />
<SPAN style="text-decoration: underline">The Internet Communication Manager</SPAN><BR />
<BR />
This one is my personal favourite. Early R/3 systems communicated predominantly in a proprietary fashion, with Remote Function Calls (RFCs) being the most common method for realtime system interaction. It was possible to make HTTP calls - but only in a roundabout and limited way, via a small utility program that lived on the operating system level, the invocation of which was managed with the same transaction (SM59) that was used to manage RFC destinations.<BR />
<BR />
Then there was the Internet Transaction Server, groundbreaking technology from a team that included BjÃ¶rn Goerke and&nbsp;<U><SPAN class="mention-scrubbed">thomas.grassl</SPAN>,</U>&nbsp;that was as useful as it was inventive - a combination of Common Gateway Interface (CGI) backends for the web servers du jour with a mechanism that connected to the R/3 backend and fused with the DIAG protocol stream (yes, this was the dynamic combination of wgate and agate, for the SAP tech historians out there). The result was that transactions that were suddenly available ... in your web browser! Not only that but it was possible to call remote function modules via HTTP.<BR />
<BR />
But the arrival of the Internet Communication Manager (ICM) - essentially a complete and modular HTTP server*, grafted on to R/3's dispatcher and communicating via memory pipes - was, in my opinion, an event horizon (and I've said so in various talks on the subject in the past, too).<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2018/05/Screen-Shot-2018-05-21-at-08.21.41.png" height="215" width="371" /><BR />
<BR />
It opened up the SAP world to the open source world in more ways than anything else, and was one of the ingredients that helped turn SAP "inside out" and allowed the embrace of the outside world. It allowed SAP systems to speak HTTP - as client or server - naturally.<BR />
<BR />
What we have today in the form of the REpresentational State Transfer (REST) informed OData protocol, the amazing utility of HTTP as the lingua franca - nay, the communication dialtone - in our everyday architectural constructions and modern developments in the SAP world, are down to the arrival of the ICM and the developer-level Internet Communication Framework (ICF). I was so taken with this that I even created and ran a <A href="https://vimeo.com/36828893" target="_blank" rel="nofollow noopener noreferrer">two-day course on the ICM and the ICF at Manchester's MadLab</A> a few years back.<BR />
<BR />
*via plugins, the ICM also spoke other protocols such as SMTP<BR />
<BR />
<SPAN style="text-decoration: underline">Neo and Cloud Platform</SPAN><BR />
<BR />
This milestone is almost still too new to think about in terms of being a major one, but I suggest it is exactly that and more. The significance of cloud in SAP's technology directions is impossible to ignore, and the Neo project, SAP's first major foray into the cloud space, has been tremendously important.<BR />
<BR />
The SAP Cloud Platform that we think of today grew out of what (and still is) Neo. Yes, of course, there are major new initiatives such as the Cloud Foundry infrastructure and the extensions into Kubernetes, but essentially Neo was what brought us - developers and architects everywhere - to understand what a hybrid and cloud native future could look like in the SAP world.<BR />
<BR />
Amongst other things, Neo provided us with the core infrastructure that we almost take for granted, some of which is essential, and upon which many of the services that we know and love today are built. Neo's Connectivity service is just one example, so significant and important that we might consider it the sine qua non for the hybrid- and inter-cloud platform age.<BR />
<BR />
Without Neo and the advent of the SAP Cloud Platform, we wouldn't be looking towards the brave new world of cloud native, nor would we have S/4HANA Cloud.<BR />
<BR />
<SPAN style="text-decoration: underline">UI5</SPAN><BR />
<BR />
Of course, this list wouldn't be complete without including one of the key factors in the success of the new SAP and our ability to consider SAP now being a major player in the enterprise User Experience (UX) arena.<BR />
<BR />
User interface (UI) technologies at SAP have come and gone (some have stayed), and have variously hit or missed the mark, in terms of usability, adaptability and acceptance. A relative newcomer, landing only six years ago, UI5 was, and is, the right technology, the right architecture, and the right UI at the right time. I remember discovering UI5 and writing about it back in 2012 (the article's date is incorrect, and reflects when I updated it rather than when I first wrote it):&nbsp;<A href="http://www.bluefinsolutions.com/insights/dj-adams/january-2014/sapui5-the-future-direction-of-sap-ui-developmen" target="_blank" rel="nofollow noopener noreferrer">SAPUI5 - The Future direction of SAP UI Development?</A>&nbsp;and the significance is still valid and fresh today.<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2018/05/Screen-Shot-2018-05-21-at-08.24.20.png" height="171" width="172" /><BR />
<BR />
UI5 and the Fiori design language have not only been key to offering a revolutionarily better UX, but they also play an almost unstated and fundamental role in everything that's currently happening in SAP's move to S/4 and the cloud. I'd argue that they've been an essential enabler for this move, and the combination is still the killer choice, not because it's the only choice, but for most cases it's the right choice.<BR />
<BR />
<A name="todaysmilestones" target="_blank"></A><STRONG>Today's milestones?</STRONG><BR />
<BR />
What technologies and advancements today might we come to consider as major milestones? That's hard to say, but I think there are already some good candidates. I'll limit it to three for this post:<BR />
<BR />
Core Data Services (CDS): Notable almost by its subtle lack of fanfare and attention, CDS is the quiet engine that is and will continue to power the new programming models for ABAP and cloud native. Perhaps it's fair to say that we're only at the thin end of the wedge when it comes to significance and ubiquity - CDS, the rich metadata annotations that it allows, and its supporting cast of technologies and layers will potentially become the technical and mental glue that binds backend and frontend, producer and consumer, operational and analytical.<BR />
<BR />
ABAP in the cloud: I've mentioned ABAP in the cloud already; the "third age of ABAP" has the potential to be a stepping stone, not for us architecturally, but for us as a community of developers. A safe and happy landing place that smells and sounds somewhat familiar, albeit being significantly different in some ways, might be the catalyst needed.<BR />
<BR />
Cloud native: this is a concept representing many ideas and technologies, too many to consider individually in this post (although I've dwelled on some of them in previous posts in this <A href="https://blogs.sap.com/tag/mondaymorningthoughts/" target="_blank" rel="noopener noreferrer">Monday morning thoughts series</A>). From the new layers in the as-a-service stack, through messaging, event-driven programming, <A href="https://12factor.net/" target="_blank" rel="nofollow noopener noreferrer">12-factor app</A> design and container based deployments and service management, this is as far from R/2 as you can get. By the way, did you notice that in this brief list of cloud native concepts that SAP is embracing and building out, that none of them are SAP specific or proprietary?<BR />
<BR />
These are candidates that I'd suggest could become viewed as major milestones in the future. It's hard to say (and interesting that it's difficult to recognise truly major milestones while we're in close proximity to them).<BR />
<BR />
But what I can say is that you, dear reader, will have other candidates in mind. What are they, and why? I'd love to hear what you think - what were major milestones we've encountered on our journey already, and what have we to look forward to?<BR />
<BR />
<STRONG>Update 23 May 2018</STRONG>: This blog post is also available via audio, thanks to the awesome initiative from&nbsp;Former Member&nbsp;and&nbsp;<SPAN class="mention-scrubbed">uxkjaer</SPAN>&nbsp;in the form of Coffee Corner Radio "<A href="https://anchor.fm/sap-community-podcast/episodes/Pod-Bite-1---Monday-morning-thoughts-milestones-by-DJ-Adams-e1gt26" target="_blank" rel="nofollow noopener noreferrer">Pod Bite 1</A>" - see "<A href="https://blogs.sap.com/2018/05/23/with-every-coffee-you-need-a-biscuit-%F0%9F%8D%AA/" target="_blank" rel="noopener noreferrer">With every coffee you need a biscuit ?</A>" for more details.<BR />
<BR />
&nbsp;<BR />
<BR />
This post was brought to you by <A href="https://www.pactcoffee.com/coffees/umurage-mbazi" target="_blank" rel="nofollow noopener noreferrer">Pact Coffee's Umurage Mbazi</A>, the quiet of a peaceful early morning, and the lovely prospect of spending a day off today with my son Joseph.<BR />
<BR />
&nbsp;<BR />
<BR />
Read more posts in this series here:&nbsp;<A href="https://blogs.sap.com/tag/mondaymorningthoughts/" target="_blank" rel="noopener noreferrer">Monday morning thoughts</A>.
---
Monday morning thoughts: functions - what functions?
technology-blog-sap
2018-05-14
https://community.sap.com/t5/technology-blogs-by-sap/monday-morning-thoughts-functions-what-functions/ba-p/13365087
2018-05-14-monday-morning-thoughts-functions-what-functions
<EM>In this post, I think about the concept of functions-as-a-service, what it means, and what it's good for.</EM><BR />
<BR />
Serverless, cloud functions, functions-as-a-service. Three terms that we're hearing more and more about these days, particularly in the context of cloud native. One could almost think that they're a product of the cloud: the concept would probably not have come about without the cloud as an enabling platform.<BR />
<BR />
While cloud functions and functions-as-a-service are pretty much interchangeable as terms (and I'll use functions-as-a-service, or FaaS, from now on), some folks like to maintain a subtle distinction between serverless and FaaS. That's fine, and they have valid reasons. With serverless, it's not that there aren't any servers - of course there are - it's that we don't have to care about them. It's similar to the concepts lower down the stack; with infrastructure-as-a-service, we don't have to care about the physical hardware upon which our virtual machines (VMs) run.<BR />
<BR />
<STRONG>Cloud layer granularities</STRONG><BR />
<BR />
The difference with FaaS is that the granularity is finer. As you move up the stack, from infrastructure, to platform, to software, to backend, and ultimately to functions, any idea of servers at all, physically or logically, disappears. We move up from VMs that we remain responsible for (infrastructure-as-a-service), through runtimes that we have to be mindful of (platform-as-a-service), through a necessarily complex and stateful platform the intricacies of which we must understand (software-as-a-service) to what is perhaps the ultimate - the platform that we thus far have had to think about has faded away, almost in a Matrix kind of way: "<A href="https://www.youtube.com/watch?v=uAXtO5dMqEI" target="_blank" rel="nofollow noopener noreferrer">there is no platform</A>".<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2018/05/spoon-161122_960_720.png" height="138" width="277" /><BR />
<BR />
What we must think about at the FaaS level are the things that matter: what the function interface looks like, what the function does, and that the function itself is stateless. How the function is provisioned, how it runs, how it's removed, how it's scaled - well, we don't care about that.<BR />
<BR />
And the most interesting part? When the functions we write aren't being invoked, it's like they don't exist. From a financial perspective, this is the underlying truth for the idea of serverless - it's a term that relates to the business model. If a function doesn't exist, what possibly could you be paying for?<BR />
<BR />
Therein lies the beauty of FaaS. At least to me, it's the ultimate in compute agility. I write a relatively short function <A href="https://blogs.sap.com/2018/04/30/monday-morning-thoughts-editors-and-editing/" target="_blank" rel="noopener noreferrer">in a simple editor</A>, test and deploy it, wire it into the event fabric, and then sit back. My account won't be charged until the function is actually invoked. I don't have to have anything running to form sockets for incoming connections, or to keep the runtime environment warm. All I must do is think in terms of functions.<BR />
<BR />
<STRONG>The event fabric</STRONG><BR />
<BR />
What is this event fabric? Well, either by fate or by accident, or, as I like to think, by the sheer success of the protocol that powers the world's biggest and most scalable web service (the web itself), HTTP has become the universal coupling. The model of HTTP's request/response mechanism is well understood, has a beautiful and <A href="https://blogs.sap.com/2009/09/21/a-new-rest-handler-dispatcher-for-the-icf/" target="_blank" rel="noopener noreferrer">common simplicity</A> when you need simplicity, and a depth to handle complex scenarios when that's required too.<BR />
<BR />
So one of the yarn types* in the event fabric is HTTP. One can think of this type having two function invocation styles. A direct invocation style, where one piece of software calls another directly. There's also an indirect invocation style, where one piece of software registers an HTTP endpoint, a callback, to be invoked at a later stage, on an event or the successful (or unsuccessful) completion of some computation. This style has a name which you may have come across - webhooks. It's a concept that was <A href="http://progrium.com/blog/2012/11/19/from-webhooks-to-the-evented-web/" target="_blank" rel="nofollow noopener noreferrer">popularised by Jeff Lindsay</A>, from whom I've learned a lot.<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2018/05/maple.jpg" /><BR />
<BR />
Maple Mill, Oldham<BR />
<BR />
*Yes, I'm mindful of the fact that this weaving metaphor is in my DNA, growing up&nbsp;surrounded by a legacy of <A href="https://en.wikipedia.org/wiki/Cotton_mill" target="_blank" rel="nofollow noopener noreferrer">cotton mills</A> in the heart of the industrial revolution here in the north west of England, a revolution that bootstrapped world industry.<BR />
<BR />
There are other types of event in the fabric beyond the straightfoward webhook. These might be platform or provider specific; an oft-quoted example is from the Lambda offering from Amazon Web Services, where a cloud function can be triggered from an activity relating to an S3 storage bucket (in the example, the function creates and stores a thumbnail image of a picture that's just arrived in a bucket). Of course, you can imagine other cloud providers having their own technical or business events. Think of all the business events that exist, and that we could hook into, that take place inside an SAP S/4HANA system.<BR />
<BR />
Of course, there are also the more mundane but equally important event types based on timers. <A href="https://en.wikipedia.org/wiki/Cron" target="_blank" rel="nofollow noopener noreferrer">Cron</A> and other scheduling systems are alive and well. Even in Google's App Script environment you can find a timer event based scheduling system to invoke your code at certain intervals.<BR />
<BR />
Beware: with timer-based events, there will come a pivot point where the cost consideration for having functions run at very frequent intervals means that perhaps you want to move back down the stack to a larger granularity of, say, a more permanent container or even small VM.<BR />
<BR />
<STRONG>Distributed and asynchronous</STRONG><BR />
<BR />
So we have a runtime that we only pay for when in use, a set of functions that - for all practical purposes - don't exist except when they need to be invoked - and well-known standards that describe the contract against which we must design our computing logic. That's a pretty nice state of affairs.&nbsp;But what's it good for?<BR />
<BR />
Well, consider the nature of our business computing today. We're operating in a hybrid world, with systems on-premise and in the cloud. Business processes exist across system boundaries, and across those different granular layers we considered earlier:<BR />
<UL><BR />
 	<LI>at the IaaS level, we have traditional ABAP stack runtime VMs (lower than that if they're on premise on actual physical hosts, of course)</LI><BR />
 	<LI>at the PaaS level, we have services on the SAP Cloud Platform (Workflow, Predictive, Business Rules, etc)</LI><BR />
 	<LI>at the SaaS level we have Concur, SuccessFactors, Ariba and many other cloud software offerings</LI><BR />
</UL><BR />
To be able to define discrete pieces of execution, that then lie dormant until they're required, is a facility that we'll find increasingly useful in this world, where processes are distributed, and naturally asynchronous. The concept of publish-subscribe, or "pubsub" for short, has been around for a good while. Even I got in on the act, co-authoring a Jabber Enhancement Proposal for pubsub in Jabber (XMPP), and building an HTTP implementation of pubsub called "<A href="https://www.youtube.com/watch?v=1E_1B8TD6Kw&amp;list=PLfctWmgNyOIcbRYRdPrbjN_ZM56Kc5YTL" target="_blank" rel="nofollow noopener noreferrer">Coffeeshop</A>" (which in a round about way caused me to write the <A href="https://blogs.sap.com/2009/09/21/a-new-rest-handler-dispatcher-for-the-icf/" target="_blank" rel="noopener noreferrer">Alternative Dispatcher Layer</A> - that's a story for another time).<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2018/05/Screen-Shot-2018-05-14-at-14.07.10.png" height="162" width="338" /><BR />
<BR />
The ability to have relatively small pieces of code that do one thing and do it well takes from a <A href="https://en.wikipedia.org/wiki/Unix_philosophy#Do_One_Thing_and_Do_It_Well" target="_blank" rel="nofollow noopener noreferrer">philosophy</A> that has been proven to be solid and pretty much ubiquitous - most of the Internet runs on Linux, a flavour of Unix, these days.<BR />
<BR />
I have already found uses for cloud functions, in a FaaS context, in various projects over the past year. Instead of setting up some sort of Common Gateway Interface (CGI) contraption on the back of an existing web server somewhere, I just write the code that does what I need it to do and inject it into the cloud. I don't have to own a VM, have access to a web server, and - best of all - don't have to worry about having to add configuration to that existing web server <A href="https://blogs.sap.com/2018/05/07/monday-morning-thoughts-containers-and-silence/" target="_blank" rel="noopener noreferrer">without breaking anything</A>, just to get a callback to be, well, callable. Moreover, I used FaaS in the form of Google Cloud Functions in my <A href="http://pipetree.com/qmacro/blog/2018/01/16/discovering-scp-workflow/" target="_blank" rel="nofollow noopener noreferrer">Discovering SCP Workflow</A> series, writing a <A href="https://blogs.sap.com/2018/01/17/discovering-scp-workflow-service-proxy/" target="_blank" rel="noopener noreferrer">service proxy</A> as a cloud function.<BR />
<BR />
With the natural environment for computing in our SAP ecosystem becoming more distributed and event-driven (or message-driven, gosh, that's yet another subject for another time), it makes sense that we have the right tools to control or just hook in to the flow, add enhancements and extensions, and even just write "glue code", perhaps in a microservice sense, to provide the end-to-end solution.<BR />
<BR />
If nothing else, the combination of a well-defined interface that's required for writing functions for an FaaS runtime, with the natural stateless nature of that runtime, will focus our minds and hopefully help us improve how we write and deliver stable and reliable software.<BR />
<BR />
One function at a time.<BR />
<BR />
&nbsp;<BR />
<BR />
This post was brought to you by <A href="https://www.pactcoffee.com/coffees/la-secreta" target="_blank" rel="nofollow noopener noreferrer">Pact Coffee's La Secreta</A>, and the birdsong of an early and peaceful Monday morning.<BR />
<BR />
&nbsp;<BR />
<BR />
Read more posts in this series here:&nbsp;<A href="https://blogs.sap.com/tag/mondaymorningthoughts/" target="_blank" rel="noopener noreferrer">Monday morning thoughts</A>.
---
Monday morning thoughts: containers and silence
technology-blog-sap
2018-05-07
https://community.sap.com/t5/technology-blogs-by-sap/monday-morning-thoughts-containers-and-silence/ba-p/13359185
2018-05-07-monday-morning-thoughts-containers-and-silence
<EM>In this post I think about the silence of workstations and what that represents to me, and the new ability to look at maintaining software and services in a completely different way - via containers.</EM><BR />
<BR />
Another Monday morning is upon us, and it's a public holiday here in England. But I wanted to publish a new set of thoughts, related to what I've written about previously. Not least because I know that there's <A href="https://twitter.com/JuliePlummer20/status/991215288925507584" target="_blank" rel="nofollow noopener noreferrer">at least one person</A> going to read them (thanks <SPAN class="mention-scrubbed">julie.plummer</SPAN>).<BR />
<BR />
In a previous post (<A href="https://blogs.sap.com/2018/04/16/monday-morning-thoughts-upload-download-in-a-cloud-native-world/" target="_blank" rel="noopener noreferrer">Monday morning thoughts: upload/download in a cloud native world</A>) I described the sort of devices upon which I started my mainframe-based career in computing. A common factor was that those devices I used to interact with were dumb. But there's another common factor, that extends further back in time - to my first personal computer, an <A href="http://pipetree.com/qmacro/blog/2005/11/26/acorn-atom-and-my-start-in-computing/" target="_blank" rel="nofollow noopener noreferrer">Acorn Atom</A>.<BR />
<BR />
<IMG src="http://static.flickr.com/31/67207654_ab8292d2f9_m.jpg" /><BR />
<BR />
<STRONG>Silence is golden</STRONG><BR />
<BR />
This common factor was the lack of any discernible noise from the devices themselves. OK, the paper printer terminal made noise when it printed, but that's understandable. Silence resounded loudly at my desk in my bedroom at home, and in the office at work. There weren't enough electronics under duress in the dumb terminals to warrant any active cooling with fans, and while the 8-bit 6502 processor inside the Atom might have got a little warm sometimes, again, it was silent as there were no fans.<BR />
<BR />
And so I was reminded again of these times as I spun up a new virtual machine (VM) running a <A href="https://cloud.google.com/container-optimized-os/docs/" target="_blank" rel="nofollow noopener noreferrer">Container-Optimised OS</A>&nbsp;on the Google Cloud Platform (GCP). My work-based workstation runs macOS, but really all I run is Chrome and a number of terminal emulation windows. So there's really no real stress on the MacBook at all, and no reason for a fan to kick in.<BR />
<BR />
Yes I do run Outlook and its brethren, but only under duress and shut them down again as soon as I can. The real work&nbsp;(i.e. <A href="http://pipetree.com/qmacro/blog/2017/08/30/things-i-do-to-make-my-work-life-better/#email" target="_blank" rel="nofollow noopener noreferrer">not email</A>) happens elsewhere - in this case while connected, via Secure Shell (SSH) to that new VM. Just characters on an emulated terminal screen, and the only idea I could have of how much stress that machine is under is by actively looking at the output of a command such as <A href="http://man7.org/linux/man-pages/man1/top.1.html" target="_blank" rel="nofollow noopener noreferrer">top</A>.<BR />
<BR />
For the most part, then, the only sound I can hear while working is the clicking of the keyboard. Almost like the idea that <A href="http://swiped.co/file/rolls-royce-ad-by-david-ogilvy/" target="_blank" rel="nofollow noopener noreferrer">the only sound you can hear while driving a Rolls-Royce is the electric clock</A>.<BR />
<BR />
<STRONG>Container shaped spectacles</STRONG><BR />
<BR />
When I'm connected to my remote virtual machines, what am I doing? Well, let me answer that by talking about a project upon which I've embarked, to kill two birds with one stone - move my core presence on the web (my <A href="http://pipetree.com/qmacro/" target="_blank" rel="nofollow noopener noreferrer">homepage</A>, my <A href="http://pipetree.com/qmacro/blog/" target="_blank" rel="nofollow noopener noreferrer">main personal blog</A>, and various processes that run in the background) to a container-based setup, and learn more about containers.<BR />
<BR />
My presence on the web is where it has been, at least virtually, for as long as I can remember - at pipetree.com. My old friend and colleague&nbsp;Former Member&nbsp;and I pooled our resources way back when and built &amp; brought a server of our own round nearly 20 years ago to a colocation facility in Fulham, London.<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2018/05/Screen-Shot-2018-05-07-at-06.50.07.png" /><BR />
<BR />
It ran GNU Linux (hence the sticker on the machine, to help identify it amongst the hundreds of others in the facility). I guess the concept of colocation is now outmoded, but I like to think of it in the "as-a-service" stack like this:<BR />
<PRE><CODE>      Software-as-a-Service<BR />
               |<BR />
      Platform-as-a-Service<BR />
               |<BR />
       Backend-as-a-Service<BR />
               |<BR />
Infrastructure-as-a-Service<BR />
               |<BR />
    Colocation-as-a-Service   &lt;--</CODE></PRE><BR />
Since then we've moved out of the facility, I took over pipetree.com as a domain (Piers now has his own presence) and the server is now virtual, running at <A href="https://www.linode.com/" target="_blank" rel="nofollow noopener noreferrer">Linode</A>. But the software has remained largely the same. A proper OS (i.e. Linux), various distributions, and various re-installs to try to maintain a clean environment.<BR />
<BR />
And there's the thing. It's been a given that the install processes for software over the years, and my amateur hand in maintaining that installed software, makes for an untidy setup. Especially when it comes to experimenting with new services, with their myriad requirements and dependencies, not to mention their install tools (which have their own requirements and dependencies - it is indeed <A href="https://en.wikiquote.org/wiki/Turtles_all_the_way_down" target="_blank" rel="nofollow noopener noreferrer">turtles all the way down</A>).<BR />
<BR />
So the heap of software installed on the pipetree.com VM is not clean and tidy; rather, it's a bit of a mess. It's effectively a production server, but I don't really run it as if it were, certainly not in terms of knowing what's going on. I've installed stuff, and then decided that what I'd installed was not what I'd wanted. I'd set something up but then realised I could have set it up differently, and have used various tools (sometimes through simple ignorance, sometimes through necessity) that have left a sticky, glistening snail trail of bits that make me slightly uncomfortable.<BR />
<BR />
With the advent of the concept of containers, and particularly with <A href="https://www.docker.com/" target="_blank" rel="nofollow noopener noreferrer">Docker</A>, that can all change. Instead of interleaving various software services on my VM (MySQL databases, a NodeJS-based blogging system, the Apache HTTP daemon, a <A href="https://en.wikipedia.org/wiki/Planet_(software)" target="_blank" rel="nofollow noopener noreferrer">Planet</A> system, and so on), I can now look at these installations and services through a new, modern pair of spectacles that are not <A href="https://idioms.thefreedictionary.com/rose-tinted+spectacles" target="_blank" rel="nofollow noopener noreferrer">rose-tinted</A>, but <A href="https://www.docker.com/what-container" target="_blank" rel="nofollow noopener noreferrer">container</A>-shaped.<BR />
<BR />
I can run each service in its own container, and have an immediate and effective isolation, not only of runtime, but also of dependency. What's more, I can run multiple instances of these services, and, from a web presence perspective, expose them through yet another service that's <A href="https://www.nginx.com/" target="_blank" rel="nofollow noopener noreferrer">nginx</A>-based, in a reverse-proxy formation. It makes total sense, and allows me to feel calmer about what I'm installing on my host, because the install itself is not like a real install - it's merely the instantiation of an image where the install process has already been completed, with the complexities of dependencies already resolved and everything set up as it should be. All I'm doing is bringing to life a container - an image - where the inner structure and workings are isolated and not leaking across to other parts of the host.<BR />
<BR />
What I'm doing with Docker and these containers is installing small, single-purpose VMs on my general purpose VM.<BR />
<BR />
But the best thing? It's the cheap and fast nature of everything that's going on here. While setting up, I can instantiate a Docker container from an image that has to be fetched* from the <A href="https://hub.docker.com/" target="_blank" rel="nofollow noopener noreferrer">hub</A>&nbsp;in a matter of seconds. On realising that I have set the container up incorrectly, or messed up the contents that would normally take a significant effort to fix, I can simply stop and destroy that container and do it again, in the safe and happy knowledge that I'm not leaving a snail trail behind me.<BR />
<BR />
*I think I might use the term "fetch" instead of "download", as suggesting a sort of horizontal action, rather than a vertical one, it makes much more sense in the cloud native world.<BR />
<BR />
The <A href="https://blogs.sap.com/2018/04/09/monday-morning-thoughts-a-cloud-native-smell/#ephemeral" target="_blank" rel="noopener noreferrer">ephemeral aspect</A>&nbsp;of cloud native artifacts, such as containers, means that it is natural to create and destroy resources with almost reckless abandon. Well, perhaps not quite reckless. But it lets us see software and services, that we're increasingly maintaining and running in the cloud, through our silent character terminals (or web-based UIs, if you're that way inclined) as a different unit of measure, a different way to slice and manage what we're building and deploying. We can stop caring as much about the load on our workstation, as there should be very little. Likewise, we can stop worrying as much about the installation process and the ramifications of getting the services on our VM where we want them to be. All we do is type characters on a modern green screen, and let the invisible, distant machines do the heavy lifting.<BR />
<BR />
And that, to me, is a good thing. What do you think?<BR />
<BR />
&nbsp;<BR />
<BR />
Read more posts in this series here:&nbsp;<A href="https://blogs.sap.com/tag/mondaymorningthoughts/" target="_blank" rel="noopener noreferrer">Monday morning thoughts</A>.
---
Monday morning thoughts: editors and editing
technology-blog-sap
2018-04-30
https://community.sap.com/t5/technology-blogs-by-sap/monday-morning-thoughts-editors-and-editing/ba-p/13353774
2018-04-30-monday-morning-thoughts-editors-and-editing
<EM>In this post I look at how the editor environments that we come across in our daily work are different, and, as those differences might grow and expand as we become cloud native, how we bridge the contrast in facilities with core obsessions such as correct indentation and whitespace.&nbsp;</EM><BR />
<BR />
This weekend I continued to look into <A href="https://kubeless.io/" target="_blank" rel="nofollow noopener noreferrer">Kubeless</A>, a serverless framework that is native to Kubernetes. Kubernetes allows you to&nbsp;automate deployment, scaling, and management of containerized applications - in other words, to orchestrate units of computing across places where containers run, on your workstation as well as in the cloud.<BR />
<BR />
<STRONG>Serverless computing</STRONG><BR />
<BR />
At the heart of serverless computing is the concept of a function, usually stateless and short-lived, the loading and execution of which is taken care of for you. Functions-as-a-Service, or FaaS, is another term for serverless. Of course, serverless is somewhat of a misnomer, as there are definitely servers involved, but the point is that you don't have to worry about that. I'm a fan of serverless computing, having dabbled already with the Google Cloud Functions flavour of serverless, in experiments to create conversational actions for the Google Assistant framework (see "<A href="http://pipetree.com/qmacro/blog/2017/04/30/google-cloud-functions-sheets-apps-script-actions-on-google-win/" target="_blank" rel="nofollow noopener noreferrer">Google Cloud Functions + Sheets + Apps Script + Actions On Google = WIN</A>") and more recently in my <A href="http://pipetree.com/qmacro/blog/2018/01/16/discovering-scp-workflow/" target="_blank" rel="nofollow noopener noreferrer">discovery</A> of the SAP Cloud Platform (SCP) Workflow service (see "<A href="https://blogs.sap.com/2018/01/17/discovering-scp-workflow-service-proxy/" target="_blank" rel="noopener noreferrer">Discovering SCP Workflow - Service Proxy</A>").<BR />
<BR />
Anyway, I digress. Mostly. But what triggered these thoughts was the availability of a UI for Kubeless, which looks like this:<BR />
<BR />
<IMG src="https://github.com/kubeless/kubeless-ui/raw/master/kubeless.png" /><BR />
<BR />
(The Kubeless UI, from the <A href="https://github.com/kubeless/kubeless-ui" target="_blank" rel="nofollow noopener noreferrer">Kubeless UI Github page</A>)<BR />
<BR />
&nbsp;<BR />
<BR />
<STRONG>YAEE (Yet Another Editor Environment)*</STRONG><BR />
<BR />
I found myself inside this Kubeless UI editor environment over the weekend, on my local Kubernetes environment via <A href="https://kubernetes.io/docs/getting-started-guides/minikube/" target="_blank" rel="nofollow noopener noreferrer">Minikube</A>. This environment is not required to build serverless functions, but makes the process a little more comfortable.<BR />
<BR />
* The term and acronym "Yet Another ..." comes from the Perl community, where there's the "JAPH" acronym, (Just Another Perl Hacker), originated and popularised by Randal Schwartz, and the "YAPC" acronym (Yet Another Perl Conference).<BR />
<BR />
The editor is basic, and arguably only one of the key components of the environment. But a basic editor here is perhaps "good enough", because of the nature of what you're going to be writing - a fairly simple function that does one thing, and one thing well. Rather like the Unix philosophy where you have a pipeline of commands that also each do one thing and do it well. But that's a story for another time, perhaps.<BR />
<BR />
Editing short sections of code like this reminds me of the script task concept within the SCP Workflow service (see "<A href="https://blogs.sap.com/2018/01/26/discovering-scp-workflow-script-tasks/" target="_blank" rel="noopener noreferrer">Discovering SCP Workflow - Script Tasks</A>"). There too we have a (usually) short piece of code, which is almost secondary to the bigger picture of the overall workflow definition itself. Yes, the editing experience is provided by the SAP Web IDE, which offers many facilities, but for me the mindset of writing "helper" scripts here keeps me mindful of the overall end goal (to create a clear and efficient workflow experience) which is in contrast to the scripts themselves which are more a means to an end.<BR />
<BR />
Moreover, the fact that at the time of writing, only ES5 JavaScript is supported, preventing me from indulging in <A href="http://exploringjs.com/es6/ch_arrow-functions.html" target="_blank" rel="nofollow noopener noreferrer">fat arrow syntax</A>&nbsp;and other ES6 goodies like <A href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function%2A" target="_blank" rel="nofollow noopener noreferrer">generators</A>. This in turn holds me back slightly from "over committing", in the sense that "support for something better (ES6) will come along soon so I'll just tread water for now". The same situation can be found in <A href="https://developers.google.com/apps-script/" target="_blank" rel="nofollow noopener noreferrer">Google Apps Script</A>, where there's also only support for ES5, and where I find myself writing a lot of "helper" code.<BR />
<BR />
So already that's three editor environments we've talked about - in Kubeless UI, SAP Web IDE, and the Google Apps Script editor. That's on top of any "main" editor environment, which for me (beyond SAP Web IDE for many things) can be either <A href="https://www.vim.org/" target="_blank" rel="nofollow noopener noreferrer">vim</A> on a remote virtual machine or the <A href="https://cloudplatform.googleblog.com/2016/10/introducing-Google-Cloud-Shels-new-code-editor.html" target="_blank" rel="nofollow noopener noreferrer">Google Cloud Shell editor</A>.<BR />
<BR />
<IMG src="https://cloud.google.com/shell/docs/images/code-editor.png" /><BR />
<BR />
(The Google Cloud Shell editor, from the <A href="https://cloud.google.com/shell/docs/features#code_editor" target="_blank" rel="nofollow noopener noreferrer">Google Cloud Shell code editor feature description page</A>)<BR />
<BR />
And of course there's the ABAP editing environments SE24 (sorry, I mean SE80) as well as the Eclipse-based ABAP Developer Tools in the form of ABAP in Eclipse. Add to that the countless online REPLs (see "<A href="https://blogs.sap.com/2018/03/26/monday-morning-thoughts-cloud-native/" target="_blank" rel="noopener noreferrer">Monday morning thoughts: cloud native</A>").<BR />
<BR />
Further, think of the wonderful Jupyter Notebook cloud literate programming environment, which is also being used, coincidentally, in SAP contexts - see the "<A href="https://www.sap.com/uk/developer/tutorials/mlb-hxe-tools-jupyter.html" target="_blank" rel="noopener noreferrer">Use Jupyter Notebook with SAP HANA, express edition</A>" tutorial, for example.<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2018/04/1_CdLQ9beRMKVIpHbMSbjX7w.gif" /><BR />
<BR />
(Part of a Jupyter Notebook, from the <A href="https://newsletter.jupyter.org/jupyter-newsletter-5-july-22-8965016f732" target="_blank" rel="nofollow noopener noreferrer">jupyter.org website</A>)<BR />
<BR />
Here too, the code editor facilities themselves are secondary to the overall (amazing) experience of the notebook concept, and the amount of code you write in any one section is small.<BR />
<BR />
And it would be remiss of me not to mention the <A href="https://developer.chrome.com/devtools" target="_blank" rel="nofollow noopener noreferrer">Chrome Developer Tools</A> themselves, which provide a common editing environment, especially when you link to your local filesystem for persistent edits.<BR />
<BR />
<STRONG>The key commonality is difference</STRONG><BR />
<BR />
That's a lot of different editor environments - and apart from Eclipse, I haven't mentioned any traditional workstation-local tools such as Atom, Sublime or the editor-du-jour VS-Code (which I also enjoy using). Not only is that a wide range of editors, but also a wide range of contexts, or programmer mindsets, when using these different environments. I've already alluded to the mindset example when writing a Workflow service script task. When using a Jupyter notebook one might be thinking in a more <A href="https://en.wikipedia.org/wiki/Literate_programming" target="_blank" rel="nofollow noopener noreferrer">literate programming</A> style. When writing a cloud function one might be thinking of the strict interface and ensuring things remain quick and stateless.<BR />
<BR />
What's common though across all these mindsets, at least to most people, it would seem, is the implicit requirement to impose decent formatting on oneself and one's code. Proper use of whitespace (whether you're a tabs or a spaces person, that doesn't matter) and correct - or at least meaningful - indentation. Indentation which is in some cases (Python) a requirement, rather than something nice to have.<BR />
<BR />
What's also common is the fact that because you're editing in different environments, it's likely that some of them won't have the creature comforts we've come to expect from "core" editing environments such as SAP Web IDE, VS-Code or Eclipse. I'm thinking particularly about a couple of features: the ability to customise the editor's look and feel (and also how it fits into the wider continuous integration story at your workplace), and tools such as reformatters.<BR />
<BR />
<STRONG>Formatting poll</STRONG><BR />
<BR />
Last night I set up a <A href="https://twitter.com/qmacro/status/990640820574441472" target="_blank" rel="nofollow noopener noreferrer">poll</A> on Twitter: "when writing a quick-n-dirty or hacky program, do you still care about whitespace &amp; indentation or not?":<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2018/04/Screen-Shot-2018-04-30-at-07.12.21.png" /><BR />
<BR />
The overwhelming response so far is that people care. I have already had some great responses, from the <A href="https://twitter.com/JelenaAtLarge/status/990795362104422402" target="_blank" rel="nofollow noopener noreferrer">strong words</A> from&nbsp;<SPAN class="mention-scrubbed">jelena.perfiljeva</SPAN>&nbsp;to versions of an editor-feature solution from&nbsp;<SPAN class="mention-scrubbed">se38</SPAN>&nbsp;,&nbsp;<SPAN class="mention-scrubbed">c3d1947136cd4c748a7aa794001af496</SPAN>,&nbsp;<SPAN class="mention-scrubbed">yuval.morad</SPAN>&nbsp;and others (format-on-save or a format hotkey).<BR />
<BR />
Yes, the editor-feature solutions are great, but only when we're working in that specific editor. When we move across different editing environments in our daily work, which will be a scenario that only happens more often as we move to the cloud, we'll come across editing environment like the examples mentioned earlier, where such features are either not present, or at least hard-coded to format in a way you don't particularly like. So I found myself manually editing and correcting whitespace in my hacky script yesterday not because there wasn't a formatting feature in the editor in which I was writing the code, but because I've become so used to the "lowest common denominator" (of no format feature) that I naturally turned to doing it myself.<BR />
<BR />
Heck, that's where I started in my programming life - before auto formatters - so it comes naturally anyway, and for me it's a way to pause and think about what I've written as I almost absent-mindedly clean up the indentation.<BR />
<BR />
<STRONG>The future normal?</STRONG><BR />
<BR />
Former Member&nbsp;mentioned (on Slack) the other day something along the lines of "I've got my editor just how I want it now", which implied to me a lot of care, attention and obsessive tweaking that I admire, but am thinking is - in some scenarios - less worthwhile these days. In my mental move to become a cloud native (see what I did there?) I'm moving away from becoming attached one specific editor and preparing myself for a future normal, which might be described nicely in a <A href="https://en.wikiquote.org/wiki/Colossal_Cave_Adventure" target="_blank" rel="nofollow noopener noreferrer">Colossal Cave style</A>&nbsp;thus:<BR />
<BR />
YOU ARE IN A MAZE OF TWISTY LITTLE EDITORS, ALL DIFFERENT<BR />
<BR />
I've seen the platforms for writing and deploying code almost explode with possibilities and variations over the past decade, and it seems only to be going to continue. As we mentally and physically (well, logically) move away from our local workstations to the cloud, we cede control of our local tools. Perhaps one day the facilities in the cloud, naturally different because they're provided on different platforms by different vendors, might coalesce via some sort of common standard, but I'm not holding my breath. Instead, I'm embracing difference, and continuing to manually obsess over whitespace in all the code I write, wherever it is.<BR />
<BR />
How about you?<BR />
<BR />
&nbsp;<BR />
<BR />
This post was brought to you by <A href="https://www.pactcoffee.com/coffees/la-secreta" target="_blank" rel="nofollow noopener noreferrer">La Secreta coffee</A>&nbsp;and the quiet of an early Monday morning.<BR />
<BR />
&nbsp;<BR />
<BR />
Read more posts in this series here:&nbsp;<A href="https://blogs.sap.com/tag/mondaymorningthoughts/" target="_blank" rel="noopener noreferrer">Monday morning thoughts</A>.<BR />
<BR />
&nbsp;<BR />
<BR />
<STRONG>Update 02 May 2018:</STRONG><BR />
<BR />
The <A href="https://twitter.com/qmacro/status/990640820574441472" target="_blank" rel="nofollow noopener noreferrer">final results of the poll</A> came in:<BR />
<UL><BR />
 	<LI>Total number of votes: 137</LI><BR />
 	<LI>Those caring about whitespace: 87%</LI><BR />
 	<LI>Those not caring about whitespace: 13%</LI><BR />
</UL>
---
Monday morning thoughts: debugging approach and Greasemonkey revival
technology-blog-sap
2018-04-23
https://community.sap.com/t5/technology-blogs-by-sap/monday-morning-thoughts-debugging-approach-and-greasemonkey-revival/ba-p/13384813
2018-04-23-monday-morning-thoughts-debugging-approach-and-greasemonkey-revival
In the <A href="https://blogs.sap.com/2018/04/11/announcing-the-unofficial-and-unnamed-sap-community-podcast/" target="_blank" rel="noopener noreferrer">inaugural episode</A> of&nbsp;Former Member&nbsp;and&nbsp;<SPAN class="mention-scrubbed">uxkjaer</SPAN>&nbsp;'s new Community Podcast we touched on how interesting it can be to find out about other people's programming setups, even down to the actual screens and keyboards they use. I enjoy learning about how others work, what tools they use, what thinking or approaches they take in debugging, and yes - even what screens they use and how happy they are with them.<BR />
<BR />
I'm sure I'm not alone in this regard; moreover, I know there's a wealth of untapped, innate knowledge and implicit ability inside all of you that would be great to share. So I thought I'd contribute by giving a little insight into some small approaches and methods I find myself using. Nothing earth shattering, but I think that's also the point. I personally would love to see from others the equivalent of what I've just recorded - I know I'd be the richer for it.<BR />
<BR />
The recording is just over 20 mins, and it's pretty much unscripted, which is sort of the point - I didn't want to prepare anything, so you get a real sense of the workflow (lowercase "w") rather than something polished and less real.<BR />
<BR />
<IFRAME width="560" height="315" src="https://www.youtube.com/embed/Sf21TlN17Mg" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen=""></IFRAME><BR />
<BR />
During the recording, I mentioned <A href="https://en.wikipedia.org/wiki/Greasemonkey" target="_blank" rel="nofollow noopener noreferrer">Greasemonkey</A>, which was a wonderful tool that allowed one to write JavaScript to be automatically executed when certain pages were loaded; that JavaScript could then manipulate the pages to suit your needs. I note that the Greasemonkey spirit is still alive and well in the context of, for example, Chrome Extensions such as <A href="https://chrome.google.com/webstore/detail/tampermonkey/dhdgffkkebhmkfjojejmpbldmpobfkfo?hl=en" target="_blank" rel="nofollow noopener noreferrer">Tampermonkey</A>.<BR />
<BR />
I used Greasemonkey back in 2005 to improve the OSS Note experience - you can read about it in this post "<A href="https://blogs.sap.com/2005/05/20/hacking-the-sap-service-portal-to-make-oss-notes-better/" target="_blank" rel="noopener noreferrer">Hacking the SAP service portal to make OSS notes better</A>" (unfortunately I lost the screencast but you can get a good idea of what I was building from the post itself).<BR />
<BR />
So I wanted to leave you with two thoughts for this week:<BR />
<UL><BR />
 	<LI>seeing others' development and debugging workflow can be of great benefit - getting inside the programming heads of your friends and colleagues and seeing their preferences and approaches can be not only educational but also fun</LI><BR />
 	<LI>the introspective and manipulative power that's baked into UI5 gives us all sorts of possibilities; the Greasemonkey style approach is by definition (and design) ephemeral, but I think that is one of its charms - nobody is claiming that the "solutions" will work long term, but there are plenty of situations where a quick temporary fix, or a scratched itch, is exactly what's needed to get the job done.</LI><BR />
</UL><BR />
Do you have some programming or debugging workflow to share? What tools do you use? What does your desktop and working environment look like? Let us know in the comments below.<BR />
<BR />
&nbsp;<BR />
<BR />
p.s. For those that are interested, here's the final version of the JavaScript I put in my bookmarklet:<BR />
<PRE class="language-javascript"><CODE>javascript: (function() {<BR />
    opl = sap.ui.getCore().byId("application-bpmworkflowmonitor-DisplayInstances-component---InstancesDetailView--ObjectPageLayout")<BR />
       || sap.ui.getCore().byId("application-bpmworkflowmonitor-DisplayDefinitions-component---InstancesDetailView--ObjectPageLayout");<BR />
    opl.insertSection(opl.removeSection(3), 1);<BR />
})();</CODE></PRE><BR />
&nbsp;<BR />
<BR />
Read more posts in this series here:&nbsp;<A href="https://blogs.sap.com/tag/mondaymorningthoughts/" target="_blank" rel="noopener noreferrer">Monday morning thoughts</A>.
---
Monday morning thoughts: upload / download in a cloud native world
technology-blog-sap
2018-04-16
https://community.sap.com/t5/technology-blogs-by-sap/monday-morning-thoughts-upload-download-in-a-cloud-native-world/ba-p/13378369
2018-04-16-monday-morning-thoughts-upload-download-in-a-cloud-native-world
This weekend I was exploring some Cloud Foundry features on the SAP Cloud Platform (SCP) and came across a pattern that is pretty much everywhere - not only within the SAP space but far beyond too. It got me thinking of whether this pattern will remain, or be replaced (or at least augmented) by something more - in my mind - cloud native.<BR />
<BR />
<STRONG>The upload / download pattern</STRONG><BR />
<BR />
This pattern is the upload / download pattern for transferring artifacts "up to" the cloud or "down from" the cloud. An example (the one I can across this weekend) is shown in the screenshot here:<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2018/04/Screen-Shot-2018-04-16-at-06.15.41.png" /><BR />
<BR />
It's clear that this pattern is pervasive, I see it in all sorts of situations. And I'm wondering if I'm thinking in too extreme a manner when I say that the assumed presence of a workstation-local filesystem (from which artifacts can be uploaded to the cloud, or to which they can be downloaded from the cloud) is something from which we'll be able to free ourselves.<BR />
<BR />
But first, do we want to free ourselves from that?<BR />
<BR />
<STRONG>Mainframe dinosaur</STRONG><BR />
<BR />
It's not a secret that I'm an old mainframe dinosaur, cutting my work computing teeth on IBM big iron at the first company I worked for after finishing my degree. Moreover, during my degree I used various minicomputers, such as Vaxen*, while moonlighting in the computer lab and earning money programming for insurance companies in my spare time. Even before that, my first exposure to computing was at school where we had a PDP-11 with paper terminals.<BR />
<BR />
*yes, that's the colloquial plural for Vax machines.<BR />
<BR />
So my view on what a computer is has been strongly shaped by my experiences sitting at workstations that looked like this:<BR />
<DIV class="scn-scrollable-area"><BR />
<TABLE style="height: 133px" width="614"><BR />
<TBODY><BR />
<TR><BR />
<TD><IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2018/04/DEC-VT320-0a.jpg" height="180" width="172" /></TD><BR />
<TD><IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2018/04/Screen-Shot-2018-04-16-at-06.24.24.png" height="172" width="184" /></TD><BR />
<TD><IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2018/04/Screen-Shot-2018-04-16-at-06.32.29.png" height="158" width="190" /></TD><BR />
</TR><BR />
</TBODY><BR />
</TABLE><BR />
</DIV><BR />
One obvious common factor was that these terminals were known as "dumb", in that they had no real local processing power of their own. Which also implies no local filesystem.<BR />
<BR />
<STRONG>The new mainframe</STRONG><BR />
<BR />
More recently I've been adopting the excellent Chrome OS, on various devices including the Chrome Pixelbook, as my go-to platform, as it's the nearest I've got to the nature of the mainframe which is my ideal scenario, even tweeting about my experiences and thoughts with the <A href="https://twitter.com/search?q=%23webterminal%20OR%20%23webterminals&amp;src=typd" target="_blank" rel="nofollow noopener noreferrer">#webterminals</A> hashtag.<BR />
<BR />
While I use my work laptop (running macOS) during the week, at the weekend I switch to what I consider the future of computing, which is my Chrome OS device, and which, for consistency, I'm going to refer to as my "web terminal" for the rest of this post. Yes, this particular web terminal has some local computing power, of course (it's Linux underneath) but to me, storage of anything other than ephemeral files such as screenshots seems like a warning "smell" to me.<BR />
<BR />
So when I came across the UI at the top of this post, on my web terminal, I paused. I'd been developing my app, that I'd wanted to deploy, not locally on the web terminal, but on a virtual server, provided to me (for free) in the form of the Google Cloud Shell:<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2018/04/Screen-Shot-2018-04-16-at-06.43.05.png" height="310" width="540" /><BR />
<BR />
So when it came to deploying this app to the cloud, there was a mismatch - my app's artifacts were also in the cloud, on a "virtual local" machine, rather than on the web terminal itself. There was no "down" to browse to, nor upload from. Well, of course, there is with this Chrome OS based web terminal - generally, the facility to upload local files via a web browser to a server is indeed a marvellous one, but in this case, I deliberately had no local files.<BR />
<BR />
<STRONG>A pragmatic but short-term solution</STRONG><BR />
<BR />
So this got me thinking. At least, from a practical, short-term perspective, I was able to download files from the Google Cloud Shell to the storage area on my web terminal, and then browse to that storage area and upload them:<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2018/04/Screen-Shot-2018-04-16-at-06.47.56.png" /><BR />
<BR />
Quite a round-about journey for the artifacts themselves.<BR />
<BR />
But over a cup of coffee, it got me thinking. Will there be alternative solutions for true cloud native computing? That's my interpretation of "cloud native", by the way - where we progress (i.e. return positively, rather than regress) to the original mainframe era.*<BR />
<BR />
*That's extreme thinking, I know, and deliberately so, but there you have it.<BR />
<BR />
Will there be facilities to say "go and find this file on this virtual machine", exposed perhaps via a short-lived HTTP connection that's spun up for that very purpose and then destroyed again?<BR />
<BR />
Of course, we have this facility already in slightly different circumstances, in the form of git-based deployments. Look at how, for example, we can move artifacts from design time in the SAP Web IDE to runtime on the SCP, via git.<BR />
<BR />
Perhaps that's the answer longer term too - provide two alternatives for deployment sources - a file upload facility as we saw in the first screenshot at the top of this post, but also a source code control endpoint - perhaps a special "one time use" endpoint with an opaque GUID.&nbsp;This is not something that exists today of course - we have to have the itch to scratch, to see it built.<BR />
<BR />
<STRONG>Further thoughts</STRONG><BR />
<BR />
I'm not sure what the answer is. I'm not even sure this is a significant and widespread problem today. It just appears to me that any sort of upload / download from a workstation-local filesystem doesn't feel right to me long term.<BR />
<BR />
I know folks like their local computing power, and who am I to deny them that? What are your thoughts? I'd love to hear them.<BR />
<BR />
&nbsp;<BR />
<BR />
This post was brought to you by birdsong in the early dawn, and a nice cup of tea.<BR />
<BR />
&nbsp;<BR />
<BR />
Read more posts in this series here:&nbsp;<A href="https://blogs.sap.com/tag/mondaymorningthoughts/" target="_blank" rel="noopener noreferrer">Monday morning thoughts</A>.
---
Monday morning thoughts: a cloud native smell
technology-blog-sap
2018-04-09
https://community.sap.com/t5/technology-blogs-by-sap/monday-morning-thoughts-a-cloud-native-smell/ba-p/13372514
2018-04-09-monday-morning-thoughts-a-cloud-native-smell
Continuing on from my earlier <A href="https://blogs.sap.com/2018/03/26/monday-morning-thoughts-cloud-native/" target="_blank" rel="noopener noreferrer">random thoughts</A> about what cloud native&nbsp;means to me, I was musing this morning on the nature of the web, and specifically URIs - or rather their specialisation that we see most commonly - URLs.<BR />
<A name="the-importance-of-stable-urls" target="_blank"></A><BR />
<H3 id="toc-hId-1035721707">The importance of stable URLs</H3><BR />
There's a well-known article by Tim Berners-Lee (TBL) entitled "<A href="https://www.w3.org/Provider/Style/URI" target="_blank" rel="nofollow noopener noreferrer">Cool URIs don't change</A>" which I'd encourage you to go and read at some stage over a cup of coffee. It's from the World Wide Web Consortium (W3C). There are many implications of what he says in this article, which I'll leave you to ponder. There's also one particular observation that's worth sharing now - the URL of the article hasn't changed since its publication 20 years ago. Now that's what I call setting a good example!<BR />
<BR />
In thinking about the content of this article, I'm reminded of the excellent set of productivity tools from Google - known these days as G Suite. I say "known these days", as they've been referred to previously as "Google Apps", and - perhaps colloquially - as "Google Docs". But while the suite's name might have changed, the fundamental design that underpins this awesome set of tools has not.<BR />
<BR />
Because Google get the web, they build their tools "<STRONG>of</STRONG> the web", rather than merely "<STRONG>on</STRONG> the web". That means, for example, that the URL of a Google spreadsheet, for example, or a Google document, or a Google Form, or whatever - is unique and permanent. It doesn't change. Even if you change the name of that "document" (we should really say "of that resource"), the URL remains the same. And that brings a superset of web-based by-products that we take for granted. For example, I can jump to a document I've been working on recently in literally a handful of keystrokes, without having to think of where I stored it or what the URL might be, or what the navigation path might be that I have to take once if I have to first find some sort of "root" resource. This is all I have to do:<BR />
<OL><BR />
 	<LI>Cmd-T to get a new browser tab and have my cursor placed in the omnibar</LI><BR />
 	<LI>then three or four characters to identify the working title of the document</LI><BR />
 	<LI>finally a down-arrow or two and Enter to request that resource</LI><BR />
</OL><BR />
Bam. In and editing.<BR />
<BR />
More than can be said for, ahem, certain other online productivity / collaboration suites - merely change the title of the document you're writing and the URL changes! Ouch! What use is that if I want to share the working draft resource with you?<BR />
<BR />
Anyway, let me tear myself away from this becoming another post entirely, and look at a typical G Suite URL to help me get to my next point. Here's an example, for a spreadsheet (I've changed the URL slightly for security reasons):<BR />
<BR />
<A href="https://docs.google.com/spreadsheets/d/" target="test_blank" rel="nofollow noopener noreferrer">https://docs.google.com/spreadsheets/d/</A><STRONG>1nT4GB85goF34MaxiEZAMJp-aCk0QguyZ6WmlWjMUA42</STRONG>/<BR />
<BR />
The structure of the URL is quite simple, and most of it is the unique code (1nT4...42) that identifies the individual online spreadsheet resource.<BR />
<A name="the-opacity-axiom" target="_blank"></A><BR />
<H3 id="toc-hId-839208202">The Opacity Axiom</H3><BR />
So that brings me to a parallel thought relating to cloud native, and something that (to me) is a "smell" (as in something that just gives me a subtle hint about something - not necessarily negative).<BR />
<BR />
When I first started out exploring the SAP Cloud Platform (SCP), I noticed that a lot of the URLs had similar opaque identifiers in them. For example, if I created a temporary trial account, or a temporary member within a trial account. If I added a subaccount or was given access to a new global account, whether in the Neo or (now the) Cloud Foundry context ... each time, I saw unique, opaque identifiers.<BR />
<BR />
Here's another couple of (modified) examples:<BR />
<BR />
<A href="https://account.us2.hana.ondemand.com/cockpit#/acc/" target="test_blank" rel="nofollow noopener noreferrer">https://account.us2.hana.ondemand.com/cockpit#/acc/</A><STRONG>dd2758442</STRONG>/services<BR />
<BR />
<A href="https://account.hanatrial.ondemand.com/cockpit#/region/cf-eu10/globalaccount/" target="test_blank" rel="nofollow noopener noreferrer">https://account.hanatrial.ondemand.com/cockpit#/region/cf-eu10/globalaccount/</A><STRONG>42461e78-9618-44d8-9c8e-629dc5319b61</STRONG>/subaccount/<STRONG>420c85ab-ecbc-4760-84e6-c1d45dd593b4</STRONG>/details<BR />
<BR />
Even services within the SCP had parts of their URLs that I couldn't control (or initially understand) - provider account identifiers, for example. And they looked a little bit ugly to me, initially.<BR />
<BR />
But then I remembered another W3C article, from even earlier in the web's history (1996) - <A href="https://www.w3.org/DesignIssues/Axioms.html" target="_blank" rel="nofollow noopener noreferrer">Universal Resource Identifiers - Axioms of Web Architecture</A>. This is also a great article and worth a read. Of particular interest to us here in that article is the section on "<A href="https://www.w3.org/DesignIssues/Axioms.html#opaque" target="_blank" rel="nofollow noopener noreferrer">The Opacity Axiom</A>", which states:<BR />
<P class="axiom"><EM>"The only thing you can use an identifier for is to refer to an object. When you are not dereferencing, you should not look at the contents of the URI string to gain other information."</EM></P><BR />
This axiom somewhat goes against the grain of what I like to think, but is actually crucial. First from the point of view of the side-effect of trying to infer structure from a URL, but more importantly from the perspective of where we are today, in the cloud native context of resources being spun up, created, instantiated, conjured up ... and then after their utility has been spent, being deleted, destroyed, disappeared*.<BR />
<BR />
(*yes I know I'm using this verb transitively, but there you go. Talking of unusual words and unusual usages, did you notice TBL using the word "disillusion" in the "Cool URIs Don't Change" article - also as a transitive verb? That use has been&nbsp;<A href="https://books.google.com/ngrams/graph?year_start=1800&amp;year_end=2008&amp;corpus=15&amp;smoothing=7&amp;case_insensitive=on&amp;content=disillusion&amp;direct_url=t4%3B%2Cdisillusion%3B%2Cc0%3B%2Cs0%3B%3Bdisillusion%3B%2Cc0%3B%3BDisillusion%3B%2Cc0" target="_blank" rel="nofollow noopener noreferrer">waning since the early C20</A>, but still wonderful.)<BR />
<BR />
<A name="ephemeral" target="_blank"></A>Resources, such as those that are spun up on cloud platforms such as SAP's and Google's, that are ultimately ephemeral need to be born and then die, and in that intervening period, have an identifier that is as equally anonymous as it is unique.<BR />
<A name="the-cloud-native-smell" target="_blank"></A><H3 id="toc-hId-642694697">The cloud native smell</H3><BR />
And it's the very presence of these superficially ugly but essentially throwaway identifiers in URLs (after all, <A href="https://en.wikipedia.org/wiki/URL" target="_blank" rel="nofollow noopener noreferrer">URLs</A> *are* <A href="https://en.wikipedia.org/wiki/Uniform_Resource_Identifier" target="_blank" rel="nofollow noopener noreferrer">URIs</A>, aren't they) that to me form a subtle hint, a signpost, a smell, that what we're dealing with is something that is cloud native. Resources, services, VMs, clusters, subaccounts - they're created and destroyed all the time, not just in a web environment but in on-premise contexts and sometimes within proprietary architectures.<BR />
<BR />
The fact that resources -- and I'm using the word "resource" while thinking about how that word is used in <A href="https://en.wikipedia.org/wiki/Representational_state_transfer" target="_blank" rel="nofollow noopener noreferrer">Representational State Transfer</A> (REST) -- need identifiers in the context of the web (and yes, "cloud" doesn't mean "just web (HTTP)"), but our interface to the cloud is predominantly via that protocol) means that the increasing occurrence of URLs with long strings of opaque characters often triggers a thought in my head that we're moving further towards the age of cloud native.<BR />
<BR />
What are your thoughts?<BR />
<BR />
&nbsp;<BR />
<BR />
This post was brought to you by <A href="https://www.pactcoffee.com/coffees/finca-buenos-aires" target="_blank" rel="nofollow noopener noreferrer">Finca Buenos Aires</A> coffee and some happy memories from the early days of the web.<BR />
<BR />
&nbsp;<BR />
<BR />
Read more posts in this series here:&nbsp;<A href="https://blogs.sap.com/tag/mondaymorningthoughts/" target="_blank" rel="noopener noreferrer">Monday morning thoughts</A>.
---
Introduction to SAP Cloud Platform Workflow - Summary
technology-blog-sap
2018-04-05
https://community.sap.com/t5/technology-blogs-by-sap/introduction-to-sap-cloud-platform-workflow-summary/ba-p/13368513
2018-04-05-introduction-to-sap-cloud-platform-workflow-summary
Yesterday I gave a webcast for ASUG entitled "Introduction to SAP Cloud Platform Workflow". This is a short post that pulls together all the resources related to that webcast.<BR />
<BR />
The SAP Cloud Platform Workflow service is a relatively new service (it was made available mid 2017) but already has many features and it's definitely worth looking into and learning more about. That's the reason I've been looking into it, and I'd encourage you to do the same.<BR />
<BR />
The webcast was recorded, and you can access the entire recording here on the ASUG site: <A href="https://discuss.asug.com/docs/DOC-49163" target="_blank" rel="nofollow noopener noreferrer">Introduction to SAP Cloud Platform Workflow</A>. This page has a link to the recording itself (which you need to enter some basic info to see) and a link to the slides in PDF form.<BR />
<BR />
There were only a few slides; the bulk of the webcast was a demo of various Workflow service features, which I did using the workflow definition I created originally to write a blog post series. The demo itself is around 30 mins long and I've also made it separately available on YouTube (I'd pre-recorded it in case of technical difficulties during the live webcast itself). It's here: <A href="https://www.youtube.com/watch?v=uR42fhOUmq4" target="_blank" rel="nofollow noopener noreferrer">Introduction to SAP Cloud Platform Workflow - Demo</A>.<BR />
<BR />
<IFRAME width="560" height="315" src="https://www.youtube.com/embed/uR42fhOUmq4" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen=""></IFRAME><BR />
<BR />
The workflow definition I used was one relating to beer recommendations, and I wrote extensively about it, and my journey of discovery while I built it, in a 10 part blog post series here on the SAP Community. That series is "<A href="http://pipetree.com/qmacro/blog/2018/01/16/discovering-scp-workflow/" target="_blank" rel="nofollow noopener noreferrer">Discovering SCP Workflow</A>" and there's a table of contents pointing to each of the parts at that link too. Here are the subjects that the parts cover:&nbsp;The Monitor Â· Instance Initiation Â· Using Postman Â· Service Proxy Workflow Definition Â· User Tasks Â· Component Startup Recommendation UI Â· Script Tasks Â· Service Tasks.<BR />
<BR />
During the webcast, I'd shown a slide with links to various useful resources. Here they are too:<BR />
<UL><BR />
 	<LI><A href="https://help.sap.com/viewer/product/WORKFLOW_SERVICE/Cloud/en-US" target="_blank" rel="noopener noreferrer">SAP Cloud Platform Workflow</A> on the SAP Help Portal</LI><BR />
 	<LI><A href="https://blogs.sap.com/tags/73554900100800000555/" target="_blank" rel="noopener noreferrer">Blog posts on SAP Cloud Platform Workflow</A>&nbsp;here on the SAP Community</LI><BR />
 	<LI><A href="https://help.sap.com/doc/0c3db190da2c4866a1f2906763d4f59a/Cloud/en-US/34c3e8adf5234d91b9b4cdee94b9306b.html" target="_blank" rel="noopener noreferrer">SAP Cloud Platform Workflow Learning Journey</A> on the SAP Help Portal</LI><BR />
 	<LI><A href="https://account.hanatrial.ondemand.com/cockpit#/home/trialhome" target="_blank" rel="nofollow noopener noreferrer">Free Trial Account</A> on the SAP Cloud Platform</LI><BR />
 	<LI><A href="https://api.sap.com/shell/discover/contentpackage/SAPCPWorkflowAPIs/api/SAP_CP_Workflow" target="_blank" rel="noopener noreferrer">SAP Cloud Platform Workflow API</A> on the SAP API Hub</LI><BR />
 	<LI><A href="https://open.sap.com/static/podcastgen/index.php?name=2017-03-29_sapcp_podcast_episode27_mar2017.mp3" target="_blank" rel="noopener noreferrer">Episode 27 on SCP Workflow</A> on the SAP Cloud Platform Podcast</LI><BR />
</UL><BR />
Finally, this webcast was just one in an entire series that's happening over 2018.&nbsp;<SPAN class="mention-scrubbed">tammy.powlas3</SPAN>&nbsp;put together a great post summarising all of them:&nbsp;<A href="https://blogs.sap.com/2018/04/01/save-the-date-your-guide-to-every-upcoming-workflow-2018-webcast/" target="_blank" rel="noopener noreferrer">Save the Date! Your Guide to Every Upcoming Workflow 2018 Webcast</A>.<BR />
<BR />
Have fun on your own journey of discovery!<BR />
<BR />
<A name="update20180410" target="_blank"><SPAN style="text-decoration: underline">Update 10 April 2018</SPAN></A><BR />
<BR />
A couple of days after this I was honoured to record a CodeTalk on the subject of the Workflow service with&nbsp;<SPAN class="mention-scrubbed">ian.thain</SPAN>&nbsp;- the video recording is here:&nbsp;<A href="https://www.youtube.com/watch?v=t5V0WRle1xc" target="_blank" rel="nofollow noopener noreferrer">https://www.youtube.com/watch?v=t5V0WRle1xc</A>. and there's an audio-only flavour on the CodeTalk podcast, available here: <A href="https://itunes.apple.com/us/podcast/sap-codetalk/id1266361803?mt=2" target="_blank" rel="nofollow noopener noreferrer">SAP CodeTalk on iTunes</A>.&nbsp;Thanks Ian!
---
Scripting the Workflow API with bash and curl
technology-blog-sap
2018-03-31
https://community.sap.com/t5/technology-blogs-by-sap/scripting-the-workflow-api-with-bash-and-curl/ba-p/13364396
2018-03-31-scripting-the-workflow-api-with-bash-and-curl
I've written about the SAP Cloud Platform (SCP) Workflow service before, including a 10-part series called <A href="http://pipetree.com/qmacro/blog/2018/01/16/discovering-scp-workflow/" target="_blank" rel="nofollow noopener noreferrer">Discovering SCP Workflow</A> that is possibly more than you wanted to read, but hey.<BR />
<BR />
The fact that the Workflow service has an API shouldn't be a surprise to anyone. The fact that it's well designed, is informed by Representational State Transfer (REST) principles and <A href="https://help.sap.com/doc/72317aec52144df8bc04798fd232a585/Cloud/en-US/wfs-core-api-docu.html" target="_blank" rel="noopener noreferrer">nicely documented</A>&nbsp;may come as a pleasant surprise to some. (I'm a fan of REST as an approach to integration - see&nbsp;<A href="https://blogs.sap.com/2004/06/24/forget-soap-build-real-web-services-with-the-icf/" target="_blank" rel="noopener noreferrer">Forget SOAP â build real web services with the ICF</A>&nbsp;from 2004 for some background).<BR />
<BR />
In hacking around with the Workflow service to create the series of blog posts, and in preparation for my ASUG Webinar I'm giving next week (Wed 04 Apr - see&nbsp;<A href="https://www.asug.com/events/biti-introduction-to-sap-cloud-platform-workflow" target="_blank" rel="nofollow noopener noreferrer">BITI: Introduction to SAP Cloud Platform Workflow</A> for how to sign up), I found myself repeatedly creating multiple instances of workflow definitions, more than I needed, and wanted a convenient way to tidy things up. You can use the rather excellent <A href="https://blogs.sap.com/2018/01/08/discovering-scp-workflow-the-monitor/" target="_blank" rel="noopener noreferrer">Workflow Monitor</A> app to terminate instances but you can only terminate them one at a time, and are prompted for confirmation on each one (which is a good thing on the whole).<BR />
<H3 id="toc-hId-1034856096">Using the API to cancel instances</H3><BR />
So I decided to learn more about the Workflow API by using it to clean up redundant running workflow instances, specifically by setting their status to "CANCELED" so they disappear from view. (Yes, I'm still struggling to look at the odd spelling of that word too, but I'm trying to embrace that foreign English version that seems to be the standard in these parts).<BR />
<BR />
The relevant section of the API documentation for what I needed is <A href="https://help.sap.com/doc/72317aec52144df8bc04798fd232a585/Cloud/en-US/wfs-core-api-docu.html#api-WorkflowInstances-v1WorkflowInstancesWorkflowInstanceIdPatch" target="_blank" rel="noopener noreferrer">here</A>,&nbsp;describing the PATCH method on /v1/workflow-instances/{workflowInstanceId} resources, with a payload that looks like this:<BR />
<PRE class="language-javascript"><CODE>{ "status" : "CANCELED" }</CODE></PRE><BR />
I wondered if I could write a simple script that would help me clean up instances of the workflow definition I was working with (the "untappdrecommendation" one, relating to the subject of the Discovering SCP Workflow series). By the way, I'm creating multiple instances of the workflow definition through another script on the Google Apps platform, relating to my beer checkins, which is the subject of the Discovering SCP Workflow series.<BR />
<BR />
I'd been looking into the nuances of the CSRF token in&nbsp;<A href="https://blogs.sap.com/2018/01/14/discovering-scp-workflow-instance-initiation/" target="_blank" rel="noopener noreferrer">Discovering SCP Workflow â Instance Initiation</A>&nbsp;and had found a sweet spot on the command line with the venerable <A href="https://curl.haxx.se/" target="_blank" rel="nofollow noopener noreferrer">curl</A> - the Swiss Army Knife of command line tools for HTTP and more. Of course, that command line was in the cloud, in the form of my personal <A href="https://cloud.google.com/shell/docs/" target="_blank" rel="nofollow noopener noreferrer">Cloud Shell</A> courtesy of the Google Cloud Platform (read more about my thoughts on and use of the Google Cloud Shell in&nbsp;<A href="https://blogs.sap.com/2018/03/26/monday-morning-thoughts-cloud-native/" target="_blank" rel="noopener noreferrer">Monday morning thoughts: Cloud Native</A>).<BR />
<H3 id="toc-hId-838342591">Writing a shell script</H3><BR />
So I wrote a shell script, in particular a <A href="https://en.wikipedia.org/wiki/Bash_(Unix_shell)" target="_blank" rel="nofollow noopener noreferrer">bash</A> flavoured one, that did the trick. Before I dive into it, I wanted to relate to you a little story.<BR />
<BR />
One of my heroes is <A href="https://en.wikipedia.org/wiki/Randal_L._Schwartz" target="_blank" rel="nofollow noopener noreferrer">Randal Schwartz</A>, who was partially responsible for how I successfully managed to branch out from the SAP ecosphere in the '90s and discover Open Source, first through the wonderful* language Perl. He <A href="http://www.stonehenge.com/merlyn/columns.html" target="_blank" rel="nofollow noopener noreferrer">wrote columns in various magazines</A>, each one describing and explaining a Perl script that he'd written. I used to spend my lunchtime with a sandwich and a cup of tea, pouring over these columns and learning how he wrote Perl, and by osmosis, learning Perl myself. <A href="http://pipetree.com/qmacro/blog/2003/07/12/thanks-randal-2/" target="_blank" rel="nofollow noopener noreferrer">Thanks, Randal</A>.<BR />
<BR />
*yes, you may think differently, but I'll fight you in a dark corner over it if necessary!<BR />
<BR />
With that in mind, I'll present this short script in the style of one of Randal's columns, in his honour. There are some caveats before I start though - the presentation of this script is in the "warts and all" style, as though I'd just finished making a batch of slightly uneven <A href="https://www.bbcgoodfood.com/recipes/5569/welsh-cakes" target="_blank" rel="nofollow noopener noreferrer">Welsh cakes</A>, and you came by the house and I invited you in to the kitchen for a cup of tea and one of the cakes. There's still a mess on the worktops and some flour on the floor, but they're definitely edible and taste nice with the tea.<BR />
<BR />
First, here's the script in its entirety.<BR />
<PRE class="language-markup"><CODE>  1 #!/bin/bash                                                                                                       <BR />
  2                                                                                                                   <BR />
  3 # Cancel all running instances of a given workflow definition                                                     <BR />
  4 # USE WITH CAUTION!                                                                                               <BR />
  5                                                                                                                   <BR />
  6 USER=p481810                                                                                                      <BR />
  7 COOKIES=cookiejar-${USER}.dat                                                                                     <BR />
  8 INSTANCEDATA=instances.dat                                                                                        <BR />
  9 TOKENDATA=headers.dat                                                                                             <BR />
 10 DEFINITIONID=$1                                                                                                   <BR />
 11 WFS_API_ROOT=https://bpmworkflowruntimewfs-${USER}trial.hanatrial.ondemand.com/workflow-service/rest              <BR />
 12 STATUSPAYLOAD={\"status\":\"CANCELED\"}                                                                           <BR />
 13                                                                                                                   <BR />
 14 # Abort if no definition ID has been specified                                                                    <BR />
 15 [ -z "$DEFINITIONID" ] &amp;&amp; echo Specify a definition ID &amp;&amp; exit 1                                                  <BR />
 16                                                                                                                   <BR />
 17 echo WARNING: This will cancel ALL instances for workflow definition \"${DEFINITIONID}\"                          <BR />
 18 echo Please enter password for $USER                                                                              <BR />
 19 read -s PASS                                                                                                      <BR />
 20                                                                                                                   <BR />
 21 rm -f $INSTANCEDATA                                                                                               <BR />
 22 rm -f $TOKENDATA                                                                                                  <BR />
 23                                                                                                                   <BR />
 24                                                                                                                   <BR />
 25 # Retrieve the RUNNING instances for the given workflow definition                                                <BR />
 26 curl \                                                                                                            <BR />
 27   --user $USER:$PASS \                                                                                            <BR />
 28   --output $INSTANCEDATA \                                                                                        <BR />
 29   --silent \                                                                                                      <BR />
 30   "$WFS_API_ROOT/v1/workflow-instances?definitionId=${DEFINITIONID}&amp;status=RUNNING"                               <BR />
 31                                                                                                                   <BR />
 32                                                                                                                   <BR />
 33 # Retrieve CSRF token                                                                                             <BR />
 34 curl \                                                                                                            <BR />
 35   --user $USER:$PASS \                                                                                            <BR />
 36   --header "X-CSRF-Token: Fetch" \                                                                                <BR />
 37   --cookie-jar $COOKIES \                                                                                         <BR />
 38   --verbose \                                                                                                     <BR />
 39   "$WFS_API_ROOT/v1/xsrf-token" 2&gt; $TOKENDATA                                                                     <BR />
 40                                                                                                                   <BR />
 41 TOKEN=`grep '&lt; X-CSRF-Token' $TOKENDATA | awk '{print $3}'`                                                       <BR />
 42                                                                                                                   <BR />
 43                                                                                                                   <BR />
 44 # Process each instance ID - send PATCH with cancel status                                                        <BR />
 45 for INSTANCEID in `jq --raw-output '.[] .id' $INSTANCEDATA`; do                                                   <BR />
 46   echo Canceling $INSTANCEID                                                                                      <BR />
 47   curl \                                                                                                          <BR />
 48     --user $USER:$PASS \                                                                                          <BR />
 49     --request PATCH \                                                                                             <BR />
 50     --header "X-CSRF-Token: $TOKEN" \                                                                             <BR />
 51     --header "Content-Type: application/json" \                                                                   <BR />
 52     --cookie $COOKIES \                                                                                           <BR />
 53     --data $STATUSPAYLOAD \                                                                                       <BR />
 54     "$WFS_API_ROOT/v1/workflow-instances/${INSTANCEID}"                                                           <BR />
 55   sleep 0.5                                                                                                       <BR />
 56                                                                                                                   <BR />
 57 done  </CODE></PRE><BR />
<H3 id="toc-hId-641829086">A tour of the script</H3><BR />
After the <A href="https://en.wikipedia.org/wiki/Shebang_(Unix)" target="_blank" rel="nofollow noopener noreferrer">shebang</A>&nbsp;on Line 1 and some comments on Lines 3-4, we start with some general variables in Lines 6-12 that we'll use throughout the script:<BR />
<UL><BR />
 	<LI>I've hardcoded my username relating to my personal SCP trial (this is my pre-SAP ID as that's where I have all the related workflow definitions).</LI><BR />
 	<LI>the COOKIES variable points to a user-specific file where I'll be asking curl to store cookies returned in responses, and to use them in subsequent requests. This is to address <A href="https://blogs.sap.com/2018/01/14/discovering-scp-workflow-instance-initiation/" target="_blank" rel="noopener noreferrer">the context required when using CSRF tokens</A>.</LI><BR />
 	<LI>via the INSTANCEDATA variable, I use a file called instances.dat to store the output of a request to the Workflow API to retrieve a list of the running instances of my workflow definition.</LI><BR />
 	<LI>TOKENDATA points to a third file used to capture the header output of a curl request to Fetch the CSRF token.</LI><BR />
 	<LI>There's a single parameter that needs to be supplied on the command line when invoking this script, and that's the ID of the workflow definition. This ID is captured (via $1) in the DEFINITIONID variable.</LI><BR />
 	<LI>The Workflow API pattern means there's a "root" URL, and each of the API facilities are relative to that root. This root is specific to my user ID, and held in the WFS_API_ROOT variable (for some reason I'd decided I wanted to use underscores in that name, ah well).</LI><BR />
 	<LI>When calling PATCH on the individual workflow instances we want to cancel, we send a payload. This payload is of type application/json, and stored in the STATUSPAYLOAD variable for later use.</LI><BR />
</UL><BR />
Line 15 just check that a workflow definition ID has actually been supplied, and aborts if it hasn't. It doesn't do any checking to see if that definition actually exists, we'll find out soon enough anyway.<BR />
<BR />
Then, in Lines 17-19, we're off. After giving a warning, we ask for the password, and bash's builtin <A href="http://wiki.bash-hackers.org/commands/builtin/read" target="_blank" rel="nofollow noopener noreferrer">read</A> allows us to read it from the terminal - securely (invisibly) with the '-s' option - into the PASS variable.<BR />
<BR />
Lines 21-22 clean up before we start, removing any trace of previous instance details or CSRF tokens.<BR />
<BR />
The first thing we have to do is retrieve the list of running instances for the given workflow definition. This is done in Lines 26-30 with a single curl command (note that the backslash at the end of the lines here and elsewhere allow the continuation of a command on separate lines - i.e. the entire curl command spans lines all these lines). We supply credentials, ask for the output to be written to the INSTANCEDATA file and ask curl to be quiet about any download progress statistics. The actual Workflow API resource we're making a request to (relative to the Workflow API root) is:<BR />
<BR />
/v1/workflow-instances<BR />
<BR />
and we're qualifying that request by a couple of query parameters, one to restrict the request to instances for the given workflow definition, and the other to restrict it to instances in the "RUNNING" state.<BR />
<BR />
In case you hadn't guessed, the default method used by curl is GET.<BR />
<BR />
Lines 34-39 make another curl request to fetch a CSRF token. We're going to be making non-read-only requests next, which means that we need a token. The curl command follows the same approach as the previous one, but this time includes the "X-CSRF-Token: Fetch" header, and specifies the COOKIES file to store cookies in that come back in the response. These will define the important context in which the token is valid. Instead of asking curl to be silent like last time, this time we're asking it to be verbose, which means that details of the request and the response, including the crucial HTTP headers, are shown.<BR />
<BR />
The request headers are shown prefixed by a "&gt;" sign, and the response headers are prefixed with a "&lt;" sign. Those signs help us to think about (and see) the headers and tell at a glance whether they're outgoing ("&gt;") or incoming ("&lt;").<BR />
<BR />
The relative Workflow API resource requested in this call is:<BR />
<BR />
/v1/xsrf-token<BR />
<BR />
Line 41 is where we pull out the "incoming" response header X-CSRF-Token, in which the requested CSRF token is supplied in response to the Fetch request. First we pull the header line out with grep, then use awk to grab the third item in the line, positionally and (by default) separated by whitespace. The header line will look like this:<BR />
<PRE><CODE>&lt; X-CSRF-Token: F1F2B62E97BB0CF95AB126AE732E3E15</CODE></PRE><BR />
This token (F1F2 ...) is stored in the TOKEN variable.<BR />
<BR />
Then in Lines 44-57 comes the final but crucial flourish. We process the instances, calling PATCH and cancelling them one by one.<BR />
<BR />
How do we know which instances there are to process? Well, the response to the original /v1/workflow-instances request is stored in the file pointed to by the INSTANCEDATA variable. This is typically what the response will look like:<BR />
<PRE class="language-javascript"><CODE>[{"id":"6f23fba7-34c9-11e8-b586-00163e5a9e8b","definitionId":"untappdrecommendation","definitionVersion":"37","subject<BR />
":"Untappd Recommendation","status":"RUNNING","businessKey":"2506750","startedAt":"2018-03-31T09:53:59.251Z","startedB<BR />
y":"P481810","completedAt":null},{"id":"6e9b1c8b-34c9-11e8-b586-00163e5a9e8b","definitionId":"untappdrecommendation","<BR />
definitionVersion":"37","subject":"Untappd Recommendation","status":"RUNNING","businessKey":"2544284","startedAt":"201<BR />
8-03-31T09:53:58.354Z","startedBy":"P481810","completedAt":null}]</CODE></PRE><BR />
If you look closely, you'll see that this particular example contains two instances. The response may contain more, or might even contain none (in which case there are no instances to process and we're done!).<BR />
<BR />
Assuming we're processing the INSTANCEDATA above, we want to get a list of instance IDs so they look like this:<BR />
<BR />
6f23fba7-34c9-11e8-b586-00163e5a9e8b<BR />
6e9b1c8b-34c9-11e8-b586-00163e5a9e8b<BR />
<BR />
How should we go about this? Well,&nbsp;we can use the powerful '<A href="https://stedolan.github.io/jq/" target="_blank" rel="nofollow noopener noreferrer">jq</A>', which is described as "a lightweight and flexible command-line JSON processor". I recorded a short video last year on this command -&nbsp;<A href="https://www.youtube.com/watch?v=yI5IQooQzW4" target="_blank" rel="nofollow noopener noreferrer">Using jq to parse out SCP destination info</A>.<BR />
<BR />
Line 44 is where we use jq, inside of backticks in a "for ... do ... done" construction. If you're wondering, if you put something in backticks, that something is executed and the result is what is actually represented and processed. So in Line 44, read it in your mind as follows:<BR />
<BR />
<EM>"For each of the instances that result from calling "jq --raw-output '.[] .id' $INSTANCEDATA", put the value each time into the INSTANCEID variable, and do the following ..."</EM><BR />
<BR />
So that jq invocation will turn the JSON above into the two lines of IDs (6f23... and 6e9b...).<BR />
<BR />
And for each instance ID in the INSTANCEID variable, we make a curl command, in Lines 46-53, to make a PATCH request to this relative Workflow API resource:<BR />
<BR />
/v1/workflow-instances/&lt;workflowInstanceId&gt;<BR />
<BR />
This time, as well as passing the credentials, we specify to curl that we want the PATCH method (rather than the default GET), we send the CSRF token that we've just fetched, specify the payload we're about to supply is of type "application/json", send the cookies that we will have received from the CSRF token fetch request, and supply the payload as we saw earlier, setting the status of the instance to "CANCELED".<BR />
<BR />
Of course, in Line 55, to play nicely with the Workflow API, we wait for 500ms between each of these calls, as there may be many.<BR />
<BR />
And that's about it!<BR />
<BR />
I recorded a quick screencast of this in action, to give you an idea of how it works in practice. Here it is: <A href="https://youtu.be/DIoyt5Q6JuI" target="_blank" rel="nofollow noopener noreferrer">Scripting the Workflow API with bash and curl</A>.<BR />
<BR />
Happy hacking!<BR />
<BR />
This blog post was brought to you by the <A href="https://twitter.com/qmacro/status/979974391588061184" target="_blank" rel="nofollow noopener noreferrer">Ashton canal</A>, the Propellerheads album <A href="https://open.spotify.com/album/4r7N5CAbYNbcdEFK7OKj5V" target="_blank" rel="nofollow noopener noreferrer">Decksandrumsandrockandroll</A> (a classic, by now, surely?) and Pact Coffee's&nbsp;<A href="https://www.pactcoffee.com/coffees/la-esperanza-pacamara" target="_blank" rel="nofollow noopener noreferrer">La Esperanza Pacamara</A>.
---
Monday morning thoughts: cloud native
technology-blog-sap
2018-03-26
https://community.sap.com/t5/technology-blogs-by-sap/monday-morning-thoughts-cloud-native/ba-p/13355894
2018-03-26-monday-morning-thoughts-cloud-native
This weekend I discovered that one of my favourite online REPLs* - <A href="https://repl.it" target="_blank" rel="nofollow noopener noreferrer">repl.it</A> - has a new feature where you can build and publish a website on a repl.it subdomain:<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2018/03/Screen-Shot-2018-03-26-at-08.15.17.png" /><BR />
<BR />
<EM>*REPL: <A href="https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop" target="_blank" rel="nofollow noopener noreferrer">Read Evaluate Print Loop</A> - an interactive language shell&nbsp;</EM><BR />
<BR />
I've used repl.it to explore language such as Clojure and Haskell, for various purposes, including the basis for a talk I gave at <A href="http://www.lambdalounge.org.uk/" target="_blank" rel="nofollow noopener noreferrer">Manchester's Lambda Lounge</A>&nbsp;last year: "<A href="https://docs.google.com/presentation/d/1zpN8150gIiYEC-o_Nc35T3xshXJIorEBEcjaarSw9z8/edit#slide=id.p" target="_blank" rel="nofollow noopener noreferrer">Discovering the beauty of recursion and pattern matching</A>":<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2018/03/Screen-Shot-2018-03-26-at-08.20.02-1.png" height="269" width="517" /><BR />
<BR />
&nbsp;<BR />
<H3 id="toc-hId-1033967169">A brief history</H3><BR />
The new repl.it feature allows us to create a set of site artifacts, structured into directories, and have them hosted and served by repl.it's infrastructure. I immediately thought of the options to host UI5 based demo apps. One page apps that are built with MVC, internationalisation and other features are necessarily complex in structure, in that there's a lot of moving parts.<BR />
<BR />
Quite a few years ago now I realised I could include XML view definitions and JavaScript controller scripts inside a single HTML file, using custom <CODE>&lt;script&gt;</CODE>&nbsp;tags. That extended to the use of JSBin, which has supported OpenUI5 for a while now (see "<A href="https://blogs.sap.com/2014/03/04/small-steps-openui5-toolkit-now-in-jsbincom/" target="_blank" rel="noopener noreferrer">Small steps: OpenUI5 toolkit now in jsbin.com</A>"), like in this layout example:&nbsp;<A href="http://jsbin.com/gatan/edit?html,js,output" target="_blank" rel="nofollow noopener noreferrer">http://jsbin.com/gatan/edit?html,js,output</A>.<BR />
<BR />
But the ability to create and serve UI5 apps, resplendent in their multi-artifact construction, still remained a desire, which was fulfilled with the advent of Plunkr, similar to JSBin. See this post from&nbsp;<SPAN class="mention-scrubbed">denise.nepraunig.sap</SPAN>&nbsp;for more details on UI5 with Plunkr: "<A href="https://blogs.sap.com/2015/01/04/quickly-tinker-around-online-with-sapui5-explored-examples/" target="_blank" rel="noopener noreferrer">Quickly tinker around with SAPUI5 examples</A>".<BR />
<BR />
&nbsp;<BR />
<H3 id="toc-hId-837453664">The online experience</H3><BR />
But I digress. The new repl.it experience isn't a revolution, more an evolution. It is, nevertheless, a very nice experience:<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2018/03/Screen-Shot-2018-03-26-at-08.47.34.png" /><BR />
<BR />
(Yes, this is a little UI5 app that was inspired by&nbsp;<SPAN class="mention-scrubbed">meredith.hassett</SPAN>&nbsp;'s recent #APIFriday post "<A href="https://blogs.sap.com/2018/03/22/building-your-developer-profile-github-ui5/" target="_blank" rel="noopener noreferrer">Building your Developer Profile â GitHub + UI5</A>").<BR />
<BR />
I'm mindful of the tools I use with kids <A href="https://twitter.com/qmacro/status/976761337874350081" target="_blank" rel="nofollow noopener noreferrer">at the local Primary School</A>&nbsp;and at <A href="http://mcrcoderdojo.org.uk/" target="_blank" rel="nofollow noopener noreferrer">Manchester CoderDojo</A>. All the teaching I do, from Google Apps Script, to JavaScript, Scratch and even UI5, is done online. All the kids need is a laptop with enough battery, a connection to the wifi, and a browser.<BR />
<BR />
This is a theme I've followed myself for a good few years, moving a long time ago "to the cloud" with Google productivity tools and latterly with ad hoc tools such as repl.it and of course the excellent <A href="https://cloudplatform.sap.com/dmp/capabilities/us/product/SAP-Web-IDE/9e5c9d90-e8e0-4e82-aed2-09087a10c973" target="_blank" rel="noopener noreferrer">SAP Web IDE</A>. Some of you who interact with me on Twitter will know that I recently spent a whole two months using Chrome OS almost exclusively.<BR />
<BR />
So the repl.it offering fits right into the online experience funnel I'm used to. In all that time with Chrome OS I never needed to reach to another laptop to do anything other than connect my running watch with the TomTom app that updated it with new "quick GPS" data (since then I've discovered that the new version of the app on my phone can do that now too). Of course, that doesn't mean I've eschewed the command line - far from it. I've a <A href="https://cloud.google.com/shell/docs/" target="_blank" rel="nofollow noopener noreferrer">Google Cloud Shell</A> (free) which gives me a persistent and comfortable working shell environment, with all the amenities one would expect - tmux, vim, the Google Cloud SDK, the Google Cloud Functions emulator, ngrok and even the <A href="https://tools.hana.ondemand.com/#cloud" target="_blank" rel="nofollow noopener noreferrer">SAP Cloud Platform Neo environment SDK / console client</A> (the latter two I installed separately, and I have my own configurations for tmux and vim of course).<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2018/03/Screen-Shot-2018-03-26-at-08.46.27.png" height="156" width="518" /><BR />
<BR />
&nbsp;<BR />
<H3 id="toc-hId-640940159">Cloud native</H3><BR />
So anyway, all this got me thinking, on my run this morning. We're moving to cloud native architectures with the Cloud Platform offerings. Interaction is undeniably moving further and further online. That interaction extends to the architecture and development topics, the latter exemplified with the experience I've had thus far.<BR />
<BR />
So I'm wondering: how do we define cloud native? What is the experience, and is it obvious when we see it? It's clear to me, when I spend pretty much my entire day (modulo Outlook) online, in browser windows, where I find myself developing and deploying code, creating content, and configuring interconnectivity and routing with my <A href="https://events.sap.com/teched/en/session/36915" target="_blank" rel="noopener noreferrer">Cloud Platform Technican</A>'s hat on.<BR />
<BR />
Heck, I conceived, built and deployed the artifacts for, and wrote the content for the 10-part series&nbsp;on the SAP Cloud Platform Workflow service ("<A href="http://pipetree.com/qmacro/blog/2018/01/16/discovering-scp-workflow/" target="_blank" rel="nofollow noopener noreferrer">Discovering SCP Workflow</A>") all online.<BR />
<BR />
With the advent and growth of SAP S/4HANA Cloud, and the PaaS and SaaS tools and facilities that are growing around it to support implementations, customisations and extensions, the cloud native experience is only going to grow. Yes, there are also processes and activities that require local installations of software, most notably for me is the ABAP Developer Tools in Eclipse and of course the venerable SAPGUI itself. But these appear as exceptions in my eyes, rather than the future normal.<BR />
<BR />
What does cloud native mean to you? What defines it for development, for architecture, for our present and future enterprise solutions? I'd love to hear your thoughts via the comments section below.<BR />
<BR />
&nbsp;<BR />
<BR />
Read more posts in this series here:&nbsp;<A href="https://blogs.sap.com/tag/mondaymorningthoughts/" target="_blank" rel="noopener noreferrer">Monday morning thoughts</A>.
---
Debugging Fiori and UI5 - Materials
technology-blog-members
2018-02-14
https://community.sap.com/t5/technology-blogs-by-members/debugging-fiori-and-ui5-materials/ba-p/13351597
2018-02-14-debugging-fiori-and-ui5-materials
There's a new openSAP course starting today: <A href="https://open.sap.com/courses/fiops1" target="_blank" rel="noopener noreferrer">Understanding SAP Fiori Launchpad</A>. I'm looking forward to participating, as it has the ingredients to make a very interesting set of units. Reading the overview page we can see that some debugging is involved, and specific mention of the excellent <A href="https://developer.chrome.com/devtools" target="_blank" rel="nofollow noopener noreferrer">Chrome Developer Tools</A>&nbsp;("devtools" for short) is made.<BR />
<H3 id="toc-hId-1033845125">Debugging as a pastime</H3><BR />
I find debugging an enjoyable activity, especially when looking at UI5 powered apps and infrastructure with those very devtools. Over the last few years I've created material in this area, and thought it would be worthwhile gathering a reference to it here to welcome the openSAP course and serve as a starting point for those wanting to learn more about debugging UI5. I've created blog posts, recorded videos and produced worksheets to accompany presentations and workshops I've given. I like debugging UI5 so much I even went so far as to write a book on the subject.<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2018/02/Screenshot-2018-02-14-at-14.19.41-1.png" /><BR />
<BR />
Writing about debugging is hard, there's always a lot to describe. It's often better to just show debugging, which is why there are more videos than any other material type. I've gathered them together in a YouTube playlist: <A href="https://www.youtube.com/playlist?list=PLfctWmgNyOIejkOl5LmprKNQ337fGvU0i" target="_blank" rel="nofollow noopener noreferrer">Fiori &amp; UI5 Debugging</A>; the individual videos are described here.<BR />
<BR />
If you like the videos, <A href="https://www.youtube.com/user/qmacro99/videos" target="_blank" rel="nofollow noopener noreferrer">please head on over to my channel</A> and hit the red Subscribe button!<BR />
<H3 id="toc-hId-837331620">Materials</H3><BR />
Here are the materials, organised by the year in which they were created.<BR />
<H4 id="toc-hId-769900834">2017</H4><BR />
<STRONG>Worksheet</STRONG>: At UI5con@SAP I gave a hands-on workshop "Functional Programming for your UI5 Apps", where I took the participants through some functional techniques in JavaScript, using UI5 apps as sources of inspiration. By necessity the hands-on exercises made use of the Chrome devtools, where we modified running UI5 apps on the fly. There's a detailed worksheet that accompanied the workshop here:&nbsp;<A href="http://bit.ly/qmacro-ui5con-funcprog" target="_blank" rel="nofollow noopener noreferrer">http://bit.ly/qmacro-ui5con-funcprog</A>.<BR />
<BR />
<STRONG>Video</STRONG>: In <A href="https://www.youtube.com/watch?v=yI5IQooQzW4&amp;list=PLfctWmgNyOIejkOl5LmprKNQ337fGvU0i&amp;index=1" target="_blank" rel="nofollow noopener noreferrer">Using jq to parse out SCP destination information</A> I make use of the HTTP archive (HAR) format to save information on the resources loaded when looking at the destinations in the SCP cockpit.<BR />
<BR />
<STRONG>Post</STRONG>: While at Bluefin I wrote&nbsp;<A href="http://www.bluefinsolutions.com/insights/dj-adams/january-2017/debugging-sap-fiori-apps-the-fifth-d" target="_blank" rel="nofollow noopener noreferrer">Debugging SAP Fiori apps - the fifth "D"</A>&nbsp;which looks at how debugging is a core part of development and is in fact a conversation.<BR />
<BR />
<STRONG>Video</STRONG>: <A href="https://www.youtube.com/watch?v=RJt4v-7dI9Y&amp;index=2&amp;list=PLfctWmgNyOIejkOl5LmprKNQ337fGvU0i" target="_blank" rel="nofollow noopener noreferrer">Setup for E-Bite "SAP Fiori and UI5: Debugging the User Interface"</A>&nbsp;refers to the SAP Press book described later in this post and shows you how to set up the app that accompanies it, which we debug throughout the book.<BR />
<H4 id="toc-hId-573387329">2016</H4><BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2018/02/9781493214808_267_2d.png" /><BR />
<BR />
<STRONG>Book</STRONG>: At the end of 2016 I wrote an E-Bite book for SAP Press: <A href="https://www.sap-press.com/sap-fiori-and-sapui5-debugging-the-user-interface_4305/" target="_blank" rel="nofollow noopener noreferrer">SAP Fiori and SAPUI5: Debugging the User Interface</A> which is all about, well, debugging Fiori and UI5 apps using the Chrome devtools and more.<BR />
<BR />
<STRONG>Video</STRONG>: <A href="https://www.youtube.com/watch?v=7dNSpum7IWI&amp;index=3list=PLfctWmgNyOIejkOl5LmprKNQ337fGvU0i" target="_blank" rel="nofollow noopener noreferrer">openSAP UI5 Course W4 Bonus</A> - in a nice circular reference (to another openSAP course) this is a recording of my work on the bonus exercise from week 4 of the excellent course "<A href="https://open.sap.com/courses/ui51/" target="_blank" rel="noopener noreferrer">Developing Web Apps with SAPUI5</A>".<BR />
<H4 id="toc-hId-376873824">2015</H4><BR />
<STRONG>Post</STRONG>: <A href="http://pipetree.com/qmacro/blog/2015/07/22/a-short-ui5-debugging-journey/" target="_blank" rel="nofollow noopener noreferrer">A Short UI5 Debugging Journey</A>&nbsp;- as part of the <A href="http://pipetree.com/qmacro/blog/2015/07/04/30-days-of-ui5/" target="_blank" rel="nofollow noopener noreferrer">30 Days of UI5</A> series of posts, I wrote this post which takes a look at the <A href="http://pipetree.com/qmacro/blog/2015/07/18/the-ui5-support-tool-help-yourself/" target="_blank" rel="nofollow noopener noreferrer">UI5 Support Tool</A>&nbsp;and the devtools to debug a feature in the UI5 Explored app.<BR />
<BR />
<STRONG>Video</STRONG>: <A href="https://www.youtube.com/watch?v=d8P2bV6clXI&amp;index=4&amp;list=PLfctWmgNyOIejkOl5LmprKNQ337fGvU0i" target="_blank" rel="nofollow noopener noreferrer">Fixing up a nicer HCP Destinations table</A> - from when SCP was called HCP.&nbsp;One of the sessions I gave at SAP Inside Track Sheffield (SITsheff) in 2015 was "Learning to Drive Fiori Apps from Underneath - Fixing up a nicer HCP Destinations table". It's described on the SITsheff page, and there's a link to an accompanying document. I thought it might be useful to record a screencast of what I did during that session.<BR />
<BR />
<STRONG>Video</STRONG>: <A href="https://www.youtube.com/watch?v=B9FGqJFZbzQ&amp;index=5&amp;list=PLfctWmgNyOIejkOl5LmprKNQ337fGvU0i" target="_blank" rel="nofollow noopener noreferrer">Fiori Apps Reference Data into a Spreadsheet</A>. In the early days of the <A href="https://fioriappslibrary.hana.ondemand.com/sap/fix/externalViewer/" target="_blank" rel="nofollow noopener noreferrer">SAP Fiori Apps Reference Library</A>&nbsp;I looked into where the data was coming from, and used the devtools to find out and get the apps info into a spreadsheet. I wrote a post on this here: <A href="http://pipetree.com/qmacro/blog/2015/01/09/fiori-app-data-into-a-spreadsheet-challenge-accepted/" target="_blank" rel="nofollow noopener noreferrer">Fiori App Data into a Spreadsheet? Challenge Accepted!</A>.<BR />
<H4 id="toc-hId-180360319">2014</H4><BR />
<STRONG>Video</STRONG>: In&nbsp;<A href="https://www.youtube.com/watch?v=Hz3ZWWF0BFM&amp;index=7&amp;list=PLfctWmgNyOIejkOl5LmprKNQ337fGvU0i" target="_blank" rel="nofollow noopener noreferrer">SAP Fiori &amp; UI5 Chat, Fri 17 Oct 2014</A>, my friend and erstwhile Bluefin colleague&nbsp;<SPAN class="mention-scrubbed">brenton.ocallaghan</SPAN>&nbsp;chat about Fiori and UI5 topics, and naturally we can't resist breaking out the devtools, this time to explore the Fiori Apps Reference Library app.<BR />
<BR />
<STRONG>Video</STRONG>: <A href="https://www.youtube.com/watch?v=JPy7TxLpILg&amp;list=PLfctWmgNyOIejkOl5LmprKNQ337fGvU0i&amp;index=6" target="_blank" rel="nofollow noopener noreferrer">Creation &amp; Reload of UI5 UIs in the Chrome Developer Console</A> - at SYD airport returning from the SAP Architect and Developer Summit, I recorded a quick screencast to show the creation of a quick UI, using the manual Chrome Developer Console techniques we learned there.<BR />
<BR />
<STRONG>Worksheet</STRONG>: At the SAP Architect &amp; Developer Summit I gave a workshop on driving Fiori apps from underneath, i.e. from the Chrome devtools. I wrote a comprehensive worksheet to accompany that workshop: <A href="http://bit.ly/ldfaulu" target="_blank" rel="nofollow noopener noreferrer">Learn to Drive Fiori Applications from Underneath and Level Up!</A><BR />
<BR />
<STRONG>Video</STRONG>: In a precursor to other longer "manipulation-with-devtools" pieces, the video "<A href="https://www.youtube.com/watch?v=nRtocPEPLYI&amp;index=8&amp;list=PLfctWmgNyOIejkOl5LmprKNQ337fGvU0i" target="_blank" rel="nofollow noopener noreferrer">Manipulating UI5 Controls from the Chrome Dev Console</A>" is a short demonstration of how easy it can be to find, grab, manipulate and create controls in a UI5 app from the devtools.<BR />
<BR />
<STRONG>Video</STRONG>: One of the webinars in which I participated at Bluefin was "Understanding SAP Fiori". <SPAN class="mention-scrubbed">brenton.ocallaghan</SPAN>&nbsp;and I followed up on this with a video&nbsp;<A href="https://www.youtube.com/watch?v=MlPmRO4SH-o&amp;index=9&amp;list=PLfctWmgNyOIejkOl5LmprKNQ337fGvU0i" target="_blank" rel="nofollow noopener noreferrer">Understanding SAP Fiori Webinar Followup</A>, wherein&nbsp;we dive into a transactional app to see how it's put together.<BR />
<H3 id="toc-hId--145235905">Next steps</H3><BR />
This is just material from more or less a single individual; there's plenty more out there on the web. So what are you waiting for? Grab an unsuspecting Fiori app, open the Chrome devtools, and off you go!
---
Thoughts on what's next for the SAP Community
welcome-cornerblog-board
2018-02-04
https://community.sap.com/t5/welcome-corner-blog-posts/thoughts-on-what-s-next-for-the-sap-community/ba-p/13381817
2018-02-04-thoughts-on-what-s-next-for-the-sap-community
I originally posted this content on my own blog* over here: <A href="http://pipetree.com/qmacro/blog/2018/02/02/thoughts-on-whats-next-for-the-sap-community/" target="_blank" rel="nofollow noopener noreferrer">Thoughts on what's next for the SAP community</A>. I've since been encouraged, <A href="https://twitter.com/workjerryjanda/status/960205228082651138" target="_blank" rel="nofollow noopener noreferrer">not least</A> by folks managing this community like&nbsp;<SPAN class="mention-scrubbed">jerry.janda</SPAN>, to post that content here too.<BR />
<BR />
<A href="https://twitter.com/workjerryjanda/status/960205228082651138" target="test_blank" rel="nofollow noopener noreferrer">https://twitter.com/workjerryjanda/status/960205228082651138</A><BR />
<BR />
I don't usually cross-post, but this is perhaps important enough to make an exception. So here is the post, in its brief entirety.<BR />
<BR />
<STRONG>Thoughts on what's next for the SAP Community</STRONG><BR />
<BR />
This evening I watched a short video,&nbsp;<A href="https://www.youtube.com/watch?v=iZVoCV8ryF8" target="_blank" rel="nofollow noopener noreferrer">What's Next for SAP Community?</A>, with BjÃ¶rn Goerke, Chief Technology Officer and President of SAP Cloud Platform, and Thomas Grassl, Head of Developer Relations, laying out the vision for the SAP Community. Here are some brief Friday night thoughts.<BR />
<BR />
I have been involved in building and helping the SAP community (small 'c') grow for a long time, from mailing lists in the 1990's, through co-creating the original SAP Developer Network and seeing the changes through the SAP Community Network to become simply the SAP Community (see&nbsp;<A href="https://blogs.sap.com/2005/07/04/the-sap-developer-community-10-years-ago/" target="_blank" rel="noopener noreferrer">The SAP developer community 10 years ago</A>, a post from 2005).<BR />
<BR />
It's been great to see Developer Relations and the SAP Community moving under the wing of the office of the CTO, and with&nbsp;<A href="https://blogs.sap.com/2018/01/16/the-future-of-sap-community/" target="_blank" rel="noopener noreferrer">the backing of CEO Bill McDermott</A>, there's certainly more than enough torque and momentum upon which to build.<BR />
<BR />
The chassis has undergone some significant welding in recent years, but the current remodelling, while still needing some love and attention, is&nbsp;<A href="https://twitter.com/qmacro/status/950628022842994688" target="_blank" rel="nofollow noopener noreferrer">so much better for content creators</A>. And without content, there is no community. I'm hopeful that the chassis and bodywork will go from strength to strength, especially with the recently announced&nbsp;<A href="https://blogs.sap.com/2018/01/26/sneak-peak-2018-sap-community-redesign/" target="_blank" rel="noopener noreferrer">2018 redesigns</A>, and we see the rebirth of interconnectivity.<BR />
<BR />
What struck me most about listening to BjÃ¶rn and Thomas on the video just now was my perception of the sense of community being the strong, implicit anchor for the message and the vision. So I decided to transcribe the video, to perform a simple text analysis.<BR />
<BR />
The transcription is&nbsp;<A href="https://docs.google.com/document/d/1xYTh0EYSDNNCfHTcBDG3kpI_4-byPMA6Wfv_rtGz2Yk/edit?usp=sharing" target="_blank" rel="nofollow noopener noreferrer">here</A>, and we can see from some simple&nbsp;<A href="http://textalyser.net/" target="_blank" rel="nofollow noopener noreferrer">textalyser</A>&nbsp;analysis that the perception wasn't too far off - the top five places for word frequencies in the entire piece are (with occurrences in brackets):<BR />
<BR />
1: "our" (12)<BR />
2: "community" (10)<BR />
3: "sap" (6)<BR />
4: "how", "new", "customers" (5)<BR />
5: "need", "think", "help", "content" (4)<BR />
<BR />
Now it's a short dialogue so perhaps this analysis needs to be taken with a pinch of salt, but it certainly occurs to me that the core message, and the core task, is getting people and knowledge connected.<BR />
<BR />
We can do that, can't we?<BR />
<BR />
<EM>* yes, <A href="https://en.wikipedia.org/wiki/Blog" target="_blank" rel="nofollow noopener noreferrer">blog</A>. Short for weblog. Often an entire website section (like <A href="http://pipetree.com/qmacro/blog/" target="_blank" rel="nofollow noopener noreferrer">this one</A>), with a multitude of articles. Not an individual article or post. A blog is a collection of posts. Not a single post. Got that, community? <span class="lia-unicode-emoji" title=":slightly_smiling_face:">ð</span></EM>
---
Discovering SCP Workflow - Service Tasks
technology-blog-members
2018-01-29
https://community.sap.com/t5/technology-blogs-by-members/discovering-scp-workflow-service-tasks/ba-p/13373673
2018-01-29-discovering-scp-workflow-service-tasks
Previous post in this series:&nbsp;<A href="https://blogs.sap.com/2018/01/26/discovering-scp-workflow-script-tasks/" target="_blank" rel="noopener noreferrer">Discovering SCP Workflow â Script Tasks</A>.<BR />
<BR />
This post is part of a series, a guide to which can be found here:&nbsp;<A href="https://qmacro.org/blog/posts/2018/01/16/discovering-scp-workflow/" target="_blank" rel="nofollow noopener noreferrer">Discovering SCP Workflow</A>.<BR />
<BR />
We're almost done! In the <A href="https://blogs.sap.com/2018/01/26/discovering-scp-workflow-script-tasks/" target="_blank" rel="noopener noreferrer">previous post</A> we looked at how we marshalled data to post to the nominal beer wishlist. Now it's time to send that data to the wishlist. As the focus of this series is the Workflow service on the SAP Cloud Platform and not on peripheral affairs, we're just going to append the wishlist entries to a list on a remote data service. I'll leave it as an exercise for the reader to implement a UI for that wishlist data.<BR />
<BR />
Like script tasks, service tasks are very straightforward. They're slightly more involved, given that they are designed to make HTTP requests to remote endpoints, and there's sometimes a little bit of fettling required, mostly relating to security and connectivity aspects.<BR />
<H3 id="toc-hId-1035752644">The payload</H3><BR />
So, where are we? We've got the wishlist entry data marshalled and ready to send. Let's remind ourselves of what it looks like:<BR />
<PRE class="language-javascript"><CODE>{<BR />
  "checkin": {<BR />
    "bid": 4168,<BR />
    "beer_name": "Westmalle Trappist Dubbel",<BR />
    "brewery_name": "Brouwerij der Trappisten van Westmalle"<BR />
  },<BR />
  "selected": [<BR />
    {<BR />
      "bid": 6511,<BR />
      "beer_name": "Tripel Karmeliet",<BR />
      "brewery_name": "Brouwerij Bosteels"<BR />
    },<BR />
    {<BR />
      "bid": 6766,<BR />
      "beer_name": "Trappistes Rochefort 10",<BR />
      "brewery_name": "Abbaye Notre-Dame de Saint-RÃ©my"<BR />
    }<BR />
  ]<BR />
}</CODE></PRE><BR />
<H3 id="toc-hId-839239139">The target wishlist store</H3><BR />
As well as G Suite, I'm a big fan of the Firebase ecosystem, having dabbled with it for a while (including musing on the possibilities when you add Firebase to UI5 - see the "<A href="http://pipetree.com/qmacro/blog/2012/04/15/firebase-and-sapui5/" target="_blank" rel="nofollow noopener noreferrer">Firebase and SAPUI5</A>" post from back in 2012 if you're curious). I've created a simple Firebase project and am using the database as my target wishlist storage system. It's really straightforward to build a UI5 app on top of a Firebase database; my friend&nbsp;Former Member&nbsp;and I <A href="http://www.bluefinsolutions.com/insights/chris-choy/november-2017/ok-google,-meet-sap" target="_blank" rel="nofollow noopener noreferrer">built a Firebase-powered dashboard and separate UI5 companion app</A> to control it - it was on show on the Google stand at SAP TechEd in Barcelona in 2017.<BR />
<BR />
Here's what the data looks like - each wishlist entry appears as a node within the "wishlist" node:<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2018/01/Screenshot-2018-01-27-at-12.19.39.png" /><BR />
<BR />
You can see the structure of the marshalled data being reflected directly as child nodes here. There's another collapsed node (ending "_4pFaZGr") within the wishlist node, containing another wishlist entry.<BR />
<H3 id="toc-hId-642725634">Defining the service task</H3><BR />
The service task is the last task in the workflow definition, and the details look like this:<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2018/01/Screenshot-2018-01-27-at-12.25.51.png" /><BR />
<BR />
You can see a more detailed explanation of these service task settings in the great series by&nbsp;<SPAN class="mention-scrubbed">murali.shanmugham</SPAN>&nbsp;- in particular see <A href="https://blogs.sap.com/2017/08/01/implementing-a-user-self-registration-scenario-using-workflow-and-business-rules-in-sap-cloud-platform-part-3/" target="_blank" rel="noopener noreferrer">Part 3 of&nbsp;Implementing a user self-registration scenario using Workflow and Business rules in SAP Cloud Platform</A>. We'll just focus on the settings needed here.<BR />
<BR />
The execution of a service task like this is the result of the lovely coordination between three things:<BR />
<UL><BR />
 	<LI>access to the workflow instance context</LI><BR />
 	<LI>a mechanism in the Workflow service to deal with the XSRF token fetching and subsequent utilisation</LI><BR />
 	<LI>the Connectivity service on the SAP Cloud Platform</LI><BR />
</UL><BR />
Here we've specified "untappdwishliststore" as the value for the "Destination" setting. You guessed it - this is a destination managed within the Connectivity service, a service central to almost everything that goes on in SCP.<BR />
<BR />
Let's take a quick look at how this destination is defined:<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2018/01/Screenshot-2018-01-27-at-12.18.05.png" /><BR />
<BR />
The full value of the URL here is:<BR />
<PRE><CODE><A href="https://untappdrecomendations.firebaseio.com" target="test_blank" rel="nofollow noopener noreferrer">https://untappdrecomendations.firebaseio.com</A></CODE></PRE><BR />
If you refer to the Firebase database REST API documentation, you'll see that this is the "root" URL for the data store in the Firebase project "untappdrecommendations", and read/write access to the nodes within the data store is available simply by extending the URL to include path info referring to the node required. For example, this URL:<BR />
<PRE><CODE><A href="https://untappdrecomendations.firebaseio.com/wishlist.json" target="test_blank" rel="nofollow noopener noreferrer">https://untappdrecomendations.firebaseio.com/wishlist.json</A></CODE></PRE><BR />
refers to the "wishlist" node, such that a GET request works like this:<BR />
<PRE class="language-markup"><CODE>qmacro@cloud-shell:~$ curl <A href="https://untappdrecommendations.firebaseio.com/wishlist.json" target="test_blank" rel="nofollow noopener noreferrer">https://untappdrecommendations.firebaseio.com/wishlist.json</A> | jq '.'<BR />
{<BR />
  "-L3rXLpoPKRrWkhg7E-Z": {<BR />
    "checkin": {<BR />
      "beer_name": "Straffe Hendrik Brugs Quadrupel Bier 11Â°",<BR />
      "bid": 41289,<BR />
      "brewery_name": "De Halve Maan"<BR />
    },<BR />
    "selected": [<BR />
      {<BR />
        "beer_name": "Brugse Zot",<BR />
        "bid": 4713,<BR />
        "brewery_name": "De Halve Maan"<BR />
      },<BR />
      [...]<BR />
qmacro@cloud-shell:~$</CODE></PRE><BR />
Note how the documentation describes simply appending ".json" to the URL to make things work.<BR />
<BR />
We can add children to this node by using POST, again, specifying the path info:<BR />
<PRE><CODE>/wishlist.json</CODE></PRE><BR />
Of course, we need to supply the child data in JSON, which, serendipitously, is exactly what the service task will do for us.<BR />
<BR />
With this in mind, it makes sense that the value specified for the script task's Path setting is indeed "/wishlist.json", which gets appended to the URL defined in the destination.<BR />
<BR />
This resource is not XSRF-protected, so we don't need to have the script task service fetch a token for us first (and then supply it in the actual POST request), so the "Path to XSRF Token" setting remains empty.<BR />
<BR />
Finally, we need to specify where the data is that we want sent, and where (if anywhere) we want what comes back in the response to be stored. In our case, we've marshalled the wishlist entry into the "wishlistEntry" property in our context, so that's what we specify. And we're not interested in the response payload so we don't specify anything for the Response Variable setting.<BR />
<H3 id="toc-hId-446212129">The service task in action</H3><BR />
Let's see the service task in action. We select the two beers highlighted as recommendations:<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2018/01/Screenshot-2018-01-27-at-16.02.25.png" /><BR />
<BR />
The script task marshals the wishlist entry based on those selections, and the service task kicks in, sending this wishlist entry to be stored in the Firebase database, where it appears immediately (we're looking at the Firebase console database view / editor here):<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2018/01/Screenshot-2018-01-27-at-16.00.50.png" /><BR />
<BR />
By remaining in the workflow monitor app (which we looked all the way back in <A href="https://blogs.sap.com/2018/01/08/discovering-scp-workflow-the-monitor/" target="_blank" rel="noopener noreferrer">Discovering SCP Workflow - The Monitor</A>), we can see the execution logs run to completion before the item disappears (as the instance is set to complete):<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2018/01/Screenshot-2018-01-27-at-15.59.58.png" /><BR />
<BR />
Clicking on the "untappdwishliststore" link there shows the method and the URL used for the service endpoint:<BR />
<PRE><CODE>POST <A href="https://untappdrecommendations.firebaseio.com/wishlist.json" target="test_blank" rel="nofollow noopener noreferrer">https://untappdrecommendations.firebaseio.com/wishlist.json</A></CODE></PRE><BR />
<H3 id="toc-hId-249698624">Redirect gotcha</H3><BR />
I thought it worth mentioning that an earlier iteration of this step in the workflow saw me trying to send the data to a Google spreadsheet, using Google Apps Script (exposing a <A href="https://developers.google.com/apps-script/guides/web" target="_blank" rel="nofollow noopener noreferrer">web app</A>). This is something I do very often, and it's super useful.<BR />
<BR />
I typically use the Content Service to return responses to requests that I'm handling with such a script, but there's a <A href="https://developers.google.com/apps-script/guides/content#redirects" target="_blank" rel="nofollow noopener noreferrer">security design feature</A>&nbsp;that means the response to requests to such web apps is served from a different host, via an HTTP 302 FOUND redirect mechanism. This is all well and good, however the <A href="https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html" target="_blank" rel="nofollow noopener noreferrer">HTTP specification</A> states:<BR />
<BR />
<EM>"If the 302 status code is received in response to a request other than GET or HEAD, the user agent MUST NOT automatically redirect the request unless it can be confirmed by the user, since this might change the conditions under which the request was issued."</EM><BR />
<BR />
That means that when sending a POST request to an endpoint that responds with a 302 status code, the service task mechanism cannot automatically follow that redirect, as it's obeying RFC2616. <A href="http://knowyourmeme.com/memes/one-does-not-simply-walk-into-mordor" target="_blank" rel="nofollow noopener noreferrer">One does not simply</A> ignore RFC2616!<BR />
<BR />
The upshot of this was that I was unable to make a POST request to my apps script successfully. I may look at avoiding the Content Service in future iterations, but it's not that important right now.<BR />
<H3 id="toc-hId-53185119">Closing thoughts</H3><BR />
Our workflow is complete. It was a relatively simple one; nonetheless it shows many of the major features that the Workflow service offers. The journey of discovery I've been on in preparing for and writing this series has taught me a lot about the service, and I've become a fan.<BR />
<BR />
I hope that you get something from these posts, and look into the Workflow service too. It's positioned to be a very powerful and capable set of tools for connecting humans and processes across the range of systems (SAP and non-SAP) within and beyond an enterprise.<BR />
<BR />
The Workflow service is a great example of what I see as the new SAP - as I <A href="https://twitter.com/qmacro/status/956877216402505729" target="_blank" rel="nofollow noopener noreferrer">tweeted</A> earlier this week, I built the entire workflow, wrote and tested the JavaScript, debugged and iterated upon the flow definition and worked out what I was doing and where I was going, entirely online, using no workstation-local tools. My workstation is running Chrome OS. (Yes, I wrote this series all online too, of course). I suspect this trend towards web terminals will continue.<BR />
<BR />
I'll drink to that!
---
Discovering SCP Workflow - Script Tasks
technology-blog-members
2018-01-26
https://community.sap.com/t5/technology-blogs-by-members/discovering-scp-workflow-script-tasks/ba-p/13371812
2018-01-26-discovering-scp-workflow-script-tasks
Previous post in this series:&nbsp;<A href="https://blogs.sap.com/2018/01/24/discovering-scp-workflow-recommendation-ui/" target="_blank" rel="noopener noreferrer">Discovering SCP Workflow â Recommendation UI</A>.<BR />
<BR />
This post is part of a series, a guide to which can be found here:&nbsp;<A href="https://qmacro.org/blog/posts/2018/01/16/discovering-scp-workflow/" target="_blank" rel="nofollow noopener noreferrer">Discovering SCP Workflow</A>.<BR />
<BR />
It's time to move on from user tasks and take a look at script tasks. By this point in the series, we've reached the stage where the user has been presented with a list of beers, recommended because of the beer that was originally checked in. They've made their choice in the <A href="https://blogs.sap.com/2018/01/24/discovering-scp-workflow-recommendation-ui/" target="_blank" rel="noopener noreferrer">recommendation UI</A>&nbsp;and hit the Continue action button to move on.<BR />
<BR />
Let's remind ourselves of the flow, from a previous post in this series: <A href="https://blogs.sap.com/2018/01/18/discovering-scp-workflow-workflow-definition/" target="_blank" rel="noopener noreferrer">Discovering SCP Workflow - Workflow Definition</A>:<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2018/01/Screenshot-2018-01-17-at-07.17.58.png" /><BR />
<BR />
It's time to marshal the user's selections, and for that we can use a script task.<BR />
<H3 id="toc-hId-1035694797">Script tasks and JavaScript</H3><BR />
From reading the <A href="https://help.sap.com/viewer/f85276c5069a429fa37d1cd352785c25/Cloud/en-US/ca9a4381628a40908ffe1f74bde9f3ce.html" target="_blank" rel="noopener noreferrer">documentation on script tasks</A>, we find that, at least in the Workflow service's current incarnation, script tasks are relatively simple and restricted. That said, they're a very useful mechanism for manipulating the data within a workflow instance before moving on to further steps in the flow.<BR />
<BR />
Script tasks are written in JavaScript. Beware, however, that it's specifically ECMAScript (ES) 5.1, rather than any later version of JavaScript. Being functionally inclined, I tend to write a lot of ES6 style JavaScript, using fat arrow syntax and so on, but that's not supported here.<BR />
<BR />
If you do write ES6, you'll be warned by the linter, like this:<BR />
<BR />
<IMG src="https://mail.google.com/mail/u/0/?ui=2&amp;ik=f61bf3ef4b&amp;view=fimg&amp;th=16131616c19beadf&amp;attid=0.2&amp;disp=emb&amp;realattid=ii_jcvlw8cu2_161315e8c7321462&amp;attbid=ANGjdJ9YbXZhoq-LsfrKoFE9OsYNPd-t1FhLXjqdmJNyFneDJirDfNdunMaLNknwOwFQfzvCTasqJJNnGXXqPLX7Js6I65d6ahoiztyhgF79sV2-DRJ8eL_Y0pUlbWU&amp;sz=w912-h150&amp;ats=1516956486090&amp;rm=16131616c19beadf&amp;zw&amp;atsh=1" /><BR />
<BR />
ES6 came into being for most people in 2015, but there are still systems where it's not yet supported. This is one of them. Another major system where I still have to write ES5 code is in Google Apps Scripts. Interestingly that's another cloud based, server side execution context service. So it's not an isolated issue at all. I mean, it's not that it's an issue per se - I just personally prefer ES6.<BR />
<BR />
The script task itself, in the workflow definition, is very simple - it just points to a JavaScript file within the workflow project:<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2018/01/Screenshot-2018-01-26-at-08.58.06.png" /><BR />
<BR />
We'll see the content of that file shortly.<BR />
<H3 id="toc-hId-839181292">What can you do?</H3><BR />
The documentation says "Configure a script task if you want the system to run a script to perform a task in the workflow", which is quite generic.<BR />
<BR />
Considering the sandbox within which the JavaScript is executed, and the access that JavaScript has, there's currently really only a single main focus for script tasks, and that's to access and manipulate the workflow instance's context.<BR />
<BR />
Why might you want to do that? Well, a number of reasons come to mind:<BR />
<UL><BR />
 	<LI>to make calculations and set values that can be tested in further steps within the workflow</LI><BR />
 	<LI>to combine and otherwise modify existing data</LI><BR />
 	<LI>to marshal a set of properties ready for a further step within the workflow, specifically a service task step</LI><BR />
</UL><BR />
There are couple of special variables available that afford access to the context and a little bit of the workflow instance metadata:<BR />
<UL><BR />
 	<LI>$.context - this is the entire workflow instance context</LI><BR />
 	<LI>$.info - this exposes some instance specific metadata (currently the workflow instance ID, the ID of the script task itself, and the ID of the workflow definition)</LI><BR />
</UL><BR />
Stepping back from the keyboard for a second, one might imagine the scope of access expanding to include other data in a workflow instance. How about being able to see other tasks within the instance, and modify their properties, such as a user task's priority, or the path of a service task's endpoint?<BR />
<BR />
Of course, there's a balance to be had between changing these things dynamically, and perhaps "opaquely" in code within a script task, and making things more "explicit" with other workflow definition mechanisms at our disposal, such as <A href="https://help.sap.com/viewer/f85276c5069a429fa37d1cd352785c25/Cloud/en-US/22cda7ec05514383b914229b57b0f5cf.html" target="_blank" rel="noopener noreferrer">gateways</A>. It all depends of course. I'm sure the Workflow service team are thinking hard about these issues and the pros and cons of each approach.<BR />
<H3 id="toc-hId-642667787">Marshalling recommendations</H3><BR />
Going back to the reasons for using a script task that we considered earlier, our simple workflow definition calls for the readying of values in preparation for a call to a remote service in the next step - a service task, which we'll look at next time.<BR />
<BR />
Considering what we have right now, there's a <A href="https://untappd.com/api/docs#beerinfo" target="_blank" rel="nofollow noopener noreferrer">ton of information</A> in the context, put there for the most part when the instance was kicked off. We also have indications of which beers the user selected in the task UI, for inclusion within their wishlist.<BR />
<BR />
These indications are the presence of a new property "_selected" in the similar items array. Let's remind ourselves of what this might look like.<BR />
<BR />
This chunk of JSON shows the "similar" property in the (heavily redacted) context of a workflow instance started following a check-in to <A href="https://untappd.com/b/brouwerij-der-trappisten-van-westmalle-westmalle-trappist-dubbel/4168" target="_blank" rel="nofollow noopener noreferrer">Westmalle Dubbel</A>, and where the user selected <A href="https://untappd.com/b/brouwerij-bosteels-tripel-karmeliet/6511" target="_blank" rel="nofollow noopener noreferrer">Tripel Karmeliet</A> (the queen of beers!) and <A href="https://untappd.com/b/abbaye-notre-dame-de-saint-remy-trappistes-rochefort-10/6766" target="_blank" rel="nofollow noopener noreferrer">Trappistes Rochefort 10</A> (a solid quadrupel):<BR />
<PRE class="language-javascript"><CODE>"similar": {<BR />
    "count": 5,<BR />
    "items": [<BR />
        {<BR />
            "beer": {<BR />
                "bid": 487,<BR />
                "beer_name": "Westmalle Trappist Tripel",<BR />
                [...]<BR />
            },<BR />
        },<BR />
        {<BR />
            "beer": {<BR />
                "bid": 6511,<BR />
                "beer_name": "Tripel Karmeliet",<BR />
                [...]<BR />
            },<BR />
            "_selected": true<BR />
        },<BR />
        {<BR />
            "beer": {<BR />
                "bid": 1830,<BR />
                "beer_name": "La Trappe Quadrupel",<BR />
                [...]<BR />
            },<BR />
        },<BR />
        {<BR />
            "beer": {<BR />
                "bid": 6766,<BR />
                "beer_name": "Trappistes Rochefort 10",<BR />
                [...]<BR />
            },<BR />
            "_selected": true<BR />
        },<BR />
        {<BR />
            "beer": {<BR />
                "bid": 34039,<BR />
                "beer_name": "Chimay Blue / Bleue / Blauw (Grande RÃ©serve)",<BR />
                [...]<BR />
            },<BR />
        }<BR />
    ]<BR />
}</CODE></PRE><BR />
Note the two "_selected" properties.<BR />
<BR />
We want to marshal the selected recommendations, along with some small details about the original beer that was checked in, ready to send to the external service in the next step.<BR />
<BR />
Here's the entire code in the script task, contained in the marshalSelectedRecommendations.js script:<BR />
<PRE class="language-javascript"><CODE>$.context.wishlistEntry = {<BR />
    checkin : {<BR />
        bid : $.context.beer.bid,<BR />
        beer_name : $.context.beer.beer_name,<BR />
        brewery_name : $.context.beer.brewery.brewery_name<BR />
    },<BR />
    selected : $.context.beer.similar.items<BR />
        .filter(function(x) { return x._selected; })<BR />
        .map(function(x) {<BR />
        	return {<BR />
	            bid : x.beer.bid,<BR />
	            beer_name : x.beer.beer_name,<BR />
	            brewery_name : x.brewery.brewery_name<BR />
        	};<BR />
     	})<BR />
};</CODE></PRE><BR />
Yes, I know it would look much nicer with ES6 fat arrow syntax, thank you very much.<BR />
<BR />
The key point here, I guess, is that the code is very simple, and almost not worth examining too much, except for these points:<BR />
<UL><BR />
 	<LI>we're using the $.context variable to access the entire context</LI><BR />
 	<LI>we're creating a new property in the context called "wishlistEntry" that we'll use in the next step</LI><BR />
 	<LI>obviously we're only gathering the recommendations that were selected (with the filter call)</LI><BR />
</UL><BR />
And that's it. At this point, we "let go" and allow the flow to continue on to the next step, which is an call to send this wishlistEntry to an external service.<BR />
<H3 id="toc-hId-446154282">A note on empty wishlists</H3><BR />
The astute amongst you may be thinking: "Wait, the user might not have chosen any of the recommendations, what then? Are we going to append an empty list to the wishlist in this case?"<BR />
<BR />
Well, for the purposes of this series, we are. There's a time and a place to look at more complex workflow definitions that use decision points and forks in the flow to deal with different situations. While the place might be here, the time is not right now. We'll keep things simple and maintain a single threaded flow in the definition.<BR />
<H3 id="toc-hId-249640777">Final thoughts</H3><BR />
Actually the hardest thing about building this script task was not writing the JavaScript, but having the context at hand, including the recommendation selections from the previous user task. It's always nicer to write code, even code as simple as this, against some real data, rather than just imagining the shape of it in your head.<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2018/01/Screenshot-2018-01-17-at-08.35.00.png" /><BR />
<BR />
The challenge was that as soon as the user task "Present Recommendations" completed, when the user hit the "Continue" button in the task UI, the flow continued on and executed whatever was in the script task "Marshal selections" (this task) at the time. Too late for any examination of the context that we wanted to manipulate!<BR />
<BR />
If you want to find out how I dealt with this issue, let me know in the comments, and I can write about it in an appendix to this series.<BR />
<BR />
In the next post, we'll look at sending the wishlistEntry data to an external service, to collect together the general beer wishlist I want to build up.<BR />
<BR />
<EM>This morning's post was brought to you by <A href="https://www.pactcoffee.com/coffees/el-aguacate-espresso" target="_blank" rel="nofollow noopener noreferrer">El Aguacate from Pact Coffee</A>, Erroll Garner's <A href="https://open.spotify.com/album/1cb4bE5Q1vLla4jjoNV1gS" target="_blank" rel="nofollow noopener noreferrer">Ready Take One</A>&nbsp;and the number 14.1.</EM><BR />
<BR />
Next post in this series: <A href="https://blogs.sap.com/2018/01/29/discovering-scp-workflow-service-tasks/" target="_blank" rel="noopener noreferrer">Discovering SCP Workflow - Service Tasks</A>.
---
Discovering SCP Workflow - Recommendation UI
technology-blog-members
2018-01-24
https://community.sap.com/t5/technology-blogs-by-members/discovering-scp-workflow-recommendation-ui/ba-p/13365480
2018-01-24-discovering-scp-workflow-recommendation-ui
Previous post in this series: <A href="https://blogs.sap.com/2018/01/22/discovering-scp-workflow-component-startup/" target="_blank" rel="noopener noreferrer">Discovering SCP Workflow - Component Startup</A>.<BR />
<BR />
This post is part of a series, a guide to which can be found here: <A href="https://qmacro.org/blog/posts/2018/01/16/discovering-scp-workflow/" target="_blank" rel="nofollow noopener noreferrer">Discovering SCP Workflow</A>.<BR />
<BR />
We've seen the task UI many times now in previous posts. In this post we'll take a quick look at how that was put together. There's nothing particularly special about the UI5 app itself, save for the component startup that we covered in the previous post. But it's worth covering, if not just so you have another angle on creating apps to support user tasks in My Inbox.<BR />
<H3 id="toc-hId-1034886811">Structure</H3><BR />
The app has a standard structure, which came about as I created it using the "Basic SAPUI5 Application Project" template in the SAP Web IDE. This comes with settings that cause an automatic build (minification / preload) which is useful.<BR />
<BR />
It's a simple set of artifacts, much as one might expect from a UI that is a single view, as we saw at the end of the last post:<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2018/01/Screenshot-2018-01-21-at-19.23.33.png" /><BR />
<BR />
The rest of the "chrome" (<A href="https://www.nngroup.com/articles/browser-and-gui-chrome/" target="_blank" rel="nofollow noopener noreferrer">lower-case "C"</A>) - the master list of user task items, the footer bar with buttons, and so on - comes from the My Inbox host app. All we have to do for this Untappd Recommendation workflow user task is provide enough structure to present the app in the form of a component (who doesn't do that anyway, these days?) which does most of the important work, and a simple view and controller.<BR />
<BR />
So here's the project folder:<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2018/01/Screenshot-2018-01-23-at-07.48.06.png" /><BR />
<BR />
There are a few non-core artifacts here too - I have the "Show Hidden Files" setting turned on, and there's the (unexpanded) dist folder containing the files built for deployment.<BR />
<H3 id="toc-hId-838373306">The artifacts</H3><BR />
Let's look at the key artifacts one by one, examining the important bits.<BR />
<H4 id="toc-hId-770942520">manifest.json</H4><BR />
There's nothing special in this file, except I guess for the important reference to the Workflow runtime route, which sits alongside the SAPUI5 resources routes:<BR />
<PRE class="language-javascript"><CODE>{<BR />
  "welcomeFile": "/webapp/index.html",<BR />
  "routes": [<BR />
    {<BR />
      "path": "/resources",<BR />
      "target": {<BR />
        "type": "service",<BR />
        "name": "sapui5",<BR />
        "entryPath": "/resources"<BR />
      },<BR />
      "description": "SAPUI5 Resources"<BR />
    },<BR />
    {<BR />
      "path": "/test-resources",<BR />
      "target": {<BR />
        "type": "service",<BR />
        "name": "sapui5",<BR />
        "entryPath": "/test-resources"<BR />
      },<BR />
      "description": "SAPUI5 Test Resources"<BR />
    },<BR />
    {<BR />
      "path": "/bpmworkflowruntime",<BR />
      "target": {<BR />
        "type": "destination",<BR />
        "name": "bpmworkflowruntime",<BR />
        "entryPath": "/workflow-service"<BR />
      },<BR />
      "description": "Workflow REST API"<BR />
    }<BR />
  ],<BR />
  "sendWelcomeFileRedirect": true<BR />
}</CODE></PRE><BR />
That said, there's one thing worth pointing out here.<BR />
<BR />
In <A href="https://blogs.sap.com/2018/01/14/discovering-scp-workflow-instance-initiation/" target="_blank" rel="noopener noreferrer">Discovering SCP Workflow - Instance Initiation</A>, I suggested an improved route name of "workflowservice", with an entryPath of "/workflow-service/rest", rather than the more low-level "bpmworkflowruntime" with its entryPath of simply "/workflow-service". So why are we not using that improved "workflowservice" route name here?<BR />
<BR />
Consider the context in which the task UI is instantiated. It's as a component, within a component container, inside an already running host app (My Inbox). So the destination routing is controlled by the routes defined in the host app's neo-app.json, not the task UI's neo-app.json.<BR />
<BR />
In other words, because the My Inbox app, known by its real name "bpmmyinbox", has a route "bpmworkflowruntime" defined, and not "workflowservice", we have to use that in our task UI app too.<BR />
<BR />
Theoretically we don't actually need any destination route in the task UI app's neo-app.json to point to the BPM workflow runtime. Except we do - if we want to test the UI before deploying it! And in that case, for consistency, we also need to use "bpmworkflowruntime".<BR />
<H4 id="toc-hId-574429015">index.html</H4><BR />
We actually examined the key parts of the standalone harness for our task UI in the previous post <A href="https://blogs.sap.com/2018/01/22/discovering-scp-workflow-component-startup/" target="_blank" rel="noopener noreferrer">Discovering SCP Workflow - Component Startup</A>. There's nothing special in there at all beyond what came from the template, except for the addition of the settings property in the instantiation of the Component Container, to allow passing of a task instance ID in the URL:<BR />
<PRE class="language-javascript"><CODE>sap.ui.getCore().attachInit(function() {<BR />
	new sap.m.Shell({<BR />
		app: new sap.ui.core.ComponentContainer({<BR />
			height : "100%",<BR />
			name : "qmacro.UntappdRecommendationApproval",<BR />
			settings : {<BR />
				componentData : {<BR />
					startupParameters : {<BR />
						taskModel : new sap.ui.model.json.JSONModel({<BR />
							InstanceID : jQuery.sap.getUriParameters().get("InstanceID")<BR />
						})<BR />
					}<BR />
				}<BR />
			}<BR />
		})<BR />
	}).placeAt("content");<BR />
});</CODE></PRE><BR />
<H4 id="toc-hId-377915510">Component.js</H4><BR />
We've already seen the heart of the Component.js file in the previous post - the init function. Here's the entire source:<BR />
<PRE class="language-javascript"><CODE>sap.ui.define([<BR />
	"sap/ui/core/UIComponent",<BR />
	"sap/ui/Device",<BR />
	"qmacro/UntappdRecommendationApproval/model/models"<BR />
], function(UIComponent, Device, models) {<BR />
	"use strict";<BR />
<BR />
	return UIComponent.extend("qmacro.UntappdRecommendationApproval.Component", {<BR />
<BR />
		metadata: {<BR />
			manifest: "json"<BR />
		},<BR />
<BR />
		/**<BR />
		 * The component is initialized by UI5 automatically during the startup of the app and calls the init method once.<BR />
		 * @public<BR />
		 * @override<BR />
		 */<BR />
		init: function() {<BR />
			// call the base component's init function<BR />
			UIComponent.prototype.init.apply(this, arguments);<BR />
<BR />
			// enable routing<BR />
			this.getRouter().initialize();<BR />
<BR />
			// set the device model<BR />
			this.setModel(models.createDeviceModel(), "device");<BR />
			<BR />
			// app-wide helper model<BR />
			this.setModel(models.createAppModel(), "app");<BR />
<BR />
			// get task data<BR />
			var startupParameters = this.getComponentData().startupParameters;<BR />
			var taskModel = startupParameters.taskModel;<BR />
			var taskData = taskModel.getData();<BR />
			var taskId = taskData.InstanceID;<BR />
<BR />
			// initialize model<BR />
			var contextModel = new sap.ui.model.json.JSONModel("/bpmworkflowruntime/rest/v1/task-instances/" + taskId + "/context");<BR />
			this.setModel(contextModel);<BR />
<BR />
			// Ensure we have access to the Inbox API before continuing<BR />
			// (we don't except when running within the My Inbox context, ie<BR />
			// when running "for real", rather than in test mode).<BR />
			if (startupParameters.inboxAPI) {<BR />
<BR />
				// get the task description<BR />
				var appModel = this.getModel("app");<BR />
				startupParameters.inboxAPI.getDescription("NA", taskId)<BR />
					.done(function(data){<BR />
	                	appModel.setProperty("/taskDescription", data.Description);<BR />
					})<BR />
					.fail(function(errorText){<BR />
	                	jQuery.sap.require("sap.m.MessageBox");<BR />
	                	sap.m.MessageBox.error(errorText, { title: "Error"});<BR />
	        		});<BR />
<BR />
				//add actions<BR />
				startupParameters.inboxAPI.addAction({<BR />
					type: "Accept",<BR />
					label: "Continue"<BR />
				}, function(button) {<BR />
					this._completeTask(taskId, true);<BR />
				}, this);<BR />
<BR />
			}<BR />
		},<BR />
		<BR />
		// Taken mostly straight out of the "Book Approval" tutorial for now<BR />
		_completeTask: function(taskId, approvalStatus) {<BR />
			var token = this._fetchToken();<BR />
			$.ajax({<BR />
				url: "/bpmworkflowruntime/rest/v1/task-instances/" + taskId,<BR />
				method: "PATCH",<BR />
				contentType: "application/json",<BR />
				async: false,<BR />
				data: JSON.stringify({<BR />
					status: "COMPLETED",<BR />
					context: this.getModel().getData()<BR />
				}),<BR />
				headers: {<BR />
					"X-CSRF-Token": token<BR />
				}<BR />
			});<BR />
			this._refreshTask(taskId);<BR />
		}<BR />
<BR />
		,<BR />
		_fetchToken: function() {<BR />
			var token;<BR />
			$.ajax({<BR />
				url: "/bpmworkflowruntime/rest/v1/xsrf-token",<BR />
				method: "GET",<BR />
				async: false,<BR />
				headers: {<BR />
					"X-CSRF-Token": "Fetch"<BR />
				},<BR />
				success: function(result, xhr, data) {<BR />
					token = data.getResponseHeader("X-CSRF-Token");<BR />
				}<BR />
			});<BR />
			return token;<BR />
		},<BR />
<BR />
		_refreshTask: function(taskId) {<BR />
			this.getComponentData().startupParameters.inboxAPI.updateTask("NA", taskId);<BR />
		}<BR />
<BR />
<BR />
<BR />
	});<BR />
});</CODE></PRE><BR />
The rest of it is pretty standard, plus we have the _completeTask, _fetchToken and _refreshTask functions that I lifted straight from&nbsp;<SPAN class="mention-scrubbed">christian.loos</SPAN>&nbsp;'s post&nbsp;<A href="https://blogs.sap.com/2017/11/06/getting-started-with-sap-cloud-platform-workflow-how-to-build-a-simple-approval-ui/" target="_blank" rel="noopener noreferrer">Getting started with SAP Cloud Platform Workflow â How to build a simple approval UI</A>.<BR />
<H4 id="toc-hId-181402005">model/models.js</H4><BR />
This is what the model module looks like:<BR />
<PRE class="language-javascript"><CODE>sap.ui.define([<BR />
	"sap/ui/model/json/JSONModel",<BR />
	"sap/ui/Device"<BR />
], function(JSONModel, Device) {<BR />
	"use strict";<BR />
<BR />
	return {<BR />
<BR />
		createDeviceModel: function() {<BR />
			var oModel = new JSONModel(Device);<BR />
			oModel.setDefaultBindingMode("OneWay");<BR />
			return oModel;<BR />
		},<BR />
		<BR />
		createAppModel: function() {<BR />
			return new JSONModel({<BR />
				taskDescription: ""<BR />
			});<BR />
		}<BR />
<BR />
	};<BR />
});</CODE></PRE><BR />
Nothing exciting there. We can see the createAppModel function that we call from the component's init function to create the app model, with a single property taskDescription, having an initial value of an empty string. This is used in the view shortly, and the actual value is taken from the description in the user task in the specific workflow instance, via the call to startupParameters.inboxAPI.getDescription function (see earlier).<BR />
<BR />
The interesting thing about this description value is that it is specific to the particular workflow underway, and can be built from static strings and variable substitutions. But not in the context of UI5 ... it's actually in the workflow definition itself.<BR />
<BR />
Take a look at the screenshot we saw in a previous post <A href="https://blogs.sap.com/2018/01/20/discovering-scp-workflow-user-tasks/" target="_blank" rel="noopener noreferrer">Discovering SCP Workflow - User Tasks</A>:<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2018/01/Screenshot-2018-01-18-at-09.46.58.png" /><BR />
<BR />
The Description field here ("You recently checked in ...") is the source of what we're retrieving and storing against the taskDescription property in our app model.<BR />
<H4 id="toc-hId--15111500">i18n/i18n.properties</H4><BR />
Let's take a quick look in here, so at least we have an idea of what the text substitutions are when we look at the view shortly.<BR />
<PRE class="language-markup"><CODE>title=Beer Recommendations<BR />
appTitle=UntappdRecommendationApproval<BR />
<BR />
abv=% ABV<BR />
untappdBeerLink=https://untappd.com/beer/{0}<BR />
 <BR />
#XFLD: <BR />
rating=Rating<BR />
 <BR />
#XFLD: <BR />
totalCheckins=Total Checkins<BR />
<BR />
beerAndBrewery={0} by {1}<BR />
beerDescription={1}% ABV Rating {2} {0} </CODE></PRE><BR />
<H4 id="toc-hId--211625005">view/Main.view.xml</H4><BR />
Now we get to possibly the most interesting part - how the task UI itself is constructed. But we find there's actually almost nothing special at all. It's a regular XML view, with a reference to a controller (which we'll look at next), and a Page where we can display the checked-in beer and the recommended beers:<BR />
<PRE class="language-markup"><CODE>&lt;mvc:View <BR />
	controllerName="qmacro.UntappdRecommendationApproval.controller.Main" <BR />
	displayBlock="true"<BR />
	xmlns:mvc="sap.ui.core.mvc"<BR />
	xmlns="sap.m"&gt;<BR />
	&lt;App id="idAppControl"&gt;<BR />
		&lt;pages&gt;<BR />
			&lt;Page<BR />
				binding="{/beer}"			<BR />
				showHeader="false"&gt;<BR />
				&lt;content&gt;<BR />
					&lt;ObjectHeader<BR />
						icon="{beer_label}"<BR />
						title="{beer_name}"<BR />
						number="{beer_abv}"<BR />
						numberUnit="{i18n&gt;abv}" &gt;<BR />
						&lt;statuses&gt;<BR />
							&lt;ObjectStatus<BR />
								title="{i18n&gt;rating}"<BR />
								text="{rating_score}" /&gt;<BR />
							&lt;ObjectStatus<BR />
								title="{i18n&gt;totalCheckins}"<BR />
								text="{stats/total_count}" /&gt;<BR />
						&lt;/statuses&gt;<BR />
						&lt;attributes&gt;<BR />
							&lt;ObjectAttribute text="{brewery/brewery_name}" /&gt;<BR />
							&lt;ObjectAttribute text="{beer_style}" /&gt;<BR />
							&lt;ObjectAttribute<BR />
								text="{<BR />
									parts : [<BR />
										'i18n&gt;untappdBeerLink',<BR />
										'bid'<BR />
									],<BR />
									formatter : 'jQuery.sap.formatMessage'<BR />
								}"<BR />
								active="true"<BR />
								press="onLinkAttributePress" /&gt;<BR />
						&lt;/attributes&gt;<BR />
					&lt;/ObjectHeader&gt;<BR />
					&lt;Text<BR />
						width="100%"<BR />
						text="{app&gt;/taskDescription}" /&gt;<BR />
					&lt;List<BR />
						mode="MultiSelect"<BR />
						items="{similar/items}"&gt;<BR />
						&lt;items&gt;<BR />
							&lt;StandardListItem<BR />
								selected="{_selected}"<BR />
								icon="{beer/beer_label}"<BR />
								title="{<BR />
									parts : [<BR />
										'i18n&gt;beerAndBrewery',<BR />
										'beer/beer_name',<BR />
										'brewery/brewery_name'<BR />
									],<BR />
									formatter : 'jQuery.sap.formatMessage'<BR />
								}"<BR />
								description="{<BR />
									parts : [<BR />
										'i18n&gt;beerDescription',<BR />
										'beer/beer_style',<BR />
										'beer/beer_abv',<BR />
										'rating_score'<BR />
									],<BR />
									formatter : 'jQuery.sap.formatMessage'<BR />
								}" /&gt;<BR />
						&lt;/items&gt;<BR />
					&lt;/List&gt;<BR />
 				&lt;/content&gt;<BR />
			&lt;/Page&gt;<BR />
		&lt;/pages&gt;<BR />
	&lt;/App&gt;<BR />
&lt;/mvc:View&gt;</CODE></PRE><BR />
The entire Page control is bound to the root property "beer" in the domain model (the workflow context), so all the other properties are relative to this. It's going to be easier to read this view definition if we have an idea of what this context looks like, i.e. what's in the domain model, so take a look at the <A href="https://untappd.com/api/docs#beerinfo" target="_blank" rel="nofollow noopener noreferrer">Untappd API documentation for the "beerinfo" resource</A>, because at this point in the workflow, the context contains exactly that. And you can see that the root property in the API documentation is indeed "beer".<BR />
<BR />
Let's take a quick look at the context for one of the existing workflow instances I have:<BR />
<BR />
Request:<BR />
<PRE><CODE>GET <SPAN class="resolvedVariable">{{workflowservice}}</SPAN>/v1/workflow-instances/<SPAN class="resolvedVariable">{{instanceId}}</SPAN>/context</CODE></PRE><BR />
Response:<BR />
<PRE class="language-javascript"><CODE>{<BR />
    "beer": {<BR />
        "bid": 1868220,<BR />
        "beer_name": "Subluminal",<BR />
        "beer_abv": 10,<BR />
        "stats": {<BR />
            "total_count": 6731,<BR />
            "monthly_count": 118<BR />
        },<BR />
        "brewery": {<BR />
            "brewery_name": "Buxton Brewery"<BR />
        },<BR />
        "auth_rating": 0,<BR />
        "wish_list": false,<BR />
        "media": {<BR />
            [...]<BR />
        },<BR />
        "checkins": {<BR />
            [...]<BR />
        },<BR />
        "similar": {<BR />
            "count": 5,<BR />
            "items": [<BR />
                {<BR />
                    "rating_score": 3.77814,<BR />
                    "beer": {<BR />
                        "bid": 1387819,<BR />
                        "beer_name": "Blueberry Maple Stout",<BR />
                        "beer_abv": 6,<BR />
                        "beer_label": "https://untappd.akamaized.net/site/beer_logos/beer-1387819_a53f2_sm.jpeg"<BR />
                    },<BR />
                    "brewery": {<BR />
                        "brewery_name": "Saugatuck Brewing Company"<BR />
                    }<BR />
                },<BR />
                {<BR />
                    "rating_score": 4.3603,<BR />
                    "beer": {<BR />
                        "bid": 2224760,<BR />
                        "beer_name": "Original Maple Truffle Ice Cream Waffle",<BR />
                        "beer_abv": 11.5,<BR />
                        "beer_label": "https://untappd.akamaized.net/site/beer_logos/beer-2224760_0a5e5_sm.jpeg"<BR />
                    },<BR />
                    "brewery": {<BR />
                        "brewery_name": "Omnipollo"<BR />
                    }<BR />
                },<BR />
                [...]<BR />
            ]<BR />
        }<BR />
    }<BR />
}</CODE></PRE><BR />
Let's pick out the parts in this view that are worthy of at least some attention:<BR />
<UL><BR />
 	<LI>the Page control's showHeader property is set to false, because the My Inbox app's detail view will already be setting up a header, highlighted in red here. If we were to have the task UI's Page header showing, it would be as shown in green here. Double trouble! If you look closely at the control tree hierarchy, you can see the Page within a Page. ("<A href="https://open.spotify.com/track/65ZVM2RDxqnQHk4Xp9ebOG" target="_blank" rel="nofollow noopener noreferrer">Wheels within wheels, in a spiral array...</A>" etc)<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2018/01/Screenshot-2018-01-23-at-11.57.19.png" /></LI><BR />
 	<LI>there's a handler for the press event of the active Object Attribute showing the link to the Untappd page for the checked-in beer. This handler, the function onLinkAttributePress, is actually the only function in the controller.</LI><BR />
 	<LI>the very useful built-in formatter facility jQuery.sap.formatMessage is used in a few places to merge static text with variables, defined in the i18n file.</LI><BR />
 	<LI>the List control's items aggregation is bound to the array of recommended beers, i.e. those that appear in the "similar" property in the beer info data we saw earlier.</LI><BR />
</UL><BR />
And that's pretty much it!<BR />
<BR />
Probably the most interesting, and most subtle aspect of this view definition is the binding of the selected property in the Standard List Item control template, to the property "_selected" in the domain model.<BR />
<BR />
Rather than build a mechanism that explicitly and actively saves selections, we can just take advantage of the default two-way binding of JSON models, which will cause changes to the value(s) of this selected property to be written to corresponding "_selected" property values in the array of similar items in the context data, effectively adding a new property there to signify whether the user chose it or not. Thanks UI5!<BR />
<H4 id="toc-hId--408138510">controller/Main.controller.js</H4><BR />
Pretty simple:<BR />
<PRE class="language-javascript"><CODE>sap.ui.define([<BR />
	"sap/ui/core/mvc/Controller"<BR />
], function(Controller) {<BR />
	"use strict";<BR />
<BR />
	return Controller.extend("qmacro.UntappdRecommendationApproval.controller.Main", {<BR />
<BR />
		onLinkAttributePress : function(oEvent) {<BR />
			var sBeerId = oEvent.getSource().getModel().getProperty("/beer/bid"),<BR />
				sUrl = "https://untappd.com/beer/" + sBeerId;<BR />
			sap.m.URLHelper.redirect(sUrl, true);<BR />
		}<BR />
<BR />
	});<BR />
});</CODE></PRE><BR />
It's just that handler we mentioned earlier, to open a new browser page at the canonical destination for that beer on Untappd. For example, for Subluminal, this is, via the shortcut link&nbsp;<A href="https://untappd.com/beer/1868220" target="_blank" rel="nofollow noopener noreferrer">https://untappd.com/beer/1868220</A>, here:&nbsp;<A href="https://untappd.com/b/buxton-brewery-subluminal/1868220" target="_blank" rel="nofollow noopener noreferrer">https://untappd.com/b/buxton-brewery-subluminal/1868220</A>.<BR />
<H3 id="toc-hId--733734734">Review</H3><BR />
All in all, the task UI app is a pretty straightforward affair. Of course, this reflects the fact that the user task in this workflow definition is straightforward too. But then we want to keep things simple for the busy user, right?<BR />
<BR />
Let's wrap this post up by thinking about what happens when the user has "completed" the task. There's no handler in the controller which would be what one would expect in a normal UI5 app. Rather, it's a combination of a couple of things. Consider this stanza from within the component's init function:<BR />
<PRE class="language-javascript"><CODE>startupParameters.inboxAPI.addAction({<BR />
	type: "Accept",<BR />
	label: "Continue"<BR />
}, function(button) {<BR />
	this._completeTask(taskId, true);<BR />
}, this);</CODE></PRE><BR />
The first thing is that we've defined an anonymous function to be executed when the "Continue" button is pressed. That anonymous function calls _completeTask, which we know about.<BR />
<BR />
The second thing is the context to which the function is bound - that's the third parameter passed to the addAction call, i.e. the reference to "this". It means that within _completeTask, we have access to what "this" is - the component, and everything associated with it, including the domain model we previously set on it, the model which now will contain any selections of beers recommended. Wonderful!<BR />
<BR />
In the next post, we'll move away from user tasks and look at another workflow task type - the script task.<BR />
<BR />
Next post in this series: <A href="https://blogs.sap.com/2018/01/26/discovering-scp-workflow-script-tasks/" target="_blank" rel="noopener noreferrer">Discovering SCP Workflow - Script Tasks</A>.
---
Discovering SCP Workflow - Component Startup
technology-blog-members
2018-01-22
https://community.sap.com/t5/technology-blogs-by-members/discovering-scp-workflow-component-startup/ba-p/13362876
2018-01-22-discovering-scp-workflow-component-startup
Previous post in this series:&nbsp;<A href="https://blogs.sap.com/2018/01/20/discovering-scp-workflow-user-tasks/" target="_blank" rel="noopener noreferrer">Discovering SCP Workflow â User Tasks</A>.<BR />
<BR />
This post is part of a series, a guide to which can be found here:&nbsp;<A href="https://qmacro.org/blog/posts/2018/01/16/discovering-scp-workflow/" target="_blank" rel="nofollow noopener noreferrer">Discovering SCP Workflow</A>.<BR />
<BR />
In this post we'll look into how a task UI starts up, where it gets the right data to display, and how it interacts with the My Inbox "host" app.<BR />
<BR />
If you've followed the series so far, you'll know we're at the point now where we're in the My Inbox app, the user task currently selected is from the beer recommendation workflow definition, and we understand how the host app (My Inbox) knows how to get the user task rendered in the detail view of the classic master-detail layout.<BR />
<BR />
To refresh our memories, it's via the URI associated with the workflow's task (via the Task Collection entityset) in the GUI_Link property:<BR />
<PRE><CODE>sapui5://html5apps<BR />
  /untappdrecommendationapproval<BR />
  /qmacro.UntappdRecommendationApproval</CODE></PRE><BR />
In the previous post we also saw how the task UI component is instantiated:<BR />
<BR />
fnGetDetailsForSelectedTask -&gt; fnParseComponentParameters -&gt; fnRenderComponent<BR />
<BR />
Here's a snapshot at what's going on in this sequence, where the task UI component is about to be created (you can see the sequence in reverse order in the Call Stack on the right hand side):<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2018/01/Screenshot-2018-01-21-at-12.56.21.png" /><BR />
<BR />
For the reader (like me) who always wants to see the detail, the value of oComponentParameters.ComponentName in the createComponent call on lines 319-322 is "qmacro.UntappdRecommendationApproval". No surprises there, but it's always nice to have assumptions confirmed. And yes, this is happening in the host app's S3 (detail) controller.<BR />
<H3 id="toc-hId-1034801257">Task UI component data</H3><BR />
There's a second property in the the map passed in the createComponent call there, and that is componentData (on line 321).<BR />
<BR />
The componentData property is not uncommon when instantiating UI5 components in general - it's the normal way to pass data at startup time. And that's exactly what's happening here. The host app, My Inbox, has all the details of the task instance to be displayed, and needs to pass these to the component that it has worked out it needs to instantiate for that purpose.<BR />
<BR />
Let's take a look at what's contained in oCompData, which is the variable containing the data that's passed in the componentData property:<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2018/01/Screenshot-2018-01-21-at-13.09.33.png" /><BR />
<BR />
Lots of interesting stuff! Generally, it falls into a couple of categories:<BR />
<UL><BR />
 	<LI>links to the "inbox" (ie the host app)</LI><BR />
 	<LI>references to the task specific data</LI><BR />
</UL><BR />
<H4 id="toc-hId-967370471">The inbox API</H4><BR />
There's the inboxAPI property in the startupParameters map - this consists of various functions that you might guess are related to interacting with the host app. And you'd be right. Maintaining action buttons (for example to allow the user to accept or reject a task) is a key facility. These buttons are to appear at the bottom of the task UI, but are not part of it - they live within the footer of the host app's detail view - take a look again at the My Inbox, this time with the workflow log being displayed:<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2018/01/Screenshot-2018-01-21-at-13.22.05.png" /><BR />
<BR />
Effectively, the task UI is rendered within the host app, and is represented by the red outline here. The Continue button is in the footer, not in any part of the task UI itself.<BR />
<H4 id="toc-hId-770856966">Task information</H4><BR />
The other category relates to the data specific to the task. In the startupParameters map there's the taskModel property. If you were to invoke some introspection goodness upon this property, you'd see it was a JSON model:<BR />
<PRE><CODE>&gt; oCompData.startupParameters.taskModel.getMetadata()<BR />
&lt; Metadata {<BR />
    _sClassName: "sap.ui.model.json.JSONModel",<BR />
    _oClass: Æ,<BR />
    _oParent: Metadata, <BR />
    _bAbstract: false, <BR />
    _bFinal: false,&nbsp;â¦}</CODE></PRE><BR />
Can you resist looking to see what's in it? I can't. Let's do it:<BR />
<PRE><CODE>&gt; oCompData.startupParameters.taskModel.getData()<BR />
&gt; {<BR />
    CreatedBy: "P481810",<BR />
    CreatedOn: Sat Jan 20 2018 09:34:02 GMT+0000 (GMT) {},<BR />
    InstanceID: "0cdb90a1-fdc5-11e7-bb2a-00163e504470",<BR />
    Status: "READY",<BR />
    TaskDefinitionID: "usertask1",<BR />
    TaskDefinitionName: "Untappd Beer Recommendations", <BR />
    TaskTitle: "Recommended beers similar to Subluminal"<BR />
    [...]<BR />
  }</CODE></PRE><BR />
Gosh, that seems like exactly what the task UI will need!<BR />
<H3 id="toc-hId-445260742">Bootstrapping the task UI</H3><BR />
There are already a couple of nice posts on writing a task UI:<BR />
<UL><BR />
 	<LI><A href="https://blogs.sap.com/2017/11/06/getting-started-with-sap-cloud-platform-workflow-how-to-build-a-simple-approval-ui/" target="_blank" rel="noopener noreferrer">Getting started with SAP Cloud Platform Workflow â How to build a simple approval UI</A> by&nbsp;<SPAN class="mention-scrubbed">christian.loos</SPAN></LI><BR />
 	<LI><A href="https://blogs.sap.com/2017/10/12/part-1c-working-with-task-apis-in-your-custom-html5-application/" target="_blank" rel="noopener noreferrer">Part 1C: Working with Task APIs in your Custom HTML5 application</A>&nbsp;by&nbsp;<SPAN class="mention-scrubbed">archana.shukla</SPAN></LI><BR />
</UL><BR />
While I don't want to repeat what has already been covered, I think it's worth looking at how a task UI component starts up, within the context of the dive into the component data that we've just taken.<BR />
<BR />
I'll cover the majority of the UntappdRecommendationApproval app in the next post. Here, we'll focus on what goes on in the Component.js, specifically in the init function.<BR />
<BR />
Let's lay that function out so we can get a good look at what's going on:<BR />
<PRE class="language-javascript"><CODE>init: function() {<BR />
	// call the base component's init function<BR />
	UIComponent.prototype.init.apply(this, arguments);<BR />
<BR />
	// enable routing<BR />
	this.getRouter().initialize();<BR />
<BR />
	// set the device model<BR />
	this.setModel(models.createDeviceModel(), "device");<BR />
	<BR />
	// app-wide helper model<BR />
	this.setModel(models.createAppModel(), "app");<BR />
<BR />
	// get task data<BR />
	var startupParameters = this.getComponentData().startupParameters;<BR />
	var taskModel = startupParameters.taskModel;<BR />
	var taskData = taskModel.getData();<BR />
	var taskId = taskData.InstanceID;<BR />
<BR />
	// initialize model<BR />
	var contextModel = new sap.ui.model.json.JSONModel("/bpmworkflowruntime/rest/v1/task-instances/" + taskId + "/context");<BR />
	this.setModel(contextModel);<BR />
<BR />
	// Ensure we have access to the Inbox API before continuing<BR />
	// (we don't except when running within the My Inbox context, ie<BR />
	// when running "for real", rather than in test mode).<BR />
	if (startupParameters.inboxAPI) {<BR />
<BR />
		// get the task description<BR />
		var appModel = this.getModel("app");<BR />
		startupParameters.inboxAPI.getDescription("NA", taskId)<BR />
			.done(function(data){<BR />
              	appModel.setProperty("/taskDescription", data.Description);<BR />
			})<BR />
			.fail(function(errorText){<BR />
              	jQuery.sap.require("sap.m.MessageBox");<BR />
              	sap.m.MessageBox.error(errorText, { title: "Error"});<BR />
      		});<BR />
<BR />
		//add actions<BR />
		startupParameters.inboxAPI.addAction({<BR />
			type: "Accept",<BR />
			label: "Continue"<BR />
		}, function(button) {<BR />
			this._completeTask(taskId, true);<BR />
		}, this);<BR />
<BR />
	}<BR />
},</CODE></PRE><BR />
Where possible, I've followed the pattern shown by Christian and Archana, in getting access to the taskModel and other details.<BR />
<BR />
Let's take it bit by bit.<BR />
<BR />
The first part is fairly standard. This is what we do:<BR />
<UL><BR />
 	<LI>call the component's superclass's init function</LI><BR />
 	<LI>initialise the router mechanism</LI><BR />
 	<LI>create a device model and set it on the component</LI><BR />
</UL><BR />
Nothing surprising there, and also nothing related specifically to the fact that this is a task UI app.<BR />
<BR />
Next:<BR />
<UL><BR />
 	<LI>I decided to create an app-wide helper model which is a common pattern in UI5 apps; so far I'm only storing one particular property in it (in the next bit), but hey ho</LI><BR />
</UL><BR />
Then, it's time to go to town on the task specific stuff:<BR />
<UL><BR />
 	<LI>getComponentData is the standard way to access data associated with a component when it was instantiated. So here we're retrieving the oCompData passed via the componentData property&nbsp;in the call to createComponent that we saw earlier</LI><BR />
 	<LI>from there we can grab the taskModel and get the data</LI><BR />
 	<LI>within that data there's the InstanceID property, which, in the example above, has a value of "0cdb90a1-fdc5-11e7-bb2a-00163e504470" and which we store in a local variable taskId</LI><BR />
</UL><BR />
What do we do with the ID of this instance? Well, invoke the services of the Workflow API, of course!<BR />
<BR />
What are we invoking, specifically? Let's have a look. First, substituting the instance ID value for the taskId variable, the relative URL in the JSON model instantiation is:<BR />
<PRE><CODE>/bpmworkflowruntime/rest<BR />
  /v1/task-instances/0cdb90a1-fdc5-11e7-bb2a-00163e504470<BR />
  /context</CODE></PRE><BR />
We already can guess that the "bpmworkflowruntime" is a reference to a route pointing to the Workflow Runtime destination in our SCP Connectivity Service, as we discussed in a previous post <A href="https://blogs.sap.com/2018/01/14/discovering-scp-workflow-instance-initiation/" target="_blank" rel="noopener noreferrer">Discovering SCP Workflow - Instance Initiation</A>:<BR />
<PRE class="language-javascript"><CODE>{<BR />
  "path": "/bpmworkflowruntime",<BR />
  "target": {<BR />
    "type": "destination",<BR />
    "name": "bpmworkflowruntime",<BR />
    "entryPath": "/workflow-service"<BR />
  },<BR />
  "description": "Workflow Service Runtime" <BR />
}</CODE></PRE><BR />
This destination represents the Workflow API, so let's have a look at what we're requesting here:<BR />
<UL><BR />
 	<LI>the specification of a URL when creating a new instance of a JSON model causes a GET request to be made to that URL</LI><BR />
 	<LI>Looking at the <A href="https://api.sap.com/shell/discover/contentpackage/SAPCPWorkflowAPIs/api/SAP_CP_Workflow" target="_blank" rel="noopener noreferrer">Workflow API documentation</A>, we see that a request to an endpoint like this:<BR />
<PRE><CODE>/v1/task-instances/&lt;instance ID&gt;/context</CODE></PRE><BR />
retrieves the context of a user task. Exactly what we're after!</LI><BR />
</UL><BR />
At this point we have all the context data in our domain model ready to bind to the controls in our task UI's view (which we'll look at next time).<BR />
<BR />
<EM>Note: If you're wondering why we're not using the "improved" reference "workflowservice" that we considered in <A href="https://blogs.sap.com/2018/01/14/discovering-scp-workflow-instance-initiation/" target="_blank" rel="noopener noreferrer">Discovering SCP Workflow - Instance Initiation</A>, you can find out the reason in the next post.</EM><BR />
<H3 id="toc-hId-248747237">Access to the inbox API</H3><BR />
We're almost done. But there's something that follows the creation of our context model that we need to examine, and that is the access to the inbox API.<BR />
<BR />
The thing is, the wonderful handoff from the host My Inbox app to the recipient task UI app happens only when actually running in the My Inbox context. When you're developing your task UI app and want to test the UI out, you don't have that luxury.<BR />
<BR />
This isn't ideal - the time it takes to save, deploy to SCP and re-test in the context of the Portal service based Fiori Launchpad, to find that I still had some UI tweaking to do, was too much. I wanted at least to be able to test the UI part (the part surrounded by the red box in the screenshot earlier) from the comfort of the testing harness available with the SAP Web IDE.<BR />
<H4 id="toc-hId-181316451">For real</H4><BR />
So in the second half of the component's init function, there's a condition that checks to see if the inboxAPI property is available within the startupParameters retrieved from the component data.<BR />
<BR />
If it is, we're going to assume that we're running for real inside the context of My Inbox, and everything is normal:<BR />
<UL><BR />
 	<LI>we grab the task description via the inbox API's getDescription function and save it in the app model we created just before (this is bound to a control in the main UI - we'll see that in the next post)</LI><BR />
 	<LI>we add an action button - in particular a "Continue" with the type "Accept", which, if pressed, calls some standard code that you've probably seen in the other posts mentioned earlier to complete the task by patching the task instance data via the Workflow API (I haven't yet bothered to modify this part from the sample apps in those posts)</LI><BR />
</UL><BR />
If you're wondering why I set the type of the button to "Accept", it's because I peeked into the inbox API documentation for the addAction function, i.e. I looked at the source code, which of course as we can now guess is in the controller for the S3 view in My Inbox:<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2018/01/Screenshot-2018-01-21-at-18.38.50.png" /><BR />
<BR />
Check out lines 2558 onwards - it's there you'll see how the type, action and label properties are used. Basically here it results in the "Continue" button being marked appropriately - in this case, highlighted in green as you saw in earlier screenshots. It relates directly to the <A href="https://sapui5.hana.ondemand.com/#/api/sap.m.ButtonType" target="_blank" rel="nofollow noopener noreferrer">Button Type enumeration</A> in UI5, values in which are used for the type property of the classic Button control in the sap.m library.<BR />
<H4 id="toc-hId--15197054">Testing only</H4><BR />
When you're testing a task UI app directly, you're not, by definition, within the context of the My Inbox app and therefore don't have access to the inbox API. Hence the condition - if we don't have access to it, we don't try to set the buttons on the host app. Simple.<BR />
<BR />
But there's more. Testing directly also means there's no selected workflow instance, or more accurately task instance, to work with. What's a poor developer to do? Well, one thing you can do is fake the context, by providing the task instance ID in the URL of your test harness. Let's see that in action, taking a slight detour as a way of revision on the Workflow API and Postman. You may want have to hand a post from earlier on in this series for this: "<A href="https://blogs.sap.com/2018/01/16/discovering-scp-workflow-using-postman/" target="_blank" rel="noopener noreferrer">Discovering SCP Workflow - Using Postman</A>".<BR />
<BR />
I'm in the SAP Web IDE, and want to test my task UI. I actually have a couple of workflow instances running (the ones you can see the tasks for in the My Inbox screenshots). Let's pick the first one, relating to the checkin for Subluminal.<BR />
<BR />
Let's use Postman to see the workflow instances:<BR />
<BR />
Request:<BR />
<PRE><CODE>GET&nbsp;<SPAN class="resolvedVariable">{{workflowservice}}</SPAN>/v1/workflow-instances<BR />
</CODE></PRE><BR />
Response:<BR />
<PRE class="language-javascript"><CODE>[<BR />
    {<BR />
        "id": "0cb89f49-fdc5-11e7-bb2a-00163e504470",<BR />
        "definitionId": "untappdrecommendation",<BR />
        "definitionVersion": "22",<BR />
        "subject": "Untappd Recommendation",<BR />
        "status": "RUNNING",<BR />
        "businessKey": "",<BR />
        "startedAt": "2018-01-20T09:34:02.193Z",<BR />
        "startedBy": "P481810",<BR />
        "completedAt": null<BR />
    },<BR />
    {<BR />
        "id": "08c963ad-fdc5-11e7-bb2a-00163e504470",<BR />
        "definitionId": "untappdrecommendation",<BR />
        "definitionVersion": "22",<BR />
        "subject": "Untappd Recommendation",<BR />
        "status": "RUNNING",<BR />
        "businessKey": "",<BR />
        "startedAt": "2018-01-20T09:33:55.590Z",<BR />
        "startedBy": "P481810",<BR />
        "completedAt": null<BR />
    }<BR />
]</CODE></PRE><BR />
There's some JavaScript in the Test panel for this request that takes the value of the "id" property of the first instance returned, saving it to the environment variable "instanceId":<BR />
<PRE class="language-javascript"><CODE>var data = JSON.parse(responseBody);<BR />
postman.setEnvironmentVariable("instanceId", data[0].id);</CODE></PRE><BR />
In this case, the value 0cb89f49-fdc5-11e7-bb2a-00163e504470 ends up in there.<BR />
<BR />
So we can now check the execution log for that first instance, all the while assuming (hoping) that it's the one related to the Subliminal checkin (if it's not, then it's the other one, no big deal):<BR />
<BR />
Request:<BR />
<PRE><CODE>GET&nbsp;<SPAN class="resolvedVariable">{{workflowservice}}</SPAN>/v1/workflow-instances/<SPAN class="resolvedVariable">{{instanceId}}</SPAN>/execution-logs</CODE></PRE><BR />
Response:<BR />
<PRE class="language-javascript"><CODE>[<BR />
    {<BR />
        "id": "799",<BR />
        "type": "WORKFLOW_STARTED",<BR />
        "timestamp": "2018-01-20T09:34:02.292Z",<BR />
        "referenceInstanceId": "0cb89f49-fdc5-11e7-bb2a-00163e504470",<BR />
        "userId": "P481810"<BR />
    },<BR />
    {<BR />
        "id": "800",<BR />
        "type": "USERTASK_CREATED",<BR />
        "timestamp": "2018-01-20T09:34:02.447Z",<BR />
        "referenceInstanceId": "d6a6ef04-4519-4c89-b8d8-8306d0a37128",<BR />
        "activityId": "usertask1",<BR />
        "subject": "Recommended beers similar to Subluminal",<BR />
        "recipientUsers": [<BR />
            "P481810"<BR />
        ],<BR />
        "recipientGroups": [],<BR />
        "initiatorId": "P481810",<BR />
        "taskId": "0cdb90a1-fdc5-11e7-bb2a-00163e504470"<BR />
    }<BR />
]</CODE></PRE><BR />
From the value in the "subject" property, we can indeed see that it is the one we're looking for.<BR />
<BR />
But wait, we have something else in this response that's going to be rather valuable to us too. In the "USERTASK_CREATED" execution log item we can see the value of the task ID of the user task instance - it's 0cdb90a1-fdc5-11e7-bb2a-00163e504470 (don't confuse this with the workflow instance ID which starts 0cb8...). Let's double check, with a further call to another Workflow API endpoint to view the task instances for a given workflow instance:<BR />
<PRE><CODE>GET&nbsp;<SPAN class="resolvedVariable">{{workflowservice}}</SPAN>/v1/task-instances?workflowInstanceId=<SPAN class="resolvedVariable">{{instanceId}}</SPAN></CODE></PRE><BR />
<PRE class="language-javascript"><CODE>[<BR />
    {<BR />
        "activityId": "usertask1",<BR />
        "claimedAt": null,<BR />
        "completedAt": null,<BR />
        "createdAt": "2018-01-20T09:34:02.420Z",<BR />
        "description": "You recently checked in Subluminal by Buxton Brewery. Here are some beer recommendations for your wishlist, based on this checkin.",<BR />
        "id": "0cdb90a1-fdc5-11e7-bb2a-00163e504470",<BR />
        "processor": null,<BR />
        "recipientUsers": [<BR />
            "P481810"<BR />
        ],<BR />
        "recipientGroups": [],<BR />
        "status": "READY",<BR />
        "subject": "Recommended beers similar to Subluminal",<BR />
        "workflowDefinitionId": "untappdrecommendation",<BR />
        "workflowInstanceId": "0cb89f49-fdc5-11e7-bb2a-00163e504470",<BR />
        "priority": "MEDIUM",<BR />
        "dueDate": null,<BR />
        "createdBy": "P481810"<BR />
    }<BR />
]</CODE></PRE><BR />
Yup, that's it, for sure. Note, as we're here, the description property - that's the one we pick up the value for ("You recently checked in Subliminal ...") in the init function earlier with the call to startupParameters.inboxAPI.getDescription.<BR />
<BR />
So we can be sure that the instance ID that we would normally receive through the handoff from the My Inbox app to the task UI component is&nbsp;0cdb90a1-fdc5-11e7-bb2a-00163e504470, and that's the value (for "taskId") that we need to complete the Workflow API endpoint URL earlier when instantiating the context model:<BR />
<PRE class="language-javascript"><CODE>var contextModel = new sap.ui.model.json.JSONModel("/bpmworkflowruntime/rest/v1/task-instances/" + taskId + "/context");</CODE></PRE><BR />
How do we put this ID in the URL of our test harness? By extending the runtime container for our task UI component (i.e. the index.html file) and extending the SAP Web IDE run configuration to add a URL parameter.<BR />
<BR />
First, the runtime container extension. In a normal, simple index.html, you'd see the placing of a simple Component Container control inside a Shell control. All we have to do is add some component data values for the settings property in the Component Container instantiation thus:<BR />
<PRE class="language-javascript"><CODE>sap.ui.getCore().attachInit(function() {<BR />
	new sap.m.Shell({<BR />
		app: new sap.ui.core.ComponentContainer({<BR />
			height : "100%",<BR />
			name : "qmacro.UntappdRecommendationApproval",<BR />
			settings : {<BR />
				componentData : {<BR />
					startupParameters : {<BR />
						taskModel : new sap.ui.model.json.JSONModel({<BR />
							InstanceID : jQuery.sap.getUriParameters().get("InstanceID")<BR />
						})<BR />
					}<BR />
				}<BR />
			}<BR />
		})<BR />
	}).placeAt("content");<BR />
});</CODE></PRE><BR />
Here, we're creating a simple JSON model and assigning it to the taskModel startup parameter. In this JSON model we have a single property, with the value being whatever is specified in the URL query parameter "InstanceID".<BR />
<BR />
Now the URL parameter - how do we specify the instance ID? By specifying a URL Parameter in the appropriate run configuration:<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2018/01/Screenshot-2018-01-21-at-19.08.24.png" /><BR />
<BR />
When we run the task UI app in isolation, testing from within the Web IDE, we get what we're looking for - the task UI, without the My Inbox context. Definitely useful enough for building and testing the actual UI:<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2018/01/Screenshot-2018-01-21-at-19.23.33.png" /><BR />
<BR />
So we've reached a good point to end this post upon. We now understand what happens when the task UI component starts up, and where the data and context comes from. We also know how to build and test a UI without having to include a whole SCP deployment on every iteration.<BR />
<BR />
In the next post we'll look at the actual task UI in a little more detail.<BR />
<BR />
Next post in this series: <A href="https://blogs.sap.com/2018/01/24/discovering-scp-workflow-recommendation-ui/" target="_blank" rel="noopener noreferrer">Discovering SCP Workflow - Recommendation UI</A>.
---
Discovering SCP Workflow - User Tasks
technology-blog-members
2018-01-20
https://community.sap.com/t5/technology-blogs-by-members/discovering-scp-workflow-user-tasks/ba-p/13359863
2018-01-20-discovering-scp-workflow-user-tasks
Previous post in this series: <A href="https://blogs.sap.com/2018/01/18/discovering-scp-workflow-workflow-definition/" target="_blank" rel="noopener noreferrer">Discovering SCP Workflow - Workflow Definition</A>.<BR />
<BR />
This post is part of a series, a guide to which can be found here:&nbsp;<A href="https://qmacro.org/blog/posts/2018/01/16/discovering-scp-workflow/" target="_blank" rel="nofollow noopener noreferrer">Discovering SCP Workflow</A>.<BR />
<BR />
We've now seen the workflow definition from 10,000 metres. It's time to zoom in on the first of the three tasks therein - the user task "Present Recommendations":<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2018/01/Screenshot-2018-01-18-at-09.27.24.png" height="155" width="234" /><BR />
<BR />
In my mind, user task types are special, in that they involve a human, and as such need extra moving parts to work.<BR />
<BR />
As you probably know, when you enable the Workflow service in your SCP cockpit, various things are provisioned, including the My Inbox app in an SCP Portal service based Fiori Launchpad (see <A href="https://blogs.sap.com/2018/01/08/discovering-scp-workflow-the-monitor/" target="_blank" rel="noopener noreferrer">Discovering SCP Workflow - The Monitor</A>). It's in this global workflow worklist app that user tasks appear, and remain until the user takes action (such as to accept, reject, continue or otherwise make known their decision or action&nbsp;related to that specific step in the lifetime of the workflow instance). They can also be suspended or terminated by an administrator.<BR />
<H3 id="toc-hId-1034086239">Our user task</H3><BR />
You've already seen a glimpse of what the user task is, and should enable, in <A href="https://blogs.sap.com/2018/01/17/discovering-scp-workflow-service-proxy/" target="_blank" rel="noopener noreferrer">Discovering SCP Workflow - Service Proxy</A>:<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2018/01/Screenshot-2018-01-16-at-10.42.17.png" /><BR />
<BR />
We see that the My Inbox app is presenting 2 to-be-completed workflow items - user tasks - for me to process. It just so happens that both user tasks are the same (to select recommended beers), but My Inbox collects together all user tasks from all types of different workflow definitions.<BR />
<H3 id="toc-hId-837572734">Configuring the task</H3><BR />
Workflow definitions are created and maintained using the Workflow Editor feature in the Web IDE:<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2018/01/Screenshot-2018-01-18-at-09.44.23.png" height="106" width="349" /><BR />
<BR />
This provides us with the facility to model entire workflow definitions, including describing the flow with a graphical editor and specifying task details too. Here's a screenshot of our user task definition details:<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2018/01/Screenshot-2018-01-18-at-09.46.58.png" /><BR />
<BR />
We'll cover some of these now and some in the next post, but I don't want to dwell too much on the mechanics of the User Task Properties themselves - there's already a post by <SPAN class="mention-scrubbed">seshadri.sreenivasr</SPAN>&nbsp;"<A href="https://blogs.sap.com/2018/01/08/how-configure-sap-cp-workflow-user-tasks/" target="_blank" rel="noopener noreferrer">How Configure SAP CP Workflow User Tasks</A>" which covers this in great detail.<BR />
<BR />
There's <A href="https://help.sap.com/viewer/f85276c5069a429fa37d1cd352785c25/Cloud/en-US/5e058cf1333b4e18bfa6431a52e991d3.html" target="_blank" rel="noopener noreferrer">documentation for configuring user tasks</A> available, but in its present early form is a little light on detail. It does make me smile, because it reminds me of a comedy flowchart which looks something like this:<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2018/01/Screenshot-2018-01-18-at-09.51.53.png" /><BR />
<BR />
The documentation goes something along these lines:<BR />
<OL><BR />
 	<LI>enter this value into this property</LI><BR />
 	<LI>press "OK"</LI><BR />
 	<LI>select some other value for another property</LI><BR />
 	<LI>specify the UI5 app you've built for presenting and handling the user task</LI><BR />
 	<LI>...</LI><BR />
</OL><BR />
Wait, what?<BR />
<H3 id="toc-hId-641059229">The My Inbox context</H3><BR />
What UI5 app? How do I build it? What are the requirements? Well, we'll cover some of this in this post, and complete the picture in the next post. To set the scene, though - let's look at the context in which the UI5 app appears - the My Inbox app.<BR />
<BR />
There's a screenshot of the My Inbox app in action earlier. But even before then, there's some SCP Workflow service goodness going on, related to the dynamic tile on the Launchpad home page:<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2018/01/Screenshot-2018-01-19-at-14.25.38.png" /><BR />
<BR />
The value "2" is coming from a call to the Workflow API. Let's dig in and use the Network panel of Chrome's developer tools to see:<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2018/01/Screenshot-2018-01-20-at-09.54.00.png" /><BR />
<BR />
Each of these three requests are the same, repeated every 15 seconds. There are other requests too but I've filtered on the string "bpmworkflow" here. (I can imagine this polling by the unified shell infrastructure being eventually replaced by web sockets. But that's a story for another time.)<BR />
<BR />
That Request URL shown in the "Headers" section in the screenshot looks pretty complex, let's break it down, decode the URL-encoded bits, and add some nice whitespace:<BR />
<PRE><CODE><A href="https://flpportal-p481810trial.dispatcher.hanatrial.ondemand.com" target="test_blank" rel="nofollow noopener noreferrer">https://flpportal-p481810trial.dispatcher.hanatrial.ondemand.com</A><BR />
  /sap/fiori/bpmmyinbox/bpmworkflowruntime/odata/tcm<BR />
  /TaskCollection/$count/<BR />
  ?$filter=Status eq 'READY' or <BR />
           Status eq 'RESERVED' or <BR />
           Status eq 'IN_PROGRESS' or <BR />
           Status eq 'EXECUTED'<BR />
</CODE></PRE><BR />
That's better! Much more friendly. What can we discern from this URL?<BR />
<UL><BR />
 	<LI>it's a call to my instance of the portal service, of course (flpportal-p481810trial)</LI><BR />
 	<LI>there's a reference to a UI5 app (/sap/fiori/bpmmyinbox)</LI><BR />
 	<LI>and within that, a reference to a destination (/bpmworkflowruntime)</LI><BR />
 	<LI>following the destination reference there's some supplemental path info that suggests an OData service at that destination (/odata/tcm)</LI><BR />
 	<LI>and specifically within that OData service, there's a task collection entity (/TaskCollection)</LI><BR />
 	<LI>we're looking for how many entities there are (/$count)</LI><BR />
 	<LI>specifically for entities with certain statuses (?$filter=...)</LI><BR />
</UL><BR />
Gosh!<BR />
<BR />
Indeed, looking at the neo-app.json file for the bpmmyinbox app, which, with a bit of luck and a following wind, we can retrieve thus:<BR />
<PRE><CODE><A href="https://flpportal-p481810trial.dispatcher.hanatrial.ondemand.com" target="test_blank" rel="nofollow noopener noreferrer">https://flpportal-p481810trial.dispatcher.hanatrial.ondemand.com</A><BR />
  /sap/fiori/bpmmyinbox<BR />
  /neo-app.json</CODE></PRE><BR />
we see the bpmworkflowruntime destination:<BR />
<PRE class="language-javascript"><CODE>{<BR />
  path: "/bpmworkflowruntime",<BR />
  target: {<BR />
    type: "destination",<BR />
    name: "bpmworkflowruntime",<BR />
    entryPath: "/workflow-service",<BR />
  },<BR />
  description: "TCM Provider",<BR />
}</CODE></PRE><BR />
TCM stands for Task Consumption Model, by the way.<BR />
<BR />
So after picking apart the URL earlier, looking at the definition of the "bpmworkflowruntime" destination to see that the URL is our old friend:<BR />
<PRE><CODE><A href="https://bpmworkflowruntimewfs-p481810trial.hanatrial.ondemand.com" target="test_blank" rel="nofollow noopener noreferrer">https://bpmworkflowruntimewfs-p481810trial.hanatrial.ondemand.com</A></CODE></PRE><BR />
and being mindful of the value for the "entryPath" property, we can reconstruct the "real" unabstracted URL which we can consider as part of the wider Workflow API:<BR />
<PRE><CODE><A href="https://bpmworkflowruntimewfs-p481810trial.hanatrial.ondemand.com" target="test_blank" rel="nofollow noopener noreferrer">https://bpmworkflowruntimewfs-p481810trial.hanatrial.ondemand.com</A><BR />
 /workflow-service/odata/tcm/TaskCollection/$count/<BR />
 ?$filter=Status eq 'READY' or <BR />
          Status eq 'RESERVED' or <BR />
          Status eq 'IN_PROGRESS' or <BR />
          Status eq 'EXECUTED'<BR />
</CODE></PRE><BR />
which, in my case, gives us, somewhat anticlimactically:<BR />
<PRE><CODE>2</CODE></PRE><BR />
This of course is the value that's shown in the dynamic tile earlier.<BR />
<BR />
Anyway, at this point I find myself asking myself, as <A href="https://open.spotify.com/track/38Ngied9rBORlAbLYNCl4k" target="_blank" rel="nofollow noopener noreferrer">David Byrne did once</A>, "well, how did I get here?"<BR />
<H3 id="toc-hId-444545724">UI5 app as task UI component</H3><BR />
The answer to that question is simply that there's a lot to learn by looking at what network calls are made. So let's continue.<BR />
<BR />
When we think about it, it's obvious that the My Inbox app and everything to do with it is going to make use of the Workflow API. Even before it's loaded, in the case of the dynamic value on the tile as we've just seen.<BR />
<BR />
But what happens next? Well, let's click on the My Inbox tile and observe the flow of traffic to the Workflow API using the same filter in the Network panel. This is what we see, requests that follow on from the repeated polling we saw already:<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2018/01/Screenshot-2018-01-20-at-11.02.45.png" /><BR />
<BR />
(Even though I value the performance improvements of batching requests up with OData's $batch, it does make me grimace somewhat when I'm trying to see what's going on behind the curtain. Yes, I can use setUseBatch to hack the model so things aren't batched up, but that's not the point. Perhaps setting debug mode on in UI5 should also turn off batch mode for OData models. What do you think? Let me know in the comments below).<BR />
<BR />
At this stage the UI looks like the screenshot earlier - the My Inbox app showing two entries in the master list, with the first one selected and showing the detail (for beer recommendations related to <A href="https://untappd.com/user/qmacro/checkin/548688484" target="_blank" rel="nofollow noopener noreferrer">my checkin to Buxton Brewery's Subluminal</A>).<BR />
<BR />
These requests to URLs containing "bpmworkflow" tell us quite a bit. Let's dig in. The first request shown ($metadata) is for the metadata document that describes the tcm OData service that we saw earlier.<BR />
<BR />
To a UI5 programmer, a fetch of an OData services $metadata document is a good indication that an OData model is being instantiated. If we take a look at the initiator stack, we can see that the signs are strong:<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2018/01/Screenshot-2018-01-20-at-11.04.55.png" /><BR />
<BR />
Inside the Connection Manager module we can see the function flow:<BR />
<BR />
initModels -&gt; each -&gt; (anonymous)<BR />
<BR />
and at this point we have it confirmed:<BR />
<PRE class="language-javascript"><CODE>var oModel = bUseV2Model<BR />
  ? new sap.ui.model.odata.v2.ODataModel(sUrl, oConfig)<BR />
  : new sap.ui.model.odata.ODataModel(sUrl, oConfig);</CODE></PRE><BR />
(That's on line 219 of ConnectionManager-dbg.js that is loaded with UI5 1.50.7, for those of you who are interested.)<BR />
<BR />
And the absolute URL for the OData service's metadata document is, as we've established:<BR />
<PRE><CODE><A href="https://flpportal-p481810trial.dispatcher.hanatrial.ondemand.com" target="test_blank" rel="nofollow noopener noreferrer">https://flpportal-p481810trial.dispatcher.hanatrial.ondemand.com</A><BR />
  /sap/fiori/bpmmyinbox/bpmworkflowruntime<BR />
  /odata/tcm/$metadata</CODE></PRE><BR />
So it's likely that we're going to see some OData query operations on this service to retrieve the tasks relevant for me in My Inbox. Sure enough, following the metadata document retrieval, in one of the $batch requests to this OData service is exactly what we're looking for. It contains a single call, an HTTP GET on the TaskCollection entityset, representing a query. Here it is (at least, the most significant part) in all its URL-decoded glory:<BR />
<PRE><CODE>TaskCollection<BR />
  ?$skip=0<BR />
  &amp;$top=1000<BR />
  &amp;$orderby=CreatedOn desc<BR />
  &amp;$filter=((Status eq 'READY' or <BR />
             Status eq 'RESERVED' or <BR />
             Status eq 'IN_PROGRESS' or <BR />
             Status eq 'EXECUTED'))<BR />
  &amp;$select=SAP__Origin,<BR />
           InstanceID,<BR />
           TaskDefinitionID,<BR />
           TaskDefinitionName,<BR />
           TaskTitle,<BR />
           [...]<BR />
           SupportsAttachments<BR />
  &amp;$inlinecount=allpages</CODE></PRE><BR />
That OData query operation returns a collection of two entities. Yes, you guessed it, those two entities are the two tasks shown in the master list in My Inbox.<BR />
<BR />
There are further $batch requests that contain more OData operations that are used to bring back data to populate the details of the automatically selected first task, but we'll ignore those for now. Instead, let's look at the detail - specifically the &lt;content/&gt; - of the first of those two TaskCollection entities returned in response to the query we've just examined. Here it is, representing the task "Recommended beers similar to Subluminal":<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2018/01/Screenshot-2018-01-20-at-11.28.02.png" /><BR />
<BR />
Lots of goodness there.<BR />
<BR />
There's one particular property that catches my eye. And it's what I'll leave you with to take us through to the next post. First though, a question.<BR />
<BR />
<EM>How does My Inbox know how to represent a particular user task?</EM><BR />
<BR />
Going back to the high level steps described earlier in the official documentation, we have step 4, which says: "specify the UI5 app you've built for presenting and handling the user task". Well, it represents a user task with this very UI5 app you've specified for that particular user task in that particular workflow definition.<BR />
<BR />
And look - that property which caught my eye is the GUI_Link one, which has this value:<BR />
<PRE><CODE>sapui5://html5apps<BR />
  /untappdrecommendationapproval<BR />
  /qmacro.UntappdRecommendationApproval</CODE></PRE><BR />
That's a funky kind of internal scheme ("sapui5://") going on there! But it makes sense. When the workflow instance was instantiated, and the user task step initiated, the configuration specified here:<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2018/01/Screenshot-2018-01-20-at-11.36.30.png" /><BR />
<BR />
was bound into the instance, so that when it comes to the crunch, and My Inbox needs to display that particular user task, it knows which UI5 app to load. Magic!<BR />
<BR />
Let's confirm that by changing the filter in the Network panel and seeing how the requests continue as the task detail is loaded into the UI.&nbsp;And yes, we see what we're hoping to see - a request for the heart of the UI5 app we've specified for this user task, the Component of the HTML5 app "untappdrecommendationapproval":<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2018/01/Screenshot-2018-01-20-at-11.41.19.png" /><BR />
<BR />
What's more, in the initiator stack, we get a clear insight into what goes on and how the decision is made in the controller belonging to the S3* (detail) view as to which Component (ie which UI5 app) to load:<BR />
<BR />
fnGetDetailsForSelectedTask -&gt; fnParseComponentParameters -&gt; fnRenderComponent<BR />
<BR />
and you can bet a decent craft beer that it's in there that the URI we saw earlier:<BR />
<PRE><CODE>sapui5://html5apps<BR />
  /untappdrecommendationapproval<BR />
  /qmacro.UntappdRecommendationApproval</CODE></PRE><BR />
is parsed and used.<BR />
<BR />
<EM> * S3 is traditionally the detail view, and specificially the detail view in a scaffolding-based app. Did anybody notice that My Inbox was a scaffolding-based app? Let me know in the comments what you spotted in this post that suggested it was.</EM><BR />
<BR />
OK, so where are we?<BR />
<BR />
We have a couple of workflow instances, and we've seen how the My Inbox app retrieves information for them, and when it has to display the details for one of them, we know how it works out how to display those details.<BR />
<BR />
In the next post, we'll keep on digging, and look at understanding what happens when a task UI component like this one (the Component of qmacro.UntappdRecommendationApproval) is instantiated. How does it know what to do, where to get the information from, and so on?<BR />
<BR />
Next post in this series: <A href="https://blogs.sap.com/2018/01/22/discovering-scp-workflow-component-startup/" target="_blank" rel="noopener noreferrer">Discovering SCP Workflow - Component Startup</A>.
---
Discovering SCP Workflow - Workflow Definition
technology-blog-members
2018-01-18
https://community.sap.com/t5/technology-blogs-by-members/discovering-scp-workflow-workflow-definition/ba-p/13357746
2018-01-18-discovering-scp-workflow-workflow-definition
Previous post in this series: <A href="https://blogs.sap.com/2018/01/17/discovering-scp-workflow-service-proxy/" target="_blank" rel="noopener noreferrer">Discovering SCP Workflow - Service Proxy</A>.<BR />
<BR />
This post is part of a series, a guide to which can be found here:&nbsp;<A href="https://qmacro.org/blog/posts/2018/01/16/discovering-scp-workflow/" target="_blank" rel="nofollow noopener noreferrer">Discovering SCP Workflow</A>.<BR />
<BR />
Now that we've covered how to kickstart a workflow instance, It's time to look at the overall picture of what we're building. It's a relatively simple process backed by a three-step workflow definition, which contains one each of the three different task types (user, script and service).<BR />
<BR />
I can't imagine this process being particularly useful in the enterprise, but then again, I created it for fun, to help my learning journey, and to be about stuff I'm interested in - stats and info about craft beer. What's not to like?<BR />
<H3 id="toc-hId-1034025637">General idea</H3><BR />
Like many of my friends and colleagues, I'm a fan of craft beer as well as someone who likes building with data and putting new technologies through their paces.&nbsp;<A href="https://untappd.com" target="_blank" rel="nofollow noopener noreferrer">Untappd</A>&nbsp;is a place where like-minded folks record (via 'checkins') what beers they're drinking, rating and describing them, sending toasts and comments to each other, and generally having a pleasant time enjoying socialising with good brews.<BR />
<BR />
Crucially there's an <A href="https://untappd.com/api/docs" target="_blank" rel="nofollow noopener noreferrer">API</A> that offers access to the rich seam of data that is being gathered, on checkins, beer ratings, breweries, venues, users and so on.<BR />
<BR />
I'm always on the lookout for new beers, and to improve my stats, because, well, badges!<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2018/01/Screenshot-2018-01-17-at-06.48.23.png" /><BR />
<BR />
So the general idea is to monitor what beers I check in, and then provide me with a selection of similar beers for me to choose from; those I choose end up on a wishlist of sorts, for me to use as a reference on future purchases.<BR />
<H3 id="toc-hId-837512132">The landscape</H3><BR />
This process is to run exlusively in the cloud. So the landscape consists solely of platforms that are cloud based. The Untappd API itself of course is "up there", and if you've read the previous post in this series, <A href="https://blogs.sap.com/2018/01/17/discovering-scp-workflow-service-proxy/" target="_blank" rel="noopener noreferrer">Discovering SCP Workflow - Service Proxy</A>, you'll know that the solution spans the Google Cloud Platform (GCP) and the SAP Cloud Platform (SCP).<BR />
<BR />
Here's a high level schematic showing the parts of the solution.<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2018/01/Screenshot-2018-01-17-at-07.17.58.png" /><BR />
<H4 id="toc-hId-770081346">On GCP</H4><BR />
I've long been a fan of what's now known as G Suite (Google docs, sheets, and so on), for a number of reasons:<BR />
<UL><BR />
 	<LI>the features are exactly what I need, not bloated, and don't get in the way of producing content</LI><BR />
 	<LI>my content is secure, and the ability to create, edit and organise it is available everywhere</LI><BR />
 	<LI>it is <STRONG>of</STRONG> the web, rather than just <STRONG>on</STRONG> the web (more on that another time, perhaps)</LI><BR />
</UL><BR />
and last but not least, it has a fantastic JavaScript-based scripting environment, with access to the G-Suite data and functions, and access to the myriad GCP services too. I've used, and <A href="http://pipetree.com/qmacro/blog/tag/appsscript/" target="_blank" rel="nofollow noopener noreferrer">written about</A>&nbsp;Apps Script a number of times.<BR />
<BR />
Of course, with the SAP and Google partnership moving ever closer, it's an ideal complementary platform to SCP.<BR />
<BR />
So on GCP, I have a script that:<BR />
<UL><BR />
 	<LI>checks the RSS feed of my checkins that Untappd makes available to me</LI><BR />
 	<LI>stores new checkins (in a spreadsheet)</LI><BR />
 	<LI>processes new checkins by looking up the checkin detail, finding the beer ID, and then retrieving the beer info for that beer, which includes a "similar beers" section</LI><BR />
</UL><BR />
This is done on a regular basis with time-based triggers (think <A href="https://en.wikipedia.org/wiki/Cron" target="_blank" rel="nofollow noopener noreferrer">cron</A> for your scripts in the cloud), using various core services such as the script service <A href="https://developers.google.com/apps-script/reference/url-fetch/url-fetch-app" target="_blank" rel="nofollow noopener noreferrer">UrlFetchApp</A> and the G Suite service <A href="https://developers.google.com/apps-script/reference/spreadsheet/spreadsheet-app" target="_blank" rel="nofollow noopener noreferrer">SpreadsheetApp</A>.<BR />
<BR />
This is what the spreadsheet looks like:<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2018/01/Screenshot-2018-01-17-at-07.27.35.png" /><BR />
<BR />
The empty cell in the last row shows that while the new checkin has been retrieved via the "Poll and store" step, it hasn't yet been processed by the "Process new checkins" step. (This is somewhat artificial, though - in real life the second step happens directly after the first - I just edited the sheet to highlight the difference in steps.)<BR />
<BR />
In the <A href="https://blogs.sap.com/2018/01/17/discovering-scp-workflow-service-proxy/" target="_blank" rel="noopener noreferrer">previous post</A> we looked at what then happens - the script initiates a new workflow instance on the SCP Workflow service via the service proxy cloud function.<BR />
<H4 id="toc-hId-573567841">On SCP</H4><BR />
The whole idea of this exercise was to dig deeper into the SCP Workflow service, so obviously that's what we're putting into play here. I've <A href="https://help.sap.com/viewer/f85276c5069a429fa37d1cd352785c25/Cloud/en-US/2d65f7db785d4867a49fe8eec3b040be.html" target="_blank" rel="noopener noreferrer">modelled a workflow</A> using the <A href="http://developer.sap.com/webide" target="_blank" rel="noopener noreferrer">SAP Web IDE</A>&nbsp;and it incorporates the three steps in the process above:<BR />
<UL><BR />
 	<LI>Present similar beers - this is a task that involves a human (me) to be presented with information and to make a decision, for the workflow instance to move on to the next stage. The appropriate task type in the workflow definition for this is a <A href="https://help.sap.com/viewer/f85276c5069a429fa37d1cd352785c25/Cloud/en-US/5e058cf1333b4e18bfa6431a52e991d3.html" target="_blank" rel="noopener noreferrer">User Task</A>.</LI><BR />
 	<LI>Marshal selections - selections made from the list of similar beers are stored back in the workflow instance's context. At this stage we want to organise the right data, in the right shape, to be sent to a service which will store the selections on a list. We can perform this in JavaScript inside of a <A href="https://help.sap.com/viewer/f85276c5069a429fa37d1cd352785c25/Cloud/en-US/ca9a4381628a40908ffe1f74bde9f3ce.html" target="_blank" rel="noopener noreferrer">Script Task</A> which has full access to the instance's context.</LI><BR />
 	<LI>Add to wishlist - the marshalled data is sent to a remote service which stores the selections in the wishlist. This is done in a <A href="https://help.sap.com/viewer/f85276c5069a429fa37d1cd352785c25/Cloud/en-US/a8a6267f537841fbb22c159ba2af8835.html" target="_blank" rel="noopener noreferrer">Service Task</A>, which connects to the remote service via SCP's Connectivity Service. You and me would probably say "via a destination".</LI><BR />
</UL><BR />
It isn't by accident that the three steps in this process exercise each of the three types of task - I wanted to create something that caused me to use each of them. Of course, future iterations of this solution design might move some of the processing from GCP into SCP, as further steps in the workflow definition. But for now this will do nicely.<BR />
<BR />
Let's take a&nbsp;look at the workflow definition model.<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2018/01/Screenshot-2018-01-17-at-08.35.00.png" /><BR />
<BR />
Each task's type is denoted by the icons in the top left corners - user, script and service respectively.<BR />
<BR />
I must say, I found the editing of the workflow definition in the Web IDE went very well.<BR />
<BR />
In the next few posts in this series, I'll dive deeper into each of these tasks as defined for this solution, including a little bit of how they're defined in the editor. The next post will cover user tasks in general, and start to look at the "Present recommendations" script task in particular.<BR />
<BR />
Next post in this series: <A href="https://blogs.sap.com/2018/01/20/discovering-scp-workflow-user-tasks/" target="_blank" rel="noopener noreferrer">Discovering SCP Workflow - User Tasks</A>.
---
Discovering SCP Workflow - Service Proxy
technology-blog-members
2018-01-17
https://community.sap.com/t5/technology-blogs-by-members/discovering-scp-workflow-service-proxy/ba-p/13356138
2018-01-17-discovering-scp-workflow-service-proxy
Previous post in this series: <A href="https://blogs.sap.com/2018/01/16/discovering-scp-workflow-using-postman/" target="_blank" rel="noopener noreferrer">Discovering SCP Workflow - Using Postman</A>.<BR />
<BR />
This post is part of a series, a guide to which can be found here: <A href="https://qmacro.org/blog/posts/2018/01/16/discovering-scp-workflow/" target="_blank" rel="nofollow noopener noreferrer">Discovering SCP Workflow.</A><BR />
<BR />
In this post, I'll present a small proxy service I wrote to handle the minutiae of initiating a new workflow instance (see <A href="https://blogs.sap.com/2018/01/14/discovering-scp-workflow-instance-initiation/" target="_blank" rel="noopener noreferrer">Discovering SCP Workflow - Instance Initiation</A>).<BR />
<BR />
Why did I write it? Well, lots of reasons. Here are some sensible sounding ones:<BR />
<UL><BR />
 	<LI>In my journey of discovery, it enables me to encapsulate stuff I've covered, to allow me to keep the surface area for initiating new workflow instances to a minimum within the wider context of what I'm doing</LI><BR />
 	<LI>It's a way to hide authentication details, especially when wanting to connect to the Workflow API from outside of the context of the SCP Connectivity Service</LI><BR />
 	<LI>It wraps up the XSRF token process so that I don't have to deal with or even see what's going on</LI><BR />
</UL><BR />
Here are some more fun ones:<BR />
<UL><BR />
 	<LI>It allows me to continue my journey <A href="http://pipetree.com/qmacro/blog/2017/04/30/google-cloud-functions-sheets-apps-script-actions-on-google-win/" target="_blank" rel="nofollow noopener noreferrer">exploring</A> Google Cloud Functions on the Google Cloud Platform (GCP), which I have used already but in a different context: writing handlers for Actions on Google - the framework for the Google Assistant platform which is the underlying layer for Google Home devices and more</LI><BR />
 	<LI>Similarly it lets me explore how I use Node.js libraries, and learn what's out there</LI><BR />
 	<LI>I love the idea of "<A href="https://twitter.com/qmacro/status/952650820788609030" target="_blank" rel="nofollow noopener noreferrer">the second mainframe era</A>" with cloud computing and web terminals (I'm building all this and writing about it purely on Chrome OS with no workstation-local activities), and the combination of GCP and SCP is very attractive</LI><BR />
 	<LI>The proxy lets me explore the possibilities of how to divide up work across different areas of the cloud</LI><BR />
</UL><BR />
This last reason is important to me - there's so much choice across different platforms (SCP, GCP and beyond) for design-time and runtime for solutions that unless you try things out it's hard to make informed decisions.<BR />
<BR />
<EM>(Note: in the following post, some lines - code, URLs, etc - have been split for readability.)</EM><BR />
<H3 id="toc-hId-1033990051">The general requirements</H3><BR />
The idea is that I will want to initiate workflow instances from various processes, and want a simple way of doing that with the minimum of fuss. As far as protection goes, I'm using a simple shared secret, in the form of a string that the caller passes and the receiver verifies before proceeding.<BR />
<BR />
I also want to write and forget, and do it all in the cloud.<BR />
<H3 id="toc-hId-837476546">Google Cloud Functions</H3><BR />
Before proceeding, it's worth spending a minute on what Google Cloud Functions allows me to do. I can write serverless functions (similar to AWS Lambda) and maintain the code in git repositories stored on GCP (similar to how git repositories are available on SCP). I can write a function in JavaScript, within a Node.js context, availing myself of the myriad libraries available for that platform, and I can test it inside a <A href="https://cloud.google.com/functions/docs/emulator" target="_blank" rel="nofollow noopener noreferrer">functions runtime emulator</A>&nbsp;before deploying it to GCP using direct references to the source code master branch in the git repository.<BR />
<BR />
And yes, I edited and tested this whole project it all in the cloud too, using a combination of vim on my <A href="https://cloud.google.com/shell/docs/" target="_blank" rel="nofollow noopener noreferrer">Google Cloud Shell</A> instance, and of course the <A href="http://developer.sap.com/webide" target="_blank" rel="noopener noreferrer">SAP Web IDE</A>. After all, we're surely&nbsp;<A href="https://twitter.com/qmacro/status/952650820788609030" target="_blank" rel="nofollow noopener noreferrer">in the 2nd mainframe era</A>&nbsp;by now!<BR />
<BR />
Anyway, who knows, in the future I may migrate this proxy function to some other platform or service, but for now it will do fine.<BR />
<BR />
The entry point to a Google Cloud Function is an <A href="https://expressjs.com/" target="_blank" rel="nofollow noopener noreferrer">Express</A>-based handler, which like many HTTP server side frameworks, has the concept of a request object and a response object. For what it's worth, this simple pattern also influenced the work on the early <A href="https://blogs.sap.com/2009/09/21/a-new-rest-handler-dispatcher-for-the-icf/" target="_blank" rel="noopener noreferrer">Alternative Dispatcher Layer (ADL)</A> for the ABAP and ICF platform.<BR />
<BR />
The way I write my functions for this environment is to have a relatively simple file, exporting a single 'handler' function, and then farm out heavy lifting to another module. The Node.js require/export concept is what this is based upon. We'll see this at a detailed level shortly.<BR />
<H3 id="toc-hId-640963041">Setting the scene</H3><BR />
I've always wondered whether it's better to show source code before demonstrating it, or demonstrating it first to give the reader some understanding of what the code is trying to achieve. In this case the demo is simple and worth showing first.<BR />
<BR />
First, I'll highlight where I'm using this proxy for real, in a fun experiment involving beer recommendations based on what you're drinking, courtesy of <A href="https://untappd.com/user/qmacro" target="_blank" rel="nofollow noopener noreferrer">Untappd</A>'s API, and presented within the SCP Workflow context:<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2018/01/Screenshot-2018-01-16-at-10.42.17.png" /><BR />
<BR />
I have workflow definition called "untappdrecommendation" which I initiate instances of when another mechanism sees that I've checked in a beer on Untappd.<BR />
<BR />
That mechanism is a Google Apps Script that polls an RSS feed associated with my Untappd checkins and notices when I check in a new beer (I did start by looking at using <A href="https://ifttt.com" target="_blank" rel="nofollow noopener noreferrer">IFTTT</A> for this but my experience with it wasn't great, so I rolled my own). Once it sees a new checkin, it uses the <A href="https://untappd.com/api/docs" target="_blank" rel="nofollow noopener noreferrer">Untappd API</A> to grab relevant information and then calls the Workflow API, via the proxy that is the subject of this post. Here's an excerpt from that Google Apps Script:<BR />
<PRE class="language-javascript"><CODE>var WFS_PROXY = "https://us-central1-ZZZ.cloudfunctions.net/wfs-proxy";<BR />
var WFS_SECRET = "lifetheuniverseandeverything";<BR />
var WORKFLOW_DEFINITION_ID = "untappdrecommendation";<BR />
<BR />
[...]<BR />
<BR />
// Go and get the beer info for this beer, particularly the similar beers.<BR />
// If we get the info, add it to the data and initiate a workflow.<BR />
var beerInfo = retrieveBeerInfo(beerId);<BR />
if (beerInfo) {<BR />
  row[CHECKIN.STATUS] = initiateWorkflow(beerInfo) || "FAILED";<BR />
}<BR />
<BR />
[...]<BR />
<BR />
function initiateWorkflow(context) {<BR />
<BR />
  return UrlFetchApp<BR />
    .fetch(WFS_PROXY + "?token=" + WFS_SECRET + "&amp;definitionId=" + WORKFLOW_DEFINITION_ID, {<BR />
      method : "POST",<BR />
      contentType : "application/json",<BR />
      payload : JSON.stringify(context)<BR />
    })<BR />
    .getContentText();<BR />
}</CODE></PRE><BR />
Let's look into what that initiateWorkflow function is doing:<BR />
<UL><BR />
 	<LI>it receives a map* of information on the specific beer checked in</LI><BR />
 	<LI>then it makes a POST HTTP request to the proxy service, passing<BR />
<UL><BR />
 	<LI>a secret token (mentioned earlier)</LI><BR />
 	<LI>the workflow definition ID "untappdrecommendation"</LI><BR />
 	<LI>the context, containing the beer information, for the workflow instance</LI><BR />
</UL><BR />
</LI><BR />
</UL><BR />
<EM>*some folks call them objects ... I prefer to call them maps if they're "passive" (if they have no other methods other than the JavaScript object built-in methods). The term map is used in other languages for this sort of structure.</EM><BR />
<BR />
Looking at the value of WFS_PROXY, we can see that it's the address of my live, hosted Google Cloud Function. The "ZZZ" here replaces the real address, by the way. And while "lifetheuniverseandeverything" isn't the real secret token, I thought it was a nice substitute for this post.<BR />
<BR />
Note that the ability to call the initiateWorkflow function just like that, and to only have to make a single call to UrlFetchApp.fetch (to make a single HTTP request using a facility in the standard Google Apps Script class UrlFetchApp), is what I was meaning with "simple" and "minimum fuss". I'm not having to deal with XSRF tokens, nor wonder whether I need to manage the token's context between calls either.<BR />
<BR />
Stepping out of the Google Apps Script context for a moment, let's see what it looks like when I use that proxy function by hand, with curl.<BR />
<BR />
First, we've got a file, context.json, containing the beer info to be provided to the newly minted workflow instance in the form of context:<BR />
<PRE class="language-javascript"><CODE>{<BR />
  "beer": {<BR />
    "bid": 1868220,<BR />
    "beer_name": "Subluminal",<BR />
    "beer_abv": 10,<BR />
    "beer_ibu": 60,<BR />
    "beer_slug": "buxton-brewery-subluminal",<BR />
    "beer_style": "Stout - Imperial / Double",<BR />
    "is_in_production": 1,<BR />
    [...]<BR />
  }<BR />
}</CODE></PRE><BR />
We'll send that file as the body of a POST request thus:<BR />
<PRE class="language-markup"><CODE>curl \<BR />
  --verbose \<BR />
  --data @context.json \<BR />
  --header "Content-Type: application/json" \<BR />
  "https://us-central1-ZZZ.cloudfunctions.net/wfs-proxy<BR />
  ?definitionId=untappdrecommendation<BR />
  &amp;token=lifetheuniverseandeverthing"</CODE></PRE><BR />
Here's what we see:<BR />
<PRE class="language-markup"><CODE>&gt; POST /wfs-proxy?definitionId=untappdrecommendation&amp;token=lifetheuniverseandeverything HTTP/1.1<BR />
&gt; Host: us-central1-ZZZ.cloudfunctions.net<BR />
&gt; User-Agent: curl/7.52.1<BR />
&gt; Accept: */*<BR />
&gt; Content-Type: application/json<BR />
&gt; Content-Length: 131956<BR />
&gt;<BR />
&lt; HTTP/2 200<BR />
&lt; content-type: text/html; charset=utf-8<BR />
&lt; etag: W/"2-d736d92d"<BR />
&lt; function-execution-id: pr85lvavhrvx<BR />
&lt; x-powered-by: Express<BR />
&lt; x-cloud-trace-context: 12ea0eb8b055ade13ff786b4c52af11e;o=1<BR />
&lt; date: Tue, 16 Jan 2018 12:12:12 GMT<BR />
&lt; server: Google Frontend<BR />
&lt; content-length: 2<BR />
&lt;<BR />
OK</CODE></PRE><BR />
(Woo, an HTTP/2 response, by the way!)<BR />
<BR />
This results, in the creation of an instance of the "untappdrecommendation" workflow definition which appears in My Inbox as shown in the screenshot earlier.<BR />
<H3 id="toc-hId-444449536">The proxy code</H3><BR />
Now that we've seen what's supposed to happen, it's time to have a look at the JavaScript code. It's in two files. First, there's index.js, which contains the entry point handler which is invoked by the Google Cloud Functions machinery.<BR />
<BR />
As an aside, it's this entry point handler which is referred to in the package.json which describes, amongst other things, the incantation to deploy a function to the cloud. Here's package.json, in case you're curious:<BR />
<PRE class="language-javascript"><CODE>{<BR />
  "name": "wfs-proxy",<BR />
  "project": "ZZZ",<BR />
  "version": "0.0.1",<BR />
  "description": "A proxy to triggering a workflow on the SCP Workflow Service",<BR />
  "main": "index.js",<BR />
  "scripts": {<BR />
    "test": "functions deploy $npm_package_name --entry-point handler --trigger-http",<BR />
    "deploy": "gcloud beta functions deploy $npm_package_name <BR />
              --entry-point handler <BR />
              --trigger-http <BR />
              --source <A href="https://source.developers.google.com" target="test_blank" rel="nofollow noopener noreferrer">https://source.developers.google.com</A><BR />
                /projects/$npm_package_project/repos/$npm_package_name"<BR />
  },<BR />
  "author": "DJ Adams",<BR />
  "license": "ISC",<BR />
  "dependencies": {<BR />
    "axios": "^0.17.1"<BR />
  }<BR />
}</CODE></PRE><BR />
You can see that 'handler' (in index.js) is specified as the cloud function's entry point in the deploy incantation.<BR />
<BR />
Ok, so this is what's in index.js:<BR />
<PRE class="language-javascript"><CODE>const<BR />
<BR />
	wfslib = require("./wfslib"),<BR />
<BR />
	user = "p481810",<BR />
	pass = "*******",<BR />
	secret = "lifetheuniverseandeverything",<BR />
<BR />
	initiateWorkflow = (definitionId, context, callback) =&gt; {<BR />
<BR />
		wfslib.initiate({<BR />
			user : user,<BR />
			pass : pass,<BR />
			prod : false,<BR />
			definitionId : definitionId,<BR />
			context : context<BR />
		});<BR />
<BR />
		callback("OK");<BR />
<BR />
	},<BR />
<BR />
	/**<BR />
	 * Main entrypoint, following the Node Express <BR />
	 * pattern. Expects an HTTP POST request with the<BR />
	 * workflow definition ID in a query parameter<BR />
	 * 'definitionId' and the payload being a JSON<BR />
	 * encoded context.<BR />
	 */<BR />
    handler = (req, res) =&gt; {<BR />
<BR />
		switch (req.query.token) {<BR />
			case secret:<BR />
				initiateWorkflow(<BR />
					req.query.definitionId,<BR />
					req.body,<BR />
					result =&gt; { res.status(200).send(result); }<BR />
				);<BR />
				break;<BR />
			default:<BR />
				res.status(403).send("Incorrect token supplied");<BR />
		}<BR />
<BR />
	};<BR />
<BR />
exports.handler = handler;</CODE></PRE><BR />
It's pretty straightfoward, with the handler function being the one that takes the pair of HTTP request and response objects, checks the token matches, and calls the initiateWorkflow function, accessing the definitionId and the context via the req.query and req.body mechanisms on the request object.<BR />
<BR />
I'm not interested in what the Workflow API returns (if you remember from the previous post, it's a map that includes the ID of the newly minted workflow instance, details of the definition upon which it's based, etc). So I just return a simple string.<BR />
<BR />
To keep things modular, the actual "heavy lifting", if you can call it that, is done in wfslib.js, which looks like this:<BR />
<PRE class="language-javascript"><CODE>const<BR />
	axios = require("axios"),<BR />
	wfsUrl = "https://bpmworkflowruntimewfs-USERTRIAL.hanaTRIAL.ondemand.com/workflow-service/rest",<BR />
	tokenPath = "/v1/xsrf-token",<BR />
	workflowInstancesPath = "/v1/workflow-instances",<BR />
<BR />
	/**<BR />
	 * opts:<BR />
	 * - user: SCP user e.g. p481810<BR />
	 * - pass: SCP password<BR />
	 * - prod: SCP production (boolean, default false)<BR />
	 * - definitionId: ID of workflow definition<BR />
	 * - context: context to pass when starting the workflow instance<BR />
	 */<BR />
	initiate = opts =&gt; {<BR />
<BR />
		const<BR />
			client = axios.create({<BR />
				baseURL : wfsUrl<BR />
					.replace(/USER/, opts.user)<BR />
					.replace(/TRIAL/g, opts.prod ? "" : "trial"),<BR />
				auth : {<BR />
					username : opts.user,<BR />
					password : opts.pass<BR />
				}<BR />
			});<BR />
<BR />
		return client<BR />
			.get(tokenPath, {<BR />
				headers : {<BR />
					"X-CSRF-Token" : "Fetch"<BR />
				}<BR />
			})<BR />
			.then(res =&gt; {<BR />
				client<BR />
					.post(workflowInstancesPath, {<BR />
						definitionId : opts.definitionId,<BR />
						context : opts.context<BR />
					},<BR />
					{<BR />
						headers : {<BR />
							"X-CSRF-Token" : res.headers["x-csrf-token"],<BR />
							"Cookie" : res.headers["set-cookie"].join("; ")<BR />
						}<BR />
					})<BR />
					.then(res =&gt; res.data)<BR />
					.catch(err =&gt; err.status);<BR />
			});<BR />
	};<BR />
<BR />
exports.initiate = initiate;<BR />
</CODE></PRE><BR />
Here there's a single function defined and exported - initiate - which takes a series of parameters in a map (opts), determines the Workflow API root endpoint, based on the username and whether it's a trial account or not.<BR />
<BR />
I'm using the Promise-based HTTP library <A href="https://github.com/axios/axios" target="_blank" rel="nofollow noopener noreferrer">axios</A>&nbsp;to manage my sequential HTTP requests, to avoid callbacks. First there's the GET request to /v1/xsrf-token to request a token, and then there's the POST request to /v1/workflow-instances to initiate a new instance. Inside the second call, I'm taking the XSRF token that was returned from the first call from the headers of the first response (res.headers["x-csrf-token"]).<BR />
<BR />
Note here that this being a more low level HTTP client library, there's no automatic cookie handling as happens automatically in AJAX requests, or in Postman (see <A href="https://blogs.sap.com/2018/01/14/discovering-scp-workflow-instance-initiation/" target="_blank" rel="noopener noreferrer">Discovering SCP Workflow - Instance Initiation</A>&nbsp;and <A href="https://blogs.sap.com/2018/01/16/discovering-scp-workflow-using-postman/" target="_blank" rel="noopener noreferrer">Discovering SCP Workflow - Using Postman</A>). We have to exert a little bit of manual effort - joining together any cookies returned from the first response, using semi-colons, and sending them in the second request in a Cookie header.<BR />
<BR />
That's pretty much it. I have a nice simple function, running serverless in the cloud, which I can call with minimal effort to kick off a new workflow on the SAP Cloud Platform. Now I have that, I can go to town on the important stuff - making sure that my workflow definition fits the requirements and that the UI for the user task (making a choice from the recommended beers) works well and is available to handle the detail of the workflow item in the My Inbox app in the SAP Fiori Launchpad.<BR />
<BR />
Next post in this series: <A href="https://blogs.sap.com/2018/01/18/discovering-scp-workflow-workflow-definition/" target="_blank" rel="noopener noreferrer">Discovering SCP Workflow - Workflow Definition</A>.<BR />
<BR />
&nbsp;
---
Discovering SCP Workflow - Using Postman
technology-blog-members
2018-01-16
https://community.sap.com/t5/technology-blogs-by-members/discovering-scp-workflow-using-postman/ba-p/13354064
2018-01-16-discovering-scp-workflow-using-postman
Previous post in this series: <A href="https://blogs.sap.com/2018/01/14/discovering-scp-workflow-instance-initiation/" target="_blank" rel="noopener noreferrer">Discovering SCP Workflow - Instance Initiation</A>.<BR />
<BR />
This post is part of a series, a guide to which can be found here: <A href="https://qmacro.org/blog/posts/2018/01/16/discovering-scp-workflow/" target="_blank" rel="nofollow noopener noreferrer">Discovering SCP Workflow.</A><BR />
<BR />
In this post I'll explain how I use Postman to explore the Workflow API, making the most of some of Postman's great features.<BR />
<BR />
Folks like to explore APIs in different ways. There are various tools that I use - the ones that come to mind immediately are <A href="https://curl.haxx.se/" target="_blank" rel="nofollow noopener noreferrer">curl</A> (used in the previous post, in fact) to drive the HTTP conversation and <A href="https://stedolan.github.io/jq/" target="_blank" rel="nofollow noopener noreferrer">jq</A>&nbsp;to manipulate complex JSON data structures that often are returned in responses.<BR />
<BR />
There's a relatively new kid on the block in the form of <A href="https://www.getpostman.com" target="_blank" rel="nofollow noopener noreferrer">Postman</A>&nbsp;which describes itself as an API development environment "to share, test, document &amp; monitor APIs". It started out as a Chrome extension, but there are OS-specific native versions too.<BR />
<BR />
You can register and thence sign in to Postman, whereupon it will remember your settings (which will come in handy shortly) and synchronise them between different instances over different workstations, which is super useful.<BR />
<H3 id="toc-hId-1033929597">Sessions and collections</H3><BR />
In the same way that code editors typically allow multiple files open, Postman allows you to have multiple request/response sessions, and switch between them via tabs. Each request/response is remembered in a History area, but there's also the facility to save and group together specific requests into Collections. I have an "SCP Workflow service" collection:<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2018/01/Screenshot-2018-01-15-at-08.50.20.png" /><BR />
<BR />
Within a collection you can group together related requests into folders, as you can see in the screenshot ("New Test Workflow Instance", for example). You can even use the Collections as forms of sequences of calls to be made to test an API, using the scripting facilities to setup requests and validate responses automatically.<BR />
<H3 id="toc-hId-837416092">Preparing requests</H3><BR />
Consider that an HTTP request has three main parts:<BR />
<UL><BR />
 	<LI>the combination of method and URL</LI><BR />
 	<LI>request headers</LI><BR />
 	<LI>request body (optional)</LI><BR />
</UL><BR />
Postman presents a nice interface to allow you to prepare HTTP requests, with separate areas for Authorization, Headers and Body (as well as the main specification of method and URL of course).<BR />
<BR />
But there are also a couple of other areas. In Pre-request Scripts you can write JavaScript that is executed before the HTTP request is sent. And in Tests you can write JavaScript that is executed after the HTTP response is received. You can use the JavaScript Postman API that offer access to the request and response itself plus some Postman specific features such as global and environment variables.<BR />
<H3 id="toc-hId-640902587">Environments</H3><BR />
Postman has a concept of environments, which can be specific to you, or shared (if you're running Postman Pro). I use the environment concept to manage my different accesses based on who I'm logging into SCP as at any given time. For example, I have my own private trial account (P481810), and over time I&nbsp;may have access to work accounts, whether trial or productive, and ephemeral ones that are given out in hands-on training sessions.<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2018/01/Screenshot-2018-01-15-at-11.00.43.png" /><BR />
<BR />
The environments can contain variables, like this:<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2018/01/Screenshot-2018-01-15-at-11.02.43.png" /><BR />
<BR />
For exploring the Workflow API, I use the 'basicauthorization' variable in my request headers, the 'workflowservice' variable in constructing the URLs, and the 'xsrftoken' variable to store passing XSRF tokens, allowing me to catch the response from a "Fetch" request and insert the returned token into the next POST request. There are others too ('instanceId', 'taskInstanceId') that I use for storing intermediate values of various properties.<BR />
<BR />
Perhaps you've noticed that the value of the 'workflowservice' variable is set to match the API "root", as discussed in the <A href="https://blogs.sap.com/2018/01/14/discovering-scp-workflow-instance-initiation/#digression" target="_blank" rel="noopener noreferrer">digression</A> in the previous post. I do like the clean separation here.<BR />
<H3 id="toc-hId-444389082">Into action</H3><BR />
Let's see how all of this fits together. We'll use the two requests within the "New Test Workflow Instance" folder in the Collections screenshot earlier. They look like this:<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2018/01/Screenshot-2018-01-15-at-11.23.18.png" /><BR />
<H4 id="toc-hId-376958296">Fetching an XSRF token</H4><BR />
This is what the first one "Get CSRF Token" looks like:<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2018/01/Screenshot-2018-01-15-at-11.24.19.png" /><BR />
<BR />
You can see that I'm using the 'basicauthorization' environment variable in an "Authorization" header. But also I'm making use of the 'workflowservice' root value to help construct the URL - a URL that is specific to the particular environment I've selected, the one for my P481810 trial account. In other words, the resulting URL will resolve to:<BR />
<PRE><CODE><A href="https://bpmworkflowruntimewfs-p481810trial" target="test_blank" rel="nofollow noopener noreferrer">https://bpmworkflowruntimewfs-p481810trial</A><BR />
  .hanatrial.ondemand.com<BR />
  /workflow-service/rest/v1/xsrf-token</CODE></PRE><BR />
(split for legibility).<BR />
<BR />
I've also got a little bit of JavaScript to be run after the response is received, in the "Tests" area. It's this:<BR />
<PRE class="language-javascript"><CODE>postman.setEnvironmentVariable(<BR />
  "xsrftoken",<BR />
  postman.getResponseHeader("X-CSRF-Token")<BR />
);</CODE></PRE><BR />
Yes, when the response is returned, it gets the value of the X-CSRF-Token header, which should contain the token we've requested, and stores it in the 'xsrftoken' environment variable. (Did I mention how much CSRF vs XSRF troubles me?)<BR />
<BR />
The response from such a request is pretty simple - there's no body, just the headers, as shown:<BR />
<PRE class="language-markup"><CODE>cache-control : private<BR />
content-length : 0<BR />
date : Mon, 15 Jan 2018 11:26:28 GMT<BR />
expires : Thu, 01 Jan 1970 00:00:00 UTC<BR />
server : SAP<BR />
strict-transport-security : max-age=31536000; includeSubDomains; preload<BR />
x-content-type-options : nosniff<BR />
x-csrf-token : 2D114FA00565C0997072AD2ECCC1EF96</CODE></PRE><BR />
The value '2D114FA00565C0997072AD2ECCC1EF96' is what gets stored in 'xsrftoken'.<BR />
<H4 id="toc-hId-180444791">Using the XSRF token in a POST request</H4><BR />
Now we have the token, we can use it in the second request in this folder to create a new workflow instance.<BR />
<BR />
Let's have a look at what that request looks like, stored and ready in Postman:<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2018/01/Screenshot-2018-01-15-at-11.35.13.png" /><BR />
<BR />
(you can see that Postman displays the value and scope of a variable if you hover over it).<BR />
<BR />
The workflow definition itself is deliberately very simple and not of interest here. We'll cover workflow definitions in another post. But if you're curious, this is what is in the Body area:<BR />
<PRE class="language-javascript"><CODE>{<BR />
  "definitionId": "testworkflow",<BR />
  "context": {<BR />
    "thing":"banana"<BR />
  }<BR />
}</CODE></PRE><BR />
Looking at the request headers, we still have the 'basicauthorization' variable in use of course, but now we can supply the XSRF token in the 'X-CSRF-Token' header, with the value set to the token we just received on the previous call. Nice!<BR />
<BR />
As we have JavaScript at our disposal on receipt of response, we might as well record the ID of the workflow instance created, in an environment variable 'instanceId'. So this is the JavaScript in the 'Tests' area:<BR />
<PRE class="language-javascript"><CODE>postman.setEnvironmentVariable(<BR />
  "instanceId", <BR />
  JSON.parse(responseBody).id<BR />
);</CODE></PRE><BR />
Finally, note the lovely URL constructed out of the variable workflow service "root" and the specific API resource '/v1/workflow-instances' that we're sending the POST request to:<BR />
<PRE><CODE><A href="https://bpmworkflowruntimewfs-p481810trial" target="test_blank" rel="nofollow noopener noreferrer">https://bpmworkflowruntimewfs-p481810trial</A><BR />
  .hanatrial.ondemand.com<BR />
  /workflow-service/rest/v1/workflow-instances</CODE></PRE><BR />
Here's what the response looks like, by the way:<BR />
<PRE class="language-javascript"><CODE>{<BR />
    "id": "82817e22-f9e9-11e7-a369-00163e4ef3ca",<BR />
    "definitionId": "testworkflow",<BR />
    "definitionVersion": "10",<BR />
    "subject": "TestWorkflow",<BR />
    "status": "RUNNING",<BR />
    "businessKey": "",<BR />
    "startedAt": "2018-01-15T11:44:57.037Z",<BR />
    "startedBy": "P481810",<BR />
    "completedAt": null<BR />
}</CODE></PRE><BR />
<H3 id="toc-hId--145151433">Continuing the API conversation</H3><BR />
And yes, you guessed it, that ID value of '82817e22-f9e9-11e7-a369-00163e4ef3ca' is now available to us in the environment variable 'instanceId'. So we can use it directly in yet another call from our collection, say, the "Retrieve context for a specific workflow instance", without lifting a finger. This time, we're using the 'instanceId' variable in the construction of the URL itself, as that's what's required for this particular resource type in the Workflow API:<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2018/01/Screenshot-2018-01-16-at-06.30.54.png" /><BR />
<BR />
Note that we didn't have to supply the XSRF token as this is just a GET request.<BR />
<BR />
As you can see, Postman is super convenient for exploring APIs such as the Workflow API, especially when it comes to managing different environments that reflect your SCP landscape, and handling information that must be shared across requests.<BR />
<BR />
By the way - did you notice something? We didn't have to transfer cookies received in the response to the first (token fetch) request, to explicitly use them in the second request. Just like the AJAX mechanism, explained in the previous post <A href="https://blogs.sap.com/2018/01/14/discovering-scp-workflow-instance-initiation/" target="_blank" rel="noopener noreferrer">Discovering SCP Workflow - Instance Initiation</A>, Postman takes care of that for us automatically.<BR />
<BR />
Now we're comfortable with the idea of multiple requests and how the Workflow API feels, in the next post we'll look at a proxy service to wrap this up for us in a convenient package, in the form of a Google Cloud Function.<BR />
<BR />
Next post in this series: <A href="https://blogs.sap.com/2018/01/17/discovering-scp-workflow-service-proxy/" target="_blank" rel="noopener noreferrer">Discovering SCP Workflow - Service Proxy</A>.
---
Discovering SCP Workflow - Instance Initiation
technology-blog-members
2018-01-14
https://community.sap.com/t5/technology-blogs-by-members/discovering-scp-workflow-instance-initiation/ba-p/13353657
2018-01-14-discovering-scp-workflow-instance-initiation
Previous post in this series:&nbsp;<A href="https://blogs.sap.com/2018/01/08/discovering-scp-workflow-the-monitor/" target="_blank" rel="noopener noreferrer">Discovering SCP Workflow â The Monitor</A>.<BR />
<BR />
This post is part of a series, a guide to which can be found here: <A href="https://qmacro.org/blog/posts/2018/01/16/discovering-scp-workflow/" target="_blank" rel="nofollow noopener noreferrer">Discovering SCP Workflow.</A><BR />
<BR />
In this post we explore the part of the SCP Workflow API that deals with workflow instances, and look at how we initiate a new workflow instance, paying particular attention to how we request, and then use, a cross site request forgery (XSRF) token.<BR />
<BR />
In <A href="https://blogs.sap.com/2018/01/08/discovering-scp-workflow-the-monitor/" target="_blank" rel="noopener noreferrer">Discovering SCP Workflow - The Monitor</A>, we saw that the Workflow API exposes these main entities:<BR />
<BR />
Workflow Definitions<BR />
Workflow Instances<BR />
User Task Instances<BR />
Messages<BR />
<BR />
We also understand that a workflow instance is a specific occurrence of a given workflow definition. So one might guess, again correctly, that as the Workflow API is informed by <A href="https://blogs.sap.com/2010/01/07/representational-state-transfer-rest-and-sap/" target="_blank" rel="noopener noreferrer">REST</A> principles, we should look to the Workflow Instances entity to see how we might start a new workflow instance using the appropriate HTTP method.<BR />
<H3 id="toc-hId-1033905544">Workflow instance operations</H3><BR />
In the <A href="https://api.sap.com/shell/discover/contentpackage/SAPCPWorkflowAPIs/api/SAP_CP_Workflow" target="_blank" rel="noopener noreferrer">API documentation</A>, the operations for Workflow Instances are shown as follows:<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2018/01/Screenshot-2018-01-13-at-12.31.05.png" /><BR />
<BR />
Considering that initiating a new workflow instance is certainly not idempotent, our eyes are drawn towards:<BR />
<PRE><CODE>POST /v1/workflow-instances</CODE></PRE><BR />
While our eyes are wandering over the operations summary, they also surely fall upon the path info given for some of the operations ... whereupon we can surmise that workflow instances have context, error messages, and execution logs (in fact, we looked at some execution logs in <A href="https://blogs.sap.com/2018/01/08/discovering-scp-workflow-the-monitor/" target="_blank" rel="noopener noreferrer">Discovering SCP Workflow - The Monitor</A>). Perhaps we'll cover that in another installment.<BR />
<H3 id="toc-hId-837392039">Creating a new instance</H3><BR />
Looking in more detail at the requirements for the POST operation call, we can see the following:<BR />
<UL><BR />
 	<LI>the resource here is protected against cross site request forgery and an XSRF token will need to be supplied in each request</LI><BR />
 	<LI>the payload to supply is to be in JSON format, with two properties:<BR />
<UL><BR />
 	<LI>definitionId: the ID of the actual workflow definition</LI><BR />
 	<LI>context: the data pertaining to the particular workflow instance to be initiated</LI><BR />
</UL><BR />
</LI><BR />
</UL><BR />
It's great to see that a successful response returns HTTP status code 201 CREATED, as it should, in a RESTful sense. As far as I can see, the Location header, that should normally accompany a 201 response, is missing (and the request URL is certainly not the location of the newly created resource, which is the alternative when no Location header is supplied). But let's leave that for another time.<BR />
<BR />
Regardless, the process is therefore fairly straightforward. Let's have a look at some sample code from&nbsp;<SPAN class="mention-scrubbed">archana.shukla</SPAN>&nbsp;'s post "<A href="https://blogs.sap.com/2017/10/15/part-2-start-workflow-from-your-html5-application/" target="_blank" rel="noopener noreferrer">Part 2: Start Workflow from your HTML5 application</A>" to embed the process into our brains.<BR />
<H4 id="toc-hId-769961253">Fetching the XSRF token</H4><BR />
First, we have the _fetchToken function defined thus:<BR />
<PRE class="language-javascript"><CODE>_fetchToken: function() {<BR />
    var token;<BR />
    $.ajax({<BR />
        url: "/bpmworkflowruntime/rest/v1/xsrf-token",<BR />
        method: "GET",<BR />
        async: false,<BR />
        headers: {<BR />
            "X-CSRF-Token": "Fetch"<BR />
        },<BR />
        success: function(result, xhr, data) {<BR />
            token = data.getResponseHeader("X-CSRF-Token");<BR />
        }<BR />
    });<BR />
    return token;<BR />
}</CODE></PRE><BR />
This _fetchToken method is called before the main POST method (that's the one that actually initiates the new instance). Let's look closely.<BR />
<BR />
There's a GET request made to the following URL:<BR />
<PRE><CODE>/bpmworkflowruntime/rest/v1/xsrf-token</CODE></PRE><BR />
This URL is of course abstracted by the destination target entry in the app's neo-app.json descriptor file, which has an entryPath defined as "/workflow-service":<BR />
<PRE class="language-javascript"><CODE>{<BR />
    "path": "bpmworkflowruntime", <BR />
    "target": { <BR />
        "type": "destination", <BR />
        "name": "bpmworkflowruntime", <BR />
        "entryPath": "/workflow-service" <BR />
    }, <BR />
    "description": "Workflow Service Runtime" <BR />
}</CODE></PRE><BR />
<H3 id="toc-hId-444365029"></H3><BR />
<A name="digression" target="_blank"></A><STRONG>Digression: Resource URLs and how to think about them</STRONG><BR />
<BR />
It's worth stopping briefly to consider what this means and in what way we look at this Workflow API (and APIs for other services), particularly around how we think about different parts of the path info.<BR />
<BR />
By the way, the "path info" is that part of the url that starts after the hostname and (optional) port, running up to any query parameters. So for example, in the URL<BR />
<PRE><CODE><A href="http://host.example.com:8080/something/something-else/this?n=42" target="test_blank" rel="nofollow noopener noreferrer">http://host.example.com:8080/something/something-else/this?n=42</A></CODE></PRE><BR />
the path info part is:<BR />
<PRE><CODE>/something/something-else/this</CODE></PRE><BR />
So, back to the digression.<BR />
<BR />
When you enable the Workflow service in the SCP cockpit, a new destination "bpmworkflowruntime" appears, with the URL pattern that looks like this for production accounts:<BR />
<PRE><CODE><A href="https://bpmworkflowruntimewfs-&lt;user&gt;.hana.ondemand.com" target="test_blank" rel="nofollow noopener noreferrer">https://bpmworkflowruntimewfs-&lt;user&gt;.hana.ondemand.com</A></CODE></PRE><BR />
and this for trial accounts:<BR />
<PRE><CODE><A href="https://bpmworkflowruntimewfs-&lt;user&gt;trial.hanatrial.ondemand.com" target="test_blank" rel="nofollow noopener noreferrer">https://bpmworkflowruntimewfs-&lt;user&gt;trial.hanatrial.ondemand.com</A></CODE></PRE><BR />
So, with this in mind, and looking at the pattern defined for the Workflow API production URL, as described in the <A href="https://api.sap.com/shell/discover/contentpackage/SAPCPWorkflowAPIs/api/SAP_CP_Workflow?section=OVERVIEW" target="_blank" rel="noopener noreferrer">Overview section</A> of the Workflow API documentation on the API Hub:<BR />
<PRE><CODE><A href="https://bpmworkflowruntime{provideracctname}-{consumeracctname}" target="test_blank" rel="nofollow noopener noreferrer">https://bpmworkflowruntime{provideracctname}-{consumeracctname}</A><BR />
  .hana.ondemand.com<BR />
  /workflow-service/rest</CODE></PRE><BR />
(split for legibility) we can see that "wfs" is the provider account name, and that<BR />
<PRE><CODE>/workflowservice/rest</CODE></PRE><BR />
is the "root" part of the path info for the Workflow API resources. In other words, this "root" part is common to all resource URLs in the Workflow API.<BR />
<BR />
Taking my trial account for example, it resolves to this:<BR />
<PRE><CODE><A href="https://bpmworkflowruntimewfs-p481810trial" target="test_blank" rel="nofollow noopener noreferrer">https://bpmworkflowruntimewfs-p481810trial</A><BR />
  .hanatrial.ondemand.com<BR />
  /workflow-service/rest</CODE></PRE><BR />
A complete URL for a given API resource, such as for the workflow instances, would look like this:<BR />
<PRE><CODE><A href="https://bpmworkflowruntimewfs-p481810trial" target="test_blank" rel="nofollow noopener noreferrer">https://bpmworkflowruntimewfs-p481810trial</A><BR />
  .hanatrial.ondemand.com<BR />
  /workflow-service/rest/v1/workflow-instances</CODE></PRE><BR />
You can see that after the "root" part of the path info, we have the resource-specific part:<BR />
<PRE><CODE>/v1/workflow-instances</CODE></PRE><BR />
This might seem like an unnecessary diversion, but I think it's important to understand how resource identifiers (URLs) are structured, so you can think about them in an appropriate way, and have that thinking permeate your code and configuration.<BR />
<BR />
So I think here it might be nicer to have a destination target entry like this:<BR />
<PRE class="language-javascript"><CODE>{<BR />
    "path": "workflowservice",                  &lt;---<BR />
    "target": {<BR />
        "type": "destination",<BR />
        "name": "bpmworkflowruntime",<BR />
        "entryPath": "/workflow-service/rest"   &lt;---<BR />
    },<BR />
    "description": "Workflow Service Runtime"<BR />
}</CODE></PRE><BR />
where the value for the "path" property is deliberately different (so that we don't confuse it with an actual API resource path info section), and the value for the "entryPath" property reflects the full "root" value "/workflow-service/rest". This is so that when we construct relative URLs in our code that relies on these destination target abstractions, we focus solely on the individual and unique resource name that we're interested in, for example:<BR />
<PRE><CODE>/workflowservice/v1/workflow-instances</CODE></PRE><BR />
which says to me<BR />
<BR />
<EM>"the /v1/workflow-instances API resource provided by the workflow service abstraction".</EM><BR />
<BR />
I think this is preferable to having the resource name mixed in with some portion of the API root, and something that might or might not be (in our minds) part of a real URL that looks possibly broken and therefore confusing, like this example:<BR />
<PRE><CODE>/bpmworkflowruntime/rest/v1/xsrf-token</CODE></PRE><BR />
This digression is somewhat academic and by no means a criticism of the code in the other blog post, but I thought it was worth at least sharing what's in my head on this subject.<BR />
<BR />
Anyway, let's leave the digression there, and get back to looking at the XSRF token fetching part. Taking a second look at the _fetchToken code above, we see that an HTTP GET request is made to the XSRF handling endpoint:<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2018/01/Screenshot-2018-01-14-at-08.31.44.png" /><BR />
<BR />
The one thing I have to say here is that it irks me more than it should that there's an inconsistency between the terms XSRF and CSRF, but beyond that, it's pretty straightforward.<BR />
<BR />
<EM>"Please give me an XSRF token".</EM><BR />
<BR />
Notice that the call that is made via AJAX is done in a synchronous way. This is of course because we need the token before making the main call (the HTTP POST). There are other ways to achieve this, avoiding setting the synchronous mode, and also avoiding callback hell, by making use of promises, which we'll look at in the next installment.<BR />
<H4 id="toc-hId-376934243">Making the POST operation</H4><BR />
The token received in the previous step can (and must) now be used in making this call:<BR />
<PRE><CODE>POST /v1/workflow-instances</CODE></PRE><BR />
The code in Archana's post looks like this:<BR />
<PRE class="language-javascript"><CODE>_startInstance: function(token) {<BR />
    var model = this.getView().getModel();<BR />
    var inputValue = model.getProperty("/text");<BR />
    $.ajax({<BR />
        url: "/bpmworkflowruntime/rest/v1/workflow-instances",<BR />
        method: "POST",<BR />
        async: false,<BR />
        contentType: "application/json",<BR />
        headers: {<BR />
            "X-CSRF-Token": token<BR />
        },<BR />
        data: JSON.stringify({<BR />
            definitionId: &lt;your workflow ID&gt;,<BR />
            context: {<BR />
                text: inputValue<BR />
            }<BR />
        }),<BR />
        success: function(result, xhr, data) {<BR />
            model.setProperty("/result", JSON.stringify(result, null, 4));<BR />
        }<BR />
    });<BR />
}</CODE></PRE><BR />
Following the digression above, we'd actually want to make a call to the abstracted URL as shown earlier:<BR />
<PRE><CODE>/workflowservice/v1/workflow-instances</CODE></PRE><BR />
provided that we'd made the requisite definition in neo-app.json.<BR />
<BR />
The token needs to be supplied using the same header as previously, i.e. "X-CSRF-Token", in place of the "Fetch" value.<BR />
<BR />
And it's in the body of this POST request that the details required to initiate a new workflow instance are supplied, in JSON format. The API Hub documentation states that there are two properties, "context" and "definitionId". The former is to supply contextual data relating to the particular instance of the workflow definition to be initiated. We'll look at the detail of that context in another post. The latter is to specify the ID of the workflow definition we want to create an instance of.<BR />
<BR />
Pretty simple.<BR />
<H3 id="toc-hId-51338019"><A name="gotcha" target="_blank"></A>Avoiding the "gotcha".</H3><BR />
It's worth examining how XSRF tokens work, and how AJAX requests work implicitly, so you don't fall foul of the idea of session context, or rather the lack of it. Erm, like I did.<BR />
<BR />
When you request an XSRF token, it's for your session. How is that implemented and controlled? If you could fetch a token and give it to someone else to use, the XSRF mechanism wouldn't be very effective. So when a token is returned in response to a "Fetch" request, it's valid only for that session - as determined by cookies returned in the response. If you use the token outside the context of those cookies in a subsequent request, it's not going to work.<BR />
<BR />
So is there some magic going on in how the pair of requests are made in the code we've examined?<BR />
<BR />
Well, insofar as <A href="https://www.bennadel.com/blog/1995-ajax-requests-get-and-set-cookies-like-any-other-http-request.htm" target="_blank" rel="nofollow noopener noreferrer">AJAX requests get and set cookies like any other HTTP request</A>, there is. When making HTTP requests via the AJAX mechanism, cookie handling is done for you automatically. So in the second request (the HTTP POST), the token is sent, but also cookies, received in the response to the first request, are sent as well.<BR />
<BR />
I guess what I'm trying to say is that the magic happens not because it's magic, but because there's implicit work going on for you, of which you may not have been aware.<BR />
<H4 id="toc-hId--16092767">Trying to use a token without a session context</H4><BR />
Let's see this in action by using <A href="https://curl.haxx.se/" target="_blank" rel="nofollow noopener noreferrer">curl</A>, the command line tool for HTTP and a general Swiss Army knife for exploring APIs.<BR />
<BR />
First, we'll issue a curl command as the equivalent of our _fetchToken procedure:<BR />
<PRE class="language-markup"><CODE>curl \<BR />
  --user p481810 \<BR />
  --header "X-CSRF-Token: Fetch" \<BR />
  --verbose \<BR />
  <A href="https://bpmworkflowruntimewfs-p481810trial.hanatrial.ondemand.com/workflow-service/rest/v" target="test_blank" rel="nofollow noopener noreferrer">https://bpmworkflowruntimewfs-p481810trial.hanatrial.ondemand.com/workflow-service/rest/v</A><BR />
1/xsrf-token</CODE></PRE><BR />
After being prompted for my password, the HTTP request is made and the response is received. Details of both are shown in the output because of the --verbose option. Here are some of them (the "&gt;" denotes outgoing data, i.e. the request, and the "&lt;" denotes incoming data, i.e. the response):<BR />
<PRE class="language-markup"><CODE>&gt; GET /workflow-service/rest/v1/xsrf-token HTTP/1.1<BR />
&gt; Host: bpmworkflowruntimewfs-p481810trial.hanatrial.ondemand.com<BR />
&gt; User-Agent: curl/7.52.1<BR />
&gt; Accept: */*<BR />
&gt; X-CSRF-Token: Fetch<BR />
&gt;<BR />
&lt; HTTP/1.1 200 OK<BR />
&lt; Expires: Thu, 01 Jan 1970 00:00:00 UTC<BR />
&lt; Set-Cookie: JSESSIONID=123DCEB713926E0833B45B08247623385CB269BB3A8454790E69372D32DE4538; Path=/workflow-service; Secure; HttpOnly<BR />
&lt; Set-Cookie: JTENANTSESSIONID_p481810trial=SsaDu1sHjWIX0mDPAJFk0HEr03CSSGyjyWvZ4MrATas%3D; Domain=.hanatrial.ondemand.com; Path=/; Secure; HttpOnly<BR />
&lt; X-CSRF-Token: 10D04A3B50DDE972188AA980DFDC56D9<BR />
&lt; X-Content-Type-Options: nosniff<BR />
&lt; Content-Length: 0<BR />
&lt; Date: Sun, 14 Jan 2018 14:08:09 GMT<BR />
&lt; Server: SAP<BR />
&lt; Set-Cookie: BIGipServer~jpaas_folder~bpmworkflowruntimewfs.hanatrial.ondemand.com=!kCiZlq6atWogI9Y9I+xE<BR />
tZ891eMS7LkmQdYIxDKM2/HAS5x8xPPhIrAnkPWcRYM1eqXm10QSr+s4Cg==; path=/; httponly; secure<BR />
&lt; Strict-Transport-Security: max-age=31536000; includeSubDomains; preload<BR />
&lt;</CODE></PRE><BR />
An XSRF token is returned in response to the Fetch request, as you can see. Let's use this token in a subsequent HTTP request - this time a POST request to try to initiate a new workflow instance. The body of the POST request is in the data.json file, which contains this:<BR />
<PRE class="language-javascript"><CODE>{<BR />
  "definitionId" : "testworkflow",<BR />
  "context" : {<BR />
    "thing" : "banana"<BR />
  }<BR />
}</CODE></PRE><BR />
OK, first we set an environmental variable to make the received token available:<BR />
<PRE><CODE>export CSRFTOKEN=10D04A3B50DDE972188AA980DFDC56D9</CODE></PRE><BR />
Now we can issue the curl command, sending the token in blissful ignorance of the consequences:<BR />
<PRE class="language-markup"><CODE>curl \<BR />
  --user p481810 \<BR />
  --header "Content-Type: application/json" \<BR />
  --header "X-CSRF-Token: $CSRFTOKEN" \<BR />
  --verbose \<BR />
  --data @data.json \<BR />
  <A href="https://bpmworkflowruntimewfs-p481810trial.hanatrial.ondemand.com/workflow-service/rest/v1/workflow-instances" target="test_blank" rel="nofollow noopener noreferrer">https://bpmworkflowruntimewfs-p481810trial.hanatrial.ondemand.com/workflow-service/rest/v1/workflow-instances</A> </CODE></PRE><BR />
What do we get? Let's see:<BR />
<PRE class="language-markup"><CODE>&gt; POST /workflow-service/rest/v1/workflow-instances HTTP/1.1<BR />
&gt; Host: bpmworkflowruntimewfs-p481810trial.hanatrial.ondemand.com<BR />
&gt; User-Agent: curl/7.52.1<BR />
&gt; Accept: */*<BR />
&gt; Content-Type: application/json<BR />
&gt; X-CSRF-Token: 10D04A3B50DDE972188AA980DFDC56D9<BR />
&gt; Content-Length: 69<BR />
&gt;<BR />
} [69 bytes data]<BR />
&lt; HTTP/1.1 403 Forbidden<BR />
&lt; Set-Cookie: JSESSIONID=173976D361754979CF900BA9AF9F6197307474F0C7A9AD2619150D371E7EED50; Path=/workflow-service; Secure; HttpOnly<BR />
&lt; Set-Cookie: JTENANTSESSIONID_p481810trial=lzs6Yz6%2B3pVlPR3kN5ueBmmq1Bm2vr7YsgVJXxrEqM0%3D; Domain=.hanatrial.ondemand.com; Path=/; Secure; HttpOnly<BR />
&lt; X-CSRF-Token: Required<BR />
&lt; Content-Type: text/html;charset=utf-8<BR />
&lt; Content-Language: en<BR />
&lt; Content-Length: 121<BR />
&lt; Date: Sun, 14 Jan 2018 14:10:04 GMT<BR />
&lt; Server: SAP<BR />
&lt; Set-Cookie: BIGipServer~jpaas_folder~bpmworkflowruntimewfs.hanatrial.ondemand.com=!2Ca7XcLdsg/zzGE9I+xEtZ891eMS7FbugL2TfgJqsHWcgxEC4eqkZJXXbqbJ0xdPDieESOQ1VuZKCQ==; path=/; httponly; secure<BR />
&lt; Strict-Transport-Security: max-age=31536000; includeSubDomains; preload<BR />
&lt;<BR />
&lt;html&gt;<BR />
&lt;head&gt;<BR />
&lt;title&gt;Error report&lt;/title&gt;<BR />
&lt;/head&gt;<BR />
&lt;body&gt;<BR />
&lt;h1&gt;HTTP Status 403 - CSRF nonce validation failed&lt;/h1&gt;<BR />
&lt;/body&gt;<BR />
&lt;/html&gt;</CODE></PRE><BR />
Oops! HTTP status code 403 with an error about CSRF nonce validation failure! In other words, our request to create a new workflow instance has been denied, despite sending the token that we were given.<BR />
<H4 id="toc-hId--212606272">Using the token with the correct session context</H4><BR />
Let's try that again, but this time we'll ask curl to capture cookies and store them, and then reuse them in the subsequent request:<BR />
<PRE class="language-markup"><CODE>curl \<BR />
  --user p481810 \<BR />
  --header "X-CSRF-Token: Fetch" \<BR />
  --cookie-jar cookiejar.dat \<BR />
  --verbose \<BR />
  <A href="https://bpmworkflowruntimewfs-p481810trial.hanatrial.ondemand.com/workflow-service/rest/v" target="test_blank" rel="nofollow noopener noreferrer">https://bpmworkflowruntimewfs-p481810trial.hanatrial.ondemand.com/workflow-service/rest/v</A><BR />
1/xsrf-token</CODE></PRE><BR />
Note the use of the --cookie-jar parameter, which result in the "Added cookie" messages in the output regarding&nbsp; cookies being added:<BR />
<PRE class="language-markup"><CODE>&gt; GET /workflow-service/rest/v1/xsrf-token HTTP/1.1<BR />
&gt; Host: bpmworkflowruntimewfs-p481810trial.hanatrial.ondemand.com<BR />
&gt; User-Agent: curl/7.52.1<BR />
&gt; Accept: */*<BR />
&gt; X-CSRF-Token: Fetch<BR />
&gt;<BR />
&lt; HTTP/1.1 200 OK<BR />
&lt; Cache-Control: private<BR />
&lt; Expires: Thu, 01 Jan 1970 00:00:00 UTC<BR />
* Added cookie JSESSIONID="2C505C957AD0B1E76BD0535F0AF66C10DD824F88F2FF5F3463DD56AF5020E8D0" for domain bpmworkflowruntimewfs-p481810trial.hanatrial.ondemand.com, path /workflow-service, expire 0<BR />
&lt; Set-Cookie: JSESSIONID=2C505C957AD0B1E76BD0535F0AF66C10DD824F88F2FF5F3463DD56AF5020E8D0; Path=/workflow-service; Secure; HttpOnly<BR />
* Added cookie JTENANTSESSIONID_p481810trial="iIN12zFf3bAmLNOQA3tuM4YVkPI2WgN060d0hgv%2B6W4%3D" for domain hanatrial.ondemand.com, path /, expire 0<BR />
&lt; Set-Cookie: JTENANTSESSIONID_p481810trial=iIN12zFf3bAmLNOQA3tuM4YVkPI2WgN060d0hgv%2B6W4%3D; Domain=.hanatrial.ondemand.com; Path=/; Secure; HttpOnly<BR />
&lt; X-CSRF-Token: 63BAF126EF5C164C1945D64192B6E2C6<BR />
&lt; X-Content-Type-Options: nosniff<BR />
&lt; Content-Length: 0<BR />
&lt; Date: Sun, 14 Jan 2018 16:51:44 GMT<BR />
&lt; Server: SAP<BR />
* Added cookie BIGipServer~jpaas_folder~bpmworkflowruntimewfs.hanatrial.ondemand.com="!kdw/bjE6WrgieXWwDhtcRsHHmTA76BykeAKzJSQCxdxLV7mHZYmet6Q6LvtTA6c9gdNjkRxfo0Gi4So=" for domain bpmworkflowruntimewfs-p481810trial.hanatrial.ondemand.com, path /, expire 0<BR />
&lt; Set-Cookie: BIGipServer~jpaas_folder~bpmworkflowruntimewfs.hanatrial.ondemand.com=!kdw/bjE6WrgieXWwDhtcRsHHmTA76BykeAKzJSQCxdxLV7mHZYmet6Q6LvtTA6c9gdNjkRxfo0Gi4So=; path=/; httponly; secure<BR />
&lt; Strict-Transport-Security: max-age=31536000; includeSubDomains; preload<BR />
&lt;</CODE></PRE><BR />
If you're like me, you'll want to see what's inside cookiejar.dat while reading this post. Here you go:<BR />
<PRE class="language-markup"><CODE># Netscape HTTP Cookie File<BR />
# <A href="https://curl.haxx.se/docs/http-cookies.html" target="test_blank" rel="nofollow noopener noreferrer">https://curl.haxx.se/docs/http-cookies.html</A><BR />
# This file was generated by libcurl! Edit at your own risk.<BR />
<BR />
#HttpOnly_bpmworkflowruntimewfs-p481810trial.hanatrial.ondemand.com     FALSE   /workflow-service       TRUE    0    JSESSIONID       2C505C957AD0B1E76BD0535F0AF66C10DD824F88F2FF5F3463DD56AF5020E8D0<BR />
#HttpOnly_.hanatrial.ondemand.com       TRUE    /       TRUE    0       JTENANTSESSIONID_p481810trial   iIN12zFf3bAmLNOQA3tuM4YVkPI2WgN060d0hgv%2B6W4%3D<BR />
#HttpOnly_bpmworkflowruntimewfs-p481810trial.hanatrial.ondemand.com     FALSE   /       TRUE    0       BIGipServer~jpaas_folder~bpmworkflowruntimewfs.hanatrial.ondemand.com !kdw/bjE6WrgieXWwDhtcRsHHmTA76BykeAKzJSQCxdxLV7mHZYmet6Q6LvtTA6c9gdNjkRxfo0Gi4So=</CODE></PRE><BR />
So now we have the cookies stored, let's set anew our CSRFTOKEN variable with the token just received:<BR />
<PRE><CODE>export CSRFTOKEN=63BAF126EF5C164C1945D64192B6E2C6</CODE></PRE><BR />
and retry the POST request, this time using those cookies captured just now with the --cookie-jar parameter:<BR />
<PRE class="language-markup"><CODE>curl \<BR />
  --user p481810 \<BR />
  --header "Content-Type: application/json" \<BR />
  --header "X-CSRF-Token: $CSRFTOKEN" \<BR />
  --cookie cookiejar.dat \<BR />
  --verbose \<BR />
  --data @data.json \<BR />
  <A href="https://bpmworkflowruntimewfs-p481810trial.hanatrial.ondemand.com/workflow-service/rest/v1/workflow-instances" target="test_blank" rel="nofollow noopener noreferrer">https://bpmworkflowruntimewfs-p481810trial.hanatrial.ondemand.com/workflow-service/rest/v1/workflow-instances</A> </CODE></PRE><BR />
Et voila:<BR />
<PRE class="language-markup"><CODE>&gt; POST /workflow-service/rest/v1/workflow-instances HTTP/1.1<BR />
&gt; Host: bpmworkflowruntimewfs-p481810trial.hanatrial.ondemand.com<BR />
&gt; User-Agent: curl/7.52.1<BR />
&gt; Accept: */*<BR />
&gt; Cookie: JSESSIONID=2C505C957AD0B1E76BD0535F0AF66C10DD824F88F2FF5F3463DD56AF5020E8D0; BIGipServer~jpaas_folder~bpmworkflowruntimewfs.hanatrial.ondemand.com=!kdw/bjE6WrgieXWwDhtcRsHHmTA76BykeAKzJSQCxdxLV7mHZYmet6Q6LvtTA6c9gdNjkRxfo0Gi4So=; JTENANTSESSIONID_p481810trial=iIN12zFf3bAmLNOQA3tuM4YVkPI2WgN060d0hgv%2B6W4%3D<BR />
&gt; Content-Type: application/json<BR />
&gt; Content-Length: 69<BR />
&gt;<BR />
&lt; HTTP/1.1 201 Created<BR />
&lt; X-Content-Type-Options: nosniff<BR />
&lt; Content-Type: application/json<BR />
&lt; Transfer-Encoding: chunked<BR />
&lt; Date: Sun, 14 Jan 2018 17:03:25 GMT<BR />
&lt; Server: SAP<BR />
&lt; Strict-Transport-Security: max-age=31536000; includeSubDomains; preload<BR />
&lt;<BR />
{<BR />
  "id":"d5bca4c9-f94c-11e7-a369-00163e4ef3ca",<BR />
  "definitionId":"testworkflow",<BR />
  "definitionVersion":"10",<BR />
  "subject":"TestWorkflow",<BR />
  "status":"RUNNING",<BR />
  "businessKey":"",<BR />
  "startedAt":"2018-01-14T17:03:25.686Z",<BR />
  "startedBy":"P481810",<BR />
  "completedAt":null<BR />
}</CODE></PRE><BR />
Phew - thank goodness for AJAX requests, that handle these cookie shenanigans for you!<BR />
<BR />
OK, I think that's enough for this post. We now understand how to initiate a new workflow instance, and understand what goes on under the hood.<BR />
<BR />
In the next installment, I'll take you through how I use <A href="https://www.getpostman.com/" target="_blank" rel="nofollow noopener noreferrer">Postman</A> and its environment features to provide me with a very comfortable debugging UI to explore the Workflow API and my data contained within it.<BR />
<BR />
Next post in this series: <A href="https://blogs.sap.com/2018/01/16/discovering-scp-workflow-using-postman/" target="_blank" rel="noopener noreferrer">Discovering SAP Workflow - Using Postman</A>.
---
Discovering SCP Workflow - The Monitor
technology-blog-members
2018-01-08
https://community.sap.com/t5/technology-blogs-by-members/discovering-scp-workflow-the-monitor/ba-p/13386215
2018-01-08-discovering-scp-workflow-the-monitor
Here are a few notes on the workflow monitor app that is part of the SAP Cloud Platform Workflow service.<BR />
<BR />
This post is part of a series, a guide to which can be found here: <A href="https://qmacro.org/blog/posts/2018/01/16/discovering-scp-workflow/" target="_blank" rel="nofollow noopener noreferrer">Discovering SCP Workflow.</A><BR />
<BR />
Once you've enabled the Workflow service (follow Christian Loos' two-part series "<A href="https://blogs.sap.com/2017/07/14/getting-started-with-the-workflow-service-in-the-free-trial-account-12/" target="_blank" rel="noopener noreferrer">Getting Started with the Workflow service in the free trial account</A>" here if you haven't), you'll have access to the My Inbox app. There's also a couple of tiles that actually lead to the same app - the monitor app - both with the title "Monitor Workflows":<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2018/01/inbox_home.jpg" /><BR />
<BR />
The data model supporting SAP Cloud Platform Workflow service has a concept of workflow definitions and workflow instances. If you guess at what they are, you're probably going to be correct: It's very similar to the relationship between classes and instances in object-oriented programming. The workflow is described in a definition (the flow of tasks from start to finish), and workflows are created and executed as instances of those definitions.<BR />
<H3 id="toc-hId-1036761510">The "bpmworkflowmonitor" app</H3><BR />
The monitor app, known more formally by its name "bpmworkflowmonitor", allows you to look at and interact with both workflow definitions and workflow instances. It does this in a rather lovely intertwined way, which I aspire to emulate in future UI5 apps for the Fiori Launchpad. Look at the Intent Navigation settings for each of the "Monitor Workflow - Workflow Definitions" and "Monitor Workflow - Workflow Instances" tiles; they are "bpmworkflowmonitor-DisplayDefinitions" and "bpmworkflowmonitor-DisplayInstances" respectively.<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2018/01/Screenshot-2018-01-08-at-19.33.20.png" /><BR />
<BR />
&nbsp;<BR />
<BR />
Scroll a little bit further down in the App Configuration shown here and you'll see that for both apps, the App Resource Details are the same:<BR />
<BR />
SAPUI5 Component: com.sap.bpm.monitorworkflow<BR />
HTML5 App Name: bpmworkflowmonitor<BR />
ComponentURL: /<BR />
<BR />
While we're here, note that these apps are provided via subscription (that's what the "<A href="https://sapui5.hana.ondemand.com/test-resources/sap/m/demokit/iconExplorer/webapp/index.html#/?tab=grid&amp;search=cloud&amp;icon=download-from-cloud" target="_blank" rel="nofollow noopener noreferrer">download-from-cloud</A>" icon denotes), from an SAP-owned subaccount. It's like having a pointer, or symbolic link, to something, instead of that thing itself.<BR />
<BR />
This intertwining is evident in a few ways, notably the seamless jump between a workflow instance and its definition, for example. When viewing a workflow instance, the Definition ID ("untappdrecommendation") is shown as a link:<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2018/01/Screenshot-2018-01-08-at-19.39.54.png" /><BR />
<BR />
&nbsp;<BR />
<BR />
... which, when clicked, leads to the workflow definition:<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2018/01/Screenshot-2018-01-08-at-19.40.09.png" /><BR />
<BR />
&nbsp;<BR />
<BR />
Furthermore, the "Show Instances" button at the bottom of the detail for the workflow definition ...<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2018/01/Screenshot-2018-01-08-at-19.43.24.png" /><BR />
<BR />
leads back to the workflow instances for that definition, via a filter on the master list as you can see in the earlier screenshot. Very nicely done.<BR />
<BR />
&nbsp;<BR />
<H3 id="toc-hId-840248005">Execution Logs</H3><BR />
In the display of a workflow instance, there's an execution log visible. A simple one might look like this:<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2018/01/Screenshot-2018-01-08-at-19.49.00.png" /><BR />
<BR />
This particular workflow definition is very simple, and this is reflected in the log. In the definition there's a start, an end, and a User Task, thus:<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2018/01/Screenshot-2018-01-08-at-19.51.33.png" /><BR />
<BR />
The "StartEvent1" is represented by the execution log item "P481810 started the workflow" and the User Task "Untappd Beer Recommendations" is represented by the execution log item "Task ... available". All well and good, but if you're like me, you would like to see how the data model as presented by the&nbsp;<A href="https://api.sap.com/shell/discover/contentpackage/SAPCPWorkflowAPIs/api/SAP_CP_Workflow" target="_blank" rel="noopener noreferrer">SAP Cloud Platform Workflow API</A>&nbsp;relates to this in a little more detail.<BR />
<BR />
The API exposes entities that are core to the Workflow service:<BR />
<BR />
Workflow Definitions<BR />
Workflow Instances<BR />
User Task Instances<BR />
Messages<BR />
<BR />
and a couple of utility endpoints:<BR />
<BR />
XSRF Handling<BR />
Data Export<BR />
<BR />
User Task instances are special, because they're involved in processing beyond the confines of the workflow flow itself. User tasks appear in the unified inbox (appearing as the My Inbox app in the Fiori Launchpad) and can have custom UIs to present the workflow instance's context and allow decisions or actions to be taken. User tasks also have recipients, as can be seen in the screenshot above.<BR />
<H3 id="toc-hId-643734500">Extending the Execution Log display</H3><BR />
Seeing details from the API entities beyond the user-facing information is helpful if you're on that journey of discovery. <A href="http://www.clivebanks.co.uk/THHGTTG/THHGTTGradio12.htm" target="_blank" rel="nofollow noopener noreferrer">Or so it seems to me</A>. So I took the "bpmworkflowmonitor" app and created my own version, gently extending that part of it that handles the display of the Execution Log to show more information that's fetched from the API. After all, it's the Workflow API that the monitor app uses at its core anyway!<BR />
<BR />
There are no extension points available in the code base, but then again, I don't think there was an expectation that fools like me would want to meddle with it.<BR />
<BR />
Perusing the "bpmworkflowmonitor" app codebase is educational and worth spending a few coffee breaks doing. You'll come across the part that handles the construction of the Execution Log display in the InstancesDetail.view.xml view definition. There's an innocuous looking Object Page Section that looks like this:<BR />
<PRE><CODE>&lt;uxap:ObjectPageSection id="executionLogSection" title="{i18n&gt;INSTANCES_DETAIL_EXECUTION_LOG_HEADER}"&gt;<BR />
 &lt;uxap:subSections&gt;<BR />
 &lt;uxap:ObjectPageSubSection&gt;<BR />
 &lt;uxap:blocks&gt;<BR />
 &lt;core:Fragment fragmentName="com.sap.bpm.monitorworkflow.view.fragments.ExecutionLog" type="XML"/&gt;<BR />
 &lt;/uxap:blocks&gt;<BR />
 &lt;/uxap:ObjectPageSubSection&gt;<BR />
 &lt;/uxap:subSections&gt;<BR />
&lt;/uxap:ObjectPageSection</CODE></PRE><BR />
This references a fragment that describes a Timeline control, where the content aggregation (the time line items) is bound to the execution log items for the particular workflow instance being displayed. The template for this aggregation binding is, not unexpectedly, a Timeline Item control, which offers the possibility of embedding a custom control for display of whatever is appropriate for each given item.<BR />
<BR />
And it's here that the "bpmworkflowmonitor" app sports a custom control, in the form of the ExecutionLogItem.js file in the controls directory:<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2018/01/Screenshot-2018-01-08-at-20.14.29.png" /><BR />
<BR />
Examining the code within this custom control, we come across the setEventType function which determines what appears within this custom control, and in turn, this appears in the bottom section of each of the timeline items. It is this code that determines, for example, that the "Recipients" and "Initiator" sections appeared at the bottom of the User Task execution log item earlier.<BR />
<BR />
The relevant code looks like this:<BR />
<PRE><CODE>... <BR />
} else if (sEventType === "USERTASK_CREATED") {<BR />
  var oContainer = new VBox();<BR />
  oContainer.addItem(this._createUserListControl());<BR />
  oContainer.addItem(this._createOptionalLabelWithText(I18n.getText("EXECUTION_LOG_INITIATOR_LABEL"), "{wfilog&gt;initiatorId}"));<BR />
  this.setContent(oContainer);<BR />
}<BR />
...<BR />
</CODE></PRE><BR />
What would be useful to me would be to see exactly what event type IDs each of the execution log items had, and for User Task items, what the task instance ID was (so I could go over to <A href="https://www.getpostman.com/" target="_blank" rel="nofollow noopener noreferrer">Postman</A> and dig into the details by interacting with the Workflow API directly ... but that's a story for another day, perhaps).<BR />
<BR />
So I <A href="https://gitlab.com/qmacro/bpmworkflowmonitor" target="_blank" rel="nofollow noopener noreferrer">extended</A>&nbsp;the setEventType function to add this bit at the end:<BR />
<PRE><CODE>/**<BR />
 * Add label showing event type if we can. Following the VBox-as-container pattern here.<BR />
 * First, we'll create a VBox with a Label/Text showing the event type, optionally <BR />
 * adding anothe Label/Text combo to show the task ID if appropriate. <BR />
 * Then:<BR />
 * - if there's no content, we'll set that new VBox as the content<BR />
 * - if there's content but it's not a VBox, we'll set the new VBox as content,<BR />
 * adding the existing content to it<BR />
 * - otherwise it's a VBox so just add the new Label/Text to that<BR />
 */<BR />
var oTypeInfo = this._createOptionalLabelWithText(I18n.getText("EVENT_TYPE_LABEL"), "{wfilog&gt;type}"),<BR />
 oTaskIdInfo = this._createOptionalLabelWithText(I18n.getText("TASK_ID_LABEL"), "{wfilog&gt;taskId}"),<BR />
 oVBox = new VBox({ items : [ oTypeInfo ] }),<BR />
 oContentControl = this.getContent();<BR />
if (!oContentControl) {<BR />
 this.setContent(oVBox);<BR />
} else if (oContentControl.getMetadata().getName() === "sap.m.VBox") {<BR />
 oContentControl.addItem(oTypeInfo);<BR />
 oVBox = oContentControl;<BR />
} else {<BR />
 this.setContent(oVBox.addItem(oContentControl));<BR />
}<BR />
if (sEventType === "USERTASK_CREATED") {<BR />
 oVBox.addItem(oTaskIdInfo);<BR />
}</CODE></PRE><BR />
I also added a couple of i18n resources. You can see the changes properly here in <A href="https://gitlab.com/qmacro/bpmworkflowmonitor/commit/64592ba1cf1d5cdbc44db9b77026835bd4a69c59" target="_blank" rel="nofollow noopener noreferrer">this commit</A>, specifically in the controls/ExecutionLogItem.js and i18n/i18n.properties files.<BR />
<BR />
Once I deployed my version to my SCP trial account, I registered it in my Fiori Launchpad, making it available as a new app "Workflow Monitor - Custom":<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2018/01/Screenshot-2018-01-08-at-20.25.56.png" /><BR />
<BR />
and it gives me what I was looking for - extra detail in the Execution Log:<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2018/01/Screenshot-2018-01-08-at-20.27.58.png" /><BR />
<BR />
This data ties up exactly with what's available via the Workflow API (retrieved via Postman):<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2018/01/Screenshot-2018-01-08-at-20.30.01.png" /><BR />
<BR />
With that, my journey of discovery related to the SAP Cloud Platform Workflow service is a little bit clearer. Hopefully this might help you on your journey too.<BR />
<BR />
Next post in this series:&nbsp;<A href="https://blogs.sap.com/2018/01/14/discovering-scp-workflow-instance-initiation/" target="_blank" rel="noopener noreferrer">Discovering SCP Workflow â Instance Initiation</A>.<BR />
<BR />
&nbsp;
---
SAP on the Google Cloud - exploring the possibilities
technology-blog-members
2017-03-09
https://community.sap.com/t5/technology-blogs-by-members/sap-on-the-google-cloud-exploring-the-possibilities/ba-p/13319576
2017-03-09-sap-on-the-google-cloud-exploring-the-possibilities
<I><SPAN style="font-weight: 400">The era of the software defined datacentre is truly upon us. The </SPAN></I><A href="http://www.bluefinsolutions.com/blogs/lloyd-palfrey/march-2017/sap-on-google-cloud-platform-three-magic-number" target="_blank" rel="nofollow noopener noreferrer"><I><SPAN style="font-weight: 400">announcement from Google yesterday</SPAN></I></A><I><SPAN style="font-weight: 400">, with the ability to manage and run SAP systems on their Compute Engine infrastructure, inspired us to look into what the already-established Compute Engine API offers us, and have a bit of fun in the process. </SPAN></I><BR />
<BR />
<B>Devops &amp; use cases</B><BR />
<BR />
<SPAN style="font-weight: 400">With the advent of developer operations, or "</SPAN><A href="http://www.bluefinsolutions.com/blogs/dj-adams/february-2017/reaching-out-to-the-new-new-kingmakers" target="_blank" rel="nofollow noopener noreferrer"><SPAN style="font-weight: 400">devops</SPAN></A><SPAN style="font-weight: 400">", Basis and developer activities are no longer separate, but are often carried out together. Considering this modern proximity and the possibilities it offers, here are a couple of use cases where access to an API at this level would really bring value with the ability to directly control virtual machine instances:</SPAN><BR />
<BR />
<SPAN style="font-weight: 400">Cost saving: A typical SAP environment will have many tiers: Sandbox, Development, Quality Assurance, Training, Pre-Production and Production being the most typical. Some of these tiers will be used constantly (Production, obviously), but others less frequently. Imagine giving your key developers or super users the ability to startup or shutdown the Quality Assurance or Training systems without needing to seek approval or finding the right person to do it. This has the potential to result in significant cost savings, in Virtual Machine (VM) running costs as well as from a process perspective.</SPAN><BR />
<BR />
<SPAN style="font-weight: 400">On-demand performance boost: Consider the scenario where you have a number of batch processes running at given times during the day and those processes can impact your end users. Rather than have your end users compete for processing power on the existing instances of your Production system, spin up a few ad-hoc instances that are appropriate for the workload, use them for the batch run, and then shut them down again. Automatically.</SPAN><BR />
<BR />
<B>Taking the API for a spin</B><BR />
<BR />
<SPAN style="font-weight: 400">The </SPAN><A href="https://cloud.google.com/compute/docs/reference/latest/" target="_blank" rel="nofollow noopener noreferrer"><SPAN style="font-weight: 400">Compute Engine API</SPAN></A><SPAN style="font-weight: 400"> is multi-faceted and can be invoked in different ways: a REST-based HTTP interface is one way, and a command-line tool "gcloud" is another. We thought we'd kick these use case tyres and flex our ABAP fingers to put together a simple way to programatically start up and shut down SAP systems on the Google Cloud.</SPAN><BR />
<BR />
<SPAN style="font-weight: 400">You can play along too - the source code is available in this public </SPAN><A href="https://git.bluefinsolutions.com/mud-public/ABAPGcloud" target="_blank" rel="nofollow noopener noreferrer"><SPAN style="font-weight: 400">ABAPGcloud</SPAN></A><SPAN style="font-weight: 400"> repository. </SPAN><BR />
<BR />
<SPAN style="font-weight: 400">Just make sure that your SAP system is set to start on boot up, and that your VM is given full access to the Google API:</SPAN><BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2017/03/Screen-Shot-2017-03-09-at-10.55.16.png" height="109" width="289" /><BR />
<BR />
<SPAN style="font-weight: 400">Also, you'll want to deploy the ABAP mechanism to a system that will be up the whole time. Systems in the Production or Development tiers are good candidates.</SPAN><BR />
<BR />
<B>ABAP's not dead - it's controlling the cloud</B><BR />
<BR />
<SPAN style="font-weight: 400">Here's a short video of the solution in action - via the ABAP code, the Google Cloud VM instances can be listed, and started &amp; stopped. Simple!</SPAN><BR />
<BR />
<IFRAME width="560" height="315" src="https://www.youtube.com/embed/RuyRHRIVj3A" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen=""></IFRAME><BR />
<BR />
<SPAN style="font-weight: 400">The code is available via ABAPgit in a repository on our public-facing Mobility, UX &amp; Development Centre of Excellence (MUD COE) server:</SPAN><BR />
<BR />
<A href="https://git.bluefinsolutions.com/mud-public/ABAPGcloud/tree/master" target="_blank" rel="nofollow noopener noreferrer"><SPAN style="font-weight: 400"></SPAN></A><A href="https://git.bluefinsolutions.com/mud-public/ABAPGcloud/tree/master" target="test_blank" rel="nofollow noopener noreferrer">https://git.bluefinsolutions.com/mud-public/ABAPGcloud/tree/master</A><BR />
<BR />
<SPAN style="font-weight: 400">Here's a quick rundown of how the parts work together, by the author of this demo, Gregor Brett, our very own ABAP and Google Cloud API extraordinaire!</SPAN><BR />
<BR />
<SPAN style="font-weight: 400">It's using the "gcloud" command, which is available without further ado as long as API access has been granted as described above. The command is invoked via the classic "external command" facility (defined in transaction SM69) and programmatically via the SXPG_CALL_SYSTEM function. </SPAN><BR />
<BR />
<SPAN style="font-weight: 400">There are two main building blocks. The first is a global class </SPAN><A href="https://git.bluefinsolutions.com/mud-public/ABAPGcloud/blob/master/zcl_gcloud.clas.abap" target="_blank" rel="nofollow noopener noreferrer"><SPAN style="font-weight: 400">ZCL_GCLOUD</SPAN></A><SPAN style="font-weight: 400"> which wraps the external command facility in a usable package that allows Google Cloud VM instances to be listed, started and stopped. </SPAN><BR />
<BR />
<SPAN style="font-weight: 400">The second is a simple report </SPAN><A href="https://git.bluefinsolutions.com/mud-public/ABAPGcloud/blob/master/zgcloud.prog.abap" target="_blank" rel="nofollow noopener noreferrer"><SPAN style="font-weight: 400">ZGCLOUD</SPAN></A><SPAN style="font-weight: 400"> that utilises the global class. It creates an instance of that class pointing to our test Google Cloud Compute Engine project, where we have our VMs. It then uses the global class to initially retrieve the VM instances available, and displays them in classic ABAP List View (ALV) style. It also presents 'start' and 'stop' options which use the global class again to start or stop the VM instances selected.</SPAN><BR />
<BR />
<SPAN style="font-weight: 400">You can imagine that instead of this simple report, use of the global class could be embedded in an automated process that would fit well with the use cases described above.</SPAN><BR />
<BR />
<B>Over to you</B><BR />
<BR />
<SPAN style="font-weight: 400">The next step is up to you. How about exploring the REST approach to using the API? How might you improve the sample code? What other use cases can you come up with? Having the combination of simplicity and power at your fingertips is intoxicating. At least for people like you and me. So get creative and start exploring!</SPAN>
---
Understanding SAP Fiori Webinar - The Director's Cut
technology-blog-members
2014-06-20
https://community.sap.com/t5/technology-blogs-by-members/understanding-sap-fiori-webinar-the-director-s-cut/ba-p/13108593
2014-06-20-understanding-sap-fiori-webinar-the-director-s-cut
<DIV class="jive-rendered-content"><P>Yesterday <SPAN class="mention-scrubbed">brenton.ocallaghan</SPAN> and I hosted a public webinar "<A class="jive-link-external-small" href="http://www.bluefinsolutions.com/About-us/News-and-Media/Events/Webinar-Understanding-SAP-Fiori/" target="_blank" rel="nofollow noopener noreferrer">Understanding SAP Fiori</A>", which was well attended and also a lot of fun to do. There was never going to be enough time to cover all the stuff we wanted to, so today we sat down together and followed up on what we covered in the webinar.</P><P></P><P>We recorded it as a Google+ Hangout and published it on YouTube.</P><P></P><P>Here are some of the things that we covered:</P><P></P><UL><LI>SAP Fiori transactional app design</LI><LI>master detail patterns with responsive containers</LI><LI>the structure of a transactional app</LI><LI>components, with routing and the visible control</LI><LI>the responsive container and its aggregations</LI><LI>semantic colours for Buttons and other controls</LI><LI>responsive design and the demandPopin property</LI><LI>the SplitApp modes</LI><LI>examining the S2 and S3 views</LI><LI>extension points</LI></UL><P></P><P><SPAN style="font-size: 10pt">plus a small update to the <A class="jive-link-external-small" href="https://code.bluefinsolutions.com/~dadams/FioriWebinar/AppAnalysis.html" target="_blank" rel="nofollow noopener noreferrer">SAP Fiori App Analysis app</A> - select an app from the list to get a popup with more information, including a link to the official SAP docu for the selected app. (For more background on this app, see another short video "<A class="jive-link-external-small" href="https://www.youtube.com/watch?v=aVeQ4adHgaY" target="_blank" rel="nofollow noopener noreferrer">The SAP Fiori App Analysis application</A>" also on YouTube.)</SPAN></P><P></P><P></P><P>It was a fun 30+ minutes, we hope you enjoy it too!</P><P></P><P><IFRAME id="kaltura_player_1_p5s5dr9z" src="https://www.youtube.com/embed/MlPmRO4SH-o" allowfullscreen="true" webkitallowfullscreen="" mozallowfullscreen="" width="625px" height="360px" frameborder="0"></IFRAME></P><P></P><P><A class="jive-link-external-small" href="https://www.youtube.com/watch?v=MlPmRO4SH-o" target="_blank" rel="nofollow noopener noreferrer">Bluefin Solutions - Understanding SAP Fiori Webinar Followup</A></P></DIV>
---
SAP Developer Advisory Board - Your Input!
additional-blog-members
2014-04-20
https://community.sap.com/t5/additional-blogs-by-members/sap-developer-advisory-board-your-input/ba-p/13064206
2014-04-20-sap-developer-advisory-board-your-input
<DIV class="jive-rendered-content"><P><SPAN class="mention-scrubbed">gregor.wolf4</SPAN> and I are attending the <A class="jive-link-external-small" href="http://board.sapdevcenter.com/" target="_blank" rel="nofollow noopener noreferrer">SAP Developer Advisory Board</A> meeting on Tue 22 Apr 2014.</P><P></P><P>We'd like to ask you, as members of the general SAP Developer Community, for your thoughts. There isn't a particular agenda or categorisation we'd like to impose here, we just want to make it open enough for you to write what you think.</P><P></P><P><A class="jive-link-external-small" href="https://docs.google.com/forms/d/1XqpKAuj4Xs8vuwy8h0XnxveDP6tZEdeMEuDZeFR6yJI/viewform" target="_blank" rel="nofollow noopener noreferrer">Here's a form where you can add your thoughts</A></P><P></P><P>We can't of course guarantee that there will be enough time to air all the questions but we'll do our best!</P><P></P><P>Thank you.</P></DIV>
---
Small steps: OpenUI5 toolkit now in jsbin.com
technology-blog-members
2014-03-04
https://community.sap.com/t5/technology-blogs-by-members/small-steps-openui5-toolkit-now-in-jsbin-com/ba-p/13090678
2014-03-04-small-steps-openui5-toolkit-now-in-jsbin-com
<DIV class="jive-rendered-content"><P>In our continued efforts to spread the word of SAPUI5 in general and OpenUI5 in particular, we try to make small steps forward.</P><P></P><P>Here's some quick news about a small step forward with respect to example and demonstration code snippets: <A class="jive-link-external-small" href="http://jsbin.com/" target="_blank" rel="nofollow noopener noreferrer">jsbin.com</A> now supports the automatic insertion of the OpenUI5 bootstrap. Select the "Add library" menu option, choose the OpenUI5 entry:</P><P></P><P><IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2014/03/jsbin1_402560.jpg" width="620" /></P><P></P><P>and lo, the bootstrap script tag is inserted, ready for you to go:</P><P></P><P><IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2014/03/jsbin2_402561.jpg" width="620" /></P><P><A class="jive-link-external-small" href="http://jsbin.com/" target="_blank" rel="nofollow noopener noreferrer">Have a go for yourself</A>!</P><P></P><P><A class="jive-link-blog-small" href="https://blogs.sap.com/?p=103045" target="_blank" rel="noopener noreferrer">Reaching out</A> and bringing the SAP and non-SAP developer communities closer, one small step at a time.</P><P></P><P>And if you're interested in how this came about, see this pull request on Github: <A class="jive-link-external-small" href="https://github.com/jsbin/jsbin/pull/1220" target="_blank" rel="nofollow noopener noreferrer">https://github.com/jsbin/jsbin/pull/1220</A></P><P></P><P>Share &amp; enjoy!</P></DIV>
---
Reaching Out
technology-blog-sap
2014-03-02
https://community.sap.com/t5/technology-blogs-by-sap/reaching-out/ba-p/13085838
2014-03-02-reaching-out
<DIV class="jive-rendered-content"><P>As a technology company SAP is over 4 decades old. Over that time it's innovated at a tremendous pace, and along the way it has abstracted, invented and reinvented technologies like no other company I know. In parallel with this, there's been an incredible growth in community, business and technical. In this post I want to focus on the technical.</P><P></P><P>The oft unspoken status quo with the SAP technical community is that the members operate within a bubble. It's a very large and comfortable bubble that powers and is powered by the activity within; folks like you and me learning, arguing, corresponding and building within communities like this one - the SAP Community Network. We have SAP TechEd, which is now called d-code. We have SAP Inside Tracks. We have InnoJams, DemoJams and University Alliance events too. Every one of these events, and event types, are great and should continue. But there's a disconnect that I feel is moving closer to the surface, becoming more obvious. This disconnect is that this bubble, this membrane that sustains us, is in many areas non-permeable.</P><P></P><P>There are folks who operate on both sides of that bubble's surface. Folks that attend technology conferences that are not SAP related. Folks that are involved in developer communities that have their roots outside the SAP developer ecosphere. Folks that write on topics that are not directly related to SAP technologies (but with a short leap of imagination surely are). But these folks are the exception.</P><P></P><P>SAP's progress in innovation has been slowly turning the company's technology inside out. Moving from the proprietary to the de facto to the standard. Embracing what's out there, what's outside the bubble. HTTP. <A class="jive-link-blog-small" href="https://blogs.sap.com/?p=39550" target="_blank" rel="noopener noreferrer">REST-informed</A> approaches to integration. <A class="jive-link-blog-small" href="https://blogs.sap.com/?p=75200" target="_blank" rel="noopener noreferrer">OData</A>. JavaScript and browser-centric applications. Yes, in this last example I'm thinking of SAP's <A class="jive-link-external-small" href="https://blogs.sap.com/scn.sap.com/community/developer-center/front-end" target="_blank" rel="noopener noreferrer">UI5</A>. In particular I'm thinking about what SAP are doing with <A class="jive-link-external-small" href="http://sap.github.io/openui5/" target="_blank" rel="nofollow noopener noreferrer">OpenUI5</A> - open sourcing the very toolkit that powers <A class="jive-link-external-small" href="http://www.bluefinsolutions.com/insights/blog/sap_ui_5_the_future_direction_of_sap_ui_development/" target="_blank" rel="nofollow noopener noreferrer">SAP's future direction of UI development</A>. With that activity, SAP and the UI5 teams are reaching out to the wider developer ecospheres, to the developer communities beyond our bubble. If nothing else, we need these non-SAP developers to join with us to build out the next decade.</P><P></P><P>I try to play my part, and have done for a while. I've spoken at OSCON, JabberConf, FOSDEM and other conferences over the years, and attended others such as Strata and Google I/O too. I've been an active participant in various non-SAP tech communities in areas such as Perl, XMPP and Google technologies. This is not about me though, it's about us, the SAP developer community as a whole. What can we do to burst the bubble, to help our ecosphere and encourage SAP to continue its journey outwards? One example that's close to my heart is to encourage <A class="jive-link-external-small" href="http://stackoverflow.com/questions/tagged/ui5%20or%20sapui5%20or%20openui5" target="_blank" rel="nofollow noopener noreferrer">quality Q&amp;A on the subject of UI5 on the Stack Overflow site</A>. But that's just one example.</P><P></P><P>How can we reach out to the wider developer ecosphere? If we do it, and do it with the right intentions, everybody wins.</P><P></P><P></P><P><STRONG>Update 04 Mar 2014</STRONG></P><P></P><P>The massively popular code sharing and collaboration site <A class="jive-link-external-small" href="http://jsbin.com/" target="_blank" rel="nofollow noopener noreferrer">jsbin.com</A> now supports OpenUI5 bootstrapping. <A class="jive-link-blog-small" href="https://blogs.sap.com/?p=103189" target="_blank" rel="noopener noreferrer">Read this post for more details</A>. Step by step!</P></DIV>
---
Mocking up the Payroll Control Center Fiori App
technology-blog-members
2014-02-16
https://community.sap.com/t5/technology-blogs-by-members/mocking-up-the-payroll-control-center-fiori-app/ba-p/13091183
2014-02-16-mocking-up-the-payroll-control-center-fiori-app
<DIV class="jive-rendered-content"><P>Following on from a great debate about Fiori and Freeori that stemmed from a <A class="jive-link-external-small" href="http://diginomica.com/2014/02/05/sap-fiori-freeori/" target="_blank" rel="nofollow noopener noreferrer">post</A> by <SPAN class="mention-scrubbed">applebyj</SPAN> there were some comments about HCM app renewals. Latterly <SPAN class="mention-scrubbed">john.moy</SPAN> <A class="jive-link-external-small" href="http://diginomica.com/2014/02/05/sap-fiori-freeori/?hubRefSrc=permalink#lf_comment=138216341" target="_blank" rel="nofollow noopener noreferrer">pointed out</A> a post "<A class="jive-link-external-small" href="https://blogs.sap.com/?p=101981" target="_blank" rel="noopener noreferrer">Improve payroll data validation with SAP Payroll control center add-on</A>" where some very Fiori-like UIs were being shown.</P><P></P><H2 id="toc-hId-822565158">Coffee Time</H2><P></P><P>I thought it would be a nice little coffee-time exercise to try and reproduce one of the Fiori app pages shown in the screenshots in that post:</P><P></P><P><IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2014/02/pic_1_389010.png" /></P><P>So I did, and as I did it I recorded it to share. I thought I'd write a few notes here on what was covered, and there's a link to the video and the code at the end.</P><P></P><H3 id="toc-hId-755134372">Developer tools</H3><P></P><UL><LI>I'm using the excellent editor <A class="jive-link-external-small" href="http://www.sublimetext.com/" target="_blank" rel="nofollow noopener noreferrer">Sublime Text</A><SPAN style="font-size: 10pt">.</SPAN></LI></UL><P><SPAN style="font-size: 10pt"><BR /></SPAN></P><UL><LI>With that editor I'm using the <A class="jive-link-external-small" href="https://github.com/qmacro/SublimeUI5" target="_blank" rel="nofollow noopener noreferrer">SublimeUI5</A> package which gives me UI5 flavoured snippets and templates.</LI></UL><P></P><UL><LI>Specifically I started out with the "<A class="jive-link-external-small" href="https://github.com/qmacro/SublimeUI5/blob/master/Snippets/indexmspmvc.html.sublime-snippet" target="_blank" rel="nofollow noopener noreferrer">indexmspmvc</A>" snippet (Index Mobile Single-Page MVC) which gives me everything I need to build MVC-based examples with XML views, controllers, and more ... all in a single page, a single file. Not recommended for productive use, but extremely useful for testing and demos.</LI></UL><P></P><H3 id="toc-hId-558620867">In-line XML views</H3><P></P><P>The XML views in this single-page MVC are defined in a special script tag</P><P></P><PRE class="language-xml"><CODE><BR />
&lt;script id="view1" type="sapui5/xmlview"&gt;<BR />
&nbsp;&nbsp;&nbsp; &lt;mvc:View<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; controllerName="local.controller"<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; xmlns:mvc="sap.ui.core.mvc"<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; xmlns="sap.m"&gt;<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ${6:&lt;!-- Add your XML-based controls here --&gt;}<BR />
&nbsp;&nbsp;&nbsp; &lt;/mvc:View&gt;<BR />
&lt;/script&gt;<BR />
<BR />
<BR />
<BR />
<BR />
<BR />
</CODE></PRE><P>and then picked up in the view instantiation with like this:</P><P></P><PRE class="language-xml"><CODE><BR />
var oView = sap.ui.xmlview({<BR />
&nbsp;&nbsp;&nbsp; viewContent: jQuery('#view1').html()<BR />
})<BR />
<BR />
<BR />
<BR />
<BR />
<BR />
</CODE></PRE><H3 id="toc-hId-362107362">Controls Used</H3><P></P><P>This is a Fiori UI, so the controls used are from the sap.m library.</P><P></P><UL><LI>I'm using a <A class="jive-link-external-small" href="https://sapui5.hana.ondemand.com/sdk/#docs/api/symbols/sap.m.Page.html" target="_blank" rel="nofollow noopener noreferrer">Page</A> within an <A class="jive-link-external-small" href="https://sapui5.hana.ondemand.com/sdk/#docs/api/symbols/sap.m.App.html" target="_blank" rel="nofollow noopener noreferrer">App</A>.</LI></UL><P></P><UL><LI>That Page's content is a single control, an <A class="jive-link-external-small" href="https://sapui5.hana.ondemand.com/sdk/#docs/api/symbols/sap.m.IconTabBar.html" target="_blank" rel="nofollow noopener noreferrer">IconTabBar</A><SPAN style="font-size: 10pt">.</SPAN></LI></UL><P><SPAN style="font-size: 10pt"><BR /></SPAN></P><UL><LI>There are three <A class="jive-link-external-small" href="https://sapui5.hana.ondemand.com/sdk/#docs/api/symbols/sap.m.IconTabFilter.html" target="_blank" rel="nofollow noopener noreferrer">IconTabFilter</A>s in the IconTabBar's items aggregation, each with the <A class="jive-link-external-small" href="https://sapui5.hana.ondemand.com/sdk/#docs/api/symbols/sap.m.IconTabFilterDesign.html#.Horizontal" target="_blank" rel="nofollow noopener noreferrer">Horizontal</A> design.</LI></UL><P></P><UL><LI>I've put the <A class="jive-link-external-small" href="https://sapui5.hana.ondemand.com/sdk/#docs/api/symbols/sap.m.StandardTile.html" target="_blank" rel="nofollow noopener noreferrer">StandardTile</A> controls inside a <A class="jive-link-external-small" href="https://sapui5.hana.ondemand.com/sdk/#docs/api/symbols/sap.m.FlexBox.html" target="_blank" rel="nofollow noopener noreferrer">FlexBox </A>(using <A class="jive-link-external-small" href="https://sapui5.hana.ondemand.com/sdk/test-resources/sap/m/demokit/explored/index.html#/sample/flexBoxBasicAlignment" target="_blank" rel="nofollow noopener noreferrer">Basic Alignment</A>); the FlexBox's items aggregation is bound to the "items" collection in my JSON data model.</LI></UL><P></P><UL><LI>For the info and infoState properties of the StandardTile I'm using a couple of <A class="jive-link-external-small" href="https://sapui5.hana.ondemand.com/sdk/#docs/guide/BindingProperties.html" target="_blank" rel="nofollow noopener noreferrer">custom formatters</A><SPAN style="font-size: 10pt">.</SPAN></LI></UL><P><SPAN style="font-size: 10pt"><BR /></SPAN></P><H2 id="toc-hId-36511138">Video</H2><P></P><P><IFRAME id="kaltura_player_1_p5s5dr9z" src="https://www.youtube.com/embed/RJ8Kg14vhdE" allowfullscreen="true" webkitallowfullscreen="" mozallowfullscreen="" width="625px" height="360px" frameborder="0"></IFRAME></P><P></P><P></P><H2 id="toc-hId--160002367">Code</H2><P></P><P>I have of course made the code available, in the <A class="jive-link-external-small" href="https://github.com/qmacro/sapui5bin" target="_blank" rel="nofollow noopener noreferrer">sapui5bin</A> repo on Github:</P><P></P><P><A class="jive-link-external-small" href="https://github.com/qmacro/sapui5bin/blob/master/SinglePageExamples/PayrollControlCenterMockup.html" target="_blank" rel="nofollow noopener noreferrer">https://github.com/qmacro/sapui5bin/blob/master/SinglePageExamples/PayrollControlCenterMockup.html</A></P><P></P><P>Share and enjoy!</P></DIV>
---
Public SAP Mentor Monday 24 Mar 2014: UI5 with Andreas Kunz
technology-blog-members
2014-02-13
https://community.sap.com/t5/technology-blogs-by-members/public-sap-mentor-monday-24-mar-2014-ui5-with-andreas-kunz/ba-p/13085081
2014-02-13-public-sap-mentor-monday-24-mar-2014-ui5-with-andreas-kunz
<DIV class="jive-rendered-content"><P>On <STRONG>Monday 24 March 2014</STRONG> we will have a public SAP Mentor Monday session on the subject of <STRONG>UI5</STRONG>.</P><P></P><P><STRONG style="font-size: 12pt">UPDATE 25/03/2014: <A class="jive-link-external-small" href="http://pipetree.com/qmacro/blog/2014/03/sap-mentor-monday-on-ui5-links/" target="_blank" rel="nofollow noopener noreferrer">Links to the recording and items mentioned in this session are available</A>.</STRONG></P><P></P><P>For those of you who don't know, a public SAP Mentor Monday is an hour-long webinar format where everyone is invited and the subject is a specific topic. The subject of this public SAP Mentor Monday is UI5. That is to say, <A class="jive-link-external-small" href="https://sapui5.hana.ondemand.com/sdk/#content/Overview.html" target="_blank" rel="nofollow noopener noreferrer">SAPUI5</A> and <A class="jive-link-external-small" href="http://sap.github.io/openui5/" target="_blank" rel="nofollow noopener noreferrer">OpenUI5</A> - the licenced and open source versions both. UI5 is the toolkit that is powering the UI/UX revolution at SAP, and we have a special guest that will join us from the UI5 team in Walldorf - Andreas Kunz.</P><P></P><P>These are exciting times for SAP, and for me there's no place nearer the epicentre of the visible renewal than UI5.</P><P></P><P>Join the webinar to hear about and discuss UI5, with folk who share your interest. I'll be hosting it, and if you want to submit questions in advance, you can do so using <A class="jive-link-external-small" href="https://docs.google.com/forms/d/1rHqKtSzVi4LWksdLaDwEWF8_FdLNv5ztdYcKr5YnJac/viewform" target="_blank" rel="nofollow noopener noreferrer">this form</A>.</P><P></P><P>Hope to see you there!</P><P></P><P><SPAN style="color: #339966"><STRONG>NOTE: Time is now confirmed: 2000 - 2100 CET.</STRONG></SPAN></P><P></P><P style="margin-bottom: 1em;color: #333333;font-family: arial, helvetica, clean, sans-serif;font-size: 12.727272033691406px"><SPAN style="font-family: inherit;font-style: inherit;font-weight: 900">Link to SAP Connect Session: <A class="jive-link-external-small" href="https://sap.na.pgiconnect.com/sapmm" target="_blank" rel="nofollow noopener noreferrer">https://sap.na.pgiconnect.com/sapmm</A> +1-866-312-7353</SPAN></P><P style="margin-bottom: 1em;color: #333333;font-family: arial, helvetica, clean, sans-serif;font-size: 12.727272033691406px"><SPAN style="font-family: inherit;font-style: inherit;font-weight: 900">Participant Passcode:&nbsp; 378 224 4518</SPAN></P><P style="margin-bottom: 1em;color: #333333;font-family: arial, helvetica, clean, sans-serif;font-size: 12.727272033691406px"><SPAN style="font-family: inherit;font-style: inherit;font-weight: 900">Country</SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <SPAN style="font-family: inherit;font-style: inherit;font-weight: 900">Number</SPAN> </P><P style="margin-bottom: 1em;color: #333333;font-family: arial, helvetica, clean, sans-serif;font-size: 12.727272033691406px">US and Canada&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <SPAN style="font-family: inherit;font-style: inherit;font-weight: 900">1-866-312-7353</SPAN></P><P style="margin-bottom: 1em;color: #333333;font-family: arial, helvetica, clean, sans-serif;font-size: 12.727272033691406px">US and Canada&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1-720-897-6637</P><P style="margin-bottom: 1em;color: #333333;font-family: arial, helvetica, clean, sans-serif;font-size: 12.727272033691406px">US and Canada&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1-646-434-0499</P><P style="margin-bottom: 1em;color: #333333;font-family: arial, helvetica, clean, sans-serif;font-size: 12.727272033691406px">US and Canada&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1-484-427-2544</P><P style="margin-bottom: 1em;color: #333333;font-family: arial, helvetica, clean, sans-serif;font-size: 12.727272033691406px">Argentina&nbsp;&nbsp;&nbsp;&nbsp; 0800 444 1292</P><P style="margin-bottom: 1em;color: #333333;font-family: arial, helvetica, clean, sans-serif;font-size: 12.727272033691406px">Australia, Melbourne&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; +61 3 8687 0624</P><P style="margin-bottom: 1em;color: #333333;font-family: arial, helvetica, clean, sans-serif;font-size: 12.727272033691406px">Australia, Sydney&nbsp;&nbsp; +61 2 9009 0688</P><P style="margin-bottom: 1em;color: #333333;font-family: arial, helvetica, clean, sans-serif;font-size: 12.727272033691406px">Australia&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1 800 651 017 </P><P style="margin-bottom: 1em;color: #333333;font-family: arial, helvetica, clean, sans-serif;font-size: 12.727272033691406px">Austria, Vienna&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; +43 1 2530 21750</P><P style="margin-bottom: 1em;color: #333333;font-family: arial, helvetica, clean, sans-serif;font-size: 12.727272033691406px">Austria&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0 800 006 088 </P><P style="margin-bottom: 1em;color: #333333;font-family: arial, helvetica, clean, sans-serif;font-size: 12.727272033691406px">Bahrain, Manama&nbsp; +973 1619 9392</P><P style="margin-bottom: 1em;color: #333333;font-family: arial, helvetica, clean, sans-serif;font-size: 12.727272033691406px">Bahrain&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 8000 4811</P><P style="margin-bottom: 1em;color: #333333;font-family: arial, helvetica, clean, sans-serif;font-size: 12.727272033691406px">Belgium, Brussels&nbsp;&nbsp; +32 2 404 0657</P><P style="margin-bottom: 1em;color: #333333;font-family: arial, helvetica, clean, sans-serif;font-size: 12.727272033691406px">Belgium&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0800 39675</P><P style="margin-bottom: 1em;color: #333333;font-family: arial, helvetica, clean, sans-serif;font-size: 12.727272033691406px">Botswana&nbsp;&nbsp;&nbsp;&nbsp; 002 698 003 001 802</P><P style="margin-bottom: 1em;color: #333333;font-family: arial, helvetica, clean, sans-serif;font-size: 12.727272033691406px">Brazil, Porto Alegre&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; +55 51 4063 8328</P><P style="margin-bottom: 1em;color: #333333;font-family: arial, helvetica, clean, sans-serif;font-size: 12.727272033691406px">Brazil, Rio de Janeiro&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; +55 21 4063 5267</P><P style="margin-bottom: 1em;color: #333333;font-family: arial, helvetica, clean, sans-serif;font-size: 12.727272033691406px">Brazil, Sao Paulo&nbsp;&nbsp;&nbsp;&nbsp; +55 11 3163 0498</P><P style="margin-bottom: 1em;color: #333333;font-family: arial, helvetica, clean, sans-serif;font-size: 12.727272033691406px">Bulgaria, Sofia&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; +359 2 491 7542</P><P style="margin-bottom: 1em;color: #333333;font-family: arial, helvetica, clean, sans-serif;font-size: 12.727272033691406px">Bulgaria&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 00 800 118 4451</P><P style="margin-bottom: 1em;color: #333333;font-family: arial, helvetica, clean, sans-serif;font-size: 12.727272033691406px">Canada, Montreal&nbsp; +1 514 669 5883</P><P style="margin-bottom: 1em;color: #333333;font-family: arial, helvetica, clean, sans-serif;font-size: 12.727272033691406px">Canada, Toronto&nbsp;&nbsp;&nbsp; +1 416 915 3225</P><P style="margin-bottom: 1em;color: #333333;font-family: arial, helvetica, clean, sans-serif;font-size: 12.727272033691406px">Canada&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1 877 252 4916</P><P style="margin-bottom: 1em;color: #333333;font-family: arial, helvetica, clean, sans-serif;font-size: 12.727272033691406px">Chile, Santiago&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; +56 2 599 4973</P><P style="margin-bottom: 1em;color: #333333;font-family: arial, helvetica, clean, sans-serif;font-size: 12.727272033691406px">Chile&nbsp;&nbsp; 123 0020 6704</P><P style="margin-bottom: 1em;color: #333333;font-family: arial, helvetica, clean, sans-serif;font-size: 12.727272033691406px">China, Beijing&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; +86 10 5904 5002</P><P style="margin-bottom: 1em;color: #333333;font-family: arial, helvetica, clean, sans-serif;font-size: 12.727272033691406px">China, Northern Region&nbsp;&nbsp; 10 800 650 0630</P><P style="margin-bottom: 1em;color: #333333;font-family: arial, helvetica, clean, sans-serif;font-size: 12.727272033691406px">China, Southern Region&nbsp;&nbsp; 10 800 265 2601</P><P style="margin-bottom: 1em;color: #333333;font-family: arial, helvetica, clean, sans-serif;font-size: 12.727272033691406px">China +400 120 0519</P><P style="margin-bottom: 1em;color: #333333;font-family: arial, helvetica, clean, sans-serif;font-size: 12.727272033691406px">Colombia&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 01 800 518 1236</P><P style="margin-bottom: 1em;color: #333333;font-family: arial, helvetica, clean, sans-serif;font-size: 12.727272033691406px">Croatia&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0800 222 228&nbsp; </P><P style="margin-bottom: 1em;color: #333333;font-family: arial, helvetica, clean, sans-serif;font-size: 12.727272033691406px">Cyprus, Nicosia&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; +357 2200 7933</P><P style="margin-bottom: 1em;color: #333333;font-family: arial, helvetica, clean, sans-serif;font-size: 12.727272033691406px">Cyprus&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 800 964 63</P><P style="margin-bottom: 1em;color: #333333;font-family: arial, helvetica, clean, sans-serif;font-size: 12.727272033691406px">Czech Republic, Prague&nbsp;&nbsp;&nbsp; +420 228 882 890</P><P style="margin-bottom: 1em;color: #333333;font-family: arial, helvetica, clean, sans-serif;font-size: 12.727272033691406px">Czech Republic&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 800 701 387&nbsp;&nbsp;&nbsp;&nbsp; </P><P style="margin-bottom: 1em;color: #333333;font-family: arial, helvetica, clean, sans-serif;font-size: 12.727272033691406px">Denmark, Copenhagen&nbsp;&nbsp;&nbsp; +45 32 71 16 49</P><P style="margin-bottom: 1em;color: #333333;font-family: arial, helvetica, clean, sans-serif;font-size: 12.727272033691406px">Denmark&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 80 701 624</P><P style="margin-bottom: 1em;color: #333333;font-family: arial, helvetica, clean, sans-serif;font-size: 12.727272033691406px">Dominican Republic&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1 888 751 4814</P><P style="margin-bottom: 1em;color: #333333;font-family: arial, helvetica, clean, sans-serif;font-size: 12.727272033691406px">Estonia, Tallinn&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; +372 622 6444</P><P style="margin-bottom: 1em;color: #333333;font-family: arial, helvetica, clean, sans-serif;font-size: 12.727272033691406px">Estonia&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 8000 111 358&nbsp; </P><P style="margin-bottom: 1em;color: #333333;font-family: arial, helvetica, clean, sans-serif;font-size: 12.727272033691406px">Finland, Helsinki&nbsp;&nbsp;&nbsp;&nbsp; +358 9 2310 1631</P><P style="margin-bottom: 1em;color: #333333;font-family: arial, helvetica, clean, sans-serif;font-size: 12.727272033691406px">Finland&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0 800 770 120 </P><P style="margin-bottom: 1em;color: #333333;font-family: arial, helvetica, clean, sans-serif;font-size: 12.727272033691406px">France, Paris&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; +33 1 70 70 17 77</P><P style="margin-bottom: 1em;color: #333333;font-family: arial, helvetica, clean, sans-serif;font-size: 12.727272033691406px">France&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0800 946 522&nbsp; </P><P style="margin-bottom: 1em;color: #333333;font-family: arial, helvetica, clean, sans-serif;font-size: 12.727272033691406px">France&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0811 657 737&nbsp; </P><P style="margin-bottom: 1em;color: #333333;font-family: arial, helvetica, clean, sans-serif;font-size: 12.727272033691406px">Germany, Frankfurt&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; +49 69 2222 10764&nbsp;&nbsp; </P><P style="margin-bottom: 1em;color: #333333;font-family: arial, helvetica, clean, sans-serif;font-size: 12.727272033691406px">Germany, Munich&nbsp; +49 89 7104 24682&nbsp;&nbsp; </P><P style="margin-bottom: 1em;color: #333333;font-family: arial, helvetica, clean, sans-serif;font-size: 12.727272033691406px">Germany&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0800 588 9331</P><P style="margin-bottom: 1em;color: #333333;font-family: arial, helvetica, clean, sans-serif;font-size: 12.727272033691406px">Greece, Athens&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; +30 21 1181 3805</P><P style="margin-bottom: 1em;color: #333333;font-family: arial, helvetica, clean, sans-serif;font-size: 12.727272033691406px">Greece&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 00800 128 573</P><P style="margin-bottom: 1em;color: #333333;font-family: arial, helvetica, clean, sans-serif;font-size: 12.727272033691406px">Hong Kong&nbsp;&nbsp; +852 3051 2732</P><P style="margin-bottom: 1em;color: #333333;font-family: arial, helvetica, clean, sans-serif;font-size: 12.727272033691406px">Hong Kong&nbsp;&nbsp; 800 905 843&nbsp;&nbsp;&nbsp;&nbsp; </P><P style="margin-bottom: 1em;color: #333333;font-family: arial, helvetica, clean, sans-serif;font-size: 12.727272033691406px">Hungary, Budapest&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; +36 1 778 9215</P><P style="margin-bottom: 1em;color: #333333;font-family: arial, helvetica, clean, sans-serif;font-size: 12.727272033691406px">Iceland&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 800 9901</P><P style="margin-bottom: 1em;color: #333333;font-family: arial, helvetica, clean, sans-serif;font-size: 12.727272033691406px">India, Bangalore&nbsp;&nbsp;&nbsp;&nbsp; +91 80 6127 5055</P><P style="margin-bottom: 1em;color: #333333;font-family: arial, helvetica, clean, sans-serif;font-size: 12.727272033691406px">India, Delhi&nbsp;&nbsp; +91 11 6641 1356</P><P style="margin-bottom: 1em;color: #333333;font-family: arial, helvetica, clean, sans-serif;font-size: 12.727272033691406px">India, Mumbai&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; +91 22 6150 1743</P><P style="margin-bottom: 1em;color: #333333;font-family: arial, helvetica, clean, sans-serif;font-size: 12.727272033691406px">India&nbsp;&nbsp; 000 800 1007 702</P><P style="margin-bottom: 1em;color: #333333;font-family: arial, helvetica, clean, sans-serif;font-size: 12.727272033691406px">Indonesia&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 001 803 657 916</P><P style="margin-bottom: 1em;color: #333333;font-family: arial, helvetica, clean, sans-serif;font-size: 12.727272033691406px">Ireland, Dublin&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; +353 1 247 6192</P><P style="margin-bottom: 1em;color: #333333;font-family: arial, helvetica, clean, sans-serif;font-size: 12.727272033691406px">Ireland&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1 800 937 869 </P><P style="margin-bottom: 1em;color: #333333;font-family: arial, helvetica, clean, sans-serif;font-size: 12.727272033691406px">Ireland&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1890 907 125&nbsp; </P><P style="margin-bottom: 1em;color: #333333;font-family: arial, helvetica, clean, sans-serif;font-size: 12.727272033691406px">Israel, Tel Aviv&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; +972 3 763 0750</P><P style="margin-bottom: 1em;color: #333333;font-family: arial, helvetica, clean, sans-serif;font-size: 12.727272033691406px">Israel&nbsp; 1809 212 927&nbsp; </P><P style="margin-bottom: 1em;color: #333333;font-family: arial, helvetica, clean, sans-serif;font-size: 12.727272033691406px">Italy, Milan&nbsp;&nbsp; +39 02 3600 9839</P><P style="margin-bottom: 1em;color: #333333;font-family: arial, helvetica, clean, sans-serif;font-size: 12.727272033691406px">Italy, Rome&nbsp;&nbsp; +39 06 4523 6623</P><P style="margin-bottom: 1em;color: #333333;font-family: arial, helvetica, clean, sans-serif;font-size: 12.727272033691406px">Italy&nbsp;&nbsp;&nbsp; 800 145 988&nbsp;&nbsp;&nbsp;&nbsp; </P><P style="margin-bottom: 1em;color: #333333;font-family: arial, helvetica, clean, sans-serif;font-size: 12.727272033691406px">Japan, Osaka&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; +81 6 4560 2101</P><P style="margin-bottom: 1em;color: #333333;font-family: arial, helvetica, clean, sans-serif;font-size: 12.727272033691406px">Japan, Tokyo&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; +81 3 4560 1261</P><P style="margin-bottom: 1em;color: #333333;font-family: arial, helvetica, clean, sans-serif;font-size: 12.727272033691406px">Japan 0120 639 800&nbsp; </P><P style="margin-bottom: 1em;color: #333333;font-family: arial, helvetica, clean, sans-serif;font-size: 12.727272033691406px">Jordan&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 800 22813</P><P style="margin-bottom: 1em;color: #333333;font-family: arial, helvetica, clean, sans-serif;font-size: 12.727272033691406px">Kazakhstan&nbsp; 8800 333 4239</P><P style="margin-bottom: 1em;color: #333333;font-family: arial, helvetica, clean, sans-serif;font-size: 12.727272033691406px">Latvia, Riga&nbsp;&nbsp; +371 6778 2556</P><P style="margin-bottom: 1em;color: #333333;font-family: arial, helvetica, clean, sans-serif;font-size: 12.727272033691406px">Latvia 8000 4247</P><P style="margin-bottom: 1em;color: #333333;font-family: arial, helvetica, clean, sans-serif;font-size: 12.727272033691406px">Lithuania, Vilnius&nbsp;&nbsp;&nbsp; +370 5205 5165</P><P style="margin-bottom: 1em;color: #333333;font-family: arial, helvetica, clean, sans-serif;font-size: 12.727272033691406px">Lithuania&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 8800 31308</P><P style="margin-bottom: 1em;color: #333333;font-family: arial, helvetica, clean, sans-serif;font-size: 12.727272033691406px">Luxembourg&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; +352 2487 1454</P><P style="margin-bottom: 1em;color: #333333;font-family: arial, helvetica, clean, sans-serif;font-size: 12.727272033691406px">Luxembourg&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 800 27071</P><P style="margin-bottom: 1em;color: #333333;font-family: arial, helvetica, clean, sans-serif;font-size: 12.727272033691406px">Malaysia,Kuala Lumpur&nbsp;&nbsp;&nbsp; +60 3 7723 7221</P><P style="margin-bottom: 1em;color: #333333;font-family: arial, helvetica, clean, sans-serif;font-size: 12.727272033691406px">Malaysia&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1 800 806 547 </P><P style="margin-bottom: 1em;color: #333333;font-family: arial, helvetica, clean, sans-serif;font-size: 12.727272033691406px">Malta 800 62208</P><P style="margin-bottom: 1em;color: #333333;font-family: arial, helvetica, clean, sans-serif;font-size: 12.727272033691406px">Mauritius&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 802 033 0006&nbsp; </P><P style="margin-bottom: 1em;color: #333333;font-family: arial, helvetica, clean, sans-serif;font-size: 12.727272033691406px">Mexico, Mexico City&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; +52 55 1207 7362</P><P style="margin-bottom: 1em;color: #333333;font-family: arial, helvetica, clean, sans-serif;font-size: 12.727272033691406px">Mexico&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 001 800 514 8609</P><P style="margin-bottom: 1em;color: #333333;font-family: arial, helvetica, clean, sans-serif;font-size: 12.727272033691406px">Netherlands, Amsterdam&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; +31 20 716 8291</P><P style="margin-bottom: 1em;color: #333333;font-family: arial, helvetica, clean, sans-serif;font-size: 12.727272033691406px">Netherlands 0800 265 8462</P><P style="margin-bottom: 1em;color: #333333;font-family: arial, helvetica, clean, sans-serif;font-size: 12.727272033691406px">New Zealand, Auckland&nbsp;&nbsp; +64 9 929 1760</P><P style="margin-bottom: 1em;color: #333333;font-family: arial, helvetica, clean, sans-serif;font-size: 12.727272033691406px">New Zealand&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0800 885 018&nbsp; </P><P style="margin-bottom: 1em;color: #333333;font-family: arial, helvetica, clean, sans-serif;font-size: 12.727272033691406px">Norway, Oslo&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; +47 21 50 27 61</P><P style="margin-bottom: 1em;color: #333333;font-family: arial, helvetica, clean, sans-serif;font-size: 12.727272033691406px">Norway&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 800 510 67</P><P style="margin-bottom: 1em;color: #333333;font-family: arial, helvetica, clean, sans-serif;font-size: 12.727272033691406px">Oman&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 800 73655</P><P style="margin-bottom: 1em;color: #333333;font-family: arial, helvetica, clean, sans-serif;font-size: 12.727272033691406px">Pakistan&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 008 009 004 4138</P><P style="margin-bottom: 1em;color: #333333;font-family: arial, helvetica, clean, sans-serif;font-size: 12.727272033691406px">Panama&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 00 800 226 9817</P><P style="margin-bottom: 1em;color: #333333;font-family: arial, helvetica, clean, sans-serif;font-size: 12.727272033691406px">Peru&nbsp;&nbsp; 0800 54 762&nbsp;&nbsp;&nbsp;&nbsp; </P><P style="margin-bottom: 1em;color: #333333;font-family: arial, helvetica, clean, sans-serif;font-size: 12.727272033691406px">Philippines&nbsp;&nbsp;&nbsp; 1 800 1651 0726</P><P style="margin-bottom: 1em;color: #333333;font-family: arial, helvetica, clean, sans-serif;font-size: 12.727272033691406px">Poland, Warsaw&nbsp;&nbsp;&nbsp;&nbsp; +48 22 212 0699</P><P style="margin-bottom: 1em;color: #333333;font-family: arial, helvetica, clean, sans-serif;font-size: 12.727272033691406px">Poland&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 00 800 121 3995</P><P style="margin-bottom: 1em;color: #333333;font-family: arial, helvetica, clean, sans-serif;font-size: 12.727272033691406px">Portugal, Lisbon&nbsp;&nbsp;&nbsp;&nbsp; +351 21 781 0275</P><P style="margin-bottom: 1em;color: #333333;font-family: arial, helvetica, clean, sans-serif;font-size: 12.727272033691406px">Portugal&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 800 784 425&nbsp;&nbsp;&nbsp;&nbsp; </P><P style="margin-bottom: 1em;color: #333333;font-family: arial, helvetica, clean, sans-serif;font-size: 12.727272033691406px">Puerto Rico&nbsp; 1 855 693 8763</P><P style="margin-bottom: 1em;color: #333333;font-family: arial, helvetica, clean, sans-serif;font-size: 12.727272033691406px">Romania, Bucharest&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; +40 21 529 3917</P><P style="margin-bottom: 1em;color: #333333;font-family: arial, helvetica, clean, sans-serif;font-size: 12.727272033691406px">Romania&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0800 895 807&nbsp; </P><P style="margin-bottom: 1em;color: #333333;font-family: arial, helvetica, clean, sans-serif;font-size: 12.727272033691406px">Russia, Moscow&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; +7 495 213 17 63</P><P style="margin-bottom: 1em;color: #333333;font-family: arial, helvetica, clean, sans-serif;font-size: 12.727272033691406px">Russia&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 810 800 2106 2012&nbsp;&nbsp; </P><P style="margin-bottom: 1em;color: #333333;font-family: arial, helvetica, clean, sans-serif;font-size: 12.727272033691406px">Saudi Arabia&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 800 844 4276&nbsp; </P><P style="margin-bottom: 1em;color: #333333;font-family: arial, helvetica, clean, sans-serif;font-size: 12.727272033691406px">Singapore&nbsp;&nbsp;&nbsp;&nbsp; +65 6654 9828</P><P style="margin-bottom: 1em;color: #333333;font-family: arial, helvetica, clean, sans-serif;font-size: 12.727272033691406px">Singapore&nbsp;&nbsp;&nbsp;&nbsp; 800 186 5015&nbsp; </P><P style="margin-bottom: 1em;color: #333333;font-family: arial, helvetica, clean, sans-serif;font-size: 12.727272033691406px">Slovakia, Bratislava&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; +421 2 3300 2610</P><P style="margin-bottom: 1em;color: #333333;font-family: arial, helvetica, clean, sans-serif;font-size: 12.727272033691406px">Slovakia&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0800 001 825&nbsp; </P><P style="margin-bottom: 1em;color: #333333;font-family: arial, helvetica, clean, sans-serif;font-size: 12.727272033691406px">Slovenia, Ljubljana&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; +386 1 888 8261</P><P style="margin-bottom: 1em;color: #333333;font-family: arial, helvetica, clean, sans-serif;font-size: 12.727272033691406px">Slovenia&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0800 80923</P><P style="margin-bottom: 1em;color: #333333;font-family: arial, helvetica, clean, sans-serif;font-size: 12.727272033691406px">South Africa,Johannesberg&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; +27 11 019 7009</P><P style="margin-bottom: 1em;color: #333333;font-family: arial, helvetica, clean, sans-serif;font-size: 12.727272033691406px">South Africa 0800 984 011&nbsp; </P><P style="margin-bottom: 1em;color: #333333;font-family: arial, helvetica, clean, sans-serif;font-size: 12.727272033691406px">South Korea, Seoul&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; +82 2 3483 1901</P><P style="margin-bottom: 1em;color: #333333;font-family: arial, helvetica, clean, sans-serif;font-size: 12.727272033691406px">South Korea 007 986 517 503</P><P style="margin-bottom: 1em;color: #333333;font-family: arial, helvetica, clean, sans-serif;font-size: 12.727272033691406px">Spain, Barcelona&nbsp;&nbsp;&nbsp; +34 93 800 0782</P><P style="margin-bottom: 1em;color: #333333;font-family: arial, helvetica, clean, sans-serif;font-size: 12.727272033691406px">Spain, Madrid&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; +34 91 769 9443</P><P style="margin-bottom: 1em;color: #333333;font-family: arial, helvetica, clean, sans-serif;font-size: 12.727272033691406px">Spain&nbsp; 800 600 279&nbsp;&nbsp;&nbsp;&nbsp; </P><P style="margin-bottom: 1em;color: #333333;font-family: arial, helvetica, clean, sans-serif;font-size: 12.727272033691406px">Sweden, Stockholm&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; +46 8 5033 6514</P><P style="margin-bottom: 1em;color: #333333;font-family: arial, helvetica, clean, sans-serif;font-size: 12.727272033691406px">Sweden&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0200 883 436&nbsp; </P><P style="margin-bottom: 1em;color: #333333;font-family: arial, helvetica, clean, sans-serif;font-size: 12.727272033691406px">Switzerland, Geneva&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; +41 22 592 7995</P><P style="margin-bottom: 1em;color: #333333;font-family: arial, helvetica, clean, sans-serif;font-size: 12.727272033691406px">Switzerland, Zurich&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; +41 43 456 9248</P><P style="margin-bottom: 1em;color: #333333;font-family: arial, helvetica, clean, sans-serif;font-size: 12.727272033691406px">Switzerland&nbsp; 0800 740 352&nbsp; </P><P style="margin-bottom: 1em;color: #333333;font-family: arial, helvetica, clean, sans-serif;font-size: 12.727272033691406px">Taiwan, Taipei&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; +886 2 2656 7307</P><P style="margin-bottom: 1em;color: #333333;font-family: arial, helvetica, clean, sans-serif;font-size: 12.727272033691406px">Taiwan&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 00 806 651 935</P><P style="margin-bottom: 1em;color: #333333;font-family: arial, helvetica, clean, sans-serif;font-size: 12.727272033691406px">Thailand&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 001 800 658 151</P><P style="margin-bottom: 1em;color: #333333;font-family: arial, helvetica, clean, sans-serif;font-size: 12.727272033691406px">Turkey&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 00800 448 825 462&nbsp;&nbsp; </P><P style="margin-bottom: 1em;color: #333333;font-family: arial, helvetica, clean, sans-serif;font-size: 12.727272033691406px">UAE&nbsp;&nbsp;&nbsp; 8000 444 1726</P><P style="margin-bottom: 1em;color: #333333;font-family: arial, helvetica, clean, sans-serif;font-size: 12.727272033691406px">UK, Belfast&nbsp;&nbsp;&nbsp; +44 28 9595 0013</P><P style="margin-bottom: 1em;color: #333333;font-family: arial, helvetica, clean, sans-serif;font-size: 12.727272033691406px">UK, Edinburgh&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; +44 13 1460 1125</P><P style="margin-bottom: 1em;color: #333333;font-family: arial, helvetica, clean, sans-serif;font-size: 12.727272033691406px">UK, London&nbsp; +44 20 3364 5639</P><P style="margin-bottom: 1em;color: #333333;font-family: arial, helvetica, clean, sans-serif;font-size: 12.727272033691406px">UK, Reading +44 11 8990 3053</P><P style="margin-bottom: 1em;color: #333333;font-family: arial, helvetica, clean, sans-serif;font-size: 12.727272033691406px">UK&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0800 368 0635</P><P style="margin-bottom: 1em;color: #333333;font-family: arial, helvetica, clean, sans-serif;font-size: 12.727272033691406px">UK&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0845 351 2778</P><P style="margin-bottom: 1em;color: #333333;font-family: arial, helvetica, clean, sans-serif;font-size: 12.727272033691406px">Ukraine&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0800 500 254&nbsp; </P><P style="margin-bottom: 1em;color: #333333;font-family: arial, helvetica, clean, sans-serif;font-size: 12.727272033691406px">Uruguay&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0004 019 0509</P><P style="margin-bottom: 1em;color: #333333;font-family: arial, helvetica, clean, sans-serif;font-size: 12.727272033691406px">Venezuela&nbsp;&nbsp;&nbsp; 0 800 100 8510</P><P style="margin-bottom: 1em;color: #333333;font-family: arial, helvetica, clean, sans-serif;font-size: 12.727272033691406px">Vietnam&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 120 651 66</P></DIV>
---
XML Views and Resource Bundle Declarations
technology-blog-members
2014-01-28
https://community.sap.com/t5/technology-blogs-by-members/xml-views-and-resource-bundle-declarations/ba-p/13084947
2014-01-28-xml-views-and-resource-bundle-declarations
<DIV class="jive-rendered-content"><P>Just a quick post on the train on the way down to London this morning.</P><P></P><P>The other day, Andreas Kunz pointed to <A class="jive-link-external-small" href="https://sapui5.hana.ondemand.com/sdk/#docs/guide/MVC.html" target="_blank" rel="nofollow noopener noreferrer">an overview of the MVC options</A> which contains very detailed information - an interesting and recommended read. One of the things that piqued my interest was the ability, in XML views, to specify a resource bundle (for internationalisation) declaratively, using a couple of attributes of the root View element. This I thought was rather neat.</P><P></P><P>So further to my recent explorations and posts on XML views ...</P><P></P><P><A class="jive-link-wiki-small" href="http://scn.sap.com/docs/DOC-49095" target="_blank" rel="noopener noreferrer">Mobile Dev Course W3U3 Rewrite - XML Views - An Intro</A></P><P><A class="jive-link-blog-small" href="https://blogs.sap.com/?p=98013" target="_blank" rel="noopener noreferrer">Mobile Dev Course W3U3 Rewrite - XML Views - An Analysis</A></P><P><A class="jive-link-blog-small" href="https://blogs.sap.com/?p=100254" target="_blank" rel="noopener noreferrer">UI5 XML Views - Another Example</A></P><P></P><P>... I thought I'd put together a little runnable app and make it available on <A class="jive-link-external-small" href="https://github.com/qmacro/sapui5bin" target="_blank" rel="nofollow noopener noreferrer">sapui5bin</A>, to demonstrate it. The result is <A class="jive-link-external-small" href="https://github.com/qmacro/sapui5bin/tree/master/XMLResourceBundleDeclaration" target="_blank" rel="nofollow noopener noreferrer">XMLResourceBundleDeclaration</A>, which is an index file, instantiating an XML view that has the resourceBundle declaration in it; this points to the resourceBundle.properties file in the i18n folder where you might expect to find it in other apps too.</P><P></P><P>The runnable is here: <A class="jive-link-external-small" href="https://github.com/qmacro/sapui5bin/tree/master/XMLResourceBundleDeclaration" target="_blank" rel="nofollow noopener noreferrer">https://github.com/qmacro/sapui5bin/tree/master/XMLResourceBundleDeclaration</A></P><P></P><P><IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2014/01/screen_shot_2014_01_28_at_08_08_17_373823.png" width="620" /></P><P></P><P>Share and enjoy!</P></DIV>
---
UI5 XML Views - Another Example
technology-blog-members
2014-01-13
https://community.sap.com/t5/technology-blogs-by-members/ui5-xml-views-another-example/ba-p/13052267
2014-01-13-ui5-xml-views-another-example
<DIV class="jive-rendered-content"><P>I've been diving into UI5 XML views and sharing the love recently - see <A class="jive-link-wiki-small" href="http://scn.sap.com/docs/DOC-49095" target="_blank" rel="noopener noreferrer">Mobile Dev Course W3U3 Rewrite - XML Views - An Intro</A> (as part of <A class="jive-link-external-small" href="https://blogs.sap.com/?p=94915" target="_blank" rel="noopener noreferrer">Mobile Dev Course W3U3 Rewrite - Intro</A>), and the XML view based templates and snippets in my <A class="jive-link-external-small" href="https://github.com/qmacro/SublimeUI5" target="_blank" rel="nofollow noopener noreferrer">SublimeUI5</A> Package for the "developer's choice" Sublime Text editor.</P><P></P><P>Recently <SPAN class="mention-scrubbed">john.patterson5</SPAN> supplied a JSBin example of an OData sourced table with a filter on dates, in answer to <A class="jive-link-message-small" href="http://scn.sap.com/message/14432063#14432063" target="_blank" rel="noopener noreferrer">Using Table filter when a formatter function is used</A>.</P><P></P><P>This was a very nice example but I thought it would be an interesting exercise to convert it to XML, for a number of reasons:</P><P></P><UL><LI>XML views are important (in the context of learning about and extending Fiori apps)</LI><LI>it would be a good test of my latest #SublimeUI5 snippet "<A class="jive-link-external-small" href="https://github.com/qmacro/SublimeUI5/blob/master/Snippets/indexmspmvc.html.sublime-snippet" target="_blank" rel="nofollow noopener noreferrer">index - Mobile - Single Page - MVC</A>" (indexmspmvc) (Note 1)</LI><LI>all of the XML view work I've done so far has involved controls predominantly from the sap.m library (as they're also what the Fiori apps are built with) so I wantd to try using non-sap.m controls (Note 2)</LI></UL><P></P><P>So I did, and have made it available in the <A class="jive-link-external-small" href="https://github.com/qmacro/sapui5bin" target="_blank" rel="nofollow noopener noreferrer">sapui5bin repo on Github</A> here:</P><P></P><P><A class="jive-link-external-small" href="https://github.com/qmacro/sapui5bin/blob/master/SinglePageExamples/ODataDateTableFilter.html" target="_blank" rel="nofollow noopener noreferrer">sapui5bin/SinglePageExamples/ODataDateTableFilter.html at master Â· qmacro/sapui5bin Â· GitHub</A></P><P></P><P>Open up this link in a separate window to view it and read the rest of the post. </P><P></P><P>I'll cover the "single page MVC" concept in another post; for now, here are a few notes to help you navigate:</P><P></P><UL><LI>the XML view is defined in a script tag with the id "view1" and brought to life with <EM style="font-family: terminal, monaco"><SPAN style="font-family: arial, helvetica, sans-serif">sap</SPAN><SPAN style="font-family: arial, helvetica, sans-serif"><SPAN class="p">.</SPAN><SPAN class="nx">ui</SPAN><SPAN class="p">.</SPAN><SPAN class="nx">xmlview</SPAN><SPAN class="p">({ </SPAN><SPAN class="nx">viewContent</SPAN><SPAN class="o" style="font-weight: bold">:</SPAN> <SPAN class="nx">jQuery</SPAN><SPAN class="p">(</SPAN><SPAN class="s1" style="color: #dd1144">'#view1'</SPAN><SPAN class="p">).</SPAN><SPAN class="nx">html</SPAN><SPAN class="p">() </SPAN></SPAN><SPAN style="font-family: arial, helvetica, sans-serif">})</SPAN></EM></LI><LI>I've specified the XML namespace declarations (xmlns) for the relevant libraries, having the most common controls' namespace (sap.ui.table) as the default</LI><LI>I've used the extended binding syntax for the Table's "rows" aggregation, to include the OData select parameters</LI><LI>I've declared the date formatting 'dateShort' (for the third column) in a namespace (util.formatting) with jQuery.sap.declare</LI><LI>We have a local controller (which doesn't actually have anything to do)</LI></UL><P></P><P>The one thing I'm not entirely convinced about is having to set the filterType property on the BirthDate column "procedurally" (in JavaScript); perhaps I'll get round to looking into how to do this particular bit a different way at some stage.</P><P></P><P>Anyway, I thought this might be more useful insight into XML views and single page MVC examples.</P><P></P><P>Share &amp; enjoy!</P><P>dj</P><P></P><P></P><P></P><P><SPAN style="font-size: 8pt">Note 1: This "single page MVC" idea is something I've wanted to put together and share for a while; it's easy to write a single page demo UI5 app but not so easy to do that and involve the MVC concept as well - in a single file ... until now.</SPAN></P><P></P><P><SPAN style="font-size: 8pt">Note 2: The SAP Fiori Wave 1 apps have views that are written declaratively in HTML; the SAP Fiori Wave 2 and 3 apps have views written in XML, using the sap.m controls, with a smattering of sap.ui.layout controls too</SPAN></P></DIV>
---
Help Us To Help You - Share Your Code
technology-blog-members
2014-01-09
https://community.sap.com/t5/technology-blogs-by-members/help-us-to-help-you-share-your-code/ba-p/13250211
2014-01-09-help-us-to-help-you-share-your-code
<DIV class="jive-rendered-content"><H2 id="toc-hId-876100327">Introduction</H2><P>Yesterday I tweeted: "We should encourage folk to post full Gists with their <A class="jive-link-tag-small" href="http://scn.sap.com/tags/#/?tags=ui5" target="_blank" rel="noopener noreferrer">ui5</A> issues, for easier debugging and analysis (<A class="jive-link-message-small" data-containerid="2421" data-containertype="14" data-objectid="14665116" data-objecttype="2" href="http://scn.sap.com/message/14665116#14665116" target="_blank" rel="noopener noreferrer">http://scn.sap.com/message/14665116#14665116</A>)"</P><P></P><P><IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2014/01/tweet_360015.png" height="96" width="451" /></P><P></P><P>So I decided to put my money where my mouth is and write this document.</P><P></P><H2 id="toc-hId-679586822">Background and Context</H2><P><SPAN style="font-size: 10pt;">There are many examples in the SCN </SPAN><A class="jive-link-community-small" data-containerid="2406" data-containertype="14" data-objectid="2421" data-objecttype="14" href="http://scn.sap.com/community/developer-center/front-end" target="_blank" rel="noopener noreferrer">SAPUI5 Developer Center</A><SPAN style="font-size: 10pt;"> where people are posting questions asking for help with code, and where they don't supply enough information, background, context, or -- crucially -- </SPAN><SPAN style="font-size: 10pt;"><STRONG>code</STRONG></SPAN><SPAN style="font-size: 10pt;">. If you have a problem with your code and want help from other people, help us to help you by sharing the code you're having problems with.</SPAN></P><P></P><P>There are good ways and bad ways to share code. Here are a few tips:</P><P></P><H2 id="toc-hId-483073317">Share all of the code</H2><P>Unless you're asking questions about, for example, specific syntax or code patterns, don't just post code snippets, and make us guess the rest. Post all of your code. Even the parts that you might not think are relevant. If you're experiencing problems, and don't post all of the code, you're second-guessing the cause, and not helping yourself or us. Remember, we haven't been working on your codebase and so don't have the mental context that you have.</P><P></P><P>If you can't share all of your code for some reason (intellectual property, security, whatever) then <STRONG>reduce the problem to its core essence</STRONG> and post that - but again, post a complete example. Often, going through the exercise of reproducing the problem in the smallest instance possible leads you to realise what the problem is, and you may not need to ask for help. But if you do, you have at least something to show the people who can help.</P><P></P><H2 id="toc-hId-286559812">Share the code in a useful way</H2><P>Posting large (or even small) chunks of code inside the body of a forum question here on SCN is not that helpful. The syntax highlighting, formatting and font choice that this environment offers as default is not conducive to reading code. Further, posting your code like that makes it that much more difficult for your helpers to marshal it into something that they could run locally to see if they could diagnose the problem themselves. The one exception is where you're providing an initial bit of context. And if you do that, make sure you use the syntax highlighting provided by the SCN Jive editor. It's not brilliant, but it's better than nothing.</P><P></P><P><IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2014/01/syntax_360014.png" height="120" width="133" /></P><P></P><P>ZIP files of complete applications are better, but they're still very cumbersome - you have to download them in your browser, unzip the files, choose a directory, and so on. And nobody can read the code at their leisure, or get a quick understanding of what's going on.</P><P></P><H2 id="toc-hId-90046307">Use Github's Gists</H2><P>Best of all, at least IMHO, is to create a <A class="jive-link-external-small" href="https://gist.github.com/" target="_blank" rel="nofollow noopener noreferrer">Gist on Github</A>. This puts the code centre stage, treats it as a first class citizen on the Web (you can address whole applications, individual files, or even individual lines, with their own URLs) and what's more, it's one command to pull the entire codebase of an application to a local directory and start working on it immediately. If nothing else, sharing the code you want help with as a Gist on Github puts the onus on you, who are seeking help (rather than your potential helpers, who are offering help) to marshal the code so that it can be properly diagnosed.</P><P></P><P><A class="jive-link-thread-small" data-containerid="2421" data-containertype="14" data-objectid="3480822" data-objecttype="1" href="http://scn.sap.com/thread/3480822" target="_blank" rel="noopener noreferrer">Here's a recent of example</A> of where someone had a problem with his application and asked for help, posting not only a formatted snippet to provide initial context, but also a Gist with a complete working runnable example that highlighted the problem he was having.</P><P><IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2014/01/capture_359955.png" height="329" width="389" /> <IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2014/01/gist_359998.png" height="332" width="322" /></P><P></P><P></P><P>Uwe did exactly the right thing. The Gist he created and shared - "<A class="jive-link-external-small" href="https://gist.github.com/se38/8322054" target="_blank" rel="nofollow noopener noreferrer">Binding Problem with UI5 and XML views</A>" was complete, didn't omit anything, and was runnable. It took me less than a minute to grab the code and get it running and confirm what the issue was. This particular problem wasn't a big issue, but there are more complex problems that are presented in this area on SCN that are very difficult to diagnose because not only is the code not shared, nor a complete description of the issue given, but also the problem is complex in that it involves relationships between different components and files ... which are often missing.</P><P></P><P>With a Gist, not only can the whole application be downloaded quickly and easily, but also you can review the code in properly formatted and syntax-highlighted fashion, and even point to certain lines (like <A class="jive-link-external-small" href="https://gist.github.com/se38/8322054#file-index-html-L9" target="_blank" rel="nofollow noopener noreferrer">the last line of the bootstrap</A>, which was missing the data-sap-ui-xx-bindingSyntax setting)</P><P></P><P>Here's a short screencast of how that shared code, in a Gist, is very easy to pull down locally, fire up and start to diagnose.</P><P></P><P><IFRAME id="kaltura_player_1_p5s5dr9z" src="https://www.youtube.com/embed/Fgp_e3Uv5Xs" allowfullscreen="true" webkitallowfullscreen="" mozallowfullscreen="" width="625px" height="360px" frameborder="0"></IFRAME></P><P></P><P>Hat tip to my son <A class="jive-link-external-small" href="http://jcla1.com/" target="_blank" rel="nofollow noopener noreferrer">Joseph Adams</A>, who first showed me that Gists could contain more than one file, and for pointing out that they were normal git repos.</P></DIV>
---
Mobile Dev Course W3U3 Rewrite - XML Views - An Analysis
technology-blog-members
2013-12-02
https://community.sap.com/t5/technology-blogs-by-members/mobile-dev-course-w3u3-rewrite-xml-views-an-analysis/ba-p/13049232
2013-12-02-mobile-dev-course-w3u3-rewrite-xml-views-an-analysis
<DIV class="jive-rendered-content"><P>I <A class="jive-link-blog-small" href="https://blogs.sap.com/?p=94915" target="_blank" rel="noopener noreferrer">rewrote the mobile dev course sample app from W3U3</A>. Then I created a <A class="jive-link-external-small" href="https://github.com/qmacro/w3u3_redonebasic/tree/xmlviews" target="_blank" rel="nofollow noopener noreferrer">new branch 'xmlviews' in the repo on Github</A> and rebuilt the views in XML. I then took a first look at XML views in general. <STRONG>Now this post looks at the specific XML views that I built in the W3U3 rewrite</STRONG>. See the links at the bottom of the <A class="jive-link-blog-small" href="https://blogs.sap.com/?p=94915" target="_blank" rel="noopener noreferrer">opening post</A> of this series to get to explanations for the other areas.</P><P></P><P>We know, from the other posts in this series, that there are a number of views. Let's just take them one by one. If you want an introduction to XML views, please refer to the previous post <A class="jive-link-wiki-small" href="http://scn.sap.com/docs/DOC-49095" target="_blank" rel="noopener noreferrer">Mobile Dev Course W3U3 Rewrite - XML Views - An Intro</A>. I won't cover the basics here.</P><P></P><P></P><H2 id="toc-hId-818186686">App View</H2><P></P><P>The App view contains an App control (sap.m.App) which contains, in the pages aggregation, the rest of the views - the ones that are visible. This is what the App view looks like in XML.</P><P></P><PRE class="language-xml"><CODE><BR />
&lt;?xml version="1.0" encoding="UTF-8" ?&gt;<BR />
&lt;core:View controllerName="com.opensap.App" xmlns:core="sap.ui.core"<BR />
&nbsp;&nbsp;&nbsp; xmlns="sap.m" xmlns:mvc="sap.ui.core.mvc"&gt;<BR />
&nbsp;&nbsp;&nbsp; &lt;App id="app"&gt;<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;mvc:XMLView viewName="com.opensap.Login" id="Login" /&gt;<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;mvc:XMLView viewName="com.opensap.ProductList" id="ProductList" /&gt;<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;mvc:XMLView viewName="com.opensap.ProductDetail" id="ProductDetail" /&gt;<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;mvc:XMLView viewName="com.opensap.SupplierDetail" id="SupplierDetail" /&gt;<BR />
&nbsp;&nbsp;&nbsp; &lt;/App&gt;<BR />
&lt;/core:View&gt;<BR />
<BR />
<BR />
<BR />
<BR />
<BR />
<BR />
</CODE></PRE><P>We're aggregating four views in the App control (introduced by the &lt;App&gt; tag). Because the pages aggregation is the default, we don't have to wrap the child views in a &lt;pages&gt; ... &lt;/pages&gt; element. Views and the MVC concept belong in the sap.ui.core library, hence the xmlns:core namespace prefix usage.</P><P></P><P></P><H2 id="toc-hId-621673181">Login View</H2><P></P><P>The Login view contains, within a Page control, a user and password field, and a login button in the bar at the bottom. This is what the XML view looks like.</P><P></P><PRE class="language-xml"><CODE><BR />
&lt;?xml version="1.0" encoding="UTF-8" ?&gt;<BR />
&lt;core:View controllerName="com.opensap.Login" xmlns:core="sap.ui.core"<BR />
&nbsp;&nbsp;&nbsp; xmlns="sap.m" xmlns:mvc="sap.ui.core.mvc"&gt;<BR />
&nbsp;&nbsp;&nbsp; &lt;Page<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; title="Login"<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; showNavButton="false"&gt;<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;footer&gt;<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;Bar&gt;<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;contentMiddle&gt;<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;Button<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; text="Login"<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; press="loginPress" /&gt;<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/contentMiddle&gt;<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/Bar&gt;<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/footer&gt;<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;List&gt;<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;InputListItem label="Username"&gt;<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;Input value="{app&gt;/Username}" /&gt;<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/InputListItem&gt;<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;InputListItem label="Password"&gt;<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;Input value="{app&gt;/Password}" type="Password" /&gt;<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/InputListItem&gt;<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/List&gt;<BR />
&nbsp;&nbsp;&nbsp; &lt;/Page&gt;<BR />
&lt;/core:View&gt;<BR />
<BR />
<BR />
<BR />
<BR />
<BR />
<BR />
</CODE></PRE><P>You can see that the Page control is the 'root' control here, and there are a couple of properties set (title and showNavButton) along with the footer aggregation and the main content. Note that as this is not JavaScript, values that you think might appear "bare" are still specified as strings - showNavButton="false" is a good example of this.</P><P></P><P>The Page's footer aggregation expects a Bar control, and that's what we have here. In turn, the Bar control has three aggregations that have different horizontal positions, currently left, middle and right. We're using the contentMiddle aggregation to contain the Button control. Note that the Button control's press handler "loginPress" is specified simply; by default the controller object is passed as the context for "this". You don't need to try and engineer something that you might have seen in JavaScript, like this:</P><P></P><PRE class="language-javascript"><CODE><BR />
new sap.m.Button({<BR />
&nbsp;&nbsp;&nbsp;&nbsp; text: "Login",<BR />
&nbsp;&nbsp;&nbsp;&nbsp; press: [oController.loginPress, oController]<BR />
}),<BR />
<BR />
<BR />
<BR />
<BR />
<BR />
<BR />
</CODE></PRE><P>... it's done automatically for you.</P><P></P><P>Note also that we can use data binding syntax in the XML element attributes just like we'd expect to be able to, for example value="{app&gt;/Username}".</P><P></P><P></P><H2 id="toc-hId-425159676">ProductList View</H2><P></P><P>In the ProductList view, the products in the ProductCollection are displayed. There's a couple of things that are worth highlighting in this view. First, let's have a look at the whole thing.</P><P></P><PRE class="language-xml"><CODE><BR />
&lt;?xml version="1.0" encoding="UTF-8" ?&gt;<BR />
&lt;core:View controllerName="com.opensap.ProductList" xmlns:core="sap.ui.core"<BR />
&nbsp;&nbsp;&nbsp; xmlns="sap.m" xmlns:mvc="sap.ui.core.mvc"&gt;<BR />
&nbsp;&nbsp;&nbsp; &lt;Page<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; title="Products"&gt;<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;List<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; headerText="Product Overview"<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; items="{<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; path: '/ProductCollection'<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }"&gt;<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;StandardListItem<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; title="{Name}"<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; description="{Description}"<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; type="Navigation"<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; press="handleProductListItemPress" /&gt;<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/List&gt;<BR />
&nbsp;&nbsp;&nbsp; &lt;/Page&gt;<BR />
&lt;/core:View&gt;<BR />
<BR />
<BR />
<BR />
<BR />
</CODE></PRE><P>The List control is aggregating the items in the ProductCollection in the data model. Note how the aggregation is specified in the items attribute - it's pretty much the same syntax as you'd have in JavaScript, here with the 'path' parameter. The only difference is that it's specified as an object inside a string, rather than an object directly:</P><P></P><PRE class="language-xml"><CODE><BR />
items="{<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; path: '/ProductCollection'<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }"<BR />
<BR />
<BR />
<BR />
<BR />
</CODE></PRE><P><SPAN style="font-size: 10pt">So remember get your quoting (single, double) right.</SPAN></P><P></P><P>And then we have the template, the "stamp" which we use to produce a nice visible instantiation of each of the entries in the ProductCollection. This is specifiied in the default aggregation 'items', which, as it's default, I've omitted here.</P><P></P><P></P><H2 id="toc-hId-228646171">ProductDetail View</H2><P></P><P>By now I'm sure you're starting to see the pattern, and also the benefit of writing views in XML. It just makes a lot of sense, at least to me. It's cleaner, it makes you focus purely on the controls, and also by inference causes you to properly separate your view and controller concerns. You don't even have the option, let alone the temptation, to write event handling code in here.</P><P></P><P>So here's the ProductDetail view.</P><P></P><PRE class="language-xml"><CODE><BR />
&lt;?xml version="1.0" encoding="UTF-8" ?&gt;<BR />
&lt;core:View controllerName="com.opensap.ProductDetail" xmlns:core="sap.ui.core"<BR />
&nbsp;&nbsp;&nbsp; xmlns="sap.m" xmlns:mvc="sap.ui.core.mvc"&gt;<BR />
&nbsp;&nbsp;&nbsp; &lt;Page<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; title="{Name}"<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; showNavButton="true"<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; navButtonPress="handleNavButtonPress"&gt;<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;List&gt;<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;DisplayListItem label="Name" value="{Name}" /&gt;<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;DisplayListItem label="Description" value="{Description}" /&gt;<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;DisplayListItem label="Price" value="{Price} {CurrencyCode}" /&gt;<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;DisplayListItem<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; label="Supplier"<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; value="{SupplierName}"<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; type="Navigation"<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; press="handleSupplierPress" /&gt;<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/List&gt;<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;VBox alignItems="Center"&gt;<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;Image<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; src="{app&gt;/ES1Root}{ProductPicUrl}"<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; decorative="true"<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; densityAware="false" /&gt;<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/VBox&gt;<BR />
&nbsp;&nbsp;&nbsp; &lt;/Page&gt;<BR />
&lt;/core:View&gt;<BR />
<BR />
<BR />
<BR />
</CODE></PRE><P></P><P>We're not aggregating any array of data from the model here, we're just presenting four DisplayListItem controls one after the other in the List. Below that we have a centrally aligned image that shows the product picture.</P><P></P><P></P><H2 id="toc-hId-32132666">SupplierDetail View</H2><P></P><P>And finally we have the SupplierDetail view.</P><P></P><PRE class="language-xml"><CODE><BR />
&lt;?xml version="1.0" encoding="UTF-8" ?&gt;<BR />
&lt;core:View controllerName="com.opensap.SupplierDetail" xmlns:core="sap.ui.core"<BR />
&nbsp;&nbsp;&nbsp; xmlns="sap.m" xmlns:mvc="sap.ui.core.mvc"&gt;<BR />
&nbsp;&nbsp;&nbsp; &lt;Page<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; id="Supplier"<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; title="{CompanyName}"<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; showNavButton="true"<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; navButtonPress="handleNavButtonPress"&gt;<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;List&gt;<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;DisplayListItem label="Company Name" value="{CompanyName}" /&gt;<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;DisplayListItem label="Web Address" value="{WebAddress}" /&gt;<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;DisplayListItem label="Phone Number" value="{PhoneNumber}" /&gt;<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/List&gt;<BR />
&nbsp;&nbsp;&nbsp; &lt;/Page&gt;<BR />
&lt;/core:View&gt;<BR />
<BR />
<BR />
<BR />
</CODE></PRE><P>Again, nothing really special, or specially complicated, here. Just like the other views (apart from the "root" App view), this has a Page as its outermost control. Here again we have just simple, clean declarations of what should appear, control-wise.</P><P></P><P></P><H2 id="toc-hId--164380839">Conclusion</H2><P></P><P>So there you have it. For me, starting to write views in XML was a revelation. The structure and the definitions seem to more easily flow, so much so, in fact, that in a last-minute addition to the DemoJam lineup at the annual SAP UK &amp; Ireland User Group Conference in Birmingham last week, I took part, and <A class="jive-link-external-small" href="http://www.pipetree.com/qmacro/blog/2013/11/sap-uk-ireland-user-group-conference-demo-jam/" target="_blank" rel="nofollow noopener noreferrer">for my DemoJam session I stood up and build an SAP Fiori-like UI live on stage</A>. Using XML views.</P><P></P><P>This brings to an end the series that started out as an itch I wanted to scratch: To improve the quality of the SAPUI5 application code that was presented in the OpenSAP course "Introduction To Mobile Solution Development". There are now 6 posts in the series, including this one:</P><P></P><P><A class="jive-link-external-small" href="https://blogs.sap.com/?p=94915" target="_blank" rel="noopener noreferrer">Mobile Dev Course W3U3 Rewrite - Intro</A></P><P><A class="jive-link-external-small" href="https://blogs.sap.com/?p=94956" target="_blank" rel="noopener noreferrer">Mobile Dev Course W3U3 Rewrite - Index and Structure</A></P><P><A class="jive-link-external-small" href="https://blogs.sap.com/?p=95019" target="_blank" rel="noopener noreferrer">Mobile Dev Course W3U3 Rewrite - App and Login</A></P><P><A class="jive-link-external-small" href="https://blogs.sap.com/?p=95114" target="_blank" rel="noopener noreferrer">Mobile Dev Course W3U3 Rewrite - ProductList, ProductDetail and SupplierDetail</A></P><P><A class="jive-link-wiki-small" href="http://scn.sap.com/docs/DOC-49095" target="_blank" rel="noopener noreferrer">Mobile Dev Course W3U3 Rewrite - XML Views - An Intro</A></P><P><A class="jive-link-blog-small" href="https://blogs.sap.com/?p=98013" target="_blank" rel="noopener noreferrer">Mobile Dev Course W3U3 Rewrite - XML Views - An Analysis</A></P><P></P><P>I hope you found it useful and interesting, and as always,</P><P></P><P><A class="jive-link-external-small" href="http://hhgproject.org/entries/shareandenjoy.html" target="_blank" rel="nofollow noopener noreferrer">Share and enjoy!</A></P><P>dj</P></DIV>
---
Custom Sorting and Grouping
technology-blog-members
2013-11-29
https://community.sap.com/t5/technology-blogs-by-members/custom-sorting-and-grouping/ba-p/13091712
2013-11-29-custom-sorting-and-grouping
<DIV class="jive-rendered-content"><P><STRONG>Summary: Learn how to control the order of groups in a sorted list. You don't do it directly with the grouper function, you do it with the sorter function.</STRONG></P><P></P><P>One of the features of the app that the participants build in the <A class="" href="http://scn.sap.com/Building SAP Fiori-like UIs with SAPUI5" target="_blank" rel="noopener noreferrer">CD168 sessions at SAP TechEd Amsterdam</A> is a list of sales orders that can be grouped according to status or price (the screenshot shows the orders grouped by price).</P><P></P><P><IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2013/11/groupbyprice_334131.png" height="408" width="174" />This is achieved by specifying a value for the vGroup parameter on the Sorter, as documented in the <A class="jive-link-external-small" href="https://sapui5.hana.ondemand.com/sdk/#docs/api/symbols/sap.ui.model.Sorter.html" target="_blank" rel="nofollow noopener noreferrer">sap.ui.model.Sorter API reference</A>:</P><P></P><P><SPAN style="color: #363636;font-size: 12px;background-color: #f2f2f2;font-family: Verdana, Arial, Helvetica, sans-serif"><EM>Configure grouping of the content, can either be true to enable grouping based on the raw model property value, or a function which calculates the group value out of the context (e.g. oContext.getProperty("date").getYear() for year grouping). The control needs to implement the grouping behaviour for the aggregation which you want to group.</EM></SPAN></P><P></P><P>So what this means is that you either specify a boolean true value, or the name of a function.</P><P></P><P>- use a boolean true to have the entries grouped "naturally" by their value: useful and useable where you have texts that will be the same for some entries</P><P></P><P>- specify the name of a function that will do some custom grouping: useful where you have numeric values that you might want to group into sizes or ranges</P><P></P><P>Here in the example in the screenshot on the left, we're using a custom grouper function to arrange the sales orders into value groups (less than EUR 5000, less than EUR 10,000 and more than EUR 10,000).</P><P></P><P></P><P></P><P></P><H2 id="toc-hId-822570706">Group Order Challenge</H2><P></P><P>But what if you wanted to influence not only the sort but also the order of the groups themselves? Specifically in this screenshot example, what if we wanted to have the "&lt; 5000 EUR" group appear first, then the "&gt; 10,000 EUR" group and finally the "&lt; 10,000 EUR" group? (This is a somewhat contrived example but you get the idea). This very question is one I was asking myself while preparing for the CD168 session, and also one I was asked by an attendee.</P><P></P><P>To understand how to do it, you have to understand that the relationship between the sorter and the grouper can be seen as a "master / slave" relationship. This is in fact reflected in how you specify the grouper - as a subordinate of the master.</P><P></P><P><STRONG>The sorter drives everything, and the grouper just gets a chance to come along for the ride.</STRONG></P><P></P><P>So to answer the question, and to illustrate it in code step by step, I've put together an example. It takes a simple list of numbers 1 to 30 and displays them in a list, and groups them into three size categories. You can specify in which order the groups appear, but the key mechanism to achieve this, as you'll see, is actually in the sorter.</P><P></P><P></P><P></P><H2 id="toc-hId-626057201">Simple and Complex Sorting</H2><P></P><P>To understand further, you have to remember that there's a simple sorter specification and a more complex one. Using a simple sorter is often the case, and you'd specify it like this:</P><P></P><PRE class="language-javascript"><CODE><BR />
new sap.m.List("list", {<BR />
&nbsp;&nbsp;&nbsp; items: {<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; path: '/records',<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; template: new sap.m.StandardListItem({<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; title: '{amount}'<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }),<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sorter: new sap.ui.model.Sorter("amount") // &lt;---<BR />
&nbsp;&nbsp;&nbsp; }<BR />
})</CODE></PRE><P></P><P>This is nice and simple and sorts based on the value of the amount property, default ascending.</P><P></P><P>The complex sorter is where you can specify your own custom sorting logic, and you do that by creating an instance of a Sorter and then specifying your custom logic for the fnCompare function.</P><P></P><P>We'll be using the sorter with its own custom sorting logic.</P><P></P><P></P><P></P><H2 id="toc-hId-429543696">Step By Step</H2><H2 id="toc-hId-233030191"></H2><P>So here's the example, described step by step. It's also available as a Gist on Github: <A class="jive-link-external-small" href="https://gist.github.com/qmacro/7702371" target="_blank" rel="nofollow noopener noreferrer">Custom Sorter and Grouper in SAPUI5</A> and exposed in a runtime context using the bl.ocks.org facility: <A class="jive-link-external-small" href="http://bl.ocks.org/qmacro/7702371" target="_blank" rel="nofollow noopener noreferrer">http://bl.ocks.org/qmacro/7702371</A></P><P></P><P>As the source code is available in the Gist, I won't bother showing you the HTML and SAPUI5 bootstrap, I'll just explain the main code base.</P><P></P><P></P><PRE class="language-javascript"><CODE><BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; var sSM = 10;&nbsp; // &lt; 10&nbsp; Small<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; var sML = 15;&nbsp; // &lt; 15&nbsp; Medium<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //&nbsp;&nbsp;&nbsp; 15+ Large</CODE></PRE><P></P><P>Here we just specify the boundary values for chunking our items up into groups. Anything less than 10 is "Small", less than 15 is "Medium", otherwise it's "Large". I've deliberately chosen groupings that are not of equal size (the range is 1-30) just for a better visual example effect.</P><P></P><P></P><P></P><PRE class="language-javascript"><CODE><BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Generate the list of numbers and assign to a model<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; var aValues = [];<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (var i = 0; i &lt; 30; i++) aValues.push(i);<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sap.ui.getCore().setModel(<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new sap.ui.model.json.JSONModel({<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; records: aValues.map(function(v) { return { value: v }; })<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; })<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</CODE></PRE><P></P><P>So we generate a list of numbers (I was really missing Python's xrange here, apropo of nothing!) and add it as a model to the core.</P><P></P><P></P><P></P><PRE class="language-javascript"><CODE><BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Sort order and title texts of the S/M/L groups<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; var mGroupInfo = {<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; S: { order: 2, text: "Small"},<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; M: { order: 1, text: "Medium"},<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; L: { order: 3, text: "Large"}<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</CODE></PRE><P></P><P>Here I've created a map object that specifies the order in which the Small, Medium and Large groups should appear in the list (Medium first, then Small, then Large). The texts are what should be displayed in the group subheader/dividers in the list display.</P><P></P><P></P><P></P><PRE class="language-javascript"><CODE><BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Returns to what group (S/M/L) a value belongs<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; var fGroup = function(v) {<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return v &lt; sSM ? "S" : v &lt; sML ? "M" : "L";<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</CODE></PRE><P></P><P>This is just a helper function to return which size category (S, M or L) a given value belongs to.</P><P></P><P></P><P></P><PRE class="language-javascript"><CODE><BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Grouper function to be supplied as 3rd parm to Sorter<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Note that it uses the mGroupInfo, as does the Sorter<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; var fGrouper = function(oContext) {<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; var v = oContext.getProperty("value");<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; var group = fGroup(v);<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return { key: group, text: mGroupInfo[group].text };<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</CODE></PRE><P></P><P>Here's our custom Grouper function that will be supplied as the third parameter to the Sorter. It pulls the value of the property from the context object it receives, uses the fGroup function (above) to determine the size category, and then returns what a group function should return - an object with key and text properties that are then used in the display of the bound items.</P><P></P><P></P><PRE class="language-javascript"><CODE><BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // The Sorter, with a custom compare function, and the Grouper<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; var oSorter = new sap.ui.model.Sorter("value", null, fGrouper);<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; oSorter.fnCompare = function(a, b) {<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Determine the group and group order<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; var agroup = mGroupInfo[fGroup(a)].order;<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; var bgroup = mGroupInfo[fGroup(b)].order;<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Return sort result, by group ...<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (agroup &lt; bgroup) return -1;<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (agroup &gt; bgroup) return&nbsp; 1;<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // ... and then within group (when relevant)<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (a &lt; b) return -1;<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (a == b) return 0;<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (a &gt; b) return&nbsp; 1;<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</CODE></PRE><P></P><P>Here's our custom Sorter. We create one as normal, specifying the fact that we want the "value" property to be the basis of our sorting. The 'null' is specified in the ascending/descending position (default is ascending), and then we specify our Grouper function. Remember, the grouper just hitches a ride on the sorter.</P><P></P><P>Because we want to influence the sort order of the groups as well as the order of the items within each group, we have to determine to what group each of the two values to be compared belong. If the groups are different, we just return the sort result (-1 or 1) at the group level. But if the two values are in the same group then we have to make sure that the sort result is returned for the items themselves.</P><P></P><P></P><PRE class="language-javascript"><CODE><BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Simple List in a Page<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new sap.m.App({<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pages: [<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new sap.m.Page({<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; title: "Sorted Groupings",<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; content: [<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new sap.m.List("list", {<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; items: {<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; path: '/records',<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; template: new sap.m.StandardListItem({<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; title: '{value}'<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }),<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sorter: oSorter<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; })<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ]<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; })<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ]<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }).placeAt("content");</CODE></PRE><P></P><P>And that's pretty much it. Once we've done the hard work of writing our custom sorting logic, and shared the group determination between the Sorter and the Grouper (DRY!) we can just specify the custom Sorter in our binding of the items.</P><P></P><P>And presto! We have what we want - a sorted list of items, grouped, and those groups also in an order that we specify.</P><P></P><P><IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2013/11/sortedgroupings_334219.png" height="696" width="263" /></P><P></P><P></P><H2 id="toc-hId-36516686">Post Script</H2><P></P><P>There was a comment on this post which was very interesting and described a situation where you want to sort, and group, based on different properties. This is also possible. To achieve sorting on one property and grouping based on another, you have to recall that you can pass either a single Sorter object or an array of them, in the binding.</P><P></P><P>So let's say you have an array of records in your data model, and these records have a "beerName" and a "beerType" property. You want to group by beerType, and within beerType you want the actual beerNames sorted.</P><P></P><P>In this case, you could have two Sorters: One for the beerType, with a Grouper function, and another for the beerName. Like this:</P><P></P><PRE class="language-javascript"><CODE><BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; var fGrouper = function(oContext) {<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; var sType = oContext.getProperty("beerType") || "Undefined";<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return { key: sType, value: sType }<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new sap.m.App({<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pages: [<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new sap.m.Page({<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; title: "Craft Beer",<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; content: [<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new sap.m.List("list", {<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; items: {<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; path: '/',<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; template: new sap.m.StandardListItem({<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; title: "{beerName}",<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; description: "{beerType}"<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }),<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sorter: [<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new sap.ui.model.Sorter("beerType", null, fGrouper),<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new sap.ui.model.Sorter("beerName", null, null)<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ]<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; })<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ]<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; })<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ]<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }).placeAt("content");</CODE></PRE><P>I've put a complete example together for this, and it's in the <A class="jive-link-blog-small" href="https://blogs.sap.com/?p=79248" target="_blank" rel="noopener noreferrer">sapui5bin Github repo</A> here:</P><P></P><P><A class="jive-link-external-small" href="https://github.com/qmacro/sapui5bin/blob/master/SortingAndGrouping/TwoProperties.html" target="_blank" rel="nofollow noopener noreferrer">sapui5bin/SortingAndGrouping/TwoProperties.html at master Â· qmacro/sapui5bin Â· GitHub</A></P><P></P><P>And while we're on the subject of code examples, there's a complete example for the main theme of this post here:</P><P></P><P><A class="jive-link-external-small" href="https://github.com/qmacro/sapui5bin/blob/master/SortingAndGrouping/SingleProperty.html" target="_blank" rel="nofollow noopener noreferrer">sapui5bin/SortingAndGrouping/SingleProperty.html at master Â· qmacro/sapui5bin Â· GitHub</A></P><P>&nbsp;&nbsp;&nbsp;&nbsp; </P><P>Share &amp; enjoy!</P></DIV>
---
CodeTalk: SAPUI5 and SAP Fiori
technology-blog-members
2013-11-22
https://community.sap.com/t5/technology-blogs-by-members/codetalk-sapui5-and-sap-fiori/ba-p/13075749
2013-11-22-codetalk-sapui5-and-sap-fiori
<DIV class="jive-rendered-content"><P>Yesterday I was honoured to be a guest on <SPAN class="mention-scrubbed">ian.thain</SPAN><SPAN> 's CodeTalk series of video interviews. The subject was SAPUI5 and SAP Fiori, and the published interview is split over two videos on YouTube. Here's what we covered, based on the questions asked.</SPAN></P><P></P><P><SPAN>Video Playlist: <A class="jive-link-external-small" href="https://www.youtube.com/playlist?list=PLfctWmgNyOIcae85Ytr6b_J1jgcDb4-JL" target="_blank" rel="nofollow noopener noreferrer">https://www.youtube.com/playlist?list=PLfctWmgNyOIcae85Ytr6b_J1jgcDb4-JL</A><BR /></SPAN></P><P></P><H3 id="toc-hId-949925647"><SPAN>Part 1</SPAN></H3><P></P><P><IFRAME id="kaltura_player_1_p5s5dr9z" src="https://www.youtube.com/embed/HQd9kVApjkE" allowfullscreen="true" webkitallowfullscreen="" mozallowfullscreen="" width="625px" height="360px" frameborder="0"></IFRAME></P><P><SPAN><BR /></SPAN></P><P><SPAN>In this part, we discuss SAPUI5 and SAP Fiori in general, and talk about the relation between these two things, major features in SAPUI5, including the automatic module loading system, the data model mechanisms, and in particular OData. We also talk about the architecture and startup of a very simple app.</SPAN></P><P></P><P><SPAN>Questions covered:</SPAN></P><P><SPAN><BR /></SPAN></P><UL><LI>What is SAPUI5, where is it positioned, and where is it being used right now?</LI><LI>What does SAPUI5 consist of?</LI><LI>What does SAPUI5 look like?</LI><LI><SPAN style="font-size: 10pt">Can you give me an overview of some of the major features of SAPUI5? </SPAN></LI><LI><SPAN style="font-size: 10pt">Can you tell me more about OData and SAPUI5?</SPAN></LI><LI><SPAN style="font-size: 10pt">What is Fiori?<BR /></SPAN></LI><LI>What does a basic app look like?</LI></UL><P></P><H3 id="toc-hId-753412142">Part 2</H3><P></P><P><IFRAME id="kaltura_player_1_p5s5dr9z" src="https://www.youtube.com/embed/r-QszpA-HiI" allowfullscreen="true" webkitallowfullscreen="" mozallowfullscreen="" width="625px" height="360px" frameborder="0"></IFRAME></P><P></P><P>In this part we dig a little deeper, and talk about what a more complex app looks like. There's an example custom Fiori app, built using the <A class="jive-link-external-small" href="https://sapui5.hana.ondemand.com/sdk/#docs/guide/Components.html" target="_blank" rel="nofollow noopener noreferrer">Component concept</A> and there's an 11 minute screencast that walks through that app, the controls used, and then looks under the hood to see how it's put together (bootstrap, parameters, Component and ComponentContainer, index.html, Component.js, views (JavaScript &amp; XML) and controllers, View containing the SplitApp control, custom utility functions, internationalisation, folder structure, and more).</P><P></P><P>Further questions covered:</P><P></P><UL><LI>What does a more complete app look like?</LI><LI>What skills do I need?</LI><LI>What are the next steps?</LI></UL><P></P><P>If you just want a future reference to the screencast, it's available separately here too: <A class="jive-link-external-small" href="https://www.youtube.com/watch?v=tfOO4szA2Bg" target="_blank" rel="nofollow noopener noreferrer">https://www.youtube.com/watch?v=tfOO4szA2Bg</A></P><P></P><P>Share and enjoy!</P></DIV>
---
Mobile Dev Course W3U3 Rewrite - XML Views - An Intro
technology-blog-members
2013-11-19
https://community.sap.com/t5/technology-blogs-by-members/mobile-dev-course-w3u3-rewrite-xml-views-an-intro/ba-p/13246099
2013-11-19-mobile-dev-course-w3u3-rewrite-xml-views-an-intro
<DIV class="jive-rendered-content"><P><SPAN style="background-color: #ffffff; color: #333333;">I </SPAN><A class="jive-link-blog-small" data-containerid="65881" data-containertype="37" data-objectid="94915" data-objecttype="38" href="https://blogs.sap.com/?p=94915" target="_blank" rel="noopener noreferrer">rewrote the mobile dev course sample app from W3U3</A><SPAN style="background-color: #ffffff; color: #333333;">. Then</SPAN><SPAN style="font-size: 10pt;"><SPAN style="background-color: #ffffff; color: #333333;"> I created <A class="jive-link-external-small" href="https://github.com/qmacro/w3u3_redonebasic/tree/xmlviews" target="_blank" rel="nofollow noopener noreferrer">a new branch 'xmlviews' in the repo on Github</A> and rebuilt the views in XML (they were originally in JavaScript). <STRONG>This post talks about XML views, and touches on some points that might be useful for you if you're looking to build SAPUI5 apps with XML views yourself</STRONG></SPAN><SPAN style="background-color: #ffffff; color: #333333;"><STRONG>.</STRONG> See the links at the bottom of the </SPAN><A class="jive-link-blog-small" data-containerid="65881" data-containertype="37" data-objectid="94915" data-objecttype="38" href="https://blogs.sap.com/?p=94915" target="_blank" rel="noopener noreferrer">opening post</A><SPAN style="background-color: #ffffff; color: #333333;"> of this series to get to explanations for the other areas.</SPAN></SPAN></P><P><SPAN style="color: #333333; font-size: 10pt; background-color: #ffffff;"><BR /></SPAN></P><P></P><H2 id="toc-hId-875353886">Different Ways To Define a View</H2><P></P><P><SPAN style="font-size: 10pt;">To understand where XML views fit in, let's take a look at this diagram that highlights the Model-View-Controller (MVC) support that SAPUI5 has.</SPAN></P><P></P><P><IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2013/11/mvc_326622.png" height="196" width="417" /></P><P></P><P>Views can be written in JavaScript, HTML, JSON or XML. </P><P></P><UL><LI>HTML: The Wave 1 Fiori apps are written in HTML (and <A class="jive-link-thread-small" data-containerid="2421" data-containertype="14" data-objectid="3447189" data-objecttype="1" href="http://scn.sap.com/thread/3447189#14487157" target="_blank" rel="noopener noreferrer">may be re-written to be in XML</A>)</LI><LI>JavaScript: Many of us start out writing views in JavaScript, partially because there are a lot of examples out there in JavaScript (that's changing soon with the <A class="jive-link-external-small" href="https://sapui5.hana.ondemand.com/sdk/test-resources/sap/m/demokit/explored/index.html" target="_blank" rel="nofollow noopener noreferrer">sap.m Explored app in the DemoKit</A> - watch this space!) and partially because it's the same language we use to build the controllers</LI><LI>JSON: You can build views declaratively with JSON; it's not common to see, but intriguing nonetheless, especially when you consider building views programmatically</LI><LI>XML: Fiori Wave 2 apps are built with XML views</LI></UL><P></P><P>Recently I've had a good chunk of work that involved writing XML views, and I can honestly say that in contrast to the received wisdom that has XML as "generally verbose and clunky", writing views in XML is both concise and very pleasant, not to mention satisfyingly declarative.</P><P></P><P></P><H2 id="toc-hId-678840381">A Simple View in XML and JavaScript</H2><P></P><P>Let's get an idea of what an XML view looks like, and contrast it with the JavaScript equivalent. We'll keep it deliberately simple - this is what it looks like:</P><P></P><P><IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2013/11/greetings_326668.png" /></P><P></P><P>We're using the sap.m library controls: An App, containing a Page, which has a Text as the only main content, and a Bar, containing a Button, as the footer.</P><P></P><P>This is what the view looks like declared in XML.</P><P></P><PRE class="language-xml"><CODE>&lt;core:View xmlns:core="sap.ui.core" xmlns="sap.m"&gt;<BR />
&nbsp;&nbsp;&nbsp;&nbsp; &lt;App&gt;<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;Page title="Greetings"&gt;<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;Text text="Hello World" /&gt;<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;footer&gt;<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;Bar&gt;<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;contentRight&gt;<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;Button text="Edit" /&gt;<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/contentRight&gt;<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/Bar&gt;<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/footer&gt;<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/Page&gt;<BR />
&nbsp;&nbsp;&nbsp; &lt;/App&gt;<BR />
 &lt;/core:View&gt;</CODE></PRE><P></P><P></P><P>And this is what it looks like declared in JavaScript. Note that I've deliberately avoided any unnecessary verbosity by not declaring intermediate variables to hold the different controls, as is common in many examples.</P><P></P><PRE class="language-javascript"><CODE>sap.ui.jsview("com.opensap.Page", {<BR />
&nbsp;&nbsp;&nbsp; createContent: function(oController) {<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return new sap.m.App({<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pages: [<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new sap.m.Page({<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; title: "Greetings",<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; content: [<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new sap.m.Text({<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; text: "Hello World"<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; })<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ],<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; footer: new sap.m.Bar({<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; contentRight: new sap.m.Button({<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; text: "Edit"<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; })<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; })<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; })<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ]<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; });<BR />
&nbsp;&nbsp;&nbsp; }<BR />
})</CODE></PRE><P></P><P><SPAN style="font-size: 10pt;"><BR /></SPAN></P><P><SPAN style="font-size: 10pt; background-color: #ffffff; color: #333333;">Now, this is not a competition between the two, but I know which I prefer. The XML view is simpler to scan and it's clearer to see what controls are being used, and what relation they have to each other. It's also slightly less verbose than the JavaScript view. This conciseness is accentuated with larger views - the concise nature of the declarative syntax remains and scales in XML.</SPAN></P><P><SPAN style="font-size: 10pt; background-color: #ffffff; color: #333333;"><BR /></SPAN></P><P></P><H2 id="toc-hId-482326876">The Nature of an XML View</H2><P></P><H3 id="toc-hId-414896090">XML Namespaces</H3><P></P><P><SPAN style="font-size: 10pt; background-color: #ffffff; color: #333333;">Let's have a look in a bit more detail at that XML view. Notice first that there are <A class="jive-link-external-small" href="http://en.wikipedia.org/wiki/XML_namespace" target="_blank" rel="nofollow noopener noreferrer">namespace definitions</A>. This is standard XML stuff, and affords us prefixes to specify from what SAPUI5 library the specific control is from. Here we have a couple of prefix namespaces - "core", for the <A class="jive-link-external-small" href="https://sapui5.hana.ondemand.com/sdk/#docs/api/symbols/sap.ui.core.html" target="_blank" rel="nofollow noopener noreferrer">sap.ui.core</A> library, and the default namespace (no prefix) for the <A class="jive-link-external-small" href="https://sapui5.hana.ondemand.com/sdk/#docs/api/symbols/sap.m.html" target="_blank" rel="nofollow noopener noreferrer">sap.m</A> library. It makes sense in this case (and for the Fiori apps) to have the default namespace set for sap.m as that's where the majority of the controls come from, and therefore the majority of the XML element names won't need a prefix. Note the "core" prefix is used on the root element itself: "core:View".</SPAN></P><P></P><H3 id="toc-hId-218382585">Representing Controls</H3><P></P><P><SPAN style="font-size: 10pt; background-color: #ffffff; color: #333333;">Once we've declared our namespaces, we're ready to declare the controls that we want to use. And for the App control, for example, it's as simple as an opening and closing element pair: "&lt;App&gt;...&lt;/App&gt;". The same goes for all the other controls in this example too. Detail for a control is specified using XML attributes. For example, the Page has a title of "Greetings" and this is specified in an attribute, as is the text ("Hello World") for the Text control. </SPAN></P><P></P><P><SPAN style="font-size: 10pt; background-color: #ffffff; color: #333333;">Note that the controls we mentioned are represented by XML elements that are capitalised (View, App, Page, Text, Bar, Button). </SPAN></P><P></P><H3 id="toc-hId-21869080">Digging Into Controls</H3><P></P><P><SPAN style="font-size: 10pt; background-color: #ffffff; color: #333333;">But what about the other stuff? What's that "&lt;footer&gt;...&lt;/footer&gt;", for example? That's not a control, nor is it capitalised. It's an aggregation. Specifically, an aggregation belonging to the Page control. </SPAN></P><P></P><P><SPAN style="font-size: 10pt; background-color: #ffffff; color: #333333;">Let's take a step back and look at how controls are structured. We'll take the <A class="jive-link-external-small" href="https://sapui5.hana.ondemand.com/sdk/#docs/api/symbols/sap.m.Page.html" target="_blank" rel="nofollow noopener noreferrer">sap.m.Page control</A> as an example. This is what we see when we look at <A class="jive-link-external-small" href="https://sapui5.hana.ondemand.com/sdk/#docs/api/symbols/sap.m.Page.html#constructor" target="_blank" rel="nofollow noopener noreferrer">the sap.m.Page control's constructor documentation in the API reference</A>:</SPAN></P><P></P><P><IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2013/11/pageconstructor_326732.png" width="620" /></P><P>We see that a control can have <A class="jive-link-external-small" href="https://sapui5.hana.ondemand.com/sdk/#docs/guide/OnTheFlyControlDefinition.html" target="_blank" rel="nofollow noopener noreferrer">Properties, Aggregations, Associations and Events</A>. In this example, what we're interested in are Properties and Aggregations. By now you will probably have worked out that Properties of a control are declared using XML attributes (title="Greetings", for example). And as properties don't start with an uppercase letter, neither do the corresponding attribute names. </P><P></P><P>So that brings us on to Aggregations. An aggregation can be thought of as a collection of zero or more 'child controls'. Perhaps one of the most common aggregations is in a <A class="jive-link-external-small" href="https://sapui5.hana.ondemand.com/sdk/#docs/api/symbols/sap.m.List.html" target="_blank" rel="nofollow noopener noreferrer">sap.m.List</A> control, where the entries in the list are, say, <A class="jive-link-external-small" href="https://sapui5.hana.ondemand.com/sdk/#docs/api/symbols/sap.m.StandardListItem.html" target="_blank" rel="nofollow noopener noreferrer">sap.m.StandardListItem</A> control children in the 'items' aggregation. Note that in the aggregation definition, the type of controls that can be contained can be restricted. <SPAN style="font-size: 10pt;">In the case of the List's items aggregation, the type sap.m.ListItemBase is specified:</SPAN></P><P></P><P><IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2013/11/listagg_326734.png" /></P><P>As sap.m.StandardListItem inherits from sap.m.ListItemBase, it is a valid control to be contained in the sap.m.List's items aggregation.</P><P></P><P>So, back to "&lt;footer&gt;...&lt;/footer&gt;". Guess what? Yes, this XML element, with a lower case initial letter, represents an aggregation. You can see from the documentation screenshot that the footer aggregation of the sap.m.Page control expects a single control - a sap.m.Bar. So that's what we have - a Bar. And in turn, <A class="jive-link-external-small" href="https://sapui5.hana.ondemand.com/sdk/#docs/api/symbols/sap.m.Bar.html#constructor" target="_blank" rel="nofollow noopener noreferrer">the sap.m.Bar control has a triple of aggregations</A>, representing content in the left, center and right of the Bar. In this case we want to put a sap.m.Button control on the right, so we use the contentRight aggregation. And the simplicity of what we want to do is in some part reflected in the simplicity of the XML:</P><P></P><PRE class="language-xml"><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;Page title="Greetings"&gt;<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;Text text="Hello World" /&gt;<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;footer&gt;<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;Bar&gt;<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;contentRight&gt;<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;Button text="Edit" /&gt;<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/contentRight&gt;<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/Bar&gt;<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/footer&gt;<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/Page&gt;</CODE></PRE><P></P><P>But wait. In the JavaScript version the sap.m.Text control is specified within the content aggregation of the sap.m.Page:</P><P></P><PRE class="language-javascript"><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new sap.m.Page({<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; title: "Greetings",<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; content: [<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new sap.m.Text({<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; text: "Hello World"<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; })<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ],</CODE></PRE><P></P><P>Where's the equivalent in the XML? There isn't. Or rather, it's implicit. The content aggregation is the Page's default aggregation, and as such, doesn't need to be explicitly declared in the XML view. Clean! You can include the "&lt;content&gt; ... &lt;/content&gt;" if you want:</P><P></P><PRE class="language-xml"><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;Page title="Greetings"&gt;<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;content&gt;<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;Text text="Hello World" /&gt;<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/content&gt;<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;footer&gt;<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;Bar&gt;<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;contentRight&gt;<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;Button text="Edit" /&gt;<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/contentRight&gt;<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/Bar&gt;<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/footer&gt;<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/Page&gt;</CODE></PRE><P></P><P>but you don't have to.</P><P></P><P></P><H2 id="toc-hId--303727144">Next Steps</H2><P></P><P>Armed with this knowledge, we're ready to examine the <A class="jive-link-external-small" href="https://github.com/qmacro/w3u3_redonebasic/tree/xmlviews/myapp" target="_blank" rel="nofollow noopener noreferrer">XML versions of the views in the W3U3 app I rewrote</A>. We'll do that in the next post. </P><P></P><P>Until then, share &amp; enjoy!</P><P></P><P></P><P></P><P></P><P><SPAN style="font-size: 10pt; background-color: #ffffff; color: #333333;"><BR /></SPAN></P><P></P><P><SPAN style="font-size: 10pt; background-color: #ffffff; color: #333333;"><BR /></SPAN></P></DIV>
---
W3U3 Rewrite: XML views
technology-questions
2013-10-31
https://community.sap.com/t5/technology-q-a/w3u3-rewrite-xml-views/qaq-p/9890321
2013-10-31-w3u3-rewrite-xml-views
<HTML><HEAD></HEAD><BODY><P>Hi all</P><P></P><P>I recently published a series of posts on rewriting one of the OpenSAP Mobile Course apps from Week 3 Unit 3 (W3U3) - see the <A _jive_internal="true" href="https://answers.sap.com/community/developer-center/front-end/blog/2013/10/16/mobile-dev-course-w3u3-rewrite--intro" rel="noopener noreferrer">W3U3 Rewrite Series intro post</A> for more details. </P><P></P><P>One of the nice-to-have's that I mentioned in the intro, and something that will become more important over time (esp. with the Fiori Wave 2 apps) is the XML-based declarative view definitions. So, <A _jive_internal="true" href="https://answers.sap.com/community/developer-center/front-end/blog/2013/10/16/mobile-dev-course-w3u3-rewrite--intro#comment-409175" rel="noopener noreferrer">spurred on</A> by folks like Former Member<SPAN> I made a first pass at XML views for the rewrite. </SPAN></P><P></P><P><SPAN>I've created a new branch on the Github repo:</SPAN></P><P></P><P><SPAN><A href="https://github.com/qmacro/w3u3_redonebasic/tree/xmlviews" rel="nofollow noopener noreferrer">https://github.com/qmacro/w3u3_redonebasic/tree/xmlviews</A></SPAN></P><P></P><P><SPAN>This branch has the changes for the XML view approach. It includes a replacement XML view for each of the views (App, Login, ProductList, ProductDetail, SupplierDetail) and a modified navigation mechanism using the EventBus.</SPAN></P><P></P><P><SPAN>I'll write a blog post on this soon, but for now, as always ... share &amp; enjoy!<BR /></SPAN></P></BODY></HTML>
---
Mobile Dev Course W3U3 Rewrite - ProductList, ProductDetail & SupplierDetail
technology-blog-members
2013-10-19
https://community.sap.com/t5/technology-blogs-by-members/mobile-dev-course-w3u3-rewrite-productlist-productdetail-amp-supplierdetail/ba-p/13034234
2013-10-19-mobile-dev-course-w3u3-rewrite-productlist-productdetail-amp-supplierdetail
<DIV class="jive-rendered-content"><P><SPAN style="color: #333333;font-size: 12px;background-color: #ffffff">I </SPAN><A class="jive-link-blog-small" href="https://blogs.sap.com/?p=94915" target="_blank" rel="noopener noreferrer">rewrote the mobile dev course sample app from W3U3</A><SPAN style="color: #333333;font-size: 12px;background-color: #ffffff">. <STRONG>This </STRONG></SPAN><SPAN style="color: #333333;font-size: 12px;background-color: #ffffff"><STRONG>post explains what I changed in the ProductList, ProductDetail and SupplierDetail views / controllers. </STRONG>See the links at the bottom of the </SPAN><A class="jive-link-blog-small" href="https://blogs.sap.com/?p=94915" target="_blank" rel="noopener noreferrer">opening post</A><SPAN style="color: #333333;font-size: 12px;background-color: #ffffff"> to get to explanations for the other areas.</SPAN></P><P></P><H3 id="toc-hId-946196931">ProductList</H3><H3 id="toc-hId-749683426"></H3><P></P><P><SPAN style="color: #333333;font-size: 12px;background-color: #ffffff">If you remember back to the Login controller (<A class="jive-link-blog-small" href="https://blogs.sap.com/?p=95019" target="_blank" rel="noopener noreferrer">described in the previous post in this series</A>) we arrive at the ProductList view after successfully logging in, creating the OData model for the business available at the OData service, and performing a move from the Login page to this ProductList page with <SPAN style="color: #333333;font-size: 12px;background-color: #ffffff">oApp.to("ProductList"), <A class="jive-link-external-small" href="https://sapui5.hana.ondemand.com/sdk/#docs/api/symbols/sap.m.NavContainer.html#to" target="_blank" rel="nofollow noopener noreferrer">the navigation mechanism that is available in the App control, inherited from NavContainer</A>.</SPAN></SPAN></P><P></P><H4 id="toc-hId-682252640">ProductList.view.js</H4><P></P><H4 id="toc-hId-485739135"></H4><P><SPAN style="color: #333333;font-size: 12px;background-color: #ffffff">Here's what the ProductList view looks like.</SPAN></P><P></P><PRE class="language-javascript"><CODE>sap.ui.jsview("com.opensap.ProductList", {<BR />
<BR />
&nbsp;&nbsp;&nbsp; getControllerName: function() {<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return "com.opensap.ProductList";<BR />
&nbsp;&nbsp;&nbsp; },<BR />
<BR />
&nbsp;&nbsp;&nbsp; createContent: function(oController) {<BR />
<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return new sap.m.Page("ProductPage", {<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; title: "Products",<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; content: [<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new sap.m.List({<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; headerText: "Product Overview",<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; items: {<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; path: "/ProductCollection",<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; template: new sap.m.StandardListItem({<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; title: "{Name}",<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; description: "{Description}",<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; type: sap.m.ListType.Navigation,<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; press: [oController.handleProductListItemPress, oController]<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; })<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; })<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ]<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; });<BR />
&nbsp;&nbsp;&nbsp; }<BR />
<BR />
});</CODE></PRE><P></P><P><SPAN style="color: #333333;font-size: 12px;background-color: #ffffff">Like the previous views, this isn't actually much different from the original version. I've left out stuff that wasn't needed, and in particular the icon property of each StandardListItem was pointing at the wrong model property name, resulting in no icon being shown in the list. I've removed the icon* properties as well as a couple of list properties (inset and type).</SPAN></P><P></P><P><SPAN style="color: #333333;font-size: 12px;background-color: #ffffff">What I have done, though, mostly for fun, is to write the createContent function as a single statement. This in contrast to the multiple statements in the original, but perhaps more interestingly, the whole thing looks more declarative than imperative. This will come into play when we eventually look at declarative views in XML, which are actually my prefererence, and arguably the neatest and least amount of typing ... which might surprise you. Anyway, more on that another time.</SPAN></P><P></P><H4 id="toc-hId-289225630"><SPAN style="color: #333333;font-size: 12px;background-color: #ffffff">ProductList.controller.js</SPAN></H4><H4 id="toc-hId-92712125"></H4><P><SPAN style="color: #333333;font-size: 12px;background-color: #ffffff">The ProductList controller is very simple; all it has to do is handle the press of the StandardListItem (see the press event specification in the view above).</SPAN></P><P></P><PRE class="language-javascript"><CODE>sap.ui.controller("com.opensap.ProductList", {<BR />
&nbsp;&nbsp;&nbsp; handleProductListItemPress: function(oEvent) {<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.getView().getParent().to("ProductDetail", {<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; context: oEvent.getSource().getBindingContext()<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; });<BR />
&nbsp;&nbsp;&nbsp; }<BR />
});</CODE></PRE><P></P><P><SPAN style="color: #333333;font-size: 12px;background-color: #ffffff">Again, I've left out the empty boilerplate code from the original, and am just doing what's required, nothing more: getting the binding context of the source of the event (the particular StandardListItem that was pressed), and passing that in the navigation to the ProductDetail page. </SPAN></P><P></P><P><SPAN style="color: #333333;font-size: 12px;background-color: #ffffff"><EM>Note that I've been sort of interchanging the word page and view here and earlier. This is in relation to the App control, which has a 'pages' aggregation from the NavContainer control. As the <A class="jive-link-external-small" href="https://sapui5.hana.ondemand.com/sdk/#docs/api/symbols/sap.m.NavContainer.html#getPages" target="_blank" rel="nofollow noopener noreferrer">documentation states</A>, you don't have to put Page controls into this pages aggregation, you can put other controls that have a fullscreen semantic, and one of those possible controls is a View.</EM><BR /></SPAN></P><P></P><P></P><H3 id="toc-hId--232884099">ProductDetail</H3><H3 id="toc-hId--429397604"></H3><P></P><P><SPAN style="color: #333333;font-size: 12px;background-color: #ffffff">So we've navigated from the ProductList to the ProductDetail by selecting an item in the List control, and having that item's binding context (related to the OData model) passed to us. Here's what the view looks like.</SPAN></P><P></P><PRE class="language-javascript"><CODE>sap.ui.jsview("com.opensap.ProductDetail", {<BR />
&nbsp;&nbsp;&nbsp; getControllerName: function() {<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return "com.opensap.ProductDetail";<BR />
&nbsp;&nbsp;&nbsp; },<BR />
&nbsp;&nbsp;&nbsp; onBeforeShow: function(oEvent) {<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (oEvent.data.context) {<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.setBindingContext(oEvent.data.context);<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<BR />
&nbsp;&nbsp;&nbsp; },</CODE></PRE><P></P><P><SPAN style="color: #333333;font-size: 11.818181991577148px;background-color: #ffffff">So in the ProductDetail view, where we want to simply show more detail about that particular Product entity, we first make sure that the passed context is bound (to the view).</SPAN></P><P><SPAN style="color: #333333;font-size: 11.818181991577148px;background-color: #ffffff"><BR /></SPAN></P><P></P><PRE class="language-javascript"><CODE>&nbsp; createContent: function(oController) {<BR />
<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return new sap.m.Page({<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; title: "{Name}",<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; showNavButton: true,<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; navButtonPress: [oController.handleNavButtonPress, oController],<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; content: [<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new sap.m.List({<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; items: [<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new sap.m.DisplayListItem({<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; label: "Name",<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; value: "{Name}"<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }),<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new sap.m.DisplayListItem({<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; label: "Description",<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; value: "{Description}"<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }),<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new sap.m.DisplayListItem({<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; label: "Price",<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; value: "{Price} {CurrencyCode}"<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }),<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new sap.m.StandardListItem({<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; title: "Supplier",<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; description: "{SupplierName}",<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; type: sap.m.ListType.Navigation,<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; press: [oController.handleSupplierPress, oController]<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; })<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ]<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }),<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new sap.m.VBox({<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; alignItems: sap.m.FlexAlignItems.Center,<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; items: [<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new sap.m.Image({<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; src: "{app&gt;/ES1Root}{ProductPicUrl}",<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; decorative: true,<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; densityAware: false<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; })<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ]<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; })<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ]<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; });<BR />
&nbsp;&nbsp;&nbsp; }<BR />
});</CODE></PRE><P></P><P><SPAN style="color: #333333;font-size: 11.818181991577148px;background-color: #ffffff">Once that's done, all we have to do is fill out the createContent function, which again is very similar to the original. Note that here I'm using two model properties together for the value of the "Price" item to show a currency value and code. </SPAN></P><P></P><P><SPAN style="color: #333333;font-size: 11.818181991577148px;background-color: #ffffff">In the original version, there was some custom data attached to the Supplier item - specifically the SupplierId property from the Product. This was used, in the controller, to manually (and somewhat "bluntly") construct an OData Entity URL for subsequent (manual) retrieval. Of couse, you might have guessed by now what I'm going to say. Not necessary at all. More on this shortly. But it's worth pointing out that the attaching of the custom data is quite a useful and widely available facility in general. It's widely available because it's part of the Element class, from which, ultimately, all controls inherit. So you can attach custom data in name/value pairs to any control you wish, more or less.</SPAN></P><P></P><P><SPAN style="color: #333333;font-size: 11.818181991577148px;background-color: #ffffff">Finally, let's have a quick look at that VBox control containing the product image. I took a lead from the original app and decided to prefix the relative URL (which is what is contained in the ProductPicUrl property) with the generic (non-SMP-proxied) 'sapes1' URL base. And to achieve this prefixing I just concatenated a couple of model properties - one from the named "app" model (the ES1Root) and the other being the actual image relative URL. </SPAN></P><P><SPAN style="color: #333333;font-size: 11.818181991577148px;background-color: #ffffff"><BR /></SPAN></P><P><SPAN style="color: #333333;font-size: 11.818181991577148px;background-color: #ffffff">Ok, let's have a look at the rewritten controller.&nbsp; </SPAN></P><P></P><H4 id="toc-hId--496828390"><SPAN style="color: #333333;font-size: 11.818181991577148px;background-color: #ffffff">ProductDetail.controller.js<BR /></SPAN></H4><P></P><PRE class="language-javascript"><CODE>sap.ui.controller("com.opensap.ProductDetail", {<BR />
&nbsp;&nbsp;&nbsp; handleNavButtonPress: function(oEvent) {<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.getView().getParent().back();<BR />
&nbsp;&nbsp;&nbsp; },<BR />
<BR />
&nbsp;&nbsp;&nbsp; handleSupplierPress: function(oEvent) {<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.getView().getParent().to("SupplierDetail", {<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; context: oEvent.getSource().getBindingContext()<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; });<BR />
&nbsp;&nbsp;&nbsp; }<BR />
<BR />
});</CODE></PRE><P></P><P><SPAN style="color: #333333;font-size: 11.818181991577148px;background-color: #ffffff">As well as the back navigation, we have the handling of the press of the Supplier item in the ProductDetail view. This should take us to the SupplierDetail view to show us more information about the supplier. </SPAN></P><P></P><P><SPAN style="color: #333333;font-size: 11.818181991577148px;background-color: #ffffff">So before we think about how we make this work, let's pause for a second and consider the business data that we're consuming through the OData service.</SPAN></P><P></P><H3 id="toc-hId--822424614">OData Model and Service</H3><H3 id="toc-hId--1094169488"></H3><P></P><P><SPAN style="color: #333333;font-size: 11.818181991577148px;background-color: #ffffff">We have, in the OData service originating at <A class="jive-link-external-small" href="https://sapes1.sapdevcenter.com/sap/opu/odata/sap/ZGWSAMPLE_SRV/" target="_blank" rel="nofollow noopener noreferrer">https://sapes1.sapdevcenter.com/sap/opu/odata/sap/ZGWSAMPLE_SRV/</A>, a number of EntitySets, or 'collections', including the <A class="jive-link-external-small" href="https://sapes1.sapdevcenter.com/sap/opu/odata/sap/ZGWSAMPLE_SRV/BusinessPartnerCollection?sap-ds-debug=true" target="_blank" rel="nofollow noopener noreferrer">BusinessPartnerCollection</A> and the <A class="jive-link-external-small" href="https://sapes1.sapdevcenter.com/sap/opu/odata/sap/ZGWSAMPLE_SRV/ProductCollection?sap-ds-debug=true" target="_blank" rel="nofollow noopener noreferrer">ProductCollection</A> - both of which have entities that we're interested in for our app. We start out with the ProductCollection, display a list, pick a specific product for more detail, and then go to the supplier for that product. If you look at the OData metadata for this service, you'll see that in the definition of the Product entity, there's a<EM> navigation property </EM>that will take us directly from the product entity to the related business partner entity. <EM>How useful is that? Yes, very! So let's use it.</EM></SPAN></P><P></P><P><SPAN style="color: #333333;font-size: 11.818181991577148px;background-color: #ffffff"><EM><IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2013/10/navprop_300982.jpg" width="620" /></EM></SPAN></P><P><SPAN style="color: #333333;font-size: 11.818181991577148px;background-color: #ffffff">Before we look at how we use it, let's review how the original app was doing things here to go from the selected product detail to the supplier. In the supplierTap function of the original ProductDetail controller, the OData.read function was called explicitly (ouch), on a manually constructed OData URL (ouch), which abruptly jumped straight to the BusinessPartnerCollection, ignoring this navigation feature (double-ouch). The supplier's ID (which had been squirrelled away in the custom data as mentioned earlier) was specified directly, as a key predicate, and a JSON representation was requested: <BR /><BR /><SPAN>OData.read("</SPAN><A class="jive-link-external-small" href="https://sapes1.devcenter.com/sap/opu/odata/sap/ZGWSAMPLE_SRV/BusinessPartnerCollection" target="_blank" rel="nofollow noopener noreferrer">https://sapes1.devcenter.com/sap/opu/odata/sap/ZGWSAMPLE_SRV/BusinessPartnerCollection</A><SPAN>('" + supplierId + "')?$format=json", ...)</SPAN></SPAN></P><P></P><P><SPAN style="color: #333333;font-size: 11.818181991577148px;background-color: #ffffff">Yes, you can guess the next bit <span class="lia-unicode-emoji" title=":slightly_smiling_face:">ð</span> The JSON data was passed directly to the next view, bypassing any semblance of OData model usage. Ouch. I guess this also bypasses the SMP URL rewriting security and should have really been the SMP-based URL. And ouch.<BR /></SPAN></P><P></P><P><SPAN style="color: #333333;font-size: 11.818181991577148px;background-color: #ffffff">So how did we do it here? Well, just by passing the context of the selected product, as usual. Just like we did when we went from the ProductList view to the ProductDetail view. And then following on from that in the SupplierDetail view with a reference to the relative 'Supplier' entity.</SPAN></P><P><SPAN style="color: #333333;font-size: 11.818181991577148px;background-color: #ffffff"><BR /></SPAN></P><P></P><H3 id="toc-hId--1290682993">SupplierDetail</H3><H3 id="toc-hId--1487196498"></H3><P></P><H4 id="toc-hId--1977113010"><SPAN style="color: #333333;font-size: 11.818181991577148px;background-color: #ffffff">SupplierDetail.view.js</SPAN></H4><P></P><P><SPAN style="color: #333333;font-size: 11.818181991577148px;background-color: #ffffff">Ok, so here's the view.<BR /></SPAN></P><P></P><H4 id="toc-hId-2121340781"></H4><PRE class="language-javascript"><CODE>sap.ui.jsview("com.opensap.SupplierDetail", {<BR />
&nbsp;&nbsp;&nbsp; getControllerName: function() {<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return "com.opensap.SupplierDetail";<BR />
&nbsp;&nbsp;&nbsp; },<BR />
&nbsp;&nbsp;&nbsp; onBeforeShow: function(oEvent) {<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (oEvent.data.context) {<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.setBindingContext(oEvent.data.context);<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<BR />
&nbsp;&nbsp;&nbsp; },<BR />
 &nbsp;&nbsp; createContent: function(oController) {<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; var oPage = new sap.m.Page({<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; title: "{CompanyName}",<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; showNavButton: true,<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; navButtonPress: [oController.handleNavButtonPress, oController],<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; content: [<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new sap.m.List({<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; items: [<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new sap.m.DisplayListItem({<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; label: "Company Name",<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; value: "{CompanyName}"<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }),<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new sap.m.DisplayListItem({<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; label: "Web Address",<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; value: "{WebAddress}"<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }),<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new sap.m.DisplayListItem({<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; label: "Phone Number",<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; value: "{PhoneNumber}"<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; })<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ]<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; })<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ]<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; });<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; oPage.bindElement("Supplier");<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return oPage;<BR />
&nbsp;&nbsp;&nbsp; }<BR />
});</CODE></PRE><P></P><P><SPAN style="color: #333333;font-size: 12.222222328186035px;background-color: #ffffff">This view looks pretty normal and doesn't differ much from the original. We have the onBeforeShow and the createContent. But the key line is this:</SPAN></P><P></P><P><SPAN style="color: #333333;font-size: 12.222222328186035px;background-color: #ffffff">oPage.bindElement("Supplier")</SPAN></P><P></P><P><SPAN style="color: #333333;font-size: 12.222222328186035px;background-color: #ffffff">At the point that this is invoked, there's already the binding context that refers to the specific product previously chosen, say, like this:</SPAN></P><P></P><P><SPAN style="color: #333333;font-size: 12.222222328186035px;background-color: #ffffff"><A class="jive-link-external-small" href="https://sapes1.sapdevcenter.com/sap/opu/odata/sap/ZGWSAMPLE_SRV/ProductCollection('HT-1007')" target="_blank" rel="nofollow noopener noreferrer">https://sapes1.sapdevcenter.com/sap/opu/odata/sap/ZGWSAMPLE_SRV/ProductCollection('HT-1007')</A></SPAN></P><P></P><P><SPAN style="color: #333333;font-size: 12.222222328186035px;background-color: #ffffff">(I'm using the 'sapes1' link rather than the SMP-rewritten one here so you can navigate them from here and have a look manually if you want.)</SPAN></P><P></P><P><SPAN style="color: #333333;font-size: 12.222222328186035px;background-color: #ffffff">Following the navigation property mentioned earlier, to the supplier (the entity in the BusinessPartnerCollection) is simply a matter, OData-wise, of extending the path to navigate to the supplier, like this:</SPAN></P><P></P><P><SPAN style="color: #333333;font-size: 12.222222328186035px;background-color: #ffffff"><A class="jive-link-external-small" href="https://sapes1.sapdevcenter.com/sap/opu/odata/sap/ZGWSAMPLE_SRV/ProductCollection(" target="_blank" rel="nofollow noopener noreferrer">https://sapes1.sapdevcenter.com/sap/opu/odata/sap/ZGWSAMPLE_SRV/ProductCollection('HT-1007')/Supplier</A></SPAN></P><P></P><P><SPAN style="color: #333333;font-size: 12.222222328186035px;background-color: #ffffff">So in OData terms, we're navigating. And in path terms, we're going to a relative "Supplier", which is exactly what we're doing with the oPage.bindElement("Supplier"). The <A class="jive-link-external-small" href="https://sapui5.hana.ondemand.com/sdk/#docs/api/symbols/sap.ui.base.ManagedObject.html#bindElement" target="_blank" rel="nofollow noopener noreferrer">bindElement</A> mechanism, when called on an entity in an OData model, triggers an automatic OData "read" operation, i.e. an HTTP GET request, and updates the model.&nbsp; Bingo!</SPAN></P><P></P><P><SPAN style="color: #333333;font-size: 12.222222328186035px;background-color: #ffffff">Looking at the Network tab of Chrome Developer Tools, this is what we see happens:</SPAN></P><P><IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2013/10/calls_300997.jpg" width="620" /></P><P></P><P><SPAN style="color: #333333;font-size: 12.222222328186035px;background-color: #ffffff">The first call (ProductCollection?$skip...) was for the initial binding to "/ProductCollection" in the ProductList view. Then a product HT-1007 was selected, the App navigated to the ProductDetail view, and then the supplier item was pressed. And when the bindElement in the SupplierDetail view was called, this triggered the last call in the screenshot - to "Supplier", relative to ProductCollection('HT-1007').</SPAN></P><P></P><P><SPAN style="color: #333333;font-size: 12.222222328186035px;background-color: #ffffff">All automatic and comfortable! </SPAN></P><P></P><P></P><P><SPAN style="font-weight: bold">SupplierDetail.controller.js</SPAN></P><P></P><PRE class="language-javascript"><CODE>sap.ui.controller("com.opensap.SupplierDetail", {<BR />
&nbsp;&nbsp;&nbsp; handleNavButtonPress: function(oEvent) {<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.getView().getParent().back();<BR />
&nbsp;&nbsp;&nbsp; }<BR />
})</CODE></PRE><P></P><P><SPAN style="color: #333333;font-size: 12.222222328186035px;background-color: #ffffff">Let's finish off with a quick look at the corresponding controller for this view. It doesn't have much work to do - just navigate back when the nav button is pressed. And it's very similar to the original.</SPAN></P><P></P><P><SPAN style="color: #333333;font-size: 12.222222328186035px;background-color: #ffffff">So there we have it. Embrace SAPUI5 and its myriad features (automatic module loading, well thought out controls, OData models, and more) and have fun building apps.</SPAN></P><P></P><P><SPAN style="color: #333333;font-size: 12.222222328186035px;background-color: #ffffff">That's draws this series to an end. Thanks for reading. The link to the Github repo where the rewritten app can be found is in the <A class="jive-link-blog-small" href="https://blogs.sap.com/?p=94915" target="_blank" rel="noopener noreferrer">original post in this series</A>, and also here: <A class="jive-link-external-small" href="https://github.com/qmacro/w3u3_redonebasic" target="_blank" rel="nofollow noopener noreferrer">https://github.com/qmacro/w3u3_redonebasic</A></SPAN></P><P></P><P><SPAN style="color: #333333;font-size: 12.222222328186035px;background-color: #ffffff">Share &amp; enjoy!</SPAN></P><P><SPAN style="color: #333333;font-size: 12.222222328186035px;background-color: #ffffff"> <BR /></SPAN></P></DIV>
---
Mobile Dev Course W3U3 Rewrite - App & Login
technology-blog-members
2013-10-18
https://community.sap.com/t5/technology-blogs-by-members/mobile-dev-course-w3u3-rewrite-app-amp-login/ba-p/13031417
2013-10-18-mobile-dev-course-w3u3-rewrite-app-amp-login
<DIV class="jive-rendered-content"><P>I <A class="jive-link-blog-small" href="https://blogs.sap.com/?p=94915" target="_blank" rel="noopener noreferrer">rewrote the mobile dev course sample app from W3U3</A>. <STRONG>This post explains what I changed in the App and Login views / controllers.</STRONG> See the links at the bottom of the <A class="jive-link-blog-small" href="https://blogs.sap.com/?p=94915" target="_blank" rel="noopener noreferrer">opening post</A> to get to explanations for the other areas.</P><P></P><H2 id="toc-hId-817026702">App</H2><H2 id="toc-hId-620513197"></H2><P> In the index.html, we instantiated the App view, which is a JavaScript view. The view has a corresponding controller and they look like this.</P><P></P><H4 id="toc-hId-682165130">App.view.js</H4><P></P><H4 id="toc-hId-485651625"></H4><PRE class="language-javascript"><CODE>sap.ui.jsview("com.opensap.App", {<BR />
&nbsp;&nbsp;&nbsp; getControllerName: function() {<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return "com.opensap.App";<BR />
&nbsp;&nbsp;&nbsp; },<BR />
&nbsp;&nbsp;&nbsp; createContent: function(oController) {<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; var oApp = new sap.m.App("idApp", {<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pages: [<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sap.ui.jsview("Login", "com.opensap.Login"),<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sap.ui.jsview("ProductList", "com.opensap.ProductList"),<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sap.ui.jsview("ProductDetail", "com.opensap.ProductDetail"),<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sap.ui.jsview("SupplierDetail", "com.opensap.SupplierDetail")<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ]<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; });<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return oApp;<BR />
&nbsp;&nbsp;&nbsp; }<BR />
});</CODE></PRE><P></P><P>This is actually not too far from the original version. However, it is much shorter, as it takes advantage of the pages aggregation property of the App control, and sticks the views straight in there. This is much quicker and neater than the slightly pedestrian way it is done in the original version. Also, there is no need to navigate explicitly to Login (this.app.to("Login")) as the first control in the aggregation will be the default anyway.</P><P></P><H4 id="toc-hId-289138120">App.controller.js</H4><P></P><H4 id="toc-hId-92624615"></H4><PRE class="language-javascript"><CODE>sap.ui.controller("com.opensap.App", {<BR />
<BR />
&nbsp;&nbsp;&nbsp; onInit: function() {<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sap.ui.getCore().setModel(new sap.ui.model.json.JSONModel("model/app.json"), "app");<BR />
&nbsp;&nbsp;&nbsp; }<BR />
});</CODE></PRE><P><SPAN style="font-size: 10pt"><BR /></SPAN></P><P>The App controller is even smaller, and uses the onInit event to create the JSON model that will hold the data about the application connection (this was mentioned in the <A class="jive-link-blog-small" href="https://blogs.sap.com/?p=94956" target="_blank" rel="noopener noreferrer">Index &amp; Structure</A> post). </P><P></P><P>Note that rather than having one single model in the app that holds all sorts of unrelated data, as it is done in the original version (there's a single JSON model for everything, and that's it), I am using setModel's optional second parameter, to specify a name ("app") for the model. This way it becomes a "named model" and is not the default (where no name is specified). You'll see later that references to properties in named models are prefixed with the name and a "&gt;" symbol, like this: "{app&gt;/ES1Root}".</P><P></P><P>The original App controller had empty onInit, onBeforeShow and navButtonTap events, which I have of course left out here (I'm guessing they might have come from a controller template and left in there).</P><P></P><H2 id="toc-hId--362054328">Login</H2><P>So the App view is used as a container, that has navigation capabilities (it actually inherits from NavContainer); it doesn't have any direct visible elements of its own. Instead, the "pages" aggregation is what holds the content entities, and the first one in there is the one that's shown by default. In this case it's Login. </P><P></P><P>The Login view and its corresponding controller are somewhat more involved, so let's take a look at the rewritten version step by step. </P><P></P><H4 id="toc-hId--300402395">Login.view.js</H4><P></P><P>The view itself is fairly self explanatory and doesn't differ too much from the original. There are however a couple of things I want to point out before moving on to the controller. </P><P></P><PRE class="language-javascript"><CODE>sap.ui.jsview("com.opensap.Login", {<BR />
<BR />
&nbsp;&nbsp;&nbsp; getControllerName: function() {<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return "com.opensap.Login";<BR />
&nbsp;&nbsp;&nbsp; },<BR />
<BR />
&nbsp;&nbsp;&nbsp; createContent: function(oController) {<BR />
<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return new sap.m.Page({<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; title: "Login",<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; showNavButton: false,<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; footer: new sap.m.Bar({<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; contentMiddle: [<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new sap.m.Button({<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; text: "Login",<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; press: [oController.loginPress, oController]<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }),<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ]<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }),<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; content: [<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new sap.m.List({<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; items: [<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new sap.m.InputListItem({<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; label: "Username",<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; content: new sap.m.Input({ value: "{app&gt;/Username}" })<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }),<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new sap.m.InputListItem({<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; label: "Password",<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; content: new sap.m.Input({ value: "{app&gt;/Password}", type: sap.m.InputType.Password })<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; })<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ]<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; })<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ]<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; });<BR />
&nbsp;&nbsp;&nbsp; }<BR />
<BR />
});</CODE></PRE><P></P><P><SPAN style="font-size: 10pt">First is the use of the press event on the Button control. The tap event (used in the original version of the app) <A class="jive-link-external-small" href="https://sapui5.hana.ondemand.com/sdk/#docs/api/symbols/sap.m.Button.html#event:tap" target="_blank" rel="nofollow noopener noreferrer">is deprecated</A>. You will see that throughout the app I've replaced the use of 'tap' with 'press'. </SPAN></P><P></P><P><SPAN style="font-size: 10pt">Also, note how the handler is specified for the press event in the construction of the Button: <EM>[fnListenerFunction, oListenerObject]</EM> (and it's the same in the original). This form allows you to specify, as the second oListenerObject parameter, the context which 'this' will have in the fnListenerFunction handler. In other words, doing it this way will mean that when you refer to 'this' in your handler, it will do what you probably expect and refer to the controller. </SPAN></P><P></P><P>Then we have the construction of the values for the Input controls. Because I loaded the data about the application connection into a named model (to keep that separate from the main business data) I have to prefix the model properties with "app&gt;" as mentioned above. </P><P></P><P></P><H4 id="toc-hId--496915900">Login.controller.js</H4><P></P><P>So now we'll have a look at the Login controller, and if you compare this new version with the original, you'll see that there are a number of differences.</P><P></P><PRE class="language-javascript"><CODE>sap.ui.controller("com.opensap.Login", {<BR />
<BR />
&nbsp;&nbsp;&nbsp; oSMPModel: null,</CODE></PRE><P><SPAN style="font-size: 10pt"> </SPAN></P><P><SPAN style="font-size: 10pt">As described in the course, this app needs to create a connection with the SMP server. The API with which to do that is OData-based - an OData service at the address</SPAN></P><P></P><P><SPAN style="font-family: 'courier new', courier"><A class="jive-link-external-small unlinked" target="_blank">https://smp-</A><SPAN>&lt;your-id&gt;trial.hanatrial.ondemand.com/odata/applications/latest/&lt;your-app-name&gt;/</SPAN></SPAN></P><P></P><P><SPAN style="font-size: 10pt">and as you saw in this unit (W3U3) we need to perform an OData "create" operation on the Connections collection to create a new Connection entity. So to do this, I'm using a model to represent the OData service, and I'm storing it singularly in the controller -- we don't need to set the model anywhere on the control tree, the create operation is just to make the connection and get the application connection ID (APPCID).<BR /></SPAN></P><P></P><P></P><PRE class="language-javascript"><CODE>&nbsp;&nbsp;&nbsp; loginPress: function(oEvent) {<BR />
<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; var oAppData = sap.ui.getCore().getModel("app").getData();<BR />
<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (!this.oSMPModel) {<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.oSMPModel = new sap.ui.model.odata.ODataModel(<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; oAppData.BaseURL + "/odata/applications/latest/" + oAppData.AppName<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</CODE></PRE><P><SPAN style="font-size: 10pt"> </SPAN></P><P><SPAN style="font-size: 10pt">When the login button is pressed we use the application data (from model/app.json, stored in the named "app" model) to construct the URL of the SMP connections OData service and create an OData model based on that.</SPAN></P><P><SPAN style="font-size: 10pt"><BR /></SPAN></P><P><SPAN style="font-size: 10pt"><BR /></SPAN></P><PRE class="language-javascript"><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.oSMPModel.create('/Connections', { DeviceType: "Android" }, null,<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; jQuery.proxy(function(mResult) {<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; localStorage['APPCID'] = mResult.ApplicationConnectionId;<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.showProducts(mResult.ApplicationConnectionId);<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }, this),<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; jQuery.proxy(function(oError) {<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; jQuery.sap.log.error("Connection creation failed");<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Bypass if we already have an id<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (/an application connection with the same id already exists/.test(oError.response.body)) {<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; jQuery.sap.log.info("Bypassing failure: already have a connection");<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.showProducts(localStorage['APPCID']);<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }, this)<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<BR />
<BR />
&nbsp;&nbsp;&nbsp; },</CODE></PRE><P></P><P>Now we have this SMP model, performing the OData create operation (an HTTP POST request), sending the appropriate entity payload, is as simple as</P><P></P><P>this.oSMPModel.create('/Connections', { DeviceType: 'Android'}, ...)</P><P></P><P>That's it. We just catch the APPCID from the result object and here we're storing it in localStorage on the browser. This is a small workaround to the problem with the original app where you had to delete the connection from the SMP Admin console each time. The failure case being handled here is where we are told that an application connection already exists ... if that's the case then we just grab what we have in localStorage and use that. </P><P></P><P>Unlike the original app version, we're not interested in actually storing any results so there's no need to add it to the model. By the way, if you look at how the APPCID is added to the model in the original app version, there's a pattern used which goes generally like this:</P><P></P><OL><LI>var oData = sap.ui.getCore().getModel().getData();</LI><LI>oData.someNewProperty = "value";</LI><LI>sap.ui.getCore().getModel().setData(oData);</LI></OL><P></P><P>If you find yourself doing this, take a look at the <A class="jive-link-external-small" href="https://sapui5.hana.ondemand.com/sdk/#docs/api/symbols/sap.ui.model.json.JSONModel.html#setData" target="_blank" rel="nofollow noopener noreferrer">optional second bMerge parameter of setData</A>. It uses jQuery.extend() and it might be what you're looking for - it will allow you to simply do this:</P><P></P><OL><LI>sap.ui.getCore().getModel().setData({someNewProperty: "value"}, true);</LI></OL><P></P><P>Anyway, we get the APPCID back from the SMP's OData service and then call showProducts (below) to actually start bringing in the business data and showing it.</P><P></P><P></P><PRE class="language-javascript"><CODE>&nbsp;&nbsp;&nbsp; showProducts: function(sAPPCID) {<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; var oAppData = sap.ui.getCore().getModel("app").getData();<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; var oModel = new sap.ui.model.odata.ODataModel(<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; oAppData.BaseURL + "/" + oAppData.AppName,<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; { 'X-SUP-APPCID': sAPPCID }<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sap.ui.getCore().setModel(oModel);<BR />
<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; var oApp = this.getView().getParent();<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; oApp.to("ProductList");<BR />
<BR />
&nbsp;&nbsp;&nbsp; }<BR />
});</CODE></PRE><P></P><P>The showProducts function creates a new model. Yes, another one. This time, it's a model for the business data, available at the <A class="jive-link-external-small" href="https://sapes1.sapdevcenter.com/sap/opu/odata/sap/ZGWSAMPLE_SRV" target="_blank" rel="nofollow noopener noreferrer">OData service</A> that was described in the course and is proxied behind the SMP service. So first we use the application data in the "app" model to construct the proxy URL, which will be something like this:</P><P></P><P><SPAN style="color: #222222;font-family: Consolas, 'Lucida Console', monospace;font-size: 12px;background-color: #ffffff"><A class="jive-link-external-small" href="https://smp-" target="_blank" rel="nofollow noopener noreferrer">https://smp-</A><SPAN>&lt;your-id&gt;trial.hanatrial.ondemand.com/&lt;your-app-name&gt;/</SPAN></SPAN></P><P></P><P>But then notice that we don't do anything manually, unlike the original app. We don't specify the HTTP method (GET) and we don't make any explicit calls (like OData.read). We just create a new OData model, specifying the service URL, and an additional object containing custom headers that we want sent on every call. The header we want is of course the X-SUP-APPCID so that's what we specify. From them on we just let the model do the work for us. </P><P></P><P>What we certainly don't do here, which was done in the original app, is call OData.read (which, incidentally, <A class="jive-link-external-small" href="https://sapui5.hana.ondemand.com/sdk/#docs/api/symbols/sap.ui.model.odata.ODataModel.html#read" target="_blank" rel="nofollow noopener noreferrer">doesn't store the returned data in the model</A>), and then manually shovel the raw JSON (the OData comes back as a JSON representation) into a single, central JSON model. There's no need, and this is really mixing up different mechanisms: OData and its corresponding model, JSON and its corresponding model, and their respective ways of working.</P><P></P><P>So you'll see, there are <EM>no explicit calls</EM> (HTTP requests) made for the business data. And you'll see that this hold true throughout the app (e.g. also later when we navigate from the ProductDetail view to the SupplierDetail view, following a navigation property). And remember, as described in the <A class="jive-link-blog-small" href="https://blogs.sap.com/?p=94956" target="_blank" rel="noopener noreferrer">Index &amp; Structure</A> post in this series, there is no explicit external OData library (the original app had brought in datajs-1.1.1.js as a 3rd party library) - the SAPUI5 framework takes care of this for you.</P><P></P><P>Ok, well that's it for this post. </P><P></P><P>See the end of the initial post "<A class="jive-link-blog-small" href="https://blogs.sap.com/?p=94915" target="_blank" rel="noopener noreferrer">Mobile Dev Course W3U3 Rewrite - Intro</A>" for links to all the parts in this series.</P><P></P><P>Share &amp; enjoy!</P><P></P><H4 id="toc-hId--693429405"></H4></DIV>
---
Mobile Dev Course W3U3 Rewrite - Index & Structure
technology-blog-members
2013-10-17
https://community.sap.com/t5/technology-blogs-by-members/mobile-dev-course-w3u3-rewrite-index-amp-structure/ba-p/13027430
2013-10-17-mobile-dev-course-w3u3-rewrite-index-amp-structure
<DIV class="jive-rendered-content"><P>I <A class="jive-link-blog-small" href="https://blogs.sap.com/?p=94915" target="_blank" rel="noopener noreferrer">rewrote the mobile dev course sample app from W3U3</A>. <STRONG>This post explains what I changed in the index.html file, and why. It also takes a look at the general app structure of directories and files.</STRONG> </P><P></P><P>First, I'll take the lines of the <A class="jive-link-external-small" href="https://github.com/qmacro/w3u3_redonebasic/blob/master/index.html" target="_blank" rel="nofollow noopener noreferrer">new version of index.html</A> chunk-by-chunk, with comments.</P><P></P><H2 id="toc-hId-816281982">index.html</H2><P></P><PRE class="language-javascript"><CODE>&lt;!DOCTYPE HTML&gt;<BR />
&lt;html&gt;<BR />
&nbsp; &lt;head&gt;<BR />
&nbsp;&nbsp;&nbsp; &lt;meta http-equiv="X-UA-Compatible" content="IE=edge" /&gt;<BR />
&nbsp;&nbsp;&nbsp; &lt;meta http-equiv="Content-Type" content="text/html;charset=UTF-8"/&gt;<BR />
&nbsp;&nbsp;&nbsp; &lt;title&gt;W3U3 Redone Basic&lt;/title&gt;</CODE></PRE><P></P><P>There's an important meta tag that I added, the X-UA-Compatible one. This is to give IE the best chance of running SAPUI5 properly. Without this there could be rendering issues in IE. (Of course, the alternative is to stop using IE altogether, but that's a different debate!)</P><P></P><P></P><PRE class="language-javascript"><CODE>&nbsp;&nbsp;&nbsp; &lt;script src="https://sapui5.hana.ondemand.com/sdk/resources/sap-ui-core.js"<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; type="text/javascript"<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; id="sap-ui-bootstrap"<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; data-sap-ui-libs="sap.m"<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; data-sap-ui-xx-bindingSyntax="complex"<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; data-sap-ui-theme="sap_bluecrystal"&gt;<BR />
&nbsp;&nbsp;&nbsp; &lt;/script&gt;</CODE></PRE><P></P><P>Here in the bootstrap tag I'm specifying the complex binding syntax, which I'll be using later on (in the ProductDetail view, to fix a problem with the product image URL). I'm also specifying the Blue Crystal theme (sap_bluecrystal), rather than the Mobile Visual Identity theme (sap_mvi). </P><P></P><P></P><PRE class="language-javascript"><CODE>&nbsp;&nbsp;&nbsp; &lt;script&gt;<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; jQuery.sap.log.setLevel(jQuery.sap.log.LogLevel.INFO);<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; jQuery.sap.registerModulePath("com.opensap", "./myapp/");<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sap.ui.jsview("idAppView", "com.opensap.App").placeAt("root");<BR />
&nbsp;&nbsp;&nbsp; &lt;/script&gt;</CODE></PRE><P></P><P>This is where you'll see the biggest change in this file. The open.sap.com course version has a ton of &lt;script&gt; tags (12, to be precise) to load every single file in the app, including some that aren't even necessary. This is simply ignoring the automatic module loading mechanism that is built into SAPUI5. The mechanism not only allows you to avoid a sea of &lt;script&gt; tags, it also allows you to organise your app's resources in a clean and efficient way, refer to them semantically rather than physically, and have load-on-demand features too.</P><P></P><P>Here, we're saying "modules that begin with 'com.opensap' can be found in the 'myapp' directory below where we are". And then we use that module loading system directly by asking for the instantiation of the "com.opensap.App" view (giving it an id of "idAppView") before having it rendered in the main &lt;div&gt; tag (see below).</P><P></P><P>Also note the use of the jQuery.sap.log.* functions for console logging. This abstracts the logging mechanism so you don't have to think about whether console.log works in a particular browser properly (yes IE, I'm looking at you again). </P><P></P><P></P><PRE class="language-javascript"><CODE>&nbsp; &lt;/head&gt;<BR />
&nbsp; &lt;body class="sapUiBody"&gt;<BR />
&nbsp;&nbsp;&nbsp; &lt;div id="root"&gt;&lt;/div&gt;<BR />
&nbsp; &lt;/body&gt;<BR />
&lt;/html&gt;</CODE></PRE><P></P><P>Instantiating the view, which has an associated controller with an onInit function, is also a better way, or at least a more SAPUI5-way, to kick off processing, rather than have a function referred to in the onload attribute of the &lt;body&gt; tag, as the open.sap.com course version of the app does. So this is how we're doing it here. The sap.ui.jsview call causes that view's controller's onInit function to run, rather than having an onload="initializeModel()" in the &lt;body&gt; tag.</P><P></P><P></P><H2 id="toc-hId-619768477">Files and app organisation</H2><P></P><P>This post is also probably the best place to cover the app's organization and files, so I'll do that here as well. First, I'll show you what the original open.sap.com version looks like, then I'll show you what this new version looks like.</P><P></P><H4 id="toc-hId-681420410">Original version</H4><H4 id="toc-hId-484906905"><IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2013/10/originalstructure_299364.png" /></H4><P>Here we see first of all that the views and controllers are split into separate directories. This isn't wrong, it just feels a little odd. So in the new version I've put the view/controller pairs together in a "myapp" directory. </P><P></P><P>More disconcerting is the model/modeljs file. The fact that the file is in a directory called "model" suggests that it has something to do with data. But when we look into the file there is some data-relevant stuff (creating a JSON model and setting it on the core) but there's also some view instantiation and placement for rendering. This is not ideal. It's not a problem that the model file is a script (when you're building JSON-based model data manually it's often useful to be able to construct properties and values dynamically), but I do have a problem with the mix of concerns.</P><P></P><P>There's often a js directory when the app requires 3rd party libraries that have functionality that SAPUI5 does not provide. These three files (Base64.js, datajs-1.1.1.js and SMPCloudHTTPClient.js) do not fall into this category, and don't belong here. In fact, this whole directory and its contents is not required: </P><P></P><UL><LI>Base64.js is used in the original version to encode a Basic Authentication username / password combination. As you'll see, this is very manual and not necessary. </LI></UL><P></P><UL><LI>The datajs-1.1.1.js library is a specific version of the OData library. SAPUI5 speaks OData natively and does not need an extra library; indeed, the inclusion of a specific version like this may clash with the one that SAPUI5 supplies and uses internally. </LI></UL><P></P><UL><LI>The SMPCloudHTTPClient.js here is used to create a new client object that includes the Application Connection ID (APPCID) header on requests to the SMP server. As you'll see in an upcoming post that looks more closely at the use and abuse of the OData modelling in the app, you'll see that this is also not necessary. </LI></UL><P></P><P></P><H4 id="toc-hId-288393400">Rewritten version</H4><H4 id="toc-hId-91879895"></H4><P><IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2013/10/newstructure_299365.png" /></P><P></P><P>As you can see, the rewritten version is smaller, doesn't have extraneous and unnecessary libraries and has the view and controller pairs in one directory ("myapp", referred to in the module loading mechanism in the index.html file earlier).</P><P></P><P>It also has a 'real' model file that just has data in it - <A class="jive-link-external-small" href="https://github.com/qmacro/w3u3_redonebasic/blob/master/model/app.json" target="_blank" rel="nofollow noopener noreferrer">app.json</A>. This data is just information about the relationship with the app backend on the SMP server and is very similar to the intention of the original version. </P><P></P><P>So, that's it for the index and app organisation. Have a look for yourself at the original and new versions of the index.html and model files, and compare them alongside this description here. </P><P></P><P>See the end of the initial post "<A class="jive-link-blog-small" href="https://blogs.sap.com/?p=94915" target="_blank" rel="noopener noreferrer">Mobile Dev Course W3U3 Rewrite - Intro</A>" for links to all the parts in this series.</P><P></P><P>Until next time, share &amp; enjoy!</P><P>dj</P></DIV>
---
Mobile Dev Course W3U3 Rewrite - Intro
technology-blog-members
2013-10-16
https://community.sap.com/t5/technology-blogs-by-members/mobile-dev-course-w3u3-rewrite-intro/ba-p/13024672
2013-10-16-mobile-dev-course-w3u3-rewrite-intro
<DIV class="jive-rendered-content"><P><A class="jive-link-external-small" href="http://en.wikipedia.org/wiki/Wikipedia:Too_long;_didn't_read" target="_blank" rel="nofollow noopener noreferrer">tl;dr</A> - the Github repo "<A class="jive-link-external-small" href="https://github.com/qmacro/w3u3_redonebasic" target="_blank" rel="nofollow noopener noreferrer">w3u3_redonebasic</A>" is a simple re-write of one of the open.sap.com mobile course sample SAPUI5 apps to fix some fundamental issues.</P><P></P><P></P><P>In the current open.sap.com course <A class="jive-link-external-small" href="https://open.sap.com/course/mobile1" target="_blank" rel="noopener noreferrer">Introduction to Mobile Solution Development</A> there are a number of SAPUI5 based example apps that are used to illustrate various concepts and provide learning and exercise materials. Unfortunately, these apps don't particularly show good techniques; in fact I'd go so far as to say that some of the approaches used are simply not appropriate:</P><P></P><UL><LI>they ignore fundamental SAPUI5 mechanisms such as automatic module loading</LI><LI>libraries are included that aren't necessary and may cause issues</LI><LI>OData and JSON models are confused and abused</LI></UL><P></P><P>I would class these as "must-change". There is an urgency of scale at work here as much as anything else; there are over 28,000 registered participants on this course, and it would make me happy to think that there's a way to get them back on the right path, SAPUI5-wise.</P><P></P><P>There are of course other aspects that are less "incorrect" with the app but neverthless perhaps better done a different way. I would class these as "nice-to-have". Examples are:</P><P></P><UL><LI>views are built in JavaScript instead of declaratively in XML*</LI><LI>general app organisation could be improved; there is an <A class="jive-link-external-small" href="https://sapui5.hana.ondemand.com/sdk/#docs/guide/BestPractice.html" target="_blank" rel="nofollow noopener noreferrer">Application.js-based 'best practice' approach</A> in the publically available documentation but this has not been followed (there is also a Component-based approach*)</LI></UL><P></P><P>*both these things will become more important over time, starting very soon!</P><P></P><P>So I've picked a first app - the "MyFirstEnterpriseReadyWebApp" in <A class="jive-link-external-small" href="https://open.sap.com/courses/3/wiki/week-3-downloads?module_item_id=236" target="_blank" rel="noopener noreferrer">Week 3 Unit 3</A> (W3U3) - and re-written it. I have addressed the "must-change" aspects, but left (for now) the "nice-to-have" aspects.</P><P></P><P>I stuck to the following principles:</P><P></P><UL><LI>not to deviate from the general architectural approach too much (i.e. remain with MVC and have the same views and progression through them)</LI><LI>not to introduce any new functionality or styling (save for moving from sap_mvi to sap_bluecrystal)</LI><LI>to keep the app code and structure feel as close to the original as possible</LI></UL><P></P><P>These principles are so that any course participant who has already looked at the original app will feel at home and be able to more easily recognise the improvements.</P><P></P><P>I've <A class="jive-link-external-small" href="https://github.com/qmacro/w3u3_redonebasic" target="_blank" rel="nofollow noopener noreferrer">pushed my new "Redone, Basic" version of the W3U3 app to Github</A> so the code is available for everyone to study and try out, but also over the course of the next few posts I'll highlight some of the changes and describe the differences and the fixes, and the reasons why. Until then, have a look at the repo "<A class="jive-link-external-small" href="https://github.com/qmacro/w3u3_redonebasic" target="_blank" rel="nofollow noopener noreferrer">w3u3_redonebasic</A>" and see what you think.</P><P></P><P>Here are the follow on posts (links inserted here as I write them) dealing with the detail of the rewrite:</P><P></P><P><A class="jive-link-external-small" href="https://blogs.sap.com/?p=94956" target="_blank" rel="noopener noreferrer">Mobile Dev Course W3U3 Rewrite - Index and Structure</A></P><P><A class="jive-link-external-small" href="https://blogs.sap.com/?p=95019" target="_blank" rel="noopener noreferrer">Mobile Dev Course W3U3 Rewrite - App and Login</A></P><P><A class="jive-link-external-small" href="https://blogs.sap.com/?p=95114" target="_blank" rel="noopener noreferrer">Mobile Dev Course W3U3 Rewrite - ProductList, ProductDetail and SupplierDetail</A></P><P><A class="jive-link-wiki-small" href="http://scn.sap.com/docs/DOC-49095" target="_blank" rel="noopener noreferrer">Mobile Dev Course W3U3 Rewrite - XML Views - An Intro</A></P><P><A class="jive-link-blog-small" href="https://blogs.sap.com/?p=98013" target="_blank" rel="noopener noreferrer">Mobile Dev Course W3U3 Rewrite - XML Views - An Analysis</A></P><P></P><P>Share &amp; enjoy</P><P>dj</P></DIV>
---
Building SAP Fiori-like UIs with SAPUI5
technology-blog-members
2013-10-06
https://community.sap.com/t5/technology-blogs-by-members/building-sap-fiori-like-uis-with-sapui5/ba-p/13045996
2013-10-06-building-sap-fiori-like-uis-with-sapui5
<DIV class="jive-rendered-content"><P>SAP TechEd 2013 is fast approaching, and the excitement is building. Interested in SAPUI5 (you're reading this blog post in the <A class="jive-link-community-small" href="http://scn.sap.com/community/developer-center/front-end" target="_blank" rel="noopener noreferrer">SAPUI5 Developer Center</A> space on SCN already!), you're looking to see what sessions to attend. And you're looking to build and improve your skills, and perhaps find out more about SAP Fiori.</P><P></P><P>Have I got the session for you!</P><P></P><P><SPAN style="font-size: 12pt"><STRONG>CD168 "</STRONG></SPAN><SPAN style="font-size: 12pt"><STRONG>Building SAP Fiori-like UIs with SAPUI5" - </STRONG></SPAN><SPAN style="font-size: 12pt"><STRONG>2hr Hands-On</STRONG></SPAN></P><P></P><P><SPAN>What is Fiori? Well, from the </SPAN><A class="jive-link-external-small" href="http://experience.sap.com/fiori" target="_blank" rel="noopener noreferrer">http://experience.sap.com/fiori</A><SPAN> site, this is a good start: </SPAN></P><BLOCKQUOTE class="jive-quote"><BR />
<P>"A collection of apps with a simple and easy to use experience for broadly and frequently used SAP software functions that work seamlessly across devices - desktop, tablet or smartphone."</P><BR />
<BR />
<BR />
<BR />
</BLOCKQUOTE><P></P><P>What is Fiori built upon? You guessed it, SAPUI5. And specifically, the <A class="jive-link-external-small" href="https://sapui5.hana.ondemand.com/sdk/#docs/api/symbols/sap.m.html" target="_blank" rel="nofollow noopener noreferrer">sap.m</A> library (and a sprinkling of other more general controls). Fiori is part application set, part responsive design, part look and feel, and part state-of-mind. What makes a Fiori app? Well, amongst other things, it's the use of certain controls and design to achieve the consistent experience you might have already come to expect from Wave 1, which delivered the 25 ESS/MSS apps. Wave 2 is coming soon, and set to deliver many many more apps across a broader functional range.</P><P></P><P>I have the tremendous privilege of working with the SAPUI5 teams in Walldorf currently and know first hand the massive effort (love, intelligence and dedication) that has gone into building the foundation for Fiori. And for me as a developer, it's very important to understand what's going on under the Fiori hood, not only for building new apps but for supporting my customers.</P><P></P><P>So enter CD168, a two-hour hands-on session at SAP TechEd titled "Building SAP Fiori-like UIs with SAPUI5". If you want to find out how to build SAPUI5 apps with a Fiori flavour, to get a feel for what controls to use and how to use them, then you should seriously consider attending.</P><P></P><P>An intensive hands-on set of an introductory walkthrough of the developer toolset and environment, and then a series of ten exercises taking you from this to this:</P><P><IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2013/10/cd168_before_and_after_292636.jpg" width="620" /></P><P></P><P>where along the way you learn about <A class="jive-link-external-small" href="https://sapui5.hana.ondemand.com/sdk/#docs/guide/Introduction.1.html" target="_blank" rel="nofollow noopener noreferrer">databinding</A>, <A class="jive-link-external-small" href="https://sapui5.hana.ondemand.com/sdk/#docs/guide/I18NinAppDev.html" target="_blank" rel="nofollow noopener noreferrer">localisation</A>, <A class="jive-link-external-small" href="https://sapui5.hana.ondemand.com/sdk/#docs/guide/ResourceModel.html" target="_blank" rel="nofollow noopener noreferrer">resource models</A>, XML-based views, formatter functions, best practices for application design &amp; build and controls such as the responsive <A class="jive-link-external-small" href="https://sapui5.hana.ondemand.com/sdk/docs/api/symbols/sap.m.SplitApp.html" target="_blank" rel="nofollow noopener noreferrer">SplitApp</A>, <A class="jive-link-external-small" href="https://sapui5.hana.ondemand.com/sdk/docs/api/symbols/sap.m.ObjectHeader.html" target="_blank" rel="nofollow noopener noreferrer">ObjectHeader</A> &amp; <A class="jive-link-external-small" href="https://sapui5.hana.ondemand.com/sdk/docs/api/symbols/sap.m.ObjectListItem.html" target="_blank" rel="nofollow noopener noreferrer">ObjectListItem</A>, <A class="jive-link-external-small" href="https://sapui5.hana.ondemand.com/sdk/#docs/api/symbols/sap.m.IconTabBar.html" target="_blank" rel="nofollow noopener noreferrer">IconTabBar</A>, <A class="jive-link-external-small" href="https://sapui5.hana.ondemand.com/sdk/#docs/api/symbols/sap.m.SearchField.html" target="_blank" rel="nofollow noopener noreferrer">SearchField</A> and others.</P><P></P><P>The session is available at SAP TechEd Las Vegas, and also in Amsterdam where along with esteemed SAP colleagues, I am honoured to be co-presenting.</P><P></P><P>If I had not had the chance to contribute to the session materials and co-present, I would certainly have this session at the top of my must-attend list.</P><P></P><P>What about you? Get yourself along to the <A class="jive-link-external-small" href="http://sessioncatalog.sapevents.com/go/agendabuilder.sessions/?l=57" target="_blank" rel="nofollow noopener noreferrer">session site</A> and find out more:</P><P></P><P><A class="jive-link-external-small" href="http://sessioncatalog.sapevents.com/go/agendabuilder.sessions/?l=57&amp;schid=8203_34750" target="_blank" rel="nofollow noopener noreferrer">CD168 on Wed 06 Nov 17:00-19:00</A></P><P></P><P><A class="jive-link-external-small" href="http://sessioncatalog.sapevents.com/go/agendabuilder.sessions/?l=57&amp;schid=8203_33113" target="_blank" rel="nofollow noopener noreferrer">CD168 on Thu 07 Nov 14:30-16:30</A></P><P></P><P>Perhaps see you in Amsterdam?</P><P></P><H3 id="toc-hId-947157158">Update 08/11/2013</H3><P></P><P>I recorded a screencast of the "end result" app that the participants will build:</P><P></P><P><IFRAME id="kaltura_player_1_p5s5dr9z" src="https://www.youtube.com/embed/ItETo2R3kqI" allowfullscreen="true" webkitallowfullscreen="" mozallowfullscreen="" width="625px" height="360px" frameborder="0"></IFRAME></P><P></P><P></P><H3 id="toc-hId-750643653"><A name="update20131220" target="_blank"></A>Update 20/12/2013</H3><P></P><P>I have put the source code to the app that features here and in the CD168 session as a repo up on Github:</P><P></P><H3 id="toc-hId-554130148"><A class="jive-link-external-small" href="https://github.com/qmacro/SAPUI5-Fiori" target="_blank" rel="nofollow noopener noreferrer"><STRONG>SAPUI5-Fiori</STRONG></A></H3><P></P><P>I've put some notes in the repo's README (displayed on the repo's homepage) - please read them for more info. They have links to this blog post, and also to the screencast walkthrough of the app which is here: <A class="jive-link-external-small" href="http://www.youtube.com/watch?v=tfOO4szA2Bg" target="_blank" rel="nofollow noopener noreferrer">SAPUI5/Fiori - Exploration of an App</A></P><P></P><P><IFRAME id="kaltura_player_1_p5s5dr9z" src="https://www.youtube.com/embed/tfOO4szA2Bg" allowfullscreen="true" webkitallowfullscreen="" mozallowfullscreen="" width="625px" height="360px" frameborder="0"></IFRAME></P><P></P><P>This screencast is part of a 2-part SAP CodeTalk session with me and Ian Thain on SAPUI5 and Fiori, the playlist for which is here: <A class="jive-link-external-small" href="http://www.youtube.com/watch?v=HQd9kVApjkE&amp;list=PLfctWmgNyOIcae85Ytr6b_J1jgcDb4-JL" target="_blank" rel="nofollow noopener noreferrer">SAP CodeTalk - SAPUI5 and Fiori</A>.</P><P></P><P><IFRAME id="kaltura_player_1_p5s5dr9z" src="https://www.youtube.com/embed/HQd9kVApjkE" allowfullscreen="true" webkitallowfullscreen="" mozallowfullscreen="" width="625px" height="360px" frameborder="0"></IFRAME></P></DIV>
---
An Amazing 36 Hours at SAP Labs Israel
additional-blog-members
2013-10-03
https://community.sap.com/t5/additional-blogs-by-members/an-amazing-36-hours-at-sap-labs-israel/ba-p/13038442
2013-10-03-an-amazing-36-hours-at-sap-labs-israel
<DIV><BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2013/10/saplabsil_meandaviad_291221.png" height="143" width="221" />I'm sitting in TLV airport waiting for my flight back to MAN via FRA. I've just spent a whirlwind 36 hours, more or less, in an amazing developer engine also known as SAP Labs Israel. Before I start though, I want to extend my gratitude and thanks to all those who made me so welcome (which is basically *everyone*) and especially to The specified item was not found. <SPAN class="mention-scrubbed">rafi.bryl</SPAN> <SPAN class="mention-scrubbed">amir.blich2</SPAN> <SPAN class="mention-scrubbed">gabi.koifman</SPAN> and Keren Golan. Of course as you may know Aviad, who organised the whole event, was announced as one of the new SAP Mentors today. Congratulations! I did have the "insider knowledge" yesterday, hence the double meaning of my <A class="jive-link-external-small" href="https://twitter.com/qmacro/status/385428895131906048" target="_blank" rel="nofollow noopener noreferrer">"flying the @SAPMentors flag" tweet</A> yesterday evening on the roof terrace of the SAP Labs building <span class="lia-unicode-emoji" title=":slightly_smiling_face:">ð</span><BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2013/10/customercorner_291222.png" height="256" width="184" />It was a mind stretchingly great time, in the form of a Customer Corner Event which saw attendees from Danone, Coca Cola and Bluefin (me). Aviad had prepared a full agenda for Day 1, which included HANA related customer stories, roundtable discussions on various deeper-dive topic such as UI Integration Services, Portal-esque features for a solid integrated UI/app strategy, HANA XS, River, OData and more. There was also a panel discussion that covered topics such as cloud, HANA adoption, performance tuning, and "Kindergarten code" (yes, that phrase will stick!).<BR />
<BR />
The second (half-day) gave me a chance to get a deeper dive look at some of the things we'd covered in Day 1. Specifically I'm thinking of SAP HANA Integration Services and River. There's too little time before my flight to cover these topics decently, so I'll keep it short for now and encourage you to take a look yourself, either in the existing docs or look to TechEd and beyond for the amazing River features. Not long to wait!<BR />
<BR />
<STRONG>SAP HANA UI Integration Services</STRONG><BR />
<BR />
You've built a few SAPUI5-based apps. You're also looking at SAP Fiori. But have you thought about your overarching UI strategy? Moving from <A class="jive-link-external-small" href="http://www.bluefinsolutions.com/insights/blog/sap_ui_5_the_future_direction_of_sap_ui_development/" target="_blank" rel="nofollow noopener noreferrer">inside-out to outside-in</A> based development isn't just about building great apps for multiple runtimes. It's about a consistent experience, role-based access to apps, common services (e.g. persistence), tools for non-developer/user roles such as designers and administrators, and the ability to give your users a unified entrypoint to all this.<BR />
<BR />
So you should be looking at a "frontend server" that might consolidate Gateway foundation/core, customisation and the repository for SAPUI5 runtime artifacts. The SAP HANA UI Integration Services provides the API layer as the foundation for this "unified shell", and is a very viable option (running on HANA) for such a "frontend server". Plus you get the toe-in-the-water benefits of a HANA system ready for trialling and experimentation. Stick this in the cloud and you're onto a winner.<BR />
<BR />
Oh, and want portal-style ability to define multiple apps in the same 'site', communicating with each other via publish/subscribe, using an open standard? Add OpenSocial to the mix and you've got it. And they have. Define a simple SAPUI5 component with an OData model connection to a live backend service, have the data presented to you in that widget in familiar "Excel" format (rows and columns), and then pipe that data into another graph widget via pubsub. Excellent.<BR />
<BR />
<STRONG>River Language (aka RDL)</STRONG><BR />
<BR />
River as a concept and in various concept/demo forms has been around for a while, dating back at least to 2010 when <A class="jive-link-external-small" href="http://www.pipetree.com/qmacro/blog/2010/10/not-your-fathers-sap/" target="_blank" rel="nofollow noopener noreferrer">I got to see a demo</A> at the Innovation Weekend before the SAP TechEd 2010 event in Berlin. <SPAN class="mention-scrubbed">jacob.klein</SPAN> <A class="jive-link-external-small" href="http://www.saphana.com/community/blogs/blog/2012/11/15/introducing-rdl-the-river-definition-language" target="_blank" rel="nofollow noopener noreferrer">wrote more recently about River</A>, and was at the deep dive today at SAP Labs.<BR />
<BR />
What I saw today bowled me over. Imagine a JavaScript-like, part-declarative, part imperative language where in Eclipse, in one breath, if you want to, you can:<BR />
<UL><BR />
 	<LI>define your data (entities, properties, relationships, etc)</LI><BR />
 	<LI>write procedural code in the form of functions to provide custom logic (when a simple entity read/write, for example, is not enough)</LI><BR />
 	<LI>declare authorisations and roles</LI><BR />
</UL><BR />
and then, seconds later, use a table/column style UI still within Eclipse to create random / test data for the entities you've just defined, navigate those entities and jump between them via the relationships you also defined, and oh by the way have all the runtime artifacts generated automatically for you in the HANA backend. Further, the whole thing is exposed as an OData service with the appropriate entities, entitysets, associations, enumerations and function imports (I think you can guess which of these related to your data definitions in River).<BR />
<BR />
Within the procedural code you can access any HANA-based data, or via adapters, reach out remotely to your (say) ABAP stack-based systems too. And yes, (I asked, and they showed me live) you can debug and single-step through this too. Debugging directly in Eclipse or triggering it via setting a header in the HTTP request from outside.<BR />
<BR />
Rather impressive stuff.<BR />
<BR />
So unfortunately I have to go and catch my flight (and find somewhere to sleep!). It was a pretty awesome (and packed) time and I was totally privileged to have been able to take part. Thank you all for having me!<BR />
<BR />
</DIV>
---
Engaging the Next Generation
welcome-cornerblog-board
2013-08-17
https://community.sap.com/t5/welcome-corner-blog-posts/engaging-the-next-generation/ba-p/13015140
2013-08-17-engaging-the-next-generation
<DIV><BR />
<BR />
As many of you might know (from my <A class="jive-link-external-small" href="https://twitter.com/search?q=%23yrs2013" target="_blank" rel="nofollow noopener noreferrer">#YRS2013</A> tweets this month), I was involved again in <A class="jive-link-external-small" href="http://youngrewiredstate.org" target="_blank" rel="nofollow noopener noreferrer">Young Rewired State</A>, an initiative that gathers kids all around the country, gives them a week-long opportunity to learn or improve in coding skills, embrace open data and understand the value of it, and work together to build hacks and apps using open source and that open data. I was centre lead for one of three Manchester-based centres this year, at MadLab, and the whole event, which culminated in the hundreds of kids and mentors from centres all round the country coming together for a weekend of show and tell (and prizes) in Birmingham, was a terrific success yet again.<BR />
<BR />
From the show and tell and judging on the weekend, here's a quote from one of the kids during his team's presentation to the judges, to explain their use and choice of data sources and backend systems:<BR />
<BR />
<EM>"&lt;organisation&gt; has an open API so we used that"</EM><BR />
<BR />
In my <A class="jive-link-external-small" href="https://twitter.com/qmacro/status/366513722170155008" target="_blank" rel="nofollow noopener noreferrer">tweet</A> I alluded to the fact that this was a sentiment echoed by all the participants at YRS - the kids building cool hacks on open data and sharing the source code are our future.<BR />
<BR />
What are we doing to help form and guide this future? Well for a start, there are a great number of people who get involved with this sort of thing on a regular basis. <SPAN class="mention-scrubbed">john.astill2</SPAN> for example took part in a "hyperlocal" instance of YRS - at YRS NYC, last month. And of course, for the second year running, SAP itself, through the guidance and steady hand of <SPAN class="mention-scrubbed">thomas.grassl</SPAN> is headline sponsor, helping make the whole thing happen (thank you SAP, I'm proud to have been able to connect you with YRS in the first place, last year!). <SPAN class="mention-scrubbed">ian.thain</SPAN> was there also and wrote up a piece on YRS this year too: <A class="jive-link-external-small" href="https://blogs.sap.com/?p=90683" target="_blank" rel="noopener noreferrer">SAP and the young Developers of tomorrow</A><BR />
<BR />
As well as YRS there are other initiatives, regular events in the UK that take place. I wrote about what I've been involved with in a post:<BR />
<BR />
<A class="jive-link-external-small" href="https://docs.google.com/document/d/1j79L0BALWt0QWNjHf-qGjt6AWLDAuAkqz0JY_2vIr7Q/edit?usp=sharing" target="_blank" rel="nofollow noopener noreferrer">Computational Thinking and Kids - A Year in Review</A><BR />
<BR />
In SAP's continous re-invention of itself, it is getting involved more and more in embracing a wider audience, engaging with those kids and students who are our future, and reaching out more broadly then ever. For this I applaud them. Yes, there are corporate goals and useful side-effects, such as bringing more developers closer to an SAP flavoured platform, and increasing the chances of SAP software longevity, but those side-effects have very real benefits in helping teach computational thinking and prepare our youngsters for a data-driven future.<BR />
<BR />
If you're interested in this and more besides (such as the InnoJam and University Alliance initiatives), then watch this space - there will be a public SAP Mentor Monday event in September to cover these subjects. Hope to see you there. In the meantime, please let us know in the comments what you think, and what it might take for you to get involved too. Believe me, it is hugely rewarding as well as great fun.<BR />
<BR />
<IFRAME id="kaltura_player_1_p5s5dr9z" src="https://www.youtube.com/embed/XuUviqQ3EZY" allowfullscreen="true" webkitallowfullscreen="" mozallowfullscreen="" width="625px" height="360px" frameborder="0"></IFRAME><BR />
<BR />
<SPAN style="font-size: 10pt">&nbsp;</SPAN><BR />
<BR />
</DIV>
---
Happy Birthday SCN, Old Friend
welcome-cornerblog-board
2013-07-31
https://community.sap.com/t5/welcome-corner-blog-posts/happy-birthday-scn-old-friend/ba-p/13020755
2013-07-31-happy-birthday-scn-old-friend
<DIV><BR />
<BR />
Happy Birthday, SAP Community Network, or, to give it it's original name (which gives you a clue to its origins) the SAP Developer Network - SDN.<BR />
<BR />
Finding myself sending birthday greetings to an inanimate, virtual object is a little odd. Am I going mad? Well, no madder than usual, but certainly older.<BR />
<BR />
I can't believe it's been ten years since SCN was born. I was around at the time, and having played a part in pre-SCN SAP communities (which I wrote a little bit about in this post from 2005: <A class="jive-link-external-small" href="https://blogs.sap.com/?p=40524" target="_blank" rel="noopener noreferrer">The SAP Developer Community 10 Years Ago</A><SPAN style="font-size: 10pt"> ) I was honoured to be asked to help prototype "a new online community for SAP developers". This was a collaboration between <A class="jive-link-external-small" href="http://oreilly.com/" target="_blank" rel="nofollow noopener noreferrer">O'Reilly Media</A>, for whom I've written a <A class="jive-link-external-small" href="http://search.oreilly.com/?q=dj+adams" target="_blank" rel="nofollow noopener noreferrer">couple of books</A>, and SAP. Chief SAP Mentor herder and all round superstar <SPAN class="mention-scrubbed">mark.finnern</SPAN> was involved too, and it was with Mark and also my old friend and partner in code-crime <SPAN class="mention-scrubbed">piers.harding</SPAN></SPAN><SPAN style="font-size: 10pt"> that I began to fill the fledgling community with content. </SPAN><BR />
<BR />
<SPAN style="font-size: 10pt">The content was sometimes controversial - I love the fact that when publishing this particular document - <A class="jive-link-wiki-small" href="http://scn.sap.com/docs/DOC-16538" target="_blank" rel="noopener noreferrer">Real Web Services with REST and ICF</A> - </SPAN><SPAN style="font-size: 10pt">SAP put a disclaimer at the top saying I wasn't speaking for them and (effectively) they didn't fully agree with what I was saying <span class="lia-unicode-emoji" title=":slightly_smiling_face:">ð</span> </SPAN><BR />
<BR />
<SPAN style="font-size: 10pt">(<STRONG>Update</STRONG>: link to document corrected, and the disclaimer is still there! "<EM>DJ Adams is not an SAP employee and the opinions he expresses in this article do not reflect the official opinion or positioning of SAP</EM>"). </SPAN><BR />
<BR />
<SPAN style="font-size: 10pt">But the content was there, and I wrote my first blog post "<A class="jive-link-external-small" href="https://blogs.sap.com/?p=39213" target="_blank" rel="noopener noreferrer">The SAP/MySQL Partnership</A>" in this community in May 2003. It was the second blog post ever in this community (Mark wrote the first one), and the first blog post from a non-SAP employee. </SPAN><BR />
<BR />
<SPAN style="font-size: 10pt">The SAP Community Network has grown beyond what I think anyone could have imagined; it's the foundation for SAP's social, developer and outreach activities and has become a universe unto itself. Sometimes that's a bad thing, but most of the time it's a good thing. My favourite moment in SCN's lifetime is actually from way back, in the days when SAP had initially decided to keep all the content behind an authentication firewall. That wasn't good for the Web, and it certainly wasn't good for SCN. It was marooned on a small island, with no future. After a small campaign (I went to Walldorf and spoke at a meetup - slides are here: <A href="https://docs.google.com/presentation/d/1JQ5OcfVobOCn7bLBG6zWzI5QhSrUMr0Fbe01OBK_1pU/edit?usp=sharing" target="_blank" rel="nofollow noopener noreferrer">An Outsider's View of SDN</A>), we got SAP to change their mind and now SCN is a part of the Web, indexed properly by Google, and it's a much better place for it. </SPAN><BR />
<BR />
<SPAN style="font-size: 10pt">So once again, congratulations to SCN on reaching 10 years, and exceeding all expectations. It's mostly down to a great number of heroes at SAP too numerous to mention, plus great community leaders and players like you. </SPAN><BR />
<BR />
<SPAN style="font-size: 10pt">Keep it up!</SPAN><BR />
<BR />
<SPAN style="font-size: 10pt">&nbsp;</SPAN><BR />
<BR />
</DIV>
---
Simple SAPUI5 Chrome icon for lazy developers like me
technology-blog-members
2013-06-26
https://community.sap.com/t5/technology-blogs-by-members/simple-sapui5-chrome-icon-for-lazy-developers-like-me/ba-p/13043233
2013-06-26-simple-sapui5-chrome-icon-for-lazy-developers-like-me
<DIV class="jive-rendered-content"><P>I created a Chrome "hosted app" manifest to get a large start page icon with which I could navigate directly to this excellent content resource. Now I can get to my favourite area on SCN in even less time! <span class="lia-unicode-emoji" title=":slightly_smiling_face:">ð</span></P><P></P><P><IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2013/06/scn_sapui5_results_237111.png" /></P><P></P><P>See the project on Github: <A class="jive-link-external-small" href="https://github.com/qmacro/sapui5-chrome-icon" target="_blank" rel="nofollow noopener noreferrer">https://github.com/qmacro/sapui5-chrome-icon</A></P><P></P><P>Share and enjoy!</P></DIV>
---
Getting Started with SAPUI5: Alternative Guide
technology-blog-members
2013-01-31
https://community.sap.com/t5/technology-blogs-by-members/getting-started-with-sapui5-alternative-guide/ba-p/12979603
2013-01-31-getting-started-with-sapui5-alternative-guide
<DIV class="jive-rendered-content"><P>With reference to <A class="jive-link-blog-small" href="https://blogs.sap.com/?p=79248" target="_blank" rel="noopener noreferrer">my recent post about the 'sapui5bin' repo</A> on Github, I had also put together a Getting Started guide for SAPUI5 for some colleagues, with particular focus on getting up and running with a portable and independent environment you can have on your laptop. In the spirit of "<EM>you can never have too many getting started guides</EM>" (as I learn different things from different guides) I thought I'd make my guide available for your reading pleasure.</P><P></P><P><STRONG>Here it is: <A class="jive-link-external-small" href="https://docs.google.com/document/d/1qglCMSaZePN21QmsNCXmFsyBhfzGXbcqIlQgTX2-mi4/edit" target="_blank" rel="nofollow noopener noreferrer">Getting Started with SAPUI5</A></STRONG></P><P></P><P>Taken from the Table of Contents, here's what it covers:</P><P></P><P><SPAN style="font-size: 10pt">Introduction</SPAN></P><P>Download and unpack SAPUI5</P><P>Choose a home development location</P><P>Set up Apache</P><P>Configure Apache</P><P>Access your local SAPUI5 docs</P><P>Set up git for Windows</P><P>Clone sapui5bin</P><P>Relax</P><P></P><P>Share &amp; enjoy!</P></DIV>
---
Public Github repo 'sapui5bin' available
technology-blog-members
2013-01-30
https://community.sap.com/t5/technology-blogs-by-members/public-github-repo-sapui5bin-available/ba-p/12978704
2013-01-30-public-github-repo-sapui5bin-available
<DIV class="jive-rendered-content"><P>Recently I've found myself making references to a small but growing collection of runnable SAPUI5 snippets that I've been collecting together, called "sapui5bin". It started from early discussions in this space on SCN, and I thought I'd try and capture the "executable output" of those discussions, blog posts and so on. </P><P></P><P>Here's a few examples of the bits and pieces that are contained in this repo:</P><P></P><UL><LI>from my blog post "<A class="jive-link-blog-small" href="https://blogs.sap.com/?p=78436" target="_blank" rel="noopener noreferrer">Jump to Shell Workset Item from URL</A>" we have an example of URL-based Shell workset item navigation, improved upon by <SPAN class="mention-scrubbed">john.patterson</SPAN><SPAN> </SPAN></LI></UL><P></P><UL><LI><SPAN>from a discussion with <SPAN class="mention-scrubbed">andreas.kunz</SPAN><SPAN> we have a snippet that shows how to bind a Paginator control to a model</SPAN></SPAN></LI></UL><P></P><UL><LI>from a YouTube video I recorded - "<A class="jive-link-external-small" href="http://www.youtube.com/watch?v=wZUXz5f1CHI" target="_blank" rel="nofollow noopener noreferrer">Re-presenting my site with SAPUI5</A>" - we have an MVC style collection of code (<A class="jive-link-external-small" href="https://github.com/qmacro/sapui5bin/tree/master/blogui" target="_blank" rel="nofollow noopener noreferrer">blogui</A>)</LI></UL><P></P><UL><LI><A class="jive-link-thread-small" href="http://scn.sap.com/thread/3180215" target="_blank" rel="noopener noreferrer">conditional data binding</A> from an early discussion in this space</LI></UL><P></P><P><SPAN class="mention-scrubbed">john.patterson</SPAN> has kindly sent me a pull request (which I accepted and which he's subsequently updated) which represents an "<A class="jive-link-external-small" href="https://github.com/qmacro/sapui5bin/tree/master/ODATA_cart" target="_blank" rel="nofollow noopener noreferrer">OData Cart</A>" </P><P></P><P>Please have a browse, clone the repository, try the examples and snippets out, and feel free to contribute too!</P><P></P><P>The repo is here: <A class="jive-link-external-small" href="https://github.com/qmacro/sapui5bin" target="_blank" rel="nofollow noopener noreferrer">https://github.com/qmacro/sapui5bin</A></P><P></P><P>Share and enjoy!</P></DIV>
---
Jump to Shell Workset Item from URL
technology-blog-members
2013-01-11
https://community.sap.com/t5/technology-blogs-by-members/jump-to-shell-workset-item-from-url/ba-p/12989959
2013-01-11-jump-to-shell-workset-item-from-url
<DIV class="jive-rendered-content"><P>During SAP TechEd 2012 I attended CD163 "SAP HANA - Application Services Basics" which really helped firm up my knowledge of XS, thanks to the great presentation and exercises. What was interesting was that not only was SAPUI5 used for the UI components of the demos and exercises, but even the code snippets that the attendees would have to type in were made available to copy-n-paste, via a simple SAPUI5 Shell interface. </P><P></P><P>On reviewing the exercise text today, I noticed this bit:</P><P></P><P><IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2013/01/urlsub2_173826.png" /></P><P></P><P>The URL that pointed to the SAPUI5 Shell that contained the code to copy-n-paste had a query string in it, and that sub=3.1 caused the browser to go straight to a subitem in the Shell's workset item collection:</P><P></P><P><IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2013/01/sub3_2_173827.png" width="620" /></P><P></P><P>(please ignore the 256-colour quality of that shot)</P><P></P><P>I thought that was a nice touch, and dug around to see what they'd done. I was pretty certain I hadn't seen that as a feature described in the official and comprehensive SAPUI5 docu, so was curious. </P><P></P><P>What they'd done is added a small function to parse out the value of the "sub" parameter in the query string, and set the selected workset item accordingly. Here's that small function, getURLParameter: </P><P></P><P><SPAN style="font-size: 13px;font-family: 'courier new', courier">function getURLParameter(name) {</SPAN></P><P><SPAN style="font-size: 13px;font-family: 'courier new', courier">&nbsp;&nbsp;&nbsp; return decodeURI(</SPAN></P><P><SPAN style="font-size: 13px;font-family: 'courier new', courier">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (RegExp(name + '=' + '(.+?)(&amp;|$)').exec(location.search)||[,null])[1]</SPAN></P><P><SPAN style="font-size: 13px;font-family: 'courier new', courier">&nbsp;&nbsp;&nbsp; );</SPAN></P><P><SPAN style="font-size: 13px;font-family: 'courier new', courier">}</SPAN></P><P></P><P>(In case you're wondering, the ||[,null] bit towards the end just makes sure there's no exception when the requested parameter isn't found by the regex).</P><P></P><P>The workset items were defined in the Shell object like this:</P><P></P><P><SPAN style="font-size: 13px;font-family: 'courier new', courier">oController.oShell = new sap.ui.ux3.Shell("myShell", {</SPAN></P><P><SPAN style="font-size: 13px;font-family: 'courier new', courier">&nbsp; appIcon : "./images/sap_18.png",</SPAN></P><P><SPAN style="font-size: 13px;font-family: 'courier new', courier">&nbsp; appIconTooltip : "SAP",</SPAN></P><P><SPAN style="font-size: 13px;font-family: 'courier new', courier">&nbsp; appTitle : "CD163 Exercise Templates",</SPAN></P><P><SPAN style="font-size: 13px;font-family: 'courier new', courier">&nbsp; showInspectorTool : false,</SPAN></P><P><SPAN style="font-size: 13px;font-family: 'courier new', courier">&nbsp; showFeederTool : false,</SPAN></P><P><SPAN style="font-size: 13px;font-family: 'courier new', courier">&nbsp; showSearchTool : false,</SPAN></P><P><SPAN style="font-size: 13px;font-family: 'courier new', courier">&nbsp; content: html21, </SPAN></P><P><SPAN style="font-size: 13px;font-family: 'courier new', courier">&nbsp; worksetItems: [new sap.ui.ux3.NavigationItem("NI_2",{key:"ni_2",text:"Exercise 2", subItems:[</SPAN></P><P><SPAN style="font-size: 13px;font-family: 'courier new', courier">&nbsp;&nbsp;&nbsp; new sap.ui.ux3.NavigationItem("NI_2_1",{key:"ni_2_1",text:"2.1 Hello World"})]}),</SPAN></P><P><SPAN style="font-family: 'courier new', courier">&nbsp;&nbsp;&nbsp; new sap.ui.ux3.NavigationItem("NI_3",{key:"ni_3",text:"Exercise 3", subItems:[</SPAN></P><P><SPAN style="font-size: 13px;font-family: 'courier new', courier">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new sap.ui.ux3.NavigationItem("NI_3_1",{key:"ni_3_1",text:"3.1 Simple OData"}),</SPAN></P><P><SPAN style="font-size: 13px;font-family: 'courier new', courier">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [...]<BR /></SPAN></P><P></P><P></P><P>and the requested workset item was set as selected, with the corresponding content, in a large switch statement like this:</P><P></P><P><SPAN style="font-size: 13px;font-family: 'courier new', courier">&nbsp; switch (getURLParameter("sub")){</SPAN></P><P><SPAN style="font-size: 13px;font-family: 'courier new', courier">&nbsp;&nbsp;&nbsp; case "2.1":</SPAN></P><P><SPAN style="font-size: 13px;font-family: 'courier new', courier">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; oController.oShell.setSelectedWorksetItem("NI_2_1");</SPAN></P><P><SPAN style="font-size: 13px;font-family: 'courier new', courier">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; oController.oShell.setContent(html21); </SPAN></P><P><SPAN style="font-size: 13px;font-family: 'courier new', courier">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break; </SPAN></P><P><SPAN style="font-size: 13px;font-family: 'courier new', courier">&nbsp;&nbsp;&nbsp; case "3.1":</SPAN></P><P><SPAN style="font-size: 13px;font-family: 'courier new', courier">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; oController.oShell.setSelectedWorksetItem("NI_3_1");</SPAN></P><P><SPAN style="font-size: 13px;font-family: 'courier new', courier">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; oController.oShell.setContent(html31); </SPAN></P><P><SPAN style="font-size: 13px;font-family: 'courier new', courier">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break; </SPAN></P><P><SPAN style="font-size: 13px;font-family: 'courier new', courier">&nbsp;&nbsp;&nbsp; case "3.2":</SPAN></P><P><SPAN style="font-size: 13px;font-family: 'courier new', courier">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; oController.oShell.setSelectedWorksetItem("NI_3_2");</SPAN></P><P><SPAN style="font-size: 13px;font-family: 'courier new', courier">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; oController.oShell.setContent(html32); </SPAN></P><P><SPAN style="font-size: 13px;font-family: 'courier new', courier">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;</SPAN></P><P><SPAN style="font-size: 13px;font-family: Consolas"><SPAN style="font-family: 'courier new', courier">&nbsp;&nbsp;&nbsp; [...]</SPAN><BR /></SPAN></P><P></P><P>Nice effect. </P><P></P><P>I wanted to confirm this for myself, and try to use fewer lines of code than SAP had done, as it looked a little bit verbose. So I wrote a little standalone snippet, available in my Github repo '<A class="jive-link-external-small" href="https://github.com/qmacro/sapui5bin" target="_blank" rel="nofollow noopener noreferrer">sapui5bin</A>'. The snippet is <A class="jive-link-external-small" href="https://github.com/qmacro/sapui5bin/blob/master/snippets/shell_wsi_nav.html" target="_blank" rel="nofollow noopener noreferrer">https://github.com/qmacro/sapui5bin/blob/master/snippets/shell_wsi_nav.html</A> and defines a Shell with a few items / subitems like this:</P><P></P><P> <SPAN style="font-family: 'courier new', courier">&nbsp; var oShell = new sap.ui.ux3.Shell({&nbsp;&nbsp;&nbsp;&nbsp; </SPAN></P><P><SPAN style="font-family: 'courier new', courier">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; appTitle: "Shell WorksetItem Navigation",</SPAN></P><P><SPAN style="font-family: 'courier new', courier">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; worksetItems:[</SPAN></P><P><SPAN style="font-family: 'courier new', courier">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new sap.ui.ux3.NavigationItem("id_wsiA", {key:"wsiA",text:"A",subItems:[ ]}),</SPAN></P><P><SPAN style="font-family: 'courier new', courier">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new sap.ui.ux3.NavigationItem("id_wsiB", {key:"wsiB",text:"B",subItems:[</SPAN></P><P><SPAN style="font-family: 'courier new', courier">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new sap.ui.ux3.NavigationItem("id_wsiB.1", {key:"wsiB.1", text:"B.1"}),</SPAN></P><P><SPAN style="font-family: 'courier new', courier">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new sap.ui.ux3.NavigationItem("id_wsiB.2", {key:"wsiB.2", text:"B.2"}),</SPAN></P><P><SPAN style="font-family: 'courier new', courier">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ]}),</SPAN></P><P><SPAN style="font-family: 'courier new', courier">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ]</SPAN></P><P><SPAN style="font-family: 'courier new', courier">&nbsp;&nbsp;&nbsp; });</SPAN></P><P></P><P>Note that my convention is to name the IDs the same as the keys, but with a prefix of 'id_'.</P><P></P><P>I used the same getUrlParameter() function, but then used a simpler method to dynamically set the selected workitem and content based on the value of the 'sub' query parameter, like this:</P><P></P><P><SPAN style="font-family: 'courier new', courier">&nbsp; var subId = "id_wsi" + getUrlParameter("sub");</SPAN></P><P><SPAN style="font-family: 'courier new', courier">&nbsp;&nbsp;&nbsp; var wsi = sap.ui.getCore().byId(subId) ? subId : 'id_wsiA';</SPAN></P><P><SPAN style="font-family: 'courier new', courier">&nbsp;&nbsp;&nbsp; oShell.setSelectedWorksetItem(wsi);</SPAN></P><P><SPAN style="font-family: 'courier new', courier">&nbsp;&nbsp;&nbsp; oShell.setContent(getContent(wsi));</SPAN></P><P></P><P>In the second of these 4 lines, I'm just making sure I handle the case where the user hacks the URL query string to specify a sub item that doesn't exist: I make sure that I can find an element with the ID specified (knowing that if it begins 'id_wsi' then it's a workset item) and defaulting to the first workset item if I can't.</P><P></P><P><IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2013/01/b2_173831.png" /></P><P></P><P>And that's it. Not a huge deal, but I was intrigued, and thought you might be too. For more info, see the complete snippet <A class="jive-link-external-small" href="https://github.com/qmacro/sapui5bin/blob/master/snippets/shell_wsi_nav.html" target="_blank" rel="nofollow noopener noreferrer">shell_wsi_nav.html</A>.</P><P></P><P>Share and enjoy!</P></DIV>
---
Bind Paginator to model?
technology-questions
2012-12-13
https://community.sap.com/t5/technology-q-a/bind-paginator-to-model/qaq-p/9120330
2012-12-13-bind-paginator-to-model
<HTML><HEAD></HEAD><BODY><P>I was wondering if anyone had tried binding a <A href="https://sapui5.netweaver.ondemand.com/sdk/#docs/api/symbols/sap.ui.commons.Paginator.html" rel="nofollow noopener noreferrer">Paginator</A> to a model, to have the numberOfPages automatically set to the number of entries in the model's row set. </P><P></P><P>As an example, I'd developed a simple Panel/HTML representation of my weblog posts (in preparation for "<A href="http://www.youtube.com/watch?v=wZUXz5f1CHI" rel="nofollow noopener noreferrer">Re-presenting my site in SAPUI5</A>") and then added a Paginator at the top to page through the posts. It looks like this:</P><P></P><P><IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/attachments/storage/7/jiveimages/165840" width="450" /></P><P></P><P>In order to work out what value to set the numberOfPages to, I ended up using jQuery to parse the source XML that the Model had consumed, and count the number of 'entry' elements. You can see the code here: <A href="https://github.com/qmacro/sapui5bin/blob/master/snippets/model_to_html.html#L31" title="https://github.com/qmacro/sapui5bin/blob/master/snippets/model_to_html.html#L31" rel="nofollow noopener noreferrer">https://github.com/qmacro/sapui5bin/blob/master/snippets/model_to_html.html#L31</A></P><P></P><P>I noticed in the docu that the Paginator inherits a number of bind methods from sap.ui.core.Element, and was curious to see whether binding a Paginator could auto-set the numberOfPages according to the data.</P><P></P><P>Anyone tried this?</P></BODY></HTML>
---
OData Everywhere
technology-blog-members
2012-11-13
https://community.sap.com/t5/technology-blogs-by-members/odata-everywhere/ba-p/12976132
2012-11-13-odata-everywhere
<DIV class="jive-rendered-content"><P style="color: #333333;font-family: 'Open Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;background-color: #ffffff">We're well into Day 1 at SAP TechEd 2012 in Madrid, and while SAP NetWeaver Gateway has already been mentioned in this morning's keynote (even though the keynote was more Sapphire-focused than TechEd-focused), and is noted as an enabler in various conversations public and private, there's a particular part of Gateway that is shining through as today's story for me: OData.</P><P></P><P style="color: #333333;font-family: 'Open Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;background-color: #ffffff">Just now, I attended the <A class="jive-link-external-small" href="http://www.bluefinsolutions.com/insights/blog/sap_ui_5_the_future_direction_of_sap_ui_development/" target="_blank" rel="nofollow noopener noreferrer">SAPUI5</A> Q&amp;A session with Tim Back and Oliver Graeff, where they presented a great overview of the libraries, tools and features of what is becoming an ever more popular platform for outside-in UI development. After all, it's almost policy at SAP to use SAPUI5 for development projects, where appropriate. ("Where appropriate" means in many circumstances except probably heavy power user application UI paradigms).&nbsp; One of the key features of SAPUI5, and in particular the DataTable controls, is the ridiculously easy consumption of data. In particular, data made available by Gateway, in the form of OData. Sure, <A class="jive-link-blog-small" href="https://blogs.sap.com/?p=61537" target="_blank" rel="noopener noreferrer">as I've noted before</A>, SAPUI5 can consume arbitrary XML and JSON too, but the data exposed in the related, resource-oriented fashion by Gateway, OData in other words, is where the magic happens. </P><P></P><P style="color: #333333;font-family: 'Open Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;background-color: #ffffff">Start with controlled definition of resources, and the relationship between them, done in your systems of record using the IW_BEP backend Gateway component building Model and Data providers, either manually or using the Service Builder. Then expose those resources and relations to your UI developers using the core Gateway components (GW_CORE and IW_FND). Then, you're off. Within no time you can start to see an application form around that data, with the right layer performing the right function with minimum friction. And that speed comes from the investment SAP has made in OData, an investment to make it all pervasive and all consumable.</P><P></P><P style="color: #333333;font-family: 'Open Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;background-color: #ffffff">So we know about Gateway being a key mechanism to expose OData for ABAP stack systems. Is there anything else? You bet. SAP HANA, full of data, can expose that data in an OData context. Use the magic of xsodata, create a definition marking a HANA table or view in a schema as an Entity,&nbsp; and *boom* you have a consumable OData service. And it doesn't stop there. There are facilities in the NetWeaver Cloud to produce OData too.</P><P></P><P style="color: #333333;font-family: 'Open Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;background-color: #ffffff">What does all this mean? Well, to me it means two things. The first thing is that it means that Gateway has already been a great success. It Just Works(tm). I recently completed a customer project which went live earlier this year, and Gateway was a key component in the integration architecture. And after setting Gateway up and defining our entities and the relations between them, we moved up a layer in the stack and never really had to work hard on Gateway at all. It did exactly what it said on the tin. We started to use, and reuse, entities that we'd defined, in building out the features in the consuming application. </P><P></P><P style="color: #333333;font-family: 'Open Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;background-color: #ffffff">The second thing is how important your investment in Gateway is. <A class="jive-link-external-small" href="http://www.bluefinsolutions.com/insights/guest_blog/project_gateway_a_call_to_arms_or_at_least_to_data/" target="_blank" rel="nofollow noopener noreferrer">Embrace Gateway</A> and by definition you're embracing OData. Before you know it you and your fellow developers are conversant in Entities, Entity Sets, Associations and Navigations (the relationships) -- the building blocks of information in OData. And while this is a super end in itself, you're also setting yourself up to move out into the cloud, and across onto HANA. Have a look at the speed with which you can put together an app that consumes data supplied to it from Gateway. And then consider you're investing in that speed, and that speed across platforms. </P></DIV>
---
Blog It Forward - DJ Adams
welcome-cornerblog-board
2012-08-31
https://community.sap.com/t5/welcome-corner-blog-posts/blog-it-forward-dj-adams/ba-p/12976170
2012-08-31-blog-it-forward-dj-adams
<DIV><BR />
<BR />
Well hello there. I guess if you're reading this you know already about the great <A class="jive-link-blog-small" href="https://blogs.sap.com/?p=70672" target="_blank" rel="noopener noreferrer">Blog It Forward initiative</A> here on SCN. I've been nominated by the great (Austrian!) <SPAN class="mention-scrubbed">steinermatt</SPAN> on <A class="jive-link-blog-small" href="https://blogs.sap.com/?p=70927" target="_blank" rel="noopener noreferrer">his BIF post</A>, alongside industrious and illustrious colleagues such as Jon Reed, Dick Hirsch, Matt Harding, Alisdair Templeton and Oliver Kohl. Goodness, what excellent people with whom to be associated!<BR />
<H2 id="toc-hId-191025715">About me</H2><BR />
So, where do I start? Well, my name is DJ and I hack on SAP and related tech for <A class="jive-link-external-small" href="http://www.bluefinsolutions.com" target="_blank" rel="nofollow noopener noreferrer">Bluefin Solutions</A>. I was born very young, in Manchester. Tim Guest has already mentioned a little bit about Manchester in <A class="jive-link-blog-small" href="https://blogs.sap.com/?p=71016" target="_blank" rel="noopener noreferrer">his BIF post</A> but I wanted to paint the picture a little more. Manchester is a city in the north west of England, and is often referred to as England's second city (after London). It's a fantastic place to live, a very in-your-face, matter-of-fact place that is confident and comfortable with its place in history. It's where the Industrial Revolution was born; the Industrial Revolution marked a major turning point in history and kickstarted what we now recognise today as major manufacturing, agriculture and transportation concepts. Manchester is where the first 'true' canal was constructed (the <A class="jive-link-external-small" href="http://en.wikipedia.org/wiki/Bridgewater_Canal" target="_blank" rel="nofollow noopener noreferrer">Bridgewater Canal</A>) which opened in 1761 - canals became the arteries of early industry in the 18th century and helped moved goods and raw materials around the country. Manchester is also of course the birthplace of the computer, and is proud to call <A class="jive-link-external-small" href="http://en.wikipedia.org/wiki/Alan_Turing" target="_blank" rel="nofollow noopener noreferrer">Alan Turing</A>, the father of computer science, a son.<BR />
<BR />
<A name="farm" target="_blank"></A>I grew up on a farm only a few miles from the centre of Manchester, in a village called Woodhouses. We bred pigs - about 400 at any one time - and cattle, particularly the <A class="jive-link-external-small" href="http://en.wikipedia.org/wiki/Galloway_cattle" target="_blank" rel="nofollow noopener noreferrer">Galloway breed</A>. The rest of the village, at that time, consisted of other farms, and not much else save for a few houses. Life was simpler and growing up it was pretty idyllic when I think back. Later the farm moved on to producing pig food, boiling up all sorts of stuff and making such a stink that we got frequent complaints from the neighbours and the next town. The vats that we used to use were two stories high!<BR />
<BR />
I left Manchester for London, to study Classics (Latin &amp; Greek) at the University of London, and after graduating, started work for an oil company (Esso) in London (computing, of course). Since then I've lived and worked in many places, most notably Germany (Esso AG, Deutsche Telekom, SAP, and other places) but also Denmark, France and briefly in the US. But now I'm back in the village where I started. Douglas Adams, author, of course, of <A class="jive-link-external-small" href="http://en.wikipedia.org/wiki/The_Hitchhiker's_Guide_to_the_Galaxy" target="_blank" rel="nofollow noopener noreferrer">The Hitch Hiker's Guide To The Galaxy</A> (and no namesake) once talked about "<A class="jive-link-external-small" href="http://www.clivebanks.co.uk/THHGTTG/THHGTTGradio10.htm" target="_blank" rel="nofollow noopener noreferrer">tiny invisible force tendrils</A>" that tie every being in the universe to his birthplace, and I guess those force tendrils have eventually pulled me back to Woodhouses.<BR />
<BR />
I got into computing at school, where we had a PDP minicomputer. Yes. This was 1977. In fact, <A class="jive-link-external-small" href="http://radar.oreilly.com/2005/11/burn-in-7-dj-adams.html" target="_blank" rel="nofollow noopener noreferrer">an interview with me over on O'Reilly's Radar site</A> explains more about this, so I'll point you there for more info. Suffice it to say I was completely mesmerised. This BIF initiative suggests I post a picture of myself or my home town, but instead, here's a "picture" of something that will be forever etched on my eyeballs (in a good way) - the "ready" screen of my first personal computer - the Acorn Atom. 8-bit 6502 processor, 2k RAM.<BR />
<BR />
<A href="http://www.flickr.com/photos/qmacro/67207654/" target="_blank" rel="nofollow noopener noreferrer"><IMG src="http://farm1.staticflickr.com/31/67207654_ab8292d2f9.jpg" alt="atom" width="320" height="240" /></A><BR />
<BR />
Now that's an interface! <span class="lia-unicode-emoji" title=":slightly_smiling_face:">ð</span> (I only say this because I've just seen that <SPAN class="mention-scrubbed">jon.reed</SPAN> has just <A class="jive-link-external-small" href="https://twitter.com/jonerp/status/241254279451656192" target="_blank" rel="nofollow noopener noreferrer">tweeted</A> to me about an article entitled "<A class="jive-link-external-small" href="http://www.cooper.com/journal/2012/08/the-best-interface-is-no-interface.html/" target="_blank" rel="nofollow noopener noreferrer">The Best Interface is No Interface</A>" <span class="lia-unicode-emoji" title=":slightly_smiling_face:">ð</span><BR />
<H2 id="toc-hId--5487790">Questions</H2><BR />
Anyway, to the questions! One from <SPAN class="mention-scrubbed">marilyn.pratt</SPAN>, and the others from Matthias.<BR />
<H3 id="toc-hId--72918576">What was your dream job as a kid?</H3><BR />
That was easy. I wanted to work for IBM. Simple. I loved the idea of big iron, the lure of the massive computing engines, and (in retrospect, perhaps) the wonders of the ivory towers. I'd cut my teeth on proper multiuser machines (PDPs) and so appreciated what IBM had to offer. And so I applied for a summer job (between university terms) and went to work at IBM in Sale, Greater Manchester (Jackson House, Washway Road, to be precise). My job there was to understand, devour and document a system written in CLIST, running on VM/CMS (yes, VM as in Virtual Machine. Decades old technology :-). Absolutely loved it. When I went to work for Esso after University, I was almost immediately knee deep in MVS/XA, 370 assembler, JCL and VSAM, on an SAP R/2 project. Like a pig in the proverbial.<BR />
<H3 id="toc-hId--269432081"><STRONG>What made me start actively participating in the community and why would I recommend people give it a try?</STRONG></H3><BR />
I've participated actively in a lot of communities (including this one: I helped build SDN/SCN from the ground up, back in 2003):<BR />
<UL><BR />
 	<LI>the <A class="jive-link-external-small" href="http://london.pm.org" target="_blank" rel="nofollow noopener noreferrer">London Perl Mongers</A> (Perl was my first-love with regards to open source software and languages)</LI><BR />
 	<LI>the Jabber / XMPP community (I ended up writing <A class="jive-link-external-small" href="http://shop.oreilly.com/product/9780596002022.do" target="_blank" rel="nofollow noopener noreferrer">Programming Jabber</A> for O'Reilly)</LI><BR />
 	<LI>the Google Technology User Groups (I founded the <A class="jive-link-external-small" href="https://plus.google.com/108142116361227913839/posts" target="_blank" rel="nofollow noopener noreferrer">Manchester GTUG</A> a few years ago)</LI><BR />
 	<LI><A class="jive-link-external-small" href="http://youngrewiredstate.org" target="_blank" rel="nofollow noopener noreferrer">SAP Young Rewired State</A> (where I was a mentor this year, got SAP and YRS together in the first place, and co-coordinated the YRS Manchester team)</LI><BR />
</UL><BR />
and of course am proud to be an SAP Mentor.<BR />
<BR />
What got me first started actively participating was an itch I needed to scratch. Back in the mid 1990s we SAP hackers were pretty isolated and I decided to form a mailing list for us to get together. This list was called 'merlin', and eventually merged with another list called 'sapr3-list', and the combined community eventually became SAP-R3-L. Read more about this history in the post "<SPAN class="mention-scrubbed">dj.adams/blog/2005/07/05/the-sap-developer-community-10-years-ago</SPAN>" (that post itself was 7 years ago, gosh!). After starting the list, the community was formed and the itch became scratched, but I persevered with running it (it was a lot of work!) because the benefits far outweighed the efforts. The community, the sense of belonging to a group of people similar to you, and and knowledge gained and shared, was brilliant. That still holds true today.<BR />
<BR />
Give X to a community, and you're likely to get X^2 back. If you're not already actively involved, give it a go!<BR />
<H2 id="toc-hId--595028305">Passing the baton</H2><BR />
Anyway, I guess that's more or less it for my BIF post; I'm running the risk of boring you all to pieces. So now I have the honour of blogging it forward to individuals whose work I try to follow as diligently as I can - <SPAN class="mention-scrubbed">jason.scott2</SPAN> and <SPAN class="mention-scrubbed">john.patterson3</SPAN> both of whom I admire for their work in SAP development, integration and mobile areas. In addition to choosing one of the questions I've already answered, I'd like Jason and John to answer the following questions:<BR />
<UL><BR />
 	<LI>What one invention from the future would - or wouldn't - you like to see here now, and why?</LI><BR />
 	<LI>If you had the luxury of choosing 5 conferences to go to this year, what would they be, and why?</LI><BR />
</UL><BR />
Thanks for reading!<BR />
<BR />
<STRONG>&nbsp;</STRONG><BR />
<BR />
</DIV>
---
Gateway metadata cache check - always abap_true?
technology-questions
2012-05-08
https://community.sap.com/t5/technology-q-a/gateway-metadata-cache-check-always-abap-true/qaq-p/8684367
2012-05-08-gateway-metadata-cache-check-always-abap-true
<HTML><HEAD></HEAD><BODY><P>Hi all</P><P></P><P>It may be a symptom of being back after a long Bank Holiday weekend, but I'm debugging the metadata mechanisms of Gateway and came across the following. In an apparent check to see if caching is enabled or not (switchable via tx /IWFND/MED_ACTIVATE), the layers end up with a call to static method IS_CACHING_ENABLED of utility class /IWBEP/_CL_MGW_MED_UTILS - I've pasted the call stack below. </P><P></P><P>Thing is, here's how this method is defined:</P><P></P><P><STRONG style="font-family: 'courier new', courier;"><SPAN class="L0S52">method </SPAN>IS_CACHING_ENABLED.</STRONG></P><P><STRONG style="font-family: 'courier new', courier;">&nbsp;&nbsp; rv_enabled = abap_true.</STRONG></P><P><STRONG style="font-family: 'courier new', courier;">endmethod.</STRONG></P><P></P><P>Always return "is enabled"? </P><P></P><P>Has anyone else seen this and wondered about it? If so, please put me out of my misery. Thanks!</P><P>dj</P><P></P><P></P><P></P><P></P><TABLE><TBODY><TR><TD>METHOD</TD><TD>IS_CACHING_ENABLED</TD><TD>/IWBEP/CL_MGW_MED_UTILS=======CP</TD></TR><TR><TD>METHOD</TD><TD>GET_CACHED_MODEL</TD><TD>/IWBEP/CL_MGW_MED_UTILS=======CP</TD></TR><TR><TD>METHOD</TD><TD>GET_MODEL</TD><TD>/IWBEP/CL_MGW_MED_PROVIDER====CP</TD></TR><TR><TD>METHOD</TD><TD>GET_CACHED_MODEL</TD><TD>/IWBEP/CL_MGW_MED_PROVIDER====CP</TD></TR><TR><TD>METHOD</TD><TD>/IWBEP/IF_MGW_MED_PROVIDER~GET_SERVICE_METADATA</TD><TD>/IWBEP/CL_MGW_MED_PROVIDER====CP</TD></TR><TR><TD>FUNCTION</TD><TD>/IWBEP/FM_MGW_MED_LOAD</TD><TD>/IWBEP/SAPLFGR_MGW_CLIENT_IF</TD></TR><TR><TD>FORM</TD><TD>/IWBEP/FM_MGW_MED_LOAD</TD><TD>/IWBEP/SAPLFGR_MGW_CLIENT_IF</TD></TR><TR><TD>FORM</TD><TD>REMOTE_FUNCTION_CALL</TD><TD>SAPMSSY1</TD></TR><TR><TD>MODULE (PBO)</TD><TD>%_RFC_START</TD><TD>SAPMSSY1</TD></TR><TR><TD>PBO MODULE</TD><TD>%_RFC_START</TD><TD>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TD></TR><TR><TD>PBO SCREEN</TD><TD>3004</TD><TD>SAPMSSY1</TD></TR><TR><TD>TRANSACTION</TD><TD>()</TD><TD>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TD></TR></TBODY></TABLE></BODY></HTML>
---
The Developer Connection - Connect Like Never Before
additional-blog-members
2012-04-01
https://community.sap.com/t5/additional-blogs-by-members/the-developer-connection-connect-like-never-before/ba-p/12926061
2012-04-01-the-developer-connection-connect-like-never-before
<DIV class="jive-rendered-content"><P>(I <A class="jive-link-external-small" href="http://www.pipetree.com/qmacro/blog/2012/04/the-developer-connection-connect-like-never-before/" target="_blank" rel="nofollow noopener noreferrer">posted this on my own blog</A> on my way back from SAP #DKOM and a good friend suggested I repost it here too. So here it is).</P><P style="color: #000000;font-family: Georgia, 'Times New Roman', 'Bitstream Charter', Times, serif;text-align: -webkit-auto;background-color: #ffffff">At SAP TechEd Madrid (November last year) I wrote about the <A class="jive-link-external-small" href="http://www.pipetree.com/qmacro/blog/2011/11/the-developer-renaissance/" target="_blank" rel="nofollow noopener noreferrer">Developer Renaissance</A>, covering my interview with Aiaz Kazi from the Technology &amp; Innovation Platform, and SAP's re-focus on developers.</P><P style="color: #000000;font-family: Georgia, 'Times New Roman', 'Bitstream Charter', Times, serif;text-align: -webkit-auto;background-color: #ffffff">This week I had the great honour of being invited to, and <A class="jive-link-external-small" href="http://www.flickr.com/photos/finnern/6880455744/" target="_blank" rel="nofollow noopener noreferrer">speaking at</A> SAP <A class="jive-link-external-small" href="http://www.youtube.com/watch?v=6Opmj8M_tBw" target="_blank" rel="nofollow noopener noreferrer">DKOM</A> (Development Kick-Off Meeting) in Karlsruhe. It was a truly great event - thousands of SAP developers attending many tracks and sessions on everything from Analytics, through Database &amp; Technology, to Cloud, and more besides. As I sit here in Frankfurt airport on my way home, I've been reflecting on perhaps the best single takeaway from this event. Yes the content of the talks was great (and I enjoyed giving my session on SAP NetWeaver Gateway too). Yes the venue and organisation was second to none. Yes it was great to see the SAP Mentor wolfpack and our illustrious leader Mark Finnern.</P><P style="color: #000000;font-family: Georgia, 'Times New Roman', 'Bitstream Charter', Times, serif;text-align: -webkit-auto;background-color: #ffffff">But most of all, I saw, felt, and experienced something that I last remember from over 20 years ago in my SAP career: <EM>The Developer Connection</EM>.</P><P style="color: #000000;font-family: Georgia, 'Times New Roman', 'Bitstream Charter', Times, serif;text-align: -webkit-auto;background-color: #ffffff">Back in the day, when I was (more) innocent, certainly a lot younger, and waist-deep in IBM mainframe tech, I moved around implementing and supporting R/2 installations in the UK and Europe. Esso Petroleum in London, Deutsche Telekom in Euskirchen, and so on. In those days you could catch up with all the OSS notes on your favourite topics over a couple of coffees. Most importantly however, you had connections to the developers at SAP who were building and shipping the code that you were implementing. We knew each other's names, and in many cases, shared phone numbers or email addresses too. There was a strong bond between customers and developers - and we worked together to make the software better.</P><P style="color: #000000;font-family: Georgia, 'Times New Roman', 'Bitstream Charter', Times, serif;text-align: -webkit-auto;background-color: #ffffff">That connection lost its way over the next few years, when SAP (consciously or unconsiously) built barriers between us. It became almost impossible in some cases to even find out the name of the developer or team responsible, let alone contact them directly.</P><P style="color: #000000;font-family: Georgia, 'Times New Roman', 'Bitstream Charter', Times, serif;text-align: -webkit-auto;background-color: #ffffff">Well - that connection is back. And better than ever before. Both at SAP TechEd Madrid, and this week at DKOM, developers were coming and saying hello. Developers who are building the great stuff we're exploring and using, like <A class="jive-link-external-small" href="http://www.sdn.sap.com/irj/sdn/index?rid=/webcontent/uuid/20a34ae7-762d-2f10-c994-db2e898d5f70" target="_blank" rel="noopener noreferrer">SAPUI5</A> and <A class="" href="http://scn.sap.com/community/netweaver-gateway" target="_blank" rel="noopener noreferrer">NetWeaver Gateway</A>. People like you and me. We are connecting again. I think there are a number of reasons for this.</P><P style="color: #000000;font-family: Georgia, 'Times New Roman', 'Bitstream Charter', Times, serif;text-align: -webkit-auto;background-color: #ffffff">First, there's the amazing community called the <A class="" href="http://scn.sap.com/welcome" target="_blank" rel="noopener noreferrer">SAP Community Network</A> (SCN - although for me it will always be the SAP Developer Network - SDN) that brings together developers from all sources. Then there's SAP's re-focus on developers, and the corresponding coupling of empowerment and responsibility that SAP is giving directly to those developers. Further, there's the inexorable turning inside out manoeuvre that SAP began a few years ago now, moving cautiously at first but now gathering pace as more and more technology directions that SAP are following are from outside the SAP universe, not inside. SAP developers naturally are connecting with the wider development community in general.</P><P style="color: #000000;font-family: Georgia, 'Times New Roman', 'Bitstream Charter', Times, serif;text-align: -webkit-auto;background-color: #ffffff">Whatever the reason, it's a great sign that the future looks exciting for SAP development as a whole. Connections, collaboration and cooperation is returning. The Developer Connection is here again.</P></DIV>
---
SAPUI5 says "Hello OData" to NetWeaver Gateway
technology-blog-members
2012-02-13
https://community.sap.com/t5/technology-blogs-by-members/sapui5-says-quot-hello-odata-quot-to-netweaver-gateway/ba-p/12939142
2012-02-13-sapui5-says-quot-hello-odata-quot-to-netweaver-gateway
So following a very interesting <A class="jive-link-external-small" href="http://www.spreaker.com/page#!/user/4440992/episode_010_sap_s_ui_toolkit_aka_sapui5" target="_blank" rel="nofollow noopener noreferrer">podcast</A> from Rui Nogueira with SAP's Michael Falk and Tim Back on the HTML5-based UI Toolkit for SAP NetWeaver Gateway (aka "SAPUI5") earlier this month, a beta version of&nbsp; SAPUI5 was released to the world on SDN, specifically in the "<A class="jive-link-external-small" href="http://www.sdn.sap.com/irj/sdn/sap-technology-innovation?rid=/webcontent/uuid/20a34ae7-762d-2f10-c994-db2e898d5f70" target="_blank" rel="noopener noreferrer">Developer Center for UI Development Toolkit for HTML5</A>" section. I downloaded it and unpacked the contents into a directory to have a look at the docu and guidelines, and have an initial poke around.<BR />
<BR />
Wow, those folks have certainly put together some nice documentation already! Try it for yourself - once downloaded, open the demokit directory and you should be presented with a nice (SAPUI5-powered) overview, developer guide, controls and API reference:<BR />
<DIV><IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2012/02/sapui5overview.png" /></DIV><BR />
The framework is based upon JQuery / UI and contains&nbsp; a huge number of controls. It also supports data bindings, and one thing that had<A class="jive-link-external-small" href="https://twitter.com/#!/qmacro/status/167191292919545856" target="_blank" rel="nofollow noopener noreferrer"> intrigued me</A> from the podcast was that data bindings were possible to arbitrary JSON and XML ... and OData resources.<BR />
<BR />
"Gosh", I hear you say, "that reminds me of something!" Of course, SAP NetWeaver Gateway's REST-informed data-centric consumption model is based upon OData. So of course I immediately was curious to learn about SAPUI5 with an OData flavour. How could I try out one of the controls to surface information in OData resources exposed by NetWeaver Gateway?<BR />
<BR />
What I ended up with is SAPUI5's DataTable control filled with travel agency information from my copy of the <A class="jive-link-external-small" href="http://www.sdn.sap.com/irj/sdn/gateway?rid=/webcontent/uuid/90b292cc-a2d7-2e10-709d-9fba966a6937" target="_blank" rel="noopener noreferrer">trial NetWeaver Gateway system</A>, via an OData service all ready to use. You can see what I mean in this short <A class="jive-link-external-small" href="http://youtu.be/yHVuWHNWK3I" target="_blank" rel="nofollow noopener noreferrer">screencast</A>.<BR />
<BR />
Here's what I did to get the pieces together. I'm assuming you've got the trial Gateway system installed and set up (you know, fully qualified hostname, ICM configured nicely, and so on), and that you're semi-familiar with the SFLIGHT dataset.<BR />
<H3 id="toc-hId-316503632">Step 1. The OData Service</H3><BR />
Check with transaction /iwfnd/reg_service, for the LOCAL system alias, that the service RMTSAMPLEFLIGHT is available, as shown here.<BR />
<P style="overflow: hidden;margin-bottom: 0px"><IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2012/02/iwfnd_reg_service1.png" /></P><BR />
Check you can see the service document by clicking the Call Browser button (you may need to provide a user and password for HTTP basic authentication). You can also check the data by manually navigating to the TravelagencyCollection by following the relative href attribute of the app:collection element as shown here:<BR />
<P style="overflow: hidden;margin-bottom: 0px"><IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2012/02/travelagencycollection.png" /></P><BR />
In other words, navigate from something like this:<BR />
<PRE><CODE><A class="jive-link-external-small" href="http://gateway.serverport" target="_blank" rel="nofollow noopener noreferrer">http://gateway.server:port/sap/opu/sdata/IWFND/RMTSAMPLEFLIGHT/?$format=xml</A></CODE></PRE><BR />
to this:<BR />
<PRE><CODE><A class="jive-link-external-small" href="http://gateway.serverport" target="_blank" rel="nofollow noopener noreferrer">http://gateway.server:port/sap/opu/sdata/IWFND/RMTSAMPLEFLIGHT/TravelagencyCollection?$format=xml</A></CODE></PRE><BR />
(The $format=xml is to force the service to return a less exotic Content-Type of application/xml rather than an Atom-flavoured one, so that the browser is more likely to render the data in human-readable form.)<BR />
<BR />
Following this href should show you some actual travel agency data in the form of entries in an Atom feed (yes, "everything is a collection/feed!"):<BR />
<P style="overflow: hidden;margin-bottom: 0px"><IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2012/02/atomentry1-300x204-1.png" /></P><BR />
<BR />
<H3 id="toc-hId-119990127">Step 2. The SAPUI5 Framework</H3><BR />
Make your SAPUi5 framework accessible. To avoid Same Origin Policy based issues in your browser, get your Gateway's ICM to serve the files for you. Create a 'sapui5' directory in your Gateway's filesystem:<BR />
<PRE><CODE>/usr/sap/NPL/DVEBMGS42/sapui5/</CODE></PRE><BR />
unpack the SAPUI5 framework into here, and add an instance profile configuration parameter to tell the ICM to serve files from this location:<BR />
<PRE><CODE>icm/HTTP/file_access_5 = PREFIX=/sapui5/, DOCROOT=$(DIR_INSTANCE)/sapui5/, BROWSEDIR=2</CODE></PRE><BR />
(here I have 5 previous file_access_xx parameters, hence the '5' suffix in this example)<BR />
<BR />
and when you restart the ICM it should start serving the framework to you:<BR />
<P style="overflow: hidden;margin-bottom: 0px"><IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2012/02/sapui5dir-300x119-1.png" /></P><BR />
&nbsp;<BR />
<H3 id="toc-hId--76523378">Step 3. The HTML / Javascript Application Skeleton</H3><BR />
Actually, calling it an application is far too grand. But you know what I mean. Now we have the SAPUI5 framework being served, and the OData service available, it's time to put the two together.<BR />
<BR />
Here's the general skeleton of the application - we pull in SAPUI5, and have an element in the body where the control will be placed:<BR />
<PRE><CODE></CODE></PRE><BR />
<PRE><CODE>&lt;html&gt;<BR />
&nbsp; &lt;head&gt;<BR />
&nbsp;&nbsp;&nbsp; &lt;meta http-equiv="X-UA-Compatible" content="IE=edge" /&gt;<BR />
&nbsp;&nbsp;&nbsp; &lt;title&gt;SAP OData in SAPUI5 Data Table Control&lt;/title&gt;</CODE></PRE><BR />
<PRE><CODE>&nbsp;&nbsp;&nbsp; &lt;!-- Load SAPUI5, select theme and control libraries --&gt;<BR />
&nbsp;&nbsp;&nbsp; &lt;script id="sap-ui-bootstrap"<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; type="text/javascript"<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; src="<A class="jive-link-external-small" href="http://gateway.serverport" target="_blank" rel="nofollow noopener noreferrer">http://gateway.server:port/sapui5/sapui5-static/resources/sap-ui-core.js</A>"<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; data-sap-ui-theme="sap_platinum"<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; data-sap-ui-libs="sap.ui.commons,sap.ui.table"&gt;<BR />
&nbsp;&nbsp;&nbsp; &lt;/script&gt;<BR />
<BR />
&nbsp; &lt;script&gt;<BR />
&nbsp;&nbsp;&nbsp; ...<BR />
&nbsp; &lt;/script&gt;<BR />
<BR />
&lt;/head&gt;<BR />
&lt;body&gt;<BR />
&nbsp; &lt;h1&gt;SAP OData in SAPUI5 Data Table Control&lt;/h1&gt;<BR />
&nbsp; &lt;div id="dataTable"&gt;&lt;/div&gt;<BR />
&lt;/body&gt;<BR />
&lt;/html&gt;</CODE></PRE><BR />
In the final step we'll have a look at what goes in the "..." bit.<BR />
<H3 id="toc-hId--273036883">Step 4. Using the SAPUI5 Framework in the Application</H3><BR />
So now it's time to flex our Javascript fingers, stand on the shoulders of giants, and write a few lines of code to invoke the SAPUI5 power and glory.<BR />
<BR />
What we need to do is:<BR />
<UL><BR />
 	<LI>create a DataTable control</LI><BR />
 	<LI>add columns to it to represent the fields in the OData entries</LI><BR />
 	<LI>create an OData data model</LI><BR />
 	<LI>link the DataTable to this data model</LI><BR />
 	<LI>bind the rows to the TravelagencyCollection</LI><BR />
 	<LI>place the control on the page</LI><BR />
</UL><BR />
Simples!<BR />
<BR />
Creating the DataTable control goes like this (but you must remember to add the control library to the data-sap-ui-libs attribute when loading SAPUI5 - see Step 3):<BR />
<PRE><CODE>var oTable = new sap.ui.table.DataTable();</CODE></PRE><BR />
Each column is added and described like this:<BR />
<PRE><CODE>oTable.addColumn(new sap.ui.table.Column({<BR />
&nbsp; label: new sap.ui.commons.Label({text: "Agency Name"}),<BR />
&nbsp; template: new sap.ui.commons.TextView().bindProperty("text", "NAME"),<BR />
&nbsp; sortProperty: "NAME"<BR />
}));</CODE></PRE><BR />
There are three different templates in use, for different fields - the basic TextView, the TextField and the Link.<BR />
<BR />
The OData data model is created like this, where the URL parameter points to the service document:<BR />
<PRE><CODE>var oModel = new sap.ui.model.odata.ODataModel("<A class="jive-link-external-small" href="http://gateway.serverport" target="_blank" rel="nofollow noopener noreferrer">http://gateway.server:port/sap/opu/sdata/iwfnd/RMTSAMPLEFLIGHT</A>");</CODE></PRE><BR />
It's then linked to the control like this:<BR />
<PRE><CODE>oTable.setModel(oModel);</CODE></PRE><BR />
The specific OData resource TravelagencyCollection is bound to the control's rows like this:<BR />
<PRE><CODE>oTable.bindRows("TravelagencyCollection");</CODE></PRE><BR />
And then the control is placed on the page like this:<BR />
<PRE><CODE>oTable.placeAt("dataTable");</CODE></PRE><BR />
I've put the complete code in a Github <A class="jive-link-external-small" href="https://gist.github.com/1820544" target="_blank" rel="nofollow noopener noreferrer">Gist</A> for you to have a look at.<BR />
<H3 id="toc-hId--469550388">Result</H3><BR />
What you end up with is live data from your SAP Gateway system that is presented to you like this:<BR />
<P style="overflow: hidden;margin-bottom: 0px"><IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2012/02/result-300x107-1.png" /></P><BR />
&nbsp;<BR />
<BR />
Share and enjoy!
---
Making OData from SAP accessible with the ICM's help
additional-blog-members
2012-01-31
https://community.sap.com/t5/additional-blogs-by-members/making-odata-from-sap-accessible-with-the-icm-s-help/ba-p/12930095
2012-01-31-making-odata-from-sap-accessible-with-the-icm-s-help
<DIV class="jive-rendered-content"><DIV><P style="color: #000000;font-family: Georgia, 'Times New Roman', 'Bitstream Charter', Times, serif;text-align: -webkit-auto">I'm totally enamoured by the power and potential of SAP's <A class="jive-link-external-small" href="https://blogs.sap.com/www.sdn.sap.com/irj/sdn/gateway" target="_blank" rel="noopener noreferrer">NetWeaver Gateway</A>, and all it has to offer with its REST-informed data-centric consumption model. One of the tools I've been looking at in exploring the services is the <A class="jive-link-external-small" href="http://metasapiens.com/sesame/data-browser/preview/" target="_blank" rel="nofollow noopener noreferrer">Sesame Data Browser</A>, a Silverlight-based application that runs inside the browser or on the desktop, and lets you explore OData resources.</P><P></P><P style="color: #000000;font-family: Georgia, 'Times New Roman', 'Bitstream Charter', Times, serif;text-align: -webkit-auto">One of the challenges in getting the Data Browser to consume OData resources exposed by NetWeaver Gateway (get a <A class="jive-link-external-small" href="http://www.sdn.sap.com/irj/sdn/gateway?rid=/webcontent/uuid/90b292cc-a2d7-2e10-709d-9fba966a6937" target="_blank" rel="noopener noreferrer">trial version</A>, available from the <A class="jive-link-external-small" href="http://www.sdn.sap.com/irj/sdn/gateway" target="_blank" rel="noopener noreferrer">Gateway home page on SDN</A>) was serving a couple of XML-based domain access directive files as described in "<A class="jive-link-external-small" href="http://msdn.microsoft.com/en-us/library/cc197955(v=vs.95).aspx" target="_blank" rel="nofollow noopener noreferrer">Making a Service Available Across Domain Boundaries</A>" - namely clientaccesspolicy.xml and crossdomain.xml, both needing to be served from the root of the domain/port based URL of the Gateway system. In other words, the NetWeaver stack needed to serve requests for these two resources:</P><P></P><PRE style="font-family: Consolas, Monaco, 'Courier New', Courier, monospace;font-size: 12px;color: #000000;text-align: -webkit-auto"><A class="jive-link-external-small" href="http://hostnameport" target="_blank" rel="nofollow noopener noreferrer">http://hostname:port/clientaccesspolicy.xml</A></PRE><P></P><P style="color: #000000;font-family: Georgia, 'Times New Roman', 'Bitstream Charter', Times, serif;text-align: -webkit-auto">and</P><P></P><PRE style="font-family: Consolas, Monaco, 'Courier New', Courier, monospace;font-size: 12px;color: #000000;text-align: -webkit-auto"><A class="jive-link-external-small" href="http://hostnameport" target="_blank" rel="nofollow noopener noreferrer">http://hostname:port/crossdomain.xml</A></PRE><P></P><P style="color: #000000;font-family: Georgia, 'Times New Roman', 'Bitstream Charter', Times, serif;text-align: -webkit-auto">Without these files, the Data Browser will show you this sort of error:</P><P></P><PRE style="font-family: Consolas, Monaco, 'Courier New', Courier, monospace;font-size: 12px;color: #000000;text-align: -webkit-auto"><P>A SecurityException has been encountered while opening the connection. </P><P>Please try to open the connection with Sesame installed on the desktop. </P><P>If you are the owner of the OData feed, try to add a clientaccesspolicy.xml </P><P>file on the server.--</P></PRE><P></P><P style="color: #000000;font-family: Georgia, 'Times New Roman', 'Bitstream Charter', Times, serif;text-align: -webkit-auto">So, how to make these two cross domain access files available, and specifically from the root? There have been some thoughts on this already, <A class="jive-link-external-small" href="http://www.plinky.it/blog/2009/03/09/add-crossdomainxml-on-the-root-of-sap-web-application-server/" target="_blank" rel="nofollow noopener noreferrer">using a default service on the ICF's default host definition</A>, or even dynamically loading the XML as a file into the server cache (see the ABAP program in <A class="jive-link-external-small" href="http://forums.sdn.sap.com/thread.jspa?threadID=281050" target="_blank" rel="noopener noreferrer">this thread in the RIA dev forum</A>).</P><P></P><P style="color: #000000;font-family: Georgia, 'Times New Roman', 'Bitstream Charter', Times, serif;text-align: -webkit-auto">But a conversation on Twitter last night about BSPs, raw ICF and even the ICM reminded me that the ICM is a powerful engine that is often overlooked and underloved. The ICM -- Internet Communication Manager -- is the collection of core HTTP/SMTP/plugin services that sits underneath the ICF, and handle the actual HTTP traffic below the level of the ICF's ABAP layer. In the style of <A class="jive-link-external-small" href="http://httpd.apache.org/docs/trunk/handler.html" target="_blank" rel="nofollow noopener noreferrer">Apache handlers</A>, there are a series of handlers that the ICM has to deal with plenty of HTTP serving situations - Logging, Authentication, Server Cache, Administration, Modification, File Access, Redirect, as well as the "ABAP" handler we know as the ICF layer.</P><P></P><P style="color: #000000;font-family: Georgia, 'Times New Roman', 'Bitstream Charter', Times, serif;text-align: -webkit-auto">Could the humble ICM help with serving these two XML resources? Of course it could!</P><P></P><P style="color: #000000;font-family: Georgia, 'Times New Roman', 'Bitstream Charter', Times, serif;text-align: -webkit-auto">The File Access handler is what we recognise from the level 2 trace info in the dev_icm tracefile as HttpFileAccessHandler. You all read the verbose traces from the ICM with your morning coffee, right? Just kidding. Anyway, the File Access handler makes its features available to us in the form of the <A class="jive-link-external-small" href="http://help.sap.com/saphelp_nw70ehp2/helpdata/en/48/3e1b4e252f72d0e10000000a42189c/frameset.htm" target="_blank" rel="noopener noreferrer">icm/HTTP/file_access_&lt;xx&gt;</A> profile parameters. It allows us to point the ICM at a directory on the filesystem and have it serve files directly, if a URL is matched. Note that this File Access handler is invoked, and given a chance to respond, before we even get to the ABAP handler's ICF level.</P><P></P><P style="color: #000000;font-family: Georgia, 'Times New Roman', 'Bitstream Charter', Times, serif;text-align: -webkit-auto">With a couple of these file_access parameters, we can serve static clientaccesspolicy.xml and crossdomain.xml files straight from the filesystem, matched at root. Here's what I have in my /usr/sap/NPL/SYS/profile/NPL_DVEBMGS42_nplhost parameter file:</P><P></P><PRE style="font-family: Consolas, Monaco, 'Courier New', Courier, monospace;font-size: 12px;color: #000000;text-align: -webkit-auto"><P>icm/HTTP/file_access_1 = PREFIX=/clientaccesspolicy.xml, </P><P>&nbsp;&nbsp; DOCROOT=$(DIR_INSTANCE)/qmacro, DIRINDEX=clientaccesspolicy.xml </P><P>icm/HTTP/file_access_2 = PREFIX=/crossdomain.xml, </P><P>&nbsp;&nbsp; DOCROOT=$(DIR_INSTANCE)/qmacro, DIRINDEX=crossdomain.xml</P></PRE><P></P><P style="color: #000000;font-family: Georgia, 'Times New Roman', 'Bitstream Charter', Times, serif;text-align: -webkit-auto">(I already have file_access_0 specifying something else not relevant here).</P><P></P><P style="color: #000000;font-family: Georgia, 'Times New Roman', 'Bitstream Charter', Times, serif;text-align: -webkit-auto">What are these parameters saying? Well the PREFIX specifies the relative URL to match, the DOCROOT specifies the directory that the ICM is to serve files from in response to requests matching the PREFIX, and DIRINDEX is a file to serve when the 'index' is requested. Usually the PREFIX is used to specify a directory, or a relative URL representing a 'container', so the DIRINDEX value is what's served when there's a request for exactly that container. The upshot is that the relevant file is served for the right relative resource. The files are in directory /usr/sap/NPL/DVEBMGS42/qmacro/.</P><P></P><P style="color: #000000;font-family: Georgia, 'Times New Roman', 'Bitstream Charter', Times, serif;text-align: -webkit-auto">While we're at it, we might as well specify a similar File Access handler parameter to serve the favicon, not least because that will prevent those pesky warnings about not being able to serve requests for that resource, if you don't have one already:</P><P></P><PRE style="font-family: Consolas, Monaco, 'Courier New', Courier, monospace;font-size: 12px;color: #000000;text-align: -webkit-auto"><P>icm/HTTP/file_access_3 = PREFIX=/favicon.ico, </P><P>&nbsp; DOCROOT=$(DIR_INSTANCE)/qmacro, DIRINDEX=favicon.ico</P></PRE><P></P><P style="color: #000000;font-family: Georgia, 'Times New Roman', 'Bitstream Charter', Times, serif;text-align: -webkit-auto">The upshot of all this is that the static XML resources are served directly by the ICM, without the request even having to permeate up as far as the ABAP stack:</P><P></P><PRE style="font-family: Consolas, Monaco, 'Courier New', Courier, monospace;font-size: 12px;color: #000000;text-align: -webkit-auto"><P>Handler 5: HttpFileAccessHandler matches url: /clientaccesspolicy.xml </P><P>HttpSubHandlerCall: Call Handler: HttpFileAccessHandler (1089830/1088cf0), task=TASK_REQUEST(1), header_len=407 </P><P>HttpFileAccessHandler: access file/dir: /usr/sap/NPL/DVEBMGS42/qmacro </P><P>HttpFileAccessHandler: file /usr/sap/NPL/DVEBMGS42/qmacro/clientaccesspolicy.xml modified: -1/1326386676 </P><P>HttpSubHandlerItDeactivate: handler 4: HttpFileAccessHandler </P><P>HttpSubHandlerClose: Call Handler: HttpFileAccessHandler (1089830/1088cf0), task=TASK_CLOSE(3)</P></PRE><P></P><P style="color: #000000;font-family: Georgia, 'Times New Roman', 'Bitstream Charter', Times, serif;text-align: -webkit-auto">and also that the browser-based Sesame Data Browser can access your Gateway OData resources successfully:</P><P class="mceTemp"></P><DL class="wp-caption alignnone" style="width: 459px"><DT class="wp-caption-dt"><A href="http://www.pipetree.com/qmacro/blog/wp-content/uploads/2012/02/SesameDataBrowserScreenshot.png" target="_blank" rel="nofollow noopener noreferrer"><IMG class="size-full wp-image-1311 jiveImage" height="336" src="http://www.pipetree.com/qmacro/blog/wp-content/uploads/2012/02/SesameDataBrowserScreenshot.png" style="border: 0px none" title="SesameDataBrowserScreenshot" width="449" /></A></DT><DD class="wp-caption-dd" style="font-size: 11px;padding: 0 4px 5px">Data Browser</DD></DL><P></P><P></P><P style="color: #000000;font-family: Georgia, 'Times New Roman', 'Bitstream Charter', Times, serif;text-align: -webkit-auto">Success!</P><P></P><P style="color: #000000;font-family: Georgia, 'Times New Roman', 'Bitstream Charter', Times, serif;text-align: -webkit-auto">If you're interested in learning more about the Internet Communication Manager (ICM) and the Internet Communication Framework (ICF), you might be interested in my <A class="jive-link-external-small" href="http://omniversity.madlab.org.uk" target="_blank" rel="nofollow noopener noreferrer">Omniversity of Manchester</A> course:</P><P></P><H3 style="font-size: 1.17em;color: #000000;font-family: Georgia, 'Times New Roman', 'Bitstream Charter', Times, serif;text-align: -webkit-auto" id="toc-hId-316234710"><A class="jive-link-external-small" href="https://docs.google.com/document/pub?id=1gaTCzfuisyG0UyZE70RrxiltoC1zcSSaM2iMHqN5mjY" target="_blank" rel="nofollow noopener noreferrer">Web Programming with SAP's Internet Communication Framework</A></H3><P></P><P style="color: #000000;font-family: Georgia, 'Times New Roman', 'Bitstream Charter', Times, serif;text-align: -webkit-auto">Which is currently running in <A class="jive-link-external-small" href="http://s.madlab.org.uk/sap2" target="_blank" rel="nofollow noopener noreferrer">March (3rd and 4th)</A> and <A class="jive-link-external-small" href="http://s.madlab.org.uk/sap3" target="_blank" rel="nofollow noopener noreferrer">May (9th and 10th)</A> in Manchester.</P><P></P><P></P><P></P><P></P></DIV></DIV>
---
REpresentational State Transfer (REST) and SAP
devops-sysadminblog-board
2010-01-07
https://community.sap.com/t5/devops-and-system-administration-blogs/representational-state-transfer-rest-and-sap/ba-p/12872012
2010-01-07-representational-state-transfer-rest-and-sap
<DIV><BR />
<BR />
REST (which stands for REpresentational State Transfer) is an architectural style&nbsp;that is informed to a large extent by, but theoretically not limited to, the HTTP application protocol (yes, _application_ protocol, not transport protocol!). As an approach to application integration, REST has often been compared to its 'rival' Service Orientated Architecture (SOA), although a RESTful approach to integration architecture known as Resource Orientated Architecture (ROA) might be a better comparison fit.<BR />
<BR />
Fans of REST and ROA (I'm one of them!) state many advantages over SOA, such as:<BR />
<UL><BR />
 	<LI>loose coupling vs tight coupling</LI><BR />
 	<LI>flexible vs brittle interfacing</LI><BR />
 	<LI>simple vs complex implementation</LI><BR />
 	<LI>easier vs harder to debug</LI><BR />
</UL><BR />
and subtly, but importantly, ROA is a lot more deserving of the word "Web" in the phrase "Web Services", as it works and flows _with_ Web concepts, rather than, as in the case of SOA, fighting *against* them. SOA, incidentally, has been referred to as "CORBA with angle brackets", which is as funny as it is true.<BR />
<BR />
REST concepts and ideas have been around SAP for quite a while now; there is of course some coverage here on SDN, such as:<BR />
<BR />
"<A class="jive-link-external-small" href="https://blogs.sap.com/?p=39550" target="_blank" rel="noopener noreferrer">Forget SOAP - build real web services with the ICF</A>" (me, Jun 2004)<BR />
<BR />
"<A class="jive-link-external-small" href="http://tinyurl.com/yvgng" target="_blank" rel="nofollow noopener noreferrer">Real Web Services with REST and ICF</A>" (me, June 2004, again)<BR />
<BR />
"<A class="jive-link-external-small" href="http://wiki.sdn.sap.com/wiki/display/XI/REST+Web+Services+in+XI+%28Proof+of+Concept%29" target="_blank" rel="noopener noreferrer">REST Web Services in XI (Proof of Concept)</A>" (Wiktor Nyckowski, Mar 2009)<BR />
<BR />
"<A class="jive-link-external-small" href="https://blogs.sap.com/?p=50870" target="_blank" rel="noopener noreferrer">A new REST handler / dispatcher for the ICF</A>" (me, Sep 2009)<BR />
<BR />
"<A class="jive-link-external-small" href="https://blogs.sap.com/?p=50944" target="_blank" rel="noopener noreferrer">VCD #16 - The REST Bot: Behind the scenes</A>" (Uwe Fetzer, Sep 2009)<BR />
<BR />
"<A class="jive-link-external-small" href="https://blogs.sap.com/?p=50965" target="_blank" rel="noopener noreferrer">REST-orientation: Controlling access to resources</A>" (me, Sep 2009, again)<BR />
<BR />
and recently:<BR />
<BR />
"<A class="jive-link-external-small" href="https://blogs.sap.com/?p=51581" target="_blank" rel="noopener noreferrer">Put SOAP to REST using CE</A>" (Werner Steyn, Nov 2009)<BR />
<BR />
&nbsp;<BR />
<BR />
What especially delighted me was the coverage that REST concepts and ideas got at SAP TechEd 2009 in Vienna. Lots of people were talking about it, and mentioning it in presentations. Over half the DemoJam contestants mentioned REST too. I personally had a fascinating and very rewarding chat with SAP guru Thomas Ritter during RIA Hacker Night, and have also corresponded with the very knowledgable Juergen Schmerder. It seems that there is a lot of interest in REST at SAP.<BR />
<BR />
But what about REST _in<STRONG>_ </STRONG>SAP? How might you use it, be guided by it and ultimately _build_ things with SAP NetWeaver technologies?<BR />
<BR />
If you're interested, you might want to attend our upcoming Mentor Monday session<BR />
<BR />
"<STRONG>REpresentational State Transfer (REST) and SAP - An Overview</STRONG>", on Monday 25th Jan at 13:00-14:00 PST.<BR />
<BR />
You can get more information on the <A class="jive-link-external-small" href="https://wiki.sdn.sap.com/wiki/display/SAPMentors/SAP+Mentor+Monday" target="_blank" rel="noopener noreferrer">SAP Mentor Monday</A> wiki page.<BR />
<BR />
Hope to see you there!<BR />
<BR />
</DIV>
---
Tech Skills Chat with JonERP - A Follow-on Story
welcome-cornerblog-board
2009-11-05
https://community.sap.com/t5/welcome-corner-blog-posts/tech-skills-chat-with-jonerp-a-follow-on-story/ba-p/12893661
2009-11-05-tech-skills-chat-with-jonerp-a-follow-on-story
<DIV><BR />
<BR />
Sitting in a traffic jam on the A34 this week, twice, I got the opportunity to catch up with the excellent <A class="jive-link-external-small" href="http://enterprisegeeks.com/" target="_blank" rel="nofollow noopener noreferrer">Enterprise Geeks</A> podcasts. In one particular TechEd Phoenix episode "<A class="jive-link-external-small" href="http://enterprisegeeks.com/blog/2009/10/22/egeeks-podcast-jonerp-tech-skills-chat/" target="_blank" rel="nofollow noopener noreferrer">Tech Skills Chat with JonERP</A>" there was something that Ed said that resonated particularly with me, about the way to being "the best you can", becoming "that guru", was to READ.<BR />
<BR />
I think this is a great piece of advice, and something that needs to be underlined. To this end, I'd like to tell you a bit of a story.<BR />
<BR />
In the early 1990s, I was working at Deutsche Telekom, in their data centre in Euskirchen, near Bonn, in Germany. I was part of the IBM mainframe and SAP Basis team that ran a fantastically huge SAP installation - around 10 parallel&nbsp; SAP R/2 systems that coordinated and shared data through a central system. The systems ran on IBM mainframes, and were powered by <A class="jive-link-external-small" href="http://en.wikipedia.org/wiki/IBM_Information_Management_System" target="_blank" rel="nofollow noopener noreferrer">IMS</A> DB/DC (DB for the database management layer, and DC for the transaction processing layer, for you young ones <span class="lia-unicode-emoji" title=":slightly_smiling_face:">ð</span> They were the best of times. We hacked 370 assembler (yes, including qmacros!) while drinking coffee so strong the spoon would stand up, and wrote Rexx scripts &amp; ISPF panel-based applications to heavy-lift SAP R/2 installations like they were Lego constructions (and yes, Sergio, we had SBEZ! <span class="lia-unicode-emoji" title=":slightly_smiling_face:">ð</span><BR />
<BR />
<A name="documentation" target="_blank"></A>Being an IBM disciple at the time, I was aware how good the IBM documentation was. Seriously. I relished every opportunity to visit the documentation room, where I could diagnose any problem imaginable. Everything you ever wanted to know was there, if you knew where to look.<BR />
<BR />
Anyway, there was a consultant, a veritable guru, Tomaschek I think his name was. He came and went at unearthly hours, drove a Mercedes with double glazing, and Knew Everything. Everything I could imagine knowing about running R/2 on IMS, with <A class="jive-link-external-small" href="http://www.redbooks.ibm.com/abstracts/sg246105.html" target="_blank" rel="nofollow noopener noreferrer">VSAM</A>, and more. He knew. Of course, his experience counted for a lot, but I was eager to know how he had become so knowledgable, and so respected. So I asked him.<BR />
<BR />
And he replied: "I read".<BR />
<BR />
Since then, I've made it my business to read as much as I can, about the things I'm interested in. Anything and everything. Source code. Dry documentation. Articles. Books. Magazines. Weblogs. I have a stack of "to read" papers, ready to pop and take with me in the train, to meetings (how many meetings that you are invited to actually start on time?), into the bath. At my time at Deutsche Telekom, I set aside 10 minutes each day to read all the new OSS notes on my favourite areas (it was possible then!)<BR />
<BR />
I feel I've gained a tremendous amount from what I've read. Some stuff I've read and not completely understood. Other stuff I've read and given up, bored. And yes, there's a lot of SAP documentation that could be better.<BR />
<BR />
But if I can give one piece of advice, it's the same advice that I received from Mr Tomaschek all those years ago.<BR />
<BR />
Read.<BR />
<BR />
And then read some more.<BR />
<BR />
</DIV>
---
REST-orientation: Controlling access to resources
application-developmentblog-board
2009-09-30
https://community.sap.com/t5/application-development-blog-posts/rest-orientation-controlling-access-to-resources/ba-p/12876109
2009-09-30-rest-orientation-controlling-access-to-resources
<DIV><BR />
<H2 id="toc-hId-162396356">Background</H2><BR />
Using my <A class="jive-link-external-small" href="https://blogs.sap.com/?p=50870" target="_blank" rel="noopener noreferrer">A new REST handler / dispatcher for the ICF</A>, I can adopt a Resource Orientated Architecture (ROA) approach to integration. This gives me huge advantages, in that I can avoid complexity, and expose data and functions from SAP as resources - first class citizens on the web. From here, I can, amongst other things:<BR />
<UL><BR />
 	<LI>use off-the-shelf cacheing mechanisms to improve performance</LI><BR />
 	<LI>easily debug and trace integration with standard logging and proxying tools</LI><BR />
 	<LI>even make statements about the resources using RDF</LI><BR />
</UL><BR />
Moreover, I can easily divide up the programming tasks and the logic into logical chunks, based upon resource, and HTTP method, and let the infrastructure handle what gets called, and when.<BR />
<BR />
This is all because what we're dealing with in a REST-orientated approach is a set of resources -- the nouns -- which we manipulate with HTTP methods -- the verbs.<BR />
<BR />
As an example, here's a few of the channel-related resources that are relevant in my Coffeeshop project; in particular, my implementation of Coffeeshop in SAP. The resource URLs are relative, and rooted in the /qmacro/coffeeshop node of the ICF tree.<BR />
<DIV class="scn-scrollable-area"><TABLE border="1"><BR />
<THEAD><BR />
<TR><BR />
<TH style="border: 1px solid black">Resource</TH><BR />
<TH style="border: 1px solid black">Description</TH><BR />
<TH style="border: 1px solid black">Method</TH><BR />
<TH style="border: 1px solid black">Action</TH><BR />
</TR><BR />
</THEAD><BR />
<TBODY><BR />
<TR><BR />
<TD style="border: 1px solid black">/qmacro/coffeeshop/</TD><BR />
<TD style="border: 1px solid black">Homepage</TD><BR />
<TD style="border: 1px solid black">GET</TD><BR />
<TD style="border: 1px solid black">Returns the Coffeeshop 'homepage'</TD><BR />
</TR><BR />
<TR><BR />
<TD style="border: 1px solid black" rowspan="2">/qmacro/coffeeshop/channel/</TD><BR />
<TD style="border: 1px solid black" rowspan="2">Channel container</TD><BR />
<TD style="border: 1px solid black">GET</TD><BR />
<TD style="border: 1px solid black">Return list of channels</TD><BR />
</TR><BR />
<TR><BR />
<TD style="border: 1px solid black">POST</TD><BR />
<TD style="border: 1px solid black">Create new channel</TD><BR />
</TR><BR />
<TR><BR />
<TD style="border: 1px solid black" rowspan="3">/qmacro/coffeeshop/channel/123/</TD><BR />
<TD style="border: 1px solid black" rowspan="3">Channel</TD><BR />
<TD style="border: 1px solid black">GET</TD><BR />
<TD style="border: 1px solid black">Return information about the channel</TD><BR />
</TR><BR />
<TR><BR />
<TD style="border: 1px solid black">POST</TD><BR />
<TD style="border: 1px solid black">Publish a message to the channel</TD><BR />
</TR><BR />
<TR><BR />
<TD style="border: 1px solid black">DELETE</TD><BR />
<TD style="border: 1px solid black">Remove the channel</TD><BR />
</TR><BR />
</TBODY><BR />
</TABLE></DIV><BR />
(For more info on these and more resources, see <A class="jive-link-external-small" href="http://wiki.github.com/qmacro/coffeeshop" target="_blank" rel="nofollow noopener noreferrer">Coffeeshop</A>'s <A class="jive-link-external-small" href="http://wiki.github.com/qmacro/coffeeshop/resourceplan" target="_blank" rel="nofollow noopener noreferrer">ResourcePlan</A> page).<BR />
<H2 id="toc-hId--34117149">Problem</H2><BR />
This is all fine, but often a degree of access control is required. What if we want to allow certain groups access to a certain resources, other groups to another set of resources, but only allow that group, say, to be able to read channel information, and not create any new channels? In other words, how do we control access following a resource orientated approach -- access dependent upon the noun, and the verb?<BR />
<BR />
Perhaps we would like group A to have GET access to all channel resources (read-only administration), group B to have GET and POST access to a particular channel (simple publisher access) and group C to have POST access to the channel container and DELETE access to individual channels (read/write administration)?<BR />
<H2 id="toc-hId--230630654">What does SAP standard offer?</H2><BR />
Before looking at building something from scratch, what does standard SAP offer in the ICF area to support access control?<BR />
<BR />
When you define a node in the ICF tree, you can specify access control relating to the userid in the Logon Data tab:<BR />
<BR />
<IMG alt="image" width="547" height="460" border="0" /><BR />
<BR />
This is great first step. It means that we can control, on a high level, who gets access generally, and who doesn't. Let's call this 'Level 1 access'.<BR />
<BR />
You can also specify, in the Service Data tab, a value for the SAP Authorisation field ('SAP Authoriz.'):<BR />
<BR />
<IMG alt="image" width="553" height="331" border="0" /><BR />
<BR />
The value specified here is checked against authorisation object S_ICF, in the ICF_VALUE field, along with 'SERVICE' in the ICF_FIELD field.<BR />
<PRE><CODE>[O] S_ICF<BR />
 |<BR />
 +-- ICF_FIELD<BR />
 +-- ICF_VALUE</CODE></PRE><BR />
This is clearly a 'service orientated' approach, and is at best a very blunt mechanism with which to control access.<BR />
<BR />
As well as being blunt, it is also unfortunately violent. If the user that's been authenticated does have an authorisation with appropriate values for this authorisation object, then the authorisation check passes, and nothing more is said. But if the authenticated user <EM>doesn't</EM> have authorisation, the ICF returns HTTP status code '500', which implies an <A class="jive-link-external-small" href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.5.1" target="_blank" rel="nofollow noopener noreferrer">Internal Server Error</A>. Extreme, and semantically incorrect -- there hasn't been an error, the user just doesn't have authorisation. So, violent, and rather brutal. Then again, service orientation was never about elegance :-).<BR />
<H2 id="toc-hId--427144159">What's our approach, then?</H2><BR />
Clearly, what the SAP standard offers in the ICF is not appropriate for a REST approach to integration design. (To be fair, it was never designed with resource orientation in mind).<BR />
<BR />
What we would like is a three-level approach to access control:<BR />
<BR />
<STRONG>Level 1 - user authentication</STRONG>: Can the user be authenticated, generally? If not, the HTTP response should be status <A class="jive-link-external-small" href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.2" target="_blank" rel="nofollow noopener noreferrer">401</A> - Unauthorised. This level is taken care of nicely by the ICF itself. Thanks, ICF!<BR />
<BR />
<STRONG>Level 2 - general resource access</STRONG>: Does the user have access, generally, to the specific resource? If not, the HTTP response should be status <A class="jive-link-external-small" href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.4" target="_blank" rel="nofollow noopener noreferrer">403</A> - Forbidden.<BR />
<BR />
<STRONG>Level 3 - specific resource access</STRONG>: Is the user allowed to perform the HTTP method specified on that resource? If not, the HTTP response should be status <A class="jive-link-external-small" href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.6" target="_blank" rel="nofollow noopener noreferrer">405</A> - Method Not Allowed. As well as this status code, the response must contain an Allow header, telling the caller what methods <EM>are</EM> allowed.<BR />
<BR />
This will give us an ability to implement a fine-grained access control, allowing us to set up, say, group access, as described earlier.<BR />
<H2 id="toc-hId--623657664">How do we get there?</H2><BR />
Clearly, we're not going to achieve what we want with the SAP standard. We'll have to construct our own mechanism to give us Levels 2 and 3. <STRONG>But</STRONG>, SAP standard does offer us a couple of great building blocks that we'll use.<BR />
<BR />
&nbsp;<BR />
<BR />
<STRONG>Building block: Authorisation Concept</STRONG><BR />
<BR />
Why re-invent an authorisation concept, when we have such a good one as standard? Exactly. So we'll use the standard SAP authorisation concept.<BR />
<BR />
So we'll create an authorisation object, YRESTAUTH, with two fields -- one for the method, and one for the (relative) resource. This is what it looks like:<BR />
<PRE><CODE>[O] YRESTAUTH<BR />
 |<BR />
 +-- YMETHOD HTTP method<BR />
 +-- YRESOURCE resource (relative URL)</CODE></PRE><BR />
We can then maintain as many combinations of verbs and nouns as we like, and manage &amp; assign those combinations using standard SAP authorisation concept tools. Heck, we could even farm that work out to the appropriate security team! Then, when it comes to the crunch, and the ICF is handling an incoming HTTP request, our mechanism can perform authorisation checks on this new authorisation object for the authenticated user associated with the request.<BR />
<BR />
<STRONG>Building block: Stacked Handlers</STRONG><BR />
<BR />
One of the most fantastic things about the generally excellent ICF is the ability to have a whole stack of handlers, that are called in a controlled fashion by the ICF infrastructure, to respond to an incoming HTTP request. The model follows that of <A class="jive-link-external-small" href="http://perl.apache.org/docs/2.0/user/handlers/intro.html#Stacked_Handlers" target="_blank" rel="nofollow noopener noreferrer">Apache and mod_perl</A>, with <A class="jive-link-external-small" href="http://help.sap.com/saphelp_nw04/helpdata/en/78/985299c06b11d4ad310000e83539c3/frameset.htm" target="_blank" rel="noopener noreferrer">flow control</A> allowing any given handler to say whether, for example, it has responded completely and no further handlers should be called to satisfy the request, or that it has partially or not at all been able to respond, and that other handlers should be called.<BR />
<BR />
So for any particular ICF node that we want to have this granular 3-level access control, what we need is a pluggable handler that we can insert in the first position of the handler stack, to deal with authorisation. Like this:<BR />
<BR />
<IMG alt="image" width="552" height="305" border="0" /><BR />
<BR />
As you can see, we have the main coffeeshop handler , and before that in the stack, <STRONG>another</STRONG> handler, Y_AUTH, to provide the Levels 2 and 3 access control. So when an HTTP request comes in and the ICF determines that it's this node ([/default_host]/qmacro/coffeeshop) that should take care of the request, it calls Y_AUTH first.<BR />
<BR />
Y_AUTH is a handler class just like any other HTTP handler class, and implements interface IF_HTTP_EXTENSION. It starts out with a few data definitions, and identifies the resource specified in the request:<BR />
<PRE><CODE>method IF_HTTP_EXTENSION~HANDLE_REQUEST.</CODE></PRE><BR />
<PRE><CODE>&nbsp; data:<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; l_method&nbsp;&nbsp;&nbsp;&nbsp; type string<BR />
&nbsp;&nbsp;&nbsp; , l_is_allowed type abap_bool<BR />
&nbsp;&nbsp;&nbsp; , lt_allowed&nbsp;&nbsp; type stringtab<BR />
&nbsp;&nbsp;&nbsp; , l_resource&nbsp;&nbsp; type string<BR />
&nbsp;&nbsp;&nbsp; , l_resource_c type text255<BR />
&nbsp;&nbsp;&nbsp; , l_allowed&nbsp;&nbsp;&nbsp; type string<BR />
&nbsp;&nbsp;&nbsp; .</CODE></PRE><BR />
<PRE><CODE>* What's the resource?<BR />
&nbsp; l_resource = server-&gt;request-&gt;get_header_field( '~request_uri' ).</CODE></PRE><BR />
* Need char version for authority check<BR />
l_resource_c = l_resource.<BR />
<BR />
Then it performs the Level 2 access check - is the user authorised generally for the resource?<BR />
<PRE><CODE>* Level 2 check - general access to that resource?<BR />
&nbsp; authority-check object 'YRESTAUTH'<BR />
&nbsp;&nbsp;&nbsp; id 'YMETHOD'&nbsp;&nbsp; dummy<BR />
&nbsp;&nbsp;&nbsp; id 'YRESOURCE' field l_resource_c.</CODE></PRE><BR />
if sy-subrc &lt;&gt; 0.<BR />
server-&gt;response-&gt;set_status( code = '403' reason = 'FORBIDDEN - NO AUTH FOR RESOURCE' ).<BR />
exit.<BR />
endif.<BR />
<BR />
If the authority check failed for that resource generally, we return a status 403 and that response is sent back to the client.<BR />
<BR />
However, if the authority check succeeds, and we pass Level 2, it's time to check the specific combination of HTTP method and resource - the verb and the noun. We do this with a call to a simple method is_method_allowed() which takes the resource and method from the request, and returns a boolean, saying whether or not the method is allowed, plus a list of the methods that are actually allowed. Remember, in the HTTP response, we must return an Allow: header listing those methods if we're going to send a 405.<BR />
<PRE><CODE>* Level 3 check - method-specific access to that resource?<BR />
&nbsp; l_method =&nbsp; server-&gt;request-&gt;get_header_field( '~request_method' ).<BR />
&nbsp; translate l_method to upper case.</CODE></PRE><BR />
call method is_method_allowed<BR />
exporting<BR />
i_resource&nbsp;&nbsp; = l_resource<BR />
i_method&nbsp;&nbsp;&nbsp;&nbsp; = l_method<BR />
importing<BR />
e_is_allowed = l_is_allowed<BR />
e_allowed&nbsp;&nbsp;&nbsp; = lt_allowed.<BR />
<BR />
* If not allowed, need to send back a response<BR />
if l_is_allowed eq abap_false.<BR />
<BR />
concatenate lines of lt_allowed into l_allowed separated by ','.<BR />
server-&gt;response-&gt;set_status( code = '405' reason = 'METHOD NOT ALLOWED FOR RESOURCE' ).<BR />
server-&gt;response-&gt;set_header_field( name = 'Allow' value = l_allowed ).<BR />
<PRE><CODE></CODE></PRE><BR />
So we send a 405 with an Allow: header if the user doesn't have authorisation for that specific combination of HTTP method and resource. (The is_method_allowed() works by taking a given list of HTTP methods, and authority-checking each one in combination with the resource, noting which were allowed, and which weren't.)<BR />
<BR />
Finally, if we've successfully passed the Levels 2 and 3 checks, we can let go and have the ICF invoke the main handler for this ICF node - Y_DISP_COFFEESHOP. In order to make sure this happens, we tell the ICF, through the flow control variable IF_HTTP_EXTENSION~FLOW_RC, that while our execution has been OK, we still need to have a further handler executed to satisfy the request completely:<BR />
<PRE><CODE>* Otherwise, we're golden, but make sure another handler executes<BR />
&nbsp; else.</CODE></PRE><BR />
if_http_extension~flow_rc = if_http_extension~co_flow_ok_others_mand.<BR />
<BR />
endif.<BR />
<BR />
endmethod.<BR />
<BR />
And that's pretty much it!<BR />
<BR />
To finish of, here are some examples of the results of this mechanism.<BR />
<BR />
<IMG alt="image" width="679" height="116" border="0" /><BR />
<BR />
In the first call, the wrong password is specified in authentication, so the status in the HTTP response, directly from the ICF, is 401. This is Level 1.<BR />
<BR />
In the second call, the user is authenticated ok, but doesn't have access generally to the /qmacro/coffeeshop/ resource, hence the 403 status. This is Level 2.<BR />
<BR />
In the third call, we're trying to make a POST request to a specific channel resource. While we might have GET access to this resource, we don't specifically have POST access, so the status in the HTTP response is 405. In addition, a header like this: "Allow: GET" would have been returned in the response. This is Level 3.<BR />
<BR />
I hope this shows that when implementing a REST approach to integration, you can control access to your resources in a very granular way, and respond in a symantically appropriate way, using HTTP as designed - as an application protocol.<BR />
<BR />
</DIV>
---
A new REST handler / dispatcher for the ICF
application-developmentblog-board
2009-09-21
https://community.sap.com/t5/application-development-blog-posts/a-new-rest-handler-dispatcher-for-the-icf/ba-p/12872642
2009-09-21-a-new-rest-handler-dispatcher-for-the-icf
<DIV><BR />
<BR />
One of the best underlying mechanisms to be introduced into the Basis / NetWeaver stack in the past few years is the Internet Communication Framework (ICF), which is a collection of configuration, interfaces, classes and a core set of processes that allow us to build HTTP applications directly inside SAP.<BR />
<BR />
If you're not directly familiar with the ICF, allow me to paraphrase a part of Tim O'Reilly's <A class="jive-link-external-small" href="http://www.oreillynet.com/pub/a/oreilly/tim/articles/paradigmshift_0504.html" target="_blank" rel="nofollow noopener noreferrer">Open Source Paradigm Shift</A>, where he gets audiences to realise that they all use Linux, by asking them whether they've used Google, and so on. If you've used WebDynpro, BSPs, the embedded ITS, SOAP, Web Services, or any number of other similar services, you've used the ICF, the layer that sits underneath and powers these subsystems.<BR />
<BR />
One of my <A class="jive-link-external-small" href="http://www.pipetree.com/qmacro/blog/tag/rest/" target="_blank" rel="nofollow noopener noreferrer">passions</A> is <A class="jive-link-external-small" href="http://en.wikipedia.org/wiki/Representational_State_Transfer" target="_blank" rel="nofollow noopener noreferrer">REpresentational State Transfer</A> (REST), the architectural approach to the development of web services in the Resource Orientated Architecture (ROA) style, using HTTP for what it is - an application protocol. While the ICF lends itself very well to programming HTTP applications in general, I have found myself wanting to be able to develop web applications and services that not only follow the REST style, but also in a way that is more aligned with other web programming environments I work with.<BR />
<BR />
An example of one of these environments is the one used in Google's <A class="jive-link-external-small" href="http://code.google.com/appengine/" target="_blank" rel="nofollow noopener noreferrer">App Engine</A>. App Engine is a cloud-based service that offers the ability to build and host web applications on Google's infrastructure. In the Python flavour of Google's App Engine, the <A class="jive-link-external-small" href="http://pythonpaste.org/webob/" target="_blank" rel="nofollow noopener noreferrer">WebOb</A> library, an interface for HTTP requests and responses, is used as part of App Engine's <A class="jive-link-external-small" href="http://code.google.com/appengine/docs/python/tools/webapp/" target="_blank" rel="nofollow noopener noreferrer">web application framework</A>.<BR />
<BR />
Generally (and in an oversimplified way!), in the WebOb-style programming paradigm, you define a set of patterns matching various URLs in your application's "url space" (usually the root), and for each of the patterns, specify a handler class that is to be invoked to handle a request for the URL matched. When a match is found, the handler method invoked corresponds to the HTTP method in the request, and any subpattern values captured in the match are passed in the invocation.<BR />
<BR />
So for instance, if the incoming request were:<BR />
<PRE><CODE>GET /channel/100234/subscriber/91/</CODE></PRE><BR />
and there was a pattern/handler class pair defined thus:<BR />
<PRE><CODE>'^/channel/([^/]+)/subscriber/([^/]+)/$', ChannelSubscriber</CODE></PRE><BR />
then the URL would be matched, an object of class ChannelSubscriber instantiated, the method GET of that class invoked, and the values '100234' and '91' passed in the invocation. The GET method would read the HTTP request, prepare the HTTP response, and hand off when done.<BR />
<BR />
For a real-world example, see <A class="jive-link-external-small" href="http://github.com/qmacro/coffeeshop/blob/master/coffeeshop.py" target="_blank" rel="nofollow noopener noreferrer">coffeeshop.py</A> (part of my <A class="jive-link-external-small" href="http://wiki.github.com/qmacro/coffeeshop" target="_blank" rel="nofollow noopener noreferrer">REST-orientated, HTTP-based publish/subscribe (pubsub) mechanism</A>), in particular from <A class="jive-link-external-small" href="http://github.com/qmacro/coffeeshop/blob/master/coffeeshop.py#L524" target="_blank" rel="nofollow noopener noreferrer">line 524 onward</A>. You can see how this model follows the paradigm described above.<BR />
<PRE><CODE>def main():<BR />
&nbsp; application = webapp.WSGIApplication([<BR />
&nbsp;&nbsp;&nbsp; (r'/',&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MainPageHandler),<BR />
&nbsp;&nbsp;&nbsp; (r'/channel/submissionform/?',&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ChannelSubmissionformHandler),<BR />
&nbsp;&nbsp;&nbsp; (r'/channel/(.+?)/subscriber/(.+?)/', ChannelSubscriberHandler),<BR />
&nbsp;&nbsp;&nbsp; (r'/message/',&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MessageHandler),<BR />
&nbsp;&nbsp;&nbsp; (r'/distributor/(.+?)',&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; DistributorWorker),<BR />
&nbsp;&nbsp;&nbsp; [...]<BR />
&nbsp; ], debug=True)<BR />
&nbsp; wsgiref.handlers.CGIHandler().run(application)</CODE></PRE><BR />
</DIV><BR />
<DIV><BR />
<BR />
This model is absolutely great in helping you think about your application in REST terms. What it does is help you focus on a couple of the core entities in any proper web application or service -- the <STRONG>nouns</STRONG> and the <STRONG>verbs</STRONG>. In other words, the <EM>URLs</EM>, and the HTTP <EM>methods</EM>. The framework allows you to control and handle incoming requests in a URL-and-method orientated fashion, and leaves you to concentrate on actually fulfilling the requests and forming the responses.<BR />
<BR />
So where does this bring us? Well, while I'm a huge fan of the ICF, it does have a few shortcomings from a REST point of view, so I built a new generic handler / dispatcher class that I can use at any given node in the ICF tree, in the same style as WebOb. Put simply, it allows me to write an ICF node handler as simple as <A class="jive-link-external-small" href="http://gist.github.com/189000" target="_blank" rel="nofollow noopener noreferrer">this</A>:<BR />
<PRE><CODE>method IF_HTTP_EXTENSION~HANDLE_REQUEST.</CODE></PRE><BR />
<PRE><CODE>&nbsp; handler( p = '^/$'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; h = 'Y_COF_H_MAINPAGE' ).<BR />
&nbsp; handler( p = '^/channel/submissionform$'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; h = 'Y_COF_H_CHANSUBMITFORM' ).<BR />
&nbsp; handler( p = '^/channel/([^/]+)/subscriber/submissionform$' h = 'Y_COF_H_CHNSUBSUBMITFORM' ).<BR />
&nbsp; handler( p = '^/channel/([^/]+)/subscriber/$'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; h = 'Y_COF_H_CHNSUBCNT' ).<BR />
&nbsp; handler( p = '^/channel/([^/]+)/subscriber/([^/]+)/$'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; h = 'Y_COF_H_CHNSUB' ).</CODE></PRE><BR />
<PRE><CODE>&nbsp; dispatch( server ).</CODE></PRE><BR />
<PRE><CODE>endmethod.</CODE></PRE><BR />
The handler / dispatcher consists of a generic class that implements interface IF_HTTP_EXTENSION (as all ICF handlers must), and provides a set of attributes and methods that allow you, in subclassing this generic class, to write handler code in the above style. Here's the method tab of Y_DISP_COFFEESHOP, to give you a feel for how it fits together:<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2009/09/y_disp_coffeeshop_methodtab_97688.png" width="620" /><BR />
<BR />
The classes that are invoked (Y_COF_H_* in this example) all inherit from a generic request handler class which provides a set of attributes and methods that allow you to get down to the business of simply providing GET, POST, PUT and other methods to handle the actual HTTP requests.<BR />
<BR />
Here's an example of the method list of one of the request handler classes:<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2009/09/y_cof_h_chnsub_97689.png" width="620" /><BR />
<BR />
One interesting advantage, arguably a side-effect of this approach, is that you can use nodes in the ICF tree to 'root' your various web applications and services more cleanly, and avoid the difficulties of having different handlers defined at different levels in the child hierarchy just to service various parts of your application's particular url space.<BR />
<BR />
I'd like to end this weblog post with a diagram that hopefully shows what I've been describing:<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2009/09/diagram_97690.png" width="620" /><BR />
<BR />
If you're interested in learning more, or sharing code, please let me know. I'm using this for real in one of my projects, but it's still early days.<BR />
<BR />
</DIV><BR />
For more information on the coffeeshop mechanism, checkout the videos in this playlist:<BR />
<P style="overflow: hidden;margin-bottom: 0px"><A href="https://www.youtube.com/playlist?list=PLfctWmgNyOIcbRYRdPrbjN_ZM56Kc5YTL" target="_blank" rel="nofollow noopener noreferrer"><IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2009/09/Ehdcd1HWkAA60Zi-1.jpeg" height="219" width="419" /></A></P><BR />
<BR />
<DIV><BR />
<BR />
<STRONG><EM>Update 01/05/2012 I've re-added images to this post that were lost when SDN went through the migration to the new platform. This project is now called ADL - Alternative Dispatcher Layer and is on the SAP Code Exchange here: <A class="jive-link-external-small" href="https://cw.sdn.sap.com/cw/groups/adl" target="_blank" rel="noopener noreferrer">https://cw.sdn.sap.com/cw/groups/adl</A></EM></STRONG><BR />
<BR />
<EM><STRONG>Update 09/09/2020 Added a link to the coffeeshop playlist</STRONG></EM><BR />
<BR />
</DIV>
---
SAP and Google Wave - Conversation Augmentation
additional-blog-members
2009-09-07
https://community.sap.com/t5/additional-blogs-by-members/sap-and-google-wave-conversation-augmentation/ba-p/12911637
2009-09-07-sap-and-google-wave-conversation-augmentation
<DIV><BR />
<BR />
It's been pretty much six years to the day since <A class="jive-link-external-small" href="https://blogs.sap.com/?p=39261" target="_blank" rel="noopener noreferrer">Dashboard as extension to R/3 and SAPGUI client</A>, Nat Friedman's project and implementation of a realtime contextual information system. So I thought it fitting to make a short demo showing integration between Google Wave and SAP, inspired by the cluepacket-driven style shown so nicely with Dashboard.<BR />
<BR />
I got my Wave Sandbox account a week or so ago, and have had a bit of time to have a look at how robots and gadgets work -- the two main Wave extension mechanisms. To get my feet wet, I built a robot, which is hosted in the cloud using Google App Engine (another <A class="jive-link-external-small" href="http://www.pipetree.com/qmacro/blog/tag/appengine/" target="_blank" rel="nofollow noopener noreferrer">area of interest to me</A>) and the subject of this weblog entry. I used Python, but there's also a Java client library available too. You can get more info in the <A class="jive-link-external-small" href="http://code.google.com/apis/wave/guide.html" target="_blank" rel="nofollow noopener noreferrer">API Overview</A>.<BR />
<BR />
What this robot does is listen to conversations in a Wave, automatically recognising SAP entities and augmenting the conversation by inserting extra contextual information directly into the flow. In this example, the robot can recognise transport requests, and will insert the request's description into the conversation, lending a bit more information to what's being discussed.<BR />
<BR />
The robot recognises transport requests by looking for a pattern:<BR />
<PRE><CODE>trkorr_match = re.search(' (SAPKw{6}|[A-Z0-9]{3}Kd{6}) ', text)</CODE></PRE><BR />
In other words, it's looking for something starting SAPK followed by six further characters, or something starting with 3 characters, followed by a K and six digits (the more traditional customer-orientated request format). In either case, there must be a space before and a space following, to be more sure of it being a 'word'.<BR />
<BR />
How does it retrieve the description for a recognised transport request? Via a simple REST-orientated interface, of course <span class="lia-unicode-emoji" title=":slightly_smiling_face:">ð</span> I use the excellent Internet Communication Framework (ICF) to build and host HTTP handlers so I can <A class="jive-link-external-small" href="https://blogs.sap.com/?p=39550" target="_blank" rel="noopener noreferrer">Forget SOAP - build real web services with the ICF</A>. Each piece of data worth talking about is a <A class="jive-link-external-small" href="http://www.pipetree.com/qmacro/blog/2009/06/information-vs-behaviour/" target="_blank" rel="nofollow noopener noreferrer">first class citizen on the web</A>; that is, each piece of data is a resource, and has a URL.<BR />
<BR />
So the robot simply fetches the default representation of the recognised request's 'description' resource. If the request was NSPK900115, the description resource's URL would be something like:<BR />
<PRE><CODE><A href="http://hostname:port/transport/request/NSPK900115/description" target="test_blank" rel="nofollow noopener noreferrer">http://hostname:port/transport/request/NSPK900115/description</A></CODE></PRE><BR />
Once fetched, the description is inserted into the conversation flow.<BR />
<BR />
I've recorded <A class="jive-link-external-small" href="http://www.youtube.com/watch?v=G7W2M6H3OQo" target="_blank" rel="nofollow noopener noreferrer">a short screencast of the robot in action</A>.<BR />
<BR />
</DIV>
---
"SAP Business ONE Implementation" - a review
additional-blog-members
2009-08-31
https://community.sap.com/t5/additional-blogs-by-members/quot-sap-business-one-implementation-quot-a-review/ba-p/12909714
2009-08-31-quot-sap-business-one-implementation-quot-a-review
<DIV class="jive-rendered-content"><P>I posted a review of Packt Publishing's "SAP Business ONE Implementation" by Wolfgang Niefert:</P><P><A class="jive-link-external-small" href="http://www.pipetree.com/qmacro/blog/2009/08/book-review-sap-business-one-implementation/" target="_blank" rel="nofollow noopener noreferrer">&nbsp;http://www.pipetree.com/qmacro/blog/2009/08/book-review-sap-business-one-implementation/</A> </P><P>The review was favourable - see the weblog post for more information. Nice work Wolfgang! </P></DIV>
---
One way of dealing with #blogtheft from SDN - through images
welcome-cornerblog-board
2009-08-29
https://community.sap.com/t5/welcome-corner-blog-posts/one-way-of-dealing-with-blogtheft-from-sdn-through-images/ba-p/12909502
2009-08-29-one-way-of-dealing-with-blogtheft-from-sdn-through-images
<DIV><BR />
<BR />
I'm sure you're all aware of the recent <A class="jive-link-external-small" href="http://search.twitter.com/search?q=%23blogtheft" target="_blank" rel="nofollow noopener noreferrer">#blogtheft</A> issue - where some rogue has been lifting content lock stock and barrel from here and reproducing it - sans author name - on their website <A href="https://community.sap.com/www.sap-abap4.com" target="test_blank" rel="nofollow noopener noreferrer">www.sap-abap4.com</A>. <A class="jive-link-external-small" href="https://blogs.sap.com/?p=50641" target="_blank" rel="noopener noreferrer">Stop Thief - It's #blogtheft!</A> and <A class="jive-link-external-small" href="https://blogs.sap.com/?p=50669" target="_blank" rel="noopener noreferrer">Stolen Content</A> have blogged about it here already.<BR />
<BR />
In Craig's Friday Morning Report yesterday, I suggested:<BR />
<BR />
<EM>13:32 qmacro: get SAP hosting to send alternative âSTOLEN!â images to rogue referrer â Google âimage theft apacheâ for examples</EM><BR />
<BR />
and straight after the conference call finished, I thought I'd demo how that could be done. I implemented such a mechanism for images on an SDN blog post of mine, images that just happened to be hosted on my machine. I wrote about how that was done in a weblog post:<BR />
<BR />
<A class="jive-link-external-small" href="https://qmacro.org/2009/08/28/dealing-with-blogtheft-from-saps-developer-network/" target="_blank" rel="nofollow noopener noreferrer">Dealing with "#blogtheft" from SAP's Developer Network</A><BR />
<BR />
This morning, @thorstenster alerted me to the fact that SAP have now implemented this for images hosted here on SDN:<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2009/08/3866482857_b7fceed2e3_m_60939.jpg" height="207" width="240" /><BR />
<BR />
Now that's a <STRONG>great</STRONG> reaction! Kudos to the SAP Community Network hackers who look after the servers here. To implement something like that in such a short space of time and on the production servers ... I take my hat off to you folks. Well done.<BR />
<BR />
</DIV>
---
A return to the SDN community, and a touch of Javascript
additional-blog-members
2009-05-27
https://community.sap.com/t5/additional-blogs-by-members/a-return-to-the-sdn-community-and-a-touch-of-javascript/ba-p/12875139
2009-05-27-a-return-to-the-sdn-community-and-a-touch-of-javascript
<DIV class="jive-rendered-content"><P>A few days ago, <SPAN class="mention-scrubbed">mark.yolton/blog</SPAN> pointed out to me that this Friday, 30th May will mark 6 years since my first SDN blog post "<A class="jive-link-external-small" href="https://blogs.sap.com/?p=39213" target="_blank" rel="noopener noreferrer">The SAP/MySQL Partnership</A>", in SDN's <A class="jive-link-external-small" href="http://www.sdn.sap.com/irj/scn/weblogs?blog=/weblogs/date/2003/05" target="_blank" rel="noopener noreferrer">first month</A>.</P><P>My oh my, how things have changed and progessed! We've seen the rise and rise of <A class="jive-link-external-small" href="https://weblogs.sdn.sap.com/weblogs/topic/102" target="_blank" rel="noopener noreferrer">Open Source</A>, the rise and fall of SOA, and the <A class="jive-link-external-small" href="http://twitter.com/qmacro/status/1794857024" target="_blank" rel="nofollow noopener noreferrer">incredible improvements</A> in connectedness and social collaboration in SAP events such as Sapphire &amp; TechEd. Excellent. </P><P>Some things haven't changed so much, though. I'm reading SDN in earnest again -- especially the weblog posts. And guess what? The use of frames in SAP portal technology is still hampering basic usability. A particular case in point is bookmarking; I can't usefully or easily bookmark a weblog post without some cut'n'paste gymnastics, because the page title is always the same: "SAP Network Blogs". It should be the entry-specific weblog post title, so you don't end up with 1001 bookmarks that you can't tell apart. </P><P>&nbsp;</P><P><A href="http://www.pipetree.com/qmacro/x/SdnPageTitleBroken_small.jpg" target="_blank" rel="nofollow noopener noreferrer"><IMG alt="Before" src="http://www.pipetree.com/qmacro/x/SdnPageTitleBroken_small.jpg" /></A> </P><P>&nbsp;</P><P>Not to worry. A couple of <A class="jive-link-external-small" href="https://addons.mozilla.org/en-US/firefox/addon/748" target="_blank" rel="nofollow noopener noreferrer">Greasemonkey</A> Javascript lines later, in the form of <A class="jive-link-external-small" href="http://cloud.github.com/downloads/qmacro/sdnpagetitle/sdnpagetitle.user.js" target="_blank" rel="nofollow noopener noreferrer">sdnpagetitle.user.js</A>, (in the <A class="jive-link-external-small" href="http://github.com/qmacro/sdnpagetitle/downloads" target="_blank" rel="nofollow noopener noreferrer">sdnpagetitle github repository</A>) and things are fixed! </P><P>&nbsp;</P><P><A href="http://www.pipetree.com/qmacro/x/SdnPageTitleFixed_small.jpg" target="_blank" rel="nofollow noopener noreferrer"><IMG alt="After" src="http://www.pipetree.com/qmacro/x/SdnPageTitleFixed_small.jpg" /></A> </P><P>&nbsp;</P><P>Funny, my last post before this one was <A class="jive-link-external-small" href="https://blogs.sap.com/?p=41345" target="_blank" rel="noopener noreferrer">OssNoteFix script updated for Greasemonkey 0.6.4 and Firefox 1.5</A> too! </P><P>Share and enjoy, and here's to the next 6 years <span class="lia-unicode-emoji" title=":slightly_smiling_face:">ð</span></P></DIV>
---
OssNoteFix script updated for Greasemonkey 0.6.4 and Firefox 1.5
additional-blog-members
2006-02-07
https://community.sap.com/t5/additional-blogs-by-members/ossnotefix-script-updated-for-greasemonkey-0-6-4-and-firefox-1-5/ba-p/12840118
2006-02-07-ossnotefix-script-updated-for-greasemonkey-0-6-4-and-firefox-1-5
<DIV class="jive-rendered-content"><P>Last year, I got so frustrated at the pain of using the SAP Service Marketplace, and particularly OSS notes, that I got up and did something about it - I wrote 'OssNoteFix', a Greasemonkey script that:</P><UL><LI>put the OSS number and note title in the page's title (and therefore the browser window/tab too)</LI><LI>made OSS note numbers in the text of the OSS note into clickable links</LI><LI>removed the dreadful frames so you can, e.g. bookmark the notes</LI></UL><P>You can read more about it in the <A class="jive-link-external-small" href="https://blogs.sap.com/?p=40345" target="_blank" rel="noopener noreferrer">Hacking the SAP service portal to make OSS notes better</A> or just <A class="jive-link-external-small" href="http://www.pipetree.com/~dj/2005/05/OssNoteFix/screencast.html" target="_blank" rel="nofollow noopener noreferrer">watch the screencast</A> of how it works.</P><P>Since then, new versions of <A class="jive-link-external-small" href="http://www.mozilla.com/firefox/" target="_blank" rel="nofollow noopener noreferrer">Firefox</A> (1.5) and <A class="jive-link-external-small" href="http://greasemonkey.mozdev.org/" target="_blank" rel="nofollow noopener noreferrer">Greasemonkey</A> (0.6.4, for Firefox 1.5) have been released. Greasemonkey's security model has changed, and OssNoteFix stopped working. Well, this weekend I finally found a couple of tuits and got round to updating the script, which is now focused on running with these releases of Greasemonkey and Firefox (if you haven't upgraded, do so now!).</P><P>So without further ado, <A class="jive-link-external-small" href="http://www.pipetree.com/~dj/2005/05/OssNoteFix/ossnotefix.user.js" target="_blank" rel="nofollow noopener noreferrer">OssNoteFix 0.2</A> is available for installation.</P><P>For those of you who are interested, and / or want to be confused, <A class="jive-link-external-small" href="http://www.oreillynet.com/lpt/a/6257" target="_blank" rel="nofollow noopener noreferrer">here's some background info</A>. Of course, you can look at the code to see how it works and what changes were made, and even modify it to suit your own purposes, because it's Open Source.</P><P>Share and enjoy!</P></DIV>
---
SAP and Open Source: an analysis and letter to SAP and Shai
additional-blog-members
2005-11-17
https://community.sap.com/t5/additional-blogs-by-members/sap-and-open-source-an-analysis-and-letter-to-sap-and-shai/ba-p/12870153
2005-11-17-sap-and-open-source-an-analysis-and-letter-to-sap-and-shai
<DIV><BR />
<BR />
Well this has certainly been an interesting few days in the intersecting worlds of SAP and Open Source. There's been a lot of comment and discussion already, but having listened to the whole Churchill Club interview and conversation audio (both available at <A class="jive-link-external-small" href="http://blogs.zdnet.com/BTL/?p=2140" target="_blank" rel="nofollow noopener noreferrer">ZDNet</A>) on an early morning drive down to London yesterday, I would like to make some observations.<BR />
<BR />
Rather than focus on some of the worrying remarks that others have already commented upon (intellectual property socialism, innovation, and so on), I'd like to take one part that deals with source code, as that's been my bread and butter for the last 18 years of working with SAP software.<BR />
<BR />
Shai is understandably keen to see that his comments are not misrepresented - see&nbsp;<A class="jive-link-external-small" href="https://blogs.sap.com/?p=40363" target="_blank" rel="noopener noreferrer">I LOVE Open Source---Really!</A>, so I took the time to transcribe exactly what he said in the interview. What follows is from between 35:40 and 37:00 of the interview's <A class="jive-link-external-small" href="http://i.i.com.com/cnwk.1d/i/z/e/200511/110905_CHC_EVENT.mp3" target="_blank" rel="nofollow noopener noreferrer">MP3 file</A>, when he responds to a rather general question about Open Source. The response deserves some analysis.<BR />
<BLOCKQUOTE class="jive-quote"><EM>So we analyse Open Source a lot, in the, you know. Most people don't know it about SAP but we are one of the first Open Source and one of the worst hit Open Source company [sic] in the world.</EM></BLOCKQUOTE><BR />
Worst hit? What does that mean? It's difficult to tell, because it doesn't really make sense, so I can only assume it's either general FUD (equating Open Source to an undefined but undesirable situation) or a taste of what's to come later on in his response. I suspect the latter.<BR />
<BR />
That said, let's give SAP its dues; I've long carried the flag for SAP for making (most of) the source code to R/2 and R/3 available - see my comment to <A class="jive-link-external-small" href="https://blogs.sap.com/?p=39348" target="_blank" rel="noopener noreferrer">Visiting SAP NetWeaver Development Nerve Center</A> for example. But don't get out the champagne yet ...<BR />
<BLOCKQUOTE class="jive-quote"><EM>We shipped all of our applications to all of our customers 'source open'. So the processes that you get from SAP, you get the source of the processes.</EM></BLOCKQUOTE><BR />
To a large extent, that's true. Of course, it depends how you define 'application'. Source code for the business applications, in the form of ABAP (and assembler in R/2 as well) is available. But source code to to the kernel, and certain parts of the Basis, err sorry 'Web Application Server', system is not.<BR />
<BLOCKQUOTE class="jive-quote"><EM>And you're allowed to modify them, which causes the worst disaster in our ecosystem because every single one of our customers decided that "that's a great idea, let's go modify the source". And when they get the next version, they go "well, what do I do with all my modifications?".</EM></BLOCKQUOTE><BR />
Err, excuse me? So this is perhaps what the 'worse hit' FUD earlier was about. Disaster? Far from it, Shai, far from it. In my not so humble opinion, a major part of SAP's success was precisely *because* of the Open Source nature of the application code it delivered to the customer. Shai distinguishes two levels of 'open source' - a 'read-only' level for debugging, and a 'read-write' level for modifications. So let's go with that and address each level in turn:<BR />
<BR />
'Read-only' - one of the reasons SAP's support departments didn't get as swamped as they might with customer questions (stemming from, for example, incomplete documentation) is because the customer was able to look at the code, debug what was going on, and work out for himself what was supposed to be happening. And rather than having to contact SAP to ask for custom modifications, in many cases they could simply copy the code into their own namespace and make the modifications they needed.<BR />
<BR />
'Read/write' - far more important than 'read-only', this allowed customers to not only modify the code to do what they wanted, but also to <EM>fix code from SAP that was broken</EM>. Not only that, but they could then send the fixes back to SAP to be incorporated into the next put level / hot package / service release. SAP benefitted (and continues to do so) <EM>enormously</EM> from this angle.<BR />
<BR />
I remember even back to the late 1980s making a major change (well, rewrite) to an asset management batch program in R/2, for which we had of course the source - in this case, 370 assembler. The problem had been one of performance, and we had the author of the program visiting us from Walldorf. After my changes, the program ran orders of magnitude faster, and the chap (rightly) took the code changes back with him to SAP. This is just a single example. I've lost track of the countless fixes I and my colleagues have supplied SAP with over the last 18 years. I don't begrudge SAP these fixes at all; after all, they're programmers too (although SAP support these days leaves me somewhat cold, but that's another story).<BR />
<BR />
So the benefit -- to SAP and to customers -- of having read/write access to the source code is HUGE. As someone who has wrestled with SAP software for this length of time, I can't stress that enough.<BR />
<BLOCKQUOTE class="jive-quote"><EM>And so there's a, in our industry there's a very interesting balance that you need to keep; there's certain things that you need -- it's almost the difference between what happens in the CPU and what happens outside the CPU for Intel. You don't touch the transistors inside the CPU because, you know, you want to make sure your divisions always work correctly.</EM></BLOCKQUOTE><BR />
Ok, nothing really to comment on here, except to say that the parallel between source code and electronics, while on the surface seemingly reasonable (both 'high-tech' and 'computing' related), is in fact fairly inappropriate.<BR />
<BLOCKQUOTE class="jive-quote"><EM>We're going back into a model where we're going to take some of that code that was open in the past and put it more into a closed box and put web services, well defined, documented service interfaces to that, and then say above that, you get open. Above that you get open models, you get open source, you get everything you want in order to modify.</EM></BLOCKQUOTE><BR />
WHOA.<BR />
<BR />
Hold on there a second. Out of everything that Shai said in his answer about Open Source, this is (to me) the most worrying. Let me repeat what he just said: "<EM>... take some of that code that was open in the past and put it more into a closed box</EM>". Let's just make sure we understand what he said. It's fairly clear cut, especially as the sentence that follows pretty much closes the deal: "<EM>Above that you get open models, open source</EM>". Above the closed boxes. <STRONG>SAP is going to take some of the source that's been open, and close it. Remove the open access to it. </STRONG><BR />
<BR />
I don't want to appear alarmist, but this is alarming in the extreme. Software that SAP has delivered 'source open' in the past, will be delivered 'source closed' in the future? Well, that's what he said. And we're seeing that already today. Let's step out of the assembler and ABAP world for a second, and into SAP's J2EE world. Hands up those of you already frustrated with SAP only delivering software in compiled classes, without the Java source? Right. This is already happening.<BR />
<BR />
This, then, is a potential watershed in the SAP world. Whether you agree with Locke, Searls, et al., business <EM>is</EM> a conversation. SAP's business has been delivering applications, in the form of software, to its customers. And those customers have taken part, to their and SAP's great benefit, in a conversation at the software level.<BR />
<BR />
So SAP, and Shai, if I have one plea, it is this: do not deny a major reason for SAP's success in the past and present, and do not close the doors on your customers in the future. Thank you.<BR />
<BR />
</DIV>
---
The SAP developer community 10 years ago
welcome-cornerblog-board
2005-07-05
https://community.sap.com/t5/welcome-corner-blog-posts/the-sap-developer-community-10-years-ago/ba-p/12837852
2005-07-05-the-sap-developer-community-10-years-ago
<DIV><BR />
<BR />
Yesterday <SPAN class="mention-scrubbed">alan.rickayzen/blog</SPAN> pointed us (<A class="jive-link-external-small" href="https://blogs.sap.com/?p=40523" target="_blank" rel="noopener noreferrer">Whopping big collection of tips for developing workflows</A>) to a collection of tips on developing workflows, hosted by MIT, on a mailing list called 'SAP-WUG'.<BR />
<BR />
I guessed that 'SAP-WUG' is a descendant of the venerable 'SAP-R3-L' mailing list hosted by MIT, and I was immediately whisked back years to when that was formed, and beyond.<BR />
<BR />
<A href="http://www.flickr.com/photos/qmacro/23713365/" target="_blank" rel="nofollow noopener noreferrer"><IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2005/07/small_mitarbeiterkongressflasche_40707.jpg" height="240" width="320" /></A> Before SAP-R3-L there were two mailing lists; 'sapr3-list' run by Bryan Thorp in Canada, and 'merlin' run by me, in the UK. We both formed our lists in the first half of 1995, and for a while didn't know about each other (or each other's list). Running a list ate a <STRONG>lot</STRONG> of resources, both in computing terms and in human terms - I remember I was hacking on SAP at an oil company up in Aberdeen at the time, and after a day's work would return to my hotel room and spend a couple of hours in 'list maintenance' mode each night. It was pretty time consuming.<BR />
<BR />
Eventually MIT approached us both and gave us the opportunity to merge the two lists, and have the new list, which would be called SAP-R3-L, hosted and run by MIT. We still would have administrivia tasks, which we'd share and delegate, but it was a great offer (thanks MIT) and SAP-R3-L has left a great legacy.<BR />
<BR />
Anyway, this year marks the tenth anniversary of <A class="jive-link-external-small" href="http://www.cpub.com/archives/saplist/saplistinfo.html" target="_blank" rel="nofollow noopener noreferrer">sapr3-list, merlin, and SAP-R3-L</A>.<BR />
<BR />
The nearest thing I could find to commemorate was this bottle of bubbly, handed out to people in Walldorf (I was working there at the time) at a party in the car park.<BR />
<BR />
So, happy anniversary, SAP mailing lists one and all!<BR />
<BR />
</DIV>
---
Hacking the SAP service portal to make OSS notes better
additional-blog-members
2005-05-20
https://community.sap.com/t5/additional-blogs-by-members/hacking-the-sap-service-portal-to-make-oss-notes-better/ba-p/12824615
2005-05-20-hacking-the-sap-service-portal-to-make-oss-notes-better
<DIV class="jive-rendered-content"><P>Ahh,<A class="jive-link-external-small" href="http://service.sap.com/notes" target="_blank" rel="noopener noreferrer">OSS notes</A> - a topic<A class="jive-link-external-small" href="https://blogs.sap.com/?p=39238" target="_blank" rel="noopener noreferrer">Improving the OSS note experience</A><A class="jive-link-external-small" href="https://blogs.sap.com/?p=39405" target="_blank" rel="noopener noreferrer">FOSDEM, and small OSS Notes Browser Hack</A>my heart.</P><P><STRONG>The OSS Notes Experience</STRONG></P><P>The other day I decided to stop going on about how painful using OSS notes on the web was, and do something about it. So I hacked up a<A class="jive-link-external-small" href="http://greasemonkey.mozdev.org" target="_blank" rel="nofollow noopener noreferrer">Greasemonkey</A> script,<A class="jive-link-external-small" href="http://www.pipetree.com/~dj/2005/05/OssNoteFix/ossnotefix.user.js" target="_blank" rel="nofollow noopener noreferrer">OssNoteFix</A>, that addresses the three main issues I have:<UL><LI>Not having the OSS note number in the title of the page makes it hard to manage more than a couple of notes at once</LI><LI>Not being able to click on a reference to a further OSS note to go straight to it</LI><LI>Having my basic browsing experience messed up by the use of frames</LI></UL></P><P><STRONG>Enter Greasemonkey</STRONG></P><P>Greasemonkey, to quote Mark Pilgrim in his very useful<A class="jive-link-external-small" href="http://diveintogreasemonkey.org" target="_blank" rel="nofollow noopener noreferrer">Dive Into Greasemonkey</A> online book, "<EM>is a Firefox extension that allows you to write scripts that alter the web pages you visit. You can use it to make a web site more readable or more usable. You can fix rendering bugs that the site owner can't be bothered to fix themselves.</EM>". The extension doesn't do anything to web pages by itself, it's the scripts that manipulate the pages once they're loaded into the browser. (And yes, it's for <A class="jive-link-external-small" href="http://www.mozilla.org/products/firefox" target="_blank" rel="nofollow noopener noreferrer">Firefox</A>, a modern, standards-compliant browser. If you're still using Internet Explorer, shame on you.)</P><P><STRONG>Laying The Groundwork</STRONG></P><P>But before we get to the script, let's lay a bit of groundwork that will help smooth things along. Visit Dagfinn's weblog post<A class="jive-link-external-small" href="https://blogs.sap.com/?p=39931" target="_blank" rel="noopener noreferrer">Easily access SAP notes from Firefox</A> and follow his instructions to set up SSO access to service.sap.com, and to create a bookmark with a custom keyword so you can access OSS notes very simply. The SSO access avoids all those tiresome HTTP authentication popups your browser throws at you each time the front-end machine serving your request changes due to load balancing. The custom keyword bookmark allows you to request OSS notes directly by typing something like this into your address bar:<PRE><CODE><BR />
note 19466<BR />
</CODE></PRE>(You can see this in action in the screencast linked below.)</P><P><STRONG>Installing Greasemonkey and the OssNoteFix Script</STRONG></P><P>Once you've got these set up, it's time to install Greasemonkey. Visit the <A class="jive-link-external-small" href="http://greasemonkey.mozdev.org" target="_blank" rel="nofollow noopener noreferrer">Greasemonkey homepage</A>and follow the link to install it (you might have to add the Greasemonkey site to the list of sites allowed to install software). You'll have to restart Firefox to have this extension take effect.</P><P>Now it's time to install the Greasemonkey script that I wrote, "OssNoteFix". Go to<A class="jive-link-external-small" href="http://www.pipetree.com/~dj/2005/05/OssNoteFix/ossnotefix.user.js" target="_blank" rel="nofollow noopener noreferrer">http://www.pipetree.com/~dj/2005/05/OssNoteFix/ossnotefix.user.js</A>. Because of the ending (.user.js), Greasemonkey recognises it and gives you the option of installing it: Tools-&gt;Install User Script (see the<A class="jive-link-external-small" href="http://www.pipetree.com/~dj/2005/05/OssNoteFix/ossnotefix_install.png" target="_blank" rel="nofollow noopener noreferrer">screenshot</A>.)</P><P>Once you've got it installed, visit an OSS note page:<PRE><CODE><BR />
note 19466<BR />
</CODE></PRE>and notice that, once it's loaded:<UL><LI>the OSS note number is in the title</LI><LI>the numbers of the further notes referenced are clickable</LI><LI>there are no frames</LI></UL>Hurrah!</P><P><STRONG>Watch the Screencast</STRONG></P><P>I put together a<A class="jive-link-external-small" href="http://www.pipetree.com/~dj/2005/05/OssNoteFix/screencast.html" target="_blank" rel="nofollow noopener noreferrer">screencast</A>which demonstrates the creation of the OSS note bookmark, a visit to an OSS note page before OssNoteFix, the installation of the OssNoteFix user script, and the visit to an OSS note page after the installation. I'd already set up the SSO before I started recording, as that would have taken too long (and would be too boring to watch!) (Top tip: the screencast is at 800x600, so hit F11 to get fullscreen mode in your browser. Also, it's a 3 Meg file, so please be patient while it comes down the pipe!).</P><P><STRONG>Caveat Emptor</STRONG></P><P>Of course, the usual caveats apply - it's a beta, SAP's service portal pages are horribly complex and any change may break the script, and your own mileage may vary, blah blah blah. Also, the script sometimes matches 5 or 6 digit numbers that aren't OSS notes. But it works for me. It was especially useful this week as I was installing a CRM 4.0 system.</P><P>This script is free and open source software, use it as you see fit, and if you're not happy, you can get your money back <span class="lia-unicode-emoji" title=":slightly_smiling_face:">ð</span></P></DIV>
---
SDN Meets Labs gets underway at SAP University
additional-blog-members
2005-04-19
https://community.sap.com/t5/additional-blogs-by-members/sdn-meets-labs-gets-underway-at-sap-university/ba-p/12866835
2005-04-19-sdn-meets-labs-gets-underway-at-sap-university
<DIV class="jive-rendered-content"><SPAN>The </SPAN><A class="jive-link-external-small" href="http://www.sdn.sap.com/sdn/index.sdn?page=sdnmeetslabs_walldorf_agenda.htm" target="_blank" rel="noopener noreferrer">SDN Meets Labs</A><SPAN> at Walldorf-Rot gets underway at Walldorf-Rot. I've written a </SPAN><A class="jive-link-external-small" href="http://www.pipetree.com/qmacro/blog/archives/2005/04/sdn_meets_labs.html" target="_blank" rel="nofollow noopener noreferrer">post </A><SPAN> on my </SPAN><A class="jive-link-external-small" href="http://www.pipetree.com/qmacro/blog" target="_blank" rel="nofollow noopener noreferrer">weblog</A><SPAN> that I uploaded during the Keynote by Klaus Kreplin and Ivo Totev (Ivo's just telling us about visual composer, demonstrating it in Internet Explorer. Does it work in standards-compliant browsers too, I wonder?)&nbsp; The post contains a link to the SDN Flickr group where I've also uploaded photos from today (mostly registration, so far), and I'm sure other attendees will be uploading photos there too.&nbsp; Ok, off to cast a critical eye over what's being demonstrated.&nbsp; </SPAN></DIV>
---
(Mini) Installfest in the SDN clubhouse at TechEd
technology-blog-members
2004-10-14
https://community.sap.com/t5/technology-blogs-by-members/mini-installfest-in-the-sdn-clubhouse-at-teched/ba-p/12840840
2004-10-14-mini-installfest-in-the-sdn-clubhouse-at-teched
<DIV><BR />
<BR />
Piers and I got hold of the latest WAS 6.40 demo system (NW4) from the <A class="jive-link-external-small" href="http://www.sap.com/linux" target="_blank" rel="noopener noreferrer">LinuxLab</A> guys' stand here at SAP TechEd. It contains ABAP service pack 3 and Java/J2EE service pack 7.<BR />
<BR />
Since I had my <A class="jive-link-external-small" href="http://www.pipetree.com/~dj/2004/03/Biostar200.jpg" target="_blank" rel="nofollow noopener noreferrer">small Linux server</A> with me (that I used in my session this morning to demo some ICF stuff), we decided to blast away the previous NW4 install and have a <A class="jive-link-external-small" href="http://www.pipetree.com/~dj/2004/10/SapTechEd/InstallFest.jpg" target="_blank" rel="nofollow noopener noreferrer">mini installfest</A>! Excellent. There's something about interesting things happening on computer screens that seem to attract the inner-geek in people ... within minutes we had a small crowd of people joining Piers, Mark, Gregor and me to watch the poor little server get hammered as the RPMs were installed from the DVD.<BR />
<BR />
<A href="http://www.pipetree.com/~dj/2004/10/SapTechEd/InstallingNewNw4.png" target="_blank" rel="nofollow noopener noreferrer"><IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2004/10/small_installingnewnw4_39177.png" height="180" width="240" /></A><BR />
<BR />
I'm typing this post while the install goes on - here you can see a screenshot of the progress.<BR />
<BR />
<STRONG>Small hack needed</STRONG><BR />
<BR />
I noticed straight away that the install.sh script supplied on the DVD crashed and burned immediately. I had a little look (open source rules again <span class="lia-unicode-emoji" title=":slightly_smiling_face:">ð</span> and found it was because the script was trying to execute a KDE program 'kdialog' to display the licence and prompt for acceptance of the terms. (KDE is a desktop manager). I don't have KDE installed on the server, so it was almost a non-starter.<BR />
<BR />
Luckily I had a flash of inspiration, and created a symbolic link from a non-existent 'kdialog' to the ever-present X client utility 'xmessage' (I avoided copy-and-editing the script from the DVD as I would have had to change loads of relative pathnames and so on to get it to work from a new location). I reinvoked the install.sh script ... and everything started perfectly. Hurrah! (If you look <A class="jive-link-external-small" href="http://www.pipetree.com/~dj/2004/10/SapTechEd/InstallingNewNw4.png" target="_blank" rel="nofollow noopener noreferrer">closely</A> at the screenshot you can see evidence of this little hack.)<BR />
<BR />
Anyway, 4 RPMs have been installed by now - it's time for me to go back and have a look.<BR />
<BR />
&nbsp;<BR />
<BR />
<STRONG>Update: Install complete</STRONG><BR />
<BR />
Ok, after less than two hours, my new NW4 system, service release one, is installed and up and running:<BR />
<BR />
<A href="http://www.pipetree.com/~dj/2004/10/SapTechEd/NewNw4Installed.png" target="_blank" rel="nofollow noopener noreferrer"><IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2004/10/small_newnw4installed_39178.png" height="180" width="240" /></A><BR />
<BR />
Nice work, LinuxLab folks!<BR />
<BR />
</DIV>
---
Photos from SAP TechEd Munich
additional-blog-members
2004-10-13
https://community.sap.com/t5/additional-blogs-by-members/photos-from-sap-teched-munich/ba-p/12840728
2004-10-13-photos-from-sap-teched-munich
<DIV class="jive-rendered-content"><A href="http://www.flickr.com/groups/sapteched/" target="_blank" rel="nofollow noopener noreferrer"><IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2004/10/test_39176.jpg" height="75" width="100" /></A><SPAN> </SPAN><P>(The third weblog in two days ... what's going on? Well, <SPAN class="mention-scrubbed">mark.finnern/blog</SPAN> is a hard taskmaster, obviously <span class="lia-unicode-emoji" title=":slightly_smiling_face:">ð</span></P><P>There's a <A class="jive-link-external-small" href="http://www.flickr.com/groups/sapteched/" target="_blank" rel="nofollow noopener noreferrer">group photo pool on Flickr for SAP TechEd this year</A>; I've just uploaded a load of photos (of questionable quality - sorry, I only have my cameraphone). I'm sure you'll see how hard we're all working here. Ahem.</P></DIV>
---
The meaning of LIFETIME_RC
technology-blog-members
2004-10-12
https://community.sap.com/t5/technology-blogs-by-members/the-meaning-of-lifetime-rc/ba-p/12840530
2004-10-12-the-meaning-of-lifetime-rc
<DIV><BR />
<BR />
Last week, during some preparation for my <A class="jive-link-external-small" href="http://localhost/qmacro/tech/sap/teched04.entry" target="_blank" rel="nofollow noopener noreferrer">talk at TechEd</A> on Thursday this week, I'd been wondering about something in the ICF that hadn't seemed quite right. Interface IF_HTTP_EXTENSION, which is what every ICF handler must implement (in the form of a single method HANDLE_REQUEST) has a couple of attributes, FLOW_RC and LIFETIME_RC. FLOW_RC is for controlling the flow of handler dispatching for a request. LIFETIME_RC is for controlling the lifetime of handlers for a sequence of requests. To quote the <A class="jive-link-external-small" href="http://help.sap.com/saphelp_nw04/helpdata/en/78/98529fc06b11d4ad310000e83539c3/content.htm" target="_blank" rel="noopener noreferrer">documentation at help.sap.com</A> on the latter:<BR />
<BLOCKQUOTE class="jive-quote"><EM>HTTP request handlers can control the lifetime of their instances if they are operating in stateful mode ... If the attribute IF_HTTP_EXTENSION~LIFETIME_RC is set to one of the following values, the HTTP request handler can specify whether the handler should be reinitiated for every request in a session, or whether the handler should be retained and reused for subsequent HTTP requests.</EM></BLOCKQUOTE><BR />
&nbsp;<BR />
<BR />
The default action is for the handler instance created to handle the request to be kept, so that instance-level data is retained (think of an incrementing counter value that keeps going up every new request). This is the equivalent of setting LIFETIME_RC to the value of the constant CO_LIFETIME_KEEP. But if LIFETIME_RC is set to the value of constant CO_LIFETIME_DESTROY:<BR />
<BLOCKQUOTE class="jive-quote"><EM>The current instance of the HTTP request handler is terminated after the request is processed. If stateful mode is active, a new instance of the HTTP request handler is created. This means that local data belonging to the instance is lost.</EM></BLOCKQUOTE><BR />
&nbsp;<BR />
<BR />
[This of course only makes sense in the context of stateful sessions, which you can create using the SET_SESSION_STATEFUL method (of IF_HTTP_SERVER) - one effect of which causes a context id cookie to be constructed and set in the next HTTP response.]<BR />
<BR />
Ok, so with the phrasing of the help text (such as "<EM>...can control the lifetime...</EM>") and the implication of the "DESTROY" part of the constant name, I did a little experiment to try and control the lifetime, by setting the LIFETIME_RC attribute so that the handler instance would be destroyed after it exited. Did it work as expected?<BR />
<BR />
No.<BR />
<BR />
Hmm. What's going on? Well, it seems that with LIFETIME_RC, it's either all or nothing. If you set your session to be stateful and specify that the handler instance should be kept (or let it default to that anyway), then you can't, later in the session, suddenly decide to have the session destroyed.<BR />
<BR />
Looking under the hood, we see this is confirmed in the ICF layer's code. The whole process of handling a request is triggered via PBO modules in SAPMHTTP, and via the HTTP_DISPATCH_REQUEST coordinator, we come to the EXECUTE_REQUEST (or EXECUTE_REQUEST_FROM_MEMORY which I've seen in 6.40) method of the CL_HTTP_SERVER class.<BR />
<BR />
When a request comes in, the appropriate handler is instantiated, and the HANDLE_REQUEST method called. Once this method returns, a decision based on LIFETIME_RC is made as to whether to save the instantiated handler object in an internal table, ready for a new request. Unless LIFETIME_RC is set to destroy, the object is saved, providing we're dealing with a stateful session:<BR />
<PRE class="sapCode">if server-&gt;stateful = 1 and extension-&gt;lifetime_rc = if_http_extension=&gt;co_lifetime_keep and ext_inst_idx = -1. * add extension to list of instantiated extensions ...</PRE><BR />
There's no facility for <EM>removing</EM> existing table entries though. And this is the key to understanding why manipulating the LIFETIME_RC attribute won't always do ... what you <EM>think</EM> it should do.<BR />
<BR />
&nbsp;<BR />
<BR />
I bet you're glad you know that now ... share and enjoy <span class="lia-unicode-emoji" title=":slightly_smiling_face:">ð</span><BR />
<BR />
</DIV>
---
SAP TechEd first day - notes from Munich
SAP-TechEd-Groupblog-board
2004-10-12
https://community.sap.com/t5/sap-teched-blog-posts/sap-teched-first-day-notes-from-munich/ba-p/12840418
2004-10-12-sap-teched-first-day-notes-from-munich
<DIV><BR />
<BR />
<A href="http://www.pipetree.com/~dj/2004/10/SapTechEd/TechEdKeynote.jpg" target="_blank" rel="nofollow noopener noreferrer"><IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2004/10/small_techedkeynote_39165.jpg" height="90" width="120" /></A><BR />
<BR />
Well, after a nightmare getting here (<A class="jive-link-external-small" href="http://www.vbird.com" target="_blank" rel="nofollow noopener noreferrer">V-Bird</A>, the airline I was booked with, went bust) I'm now in Munich at a decidedly <EM>disconnected</EM> <A class="jive-link-external-small" href="http://emea.sapteched.com" target="_blank" rel="nofollow noopener noreferrer">TechEd 04</A> (more on the disconnected misery later).<BR />
<BR />
After registration, we went along to Shai Agassi's keynote presentation. It was fairly interesting, but overall, there was a single key point that stayed with me: "unification" is the new "integration".<BR />
<BR />
<STRONG>Unified, not integrated</STRONG><BR />
<BR />
Shai talked about cycles in the IT industry. He used the airline check-in process as an example to talk about how processes are invented, integrated, and eventually commoditised. He pointed out the fact in the past, check-in used to be handled by people. Big queues, long delays. Now we have self-service check-in stations, where you just stick in your credit or frequent flyer card and are checked in in an instant. Big attraction. The next big thing will be airlines offering you a check-in process ... performed by a real human being! A circle completed.<BR />
<BR />
Last week I read a <A class="jive-link-external-small" href="http://www.mnot.net/blog/2004/05/05/boo" target="_blank" rel="nofollow noopener noreferrer">blog entry</A> talking about XML and the transport of binary data. Someone mentioned to me that XML was fairly inappropriate, inefficient even, to transport data that is more suited to a binary representation, and perhaps binary protocols are the future. Now if that isn't a complete circle being formed I don't know what is <span class="lia-unicode-emoji" title=":slightly_smiling_face:">ð</span><BR />
<BR />
And this is where we come to 'unified, not integrated' (my phrase). Recently I <A class="jive-link-external-small" href="http://www.pipetree.com/qmacro/tech/sap/integration_irony.entry" target="_blank" rel="nofollow noopener noreferrer">pondered the potential irony of SAP's technology directions</A>, with particular reference to data integration. Basically it seems to me that SAP is moving away from <EM>integration</EM> as a focus (I used the word "<EM>de-integration</EM>" to describe what I meant), with all the different parts of the NetWeaver family performing different functions, and data living in and travelling between different systems. (This is in stark contrast to the opposite effect on the client side, where all data and functions seem to be converging into one homogenised front-end).<BR />
<BR />
Anyway, this morning during the keynote, with the irony of integration still in my thoughts, I settled on an explanation of what might be happening. And the key to what is happening is the word "<EM>unified</EM>". Unification of data and processes is close to integration of data and processes, but it's not the same thing. And (unless I got the wrong end of the stick) it seems that platform and data <EM>unification</EM> is what SAP is driving at right now. So I'm now trying to change the design of the puzzle -- where I try to figure out what direction SAP is going with technology -- from an 'integration'-based one to a 'unified'-based one.<BR />
<BR />
And cycles? Well, I'm just wondering how long it will be that we complete the circle and data and function integration and consolidation is all the rage. Again.<BR />
<BR />
&nbsp;<BR />
<BR />
<STRONG>Other stuff</STRONG><BR />
<BR />
Of course, there was a lot of other stuff that went on at the keynote too. Here are a couple of pointers:<BR />
<DL><BR />
 	<DT><EM>Composite and xApps</EM></DT><BR />
 	<DD>Shai gave a lot of time to telling us about how composite and xApps will help us in being more flexible in business. I'm not doubting this, but I personally am still struggling to understand what they are (technically) and how they tick. I went to the xApps booth at TechEd last year in Basel, and quizzed the patient folk there trying to understand what we are dealing with. But I failed to 'get it'. I suspect, based on what other people have said to me on this subject, that I'm not alone. So that's perhaps why Shai gave the subject so much airtime this year. We'll see, I'm definitely going to re-visit the xApps booth this year and have another go <span class="lia-unicode-emoji" title=":slightly_smiling_face:">ð</span></DD><BR />
 	<DT><EM>Java Virtual Machine Management</EM></DT><BR />
 	<DD>Shai invited Harald Kuck up on stage to give a fantastic demonstration of how SAP hackers in Walldorf have enveloped the Java VM with the same virtual machine / process management goo that we've grown to know and love in the ABAP world (it works so well there that we don't even notice it working). This is what SAP excels at - having the inspiration and guts to go for really hard problems ... and solve them. Hats off to those people (just a shame the language in question is Java <span class="lia-unicode-emoji" title=":winking_face:">ð</span></DD><BR />
</DL><BR />
<STRONG>Disconnected and powerless</STRONG><BR />
<BR />
I am lucky enough to attend a number of technical conferences each year. SAP TechEd is certainly the most well-attended, orientated around the biggest software entity in the world, and I don't need to tell you how important the 'net is to ERP business these days.<BR />
<BR />
&nbsp;<BR />
<BR />
So you'd think that providing some sort of Internet access would be as natural and obvious as providing food and water. Wouldn't you? Well, wrong. I'm having deja-vu all over again, as the saying goes. In Basel, no 'net access, and the sessions are so full you're refused entry. Pretty disappointing. I decided to give TechEd another chance this year. Perhaps it's too early to say for sure, but I think that it was possibly a bad move. No 'net access (apart from access that you can buy on an hourly basis from the convention centre itself ... at extortionate prices) at all, apart from in the speaker room (and it's not proper 'net access - just access to the Web via a proxy, so I can't reach my email on my box, via ssh, for example). And the sessions we've wanted to attend so far ... yep, have been too full to get into. So a bit like Basel. But with even less power (for laptops). 'Disappointing' is the word that comes to mind. I attend the grass-roots event "<A class="jive-link-external-small" href="http://www.fosdem.org" target="_blank" rel="nofollow noopener noreferrer">FOSDEM</A>" (the Free and Open-Source Developers' Meeting) in Brussels, and even they can organise free wifi access. And the attendance fee is ... zero! What's going on, SAP?<BR />
<BR />
<A href="http://www.pipetree.com/~dj/2004/10/SapTechEd/MarkAndCraig.jpg" target="_blank" rel="nofollow noopener noreferrer"><IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2004/10/small_markandcraig_39166.jpg" height="90" width="120" /></A><BR />
<BR />
(Indeed, as you can see here, <SPAN class="mention-scrubbed">craig.cmehil3/blog</SPAN> is so desperate he's had to resort to paper and pencil to write his blog post!)<BR />
<BR />
I'd like to end this ramble on a positive note, though. Our great leader <SPAN class="mention-scrubbed">mark.finnern/blog</SPAN> is running around organising a few of these extortionate access cards for the SDN clubhouse (which is also wireless-less and powerless) plus some power outlets for us. Nice one Mark, and thanks! We'll see how it goes.<BR />
<BR />
<EM>Update: Mark has organised power for the SDN clubhouse - thanks Mark!</EM><BR />
<BR />
</DIV>
---
SAP TechEd here I come ... with session slides!
additional-blog-members
2004-10-01
https://community.sap.com/t5/additional-blogs-by-members/sap-teched-here-i-come-with-session-slides/ba-p/12839434
2004-10-01-sap-teched-here-i-come-with-session-slides
<DIV class="jive-rendered-content"><P><A href="http://www.pipetree.com/~dj/2003/09/SapTechEd/TechedMainHall.jpg" target="_blank" rel="nofollow noopener noreferrer"><IMG align="right" alt="Teched Main Hall" border="0" src="http://www.pipetree.com/~dj/2003/09/SapTechEd/small.TechedMainHall.jpg" /></A> <A class="jive-link-external-small" href="http://emea.sapteched.com" target="_blank" rel="nofollow noopener noreferrer">SAP TechEd</A> is looming large, and this year it's in Munich. (If you're not in Europe, then SAP are holding TechEd events in Bangalore, Tokyo, and San Diego too). I went last year (in Basel), and was both impressed - by the quality of the session and tutorial content - and disappointed - at the lack of wifi and 'net access in general. One thing that was lacking overall last year was a sense of community; everyone was their on their own, with the whole event feeling more like an exhibition or computer fair, rather than a conference. That, or everyone was avoiding me <span class="lia-unicode-emoji" title=":winking_face:">ð</span></P><P>This year, it's going to be different. There's a <A class="jive-link-external-small" href="http://wiki.sdn.sap.com/teched04/" target="_blank" rel="noopener noreferrer">wiki</A>, there will be <A class="jive-link-external-small" href="http://wiki.sdn.sap.com/teched04/index.cgi?MunichBOF" target="_blank" rel="noopener noreferrer">Birds Of a Feather sessions</A>, including a <A class="jive-link-external-small" href="http://wiki.sdn.sap.com/teched04/index.cgi?SapAndOpenSourceBof" target="_blank" rel="noopener noreferrer">SapAndOpenSourceBof</A> run by me and my good friend <A class="jive-link-external-small" href="http://www.piersharding.com/blog/" target="_blank" rel="nofollow noopener noreferrer">Piers</A>. Wifi and 'net access has even been promised too. (Although when I compare the bullet points on the <A class="jive-link-external-small" href="http://emea.sapteched.com" target="_blank" rel="nofollow noopener noreferrer">Munich</A> and <A class="jive-link-external-small" href="http://www.sapteched.com" target="_blank" rel="nofollow noopener noreferrer">San Diego</A> pages, there's a distinct difference - no wireless at Munich?) </P><P>But the biggest change this year for me is that I'll be speaking. I'm giving a one hour session: </P><BLOCKQUOTE class="jive-quote"><EM><STRONG>The Internet Communication Framework: Into Context and Into Action!</STRONG></EM></BLOCKQUOTE><BLOCKQUOTE class="jive-quote"><EM>Business Server Pages (BSP) technology is a great way to put together ABAP powered web-based applications. But that's not the only way; in the grander scheme of things, BSP technology is 'just' a layer that sits on top of the Internet Communication Framework (ICF), the Web Application Server's core foundation that provides a full set of object-orientated APIs for handling HTTP requests and responses. This talk will put the ICF not only into context - what it is, how it works, why it's important - but also into action, with a live demonstration where we build, debug and run a simple web-based service. If you're interested in looking under the hood at the engine that connects the Internet Communication Manager with the ABAP Personality world, and learning how to use it yourself, then this talk is for you!</EM></BLOCKQUOTE><BR /><BR /><SPAN> </SPAN><P>I'm really excited at the chance to ramble and rant about some great parts of the Web Application Server; in many ways, the ICF is a bridge between the traditional walled world of SAP and the world of open standards. And this particular bridge is constructed with blocks that have 'HTTP' stamped through them.</P></DIV>
---
A little taste of SAP at EuroFoo
welcome-cornerblog-board
2004-08-21
https://community.sap.com/t5/welcome-corner-blog-posts/a-little-taste-of-sap-at-eurofoo/ba-p/12828948
2004-08-21-a-little-taste-of-sap-at-eurofoo
<DIV><BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2004/08/euro_foo_logo_38970.gif" height="91" width="90" />I'm in Enschede (Netherlands) this weekend for EuroFoo - a mini-conference get-together for hackers and geeks of different persuasions. It's a great mix of ideas, skills, and energy, where the talks are decided more or less spontaneously and written up on a series of <A class="jive-link-external-small" href="http://www.pipetree.com/~dj/2004/08/EuroFoo/TimViewsSessions" target="_blank" rel="nofollow noopener noreferrer">whiteboards</A>.<BR />
<BR />
I gave a talk - <A class="jive-link-external-small" href="http://wiki.oreillynet.com/eurofoo//wikis.conf?HelloSapWorld" target="_blank" rel="nofollow noopener noreferrer">HelloSapWorld</A>&nbsp;- this morning which was intended to burst the bubble that SAP seems to find itself within, for a great majority of hackers outside the SAP universe.<BR />
<BR />
Monolith, behemoth, huge-and-complicated, impenetrable, impossible. Those are all terms I've heard used by friends and colleagues with respect to getting started with SAP. Especially here. So I was pleasantly surprised to see a good turnout for the talk, where we crowded round the laptops (there was no projector in the room allocated to us, so we improvised by replicating the screen on the rest of the wifi-connected laptops in the room via <A class="jive-link-external-small" href="http://www.realvnc.com" target="_blank" rel="nofollow noopener noreferrer">VNC</A>).<BR />
<BR />
After a few <A class="jive-link-external-small" href="http://wiki.oreillynet.com/eurofoo//wikis.conf?HelloSapWorldSlides" target="_blank" rel="nofollow noopener noreferrer">slides</A>, we got into the meat of the talk, which was a live hacking session where we&nbsp;&nbsp;&nbsp; created simple 'Hello World' style objects - a report, a function module, a BSP page, an ICF handler, a Python RFC client, a Perl RFC server, and even a (one-dynpro) transaction. The time we had (an hour) simply flew by.<BR />
<BR />
I have already had very positive feedback from the attendees ... who knows, maybe we'll see more open source hackers entering the SAP world soon!<BR />
<BR />
</DIV><BR />
Update: Some pictures are available here:&nbsp;<A href="https://www.flickr.com/groups/eurofoo/" target="_blank" rel="nofollow noopener noreferrer">https://www.flickr.com/groups/eurofoo/</A>
---
SDN Meetup in Walldorf - a summary
welcome-cornerblog-board
2004-07-16
https://community.sap.com/t5/welcome-corner-blog-posts/sdn-meetup-in-walldorf-a-summary/ba-p/12826250
2004-07-16-sdn-meetup-in-walldorf-a-summary
<DIV><BR />
<BR />
Well, 24 hours (almost to the minute) have passed since I got off the train&nbsp;&nbsp;&nbsp; at Wiesloch-Walldorf station yesterday. I've just got on the train again to&nbsp;&nbsp;&nbsp; go home. Yesterday was quite a day. There was a really good turnout for the&nbsp;&nbsp;&nbsp; SDN meeting; some people from SAP came and went as their work and meeting schedules&nbsp;&nbsp;&nbsp; allowed, but at the peak there must have been around 20 people. The 'outsiders'&nbsp;&nbsp;&nbsp; (non-SAP people) there included <A class="jive-link-external-small" href="https://forums.sdn.sap.com/profile.jspa?userID=638" target="_blank" rel="noopener noreferrer">Lutz&nbsp;&nbsp;&nbsp; Morrien</A>, <SPAN class="mention-scrubbed">klaus.meffert/blog</SPAN>, <SPAN class="mention-scrubbed">matthias.zeller2/blog</SPAN> and me.<BR />
<BR />
The meeting kicked off at around 2pm in the "posh" 6th floor of SAP's EVZ building (I understand food and drink focused logistics were the reason for that - nicely organised, Mark!) and lasted until sometime between 5pm and 6pm. I'm not sure exactly when as the time flew, and in any case, the coffee was so strong it made me go cross-eyed and I couldn't have read the time if I'd tried.<BR />
<BR />
We started with a huge round of introductions, where each person suggested one good thing and one bad thing about SDN. This was very revealing, as it showed clearly that different people have different perspectives on what SDN is and their relationship to it. But there was a lot of common ground.<BR />
<BR />
As far as the good things went, well, the fact that SDN exists was pretty much up there at the top of the pile. Everyone was in agreement that a site like SDN, with weblogging, forum discussion and download facilities, as well as a growing collection of articles, was an extremely good thing (obviously!).<BR />
<BR />
There were plenty of bad things that people put forward too. None that can't be solved, I might add. I think it's fair to say that the overwhelming winner here was the fact that you have to register and sign in to get to the SDN content and use the facilities. This (as I and others have pointed out in the past) has caused SDN to exist as an island. Very few people outside of SDN link to SDN content (forum posts, weblog items, articles) from their own pages simply because their readers are not prepared to go through the hassle of registering and authenticating with what they see as a "walled city". And the number of people who might discover and link to SDN content is lower than it should be for exactly the same reasons.<BR />
<BR />
But - get this - the requirement to log on is going away in the near future. Hurrah!<BR />
<BR />
Following the introductions, I inflicted a combination of ranting, rambling&nbsp;&nbsp;&nbsp; and arm waving on the room, in the form of a short talk on an outsider's view&nbsp;&nbsp;&nbsp; of SDN. I won't repeat the content of the talk to you here, but as I'd put together&nbsp;&nbsp;&nbsp; a few slides (mostly to fool people into thinking I knew what I was doing) you&nbsp;&nbsp;&nbsp; can read them now here: <A href="https://docs.google.com/presentation/d/1JQ5OcfVobOCn7bLBG6zWzI5QhSrUMr0Fbe01OBK_1pU/edit?usp=sharing" target="_blank" rel="nofollow noopener noreferrer">An outsider's view of SDN</A>.<BR />
<BR />
There was a good range of topics discussed. Here are some of the highlights (for me).<BR />
<BR />
<STRONG>SDN Content : Fact and Opinion</STRONG><BR />
<BR />
What SDN is, and consequently what content it can and should contain, was enthusiastically debated. I think it's fair to say that there were two general camps. In camp 1, there were people who regarded SDN as an extremely useful channel to deliver information on technology direct to developers. In camp 2, there were people who regarded SDN as an open community where everyone and their opinion were equal.<BR />
<BR />
Weblogs and forums imply (to me) an open opportunity to talk about things, learning with and from your developer peers. This, coupled with the fact that a channel to deliver information seems (again, to me) to suggest traffic in mostly one direction and some sort of hierarchy in the relationship, puts me clearly in camp 2.<BR />
<BR />
Everyone agreed that SDN was still in its infancy, and finding the right balance in this respect was (and is) an ongoing task, which is understandable in a 'living, breathing' environment.<BR />
<BR />
<STRONG>Accessibility and Navigation</STRONG><BR />
<BR />
Not running MS-Windows, let alone the dreaded Internet Explorer, puts me in the minority. A position I make up for by being vocal about web design and architecture that doesn't work well in non-IE situations. Javascript, frames, impossibly long URLs, and other usual suspects were mentioned in the discussion. Fortunately I wasn't alone with my usability woes. I guess with any big site there are learning steps; I'm just doing my bit to help by complaining (politely :-).<BR />
<BR />
The fact that SDN remains largely a black box (or is that a black hole?) in&nbsp;&nbsp;&nbsp; the general web universe has largely to do with the authentication requirements&nbsp;&nbsp;&nbsp; I've already mentioned. As soon as those requirements go away, SDN can partake&nbsp;&nbsp;&nbsp; of the link love that other communities are blessed with. Moreover, mechanisms&nbsp;&nbsp;&nbsp; like <A class="jive-link-external-small" href="http://www.movabletype.org/trackback/" target="_blank" rel="nofollow noopener noreferrer">trackback</A> will&nbsp;&nbsp;&nbsp; allow people who don't want to use SDN to write about something to nevertheless&nbsp;&nbsp;&nbsp; make the connection to SDN content in a useful and recpirocal way.<BR />
<BR />
<STRONG>Content Management</STRONG><BR />
<BR />
Raised mainly by the SAP people who submit articles and weblog entries to SDN, the consensus was that better facilities for managing content would be a bonus. The ability to revise content after submission is a good example of what people were asking for.<BR />
<BR />
<STRONG>Contributor Points System</STRONG><BR />
<BR />
There's a new mechanism that Mark and the rest of the SDN team have been working on, with which contributors to SDN can earn points, that can be redeemed for ... well, I can't remember, to be perfectly honest. It was about that time I made the mistake of drinking more black coffee, which made my head spin and my eyes cross. But I do remember there was a lot of discussion, about how the points could or should be awarded.<BR />
<BR />
<STRONG>Content Creation</STRONG><BR />
<BR />
Kathy Meyers gave a good talk on how to write well for the web (I hope she's not reading this now with that in mind - I'm sure I've broken lots of rules already!). On the subject of producing content, we&nbsp; touched on the question of when content should be in the form of an article, and when it should be in the form of a weblog. Basically, I think the (sensible) consensus was reached that it didn't really matter that much, and one just used common sense to tell. Different people will have different perspectives, and that's fine.<BR />
<BR />
Oh yes, and before I forget - some of the discussion was recorded, to be shown to the rest of the SDN team, who due to geography and other real world restrictions couldn't be there. So don't think that the meeting was an isolated affair; hopefully, all the points raised and discussed will find their way to the people who can act upon them.<BR />
<BR />
<STRONG>Schlachthof!</STRONG><BR />
<BR />
After the meeting, Lutz, Mark, Matthias and I went into Wiesloch to the Alter Schlachthof for a few beers and something to eat. We had a great time talking about all sorts of things. It was all fine until I gave the language game away by talking to the waitress, a result of which Matthias forced us all to speak in German <span class="lia-unicode-emoji" title=":winking_face:">ð</span><BR />
<BR />
Later Mark tracked down <A class="jive-link-external-small" href="http://www.sdn.sap.com/irj/sdn/weblogs?blog=/pub/u/23" target="_blank" rel="noopener noreferrer">http://www.sdn.sap.com/irj/sdn/weblogs?blog=/pub/u/23</A> <B>[original link is broken]</B> <B>[original link is broken]</B> <B>[original link is broken]</B> <B>[original link is broken]</B> <B>[original link is broken]</B> <B>[original link is broken]</B> - he was in Heidelberg, and after finishing his drink there&nbsp;&nbsp;&nbsp; came down to meet us. He arrived with a plastic bag with (SAP)"TABU" on the&nbsp;&nbsp;&nbsp; outside and Absinthe on the inside. He ordered a blue drink, pointed out that&nbsp;&nbsp;&nbsp; it was actually green, and then drank it anyway, telling us stories involving&nbsp;&nbsp;&nbsp; VCs, a hotel called "W", nightclubs in New York, and conferences in Hawaii.&nbsp;&nbsp;&nbsp; I think he was from outer space. But a great guy.<BR />
<BR />
Anyway, that just about wraps it up. I need to get off this train and onto another one. It was indeed an honour to meet everyone yesterday - thanks!<BR />
<BR />
</DIV>
---
SDN Meetup in Walldorf - pictures
additional-blog-members
2004-07-15
https://community.sap.com/t5/additional-blogs-by-members/sdn-meetup-in-walldorf-pictures/ba-p/12825912
2004-07-15-sdn-meetup-in-walldorf-pictures
<DIV class="jive-rendered-content"><P>I arrived in Walldorf this morning and was met and looked after very well by Mark. I've just taken some pictures with my trusty mobile phone and posted them <A class="jive-link-external-small" href="http://www.pipetree.com/gallery/SdnMeetWalldorf" target="_blank" rel="nofollow noopener noreferrer">on the web</A>.</P><P><IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2004/07/small_fullhouse_38916.jpg" height="300" width="400" /></P><P>There's lots of great discussion here. But I've got go as the discussion is reaching a stage where I simply have to interrupt!</P><P>More on this later.</P></DIV>
---
TechEd talk winners - congrats
additional-blog-members
2004-06-30
https://community.sap.com/t5/additional-blogs-by-members/teched-talk-winners-congrats/ba-p/12824931
2004-06-30-teched-talk-winners-congrats
<DIV class="jive-rendered-content"><P>Congratulations to the three TechEd talk <A class="jive-link-external-small" href="http://www.sdn.sap.com/sdn/index.sdn?page=proposal_winners.htm" target="_blank" rel="noopener noreferrer">winners</A> Luke, Jayakumar and Andreas.</P><P>The winning talks look really good - I'm looking forward to hearing them. It's interesting that two of the three are BW related. Seems like a hot topic.</P><SPAN>I wonder if TechEd will offer some </SPAN><A class="jive-link-external-small" href="http://conferences.oreillynet.com/pub/w/29/bof.html" target="_blank" rel="nofollow noopener noreferrer">birds of a feather</A><SPAN> (BOF) style facilities? If there are such facilities, perhaps some of the rest of us can get together informally during TechEd and inflict our talks on each other anyway <span class="lia-unicode-emoji" title=":winking_face:">ð</span> </SPAN><BR /><BR /></DIV>
---
Forget SOAP - build real web services with the ICF
application-developmentblog-board
2004-06-24
https://community.sap.com/t5/application-development-blog-posts/forget-soap-build-real-web-services-with-the-icf/ba-p/12824505
2004-06-24-forget-soap-build-real-web-services-with-the-icf
<DIV><BR />
<BR />
I don't like getting into a lather when it comes to data and function integration. Rather than using SOAP, I prefer real web services, built with HTTP.<BR />
<BR />
As an example of taking the <A class="jive-link-external-small" href="http://rest.blueoxen.net/cgi-bin/wiki.pl" target="_blank" rel="nofollow noopener noreferrer">REST</A>ian approach to exposing your SAP data and functionality through services you can build with the excellent Internet Communication Framework (ICF) layer, I thought I'd show you how straightforward and natural data integration can be by using a spreadsheet as an example.<BR />
<BR />
In my recent SDN article (published this week) ...<BR />
<BLOCKQUOTE class="jive-quote">"<A class="jive-link-external-small" href="https://archive.sap.com/kmuuid2/ea8db790-0201-0010-af98-de15b6c1ee1a/Real%20Web%20Services%20with%20REST%20and%20ICF.article" target="_blank" rel="noopener noreferrer">Real Web Services with REST and ICF</A>"</BLOCKQUOTE><BR />
... I presented a simple ICF handler example that allowed you to directly address various elements of CTS data (I prototyped it in my NW4 system so I thought I'd use data at hand, and build an example that you could try out too). For instance, you could retrieve the username of the person responsible for a transport by addressing precisely that data element like this:<BR />
<PRE><CODE><A class="jive-link-external-small" href="http://shrdlu.local.net:8000/qmacro/transport/NW4K900007/as4text" target="_blank" rel="nofollow noopener noreferrer">http://shrdlu.local.net:8000/qmacro/transport/NW4K900007/as4text</A><BR />
</CODE></PRE><BR />
The approach of making your SAP data and functionality first class web entities, by giving each element its own URL, has wide and far reaching benefits.<BR />
<BR />
Take a programmable spreadsheet, for example. You're managing transports between systems by recording activity in a spreadsheet. You're mostly handling actual transport numbers, but have also to log onto SAP to pull out information about those transports. You think: "Hmmm, wouldn't it be useful if I could just <EM>specify the address</EM> of transport XYZ's user in this cell here, and then the value would appear automatically?"<BR />
<BR />
Let's look at how this is done. My spreadsheet program of choice is the popular <A class="jive-link-external-small" href="http://www.gnome.org/projects/gnumeric/" target="_blank" rel="nofollow noopener noreferrer">Gnumeric</A>, available on Linux. If you use another brand, no problem - there's bound to be similarities enough for you to do the same as what follows. For background reading on extending Gnumeric with Python, you should take a look <A class="jive-link-external-small" href="http://www.csse.monash.edu.au/~ctwardy/starting-with-python.html" target="_blank" rel="nofollow noopener noreferrer">here</A>.<BR />
<BR />
With Gnumeric, you can extend the functions available by writing little methods in Python. It's pretty straightforward. In my home directory, I have a subdirectory structure<BR />
<PRE><CODE>.gnumeric/1.2.1-bonobo/plugins/myfuncs/<BR />
</CODE></PRE><BR />
where I keep the Python files that hold my personal extended methods.<BR />
<BR />
In there, in a file called my-funcs.py, I have a little script that defines a method func_get(). This method takes a URL as an argument, and goes to fetch the value of what that URL represents. In other words, it performs an HTTP GET to retrieve the content. If successful, and if the value is appropriate (it's just an example here, I'm expecting a text/plain result), then it's returned ... and the cell containing the call to that function is populated with the value.<BR />
<BR />
Here's the code.<BR />
<PRE><CODE># The libs needed for this example<BR />
import Gnumeric<BR />
import string<BR />
import urllib<BR />
from re import sub<BR />
<BR />
# My version of FancyURLopener to provide basic auth info<BR />
class MyURLopener(urllib.FancyURLopener):<BR />
&nbsp;&nbsp;&nbsp; def prompt_user_passwd(self, *args):<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return ('developer', 'developer')<BR />
<BR />
# The actual extended function definition<BR />
def func_get(url):<BR />
&nbsp;&nbsp;&nbsp; urllib._urlopener = MyURLopener()<BR />
&nbsp;&nbsp;&nbsp; connection = urllib.urlopen(url)<BR />
&nbsp;&nbsp;&nbsp; data = connection.read()<BR />
&nbsp;&nbsp;&nbsp; if connection.info().gettype() == 'text/plain':<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return sub("<BR />
$", "", data)<BR />
&nbsp;&nbsp;&nbsp; else:<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return "#VALUE!"<BR />
<BR />
# The link between the extended function name and the method name<BR />
example_functions = {<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 'py_get': func_get<BR />
}<BR />
</CODE></PRE><BR />
It's pretty straightforward. Let's just focus on the main part, func_get(). Because the resource in this example is protected with basic authentication (i.e. you have to supply a username and password), we subclass the standard FancyURLopener to be able to supply the username and password tuple, and then assign an instance of that class to the urllib._urlopener variable before actually making the call to GET.<BR />
<BR />
If we get some 'text/plain' content as a result, we brush it off and return it to be populated into the cell, otherwise we return a 'warning - something went wrong' value.<BR />
<BR />
We add the method definition to a hash that Gnumeric reads, and through the assignment, the func_get() method is made available as new custom function 'py_get' in the spreadsheet. (There's also an extra XML file called plugin.xml, not shown here but described in the Gnumeric programming documentation mentioned earlier, that contains the name of the function so that it can be found when the spreadsheet user browses the list of functions.)<BR />
<BR />
So, what does that give us? It gives us the ability to type something like this into a spreadsheet cell (split for readability):<BR />
<PRE><CODE>=py_get('<A class="jive-link-external-small" href="http://shrdlu.local.net:8000/qmacro/transport/NW4K900011/as4user" target="_blank" rel="nofollow noopener noreferrer">http://shrdlu.local.net:8000/qmacro/transport/NW4K900011/as4user</A>')<BR />
</CODE></PRE><BR />
and have the cell automagically populated with the appropriate data from SAP. You can see an example of this in action in the screenshot:<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2004/06/3_38895.png" height="301" width="586" /><BR />
<BR />
As you can see, being able to address information as first class web resources opens up a universe of possibilities for the use of real web services.<BR />
<BR />
As a final note, I've submitted a SAP TechEd talk proposal. It's titled:<BR />
<BLOCKQUOTE class="jive-quote"><STRONG>"The Internet Communication Framework: Into Context and Into Action!"</STRONG></BLOCKQUOTE><BR />
If you're interested in learning more about the ICF, and want to have some fun building and debugging a simple web service with me, you know where to <A class="jive-link-external-small" href="http://www.sapteched.com/speakers/SDN/CastYourVote.asp" target="_blank" rel="nofollow noopener noreferrer">cast your vote</A> if you haven't already. Hurry though - there's only a few hours to go!<BR />
<BR />
Thanks!<BR />
<BR />
</DIV>
---
NW4, OSS1 and logon group selection for OSS
erp-blog-members
2004-05-31
https://community.sap.com/t5/enterprise-resource-planning-blogs-by-members/nw4-oss1-and-logon-group-selection-for-oss/ba-p/12822388
2004-05-31-nw4-oss1-and-logon-group-selection-for-oss
<DIV><BR />
<BR />
While waiting for the DD ACTIVATION phase of an add-on installation to finish, my mind wandered off to something I'd noticed with my new <A class="jive-link-external-small" href="https://blogs.sap.com/?p=39434" target="_blank" rel="noopener noreferrer">WAS 6.40 testdrive for Linux is here!</A> system, with the SID "NW4" (NetWeaver '04). Normally, when you start transaction OSS1, and hit the button to connect to OSS, you're presented with a popup giving you a choice of groups, like the one in the screenshot here.<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2004/05/groupselectionpopup_38869.png" height="304" width="360" /><BR />
<BR />
But it wasn't happening from my NW4 system. So I rolled up my sleeves, and wielded the mighty "/h" in the ok-code (in the R/2 days we used to call this "hobble mode" :-), cleaving my way into the ABAP that lay beneath OSS1. What I found was quite interesting.<BR />
<H3 id="toc-hId-286744475">lgtst</H3><BR />
There's a command-line program called <EM>lgtst</EM> that can be used to query the message server of an SAP system and have information on logon groups and so on returned. This lgtst program is not, apparently, supported on all operating systems, so there's a condition in the ABAP that checks that.<BR />
<H3 id="toc-hId-90230970">Direct SAPGUI call</H3><BR />
If the server's operating system is <STRONG>not</STRONG> supported, then a simple logon string is constructed from the technical settings held in OSS1 (menu path Parameter -&gt; Technical settings). For example, if you specify a SAProuter at your site thus:<BR />
<PRE><CODE>Name: host01 IP Address: 192.168.0.66 Instance: 99</CODE></PRE><BR />
&nbsp;<BR />
<BR />
with SAProuter details thus:<BR />
<PRE><CODE>Name: sapserv3 IP Address: 147.204.2.5 Instance: 99</CODE></PRE><BR />
&nbsp;<BR />
<BR />
and the SAPnet message server details thus:<BR />
<PRE><CODE>Name: oss001 DB Name: O01 Instance: 01</CODE></PRE><BR />
then the route string constructed is just the concatenated saprouters leading to the dispatcher at O01's '01' instance, like this:<BR />
<BR />
&nbsp;<BR />
<PRE><CODE>/H/192.168.0.66/S/sapdp99/H/147.204.2.5/S/sapdp99/H/oss001/S/sapdp01</CODE></PRE><BR />
&nbsp;<BR />
<BR />
This route string is then used in conjunction with a direct local call to your SAPGUI client, so that the end result is that a new SAPGUI instance is started for that connection.<BR />
<BR />
So far, so good (or not, depending on your luck with SAProuter routing :-).<BR />
<H3 id="toc-hId--106282535">Logon group popup, then SAPGUI call</H3><BR />
On the other hand, if the server's operating system <STRONG>is</STRONG> supported, then something rather different happens. In this case, the <EM>lgtst</EM> program is executed on the server, to discover what logon groups are available for OSS. How does this happen? Well, the SAProuter information we've already seen is used to construct a route string:<BR />
<PRE><CODE>/H/192.168.0.66/S/sapdp99/H/147.204.2.5/S/sapdp99 ...</CODE></PRE><BR />
&nbsp;<BR />
<BR />
<STRONG>but</STRONG>, instead of pointing to a dispatcher at the SAP OSS end:<BR />
<PRE><CODE>... /H/oss001/S/sapdp01</CODE></PRE><BR />
&nbsp;<BR />
<BR />
it points to system O01's message server:<BR />
<PRE><CODE>... /H/oss001/S/sapmsO01</CODE></PRE><BR />
&nbsp;<BR />
<BR />
Once this route string has been constructed, it's used in a call to <EM>lgtst</EM> like this:<BR />
<PRE><CODE>lgtst -H /H/.../H/oss001/S/sapmsO01 -S x -W 30000</CODE></PRE><BR />
This is basically requesting that the message server for O01 send back information on available servers (instances) and logon groups. A typical reply looks like this:<BR />
<BR />
&nbsp;<BR />
<PRE><CODE>list of reachable application servers ------------------------------------- <BR />
[pwdf1120_O01_01] [pwdf1120] [10.16.0.11] [sapdp01] [3201] [DIA UPD BTC SPO ICM ] <BR />
[pwdf1302_O01_01] [pwdf1302] [147.204.100.41] [sapdp01] [3201] [DIA BTC SPO ICM ] <BR />
[pwdf0936_O01_01] [pwdf0936] [10.16.0.19] [sapdp01] [3201] [DIA BTC SPO ICM ] <BR />
[pwdf0810_O01_01] [pwdf0810] [10.16.0.18] [sapdp01] [3201] [DIA BTC SPO ICM ] <BR />
[pwdf1307_O01_01] [pwdf1307] [147.204.100.46] [sapdp01] [3201] [DIA BTC SPO ICM ] <BR />
[pwdf1300_O01_01] [pwdf1300] [147.204.100.39] [sapdp01] [3201] [DIA BTC SPO ICM ] <BR />
[pwdf1301_O01_01] [pwdf1301] [147.204.100.40] [sapdp01] [3201] [DIA BTC SPO ICM ] <BR />
[pwdf1177_O01_01] [pwdf1177] [10.16.1.13] [sapdp01] [3201] [DIA UPD BTC SPO ICM ] <BR />
[pwdf0937_O01_01] [pwdf0937] [10.16.0.20] [sapdp01] [3201] [DIA BTC SPO ICM ] <BR />
[pwdf0809_O01_01] [pwdf0809] [10.16.0.17] [sapdp01] [3201] [DIA BTC SPO ICM ] <BR />
[pwdf0808_O01_01] [pwdf0808] [10.16.0.16] [sapdp01] [3201] [DIA UPD BTC SPO ICM ] <BR />
[pwdf0807_O01_01] [pwdf0807] [10.16.0.15] [sapdp01] [3201] [DIA BTC SPO ICM ] <BR />
[pwdf0392_O01_01] [pwdf0392] [10.16.0.10] [sapdp01] [3201] [DIA BTC SPO ICM ] <BR />
[o01main_O01_01] [pwdf1070] [147.204.100.35] [sapdp01] [3201] [DIA UPD ENQ BTC SPO UP2 ICM ] <BR />
list of selectable logpn groups with favorites ------------------------------------------------ <BR />
[1_PUBLIC] [147.204.100.40] [3201] [620] <BR />
[2_JAPANESE] [147.204.100.40] [3201] [620] <BR />
[DO_NOT_USE] [147.204.100.35] [3201] [620] <BR />
[EWA] [147.204.100.40] [3201] [620] <BR />
[REPL] [10.16.1.13] [3201] [620] <BR />
[SPACE] [10.16.1.13] [3201] [620]</CODE></PRE><BR />
&nbsp;<BR />
<BR />
What we're interested in are the lines in the second half of the output - the list of selectable logon groups. The key data items here are the group names themselves (e.g. 1_PUBLIC), the IP addresses (e.g. 147.204.100.40), and the port numbers (e.g. 3201). The ABAP behind transaction OSS1 receives this <EM>lgtst</EM> output and parses it out into a nice list of groups, which it then presents to the user as shown in the screenshot above.<BR />
<BR />
(And it goes almost without saying that if the call to <EM>lgtst</EM> fails, we get that friendly message "Unable to connect to message server (default connection will be used)" and revert back to the direct SAPGUI call).<BR />
<BR />
So <STRONG>that's</STRONG> where this popup comes from. Ok. Now I understand. It's amazing how you use a transaction for years and never really look into how it actually works.<BR />
<H3 id="toc-hId--302796040">Why not Linux?</H3><BR />
So, just to get back to why I came here in the first place - why doesn't this popup appear in NW4? NW4 is a Linux-based testdrive system. <EM>lgtst</EM> works fine. But look at this:<BR />
<PRE><CODE>*---- Folgende Betriebssysteme werden unterstÃ¼tzt <BR />
IF ( SY-OPSYS = 'HP-UX' ) OR ( SY-OPSYS = 'AIX' ) <BR />
OR ( SY-OPSYS = 'OSF1' ) OR ( SY-OPSYS = 'SINIX' ) <BR />
OR ( SY-OPSYS = 'SunOS' ) OR ( SY-OPSYS = 'Windows NT' ) <BR />
OR ( SY-OPSYS = 'Relia' ) OR ( SY-OPSYS = 'SP_DC' ) <BR />
OR ( SY-OPSYS = 'OS/400' ).</CODE></PRE><BR />
No Linux? Hmm, I soon fixed that, by copying the transaction (OSS1 -&gt; ZSS1) and the ABAP behind OSS1 (RSEFA910), adding a line to this IF statement to bring a bit of love the choice operating system of a "Gnu generation" <span class="lia-unicode-emoji" title=":winking_face:">ð</span><BR />
<BR />
Now I can call ZSS1 and delight in the group logon popup. Hurrah!<BR />
<BR />
</DIV>
---
SAP at JAX 2004
application-developmentblog-board
2004-05-11
https://community.sap.com/t5/application-development-blog-posts/sap-at-jax-2004/ba-p/12821744
2004-05-11-sap-at-jax-2004
<DIV><BR />
<BR />
My friend Matthew Langham <A class="jive-link-external-small" href="http://www.silent-penguin.com/archives/001775.html" target="_blank" rel="nofollow noopener noreferrer">reports</A> on SAP at <A class="jive-link-external-small" href="http://www.jax.de" target="_blank" rel="nofollow noopener noreferrer">JAX 2004</A> in Frankfurt (Matthew is giving a total of three sessions at JAX). It's not that SAP hasn't had a presence at other non-SAP events before now; it's just great to see that SAP is getting involved in the communities that support it.<BR />
<BR />
Ivo Totev gave a keynote today: <A class="jive-link-external-small" href="http://www.jax.de/konferenzen/psecom,id,180,nodeid,.html#K2" target="_blank" rel="nofollow noopener noreferrer">SAP goes J2EE</A>, and there are three other sessions from SAP people:<BR />
<UL><BR />
 	<LI><A class="jive-link-external-small" href="http://www.jax.de/konferenzen/psecom,id,143,nodeid,.html#E33" target="_blank" rel="nofollow noopener noreferrer">Logging and Tracing in Big Applications</A> (Martin Stein)</LI><BR />
 	<LI><A class="jive-link-external-small" href="http://www.jax.de/konferenzen/psecom,id,143,nodeid,.html#E57" target="_blank" rel="nofollow noopener noreferrer">Erstellung von Web-Applikationen auf Basis Service-orientierter Architekturen</A> (Karin Schattka)</LI><BR />
 	<LI><A class="jive-link-external-small" href="http://www.jax.de/konferenzen/psecom,id,143,nodeid,.html#E8" target="_blank" rel="nofollow noopener noreferrer">JMX, Teil 1: Monitoring von J2EE-Applikationen</A> (Gregor Frey)</LI><BR />
</UL><BR />
&nbsp;<BR />
<BR />
I only wish I could have been there.<BR />
<BR />
Nice one, folks!<BR />
<BR />
</DIV>
---
WAS 6.40 testdrive for Linux is here!
additional-blog-members
2004-03-19
https://community.sap.com/t5/additional-blogs-by-members/was-6-40-testdrive-for-linux-is-here/ba-p/12865057
2004-03-19-was-6-40-testdrive-for-linux-is-here
<DIV class="jive-rendered-content"><P>Phew. What a day yesterday at the world's biggest IT fair. I arrived by train and joined the <A class="jive-link-external-small" href="http://www.pipetree.com/~dj/2004/03/CeBIT/CebitSkywalk.jpg" target="_blank" rel="nofollow noopener noreferrer">masses</A> along the CeBIT skywalk to enter Aladdin's cave. I made a beeline for the main SAP area in Hall 4, only to be told by someone on the Web AS stand that they'd not heard anything about 640 being available for Linux. Aaargh!</P><P>Not to fear, though - I found out that SAP had a separate stand in the Linux Park over in Hall 6. I legged it over there, to meet <A class="jive-link-external-small" href="http://www.pipetree.com/~dj/2004/03/CeBIT/Fabrizio.jpg" target="_blank" rel="nofollow noopener noreferrer">Fabrizio</A> from the Linux Lab. And there they were in all their glory: <A class="jive-link-external-small" href="http://www.pipetree.com/~dj/2004/03/CeBIT/640forLinux.jpg" target="_blank" rel="nofollow noopener noreferrer">DVDs containing WAS 640, MaxDB 7.5 ... and SAP NetWeaver Developer Studio!</A></P><P>Fabrizio and his colleagues had been busy preparing the packages for CeBIT - and he gave me a quick demo on the laptop. Nice work, Linux Lab!! What's even more special, though, is that this 640 will work on Suse 8.1, Redhat 9.0, and Fedora Core 1. (There may have been another distribution, but I can't remember). This is great news for those of us who can't afford to shell out hundreds of euros for some sort of "advanced server" edition of a Linux distribution. And Fabrizio has put together RPMs to make the install a breeze. Fantastic!</P><P>It was great to see the Developer Studio running on Linux; and it was just as surprising to see how it had been done ... using <A class="jive-link-external-small" href="http://www.winehq.org" target="_blank" rel="nofollow noopener noreferrer">Wine</A> - the Windows API implementation for *nix. The reason for requiring Wine is that there are a couple of controls in SAP's Eclipse plugins that invoke an OCX in the background. This means that in certain situations (when developing a Web Dynpro, for example), the plugin on a native Eclipse installation just won't work. The Linux Lab chaps are planning to make this port; it's just a matter of tuits.</P><A href="http://www.pipetree.com/~dj/2004/03/CeBIT/BennyAndDj.jpg" target="_blank" rel="nofollow noopener noreferrer"><IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2004/03/small_bennyanddj_38846.jpg" height="90" width="120" /></A><SPAN> </SPAN><P>All in all a very worthwhile visit. I met up with Piers soon after (on the left in <A class="jive-link-external-small" href="http://www.pipetree.com/~dj/2004/03/CeBIT/LinuxLabStand.jpg" target="_blank" rel="nofollow noopener noreferrer">this picture</A>) and we tramped round the halls until our feet were sore and our heads were full. During that time, we found <SPAN class="mention-scrubbed">benny.schaich-lebek/blog</SPAN> (we'd been <A class="jive-link-external-small" href="https://weblogs.sdn.sap.com/cs/user/view/cs_msg/416" target="_blank" rel="noopener noreferrer">looking for him</A>). It was great to meet him, we chatted for a while on aspects of J2EE, JNI, Perl integration, and had a great REST vs SOAP 'debate' ... I'm sure Benny has now seen the light ;-). To the right there's a slightly blurry picture (click to see the full size version) of me and Benny. The nominal caption is "SOAP sucks!" <span class="lia-unicode-emoji" title=":slightly_smiling_face:">ð</span></P></DIV>
---
Successful installation of EP plugin into testdrive WAS 6.10 system
additional-blog-members
2004-03-15
https://community.sap.com/t5/additional-blogs-by-members/successful-installation-of-ep-plugin-into-testdrive-was-6-10-system/ba-p/12864903
2004-03-15-successful-installation-of-ep-plugin-into-testdrive-was-6-10-system
<DIV class="jive-rendered-content"><P>I spent most of yesterday in the kitchen, my favourite place. Everything I need is there - ingredients, oven, <A class="jive-link-external-small" href="http://www.bbc.co.uk/radio4/" target="_blank" rel="nofollow noopener noreferrer">Radio 4</A>, a Cat5 network port, and my laptop.</P><P>At work, we've recently started looking at the Enterprise Portal. Interesting stuff, to say the least. But I wanted to be able to hack on my own stuff, to learn about portal technology, connecting to R/3 as a backend for, say, the Portal Data Viewer technology. (At the moment, that also means that I must unfortunately use MS-Windows, as two of the most platform-agnostic tools out there in Open Source land (<A class="jive-link-external-small" href="http://www.eclipse.org" target="_blank" rel="nofollow noopener noreferrer">Eclipse</A>, on which the Developer Studio is based, and <A class="jive-link-external-small" href="http://jakarta.apache.org/tomcat/index.html" target="_blank" rel="nofollow noopener noreferrer">Tomcat</A>, on which the PDK is based) are only supported by SAP on MS-Windows ... for now. Come on SAP! I've got high hopes for CeBIT this week! How about support for decent OSes? <span class="lia-unicode-emoji" title=":slightly_smiling_face:">ð</span></P><P>So I was wondering if the Enterprise Portal R/3 plugin (WP-PI) was installable on the evaluation WAS 6.10 system, which is of course Basis-only. I couldn't see any reason why not - as the plugin was not likely to deliver any functional area specific stuff which would in turn rely on ABAP Dictionary objects that I didn't have ... So I decided to have a go.</P><P>It worked!</P><P>Here's a summary of what I did.</P><P><STRONG>SPAM/SAINT update</STRONG></P><P>I brought the patch manager SPAM (hi Otto!) and the add-on installation tool SAINT bang up to date, to version 6.10/0015. This update came from the <A class="jive-link-external-small" href="http://service.sap.com/patches" target="_blank" rel="noopener noreferrer">patches</A> area of the market place in the form of a CAR-compressed EPS package KD61015, which was loaded into R/3 using SPAM itself. ("Physician, heal thyself!").</P><P><STRONG>Transport tools update</STRONG></P><P>I also brought the tp and R3trans tools up to date, grabbing the binary files from the <A class="jive-link-external-small" href="http://service.sap.com/patches" target="_blank" rel="noopener noreferrer">patches</A> area, specifically SAP WEB AS -&gt; SAP WEB AS 6.10 -&gt; Binary Patches -&gt; SAP KERNEL 6.10 32-BIT -&gt; LINUX_32 -&gt; Database independent. This meant that my tp version went from 310.56.09 to 310.56.38, and that my R3trans version went from 6.06 to 6.07. The update here was necessary for the SPAM/SAINT update to run through smoothly to completion (it may otherwise abort in the IMPORT_PROPER phase - you've been warned!).</P><P><STRONG>Imported the WP-PI plugin</STRONG></P><P>After updating the tools, it was time to turn my attention to the WP-PI plugin itself. You can grab it from the <A class="jive-link-external-small" href="http://service.sap.com/installations" target="_blank" rel="noopener noreferrer">installations</A> area of the market place - what you want to end up with is a ZIP file containing the contents of CD # 51020102.</P><P>In that CD, there's really only one file needed, KINE40A.CAR, in directory INST/DATA/610/. I unpacked this into the EPS area of /usr/sap/trans on my WAS application server.</P><P>The installation of the plugin is done with SAINT. After loading the package, the put was started. As my WAS system runs on a trusty old P2-233 with 256Mb RAM, the phases came and went slowly <span class="lia-unicode-emoji" title=":slightly_smiling_face:">ð</span></P><P>I hit a couple of errors:</P><DL><DT>Error in db_dynpro_interface</DT><DD><P>This was a nasty rc 0012 error that appeared in SAPIINE40A.WAS. Lots of head scratching and note searching eventually led me to believe that the cause was the version of the transport tools. I downgraded R3trans back to 6.06, and restarted the phase. It then went through to completion successfully.</P></DD><DT>Different nametabs for table ...</DT><DD><P>Further down the line, the installation stopped on an rc 0008 error, where it complained about nametab mismatches. Eww. Further investigations pointed, ironically, to the possibility that R3trans was out of date(!). So I put it back up to 6.07 ... and the problem was solved.</P></DD></DL><SPAN>Apart from those two problems, everything else was pretty much plain sailing. </SPAN><BR /><BR /><SPAN> </SPAN><P><STRONG>OSS Notes</STRONG></P><P>Of course, it almost goes without saying that I used a number of OSS notes.</P><UL><LI><A class="jive-link-external-small" href="https://websmp206.sap-ag.de/~form/sapnet?_FRAME=CONTAINER&amp;_OBJECT=011000358700006578322001" target="_blank" rel="nofollow noopener noreferrer">400280 OCS:Known problems with Support Packages in Basis Rel. 6.10</A></LI><LI><A class="jive-link-external-small" href="https://websmp206.sap-ag.de/~form/sapnet?_FRAME=CONTAINER&amp;_OBJECT=011000358700006673112001" target="_blank" rel="nofollow noopener noreferrer">019466 Downloading SAP kernel patches</A></LI><LI><A class="jive-link-external-small" href="https://websmp206.sap-ag.de/~form/sapnet?_FRAME=CONTAINER&amp;_OBJECT=012003146900000111392003" target="_blank" rel="nofollow noopener noreferrer">655941 WP-PI 6.00: SAP Enterprise Portal Plug-in</A></LI><LI><A class="jive-link-external-small" href="https://websmp206.sap-ag.de/~form/sapnet?_FRAME=CONTAINER&amp;_OBJECT=011000358700008788942001" target="_blank" rel="nofollow noopener noreferrer">415555 Known problems with transaction SAINT in Basis Release 6.10</A></LI></UL><P>Nice.</P><P>Now I have my own WAS system (<A class="jive-link-external-small" href="http://www.sdn.sap.com/irj/servlet/prt/portal/prtroot/com.sapportals.km.docs/documents/a1-8-4/set%20your%20was%206%2010%20system%20to%20work%20-%20transport%20tracking%20with%20rss" target="_blank" rel="noopener noreferrer">this one</A>), with the <A class="jive-link-external-small" href="http://www.pipetree.com/~dj/2004/03/WasSaint.png" target="_blank" rel="nofollow noopener noreferrer">WP-PI plugin installed</A>, that I can connect from my EP PDK, via SSO (I had to generate a certificate for the PDK and install it into the WAS system via STRUST), and, say, make PDV calls to PORTAL_ALV_TEMPLATE-based function modules. Wheee!</P><P>And as a bonus, the biscuits turned out well (Joseph baked those), the <A class="jive-link-external-small" href="http://www.pipetree.com/~dj/2004/03/LiverPate.jpg" target="_blank" rel="nofollow noopener noreferrer">pate</A> was good, as was the <A class="jive-link-external-small" href="http://www.pipetree.com/~dj/2004/03/RyeBread.jpg" target="_blank" rel="nofollow noopener noreferrer">bread</A> and the roast dinner <span class="lia-unicode-emoji" title=":slightly_smiling_face:">ð</span></P></DIV>
---
FOSDEM, and small OSS Notes Browser Hack
open-sourceblog-board
2004-02-20
https://community.sap.com/t5/open-source-blogs/fosdem-and-small-oss-notes-browser-hack/ba-p/12864215
2004-02-20-fosdem-and-small-oss-notes-browser-hack
<DIV><BR />
<BR />
Tomorrow morning I'm off to Brussels for <A class="jive-link-external-small" href="http://www.fosdem.org" target="_blank" rel="nofollow noopener noreferrer">FOSDEM</A> - the Free and Open Source Software Developers' Meeting. Some people might wonder what this has to do with SAP, but don't forget that lots of people (including yours truly) combine open source technologies with SAP regularly. And don't forget that SAP have flown the flag for making ERP application source code available (in R/2 and R/3) for years now. I'm not sure whether that excellent situation is going to continue into the age of J2EE - I note, sadly, that SAP don't supply the Java source in the PARs they make available on <A class="jive-link-external-small" href="http://www.iviewstudio.com" target="_blank" rel="nofollow noopener noreferrer">iViewStudio</A> - but I'm not giving up yet.<BR />
<BR />
<IMG src="https://qmacro.org/content/images/books/programmingjabber.png" alt="Programming Jabber" /><BR />
<BR />
I'll be wearing my <A href="http://shop.oreilly.com/product/9780596002022.do" target="_blank" rel="nofollow noopener noreferrer">Programming Jabber</A> tshirt&nbsp;at FOSDEM tomorrow - so if you're there too and spot it, come by and say hello.<BR />
<BR />
On another note, I've used the power of <A class="jive-link-external-small" href="http://galeon.sourceforge.net" target="_blank" rel="nofollow noopener noreferrer">Galeon</A>'s 'Smart Bookmarks' to build myself a nice little interface to OSS notes. (Galeon is my <A class="jive-link-external-small" href="http://www.gnome.org" target="_blank" rel="nofollow noopener noreferrer">Gnome</A> browser of choice, based on <A class="jive-link-external-small" href="http://www.mozilla.org" target="_blank" rel="nofollow noopener noreferrer">Mozilla</A>'s rendering engine.)<BR />
<BR />
<A href="http://www.pipetree.com/~dj/2004/02/GaleonOssNote.png" target="_blank" rel="nofollow noopener noreferrer"><IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2004/02/small_galeonossnote_38832.png" height="397" width="552" /></A><BR />
<BR />
As you can see from the screenshot, I can get directly to an OSS note by entering the number into a box on my toolbar. Behind this is a URL (split for readability):<BR />
<PRE><CODE><A href="http://service.sap.com/~form/handler" target="test_blank" rel="noopener noreferrer">http://service.sap.com/~form/handler</A>? _APP=01100107900000000342&amp;_EVENT=REDIR&amp;_NNUM=</CODE></PRE><BR />
to which the entered OSS number is appended. This URL is the one used in the Javascript <STRONG>displayNote()</STRONG> function behind the OSS note quick access form on the main <A class="jive-link-external-small" href="http://service.sap.com/notes" target="_blank" rel="noopener noreferrer">notes</A> page at SAP.<BR />
<BR />
&nbsp;<BR />
<BR />
Simple but effective! You might consider building something like this into your browser too.<BR />
<BR />
</DIV>
---
Evaluation WAS 6.40 on Linux - top reason for attending CeBIT 2004
technology-blog-members
2003-12-18
https://community.sap.com/t5/technology-blogs-by-members/evaluation-was-6-40-on-linux-top-reason-for-attending-cebit-2004/ba-p/12862537
2003-12-18-evaluation-was-6-40-on-linux-top-reason-for-attending-cebit-2004
<DIV><BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2003/12/small_cebit_r3linux_38813.jpg" />&nbsp;Ahh, it's always great to be able to attend the world's biggest ICT (information and communication technology) fair - <A class="jive-link-external-small" href="http://www.cebit2004.de" target="_blank" rel="nofollow noopener noreferrer">CeBIT</A>. And of course being an SAP hacker, it goes without saying that a visit to the SAP stand is a must.<BR />
<BR />
I was there way back when, with colleagues and friends - among them my SAP hacking partner-in-crime Piers, on the historical occasion of SAP's CeBIT announcement of R/3 on Linux. We were even so geeky as to take a picture&nbsp;recording the event, under the watchful eye of Tux the Linux penguin mascot.<BR />
<BR />
Anyway, one big reason to visit Hannover in March is because SAP is intending to make available a new version of the Linux-based evaluation WAS system, at release 6.40, including the all-important ABAP stack. Thanks SAP, especially the <A class="jive-link-external-small" href="http://www.sap.com/linux/" target="_blank" rel="noopener noreferrer">Linux Lab</A> folks and also those at SAP who bore the brunt of my recent emails about this - you know who you are <span class="lia-unicode-emoji" title=":winking_face:">ð</span><BR />
<BR />
Yippee!<BR />
<BR />
For references, have a look at the comments thread to <A class="jive-link-external-small" href="https://blogs.sap.com/?p=39348" target="_blank" rel="noopener noreferrer">Visiting SAP NetWeaver Development Nerve Center</A>, specifically <A class="jive-link-external-small" href="https://weblogs.sdn.sap.com/cs/user/view/cs_msg/251" target="_blank" rel="noopener noreferrer">this</A>&nbsp;message. Also, Alexander H from the Linux Lab was kind enough to send <A class="jive-link-external-small" href="http://listserv.sap.com/pipermail/linux.general/2003-December/003778.html" target="_blank" rel="noopener noreferrer">this&nbsp;&nbsp;&nbsp; reply</A> to an email on the <A class="jive-link-external-small" href="http://listserv.sap.com/mailman/listinfo/linux.general" target="_blank" rel="noopener noreferrer">linux.general</A>&nbsp;&nbsp;&nbsp; mailing list.<BR />
<BR />
</DIV>
---
Food for thought: LDBs and ABAP Objects
application-developmentblog-board
2003-11-13
https://community.sap.com/t5/application-development-blog-posts/food-for-thought-ldbs-and-abap-objects/ba-p/12861477
2003-11-13-food-for-thought-ldbs-and-abap-objects
<DIV><BR />
<BR />
During part of this week I've been fighting with an old adversary,<A class="jive-link-external-small" href="http://help.sap.com/saphelp_46c/helpdata/en/30/c6853488601e33e10000009b38f83b/frameset.htm" target="_blank" rel="noopener noreferrer">output determination</A>. In the fracas, I spent some time inside RSNAST00 (the selection program for issuing output) and couldn't help noticing, in passing, that it used FIELD-GROUPS. This relatively old area of ABAP got me thinking about logical databases (LDBs) and their use in writing reports. You know the sort of thing:<BR />
<PRE><CODE>GET KNA1.<BR />
<BR />
&nbsp; SUMMARY.<BR />
&nbsp; WRITE: / ...<BR />
<BR />
GET KNB1.<BR />
<BR />
&nbsp; DETAIL.<BR />
&nbsp; WRITE: / ...<BR />
&nbsp; EXTRACT ...<BR />
</CODE></PRE><BR />
When you execute a report that uses a logical database, you're really just hitching a ride on the back of the database program that actually reads through the logical database you've specified; your GET statements are <EM>reactive</EM>, event handlers almost, that do something when passed a segment (ahem, node) of data by means of the <EM>proactive</EM>PUT statements in the database program (e.g. SAPDBDDF for the DD-F logical database).<BR />
<BR />
Anyway, this brings me to something that's been floating around in the back of my mind since TechEd last month in Basel. I attended a great session on ABAP Objects, given by Stefan Bresch and Horst Keller (thanks, chaps). In a section championing the explicit nature of ABAP Objects, there was a fascinating example of an implementation of a simple LDB using a class, and using ABAP Object events (RAISE EVENT ... EXPORTING) and event subscriptions to achieve the PUT / GET relationship. Here's that example.<BR />
<BR />
There's the 'ldb' class that implements a simple database read program for the the single-node (SPFLI) logical database:<BR />
<PRE><CODE>class ldb definition.<BR />
&nbsp; public section.<BR />
&nbsp;&nbsp;&nbsp; methods read_spfli.<BR />
&nbsp;&nbsp;&nbsp; events spfli_ready exporting value(values) type spfli.<BR />
&nbsp; private section.<BR />
&nbsp;&nbsp;&nbsp; data spfli_wa type spfli.<BR />
endclass.<BR />
<BR />
class ldb implementation.<BR />
&nbsp; method read_spfli.<BR />
&nbsp;&nbsp;&nbsp; select * from spfli<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; into spfli_wa.<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; raise event spfli_ready exporting values = spfli_wa.<BR />
&nbsp;&nbsp;&nbsp; endselect.<BR />
&nbsp; endmethod.<BR />
endclass.<BR />
</CODE></PRE><BR />
Here we have a single public method READ_SPFLI that reads the table SPFLI, raising the event SPFLI_READY for each record it finds. This is like the PUT from our traditional database program.<BR />
<BR />
Then we have a report that uses that logical database. It's also written as a class:<BR />
<PRE><CODE>class rep definition.<BR />
&nbsp; public section.<BR />
&nbsp;&nbsp;&nbsp; methods start.<BR />
&nbsp; private section.<BR />
&nbsp;&nbsp;&nbsp; data spfli_tab type table of spfli.<BR />
&nbsp;&nbsp;&nbsp; methods: get_spfli for event spfli_ready of ldb<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; importing values,<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; display_spfli.<BR />
endclass.<BR />
<BR />
class rep implementation.<BR />
&nbsp; method start.<BR />
&nbsp;&nbsp;&nbsp; data ldb type ref to ldb.<BR />
&nbsp;&nbsp;&nbsp; create object ldb.<BR />
&nbsp;&nbsp;&nbsp; set handler me-&gt;get_spfli for ldb.<BR />
&nbsp;&nbsp;&nbsp; ldb-&gt;read_spfli( ).<BR />
&nbsp;&nbsp;&nbsp; display_spfli( ).<BR />
&nbsp; endmethod.<BR />
&nbsp; method get_spfli.<BR />
&nbsp;&nbsp;&nbsp; append values to spfli_tab.<BR />
&nbsp; endmethod.<BR />
&nbsp; method display_spfli.<BR />
&nbsp;&nbsp;&nbsp; data alv_list type ref to cl_gui_alv_grid.<BR />
&nbsp;&nbsp;&nbsp; create object alv_list<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; exporting i_parent = cl_gui_container=&gt;screen0.<BR />
&nbsp;&nbsp;&nbsp; alv_list-&gt;set_table_for_first_display(<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; exporting i_structure_name = 'SPFLI'<BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; changing&nbsp; it_outtab&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = spfli_tab ).<BR />
&nbsp;&nbsp;&nbsp; call screen 100.<BR />
&nbsp; endmethod.<BR />
endclass.<BR />
</CODE></PRE><BR />
In the START method we effectively are declaring the use of the logical database by instantiating an 'ldb' object, doing the equivalent of specifying a logical database in a report program's attributes section. Then we define the method GET_SPFLI as the handler for the events that will be raised (SPFLI_READY) when we trigger the database's reading with the invocation of the READ_SPFLI method. This of course is the equivalent of a GET SPFLI statement. To initiate the reading of the database we invoke the READ_SPFLI method. Finally there's a DISPLAY_SPFLI event in the 'rep' class using ALV to present the data on the screen.<BR />
<BR />
I don't know about you, but I was taken aback by the beauty of this. As we're approaching the weekend, a time to unwind and reflect, I just thought I'd share it with you.<BR />
<BR />
</DIV>
---
BSP: Mangled URL Decoder
application-developmentblog-board
2003-10-17
https://community.sap.com/t5/application-development-blog-posts/bsp-mangled-url-decoder/ba-p/12860454
2003-10-17-bsp-mangled-url-decoder
<DIV><BR />
<BR />
The BSP mangles URLs. Deep down. In a <A class="jive-link-external-small" href="https://blogs.sap.com/?p=39282" target="_blank" rel="noopener noreferrer">BSP In-Depth: URL Mangling</A>, Brian McKellar did a splendid job of both feeding hunger for information and increasing one's appetite. He mentioned the BSP application 'decode_url' which shows you what the gunk in the rewritten (mangled) URL actually is. Unfortunately, my free trial WAS system is at release 6.10 and doesn't contain 'decode_url'.<BR />
<BR />
"Shame", I thought, first of all. Then: "Great!". A perfect excuse to have a rummage around in the BSP's guts. I was curious as to how this particular thing worked, and spent a pleasant hour or so in my favourite tool, the trusty ABAP debugger (kudos to the debugger team at SAP time and time again!). My aim was to write my own version of 'decode_url'.<BR />
<BR />
I found a clue in CL_BSP_RUNTIME - I knew it had to be somewhere in the BSP classes, and noticed that ON_CHECK_REWRITE called the suspiciously named CL_HTTP_UTILITY=&gt;FIELDS_TO_STRING. Following the trail, I eventually landed on CL_HTTP_UTILITY=&gt;STRING_TO_FIELDS (well, it *had* to exist, hadn't it ;-).<BR />
<BR />
After that it was all downhill.<BR />
<BR />
I created a very simple BSP page '<A class="jive-link-external-small" href="http://www.pipetree.com/~dj/2003/10/decode_url.txt" target="_blank" rel="nofollow noopener noreferrer">decode_url.htm</A>' which does the job. Not as pretty as the BSP team's original 'decode_url' I'm sure, but hey, it's only for me.<BR />
<BR />
This is what it looks like in action:<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2003/10/decode_url_screenshot_38771.png" height="295" width="567" /><BR />
<BR />
Thanks to Brian, I took a small stroll through some of the BSP's guts, and learnt stuff on the way. I've always said the best way to broaden your R/3 and Basis skills is to spend an hour debugging an area that interests you, and this time was no exception. So get out your tools and off you go!<BR />
<BR />
</DIV>
---
SAP TechEd: Collaborative notes
SAP-TechEd-Groupblog-board
2003-09-29
https://community.sap.com/t5/sap-teched-blog-posts/sap-teched-collaborative-notes/ba-p/12859626
2003-09-29-sap-teched-collaborative-notes
<DIV><BR />
<BR />
I'm off to SAP TechEd this week in Basel. Fantastic. It was a bit of a bumpy start - the online-registration process was a bit of a shambles, and I had to ring up to complete the transaction as the webpage (javascript?) was broken. Not a good advert for web-based commerce, is it? Anyway, after 3&nbsp; (!)separate phone calls to the registration company I finally got the details I needed, and I'm off on the train via Koeln tomorrow down to Basel.<BR />
<BR />
As an attendee of other technical events, for example O'Reilly's <A class="jive-link-external-small" href="http://conferences.oreillynet.com/os2003/" target="_blank" rel="nofollow noopener noreferrer">Open&nbsp;&nbsp;&nbsp; Source Convention</A>, I've become used to expecting wireless 'net access. One&nbsp;&nbsp;&nbsp; of the great things about attending conferences and meeting like-minded people&nbsp;&nbsp;&nbsp; is that there's a ton of social interaction and collaboration that goes on in&nbsp;&nbsp;&nbsp; parallel to the actual sessions, presentations and stalls.<BR />
<BR />
With that in mind, and presuming that there will be 'net access, I've set&nbsp;&nbsp;&nbsp; up an IRC channel '#teched' on gnu.pipetree.com (port 6667) - the IRC server&nbsp;&nbsp;&nbsp; is password protected - specify 'teched' as the password when you connect. There&nbsp;&nbsp;&nbsp; you can log on and discuss aspects of SAP technology as presented and discussed&nbsp;&nbsp;&nbsp; during the sessions and presentations. The collaboration is facilitated by that&nbsp;&nbsp;&nbsp; killer-app of IRC, the <A class="jive-link-external-small" href="http://usefulinc.com/chump/" target="_blank" rel="nofollow noopener noreferrer">Daily&nbsp;&nbsp;&nbsp; Chump bot</A>. It sits in an IRC channel and helps you collate links and comments&nbsp;&nbsp;&nbsp; into a dynamic weblog. For more information, see the Chump's documentation (at&nbsp;&nbsp;&nbsp; the link above). An example of the Chump at work can be seen at <A class="jive-link-external-small" href="http://rdfig.xmlhack.com" target="_blank" rel="nofollow noopener noreferrer">the&nbsp;&nbsp;&nbsp; RDF Interest Group's collective blog</A>.<BR />
<BR />
So if you're interested in finding a place to chat about things and log things of interest with comments, you're welcome to the #teched channel and the use of the Chump bot.<BR />
<BR />
Any questions, just <A class="jive-link-email-small" href="mailto:dj.adams@pobox.com" target="_blank" rel="nofollow noopener noreferrer">ask</A>!<BR />
<BR />
</DIV>
---
Dashboard as extension to R/3 and SAPGUI client
additional-blog-members
2003-09-08
https://community.sap.com/t5/additional-blogs-by-members/dashboard-as-extension-to-r-3-and-sapgui-client/ba-p/12858652
2003-09-08-dashboard-as-extension-to-r-3-and-sapgui-client
<DIV><BR />
<BR />
How do your users work with SAP data? Exclusively through SAPGUI or with other desktop apps too? If it's the latter, read on. Dashboard is an intriguing project headed up by <A class="jive-link-external-small" href="http://nat.org/" target="_blank" rel="nofollow noopener noreferrer">Nat Friedman</A>. The&nbsp;&nbsp;&nbsp; concept is of a sidebar style window pane that is automatically populated on an ongoing basis with information related to whatever you're doing, giving you extra context information that you can glance at while at work. Neat.<BR />
<BR />
<IMG src="http://li18-106.members.linode.com/dashboard/rewrite.png" /><BR />
<BR />
<EM>An screenshot of an early version of Dashboard, via&nbsp;<A href="http://li18-106.members.linode.com/dashboard/" target="_blank" rel="nofollow noopener noreferrer">http://li18-106.members.linode.com/dashboard/&nbsp;</A></EM><BR />
<BR />
&nbsp;<BR />
<BR />
I wrote about it after seeing Nat and Miguel (de Icaza) demonstrate it at their keynote at <A class="jive-link-external-small" href="http://www.oreilly.com/oscon2003/" target="_blank" rel="nofollow noopener noreferrer">OSCON</A>&nbsp;&nbsp;&nbsp; this year, in this post: "<A href="http://pipetree.com/qmacro/blog/2003/07/11/dashboard-a-compelling-articulation-for-realtime-contextual-information-2/" target="_blank" rel="nofollow noopener noreferrer">Dashboard, a compelling articulation for realtime contextual information</A>".<BR />
<BR />
I even hacked together a Dashboard backend that populated the dashboard with thumbnail pictures of books (from Amazon) when ISBNs were mentioned in conversations. It was my first C# project too - fun <span class="lia-unicode-emoji" title=":slightly_smiling_face:">ð</span><BR />
<BR />
</DIV><BR />
<STRONG>Update 08 Sep 2018:</STRONG> This post came up on my "on this day" radar today, and it's interesting to reflect how this has progressed. Dashboard itself is no more, but the ideas were solid, and in the SAP ecosphere we now have <A href="https://www.sap.com/uk/products/digital-assistant.html" target="_blank" rel="noopener noreferrer">SAP CoPilot</A>, which takes many of the ideas of Dashboard and combines them with conversational UI and more.<BR />
<BR />
<IMG src="https://www.sap.com/dam/application/shared/photos/products-c-d/sap-copilot-lb-bscntxt.png.adapt.970_546.false.false.false.true.png" alt="Image result for sap copilot" />
---
Improving the OSS note experience
additional-blog-members
2003-07-30
https://community.sap.com/t5/additional-blogs-by-members/improving-the-oss-note-experience/ba-p/12858080
2003-07-30-improving-the-oss-note-experience
<DIV><BR />
<BR />
I remember the time when OSS was a fledgling service, and it ran on an R/2 system in Walldorf. You accessed it via the R/2 SAPGUI just as any other R/2 system. It was great, and the volume of notes being generated then (I remember particularly at the time I was working at Deutsche Telekom in the early 90s)&nbsp; was small enough that I could read each and every note that was written on certain subjects that interested me. I used to come in early in the morning, grab a coffee, and then browse the new OSS notes. The systems were bigger, the note numbers had less digits, and I had more hair.<BR />
<BR />
Those were the days.<BR />
<BR />
Anyway, many years later, we still have OSS notes. Higher note numbers to be sure. But has the general OSS notes experience improved? Not that much. While we now also have a web interface (via <A class="jive-link-external-small" href="http://service.sap.com" target="_blank" rel="noopener noreferrer">service.sap.com</A>) in addition to the R/3 system based access to OSS, that web interface could do with some love.<BR />
<BR />
Wouldn't it be nice to be able to refer to an OSS note, and the note's sub-sections, via first class URLs? So I could say, in some HTML (in a Wiki, or in a weblog entry, or wherever) "refer to this note" and put an HTTP link <EM>direct to the note</EM>, rather than tell the user how to go through the rigmarole of searching for it and navigating the forest of JavaScript, new windows, and frames, to get to what they're looking for? How about something like:<BR />
<PRE><CODE><A class="jive-link-external-small" href="http://service.sap.com/oss/notes/12345" target="_blank" rel="noopener noreferrer">http://service.sap.com/oss/notes/12345</A><BR />
</CODE></PRE><BR />
That would be great for starters! For authorisation, how about simple but effective basic HTTP authentication? If you're going to use the web (HTTP), embrace it, don't program around it.<BR />
<BR />
And while we're at it - how about offering <A class="jive-link-external-small" href="http://purl.org/rss/1.0" target="_blank" rel="nofollow noopener noreferrer">RSS</A> feeds of notes by component? That way, it would be straightforward for people to keep up with OSS info using tried and tested technology, and open tools that are out there right now.<BR />
<BR />
For many SAP hackers like me, OSS is still a very important source of info. Small improvements like this would make our lives a lot more pleasant.<BR />
<BR />
[The concept of a "first class URL" is of course from the <EM>REST</EM>ian (REpresentational State Transfer) view of the web. For more info, see the <A class="jive-link-external-small" href="http://internet.conveyor.com/RESTwiki/moin.cgi/FrontPage" target="_blank" rel="nofollow noopener noreferrer">REST&nbsp; Wiki</A>.]<BR />
<BR />
</DIV>
---
SAP InfoTag on Web Application Server
additional-blog-members
2003-07-29
https://community.sap.com/t5/additional-blogs-by-members/sap-infotag-on-web-application-server/ba-p/12857934
2003-07-29-sap-infotag-on-web-application-server
<DIV class="jive-rendered-content"><P>SAP are running an <A class="jive-link-external-small" href="http://www.sap.com/company/events/calendar/view.asp?ID=3092&amp;LANGUAGE=UNDEFINED" target="_blank" rel="noopener noreferrer">Infotag</A> on the Web Application Server in early September. It's in Ratingen (Duesseldorf), just around the corner - literally, in fact - from where I used to hack on R/2 at Mitsubishi. </P><P>As it's just down the road from me, I might go. Then again, how much of it is going to be yet more marketing of the NetWeaver flavour? You can't tell these days. There's an interesting couple of things on the agenda:<PRE><CODE><BR />
13:30 Projekterfahrungen zum SAP Web AS<BR />
* Ein Bericht des SAP Consulting<BR />
</CODE></PRE>and<PRE><CODE><BR />
14:30 Live-PrÃ¤sentation<BR />
* Web-Entwicklung mit dem SAP Web AS unter Java und ABAP<BR />
</CODE></PRE>so perhaps I'll go just for the afternoon.</P><P>Now, if I can persuade my wife that it's worth the EUR 150 attendance fee they're asking. Hmm, if I just go for the afternoon and miss the lunch, perhaps it would be less <span class="lia-unicode-emoji" title=":winking_face:">ð</span></P></DIV>
---
SAP talk at OSCON, and RSS
welcome-cornerblog-board
2003-07-27
https://community.sap.com/t5/welcome-corner-blog-posts/sap-talk-at-oscon-and-rss/ba-p/12857910
2003-07-27-sap-talk-at-oscon-and-rss
<DIV><BR />
<BR />
We got a pretty good attendance at our <A class="jive-link-external-small" href="http://conferences.oreillynet.com/cs/os2003/view/e_sess/3759" target="_blank" rel="nofollow noopener noreferrer">talk on SAP R/3 at OSCON</A> this year. We had people who were using R/3 in a corporate environment already, and people who were just curious about the famous ERP behemoth and what relation it had to Open Source. Well, plenty, these days, as we showed in the talk.<BR />
<BR />
One of the sections in the talk was on producing <A class="jive-link-external-small" href="http://www.purl.org/rss/1.0/" target="_blank" rel="nofollow noopener noreferrer">RSS</A> from R/3. RSS? Isn't that for weblogs? Sure, but it's a general syndication and metadata format that lends itself to many purposes. In the company where I work, we've been producing RSS from R/3 for years - SD business data (sales orders, product proposals, material info).<BR />
<BR />
When you look at RSS from 10000 feet, it's pretty obvious why it lends itself so well to SAP data; the core document model is the same as the core document model in R/2 and R/3, namely a header and a number of positions, each of which can be embellished with domain-specific and compartmentalised data. And more recently, other <SPAN class="mention-scrubbed">sap.user72/blog/2005/09/25/demo-for-writing-personalized-sdn-weblogs-using-scripts</SPAN> to using RSS for business data. When you think about it, it's a no-brainer. The most interesting news - just this week, is that <A class="jive-link-external-small" href="http://www.amazon.com" target="_blank" rel="nofollow noopener noreferrer">Amazon</A> is now offering RSS feeds for all sorts of business data. The penny is dropping, finally.<BR />
<BR />
Here are a couple of recent articles on RSS and extensibility:<BR />
<UL><BR />
 	<LI><A class="jive-link-external-small" href="http://www.xml.com/pub/a/2003/07/23/extendingrss.html" target="_blank" rel="nofollow noopener noreferrer">Extending RSS</A></LI><BR />
 	<LI><A class="jive-link-external-small" href="http://www.xml.com/pub/a/2003/07/23/rssone.html" target="_blank" rel="nofollow noopener noreferrer">Why Choose RSS 1.0?</A></LI><BR />
</UL><BR />
&nbsp;<BR />
<BR />
</DIV>
---
SAP and Open Source BOF at OSCON
additional-blog-members
2003-07-07
https://community.sap.com/t5/additional-blogs-by-members/sap-and-open-source-bof-at-oscon/ba-p/12857572
2003-07-07-sap-and-open-source-bof-at-oscon
<DIV class="jive-rendered-content"><SPAN>If you're at OSCON or around the Portland area this Wednesday (9th July), come along to the </SPAN><A class="jive-link-external-small" href="http://conferences.oreillynet.com/cs/os2003/view/e_sess/4565" target="_blank" rel="nofollow noopener noreferrer">SAP and Open Source</A><SPAN> BOF to chat with SAP and Open Source hackers about where the crossovers between the two worlds are.</SPAN><P></P><SPAN>Beer may be involved, too!</SPAN></DIV>
---
SAP stuff at OSCON
additional-blog-members
2003-07-02
https://community.sap.com/t5/additional-blogs-by-members/sap-stuff-at-oscon/ba-p/12857514
2003-07-02-sap-stuff-at-oscon
<DIV class="jive-rendered-content"><SPAN>My partner-in-(code)-crime Piers Harding and I are speaking at this year's </SPAN><A class="jive-link-external-small" href="http://conferences.oreilly.com/oscon/" target="_blank" rel="nofollow noopener noreferrer">OSCON</A><SPAN> (Open Source Convention). What can the desperate open source hacker do in and around R/3? Plenty! If you're going to OSCON, come along to our talk:</SPAN><BLOCKQUOTE class="jive-quote"><A class="jive-link-external-small" href="http://conferences.oreillynet.com/cs/os2003/view/e_sess/3759" target="_blank" rel="nofollow noopener noreferrer">Integrating SAP R/3 and Open Source &amp; Open Protocols</A></BLOCKQUOTE><SPAN>last thing on Wednesday the 9th to find out about "extending and embracing" R/3 with open source tools and protocols. The more the merrier!</SPAN></DIV>
---
The SAP/MySQL Partnership
additional-blog-members
2003-05-30
https://community.sap.com/t5/additional-blogs-by-members/the-sap-mysql-partnership/ba-p/12857254
2003-05-30-the-sap-mysql-partnership
<DIV class="jive-rendered-content"><SPAN>I keep hearing reports that the recent </SPAN><A class="jive-link-external-small" href="http://www.sapdb.org/7.4/pdf/pressrelease_eng.pdf" target="_blank" rel="nofollow noopener noreferrer">announcement of cooperation</A><SPAN>between </SPAN><A class="jive-link-external-small" href="http://www.sap-ag.de" target="_blank" rel="nofollow noopener noreferrer">SAP AG</A><SPAN> and</SPAN><A class="jive-link-external-small" href="http://www.mysql.com" target="_blank" rel="nofollow noopener noreferrer">MySQL AB</A><SPAN> has been making the community unhappy. What's the deal? I don't understand what's not to like here. SAP aren't giving up development of DBMS technology, they're just giving up the marketing of it. And what a great injection for MySQL, makers of my favourite open source DB. </SPAN><P></P><SPAN>IMO making and maintaining DBMS products isn't one of SAP's core business drivers. Never was, never should be. SAP's strengths lie in a combination of building good application code, application development infrastructures, and abstraction layers for underlying common technologies like databases, spool mechanisms, TP monitors (ok this was more an R/2 thing) and so on, so that their application and technology products run on lots of platform / software combinations. SAP rescued ADABAS D (and renamed it </SPAN><A class="jive-link-external-small" href="http://www.sapdb.org" target="_blank" rel="nofollow noopener noreferrer">SAP DB</A><SPAN>). I think that was a good move. They're now sharing the technology and their support to an open source DB vendor with a good name. </SPAN><P></P><SPAN>As long as the relationship remains open source, what can be seen as bad about the partnership? </SPAN></DIV>
