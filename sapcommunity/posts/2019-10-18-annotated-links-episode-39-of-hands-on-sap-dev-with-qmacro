2019-10-18-annotated-links-episode-39-of-hands-on-sap-dev-with-qmacro
Annotated links: Episode 39 of Hands-on SAP dev with qmacro
technology-blog-sap
2019-10-18
https://community.sap.com/t5/technology-blogs-by-sap/annotated-links-episode-39-of-hands-on-sap-dev-with-qmacro/ba-p/13410264
<EM>This is a searchable description of the content of a live stream recording, specifically <STRONG>‚ÄúEp.39 ‚Äì Looking at process substitution‚Äù</STRONG> in the ‚Äú<A href="https://bit.ly/handsonsapdev" target="_blank" rel="nofollow noopener noreferrer">Hands-on SAP dev with qmacro</A>‚Äù series. There are links directly to specific highlights in the video recording. For links to annotations of other episodes, please see the ‚Äú<A href="https://bit.ly/handsonsapdev#replays" target="_blank" rel="nofollow noopener noreferrer">Catch the replays</A>‚Äù section of the series blog post.</EM><BR />
<BR />
This episode, titled ‚Äú<A href="http://bit.ly/handsonsapdev#ep39" target="_blank" rel="nofollow noopener noreferrer">Looking at process substitution</A>‚Äú, was streamed live on Sun 06 Oct 2019 and is approximately 10 minutes in length. The stream recording is <A href="https://www.youtube.com/watch?v=JF4lGw4Itpk&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;index=40" target="_blank" rel="nofollow noopener noreferrer">available on YouTube</A>.<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2019/10/Screenshot-2019-10-18-at-10.46.10.png" /><BR />
<BR />
Brief synopsis: This is an impromptu live stream where we look briefly at process substitution in the shell, a powerful construct useful for command line processing.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=JF4lGw4Itpk&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;index=40&amp;t=00m10s" target="_blank" rel="nofollow noopener noreferrer">00:10</A> Explaining the purpose of this impromptu episode on a Sunday morning, to test out a reconfiguration of my <A href="https://obsproject.com/" target="_blank" rel="nofollow noopener noreferrer">OBS</A> streaming software - to encode and stream a smaller base canvas in order to try and reduce the load on the machine (I noticed an increase load since I started to use a 4K monitor).<BR />
<BR />
<A href="https://www.youtube.com/watch?v=JF4lGw4Itpk&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;index=40&amp;t=01m30s" target="_blank" rel="nofollow noopener noreferrer">01:30</A> Taking a quick look at the Window Manager (WM) <A href="https://github.com/ianyh/Amethyst" target="_blank" rel="nofollow noopener noreferrer">Amethyst</A> that I‚Äôm trying out instead of <A href="https://github.com/koekeishiya/chunkwm" target="_blank" rel="nofollow noopener noreferrer">ChunkWM</A>.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=JF4lGw4Itpk&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;index=40&amp;t=02m30s" target="_blank" rel="nofollow noopener noreferrer">02:30</A> Looking at what we did at the end of the previous episode (<A href="https://bit.ly/handsonsapdev#ep38" target="_blank" rel="nofollow noopener noreferrer">Ep38</A>) - comparing two different JSON representations of the Core Schema Notation (CSN) for the Business Partner API. In the previous episode we created intermediate files before firing up <CODE>vimdiff</CODE>. This works but is a little pedestrian and we have to remember to clean up those files afterwards.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=JF4lGw4Itpk&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;index=40&amp;t=04m50s" target="_blank" rel="nofollow noopener noreferrer">04:50</A> I discovered the concept of Process Substitution a few weeks ago, which is a shell feature. Looking at the <A href="https://en.wikipedia.org/wiki/Process_substitution" target="_blank" rel="nofollow noopener noreferrer">Wikipedia entry for Process Substitution</A> we see a nice succinct and helpful definition, telling us that it ‚Äú‚Ä¶ allows the input or output of a command to appear as a file‚Äù. This will enable us to use <CODE>vimdiff</CODE>, which expects to work on files, with the STDOUT of sub processes (rather than having to create intermediate files). Amazing!<BR />
<BR />
<A href="https://www.youtube.com/watch?v=JF4lGw4Itpk&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;index=40&amp;t=06m20s" target="_blank" rel="nofollow noopener noreferrer">06:20</A> Reminding ourselves of what we did previously:<BR />
<PRE class="shell"><CODE>jq &lt; ./API_BUSINESS_PARTNER.json &gt; tut.json<BR />
jq &lt; ./conv/API_BUSINESS_PARTNER.json &gt; new.json # the file we created with edmx2csn<BR />
<BR />
vimdiff tut.json new.json<BR />
rm tut.json new.json</CODE></PRE><BR />
<A href="https://www.youtube.com/watch?v=JF4lGw4Itpk&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;index=40&amp;t=07m35s" target="_blank" rel="nofollow noopener noreferrer">07:35</A> With process substitution in Bash, we have the <CODE>&lt;()</CODE> construct for input; there‚Äôs also <CODE>&lt;()</CODE> for output, which we don‚Äôt use here. This is all we have to do:<BR />
<PRE class="shell"><CODE>vimdiff &lt;(jq &lt; ./API_BUSINESS.PARTNER.json) &lt;(jq &lt; ./conv/API_BUSINESS_PARTNER.json)</CODE></PRE><BR />
No pre-step to create files, and no cleanup of those files afterwards. Beautiful.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=JF4lGw4Itpk&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;index=40&amp;t=08m30s" target="_blank" rel="nofollow noopener noreferrer">08:30</A> Noting that the ‚Äúfile‚Äù names (e.g.&nbsp;<CODE>/dev/fd/63</CODE>) in Vim are non-writeable ‚Äúfile descriptors‚Äù which you‚Äôll learn more about when you look into how process substitution works.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=JF4lGw4Itpk&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;index=40&amp;t=09m30s" target="_blank" rel="nofollow noopener noreferrer">09:30</A> We see that process substitution first appeared in the Korn shell in 1988. The Korn shell was written by David Korn, who I‚Äôve seen modelling a tshirt with a wonderful statement on the front that I think should make it onto a #HandsOnSAPDev tshirt, don‚Äôt you? <span class="lia-unicode-emoji" title=":slightly_smiling_face:">üôÇ</span>
