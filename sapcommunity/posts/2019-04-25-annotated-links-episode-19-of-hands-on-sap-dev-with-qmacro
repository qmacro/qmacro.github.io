2019-04-25-annotated-links-episode-19-of-hands-on-sap-dev-with-qmacro
Annotated links: Episode 19 of Hands-on SAP dev with qmacro
technology-blog-sap
2019-04-25
https://community.sap.com/t5/technology-blogs-by-sap/annotated-links-episode-19-of-hands-on-sap-dev-with-qmacro/ba-p/13390127
<EM>This is a searchable description of the content of a live stream recording, specifically <STRONG>"Episode 19 - Some fun with CAP related tooling"</STRONG> in the "<A href="https://bit.ly/handsonsapdev" target="_blank" rel="nofollow noopener noreferrer">Hands-on SAP dev with qmacro</A>" series. There are links directly to specific highlights in the video recording. For links to annotations of other episodes, please see the "<A href="https://bit.ly/handsonsapdev#replays" target="_blank" rel="nofollow noopener noreferrer">Catch the replays</A>" section of the series blog post.</EM><BR />
<BR />
This episode, titled "<A href="https://bit.ly/handsonsapdev#ep19" target="_blank" rel="nofollow noopener noreferrer">Some fun with CAP related tooling</A>", was streamed live on Wed 17 Apr 2019 and is approximately one hour in length. The stream recording is <A href="https://www.youtube.com/watch?v=m9H5bSLsRTs&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0" target="_blank" rel="nofollow noopener noreferrer">available on YouTube</A>.<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2019/04/Screen-Shot-2019-04-25-at-14.46.11.jpg" /><BR />
<BR />
Below is a brief synopsis, and links to specific highlights - use these links to jump directly to particular places of interest in the recording, based on 'hh:mm:ss' style timestamps.<BR />
<H2 id="brief-synopsis" id="toc-hId-908422638">Brief synopsis</H2><BR />
This being a midweek episode, we allow ourselves a little bit flexibility and look into developer tooling; we look a bit more at syntax highlighting in Vim, some more LSP usage and try to come up with a workflow for setting up to answer <A href="https://answers.sap.com/tags/9f13aee1-834c-4105-8e43-ee442775e5ce" target="_blank" rel="noopener noreferrer">CAP questions on the SAP Community Q&amp;A site</A>.<BR />
<H2 id="links-to-specific-highlights" id="toc-hId-711909133">Links to specific highlights</H2><BR />
<STRONG><A href="https://www.youtube.com/watch?v=m9H5bSLsRTs&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h05m00s" target="_blank" rel="nofollow noopener noreferrer">00:05:00</A>:</STRONG> Highlighting another Twitch live streamer (a "twitcher"?) - Suz Hinton, aka <A href="https://twitch.tv/noopkat" target="_blank" rel="nofollow noopener noreferrer">noopkat</A>, from whom I've learnt an awful lot about live streaming, especially in the early days. JavaScript, IoT and more. Follow Suz for some really interesting streams!<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=m9H5bSLsRTs&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h06m35s" target="_blank" rel="nofollow noopener noreferrer">00:06:35</A>:</STRONG> Just a reminder that we have a #handsonsapdev channel in the SAP Mentors and Friends Slack workspace - I recommend you join this workspace (via this <A href="https://sapmentors-slack-invite.cfapps.eu10.hana.ondemand.com" target="_blank" rel="nofollow noopener noreferrer">form</A> and head on over to the channel to say hi!<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=m9H5bSLsRTs&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h07m40s" target="_blank" rel="nofollow noopener noreferrer">00:07:40</A>:</STRONG> Pointing out the <A href="https://answers.sap.com/tags/9f13aee1-834c-4105-8e43-ee442775e5ce" target="_blank" rel="noopener noreferrer">CAP space on the Community Q&amp;A</A> where we can and should ask questions and (if we can) answer them too, to build up a body of knowledge there.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=m9H5bSLsRTs&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h11m45s" target="_blank" rel="nofollow noopener noreferrer">00:11:45</A>:</STRONG> Looking at what I've been using so far to connect to the CDS language server (via the <CODE><a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a>/cds-lsp</CODE> package that is delivered inside of the VS Code extension for CDS, available from the <A href="https://tools.hana.ondemand.com/#cloud" target="_blank" rel="nofollow noopener noreferrer">cloud section of the SAP Developer Tools</A> site), which is the <A href="https://github.com/autozimu/LanguageClient-neovim" target="_blank" rel="nofollow noopener noreferrer">LanguageClient-neovim</A> plugin for Vim.<BR />
<BR />
This operated in a synchronous fashion, which meant that I got syntax issues highlighted for example only when I saved changes to my CDS sources.<BR />
<BR />
Since then I found the <A href="https://github.com/w0rp/ale" target="_blank" rel="nofollow noopener noreferrer">Asynchronous Lint Engine (ALE)</A> which provides all sorts of linting connectivity plus works very well as a Language Server Protocol (LSP) client!<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=m9H5bSLsRTs&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h14m00s" target="_blank" rel="nofollow noopener noreferrer">00:14:00</A>:</STRONG> Looking at what NPM packages I have installed globally on my workstation:<BR />
<PRE class="shell"><CODE>=&gt; npm list -g --depth=0<BR />
/Users/i347491/.nvm/versions/node/v8.12.0/lib<BR />
├── @sap/cds@3.7.1<BR />
├── csvf@1.0.0 -&gt; /Users/i347491/local/projects/csvf<BR />
├── npm@6.9.0<BR />
├── typescript@3.4.3<BR />
└── typescript-language-server@0.3.7</CODE></PRE><BR />
which shows I've installed TypeScript tools and the TypeScript LSP server. This combination supports JavaScript too, which we look at briefly in a test file in Vim, exploring standard LSP features (beyond syntax error highlighting) such as "go-to-definition" and "find-references".<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=m9H5bSLsRTs&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h16m35s" target="_blank" rel="nofollow noopener noreferrer">00:16:35</A>:</STRONG> So ALE is a plugin I've installed in my Vim setup, and we see that it has a number of linter configurations built in, in the <CODE>ale_linters/</CODE> directory. For example, looking in the <CODE>ale_linters/javascript/tsserver.vim</CODE> file we see how it bootstraps and connects to the TypeScript LSP server for language services.<BR />
<BR />
So can we use ALE with the <CODE><a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a>/cds-lsp</CODE> implementation to get CDS language services in Vim, asynchronously? Turns out the answer is yes!<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=m9H5bSLsRTs&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h20m02s" target="_blank" rel="nofollow noopener noreferrer">00:20:02</A>:</STRONG> Creating a new project for a test Vim plugin, that we call <CODE>vim-cds</CODE> (and getting frustrated in my inconsistent use of 'folder' and 'directory' - see <A href="https://twitter.com/qmacro/status/1121302030864257024" target="_blank" rel="nofollow noopener noreferrer">this Twitter poll</A> for what others thing). In here we create an <CODE>ftdetect</CODE> directory that we can use to put some code to work out what file type we're dealing with when we load files with a <CODE>cds</CODE> extension:<BR />
<PRE class="vimscript"><CODE>au BufNewFile,BufRead *.cds set filetype=cds</CODE></PRE><BR />
<STRONG><A href="https://www.youtube.com/watch?v=m9H5bSLsRTs&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h24m05s" target="_blank" rel="nofollow noopener noreferrer">00:24:05</A>:</STRONG> Adding this <CODE>vim-cds/</CODE> directory to Vim configuration so it's used as a plugin, we can see that we now have Vim recognising CDS files. So far so good.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=m9H5bSLsRTs&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h25m55s" target="_blank" rel="nofollow noopener noreferrer">00:25:55</A>:</STRONG> Adding another directory called <CODE>syntax/</CODE>, also containing a <CODE>cds.vim</CODE> file for syntax highlighting code, which is usually bookended like this:<BR />
<PRE class="vimscript"><CODE>if (exists "b:current_syntax")<BR />
  finish<BR />
endif<BR />
<BR />
[...]<BR />
<BR />
let b:current_syntax = "cds"</CODE></PRE><BR />
I learnt this (and the rest of the stuff about syntax highlighting in Vim) from the <A href="http://learnvimscriptthehardway.stevelosh.com/chapters/45.html" target="_blank" rel="nofollow noopener noreferrer">Basic Syntax Highlighting</A> chapter of the excellent online resource <A href="http://learnvimscriptthehardway.stevelosh.com/" target="_blank" rel="nofollow noopener noreferrer">Learn Vimscript the Hard Way</A> by Steve Losh.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=m9H5bSLsRTs&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h28m00s" target="_blank" rel="nofollow noopener noreferrer">00:28:00</A>:</STRONG> Over the course of this next section we build up the "pairs" of syntax highlighting definitions (which you can learn about in the resource referenced above) - basically one defines how to match certain sections of (CDS) code and identifies those matched sections with labels, then one defines how each labelled section should be highlighted using an convention set of group name abstractions (such as Comment, Function, Keyword etc).<BR />
<BR />
To test new syntax highlighting definitions in a sample CDS file, we used the command <CODE>syn off | syn on</CODE> to restart syntax highlighting in Vim.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=m9H5bSLsRTs&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h33m10s" target="_blank" rel="nofollow noopener noreferrer">00:33:10</A>:</STRONG> I had looked inside the VS Code extension for CDS (remember, the <CODE>vsix</CODE> extension is just a compressed tarball in disguise) to find out how various sections of the CDS language had been defined. Specifically, there's a file <CODE>syntaxes/cds.tmLanguage</CODE> that identifies various keywords, how they appear, and what they are. This file extension and format (<CODE>tmLanguage</CODE>) comes from that (now-classic) editor TextMate and is used in VS Code.<BR />
<BR />
If you look at the definitions, you'll see that the identifications of different keyword groups are named - <CODE>meta.controld.yield.cds</CODE>, <CODE>keyword.strong.control.cds</CODE> and <CODE>support.class.cds</CODE> are examples of these.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=m9H5bSLsRTs&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h37m40s" target="_blank" rel="nofollow noopener noreferrer">00:37:40</A>:</STRONG> These names are available in VS Code for you to look at - at this point we turn on a Developer Mode feature "Inspect TM Scopes" to see what scope each CDS keyword is in. Wonderful!<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=m9H5bSLsRTs&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h41m00s" target="_blank" rel="nofollow noopener noreferrer">00:41:00</A>:</STRONG> Turning our attention now to the mechanism we need to get the CDS language server working via ALE.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=m9H5bSLsRTs&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h42m10s" target="_blank" rel="nofollow noopener noreferrer">00:42:10</A>:</STRONG> Looking inside the <CODE>ale_linters/</CODE> directory in the ALE plugin to create a new directory <CODE>cds/</CODE> to put what we need in there. Note that this is just temporary, we don't really want to be modifying another plugin, but for now, just to get things working, this will do.<BR />
<BR />
Inside this new <CODE>cds/</CODE> directory we need some Vimscript to bootstrap and connect to the CDS language server via the <CODE><a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a>/cds-lsp</CODE> package, but we use a symbolic link to this Vimscript file which we create as <CODE>cds.vim</CODE> inside the <CODE>vim-cds/</CODE> plugin directory.<BR />
<BR />
Here's an overview of what we've got:<BR />
<PRE><CODE>.vim/                                  local/<BR />
 |                                      |<BR />
 +- bundle/                             +- projects/<BR />
 |   |                    symbolic          |<BR />
 |   +- vim-cds/  -----------------------&gt;  +- vim-cds/<BR />
 |   |                      link                |<BR />
 |   +- ale/                                    +- cds-lsp/    (extracted from the vsix file)<BR />
 |       |                              +----&gt;  +- cds.vim<BR />
 |       +- ale_linters/                |       +- ftdetect/<BR />
 |           |                          |       |   |<BR />
 |           +- cds/                    |       |   +- cds.vim<BR />
 |               |             symbolic |       |<BR />
 |               +- cds.vim ------------+       +- syntax/<BR />
 |                               link           |   |<BR />
 +- vimrc                                       |   +- cds.vim<BR />
                                                |<BR />
                                                +- startcdslsp</CODE></PRE><BR />
<STRONG><A href="https://www.youtube.com/watch?v=m9H5bSLsRTs&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h45m40s" target="_blank" rel="nofollow noopener noreferrer">00:45:40</A>:</STRONG> Looking at the contents of <CODE>cds.vim</CODE>, which starts up the language server in a way that ALE can connect to and make use of it:<BR />
<PRE class="vimscript"><CODE>" Description: Simple config for using cds-lsp with ALE<BR />
<BR />
call ale#Set('cds_cds_executable', $HOME . '/local/projects/vim-cds/startcdslsp')<BR />
<BR />
function! ale_linters#cds#cds#GetProjectRoot(buffer) abort<BR />
    let l:project_file = ale#path#FindNearestFile(a:buffer, '.cdsrc.json')<BR />
<BR />
    return fnamemodify(l:project_file, ':h')<BR />
endfunction<BR />
<BR />
function! ale_linters#cds#cds#GetCommand(buffer) abort<BR />
    let l:executable = ale#Var(a:buffer, 'cds_cds_executable')<BR />
<BR />
    return l:executable<BR />
endfunction<BR />
<BR />
call ale#linter#Define('cds', {<BR />
\   'name': 'cds',<BR />
\   'lsp': 'stdio',<BR />
\   'command': function('ale_linters#cds#cds#GetCommand'),<BR />
\   'executable': {b -&gt; ale#Var(b, 'cds_cds_executable')},<BR />
\   'project_root': function('ale_linters#cds#cds#GetProjectRoot'),<BR />
\})</CODE></PRE><BR />
This uses a little starter script <CODE>startcdslsp</CODE> which looks like this:<BR />
<DIV><BR />
<PRE class="sourceCode bash"><CODE class="sourceCode bash"><SPAN class="co">#!/bin/bash</SPAN><BR />
<BR />
<SPAN class="co"># Simple bootstrap script to start the CDS LSP server in STDIO mode.</SPAN><BR />
<SPAN class="co"># It assumes that the cds-lsp package directory is in the same directory</SPAN><BR />
<SPAN class="co"># as this script itself, for example:</SPAN><BR />
<SPAN class="co">#</SPAN><BR />
<SPAN class="co"># &lt;dir&gt;/</SPAN><BR />
<SPAN class="co">#   |</SPAN><BR />
<SPAN class="co">#   +-- cds-lsp/</SPAN><BR />
<SPAN class="co">#   +-- startcdslsp</SPAN><BR />
<BR />
<SPAN class="co"># Get the full name of the directory this script is in</SPAN><BR />
<SPAN class="va">DIR=</SPAN><SPAN class="st">"</SPAN><SPAN class="va">$(</SPAN> <SPAN class="bu">cd</SPAN> <SPAN class="st">"</SPAN><SPAN class="va">$(</SPAN> <SPAN class="fu">dirname</SPAN> <SPAN class="st">"</SPAN><SPAN class="va">${BASH_SOURCE[0]}</SPAN><SPAN class="st">"</SPAN> <SPAN class="va">)</SPAN><SPAN class="st">"</SPAN> <SPAN class="op">&gt;</SPAN> /dev/null <SPAN class="op">2&gt;&amp;1</SPAN> <SPAN class="kw">&amp;&amp;</SPAN> <SPAN class="bu">pwd</SPAN><SPAN class="va">)</SPAN><SPAN class="st">"</SPAN><BR />
<BR />
<SPAN class="co"># Start the server</SPAN><BR />
<SPAN class="ex">node</SPAN> <SPAN class="st">"</SPAN><SPAN class="va">${DIR}</SPAN><SPAN class="st">/cds-lsp/out/src/server.js"</SPAN> --stdio</CODE></PRE><BR />
</DIV><BR />
<STRONG><A href="https://www.youtube.com/watch?v=m9H5bSLsRTs&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h47m40s" target="_blank" rel="nofollow noopener noreferrer">00:47:40</A>:</STRONG> At this point we need to run <CODE>npm install</CODE> inside the <CODE>cds-lsp/</CODE> directory that we took out of the vsix file, to bring in the packages that it needs, including the important one, <CODE><a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a>/cds-compiler</CODE>!<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=m9H5bSLsRTs&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h50m10s" target="_blank" rel="nofollow noopener noreferrer">00:50:10</A>:</STRONG> Time to try things out. Opening up a sample CDS file, we see that we get syntax highlighting, and an error is indicated in the gutter (or the "sign column"). Great!<BR />
<BR />
We see the detail of the error at the bottom of the buffer too.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=m9H5bSLsRTs&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h52m00s" target="_blank" rel="nofollow noopener noreferrer">00:52:00</A>:</STRONG> Adding the final touches for this initial foray with ALE, by adding some configuration to <CODE>vimrc</CODE>:<BR />
<PRE class="vimscript"><CODE>set signcolumn=yes<BR />
let g:ale_completion_enabled = 1<BR />
let g:ale_sign_column_always = 1<BR />
let g:airline#extension#ale#enabled = 1<BR />
let g:ale_open_list = 1<BR />
<BR />
nmap &lt;silent&gt;&lt;leader&gt;j :lnext&lt;cr&gt;<BR />
nmap &lt;silent&gt;&lt;leader&gt;k :lprevious&lt;cr&gt;</CODE></PRE><BR />
This sets some options as follows:<BR />
<UL><BR />
 	<LI>always show the sign column (the gutter)</LI><BR />
 	<LI>enable language server powered command completion</LI><BR />
 	<LI>show indication of errors in my bottom "airline" bar</LI><BR />
 	<LI>automatically open the problems list when there are issues</LI><BR />
</UL><BR />
It also allows me to navigate up and down errors in the problems list (actually it's the "location list" in Vim, hence the "l" prefix) with a couple of key mappings in normal mode.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=m9H5bSLsRTs&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h57m20s" target="_blank" rel="nofollow noopener noreferrer">00:57:20</A>:</STRONG> We see that everything is working - if we make a mistake now, we have a similar experience as we see in VS Code, in that the error is highlighted on the actual line, and it also is detailed in a problem list at the bottom, where we can navigate from problem to problem. Hurray!
