2019-04-23-annotated-links-episode-16-of-hands-on-sap-dev-with-qmacro
Annotated links: Episode 16 of Hands-on SAP dev with qmacro
technology-blog-sap
2019-04-23
https://community.sap.com/t5/technology-blogs-by-sap/annotated-links-episode-16-of-hands-on-sap-dev-with-qmacro/ba-p/13422429
<EM>This is a searchable description of the content of a live stream recording, specifically <STRONG>"Episode 16 - Getting to a basic frontend with Fiori Elements, and sandbox launchpad"</STRONG> in the "<A href="https://bit.ly/handsonsapdev" target="_blank" rel="nofollow noopener noreferrer">Hands-on SAP dev with qmacro</A>" series. There are links directly to specific highlights in the video recording. For links to annotations of other episodes, please see the "<A href="https://bit.ly/handsonsapdev#replays" target="_blank" rel="nofollow noopener noreferrer">Catch the replays</A>" section of the series blog post.</EM><BR />
<BR />
This episode, titled "<A href="https://bit.ly/handsonsapdev#ep16" target="_blank" rel="nofollow noopener noreferrer">Getting to a basic frontend with Fiori Elements, and sandbox launchpad</A>", was streamed live on Wed 03 Apr 2019 and is approximately one hour in length. The stream recording is <A href="https://www.youtube.com/watch?v=es0eAtAQPzk&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0" target="_blank" rel="nofollow noopener noreferrer">available on YouTube</A>.<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2019/04/Screen-Shot-2019-04-23-at-15.03.46.png" /><BR />
<BR />
Below is a brief synopsis, and links to specific highlights - use these links to jump directly to particular places of interest in the recording, based on 'hh:mm:ss' style timestamps.<BR />
<H2 id="brief-synopsis" id="toc-hId-930649609">Brief synopsis</H2><BR />
Following on from the previous episode broadcast from the SAP CodeJam in Frankfurt, we continue moving towards a first UI using a sandbox Fiori launchpad and a basic Fiori elements app driven by a small set of annotations.<BR />
<H2 id="links-to-specific-highlights" id="toc-hId-734136104">Links to specific highlights</H2><BR />
<STRONG><A href="https://www.youtube.com/watch?v=es0eAtAQPzk&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h04m51s" target="_blank" rel="nofollow noopener noreferrer">00:04:51</A>:</STRONG> A few announcements - on SAP CodeJam events (find out more at the <A href="https://www.sap.com/uk/community/events.html" target="_blank" rel="noopener noreferrer">SAP Community and Developer Events</A> page), on <A href="https://wiki.scn.sap.com/wiki/display/events/SAP+Inside+Track" target="_blank" rel="noopener noreferrer">SAP Inside Tracks</A> and stickers! I have some SAP Cloud Application Programming Model stickers as well as some developers.sap.com stickers - if you would like a couple, please join the next live stream and let me know.<BR />
<BR />
I also mentioned the <A href="https://github.com/bnb/awesome-developer-streams" target="_blank" rel="nofollow noopener noreferrer">Awesome Developer Streams</A> page which lists all sorts of different developers who also stream live - definitely worth checking out.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=es0eAtAQPzk&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h09m28s" target="_blank" rel="nofollow noopener noreferrer">00:09:28</A>:</STRONG> In answer to a question from <A href="https://twitter.com/fbeuret" target="_blank" rel="nofollow noopener noreferrer">Fabien Beuret</A> I mention that the CAP CodeJam content was temporarily "resting" ... and it's now available online at <A class="uri" href="https://github.com/SAP/cloud-cap-nodejs-codejam" target="_blank" rel="nofollow noopener noreferrer">https://github.com/SAP/cloud-cap-nodejs-codejam</A>.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=es0eAtAQPzk&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h09m50s" target="_blank" rel="nofollow noopener noreferrer">00:09:50</A>:</STRONG> Highlighting streamer <A href="https://twitch.tv/codebasealpha" target="_blank" rel="nofollow noopener noreferrer">CodebaseAlpha</A> who covers interesting topics including GraphQL and Alexa skills.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=es0eAtAQPzk&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h10m25s" target="_blank" rel="nofollow noopener noreferrer">00:10:25</A>:</STRONG> Starting with today's topic, that we started to look at in the previous episode (<A href="https://bit.ly/handsonsapdev#ep15" target="_blank" rel="nofollow noopener noreferrer">Ep.15</A>) - building a UI for our little Northbreeze backend service, using annotations and Fiori Elements.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=es0eAtAQPzk&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h12m50s" target="_blank" rel="nofollow noopener noreferrer">00:12:50</A>:</STRONG> Looking at the project in VS Code to see what we've got so far, including a glimpse at the data model and the CSV files. We note that we're using the <CODE>managed</CODE> and <CODE>cuid</CODE> aspects to give us some default properties in some of our entity definitions.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=es0eAtAQPzk&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h15m50s" target="_blank" rel="nofollow noopener noreferrer">00:15:50</A>:</STRONG> Checking the latest version of the CDS Language Support for VS Code extension (available in the <A href="https://tools.hana.ondemand.com/#cloud" target="_blank" rel="nofollow noopener noreferrer">Cloud section of the SAP Development Tools site</A> ... it is still at 1.1.1 but I hear that it will be updated before the end of this month.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=es0eAtAQPzk&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h17m10s" target="_blank" rel="nofollow noopener noreferrer">00:17:10</A>:</STRONG> Checking the latest version of <CODE><a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a>/cds</CODE> with <CODE>npm info <a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a>/cds</CODE> shows that it's still at 3.7.1.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=es0eAtAQPzk&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h17m30s" target="_blank" rel="nofollow noopener noreferrer">00:17:30</A>:</STRONG> Looking at the Northbreeze service definition (in <CODE>service.cds</CODE>) and noting that according to best practice, we should actually omit the extension of referenced files, so they're not language specific. Here that means changing from:<BR />
<PRE class="cds"><CODE>using northbreeze from '../db/model.cds';</CODE></PRE><BR />
to<BR />
<PRE class="cds"><CODE>using northbreeze from '../db/model';</CODE></PRE><BR />
which subtly allows for those definitions to be available not only in "source" CDS format but perhaps also in the canonical Core Schema Notation (CSN) (pronounced "season") format that we have seen in early episodes when we explored the cds command line tool and the REPL.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=es0eAtAQPzk&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h18m35s" target="_blank" rel="nofollow noopener noreferrer">00:18:35</A>:</STRONG> Deploying and running the service, and checking that we can see the suppliers in the appropriate entityset (via URL <A class="uri" href="http://localhost:4004/breezy/Suppliers" target="_blank" rel="nofollow noopener noreferrer">http://localhost:4004/breezy/Suppliers</A>).<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=es0eAtAQPzk&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h19m40s" target="_blank" rel="nofollow noopener noreferrer">00:19:40</A>:</STRONG> Noticing the message:<BR />
<PRE><CODE>[cds] - serving static resources from ./app</CODE></PRE><BR />
which implies that it will make available resources that we put there.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=es0eAtAQPzk&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h20m00s" target="_blank" rel="nofollow noopener noreferrer">00:20:00</A>:</STRONG> So we create the <CODE>app/</CODE> directory with an <CODE>index.html</CODE> file in there with a simple "hello". When reloading the root resource at <A class="uri" href="http://localhost:4004" target="_blank" rel="nofollow noopener noreferrer">http://localhost:4004</A> we now get that "hello" resource, rather than the default "Welcome to cds.services" page. Nice! The name <CODE>app/</CODE> is also a convention, just like <CODE>db/</CODE> and <CODE>srv/</CODE>.<BR />
<BR />
Of course, we can still access the individual services via their normal URLs too. This also gives us a clue as to why the services themselves are not at the root (for example our main service in this project is at <CODE>/breezy/</CODE>).<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=es0eAtAQPzk&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h22m10s" target="_blank" rel="nofollow noopener noreferrer">00:22:10</A>:</STRONG> Bringing in some sample content for our new <CODE>index.html</CODE>, which looks like this:<BR />
<DIV><BR />
<PRE class="sourceCode html"><CODE class="sourceCode html"><SPAN class="kw">&lt;html&gt;</SPAN><BR />
<SPAN class="kw">&lt;head&gt;</SPAN><BR />
<BR />
    <SPAN class="kw">&lt;title&gt;</SPAN>Northbreeze<SPAN class="kw">&lt;/title&gt;</SPAN><BR />
<BR />
    <SPAN class="kw">&lt;script</SPAN><BR />
<SPAN class="ot">        src=</SPAN><SPAN class="st">"https://sapui5.hana.ondemand.com/test-resources/sap/ushell/bootstrap/sandbox.js"</SPAN><SPAN class="kw">&gt;&lt;/script&gt;</SPAN><BR />
<BR />
    <SPAN class="kw">&lt;script</SPAN><SPAN class="ot"> id=</SPAN><SPAN class="st">"sap-ui-bootstrap"</SPAN><BR />
<SPAN class="ot">        src=</SPAN><SPAN class="st">"https://sapui5.hana.ondemand.com/resources/sap-ui-core.js"</SPAN><BR />
<SPAN class="ot">        data-sap-ui-compatVersion=</SPAN><SPAN class="st">"edge"</SPAN><BR />
<SPAN class="ot">        data-sap-ui-theme=</SPAN><SPAN class="st">"sap_belize"</SPAN><SPAN class="kw">&gt;&lt;/script&gt;</SPAN><BR />
<BR />
<SPAN class="kw">&lt;/head&gt;</SPAN><BR />
<SPAN class="kw">&lt;body</SPAN><SPAN class="ot"> class=</SPAN><SPAN class="st">"sapUiBody"</SPAN><SPAN class="ot"> id=</SPAN><SPAN class="st">"content"</SPAN><SPAN class="kw">&gt;&lt;/body&gt;</SPAN><BR />
<SPAN class="kw">&lt;/html&gt;</SPAN></CODE></PRE><BR />
</DIV><BR />
This, if you're not familiar, is a typical "bootstrap" page for UI5, and it also includes a script tag to include the SAP Fiori launchpad sandbox, a fully functional Fiori launchpad that you can run locally, which is especially useful for development and testing.<BR />
<BR />
When we load this resource we see a blank page, but note that it's been styled (via the <CODE>sapUiBody</CODE> class on the <CODE>body</CODE> element), so we can see that <EM>something</EM> is already happening!<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=es0eAtAQPzk&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h26m10s" target="_blank" rel="nofollow noopener noreferrer">00:26:10</A>:</STRONG> In response to a good question from Fabien, we talk briefly about different app serving constellations - the CAP can serve an entire full stack setup, or just the backend services. Flexibility is key.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=es0eAtAQPzk&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h27m30s" target="_blank" rel="nofollow noopener noreferrer">00:27:30</A>:</STRONG> We start to flesh out the configuration for the sandbox launchpad, by adding another script tag with some JavaScript assignments to a global property at the window level, which looks like this:<BR />
<DIV><BR />
<PRE class="sourceCode javascript"><CODE class="sourceCode javascript">window[<SPAN class="st">'sap-ushell-config'</SPAN>] <SPAN class="op">=</SPAN> <SPAN class="op">{</SPAN><BR />
    <SPAN class="dt">applications</SPAN><SPAN class="op">:</SPAN> <SPAN class="op">{</SPAN><BR />
        <SPAN class="st">'browse-suppliers'</SPAN><SPAN class="op">:</SPAN> <SPAN class="op">{</SPAN><BR />
            <SPAN class="dt">title</SPAN><SPAN class="op">:</SPAN> <SPAN class="st">'Browse Suppliers'</SPAN><SPAN class="op">,</SPAN><BR />
            <SPAN class="dt">additionalInformation</SPAN><SPAN class="op">:</SPAN> <SPAN class="st">'SAPUI5.Component=suppliers'</SPAN><SPAN class="op">,</SPAN><BR />
            <SPAN class="dt">applicationType </SPAN><SPAN class="op">:</SPAN> <SPAN class="st">'URL'</SPAN><SPAN class="op">,</SPAN><BR />
            <SPAN class="dt">url</SPAN><SPAN class="op">:</SPAN> <SPAN class="st">'/browse/webapp'</SPAN><SPAN class="op">,</SPAN><BR />
        <SPAN class="op">}</SPAN><BR />
    <SPAN class="op">}</SPAN><BR />
<SPAN class="op">};</SPAN></CODE></PRE><BR />
</DIV><BR />
This configuration defines a "Browse Suppliers" tile that will appear on the sandbox launchpad, and I'm following the convention here of putting each individial app in its own directory, which is why the <CODE>url</CODE> parameter points to a directory called <CODE>/browse/</CODE>.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=es0eAtAQPzk&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h31m40s" target="_blank" rel="nofollow noopener noreferrer">00:31:40</A>:</STRONG> Now we another bit of JavaScript in a further script tag to run a function when UI5 bootstrapping is complete:<BR />
<DIV><BR />
<PRE class="sourceCode javascript"><CODE class="sourceCode javascript"><SPAN class="va">sap</SPAN>.<SPAN class="va">ui</SPAN>.<SPAN class="at">getCore</SPAN>().<SPAN class="at">attachInit</SPAN>(<SPAN class="kw">function</SPAN>() <SPAN class="op">{</SPAN><BR />
    <SPAN class="va">sap</SPAN>.<SPAN class="va">ushell</SPAN>.<SPAN class="va">Container</SPAN>.<SPAN class="at">createRenderer</SPAN>(<SPAN class="st">'fiori2'</SPAN>).<SPAN class="at">placeAt</SPAN>(<SPAN class="st">'content'</SPAN>)<BR />
<SPAN class="op">}</SPAN>)</CODE></PRE><BR />
</DIV><BR />
This just creates the sandbox launchpad and places it in the main body of the browser tab (as <CODE>content</CODE> refers to the HTML body element).<BR />
<BR />
The result is that we now have our sandbox Fiori launchpad with a nice new tile with "Browse Suppliers" as the title! Of course, at this point there isn't any app to load, so we'll add the app itself next.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=es0eAtAQPzk&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h35m00s" target="_blank" rel="nofollow noopener noreferrer">00:35:00</A>:</STRONG> Starting to create the <CODE>/browse/webapp/</CODE> directory structure, with some initial content, so we end up with:<BR />
<PRE><CODE>app/<BR />
 |<BR />
 +-- browse/<BR />
      |<BR />
      +-- webapp/<BR />
           |<BR />
           +-- Component.js<BR />
           +-- manifest.json</CODE></PRE><BR />
<STRONG><A href="https://www.youtube.com/watch?v=es0eAtAQPzk&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h39m20s" target="_blank" rel="nofollow noopener noreferrer">00:39:20</A>:</STRONG> Adding the content for our UI5 Component file, we get this:<BR />
<DIV><BR />
<PRE class="sourceCode javascript"><CODE class="sourceCode javascript"><SPAN class="va">sap</SPAN>.<SPAN class="va">ui</SPAN>.<SPAN class="at">define</SPAN>(<BR />
    [<SPAN class="st">'sap/fe/AppComponent'</SPAN>]<SPAN class="op">,</SPAN><BR />
    ac <SPAN class="op">=&gt;</SPAN> <SPAN class="va">ac</SPAN>.<SPAN class="at">extend</SPAN>(<SPAN class="st">'suppliers.Component'</SPAN><SPAN class="op">,</SPAN> <SPAN class="op">{</SPAN><BR />
        <SPAN class="dt">metadata</SPAN><SPAN class="op">:</SPAN> <SPAN class="op">{</SPAN> <SPAN class="dt">manifest</SPAN><SPAN class="op">:</SPAN> <SPAN class="st">'json'</SPAN> <SPAN class="op">}</SPAN><BR />
    <SPAN class="op">}</SPAN>)<BR />
)</CODE></PRE><BR />
</DIV><BR />
This refers to a manifest file which contains pretty much everything the app needs to know about itself, regarding data models, routing, and in fact what is displayed, in terms of views.<BR />
<BR />
So let's look at that now:<BR />
<DIV><BR />
<PRE class="sourceCode json"><CODE class="sourceCode json"><SPAN class="fu">{</SPAN><BR />
    <SPAN class="dt">"sap.app"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="fu">{</SPAN><BR />
        <SPAN class="dt">"id"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="st">"suppliers"</SPAN><SPAN class="fu">,</SPAN><BR />
        <SPAN class="dt">"title"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="st">"Browse Suppliers"</SPAN><SPAN class="fu">,</SPAN><BR />
        <SPAN class="dt">"dataSources"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="fu">{</SPAN><BR />
            <SPAN class="dt">"Breezy"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="fu">{</SPAN><BR />
                <SPAN class="dt">"uri"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="st">"/breezy/"</SPAN><SPAN class="fu">,</SPAN><BR />
                <SPAN class="dt">"settings"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="fu">{</SPAN><BR />
                    <SPAN class="dt">"odataVersion"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="st">"4.0"</SPAN><BR />
                <SPAN class="fu">}</SPAN><BR />
            <SPAN class="fu">}</SPAN><BR />
        <SPAN class="fu">}</SPAN><BR />
    <SPAN class="fu">},</SPAN><BR />
    <SPAN class="dt">"sap.ui5"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="fu">{</SPAN><BR />
        <SPAN class="dt">"dependencies"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="fu">{</SPAN> <SPAN class="dt">"libs"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="fu">{</SPAN> <SPAN class="dt">"sap.fe"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="fu">{}</SPAN> <SPAN class="fu">}</SPAN> <SPAN class="fu">},</SPAN><BR />
        <SPAN class="dt">"models"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="fu">{</SPAN><BR />
            <SPAN class="dt">""</SPAN><SPAN class="fu">:</SPAN> <SPAN class="fu">{</SPAN><BR />
                <SPAN class="dt">"dataSource"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="st">"Breezy"</SPAN><SPAN class="fu">,</SPAN><BR />
                <SPAN class="dt">"settings"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="fu">{</SPAN> <SPAN class="dt">"synchronizationMode"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="st">"None"</SPAN> <SPAN class="fu">}</SPAN><BR />
            <SPAN class="fu">}</SPAN><BR />
        <SPAN class="fu">},</SPAN><BR />
        <SPAN class="dt">"routing"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="fu">{</SPAN><BR />
            <SPAN class="dt">"routes"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="ot">[</SPAN><BR />
                <SPAN class="fu">{</SPAN><BR />
                    <SPAN class="dt">"pattern"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="st">""</SPAN><SPAN class="fu">,</SPAN><BR />
                    <SPAN class="dt">"name"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="st">"SuppliersList"</SPAN><SPAN class="fu">,</SPAN><BR />
                    <SPAN class="dt">"target"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="st">"SuppliersList"</SPAN><BR />
                <SPAN class="fu">}</SPAN><BR />
            <SPAN class="ot">]</SPAN><SPAN class="fu">,</SPAN><BR />
            <SPAN class="dt">"targets"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="fu">{</SPAN><BR />
                <SPAN class="dt">"SuppliersList"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="fu">{</SPAN><BR />
                    <SPAN class="dt">"entitySet"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="st">"Suppliers"</SPAN><SPAN class="fu">,</SPAN><BR />
                    <SPAN class="dt">"viewName"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="st">"sap.fe.templates.ListReport"</SPAN><BR />
                <SPAN class="fu">}</SPAN><BR />
            <SPAN class="fu">}</SPAN><BR />
        <SPAN class="fu">}</SPAN><BR />
    <SPAN class="fu">}</SPAN><BR />
<SPAN class="fu">}</SPAN></CODE></PRE><BR />
</DIV><BR />
<STRONG><A href="https://www.youtube.com/watch?v=es0eAtAQPzk&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h45m45s" target="_blank" rel="nofollow noopener noreferrer">00:45:45</A>:</STRONG> Note that the data source that we've been creating (in the form of the "Breezy" service) is defined in the "sap.app" section of this manifest file.<BR />
<BR />
The rest of the manifest file consists of an "sap.ui5" section, which defines dependencies, models and routing (which is also where the views are defined, in the form of views from the <CODE>sap.fe.templates</CODE> library).<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=es0eAtAQPzk&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h48m40s" target="_blank" rel="nofollow noopener noreferrer">00:48:40</A>:</STRONG> We have a quick look at the standard tutorial on Routing in the UI5 SDK, which is the <A href="https://ui5.sap.com/#/topic/1b6dcd39a6a74f528b27ddb22f15af0d" target="_blank" rel="noopener noreferrer">Navigation and Routing</A> tutorial, which you can have a look at if you want to understand more of what's being defined in the "routing" section of the manifest file here.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=es0eAtAQPzk&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h51m35s" target="_blank" rel="nofollow noopener noreferrer">00:51:35</A>:</STRONG> Now when we select the tile in the sandbox launchpad, we get a sort of app, already half-working. There's no data displayed, but we can see that it is indeed showing a "list report" style UI. Wonderful!<BR />
<BR />
We note that the four filter fields in the UI are there because there are four fields in the entity definition (Suppliers) to which we're referring in the manifest file. As a reminder, here's what the Suppliers entity definition looks like in <CODE>model.cds</CODE>:<BR />
<PRE class="cds"><CODE>entity Suppliers {<BR />
    key ID       : Integer;<BR />
    name         : String(40);<BR />
    country      : String(15);<BR />
    products     : Association to many Products on products.supplier = $self;<BR />
}</CODE></PRE><BR />
<STRONG><A href="https://www.youtube.com/watch?v=es0eAtAQPzk&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h52m45s" target="_blank" rel="nofollow noopener noreferrer">00:52:45</A>:</STRONG> Tantalisingly close! What we need to do now is add some annotations that will glue everything together (the generic Fiori Elements based view, and the data in the OData service).<BR />
<BR />
So we add a new file <CODE>index.cds</CODE> at the same level as <CODE>index.html</CODE>, with the following content:<BR />
<PRE class="cds"><CODE>using from '../srv/service';<BR />
<BR />
annotate northbreeze.Suppliers with @(<BR />
    UI: {<BR />
        SelectionFields: [],<BR />
        LineItem: [<BR />
            { Value: ID, Label: 'ID' },<BR />
            { Value: name, Label: 'Name' },<BR />
            { Value: country, Label: 'Country' }<BR />
        ],<BR />
        HeaderInfo: {<BR />
            TypeNamePlural: 'Suppliers'<BR />
        }<BR />
    }<BR />
);</CODE></PRE><BR />
<STRONG><A href="https://www.youtube.com/watch?v=es0eAtAQPzk&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h57m25s" target="_blank" rel="nofollow noopener noreferrer">00:57.25</A>:</STRONG> After adding this, we redeploy (as these are CDS changes) and restart, and check what we get in the UI (we're already on the appropriate <A href="http://localhost:4004/#browse-suppliers" target="_blank" rel="nofollow noopener noreferrer">hashpath based URL</A> in the launchpad).<BR />
<BR />
After sorting out some browser cacheing issue, we finally see that through the power of annotations and Fiori Elements, we get a wonderfully pretty fully-functional app for very little effort at all. Result! Just in time to end the stream. See you next time!
