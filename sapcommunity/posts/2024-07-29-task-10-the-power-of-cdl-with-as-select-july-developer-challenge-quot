2024-07-29-task-10-the-power-of-cdl-with-as-select-july-developer-challenge-quot
Task 10 - The power of CDL with as-select (July Developer Challenge - "Reverse APIs")
application-developmentforum-board
2024-07-29
https://community.sap.com/t5/application-development-discussions/task-10-the-power-of-cdl-with-as-select-july-developer-challenge-quot/td-p/13774996
<P>This is a task in the<SPAN>&nbsp;</SPAN><A href="https://community.sap.com/t5/application-development-blog-posts/2024-07-quot-reverse-apis-quot-sap-developer-challenge/ba-p/13749653" target="_blank">July Developer Challenge - "Reverse APIs"</A>.</P><P>In this task you'll go on a short but hopefully enlightening journey into views and projections, to see how you can elevate SQL concepts to the service definition level in your CDS model, with the power of CDL. You will add a "single expression" entity to your Northbreeze service, which should provide the response required without any implementation at the code (Node.js or Java) level.</P><H2 id="toc-hId-1021219268">Background</H2><P>In Capire, the<SPAN>&nbsp;</SPAN><A href="https://cap.cloud.sap/docs/cds/cdl#views-and-projections" target="_blank" rel="nofollow noopener noreferrer">Views and Projections</A><SPAN>&nbsp;</SPAN>part of the section covering Core Definition Language (CDL) introduces us to ways of deriving new entities from existing ones by projections, like views in SQL. Two variants are described:</P><UL><LI>as select from</LI><LI>as projection on</LI></UL><P>If you've started with sample CAP services, you're very likely to have come across<SPAN>&nbsp;</SPAN>as projection on<SPAN>&nbsp;</SPAN>as it's near ubiquitous in those samples.</P><P>But what about<SPAN>&nbsp;</SPAN>as select from, what's that all about? Well it's the "batteries included" approach to deriving a view, with all the power of SQL in its CAP-enhanced form, i.e.<SPAN>&nbsp;</SPAN><A href="https://cap.cloud.sap/docs/cds/cql" target="_blank" rel="nofollow noopener noreferrer">CQL</A>.</P><P>If you want to peruse some examples, use the power of GitHub's excellent search facility:</P><P><A href="https://github.com/search?q=org%3Asap-samples+language%3Acds+%22as+select+from%22&amp;type=code" target="_blank" rel="nofollow noopener noreferrer">org:sap-samples language:cds "as select from"</A></P><P>Again, the cds REPL may come in handy here for experimenting with CQL. How about this, with the basic<SPAN>&nbsp;</SPAN><A href="https://github.com/qmacro/northbreeze" target="_blank" rel="nofollow noopener noreferrer">Northbreeze</A><SPAN>&nbsp;</SPAN>service (this experiment will make sense in the requirements section next):</P><DIV class=""><PRE><SPAN class="">await</SPAN> <SPAN class="">cds</SPAN><SPAN class="">.</SPAN><SPAN class="">test</SPAN><SPAN class="">(</SPAN><SPAN class="">)</SPAN>
<SPAN class="">const</SPAN> <SPAN class="">{</SPAN> Products <SPAN class="">}</SPAN> <SPAN class="">=</SPAN> <SPAN class="">cds</SPAN><SPAN class="">.</SPAN><SPAN class="">entities</SPAN>
<SPAN class="">await</SPAN> <SPAN class="">SELECT</SPAN> <SPAN class="">`count(ProductID)`</SPAN> <SPAN class="">.</SPAN><SPAN class="">from</SPAN> <SPAN class="">(</SPAN><SPAN class="">Products</SPAN><SPAN class="">)</SPAN></PRE><DIV class=""><SPAN>Paste that into a cds REPL and see what you get! For example, put these three lines in a file, e.g.</SPAN><SPAN>&nbsp;</SPAN><SPAN>repl-session.js</SPAN><SPAN>&nbsp;</SPAN><SPAN>and then paste it into a new REPL like this:</SPAN></DIV></DIV><DIV class=""><PRE>cds repl <SPAN class="">&lt;</SPAN> repl-session.js</PRE><DIV class=""><SPAN>and you should see something like this:</SPAN></DIV></DIV><DIV class=""><PRE>; cds repl &lt; repl-session.js
Welcome to cds repl v 8.0.3
&gt; const server = await cds.test()
[cds] - loaded model from 2 file(s):

  srv/main.cds
  db/schema.cds

[cds] - connect to db &gt; sqlite { url: ':memory:' }
  &gt; init from db/data/northwind-Suppliers.csv
  &gt; init from db/data/northwind-Products.csv
  &gt; init from db/data/northwind-Categories.csv
/&gt; successfully deployed to in-memory database.

[cds] - using auth strategy {
  kind: 'mocked',
  impl: '../../../../../../../usr/lib/node_modules/@sap/cds-dk/node_modules/@sap/cds/lib/auth/basic-auth'
}

[cds] - using new OData adapter
[cds] - serving northbreeze { path: '/northbreeze' }

[cds] - server listening on { url: 'http://localhost:46113' }
[cds] - launched at 7/26/2024, 2:18:05 PM, version: 8.0.3, in: 663.929ms
&gt; const { Products } = cds.entities
&gt; await SELECT `count(ProductID)` .from (Products)
[ { count: 77 } ]</PRE></DIV><H2 id="toc-hId-824705763">The requirements</H2><P>Here are the specific requirements for this task.</P><P>Define a new entity at the service layer, in your<SPAN>&nbsp;</SPAN>northbreeze<SPAN>&nbsp;</SPAN>service. This entity should be called<SPAN>&nbsp;</SPAN>TotalProducts<SPAN>&nbsp;</SPAN>and defined using the<SPAN>&nbsp;</SPAN>as select from<SPAN>&nbsp;</SPAN>variant as mentioned earlier. It should return a count of the number of products, like this:</P><DIV class=""><PRE>{
  <SPAN class="">"@odata.context"</SPAN>: <SPAN class=""><SPAN class="">"</SPAN>$metadata#TotalProducts<SPAN class="">"</SPAN></SPAN>,
  <SPAN class="">"value"</SPAN>: [
    {
      <SPAN class="">"count"</SPAN>: <SPAN class="">77</SPAN>
    }
  ]
}</PRE></DIV><P>Note the shape of the payload response, in this JSON representation - the<SPAN>&nbsp;</SPAN>value<SPAN>&nbsp;</SPAN>property is an array with a single element, which is an object, which itself has a single property which is<SPAN>&nbsp;</SPAN>count. The type of that property's value is of course an integer.</P><P>If you find yourself implementing anything in your<SPAN>&nbsp;</SPAN>services.js<SPAN>&nbsp;</SPAN>file, think again <span class="lia-unicode-emoji" title=":slightly_smiling_face:">üôÇ</span></P><P>That's it!</P><H2 id="toc-hId-628192258">Submitting to the TESTER</H2><P>Now you're ready to submit your CANDIDATE service, with this new API endpoint, to the TESTER!</P><H3 id="toc-hId-560761472">The payload</H3><P>The task identifier you need to supply in the payload of your submission is:<SPAN>&nbsp;</SPAN><STRONG>northbreeze-TotalProducts</STRONG>.</P><P>You'll have already done this sort of thing<SPAN>&nbsp;</SPAN><A href="https://community.sap.com/t5/application-development-discussions/july-developer-challenge-quot-reverse-apis-quot-task-1-your-first-service/m-p/13752205" target="_blank">previously</A><SPAN>&nbsp;</SPAN>so just head back there for the more detailed instructions if you need them, or to the the section titled "<A href="https://community.sap.com/t5/application-development-blog-posts/2024-07-quot-reverse-apis-quot-sap-developer-challenge/ba-p/13749653#toc-hId--553513390" target="_blank">The Tester service, and making a test request</A>" in the<SPAN>&nbsp;</SPAN><A href="https://community.sap.com/t5/application-development-blog-posts/2024-07-quot-reverse-apis-quot-sap-developer-challenge/ba-p/13749653" target="_blank">main challenge blog post</A>.</P><P>You'll need to submit a JSON payload like this:</P><DIV class=""><PRE>{
  <SPAN class="">"communityid"</SPAN>: <SPAN class=""><SPAN class="">"</SPAN>&lt;your-community-id&gt;<SPAN class="">"</SPAN></SPAN>,
  <SPAN class="">"serviceurl"</SPAN>: <SPAN class=""><SPAN class="">"</SPAN>&lt;the-URL-of-your-service&gt;<SPAN class="">"</SPAN></SPAN>,
  <SPAN class="">"task"</SPAN>: <SPAN class=""><SPAN class="">"</SPAN>northbreeze-TotalProducts<SPAN class="">"</SPAN></SPAN>
}</PRE></DIV><P>And, just as with the previous (and all further tasks):</P><UL><LI><P>the value for the<SPAN>&nbsp;</SPAN>communityid<SPAN>&nbsp;</SPAN>property should be your ID on this SAP Community platform (e.g. mine is "qmacro")</P></LI><LI><P>the value for the<SPAN>&nbsp;</SPAN>serviceurl<SPAN>&nbsp;</SPAN>property should be the absolute URL (i.e. including the scheme), of your CANDIDATE<SPAN>&nbsp;</SPAN><STRONG>service</STRONG><SPAN>&nbsp;</SPAN>which<SPAN>&nbsp;</SPAN><EM>contains</EM><SPAN>&nbsp;</SPAN>the API endpoint (see<SPAN>&nbsp;</SPAN><A href="https://community.sap.com/t5/application-development-blog-posts/2024-07-quot-reverse-apis-quot-sap-developer-challenge/ba-p/13749653#toc-hId--356999885" target="_blank"><span class="lia-unicode-emoji" title=":information:">‚ÑπÔ∏è</span><SPAN>&nbsp;</SPAN>A note on URLs and services</A>).</P></LI></UL><P>That's it!</P><H2 id="toc-hId-235165248">Logging of test results</H2><P>Remember that you can check on your progress, and the progress of your fellow participants - all requests are logged and are available in an entity set served by the TESTER service. The entity set URL is<SPAN>&nbsp;</SPAN><A href="https://developer-challenge-2024-07.cfapps.eu10.hana.ondemand.com/tester/Testlog" target="_blank" rel="nofollow noopener noreferrer">https://developer-challenge-2024-07.cfapps.eu10.hana.ondemand.com/tester/Testlog</A><SPAN>&nbsp;</SPAN>and being an OData V4 entity set, all the normal OData system query options are available to you for digging into that information.</P><P>Until the next task, have fun, and if you have any questions or comments, leave them below!</P>
