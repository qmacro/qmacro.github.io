2020-02-14-annotated-links-episode-53-of-hands-on-sap-dev-with-qmacro
Annotated links: Episode 53 of Hands-on SAP dev with qmacro
technology-blog-sap
2020-02-14
https://community.sap.com/t5/technology-blogs-by-sap/annotated-links-episode-53-of-hands-on-sap-dev-with-qmacro/ba-p/13425974
<EM>This is a searchable description of the content of a live stream recording, specifically <STRONG>“Ep.53 - Starting to construct a HandsOnSAPDev info API”</STRONG> in the “<A href="https://bit.ly/handsonsapdev" target="_blank" rel="nofollow noopener noreferrer">Hands-on SAP dev with qmacro</A>” series. There are links directly to specific highlights in the video recording. For links to annotations of other episodes, please see the “<A href="https://bit.ly/handsonsapdev#replays" target="_blank" rel="nofollow noopener noreferrer">Catch the replays</A>” section of the series blog post.</EM><BR />
<BR />
This episode was streamed live on Fri 14 Feb 2020 and is approximately 60 minutes in length. The stream recording is <A href="https://www.youtube.com/watch?v=1-9vsPn2eF0" target="_blank" rel="nofollow noopener noreferrer">available on YouTube</A>.<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/02/Screenshot-2020-02-14-at-15.19.17.png" /><BR />
<BR />
Brief synopsis: In previous episodes, and particularly in Ep.52, we chatted about introducing a way to programmatically search for episodes of this series, by title, tag, date, or someother metadata. We talked about the possibility of an OData service (CAP-powered, of course) and / or an npm module on the GitHub package registry. In this episode we’ll make some first steps towards this goal.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=1-9vsPn2eF0&amp;t=00h01m00s" target="_blank" rel="nofollow noopener noreferrer">00:01:00</A> Stream starts, welcome to the Valentine’s Day stream!<BR />
<BR />
<A href="https://www.youtube.com/watch?v=1-9vsPn2eF0&amp;t=00h02m30s" target="_blank" rel="nofollow noopener noreferrer">00:02:30</A> Moving to the description of what we’re going to do on the stream today, with a bit of an explanationof how the topics we want to cover can interweave with other topics that I also want to work on such as the Workflow Service on Cloud Foundry. As <SPAN class="mention-scrubbed">31a8856c1f6f4bcfa7f3d890a0b88fd2</SPAN> said in the chat, too - so many topics, so little time!<BR />
<BR />
<A href="https://www.youtube.com/watch?v=1-9vsPn2eF0&amp;t=00h04m50s" target="_blank" rel="nofollow noopener noreferrer">00:04:50</A> Celebrating the fact that <SPAN class="mention-scrubbed">pieter.janssens</SPAN> has caught up with every episode recording, which is quite a feat! Some stickers coming your way, Pieter, congratulations!<BR />
<BR />
<A href="https://www.youtube.com/watch?v=1-9vsPn2eF0&amp;t=00h05m45s" target="_blank" rel="nofollow noopener noreferrer">00:05:45</A> Pointing out the Valentine’s Day gift I gave to M this morning - the <A href="https://mathsgear.co.uk/products/amicable-numbers-pair-of-keyrings-nerd-romance" target="_blank" rel="nofollow noopener noreferrer">Amicable Numbers pair of keyrings</A> that I got from Maths Gear. Very nice!<BR />
<BR />
<A href="https://www.youtube.com/watch?v=1-9vsPn2eF0&amp;t=00h07m30s" target="_blank" rel="nofollow noopener noreferrer">00:07:30</A> Talking about the approach to what we’re setting off on doing, building as we go, making “the simplest thing that could possibly work”, a phrase I learned from one of my heroes <A href="https://en.wikipedia.org/wiki/Ward_Cunningham" target="_blank" rel="nofollow noopener noreferrer">Ward Cunningham</A> (inventor of the Wiki and much more). You can listen to an interview with him on my <A href="https://qmacro.org/2019/09/17/new-podcast-tech-aloud/" target="_blank" rel="nofollow noopener noreferrer">Tech Aloud podcast</A>, specifically this episode: <A href="https://anchor.fm/tech-aloud/episodes/The-Simplest-Thing-that-Could-Possibly-Work--A-conversation-with-Ward-Cunningham--Part-V---Bill-Venners-e5dpts" target="_blank" rel="nofollow noopener noreferrer">The Simplest Thing that Could Possibly Work, A conversation with Ward Cunningham, Part V with Bill Venners</A>.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=1-9vsPn2eF0&amp;t=00h09m10s" target="_blank" rel="nofollow noopener noreferrer">00:09:10</A> Thinking of the two different forms the API could or should take - an HTTP-based service (CAP-based OData, of course) (and then perhaps a GraphQL endpoint if there’s interest) plus a JSON representation of the entityset in the form of the value exported from an installable Node.js npm module. Sort of an “online and offline” pair of API endpoints.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=1-9vsPn2eF0&amp;t=00h11m15s" target="_blank" rel="nofollow noopener noreferrer">00:11:15</A> A quick shoutout to <A href="https://openui5.org/ui5con/belgium2020/" target="_blank" rel="nofollow noopener noreferrer">UI5con Belgium</A>, including a<A href="https://twitter.com/nicgoris/status/1228062175601795073" target="_blank" rel="nofollow noopener noreferrer">tweet</A> from <SPAN class="mention-scrubbed">nicolasgoris</SPAN> listing the live stream (and recording) links.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=1-9vsPn2eF0&amp;t=00h12m10s" target="_blank" rel="nofollow noopener noreferrer">00:12:10</A> Sharing link to a great video from <A href="https://www.youtube.com/channel/UCgdeMp2ZBnovi12THmLc47g" target="_blank" rel="nofollow noopener noreferrer">Harry Wolff</A> which takes you through the new <A href="https://github.com/features/packages" target="_blank" rel="nofollow noopener noreferrer">GitHub Package Registry</A> in 10 mins, showing how to create and publish a package and thenconsume it. Well worth watching: <A href="https://www.youtube.com/watch?v=2-77KhGWlRg" target="_blank" rel="nofollow noopener noreferrer">How to use the GitHub Package Registry</A>. There’s also the GitHub documentation on this subject, which is what we’re about to loosely follow to get things set up: <A href="https://help.github.com/en/packages/using-github-packages-with-your-projects-ecosystem/configuring-npm-for-use-with-github-packages" target="_blank" rel="nofollow noopener noreferrer">Configuring npm for use with GitHub Packages</A>.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=1-9vsPn2eF0&amp;t=00h13m20s" target="_blank" rel="nofollow noopener noreferrer">00:13:20</A> A quick discussion on npm package scopes. Originally there was just the main npm registry (at <A href="https://npmjs.com" target="_blank" rel="nofollow noopener noreferrer">npmjs.com</A>) but since then there are other registries for so-called “scoped” packages, i.e.&nbsp;packages with a sort of n~amespace prefix. We know of one of those, of course, the SAP npm registry, which is at <A href="https://npm.sap.com" target="_blank" rel="noopener noreferrer">npm.sap.com</A> and contains lots of goodness including the <CODE><a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a>/cds-dk</CODE> package family. With initiativeslike the GitHub Package Registry, package sharing and reuse is now democratised, in that anyone can publish packages in their own scope, which in this case reflects that person’s usernameon GitHub. So for example (and this is what we’re about to do) I can publish packages in the <CODE><a href="https://community.sap.com/t5/user/viewprofilepage/user-id/53">@qmacro</a></CODE> scope.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=1-9vsPn2eF0&amp;t=00h16m30s" target="_blank" rel="nofollow noopener noreferrer">00:16:30</A> Mentioning another GitHub feature that appeared last year, and that’s <A href="https://github.com/features/actions" target="_blank" rel="nofollow noopener noreferrer">GitHub Actions</A>, which is what I’d also like to include in this melting pot of tech and ideas. It’s a way of automating software development workflows, and is super powerful. I use it every day in the management of my own activities tracking (which I do as issues in a project in a GitHub repo, displayed and managed in a Kanban style board), and at this point I <A href="https://github.com/qmacro/test" target="_blank" rel="nofollow noopener noreferrer">demonstrate a version</A> of what I’d previously built - a GitHub action to <A href="https://github.com/qmacro/action-add-issue-to-project-column" target="_blank" rel="nofollow noopener noreferrer">add an issue to a project’s column</A>.<BR />
<BR />
The idea is that we could potentially use the GitHub Actions feature to automatically build new versions of the npm flavour of the API, and publish a new version, when another episode was added to the OData service and appeared there. But I haven’t yet thought any of that through - I think it will be fun and educational to explore this together.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=1-9vsPn2eF0&amp;t=00h21m20s" target="_blank" rel="nofollow noopener noreferrer">00:21:20</A> Starting to go through the process of publishing a simple npm package (module) on the GitHub Package Registry, in my own namespace (scope) <CODE><a href="https://community.sap.com/t5/user/viewprofilepage/user-id/53">@qmacro</a></CODE>.<BR />
<BR />
First, we generate a <A href="https://github.com/settings/tokens" target="_blank" rel="nofollow noopener noreferrer">Personal Access Token</A>, with the appropriate authorisation scopes set, with which we can then use to authenticate the npm CLI with the GitHub Package Registry endpoint.<BR />
<BR />
I have to be careful here not to reveal the token (altho I’ve already deleted it since the live stream ended) which I do by juggling screen displays around … whereupon long-time #HandsOnSAPDev family member <A href="https://twitter.com/roberdinhoNL" target="_blank" rel="nofollow noopener noreferrer">Roberdinho</A> reminds us that I used to use a “super sekrit” scene in OBS.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=1-9vsPn2eF0&amp;t=00h23m20s" target="_blank" rel="nofollow noopener noreferrer">00:23:20</A> To store the freshly generated token I use the trusty <CODE>pass</CODE> program to save it in a new node.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=1-9vsPn2eF0&amp;t=00h24m25s" target="_blank" rel="nofollow noopener noreferrer">00:24:25</A> Next we create a new barebones npm package <CODE>hosd</CODE> (short for HandsOnSAPDev of course) thus:<BR />
<PRE><CODE>→ mkdir hosd &amp;&amp; cd $_ &amp;&amp; npm init -y</CODE></PRE><BR />
<A href="https://www.youtube.com/watch?v=1-9vsPn2eF0&amp;t=00h25m15s" target="_blank" rel="nofollow noopener noreferrer">00:25:15</A> Now we can authenticate our local npm environment (via the <CODE>npm</CODE> command) with the remote package registry at GitHub which we do like this:<BR />
<PRE><CODE>→ npm login --registry=https://npm.pkg.github.com<BR />
Username: qmacro<BR />
Password: &lt;this is where we paste the token in&gt;<BR />
Email: (this IS public): dj.adams@pobox.com</CODE></PRE><BR />
supplying our username, token, and email address.<BR />
<BR />
This results in the authentication being stored in our home <CODE>.npmrc</CODE> file, which we have a brief look at shortly.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=1-9vsPn2eF0&amp;t=00h26m50s" target="_blank" rel="nofollow noopener noreferrer">00:26:50</A> At this stage we’re ready to start building out our fledgling package, and so compose the “simplest thing that could possibly work” in terms of what we want to export by default, in <CODE>index.js</CODE>:<BR />
<PRE><CODE>module.exports = 42</CODE></PRE><BR />
We can test this out immediately and locally like this:<BR />
<PRE><CODE>→ node<BR />
&gt; const life = require('./index')<BR />
undefined<BR />
&gt; life<BR />
42<BR />
&gt;</CODE></PRE><BR />
<A href="https://www.youtube.com/watch?v=1-9vsPn2eF0&amp;t=00h28m20s" target="_blank" rel="nofollow noopener noreferrer">00:28:20</A> Now we create a project-local <CODE>.npmrc</CODE> file containing a reference to the user-specific npm package registry endpoint on GitHub, that reflects “my” packages:<BR />
<PRE><CODE>registry=https://npm.pkg.github.com/qmacro</CODE></PRE><BR />
<A href="https://www.youtube.com/watch?v=1-9vsPn2eF0&amp;t=00h28m50s" target="_blank" rel="nofollow noopener noreferrer">00:28:50</A> The last step in setting this package up for publishing is to ensure the right values are specified in the <CODE>package.json</CODE> file, paying particular attention to the value for the <CODE>name</CODE> (<CODE><a href="https://community.sap.com/t5/user/viewprofilepage/user-id/53">@qmacro</a>/hosd</CODE>) and <CODE>repository:url</CODE> (<CODE>git://github.com/qmacro/hosd.git</CODE>) properties. We end up with contents like this:<BR />
<PRE><CODE>{<BR />
  "name": "@qmacro/hosd",<BR />
  "version": "1.0.1",<BR />
  "description": "",<BR />
  "main": "index.js",<BR />
  "scripts": {<BR />
    "test": "echo \"Error: no test specified\" &amp;&amp; exit 1"<BR />
  },<BR />
  "repository": {<BR />
    "url": "git://github.com/qmacro/hosd.git"<BR />
  },<BR />
  "keywords": [],<BR />
  "author": "",<BR />
  "license": "ISC"<BR />
}</CODE></PRE><BR />
<A href="https://www.youtube.com/watch?v=1-9vsPn2eF0&amp;t=00h30m10s" target="_blank" rel="nofollow noopener noreferrer">00:30:10</A> We’re almost ready to publish the package! But first, there’s something we need to do, of course, andthat’s to get the repository set up locally (on my machine) and also remotely (on GitHub). So first we set everything up locally:<BR />
<PRE><CODE>→ git init<BR />
→ git add .<BR />
→ git commit -m 'initial commit'</CODE></PRE><BR />
Now we have to set up the repo on GitHub. And for this, rather than use the native GUI in the browser (yes, kids, don’t forget, native means Web … anything else is “OS-specific”! ;-)) we use one of the two (two!) command line GitHub clients.<BR />
<BR />
Announced this week was the new <A href="https://github.blog/2020-02-12-supercharge-your-command-line-experience-github-cli-is-now-in-beta/" target="_blank" rel="nofollow noopener noreferrer">gh</A> but there’s also the existing <A href="https://github.com/github/hub" target="_blank" rel="nofollow noopener noreferrer">hub</A> which I only discovered a week or so ago, and have been enjoying using ever since.<BR />
<BR />
With <CODE>hub</CODE> we create the repo remotely, which still feels a little bit like magic:<BR />
<PRE><CODE>→ hub create hosd<BR />
Updating origin<BR />
<A href="https://github.com/qmacro/hosd" target="test_blank" rel="nofollow noopener noreferrer">https://github.com/qmacro/hosd</A></CODE></PRE><BR />
This not only creates <A href="https://github.com/qmacro/hosd" target="_blank" rel="nofollow noopener noreferrer">the repo on GitHub</A> but also adds it as a remote to this local repo, as we can see when we check:<BR />
<PRE><CODE>→ git remote -v<BR />
origin git@github.com:qmacro/hosd.git (fetch)<BR />
origin git@github.com:qmacro/hosd.git (push)</CODE></PRE><BR />
We make immediate use of this by pushing our changes:<BR />
<PRE><CODE>→ git push -u origin master</CODE></PRE><BR />
<A href="https://www.youtube.com/watch?v=1-9vsPn2eF0&amp;t=00h34m25s" target="_blank" rel="nofollow noopener noreferrer">00:34:25</A> Now is the time for publishing our fledgling package!<BR />
<BR />
Just before we do, we take a look at what files we have, and the sight of the project-local <CODE>.npmrc</CODE> file reminds me to share a peek inside the main file in my home directory, i.e.&nbsp;<CODE>~/.npmrc</CODE>. I use <CODE>cut</CODE> to only show a certain slice of characters, so as not to reveal the entire token, and with that we can see the configuration I have:<BR />
<PRE><CODE>→ cut -c1-45 ~/.npmrc<BR />
@sap:registry=https://npm.sap.com<BR />
@qmacro:registry=https://npm.pkg.github.com<BR />
depth=0<BR />
//npm.pkg.github.com/:_authToken=0f868fab3c0b</CODE></PRE><BR />
This includes pointers to the registries for <CODE><a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a></CODE> scoped packages and for <CODE><a href="https://community.sap.com/t5/user/viewprofilepage/user-id/53">@qmacro</a></CODE> scoped packages, and in the last line you can see how the token auth is stored.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=1-9vsPn2eF0&amp;t=00h36m42s" target="_blank" rel="nofollow noopener noreferrer">00:36:42</A> So, let’s do it:<BR />
<PRE><CODE>→ npm publish<BR />
npm notice<BR />
npm notice ?  @qmacro/hosd@1.0.0<BR />
npm notice === Tarball Contents ===<BR />
npm notice 20B  index.js<BR />
npm notice 295B package.json<BR />
npm notice === Tarball Details ===<BR />
npm notice name:          @qmacro/hosd<BR />
npm notice version:       1.0.0<BR />
npm notice package size:  335 B<BR />
npm notice unpacked size: 315 B<BR />
npm notice shasum:        ca4f0f7bbd3bda931e05d49899fae6e6376b4fd0<BR />
npm notice integrity:     sha512-UdkPTdS4IUvMa[...]1Fch9aOqm1Chg==<BR />
npm notice total files:   2<BR />
npm notice<BR />
+ @qmacro/hosd@1.0.0</CODE></PRE><BR />
Success! And we see this package reflected in the repo on GitHub, in the “Package” section, with instructions on how to consume it (which is basically the same as everywhere else, i.e.&nbsp;<CODE>npm install <a href="https://community.sap.com/t5/user/viewprofilepage/user-id/53">@qmacro</a>/hosd@1.0.0</CODE>). So we give it a quick try, first by installing it:<BR />
<PRE><CODE>→ mkdir consume &amp;&amp; cd $_ &amp;&amp; npm init -y<BR />
→ npm install @qmacro/hosd</CODE></PRE><BR />
And then by using it in a simple script:<BR />
<PRE><CODE>const life = require('@qmacro/hosd')<BR />
console.log(life)</CODE></PRE><BR />
Which happily (but unsurprisingly) produces the result we want:<BR />
<PRE><CODE>→ node index.js<BR />
42</CODE></PRE><BR />
<A href="https://www.youtube.com/watch?v=1-9vsPn2eF0&amp;t=00h41m35s" target="_blank" rel="nofollow noopener noreferrer">00:41:35</A> At this stage we can start to imagine what this could eventually look like, i.e.&nbsp;instead of the scalar value 42, we’d emit an object that reflected the metadata of the HandsOnSAPDev series of episodes, a bit like this:<BR />
<PRE><CODE>module.exports = [<BR />
  { ID: 0,<BR />
    title: "Getting our feet wet",<BR />
    topics: "adventofcode,javascript,nodemon"<BR />
  }<BR />
]</CODE></PRE><BR />
This could be the basis of a local, “train-compatible” API, but what’s more, it could be sourced from the “upstream” online API which will be in the form of a RESTful endpoint (yes, the CAP Node.js OData service that we’re about to start building).<BR />
<BR />
<A href="https://www.youtube.com/watch?v=1-9vsPn2eF0&amp;t=00h44m10s" target="_blank" rel="nofollow noopener noreferrer">00:44:10</A> Now it’s time to turn our attention to kicking off this OData service, by having a look at the metadata I gathered just before going live on the stream. It’s (for now, to keep things simple) a list of episodes, with ID, title and some comma-separated topics, and in an <A href="https://docs.google.com/spreadsheets/d/1Uwl7gcZLh9sXEz8LHtQmRwXE0_RTmkk-bVVeUX40bpk/edit?usp=sharing" target="_blank" rel="nofollow noopener noreferrer">online spreadsheet</A> that I can easily export to CSV.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=1-9vsPn2eF0&amp;t=00h44m40s" target="_blank" rel="nofollow noopener noreferrer">00:44:40</A> I’d originally experimented with storing the metadata as issues in a GitHub repo and pulling those out programmatically, but while GitHub repo issues are awesome, they didn’t quite stretch to the various bits of metadata I wanted to store about the Episodes. I did however show how to pullissues, in the terminal, on the command line, from a repo, with the new <CODE>gh</CODE> command line tool mentioned earlier, which works out which repo is relevant based on the local repoyou’re already in (in this instance, qmacro/test):<BR />
<PRE><CODE>qmacro@penguin:~/local/projects/github.com/qmacro/test<BR />
→ gh issue list<BR />
<BR />
Issues for qmacro/test<BR />
<BR />
#35  handsonsapdev demo issue   (bug)<BR />
#34  and another issue, hurray  (episode, javascript, nodejs)<BR />
#33  new issue                  (cap, episode)</CODE></PRE><BR />
(I don’t particularly like the “Issues for qmacro/test” heading that is output, it reminds me of how the Cloud Foundry command line tool <CODE>cf</CODE> produces output, with headers that also get in the way, but anyway, what do I know?)<BR />
<BR />
<A href="https://www.youtube.com/watch?v=1-9vsPn2eF0&amp;t=00h46m30s" target="_blank" rel="nofollow noopener noreferrer">00:46:30</A> Starting a new CAP project to kick things off from the OData service perspective, and at least at theoutset I intend to follow the “simplest thing that could possibly work” approach again. There are many ways to organise data like this (episodes, topics, and many-to-many relationships between them), including the use of link entities, as described in the <A href="https://cap.cloud.sap/docs/guides/domain-models#managed-many-to-many-associations" target="_blank" rel="nofollow noopener noreferrer">Domain Models - Managed Many-To-Many Associations</A> section of the CAP documentation.<BR />
<BR />
But for now let’s keep it simple, and just have a single String type property with the topics in there, comma-separated. That’s not half as bad as it seems, as we’ll be able to use thepower of OData system query options such as <A href="https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part2-url-conventions.html#_Toc31360982" target="_blank" rel="nofollow noopener noreferrer">contains</A>.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=1-9vsPn2eF0&amp;t=00h47m30s" target="_blank" rel="nofollow noopener noreferrer">00:47:30</A> Checking we have the latest <CODE><a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a>/cds-dk</CODE> installed globally (remember the <CODE>depth=0</CODE> setting in <CODE>~/.npmrc</CODE> is limiting the output here to something much more useful):<BR />
<PRE><CODE>→ npm list -g<BR />
/home/qmacro/.config/nvm/versions/node/v10.17.0/lib<BR />
├── @sap/cds-dk@1.4.4<BR />
├── mbt@1.0.8<BR />
└── npm@6.13.7</CODE></PRE><BR />
we initiate a new CAP Node.js project thus:<BR />
<PRE><CODE>→ cds init handsonsapdev<BR />
[cds] - creating new project in ./handsonsapdev<BR />
done.<BR />
...</CODE></PRE><BR />
and add the simplest combination of data model and service definition that we can get:<BR />
<BR />
<CODE>db/schema.cds</CODE>:<BR />
<PRE><CODE>namespace qmacro;<BR />
<BR />
entity Episodes {<BR />
  key ID    : Integer;<BR />
  title     : String;<BR />
  topics    : String;<BR />
}</CODE></PRE><BR />
<CODE>srv/service.cds</CODE>:<BR />
<PRE><CODE>using qmacro from '../db/schema';<BR />
<BR />
service handsonsapdev {<BR />
<BR />
  entity Episodes as projection on qmacro.Episodes;<BR />
<BR />
}</CODE></PRE><BR />
We do take a look at the <A href="https://cap.cloud.sap/docs/cds/common#code-lists" target="_blank" rel="nofollow noopener noreferrer"><CODE>CodeList</CODE></A> aspect as something we might use at some stage for the management of the topics, but save that up for another time.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=1-9vsPn2eF0&amp;t=00h52m10s" target="_blank" rel="nofollow noopener noreferrer">00:52:10</A> We bring in the downloaded CSV file into the right place, as the right name (<CODE>db/csv/qmacro-Episodes.csv</CODE> of course), install the npm <CODE>sqlite3</CODE> package, and deploy. And lo &amp; behold, we have our OData service. Thanks CAP!<BR />
<BR />
<A href="https://www.youtube.com/watch?v=1-9vsPn2eF0&amp;t=00h56m20s" target="_blank" rel="nofollow noopener noreferrer">00:56:20</A> At this stage we can grab the value of the <CODE>value</CODE> property in the JSON representation of the Episodes entityset, using the classic combo of <CODE>curl</CODE> and <CODE>jq</CODE>, like this:<BR />
<PRE><CODE>→ curl <A href="http://localhost:4004/handsonsapdev/Episodes" target="test_blank" rel="nofollow noopener noreferrer">http://localhost:4004/handsonsapdev/Episodes</A> | jq -rc '.value'<BR />
[{"ID":0,"title":"Getting our feet wet","topics":"javascript,nodemon,nodejs,adventofcode"},{"ID":1,"title":"Setting up for the Node.js flavoured version of SAP’s Cloud Application Programming Model","topics":"nodejs,cap,npm,vscode,editorconfig,cf,cloudfoundry,fzf,jq,cds"},{"ID":2,"title":"Starting to build a bookshop backend service with CAPM","topics":"bookshop,cap,nodejs,cds"},{"ID":3,"title":"Special guest edition: Interview with core CAPM developers from the mothership!","topics":"guest,christiangeorgi,vscode,cap,cds"},{"ID":4,"title":"Debugging CAPM and a look at the cds REPL","topics":"nodejs,repl,debugging,cap,cds"},{"ID":5,"title":"Continuation ...","topics":"businessrules,cloudplatform,cloudfoundry,api,curl,netrc,ansible,raspberrypi"},{"ID":50,"title":"Calling our Business Rule viathe runtime API","topics":"businessrules,cloudplatform,cloudfoundry,api,curl,netrc,bash,oauth,cds,cap"},{"ID":51,"title":"More fun with Business Rules API and OAuth","topics":"businessrules,cloudplatform,cloudfoundry,api,curl,netrc,bash,oauth,apihub,javascript"},{"ID":52,"title":"Tidying up the JS script for Business Rules OAuth flow","topics":"ssh,javascript,businessrules,api,oauth,docker,dry"}]</CODE></PRE><BR />
(output redacted)<BR />
<BR />
<A href="https://www.youtube.com/watch?v=1-9vsPn2eF0&amp;t=00h57m50s" target="_blank" rel="nofollow noopener noreferrer">00:57:50</A> Adding this JSON to the <CODE><a href="https://community.sap.com/t5/user/viewprofilepage/user-id/53">@qmacro</a>/hosd</CODE> package’s <CODE>index.js</CODE>, i.e.&nbsp;setting the data to be the thing that is exported by default, we can now access that data with <CODE>require</CODE>. Lovely!<BR />
<BR />
<A href="https://www.youtube.com/watch?v=1-9vsPn2eF0&amp;t=00h59m10s" target="_blank" rel="nofollow noopener noreferrer">00:59:10</A> Incrementing the patch level of the <CODE><a href="https://community.sap.com/t5/user/viewprofilepage/user-id/53">@qmacro</a>/hosd</CODE> package (in <CODE>package.json</CODE>) and republishing the package, we then use <CODE>npm update</CODE> in our consumer project and see that it has indeed worked:<BR />
<PRE><CODE>→ node<BR />
&gt; const eps = require('@qmacro/hosd')<BR />
undefined<BR />
&gt; eps.filter(x =&gt; x.topics.match(/businessrules/))<BR />
[ { ID: 40,<BR />
    title: 'Catchup from SAP TechEd',<BR />
    topics:<BR />
     'cap,cds,composition,association,deepinsert,capcommunityrepo,teched,apihub,businessrules' },<BR />
  { ID: 41,<BR />
    title: 'Business Rules API on the BTP',<BR />
    topics: 'businessrules,cloudplatform,neo,bash,curl,api' },<BR />
  { ID: 44,<BR />
    title: 'Business Rules in Cloud Foundry – setting things up',<BR />
    topics: 'cloudplatform,cloudfoundry,businessrules' },<BR />
  { ID: 48,<BR />
    title: 'Continuing with the Business Rules service on CF',<BR />
    topics: 'businessrules,mta,cloudplatform,cloudfoundry,cf,mbt' },<BR />
  { ID: 49,<BR />
    title: 'Defining our first Business Rules project',<BR />
    topics:<BR />
     'businessrules,cloudplatform,cloudfoundry,api,curl,netrc,ansible,raspberrypi' },<BR />
  { ID: 50,<BR />
    title: 'Calling our Business Rule via the runtime API',<BR />
    topics:<BR />
     'businessrules,cloudplatform,cloudfoundry,api,curl,netrc,bash,oauth,cds,cap' },<BR />
  { ID: 51,<BR />
    title: 'More fun with Business Rules API and OAuth',<BR />
    topics:<BR />
     'businessrules,cloudplatform,cloudfoundry,api,curl,netrc,bash,oauth,apihub,javascript' },<BR />
  { ID: 52,<BR />
    title: 'Tidying up the JS script for Business Rules OAuth flow',<BR />
    topics: 'ssh,javascript,businessrules,api,oauth,docker,dry' } ]<BR />
&gt;</CODE></PRE><BR />
Wonderful!<BR />
<BR />
That’s it for this episode - a lot of stuff to take in, but hopefully it all fits together in our brains. And sets us up for some interesting learning and discovery together too.<BR />
<BR />
Thanks for joining and taking part … and remember - <A href="https://twitter.com/search?q=%23TheFutureIsTerminal" target="_blank" rel="nofollow noopener noreferrer">#TheFutureIsTerminal</A>!
