2020-01-17-annotated-links-episode-50-of-hands-on-sap-dev-with-qmacro
Annotated links: Episode 50 of Hands-on SAP dev with qmacro
technology-blog-sap
2020-01-17
https://community.sap.com/t5/technology-blogs-by-sap/annotated-links-episode-50-of-hands-on-sap-dev-with-qmacro/ba-p/13424377
<EM>This is a searchable description of the content of a live stream recording, specifically <STRONG>‚ÄúEp.50 - Calling our Business Rule via the runtime API‚Äù</STRONG> in the ‚Äú<A href="https://bit.ly/handsonsapdev" target="_blank" rel="nofollow noopener noreferrer">Hands-on SAP dev with qmacro</A>‚Äù series. There are links directly to specific highlights in the video recording. For links to annotations of other episodes, please see the ‚Äú<A href="https://bit.ly/handsonsapdev#replays" target="_blank" rel="nofollow noopener noreferrer">Catch the replays</A>‚Äù section of the series blog post.</EM><BR />
<BR />
This episode was streamed live on Fri 17 Jan 2020 and is approximately 60 minutes in length. The stream recording is <A href="https://www.youtube.com/watch?v=5k_iMXJ3J0E" target="_blank" rel="nofollow noopener noreferrer">available on YouTube</A>.<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/01/Screenshot-2020-01-17-at-10.24.17.png" /><BR />
<BR />
(Nominal title: "Chinposin'")<BR />
<BR />
Brief synopsis: We have a simple business rule defined - now it‚Äôs time to use the runtime API to call it. As it‚Äôs on Cloud Foundry and authentication is via OAuth, we‚Äôre in for a fun and interesting episode! (There is a slight change to the plans here after the cloud platform outage yesterday, which has left me bereft of a fully functional Cloud Foundry trial account.)<BR />
<BR />
<A href="https://www.youtube.com/watch?v=5k_iMXJ3J0E&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h01m20s" target="_blank" rel="nofollow noopener noreferrer">00:01:20</A> Saying good morning to everyone, including <SPAN class="mention-scrubbed">31a8856c1f6f4bcfa7f3d890a0b88fd2</SPAN> in Melbourne, who is working his way through the <A href="https://bit.ly/handsonsapdev#replays" target="_blank" rel="nofollow noopener noreferrer">Hands-on SAP Dev live stream recordings</A> and <A href="https://blogs.sap.com/2019/03/05/annotated-links-episode-1-of-hands-on-sap-dev-with-qmacro/#comment-490014" target="_blank" rel="noopener noreferrer">came across</A> an interesting gotcha in <A href="https://bit.ly/handsonsapdev#ep1" target="_blank" rel="nofollow noopener noreferrer">Ep.1</A>, relating to interpolation in the Bash shell. Nice one!<BR />
<BR />
<A href="https://www.youtube.com/watch?v=5k_iMXJ3J0E&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h05m20s" target="_blank" rel="nofollow noopener noreferrer">00:05:20</A> Highlighting an SAP CodeJam that I‚Äôll be running next week, on Thu 23 Feb, (on CAP - Node.js) in Lyon, organised by <SPAN class="mention-scrubbed">pdominique-bio</SPAN> which is documented in his blog post <A href="https://blogs.sap.com/2020/01/16/sap-codejam-goes-south/" target="_blank" rel="noopener noreferrer">SAP CodeJam goes south!</A>.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=5k_iMXJ3J0E&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h07m05s" target="_blank" rel="nofollow noopener noreferrer">00:07:05</A> Also there‚Äôs another SAP CodeJam I‚Äôll be running shortly after that, in Oslo, on the same subject, organised this time by the one and only <SPAN class="mention-scrubbed">rsletta</SPAN>. It‚Äôs on Wed 05 Feb and there are still <A href="https://www.eventbrite.com/e/sap-codejam-oslo-registration-83952954547" target="_blank" rel="nofollow noopener noreferrer">some places available</A>.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=5k_iMXJ3J0E&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h08m15s" target="_blank" rel="nofollow noopener noreferrer">00:08:15</A> I wander briefly off piste trying to think of why ‚Äúrailway tracks‚Äù reminded me of Bob Dylan. Turns out (having just looked it up) it was a combination of two things that combined to bring about this distraction. In 1975 he released the (now legendary) album ‚Äú<A href="https://open.spotify.com/album/4WD4pslu83FF6oMa1e19mF" target="_blank" rel="nofollow noopener noreferrer">Blood On The Tracks</A>‚Äù and also painted a art piece called ‚ÄúTrain Tracks‚Äù. So there you have it, not a completely bonkers association <span class="lia-unicode-emoji" title=":slightly_smiling_face:">üôÇ</span><BR />
<BR />
<A href="https://www.youtube.com/watch?v=5k_iMXJ3J0E&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h08m40s" target="_blank" rel="nofollow noopener noreferrer">00:08:40</A> Bringing to our attention the re&gt;‚â°CAP (un)conference! Organised by a wonderful bunch of folks (get involved, head on over to the <A href="https://app.slack.com/client/T0AFV1C95/CS2TXSR7C/details/info" target="_blank" rel="nofollow noopener noreferrer">recap2020 Slack channel</A>) - it will be in Heidelberg on 15 May this year. The website will be appearing soon, so watch out for it!<BR />
<BR />
<A href="https://www.youtube.com/watch?v=5k_iMXJ3J0E&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h13m50s" target="_blank" rel="nofollow noopener noreferrer">00:13:50</A> Talking about <A href="https://www.openfaas.com/" target="_blank" rel="nofollow noopener noreferrer">OpenFaaS</A> as a Functions-as-a-Service project that we can run on a Raspberry Pi based cluster (amongst other places!) - this is something I definitely want to start looking into as a means to an end (something to run over a Docker Swarm or Kubernetes managed cluster) and an end in itself (FaaS is an important layer in today‚Äôs cloud world).<BR />
<BR />
<A href="https://www.youtube.com/watch?v=5k_iMXJ3J0E&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h14m05s" target="_blank" rel="nofollow noopener noreferrer">00:14:05</A> Don‚Äôt forget to subscribe to <SPAN class="mention-scrubbed">iinside</SPAN>‚Äôs <A href="https://www.youtube.com/channel/UCkzNZP9fzLxRyhnGT2ziSRw" target="_blank" rel="nofollow noopener noreferrer">YouTube Channel</A> - Max is live streaming on a regular (monthly) basis.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=5k_iMXJ3J0E&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h14m40s" target="_blank" rel="nofollow noopener noreferrer">00:14:40</A> A quick shoutout to a great blog post from <SPAN class="mention-scrubbed">rsletta</SPAN> talking about their live streaming approach and equipment for SAP Inside Track Oslo last year - ‚Äú<A href="https://blogs.sap.com/2020/01/14/stream-on-a-look-at-how-we-broadcasted-sap-inside-track-oslo-2019/" target="_blank" rel="noopener noreferrer">Stream on! - A look at how we broadcasted SAP Inside Track OSLO 2019</A>‚Äù.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=5k_iMXJ3J0E&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h14m55s" target="_blank" rel="nofollow noopener noreferrer">00:14:55</A> This brings us neatly on to a related and relatively new initiative called <A href="https://opensit.net" target="_blank" rel="nofollow noopener noreferrer">OpenSIT</A>, from <SPAN class="mention-scrubbed">oliver</SPAN> and friends. The mission is ‚Äúto make the session content recorded at SAP Inside Tracks easily accessible to SAP community members‚Äù. Check out this introductory blog post to find out more: ‚Äú<A href="https://blogs.sap.com/2020/01/09/introducing-opensit/" target="_blank" rel="noopener noreferrer">Introducing OpenSIT</A>‚Äù.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=5k_iMXJ3J0E&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h16m00s" target="_blank" rel="nofollow noopener noreferrer">00:16:00</A> Talking about yesterday‚Äôs outage in Frankfurt, which caused me to rethink the plans for this live stream quite quickly! <span class="lia-unicode-emoji" title=":slightly_smiling_face:">üôÇ</span> In any case, you can use the <A href="https://sapcp.statuspage.io" target="_blank" rel="nofollow noopener noreferrer">SAP Cloud Platform status page</A> to monitor services.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=5k_iMXJ3J0E&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h18m50s" target="_blank" rel="nofollow noopener noreferrer">00:18:50</A> Delighted that <SPAN class="mention-scrubbed">christian.drumm</SPAN> picked up on the two command line utilities I used to create a little logo, those are <A href="http://www.figlet.org/" target="_blank" rel="nofollow noopener noreferrer">figlet</A> and <A href="https://github.com/busyloop/lolcat/" target="_blank" rel="nofollow noopener noreferrer">lolcat</A>.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=5k_iMXJ3J0E&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h20m00s" target="_blank" rel="nofollow noopener noreferrer">00:20:00</A> Setting the scene for something I wanted to share on CAP environments, and managing, say, development and production profiles separately. This means you can use SQLite in development locally, for example, but use HANA for production, and use the same build and deploy process, controlling the environment switch with an environment variable (<CODE>NODE_ENV</CODE>). The scene is the <A href="https://github.com/SAP-samples/cloud-cap-nodejs-codejam/tree/master/exercises/10" target="_blank" rel="nofollow noopener noreferrer">last exercise</A> in the CAP - Node.js CodeJam content, specifically step 6 where I had just modified the instructions to get the attendees to overwrite the DB type in <CODE>package.json</CODE>. There‚Äôs a better way, which I knew at the time but just couldn‚Äôt remember fully.<BR />
<BR />
The better way, as we see from the short demo (using the relatively new design time package <CODE><a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a>/cds-dk</CODE>), is to use the ‚Äòprofile‚Äô concept, described in the <A href="https://cap.cloud.sap/docs/advanced/config" target="_blank" rel="nofollow noopener noreferrer">Runtime Configuration for Node.js</A> section of the CAP docs.<BR />
<BR />
(And yes, during this demo I installed the <CODE>mbt</CODE> build tool for no reason - as I was only intending to do a <CODE>cds build/all</CODE> - doh!).<BR />
<BR />
<A href="https://www.youtube.com/watch?v=5k_iMXJ3J0E&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h34m30s" target="_blank" rel="nofollow noopener noreferrer">00:34:30</A> Another short distraction on languages that start indexing at 1 rather than 0, ABAP being one of them, as well as FORTRAN, Julia, Smalltalk and APL. I dug into this just now a little bit more and it seems that zero-indexing came from BCPL and specifically from compilation of that language for the classic <A href="https://en.wikipedia.org/wiki/IBM_7090#IBM_7094" target="_blank" rel="nofollow noopener noreferrer">IBM 7094</A> mainframe from the early 1960‚Äôs. My vague (and ultimately incorrect) musing that Pascal or Modula 2 might also be languages that are one-indexed was because I was confusing the father of these two languages, Nilkaus Wirth, with Edsger W. Dijkstra, who wrote a paper ‚Äú<A href="https://www.cs.utexas.edu/users/EWD/transcriptions/EWD08xx/EWD831.html" target="_blank" rel="nofollow noopener noreferrer">Why numbering should start at zero</A>‚Äù. The amount of rubbish that is wrongly tangled up in my brain is ridiculous.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=5k_iMXJ3J0E&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h36m30s" target="_blank" rel="nofollow noopener noreferrer">00:36:30</A> This is what the resulting modified <CODE>cds -&gt; requires</CODE> section of <CODE>package.json</CODE> looks like after the addition of a <CODE>[production]</CODE> section:<BR />
<PRE class="cds"><CODE>"cds": {<BR />
  "requires": {<BR />
    "db": {<BR />
      "kind": "sqlite",<BR />
      "model": [<BR />
        "db/",<BR />
        "srv/",<BR />
        "app/"<BR />
      ],<BR />
      "[production]": {<BR />
        "kind": "hana"<BR />
      },<BR />
      "credentials": {<BR />
        "database": "db.db"<BR />
      }<BR />
    }<BR />
  }</CODE></PRE><BR />
When <CODE>NODE_ENV</CODE> is set to <CODE>[production]</CODE>, the value of ‚Äúhana‚Äù is used for <CODE>cds -&gt; requires -&gt; db -&gt; kind</CODE> rather than ‚Äúsqlite‚Äù. Neat! (Thanks very much to <SPAN class="mention-scrubbed">david.kunz2</SPAN> who was very patient with me on this yesterday, by the way!)<BR />
<BR />
You may be interested to know that I‚Äôve now updated the CodeJam content (exercise 10 step 6) to include this, with this commit: <A href="https://github.com/SAP-samples/cloud-cap-nodejs-codejam/commit/86280ab0fd9a815e9a6554860649244f7f22a198" target="_blank" rel="nofollow noopener noreferrer">update 10.6 to describe use of profiles</A>.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=5k_iMXJ3J0E&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h40m30s" target="_blank" rel="nofollow noopener noreferrer">00:40:30</A> Moving over to Business Rules and the API Hub now, to complete the chain of HTTP calls that we need to invoke API endpoints in the set of Business Rules APIs, following on from where we left off in <A href="https://bit.ly/handsonsapdev#ep49" target="_blank" rel="nofollow noopener noreferrer">Ep.49</A>.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=5k_iMXJ3J0E&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h43m25s" target="_blank" rel="nofollow noopener noreferrer">00:43:25</A> Looking at what we had in that previous episode, which I now have formed into a simple shell script (<CODE>gettoken</CODE>) for the purposes of demonstration and quick re-running:<BR />
<PRE class="shell"><CODE>#!/bin/bash<BR />
<BR />
curl \<BR />
  --silent \<BR />
  --netrc \<BR />
  --header "Content-Type: application/x-www-form-urlencoded" \<BR />
  --data "grant_type=password&amp;response_type=token&amp;username=dj.adams@sap.com&amp;password=$PASSWORD" \<BR />
  <A href="https://i347491trial.authentication.eu10.hana.ondemand.com/oauth/token" target="test_blank" rel="nofollow noopener noreferrer">https://i347491trial.authentication.eu10.hana.ondemand.com/oauth/token</A></CODE></PRE><BR />
This is a call to the OAuth 2.0 authentication endpoint, to request a bearer token with which to make subsequent calls to the actual Business Rules API endpoints.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=5k_iMXJ3J0E&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h45m10s" target="_blank" rel="nofollow noopener noreferrer">00:45:10</A> Using <A href="https://www.gnu.org/software/bash/manual/html_node/Command-Substitution.html" target="_blank" rel="nofollow noopener noreferrer">command substitution</A>, we grab the token using <CODE>jq --raw-output '.access_token'</CODE> and save the value in the <CODE>TOKEN</CODE> environment variable (the name of this variable is not significant).<BR />
<BR />
<A href="https://www.youtube.com/watch?v=5k_iMXJ3J0E&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h47m50s" target="_blank" rel="nofollow noopener noreferrer">00:47:50</A> We can then use this token to authenticate an actual API call, which we pick from the rules repository (i.e.&nbsp;design time) endpoint. The call looks like this:<BR />
<PRE class="shell"><CODE>#!/bin/bash<BR />
<BR />
curl \<BR />
  --silent \<BR />
  --netrc \<BR />
  --header "Authorization: Bearer ${TOKEN}" \<BR />
  <A href="https://bpmrulerepository.cfapps.eu10.hana.ondemand.com/rules-service/rest/v1/projects" target="test_blank" rel="nofollow noopener noreferrer">https://bpmrulerepository.cfapps.eu10.hana.ondemand.com/rules-service/rest/v1/projects</A></CODE></PRE><BR />
And in fact, there‚Äôs something we used in this call that was actually completely unnecessary - can you spot what it was? Let me know in the comments to this blog post.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=5k_iMXJ3J0E&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h52m10s" target="_blank" rel="nofollow noopener noreferrer">00:52:10</A> We finish off with a little bit of <CODE>jq</CODE> syntax, to pull out properties from the response returned from the design time API endpoint:<BR />
<PRE class="shell"><CODE>./getprojectinfo | jq '.[0].name'</CODE></PRE><BR />
‚Ä¶ as well as a short discussion on OAuth 2.0 authorisation endpoints, real API endpoints, and CSRF (XSRF) tokens.<BR />
<BR />
And that just about wraps it up for this episode - thanks as always for helping make our live stream series fun and engaging!
