2019-11-26-annotated-links-episode-43-of-hands-on-sap-dev-with-qmacro
Annotated links: Episode 43 of Hands-on SAP dev with qmacro
technology-blog-sap
2019-11-26
https://community.sap.com/t5/technology-blogs-by-sap/annotated-links-episode-43-of-hands-on-sap-dev-with-qmacro/ba-p/13456571
<EM>This is a searchable description of the content of a live stream recording, specifically <STRONG>"Ep.43 - SAP TechEd Functional Programming recap"</STRONG> in the "<A href="https://bit.ly/handsonsapdev" target="_blank" rel="nofollow noopener noreferrer">Hands-on SAP dev with qmacro</A>" series. There are links directly to specific highlights in the video recording. For links to annotations of other episodes, please see the "<A href="https://bit.ly/handsonsapdev#replays" target="_blank" rel="nofollow noopener noreferrer">Catch the replays</A>" section of the series blog post.</EM><BR />
<BR />
This episode was streamed live on Tue 19 Nov 2019 and is approximately 90 minutes in length. The stream recording is <A href="https://www.youtube.com/watch?v=72fkd4TBDtA&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0" target="_blank" rel="nofollow noopener noreferrer">available on YouTube</A>.<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2019/11/Screenshot-2019-11-26-at-08.29.58-1.png" /><BR />
<BR />
Brief synopsis: At SAP TechEd 2019 in Bangalore we had this session "Write Solid Code with Functional Programming Techniques" where, using JS, we covered some functional programming aspects such as higher order functions, composition and reuse, partial application and immutability. It was a popular session and was repeated the next day. This episode gives us all the chance to look at the content of this session, and some related FP goodness.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=72fkd4TBDtA&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h04m30s" target="_blank" rel="nofollow noopener noreferrer">00:04:30</A> An overview of what this episode is going to cover, including a recap of my Community Theatre session at SAP TechEd 2019 Bangalore "<A href="https://sessioncatalog.sapevents.com/go/agendabuilder.speakers/?l=222&amp;speaker_id=46905&amp;locale=en_US" target="_blank" rel="nofollow noopener noreferrer">Write Solid Code with Functional Programming Techniques</A>" which was repeated the next day due to popularity, which was nice. A quick shoutout to to my colleague <SPAN class="mention-scrubbed">mynyna.chau</SPAN> who ran the Community Theatre really well last week.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=72fkd4TBDtA&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h07m00s" target="_blank" rel="nofollow noopener noreferrer">00:07:00</A> Reminded by A couple of my documents that I shared, covering more beginner functional programming topics:<BR />
<UL><BR />
 	<LI><A href="https://docs.google.com/document/d/1mNhHOWKuRrTsSeQuCZ_0yT_mkFqLYsIL754G3neyaXo/edit" target="_blank" rel="nofollow noopener noreferrer">Programming in a more functional style in JavaScript</A></LI><BR />
 	<LI><A href="https://docs.google.com/document/d/1Nx2PFqObMtir0rSzjU804PAAVkC3j4lZTtfRRoLSocQ/edit" target="_blank" rel="nofollow noopener noreferrer">Functional Programming for your UI5 Apps - Hands-On Worksheet</A></LI><BR />
</UL><BR />
<A href="https://www.youtube.com/watch?v=72fkd4TBDtA&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h07m30s" target="_blank" rel="nofollow noopener noreferrer">00:07:30</A> Looking at the <A href="https://twitter.com/kyleshevlin/status/1196278263401734145" target="_blank" rel="nofollow noopener noreferrer">tweet</A> that <SPAN class="mention-scrubbed">rsletta</SPAN> shared, describing a way to turn an array of records into a map (object) of those records, keyed by the value of a given property - this is also something that we are to cover in this episode.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=72fkd4TBDtA&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h07m50s" target="_blank" rel="nofollow noopener noreferrer">00:07:50</A> A quick mention of <A href="https://codesandbox.io/" target="_blank" rel="nofollow noopener noreferrer">Code Sandbox</A> which seems a great online code editor for lots of web dev goodness.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=72fkd4TBDtA&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h12m00s" target="_blank" rel="nofollow noopener noreferrer">00:12:00</A> Not to forget that <A href="https://adventofcode.com" target="_blank" rel="nofollow noopener noreferrer">Advent Of Code</A> is almost upon us! We used a puzzle from Advent Of Code to warm our brains up at the very start of this series - if you're interested, check out <A href="https://bit.ly/handsonsapdev#ep0" target="_blank" rel="nofollow noopener noreferrer">Episode 0</A>!<BR />
<BR />
<A href="https://www.youtube.com/watch?v=72fkd4TBDtA&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h13m20s" target="_blank" rel="nofollow noopener noreferrer">00:13:20</A> I think I've mentioned this video before, but it's worth mentioning again, which I did at this point - a great talk by Brian Lonsdorf (aka <A href="https://twitter.com/drboolean" target="_blank" rel="nofollow noopener noreferrer">Dr Boolean</A>) "<A href="https://www.youtube.com/watch?v=m3svKOdZijA" target="_blank" rel="nofollow noopener noreferrer">Hey Underscore, You're Doing It Wrong!</A>".<BR />
<BR />
<A href="https://www.youtube.com/watch?v=72fkd4TBDtA&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h14m20s" target="_blank" rel="nofollow noopener noreferrer">00:14:20</A> Finally, a quick pointer to a video on my own YouTube channel, "<A href="https://www.youtube.com/watch?v=R-Ej68re8uE" target="_blank" rel="nofollow noopener noreferrer">Implementing 'partition' three ways in JS and Ramda</A>". Don't forget to please consider subscribing to <A href="https://youtube.com/user/qmacro99" target="_blank" rel="nofollow noopener noreferrer">my YouTube channel</A> and let's see if I can get to 1000 subscribers by the end of the year!<BR />
<BR />
<A href="https://www.youtube.com/watch?v=72fkd4TBDtA&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h15m30s" target="_blank" rel="nofollow noopener noreferrer">00:15:30</A> OK, starting with the <A href="https://services.odata.org/V4/Northwind/Northwind.svc/Products" target="_blank" rel="nofollow noopener noreferrer">Northwind Products</A> that we'll use as a small data set for our experiments.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=72fkd4TBDtA&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h17m50s" target="_blank" rel="nofollow noopener noreferrer">00:17:50</A> Starting to work on producing a list of discontinued items for sale, with reduced prices, using a more "traditional" ("old fashioned"?) approach, with a <CODE>for</CODE> loop.<BR />
<BR />
During this part, we see how many difficults we encounter, or rather cause for ourselves. Code and data that moves, changes. Worse, perhaps, is that we're having to instruct the computer <EM>how</EM> to work through a list, rather than simply <EM>what</EM> we want it to give us. But the ultimate issue is that we're clobbering data "upstream", our source of truth data set, without even realising! Not good, not now, and not further down the line when our program has grown and things are going wrong and we can't work out why.<BR />
<BR />
Here's what the code looks like (this is the code that we <EM>don't</EM> like!):<BR />
<DIV><BR />
<PRE class="sourceCode javascript"><CODE class="sourceCode javascript">aSaleItems <SPAN class="op">=</SPAN> []<BR />
<BR />
<SPAN class="cf">for</SPAN> (<SPAN class="kw">var</SPAN> i <SPAN class="op">=</SPAN> <SPAN class="dv">0</SPAN><SPAN class="op">;</SPAN> i <SPAN class="op">&lt;</SPAN> <SPAN class="va">Products</SPAN>.<SPAN class="at">length</SPAN><SPAN class="op">;</SPAN> i<SPAN class="op">++</SPAN>) <SPAN class="op">{</SPAN><BR />
  <SPAN class="kw">var</SPAN> product <SPAN class="op">=</SPAN> Products[i]<BR />
  <SPAN class="cf">if</SPAN> (<SPAN class="va">product</SPAN>.<SPAN class="at">Discontinued</SPAN> <SPAN class="op">===</SPAN> <SPAN class="kw">true</SPAN>) <SPAN class="op">{</SPAN><BR />
    <SPAN class="va">product</SPAN>.<SPAN class="at">UnitPrice</SPAN> <SPAN class="op">=</SPAN> <SPAN class="va">Math</SPAN>.<SPAN class="at">round</SPAN>(<SPAN class="va">product</SPAN>.<SPAN class="at">UnitPrice</SPAN> <SPAN class="op">*</SPAN> <SPAN class="fl">0.9</SPAN>)<BR />
    <SPAN class="va">aSaleItems</SPAN>.<SPAN class="at">push</SPAN>(product)<BR />
  <SPAN class="op">}</SPAN><BR />
<SPAN class="op">}</SPAN></CODE></PRE><BR />
</DIV><BR />
<A href="https://www.youtube.com/watch?v=72fkd4TBDtA&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h25m40s" target="_blank" rel="nofollow noopener noreferrer">00:25:40</A> A small digression on the meaning of 'idempotent', which is an important concept in REST (and how idempotency is different from having side-effects).<BR />
<BR />
<A href="https://www.youtube.com/watch?v=72fkd4TBDtA&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h27m50s" target="_blank" rel="nofollow noopener noreferrer">00:27:50</A> It's clear that we don't want this, we want more "solid-state" programming. And for that we can adopt some functional programming techniques, which we start to have a look at now.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=72fkd4TBDtA&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h28m50s" target="_blank" rel="nofollow noopener noreferrer">00:28:50</A> I explain the concepts that we covered in the Community Theatre talk, and <SPAN class="mention-scrubbed">chris.whealy</SPAN> kindly writes them down in the chat for me (thanks Chris!) ready to cover in this episode now:<BR />
<UL><BR />
 	<LI>higher order functions</LI><BR />
 	<LI>reuse and chaining</LI><BR />
 	<LI>partial application</LI><BR />
 	<LI>immutability</LI><BR />
</UL><BR />
<A href="https://www.youtube.com/watch?v=72fkd4TBDtA&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h31m10s" target="_blank" rel="nofollow noopener noreferrer">00:31:10</A> Talking about the "<A href="https://en.wikipedia.org/wiki/Triumvirate" target="_blank" rel="nofollow noopener noreferrer">triumvirate</A>" of functions <CODE>map</CODE>, <CODE>filter</CODE> and <CODE>reduce</CODE> and pointing out that <CODE>reduce</CODE> is the mother of all functions, in that, for example, you can implement both <CODE>map</CODE> and <CODE>filter</CODE> using <CODE>reduce</CODE>.<BR />
<BR />
A bit later on, we note that these functions have built-in "list machinery" - see my post "<A href="https://langram.org/2017/02/19/the-beauty-of-recursion-and-list-machinery/" target="_blank" rel="nofollow noopener noreferrer">The beauty of recursion and list machinery</A>" if you want to dig into this a little more.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=72fkd4TBDtA&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h32m40s" target="_blank" rel="nofollow noopener noreferrer">00:32:40</A> Starting to build out the functional style equivalent, beginning with a simple <CODE>isDiscontinued</CODE> function definition.<BR />
<DIV><BR />
<PRE class="sourceCode javascript"><CODE class="sourceCode javascript">isDiscontinued <SPAN class="op">=</SPAN> x <SPAN class="op">=&gt;</SPAN> <SPAN class="va">x</SPAN>.<SPAN class="at">Discontinued</SPAN> <SPAN class="op">===</SPAN> <SPAN class="kw">true</SPAN></CODE></PRE><BR />
</DIV><BR />
<A href="https://www.youtube.com/watch?v=72fkd4TBDtA&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h45m50s" target="_blank" rel="nofollow noopener noreferrer">00:45:50</A> A bit later on we also define a helper function for discounts, which is written in such a way that we can partially apply it:<BR />
<DIV><BR />
<PRE class="sourceCode javascript"><CODE class="sourceCode javascript">applyDiscount <SPAN class="op">=</SPAN> percent <SPAN class="op">=&gt;</SPAN> price <SPAN class="op">=&gt;</SPAN> <SPAN class="va">Math</SPAN>.<SPAN class="at">round</SPAN>(price <SPAN class="op">*</SPAN> ((<SPAN class="dv">100</SPAN> <SPAN class="op">-</SPAN> percent) / <SPAN class="dv">100</SPAN>))</CODE></PRE><BR />
</DIV><BR />
Then we can create new functions based on a partial application of <CODE>applyDiscount</CODE> thus:<BR />
<DIV><BR />
<PRE class="sourceCode javascript"><CODE class="sourceCode javascript">tenPercentOff <SPAN class="op">=</SPAN> <SPAN class="at">applyDiscount</SPAN>(<SPAN class="dv">10</SPAN>)</CODE></PRE><BR />
</DIV><BR />
which will allow us to call it like this:<BR />
<DIV><BR />
<PRE class="sourceCode javascript"><CODE class="sourceCode javascript"><SPAN class="at">tenPercentOff</SPAN>(<SPAN class="dv">200</SPAN>)<BR />
<SPAN class="co">//&gt; 180</SPAN></CODE></PRE><BR />
</DIV><BR />
<A href="https://www.youtube.com/watch?v=72fkd4TBDtA&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h49m50s" target="_blank" rel="nofollow noopener noreferrer">00:49:50</A> At this stage we have our new, solid-state equivalent code, which looks like this:<BR />
<DIV><BR />
<PRE class="sourceCode javascript"><CODE class="sourceCode javascript">Products<BR />
.<SPAN class="at">filter</SPAN>(isDiscontinued)<BR />
.<SPAN class="at">map</SPAN>(x <SPAN class="op">=&gt;</SPAN> <SPAN class="op">{</SPAN><BR />
  <SPAN class="kw">let</SPAN> <SPAN class="op">{</SPAN> <SPAN class="dt">ProductName</SPAN><SPAN class="op">:</SPAN> Name<SPAN class="op">,</SPAN> UnitPrice <SPAN class="op">}</SPAN> <SPAN class="op">=</SPAN> x<BR />
  <SPAN class="cf">return</SPAN> <SPAN class="op">{</SPAN><BR />
    Name<SPAN class="op">,</SPAN><BR />
    <SPAN class="dt">SalePrice</SPAN><SPAN class="op">:</SPAN> <SPAN class="at">tenPercentOff</SPAN>(UnitPrice)<BR />
  <SPAN class="op">}</SPAN><BR />
<SPAN class="op">}</SPAN>)</CODE></PRE><BR />
</DIV><BR />
Doesn't that make you feel a lot more comfortable? No mutating of data, no moving parts (just implicit list machinery); solid-state code that just evaluates. Lovely!<BR />
<BR />
By the way - we also used some other ES6 facilities in this code, can you remember and name them? Put your thoughts in the comments below.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=72fkd4TBDtA&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h54m20s" target="_blank" rel="nofollow noopener noreferrer">00:54:20</A> Mentioning the concept of a <A href="https://en.wikipedia.org/wiki/Functor" target="_blank" rel="nofollow noopener noreferrer">Functor</A>, which is a lot less scary than the Wikipedia article might lead you to believe, and is a nice word to put on a tshirt <span class="lia-unicode-emoji" title=":slightly_smiling_face:">🙂</span><BR />
<BR />
<A href="https://www.youtube.com/watch?v=72fkd4TBDtA&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h55m00s" target="_blank" rel="nofollow noopener noreferrer">00:55:00</A> Starting to look at the next section, specifically the "challenge" set in the <A href="https://twitter.com/kyleshevlin/status/1196278263401734145" target="_blank" rel="nofollow noopener noreferrer">tweet from Kyle Shevlin</A>.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=72fkd4TBDtA&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h56m40s" target="_blank" rel="nofollow noopener noreferrer">00:56:40</A> There is, in fact, a higher order function <CODE>find</CODE>, a sibling, so to speak, of <CODE>map</CODE>, <CODE>filter</CODE> and <CODE>reduce</CODE>, and it's quite effective and easy to read, but can of course have performance issues if the data set is large. Here's what we did with <CODE>find</CODE>, again on the Products data set, looking for the product record for 'Ikura':<BR />
<DIV><BR />
<PRE class="sourceCode javascript"><CODE class="sourceCode javascript"><SPAN class="va">Products</SPAN>.<SPAN class="at">find</SPAN>(x <SPAN class="op">=&gt;</SPAN> <SPAN class="va">x</SPAN>.<SPAN class="at">ProductName</SPAN> <SPAN class="op">===</SPAN> <SPAN class="st">'Ikura'</SPAN>)<BR />
<SPAN class="co">//&gt; {ProductID: 10, ProductName: "Ikura", SupplierID: 4, ... }</SPAN></CODE></PRE><BR />
</DIV><BR />
<A href="https://www.youtube.com/watch?v=72fkd4TBDtA&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h59m00s" target="_blank" rel="nofollow noopener noreferrer">00:59:00</A> Effectively, we want to reshape (a term I learned from APL) the Products data like this:<BR />
<PRE><CODE>[ ... ] -&gt; { ... }</CODE></PRE><BR />
In other words, from an array to an object. Given that <CODE>map</CODE> takes an array and produces an array (as does <CODE>filter</CODE>), we can't use it. But we <EM>can</EM> use <CODE>reduce</CODE>, which we can use to produce a result of any shape!<BR />
<BR />
<A href="https://www.youtube.com/watch?v=72fkd4TBDtA&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=01h01m00s" target="_blank" rel="nofollow noopener noreferrer">01:01:00</A> The <CODE>reduce</CODE> function is often used to reshape an array of data to a scalar, for example tranforming a list of numbers ...<BR />
<DIV><BR />
<PRE class="sourceCode javascript"><CODE class="sourceCode javascript">nums <SPAN class="op">=</SPAN> [<SPAN class="dv">1</SPAN><SPAN class="op">,</SPAN><SPAN class="dv">2</SPAN><SPAN class="op">,</SPAN><SPAN class="dv">3</SPAN>]</CODE></PRE><BR />
</DIV><BR />
... to what they all add up to:<BR />
<DIV><BR />
<PRE class="sourceCode javascript"><CODE class="sourceCode javascript"><SPAN class="va">nums</SPAN>.<SPAN class="at">reduce</SPAN>((a<SPAN class="op">,</SPAN> x) <SPAN class="op">=&gt;</SPAN> a <SPAN class="op">+</SPAN> x<SPAN class="op">,</SPAN> <SPAN class="dv">0</SPAN>)<BR />
<SPAN class="co">//&gt; 6</SPAN></CODE></PRE><BR />
</DIV><BR />
This is the equivalent of this "long hand" version:<BR />
<DIV><BR />
<PRE class="sourceCode javascript"><CODE class="sourceCode javascript"><SPAN class="va">nums</SPAN>.<SPAN class="at">reduce</SPAN>(<SPAN class="kw">function</SPAN>(accumulator<SPAN class="op">,</SPAN> item) <SPAN class="op">{</SPAN><BR />
  accumulator <SPAN class="op">=</SPAN> accumulator <SPAN class="op">+</SPAN> item<BR />
  <SPAN class="cf">return</SPAN> accumulator<BR />
<SPAN class="op">}</SPAN>)</CODE></PRE><BR />
</DIV><BR />
<A href="https://www.youtube.com/watch?v=72fkd4TBDtA&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=01h03m00s" target="_blank" rel="nofollow noopener noreferrer">01:03:00</A> Looking briefly at <A href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce" target="_blank" rel="nofollow noopener noreferrer">the documentation for <CODE>reduce</CODE></A>, on MDN, the Mozilla Developer Network and a great resource for JS docu.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=72fkd4TBDtA&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=01h12m20s" target="_blank" rel="nofollow noopener noreferrer">01:12:20</A> Now we're ready to produce an object from the Products array, keyed on the product name. We do it manually, directly, first of all, and this is what it looks like:<BR />
<DIV><BR />
<PRE class="sourceCode javascript"><CODE class="sourceCode javascript">Products<BR />
.<SPAN class="at">reduce</SPAN>((a<SPAN class="op">,</SPAN> x) <SPAN class="op">=&gt;</SPAN> <SPAN class="op">{</SPAN> a[<SPAN class="va">x</SPAN>.<SPAN class="at">ProductName</SPAN>] <SPAN class="op">=</SPAN> x<SPAN class="op">;</SPAN> <SPAN class="cf">return</SPAN> a <SPAN class="op">},</SPAN> <SPAN class="op">{}</SPAN>)<BR />
<SPAN class="co">//&gt; { Chai: {...}, Chang: {...}, ... }</SPAN></CODE></PRE><BR />
</DIV><BR />
The key thing to note here is that the starting value is an empty object, which puts us on the right path for our desired transformation:<BR />
<PRE><CODE>[ ... ] -&gt; { ... }</CODE></PRE><BR />
<A href="https://www.youtube.com/watch?v=72fkd4TBDtA&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=01h15m20s" target="_blank" rel="nofollow noopener noreferrer">01:15:20</A> Now we think about adding this functionality to the Array object itself, to make it available on all arrays. To discover how to add a function to the Array prototype, we explore first, with a silly example:<BR />
<DIV><BR />
<PRE class="sourceCode javascript"><CODE class="sourceCode javascript"><SPAN class="va">Array</SPAN>.<SPAN class="va">prototype</SPAN>.<SPAN class="at">someRandomThing</SPAN> <SPAN class="op">=</SPAN> <SPAN class="kw">function</SPAN>(n) <SPAN class="op">{</SPAN> <SPAN class="cf">return</SPAN> <SPAN class="kw">this</SPAN>.<SPAN class="at">length</SPAN> <SPAN class="op">*</SPAN> n <SPAN class="op">}</SPAN><BR />
[<SPAN class="dv">1</SPAN><SPAN class="op">,</SPAN><SPAN class="dv">2</SPAN><SPAN class="op">,</SPAN><SPAN class="dv">3</SPAN><SPAN class="op">,</SPAN><SPAN class="dv">4</SPAN>].<SPAN class="at">someRandomThing</SPAN>(<SPAN class="dv">5</SPAN>)<BR />
<SPAN class="co">//&gt; 20</SPAN></CODE></PRE><BR />
</DIV><BR />
Note that we use the <CODE>function() { ... }</CODE> approach because we need to refer to <CODE>this</CODE> (to get to the actual array instance) which is not available in fat-arrow based function definitions.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=72fkd4TBDtA&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=01h18m00s" target="_blank" rel="nofollow noopener noreferrer">01:18:00</A> Now we're ready. This is what we end up with:<BR />
<DIV><BR />
<PRE class="sourceCode javascript"><CODE class="sourceCode javascript"><SPAN class="va">Array</SPAN>.<SPAN class="va">prototype</SPAN>.<SPAN class="at">makeObjectOn</SPAN> <SPAN class="op">=</SPAN> <SPAN class="kw">function</SPAN>(prop) <SPAN class="op">{</SPAN><BR />
  <SPAN class="cf">return</SPAN> <SPAN class="kw">this</SPAN>.<SPAN class="at">reduce</SPAN>((a<SPAN class="op">,</SPAN> x<SPAN class="op">,</SPAN> i) <SPAN class="op">=&gt;</SPAN> <SPAN class="op">{</SPAN> a[x[prop] <SPAN class="op">||</SPAN> i] <SPAN class="op">=</SPAN> x<SPAN class="op">;</SPAN> <SPAN class="cf">return</SPAN> a <SPAN class="op">},</SPAN> <SPAN class="op">{}</SPAN>)<BR />
<SPAN class="op">}</SPAN></CODE></PRE><BR />
</DIV><BR />
Note that we're using the third parameter <CODE>i</CODE> that's passed to the callback function, to use a fallback index parameter if the one supplied doesn't exist.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=72fkd4TBDtA&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=01h28m00s" target="_blank" rel="nofollow noopener noreferrer">01:28:00</A> As a final flourish, we add a really nice affectation which allows us to do away with multiple statements inside the inner function - this was introduced to me by <SPAN class="mention-scrubbed">chris.whealy</SPAN> a while ago, and allows us to write functions with single expressions only:<BR />
<DIV><BR />
<PRE class="sourceCode javascript"><CODE class="sourceCode javascript"><SPAN class="va">Array</SPAN>.<SPAN class="va">prototype</SPAN>.<SPAN class="at">makeObjectOn</SPAN> <SPAN class="op">=</SPAN> <SPAN class="kw">function</SPAN>(prop) <SPAN class="op">{</SPAN><BR />
  <SPAN class="cf">return</SPAN> <SPAN class="kw">this</SPAN>.<SPAN class="at">reduce</SPAN>((a<SPAN class="op">,</SPAN> x<SPAN class="op">,</SPAN> i) <SPAN class="op">=&gt;</SPAN> (_ <SPAN class="op">=&gt;</SPAN> a)(a[x[prop] <SPAN class="op">||</SPAN> i] <SPAN class="op">=</SPAN> x<SPAN class="op">,</SPAN> <SPAN class="op">{}</SPAN>)<BR />
<SPAN class="op">}</SPAN></CODE></PRE><BR />
</DIV><BR />
Take a few minutes to stare at this for a bit, especially the construction <CODE>(_ =&gt; a)(...)</CODE>, which is an immediately invoked function expression (IIFE). You may grow to love it <span class="lia-unicode-emoji" title=":slightly_smiling_face:">🙂</span>
