2024-07-05-task-1-your-first-service-and-first-endpoint-july-developer-challenge-quot
Task 1 - Your first service and first endpoint (July Developer Challenge - "Reverse APIs")
application-developmentforum-board
2024-07-05
https://community.sap.com/t5/application-development-discussions/task-1-your-first-service-and-first-endpoint-july-developer-challenge-quot/td-p/13752205
<P><SPAN>This is a task in the&nbsp;</SPAN><A href="https://community.sap.com/t5/application-development-blog-posts/sap-developer-challenge-quot-reverse-quot-apis/ba-p/13749653" target="_self">July Developer Challenge - "Reverse APIs"</A><SPAN>.</SPAN></P><P>So, you've completed the warm-up task 0 and have managed to get a simple CAP server up, running and accessible from the cloud, and therefore (critically for this month's challenge) accessible by the<SPAN>&nbsp;</SPAN><A href="https://community.sap.com/t5/application-development-blog-posts/2024-07-quot-reverse-apis-quot-sap-developer-challenge/ba-p/13749653#toc-hId-625567640" target="_blank">TESTER</A><SPAN>&nbsp;</SPAN>component. Great! Now it's time to create your first API endpoint. What does that mean, and what do you have to do?</P><P>As this is your first task where you have to create both a service and an endpoint, some help and hints are given. So it's a little more reading for you, but don't worry, the subsequent task descriptions won't be as verbose.</P><H2 id="toc-hId-1019305637">API endpoints and services</H2><P>An API endpoint very often exists in the wider context of a service, which you can think of as being a "container" for one or more endpoints. An OData service will typically offer multiple entity set resources, plus perhaps some action and function imports.</P><P>For example, the classic<SPAN>&nbsp;</SPAN><A href="https://services.odata.org/v4/northwind/northwind.svc/" target="_blank" rel="nofollow noopener noreferrer">Northwind service</A><SPAN>&nbsp;</SPAN>offers various "collections" which normally translate into "entity sets", such as<SPAN>&nbsp;</SPAN><A href="https://services.odata.org/v4/northwind/northwind.svc/Customers" target="_blank" rel="nofollow noopener noreferrer">Customers</A>,<SPAN>&nbsp;</SPAN><A href="https://services.odata.org/v4/northwind/northwind.svc/Products" target="_blank" rel="nofollow noopener noreferrer">Products</A><SPAN>&nbsp;</SPAN>and<SPAN>&nbsp;</SPAN><A href="https://services.odata.org/v4/northwind/northwind.svc/Categories" target="_blank" rel="nofollow noopener noreferrer">Categories</A>. And as for function and action imports, the<SPAN>&nbsp;</SPAN><A href="https://services.odata.org/V4/TripPinService/" target="_blank" rel="nofollow noopener noreferrer">TripPin service</A>, for example, sports a function import called<SPAN>&nbsp;</SPAN><A href="https://services.odata.org/V4/TripPinService/GetNearestAirport(lat=53.599992,lon=-2.835948)" target="_blank" rel="nofollow noopener noreferrer">GetNearestAirport</A>*.</P><P>*I was surprised to see that my nearest airport is apparently in Rome, but then remembered that there are only<SPAN>&nbsp;</SPAN><A href="https://services.odata.org/V4/TripPinService/Airports?$count=true" target="_blank" rel="nofollow noopener noreferrer">15 airports</A><SPAN>&nbsp;</SPAN>in the dataset.</P><P>Not every service is OData, of course. But in the context of enterprise computing, it's an extremely well respected, understood and used open standard. And CAP makes it child's play to create an OData service and fill it with API endpoints.</P><H2 id="toc-hId-822792132">Creating your first service</H2><P>And as the idea of this challenge is to use CAP, then the first thing you'll need to do is create a simple service. You can modify the existing<SPAN>&nbsp;</SPAN>CatalogService<SPAN>&nbsp;</SPAN>that you got for free when you initialised the CAP project in Task 0. You know, the one that exposes a<SPAN>&nbsp;</SPAN>Books<SPAN>&nbsp;</SPAN>entity set, and is defined declaratively, with CDL, in<SPAN>&nbsp;</SPAN>srv/cat-service.cds:</P><DIV class=""><PRE><SPAN class="">using</SPAN> <SPAN class="">my.bookshop</SPAN> <SPAN class="">as</SPAN> <SPAN class="">my</SPAN> <SPAN class="">from</SPAN> <SPAN class=""><SPAN class="">'</SPAN>../db/data-model<SPAN class="">'</SPAN></SPAN>;

<SPAN class="">service</SPAN> CatalogService {
    <SPAN class="">@readonly</SPAN> <SPAN class="">entity</SPAN> Books <SPAN class="">as</SPAN> <SPAN class="">projection</SPAN> <SPAN class="">on</SPAN> my.Books;
}</PRE><DIV class="">&nbsp;</DIV></DIV><P>But what we recommend is that you leave that<SPAN>&nbsp;</SPAN>CatalogService<SPAN>&nbsp;</SPAN>as it is, and create your own new service. And while you could define it in the same<SPAN>&nbsp;</SPAN>srv/cat-service.cds<SPAN>&nbsp;</SPAN>file, instead, we recommend you take advantage of the wonderfully flexible nature of the CDS compiler ... and create a (pair of) new file(s), in the<SPAN>&nbsp;</SPAN>srv/<SPAN>&nbsp;</SPAN>directory, in which you will define your service.</P><P>Hint: As you'll see, the name of the service you'll be required to create here is<SPAN>&nbsp;</SPAN>basic, so, within the<SPAN>&nbsp;</SPAN>srv/<SPAN>&nbsp;</SPAN>directory, why not use the filename<SPAN>&nbsp;</SPAN>basic.cds. Furthermore, the API endpoint you'll be required to create in this task is an unbound function within that service, so (as with all actions and functions) you'll need to provide an implementation, so why not use the filename<SPAN>&nbsp;</SPAN>basic.js<SPAN>&nbsp;</SPAN>for that and place that file next to (in the same directory as)<SPAN>&nbsp;</SPAN>basic.cds.</P><H2 id="toc-hId-626278627">The requirements</H2><P>Here are the specific requirements for this task.</P><P>Define a new service.</P><P>Make sure the service name is<SPAN>&nbsp;</SPAN>basic.</P><P>Have it be served via the OData V4 protocol (this is what all services are served via by default with CAP). But don't have it served at the standard path for an OData V4 protocol based service (which would be<SPAN>&nbsp;</SPAN>/odata/v4/basic), instead, have it served at the simpler path<SPAN>&nbsp;</SPAN>/basic.</P><P>The service, at least at this point in the challenge, needs to have a single API endpoint, specifically one that is called<SPAN>&nbsp;</SPAN>ping, that can be called with the HTTP GET method, takes no parameters, and returns a JSON payload that looks like this:</P><DIV class=""><PRE>{
  <SPAN class="">"@odata.context"</SPAN>: <SPAN class=""><SPAN class="">"</SPAN>$metadata#Edm.String<SPAN class="">"</SPAN></SPAN>,
  <SPAN class="">"value"</SPAN>: <SPAN class=""><SPAN class="">"</SPAN>pong<SPAN class="">"</SPAN></SPAN>
}</PRE><DIV class="">&nbsp;</DIV></DIV><P>It is critical (to test success) that what's returned in the<SPAN>&nbsp;</SPAN>value<SPAN>&nbsp;</SPAN>property here is the JSON string "pong".</P><P>In other words, this API endpoint should be defined as an<SPAN>&nbsp;</SPAN><A href="https://cap.cloud.sap/docs/cds/cdl#actions" target="_blank" rel="nofollow noopener noreferrer">unbound function</A>.</P><P>When the service, containing this API endpoint, is fully defined, and served via the OData V4 protocol, the metadata document should look like this:</P><DIV class=""><PRE>&lt;?<SPAN class="">xml</SPAN><SPAN class=""> version</SPAN>=<SPAN class=""><SPAN class="">"</SPAN>1.0<SPAN class="">"</SPAN></SPAN><SPAN class=""> encoding</SPAN>=<SPAN class=""><SPAN class="">"</SPAN>utf-8<SPAN class="">"</SPAN></SPAN>?&gt;
&lt;<SPAN class="">edmx</SPAN><SPAN class="">:</SPAN><SPAN class="">Edmx</SPAN> <SPAN class="">Version</SPAN>=<SPAN class=""><SPAN class="">"</SPAN>4.0<SPAN class="">"</SPAN></SPAN> <SPAN class="">xmlns</SPAN><SPAN class="">:</SPAN><SPAN class="">edmx</SPAN>=<SPAN class=""><SPAN class="">"</SPAN>http://docs.oasis-open.org/odata/ns/edmx<SPAN class="">"</SPAN></SPAN>&gt;
  &lt;<SPAN class="">edmx</SPAN><SPAN class="">:</SPAN><SPAN class="">Reference</SPAN> <SPAN class="">Uri</SPAN>=<SPAN class=""><SPAN class="">"</SPAN>https://sap.github.io/odata-vocabularies/vocabularies/Common.xml<SPAN class="">"</SPAN></SPAN>&gt;
    &lt;<SPAN class="">edmx</SPAN><SPAN class="">:</SPAN><SPAN class="">Include</SPAN> <SPAN class="">Alias</SPAN>=<SPAN class=""><SPAN class="">"</SPAN>Common<SPAN class="">"</SPAN></SPAN> <SPAN class="">Namespace</SPAN>=<SPAN class=""><SPAN class="">"</SPAN>com.sap.vocabularies.Common.v1<SPAN class="">"</SPAN></SPAN>/&gt;
  &lt;/<SPAN class="">edmx</SPAN><SPAN class="">:</SPAN><SPAN class="">Reference</SPAN>&gt;
  &lt;<SPAN class="">edmx</SPAN><SPAN class="">:</SPAN><SPAN class="">Reference</SPAN> <SPAN class="">Uri</SPAN>=<SPAN class=""><SPAN class="">"</SPAN>https://oasis-tcs.github.io/odata-vocabularies/vocabularies/Org.OData.Core.V1.xml<SPAN class="">"</SPAN></SPAN>&gt;
    &lt;<SPAN class="">edmx</SPAN><SPAN class="">:</SPAN><SPAN class="">Include</SPAN> <SPAN class="">Alias</SPAN>=<SPAN class=""><SPAN class="">"</SPAN>Core<SPAN class="">"</SPAN></SPAN> <SPAN class="">Namespace</SPAN>=<SPAN class=""><SPAN class="">"</SPAN>Org.OData.Core.V1<SPAN class="">"</SPAN></SPAN>/&gt;
  &lt;/<SPAN class="">edmx</SPAN><SPAN class="">:</SPAN><SPAN class="">Reference</SPAN>&gt;
  &lt;<SPAN class="">edmx</SPAN><SPAN class="">:</SPAN><SPAN class="">DataServices</SPAN>&gt;
    &lt;<SPAN class="">Schema</SPAN> <SPAN class="">Namespace</SPAN>=<SPAN class=""><SPAN class="">"</SPAN>basic<SPAN class="">"</SPAN></SPAN> <SPAN class="">xmlns</SPAN>=<SPAN class=""><SPAN class="">"</SPAN>http://docs.oasis-open.org/odata/ns/edm<SPAN class="">"</SPAN></SPAN>&gt;
      &lt;<SPAN class="">EntityContainer</SPAN> <SPAN class="">Name</SPAN>=<SPAN class=""><SPAN class="">"</SPAN>EntityContainer<SPAN class="">"</SPAN></SPAN>&gt;
        &lt;<SPAN class="">FunctionImport</SPAN> <SPAN class="">Name</SPAN>=<SPAN class=""><SPAN class="">"</SPAN>ping<SPAN class="">"</SPAN></SPAN> <SPAN class="">Function</SPAN>=<SPAN class=""><SPAN class="">"</SPAN>basic.ping<SPAN class="">"</SPAN></SPAN>/&gt;
      &lt;/<SPAN class="">EntityContainer</SPAN>&gt;
      &lt;<SPAN class="">Function</SPAN> <SPAN class="">Name</SPAN>=<SPAN class=""><SPAN class="">"</SPAN>ping<SPAN class="">"</SPAN></SPAN> <SPAN class="">IsBound</SPAN>=<SPAN class=""><SPAN class="">"</SPAN>false<SPAN class="">"</SPAN></SPAN> <SPAN class="">IsComposable</SPAN>=<SPAN class=""><SPAN class="">"</SPAN>false<SPAN class="">"</SPAN></SPAN>&gt;
        &lt;<SPAN class="">ReturnType</SPAN> <SPAN class="">Type</SPAN>=<SPAN class=""><SPAN class="">"</SPAN>Edm.String<SPAN class="">"</SPAN></SPAN>/&gt;
      &lt;/<SPAN class="">Function</SPAN>&gt;
    &lt;/<SPAN class="">Schema</SPAN>&gt;
  &lt;/<SPAN class="">edmx</SPAN><SPAN class="">:</SPAN><SPAN class="">DataServices</SPAN>&gt;
&lt;/<SPAN class="">edmx</SPAN><SPAN class="">:</SPAN><SPAN class="">Edmx</SPAN>&gt;</PRE><DIV class="">&nbsp;</DIV></DIV><P>If you've not defined (here: in<SPAN>&nbsp;</SPAN>srv/basic.cds) and written an implementation (here: in<SPAN>&nbsp;</SPAN>srv/basic.js) for a function or action before, then you need to know a couple of things.</P><P>First, know that you need to implement such functions or actions via the<SPAN>&nbsp;</SPAN><A href="https://cap.cloud.sap/docs/node.js/core-services#srv-on-before-after" target="_blank" rel="nofollow noopener noreferrer">on</A><SPAN>&nbsp;</SPAN>event. Also, know that there are two implementation styles in CAP Node.js*, described in the Capire section<SPAN>&nbsp;</SPAN><A href="https://cap.cloud.sap/docs/node.js/core-services#how-to-provide-custom-service-implementations" target="_blank" rel="nofollow noopener noreferrer">How to provide custom service implementations?</A>:</P><UL><LI>the ES6 class based style, extending the<SPAN>&nbsp;</SPAN>cds.ApplicationService<SPAN>&nbsp;</SPAN>class</LI><LI>the older and simpler cds.service.impl style</LI></UL><P>Note that the older style is translated automatically, behind the scenes, to the ES6 class based style anyway.</P><P>* As mentioned in the<SPAN>&nbsp;</SPAN><A href="https://community.sap.com/t5/application-development-blog-posts/2024-07-quot-reverse-apis-quot-sap-developer-challenge/ba-p/13749653#toc-hId-822081145" target="_blank">Introduction</A><SPAN>&nbsp;</SPAN>to this challenge, hints are for the Node.js flavour of CAP, but of course you're welcome to use the Java flavour if you prefer.</P><P>Once you've got your service defined, and a simple implementation ready, with an<SPAN>&nbsp;</SPAN>on<SPAN>&nbsp;</SPAN>handler for the<SPAN>&nbsp;</SPAN>ping<SPAN>&nbsp;</SPAN>event, you're ready.</P><P>It is definitely worth testing it yourself first, e.g. with<SPAN>&nbsp;</SPAN>curl, or Postman, or whatever tool you prefer for making HTTP calls. With your server running (on, let's say, the default local CAP server port of 4004), make a request like this:</P><DIV class=""><PRE>curl -s --url <SPAN class=""><SPAN class="">'</SPAN>localhost:4004/basic/ping()<SPAN class="">'</SPAN></SPAN></PRE><DIV class="">&nbsp;</DIV></DIV><P>and the reponse should look like this:</P><DIV class=""><PRE>{<SPAN class="">"@odata.context"</SPAN>:<SPAN class=""><SPAN class="">"</SPAN>$metadata#Edm.String<SPAN class="">"</SPAN></SPAN>,<SPAN class="">"value"</SPAN>:<SPAN class=""><SPAN class="">"</SPAN>pong<SPAN class="">"</SPAN></SPAN>}</PRE><DIV class="">&nbsp;</DIV></DIV><H2 id="toc-hId-429765122">Submitting your API endpoint to the TESTER</H2><P>Now you're ready to submit your CANDIDATE service, with the specific API endpoint, to the TESTER!</P><H3 id="toc-hId-362334336">The payload</H3><P>The task identifier you need to supply in the payload of your submission is:<SPAN>&nbsp;</SPAN><STRONG>basic-ping</STRONG>.</P><P>While some of you lovely folks with a more rebellious and hacker nature (I'm looking at you <a href="https://community.sap.com/t5/user/viewprofilepage/user-id/107">@ajmaradiaga</a> and <a href="https://community.sap.com/t5/user/viewprofilepage/user-id/11756">@gphadnis2000</a> :-)) have already<SPAN>&nbsp;</SPAN><A href="https://community.sap.com/t5/application-development-discussions/2024-07-developer-challenge-task-0-server-and-service-provisioning/m-p/13750013/highlight/true#M2028882" target="_blank">kicked</A><SPAN>&nbsp;</SPAN>the<SPAN>&nbsp;</SPAN><A href="https://community.sap.com/t5/application-development-discussions/2024-07-developer-challenge-task-0-server-and-service-provisioning/m-p/13750281/highlight/true#M2028890" target="_blank">tyres</A><SPAN>&nbsp;</SPAN>of the TESTER service, this should be the first time you'll be using the TESTER service.</P><P>Most of what you need to know is described in the the section titled "<A href="https://community.sap.com/t5/application-development-blog-posts/2024-07-quot-reverse-apis-quot-sap-developer-challenge/ba-p/13749653#toc-hId--553513390" target="_blank">The Tester service, and making a test request</A>" in the<SPAN>&nbsp;</SPAN><A href="https://community.sap.com/t5/application-development-blog-posts/2024-07-quot-reverse-apis-quot-sap-developer-challenge/ba-p/13749653" target="_blank">main challenge blog post</A>, so head over to that section for a quick refresher first, then come back here.</P><P>Now, to have your freshly minted API endpoint in this task tested, you'll need to submit a JSON payload like this:</P><DIV class=""><PRE>{
  <SPAN class="">"communityid"</SPAN>: <SPAN class=""><SPAN class="">"</SPAN>&lt;your-community-id&gt;<SPAN class="">"</SPAN></SPAN>,
  <SPAN class="">"serviceurl"</SPAN>: <SPAN class=""><SPAN class="">"</SPAN>&lt;the-URL-of-your-service&gt;<SPAN class="">"</SPAN></SPAN>,
  <SPAN class="">"task"</SPAN>: <SPAN class=""><SPAN class="">"</SPAN>basic-ping<SPAN class="">"</SPAN></SPAN>
}</PRE><DIV class="">&nbsp;</DIV></DIV><P>Here's an example (don't use these values for<SPAN>&nbsp;</SPAN>communityid<SPAN>&nbsp;</SPAN>and<SPAN>&nbsp;</SPAN>serviceurl, they're specific to me and provided here just for illustration):</P><DIV class=""><PRE>{
  <SPAN class="">"communityid"</SPAN>: <SPAN class=""><SPAN class="">"</SPAN>qmacro<SPAN class="">"</SPAN></SPAN>,
  <SPAN class="">"serviceurl"</SPAN>: <SPAN class=""><SPAN class="">"</SPAN>https://c0df-85-255-235-188.ngrok-free.app/basic<SPAN class="">"</SPAN></SPAN>,
  <SPAN class="">"task"</SPAN>: <SPAN class=""><SPAN class="">"</SPAN>basic-ping<SPAN class="">"</SPAN></SPAN>
}</PRE><DIV class="">&nbsp;</DIV></DIV><P>Note that the value for the<SPAN>&nbsp;</SPAN>communityid<SPAN>&nbsp;</SPAN>property should be your ID on this SAP Community platform (e.g. mine is "qmacro").</P><P>Note also the value for the<SPAN>&nbsp;</SPAN>serviceurl<SPAN>&nbsp;</SPAN>property should be the absolute URL (i.e. including the scheme), of your CANDIDATE<SPAN>&nbsp;</SPAN><STRONG>service</STRONG><SPAN>&nbsp;</SPAN>(see<SPAN>&nbsp;</SPAN><A href="https://community.sap.com/t5/application-development-blog-posts/2024-07-quot-reverse-apis-quot-sap-developer-challenge/ba-p/13749653#toc-hId--356999885" target="_blank"><span class="lia-unicode-emoji" title=":information:">ℹ️</span><SPAN>&nbsp;</SPAN>A note on URLs and services</A>), not the specific API endpoint.</P><H3 id="toc-hId-165820831">The service URL</H3><P>Of course, you need to make sure your new service and API endpoint are available to the TESTER, so supplying<SPAN>&nbsp;</SPAN><A href="http://localhost:4004/basic" target="_blank" rel="noopener nofollow noreferrer">http://localhost:4004/basic</A><SPAN>&nbsp;</SPAN>as the value for the<SPAN>&nbsp;</SPAN>serviceurl<SPAN>&nbsp;</SPAN>property is not going to work. Make sure you either redeploy your CAP project (if you're<SPAN>&nbsp;</SPAN><A href="https://community.sap.com/t5/application-development-blog-posts/2024-07-quot-reverse-apis-quot-sap-developer-challenge/ba-p/13749653#toc-hId-165109844" target="_blank">pushing to Cloud Foundry</A>) or still have your<SPAN>&nbsp;</SPAN>ngrok<SPAN>&nbsp;</SPAN>tunnel up and running (if you're using the<SPAN>&nbsp;</SPAN><A href="https://community.sap.com/t5/application-development-blog-posts/2024-07-quot-reverse-apis-quot-sap-developer-challenge/ba-p/13749653#toc-hId--31403661" target="_blank">ngrok tunnel</A><SPAN>&nbsp;</SPAN>approach).</P><H3 id="toc-hId--30692674">Submitting the test request</H3><P>You'll need to submit that JSON payload in a POST request to this endpoint:</P><P><A href="https://developer-challenge-2024-07.cfapps.eu10.hana.ondemand.com/tester/testServer" target="_blank" rel="noopener nofollow noreferrer">https://developer-challenge-2024-07.cfapps.eu10.hana.ondemand.com/tester/testServer</A></P><P>and you'll need to supply a<SPAN>&nbsp;</SPAN>Content-Type<SPAN>&nbsp;</SPAN>header stating that the representation of the payload resource has a media type of<SPAN>&nbsp;</SPAN>application/json.</P><P>Here's a<SPAN>&nbsp;</SPAN>curl<SPAN>&nbsp;</SPAN>invocation doing exactly that, by way of example (and using my specific values shown in the illustration above):</P><DIV class=""><PRE>curl \
  --data <SPAN class=""><SPAN class="">'</SPAN>{"communityid":"qmacro","serviceurl":"https://c0df-85-255-235-188.ngrok-free.app/basic","task":"basic-ping"}<SPAN class="">'</SPAN></SPAN> \
  --header <SPAN class=""><SPAN class="">'</SPAN>Content-Type: application/json<SPAN class="">'</SPAN></SPAN> \
  --url <SPAN class=""><SPAN class="">'</SPAN>https://developer-challenge-2024-07.cfapps.eu10.hana.ondemand.com/tester/testServer<SPAN class="">'</SPAN></SPAN></PRE><DIV class="">&nbsp;</DIV></DIV><H3 id="toc-hId--227206179">Types of responses</H3><P>You'll see one of two types of responses- an error response, or a test result response.</P><H4 id="toc-hId--294636965">Error response</H4><P>If there's something wrong with your call then you'll get an error response. For example, if you haven't supplied a value for the<SPAN>&nbsp;</SPAN>communityid<SPAN>&nbsp;</SPAN>property, you'll get an HTTP 400 error response with a payload like this:</P><DIV class=""><PRE>{
  <SPAN class="">"error"</SPAN>: {
    <SPAN class="">"code"</SPAN>: <SPAN class=""><SPAN class="">"</SPAN>400<SPAN class="">"</SPAN></SPAN>,
    <SPAN class="">"message"</SPAN>: <SPAN class=""><SPAN class="">"</SPAN>Missing Community ID value<SPAN class="">"</SPAN></SPAN>,
    <SPAN class="">"@Common.numericSeverity"</SPAN>: <SPAN class="">4</SPAN>
  }
}</PRE><DIV class="">&nbsp;</DIV></DIV><P>Similarly, if the TESTER cannot reach your endpoint, you'll get HTTP 500 error response with a payload like this:</P><DIV class=""><PRE>{
  <SPAN class="">"error"</SPAN>: {
    <SPAN class="">"code"</SPAN>: <SPAN class=""><SPAN class="">"</SPAN>500<SPAN class="">"</SPAN></SPAN>,
    <SPAN class="">"message"</SPAN>: <SPAN class=""><SPAN class="">"</SPAN>Error calling service endpoint<SPAN class="">"</SPAN></SPAN>,
    <SPAN class="">"@Common.numericSeverity"</SPAN>: <SPAN class="">4</SPAN>
  }
}</PRE><DIV class="">&nbsp;</DIV></DIV><P>Other similar errors may occur, for example if you supply a missing or invalid task identifier or service URL.</P><H4 id="toc-hId--491150470">Test result response</H4><P>If the TESTER manages to reach your API endpoint successfully, it will then check that the response returned is what is required and expected. In the case of this task, the response required and expected is the static value "pong". If that is what is received, a positive test result response will be returned, and will look like this:</P><DIV class=""><PRE>{<SPAN class="">"@odata.context"</SPAN>:<SPAN class=""><SPAN class="">"</SPAN>$metadata#Edm.String<SPAN class="">"</SPAN></SPAN>,<SPAN class="">"value"</SPAN>:<SPAN class=""><SPAN class="">"</SPAN>PASS<SPAN class="">"</SPAN></SPAN>}</PRE><DIV class="">&nbsp;</DIV></DIV><P>If a different value is received, then a negative test response will be returned, and will look like this:</P><DIV class=""><PRE>{<SPAN class="">"@odata.context"</SPAN>:<SPAN class=""><SPAN class="">"</SPAN>$metadata#Edm.String<SPAN class="">"</SPAN></SPAN>,<SPAN class="">"value"</SPAN>:<SPAN class=""><SPAN class="">"</SPAN>FAIL<SPAN class="">"</SPAN></SPAN>}</PRE><DIV class="">&nbsp;</DIV></DIV><P>That's it!</P><H2 id="toc-hId--598575056">Logging of test results</H2><P>Each time there's a call to the TESTER by any participant, and a test result response can be issued, that test request is logged. So you can check on your progress, and the progress of your fellow participants.</P><P>The logged requests are available in an entity set served by the TESTER service. The entity set URL is<SPAN>&nbsp;</SPAN><A href="https://developer-challenge-2024-07.cfapps.eu10.hana.ondemand.com/tester/Testlog" target="_blank" rel="nofollow noopener noreferrer">https://developer-challenge-2024-07.cfapps.eu10.hana.ondemand.com/tester/Testlog</A><SPAN>&nbsp;</SPAN>and being an OData V4 entity set, all the normal OData system query options are available to you for digging into that information.</P><P>But that's all for now on that.</P><P>Until the next task, have fun, and if you have any questions or comments, leave them below!</P>
