2020-02-07-annotated-links-episode-52-of-hands-on-sap-dev-with-qmacro
Annotated links: Episode 52 of Hands-on SAP dev with qmacro
technology-blog-sap
2020-02-07
https://community.sap.com/t5/technology-blogs-by-sap/annotated-links-episode-52-of-hands-on-sap-dev-with-qmacro/ba-p/13451752
<EM>This is a searchable description of the content of a live stream recording, specifically <STRONG>“Ep.52 - Tidying up the JS script for Business Rules OAuth flow”</STRONG> in the “<A href="https://bit.ly/handsonsapdev" target="_blank" rel="nofollow noopener noreferrer">Hands-on SAP devwith qmacro</A>” series. There are links directly to specific highlights in the video recording. For links to annotations of other episodes, please see the “<A href="https://bit.ly/handsonsapdev#replays" target="_blank" rel="nofollow noopener noreferrer">Catch the replays</A>” section of the series blog post.</EM><BR />
<BR />
This episode was streamed live on Fri 07 Feb 2020 and is approximately 60 minutes in length. The stream recording is <A href="https://www.youtube.com/watch?v=pyV_2G5MOTk" target="_blank" rel="nofollow noopener noreferrer">available on YouTube</A>.<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/02/Screenshot-2020-02-07-at-12.10.52.png" /><BR />
<BR />
Brief synopsis: In Ep.51 we finished on a cliffhanger - having retrieved a bearer token by authenticating using the resource owner password credentials grant flow, we made the call to the runtime API endpoint, but got a 401. Find out why in this episode, and work with me on making the script neater and more reusable.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=pyV_2G5MOTk&amp;t=00h01m55s" target="_blank" rel="nofollow noopener noreferrer">00:01:55</A> Stream starts.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=pyV_2G5MOTk&amp;t=00h04m55s" target="_blank" rel="nofollow noopener noreferrer">00:04:55</A> Highlighting a series of blog posts from <SPAN class="mention-scrubbed">vitaliy.rudnytskiy</SPAN> on the subject of containers in general, and Docker in particular. I’m enjoying these posts, which Witalij has tagged with the user tag <A href="https://blogs.sap.com/tag/understandcontainers/" target="_blank" rel="noopener noreferrer">UnderstandContainers</A> so you can find them easily. Thanks Witalij!<BR />
<BR />
<A href="https://www.youtube.com/watch?v=pyV_2G5MOTk&amp;t=00h06m25s" target="_blank" rel="nofollow noopener noreferrer">00:06:25</A> Highlighted this morning by <SPAN class="mention-scrubbed">jakob_bourne</SPAN> is a post on deploying an ABAP stack server on Kubernetes, by <SPAN class="mention-scrubbed">richard.treu</SPAN> - <A href="https://blogs.sap.com/2020/02/06/proof-of-concept-deploying-abap-in-kubernetes/" target="_blank" rel="noopener noreferrer">Proof of Concept: Deploying ABAP in Kubernetes</A>. A fascinating experiment, even more so because of my recent interest in containers and Kubernetes.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=pyV_2G5MOTk&amp;t=00h08m15s" target="_blank" rel="nofollow noopener noreferrer">00:08:15</A> This post reminded me that I wanted to show a lovely example of a Terminal User Interface (TUI), in the form of a frontend for managing Kubernetes resources - <A href="https://github.com/derailed/k9s" target="_blank" rel="nofollow noopener noreferrer">k9s</A>. It’s an implementation of a wonderful (and well established) idea - the ability to have a user interface that’s efficient, attractive to power users, with great key bindings, no requirement to use the mouse, and can run pretty much anywhere.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=pyV_2G5MOTk&amp;t=00h08m50s" target="_blank" rel="nofollow noopener noreferrer">00:08:50</A> Showing off my recent “functor” tshirt, which I like very much <span class="lia-unicode-emoji" title=":slightly_smiling_face:">🙂</span><BR />
<BR />
<A href="https://www.youtube.com/watch?v=pyV_2G5MOTk&amp;t=00h10m00s" target="_blank" rel="nofollow noopener noreferrer">00:10:00</A> Connecting via <CODE>ssh</CODE> to my host ‘gargantubrain’ (an old MBP on the shelves behind me), to demonstrate <CODE>k9s</CODE> which I’d already installed and connected to the Kubernetes installation provided by <A href="https://kubernetes.io/docs/tasks/tools/install-minikube/" target="_blank" rel="nofollow noopener noreferrer">Minikube</A>.<BR />
<BR />
I mentioned that I found it useful that while I was the user ‘qmacro’ on the local host ‘penguin’ I didn’t have to explicitly specify the user ‘dj’ that I needed to be over on ‘gargantubrain’ – normally it would have attempted to connect as ‘qmacro@gargantubrain’ which would have failed. And that’s because of the richness of <CODE>ssh</CODE> which I’ve been looking into as part of <A href="https://blogs.sap.com/2020/01/12/my-learning-list-for-2020/" target="_blank" rel="noopener noreferrer">my learning list for 2020</A>.<BR />
<BR />
I didn’t actually show how I’d set that up, so I’ll explain now; I maintain <CODE>ssh</CODE> configuration in <CODE>~/.ssh/config</CODE> and it looks like this:<BR />
<PRE><CODE>Host pixel<BR />
     Port 8022<BR />
<BR />
Host github.com<BR />
     ForwardX11 no<BR />
<BR />
Host c02w4e8ff9zq<BR />
     User i347491<BR />
<BR />
Host zino gargantubrain<BR />
     User dj<BR />
<BR />
Host *<BR />
     ForwardX11 yes</CODE></PRE><BR />
So you can see that part of this says that when connecting to ‘gargantubrain’, connect as the user ‘dj’. Nice!<BR />
<BR />
For those wondering, I like to forward X11, another one of my 2020 topics to dig into more, when I’m connecting to any host, apart from ‘github.com’ of course, which is just to use ssh to authenticate to interact with repositories with <CODE>git</CODE>.<BR />
<BR />
(And yes, some of you guessed that the name ‘gargantubrain’ comes from <A href="https://hitchhikers.fandom.com/wiki/Milliard_Gargantubrain" target="_blank" rel="nofollow noopener noreferrer">The Hitch Hiker’s Guide To The Galaxy</A> of course).<BR />
<BR />
<A href="https://www.youtube.com/watch?v=pyV_2G5MOTk&amp;t=00h11m20s" target="_blank" rel="nofollow noopener noreferrer">00:11:20</A> Talking of Kubernetes, I mention a great book that I’m reading, by <A href="https://www.jeffgeerling.com/" target="_blank" rel="nofollow noopener noreferrer">Jeff Geerling</A>, called <A href="https://www.ansibleforkubernetes.com/" target="_blank" rel="nofollow noopener noreferrer">Ansible for Kubernetes</A>, which is teaching me not only about Kubernetes but about Ansible too, and also Docker. Recommended.<BR />
<BR />
Moreover, talking of Docker, I bring up another TUI in the form of <A href="https://moncho.github.io/dry/" target="_blank" rel="nofollow noopener noreferrer">dry - a Docker manager for the terminal</A>. We have a look at this too, having paused briefly to marvel at the power of running tools without having to install them - <STRONG>as Docker containers</STRONG> … which in turn reminds me of <A href="https://www.npmjs.com/package/npx" target="_blank" rel="nofollow noopener noreferrer"><CODE>npx</CODE></A>. We are in the future, right?<BR />
<BR />
<A href="https://www.youtube.com/watch?v=pyV_2G5MOTk&amp;t=00h16m00s" target="_blank" rel="nofollow noopener noreferrer">00:16:00</A> The final part of today’s preamble is about <A href="https://github.com/features/packages" target="_blank" rel="nofollow noopener noreferrer">GitHub Packages</A> which gives us citizen developers the ability to have our own Node.js modules (or Docker images, and other packages) hosted in a registry. The democratisation of NPM registries! (I couldn’t remember this word on the stream and “made up” a word “peopleisation” which of course is the same thing (<A href="https://en.wiktionary.org/wiki/demos" target="_blank" rel="nofollow noopener noreferrer">δῆμος / demos = people</A>).<BR />
<BR />
<A href="https://www.youtube.com/watch?v=pyV_2G5MOTk&amp;t=00h19m30s" target="_blank" rel="nofollow noopener noreferrer">00:19:30</A> Oh yes and I got to use my <CODE>rules.bash</CODE> script to recreate the Business Rules setup in my freshly minted (post-expired and destroyed) trial subaccount related Cloud Foundry environment. I wrote about this script in a recent blog post <A href="https://blogs.sap.com/2020/01/28/scripting-cloud-foundry-activities-in-trial/" target="_blank" rel="noopener noreferrer">Scripting Cloud Foundry activities in trial</A>.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=pyV_2G5MOTk&amp;t=00h24m30s" target="_blank" rel="nofollow noopener noreferrer">00:24:30</A> Moving now to the task at hand for this episode, which was to fix and enhance the Node.js script that we wrote in the previous episode (&lt;ahref="<A href="https://bit.ly/handsonsapdev#ep51" target="_blank" rel="nofollow noopener noreferrer">https://bit.ly/handsonsapdev#ep51</A>"&gt;Ep.51) to call the business rule service we’d created.<BR />
<BR />
I’d already modified the OAuth token request credentials to match the new Business Rules service setup, so we first ran the script to remind ourselves of what the problem was - a 401 ‘unauthorized’ error.<BR />
<BR />
The problem had been that I hadn’t properly set the defaults on the request object I’d set up. I’d written this:<BR />
<PRE><CODE>req = request.defaults({<BR />
  Authorization: 'Bearer ' + token.accessToken,<BR />
}),</CODE></PRE><BR />
but of course I wanted to set default headers (of which <CODE>Authorization</CODE> is one), so it should have been like this:<BR />
<PRE><CODE>req = request.defaults({<BR />
  headers: {<BR />
    Authorization: 'Bearer ' + token.accessToken,<BR />
  }<BR />
}),</CODE></PRE><BR />
What a fool.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=pyV_2G5MOTk&amp;t=00h27m50s" target="_blank" rel="nofollow noopener noreferrer">00:27:50</A> Explaining what parts of the script I was not particularly enamoured about - specifically the hard-coding of the OAuth credential information (and, worse, the repetition of it, seeing that it’s already stored in my <CODE>~/.netrc</CODE> file), and the lazy way of specifying the URLs for the authorisation and runtime API endpoints.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=pyV_2G5MOTk&amp;t=00h29m55s" target="_blank" rel="nofollow noopener noreferrer">00:29:55</A> To address the first of these issues, there’s a nice <A href="https://www.npmjs.com/package/netrc" target="_blank" rel="nofollow noopener noreferrer">netrc</A> package that we can use. Thisallows us to get rid of the hard coded section that looks like this:<BR />
<PRE><CODE>client = new oauth2client({<BR />
  clientId: 'sb-clone-b9cdd759-e0ad-4f1d-b0be-b38f2da71f95!b34464|bpmrulebroker!b2466',<BR />
  clientSecret: 'xs+ExbQiieTZLBX857nQOGkbKj4=',<BR />
  accessTokenUri: 'https://qmacrosubdomain.authentication.eu10.hana.ondemand.com/oauth/token'<BR />
})</CODE></PRE><BR />
and replace it with this:<BR />
<PRE><CODE>const<BR />
  netrc = require('netrc'),<BR />
  ...<BR />
  uaaHost = 'i347491trial.authentication.eu10.hana.ondemand.com',<BR />
  authInfo = new netrc()[uaaHost],<BR />
<BR />
  client = new oauth2client({<BR />
    clientId: authInfo.login,<BR />
    clientSecret: authInfo.password,<BR />
    ...<BR />
  })</CODE></PRE><BR />
Much neater!<BR />
<BR />
<A href="https://www.youtube.com/watch?v=pyV_2G5MOTk&amp;t=00h37m00s" target="_blank" rel="nofollow noopener noreferrer">00:37:00</A> After a brief bit of confusion where I mistook ‘uri’ for ‘uri-js’, we light upon the <A href="https://npmjs.com/package/uri-js" target="_blank" rel="nofollow noopener noreferrer">uri-js</A>package which will help us manage our URLs more cleanly, to address the second of the issues.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=pyV_2G5MOTk&amp;t=00h37m40s" target="_blank" rel="nofollow noopener noreferrer">00:37:40</A> While riffing on the fact that the ‘http(s)’ part of a URL is called the ‘<STRONG>scheme</STRONG>’, I digress slightly into other schemes,and reflecting on the <A href="https://en.wikipedia.org/wiki/Gopher_(protocol)" target="_blank" rel="nofollow noopener noreferrer">gopher</A> protocol, which <SPAN class="mention-scrubbed">jbm1991</SPAN> points out is still in use today. Who knew?! I also mention a couple of old browsers that I used to use, <A href="https://en.wikipedia.org/wiki/Cello_(web_browser)" target="_blank" rel="nofollow noopener noreferrer">Cello</A> and <A href="https://en.wikipedia.org/wiki/ViolaWWW" target="_blank" rel="nofollow noopener noreferrer">Viola</A>. Gosh.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=pyV_2G5MOTk&amp;t=00h38m20s" target="_blank" rel="nofollow noopener noreferrer">00:38:20</A> Using this ‘uri-js’ module, we can rewrite the opaque URL strings and construct them, instead, like this for the OAuth token request endpoint:<BR />
<PRE><CODE>const<BR />
  uri = require('uri-js'),<BR />
  ...<BR />
  uaaHost = 'i347491trial.authentication.eu10.hana.ondemand.com',<BR />
  ...<BR />
  client = new oauth2client({<BR />
    ...<BR />
    accessTokenUri: uri.serialize({<BR />
      scheme: 'https',<BR />
      host: uaaHost,<BR />
      path: '/oauth/token'<BR />
    })<BR />
  })</CODE></PRE><BR />
and like this, for the Business Rules runtime API base endpoint:<BR />
<PRE><CODE>runtimeApiEndpoint = uri.serialize({<BR />
  scheme: 'https',<BR />
  host: 'bpmruleruntime.cfapps.eu10.hana.ondemand.com',<BR />
  path: '/rules-service/rest'<BR />
})</CODE></PRE><BR />
(remember that all of the <A href="https://api.sap.com/api/SAP_CF_BusinessRules_Runtime_V2/resource" target="_blank" rel="noopener noreferrer">Cloud Foundry Rule Execution API resources</A> have a base path of <CODE>/rules-service/rest</CODE> - we double-check this by looking into the environment configuration for my ‘EU10’ environment.)<BR />
<BR />
<A href="https://www.youtube.com/watch?v=pyV_2G5MOTk&amp;t=00h51m10s" target="_blank" rel="nofollow noopener noreferrer">00:51:10</A> Thinking about a further possible enhancement, specifically how we’d go about caching the OAuth token once received, instead of requesting a new one each time, which is what we’re doing right now. This leads into a small investigation as to whether requesting a new token returns a new one each time, which (after some confusion based on foolishness on my part) it appears it does, sending a fresh expiration (43199 seconds) each time (this is what <SPAN class="mention-scrubbed">huseyin.dereli</SPAN> had already guessed).<BR />
<BR />
Here’s what the entire contents of the retrieved token object look like - there’s plenty for us to be able to use to cache and calculate remaining lifetime:<BR />
<PRE><CODE>ClientOAuth2Token {<BR />
  client:<BR />
   ClientOAuth2 {<BR />
     options:<BR />
      { clientId:<BR />
         'sb-clone-fe154511-fa4d-4b59-9865-92404f5ae664!b35963|bpmrulebroker!b2466',<BR />
        clientSecret: 'KreSs824GXFFPJy8WaAVWOPmI/w=',<BR />
        accessTokenUri:<BR />
         'https://i347491trial.authentication.eu10.hana.ondemand.com/oauth/token' },<BR />
     request: [Function: request],<BR />
     code: CodeFlow { client: [Circular] },<BR />
     token: TokenFlow { client: [Circular] },<BR />
     owner: OwnerFlow { client: [Circular] },<BR />
     credentials: CredentialsFlow { client: [Circular] },<BR />
     jwt: JwtBearerFlow { client: [Circular] } },<BR />
  data:<BR />
   { access_token:<BR />
      'eyJhbGciO...',<BR />
     token_type: 'bearer',<BR />
     id_token:<BR />
      'eyJhbGciO...',<BR />
     refresh_token: '9e0de6aec13a4788871b6b3ce33c5e32-r',<BR />
     expires_in: 43199,<BR />
     scope:<BR />
      'bpmrulecompiler!t2466.RuleCompiler.JavaCompile bpmrulecompiler!t2466.RuleCompiler.SqlCompile openid bpmrulesqlcompiler!t2466.RuleSqlCompiler.SqlCompile bpmrulerepository!t2466.RuleRepository.SuperUser bpmruleruntime!t2466.RuleRuntime.SuperUser',<BR />
     jti: '2acab2bd037a429dbe805d9f90155cdd' },<BR />
  tokenType: 'bearer',<BR />
  accessToken:<BR />
   'eyJhbGciO...',<BR />
  refreshToken: '9e0de6aec13a4788871b6b3ce33c5e32-r',<BR />
  expires: 2020-02-07T23:50:54.001Z }</CODE></PRE><BR />
(This, by the way, also explains why I was almost certain I’d seen an actual timestamp in the expiry information before now, whereas today I didn’t. It’s because the date - in this case <CODE>2020-02-07T23:50:54.001Z</CODE> - is part of the object properties, and not returned in the <CODE>access_token</CODE> property itself.)<BR />
<BR />
This is a nice place to bring the stream to an end, and in fact that is where it does end! I hope you enjoyed it, and that it inspires you to think a bit more about OAuth, tokens and related topics over the weekend. Happyruminating!
