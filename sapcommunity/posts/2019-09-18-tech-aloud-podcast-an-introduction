2019-09-18-tech-aloud-podcast-an-introduction
Tech Aloud podcast - an introduction
technology-blog-sap
2019-09-18
https://community.sap.com/t5/technology-blogs-by-sap/tech-aloud-podcast-an-introduction/ba-p/13403583
<EM>I started a new podcast called Tech Aloud, where I read aloud blog posts and articles so you can consume them on the go. There's no specific theme to the episodes I've published so far ... or is there?</EM><BR />
<BR />
<A href="https://anchor.fm/tech-aloud" target="_blank" rel="nofollow noopener noreferrer">Tech Aloud</A> is a humble and simple new podcast that I've created to satisfy an itch - I wanted to use travel time to consume (in an audio format) articles and blog posts that I probably wouldn't otherwise get time to sit down read. There simply isn't enough time to keep up with all the interesting stuff that's published.<BR />
<BR />
There wasn't a podcast that did that, so I created one, as I'm sure there are folks amongst you that are like me and also want to consume more, on the go.<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2019/09/2310259-1568661278464-ed94fe70b513e.jpeg" height="216" width="216" /><BR />
<BR />
Anyway, you can read more about it here in this other post on my home blog: <A href="https://qmacro.org/2019/09/17/new-podcast-tech-aloud/" target="_blank" rel="nofollow noopener noreferrer">New podcast - Tech Aloud</A> which should tell you all you need to know, like how to subscribe (there's a growing list of podcast services there where it's already available), and a little bit more about the general idea.<BR />
<BR />
Including the short introductory episode, <A href="https://anchor.fm/tech-aloud/episodes/Welcome-to-Tech-Aloud-e5ddsh" target="_blank" rel="nofollow noopener noreferrer">Welcome to Tech Aloud</A>, I've recorded and published 6 episodes so far. I've dipped into my article &amp; blog post bookmarks and just recorded the first ones that jumped out at me. So there's definitely some randomness to what I've picked so far, from a practical perspective, but I've noticed a theme, or at least a relationship, amongst the episodes so far (this theme will change, I'm sure, over the subsequent episodes!) and thought I'd highlight it.<BR />
<BR />
Here are the titles of the first podcast episodes thus far, along with the original article or blog post sources:<BR />
<UL><BR />
 	<LI>?<A href="https://anchor.fm/tech-aloud/episodes/Its-Steampunk-now---Harald-Kuck---20-Aug-2019-e5de5m" target="_blank" rel="nofollow noopener noreferrer">Itâ€™s Steampunk now - Harald Kuck - 20 Aug 2019</A><BR />
Source: <A href="https://blogs.sap.com/2019/08/20/its-steampunk-now/" target="_blank" rel="noopener noreferrer">https://blogs.sap.com/2019/08/20/its-steampunk-now/</A></LI><BR />
 	<LI>?<A href="https://anchor.fm/tech-aloud/episodes/The-Standard-of-Code-Review---Googles-Engineering-Practices-documentation-e5deiv" target="_blank" rel="nofollow noopener noreferrer">The Standard of Code Review - Google's Engineering Practices documentation</A><BR />
Source: <A href="https://google.github.io/eng-practices/review/reviewer/standard.html" target="_blank" rel="nofollow noopener noreferrer">https://google.github.io/eng-practices/review/reviewer/standard.html</A></LI><BR />
 	<LI>?<A href="https://anchor.fm/tech-aloud/episodes/Domain-Specific-Languages-Guide---Martin-Fowler---28-Aug-2019-e5do0b" target="_blank" rel="nofollow noopener noreferrer">Domain-Specific Languages Guide - Martin Fowler - 28 Aug 2019</A><BR />
Source: <A href="https://www.martinfowler.com/dsl.html" target="_blank" rel="nofollow noopener noreferrer">https://www.martinfowler.com/dsl.html</A></LI><BR />
 	<LI>?<A href="https://anchor.fm/tech-aloud/episodes/DSL-Q--A---Martin-Fowler---9-Sep-2008-e5do2c" target="_blank" rel="nofollow noopener noreferrer">DSL Q &amp; A - Martin Fowler - 9 Sep 2008</A><BR />
Source: <A href="https://www.martinfowler.com/bliki/DslQandA.html" target="_blank" rel="nofollow noopener noreferrer">https://www.martinfowler.com/bliki/DslQandA.html</A></LI><BR />
 	<LI>?<A href="https://anchor.fm/tech-aloud/episodes/The-Simplest-Thing-that-Could-Possibly-Work--A-conversation-with-Ward-Cunningham--Part-V---Bill-Venners-e5dpts" target="_blank" rel="nofollow noopener noreferrer">The Simplest Thing that Could Possibly Work, A conversation with Ward Cunningham, Part V - Bill Venners</A><BR />
Source: <A href="https://www.artima.com/intv/simplest.html" target="_blank" rel="nofollow noopener noreferrer">https://www.artima.com/intv/simplest.html</A></LI><BR />
</UL><BR />
I included <SPAN class="mention-scrubbed">harald.kuck</SPAN>'s specific post on Steampunk because it was something that I'd wanted to read soon but hadn't yet got round to. Nice work Harald and team!<BR />
<BR />
But the other articles are more general, and some are what I'd call classics.<BR />
<BR />
<A name="dsls" target="_blank"></A>The Domain Specific Language Q&amp;A from Martin Fowler is already over a decade old but still super relevant - perhaps even more relevant - today. I am mindful of internal DSLs almost every day, when I use the SAP Cloud Application Programming Model (CAP), specifically in the Node.js flavour. If you look at the source code of some of the core libraries, you'll find stylised JavaScript that can be considered, at least to some extent, an internal DSL.<BR />
<BR />
You don't even have to look behind the curtain of CAP Node.js to see an internal DSL standing proud - look at how the CDS Query Language (CQL) is made available almost as a "little language" within the JavaScript that you write inside of <A href="https://help.sap.com/viewer/65de2977205c403bbc107264b8eccf4b/Cloud/en-US/94c7b69cc4584a1a9dfd9cb2da295d5e.html" target="_blank" rel="noopener noreferrer">custom handlers</A>. There's a simple example of this in Step 10 of the <A href="https://developers.sap.com" target="_blank" rel="noopener noreferrer">developers.sap.com</A> tutorial <A href="https://developers.sap.com/tutorials/cp-apm-nodejs-create-service.html" target="_blank" rel="noopener noreferrer">Create a Business Service with Node.js using Visual Studio Code</A> (look at the UPDATE mechanism):<BR />
<PRE class="language-javascript"><CODE>module.exports = (srv) =&gt; {<BR />
<BR />
  const {Books} = cds.entities ('my.bookshop')<BR />
<BR />
  // Reduce stock of ordered books<BR />
  srv.before ('CREATE', 'Orders', async (req) =&gt; {<BR />
    const order = req.data<BR />
    if (!order.amount || order.amount &lt;= 0)  return req.error (400, 'Order at least 1 book')<BR />
    const tx = cds.transaction(req)<BR />
    const affectedRows = await tx.run (<BR />
      UPDATE (Books)<BR />
        .set   ({ stock: {'-=': order.amount}})<BR />
        .where ({ stock: {'&gt;=': order.amount},/*and*/ ID: order.book_ID})<BR />
    )<BR />
    if (affectedRows === 0)  req.error (409, "Sold out, sorry")<BR />
  })<BR />
<BR />
  // Add some discount for overstocked books<BR />
  srv.after ('READ', 'Books', each =&gt; {<BR />
    if (each.stock &gt; 111)  each.title += ' -- 11% discount!'<BR />
  })<BR />
<BR />
}</CODE></PRE><BR />
Moreover, for those forward thinking enough to embrace the CDS REPL (see my post <A href="https://blogs.sap.com/2018/03/26/monday-morning-thoughts-cloud-native/" target="_blank" rel="noopener noreferrer">Monday morning thoughts: cloud native</A> for more on REPLs), there's a rich seam of CDS API just ready to be mined - look at this tiny example from Getting Started - Define Services:<BR />
<PRE class="language-javascript"><CODE>cds.load('srv/cat-service') .then (cds.compile.to.edmx)</CODE></PRE><BR />
While not a complete internal DSL it sure feels like a language specifically designed to <STRONG>flow</STRONG>, especially in the way that it positively embraces and even celebrates whitespace.<BR />
<BR />
Talking of flow, the SAP Cloud SDK comes to mind. It has a wonderfully <A href="https://en.wikipedia.org/wiki/Fluent_interface" target="_blank" rel="nofollow noopener noreferrer">fluent interface</A> which you can see in this simple example (taken from a tutorial that will feature in one of this year's SAP TechEd App Space missions, so don't forget to come by the Developer Garage next week in Las Vegas!):<BR />
<PRE class="language-javascript"><CODE>BusinessPartnerAddress<BR />
        .requestBuilder()<BR />
        .getAll()<BR />
        .select(<BR />
                BusinessPartnerAddress.BUSINESS_PARTNER,<BR />
                BusinessPartnerAddress.ADDRESS_ID,<BR />
                BusinessPartnerAddress.CITY_NAME,<BR />
        )<BR />
        .execute({url:'http://localhost:3000/v2'})<BR />
        .then(xs =&gt; xs.map(x =&gt; x.cityName))<BR />
        .then(console.log)</CODE></PRE><BR />
Look at the way that chain of calls "flows" from one part to the next - some parts being provided by custom functions, others by language features such as 'then'.<BR />
<BR />
In a nice reference that completes the circuit loop, it may delight you to know that "fluent interface" was in fact co-coined by the author of the two items on DSLs that feature in the Tech Aloud episodes so far - <A href="https://martinfowler.com/" target="_blank" rel="nofollow noopener noreferrer">Martin Fowler</A>.<BR />
<BR />
Martin Fowler is one seriously big thinker. Another is Ward Cunningham (as one of my all-time heroes, I'd made it my mission to meet him at OSCON, which I did in 2003), inventor of the Wiki, and pioneer of design patterns and extreme programming (XP).<BR />
<BR />
There's a multi-part interview that <A href="https://twitter.com/bvenners" target="_blank" rel="nofollow noopener noreferrer">Bill Venners</A> did with Ward, and the conversation and thinking is wonderful. If you want to read more from that interview, find the other parts (I - IV) here: <A href="https://www.artima.com/intv/simplest.html" target="_blank" rel="nofollow noopener noreferrer">https://www.artima.com/intv/simplest.html</A>.<BR />
<BR />
And moving on from thinking about writing "the simplest thing that could possible work", how about reviewing it? This is where the Google Code Review standards come in. Google released to the public their Code Review guidelines very recently, and I was keen to take a look. So I've decided to read through each of the parts in <A href="https://google.github.io/eng-practices/review/reviewer/" target="_blank" rel="nofollow noopener noreferrer">How to do a code review</A>, as wisdom that we might all be able to learn from (in fact as we speak I've got the second part of that series waiting to publish on the podcast right now).<BR />
<BR />
Anyway, that's about it for now. Please consider subscribing to the <A href="https://anchor.fm/tech-aloud" target="_blank" rel="nofollow noopener noreferrer">Tech Aloud podcast</A> - it's already available for example on <A href="https://player.fm/series/tech-aloud" target="_blank" rel="nofollow noopener noreferrer">Player FM</A>, <A href="https://pca.st/kyepz7uy" target="_blank" rel="nofollow noopener noreferrer">Pocket Casts</A>, <A href="https://open.spotify.com/show/5l4AR3Q3HKZEpE7x9j0tdJ" target="_blank" rel="nofollow noopener noreferrer">Spotify</A>, <A href="https://tunein.com/podcasts/Technology-Podcasts/Tech-Aloud-p1251488/" target="_blank" rel="nofollow noopener noreferrer">TuneIn</A>, and (soon, fingers crossed!) Apple iTunes Podcasts. Of course, you can simply take the podcast RSS feed URL and plug it into your own favourite podcast player:<BR />
<BR />
<A href="https://anchor.fm/s/e5dc36c/podcast/rss" target="_blank" rel="nofollow noopener noreferrer">https://anchor.fm/s/e5dc36c/podcast/rss</A><BR />
<BR />
Thanks!<BR />
<BR />
&nbsp;
