2019-03-19-annotated-links-episode-7-of-hands-on-sap-dev-with-qmacro
Annotated links: Episode 7 of Hands-on SAP dev with qmacro
technology-blog-sap
2019-03-19
https://community.sap.com/t5/technology-blogs-by-sap/annotated-links-episode-7-of-hands-on-sap-dev-with-qmacro/ba-p/13420995
<EM>This is a searchable description of the content of a live stream recording, specifically <STRONG>"Episode 7 - Digging into the language server protocol, cds-lsp and Vim"</STRONG> in the "<A href="https://bit.ly/handsonsapdev" target="_blank" rel="nofollow noopener noreferrer">Hands-on SAP dev with qmacro</A>" series. There are links directly to specific highlights in the video recording. For links to annotations of other episodes, please see the "<A href="https://bit.ly/handsonsapdev#replays" target="_blank" rel="nofollow noopener noreferrer">Catch the replays</A>" section of the series blog post.</EM><BR />
<BR />
This episode, titled "<A href="https://bit.ly/handsonsapdev#ep7" target="_blank" rel="nofollow noopener noreferrer">Digging into the language server protocol, cds-lsp and Vim</A>", was streamed live on Wed 27 Feb 2019 and is approximately one hour in length. The stream recording is <A href="https://www.youtube.com/watch?v=WLkFAtgEWs8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0" target="_blank" rel="nofollow noopener noreferrer">available on YouTube</A>.<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2019/03/Screen-Shot-2019-03-19-at-08.22.28-1.png" /><BR />
<BR />
Below is a brief synopsis, and links to specific highlights - use these links to jump directly to particular places of interest in the recording, based on 'hh:mm:ss' style timestamps.<BR />
<H2 id="brief-synopsis" id="toc-hId-930595045">Brief synopsis</H2><BR />
One of the things we looked at briefly in the previous episode was the language server protocol (LSP) implementation for the CDS language, in the VS Code extension. In this midweek episode we explore getting a Vim LSP client working and connected to the cds-lsp server.<BR />
<H2 id="links-to-specific-highlights" id="toc-hId-734081540">Links to specific highlights</H2><BR />
<STRONG><A href="https://www.youtube.com/watch?v=WLkFAtgEWs8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h00m22s" target="_blank" rel="nofollow noopener noreferrer">00:00:22</A>:</STRONG> Talking about the occasional midweek slot, compared with the regular Friday slot. Remember - Friday is the regular slot and we sometimes do other slots too midweek.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=WLkFAtgEWs8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h03m08s" target="_blank" rel="nofollow noopener noreferrer">00:03:08</A>:</STRONG> Showing the <A href="https://calendar.google.com/calendar/r?cid=MGFjbzlnbXQzYTZyMWNjMmJoYTZiczlhM2NAZ3JvdXAuY2FsZW5kYXIuZ29vZ2xlLmNvbQ" target="_blank" rel="nofollow noopener noreferrer">Google Calendar</A> that I maintain for the live stream episodes, to which you can subscribe and get notifications of upcoming episodes. More info here: <A class="uri" href="http://bit.ly/handsonsapdev#upcoming" target="_blank" rel="nofollow noopener noreferrer">http://bit.ly/handsonsapdev#upcoming</A>.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=WLkFAtgEWs8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h04m05s" target="_blank" rel="nofollow noopener noreferrer">00:04:05</A>:</STRONG> Starting at the <A href="https://tools.hana.ondemand.com/#cloud" target="_blank" rel="nofollow noopener noreferrer">SAP Development Tools</A> page for cloud topics, looking at the details of what's on offer with the "CDS Language Support for Visual Studio Code" extension.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=WLkFAtgEWs8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h04m50s" target="_blank" rel="nofollow noopener noreferrer">00:04:50</A>:</STRONG> Looking inside the extension download, by renaming the file, changing the extension <CODE>vsix</CODE> to <CODE>tgz</CODE> because the extension file is actually a gzipped tarball. Now we can unpack it into a temporary folder to have a look around.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=WLkFAtgEWs8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h06m00s" target="_blank" rel="nofollow noopener noreferrer">00:06:00</A>:</STRONG> We see that there are two Node.js modules in the <CODE><a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a></CODE> namespace - <CODE>cds-compiler</CODE> and <CODE>cds-lsp</CODE>.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=WLkFAtgEWs8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h06m40s" target="_blank" rel="nofollow noopener noreferrer">00:06:40</A>:</STRONG> Noting the differences between versions of these two modules in the VSIX extension and those in the latest released version of <CODE><a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a>/cds</CODE> a few days previously.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=WLkFAtgEWs8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h07m50s" target="_blank" rel="nofollow noopener noreferrer">00:07:50</A>:</STRONG> Starting up VS Code to examine the extension as installed, including a quick look at the Changelog.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=WLkFAtgEWs8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h08m45s" target="_blank" rel="nofollow noopener noreferrer">00:08:45</A>:</STRONG> Noting that I've taken a slightly more recent version of the <CODE><a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a>/cds-lsp</CODE> module for the purposes of this episode, as we need a slightly newer version than the one that's in the 1.0.36 release of the extension, which is 1.4.24. The extension is about to be updated (at the time of the live stream) with a new version of the <CODE>cds-compiler</CODE> and <CODE>cds-lsp</CODE> modules.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=WLkFAtgEWs8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h09m42s" target="_blank" rel="nofollow noopener noreferrer">00:09:42</A>:</STRONG> Examining the details of what the extension offers, to see what sort of language server features we should be looking for (noting that syntax highlighting doesn't come from the <CODE>cds-lsp</CODE> package, but from the syntaxes files in the extension, taking a look at a snippet of the configuration for 'Association to many').<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=WLkFAtgEWs8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h12m15s" target="_blank" rel="nofollow noopener noreferrer">00:12:15</A>:</STRONG> Having a look at the <A href="https://langserver.org" target="_blank" rel="nofollow noopener noreferrer">Language Server Protocol homepage</A> to understand what it is and does.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=WLkFAtgEWs8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h13m34s" target="_blank" rel="nofollow noopener noreferrer">00:13:34</A>:</STRONG> Having a quick look at the things we should be able to achieve when we wire up a language client in Vim with the language server from <CODE><a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a>/cds-lsp</CODE> via the Language Server Protocol (LSP), via a really simple CAP project with a <CODE>service.cds</CODE> and <CODE>model.cds</CODE> file: error highlighting, go-to-definition, find-references (and jumping to those references).<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=WLkFAtgEWs8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h18m00s" target="_blank" rel="nofollow noopener noreferrer">00:18:00</A>:</STRONG> Looking at my <CODE>.vim</CODE> folder, noting the packages including the 'languageclient' and 'fzf' packages which we looked at in <A href="https://bit.ly/handsonsapdev#ep1" target="_blank" rel="nofollow noopener noreferrer">episode 1</A> and which is a dependency of the 'languageclient' package.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=WLkFAtgEWs8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h19m00s" target="_blank" rel="nofollow noopener noreferrer">00:19:00</A>:</STRONG> The language client we are using for Vim is <A href="https://github.com/autozimu/LanguageClient-neovim" target="_blank" rel="nofollow noopener noreferrer">LanguageClient-neovim</A> which also works with regular Vim (as well as NeoVim). We look at a list of features the client supports, a quick start guide and some install documentation (I've already got this and 'fzf' installed).<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=WLkFAtgEWs8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h20m20s" target="_blank" rel="nofollow noopener noreferrer">00:20:20</A>:</STRONG> Loading up <CODE>model.cds</CODE> in Vim, noting that it initially looks very boring, no syntax highlighting or any error notifications.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=WLkFAtgEWs8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h21m00s" target="_blank" rel="nofollow noopener noreferrer">00:21:00</A>:</STRONG> Starting to modify our Vim configuration to connect up the language client to the <CODE><a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a>/cds-lsp</CODE>-based language server and looking inside the server package to find the <CODE>server.js</CODE> entrypoint.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=WLkFAtgEWs8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h23m00s" target="_blank" rel="nofollow noopener noreferrer">00:23:00</A>:</STRONG> Simply starting <CODE>node out/src/server.js</CODE> does nothing much at all, but supplying the <CODE>--stdio</CODE> option causes the language server to start listening.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=WLkFAtgEWs8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h23m30s" target="_blank" rel="nofollow noopener noreferrer">00:23:30</A>:</STRONG> Quick chat with my neighbour on whose drive I've parked my car temporarily. Oops!<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=WLkFAtgEWs8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h24m00s" target="_blank" rel="nofollow noopener noreferrer">00:24:00</A>:</STRONG> Understanding how to invoke the language server from the client, by looking at the sample configuration in the <A href="https://github.com/autozimu/LanguageClient-neovim/blob/next/INSTALL.md#5-configure-this-plugin" target="_blank" rel="nofollow noopener noreferrer">"Configure this plugin" section of the language client install guide</A>.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=WLkFAtgEWs8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h25m50s" target="_blank" rel="nofollow noopener noreferrer">00:25:50</A>:</STRONG> Going to the language client package directory (<CODE>./vim/bundle/languageclient</CODE>), where I've already unpacked the <CODE><a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a>/cds-lsp</CODE> package (noting that I have the old 1.4.24 version as well as the newer 2.0.1 version which we'll be using).<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=WLkFAtgEWs8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h26m50s" target="_blank" rel="nofollow noopener noreferrer">00:26:50</A>:</STRONG> Opening my Vim config file (in <CODE>.vimrc</CODE>) and adding some initial configuration thus:<BR />
<PRE><CODE>set runtimepath+=~/.vim/bundle/languageclient<BR />
<BR />
autocmd BufRead,BufNewFile *.cds setfiletype cds<BR />
<BR />
set hidden<BR />
let g:LanguageClient_serverCommands = {<BR />
    \ 'cds': [expand('~/.vim/bundle/languageclient/startcdslsp')]<BR />
    \ }</CODE></PRE><BR />
<STRONG><A href="https://www.youtube.com/watch?v=WLkFAtgEWs8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h31m09s" target="_blank" rel="nofollow noopener noreferrer">00:31:09</A>:</STRONG> Creating a <CODE>startcdslsp</CODE> in the same directory, that looks like this:<BR />
<DIV><BR />
<PRE class="sourceCode bash"><CODE class="sourceCode bash"><SPAN class="co">#!/bin/bash</SPAN><BR />
<BR />
<SPAN class="va">VERSION=</SPAN>2.0.1<BR />
<SPAN class="ex">node</SPAN> <SPAN class="st">"</SPAN><SPAN class="va">${HOME}</SPAN><SPAN class="st">/.vim/bundle/languageclient/cds-lsp-</SPAN><SPAN class="va">${VERSION}</SPAN><SPAN class="st">/out/src/server.js"</SPAN> --stdio</CODE></PRE><BR />
</DIV><BR />
This is what we need to start up the language server so that the language client can connect to it and start using its services.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=WLkFAtgEWs8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h32m25s" target="_blank" rel="nofollow noopener noreferrer">00:32:25</A>:</STRONG> Discussing a question about opening VS Code from a Docker container to edit files within it.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=WLkFAtgEWs8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h33m25s" target="_blank" rel="nofollow noopener noreferrer">00:33:25</A>:</STRONG> All the configuration we see in this episode is in my <A href="https://github.com/qmacro/dotvim" target="_blank" rel="nofollow noopener noreferrer">dotvim</A> repository.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=WLkFAtgEWs8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h34m15s" target="_blank" rel="nofollow noopener noreferrer">00:34:15</A>:</STRONG> Opening up the simple CAP project in Vim to see what happens now we have this basic configuration in place. Will anything happen? Yes! We see a message from the language client package:<BR />
<BR />
"[LC] Project root: /Users/i347491/local/projects/livestream/capm/lsp"<BR />
<BR />
That's all, so far though. I restored my saved configuration as I suspected I'd entered something incorrectly, and we then get the error highlighting!<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=WLkFAtgEWs8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h36m34s" target="_blank" rel="nofollow noopener noreferrer">00:36:34</A>:</STRONG> On removing the 'e' from 'entity' to cause an error, we see an 'error' symbol (an 'x') in the gutter on the left hand side, along with the error description at the bottom: "[Error][syntax-mismatched-token]Mismatched identifier, expecting ...". Success!<BR />
<BR />
The restored configuration also included this to ensure the gutter is shown:<BR />
<PRE><CODE>set signcolumn=yes</CODE></PRE><BR />
<STRONG><A href="https://www.youtube.com/watch?v=WLkFAtgEWs8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h38m05s" target="_blank" rel="nofollow noopener noreferrer">00:38:05</A>:</STRONG> Investigating more features, such as "go-to-definition" via the <CODE>LanguageClient#textDocument_definition()</CODE> command, which for now we call manually with <CODE>:call</CODE>, and also the "find-references" feature via the <CODE>LanguageClient#textDocument_references()</CODE> command, which shows references in a window that pops up at the bottom - using <CODE>fzf</CODE> for selection. Note that jumping to references also works across different files, as we saw here.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=WLkFAtgEWs8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h40m20s" target="_blank" rel="nofollow noopener noreferrer">00:40:20</A>:</STRONG> Back in the Vim config, mapping some keypresses as shortcuts for these commands:<BR />
<PRE><CODE>nnoremap &lt;silent&gt; gd :call LanguageClient#textDocument_definition()&lt;CR&gt;<BR />
nnoremap &lt;silent&gt; fr :call LanguageClient#textDocument_references()&lt;CR&gt;</CODE></PRE><BR />
This makes using the "go-to-definition" and "find-references" features much quicker and more comfortable.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=WLkFAtgEWs8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h42m15s" target="_blank" rel="nofollow noopener noreferrer">00:42:15</A>:</STRONG> Starting to turn our attention to syntax highlighting, which is done separately from the language server facilities, taking some hints from the <A href="http://learnvimscriptthehardway.stevelosh.com/chapters/45.html" target="_blank" rel="nofollow noopener noreferrer">Syntax Highlighting</A> chapter of <A href="http://learnvimscriptthehardway.stevelosh.com" target="_blank" rel="nofollow noopener noreferrer">Learn Vimscript the Hard Way</A>. We also use the resource <A href="https://vim.fandom.com/wiki/Creating_your_own_syntax_files" target="_blank" rel="nofollow noopener noreferrer">Creating your own syntax files</A>.<BR />
<BR />
We end up with this, in <CODE>.vim/syntax/cds.vim</CODE>:<BR />
<PRE><CODE>if exists("b:current_syntax")<BR />
    finish<BR />
endif<BR />
<BR />
let b:current_syntax = "cds"<BR />
<BR />
syntax keyword cdsKeyword entity namespace key to on<BR />
syntax keyword cdsType Integer String Association to Decimal Boolean<BR />
highlight link cdsKeyword Keyword<BR />
highlight link cdsType Constant</CODE></PRE>
