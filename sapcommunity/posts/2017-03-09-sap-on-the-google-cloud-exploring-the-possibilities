2017-03-09-sap-on-the-google-cloud-exploring-the-possibilities
SAP on the Google Cloud - exploring the possibilities
technology-blog-members
2017-03-09
https://community.sap.com/t5/technology-blogs-by-members/sap-on-the-google-cloud-exploring-the-possibilities/ba-p/13319576
<I><SPAN style="font-weight: 400">The era of the software defined datacentre is truly upon us. The </SPAN></I><A href="http://www.bluefinsolutions.com/blogs/lloyd-palfrey/march-2017/sap-on-google-cloud-platform-three-magic-number" target="_blank" rel="nofollow noopener noreferrer"><I><SPAN style="font-weight: 400">announcement from Google yesterday</SPAN></I></A><I><SPAN style="font-weight: 400">, with the ability to manage and run SAP systems on their Compute Engine infrastructure, inspired us to look into what the already-established Compute Engine API offers us, and have a bit of fun in the process. </SPAN></I><BR />
<BR />
<B>Devops &amp; use cases</B><BR />
<BR />
<SPAN style="font-weight: 400">With the advent of developer operations, or "</SPAN><A href="http://www.bluefinsolutions.com/blogs/dj-adams/february-2017/reaching-out-to-the-new-new-kingmakers" target="_blank" rel="nofollow noopener noreferrer"><SPAN style="font-weight: 400">devops</SPAN></A><SPAN style="font-weight: 400">", Basis and developer activities are no longer separate, but are often carried out together. Considering this modern proximity and the possibilities it offers, here are a couple of use cases where access to an API at this level would really bring value with the ability to directly control virtual machine instances:</SPAN><BR />
<BR />
<SPAN style="font-weight: 400">Cost saving: A typical SAP environment will have many tiers: Sandbox, Development, Quality Assurance, Training, Pre-Production and Production being the most typical. Some of these tiers will be used constantly (Production, obviously), but others less frequently. Imagine giving your key developers or super users the ability to startup or shutdown the Quality Assurance or Training systems without needing to seek approval or finding the right person to do it. This has the potential to result in significant cost savings, in Virtual Machine (VM) running costs as well as from a process perspective.</SPAN><BR />
<BR />
<SPAN style="font-weight: 400">On-demand performance boost: Consider the scenario where you have a number of batch processes running at given times during the day and those processes can impact your end users. Rather than have your end users compete for processing power on the existing instances of your Production system, spin up a few ad-hoc instances that are appropriate for the workload, use them for the batch run, and then shut them down again. Automatically.</SPAN><BR />
<BR />
<B>Taking the API for a spin</B><BR />
<BR />
<SPAN style="font-weight: 400">The </SPAN><A href="https://cloud.google.com/compute/docs/reference/latest/" target="_blank" rel="nofollow noopener noreferrer"><SPAN style="font-weight: 400">Compute Engine API</SPAN></A><SPAN style="font-weight: 400"> is multi-faceted and can be invoked in different ways: a REST-based HTTP interface is one way, and a command-line tool "gcloud" is another. We thought we'd kick these use case tyres and flex our ABAP fingers to put together a simple way to programatically start up and shut down SAP systems on the Google Cloud.</SPAN><BR />
<BR />
<SPAN style="font-weight: 400">You can play along too - the source code is available in this public </SPAN><A href="https://git.bluefinsolutions.com/mud-public/ABAPGcloud" target="_blank" rel="nofollow noopener noreferrer"><SPAN style="font-weight: 400">ABAPGcloud</SPAN></A><SPAN style="font-weight: 400"> repository. </SPAN><BR />
<BR />
<SPAN style="font-weight: 400">Just make sure that your SAP system is set to start on boot up, and that your VM is given full access to the Google API:</SPAN><BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2017/03/Screen-Shot-2017-03-09-at-10.55.16.png" height="109" width="289" /><BR />
<BR />
<SPAN style="font-weight: 400">Also, you'll want to deploy the ABAP mechanism to a system that will be up the whole time. Systems in the Production or Development tiers are good candidates.</SPAN><BR />
<BR />
<B>ABAP's not dead - it's controlling the cloud</B><BR />
<BR />
<SPAN style="font-weight: 400">Here's a short video of the solution in action - via the ABAP code, the Google Cloud VM instances can be listed, and started &amp; stopped. Simple!</SPAN><BR />
<BR />
<IFRAME width="560" height="315" src="https://www.youtube.com/embed/RuyRHRIVj3A" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen=""></IFRAME><BR />
<BR />
<SPAN style="font-weight: 400">The code is available via ABAPgit in a repository on our public-facing Mobility, UX &amp; Development Centre of Excellence (MUD COE) server:</SPAN><BR />
<BR />
<A href="https://git.bluefinsolutions.com/mud-public/ABAPGcloud/tree/master" target="_blank" rel="nofollow noopener noreferrer"><SPAN style="font-weight: 400"></SPAN></A><A href="https://git.bluefinsolutions.com/mud-public/ABAPGcloud/tree/master" target="test_blank" rel="nofollow noopener noreferrer">https://git.bluefinsolutions.com/mud-public/ABAPGcloud/tree/master</A><BR />
<BR />
<SPAN style="font-weight: 400">Here's a quick rundown of how the parts work together, by the author of this demo, Gregor Brett, our very own ABAP and Google Cloud API extraordinaire!</SPAN><BR />
<BR />
<SPAN style="font-weight: 400">It's using the "gcloud" command, which is available without further ado as long as API access has been granted as described above. The command is invoked via the classic "external command" facility (defined in transaction SM69) and programmatically via the SXPG_CALL_SYSTEM function. </SPAN><BR />
<BR />
<SPAN style="font-weight: 400">There are two main building blocks. The first is a global class </SPAN><A href="https://git.bluefinsolutions.com/mud-public/ABAPGcloud/blob/master/zcl_gcloud.clas.abap" target="_blank" rel="nofollow noopener noreferrer"><SPAN style="font-weight: 400">ZCL_GCLOUD</SPAN></A><SPAN style="font-weight: 400"> which wraps the external command facility in a usable package that allows Google Cloud VM instances to be listed, started and stopped. </SPAN><BR />
<BR />
<SPAN style="font-weight: 400">The second is a simple report </SPAN><A href="https://git.bluefinsolutions.com/mud-public/ABAPGcloud/blob/master/zgcloud.prog.abap" target="_blank" rel="nofollow noopener noreferrer"><SPAN style="font-weight: 400">ZGCLOUD</SPAN></A><SPAN style="font-weight: 400"> that utilises the global class. It creates an instance of that class pointing to our test Google Cloud Compute Engine project, where we have our VMs. It then uses the global class to initially retrieve the VM instances available, and displays them in classic ABAP List View (ALV) style. It also presents 'start' and 'stop' options which use the global class again to start or stop the VM instances selected.</SPAN><BR />
<BR />
<SPAN style="font-weight: 400">You can imagine that instead of this simple report, use of the global class could be embedded in an automated process that would fit well with the use cases described above.</SPAN><BR />
<BR />
<B>Over to you</B><BR />
<BR />
<SPAN style="font-weight: 400">The next step is up to you. How about exploring the REST approach to using the API? How might you improve the sample code? What other use cases can you come up with? Having the combination of simplicity and power at your fingertips is intoxicating. At least for people like you and me. So get creative and start exploring!</SPAN>
