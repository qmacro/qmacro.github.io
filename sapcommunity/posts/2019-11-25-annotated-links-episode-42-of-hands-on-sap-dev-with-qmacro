2019-11-25-annotated-links-episode-42-of-hands-on-sap-dev-with-qmacro
Annotated links: Episode 42 of Hands-on SAP dev with qmacro
technology-blog-sap
2019-11-25
https://community.sap.com/t5/technology-blogs-by-sap/annotated-links-episode-42-of-hands-on-sap-dev-with-qmacro/ba-p/13456130
<EM>This is a searchable description of the content of a live stream recording, specifically <STRONG>"Ep.42 - Impromptu stream on GitHub CAP Community work"</STRONG> in the "<A href="https://bit.ly/handsonsapdev" target="_blank" rel="nofollow noopener noreferrer">Hands-on SAP dev with qmacro</A>" series. There are links directly to specific highlights in the video recording. For links to annotations of other episodes, please see the "<A href="https://bit.ly/handsonsapdev#replays" target="_blank" rel="nofollow noopener noreferrer">Catch the replays</A>" section of the series blog post.</EM><BR />
<BR />
This episode was streamed live on Fri 01 Nov 2019 and is approximately 60 minutes in length. The stream recording is <A href="https://www.youtube.com/watch?v=jizaiV6EwzM&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;index=43" target="_blank" rel="nofollow noopener noreferrer">available on YouTube</A>.<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2019/11/Screenshot-2019-11-25-at-14.17.45.png" /><BR />
<BR />
Brief synopsis: After being unable to stream well enough since the Catalina upgrade I took the opportunity to investigate Lightstream, a Chrome extension for streaming. In this impromptu, unplanned stream I work through an issue assigned to me on the CAP Community repository.<BR />
<BR />
<SPAN style="font-size: 1rem">Note: Although the details can still be seen OK, this particular recording has some encoding and compression artifacts that were a result of me running my display at too high a resolution for the stream resolution target. I've fixed this now, and in fact reduced the artifact issue half way through this particular session too.</SPAN><BR />
<BR />
<A href="https://www.youtube.com/watch?v=jizaiV6EwzM&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h01m30s" target="_blank" rel="nofollow noopener noreferrer">00:01:30</A> Start to look at the work that is assigned to me on the <A href="https://bit.ly/cap-com" target="_blank" rel="nofollow noopener noreferrer">CAP Community GitHub repo</A>, which was issue #11 "<A href="https://github.com/sapmentors/cap-community/issues/11" target="_blank" rel="nofollow noopener noreferrer">Add 'calculated fields' example to /examples please</A>".<BR />
<BR />
<A href="https://www.youtube.com/watch?v=jizaiV6EwzM&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h03m00s" target="_blank" rel="nofollow noopener noreferrer">00:03:00</A> Looking at the <A href="https://chrome.google.com/webstore/detail/tiling-window-manager-for/aikaaejchodabfpkipfonnekofgepakh" target="_blank" rel="nofollow noopener noreferrer">Tiling Window Manager for Chrome OS</A>, and mentioning my modification of it that gives me the ability to increase and decrease the window gaps dynamically via keyboard shortcuts (I <A href="https://www.youtube.com/watch?v=KjeXVK7wVO4" target="_blank" rel="nofollow noopener noreferrer">recorded a brief demo of this</A>) - give me a shout if you're interested in learning more about this.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=jizaiV6EwzM&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h05m30s" target="_blank" rel="nofollow noopener noreferrer">00:05:30</A> Explaining the background to this Calculated Fields issue, by referring to a blog post I wrote as an extended reply to a <A href="https://answers.sap.com/questions/12845830/counting-associated-entities-using-cds.html" target="_blank" rel="noopener noreferrer">question</A> from <SPAN class="mention-scrubbed">pdominique-bio</SPAN>. The post is this one: "<A href="https://blogs.sap.com/2019/08/21/computed-field-example-in-cap/" target="_blank" rel="noopener noreferrer">Computed field example in CAP</A>" and describes one way of using computed properties.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=jizaiV6EwzM&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h10m00s" target="_blank" rel="nofollow noopener noreferrer">00:10:00</A> I've already forked the <A href="https://bit.ly/cap-com" target="_blank" rel="nofollow noopener noreferrer">CAP Community</A> repo and the first thing I do is to clone this fork. In this session you'll see how I keep a fork of a repo up to date.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=jizaiV6EwzM&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h12m15s" target="_blank" rel="nofollow noopener noreferrer">00:12:15</A> In order to keep the fork up to date, I need to reference the upstream source repo. The upstream repo is the original repo at <A class="uri" href="https://github.com/sapmentors/cap-community" target="_blank" rel="nofollow noopener noreferrer">https://github.com/sapmentors/cap-community</A> and my fork is at <A class="uri" href="https://github.com/qmacro/cap-community" target="_blank" rel="nofollow noopener noreferrer">https://github.com/qmacro/cap-community</A>.<BR />
<BR />
Right now, there's no reference in my clone to the upstream repo, as I can see with this command, which shows all the remote sources:<BR />
<DIV><BR />
<PRE class="sourceCode bash"><CODE class="sourceCode bash"><SPAN class="ex">-</SPAN><SPAN class="op">&gt;</SPAN> git remote -v<BR />
<SPAN class="ex">origin</SPAN>  git@github.com:qmacro/cap-community.git (fetch)<BR />
<SPAN class="ex">origin</SPAN>  git@github.com:qmacro/cap-community.git (push)</CODE></PRE><BR />
</DIV><BR />
Only the "origin" is shown, which is my fork that is the source of this clone on my local machine.<BR />
<BR />
To refer to the upstream repo, I add a remote, and call it "upstream", by convention:<BR />
<DIV><BR />
<PRE class="sourceCode bash"><CODE class="sourceCode bash"><SPAN class="ex">-</SPAN><SPAN class="op">&gt;</SPAN> git remote add upstream git@github.com:sapmentors/cap-community.git</CODE></PRE><BR />
</DIV><BR />
Now when I check again to see the remotes that are defined, I see both the origin and the upstream:<BR />
<DIV><BR />
<PRE class="sourceCode bash"><CODE class="sourceCode bash"><SPAN class="ex">-</SPAN><SPAN class="op">&gt;</SPAN> git remote -v<BR />
<SPAN class="ex">origin</SPAN>  git@github.com:qmacro/cap-community.git (fetch)<BR />
<SPAN class="ex">origin</SPAN>  git@github.com:qmacro/cap-community.git (push)<BR />
<SPAN class="ex">upstream</SPAN>        git@github.com:sapmentors/cap-community.git (fetch)<BR />
<SPAN class="ex">upstream</SPAN>        git@github.com:sapmentors/cap-community.git (push)</CODE></PRE><BR />
</DIV><BR />
<A href="https://www.youtube.com/watch?v=jizaiV6EwzM&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h13m35s" target="_blank" rel="nofollow noopener noreferrer">00:13:35</A> At this stage, we see that my fork is behind the source (upstream) by a number of commits, so we have to bring the fork up to date and apply the upstream commits to it.<BR />
<BR />
This is what we do now, and the commands used are shown here, along with sample output.<BR />
<BR />
First we fetch the commits from upstream:<BR />
<DIV><BR />
<PRE class="sourceCode bash"><CODE class="sourceCode bash"><SPAN class="ex">-</SPAN><SPAN class="op">&gt;</SPAN> git fetch upstream<BR />
<SPAN class="ex">remote</SPAN>: Enumerating objects: 2, done.<BR />
<SPAN class="ex">remote</SPAN>: Counting objects: 100% (2/2), <SPAN class="kw">done</SPAN><SPAN class="ex">.</SPAN><BR />
<SPAN class="ex">Unpacking</SPAN> objects: 100% (5/5), <SPAN class="kw">done</SPAN><SPAN class="ex">.</SPAN><BR />
<SPAN class="ex">remote</SPAN>: Total 5 (delta 2), <SPAN class="ex">reused</SPAN> 2 (delta 2), <SPAN class="ex">pack-reused</SPAN> 3<BR />
<SPAN class="ex">From</SPAN> github.com:sapmentors/cap-community<BR />
 <SPAN class="ex">*</SPAN> [new branch]      master     -<SPAN class="op">&gt;</SPAN> upstream/master</CODE></PRE><BR />
</DIV><BR />
Next, we make sure we're on the "master" branch locally:<BR />
<DIV><BR />
<PRE class="sourceCode bash"><CODE class="sourceCode bash"><SPAN class="ex">-</SPAN><SPAN class="op">&gt;</SPAN> git checkout master<BR />
<SPAN class="ex">Already</SPAN> on <SPAN class="st">'master'</SPAN><BR />
<SPAN class="ex">Your</SPAN> branch is up-to-date with <SPAN class="st">'origin/master'</SPAN>.</CODE></PRE><BR />
</DIV><BR />
There's actually only the "master" branch right now anyway, as we can see:<BR />
<DIV><BR />
<PRE class="sourceCode bash"><CODE class="sourceCode bash"><SPAN class="ex">-</SPAN><SPAN class="op">&gt;</SPAN> git branch<BR />
<SPAN class="ex">*</SPAN> master</CODE></PRE><BR />
</DIV><BR />
Now we can merge the commits into the "master" branch of this clone of the fork:<BR />
<DIV><BR />
<PRE class="sourceCode bash"><CODE class="sourceCode bash"><SPAN class="ex">-</SPAN><SPAN class="op">&gt;</SPAN> git merge upstream/master<BR />
<SPAN class="ex">Updating</SPAN> 994fa05..81236e9<BR />
<SPAN class="ex">Fast-forward</SPAN><BR />
 <SPAN class="ex">README.md</SPAN> <SPAN class="kw">|</SPAN> <SPAN class="ex">3</SPAN> ++-<BR />
 [<SPAN class="ex">...</SPAN> other changes shown too ]<BR />
 <SPAN class="ex">.</SPAN><BR />
 <SPAN class="ex">.</SPAN><BR />
 <SPAN class="ex">.</SPAN></CODE></PRE><BR />
</DIV><BR />
Finally, we can push those changes to the origin, i.e. the fork that this local clone is from:<BR />
<DIV><BR />
<PRE class="sourceCode bash"><CODE class="sourceCode bash"><SPAN class="ex">-</SPAN><SPAN class="op">&gt;</SPAN> git push origin master<BR />
<SPAN class="ex">Total</SPAN> 0 (delta 0), <SPAN class="ex">reused</SPAN> 0 (delta 0)<BR />
<SPAN class="ex">To</SPAN> github.com:qmacro/cap-community.git<BR />
   <SPAN class="ex">994fa05..81236e9</SPAN>  master -<SPAN class="op">&gt;</SPAN> master</CODE></PRE><BR />
</DIV><BR />
Now our fork is up to date with the original source!<BR />
<BR />
<A href="https://www.youtube.com/watch?v=jizaiV6EwzM&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h17m10s" target="_blank" rel="nofollow noopener noreferrer">00:17:10</A> Creating the new directory for the example, with:<BR />
<DIV><BR />
<PRE class="sourceCode bash"><CODE class="sourceCode bash"><SPAN class="ex">-</SPAN><SPAN class="op">&gt;</SPAN> cds init --modules db,srv computed-field</CODE></PRE><BR />
</DIV><BR />
Subsequent exploration of what has been created shows us a nice fresh CAP Node.js project to start with.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=jizaiV6EwzM&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h18m45s" target="_blank" rel="nofollow noopener noreferrer">00:18:45</A> At this stage we start to refer to the <A href="https://blogs.sap.com/2019/08/21/computed-field-example-in-cap/" target="_blank" rel="noopener noreferrer">original blog post</A> and fill out the example code based upon the samples in that post, starting with the <CODE>data-model.cds</CODE> contents, following on with the <CODE>cat-service.cds</CODE> contents, which is where the computed field comes in.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=jizaiV6EwzM&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h23m10s" target="_blank" rel="nofollow noopener noreferrer">00:23:10</A> We check what the computed field definition has given us in at the service definition layer with <CODE>cds compile srv/cat-service.cds --to sql</CODE> and note that the <CODE>numberOfBooks</CODE> property really only exists at the service definition layer and not at the data model layer.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=jizaiV6EwzM&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h24m05s" target="_blank" rel="nofollow noopener noreferrer">00:24:05</A> Renaming the <CODE>.cds</CODE> files and references to match what's in the blog post.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=jizaiV6EwzM&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h24m40s" target="_blank" rel="nofollow noopener noreferrer">00:24:40</A> Compiling to EDMX, with <CODE>cds compile srv/service.cds --to edmx</CODE>, we can see that the <CODE>numberOfBooks</CODE> property has been automatically annotated as a <CODE>Core.Computed</CODE> property:<BR />
<DIV><BR />
<PRE class="sourceCode xml"><CODE class="sourceCode xml">      <SPAN class="kw">&lt;Annotations</SPAN><SPAN class="ot"> Target=</SPAN><SPAN class="st">"CatalogService.Authors/numberOfBooks"</SPAN><SPAN class="kw">&gt;</SPAN><BR />
        <SPAN class="kw">&lt;Annotation</SPAN><SPAN class="ot"> Term=</SPAN><SPAN class="st">"Core.Computed"</SPAN><SPAN class="ot"> Bool=</SPAN><SPAN class="st">"true"</SPAN><SPAN class="kw">/&gt;</SPAN><BR />
      <SPAN class="kw">&lt;/Annotations&gt;</SPAN></CODE></PRE><BR />
</DIV><BR />
Nice!<BR />
<BR />
<A href="https://www.youtube.com/watch?v=jizaiV6EwzM&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h25m10s" target="_blank" rel="nofollow noopener noreferrer">00:25:10</A> Starting to look at the service definition layer implementation, in the form of an event, by creating <CODE>service.js</CODE> alongside the <CODE>service.cds</CODE> file - the former will be taken automatically as an "implementation" for the latter.<BR />
<BR />
Note: Please refer to the <A href="https://blogs.sap.com/2019/08/21/computed-field-example-in-cap/" target="_blank" rel="noopener noreferrer">blog post</A> for details and discussion of the <CODE>service.js</CODE> implementation.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=jizaiV6EwzM&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h35m40s" target="_blank" rel="nofollow noopener noreferrer">00:35:40</A> Noting that <CODE>localhost</CODE> on the Crostini-hosted Linux VM is available to the parent host (Chrome OS) via a special hostname <CODE>&lt;containername&gt;.linux.test</CODE>, in my case, with the default Linux VM name, it's <A class="uri" href="http://penguin.linux.test" target="_blank" rel="nofollow noopener noreferrer">http://penguin.linux.test</A>.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=jizaiV6EwzM&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h37m55s" target="_blank" rel="nofollow noopener noreferrer">00:37:55</A> Looking briefly at the device I'm working on, which is the <A href="https://www.asus.com/uk/Mini-PCs/ASUS-Chromebox-3/" target="_blank" rel="nofollow noopener noreferrer">Asus Chromebox 3</A> running the excellent ChromeOS of course.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=jizaiV6EwzM&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h38m20s" target="_blank" rel="nofollow noopener noreferrer">00:38:20</A> Getting together some sample data for the example, in the form of CSV files. Luckily I remember there is some CSV data that we can use in one of the <A href="https://developers.sap.com/tutorials/cap-cloudsdk-3-basic-service.html" target="_blank" rel="noopener noreferrer">tutorials</A> from the <A href="https://developers.sap.com/mission.cap-s4hana-cloud-extension.html" target="_blank" rel="noopener noreferrer">SAP TechEd 2019 mission on CAP, Cloud SDK and S/4HANA extensions</A>.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=jizaiV6EwzM&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h41m15s" target="_blank" rel="nofollow noopener noreferrer">00:41:15</A> After adding the data, we run a <CODE>cds deploy</CODE> and restart the service, which now gives us some books and authors data. Lovely. And a quick test shows us that the computed field is indeed appearing and is filled with the correct data. Also lovely!<BR />
<BR />
<A href="https://www.youtube.com/watch?v=jizaiV6EwzM&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h44m15s" target="_blank" rel="nofollow noopener noreferrer">00:44:15</A> At this stage it's just time to add some helpful information to this example, in the form of a <A href="https://github.com/sapmentors/cap-community/blob/master/examples/computed-field/README.md" target="_blank" rel="nofollow noopener noreferrer">README</A> which explains what the example is and how to try it out.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=jizaiV6EwzM&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h49m05s" target="_blank" rel="nofollow noopener noreferrer">00:49:05</A> Arranging the example directory contents so that it's ready to be pushed, and run by others. We test this briefly by blasting away the <CODE>node_modules/</CODE> directory, and starting again, with:<BR />
<DIV><BR />
<PRE class="sourceCode bash"><CODE class="sourceCode bash"><SPAN class="ex">-</SPAN><SPAN class="op">&gt;</SPAN> npm i <SPAN class="kw">&amp;&amp;</SPAN> <SPAN class="ex">cds</SPAN> run --in-memory</CODE></PRE><BR />
</DIV><BR />
All seems to work as expected (including a slight digression installing <CODE>jq</CODE> on this VM to format the JSON output nicely!).<BR />
<BR />
<A href="https://www.youtube.com/watch?v=jizaiV6EwzM&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h55m55s" target="_blank" rel="nofollow noopener noreferrer">00:55:55</A> So we add the README to a commit and push the changes too (also removing the <CODE>.vscode/</CODE> directory that we don't really want in this context). This push is of course to the origin, i.e. my fork of the main CAP Community repo, and we're then advised by GitHub, appropriately, that "This branch is 1 commit ahead of sapmentors master".<BR />
<BR />
<A href="https://www.youtube.com/watch?v=jizaiV6EwzM&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h57m48s" target="_blank" rel="nofollow noopener noreferrer">00:57:48</A> So we create a Pull Request (PR) which GitHub allows us to do, specifically for requesting a pull of these changes in my fork to the upstream source repository, adding <SPAN class="mention-scrubbed">vobu</SPAN> as a reviewer.<BR />
<BR />
All done!
