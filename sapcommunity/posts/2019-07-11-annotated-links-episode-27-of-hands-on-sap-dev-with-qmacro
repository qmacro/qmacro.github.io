2019-07-11-annotated-links-episode-27-of-hands-on-sap-dev-with-qmacro
Annotated links: Episode 27 of Hands-on SAP dev with qmacro
technology-blog-sap
2019-07-11
https://community.sap.com/t5/technology-blogs-by-sap/annotated-links-episode-27-of-hands-on-sap-dev-with-qmacro/ba-p/13398297
<EM>This is a searchable description of the content of a live stream recording, specifically <STRONG>‚ÄúEpisode 27 - Continuation of the Cloud Platform Workflow project‚Äù</STRONG> in the ‚Äú<A href="https://bit.ly/handsonsapdev" target="_blank" rel="nofollow noopener noreferrer">Hands-on SAP dev with qmacro</A>‚Äù series. There are links directly to specific highlights in the video recording. For links to annotations of other episodes, please see the ‚Äú<A href="https://bit.ly/handsonsapdev#replays" target="_blank" rel="nofollow noopener noreferrer">Catch the replays</A>‚Äù section of the series blog post.</EM><BR />
<BR />
This episode, titled ‚Äú<A href="https://bit.ly/handsonsapdev#ep27" target="_blank" rel="nofollow noopener noreferrer">Continuation of the Cloud Platform Workflow project</A>‚Äù, was streamed live on Fri 31 May 2019 and is approximately one hour in length. The stream recording is <A href="https://www.youtube.com/watch?v=Gq_XfrLe_kg&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0" target="_blank" rel="nofollow noopener noreferrer">available on YouTube</A>.<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2019/07/Screen-Shot-2019-07-11-at-07.57.01.png" /><BR />
<BR />
Below is a brief synopsis, and links to specific highlights - use these links to jump directly to particular places of interest in the recording, based on ‚Äòhh:mm:ss‚Äô style timestamps.<BR />
<H2 id="brief-synopsis" id="toc-hId-908662144">Brief synopsis</H2><BR />
In this episode we continue where we left off in <A href="https://bit.ly/handsonsapdev#ep25" target="_blank" rel="nofollow noopener noreferrer">Ep.25</A>, to build out the workflow scenario on SAP Cloud Platform, exploring features as we go for service and script tasks, and more.<BR />
<H2 id="links-to-specific-highlights" id="toc-hId-712148639">Links to specific highlights</H2><BR />
<STRONG><A href="https://www.youtube.com/watch?v=Gq_XfrLe_kg&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h03m03s" target="_blank" rel="nofollow noopener noreferrer">00:03:03</A>:</STRONG> Looking at where we left off last time - in the workflow editor in the SAP Web IDE, in the middle of creating a service task to access an OData service on the ES5 system, via the SAP Cloud Connector that we‚Äôd set up, running in a Docker container. We have a brief look inside the <CODE>Dockerfile</CODE> that was used to create the image from which the container was instantiated.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=Gq_XfrLe_kg&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h08m40s" target="_blank" rel="nofollow noopener noreferrer">00:08:40</A>:</STRONG> Checking what we have via the SAP Cloud Connector, by looking at the ‚ÄúCloud Connectors‚Äù page in the SAP Cloud Plaform Cockpit - an exposed backend system with the virtual name ‚Äúvirtuales5‚Äù on port 8000, with all resources at <CODE>/sap/opu/odata</CODE> and below available.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=Gq_XfrLe_kg&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h10m00s" target="_blank" rel="nofollow noopener noreferrer">00:10:00</A>:</STRONG> Similarly, checking the destination ‚Äúshopservice‚Äù that we set up, we see that it uses this backend system to point to a specific OData service, thus:<BR />
<PRE><CODE><A href="http://virtuales5:8000/sap/opu/odata/sap/EPM_REF_APPS_SHOP_SRV/" target="test_blank" rel="nofollow noopener noreferrer">http://virtuales5:8000/sap/opu/odata/sap/EPM_REF_APPS_SHOP_SRV/</A></CODE></PRE><BR />
which, with the additional property <CODE>sap-client=002</CODE>, translates to:<BR />
<BR />
<A class="uri" href="https://sapes5.sapdevcenter.com/sap/opu/odata/sap/EPM_REF_APPS_SHOP_SRV?sap-client=002" target="_blank" rel="nofollow noopener noreferrer">https://sapes5.sapdevcenter.com/sap/opu/odata/sap/EPM_REF_APPS_SHOP_SRV?sap-client=002</A><BR />
<BR />
(Don‚Äôt forget, you‚Äôll need a logon to ES5 to access this URL.)<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=Gq_XfrLe_kg&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h12m45s" target="_blank" rel="nofollow noopener noreferrer">00:12:45</A>:</STRONG> Reviewing our ‚Äúdestinationproxy‚Äù test HTML5 app, specifically the details inside the application descriptor (<CODE>neo-app.json</CODE>), which include a route that points to the destination referred to above.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=Gq_XfrLe_kg&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h15m03s" target="_blank" rel="nofollow noopener noreferrer">00:15:03</A>:</STRONG> Following an observant comment from <A href="https://twitter.com/fbeuret" target="_blank" rel="nofollow noopener noreferrer">Fabien</A> about the scheme in a destination URL, we talk briefly about the use of HTTP (vs HTTPS) in an SAP Cloud Connector based situation, where the traffic is secured not at the protocol level (i.e.&nbsp;not with HTTPS) but at the tunnel level.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=Gq_XfrLe_kg&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h17m00s" target="_blank" rel="nofollow noopener noreferrer">00:17:00</A>:</STRONG> Looking briefly at the SAP Fiori launchpad site we set up with the SAP Cloud Platform Portal service last time - which contains the 4 tiles related to the Workflow service.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=Gq_XfrLe_kg&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h18m45s" target="_blank" rel="nofollow noopener noreferrer">00:18:45</A>:</STRONG> Now turning our attention to the workflow definition as we left it at the end of the <A href="https://bit.ly/handsonsapdev#ep26" target="_blank" rel="nofollow noopener noreferrer">previous episode</A>, we start to add details to the service task‚Äôs properties to point it to where we want it to go.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=Gq_XfrLe_kg&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h22m20s" target="_blank" rel="nofollow noopener noreferrer">00:22:20</A>:</STRONG> Looking at the Products entityset, and changing from the default representation content type (which is XML) to our preferred JSON representation (with query parameter <CODE>$format=json</CODE>).<BR />
<BR />
As a small digression, I have a bit of a rant about how people distinguish between OData and ‚ÄúREST APIs‚Äù, suggesting they‚Äôre different, and implying that OData is less RESTful. That‚Äôs nonsense. In fact, one of the lovely things about OData is that it‚Äôs a formalised approach to a REST API. Point me to something that‚Äôs called a ‚ÄúREST API‚Äù and I‚Äôll either point out what that API does not do that is RESTful (or does do that is not RESTful) or point out 10 other APIs that are designated REST APIs that are in fact not. Or different in approach. The point is that REST is not a definition of a protocol, or how a protocol (or API) should work. REST is an architectural style, and OData is as much a REST API as any other so-called REST APIs. So there - stick <EM>that</EM> in your pipe and smoke it <span class="lia-unicode-emoji" title=":winking_face:">üòâ</span><BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=Gq_XfrLe_kg&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h24m50s" target="_blank" rel="nofollow noopener noreferrer">00:24:50</A>:</STRONG> Using the relative path of the URL we just tried in the browser, i.e.&nbsp;<CODE>Products('HT-1000')</CODE>, and specifying it in the Path property for the service task definition, noting also that right now, the service task mechanism doesn‚Äôt support the <CODE>sap-client</CODE> additional property that one can define in the destination on the SAP Cloud Platform (so we end up adding <CODE>?sap-client=002</CODE> to the Path property‚Äôs value).<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=Gq_XfrLe_kg&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h26m25s" target="_blank" rel="nofollow noopener noreferrer">00:26:25</A>:</STRONG> Taking a small digression into the difference between OData operations ‚ÄòREAD‚Äô and ‚ÄòQUERY‚Äô, and noting that both map to the HTTP method ‚ÄòGET‚Äô. Going deeper into how OData maps onto familiar technologies, we look at the difference between the (XML) representations of responses to READ and QUERY operations, where the former have <CODE>&lt;entry&gt;</CODE> as the root element and the latter have <CODE>&lt;feed&gt;</CODE>, exposing the Atom and Atom Publishing Protocol ancestry of OData quite nicely.<BR />
<BR />
If you‚Äôre interested in learning more about this, I recommend you follow the following SAP Developers tutorial: <A href="https://developers.sap.com/tutorials/odata-01-intro-origins.html" target="_blank" rel="noopener noreferrer">Learn about OData Fundamentals</A> which is part of the tutorial group <A href="https://developers.sap.com/group.SAP%20Cloud%20Platform-6-odata-intro.html" target="_blank" rel="noopener noreferrer">Get an Introduction to OData</A> which in turn is part of the mission <A href="https://developers.sap.com/mission.SAP%20Cloud%20Platform-3-odata.html" target="_blank" rel="noopener noreferrer">Take a Deep Dive into OData</A>.<BR />
<BR />
There‚Äôs also some more you can read in the form of a <A href="https://blogs.sap.com/tag/mondaymorningthoughts/" target="_blank" rel="noopener noreferrer">Monday Morning Thoughts</A> post: <A href="https://blogs.sap.com/2018/08/20/monday-morning-thoughts-odata/" target="_blank" rel="noopener noreferrer">Monday morning thoughts: OData</A> if you‚Äôre so inclined.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=Gq_XfrLe_kg&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h27m14s" target="_blank" rel="nofollow noopener noreferrer">00:27:14</A>:</STRONG> I don‚Äôt know what was in my coffee that day but I have a micro rant also about the major difference between ‚Äúblog‚Äù and ‚Äúpost‚Äù. Goodness me!<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=Gq_XfrLe_kg&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h28m20s" target="_blank" rel="nofollow noopener noreferrer">00:28:20</A>:</STRONG> We specify a location in the workflow instance in the Response Variable property using Java Unified Expression Language (JUEL) <A href="https://blogs.sap.com/2018/01/29/discovering-SAP%20Cloud%20Platform-workflow-service-tasks/#comment-409097" target="_blank" rel="noopener noreferrer">expressions</A>.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=Gq_XfrLe_kg&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h29m25s" target="_blank" rel="nofollow noopener noreferrer">00:29:25</A>:</STRONG> Deploying the workflow definition to the SAP Cloud Platform Workflow service for the first time (where we see that the definition is given an incrementing ID, starting at 1).<BR />
<BR />
We can see the definition using the ‚ÄúWorkflow Monitor - Workflow Definitions‚Äù app. This is where we can start a new instance with sample data, which we do, and then jump to look at the instance, which of course is not found directly as the status filter omits instances in ‚ÄúCompleted‚Äù status ‚Ä¶ and of course this is the status our newly created instance already has!<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=Gq_XfrLe_kg&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h32m38s" target="_blank" rel="nofollow noopener noreferrer">00:32:38</A>:</STRONG> Looking at the details of the completed instance, including the Execution Log and the Workflow Context, which shows the data that was retrieved via the service task stored in the <CODE>productdata</CODE> property. Success!<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=Gq_XfrLe_kg&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h34m10s" target="_blank" rel="nofollow noopener noreferrer">00:34:10</A>:</STRONG> Wondering about why JSON representations of OData resources always start with a property called ‚Äòd‚Äô. If you want to know why this is, look at the subsequent episode (<A href="https://bit.ly/handsonsapdev#ep28" target="_blank" rel="nofollow noopener noreferrer">https://bit.ly/handsonsapdev#ep28</A>) where I explain (I had to research it between this episode and the next one).<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=Gq_XfrLe_kg&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h35m40s" target="_blank" rel="nofollow noopener noreferrer">00:35:40</A>:</STRONG> Now defining a user task, and making use of the fact that we can include JUEL expressions in the values for some of the properties in this user task, e.g.:<BR />
<PRE><CODE>The ${context.productdata.d.Name}</CODE></PRE><BR />
<STRONG><A href="https://www.youtube.com/watch?v=Gq_XfrLe_kg&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h38m05s" target="_blank" rel="nofollow noopener noreferrer">00:38:05</A>:</STRONG> Specifying the details of the user interface in this user task, and talking about the difference between specifying a custom-built UI5 Component for the user interface, and using a Forms feature based UI which is super easy to create. We opt for a Forms based user UI in this case to show some of the product data that‚Äôs been retrieved and stored in the context.<BR />
<BR />
There was a question as to whether the texts and labels defined in Workflow forms can be translated; I asked internally after the stream, and found that it‚Äôs currently not supported, but is definitely on the backlog and being prioritised.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=Gq_XfrLe_kg&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h44m10s" target="_blank" rel="nofollow noopener noreferrer">00:44:10</A>:</STRONG> After deploying, we start a new workflow instance and examine it - it‚Äôs in the ‚ÄúRunning‚Äù status as the user task is, of course, still pending.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=Gq_XfrLe_kg&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h45m10s" target="_blank" rel="nofollow noopener noreferrer">00:45:10</A>:</STRONG> In the last part of this live stream we now try to bring in a generic user task UI Component that I‚Äôd previously built (before the advent of Forms), just to show how one would do it.<BR />
<BR />
Called ‚Äúgenericusertask‚Äù, it lives in another instance (and workspace) of the SAP Web IDE so I export it from there and bring it into my SAP Web IDE that I‚Äôm using for this live stream.<BR />
<BR />
Looking at the application descriptor in this ‚Äúgenericusertask‚Äù project, we see that there‚Äôs a route reference to destination ‚Äúbpmworkflowruntime‚Äù, which was added automatically when I enabled the Workflow service. Of course, we can guess from the name of this destination that it points to the Workflow API, which we‚Äôll need in the user task UI Component to access the task instance data.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=Gq_XfrLe_kg&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h49m10s" target="_blank" rel="nofollow noopener noreferrer">00:49:10</A>:</STRONG> In digging through the UI Component code, we look at the view and the JavaScript code in the component, and examine how we access the right context and data therein, via the information passed to the component on startup via the <CODE>startupParameters</CODE> property.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=Gq_XfrLe_kg&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h56m30s" target="_blank" rel="nofollow noopener noreferrer">00:56:30</A>:</STRONG> We deploy the ‚Äúgenericusertask‚Äù app to the SAP Cloud Platform, so we can use it in the workflow user tasks, and then modify the user task specification in the workflow definition to use this UI Component instead of the form we created.<BR />
<BR />
At this point we start to dig in to how the UI Component starts up, by debugging the loading of the Component. But we run out of time, learning the lesson again that if you‚Äôre going to start a debugging session, the one thing (apart from coffee) that you need to ensure you have is ‚Ä¶ time.<BR />
<BR />
So we leave the debugging until the next episode!
