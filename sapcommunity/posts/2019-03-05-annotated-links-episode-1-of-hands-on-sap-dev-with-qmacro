2019-03-05-annotated-links-episode-1-of-hands-on-sap-dev-with-qmacro
Annotated links: Episode 1 of Hands-on SAP dev with qmacro
technology-blog-sap
2019-03-05
https://community.sap.com/t5/technology-blogs-by-sap/annotated-links-episode-1-of-hands-on-sap-dev-with-qmacro/ba-p/13409864
<EM>This is a searchable description of the content of a live stream recording, specifically <STRONG>"Episode 1 - Setting up for the Node.js flavoured version of SAP’s Cloud Application Programming Model"</STRONG> in the "<A href="https://bit.ly/handsonsapdev" target="_blank" rel="nofollow noopener noreferrer">Hands-on SAP dev with qmacro</A>" series. There are links directly to specific highlights in the video recording. For links to annotations of other episodes, please see the "<A href="https://bit.ly/handsonsapdev#replays" target="_blank" rel="nofollow noopener noreferrer">Catch the replays</A>" section of the series blog post.</EM><BR />
<BR />
This episode, titled "<A href="https://bit.ly/handsonsapdev#ep1" target="_blank" rel="nofollow noopener noreferrer">Setting up for the Node.js flavoured version of SAP’s Cloud Application Programming Model</A>", was streamed live on Fri 25 Jan 2019 and is approximately one hour in length. The stream recording is <A href="https://www.youtube.com/watch?v=rQ3MU_fWK-Y&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0" target="_blank" rel="nofollow noopener noreferrer">available on YouTube</A>.<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2019/03/Screenshot-2020-02-13-at-15.01.31.png" /><BR />
<BR />
Below is a brief synopsis, and links to specific highlights - use these links to jump directly to particular places of interest in the recording, based on 'hh:mm:ss' style timestamps.<BR />
<H2 id="brief-synopsis" id="toc-hId-929015067">Brief synopsis</H2><BR />
While we warmed our grey matter up in the previous episode, in this episode we set up what we need to build with the Node.js (JavaScript) flavoured version of SAP's Cloud Application Programming Model (CAPM). This version allows us to build locally, with tools on our own machines, so that's what we'll be doing.<BR />
<BR />
Therefore, we use the SAP NPM registry to find &amp; install the command line tool 'cds' that we can use to generate and manage Node.js based CAPM projects and also install the CDS language support for the VS Code editor, which comes in the form of an VS Code extension. Then we set up our Cloud Foundry environment on SAP Cloud Platform and install the 'cf' command line tool which we can use to interact with that environment.<BR />
<H2 id="links-to-specific-highlights" id="toc-hId-732501562">Links to specific highlights</H2><BR />
<STRONG><A href="https://www.youtube.com/watch?v=rQ3MU_fWK-Y&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h01m12s" target="_blank" rel="nofollow noopener noreferrer">00:01:12</A>:</STRONG> Live stream starts.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=rQ3MU_fWK-Y&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h02m35s" target="_blank" rel="nofollow noopener noreferrer">00:02:35</A>:</STRONG> Starting to look at the setup section of the <A href="https://developers.sap.com/tutorials/cp-apm-nodejs-create-service.html" target="_blank" rel="noopener noreferrer">Create a Business Service with Node.js using Visual Studio Code</A> tutorial.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=rQ3MU_fWK-Y&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h07m30s" target="_blank" rel="nofollow noopener noreferrer">00:07:30</A>:</STRONG> Talking about wanting to be able to try things out on my own machine, in a way that I can then blast away those attempts to get back to a clean state.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=rQ3MU_fWK-Y&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h08m45s" target="_blank" rel="nofollow noopener noreferrer">00:08:45</A>:</STRONG> Achieving this via Docker. Starting a minimal Linux environment Docker container with <CODE>docker run -t -i debian /bin/bash</CODE>.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=rQ3MU_fWK-Y&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h10m30s" target="_blank" rel="nofollow noopener noreferrer">00:10:30</A>:</STRONG> Looking at using <A href="https://github.com/creationix/nvm" target="_blank" rel="nofollow noopener noreferrer">nvm</A> - the Node Version Manager, to install and manage Node.js versions.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=rQ3MU_fWK-Y&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h11m20s" target="_blank" rel="nofollow noopener noreferrer">00:11:20</A>:</STRONG> Installing <CODE>curl</CODE> via <CODE>apt-get</CODE>, so we can then use <CODE>curl</CODE> to download and install <CODE>nvm</CODE>. We also set 'vi mode' in my shell, and bind Ctrl-L so that it will work for clearing the screen for us:<BR />
<PRE><CODE>set -o vi<BR />
bind -x '"\C-l": clear'</CODE></PRE><BR />
Note that we also have to do an <CODE>apt-get update</CODE> in this minimal Linux container before we can get it to find and install <CODE>curl</CODE>.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=rQ3MU_fWK-Y&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h13m30s" target="_blank" rel="nofollow noopener noreferrer">00:13:30</A>:</STRONG> Finally getting to be able to install <CODE>nvm</CODE> with <CODE>curl</CODE>.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=rQ3MU_fWK-Y&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h13m56s" target="_blank" rel="nofollow noopener noreferrer">00:13:56</A>:</STRONG> Now we can use <CODE>nvm</CODE> to install Node.js, and we choose version 8 (see <A class="uri" href="https://nodejs.org/en/download/" target="_blank" rel="nofollow noopener noreferrer">https://nodejs.org/en/download/</A> for other versions).<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=rQ3MU_fWK-Y&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h15m14s" target="_blank" rel="nofollow noopener noreferrer">00:15:14</A>:</STRONG> Starting out with the setup by trying to search for the <CODE><a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a>/cds</CODE> package with <CODE>npm search <a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a>/cds</CODE>. This doesn't give us what we're really looking for, so we search simply for 'cds' with <CODE>npm search cds</CODE>, but this yields results that don't look quite right.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=rQ3MU_fWK-Y&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h16m45s" target="_blank" rel="nofollow noopener noreferrer">00:16:45</A>:</STRONG> The <CODE><a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a></CODE> prefix in <CODE><a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a>/cds</CODE> is a scope, which relates packages to a specific registry. The searches we've done thus far are using the default registry, which we can see in the npm configuration with <CODE>npm config ls -l | grep registry</CODE>, which gives us:<BR />
<PRE><CODE>registry = <A href="https://registry.npmjs.org/" target="test_blank" rel="nofollow noopener noreferrer">https://registry.npmjs.org/</A></CODE></PRE><BR />
We can also get that info via <CODE>npm config get registry</CODE>.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=rQ3MU_fWK-Y&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h18m10s" target="_blank" rel="nofollow noopener noreferrer">00:18:10</A>:</STRONG> Looking at the blog post announcing the SAP NPM registry: <A class="uri" href="https://blogs.sap.com/2017/05/16/sap-npm-registry-launched-making-the-lives-of-node.js-developers-easier/" target="_blank" rel="noopener noreferrer">https://blogs.sap.com/2017/05/16/sap-npm-registry-launched-making-the-lives-of-node.js-developers-easier/</A>.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=rQ3MU_fWK-Y&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h18m39s" target="_blank" rel="nofollow noopener noreferrer">00:18:39</A>:</STRONG> Modifying the previous search command with the <CODE>--registry</CODE> option, thus: <CODE>npm search <a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a>/cds --registry <A href="https://npm.sap.com" target="test_blank" rel="noopener noreferrer">https://npm.sap.com</A></CODE>, where we get much better results that look something like this:<BR />
<PRE><CODE>NAME                      | DESCRIPTION          | AUTHOR          | DATE       | VERSION  | KEYWORDS<BR />
@sap/cds                  | Entry Point and API… |                 | 2019-02-19 | 3.5.2    |<BR />
@sap/generator-cds        | Project generator…   |                 | 2019-02-19 | 2.3.9    | cds cdx<BR />
@sap/cds-compiler         | CDS (Core Data…      |                 | 2019-02-14 | 1.8.1    | CDS<BR />
@sap/cds-hana             | Driver package for…  |                 | 2019-02-14 | 1.5.1    |<BR />
@sap/cds-ql               | This package deals…  |                 | 2019-02-14 | 1.5.1    |<BR />
@sap/cds-services         | This package…        |                 | 2019-02-14 | 1.5.2    |<BR />
@sap/cds-sql              | This package offers… |                 | 2019-02-14 | 1.5.1    |<BR />
@sap/cds-sqlite           | Driver package for…  |                 | 2019-02-14 | 1.5.1    |<BR />
@sap/cds-reflect          | Reflection for CDS…  |                 | 2019-02-08 | 2.3.0    |</CODE></PRE><BR />
<STRONG><A href="https://www.youtube.com/watch?v=rQ3MU_fWK-Y&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h19m50s" target="_blank" rel="nofollow noopener noreferrer">00:19:50</A>:</STRONG> Using <CODE>npm view</CODE> (as an alternative to <CODE>npm search</CODE>) to look at details of a package. At the time of writing these annotations, this is what <CODE>npm view</CODE> gives us:<BR />
<PRE><CODE>@sap/cds@3.5.2 | SEE LICENSE IN developer-license-3.1.txt | deps: 6 | versions: 16<BR />
Entry Point and API Facade for CDS<BR />
<BR />
bin: cds<BR />
<BR />
dist<BR />
.tarball: <A href="https://npm.sap.com/@sap/cds/-/cds-3.5.2.tgz" target="test_blank" rel="noopener noreferrer">https://npm.sap.com/@sap/cds/-/cds-3.5.2.tgz</A><BR />
.shasum: 975fe7d2c64550c71d30f6f869e63c3250a21ca0<BR />
.integrity: sha512-8NKmfpLFSW4GwKnnnoMB1l+srhDhJ8wlkGrC7cf7NxW+XUDO2bnlPIt/dSKlCSQRnHgssAlyjGffrbMMQknVRw==<BR />
<BR />
dependencies:<BR />
@sap/cds-compiler: 1.8.1  @sap/cds-reflect: 2.3.0   @sap/generator-cds: 2.3.9<BR />
@sap/cds-ql: 1.5.1        @sap/cds-services: 1.5.2  fs-extra: 7.0.1<BR />
<BR />
maintainers:<BR />
- https-support.sap.com &lt;do.not.reply@sap.com&gt;<BR />
<BR />
dist-tags:<BR />
latest: 3.5.2<BR />
<BR />
published a week ago by https-support.sap.com &lt;do.not.reply@sap.com&gt;</CODE></PRE><BR />
<STRONG><A href="https://www.youtube.com/watch?v=rQ3MU_fWK-Y&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h22m00s" target="_blank" rel="nofollow noopener noreferrer">00:22:00</A>:</STRONG> Now it's time to install the package with <CODE>npm install</CODE>. But before we do, we check the list of packages already installed, with <CODE>npm list</CODE>, using the <CODE>-g</CODE> option to check globally (rather than only local to the directory / project I'm currently in).<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=rQ3MU_fWK-Y&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h22m55s" target="_blank" rel="nofollow noopener noreferrer">00:22:55</A>:</STRONG> Restricting the output of <CODE>npm list</CODE> with the <CODE>--depth</CODE> option, to see the top level packages installed (with <CODE>npm list -g --depth=0</CODE>).<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=rQ3MU_fWK-Y&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h23m08s" target="_blank" rel="nofollow noopener noreferrer">00:23:08</A>:</STRONG> A (cultural) reference to lyrics from the track Natural Science by Canadian rock band Rush.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=rQ3MU_fWK-Y&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h23m38s" target="_blank" rel="nofollow noopener noreferrer">00:23:38</A>:</STRONG> An attempt at install with <CODE>npm install -g <a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a>/cds --registry <A href="https://npm.sap.com" target="test_blank" rel="noopener noreferrer">https://npm.sap.com</A></CODE>, and a brief look at the error that occurs (via the <CODE>--verbose</CODE> flag).<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=rQ3MU_fWK-Y&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h26m15s" target="_blank" rel="nofollow noopener noreferrer">00:26:15</A>:</STRONG> Setting the registry for <CODE><a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a></CODE> with <CODE>npm config set <a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a>:registry=<A href="https://npm.sap.com" target="_blank" rel="noopener noreferrer">https://npm.sap.com</A></CODE> (and checking the results with <CODE>npm config list</CODE> to see that this configuration was indeed successfully recorded.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=rQ3MU_fWK-Y&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h26m55s" target="_blank" rel="nofollow noopener noreferrer">00:26:55</A>:</STRONG> Now retrying the install, with <CODE>npm install -g <a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a>/cds</CODE>, and seeing that this is now successful, and that <CODE><a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a>/cds</CODE> version 3.0.0 was installed globally (checking with <CODE>npm list -g --depth=1</CODE>, and also noticing the dependencies).<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=rQ3MU_fWK-Y&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h28m08s" target="_blank" rel="nofollow noopener noreferrer">00:28:08</A>:</STRONG> Removing the experimental Docker container.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=rQ3MU_fWK-Y&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h28m26s" target="_blank" rel="nofollow noopener noreferrer">00:28:26</A>:</STRONG> "Back" on my own local machine, we check what is installed globally (again with <CODE>npm list -g --depth=0</CODE>), and go through the process of installing <CODE><a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a>/cds</CODE> globally here now.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=rQ3MU_fWK-Y&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h28m56s" target="_blank" rel="nofollow noopener noreferrer">00:28:56</A>:</STRONG> What that gives us is a whole lot of stuff, including the command line program <CODE>cds</CODE>:<BR />
<PRE><CODE>=&gt; cds<BR />
<BR />
USAGE<BR />
<BR />
    cds &lt;command&gt; [&lt;args&gt;]<BR />
<BR />
<BR />
COMMANDS<BR />
<BR />
  c | compile    ...individual models (= the default)<BR />
  d | deploy     ...data models to a database<BR />
  s | serve      ...service models to REST clients<BR />
  b | build      ...whole modules or projects<BR />
  i | init       ...jump-starts a new project<BR />
  e | env        get/set current cds configuration<BR />
  r | repl       cds's read-eval-event-loop<BR />
  h | help       shows usage for cds and individual commands<BR />
  v | version    prints detailed version information<BR />
<BR />
  cds help &lt;command&gt; gives more help about each (also with --help)<BR />
  cds &lt;file&gt; without &lt;command&gt; defaults to cds compile.<BR />
  cds without any arguments shows this help.<BR />
<BR />
<BR />
EXAMPLES<BR />
<BR />
  cds model.cds<BR />
  cds compile model.cds<BR />
  cds compile model.json --to cdl<BR />
  cds serve cat-service<BR />
  cds build --clean<BR />
  cds compile --help</CODE></PRE><BR />
<STRONG><A href="https://www.youtube.com/watch?v=rQ3MU_fWK-Y&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h29m50s" target="_blank" rel="nofollow noopener noreferrer">00:29:50</A>:</STRONG> Starting to look at the VS Code extension that's available on the <A href="https://tools.hana.ondemand.com/#cloud" target="_blank" rel="nofollow noopener noreferrer">SAP Development Tools</A> website, downloading the file <CODE>vscode-cds-1.0.36.vsix</CODE>, and noting that it's actually a gzipped tarball in disguise. So changing the <CODE>.vsix</CODE> extension to <CODE>.tgz</CODE> makes it more palatable and we can look inside it with <CODE>tar tvzf vscode-cds-1.0.36.tgz</CODE>!<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=rQ3MU_fWK-Y&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h31m15s" target="_blank" rel="nofollow noopener noreferrer">00:31:15</A>:</STRONG> Being curious of course, we therefore then proceed to unpack it with <CODE>tar xzf vscode-cds-1.0.36.tgz</CODE> and have a look what we have, particularly at the SAP Node.js packages in the <CODE>node_modules/</CODE> directory. It's at this point we get a first glimpse of <CODE><a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a>/cds-lsp</CODE> which is a <A href="http://langserver.org" target="_blank" rel="nofollow noopener noreferrer">Language Protocol Server</A> implementation for the CDS language.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=rQ3MU_fWK-Y&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h32m50s" target="_blank" rel="nofollow noopener noreferrer">00:32:50</A>:</STRONG> Removing the existing extension in VS Code so we can install it together ("Install from VSIX..."), noting that the latest version is 1.0.36 and the details for this show up in the Change Log. The extension will automatically look for updates, as we see in the configuration.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=rQ3MU_fWK-Y&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h35m02s" target="_blank" rel="nofollow noopener noreferrer">00:35:02</A>:</STRONG> Talking about <A href="https://editorconfig.org/" target="_blank" rel="nofollow noopener noreferrer">EditorConfig</A> which I was reminded about in the PluralSight course I'm following. EditorConfig is a way of keeping configuration in sync across editors. I <A href="https://github.com/qmacro/dotvim/commit/f34c37333461732b09670495e2065484e660c430" target="_blank" rel="nofollow noopener noreferrer">added an EditorConfig plugin to my Vim config</A>, and you can see my <CODE>editorconfig</CODE> file (which I took from the UI5 team) here: <A class="uri" href="https://github.com/qmacro/scripts/blob/master/editorconfig" target="_blank" rel="nofollow noopener noreferrer">https://github.com/qmacro/scripts/blob/master/editorconfig</A>. The PluralSight course is "<A href="https://www.pluralsight.com/courses/javascript-development-environment" target="_blank" rel="nofollow noopener noreferrer">Building a JavaScript Development Environment</A>".<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=rQ3MU_fWK-Y&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h36m35s" target="_blank" rel="nofollow noopener noreferrer">00:36:35</A>:</STRONG> Taking a quick look through the rest of the extensions I've installed in VS Code (including EditorConfig, DraculaOfficial, Python, Quokka.js, SQLite, Vim, vimL and VS Live Share).<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=rQ3MU_fWK-Y&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h37m38s" target="_blank" rel="nofollow noopener noreferrer">00:37:38</A>:</STRONG> Talking about eventual deployment to the Cloud Foundry environment on SAP Cloud Platform, and taking a look at my trial account to orientate ourselves.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=rQ3MU_fWK-Y&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h39m25s" target="_blank" rel="nofollow noopener noreferrer">00:39:25</A>:</STRONG> Looking at what the the Cloud Foundry <A href="https://github.com/cloudfoundry/cli" target="_blank" rel="nofollow noopener noreferrer">command line interface</A> (CLI) is and ways to install it (I already had it installed and available to me in <CODE>/usr/local/bin/cf</CODE> via Homebrew for macOS).<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=rQ3MU_fWK-Y&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h40m50s" target="_blank" rel="nofollow noopener noreferrer">00:40:50</A>:</STRONG> Examining the <CODE>cf</CODE> configuration that's maintained in my home directory in the <CODE>.cf/</CODE> directory, and logging in to a Cloud Foundry endpoint with <CODE>cf login</CODE>, specifically the endpoint that I have in my trial at <A href="https://api.cf.eu10.hana.ondemand.com" target="test_blank" rel="nofollow noopener noreferrer">https://api.cf.eu10.hana.ondemand.com</A>.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=rQ3MU_fWK-Y&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h42m50s" target="_blank" rel="nofollow noopener noreferrer">00:42:50</A>:</STRONG> Noticing that <CODE>cf</CODE> asks me to select an organisation.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=rQ3MU_fWK-Y&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h42m58s" target="_blank" rel="nofollow noopener noreferrer">00:42:58</A>:</STRONG> A subtle reference by one of the live stream participants HunterGatherer to the classic quote on QDB: <A href="http://bash.org/?244321" target="test_blank" rel="nofollow noopener noreferrer">http://bash.org/?244321</A> - nicely done <span class="lia-unicode-emoji" title=":slightly_smiling_face:">🙂</span><BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=rQ3MU_fWK-Y&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h43m00s" target="_blank" rel="nofollow noopener noreferrer">00:43:00</A>:</STRONG> Thinking about why I was asked to select an organisation, and examining the other organisations available to me in other SAP Cloud Platform accounts, so the selection makes more sense.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=rQ3MU_fWK-Y&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h44m10s" target="_blank" rel="nofollow noopener noreferrer">00:44:10</A>:</STRONG> Selecting the <CODE>I347491trial_trial</CODE> organisation automatically causes the <CODE>dev</CODE> space to be selected within that, because that's the only space that exists inside <CODE>I347491trial_trial</CODE>.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=rQ3MU_fWK-Y&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h44m35s" target="_blank" rel="nofollow noopener noreferrer">00:44:35</A>:</STRONG> Looking at what's available from a services perspective with <CODE>cf marketplace</CODE>.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=rQ3MU_fWK-Y&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h45m00s" target="_blank" rel="nofollow noopener noreferrer">00:45:00</A>:</STRONG> Looking at the current target with <CODE>cf target</CODE> and switching targets. First looking at what the possible target orgs are with <CODE>cf orgs</CODE>, which gives me this:<BR />
<PRE><CODE>Getting orgs as dj.adams@sap.com...<BR />
<BR />
name<BR />
I347491trial_trial<BR />
serverlessorg<BR />
tdash</CODE></PRE><BR />
and then selecting one of them with <CODE>cf target -o serverlessorg</CODE> (noting again that the single <CODE>dev</CODE> space is automatically selected within that).<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=rQ3MU_fWK-Y&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h46m20s" target="_blank" rel="nofollow noopener noreferrer">00:46:20</A>:</STRONG> Targeting an organisation with multiple spaces (<CODE>cf target -o tdash</CODE>) gives us "No space targeted, use cf target -S SPACE" because there are multiple spaces within the <CODE>tdash</CODE> organisation, which we can see with <CODE>cf spaces</CODE>, which gives this:<BR />
<PRE><CODE>name<BR />
prod<BR />
qa</CODE></PRE><BR />
<STRONG><A href="https://www.youtube.com/watch?v=rQ3MU_fWK-Y&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h46m45s" target="_blank" rel="nofollow noopener noreferrer">00:46:45</A>:</STRONG> Referring to <A href="https://blogs.sap.com//lukesmith.xyz" target="_blank" rel="noopener noreferrer">Luke Smith</A> from whom I've learned a lot recently, and talking about <A href="https://wiki.archlinux.org/index.php/dmenu" target="_blank" rel="nofollow noopener noreferrer">dmenu</A>, and a similar utility called <A href="https://github.com/junegunn/fzf" target="_blank" rel="nofollow noopener noreferrer">fzf</A> which is wonderful (the author of <CODE>fzf</CODE> also wrote the Vim plugins <A href="https://github.com/junegunn/goyo" target="_blank" rel="nofollow noopener noreferrer">Goyo</A> and <A href="https://github.com/junegunn/limelight" target="_blank" rel="nofollow noopener noreferrer">Limelight</A> which are also wonderful).<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=rQ3MU_fWK-Y&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h48m15s" target="_blank" rel="nofollow noopener noreferrer">00:48:15</A>:</STRONG> A brief look at what the Goyo plugin does, in conjunction with Limelight. Fab.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=rQ3MU_fWK-Y&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h49m00s" target="_blank" rel="nofollow noopener noreferrer">00:49:00</A>:</STRONG> Taking a look at how <CODE>fzf</CODE> works, by looking at the sort of things it can do. We end up taking the names of the <A href="https://services.odata.org/V3/Northwind/Northwind.svc/Products" target="_blank" rel="nofollow noopener noreferrer">Northwind products</A> and offering them as a selection like this:<BR />
<PRE><CODE>curl 'https://services.odata.org/V3/Northwind/Northwind.svc/Products?$format=json?$select=ProductName' | jq -r '.value[].ProductName' | fzf</CODE></PRE><BR />
Note that we use the equally wonderful <A href="https://stedolan.github.io/jq/" target="_blank" rel="nofollow noopener noreferrer">jq</A> to process the JSON. If you're interested in learning more about <CODE>jq</CODE> you might want to watch this short video "<A href="https://www.youtube.com/watch?v=yI5IQooQzW4" target="_blank" rel="nofollow noopener noreferrer">Using jq to parse out SCP destination info</A>".<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=rQ3MU_fWK-Y&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h54m17s" target="_blank" rel="nofollow noopener noreferrer">00:54:17</A>:</STRONG> Using <CODE>fzf</CODE> to improve the experience of selecting choosing and setting target organisations and spaces. Check out the <A href="https://github.com/qmacro/scripts/blob/7e2ed78969e253626e07e389354337866417dbb0/fzfutils.sh" target="_blank" rel="nofollow noopener noreferrer">fzfutils.sh</A> script to see how we did this. Basically, introducing <CODE>fzf</CODE> into the <CODE>cf</CODE> CLI mix looks like this, from a CF organisation perspective, for example:<BR />
<PRE><CODE>function cfto() {<BR />
    local org<BR />
    org=$(cf orgs | sed -e '1,3d' | fzf -1 -q "$1")<BR />
    if [ -n "$org" ]; then<BR />
        echo Setting target org to "$org"<BR />
        cf target -o "$org"<BR />
    fi<BR />
}</CODE></PRE>
