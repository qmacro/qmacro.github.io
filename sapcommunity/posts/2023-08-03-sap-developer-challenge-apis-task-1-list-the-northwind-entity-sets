2023-08-03-sap-developer-challenge-apis-task-1-list-the-northwind-entity-sets
SAP Developer Challenge - APIs - Task 1 - List the Northwind entity sets
application-developmentforum-board
2023-08-03
https://community.sap.com/t5/application-development-discussions/sap-developer-challenge-apis-task-1-list-the-northwind-entity-sets/td-p/276626
<P>(Check out the <A href="https://blogs.sap.com/2023/08/01/sap-developer-challenge-apis/" target="_blank" rel="noopener noreferrer">SAP Developer Challenge - APIs</A> blog post for everything you need to know about the challenge to which this task relates!)</P><P>In this task you'll become acquainted with entity sets in the classic Northwind service.</P><H2 id="toc-hId-1651230377">Background</H2><P>You may have heard of, or even interacted with an instance of, the Northwind model and service, originally and properly called "<A href="https://en.wikiversity.org/wiki/Database_Examples/Northwind" target="_blank" rel="noopener nofollow noreferrer">Northwind Traders</A>". It has a classic and well-known set of related entities and is often a first introduction for many to database schemas, OData services and more. It was originally shipped with the Microsoft Access database application.</P><P>The entities and their relationships are easy to understand and it's partly for this reason that it's so popular. In this task, you will briefly explore the Northwind service offered by OASIS Open, the non-profit standards body, where there's a <A href="https://www.oasis-open.org/committees/tc_home.php?wg_abbrev=odata" target="_blank" rel="noopener nofollow noreferrer">working group that looks after the Open Data Protocol (OData) standard</A>.</P><P>There are various services available at the simple landing page at <A class="" href="https://services.odata.org" target="_blank" rel="noopener nofollow noreferrer">https://services.odata.org</A> and the one we will use is the OData V4 version, which is available directly at this address:</P><P><A class="" href="https://services.odata.org/V4/Northwind/Northwind.svc/" target="_blank" rel="noopener nofollow noreferrer">https://services.odata.org/V4/Northwind/Northwind.svc/</A></P><H2 id="toc-hId--900926584">Your task</H2><P>Your task specifically is to list the entity sets available in this service. They should be presented as a single string, following these rules:</P><UL><LI>the entity set names should be exactly as specified in the service</LI><LI>you should keep whatever case the entity set names are written in</LI><LI>the entity sets should be listed in alphabetical order</LI><LI>they should be comma-separated, with no spaces</LI></UL><P>Here's a short example of what a list should look like:</P><PRE>Categories,Customers,Suppliers</PRE><BLOCKQUOTE><P>There are more entity sets than just these three, this is just an example.</P></BLOCKQUOTE><P>Once you have constructed the list, you should hash it and post the hash as a new reply to this discussion thread, as described in <A href="https://groups.community.sap.com/t5/application-development/sap-developer-challenge-apis-task-0-learn-to-share-your-task/m-p/276058" target="_blank" rel="noopener noreferrer">Task 0 - Learn to share your task results</A>. This means that to get the hash, you would need to make a call to the hash service like this (based again on the above short example), supplying your SAP Community ID in the appropriate header too:</P><PRE>https://developer-challenge.cfapps.eu10.hana.ondemand.com/v1/hash(value='Categories,Customers,Suppliers')</PRE><H2 id="toc-hId-841883751">Hints and tips</H2><P>What is an entity set? It is essentially a collection (a set) of entities. There are two places where an OData service typically details the entity sets on offer. One is the service document, available at the root of the service's base URL. And the other is the metadata document, available at the service's base URL with $metadata appended. Metadata documents contain a wealth of information for an OData service; the entity set details are included, but there's a lot of other information that is included too, information that you must exclude or otherwise ignore. Simpler perhaps would be to take the service document, which has a set of collections (this harks back to the <A href="https://blogs.sap.com/2018/08/20/monday-morning-thoughts-odata/" target="_blank" rel="noopener noreferrer">origins of OData</A>, incidentally) which more or less equate to entity sets.</P><P>If you request the service document (<A class="" href="https://services.odata.org/V4/Northwind/Northwind.svc/" target="_blank" rel="noopener nofollow noreferrer">https://services.odata.org/V4/Northwind/Northwind.svc/</A>) in your browser, you get an XML based representation in response. You can parse this XML with any XML library, or command line tool (such as <A href="https://xmlstar.sourceforge.net/" target="_blank" rel="noopener nofollow noreferrer">xmlstarlet</A> or <A href="https://xmllint.com/" target="_blank" rel="noopener nofollow noreferrer">xmllint</A>.</P><P>While the service document's XML structure is much simpler than the metadata document, it's still XML, and it's arguably easier these days to avoid XML altogether when doing ad-hoc parsing activities. With OData V2 services, the service document is only available in an XML representation. It's also available in a JSON representation with OData V4 services.</P><P>Using a command line HTTP client, for example, to request the service document, we get an entirely different representation.</P><P>For example, this invocation of curl:</P><PRE>curl \
  --url "https://services.odata.org/V4/Northwind/Northwind.svc/"</PRE><P>returns a JSON representation, that looks like this (redacted for brevity):</P><DIV class=""><PRE><SPAN><SPAN class="">{</SPAN></SPAN>
<SPAN>  <SPAN class="">"@odata.context"</SPAN><SPAN class="">:</SPAN> <SPAN class="">"https://services.odata.org/V4/Northwind/Northwind.svc/$metadata"</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN>  <SPAN class="">"value"</SPAN><SPAN class="">:</SPAN> <SPAN class="">[</SPAN></SPAN>
<SPAN>    <SPAN class="">{</SPAN></SPAN>
<SPAN>      <SPAN class="">"name"</SPAN><SPAN class="">:</SPAN> <SPAN class="">"Categories"</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN>      <SPAN class="">"kind"</SPAN><SPAN class="">:</SPAN> <SPAN class="">"EntitySet"</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN>      <SPAN class="">"url"</SPAN><SPAN class="">:</SPAN> <SPAN class="">"Categories"</SPAN></SPAN>
<SPAN><SPAN class="">    }</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN>    <SPAN class="">{</SPAN></SPAN>
<SPAN>      <SPAN class="">"name"</SPAN><SPAN class="">:</SPAN> <SPAN class="">"CustomerDemographics"</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN>      <SPAN class="">"kind"</SPAN><SPAN class="">:</SPAN> <SPAN class="">"EntitySet"</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN>      <SPAN class="">"url"</SPAN><SPAN class="">:</SPAN> <SPAN class="">"CustomerDemographics"</SPAN></SPAN>
<SPAN>    <SPAN class="">}</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN>    <SPAN class="">{</SPAN></SPAN>
<SPAN>      <SPAN class="">"name"</SPAN><SPAN class="">:</SPAN> <SPAN class="">"Customers"</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN>      <SPAN class="">"kind"</SPAN><SPAN class="">:</SPAN> <SPAN class="">"EntitySet"</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN>      <SPAN class="">"url"</SPAN><SPAN class="">:</SPAN> <SPAN class="">"Customers"</SPAN></SPAN>
<SPAN>    <SPAN class="">}</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN>    <SPAN class="">{</SPAN></SPAN>
<SPAN>      <SPAN class="">"name"</SPAN><SPAN class="">:</SPAN> <SPAN class="">"Employees"</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN>      <SPAN class="">"kind"</SPAN><SPAN class="">:</SPAN> <SPAN class="">"EntitySet"</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN>      <SPAN class="">"url"</SPAN><SPAN class="">:</SPAN> <SPAN class="">"Employees"</SPAN></SPAN>
<SPAN>    <SPAN class="">}</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN>    <SPAN class="">{</SPAN></SPAN>
<SPAN>      <SPAN class="">"name"</SPAN><SPAN class="">:</SPAN> <SPAN class="">"Order_Details"</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN>      <SPAN class="">"kind"</SPAN><SPAN class="">:</SPAN> <SPAN class="">"EntitySet"</SPAN><SPAN class="">,</SPAN></SPAN>
<SPAN>      <SPAN class="">"url"</SPAN><SPAN class="">:</SPAN> <SPAN class="">"Order_Details"</SPAN></SPAN>
<SPAN>    <SPAN class="">}</SPAN></SPAN>
<SPAN>  <SPAN class="">]</SPAN></SPAN>
<SPAN><SPAN class="">}</SPAN></SPAN></PRE></DIV><P>In case you're interested, the shell pipeline to produce this redacted representation was:</P><PRE>curl \
  --silent \
  --url "https://services.odata.org/V4/Northwind/Northwind.svc/" \
  | jq '.value|=.[:5]'</PRE><P>Once you have a JSON representation of the service document, you can use your favorite language (JavaScript, TypeScript, Python, ABAP, or perhaps <A href="https://jqlang.github.io/jq/" target="_blank" rel="noopener nofollow noreferrer">jq</A>) to parse out the entity set names, and form them, in alphabetical order, into the comma-separated list that you need.</P><P>Of course, if you prefer to parse the XML representation of the service document, then by all means do that.</P><H2 id="toc-hId--1710273210">For discussion</H2><P>We get different representations of the service document resource, depending on where we make the request. In the browser, the representation comes back in XML form. Using curl on the command line, the representation is in JSON form. Why do you think that is?</P>
