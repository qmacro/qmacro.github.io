2019-10-22-annotated-links-episode-40-of-hands-on-sap-dev-with-qmacro
Annotated links: Episode 40 of Hands-on SAP dev with qmacro
technology-blog-sap
2019-10-22
https://community.sap.com/t5/technology-blogs-by-sap/annotated-links-episode-40-of-hands-on-sap-dev-with-qmacro/ba-p/13415122
<EM>This is a searchable description of the content of a live stream recording, specifically <STRONG>‚ÄúEp.40 ‚Äì Catchup from SAP TechEd"</STRONG> in the ‚Äú<A href="https://bit.ly/handsonsapdev" target="_blank" rel="nofollow noopener noreferrer">Hands-on SAP dev with qmacro</A>‚Äù series. There are links directly to specific highlights in the video recording. For links to annotations of other episodes, please see the ‚Äú<A href="https://bit.ly/handsonsapdev#replays" target="_blank" rel="nofollow noopener noreferrer">Catch the replays</A>‚Äù section of the series blog post.</EM><BR />
<BR />
This episode, titled ‚Äú<A href="https://bit.ly/handsonsapdev#ep40" target="_blank" rel="nofollow noopener noreferrer">Catchup from SAP TechEd</A>‚Äù, was streamed live on Wed 05 Jun 2019 and is approximately one hour in length. The stream recording is&nbsp;<A href="https://www.youtube.com/watch?v=c3B2Nxqxwv4&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;index=2" target="_blank" rel="nofollow noopener noreferrer">available on YouTube</A>.<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2019/10/Screenshot-2019-10-22-at-21.06.41.png" /><BR />
<BR />
Brief synopsis: We‚Äôre in the midst of the SAP TechEd season ‚Äì in this episode we catch up with what‚Äôs been going on and dig into whatever takes our fancy.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=c3B2Nxqxwv4&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;index=2&amp;t=02m10s" target="_blank" rel="nofollow noopener noreferrer">02:10</A> Talking about the sort of direction I want to take the episodes in, building on what we learned from SAP TechEd recently.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=c3B2Nxqxwv4&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;index=2&amp;t=03m10s" target="_blank" rel="nofollow noopener noreferrer">03:10</A> A reminder of the badges and stickers I have to give away, thanks again to <SPAN class="mention-scrubbed">rsletta</SPAN> for the awesome <A href="https://twitter.com/search?q=%23HandsOnSAPDev" target="_blank" rel="nofollow noopener noreferrer">#HandsOnSAPDev</A> laptop stickers, they rock!<BR />
<BR />
<A href="https://www.youtube.com/watch?v=c3B2Nxqxwv4&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;index=2&amp;t=08m50s" target="_blank" rel="nofollow noopener noreferrer">08:50</A> Looking at the new repo on GitHub that <SPAN class="mention-scrubbed">gregorw</SPAN> created to coordinate and provide a read/write platform for technical activities and sharing around all things related to the SAP Cloud Application Programming Model. It‚Äôs in the <A href="https://github.com/sapmentors" target="_blank" rel="nofollow noopener noreferrer">https://github.com/sapmentors</A> organisation and can be found here: ‚Üí <A class="uri" href="https://github.com/sapmentors/cap-community" target="_blank" rel="nofollow noopener noreferrer">https://github.com/sapmentors/cap-community</A>. Get to it with this canonical short URL &lt;bit.ly/cap-com&gt;.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=c3B2Nxqxwv4&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;index=2&amp;t=10m40s" target="_blank" rel="nofollow noopener noreferrer">10:40</A> Talking about our coffee chats with <SPAN class="mention-scrubbed">daniel.hutzel</SPAN> at SAP TechEd 2019 in Barcelona; turns out he‚Äôs on Twitter as <A href="https://twitter.com/aragonX" target="_blank" rel="nofollow noopener noreferrer">aragonX</A>. These chats are the birthplace of this &lt;bit.ly/cap-com&gt; repo.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=c3B2Nxqxwv4&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;index=2&amp;t=12m50s" target="_blank" rel="nofollow noopener noreferrer">12:50</A> Within the repo right now there are a couple of subdirectories. The first (created initially by <SPAN class="mention-scrubbed">vobu</SPAN>) is called <CODE>issues/</CODE> where code can be shared that reproduces an issue that you‚Äôre asking about. (First rule of asking a technical question: make sure you ask it precisely and accurately. Second rule of asking a technical question: make it as easy as possible for those trying to help you reproduce the issue so they can understand and diagnose). Volker does this very well in the first instance of an issue in the <CODE>structured-types/</CODE> directory. The second is <CODE>examples/</CODE> where we can share simple, running examples of concepts; the first item in here is <A href="https://github.com/sapmentors/cap-community/tree/master/examples/deep-insert" target="_blank" rel="nofollow noopener noreferrer">deep-insert/</A> which shows a running, simple example of how to perform a deep insert (of parent and child entities in a single operation).<BR />
<BR />
<A href="https://www.youtube.com/watch?v=c3B2Nxqxwv4&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;index=2&amp;t=16m20s" target="_blank" rel="nofollow noopener noreferrer">16:20</A> Describing briefly how to easily contribute to the <A href="https://github.com/sapmentors/cap-community" target="_blank" rel="nofollow noopener noreferrer">CAP Community repo</A> by forking it, making changes in your fork, and then sending a pull request with those changes.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=c3B2Nxqxwv4&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;index=2&amp;t=19m25s" target="_blank" rel="nofollow noopener noreferrer">19:25</A> Examining the <CODE>deep-insert/</CODE> example contents, starting with the <A href="https://github.com/sapmentors/cap-community/blob/master/examples/deep-insert/README.md" target="_blank" rel="nofollow noopener noreferrer">README</A>, and then the simple parent-child relationship expressed between two basic entities in the <CODE>db/schema.cds</CODE> file, and finally the simple exposure of both those entities in the <CODE>srv/main.cds</CODE> service file.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=c3B2Nxqxwv4&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;index=2&amp;t=22m10s" target="_blank" rel="nofollow noopener noreferrer">22:10</A> A first look at <CODE>Composition</CODE>, and how it relates to (and differs from) <CODE>Association</CODE> in CDS. Basically, a composition represents a contained-in relationship, <A href="https://cap.cloud.sap/docs/cds/cdl#compositions" target="_blank" rel="nofollow noopener noreferrer">as described</A> in CAP‚Äôs CDL documentation. This also includes a quick discussion on whether a navigation property should be capitalised or not. Basically the consensus is that such properties should be in lowercase (here <CODE>items</CODE>), but the target entity itself should be in uppercase (here: <CODE>Items</CODE><span class="lia-unicode-emoji" title=":disappointed_face:">üòû</span><BR />
<PRE class="cds"><CODE>namespace demo;<BR />
using { cuid, managed } from '@sap/cds/common';<BR />
<BR />
entity Headers : cuid, managed {<BR />
    identifier : String;<BR />
    items      : Composition of many Items on items.parent = $self;<BR />
}<BR />
<BR />
entity Items : cuid {<BR />
    parent : Association to Headers;<BR />
    data   : String;<BR />
}</CODE></PRE><BR />
<A href="https://www.youtube.com/watch?v=c3B2Nxqxwv4&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;index=2&amp;t=26m20s" target="_blank" rel="nofollow noopener noreferrer">26:20</A> Starting the service up and checking that there are no existing headers or items.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=c3B2Nxqxwv4&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;index=2&amp;t=27m10s" target="_blank" rel="nofollow noopener noreferrer">27:10</A> Performing our first deep insert, causing a header entity to be created, and two related child item entities, as follows (in a single request!):<BR />
<PRE class="shell"><CODE>curl <A href="http://localhost:4004/main/Headers" target="test_blank" rel="nofollow noopener noreferrer">http://localhost:4004/main/Headers</A> \<BR />
  -H "Content-Type: application/json" \<BR />
  -d '{ "identifier": "Header 1", "items": [ { "data": "A" }, { "data": "B" } ] }'</CODE></PRE><BR />
<A href="https://www.youtube.com/watch?v=c3B2Nxqxwv4&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;index=2&amp;t=31m10s" target="_blank" rel="nofollow noopener noreferrer">31:10</A> Performing a second deep insert, this time using <CODE>jq</CODE> to format the JSON output nicely, and also looking at the HTTP request and response headers (with <CODE>curl</CODE>‚Äôs <CODE>-v</CODE> verbose option), where we note the proper HTTP 201 response with a ‚ÄúLocation‚Äù header.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=c3B2Nxqxwv4&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;index=2&amp;t=33m20s" target="_blank" rel="nofollow noopener noreferrer">33:20</A> Looking at the results of the deep inserts with the OData <CODE>$expand</CODE> system query option: <A class="uri" href="http://localhost:4004/main/Headers?$expand=items" target="_blank" rel="nofollow noopener noreferrer">http://localhost:4004/main/Headers?$expand=items</A>.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=c3B2Nxqxwv4&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;index=2&amp;t=34m10s" target="_blank" rel="nofollow noopener noreferrer">34:10</A> Now we can see the effect of the use of ‚ÄúComposition‚Äù by performing an OData DELETE operation on a header entity and we see in the browser that the items that are ‚Äúcontained-in‚Äù that header are also deleted. Lovely!<BR />
<BR />
<A name="debug" target="_blank"></A><A href="https://www.youtube.com/watch?v=c3B2Nxqxwv4&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;index=2&amp;t=37m20s" target="_blank" rel="nofollow noopener noreferrer">37:20</A> David Kunz reminds us that we can use <CODE>DEBUG=true</CODE> to see what‚Äôs going on behind the scenes - use this as follows:<BR />
<PRE class="shell"><CODE>DEBUG=true cds run --in-memory</CODE></PRE><BR />
<A href="https://www.youtube.com/watch?v=c3B2Nxqxwv4&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;index=2&amp;t=39m30s" target="_blank" rel="nofollow noopener noreferrer">39:30</A> I completely fail to parse <SPAN class="mention-scrubbed">gregorw</SPAN>‚Äôs statement (in the chat) ‚Äú<SPAN class="citation" data-cites="qmacro"><a href="https://community.sap.com/t5/user/viewprofilepage/user-id/53">@qmacro</a></SPAN> does <SPAN class="citation" data-cites="francis3745">@francis3745</SPAN>‚Äù. Doh! ‚Äúdoes [work for SAP]‚Äù, of course!<BR />
<BR />
<A href="https://www.youtube.com/watch?v=c3B2Nxqxwv4&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;index=2&amp;t=40m30s" target="_blank" rel="nofollow noopener noreferrer">40:30</A> Thinking about what I want to be talking about in the upcoming episodes, in particular Business Services on the SAP Cloud Platform, which we can now also refer to as SAP‚Äôs Business Technology Platfom (BTP) - this was a big part of <SPAN class="mention-scrubbed">juergen.mueller</SPAN>‚Äôs keynote at SAP TechEd 2019 in Barcelona (you can watch the replay here: <A href="https://events.sap.com/teched/en/session/48841" target="_blank" rel="noopener noreferrer">The Technical Foundation of the Intelligent Enterprise</A>. My journey is likely to be starting from a similar place to yours, i.e.&nbsp;in the Neo environment, where I‚Äôve already established services using Workflow, Business Rules, Portal and other subscriptions ‚Ä¶ but where I want to get to of course is those equivalent business services in the Cloud Foundry environment. I thought it would be good to make that journey openly and share my learning as I go.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=c3B2Nxqxwv4&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;index=2&amp;t=42m40s" target="_blank" rel="nofollow noopener noreferrer">42:40</A> Mentioning my talk at UI5con 2018 "Diving into the sap.rules.ui library" <A href="https://www.youtube.com/watch?v=CTgtS6Cd98Y" target="_blank" rel="nofollow noopener noreferrer">(YouTube link)</A>, which I recommend you watch, at least in 1.5X, to see the API calls and structure that I make use of when building, deploying and executing business rules.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=c3B2Nxqxwv4&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;index=2&amp;t=43m00s" target="_blank" rel="nofollow noopener noreferrer">43:00</A> Looking at the <A href="https://api.sap.com" target="_blank" rel="noopener noreferrer">SAP API Business Hub</A> to start to understand what the business services are about, ‚Äúfrom underneath‚Äù, picking specifically the Business Rules API package here: <A class="uri" href="https://api.sap.com/package/SAPCPBusinessRulesAPIs?section=Artifacts" target="_blank" rel="noopener noreferrer">https://api.sap.com/package/SAPCPBusinessRulesAPIs?section=Artifacts</A>.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=c3B2Nxqxwv4&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;index=2&amp;t=45m00s" target="_blank" rel="nofollow noopener noreferrer">45:00</A> Noting that the APIs are split multiple ways: there are APIs for Neo and Cloud Foundry, those APIs are either for Authoring or Execution, and the APIs are versioned (the Rule Execution API v1 is already deprecated in favour of v2, as we see here).<BR />
<BR />
<A href="https://www.youtube.com/watch?v=c3B2Nxqxwv4&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;index=2&amp;t=49m00s" target="_blank" rel="nofollow noopener noreferrer">49:00</A> There‚Äôs some great information out there on orchestration services (such as Workflow and Business Rules) on the SAP Cloud Platform - look out for content from <SPAN class="mention-scrubbed">christian.loos</SPAN>, <SPAN class="mention-scrubbed">archana.shukla</SPAN> and <SPAN class="mention-scrubbed">stephan.schluchter</SPAN>.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=c3B2Nxqxwv4&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;index=2&amp;t=51m40s" target="_blank" rel="nofollow noopener noreferrer">51:40</A> Looking at setting up an environment within which to explore and try out the APIs within the SAP API Hub; rather than use the sandbox environment (which is not always available anyway) you can use your own trial account on the SAP Cloud Platform.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=c3B2Nxqxwv4&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;index=2&amp;t=54m25s" target="_blank" rel="nofollow noopener noreferrer">54:25</A> Trying out the API (specifically a GET on the <CODE>/v2/workingeset-rule-definitions</CODE>) within the SAP API Hub and we can see some results.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=c3B2Nxqxwv4&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;index=2&amp;t=56m00s" target="_blank" rel="nofollow noopener noreferrer">56:00</A> Now trying to make the same API call from the command line (with <CODE>curl</CODE>), and talking about the different components that make up an entire business rules service, starting with ‚Äòworking set‚Äô. We remind ourselves also about the <A href="https://ec.haxx.se/usingcurl-netrc.html" target="_blank" rel="nofollow noopener noreferrer">.netrc</A> file and facilities that it offers, especially in conjunction with <CODE>curl</CODE>.
