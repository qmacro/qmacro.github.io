2018-04-30-monday-morning-thoughts-editors-and-editing
Monday morning thoughts: editors and editing
technology-blog-sap
2018-04-30
https://community.sap.com/t5/technology-blogs-by-sap/monday-morning-thoughts-editors-and-editing/ba-p/13353774
<EM>In this post I look at how the editor environments that we come across in our daily work are different, and, as those differences might grow and expand as we become cloud native, how we bridge the contrast in facilities with core obsessions such as correct indentation and whitespace.&nbsp;</EM><BR />
<BR />
This weekend I continued to look into <A href="https://kubeless.io/" target="_blank" rel="nofollow noopener noreferrer">Kubeless</A>, a serverless framework that is native to Kubernetes. Kubernetes allows you to&nbsp;automate deployment, scaling, and management of containerized applications - in other words, to orchestrate units of computing across places where containers run, on your workstation as well as in the cloud.<BR />
<BR />
<STRONG>Serverless computing</STRONG><BR />
<BR />
At the heart of serverless computing is the concept of a function, usually stateless and short-lived, the loading and execution of which is taken care of for you. Functions-as-a-Service, or FaaS, is another term for serverless. Of course, serverless is somewhat of a misnomer, as there are definitely servers involved, but the point is that you don't have to worry about that. I'm a fan of serverless computing, having dabbled already with the Google Cloud Functions flavour of serverless, in experiments to create conversational actions for the Google Assistant framework (see "<A href="http://pipetree.com/qmacro/blog/2017/04/30/google-cloud-functions-sheets-apps-script-actions-on-google-win/" target="_blank" rel="nofollow noopener noreferrer">Google Cloud Functions + Sheets + Apps Script + Actions On Google = WIN</A>") and more recently in my <A href="http://pipetree.com/qmacro/blog/2018/01/16/discovering-scp-workflow/" target="_blank" rel="nofollow noopener noreferrer">discovery</A> of the SAP Cloud Platform (SCP) Workflow service (see "<A href="https://blogs.sap.com/2018/01/17/discovering-scp-workflow-service-proxy/" target="_blank" rel="noopener noreferrer">Discovering SCP Workflow - Service Proxy</A>").<BR />
<BR />
Anyway, I digress. Mostly. But what triggered these thoughts was the availability of a UI for Kubeless, which looks like this:<BR />
<BR />
<IMG src="https://github.com/kubeless/kubeless-ui/raw/master/kubeless.png" /><BR />
<BR />
(The Kubeless UI, from the <A href="https://github.com/kubeless/kubeless-ui" target="_blank" rel="nofollow noopener noreferrer">Kubeless UI Github page</A>)<BR />
<BR />
&nbsp;<BR />
<BR />
<STRONG>YAEE (Yet Another Editor Environment)*</STRONG><BR />
<BR />
I found myself inside this Kubeless UI editor environment over the weekend, on my local Kubernetes environment via <A href="https://kubernetes.io/docs/getting-started-guides/minikube/" target="_blank" rel="nofollow noopener noreferrer">Minikube</A>. This environment is not required to build serverless functions, but makes the process a little more comfortable.<BR />
<BR />
* The term and acronym "Yet Another ..." comes from the Perl community, where there's the "JAPH" acronym, (Just Another Perl Hacker), originated and popularised by Randal Schwartz, and the "YAPC" acronym (Yet Another Perl Conference).<BR />
<BR />
The editor is basic, and arguably only one of the key components of the environment. But a basic editor here is perhaps "good enough", because of the nature of what you're going to be writing - a fairly simple function that does one thing, and one thing well. Rather like the Unix philosophy where you have a pipeline of commands that also each do one thing and do it well. But that's a story for another time, perhaps.<BR />
<BR />
Editing short sections of code like this reminds me of the script task concept within the SCP Workflow service (see "<A href="https://blogs.sap.com/2018/01/26/discovering-scp-workflow-script-tasks/" target="_blank" rel="noopener noreferrer">Discovering SCP Workflow - Script Tasks</A>"). There too we have a (usually) short piece of code, which is almost secondary to the bigger picture of the overall workflow definition itself. Yes, the editing experience is provided by the SAP Web IDE, which offers many facilities, but for me the mindset of writing "helper" scripts here keeps me mindful of the overall end goal (to create a clear and efficient workflow experience) which is in contrast to the scripts themselves which are more a means to an end.<BR />
<BR />
Moreover, the fact that at the time of writing, only ES5 JavaScript is supported, preventing me from indulging in <A href="http://exploringjs.com/es6/ch_arrow-functions.html" target="_blank" rel="nofollow noopener noreferrer">fat arrow syntax</A>&nbsp;and other ES6 goodies like <A href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function%2A" target="_blank" rel="nofollow noopener noreferrer">generators</A>. This in turn holds me back slightly from "over committing", in the sense that "support for something better (ES6) will come along soon so I'll just tread water for now". The same situation can be found in <A href="https://developers.google.com/apps-script/" target="_blank" rel="nofollow noopener noreferrer">Google Apps Script</A>, where there's also only support for ES5, and where I find myself writing a lot of "helper" code.<BR />
<BR />
So already that's three editor environments we've talked about - in Kubeless UI, SAP Web IDE, and the Google Apps Script editor. That's on top of any "main" editor environment, which for me (beyond SAP Web IDE for many things) can be either <A href="https://www.vim.org/" target="_blank" rel="nofollow noopener noreferrer">vim</A> on a remote virtual machine or the <A href="https://cloudplatform.googleblog.com/2016/10/introducing-Google-Cloud-Shels-new-code-editor.html" target="_blank" rel="nofollow noopener noreferrer">Google Cloud Shell editor</A>.<BR />
<BR />
<IMG src="https://cloud.google.com/shell/docs/images/code-editor.png" /><BR />
<BR />
(The Google Cloud Shell editor, from the <A href="https://cloud.google.com/shell/docs/features#code_editor" target="_blank" rel="nofollow noopener noreferrer">Google Cloud Shell code editor feature description page</A>)<BR />
<BR />
And of course there's the ABAP editing environments SE24 (sorry, I mean SE80) as well as the Eclipse-based ABAP Developer Tools in the form of ABAP in Eclipse. Add to that the countless online REPLs (see "<A href="https://blogs.sap.com/2018/03/26/monday-morning-thoughts-cloud-native/" target="_blank" rel="noopener noreferrer">Monday morning thoughts: cloud native</A>").<BR />
<BR />
Further, think of the wonderful Jupyter Notebook cloud literate programming environment, which is also being used, coincidentally, in SAP contexts - see the "<A href="https://www.sap.com/uk/developer/tutorials/mlb-hxe-tools-jupyter.html" target="_blank" rel="noopener noreferrer">Use Jupyter Notebook with SAP HANA, express edition</A>" tutorial, for example.<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2018/04/1_CdLQ9beRMKVIpHbMSbjX7w.gif" /><BR />
<BR />
(Part of a Jupyter Notebook, from the <A href="https://newsletter.jupyter.org/jupyter-newsletter-5-july-22-8965016f732" target="_blank" rel="nofollow noopener noreferrer">jupyter.org website</A>)<BR />
<BR />
Here too, the code editor facilities themselves are secondary to the overall (amazing) experience of the notebook concept, and the amount of code you write in any one section is small.<BR />
<BR />
And it would be remiss of me not to mention the <A href="https://developer.chrome.com/devtools" target="_blank" rel="nofollow noopener noreferrer">Chrome Developer Tools</A> themselves, which provide a common editing environment, especially when you link to your local filesystem for persistent edits.<BR />
<BR />
<STRONG>The key commonality is difference</STRONG><BR />
<BR />
That's a lot of different editor environments - and apart from Eclipse, I haven't mentioned any traditional workstation-local tools such as Atom, Sublime or the editor-du-jour VS-Code (which I also enjoy using). Not only is that a wide range of editors, but also a wide range of contexts, or programmer mindsets, when using these different environments. I've already alluded to the mindset example when writing a Workflow service script task. When using a Jupyter notebook one might be thinking in a more <A href="https://en.wikipedia.org/wiki/Literate_programming" target="_blank" rel="nofollow noopener noreferrer">literate programming</A> style. When writing a cloud function one might be thinking of the strict interface and ensuring things remain quick and stateless.<BR />
<BR />
What's common though across all these mindsets, at least to most people, it would seem, is the implicit requirement to impose decent formatting on oneself and one's code. Proper use of whitespace (whether you're a tabs or a spaces person, that doesn't matter) and correct - or at least meaningful - indentation. Indentation which is in some cases (Python) a requirement, rather than something nice to have.<BR />
<BR />
What's also common is the fact that because you're editing in different environments, it's likely that some of them won't have the creature comforts we've come to expect from "core" editing environments such as SAP Web IDE, VS-Code or Eclipse. I'm thinking particularly about a couple of features: the ability to customise the editor's look and feel (and also how it fits into the wider continuous integration story at your workplace), and tools such as reformatters.<BR />
<BR />
<STRONG>Formatting poll</STRONG><BR />
<BR />
Last night I set up a <A href="https://twitter.com/qmacro/status/990640820574441472" target="_blank" rel="nofollow noopener noreferrer">poll</A> on Twitter: "when writing a quick-n-dirty or hacky program, do you still care about whitespace &amp; indentation or not?":<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2018/04/Screen-Shot-2018-04-30-at-07.12.21.png" /><BR />
<BR />
The overwhelming response so far is that people care. I have already had some great responses, from the <A href="https://twitter.com/JelenaAtLarge/status/990795362104422402" target="_blank" rel="nofollow noopener noreferrer">strong words</A> from&nbsp;<SPAN class="mention-scrubbed">jelena.perfiljeva</SPAN>&nbsp;to versions of an editor-feature solution from&nbsp;<SPAN class="mention-scrubbed">se38</SPAN>&nbsp;,&nbsp;<SPAN class="mention-scrubbed">c3d1947136cd4c748a7aa794001af496</SPAN>,&nbsp;<SPAN class="mention-scrubbed">yuval.morad</SPAN>&nbsp;and others (format-on-save or a format hotkey).<BR />
<BR />
Yes, the editor-feature solutions are great, but only when we're working in that specific editor. When we move across different editing environments in our daily work, which will be a scenario that only happens more often as we move to the cloud, we'll come across editing environment like the examples mentioned earlier, where such features are either not present, or at least hard-coded to format in a way you don't particularly like. So I found myself manually editing and correcting whitespace in my hacky script yesterday not because there wasn't a formatting feature in the editor in which I was writing the code, but because I've become so used to the "lowest common denominator" (of no format feature) that I naturally turned to doing it myself.<BR />
<BR />
Heck, that's where I started in my programming life - before auto formatters - so it comes naturally anyway, and for me it's a way to pause and think about what I've written as I almost absent-mindedly clean up the indentation.<BR />
<BR />
<STRONG>The future normal?</STRONG><BR />
<BR />
Former Member&nbsp;mentioned (on Slack) the other day something along the lines of "I've got my editor just how I want it now", which implied to me a lot of care, attention and obsessive tweaking that I admire, but am thinking is - in some scenarios - less worthwhile these days. In my mental move to become a cloud native (see what I did there?) I'm moving away from becoming attached one specific editor and preparing myself for a future normal, which might be described nicely in a <A href="https://en.wikiquote.org/wiki/Colossal_Cave_Adventure" target="_blank" rel="nofollow noopener noreferrer">Colossal Cave style</A>&nbsp;thus:<BR />
<BR />
YOU ARE IN A MAZE OF TWISTY LITTLE EDITORS, ALL DIFFERENT<BR />
<BR />
I've seen the platforms for writing and deploying code almost explode with possibilities and variations over the past decade, and it seems only to be going to continue. As we mentally and physically (well, logically) move away from our local workstations to the cloud, we cede control of our local tools. Perhaps one day the facilities in the cloud, naturally different because they're provided on different platforms by different vendors, might coalesce via some sort of common standard, but I'm not holding my breath. Instead, I'm embracing difference, and continuing to manually obsess over whitespace in all the code I write, wherever it is.<BR />
<BR />
How about you?<BR />
<BR />
&nbsp;<BR />
<BR />
This post was brought to you by <A href="https://www.pactcoffee.com/coffees/la-secreta" target="_blank" rel="nofollow noopener noreferrer">La Secreta coffee</A>&nbsp;and the quiet of an early Monday morning.<BR />
<BR />
&nbsp;<BR />
<BR />
Read more posts in this series here:&nbsp;<A href="https://blogs.sap.com/tag/mondaymorningthoughts/" target="_blank" rel="noopener noreferrer">Monday morning thoughts</A>.<BR />
<BR />
&nbsp;<BR />
<BR />
<STRONG>Update 02 May 2018:</STRONG><BR />
<BR />
The <A href="https://twitter.com/qmacro/status/990640820574441472" target="_blank" rel="nofollow noopener noreferrer">final results of the poll</A> came in:<BR />
<UL><BR />
 	<LI>Total number of votes: 137</LI><BR />
 	<LI>Those caring about whitespace: 87%</LI><BR />
 	<LI>Those not caring about whitespace: 13%</LI><BR />
</UL>
