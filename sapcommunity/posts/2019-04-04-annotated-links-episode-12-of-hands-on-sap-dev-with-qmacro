2019-04-04-annotated-links-episode-12-of-hands-on-sap-dev-with-qmacro
Annotated links: Episode 12 of Hands-on SAP dev with qmacro
technology-blog-sap
2019-04-04
https://community.sap.com/t5/technology-blogs-by-sap/annotated-links-episode-12-of-hands-on-sap-dev-with-qmacro/ba-p/13405044
<EM>This is a searchable description of the content of a live stream recording, specifically <STRONG>"Episode 12 - Exploring and understanding parts of <SPAN class="citation"><a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a>/cds</SPAN> JS - code &amp; style"</STRONG> in the "<A href="https://bit.ly/handsonsapdev" target="_blank" rel="nofollow noopener noreferrer">Hands-on SAP dev with qmacro</A>" series. There are links directly to specific highlights in the video recording. For links to annotations of other episodes, please see the "<A href="https://bit.ly/handsonsapdev#replays" target="_blank" rel="nofollow noopener noreferrer">Catch the replays</A>" section of the series blog post.</EM><BR />
<BR />
This episode, titled "<A href="https://bit.ly/handsonsapdev#ep12" target="_blank" rel="nofollow noopener noreferrer"><SPAN class="citation">Exploring and understanding parts of @sap/cds JS - code &amp; style</SPAN></A>", was streamed live on Fri 15 Mar 2019 and is approximately one hour in length. The stream recording is <A href="https://www.youtube.com/watch?v=c93FYLw8DfI&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0" target="_blank" rel="nofollow noopener noreferrer">available on YouTube</A>.<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2019/04/Screen-Shot-2019-04-04-at-14.57.12.jpg" /><BR />
<BR />
Below is a brief synopsis, and links to specific highlights - use these links to jump directly to particular places of interest in the recording, based on 'hh:mm:ss' style timestamps.<BR />
<H2 id="brief-synopsis" id="toc-hId-928888153">Brief synopsis</H2><BR />
I had an itch to scratch, in that I wanted to be able to filter out columns in CSV files. In this episode we take a look at some of the JavaScript within the <SPAN class="citation"><a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a>/cds</SPAN> module – what it offers and how it’s written. We then see how some of that was useful in building a simple CSV filter mechanism.<BR />
<BR />
This episode was live streamed from the SAP offices in Maidenhead, just before the start of <A href="https://wiki.scn.sap.com/wiki/display/events/SAP+Inside+Track+Maidenhead,+Friday+March+15th+2019,+%23sitMAI" target="_blank" rel="noopener noreferrer">SAP Inside Track Maidenhead</A> which was taking place that day.<BR />
<H2 id="links-to-specific-highlights" id="toc-hId-732374648">Links to specific highlights</H2><BR />
<STRONG><A href="https://www.youtube.com/watch?v=c93FYLw8DfI&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h03m30s" target="_blank" rel="nofollow noopener noreferrer">00:03:30</A>:</STRONG> A quick update, showing the new <A href="https://www.youtube.com/playlist?list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0" target="_blank" rel="nofollow noopener noreferrer">playlist of live stream recordings on YouTube</A> in the <A href="https://www.youtube.com/channel/UCNfmelKDrvRmjYwSi9yvrMg" target="_blank" rel="nofollow noopener noreferrer">SAP Developers</A> channel (if you're not suscribed already to the channel, please consider doing so!).<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=c93FYLw8DfI&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h05m00s" target="_blank" rel="nofollow noopener noreferrer">00:05:00</A>:</STRONG> A look at the annotations of the live stream recordings - check out the links in <A href="https://bit.ly/handsonsapdev#replays" target="_blank" rel="nofollow noopener noreferrer">the main Hands-on SAP dev blog post</A>.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=c93FYLw8DfI&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h07m48s" target="_blank" rel="nofollow noopener noreferrer">00:07:48</A>:</STRONG> Looking at the brand new updated UI5 course on openSAP: <A href="https://open.sap.com/courses/ui52" target="_blank" rel="noopener noreferrer">Evolved Web Apps with SAPUI5</A> - don't forget to enrol!<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=c93FYLw8DfI&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h08m50s" target="_blank" rel="nofollow noopener noreferrer">00:08:50</A>:</STRONG> There's another new course on openSAP that we look at too, and this one, <A href="https://open.sap.com/courses/cp1-3" target="_blank" rel="noopener noreferrer">SAP Cloud Platform Essentials (Update Q2/2019)</A>, which covers the SAP Cloud Application Programming Model, hurray!<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=c93FYLw8DfI&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h11m10s" target="_blank" rel="nofollow noopener noreferrer">00:11:10</A>:</STRONG> Starting to take a look at what we're going to do in this episode, talking about the source code of the <CODE><a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a>/cds</CODE> module family, which is a rich source of learning for us in our journey towards ES6 mastery.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=c93FYLw8DfI&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h12m35s" target="_blank" rel="nofollow noopener noreferrer">00:12:35</A>:</STRONG> Looking at the <CODE>grab.js</CODE> script that we've been building, which allows us to retrieve data from the <A href="http://services.odata.org/V3/Northwind/Northwind.svc" target="_blank" rel="nofollow noopener noreferrer">Northwind service</A>, paging through it where skip tokens are used.<BR />
<BR />
In grabbing this data we naturally get all of the fields, i.e. values for all of the properties in the entities that we're retrieving (Products, Suppliers and Categories). If we want fewer fields, it is quite cumbersome to manually remove from from the CSV files that are produced. This gave me the idea to write something that would do it for me, taking some ideas and code from the <CODE><a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a>/cds</CODE> module family.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=c93FYLw8DfI&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h15m52s" target="_blank" rel="nofollow noopener noreferrer">00:15:52</A>:</STRONG> Hacking my sitting position by finding a couple of stackable chairs and sitting on them both instead for a better posture. Stacked chairs ftw!<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=c93FYLw8DfI&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h16m32s" target="_blank" rel="nofollow noopener noreferrer">00:16:32</A>:</STRONG> The "initializing from csv files at ./db/csv..." message that we see when invoking <CODE>cds deploy</CODE> gave me a clue that parts of <CODE><a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a>/cds</CODE> were indeed (of course) handling CSV data, and I was curious to take a look:<BR />
<DIV><BR />
<PRE class="sourceCode bash"><CODE class="sourceCode bash"><SPAN class="fu">grep</SPAN> -R <SPAN class="st">'initializing from csv'</SPAN> *</CODE></PRE><BR />
</DIV><BR />
This pointed me to the <CODE>node_modules/@sap/cds/bin/etc/init-from-csv.js</CODE> file.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=c93FYLw8DfI&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h18m00s" target="_blank" rel="nofollow noopener noreferrer">00:18:00</A>:</STRONG> Reminding ourselves of the different options available to us with the <CODE>cds</CODE> command line tool, and taking a brief look at how the other <CODE><a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a>/cds</CODE> modules are related via the "dependencies" information shown in the output of:<BR />
<DIV><BR />
<PRE class="sourceCode bash"><CODE class="sourceCode bash"><SPAN class="ex">npm</SPAN> info @sap/cds</CODE></PRE><BR />
</DIV><BR />
<STRONG><A href="https://www.youtube.com/watch?v=c93FYLw8DfI&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h19m00s" target="_blank" rel="nofollow noopener noreferrer">00:19:00</A>:</STRONG> Digging further into the <CODE><a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a>/cds/</CODE> directory in the <CODE>node_modules/</CODE> directory in the project, we see the <CODE>common.cds</CODE> file that we've looked at before, and also <CODE>lib/</CODE> and <CODE>bin/</CODE> directories.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=c93FYLw8DfI&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h19m34s" target="_blank" rel="nofollow noopener noreferrer">00:19:34</A>:</STRONG> It does occur to me that the name "bin" (short for "binary") is a little anachronistic, or at least not particularly appropriate, given that the contents are not binary files as they're not compiled - they're JavaScript, after all. Perhaps a better term is "executable".<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=c93FYLw8DfI&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h21m45s" target="_blank" rel="nofollow noopener noreferrer">00:21:45</A>:</STRONG> In the <CODE>bin/</CODE> directory we have <CODE>cds.js</CODE> that responds when we invoke the cds command line client, and we can then also see more or less a one-to-one relationship between what you commands are available:<BR />
<DIV><BR />
<PRE class="sourceCode bash"><CODE class="sourceCode bash">=<SPAN class="op">&gt;</SPAN> <SPAN class="ex">cds</SPAN><BR />
<BR />
<SPAN class="ex">USAGE</SPAN><BR />
<BR />
    <SPAN class="ex">cds</SPAN> <SPAN class="op">&lt;</SPAN>command<SPAN class="op">&gt;</SPAN> [<SPAN class="op">&lt;</SPAN>args<SPAN class="op">&gt;</SPAN>]<BR />
<BR />
<SPAN class="ex">COMMANDS</SPAN><BR />
<BR />
  <SPAN class="ex">c</SPAN> <SPAN class="kw">|</SPAN> <SPAN class="ex">compile</SPAN>    ...individual models (= the default)<BR />
  <SPAN class="ex">d</SPAN> <SPAN class="kw">|</SPAN> <SPAN class="ex">deploy</SPAN>     ...data models to a database<BR />
  <SPAN class="ex">s</SPAN> <SPAN class="kw">|</SPAN> <SPAN class="ex">serve</SPAN>      ...service models to REST clients<BR />
  <SPAN class="ex">b</SPAN> <SPAN class="kw">|</SPAN> <SPAN class="ex">build</SPAN>      ...whole modules or projects<BR />
  <SPAN class="ex">i</SPAN> <SPAN class="kw">|</SPAN> <SPAN class="ex">init</SPAN>       ...jump-starts a new project<BR />
  <SPAN class="ex">e</SPAN> <SPAN class="kw">|</SPAN> <SPAN class="fu">env</SPAN>        get/set current cds configuration<BR />
  <SPAN class="ex">r</SPAN> <SPAN class="kw">|</SPAN> <SPAN class="ex">repl</SPAN>       cds<SPAN class="st">'s read-eval-event-loop</SPAN><BR />
<SPAN class="st">  h | help       shows usage for cds and individual commands</SPAN><BR />
<SPAN class="st">  v | version    prints detailed version information</SPAN><BR />
<BR />
<SPAN class="st">[...]</SPAN></CODE></PRE><BR />
</DIV><BR />
... and the JavaScript files in that <CODE>bin/</CODE> directory:<BR />
<DIV><BR />
<PRE class="sourceCode bash"><CODE class="sourceCode bash">=<SPAN class="op">&gt;</SPAN> <SPAN class="fu">ls</SPAN> -1 node_modules/@sap/cds/bin <SPAN class="kw">|</SPAN> <SPAN class="fu">grep</SPAN> .js<BR />
<SPAN class="ex">cds.js*</SPAN><BR />
<SPAN class="ex">compile.js</SPAN><BR />
<SPAN class="ex">deploy.js</SPAN><BR />
<SPAN class="ex">dev.js</SPAN><BR />
<SPAN class="ex">env.js</SPAN><BR />
<SPAN class="ex">eval.js</SPAN><BR />
<SPAN class="ex">help.js</SPAN><BR />
<SPAN class="ex">init.js</SPAN><BR />
<SPAN class="ex">repl.js</SPAN><BR />
<SPAN class="ex">run.js</SPAN><BR />
<SPAN class="ex">serve.js</SPAN><BR />
<SPAN class="ex">version.js</SPAN></CODE></PRE><BR />
</DIV><BR />
<STRONG><A href="https://www.youtube.com/watch?v=c93FYLw8DfI&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h22m28s" target="_blank" rel="nofollow noopener noreferrer">00:22:28</A>:</STRONG> We take a look at one of these scripts - <CODE>deploy.js</CODE> - where we see a promise chain that makes use of the <CODE>init-from-csv</CODE> module! Inside this module we place a breakpoint to see what happens when we invoke the <CODE>cds deploy</CODE> command.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=c93FYLw8DfI&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h24m00s" target="_blank" rel="nofollow noopener noreferrer">00:24:00</A>:</STRONG> Running <CODE>cds d</CODE> within the integrated terminal in VS Code - but of course we don't hit the breakpoint like this as we're not in debug mode.<BR />
<BR />
So we start debug mode with F5, but that also is not quite what we want - what is executed is <CODE>cds run</CODE> not <CODE>cds deploy</CODE> here.<BR />
<BR />
This is because of the default <A href="https://code.visualstudio.com/docs/editor/debugging#_launch-configurations" target="_blank" rel="nofollow noopener noreferrer">launch configuration</A> in VS Code that comes with a new CAP initialised project, in <CODE>.vscode/launch.json</CODE>:<BR />
<DIV><BR />
<PRE class="sourceCode json"><CODE class="sourceCode json"><SPAN class="fu">{</SPAN><BR />
    <SPAN class="dt">"version"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="st">"0.2.0"</SPAN><SPAN class="fu">,</SPAN><BR />
    <SPAN class="dt">"configurations"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="ot">[</SPAN><BR />
        <SPAN class="fu">{</SPAN><BR />
            <SPAN class="dt">"name"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="st">"cds run"</SPAN><SPAN class="fu">,</SPAN><BR />
            <SPAN class="dt">"type"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="st">"node"</SPAN><SPAN class="fu">,</SPAN><BR />
            <SPAN class="dt">"request"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="st">"launch"</SPAN><SPAN class="fu">,</SPAN><BR />
            <SPAN class="dt">"program"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="st">"${workspaceFolder}/.vscode/cds"</SPAN><SPAN class="fu">,</SPAN> <SPAN class="dt">"args"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="ot">[</SPAN> <SPAN class="st">"run"</SPAN> <SPAN class="ot">]</SPAN><SPAN class="fu">,</SPAN><BR />
            <SPAN class="dt">"skipFiles"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="ot">[</SPAN><BR />
                <SPAN class="st">"&lt;node_internals&gt;/**/*.js"</SPAN><SPAN class="ot">,</SPAN><BR />
                <SPAN class="st">"**/cds-reflect/lib/index.js"</SPAN><SPAN class="ot">,</SPAN><BR />
                <SPAN class="st">"**/cds/lib/index.js"</SPAN><SPAN class="ot">,</SPAN><BR />
                <SPAN class="st">"**/.vscode/cds.js"</SPAN><SPAN class="ot">,</SPAN><BR />
            <SPAN class="ot">]</SPAN><SPAN class="fu">,</SPAN><BR />
            <SPAN class="dt">"autoAttachChildProcesses"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="kw">true</SPAN><SPAN class="fu">,</SPAN><BR />
            <SPAN class="dt">"console"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="st">"integratedTerminal"</SPAN><BR />
        <SPAN class="fu">}</SPAN><BR />
    <SPAN class="ot">]</SPAN><BR />
<SPAN class="fu">}</SPAN></CODE></PRE><BR />
</DIV><BR />
We can see here that the argument to <CODE>cds</CODE> here is "run".<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=c93FYLw8DfI&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h25m30s" target="_blank" rel="nofollow noopener noreferrer">00:25:30</A>:</STRONG> So what we do is duplicate the launch configuration stanza, creating a new one for <CODE>cds deploy</CODE>. Then we can re-start debugging mode, choose the specific "cds deploy" launch configuration, and we end up at the breakpoint we set. Lovely!<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=c93FYLw8DfI&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h27m11s" target="_blank" rel="nofollow noopener noreferrer">00:27:11</A>:</STRONG> In the debug console we look at the data available to us at the breakpoint, specifically <CODE>model</CODE>, which is an Array with two values, "db" and "srv". Now we know that, reading the code in <CODE>init-from-csv</CODE> becomes easier - it looks for CSV files and loads the contents into the persistence layer via the CDS API.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=c93FYLw8DfI&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h28m45s" target="_blank" rel="nofollow noopener noreferrer">00:28:45</A>:</STRONG> A look at how the module uses destructuring, a feature available in ES6, to pull specific functions from <CODE>lib/utils/fs.js</CODE>, and in turn, how this custom <CODE>fs</CODE> module bases itself on the builtin <CODE>fs</CODE> module, via the <CODE>__proto__</CODE> feature.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=c93FYLw8DfI&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h30m55s" target="_blank" rel="nofollow noopener noreferrer">00:30:55</A>:</STRONG> The <CODE>_init</CODE> function in the <CODE>init-from-csv</CODE> module parses the CSV data and then inserts into the tables. We take a quick look at what exactly the expression <CODE>.slice(0,-4)</CODE> is doing here, which looks initially a bit odd, until we realise that slice works on strings on a character-by-character basis: <CODE>'filename.ext'.slice(0,-4)</CODE> produces "filename".<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=c93FYLw8DfI&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h34m35s" target="_blank" rel="nofollow noopener noreferrer">00:34:35</A>:</STRONG> Looking into where <CODE>csv.parse</CODE> comes from, which is another module in the <CODE><a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a>/cds</CODE> bundle - in <CODE>lib/utils/csv.js</CODE>. There is a parsing function and a serialising function in this module - I can definitely make use of the former!<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=c93FYLw8DfI&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h36m10s" target="_blank" rel="nofollow noopener noreferrer">00:36:10</A>:</STRONG> Someone (an SAP Inside Track Maidenhead attendee) looking at me through the internal office window, wondering, perhaps, what the heck I'm doing.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=c93FYLw8DfI&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h36m40s" target="_blank" rel="nofollow noopener noreferrer">00:36:40</A>:</STRONG> Switching over to the CSV filter project <CODE>csvf</CODE>, and having a look what it does:<BR />
<DIV><BR />
<PRE class="sourceCode bash"><CODE class="sourceCode bash">=<SPAN class="op">&gt;</SPAN> <SPAN class="ex">node</SPAN> ./cli.js<BR />
<SPAN class="ex">Usage</SPAN>: csvf [options]<BR />
<SPAN class="ex">Options</SPAN>:<BR />
        <SPAN class="ex">-i</SPAN>, --input    Input CSV file (mandatory)<BR />
        <SPAN class="ex">-o</SPAN>, --output   Output CSV file (defaults to _out.csv)<BR />
        <SPAN class="ex">-f</SPAN>, --fields   List of fields to output (space separated)<BR />
<BR />
        <SPAN class="ex">-h</SPAN>, --help     Shows this help<BR />
        <SPAN class="ex">-v</SPAN>, --verbose  Talkative mode<BR />
<BR />
<SPAN class="ex">Example</SPAN>:<BR />
        <SPAN class="ex">csvf</SPAN> -i data.csv -f supplierID companyName city -o smaller.csv</CODE></PRE><BR />
</DIV><BR />
A sample run is successful:<BR />
<DIV><BR />
<PRE class="sourceCode bash"><CODE class="sourceCode bash">=<SPAN class="op">&gt;</SPAN> <SPAN class="ex">node</SPAN> ./cli.js -i tmp/Suppliers.csv --fields supplierID companyName -v<BR />
<SPAN class="op">&gt;&gt;</SPAN> <SPAN class="ex">Processing</SPAN> tmp/Suppliers.csv<BR />
<SPAN class="op">&gt;&gt;</SPAN> <SPAN class="ex">Filtering</SPAN> to supplierID,companyName<BR />
<SPAN class="op">&gt;&gt;</SPAN> <SPAN class="ex">Written</SPAN> to _out.csv</CODE></PRE><BR />
</DIV><BR />
and in <CODE>_out.csv</CODE> we see that we have a reduced CSV set:<BR />
<PRE class="csv"><CODE>supplierID,companyName<BR />
1,Exotic Liquids<BR />
2,New Orleans Cajun Delights<BR />
3,Grandma Kelly's Homestead</CODE></PRE><BR />
<STRONG><A href="https://www.youtube.com/watch?v=c93FYLw8DfI&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h40m20s" target="_blank" rel="nofollow noopener noreferrer">00:40:20</A>:</STRONG> Taking a look in <CODE>cli.js</CODE> to see how we can use the <CODE><a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a>/cds</CODE>'s <CODE>csv</CODE> module in our own program - by installing <CODE><a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a>/cds</CODE> in the project, I have access to all the modules in the bundle, which means I can do this:<BR />
<DIV><BR />
<PRE class="sourceCode javascript"><CODE class="sourceCode javascript"><SPAN class="kw">const</SPAN> csv <SPAN class="op">=</SPAN> <SPAN class="at">require</SPAN>(<SPAN class="st">'@sap/cds/lib/utils/csv'</SPAN>)</CODE></PRE><BR />
</DIV><BR />
I'm also using the <A href="https://www.npmjs.com/package/command-line-args" target="_blank" rel="nofollow noopener noreferrer">command-line-args</A> module which allows me to very simply build a nice command line interface with a rich set of options.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=c93FYLw8DfI&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h45m10s" target="_blank" rel="nofollow noopener noreferrer">00:45:10</A>:</STRONG> Cameo appearance in the room from <A href="https://www.linkedin.com/in/janvanansem/" target="_blank" rel="nofollow noopener noreferrer">Jan van Ansem</A>, one of the organisers of SAP Inside Track Maidenhead!<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=c93FYLw8DfI&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h45m49s" target="_blank" rel="nofollow noopener noreferrer">00:45:49</A>:</STRONG> Looking at my attempts to write functions that are pure, by looking at how I approached writing the logging function. While in the past I would have written a logging function to refer to a global value (outside of the function) that indicated whether log output was generally required, I wrote this logging function that didn't refer to any values outside of itself, by writing it so it can be partially applied, and then adopting the IIFE (immediately invoked function expression) technique, like this:<BR />
<DIV><BR />
<PRE class="sourceCode javascript"><CODE class="sourceCode javascript"><SPAN class="kw">const</SPAN> log <SPAN class="op">=</SPAN> (isVerbose <SPAN class="op">=&gt;</SPAN> x <SPAN class="op">=&gt;</SPAN> isVerbose <SPAN class="op">&amp;&amp;</SPAN> <SPAN class="va">console</SPAN>.<SPAN class="at">log</SPAN>(<SPAN class="st">"&gt;&gt;"</SPAN><SPAN class="op">,</SPAN> x))(<SPAN class="va">options</SPAN>.<SPAN class="at">verbose</SPAN>)</CODE></PRE><BR />
</DIV><BR />
Note the two <A href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions" target="_blank" rel="nofollow noopener noreferrer">fat arrows</A> in there, and the implicit use of a <A href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures" target="_blank" rel="nofollow noopener noreferrer">closure</A>.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=c93FYLw8DfI&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h50m07s" target="_blank" rel="nofollow noopener noreferrer">00:50:07</A>:</STRONG> Looking at the simple <CODE>serialise</CODE> function which also uses an ES6 feature, specifically <A href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Default_parameters" target="_blank" rel="nofollow noopener noreferrer">default function parameters</A>.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=c93FYLw8DfI&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h51m40s" target="_blank" rel="nofollow noopener noreferrer">00:51:40</A>:</STRONG> Looking how the <CODE>csv.parse</CODE> function is used in this script:<BR />
<DIV><BR />
<PRE class="sourceCode javascript"><CODE class="sourceCode javascript"><SPAN class="kw">let</SPAN> [cols<SPAN class="op">,</SPAN> ...<SPAN class="at">rows</SPAN>] <SPAN class="op">=</SPAN> <SPAN class="va">csv</SPAN>.<SPAN class="at">parse</SPAN>(src)</CODE></PRE><BR />
</DIV><BR />
<STRONG><A href="https://www.youtube.com/watch?v=c93FYLw8DfI&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h53m00s" target="_blank" rel="nofollow noopener noreferrer">00:53:00</A>:</STRONG> Looking at the <CODE>indices</CODE> function in the script, where we use the interesting function application thus:<BR />
<DIV><BR />
<PRE class="sourceCode javascript"><CODE class="sourceCode javascript"><SPAN class="kw">const</SPAN> selectedIndices <SPAN class="op">=</SPAN> <SPAN class="at">indices</SPAN>(cols)(<SPAN class="va">options</SPAN>.<SPAN class="at">fields</SPAN>)</CODE></PRE><BR />
</DIV><BR />
In other words we're calling <CODE>indices(cols)</CODE> which produces a function, which we then call, passing <CODE>options.fields</CODE>.<BR />
<BR />
When we look at the definition of the <CODE>indices</CODE> function, we can better understand how this works:<BR />
<DIV><BR />
<PRE class="sourceCode javascript"><CODE class="sourceCode javascript"><SPAN class="kw">const</SPAN> indices <SPAN class="op">=</SPAN> ref <SPAN class="op">=&gt;</SPAN> fields <SPAN class="op">=&gt;</SPAN> <SPAN class="va">fields</SPAN>.<SPAN class="at">map</SPAN>(x <SPAN class="op">=&gt;</SPAN> <SPAN class="va">ref</SPAN>.<SPAN class="at">indexOf</SPAN>(x))</CODE></PRE><BR />
</DIV><BR />
<STRONG><A href="https://www.youtube.com/watch?v=c93FYLw8DfI&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h55m10s" target="_blank" rel="nofollow noopener noreferrer">00:55:10</A>:</STRONG> Now our confidence has grown by looking at the <CODE>indices</CODE> function, we take a quick look in the last moments at the <CODE>pick</CODE> function which is possibly a little bit more exciting:<BR />
<DIV><BR />
<PRE class="sourceCode javascript"><CODE class="sourceCode javascript"><SPAN class="kw">const</SPAN> pick <SPAN class="op">=</SPAN> indices <SPAN class="op">=&gt;</SPAN> source <SPAN class="op">=&gt;</SPAN><BR />
    <SPAN class="va">indices</SPAN>.<SPAN class="at">reduce</SPAN>((a<SPAN class="op">,</SPAN> x) <SPAN class="op">=&gt;</SPAN> (_ <SPAN class="op">=&gt;</SPAN> a)(<SPAN class="va">a</SPAN>.<SPAN class="at">push</SPAN>(source[x]))<SPAN class="op">,</SPAN> [])</CODE></PRE><BR />
</DIV><BR />
One interesting thing is that I changed the original definition of this function, to switch around the order of the arguments, so it could be more easily (and usefully) partially applied. Of course, we can't continue without a quick reference to the excellent talk "<A href="http://functionaltalks.org/2013/05/27/brian-lonsdorf-hey-underscore-youre-doing-it-wrong/" target="_blank" rel="nofollow noopener noreferrer">Hey Underscore, You're Doing It Wrong!</A>" by Brian Lonsdorf. If you haven't watched this talk, go and watch it now! And if you have watched it already, go and watch it again!<BR />
<BR />
Let's finish this annotation post by looking at where that <CODE>pick</CODE> function is partially applied:<BR />
<DIV><BR />
<PRE class="sourceCode javascript"><CODE class="sourceCode javascript"><SPAN class="at">writefile</SPAN>(<BR />
    <SPAN class="va">options</SPAN>.<SPAN class="va">output</SPAN>.<BR />
    <SPAN class="at">serialise</SPAN>(outCols<SPAN class="op">,</SPAN> <SPAN class="va">rows</SPAN>.<SPAN class="at">map</SPAN>(<SPAN class="at">pick</SPAN>(selectedIndices)))<SPAN class="op">,</SPAN><BR />
    <SPAN class="st">'utf8'</SPAN><SPAN class="op">,</SPAN><BR />
    e <SPAN class="op">=&gt;</SPAN> <SPAN class="at">err</SPAN>(e) <SPAN class="op">||</SPAN> <SPAN class="at">log</SPAN>(<SPAN class="vs">`Written to </SPAN><SPAN class="sc">${</SPAN><SPAN class="va">options</SPAN>.<SPAN class="at">output</SPAN><SPAN class="sc">}</SPAN><SPAN class="vs">`</SPAN>)<BR />
)</CODE></PRE><BR />
</DIV><BR />
Take a moment to stare at that, especially the <CODE>map</CODE> call. And then go and watch that video! <span class="lia-unicode-emoji" title=":winking_face:">😉</span>
