2018-01-20-discovering-scp-workflow-user-tasks
Discovering SCP Workflow - User Tasks
technology-blog-members
2018-01-20
https://community.sap.com/t5/technology-blogs-by-members/discovering-scp-workflow-user-tasks/ba-p/13359863
Previous post in this series: <A href="https://blogs.sap.com/2018/01/18/discovering-scp-workflow-workflow-definition/" target="_blank" rel="noopener noreferrer">Discovering SCP Workflow - Workflow Definition</A>.<BR />
<BR />
This post is part of a series, a guide to which can be found here:&nbsp;<A href="https://qmacro.org/blog/posts/2018/01/16/discovering-scp-workflow/" target="_blank" rel="nofollow noopener noreferrer">Discovering SCP Workflow</A>.<BR />
<BR />
We've now seen the workflow definition from 10,000 metres. It's time to zoom in on the first of the three tasks therein - the user task "Present Recommendations":<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2018/01/Screenshot-2018-01-18-at-09.27.24.png" height="155" width="234" /><BR />
<BR />
In my mind, user task types are special, in that they involve a human, and as such need extra moving parts to work.<BR />
<BR />
As you probably know, when you enable the Workflow service in your SCP cockpit, various things are provisioned, including the My Inbox app in an SCP Portal service based Fiori Launchpad (see <A href="https://blogs.sap.com/2018/01/08/discovering-scp-workflow-the-monitor/" target="_blank" rel="noopener noreferrer">Discovering SCP Workflow - The Monitor</A>). It's in this global workflow worklist app that user tasks appear, and remain until the user takes action (such as to accept, reject, continue or otherwise make known their decision or action&nbsp;related to that specific step in the lifetime of the workflow instance). They can also be suspended or terminated by an administrator.<BR />
<H3 id="toc-hId-1034086239">Our user task</H3><BR />
You've already seen a glimpse of what the user task is, and should enable, in <A href="https://blogs.sap.com/2018/01/17/discovering-scp-workflow-service-proxy/" target="_blank" rel="noopener noreferrer">Discovering SCP Workflow - Service Proxy</A>:<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2018/01/Screenshot-2018-01-16-at-10.42.17.png" /><BR />
<BR />
We see that the My Inbox app is presenting 2 to-be-completed workflow items - user tasks - for me to process. It just so happens that both user tasks are the same (to select recommended beers), but My Inbox collects together all user tasks from all types of different workflow definitions.<BR />
<H3 id="toc-hId-837572734">Configuring the task</H3><BR />
Workflow definitions are created and maintained using the Workflow Editor feature in the Web IDE:<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2018/01/Screenshot-2018-01-18-at-09.44.23.png" height="106" width="349" /><BR />
<BR />
This provides us with the facility to model entire workflow definitions, including describing the flow with a graphical editor and specifying task details too. Here's a screenshot of our user task definition details:<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2018/01/Screenshot-2018-01-18-at-09.46.58.png" /><BR />
<BR />
We'll cover some of these now and some in the next post, but I don't want to dwell too much on the mechanics of the User Task Properties themselves - there's already a post by <SPAN class="mention-scrubbed">seshadri.sreenivasr</SPAN>&nbsp;"<A href="https://blogs.sap.com/2018/01/08/how-configure-sap-cp-workflow-user-tasks/" target="_blank" rel="noopener noreferrer">How Configure SAP CP Workflow User Tasks</A>" which covers this in great detail.<BR />
<BR />
There's <A href="https://help.sap.com/viewer/f85276c5069a429fa37d1cd352785c25/Cloud/en-US/5e058cf1333b4e18bfa6431a52e991d3.html" target="_blank" rel="noopener noreferrer">documentation for configuring user tasks</A> available, but in its present early form is a little light on detail. It does make me smile, because it reminds me of a comedy flowchart which looks something like this:<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2018/01/Screenshot-2018-01-18-at-09.51.53.png" /><BR />
<BR />
The documentation goes something along these lines:<BR />
<OL><BR />
 	<LI>enter this value into this property</LI><BR />
 	<LI>press "OK"</LI><BR />
 	<LI>select some other value for another property</LI><BR />
 	<LI>specify the UI5 app you've built for presenting and handling the user task</LI><BR />
 	<LI>...</LI><BR />
</OL><BR />
Wait, what?<BR />
<H3 id="toc-hId-641059229">The My Inbox context</H3><BR />
What UI5 app? How do I build it? What are the requirements? Well, we'll cover some of this in this post, and complete the picture in the next post. To set the scene, though - let's look at the context in which the UI5 app appears - the My Inbox app.<BR />
<BR />
There's a screenshot of the My Inbox app in action earlier. But even before then, there's some SCP Workflow service goodness going on, related to the dynamic tile on the Launchpad home page:<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2018/01/Screenshot-2018-01-19-at-14.25.38.png" /><BR />
<BR />
The value "2" is coming from a call to the Workflow API. Let's dig in and use the Network panel of Chrome's developer tools to see:<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2018/01/Screenshot-2018-01-20-at-09.54.00.png" /><BR />
<BR />
Each of these three requests are the same, repeated every 15 seconds. There are other requests too but I've filtered on the string "bpmworkflow" here. (I can imagine this polling by the unified shell infrastructure being eventually replaced by web sockets. But that's a story for another time.)<BR />
<BR />
That Request URL shown in the "Headers" section in the screenshot looks pretty complex, let's break it down, decode the URL-encoded bits, and add some nice whitespace:<BR />
<PRE><CODE><A href="https://flpportal-p481810trial.dispatcher.hanatrial.ondemand.com" target="test_blank" rel="nofollow noopener noreferrer">https://flpportal-p481810trial.dispatcher.hanatrial.ondemand.com</A><BR />
  /sap/fiori/bpmmyinbox/bpmworkflowruntime/odata/tcm<BR />
  /TaskCollection/$count/<BR />
  ?$filter=Status eq 'READY' or <BR />
           Status eq 'RESERVED' or <BR />
           Status eq 'IN_PROGRESS' or <BR />
           Status eq 'EXECUTED'<BR />
</CODE></PRE><BR />
That's better! Much more friendly. What can we discern from this URL?<BR />
<UL><BR />
 	<LI>it's a call to my instance of the portal service, of course (flpportal-p481810trial)</LI><BR />
 	<LI>there's a reference to a UI5 app (/sap/fiori/bpmmyinbox)</LI><BR />
 	<LI>and within that, a reference to a destination (/bpmworkflowruntime)</LI><BR />
 	<LI>following the destination reference there's some supplemental path info that suggests an OData service at that destination (/odata/tcm)</LI><BR />
 	<LI>and specifically within that OData service, there's a task collection entity (/TaskCollection)</LI><BR />
 	<LI>we're looking for how many entities there are (/$count)</LI><BR />
 	<LI>specifically for entities with certain statuses (?$filter=...)</LI><BR />
</UL><BR />
Gosh!<BR />
<BR />
Indeed, looking at the neo-app.json file for the bpmmyinbox app, which, with a bit of luck and a following wind, we can retrieve thus:<BR />
<PRE><CODE><A href="https://flpportal-p481810trial.dispatcher.hanatrial.ondemand.com" target="test_blank" rel="nofollow noopener noreferrer">https://flpportal-p481810trial.dispatcher.hanatrial.ondemand.com</A><BR />
  /sap/fiori/bpmmyinbox<BR />
  /neo-app.json</CODE></PRE><BR />
we see the bpmworkflowruntime destination:<BR />
<PRE class="language-javascript"><CODE>{<BR />
  path: "/bpmworkflowruntime",<BR />
  target: {<BR />
    type: "destination",<BR />
    name: "bpmworkflowruntime",<BR />
    entryPath: "/workflow-service",<BR />
  },<BR />
  description: "TCM Provider",<BR />
}</CODE></PRE><BR />
TCM stands for Task Consumption Model, by the way.<BR />
<BR />
So after picking apart the URL earlier, looking at the definition of the "bpmworkflowruntime" destination to see that the URL is our old friend:<BR />
<PRE><CODE><A href="https://bpmworkflowruntimewfs-p481810trial.hanatrial.ondemand.com" target="test_blank" rel="nofollow noopener noreferrer">https://bpmworkflowruntimewfs-p481810trial.hanatrial.ondemand.com</A></CODE></PRE><BR />
and being mindful of the value for the "entryPath" property, we can reconstruct the "real" unabstracted URL which we can consider as part of the wider Workflow API:<BR />
<PRE><CODE><A href="https://bpmworkflowruntimewfs-p481810trial.hanatrial.ondemand.com" target="test_blank" rel="nofollow noopener noreferrer">https://bpmworkflowruntimewfs-p481810trial.hanatrial.ondemand.com</A><BR />
 /workflow-service/odata/tcm/TaskCollection/$count/<BR />
 ?$filter=Status eq 'READY' or <BR />
          Status eq 'RESERVED' or <BR />
          Status eq 'IN_PROGRESS' or <BR />
          Status eq 'EXECUTED'<BR />
</CODE></PRE><BR />
which, in my case, gives us, somewhat anticlimactically:<BR />
<PRE><CODE>2</CODE></PRE><BR />
This of course is the value that's shown in the dynamic tile earlier.<BR />
<BR />
Anyway, at this point I find myself asking myself, as <A href="https://open.spotify.com/track/38Ngied9rBORlAbLYNCl4k" target="_blank" rel="nofollow noopener noreferrer">David Byrne did once</A>, "well, how did I get here?"<BR />
<H3 id="toc-hId-444545724">UI5 app as task UI component</H3><BR />
The answer to that question is simply that there's a lot to learn by looking at what network calls are made. So let's continue.<BR />
<BR />
When we think about it, it's obvious that the My Inbox app and everything to do with it is going to make use of the Workflow API. Even before it's loaded, in the case of the dynamic value on the tile as we've just seen.<BR />
<BR />
But what happens next? Well, let's click on the My Inbox tile and observe the flow of traffic to the Workflow API using the same filter in the Network panel. This is what we see, requests that follow on from the repeated polling we saw already:<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2018/01/Screenshot-2018-01-20-at-11.02.45.png" /><BR />
<BR />
(Even though I value the performance improvements of batching requests up with OData's $batch, it does make me grimace somewhat when I'm trying to see what's going on behind the curtain. Yes, I can use setUseBatch to hack the model so things aren't batched up, but that's not the point. Perhaps setting debug mode on in UI5 should also turn off batch mode for OData models. What do you think? Let me know in the comments below).<BR />
<BR />
At this stage the UI looks like the screenshot earlier - the My Inbox app showing two entries in the master list, with the first one selected and showing the detail (for beer recommendations related to <A href="https://untappd.com/user/qmacro/checkin/548688484" target="_blank" rel="nofollow noopener noreferrer">my checkin to Buxton Brewery's Subluminal</A>).<BR />
<BR />
These requests to URLs containing "bpmworkflow" tell us quite a bit. Let's dig in. The first request shown ($metadata) is for the metadata document that describes the tcm OData service that we saw earlier.<BR />
<BR />
To a UI5 programmer, a fetch of an OData services $metadata document is a good indication that an OData model is being instantiated. If we take a look at the initiator stack, we can see that the signs are strong:<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2018/01/Screenshot-2018-01-20-at-11.04.55.png" /><BR />
<BR />
Inside the Connection Manager module we can see the function flow:<BR />
<BR />
initModels -&gt; each -&gt; (anonymous)<BR />
<BR />
and at this point we have it confirmed:<BR />
<PRE class="language-javascript"><CODE>var oModel = bUseV2Model<BR />
  ? new sap.ui.model.odata.v2.ODataModel(sUrl, oConfig)<BR />
  : new sap.ui.model.odata.ODataModel(sUrl, oConfig);</CODE></PRE><BR />
(That's on line 219 of ConnectionManager-dbg.js that is loaded with UI5 1.50.7, for those of you who are interested.)<BR />
<BR />
And the absolute URL for the OData service's metadata document is, as we've established:<BR />
<PRE><CODE><A href="https://flpportal-p481810trial.dispatcher.hanatrial.ondemand.com" target="test_blank" rel="nofollow noopener noreferrer">https://flpportal-p481810trial.dispatcher.hanatrial.ondemand.com</A><BR />
  /sap/fiori/bpmmyinbox/bpmworkflowruntime<BR />
  /odata/tcm/$metadata</CODE></PRE><BR />
So it's likely that we're going to see some OData query operations on this service to retrieve the tasks relevant for me in My Inbox. Sure enough, following the metadata document retrieval, in one of the $batch requests to this OData service is exactly what we're looking for. It contains a single call, an HTTP GET on the TaskCollection entityset, representing a query. Here it is (at least, the most significant part) in all its URL-decoded glory:<BR />
<PRE><CODE>TaskCollection<BR />
  ?$skip=0<BR />
  &amp;$top=1000<BR />
  &amp;$orderby=CreatedOn desc<BR />
  &amp;$filter=((Status eq 'READY' or <BR />
             Status eq 'RESERVED' or <BR />
             Status eq 'IN_PROGRESS' or <BR />
             Status eq 'EXECUTED'))<BR />
  &amp;$select=SAP__Origin,<BR />
           InstanceID,<BR />
           TaskDefinitionID,<BR />
           TaskDefinitionName,<BR />
           TaskTitle,<BR />
           [...]<BR />
           SupportsAttachments<BR />
  &amp;$inlinecount=allpages</CODE></PRE><BR />
That OData query operation returns a collection of two entities. Yes, you guessed it, those two entities are the two tasks shown in the master list in My Inbox.<BR />
<BR />
There are further $batch requests that contain more OData operations that are used to bring back data to populate the details of the automatically selected first task, but we'll ignore those for now. Instead, let's look at the detail - specifically the &lt;content/&gt; - of the first of those two TaskCollection entities returned in response to the query we've just examined. Here it is, representing the task "Recommended beers similar to Subluminal":<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2018/01/Screenshot-2018-01-20-at-11.28.02.png" /><BR />
<BR />
Lots of goodness there.<BR />
<BR />
There's one particular property that catches my eye. And it's what I'll leave you with to take us through to the next post. First though, a question.<BR />
<BR />
<EM>How does My Inbox know how to represent a particular user task?</EM><BR />
<BR />
Going back to the high level steps described earlier in the official documentation, we have step 4, which says: "specify the UI5 app you've built for presenting and handling the user task". Well, it represents a user task with this very UI5 app you've specified for that particular user task in that particular workflow definition.<BR />
<BR />
And look - that property which caught my eye is the GUI_Link one, which has this value:<BR />
<PRE><CODE>sapui5://html5apps<BR />
  /untappdrecommendationapproval<BR />
  /qmacro.UntappdRecommendationApproval</CODE></PRE><BR />
That's a funky kind of internal scheme ("sapui5://") going on there! But it makes sense. When the workflow instance was instantiated, and the user task step initiated, the configuration specified here:<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2018/01/Screenshot-2018-01-20-at-11.36.30.png" /><BR />
<BR />
was bound into the instance, so that when it comes to the crunch, and My Inbox needs to display that particular user task, it knows which UI5 app to load. Magic!<BR />
<BR />
Let's confirm that by changing the filter in the Network panel and seeing how the requests continue as the task detail is loaded into the UI.&nbsp;And yes, we see what we're hoping to see - a request for the heart of the UI5 app we've specified for this user task, the Component of the HTML5 app "untappdrecommendationapproval":<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2018/01/Screenshot-2018-01-20-at-11.41.19.png" /><BR />
<BR />
What's more, in the initiator stack, we get a clear insight into what goes on and how the decision is made in the controller belonging to the S3* (detail) view as to which Component (ie which UI5 app) to load:<BR />
<BR />
fnGetDetailsForSelectedTask -&gt; fnParseComponentParameters -&gt; fnRenderComponent<BR />
<BR />
and you can bet a decent craft beer that it's in there that the URI we saw earlier:<BR />
<PRE><CODE>sapui5://html5apps<BR />
  /untappdrecommendationapproval<BR />
  /qmacro.UntappdRecommendationApproval</CODE></PRE><BR />
is parsed and used.<BR />
<BR />
<EM> * S3 is traditionally the detail view, and specificially the detail view in a scaffolding-based app. Did anybody notice that My Inbox was a scaffolding-based app? Let me know in the comments what you spotted in this post that suggested it was.</EM><BR />
<BR />
OK, so where are we?<BR />
<BR />
We have a couple of workflow instances, and we've seen how the My Inbox app retrieves information for them, and when it has to display the details for one of them, we know how it works out how to display those details.<BR />
<BR />
In the next post, we'll keep on digging, and look at understanding what happens when a task UI component like this one (the Component of qmacro.UntappdRecommendationApproval) is instantiated. How does it know what to do, where to get the information from, and so on?<BR />
<BR />
Next post in this series: <A href="https://blogs.sap.com/2018/01/22/discovering-scp-workflow-component-startup/" target="_blank" rel="noopener noreferrer">Discovering SCP Workflow - Component Startup</A>.
