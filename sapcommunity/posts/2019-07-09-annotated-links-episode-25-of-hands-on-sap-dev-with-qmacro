2019-07-09-annotated-links-episode-25-of-hands-on-sap-dev-with-qmacro
Annotated links: Episode 25 of Hands-on SAP dev with qmacro
technology-blog-sap
2019-07-09
https://community.sap.com/t5/technology-blogs-by-sap/annotated-links-episode-25-of-hands-on-sap-dev-with-qmacro/ba-p/13397084
<EM>This is a searchable description of the content of a live stream recording, specifically <STRONG>“Episode 25 - System reset”</STRONG> in the “<A href="https://bit.ly/handsonsapdev" target="_blank" rel="nofollow noopener noreferrer">Hands-on SAP dev with qmacro</A>” series. There are links directly to specific highlights in the video recording. For links to annotations of other episodes, please see the “<A href="https://bit.ly/handsonsapdev#replays" target="_blank" rel="nofollow noopener noreferrer">Catch the replays</A>” section of the series blog post.</EM><BR />
<BR />
This episode, titled “<A href="https://bit.ly/handsonsapdev#ep25" target="_blank" rel="nofollow noopener noreferrer">System reset</A>”, was streamed live on Wed 24 May 2019 and is approximately one and a half hours in length. The stream recording is <A href="https://www.youtube.com/watch?v=9yL-mxX-rxo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0" target="_blank" rel="nofollow noopener noreferrer">available on YouTube</A>.<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2019/07/Screen-Shot-2019-07-09-at-14.18.47-1.png" /><BR />
<BR />
Below is a brief synopsis, and links to specific highlights - use these links to jump directly to particular places of interest in the recording, based on ‘hh:mm:ss’ style timestamps.<BR />
<H2 id="brief-synopsis" id="toc-hId-908630397">Brief synopsis</H2><BR />
The past week has been a little bit hectic and distracting, so I use this episode as a sort of “system reset” to figure out where things are, what we want to work on, and share some items that have come up recently.<BR />
<H2 id="links-to-specific-highlights" id="toc-hId-712116892">Links to specific highlights</H2><BR />
<STRONG><A href="https://www.youtube.com/watch?v=9yL-mxX-rxo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h30m00s" target="_blank" rel="nofollow noopener noreferrer">00:30:00</A>:</STRONG> Coming to you live from the shared offices of <A href="https://innov8ion.nl" target="_blank" rel="nofollow noopener noreferrer">Innov8ion</A> + iQibt in Utrecht, just before the start of the SAP CodeJam on the SAP Cloud Application Programming Model that day. Turns out that one of the live stream family members <A href="https://www.twitch.tv/roberdinho" target="_blank" rel="nofollow noopener noreferrer">roberdinho</A> is due to attend the CodeJam too!<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=9yL-mxX-rxo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h02m00s" target="_blank" rel="nofollow noopener noreferrer">00:02:00</A>:</STRONG> Saying hello to <SPAN class="mention-scrubbed">wim.snoep2</SPAN>, or at least trying to, as I fail to manage my audio equipment properly - doh!<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=9yL-mxX-rxo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h06m05s" target="_blank" rel="nofollow noopener noreferrer">00:06:05</A>:</STRONG> Talking of the <A href="https://www.elgato.com/en/gaming/stream-deck" target="_blank" rel="nofollow noopener noreferrer">Elgato Streamdeck</A> which is a handy hardware device for managing activities while live streaming, including, for example, switching between scenes in OBS.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=9yL-mxX-rxo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h06m55s" target="_blank" rel="nofollow noopener noreferrer">00:06:55</A>:</STRONG> Starting with <SPAN class="mention-scrubbed">rsletta</SPAN>’s <A href="https://github.com/rsletta/dotfiles" target="_blank" rel="nofollow noopener noreferrer">dotfiles</A> which inspired me to get my act together and share some of my own dotfile stuff. I’ve tidied everything up and republished my dotfiles in the form of a repo in the new <A href="https://github.com/SAP-samples" target="_blank" rel="nofollow noopener noreferrer">SAP-samples</A> namespace on GitHub: <A class="uri" href="https://github.com/SAP-samples/devenv-dotfiles-qmacro" target="_blank" rel="nofollow noopener noreferrer">https://github.com/SAP-samples/devenv-dotfiles-qmacro</A>.<BR />
<BR />
As you can tell from the name of this namespace, it’s primarily for us to be able to publish sample code (and for folks to find it).<BR />
<BR />
My dotfiles are based upon <A href="https://github.com/mathiasbynens/dotfiles" target="_blank" rel="nofollow noopener noreferrer">Mathias Bynens’ dotfiles</A> which Ronnie drew my attention to via his dotfiles repo. I liked and used his bootstrap script, which uses <CODE>rsync</CODE>, which we look at briefly here.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=9yL-mxX-rxo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h10m50s" target="_blank" rel="nofollow noopener noreferrer">00:10:50</A>:</STRONG> A nice question from <SPAN class="mention-scrubbed">helmut.tammen2</SPAN> on whether it’s possible to “follow” an entire namespace on GitHub. If you know the answer, please let us know in the comments to this post!<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=9yL-mxX-rxo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h12m00s" target="_blank" rel="nofollow noopener noreferrer">00:12:00</A>:</STRONG> I’ve started to use a new plugin manager for Vim - <A href="https://github.com/junegunn/vim-plug" target="_blank" rel="nofollow noopener noreferrer">vim-plug</A> which is working very nicely for me.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=9yL-mxX-rxo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h14m35s" target="_blank" rel="nofollow noopener noreferrer">00:14:35</A>:</STRONG> There’s a new version of the <CODE>cds</CODE> command line client - 3.10.0. The updates appear every 3 or 4 weeks.<BR />
<BR />
The CAP team have also started to make available one of the SAP CDS packages which until now wasn’t directly available in the SAP NPM registry (it was previously only available inside the VS Code extension archive). This is the <CODE><a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a>/cds-lsp</CODE> package which as you may know from previous episodes is the code that provides server-based services for the <A href="https://langserver.org/" target="_blank" rel="nofollow noopener noreferrer">Language Server Protocol</A>. Hurray!<BR />
<PRE><CODE>=&gt; npm info @sap/cds-lsp<BR />
<BR />
@sap/cds-lsp@2.1.4 | SEE LICENSE IN LICENSE.txt | deps: 8 | versions: 2<BR />
Language server for CDS<BR />
<BR />
dist<BR />
.tarball: <A href="https://npm.sap.com/@sap/cds-lsp/-/cds-lsp-2.1.4.tgz" target="test_blank" rel="noopener noreferrer">https://npm.sap.com/@sap/cds-lsp/-/cds-lsp-2.1.4.tgz</A><BR />
.shasum: 5d9a7720a6278cc4299271194229b9c4f6b616e9<BR />
.integrity: sha512-NAoXcRviGbFMHZZwg7dY4+VNoocS4KABIsxbPwMS7PhYCig1naT6xCKac+VCUQYpQOiatvQgHooFrZOjz7lo9g==<BR />
<BR />
dependencies:<BR />
@sap/cds-compiler: 1.15.0<BR />
@types/antlr4: 4.7.0<BR />
fs.realpath: 1.0.0<BR />
ignore: 5.0.4<BR />
ts-md5: 1.2.4<BR />
vscode-languageserver-protocol: 3.14.1<BR />
vscode-languageserver: 5.2.1<BR />
vscode-uri: 1.0.6<BR />
<BR />
maintainers:<BR />
- https-support.sap.com &lt;do.not.reply@sap.com&gt;<BR />
<BR />
dist-tags:<BR />
latest: 2.1.4<BR />
<BR />
published a week ago by https-support.sap.com &lt;do.not.reply@sap.com&gt;</CODE></PRE><BR />
Now we can start to think about how we best incorporate this package into the <CODE>vim-cds</CODE> Vim plugin.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=9yL-mxX-rxo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h19m48s" target="_blank" rel="nofollow noopener noreferrer">00:19:48</A>:</STRONG> Starting to think about sharing my preparation work for another (new) SAP CodeJam on SAP Cloud Platform in general, and in particular on connectivity and the SAP Cloud Platform Workflow service, and how I might share that preparation in combination with the live stream.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=9yL-mxX-rxo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h21m18s" target="_blank" rel="nofollow noopener noreferrer">00:21:18</A>:</STRONG> Looking at <A href="https://twitter.com/_nzamani/status/1131814090656165888" target="_blank" rel="nofollow noopener noreferrer">a tweet from Nabi</A> pointing to a post in a series of posts that he’s been writing: “<A href="https://blogs.sap.com/2018/05/22/installing-sap-cloud-connector-into-docker-and-connecting-it-to-sap-cloud-platform/" target="_blank" rel="noopener noreferrer">Installing SAP Cloud Connector into Docker and connecting it to SAP Cloud Platform</A>”.<BR />
<BR />
This is his repo on GitHub: <A class="uri" href="https://github.com/nzamani/sap-cloud-connector-docker" target="_blank" rel="nofollow noopener noreferrer">https://github.com/nzamani/sap-cloud-connector-docker</A>.<BR />
<BR />
The idea of using Docker specifically, and a container-based approach in general, is great - it abstracts and neutralises any OS-specifics and is, in my opinion, very aligned with the cloud-first approach to computing.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=9yL-mxX-rxo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h23m40s" target="_blank" rel="nofollow noopener noreferrer">00:23:40</A>:</STRONG> We also look at the <A href="https://blogs.sap.com/2017/06/16/netweaver-gateway-demo-es5-now-in-beta/" target="_blank" rel="noopener noreferrer">blog post</A> describing the availability of the ES5 system which works well as a classic ABAP stack backend system to connect to with the SAP Cloud Connector. While it is actually on the public Internet, we can “pretend” it’s an on-prem system and consume information from it from a service task in the Workflow service via SAP Cloud Connector powered connectivity.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=9yL-mxX-rxo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h26m00s" target="_blank" rel="nofollow noopener noreferrer">00:26:00</A>:</STRONG> Cloning Nabi’s “sap-cloud-connector-docker” repo into my <CODE>dockerbuilds/</CODE> directory.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=9yL-mxX-rxo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h27m30s" target="_blank" rel="nofollow noopener noreferrer">00:27:30</A>:</STRONG> Looking at the details inside of the <CODE>Dockerfile</CODE>, noting that the image is based on a <A href="https://hub.docker.com/_/centos/" target="_blank" rel="nofollow noopener noreferrer">CentOS based distribution</A> (which uses the <CODE>yum</CODE> package manager).<BR />
<BR />
Noting how the software components are automatically downloaded from the <A href="https://tools.hana.ondemand.com" target="_blank" rel="nofollow noopener noreferrer">SAP Development Tools</A> website (via the use of Cookie headers in the <CODE>wget</CODE> requests) - I will get the CodeJam attendees to download these components manually so they can check and accept the licence agreements themselves.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=9yL-mxX-rxo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h28m25s" target="_blank" rel="nofollow noopener noreferrer">00:28:25</A>:</STRONG> Examining the use of the <CODE>RUN</CODE> command, which is used in <CODE>Dockerfile</CODE>s to add layers to a Docker image.<BR />
<BR />
The two components we need are the SAP Cloud Connector and a Java runtime, which are both available from the website.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=9yL-mxX-rxo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h30m10s" target="_blank" rel="nofollow noopener noreferrer">00:30:10</A>:</STRONG> Thinking about trying the <CODE>Dockerfile</CODE> out, as it stands, checking beforehand which versions of the components will be downloaded, before examining the rest of the commands in the <CODE>Dockerfile</CODE>, including those that switch to a bash shell and also expose port 8443 in containers that are created from the image.<BR />
<BR />
We build the image thus:<BR />
<PRE><CODE>=&gt; docker build -t sapcc:2.12.0.1 .</CODE></PRE><BR />
(don’t forget that final period!)<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=9yL-mxX-rxo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h33m00s" target="_blank" rel="nofollow noopener noreferrer">00:33:00</A>:</STRONG> We note that the specific version of the SAP JVM requested, 8.1.053, was no longer available, so we fix it by changing the reference to 8.1.055 that is shown on the website.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=9yL-mxX-rxo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h34m10s" target="_blank" rel="nofollow noopener noreferrer">00:34:10</A>:</STRONG> As we wait for the components to download, <SPAN class="mention-scrubbed">nabheet.madan3</SPAN> shares some information in relation to a question I had earlier about how to restrict the number of columns in Docker command output.<BR />
<BR />
We try this out immediately, first the base case with which gives us a whole load of columns in the output:<BR />
<PRE><CODE>=&gt; docker image ls<BR />
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE<BR />
debiancap           latest              a8fd0c3eb330        2 months ago        293MB<BR />
node                10                  64c810caf95a        3 months ago        899MB<BR />
node                lts                 64c810caf95a        3 months ago        899MB<BR />
centos              7                   9f38484d220f        3 months ago        202MB<BR />
debian              latest              a0bd3e1c8f9e        5 months ago        101MB</CODE></PRE><BR />
Now, we try various <CODE>--format</CODE> options, ending up with something like this:<BR />
<PRE><CODE>=&gt; docker image ls --format '{{.Repository}}\t{{.Size}}'<BR />
debiancap       293MB<BR />
node    899MB<BR />
node    899MB<BR />
centos  202MB<BR />
debian  101MB</CODE></PRE><BR />
Nice!<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=9yL-mxX-rxo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h36m30s" target="_blank" rel="nofollow noopener noreferrer">00:36:30</A>:</STRONG> While we’d been playing around with <CODE>--format</CODE>, the build of the <CODE>sapcc</CODE> Docker image completes successfully! So it’s time to create an instance of this image, i.e.&nbsp;a container, thus:<BR />
<PRE><CODE>=&gt; docker run -p 8443:8443 -h mysapcc --name sapcc -d sapcc:2.12.0.1</CODE></PRE><BR />
<STRONG><A href="https://www.youtube.com/watch?v=9yL-mxX-rxo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h39m20s" target="_blank" rel="nofollow noopener noreferrer">00:39:20</A>:</STRONG> We can see that the container has been successfully created, with the <CODE>docker ps -a</CODE> command, and check (with <CODE>netstat -atn | grep LISTEN</CODE>) that we can, from our Docker host machine (i.e.&nbsp;my laptop), reach port 8443, which is a locally exposed tunnel through to the 8443 in the container.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=9yL-mxX-rxo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h39m50s" target="_blank" rel="nofollow noopener noreferrer">00:39:50</A>:</STRONG> Opening up the URL <A class="uri" href="https://localhost:8443" target="_blank" rel="nofollow noopener noreferrer">https://localhost:8443</A> we’re presented with the familiar login screen of the SAP Cloud Connector. Nice! Logging in as the administrator, we proceed to add basic configuration to have it connect to the subaccount related to a new Workflow CodeJam related trial account.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=9yL-mxX-rxo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h44m00s" target="_blank" rel="nofollow noopener noreferrer">00:44:00</A>:</STRONG> We use “sapcc-docker” for the Location ID property, because it allows us to think about what the Location ID means, and where it’s useful. After that, the setup is done and the SAP Cloud Connector should be already connected to the subaccount.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=9yL-mxX-rxo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h44m50s" target="_blank" rel="nofollow noopener noreferrer">00:44:50</A>:</STRONG> We check in the SAP Cloud Platform Cockpit, and it is indeed connected, although we see that (of course) there are no backend systems configured.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=9yL-mxX-rxo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h45m38s" target="_blank" rel="nofollow noopener noreferrer">00:45:38</A>:</STRONG> We go to the “Cloud To On-Premise” settings to add the ES5 system as a backend ABAP stack system. We’re going to use a specific OData service available in this system, which is the Enterprise Procurement Model (EPM) Reference Apps “Shop” service, or <A href="https://sapes5.sapdevcenter.com/sap/opu/odata/sap/EPM_REF_APPS_SHOP_SRV/" target="_blank" rel="nofollow noopener noreferrer">EPM_REF_APPS_SHOP_SRV</A> for short.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=9yL-mxX-rxo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h47m35s" target="_blank" rel="nofollow noopener noreferrer">00:47:35</A>:</STRONG> Talking about the fact that in the ES5 system, the default client is 002, not 000, which has caused some issues in the past with folks unable to authenticate, or rather, unable to remember that they have to authenticate with the right client.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=9yL-mxX-rxo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h48m30s" target="_blank" rel="nofollow noopener noreferrer">00:48:30</A>:</STRONG> Setting up the “Cloud To On-Premise” connection to the ES5 system, using a virtual hostname and port number that are different from the real hostname and port number, for added security.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=9yL-mxX-rxo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h51m00s" target="_blank" rel="nofollow noopener noreferrer">00:51:00</A>:</STRONG> Once this is saved, we now see (in the Cockpit) that there’s a system available via the SAP Cloud Connector connection, but that there are no resources yet available. We address this now, by defining a “path and all sub-paths” resource for the main set of OData services available in that SAP system: <CODE>/sap/opu/odata</CODE>. We take a little digression looking at what “OPU” actually stands for (“occasional platform user”), and why.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=9yL-mxX-rxo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h53m02s" target="_blank" rel="nofollow noopener noreferrer">00:53:02</A>:</STRONG> Next thing we do is to make sure we can access resources in this ES5 system that’s available via the SAP Cloud Connector connection, which is to use a pretend HTML5 application that’s stored in and served from the SAP Cloud Platform subaccount, which only has an application descriptor file, otherwise known as the <A href="https://help.sap.com/saphelp_uiaddon20/helpdata/en/28/fa7538c67e4280a0b7708de2951278/frameset.htm" target="_blank" rel="noopener noreferrer"><CODE>neo-app.json</CODE></A> file.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=9yL-mxX-rxo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h53m00s" target="_blank" rel="nofollow noopener noreferrer">00:53:00</A>:</STRONG> Before we create this pretend app, we create the destination that will point to the remote (ES5-based) service. In the approach to this, I discuss briefly the choice of destination definition - how specific, how narrow you should make it. To a backend system in general, to a collection of OData (or other Web-based) services, or to a specific service endpoint. Of course, I guess it depends, but it’s an interesting question on how one should use the destinations.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=9yL-mxX-rxo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h57m10s" target="_blank" rel="nofollow noopener noreferrer">00:57:10</A>:</STRONG> The destination name we create is “shopservice”, and we need to use the virtual hostname and port we specified earlier when we construct the URL to the destination endpoint (we also include the “sapcc-docker” Location ID of course, and add an additional property to specify that the “sap-client” should be 002.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=9yL-mxX-rxo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=01h03m15s" target="_blank" rel="nofollow noopener noreferrer">01:03:15</A>:</STRONG> Next we start up the SAP Web IDE Full-Stack to create a super-simple empty application (“destinationproxy”), with just an application descriptor file (<CODE>neo-app.json</CODE>) with the following content:<BR />
<DIV><BR />
<PRE class="sourceCode json"><CODE class="sourceCode json"><SPAN id="cb6-1"><SPAN class="fu">{</SPAN></SPAN><BR />
<SPAN id="cb6-2">  <SPAN class="dt">"authenticationMethod"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="st">"none"</SPAN><SPAN class="fu">,</SPAN></SPAN><BR />
<SPAN id="cb6-3">  <SPAN class="dt">"routes"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="ot">[</SPAN></SPAN><BR />
<SPAN id="cb6-4">    <SPAN class="fu">{</SPAN></SPAN><BR />
<SPAN id="cb6-5">      <SPAN class="dt">"path"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="st">"/myshop"</SPAN><SPAN class="fu">,</SPAN></SPAN><BR />
<SPAN id="cb6-6">      <SPAN class="dt">"target"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="fu">{</SPAN></SPAN><BR />
<SPAN id="cb6-7">        <SPAN class="dt">"type"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="st">"destination"</SPAN><SPAN class="fu">,</SPAN></SPAN><BR />
<SPAN id="cb6-8">        <SPAN class="dt">"name"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="st">"shopservice"</SPAN></SPAN><BR />
<SPAN id="cb6-9">      <SPAN class="fu">},</SPAN></SPAN><BR />
<SPAN id="cb6-10">      <SPAN class="dt">"description"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="st">"Shop service backend"</SPAN></SPAN><BR />
<SPAN id="cb6-11">    <SPAN class="fu">}</SPAN></SPAN><BR />
<SPAN id="cb6-12">  <SPAN class="ot">]</SPAN></SPAN><BR />
<SPAN id="cb6-13"><SPAN class="fu">}</SPAN></SPAN></CODE></PRE><BR />
</DIV><BR />
<STRONG><A href="https://www.youtube.com/watch?v=9yL-mxX-rxo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=01h07m50s" target="_blank" rel="nofollow noopener noreferrer">01:07:50</A>:</STRONG> After deploying this application to the SAP Cloud Platform, we see that there’s an application URL for us to try out, which we do, first appending <CODE>neo-app.json</CODE> to actually have a look at the contents of the application descriptor file, but then appending <CODE>myshop</CODE>, which is of course correctly resolved by the Connectivity service, to travel along the SAP Cloud Connector connection down to the “on-premise” ABAP stack system ES5 and to the <CODE>EPM_REF_APPS_SHOP</CODE> service. I find this way of testing reverse proxy connectivity very useful.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=9yL-mxX-rxo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h15m10s" target="_blank" rel="nofollow noopener noreferrer">00:15:10</A>:</STRONG> Within the SAP Web IDE Full-Stack, we turn on the “Workflow Editor” extension. We also check that we have the Portal service enabled in SAP Cloud Platform, and that there’s a Fiori launchpad based website available to us. There is: “Cloud Platform Workflow CodeJam”, and it contains tiles for each of the four standard Workflow related activities:<BR />
<UL><BR />
 	<LI>My Inbox (All Tasks)</LI><BR />
 	<LI>Monitor Workflows (Workflow Definitions)</LI><BR />
 	<LI>Monitor Workflows (Workflow Instances)</LI><BR />
 	<LI>My Inbox (Expert View)</LI><BR />
</UL><BR />
<STRONG><A href="https://www.youtube.com/watch?v=9yL-mxX-rxo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=01h19m20s" target="_blank" rel="nofollow noopener noreferrer">01:19:20</A>:</STRONG> A quick reminder that I wrote a series of Workflow service related deep-dive posts, called “<A href="https://qmacro.org/2018/01/16/discovering-SAP%20Cloud%20Platform-workflow/" target="_blank" rel="nofollow noopener noreferrer">Discovering SCP Workflow</A>” … and we take a brief look at that series here.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=9yL-mxX-rxo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=01h20m40s" target="_blank" rel="nofollow noopener noreferrer">01:20:40</A>:</STRONG> Creating a very simple Workflow definition “shopstuff” to try out a Service Task that retrieves data from ES5 via our previously created destination. At this point, I run out of time, and prompted by folks having to leave the stream, I make a decision to call time, leaving the specification of the values for the properties of the Service Task to next time - a nice little cliff hanger <span class="lia-unicode-emoji" title=":slightly_smiling_face:">🙂</span><BR />
<BR />
Until next time!
