2018-08-13-monday-morning-thoughts-the-cloud-is-the-computer
Monday morning thoughts: the cloud is the computer
technology-blog-sap
2018-08-13
https://community.sap.com/t5/technology-blogs-by-sap/monday-morning-thoughts-the-cloud-is-the-computer/ba-p/13383893
<EM>In this post, I think about what the future of programming in an enterprise environment might look like, and realise that it makes sense to consider that the cloud itself is the new computer.</EM><BR />
<BR />
Sun Microsystems, an incredibly venerable hardware and software company from back in the day, is the creator, directly or indirectly, of some of the technologies &amp; ideas we still use today.&nbsp;These technologies include the Network File System (NFS), Java, XML and even the ultimate editor, vi, originally written by one of Sun's co-founders Bill Joy. Sun's Solaris was one of the many Unix flavours upon which R/3 was made available.<BR />
<BR />
Sun's motto was "The Network Is The Computer" which resonated and inspired at the time. I guess this motto has been at the back of my mind the whole time, but I'd posit that perhaps the phrase "the cloud is the computer" is becoming more appropriate today.<BR />
<BR />
&nbsp;<BR />
<BR />
<STRONG>The future of programming</STRONG><BR />
<BR />
This weekend I watched a very interesting talk by Chris Granger called "<A href="https://www.youtube.com/watch?v=zQo4jUVWI_I" target="_blank" rel="nofollow noopener noreferrer">What does programming look like in 10 years?</A>". Chris is someone who has written some very interesting experimental software, notably (for me) <A href="http://lighttable.com/" target="_blank" rel="nofollow noopener noreferrer">Light Table</A>, a "next generation" code editor with many features including inline evaluation of code, as you type. This idea is more common today than it was back then - I use it in often in the form of the excellent <A href="https://quokkajs.com/" target="_blank" rel="nofollow noopener noreferrer">Quokka</A>&nbsp;editor plugin, it's also a core feature of the <A href="https://ramdajs.com/repl/" target="_blank" rel="nofollow noopener noreferrer">Ramda REPL</A>&nbsp;where you can explore seriously good functional programming in JavaScript, and in fact the latest version of Chrome, version 68, has <A href="https://developers.google.com/web/updates/2018/05/devtools#eagerevaluation" target="_blank" rel="nofollow noopener noreferrer">eager evaluation</A> built into the console.<BR />
<BR />
<IMG src="http://www.chris-granger.com/images/050/watches.png" alt="Image result for lighttable" width="587" height="343" /><BR />
<BR />
<EM>A screenshot of <A href="http://www.chris-granger.com/2013/08/22/light-table-050/" target="_blank" rel="nofollow noopener noreferrer">Light Table 0.5.0</A>&nbsp;showing the results of inline evaluation, the feature also known as "instarepl"&nbsp;&nbsp;</EM><BR />
<BR />
&nbsp;<BR />
<BR />
Light Table was one of many programming environments that Chris has explored over the years, and this talk is a great way to see some of the radical and wonderful ideas that he has built out into prototypes.<BR />
<BR />
Anyway, the talk caused me to think about what the future of programming in the enterprise space, particularly in the SAP ecosphere, might look like in 10 years time, and I was minded to think about the shape that is becoming the surface upon which, the target against which, we will be writing code.<BR />
<BR />
&nbsp;<BR />
<BR />
<STRONG>Where we came from, where we are now</STRONG><BR />
<BR />
Mindful of where some of us started, with R/2, there was a single monolith, <A href="http://wiki.c2.com/?MyGodItsFullOfStars" target="_blank" rel="nofollow noopener noreferrer">full of stars</A>. Everything we programmed got executed inside that monolith. Moving to the SAP R/3 architecture we did indeed see a shift to a more client-server architecture, although essentially there were still mini-monoliths in the form of ABAP stacks - after all, this was the pre-HANA era when it was anathema to treat the database as anything other than a data store - certainly not an execution environment (I think this was perhaps as much to do with portability as well as the mechanics of complex table definitions inherited from the R/2 era - think clusters and pools).<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2018/08/Screen-Shot-2018-08-13-at-08.15.17.png" /><BR />
<BR />
<EM>Programming R/2, courtesy of 2001 A Space Odyssey</EM><BR />
<BR />
&nbsp;<BR />
<BR />
Today we have an array of environments, both on-prem and in the cloud. Think about software-as-a-service (SaaS) environments like SuccessFactors and S/4HANA Cloud, about R/3 architecture systems still running in company specific or managed data centres, and the undulating surface of virtual runtime platforms: entire virtual machines (VMs), downscaled VMs in the form of containers, and - perhaps most radically - the concept of serverless computing.<BR />
<BR />
To many of us serverless means functions-as-a-service (FaaS). This is not incorrect, but it's more than that. Functions bristle with potential, but ultimately are useless without a context, without an environment, without a raison d'Ãªtre. There is of course a beauty to be had in the idea of a function with a single purpose, that does one thing, does it well, that wakes up to perform and then sleeps again until it's needed again. It allows us to dream that little bit closer to one academic ideal of the Lambda Calculus, which relates to defining functions that contain only a single expression*.<BR />
<BR />
By the way,&nbsp;for more thoughts on serverless, functions-as-a-service and the event fabric, see another post in this <A href="https://blogs.sap.com/tag/mondaymorningthoughts/" target="_blank" rel="noopener noreferrer">Monday morning thoughts series</A> - "<A href="https://blogs.sap.com/2018/05/14/functions-what-functions/" target="_blank" rel="noopener noreferrer">Functions, what functions?</A>".<BR />
<BR />
*I had a very interesting conversation yesterday with my fellow <A href="http://langram.org/" target="_blank" rel="nofollow noopener noreferrer">Language Rambling</A> writer&nbsp;<SPAN class="mention-scrubbed">chris.whealy</SPAN>&nbsp;yesterday about this academic ideal, in relation to his activities around <A href="https://twitter.com/LogaRhythm/status/1027867611902689280" target="_blank" rel="nofollow noopener noreferrer">writing succinct and functional JavaScript</A>&nbsp;in preparation for SAP TechEd.<BR />
<BR />
&nbsp;<BR />
<BR />
<STRONG>A rich diversity</STRONG><BR />
<BR />
So where we are now is at a place that is as varied as it is virtual, as diverse as it is ephemeral. The axiom "thou shalt not modify standard SAP code" is stronger than ever the closer we get to the SaaS model. Taking that first, what does that mean for building custom and focused solutions to business problems? Well, on the one hand it means building extensions and net new apps that reach into the SaaS world via well-defined APIs (this is where the <A href="https://api.sap.com/" target="_blank" rel="noopener noreferrer">SAP API Business Hub</A> comes in). That much is certain.<BR />
<BR />
Moreover, it also means writing exits and custom code at well-known extension points, in an "in-app" style, with development work where it's hard to say whether what you're doing is programming or configuring. This reminds me of something that came up briefly in my conversation with&nbsp;<SPAN class="mention-scrubbed">uxkjaer</SPAN>&nbsp;and&nbsp;Former Member&nbsp;in the <A href="https://anchor.fm/sap-community-podcast/episodes/Episode-1---Interview-with-DJ-Adams-e1ac40" target="_blank" rel="nofollow noopener noreferrer">inaugural SAP Coffee Corner episode</A> earlier this year.<BR />
<BR />
But this is not where it ends. Not only do we need to customise the user interface, or enhance functionality inside standard solutions, or create apps that business users need to interact with and reach into their core processes enshrined therein, we also need a way to orchestrate and participate in the general bloodflow of data and processes. How do we do this? In the form of events, messaging and functions.<BR />
<BR />
The idea of the publish/subscribe (pubsub) message pattern is certainly not new - I even remember building pubsub mechanisms in Jabber (XMPP) back in the early 2000's, as well as experimenting with <A href="https://www.youtube.com/watch?v=1E_1B8TD6Kw&amp;list=PLfctWmgNyOIcbRYRdPrbjN_ZM56Kc5YTL" target="_blank" rel="nofollow noopener noreferrer">coffeeshop</A>. And of course since then there's been <A href="https://en.wikipedia.org/wiki/WebSub" target="_blank" rel="nofollow noopener noreferrer">PubSubHubbub, now WebHub</A>, and many other incarnations of the pubsub idea, but in the new world of today and tomorrow's business computing environments, pubsub has a lot more relevance.<BR />
<BR />
What are the aspects of pubsub that are important here? Well, aspects that are similar to those in the serverless world. In fact, one might consider that pubsub and serverless share the same genes. And what exactly is this increased relevance for us as programmers? Think of the events that happen in business systems, and how we can connect with them. What are the different types of events, what shape do they come in? How do we react to them? How do we orchestrate and control what happens, and when? How can we manage the events, the messages, that are emitted and received by various participants in a constellation of systems, services &amp; platforms that make up a complete business solution? The answers to these questions and more are to be found in the serverless context, and I think it's fair to say that we'll be seeing the results of hard work in this area from SAP in the very near future.<BR />
<BR />
&nbsp;<BR />
<BR />
<STRONG>The cloud is the computer</STRONG><BR />
<BR />
Considering all of this, in the context of wondering what the future of programming will be like in building tomorrow's enterprise solutions, causes me to think about what exactly my target programming environment actually is. The answer is "all of the above". Backend services, frontend consumption apps, discrete functions that alternately fire and sleep, events that are emitted, queued and controlled, exposed layers of configuration that can be tweaked and customised, exits that can be activated and code supplied thereto, routines in the data layer that can be triggered.<BR />
<BR />
<IMG src="https://upload.wikimedia.org/wikipedia/commons/thumb/b/b9/Stormclouds.jpg/800px-Stormclouds.jpg" alt="File:Stormclouds.jpg" width="445" height="296" /><BR />
<BR />
<EM>Stormclouds, courtesy of <A href="https://commons.wikimedia.org/wiki/File:Stormclouds.jpg" target="_blank" rel="nofollow noopener noreferrer">Wikimedia Commons</A></EM><BR />
<BR />
&nbsp;<BR />
<BR />
When I think about all of this, when I think about what I am programming *on*, it's the cloud. Even if some of the system constellation elements are actually on-prem, they're still satellites to and connected with the breathing, living, amorphous being that is the cloud. And so I must conclude that when I think about the future of programming, I am compelled to conclude that in a virtual sense, and perhaps a real sense, the cloud is the computer.<BR />
<BR />
&nbsp;<BR />
<BR />
This post was brought to you on an early rainy Monday morning in Manchester by <A href="https://www.pactcoffee.com/coffees/ubumwe-kigoma" target="_blank" rel="nofollow noopener noreferrer">Pact Coffee's Ubumwe Kigoma</A> and new desktop background pictures courtesy of <A href="https://twitter.com/70sscifiart" target="_blank" rel="nofollow noopener noreferrer">70s Sci-Fi Art</A>.<BR />
<BR />
&nbsp;<BR />
<BR />
Read more posts in this series here:&nbsp;<A href="https://blogs.sap.com/tag/mondaymorningthoughts/" target="_blank" rel="noopener noreferrer">Monday morning thoughts</A>.<BR />
<BR />
&nbsp;<BR />
<BR />
&nbsp;
