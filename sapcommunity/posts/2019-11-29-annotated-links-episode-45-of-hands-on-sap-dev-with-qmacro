2019-11-29-annotated-links-episode-45-of-hands-on-sap-dev-with-qmacro
Annotated links: Episode 45 of Hands-on SAP dev with qmacro
technology-blog-sap
2019-11-29
https://community.sap.com/t5/technology-blogs-by-sap/annotated-links-episode-45-of-hands-on-sap-dev-with-qmacro/ba-p/13425611
<EM>This is a searchable description of the content of a live stream recording, specifically <STRONG>"Ep.45 – Cool initiatives and projects with CAP with Tom Jung"</STRONG> in the "<A href="https://bit.ly/handsonsapdev" target="_blank" rel="nofollow noopener noreferrer">Hands-on SAP dev with qmacro</A>" series. There are links directly to specific highlights in the video recording. For links to annotations of other episodes, please see the "<A href="https://bit.ly/handsonsapdev#replays" target="_blank" rel="nofollow noopener noreferrer">Catch the replays</A>" section of the series blog post.</EM><BR />
<BR />
This episode was streamed live on Wed 27 Nov 2019 and is approximately 60 minutes in length. The stream recording is <A href="https://www.youtube.com/watch?v=tVvnmBAWY5o&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;index=46" target="_blank" rel="nofollow noopener noreferrer">available on YouTube</A>.<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2019/11/Screenshot-2019-11-29-at-13.57.37.png" /><BR />
<BR />
Brief synopsis: In this episode Tom Jung joins us and show us some of the cool stuff he’s been hacking on in the CAP area. Tom has always got some fascinating tech to share, so make sure you tune in!<BR />
<BR />
<A href="https://www.youtube.com/watch?v=tVvnmBAWY5o&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h02m40s" target="_blank" rel="nofollow noopener noreferrer">00:02:40</A> Screen sharing fail - I'll get the hang of this live streaming eventually! What I wanted to share on my screen was <A href="https://projecteuler.net" target="_blank" rel="nofollow noopener noreferrer">Project Euler</A> which is a great set of math-related puzzles to riff on when you want to practice programming in a new language or improve prowess in an existing language.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=tVvnmBAWY5o&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h04m15s" target="_blank" rel="nofollow noopener noreferrer">00:04:15</A> Switching to show <SPAN class="mention-scrubbed">thomas.jung</SPAN>'s screen and video ready for the main part of this particular episode. Talking about timezones, and that we try to do the occasional Wednesday afternoon (for me) live stream to catch the US timezone based folks like Tom.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=tVvnmBAWY5o&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h06m20s" target="_blank" rel="nofollow noopener noreferrer">00:06:20</A> Tom begins to describe the project he's going to show us, by starting with what it looks like from the user perspective (a <A href="https://product-roadmap.cfapps.us10.hana.ondemand.com/" target="_blank" rel="nofollow noopener noreferrer">new way to discover</A> and consume the SAP product roadmap documents). A much more attractive, interactive and intelligent frontend - kudos!<BR />
<BR />
It's powered by HANA and CAP on the backend, and by React on the frontend. Internally it also uses a Fiori Elements powered UI for administration and maintenance of the data.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=tVvnmBAWY5o&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h09m00s" target="_blank" rel="nofollow noopener noreferrer">00:09:00</A> Tom learned a lot doing this project because it was a real one, with specialised security, circuit breaking, blue-green deployment, and many other moving parts. But the particular aspect Tom is about to show is the search capabilities, which are powered by HANA's fuzzy search and text analytics, and tied together in CAP. In answer to a question from mayjay139, Tom says that the project took around 4-5 weeks all told (plus a lot of design work that was done up front).<BR />
<BR />
<A href="https://www.youtube.com/watch?v=tVvnmBAWY5o&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h12m45s" target="_blank" rel="nofollow noopener noreferrer">00:12:45</A> Tom picks out an OData operation in the Chrome Developer Tools that represents the search that he just carried out in the UI ("SuccessFactors UX harmonization"), and digs into the query parameters. This is the magic that the team wanted to achieve - use standard OData protocol aspects but provide a rich search experience from HANA, including search scoring, snippets, and weighted columns (which means, for example, that a search for "suc" will favour results like "SuccessFactors" higher than regular words like "such").<BR />
<BR />
<A href="https://www.youtube.com/watch?v=tVvnmBAWY5o&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h16m05s" target="_blank" rel="nofollow noopener noreferrer">00:16:05</A> Moving from the UI to the backend, to explore how things work in this regard. Tom has also prepared a cut-down version that can be shared - this is available in his <A href="https://github.com/jungsap/cap-fuzzy-search" target="_blank" rel="nofollow noopener noreferrer">cap-fuzzy-search</A> repo on GitHub. Thanks Tom!<BR />
<BR />
<A href="https://www.youtube.com/watch?v=tVvnmBAWY5o&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h17m00s" target="_blank" rel="nofollow noopener noreferrer">00:17:00</A> Looking first at how the <CODE>$search</CODE> initiated process works, i.e. which fields are to be used when searching for the string supplied. This is done via an annotation, as Tom shows us here (<CODE>@Search.defaultSearchElement</CODE>).<BR />
<BR />
<A href="https://www.youtube.com/watch?v=tVvnmBAWY5o&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h18m15s" target="_blank" rel="nofollow noopener noreferrer">00:18:15</A> There are a lot of annotations used in this project, and Tom has a separate file for annotations relating to the Fiori Elements frontend (in <CODE>fiori-annotations-cat-service.cds</CODE>).<BR />
<BR />
<A href="https://www.youtube.com/watch?v=tVvnmBAWY5o&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h18m30s" target="_blank" rel="nofollow noopener noreferrer">00:18:30</A> Ordering search results by score goes hand in hand with fuzzy search, as you want to be able to rank the results and reflect that in the display. To have this work, Tom created a virtual column which means it's not persisted in the database, but it's available in the output and in the custom handler related to the service. There are virtual columns for <CODE>score</CODE> and <CODE>titleSnippet</CODE> properties.<BR />
<BR />
There are different approaches for handling virtual or computed properties - see for example the post "<A href="https://blogs.sap.com/2019/08/21/computed-field-example-in-cap/" target="_blank" rel="noopener noreferrer">Computed field example in CAP</A>", but this virtual property at the entity level is a nice approach because it then appears in DB views for reporting.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=tVvnmBAWY5o&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h21m00s" target="_blank" rel="nofollow noopener noreferrer">00:21:00</A> Tom points out that he's not using the standard <CODE>managed</CODE> aspect from <CODE><a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a>/cds/common</CODE>, but a custom set of properties to address some issues they had with DateTime data type quite correctly, relating to the V4 -&gt; V2 adapter.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=tVvnmBAWY5o&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h21m50s" target="_blank" rel="nofollow noopener noreferrer">00:21:50</A> Tom now talks about the full text indices he created, and shows us some of the HANA configuration files for those (also including the turning on of text analysis and mining). HANA is also able to pull out product names and recognise them as such. What is surprising is the large number of tables that are generated as a result of this (which can be selected upon directly too, which is nice).<BR />
<BR />
<A href="https://www.youtube.com/watch?v=tVvnmBAWY5o&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h28m00s" target="_blank" rel="nofollow noopener noreferrer">00:28:00</A> Starting to look at the custom handler, the "exit", in <CODE>srv/cat-service.js</CODE>, and noting how easy it is to handle error scenarios, by just calling <CODE>reject</CODE> on the request object and supplying an appropriate HTTP status code, like this example:<BR />
<DIV><BR />
<PRE class="sourceCode javascript"><CODE class="sourceCode javascript"><SPAN class="va">req</SPAN>.<SPAN class="at">reject</SPAN>(<SPAN class="dv">409</SPAN><SPAN class="op">,</SPAN> <SPAN class="vs">`Invalid Status Value: </SPAN><SPAN class="sc">${</SPAN><SPAN class="va">req</SPAN>.<SPAN class="va">data</SPAN>.<SPAN class="at">status</SPAN><SPAN class="sc">}</SPAN><SPAN class="vs">.`</SPAN>)</CODE></PRE><BR />
</DIV><BR />
(By the way Tom, I've only just noticed, while annotating this recording, that you aren't using semicolons - kudos! :-))<BR />
<BR />
<A href="https://www.youtube.com/watch?v=tVvnmBAWY5o&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h30m00s" target="_blank" rel="nofollow noopener noreferrer">00:30:00</A> Noting that in handling specific operations, it's also very simple to turn around and make one's own extra calls to the database, using the philosophy of abstraction and myriad Domain Specific Languages (DSLs) - see the <A href="https://blogs.sap.com/2019/09/18/tech-aloud-podcast-an-introduction/#dsls" target="_blank" rel="noopener noreferrer">DSL section of the post "Tech Aloud podcast – an introduction"</A> for a little more on that, too.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=tVvnmBAWY5o&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h32m25s" target="_blank" rel="nofollow noopener noreferrer">00:32:25</A> Starting to focus in on the handling of the search itself, with the code in this section:<BR />
<DIV><BR />
<PRE class="sourceCode javascript"><CODE class="sourceCode javascript"><SPAN class="kw">this</SPAN>.<SPAN class="at">on</SPAN>(<SPAN class="st">"READ"</SPAN><SPAN class="op">,</SPAN> <SPAN class="st">"Roadmap"</SPAN><SPAN class="op">,</SPAN> <SPAN class="at">async</SPAN> (req<SPAN class="op">,</SPAN> next) <SPAN class="op">=&gt;</SPAN> <SPAN class="op">{</SPAN><BR />
  ...<BR />
<SPAN class="op">}</SPAN>)</CODE></PRE><BR />
</DIV><BR />
The fascinating thing here is that what's going on is just a subtle massaging of the in-flight call, again using the power of CAP in the form of the mutable programmatic structure of that request. If you want to learn more about this, have a look at the tutorial "<A href="https://developers.sap.com/tutorials/cap-cloudsdk-5-srv-logic.html" target="_blank" rel="noopener noreferrer">Add Service Logic to Consume Remote Address Data</A> which does something similar (this tutorial is part of the mission "<A href="https://blogs.sap.com/2019/11/08/sap-teched-mission-api-hub-cloud-sdk-and-cap-an-overview/" target="_blank" rel="noopener noreferrer">Use CAP and SAP Cloud SDK to Extend S/4HANA</A>).<BR />
<BR />
<A href="https://www.youtube.com/watch?v=tVvnmBAWY5o&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h36m20s" target="_blank" rel="nofollow noopener noreferrer">00:36:20</A> A short discussion on the fuzziness percentage value, and the fact that it took a while to adjust to the right value (0.7 in this case) to get the best results. Talk about 80/20 effort - the crazy thing is that it took Tom far longer to get that value right than it did to write the entirety of the <CODE>on</CODE> handler!<BR />
<BR />
<A href="https://www.youtube.com/watch?v=tVvnmBAWY5o&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h39m25s" target="_blank" rel="nofollow noopener noreferrer">00:39:25</A> We turn at this stage briefly to the "TOKEN SEPARATORS" value in the fulltext indexing configuration, which had a set of default values that tripped Tom up first of all - the backslash and forward slash symbols were included by default, but this meant that the string "S/4" wasn't being recognised as a viable result in the fuzzy search! Removal of the slashes from the list of characters fixed this. Nice tip!<BR />
<BR />
<A href="https://www.youtube.com/watch?v=tVvnmBAWY5o&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h40m33s" target="_blank" rel="nofollow noopener noreferrer">00:40:33</A> Switching over to his <A href="https://github.com/jungsap/cap-fuzzy-search" target="_blank" rel="nofollow noopener noreferrer">cut down version on GitHub</A>, where he has a reduced set of entities and properties, but at least it shows the query exit, which is super helpful. Noting at this point that <CODE>req._</CODE> gives access to the whole raw request - which can be extremely useful.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=tVvnmBAWY5o&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h43m00s" target="_blank" rel="nofollow noopener noreferrer">00:43:00</A> Having set a breakpoint, Tom triggers a search to have a look what goes on inside a select, in debug mode, including what CDS generates for us.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=tVvnmBAWY5o&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h47m00s" target="_blank" rel="nofollow noopener noreferrer">00:47:00</A> A short discussion on CQL and the power it gives you when handling the request yourself - instead of parsing SQL you're just manipulating objects, while Tom fights gently with his HANA backend.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=tVvnmBAWY5o&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h48m20s" target="_blank" rel="nofollow noopener noreferrer">00:48:20</A> Asking a question about Tom's experience with building the React frontend using the OData service, and how that went. This led to a very fascinating conversation about how it was simply treaded as "yet another REST API" via the Swagger API interface documentation that Tom generated (via the library 'odata2openapi'), by taking EDMX and converting it to Swagger, and which we look at now.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=tVvnmBAWY5o&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h53m50s" target="_blank" rel="nofollow noopener noreferrer">00:53:50</A> We approach the end of this live stream by a lovely conversation about fonts and ligatures. Tom is using <A href="https://dev.to/expertsinside/cascadia-code-a-new-font-for-visual-studio-code-and-terminal-47oc" target="_blank" rel="nofollow noopener noreferrer">Cascadia Code</A>, and has <A href="https://github.com/tonsky/FiraCode/wiki/VS-Code-Instructions" target="_blank" rel="nofollow noopener noreferrer">turned on ligatures</A> in VS Code. (I've been recently experimenting with ligatures too, as I was bowled over by how beautiful the code looked in this video on Elm: <A href="https://www.youtube.com/watch?v=pF8gSF5QlP" target="_blank" rel="nofollow noopener noreferrer">Advent of Code 2018: Day 1, Part One</A>).<BR />
<BR />
<A href="https://www.youtube.com/watch?v=tVvnmBAWY5o&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h55m50s" target="_blank" rel="nofollow noopener noreferrer">00:55:50</A> Based on a question by <SPAN class="mention-scrubbed">speri</SPAN> we confirm that Swagger also works with OData V2, which we can generate with the OData V2 Adapter Proxy, which you can also explore with another tutorial in the mission mentioned earlier: "<A href="https://developers.sap.com/tutorials/cap-cloudsdk-2-v2-adapter.html" target="_blank" rel="noopener noreferrer">Install an OData V2 Adapter</A>". In fact, Tom briefly shows the Fiori Elements based UI that is based on OData V2 via that very proxy.<BR />
<BR />
That brings us to the end of this episode, thanks again so much to <SPAN class="mention-scrubbed">thomas.jung</SPAN> for coming on and showing us this stuff. Until next time!
