2022-01-27-boosting-tutorial-ux-with-dev-containers-part-1-challenge-and-base-solution
Boosting tutorial UX with dev containers part 1 - challenge and base solution
technology-blog-sap
2022-01-27
https://community.sap.com/t5/technology-blogs-by-sap/boosting-tutorial-ux-with-dev-containers-part-1-challenge-and-base-solution/ba-p/13540202
<EM>In this three-part series I outline and demonstrate an approach to help newcomers get started more quickly with our tutorials, by describing and providing an environment with all the prerequisite tools installed ready to go. This is part one, where I describe the challenge and the base solution I'm going to go with.</EM><BR />
<BR />
See also the next posts in this three-part series:<BR />
<UL><BR />
 	<LI><A href="https://blogs.sap.com/2022/01/28/boosting-tutorial-ux-with-dev-containers-part-2-embedding-prerequisite-details/" target="_blank" rel="noopener noreferrer">Boosting tutorial UX with dev containers part 2 – embedding prerequisite details</A></LI><BR />
 	<LI><A href="https://blogs.sap.com/2022/02/01/boosting-tutorial-ux-with-dev-containers-part-3-containers-into-action/" target="_blank" rel="noopener noreferrer">Boosting tutorial UX with dev containers part 3 – containers into action</A></LI><BR />
</UL><BR />
I'm a big fan of learning-by-doing, in fact it's in my regular reminder tweets about upcoming Hands-on SAP Dev live stream episodes, like <A href="https://twitter.com/qmacro/status/1486032367877828608" target="_blank" rel="nofollow noopener noreferrer">this one</A>:<BR />
<P style="overflow: hidden;margin-bottom: 0px"><IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2022/01/screenshot-2022-01-26-at-07.32.42.png" height="390" width="472" /></P><BR />
So I'm the first to rejoice in the detail of any tutorial, and what's more, in the detail of any tutorial prerequisites. Each and every activity, whether that's setting things up to learn, or the the intended learning content itself, teaches me something.<BR />
<H2 id="toc-hId-961064229">The challenge and a possible solution</H2><BR />
But sometimes I want to fast forward through the prerequisites, and quickly get to the topic at hand, the actual subject matter of the tutorial I want to follow.<BR />
<BR />
I've been experimenting over the past year with containers (as popularised by the Docker initiative). Containers are small, portable self-contained environments, similar to but much smaller and far more efficient (with far fewer resource requirements) than, say, a virtual machine. For a great intro to containers, you should check out <SPAN class="mention-scrubbed">sygyzmundovych</SPAN> 's series on Understanding Containers, see the Further Reading section at the end of this post.<BR />
<BR />
Most of the time, including the time I spend with you in the <A href="https://www.youtube.com/playlist?list=PL6RpkC85SLQABOpzhd7WI-hMpy99PxUo0" target="_blank" rel="nofollow noopener noreferrer">Hands-on SAP Dev live streams</A>, I live and work in the terminal. Not just any terminal, mind you - a terminal inside a container. It's a container that I create from an image that I've defined over the months, that's based on Debian and contains all the tools I need to work comfortably and efficiently.<BR />
<P style="overflow: hidden;margin-bottom: 0px"><IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2022/01/screenshot-2022-01-26-at-12.30.50.png" /></P><BR />
It gives me independence from the underlying operating system of my local machine (sometimes I even run it on a <A href="https://qmacro.org/2021/06/12/remote-access-to-docker-on-my-synology-nas/" target="_blank" rel="nofollow noopener noreferrer">remote Docker engine</A>), allows me to throw the environment away and start again nice and clean, and stops me from polluting my host operating systems with layers of software that are hard to remove.<BR />
<BR />
So it occurred to me that, especially with the advent of VS Code's support for <A href="https://code.visualstudio.com/docs/remote/containers-tutorial" target="_blank" rel="nofollow noopener noreferrer">remote development in containers</A>, it would be an interesting experiment to see if the two worlds could complement each other.<BR />
<BR />
In other words - could I use containers to help those, who want to get directly to the actual learning content of a tutorial, get there quicker?<BR />
<H2 id="toc-hId-764550724">Testing the solution out on a tutorial</H2><BR />
I'm a fan of CAP development, and the tutorials on this in our <A href="https://developers.sap.com/tutorial-navigator.html" target="_blank" rel="noopener noreferrer">Tutorial Navigator</A> are great. For this experiment, I decided to focus on one particular tutorial: <A href="https://developers.sap.com/tutorials/btp-app-set-up-local-development.html" target="_blank" rel="noopener noreferrer">Set Up Local Development Using VS Code</A>.<BR />
<BR />
For orientation, this tutorial sits within a group, which itself sits within a mission, as illustrated here:<BR />
<P style="overflow: hidden;margin-bottom: 0px"><IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2022/01/screenshot-2022-01-26-at-08.00.14.png" /></P><BR />
The screenshot shows 11 steps in the "Set Up Local Development Using VS Code" tutorial on the right hand side that help you get set up and ready to be able to work through the learning content in the actual mission (building an application end-to-end).<BR />
<BR />
Software development today, especially of full stack applications with multiple systems and services, in the cloud, involves lots of different tools and skills, and this is reflected in the prerequisites.<BR />
<BR />
I would encourage anyone and everyone to work their own way through the steps in this this setup tutorial; it's a rich source of information and helps you understand what's required. It also helps you think about your own development environment, what you need, and what you might want.<BR />
<BR />
But I also want to encourage you to think about how to streamline such an environment, and what the next level of developer workflow and productivity might look like.<BR />
<BR />
So in this short series of posts, I'll work through defining and building a development container that has all the prerequisites for this mission set up for you. Not only that, this container will be relevant for you regardless of your actual local machine, whether that's a PC or a laptop, whether that's running macOS, some distribution of Linux, Chrome OS, or even Windows. All that's needed is a Docker engine, such as Docker Desktop or <A href="https://blog.logrocket.com/top-docker-alternatives-2022/" target="_blank" rel="nofollow noopener noreferrer">something similar such as Podman</A> and VS Code itself.<BR />
<H2 id="toc-hId-568037219">A brief note on terminology</H2><BR />
A container is what you work with, what you connect to or even jump into to use the tools within it and carry out your development work. A container is created from an image; you could say that it's an "instance" of an image. To talk of defining a container is really to talk about defining an image.<BR />
<H2 id="toc-hId-371523714">Defining the image</H2><BR />
The goal here is to define an image that:<BR />
<UL><BR />
 	<LI>can be connected to and utilised from VS Code</LI><BR />
 	<LI>contains all the tools needed for a particular project or tutorial</LI><BR />
</UL><BR />
Let's work through the tutorial steps and see what we need to do. Note that this flow is based on the version of the tutorial today, which is at <A href="https://github.com/sap-tutorials/Tutorials/blob/ea9e51a1adccf18bdc9328406e7fa939f8d3616b/tutorials/btp-app-set-up-local-development/btp-app-set-up-local-development.md" target="_blank" rel="nofollow noopener noreferrer">commit ea9e51a</A> in the source repository.<BR />
<H3 id="toc-hId-304092928">Base image</H3><BR />
Before we start, we should decide on a base image upon which to build our definition. As we'll be connecting to it with VS Code it makes sense to start with one in that context; in fact, as we can see from the tutorial, it's a Node.js CAP application that we'll be building.<BR />
<BR />
There's a set of base Dockerfile definitions available in the <A href="https://github.com/microsoft/vscode-dev-containers" target="_blank" rel="nofollow noopener noreferrer">vscode-dev-containers</A> repository, and after a little reading we see that <A href="https://github.com/microsoft/vscode-dev-containers/blob/v0.187.0/containers/javascript-node/.devcontainer/base.Dockerfile" target="_blank" rel="nofollow noopener noreferrer">this base.Dockerfile definition</A> suits our needs. It contains Node.js, but also a complete environment that is based on the Debian Linux distribution.<BR />
<BR />
Looking at the <A href="https://github.com/microsoft/vscode-dev-containers/tree/main/containers/javascript-node" target="_blank" rel="nofollow noopener noreferrer">reference page</A>, we see that the published image name is <STRONG>mcr.microsoft.com/vscode/devcontainers/javascript-node</STRONG> and there are various image variants available:<BR />
<P style="overflow: hidden;margin-bottom: 0px"><IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2022/01/screenshot-2022-01-26-at-11.07.38.png" /></P><BR />
We'll go for the <STRONG>16-buster</STRONG> variant - <A href="https://nodejs.org/en/about/releases/" target="_blank" rel="nofollow noopener noreferrer">Node.js v16</A>, which is the active Long Term Support&nbsp; (LTS) version, based on one of my favourite recent stable Debian releases, <A href="https://www.debian.org/releases/buster/" target="_blank" rel="nofollow noopener noreferrer">buster</A>.<BR />
<BR />
Before continuing, we can actually test this base image quite easily, and it will give us a feel for what we are using.<BR />
<BR />
Let's pull the image first:<BR />
<PRE><CODE>; <STRONG>docker pull mcr.microsoft.com/vscode/devcontainers/javascript-node:16-buster</STRONG><BR />
16-buster: Pulling from vscode/devcontainers/javascript-node<BR />
9b99af5931b3: Pull complete <BR />
b6013b3e77fe: Pull complete <BR />
bbced17b6899: Pull complete <BR />
8b609dabefa8: Pull complete <BR />
50544bfef33d: Pull complete <BR />
fea3f8b8e075: Pull complete <BR />
9e4e229021ee: Pull complete <BR />
971c8efc250b: Pull complete <BR />
3e9d4bc41c27: Pull complete <BR />
28732f89a0aa: Pull complete <BR />
186abc813d19: Pull complete <BR />
Digest: sha256:75f31402fe36ac2b24f4838a7609afd75371378c6261b84eda0c1ece32e165f1<BR />
Status: Downloaded newer image for mcr.microsoft.com/vscode/devcontainers/javascript-node:16-buster<BR />
mcr.microsoft.com/vscode/devcontainers/javascript-node:16-buster</CODE></PRE><BR />
Now what happens when we run it without passing any parameters?<BR />
<PRE><CODE># /tmp<BR />
; <STRONG>docker run --rm -it mcr.microsoft.com/vscode/devcontainers/javascript-node:16-buster</STRONG><BR />
Welcome to Node.js v16.13.2.<BR />
Type ".help" for more information.<BR />
&gt;</CODE></PRE><BR />
Nice! We get a Node.js prompt.<BR />
<BR />
But we can also dig in a little further, and ask for a shell:<BR />
<PRE><CODE># /tmp<BR />
; <STRONG>docker run --rm -it mcr.microsoft.com/vscode/devcontainers/javascript-node:16-buster bash</STRONG><BR />
root ➜ / $</CODE></PRE><BR />
Even nicer! Access to a Bash shell (The One True Shell<span class="lia-unicode-emoji" title=":trade_mark:">™️</span>) is super useful, and there's even <A href="https://github.com/microsoft/vscode-dev-containers/blob/v0.187.0/containers/javascript-node/.devcontainer/base.Dockerfile#L6" target="_blank" rel="nofollow noopener noreferrer">zsh available</A> if you're that way inclined.<BR />
<BR />
So that's the base upon which we are to build. A good start. We have Node.js and a command line environment. These are the two essential ingredients for this tutorial. A Node.js runtime for our app, and a command line environment <A href="https://blogs.sap.com/tag/thefutureisterminal/" target="_blank" rel="noopener noreferrer">within which to work</A> and where we can install and use other tools and utilities, both SAP-specific and more general too.<BR />
<BR />
While we can use this image reference <STRONG>mcr.microsoft.com/vscode/devcontainers/javascript-node</STRONG> directly, we should really start our own definition file, our own Dockerfile - which is the recipe, the definition, for the image we want to build.<BR />
<BR />
So let's start with a very simple Dockerfile that uses this image reference as a base (note that the standard name is just "Dockerfile" with no extension - beware any Windows tools that insist on being "helpful" by adding one):<BR />
<PRE><CODE>ARG VARIANT="16-buster"<BR />
FROM mcr.microsoft.com/vscode/devcontainers/javascript-node:${VARIANT}</CODE></PRE><BR />
Here we've split off the variant part of the image reference to be the value of an ARG, so we can more easily modify it in future. Implicitly this also teaches us a couple of things about the Dockerfile syntax:<BR />
<UL><BR />
 	<LI>with <A href="https://docs.docker.com/engine/reference/builder/#arg" target="_blank" rel="nofollow noopener noreferrer">ARG</A> you can define a variable, with a default value which can be overridden at build time with a new value passed on the command line</LI><BR />
 	<LI>the ${...} syntax is how you reference values of variables elsewhere</LI><BR />
</UL><BR />
So unless we specify something explicitly on the command line when we run the build for this Dockerfile (with --build-arg VARIANT=something-else), the image that will be used as the base will be <STRONG>mcr.microsoft.com/vscode/devcontainers/javascript-node:16-buster.</STRONG><BR />
<H2 id="toc-hId--21503296">Next steps</H2><BR />
OK.&nbsp;What else do we need? Well, to answer that, let's take a look through the steps of the <A href="https://developers.sap.com/tutorials/btp-app-set-up-local-development.html" target="_blank" rel="noopener noreferrer">prerequisite tutorial</A> itself. But we'll do that in part 2:<BR />
<BR />
<A href="https://blogs.sap.com/2022/01/28/boosting-tutorial-ux-with-dev-containers-part-2-embedding-prerequisite-details/" target="_blank" rel="noopener noreferrer">Boosting tutorial UX with dev containers part 2 – embedding prerequisite details</A><BR />
<BR />
See you there!<BR />
<H2 id="toc-hId--218016801">Further Reading</H2><BR />
<UL><BR />
 	<LI><A href="https://blogs.sap.com/tag/understandcontainers/" target="_blank" rel="noopener noreferrer">Understanding Containers</A> (from <SPAN class="mention-scrubbed">vitaliy.rudnytskiy</SPAN>)</LI><BR />
 	<LI><A href="https://blogs.sap.com/2020/02/20/develop-sap-cap-apps-inside-a-vs-code-docker-container/" target="_blank" rel="noopener noreferrer">Develop SAP CAP apps inside a VS Code Docker Container</A> (from <SPAN class="mention-scrubbed">helmut.tammen2</SPAN>)</LI><BR />
</UL>
