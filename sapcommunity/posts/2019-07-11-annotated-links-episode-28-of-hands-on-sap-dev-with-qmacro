2019-07-11-annotated-links-episode-28-of-hands-on-sap-dev-with-qmacro
Annotated links: Episode 28 of Hands-on SAP dev with qmacro
technology-blog-sap
2019-07-11
https://community.sap.com/t5/technology-blogs-by-sap/annotated-links-episode-28-of-hands-on-sap-dev-with-qmacro/ba-p/13399163
<EM>This is a searchable description of the content of a live stream recording, specifically <STRONG>“Episode 28 - Digging into Workflow user task UIs”</STRONG> in the “<A href="https://bit.ly/handsonsapdev" target="_blank" rel="nofollow noopener noreferrer">Hands-on SAP dev with qmacro</A>” series. There are links directly to specific highlights in the video recording. For links to annotations of other episodes, please see the “<A href="https://bit.ly/handsonsapdev#replays" target="_blank" rel="nofollow noopener noreferrer">Catch the replays</A>” section of the series blog post.</EM><BR />
<BR />
This episode, titled “<A href="https://bit.ly/handsonsapdev#ep28" target="_blank" rel="nofollow noopener noreferrer">Digging into Workflow user task UIs</A>”, was streamed live on Wed 05 Jun 2019 and is approximately one hour in length. The stream recording is <A href="https://www.youtube.com/watch?v=anfNCr-WYDk&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0" target="_blank" rel="nofollow noopener noreferrer">available on YouTube</A>.<BR />
<BR />
<SPAN style="text-decoration: underline"><IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2019/07/Screenshot-2019-07-11-at-18.15.49.jpg" /></SPAN><BR />
<BR />
Below is a brief synopsis, and links to specific highlights - use these links to jump directly to particular places of interest in the recording, based on ‘hh:mm:ss’ style timestamps.<BR />
<H2 id="brief-synopsis" id="toc-hId-908690877">Brief synopsis</H2><BR />
Continuing on from the previous episode, we dig in a little deeper to user task UIs, looking at the Workflow API and task info, as well as the My Inbox API, to understand how the generic UI component actually works.<BR />
<H2 id="links-to-specific-highlights" id="toc-hId-712177372">Links to specific highlights</H2><BR />
<STRONG><A href="https://www.youtube.com/watch?v=anfNCr-WYDk&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h02m50s" target="_blank" rel="nofollow noopener noreferrer">00:02:50</A>:</STRONG> Mentioning <A href="https://community.sap.com/Graham%20Robinson's" target="_blank" rel="nofollow noopener noreferrer">https://people.sap.com/grahamrobinson</A> <A href="https://www.asug.com/events/test-driven-development-with-abap" target="_blank" rel="nofollow noopener noreferrer">Test-Driven Development with ABAP</A> webinar which was to take place directly after this live stream episode - obviously it’s over now, but you should definitely search for the recording and check it out if you can.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=anfNCr-WYDk&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h03m55s" target="_blank" rel="nofollow noopener noreferrer">00:03:55</A>:</STRONG> Looking briefly at a tweet via <SPAN class="mention-scrubbed">john.patterson5</SPAN> at a blog post that was doing what I’ve seen others do before, which is to treat an OData service as a plain JSON endpoint, which technically you can do, but probably you don’t really want to be doing. In a great way, community member <SPAN class="mention-scrubbed">uxkjaer</SPAN> provides some helpful hints and even some <A href="https://github.com/kovboyjder/BASIC_CRUD_COMMUNITY" target="_blank" rel="nofollow noopener noreferrer">sample code</A> to nudge the blog post author in the right direction. Nice work Jakob!<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=anfNCr-WYDk&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h07m28s" target="_blank" rel="nofollow noopener noreferrer">00:07:28</A>:</STRONG> Talking about the recent news that Apple will replace the default <A href="https://en.wikipedia.org/wiki/Bash_(Unix_shell)" target="_blank" rel="nofollow noopener noreferrer">Bash shell</A> with the <A href="https://en.wikipedia.org/wiki/Z_shell" target="_blank" rel="nofollow noopener noreferrer">Z shell</A> in upcoming releases of macOS, noting that they have different licences, which may be part of the reason for the move on Apple’s part.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=anfNCr-WYDk&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h09m45s" target="_blank" rel="nofollow noopener noreferrer">00:09:45</A>:</STRONG> Looking at where we left off <A href="https://bit.ly/handsonsapdev#ep27" target="_blank" rel="nofollow noopener noreferrer">last time</A>, which is that we’re at the stage where we have a service task and a user task in the definition of the workflow that we’re building in the SAP Web IDE.<BR />
<BR />
We have a running workflow instance, with a user task waiting for us in My Inbox, referencing product HT-1000, but (as we remember from the end of the previous episode), we note that the breakpoint we’d set wasn’t being reached.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=anfNCr-WYDk&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h14m13s" target="_blank" rel="nofollow noopener noreferrer">00:14:13</A>:</STRONG> Starting to figure out why the breakpoint wasn’t being reached, as well as looking at the bindings in the view, and what they are - there are bindings to the default model and to the “app” model.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=anfNCr-WYDk&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h16m10s" target="_blank" rel="nofollow noopener noreferrer">00:16:10</A>:</STRONG> In looking at the component startup, I mention that there’s a specific blog post on this topic in my “<A href="https://qmacro.org/2018/01/16/discovering-SAP%20Cloud%20Platform-workflow/" target="_blank" rel="nofollow noopener noreferrer">Discovering SCP Workflow</A>” series - called <A href="https://blogs.sap.com/2018/01/22/discovering-SAP%20Cloud%20Platform-workflow-component-startup/" target="_blank" rel="noopener noreferrer">Component Startup</A>.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=anfNCr-WYDk&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h20m50s" target="_blank" rel="nofollow noopener noreferrer">00:20:50</A>:</STRONG> In the course of debugging, we look briefly at the documentation for the actual Workflow API we are using, which is available on the SAP API Business Hub: <A href="https://api.sap.com/api/SAP_CP_Workflow/resource" target="_blank" rel="noopener noreferrer">Workflow API for Neo</A> - the actual resource we’re retrieving is this one:<BR />
<PRE><CODE>/v1/task-instances/{taskInstanceId}/context</CODE></PRE><BR />
<STRONG><A href="https://www.youtube.com/watch?v=anfNCr-WYDk&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h23m21s" target="_blank" rel="nofollow noopener noreferrer">00:23:21</A>:</STRONG> It turns out that the breakpoint wasn’t being reached as there were some undefined values that were needed. So at this stage we add a script task to the workflow definition to specify those values.<BR />
<BR />
Having inserted the script task before the user task, we comment out the sample code inside it and specify the following, based on analysis of what’s required:<BR />
<DIV><BR />
<PRE class="sourceCode javascript"><CODE class="sourceCode javascript"><SPAN id="cb2-1"><SPAN class="va">$</SPAN>.<SPAN class="va">context</SPAN>.<SPAN class="at">genericusertask</SPAN> <SPAN class="op">=</SPAN> <SPAN class="op">{</SPAN></SPAN><BR />
<SPAN id="cb2-2">  <SPAN class="dt">control</SPAN><SPAN class="op">:</SPAN> <SPAN class="op">{</SPAN></SPAN><BR />
<SPAN id="cb2-3">    <SPAN class="dt">source</SPAN><SPAN class="op">:</SPAN> <SPAN class="st">"/productdata/d"</SPAN><SPAN class="op">,</SPAN></SPAN><BR />
<SPAN id="cb2-4">    <SPAN class="dt">properties</SPAN><SPAN class="op">:</SPAN> [ <SPAN class="st">"Name"</SPAN><SPAN class="op">,</SPAN> <SPAN class="st">"StockQuantity"</SPAN><SPAN class="op">,</SPAN> <SPAN class="st">"AverageRating"</SPAN> ]</SPAN><BR />
<SPAN id="cb2-5"><SPAN class="op">}</SPAN></SPAN></CODE></PRE><BR />
</DIV><BR />
<STRONG><A href="https://www.youtube.com/watch?v=anfNCr-WYDk&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h28m28s" target="_blank" rel="nofollow noopener noreferrer">00:28:28</A>:</STRONG> We create a new instance of the workflow definition to test this out (obviously, because the existing instance doesn’t have this required data in its context).<BR />
<BR />
This time we see that the breakpoints are indeed reached, and on continuing, the task UI correctly shows what we’re expecting, i.e.&nbsp;the data from the three product properties. Nice!<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=anfNCr-WYDk&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h30m20s" target="_blank" rel="nofollow noopener noreferrer">00:30:20</A>:</STRONG> A quick digression into something we talked about in the previous episode, i.e.&nbsp;why JSON representations of OData start with ‘d’. Basically, the focus is not on the choice of ‘d’ for the property name, it’s on the choice of actually embedding the real data within an object (a map) in the resource returned, to foil attempts at cross-site scripting attacks.<BR />
<BR />
For more information about this, see the section “JSON Representations” in the <A href="https://www.odata.org/documentation/odata-version-2-0/json-format/" target="_blank" rel="nofollow noopener noreferrer">JSON Format (OData Version 2.0)</A> documentation.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=anfNCr-WYDk&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h33m10s" target="_blank" rel="nofollow noopener noreferrer">00:33:10</A>:</STRONG> We now switch back to the <A href="https://api.sap.com/api/SAP_CP_Workflow/resource" target="_blank" rel="noopener noreferrer">Workflow API home</A> on the SAP API Business Hub, to see if we can work out how to find the workflow instance that’s still running.<BR />
<BR />
While there’s a sandbox API environment to try things out on generically, you can also define your own environments, and that’s what we do here, to reflect our SAP Cloud Platform trial subaccount.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=anfNCr-WYDk&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h36m43s" target="_blank" rel="nofollow noopener noreferrer">00:36:43</A>:</STRONG> We first make a more general call to the <CODE>/v1/task-instances</CODE> endpoint to list all of our workflow instances (included those already in “Completed” status, for example).<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=anfNCr-WYDk&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h37m35s" target="_blank" rel="nofollow noopener noreferrer">00:37:35</A>:</STRONG> It’s worth at this stage trying the API out directly (i.e.&nbsp;not within the SAP API Business Hub), and what better way than to use <A href="https://curl.haxx.se/" target="_blank" rel="nofollow noopener noreferrer">curl</A>. It turns out that curl supports the <CODE>.netrc</CODE> standard (for storing and using authentication details), which you can read about here: <A class="uri" href="https://ec.haxx.se/usingcurl-netrc.html" target="_blank" rel="nofollow noopener noreferrer">https://ec.haxx.se/usingcurl-netrc.html</A>.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=anfNCr-WYDk&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h39m48s" target="_blank" rel="nofollow noopener noreferrer">00:39:48</A>:</STRONG> We invoke curl against the <CODE>/v1/task-instances</CODE> endpoint thus (lines only split for readability):<BR />
<PRE><CODE>curl -n<BR />
  "https://bpmworkflowruntimewfs-p2001351149trial.hanatrial.ondemand.com<BR />
  /workflow-service/rest/v1/task-instances?<BR />
  %24skip=0&amp;<BR />
  %24top=100&amp;<BR />
  %24inlinecount=none&amp;<BR />
  %24orderby=createdAt%20asc"</CODE></PRE><BR />
We get all sorts of data back, albeit in a way that’s hard to read as a human.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=anfNCr-WYDk&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h40m45s" target="_blank" rel="nofollow noopener noreferrer">00:40:45</A>:</STRONG> So, enter <A href="https://stedolan.github.io/jq/" target="_blank" rel="nofollow noopener noreferrer"><CODE>jq</CODE></A>, which is described as a “lightweight and flexible command-line JSON processor”. I’ve mentioned <CODE>jq</CODE> before and even recorded a short video on it: “<A href="https://www.youtube.com/watch?v=yI5IQooQzW4" target="_blank" rel="nofollow noopener noreferrer">Using jq to parse out SCP destination info</A>”. This will enable us to more easily read the JSON output and pull data from it.<BR />
<BR />
We start first with “the simplest thing that could possible work”* and pipe the output from <CODE>curl</CODE> into <CODE>jq</CODE>:<BR />
<PRE><CODE>curl -n<BR />
  "https://bpmworkflowruntimewfs-p2001351149trial.hanatrial.ondemand.com<BR />
  /workflow-service/rest/v1/task-instances?<BR />
  %24skip=0&amp;<BR />
  %24top=100&amp;<BR />
  %24inlinecount=none&amp;<BR />
  %24orderby=createdAt%20asc" | jq</CODE></PRE><BR />
<BLOCKQUOTE>*one of my favourite phrases, coined, or at least <A href="http://wiki.c2.com/?DoTheSimplestThingThatCouldPossiblyWork" target="_blank" rel="nofollow noopener noreferrer">nurtured</A> by that hero of great technology and thinking, <A href="https://en.wikipedia.org/wiki/Ward_Cunningham" target="_blank" rel="nofollow noopener noreferrer">Ward Cunningham</A> (who, amongst other things, is the father of the Wiki).</BLOCKQUOTE><BR />
This gives us a much more readable layout:<BR />
<DIV><BR />
<PRE class="sourceCode json"><CODE class="sourceCode json"><SPAN id="cb5-1"><SPAN class="ot">[</SPAN></SPAN><BR />
<SPAN id="cb5-2">  <SPAN class="fu">{</SPAN></SPAN><BR />
<SPAN id="cb5-3">    <SPAN class="dt">"activityId"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="st">"usertask1"</SPAN><SPAN class="fu">,</SPAN></SPAN><BR />
<SPAN id="cb5-4">    <SPAN class="dt">"claimedAt"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="kw">null</SPAN><SPAN class="fu">,</SPAN></SPAN><BR />
<SPAN id="cb5-5">    <SPAN class="dt">"completedAt"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="st">"2019-05-30T10:15:29.119Z"</SPAN><SPAN class="fu">,</SPAN></SPAN><BR />
<SPAN id="cb5-6">    <SPAN class="dt">"createdAt"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="st">"2019-05-30T09:28:32.853Z"</SPAN><SPAN class="fu">,</SPAN></SPAN><BR />
<SPAN id="cb5-7">    <SPAN class="dt">"description"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="st">"Please review this request for 25 of stock item Notebook Basic 19."</SPAN><SPAN class="fu">,</SPAN></SPAN><BR />
<SPAN id="cb5-8">    <SPAN class="dt">"id"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="st">"4ae5e1b5-82bd-11e9-9df2-00163e8e2888"</SPAN><SPAN class="fu">,</SPAN></SPAN><BR />
<SPAN id="cb5-9">    <SPAN class="dt">"processor"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="kw">null</SPAN><SPAN class="fu">,</SPAN></SPAN><BR />
<SPAN id="cb5-10">    <SPAN class="dt">"recipientUsers"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="ot">[</SPAN></SPAN><BR />
<SPAN id="cb5-11">      <SPAN class="st">"P2001351149"</SPAN></SPAN><BR />
<SPAN id="cb5-12">    <SPAN class="ot">]</SPAN><SPAN class="fu">,</SPAN></SPAN><BR />
<SPAN id="cb5-13">    <SPAN class="dt">"recipientGroups"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="ot">[]</SPAN><SPAN class="fu">,</SPAN></SPAN><BR />
<SPAN id="cb5-14">    <SPAN class="dt">"status"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="st">"CANCELED"</SPAN><SPAN class="fu">,</SPAN></SPAN><BR />
<SPAN id="cb5-15">    <SPAN class="dt">"subject"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="st">"Request for Notebook Basic 19"</SPAN><SPAN class="fu">,</SPAN></SPAN><BR />
<SPAN id="cb5-16">    <SPAN class="dt">"workflowDefinitionId"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="st">"orderprocess"</SPAN><SPAN class="fu">,</SPAN></SPAN><BR />
<SPAN id="cb5-17">    <SPAN class="dt">"workflowInstanceId"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="st">"49075dac-82bd-11e9-9df2-00163e8e2888"</SPAN><SPAN class="fu">,</SPAN></SPAN><BR />
<SPAN id="cb5-18">    <SPAN class="dt">"priority"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="st">"MEDIUM"</SPAN><SPAN class="fu">,</SPAN></SPAN><BR />
<SPAN id="cb5-19">    <SPAN class="dt">"dueDate"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="kw">null</SPAN><SPAN class="fu">,</SPAN></SPAN><BR />
<SPAN id="cb5-20">    <SPAN class="dt">"createdBy"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="st">"P2001351149"</SPAN><SPAN class="fu">,</SPAN></SPAN><BR />
<SPAN id="cb5-21">    <SPAN class="dt">"definitionId"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="st">"usertask1@orderprocess"</SPAN><SPAN class="fu">,</SPAN></SPAN><BR />
<SPAN id="cb5-22">    <SPAN class="dt">"lastChangedAt"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="st">"2019-05-30T10:15:29.119Z"</SPAN></SPAN><BR />
<SPAN id="cb5-23">  <SPAN class="fu">}</SPAN><SPAN class="ot">,</SPAN></SPAN><BR />
<SPAN id="cb5-24">  <SPAN class="fu">{</SPAN></SPAN><BR />
<SPAN id="cb5-25">    <SPAN class="dt">"activityId"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="st">"usertask1"</SPAN><SPAN class="fu">,</SPAN></SPAN><BR />
<SPAN id="cb5-26">    <SPAN class="dt">"claimedAt"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="kw">null</SPAN><SPAN class="fu">,</SPAN></SPAN><BR />
<SPAN id="cb5-27">    <SPAN class="dt">"completedAt"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="st">"2019-05-30T10:15:21.280Z"</SPAN><SPAN class="fu">,</SPAN></SPAN><BR />
<SPAN id="cb5-28">    <SPAN class="dt">"createdAt"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="st">"2019-05-30T09:34:57.591Z"</SPAN><SPAN class="fu">,</SPAN></SPAN><BR />
<SPAN id="cb5-29">    <SPAN class="dt">"..."</SPAN><SPAN class="fu">:</SPAN> <SPAN class="st">"..."</SPAN></SPAN><BR />
<SPAN id="cb5-30">  <SPAN class="fu">}</SPAN></SPAN><BR />
<SPAN id="cb5-31"><SPAN class="ot">]</SPAN></SPAN></CODE></PRE><BR />
</DIV><BR />
<STRONG><A href="https://www.youtube.com/watch?v=anfNCr-WYDk&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h43m20s" target="_blank" rel="nofollow noopener noreferrer">00:43:20</A>:</STRONG> As we’ve digressed slightly to look at <CODE>jq</CODE>, we might as well digress a little further and have a look at involving the excellent <CODE>fzf</CODE> which in fact we did look at briefly in <A href="http://bit.ly/handsonsapdev#ep1" target="_blank" rel="nofollow noopener noreferrer">Ep.1</A>!<BR />
<BR />
First, we supply <CODE>jq</CODE> with some instructions, thus (noting the addition of the <CODE>-r</CODE> parameter to ask for “raw” output that will honour the “<CODE>\\t</CODE>” tab characters):<BR />
<PRE><CODE>jq -r '.[] | "\(.id)\t\(.status)\t\(.subject)"'</CODE></PRE><BR />
This gives us:<BR />
<PRE><CODE>4ae5e1b5-82bd-11e9-9df2-00163e8e2888  CANCELED  Request for Notebook Basic 19<BR />
3037056b-82be-11e9-9df2-00163e8e2888  CANCELED  Request for Notebook Basic 19<BR />
bde70c73-82c3-11e9-9df2-00163e8e2888  CANCELED  Request for Notebook Basic 19<BR />
e05c9cd0-82c3-11e9-9df2-00163e8e2888  CANCELED  Request for Notebook Basic 19<BR />
2125625c-82cf-11e9-9df2-00163e8e2888  COMPLETED  Request for Notebook Basic 19<BR />
84c1b859-82cf-11e9-9df2-00163e8e2888  COMPLETED  Request for Notebook Basic 19<BR />
e54a0188-8377-11e9-a4b8-00163e8e2aef  COMPLETED  The Notebook Basic 15 !<BR />
b7d42a9d-8378-11e9-a4b8-00163e8e2aef  CANCELED  The Notebook Basic 15 !<BR />
0839d7ed-82c4-11e9-9df2-00163e8e2888  READY  Request for Notebook Basic 19</CODE></PRE><BR />
This allows us to search quickly for the items given, say, a status criteria.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=anfNCr-WYDk&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h46m40s" target="_blank" rel="nofollow noopener noreferrer">00:46:40</A>:</STRONG> We go one step further now to use <CODE>cut</CODE> to modify what <CODE>fzf</CODE> gives us, thus:<BR />
<PRE><CODE>jq -r '.[] | "\(.id)\t\(.status)\t\(.subject)"' | cut -f1</CODE></PRE><BR />
to give us just the ID of the item selected. Lovely.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=anfNCr-WYDk&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h48m00s" target="_blank" rel="nofollow noopener noreferrer">00:48:00</A>:</STRONG> Moving on to what we really want to do, which is to modify the status of an instance, we look at the following API endpoint (and method):<BR />
<PRE><CODE>PATCH /v1/task-instances/{taskInstanceId}</CODE></PRE><BR />
In order to make an API call that has side effects, we need a Cross Site Request Forgery (CSRF) token, and we can retrieve one with another Workflow API endpoint:<BR />
<PRE><CODE>GET /v1/xsrf-token</CODE></PRE><BR />
<STRONG><A href="https://www.youtube.com/watch?v=anfNCr-WYDk&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h51m15s" target="_blank" rel="nofollow noopener noreferrer">00:51:15</A>:</STRONG> So we do that, using <CODE>curl</CODE> in a script (called “fetch”) like this (we could just write the whole thing out on the command line, but having it in a script like this makes it easier to remember and modify):<BR />
<PRE><CODE>#!/bin/bash<BR />
<BR />
USER=p2001351149<BR />
<BR />
curl \<BR />
        --netrc \<BR />
        --header "X-CSRF-Token: Fetch" \<BR />
        --cookie-jar cookiejar.dat \<BR />
        --verbose \<BR />
        <A href="https://bpmworkflowruntimewfs-${USER}trial.hanatrial.ondemand.com/workflow-service/rest/v1/xsrf-token" target="test_blank" rel="nofollow noopener noreferrer">https://bpmworkflowruntimewfs-${USER}trial.hanatrial.ondemand.com/workflow-service/rest/v1/xsrf-token</A></CODE></PRE><BR />
Running this gives us back a token in the X-CSRF-Token header in the HTTP response, a token that we then save in an environmental variable:<BR />
<PRE class="shell"><CODE>export CSRFTOKEN=...</CODE></PRE><BR />
<STRONG><A href="https://www.youtube.com/watch?v=anfNCr-WYDk&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h52m15s" target="_blank" rel="nofollow noopener noreferrer">00:52:15</A>:</STRONG> This is then referenced in a second script “post”, that looks like this:<BR />
<PRE><CODE>#!/bin/bash<BR />
<BR />
USER=p2001351149<BR />
<BR />
curl \<BR />
        --netrc \<BR />
        --header "Content-Type: application/json" \<BR />
        --header "X-CSRF-Token: $CSRFTOKEN" \<BR />
        --cookie cookiejar.dat \<BR />
        --request PATCH \<BR />
        --verbose \<BR />
        --data @data.json \<BR />
        <A href="https://bpmworkflowruntimewfs-${USER}trial.hanatrial.ondemand.com/workflow-service/rest/v1/task-instances/&lt;task-instance-id&gt;" target="test_blank" rel="nofollow noopener noreferrer">https://bpmworkflowruntimewfs-${USER}trial.hanatrial.ondemand.com/workflow-service/rest/v1/task-instances/&lt;task-instance-id&gt;</A>;</CODE></PRE><BR />
(where <CODE>&lt;task-instance-id&gt;</CODE> is the ID of the task instance for which we want to modify the priority).<BR />
<BR />
The content of the <CODE>data.json</CODE> file referred to in the <CODE>--data</CODE> parameter looks like this:<BR />
<DIV><BR />
<PRE class="sourceCode json"><CODE class="sourceCode json"><SPAN id="cb14-1"><SPAN class="fu">{</SPAN></SPAN><BR />
<SPAN id="cb14-2">  <SPAN class="dt">"priority"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="st">"VERY_HIGH"</SPAN></SPAN><BR />
<SPAN id="cb14-3"><SPAN class="fu">}</SPAN></SPAN></CODE></PRE><BR />
</DIV><BR />
Note that the default HTTP method used when the <CODE>--data</CODE> parameter is specified is “POST”, so we needed to explicitly specify the “PATCH” method with the <CODE>--request</CODE> parameter.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=anfNCr-WYDk&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h57m18s" target="_blank" rel="nofollow noopener noreferrer">00:57:18</A>:</STRONG> On execution, the response is returned quickly, and note the HTTP 204 status code, signifying a successful result with no content returned. Checking in the MyInbox app we see that the user task’s priority is now marked as “Very High” - success.<BR />
<BR />
That brings us to the end of this episode, which I thought was quite exciting. Hope you did too!
