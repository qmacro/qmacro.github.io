2019-12-13-annotated-links-episode-47-of-hands-on-sap-dev-with-qmacro
Annotated links: Episode 47 of Hands-on SAP dev with qmacro
technology-blog-sap
2019-12-13
https://community.sap.com/t5/technology-blogs-by-sap/annotated-links-episode-47-of-hands-on-sap-dev-with-qmacro/ba-p/13454684
<EM>This is a searchable description of the content of a live stream recording, specifically <STRONG>"Ep.47 - ABAP and SAP Cloud Platform functions for Advent of Code"</STRONG> in the "<A href="https://bit.ly/handsonsapdev" target="_blank" rel="nofollow noopener noreferrer">Hands-on SAP dev with qmacro</A>" series. There are links directly to specific highlights in the video recording. For links to annotations of other episodes, please see the "<A href="https://bit.ly/handsonsapdev#replays" target="_blank" rel="nofollow noopener noreferrer">Catch the replays</A>" section of the series blog post.</EM><BR />
<BR />
This episode was streamed live on Fri 06 Dec 2019 and is approximately 60 minutes in length. The stream recording is <A href="https://www.youtube.com/watch?v=Om8AvzbabR8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;index=48" target="_blank" rel="nofollow noopener noreferrer">available on YouTube</A>.<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2019/12/Screenshot-2019-12-13-at-15.49.51-1.png" /><BR />
<BR />
Brief synopsis: It's December and many of us are furiously hacking away on solutions to the excellent Advent of Code daily puzzles. We're using different languages, platforms and tools, for different reasons; in this episode we get Hendrik Neumann and Gregor Wolf to show us how they're solving the puzzles with SAP tech.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=Om8AvzbabR8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h03m15s" target="_blank" rel="nofollow noopener noreferrer">00:03:15</A> Setting the scene, showing <A href="https://adventofcode.com" target="_blank" rel="nofollow noopener noreferrer">Advent of Code</A> - a series of daily programming puzzles that many folks, a vast number of folks around the world, are using to have some fun, learn a new language or a new programming technique, and generally improve their skills.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=Om8AvzbabR8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h04m25s" target="_blank" rel="nofollow noopener noreferrer">00:04:25</A> Also, introduced to us by <SPAN class="mention-scrubbed">gregorw</SPAN>, there's <A href="https://25daysofserverless.com" target="_blank" rel="nofollow noopener noreferrer">25 Days of Serverless</A> which follows a similar pattern of daily programming challenges, this time to be solved in a serverless context.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=Om8AvzbabR8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h04m55s" target="_blank" rel="nofollow noopener noreferrer">00:04:55</A> A quick reminder that the SAP Cloud Platform has a beta Functions-as-a-Service (FaaS) offering, for which I've created a second subaccount in my trial account, in order to be able to turn on "beta features" to access this offering.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=Om8AvzbabR8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h05m50s" target="_blank" rel="nofollow noopener noreferrer">00:05:50</A> <SPAN class="mention-scrubbed">hendrik.neumann</SPAN> is going to show us some of his coding for Advent of Code solutions that he wrote in ABAP, and that reminded me to share the link to the SAP TechEd <A href="https://developers.sap.com/app-space.html" target="_blank" rel="noopener noreferrer">App Space missions</A> from this year, which includes one for the <A href="https://developers.sap.com/tutorials/abap-environment-trial-onboarding.html" target="_blank" rel="noopener noreferrer">SAP Cloud Platform ABAP Environment</A>.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=Om8AvzbabR8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h06m50s" target="_blank" rel="nofollow noopener noreferrer">00:06:50</A> Moving to the main scene to bring in Hendrik and Gregor who have been waiting patiently in the Green Room (!). We had some issues with Hendrik's audio initially, so we started with Gregor.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=Om8AvzbabR8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h10m20s" target="_blank" rel="nofollow noopener noreferrer">00:10:20</A> We get going with Gregor showing us a solution to the first challenge relating to generating a service that effectively "rolls the dice" for a dreidel with four different values.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=Om8AvzbabR8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h11m25s" target="_blank" rel="nofollow noopener noreferrer">00:11:25</A> We talk about continous trial renewal (on SAP Cloud Platform Cloud Foundry), and that after 90 days all artifacts are deleted, but can be re-created afterwards. Gregor (and I, and others, I'm sure) uses GitHub to store artifacts to be able to more easily re-create them in this way.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=Om8AvzbabR8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h11m45s" target="_blank" rel="nofollow noopener noreferrer">00:11:45</A> Gregor started off with the SAP Web IDE using the project wizard to get a template for creating a FaaS application. The resulting simple application is effectively a single <CODE>handler</CODE> function that is exported, and simply responds to an incoming event (an HTTP request, in this case).<BR />
<BR />
<A href="https://www.youtube.com/watch?v=Om8AvzbabR8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h13m10s" target="_blank" rel="nofollow noopener noreferrer">00:13:10</A> Just before deploying this simple function to the SAP Cloud Platform, Gregor points out a gotcha that you need to pay attention to, otherwise things won't work generally. This is documented in the help document <A href="https://help.sap.com/viewer/94fafb5bcf8f4c5cbdd0cdd8e358183c/Cloud/en-US/da73ff53ebc44ce2a12ee73911367c01.html" target="_blank" rel="noopener noreferrer">Create a Functions (Beta) Service Instance</A> and basically involves manually specifying the service instance name in a small JSON stanza like this:<BR />
<DIV><BR />
<PRE class="sourceCode json"><CODE class="sourceCode json"><SPAN class="fu">{</SPAN><BR />
  <SPAN class="dt">"name"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="st">"faas-test"</SPAN><BR />
<SPAN class="fu">}</SPAN></CODE></PRE><BR />
</DIV><BR />
<A href="https://www.youtube.com/watch?v=Om8AvzbabR8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h14m20s" target="_blank" rel="nofollow noopener noreferrer">00:14:20</A> After deployment, we test it out, via a FaaS cockpit page relating to Gregor's FaaS subscription. The URL of this cockpit page will look something like this:<BR />
<PRE><CODE><A href="https://&lt;your-id&gt;beta.cockpit.&lt;region&gt;.functions.ondemand.com/#/overview" target="test_blank" rel="nofollow noopener noreferrer">https://&lt;your-id&gt;beta.cockpit.&lt;region&gt;.functions.ondemand.com/#/overview</A></CODE></PRE><BR />
It's a nice overview with access to the functions, triggers, and so on. Taking the HTTP endpoint that represents the trigger for the FaaS handler, Gregor calls the service.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=Om8AvzbabR8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h16m30s" target="_blank" rel="nofollow noopener noreferrer">00:16:30</A> Moving on to the challenge in Day 3, Gregor takes us through what was involved, including <A href="https://developer.github.com/webhooks/" target="_blank" rel="nofollow noopener noreferrer">GitHub Webhooks</A>. This time Gregor shows that he moved to a local development context for this one, using the Functions (Beta) Library, described in the SAP Help document <A href="https://help.sap.com/viewer/94fafb5bcf8f4c5cbdd0cdd8e358183c/Cloud/en-US/ee7340af22b74e109b32d0d67c72bf94.html" target="_blank" rel="noopener noreferrer">Create a Function Project with Functions (Beta) Library</A>. Nice find, Gregor!<BR />
<BR />
<A href="https://www.youtube.com/watch?v=Om8AvzbabR8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h18m10s" target="_blank" rel="nofollow noopener noreferrer">00:18:10</A> We see that after creating the project, he transferred it via a git repo to his local environment, using VS Code as the IDE, and adding a few scripts to the project's <CODE>package.json</CODE>. Running <CODE>npm run watch</CODE> spins up a local server with endpoints representing the functions. Lovely!<BR />
<BR />
<A href="https://www.youtube.com/watch?v=Om8AvzbabR8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h20m00s" target="_blank" rel="nofollow noopener noreferrer">00:20:00</A> Gregor shows us the content of his <CODE>githubwebhook.js</CODE> code, and we take a short digression on coding and putting things together. There's no shame in what your code looks like, and if it works and is maintainable, so much the better! We notice that Gregor is using the built-in <CODE>http</CODE> module to make the HTTP requests - this is because he didn't want to rely upon any further external packages here.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=Om8AvzbabR8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h22m30s" target="_blank" rel="nofollow noopener noreferrer">00:22:30</A> There's another component to this Day 3 puzzle solution, which is a backend, which Gregor has put together using of course CAP. He has a really simple data model which looks like this:<BR />
<PRE class="cds"><CODE>namespace media;<BR />
<BR />
entity Pictures {<BR />
  key ID : String(64);<BR />
  @Core.MediaType: 'image/png'<BR />
  content : LargeBinary;<BR />
}</CODE></PRE><BR />
along with an even simpler service definition:<BR />
<PRE class="cds"><CODE>using media as db from '../db/data-model';<BR />
<BR />
service MediaService {<BR />
  entity Pictures as projection on db.Pictures;<BR />
}</CODE></PRE><BR />
<A href="https://www.youtube.com/watch?v=Om8AvzbabR8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h24m40s" target="_blank" rel="nofollow noopener noreferrer">00:24:40</A> Looking briefly at the <A href="https://marketplace.visualstudio.com/items?itemName=humao.rest-client" target="_blank" rel="nofollow noopener noreferrer">REST Client</A> extension for VS Code which allows you to write HTTP client request definitions really simply. Recommended!<BR />
<BR />
<A href="https://www.youtube.com/watch?v=Om8AvzbabR8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h27m00s" target="_blank" rel="nofollow noopener noreferrer">00:27:00</A> After inserting a picture, Gregor demonstrates the deletion facility. He also shows the test he set up to simulate what is sent from GitHub in the webhook call - this was fairly straightforward to set up as GitHub documents that very nicely.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=Om8AvzbabR8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h29m25s" target="_blank" rel="nofollow noopener noreferrer">00:29:25</A> Making the 'real' test - taking a screenshot, committing it into the git repo and pushing the change to GitHub, whereupon the webhook call is triggered. And we see both from the GitHub webhook status page, and from requesting a list of images from the CAP-powered backend, that everything was successful. Well done Gregor, and thank you!<BR />
<BR />
<A href="https://www.youtube.com/watch?v=Om8AvzbabR8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h33m35s" target="_blank" rel="nofollow noopener noreferrer">00:33:35</A> Bringing in Hendrik now, who is happily free of audio issues too by now. He's been solving Advent of Code puzzles, in a test driven development (TDD) approach, in ABAP, on a privately installed virtual machine running a developer edition ABAP stack on his laptop.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=Om8AvzbabR8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h35m45s" target="_blank" rel="nofollow noopener noreferrer">00:35:45</A> He fires up Eclipse, and we see the (by now) familiar sight of the ABAP Development Tools (ADT) in action there. He's solved the puzzles for Days 1 through 4. He points out, rightly, that with the innovations that have been arriving since 7.4, the ABAP language is great and far from 'dead'!<BR />
<BR />
<A href="https://www.youtube.com/watch?v=Om8AvzbabR8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h36m40s" target="_blank" rel="nofollow noopener noreferrer">00:36:40</A> Hendrik starts by showing the Day 1 puzzle, which involves some calculations of fuel. He also shows how the second part of the day's puzzle appears once a correct answer for the first part has been submitted.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=Om8AvzbabR8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h38m00s" target="_blank" rel="nofollow noopener noreferrer">00:38:00</A> He shows us the ABAP code for calculating the fuel in all its glory. It's a wonder to see, and rather beautiful in its own way. Here's what the implementation section looks like:<BR />
<PRE class="abap"><CODE>CLASS zfuel IMPLEMENTATION.<BR />
<BR />
  METHOD calc.<BR />
    DATA(x) = CONV i( floor( CONV float( mass / 3 ) ) ) - 2.<BR />
    fuel = COND #( WHEN x &lt; 0 THEN 0 ELSE x + calc( x ) ).<BR />
  ENDMETHOD.<BR />
<BR />
  METHOD calc_total_fuel.<BR />
    total_fuel = REDUCE #( INIT x = 0 FOR module in modules<BR />
                           NEXT x = x + calc( module ) ).<BR />
  ENDMETHOD.<BR />
<BR />
ENDCLASS.</CODE></PRE><BR />
I have typed this in here so we can all stare at it for a few minutes. Go over to the video to watch Hendrik's explanation, but before you do, notice here that you're looking at recursion (in the <CODE>calc</CODE> method) and also a <CODE>reduce</CODE> call (even though it looks a little unusual, to say the least!). Wonderful.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=Om8AvzbabR8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h40m30s" target="_blank" rel="nofollow noopener noreferrer">00:40:30</A> Hendrik takes us briefly through his local test class too, containing tests taken from the examples in the puzzle.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=Om8AvzbabR8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h41m00s" target="_blank" rel="nofollow noopener noreferrer">00:41:00</A> To get the solution output, Hendrik has created a small program that uses <CODE>CL_GUI_FRONTEND_SERVICES</CODE> to facilitate the upload of the input data file, and to call the solution functions in the context of a call to the static <CODE>DISPLAY</CODE> method of <CODE>CL_DEMO_OUTPUT</CODE>, which allows him to see the output directly in Eclipse.<BR />
<BR />
Here's the line, so we can stare at that, in all its glory, too:<BR />
<PRE class="abap"><CODE>cl_demo_output=&gt;display( |Total fuel: { NEW zfuel( )-&gt;calc_total_fuel(<BR />
  VALUE #( FOR module IN modules ( CONV #( module ) ) ) )  }| ).</CODE></PRE><BR />
And Hendrik even wrote the tests first, a proper TDD approach. Good work Hendrik!<BR />
<BR />
<A href="https://www.youtube.com/watch?v=Om8AvzbabR8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h43m25s" target="_blank" rel="nofollow noopener noreferrer">00:43:25</A> We move over to Day 3 and talk about the challenges presented by that day's puzzle. In the chat, <SPAN class="mention-scrubbed">helmut.tammen2</SPAN> notes that this puzzle caused difficulties for him in the solution - he has been using <A href="https://github.com/lodash/lodash/wiki/FP-Guide" target="_blank" rel="nofollow noopener noreferrer">Lodash FP</A> and it turned out that the built-in <CODE>intersection</CODE> function was basically too slow. The odd thing is that the same thing happened to me, while using <A href="https://ramdajs.com" target="_blank" rel="nofollow noopener noreferrer">Ramda</A>, a similar FP library for JavaScript. Furthermore, my son Joseph had the same issue. We all ended up writing our own implementations of <CODE>intersection</CODE>. How's that for interesting?<BR />
<BR />
In case you're wondering, here's what <A href="https://github.com/qmacro/adventofcode2019/blob/master/day/lib/utils.js#L4-L11" target="_blank" rel="nofollow noopener noreferrer">my implementation</A> of a faster <CODE>intersection</CODE> looks like:<BR />
<DIV><BR />
<PRE class="sourceCode javascript"><CODE class="sourceCode javascript"><SPAN class="kw">const</SPAN> fasterIntersection <SPAN class="op">=</SPAN> (list1<SPAN class="op">,</SPAN> list2) <SPAN class="op">=&gt;</SPAN> <SPAN class="op">{</SPAN><BR />
  <SPAN class="kw">const</SPAN> serialise <SPAN class="op">=</SPAN> <SPAN class="va">JSON</SPAN>.<SPAN class="at">stringify</SPAN><BR />
  <SPAN class="kw">const</SPAN> deserialise <SPAN class="op">=</SPAN> <SPAN class="va">JSON</SPAN>.<SPAN class="at">parse</SPAN><BR />
  <SPAN class="kw">const</SPAN> [shorter<SPAN class="op">,</SPAN> longer] <SPAN class="op">=</SPAN> <SPAN class="at">lift</SPAN>(<SPAN class="at">map</SPAN>(serialise))(list1 <SPAN class="op">&lt;</SPAN> list2 <SPAN class="op">?</SPAN> [list1<SPAN class="op">,</SPAN> list2] : [list2<SPAN class="op">,</SPAN> list1])<BR />
  <SPAN class="cf">return</SPAN> <SPAN class="at">map</SPAN>(deserialise)(<SPAN class="at">reduce</SPAN>((a<SPAN class="op">,</SPAN> x) <SPAN class="op">=&gt;</SPAN> <SPAN class="at">concat</SPAN>(a<SPAN class="op">,</SPAN> <SPAN class="at">gte</SPAN>(<SPAN class="at">indexOf</SPAN>(x<SPAN class="op">,</SPAN> longer)<SPAN class="op">,</SPAN> <SPAN class="dv">0</SPAN>) <SPAN class="op">?</SPAN> [x] : [])<SPAN class="op">,</SPAN> []<SPAN class="op">,</SPAN> shorter))<BR />
<SPAN class="op">}</SPAN></CODE></PRE><BR />
</DIV><BR />
<A href="https://www.youtube.com/watch?v=Om8AvzbabR8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h46m40s" target="_blank" rel="nofollow noopener noreferrer">00:46:40</A> After a comment in the chat, we go back to examine the <CODE>COND</CODE> conditional operator, which reminds me of the ternary operator in other languages. Hendrik explains a little bit more about this expression, in particular the type inference from <CODE>fuel</CODE> and what it must construct from the expression evaluation. These are referred to as "constructor expressions".<BR />
<BR />
<A href="https://www.youtube.com/watch?v=Om8AvzbabR8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h50m00s" target="_blank" rel="nofollow noopener noreferrer">00:50:00</A> We take a brief philosophical view of how the <CODE>reduce</CODE> concept has been realised in ABAP, which is different from most of the implementations one sees in the wild in other languages which are more closely aligned with functional approaches.<BR />
<BR />
Note that Hendrik has shared his ABAP solutions to these Advent of Code puzzles in a GitHub repo: <A class="uri" href="https://github.com/hendrik77/Advent_of_Code_2019" target="_blank" rel="nofollow noopener noreferrer">https://github.com/hendrik77/Advent_of_Code_2019</A>, thanks to <A href="https://docs.abapgit.org" target="_blank" rel="nofollow noopener noreferrer">abapGit</A>, which in turn is thanks to <SPAN class="mention-scrubbed">lars.hvam</SPAN> who is live with us in this live stream episode too - excellent (and thanks Lars)! Hendrik gives a further shout out to <SPAN class="mention-scrubbed">enno.wulff</SPAN> who is also sharing his ABAP based solutions to Advent of Code here: <A class="uri" href="https://github.com/tricktresor/AdventOfCode2019" target="_blank" rel="nofollow noopener noreferrer">https://github.com/tricktresor/AdventOfCode2019</A>, and to <SPAN class="mention-scrubbed">nabheetscn</SPAN> who wrote a blog post on the subject: <A href="https://blogs.sap.com/2019/12/02/advent-of-code-lets-do-it-using-abap/" target="_blank" rel="noopener noreferrer">Advent of code - Let's do it using ABAP</A>.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=Om8AvzbabR8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h56m10s" target="_blank" rel="nofollow noopener noreferrer">00:56:10</A> Just before we finish this episode, Hendrik points us to some regular expressions he's used to implement part of the solution to Day 4. This reminds me to mention an excellent book from which I learned a lot about regular expressions - Jeffrey Friedl's <A href="http://regex.info/book.html" target="_blank" rel="nofollow noopener noreferrer">Mastering Regular Expressions</A> - definitely recommended!<BR />
<BR />
And we finish on a quote, <A href="https://en.wikiquote.org/wiki/Jamie_Zawinski" target="_blank" rel="nofollow noopener noreferrer">from Jamie Zawinski</A>: <EM>Some people, when confronted with a problem, think "I know, I'll use regular expressions." Now they have two problems.</EM>.<BR />
<BR />
Until next time, happy hacking!
