2019-03-08-annotated-links-episode-5-of-hands-on-sap-dev-with-qmacro
Annotated links: Episode 5 of Hands-on SAP dev with qmacro
technology-blog-sap
2019-03-08
https://community.sap.com/t5/technology-blogs-by-sap/annotated-links-episode-5-of-hands-on-sap-dev-with-qmacro/ba-p/13413217
<EM>This is a searchable description of the content of a live stream recording, specifically <STRONG>"Episode 5 - Continuation of the CAPM Node.js bookshop tutorial"</STRONG> in the "<A href="https://bit.ly/handsonsapdev" target="_blank" rel="nofollow noopener noreferrer">Hands-on SAP dev with qmacro</A>" series. There are links directly to specific highlights in the video recording. For links to annotations of other episodes, please see the "<A href="https://bit.ly/handsonsapdev#replays" target="_blank" rel="nofollow noopener noreferrer">Catch the replays</A>" section of the series blog post.</EM><BR />
<BR />
This episode, titled "<A href="https://bit.ly/handsonsapdev#ep5" target="_blank" rel="nofollow noopener noreferrer">Continuation of the CAPM Node.js bookshop tutorial</A>", was streamed live on Wed 13 Feb 2019 and is approximately one hour in length. The stream recording is <A href="https://www.youtube.com/watch?v=bwaRcTD5zLs&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0" target="_blank" rel="nofollow noopener noreferrer">available on YouTube</A>.<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2019/03/Screen-Shot-2019-03-08-at-16.42.01.png" /><BR />
<BR />
Below is a brief synopsis, and links to specific highlights – use these links to jump directly to particular places of interest in the recording, based on ‘hh:mm:ss’ style timestamps.<BR />
<H2 id="brief-synopsis" id="toc-hId-929753924">Brief synopsis</H2><BR />
We continue working our way through the tutorial “<A href="https://developers.sap.com/tutorials/cp-apm-nodejs-create-service.html" target="_blank" rel="noopener noreferrer">Create a Business Service with Node.js using Visual Studio Code</A>” on the <A href="https://developers.sap.com/" target="_blank" rel="noopener noreferrer">SAP Developer Centre</A>.<BR />
<H2 id="links-to-specific-highlights" id="toc-hId-733240419">Links to specific highlights</H2><BR />
<STRONG><A href="https://www.youtube.com/watch?v=bwaRcTD5zLs&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h04m02s" target="_blank" rel="nofollow noopener noreferrer">00:04:02</A>:</STRONG> I'm using the <A href="https://usemodify.com/fonts/3270/" target="_blank" rel="nofollow noopener noreferrer">3270 font</A> by Ricardo Bánffy in my terminal.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=bwaRcTD5zLs&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h05m22s" target="_blank" rel="nofollow noopener noreferrer">00:05:22</A>:</STRONG> Noted what happened since last time we looked at the tutorial, which was <A href="https://www.twitch.tv/videos/377043179" target="_blank" rel="nofollow noopener noreferrer">live stream episode 3</A> where we had Christian Georgi on as a guest, <A href="https://www.twitch.tv/videos/379997882" target="_blank" rel="nofollow noopener noreferrer">live stream episode 4</A> where we looked at the CDS REPL, and the fact that CDS has been updated.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=bwaRcTD5zLs&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h06m00s" target="_blank" rel="nofollow noopener noreferrer">00:06:00</A>:</STRONG> Looking briefly at the CDS update from 3.0.0 to 3.5.0.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=bwaRcTD5zLs&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h07m39s" target="_blank" rel="nofollow noopener noreferrer">00:07:39</A>:</STRONG> Looking at the environment shortcuts I have for my shell and for <A href="https://github.com/ranger/ranger" target="_blank" rel="nofollow noopener noreferrer">ranger</A>, via alias settings that are controlled by a scripts mechanism that I have in my <A href="https://github.com/qmacro/scripts" target="_blank" rel="nofollow noopener noreferrer">scripts repo</A>. I also note that my Vim configuration is also available in my <A href="https://github.com/qmacro/dotvim" target="_blank" rel="nofollow noopener noreferrer">dotvim repo</A>.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=bwaRcTD5zLs&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h09m35s" target="_blank" rel="nofollow noopener noreferrer">00:09:35</A>:</STRONG> Discussion of whether we can have a lowest-common-denominator style configuration that can work across different environments. It's easier with *nix style environments like Linux, macOS and the Linux VM on Chrome OS, and perhaps possible with the Windows subsystem for Linux too.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=bwaRcTD5zLs&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h11m00s" target="_blank" rel="nofollow noopener noreferrer">00:11:00</A>:</STRONG> Looking at the <SPAN class="citation"><a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a>/cds</SPAN> module with <A href="https://docs.npmjs.com/cli/ls.html" target="_blank" rel="nofollow noopener noreferrer">npm list</A> and <A href="https://docs.npmjs.com/cli/view.html" target="_blank" rel="nofollow noopener noreferrer">npm info</A>.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=bwaRcTD5zLs&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h12m00s" target="_blank" rel="nofollow noopener noreferrer">00:12:00</A>:</STRONG> Start a fresh project with <CODE>cds init my-bookshop</CODE>.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=bwaRcTD5zLs&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h12m32s" target="_blank" rel="nofollow noopener noreferrer">00:12:32</A>:</STRONG> A brief exploration of what we have in project generated by running <CODE>cds init</CODE>, including <CODE>cds.js</CODE> and <CODE>launch.json</CODE> in the <CODE>.vscode</CODE> directory, and the <CODE>common.cds</CODE> file inside the <SPAN class="citation"><a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a>/cds</SPAN> module within the <CODE>node_modules</CODE> directory.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=bwaRcTD5zLs&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h14m38s" target="_blank" rel="nofollow noopener noreferrer">00:14:38</A>:</STRONG> Noting that the <CODE>readme.md</CODE> contains a nice tutorial which is similar to the one we're following.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=bwaRcTD5zLs&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h15m05s" target="_blank" rel="nofollow noopener noreferrer">00:15:05</A>:</STRONG> An overview of the db/srv/app directory name convention in the programming model, and what they are for, and the subtle difference between data definitions in db, and services, for example with an OData flavour, in srv.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=bwaRcTD5zLs&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h16m35s" target="_blank" rel="nofollow noopener noreferrer">00:16:35</A>:</STRONG> Creating <CODE>srv/cat-service.cds</CODE>, which at this stage includes the definition of the entities that would normally go in the data model (in the <CODE>db</CODE> directory).<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=bwaRcTD5zLs&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h17m00s" target="_blank" rel="nofollow noopener noreferrer">00:17:00</A>:</STRONG> Creating the service implementation that provides mock data, noting the fact that the convention is that a js file with the same name as the cds file will provide implementation logic for that service.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=bwaRcTD5zLs&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h17m54s" target="_blank" rel="nofollow noopener noreferrer">00:17:54</A>:</STRONG> Chocolate treat fail.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=bwaRcTD5zLs&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h18m28s" target="_blank" rel="nofollow noopener noreferrer">00:18:28</A>:</STRONG> Considering the advantages of <A href="http://es6-features.org/" target="_blank" rel="nofollow noopener noreferrer">ES6</A> (the 2015 version of JavaScript, effectively) is that some of the constructs allow us to read and write code that flows much more easily when we see it. Case in point here is the <CODE>srv.on ('READ', 'Books', ()=&gt;[ ... ])</CODE> construction.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=bwaRcTD5zLs&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h19m45s" target="_blank" rel="nofollow noopener noreferrer">00:19:45</A>:</STRONG> Adding a <CODE>console.log</CODE> statement to the second function definition in <CODE>cat-service.js</CODE>, expanding the single-expression in the fat arrow definition to a block so we can add a second statement.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=bwaRcTD5zLs&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h20m14s" target="_blank" rel="nofollow noopener noreferrer">00:20:14</A>:</STRONG> A plugin for VS Code that integrates with Twitch to allow participants to cause lines of code to be highlighted: <A class="uri" href="https://github.com/clarkio/vscode-twitch-highlighter" target="_blank" rel="nofollow noopener noreferrer">https://github.com/clarkio/vscode-twitch-highlighter</A>.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=bwaRcTD5zLs&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h20m37s" target="_blank" rel="nofollow noopener noreferrer">00:20:37</A>:</STRONG> Idea of us using <A href="https://code.visualstudio.com/blogs/2017/11/15/live-share" target="_blank" rel="nofollow noopener noreferrer">Live Share</A> on a future episode to collaborate live in the stream on some code.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=bwaRcTD5zLs&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h21m05s" target="_blank" rel="nofollow noopener noreferrer">00:21:05</A>:</STRONG> Currently the service definition contains the entity definitions, which really belong in the data model, not the service. Note, however, that creating a high level service definition is a great way to bootstrap a project, because everyone is on the same page and then two parallel streams of activities can take place after the basic idea has been established - refining the data model and service(s) and building out the UI (based on the service metadata).<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=bwaRcTD5zLs&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h22m30s" target="_blank" rel="nofollow noopener noreferrer">00:22:30</A>:</STRONG> Starting up VS Code's integrated terminal with the shortcut Cmd-`. Also a small ramble about mechanical keyboards, I'm using a <A href="https://candykeys.com/product/vortex-race-3-ansi" target="_blank" rel="nofollow noopener noreferrer">Vortex Race 3</A> with Cherry MX Blue switches, and have an <A href="https://candykeys.com/product/anne-pro-2-gateron-black" target="_blank" rel="nofollow noopener noreferrer">Anne Pro 2</A> with Gateron Brown switches on order.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=bwaRcTD5zLs&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h23m01s" target="_blank" rel="nofollow noopener noreferrer">00:23:01</A>:</STRONG> Starting up the service with <CODE>cds run</CODE>, noting the small difference that we see in the log output from 3.5.0, compared to what we previously saw with 3.0.0, specifically the "serving static resources from ./app" line. We also note that another line of the log output points to a JS implementation for the CatalogService, in <CODE>cat-service.js</CODE>.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=bwaRcTD5zLs&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h24m26s" target="_blank" rel="nofollow noopener noreferrer">00:24:26</A>:</STRONG> Adding a breakpoint to the <CODE>srv.on ('READ', 'Authors', () =&gt; { ... })</CODE> section in <CODE>cat-service.js</CODE>, then a first attempt at running the service in debug mode. The attempt fails, and we look at a solution based on the information in <CODE>launch.json</CODE> and <CODE>cds.js</CODE> within the <CODE>.vscode</CODE> directory.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=bwaRcTD5zLs&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h25m51s" target="_blank" rel="nofollow noopener noreferrer">00:25:51</A>:</STRONG> Making debugging work by replacing the contents of <CODE>cds.js</CODE> with:<BR />
<PRE><CODE>const cds = require('@sap/cds')<BR />
cds.exec()</CODE></PRE><BR />
Debugging launches successfully after this change.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=bwaRcTD5zLs&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h27m08s" target="_blank" rel="nofollow noopener noreferrer">00:27:08</A>:</STRONG> Noting that the indicator on the browser tab is still spinning, followed by a random reminicence, remembering the fact that the indicator on a browser that showed that resources were still being retrieved on a page was called a "<A href="https://en.wikipedia.org/wiki/Throbber" target="_blank" rel="nofollow noopener noreferrer">throbber</A>", which I remember from the <A href="https://en.wikipedia.org/wiki/Cello_(web_browser)" target="_blank" rel="nofollow noopener noreferrer">Cello</A>, <A href="https://en.wikipedia.org/wiki/ViolaWWW" target="_blank" rel="nofollow noopener noreferrer">Viola</A> and <A href="https://en.wikipedia.org/wiki/Netscape_Navigator" target="_blank" rel="nofollow noopener noreferrer">Netscape Navigator</A> browsers of yesteryear.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=bwaRcTD5zLs&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h28m50s" target="_blank" rel="nofollow noopener noreferrer">00:28:50</A>:</STRONG> Starting to modify the service definition by moving the entity definitions out of <CODE>cat-service.cds</CODE> into <CODE>db/data-model.cds</CODE>.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=bwaRcTD5zLs&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h30m15s" target="_blank" rel="nofollow noopener noreferrer">00:30:15</A>:</STRONG> Noting a (new) bug in VS Code where a newly minted directory (<CODE>db/</CODE>), created implicitly when we add that directory name as a path to a new file, doesn't show up immediately in the Explorer.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=bwaRcTD5zLs&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h31m30s" target="_blank" rel="nofollow noopener noreferrer">00:31:30</A>:</STRONG> At this point we have the <CODE>srv/cat-service.cds</CODE> definitions as views, as a series of projections, on individual entity definitions in <CODE>db/data-model.cds</CODE>. These are known as API facades to the entities in the data model, controlling what is and isn't exposed, also restricting access via annotations.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=bwaRcTD5zLs&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h32m58s" target="_blank" rel="nofollow noopener noreferrer">00:32:58</A>:</STRONG> Calling up the Command Palette (Shift-Cmd-P) to use the Refresh facility, which will force a refresh of the Explorer display. Great, thanks Ronnie!<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=bwaRcTD5zLs&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h34m00s" target="_blank" rel="nofollow noopener noreferrer">00:34:00</A>:</STRONG> Looking briefly at the CDS annotations in the projections, specifically <CODE>@readonly</CODE> and <CODE>@insertonly</CODE> that restrict operation access.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=bwaRcTD5zLs&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h34m32s" target="_blank" rel="nofollow noopener noreferrer">00:34:32</A>:</STRONG> Now it's time to generate the SQL DDL to deploy to an actual persistence layer, in this case based on SQLite.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=bwaRcTD5zLs&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h35m12s" target="_blank" rel="nofollow noopener noreferrer">00:35:12</A>:</STRONG> We open up <CODE>package.json</CODE> to see what gets added when we install the <CODE>sqlite3</CODE> module as a development dependency (with the <CODE>-D</CODE> or <CODE>--save-dev</CODE> options).<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=bwaRcTD5zLs&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h37m22s" target="_blank" rel="nofollow noopener noreferrer">00:37:22</A>:</STRONG> Looking at the cds command options, and compiling the <CODE>db/data-model.cds</CODE> definitions. The default output (in the form of Core Schema Notation (CSN) is shown).<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=bwaRcTD5zLs&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h38m26s" target="_blank" rel="nofollow noopener noreferrer">00:38:26</A>:</STRONG> We also look at getting the output in SQL with the <CODE>--to sql</CODE> option (<CODE>-2</CODE> can be used as a shortcut for <CODE>--to</CODE>), plus look at the compiled output for the <CODE>srv/cat-service.cds</CODE> where we see that TABLE and VIEW creation statements have been generated, noting the names of the views as projections (<CODE>SELECT ... FROM</CODE>) on tables.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=bwaRcTD5zLs&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h40m20s" target="_blank" rel="nofollow noopener noreferrer">00:40:20</A>:</STRONG> Deploying the definitions to the persistence layer like this:<BR />
<PRE><CODE>cds deploy --to sqlite:db/my-bookshop.db</CODE></PRE><BR />
and noting a new stanza appearing in the <CODE>package.json</CODE> file that describes the database.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=bwaRcTD5zLs&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h41m19s" target="_blank" rel="nofollow noopener noreferrer">00:41:19</A>:</STRONG> Answering a question about the relationship between the <CODE>namespace my.bookshop</CODE> declaration and the underlying database, including looking at what happens to the generated DDL statements when we temporarily change the namespace definition to <CODE>my.banana</CODE>.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=bwaRcTD5zLs&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h43m14s" target="_blank" rel="nofollow noopener noreferrer">00:43:14</A>:</STRONG> At this stage we have our data model and service deployed to the persistence layer, so we have a look around with the <CODE>sqlite</CODE> command line client, using the <CODE>.dump</CODE> command to see the data definitions. We also tried to look at the database with the SQLite extension for VS Code but there was a strange issue with that for some unknown reason (it has been working very well for me until now).<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=bwaRcTD5zLs&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h47m09s" target="_blank" rel="nofollow noopener noreferrer">00:47:09</A>:</STRONG> Adding some initial data by supplying it in CSV files (in a <CODE>csv/</CODE> directory within <CODE>db/</CODE>) that follow a specific naming convention, which is based on the fully qualified table names - for example <CODE>my.bookshop-Authors.csv</CODE>.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=bwaRcTD5zLs&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h49m10s" target="_blank" rel="nofollow noopener noreferrer">00:49:10</A>:</STRONG> Deploying again, we see a new message "initializing from csv files at ./db/csv..." and when we inspect the statements with <CODE>.dump</CODE> again in <CODE>sqlite3</CODE> we see <CODE>INSERT</CODE> statements for the data.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=bwaRcTD5zLs&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h49m55s" target="_blank" rel="nofollow noopener noreferrer">00:49:55</A>:</STRONG> We can now remove the static data implementation in <CODE>srv/cat-service.js</CODE> (we didn't remove the file itself, which means that we still get an "impl: cat-service.js" message when we execute <CODE>cds run</CODE> but of course that's only because the file is still there (but empty).<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=bwaRcTD5zLs&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h50m48s" target="_blank" rel="nofollow noopener noreferrer">00:50:48</A>:</STRONG> We now check to see if there are any books available via the service on localhost, and indeed there are - the data is coming from the database.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=bwaRcTD5zLs&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h51m28s" target="_blank" rel="nofollow noopener noreferrer">00:51:28</A>:</STRONG> Firing up Postman to load in a collection of test requests - we do this directly from the collection URL rather than downloading the file and uploading it into Postman (see "<A href="https://blogs.sap.com/2018/04/16/monday-morning-thoughts-upload-download-in-a-cloud-native-world/" target="_blank" rel="noopener noreferrer">Monday morning thoughts: upload / download in a cloud native world</A>" for more on this).<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=bwaRcTD5zLs&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h52m10s" target="_blank" rel="nofollow noopener noreferrer">00:52:10</A>:</STRONG> Using some of the OData requests in the collection to test the service.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=bwaRcTD5zLs&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h53m00s" target="_blank" rel="nofollow noopener noreferrer">00:53:00</A>:</STRONG> Adding some custom logic to the (currently empty) <CODE>srv/cat-service.js</CODE> implementation file. It also adds a discount when books are retrieved, using a special version of the callback with the <CODE>each</CODE> parameter for the function definition.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=bwaRcTD5zLs&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h55m42s" target="_blank" rel="nofollow noopener noreferrer">00:55:42</A>:</STRONG> Restarting the service in debug mode and testing it via Postman, checking first the stock for one of the books, then placing an order for that book, inspecting thereafter the stock level.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=bwaRcTD5zLs&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h56m50s" target="_blank" rel="nofollow noopener noreferrer">00:56:50</A>:</STRONG> Looking briefly at the UUID type (in <CODE>node_modules/@sap/cds/common.cds</CODE>), which will be used in the order operations we're about to perform.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=bwaRcTD5zLs&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h58m51s" target="_blank" rel="nofollow noopener noreferrer">00:58:51</A>:</STRONG> Debugging the implementation for the <CODE>srv.before ('CREATE', 'Orders', async (req) =&gt; { ... })</CODE> and inspecting the incoming request that was received.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=bwaRcTD5zLs&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h59m48s" target="_blank" rel="nofollow noopener noreferrer">00:59:48</A>:</STRONG> Noting that the mechanism to reduce stock when books are ordered has the success of the order (and reduction) controlled with a <CODE>.where</CODE> clause in the fluid API of CAPM's CDS Query Language (CQL).
