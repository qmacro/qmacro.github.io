2020-02-06-annotated-links-episode-51-of-hands-on-sap-dev-with-qmacro
Annotated links: Episode 51 of Hands-on SAP dev with qmacro
technology-blog-sap
2020-02-06
https://community.sap.com/t5/technology-blogs-by-sap/annotated-links-episode-51-of-hands-on-sap-dev-with-qmacro/ba-p/13449431
<EM>This is a searchable description of the content of a live stream recording, specifically <STRONG>"Ep.51 - More fun with Business Rules API and OAuth"</STRONG> in the "<A href="https://bit.ly/handsonsapdev" target="_blank" rel="nofollow noopener noreferrer">Hands-on SAP dev with qmacro</A>" series. There are links directly to specific highlights in the video recording. For links to annotations of other episodes, please see the "<A href="https://bit.ly/handsonsapdev#replays" target="_blank" rel="nofollow noopener noreferrer">Catch the replays</A>" section of the series blog post.</EM><BR />
<BR />
This episode was streamed live on Fri 31 Jan 2020 and is approximately 60 minutes in length. The stream recording is <A href="https://www.youtube.com/watch?v=PaZ_2n9XclY0" target="_blank" rel="nofollow noopener noreferrer">available on YouTube</A>.<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/02/Screenshot-2020-02-06-at-11.53.02.png" /><BR />
<BR />
Brief synopsis: In the previous episode we got as far as staring at the OAuth Bearer token that we could use to authenticate calls to the API. In this episode we see how far we can get in using one of those tokens to do so. Perhaps even a bit of JavaScript with Axios might be nice to look at too - promises promises! (geddit)<BR />
<BR />
<A href="https://www.youtube.com/watch?v=PaZ_2n9XclY0&amp;t=00h01m55s" target="_blank" rel="nofollow noopener noreferrer">00:01:55</A> Stream starts.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=PaZ_2n9XclY0&amp;t=00h03m00s" target="_blank" rel="nofollow noopener noreferrer">00:03:00</A> Talking briefly about "behind the scenes" of the HandsOnSAPDev "studio" (which I changed around a little bit recently so the video is showing me in a different angle).<BR />
<BR />
We see my setup on the main desk, which includes the Blue Yeti microphone and my single 4K monitor which, when streaming, I switch to run at twice the resolution of 720p (1280x720), i.e. 2560x1440, so that I can use my version of the <A href="https://www.youtube.com/watch?v=KjeXVK7wVO4" target="_blank" rel="nofollow noopener noreferrer">Tiling Window Manager for Chrome OS</A> extension (which I've modified to give me the ability to adjust the gaps between windows) to run four 720p sized windows, one of which (the top left one) I capture and stream. This minimises scaling and the untidy visual artifacts that go with that sort of thing. That also means I've got three more windows to manage the streaming and other stuff.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=PaZ_2n9XclY0&amp;t=00h05m40s" target="_blank" rel="nofollow noopener noreferrer">00:05:40</A> A small warning that my typing may be louder than usual as I've switched back from my Anne Pro 2 (with Gateron Brown switches) to my Vortex Race 3 which has Cherry MX Blue switches - tactile AND clicky, nice!<BR />
<BR />
<A href="https://www.youtube.com/watch?v=PaZ_2n9XclY0&amp;t=00h06m00s" target="_blank" rel="nofollow noopener noreferrer">00:06:00</A> Reminding folks about the very first conference on the SAP Cloud Application Programming Model, <A href="https://sapmentors.github.io/reCAP/" target="_blank" rel="nofollow noopener noreferrer">reCAP</A>, which is taking place in Heidelberg, Germany, on Fri 15 May 2020. I'm looking forward to this very much and hope to be able to make it. The call for papers is open, so head over and submit a session proposal!<BR />
<BR />
<A href="https://www.youtube.com/watch?v=PaZ_2n9XclY0&amp;t=00h07m50s" target="_blank" rel="nofollow noopener noreferrer">00:07:50</A> Talking about the <A href="https://anchor.fm/sap-community-podcast/episodes/Episode-34-Thomas-Jungs-new-role-as-Head-of-Developer-Advocacy-at-SAP-eaan0u" target="_blank" rel="nofollow noopener noreferrer">recent Coffee Corner Radio podcast episode</A> which has an interview with the one and only <SPAN class="mention-scrubbed">thomas.jung</SPAN> our new head of Developer Advocacy at SAP.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=PaZ_2n9XclY0&amp;t=00h08m55s" target="_blank" rel="nofollow noopener noreferrer">00:08:55</A> Looking at what we're going to cover in the main part of this episode, which is to continue with the SAP Business Rules API. We hadn't got as far as calling the runtime API last time, so this time that's what we'll aim to do, starting with some Bash script goodness in the terminal to get us warmed up.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=PaZ_2n9XclY0&amp;t=00h11m30s" target="_blank" rel="nofollow noopener noreferrer">00:11:30</A> Reminding ourselves of the different APIs that we have for <A href="https://api.sap.com/package/SAPCPBusinessRulesAPIs?section=Artifacts" target="_blank" rel="noopener noreferrer">the SAP Business Rules on the API Hub</A>, which can be divided up into APIs for Neo and Cloud Foundry, for designtime ('authoring') and runtime ('execution'), and for different versions.<BR />
<BR />
Last time, we used the designtime API endpoint <CODE>/v1/projects</CODE> to get a brief summary of our Business Rules project (airline discounts).<BR />
<BR />
<A href="https://www.youtube.com/watch?v=PaZ_2n9XclY0&amp;t=00h13m00s" target="_blank" rel="nofollow noopener noreferrer">00:13:00</A> To get back into the swing of things, we switch to a terminal running <CODE>tmux</CODE> and open a couple of panes to run simple scripts that will monitor the apps and services in my Cloud Foundry space. I wrote about these scripts, and related subjects, in a couple of recent blog posts: <A href="https://blogs.sap.com/2020/01/28/scripting-cloud-foundry-activities-in-trial/" target="_blank" rel="noopener noreferrer">Scripting Cloud Foundry activities in trial</A> and <A href="https://blogs.sap.com/2020/01/29/mini-adventures-with-mtas-and-the-cloud-foundry-cli/" target="_blank" rel="noopener noreferrer">Mini adventures with MTAs and the Cloud Foundry CLI</A>.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=PaZ_2n9XclY0&amp;t=00h16m20s" target="_blank" rel="nofollow noopener noreferrer">00:16:20</A> Having a look at the <CODE>gettoken.bash</CODE> script, and where we get some of the information that it requires. Here's the entirety of the <A href="https://github.com/qmacro/handsonsapdev/blob/master/episodes/ep51/gettoken.bash" target="_blank" rel="nofollow noopener noreferrer">script</A>:<BR />
<DIV><BR />
<PRE class="sourceCode bash"><CODE class="sourceCode bash"><SPAN class="co">#!/bin/bash</SPAN><BR />
<BR />
<SPAN class="co"># Run this script in the context of an eval $(...) to get a fresh</SPAN><BR />
<SPAN class="co"># access token set in TOKEN</SPAN><BR />
<BR />
<SPAN class="ex">curl</SPAN> \<BR />
  --silent \<BR />
  --netrc \<BR />
  --header <SPAN class="st">"Content-Type: application/x-www-form-urlencoded"</SPAN> \<BR />
  --data <SPAN class="st">"grant_type=password&amp;response_type=token&amp;username=</SPAN><SPAN class="va">$USERNAME</SPAN><SPAN class="st">&amp;password=</SPAN><SPAN class="va">$(</SPAN><SPAN class="ex">pass</SPAN> SAP/trial<SPAN class="va">)</SPAN><SPAN class="st">"</SPAN> \<BR />
  <A href="https://qmacrosubdomain.authentication.eu10.hana.ondemand.com/oauth/token" target="test_blank" rel="nofollow noopener noreferrer">https://qmacrosubdomain.authentication.eu10.hana.ondemand.com/oauth/token</A> \<BR />
<SPAN class="kw">|</SPAN> <SPAN class="ex">jq</SPAN> -r <SPAN class="st">'"export TOKEN=\(.access_token)"'</SPAN></CODE></PRE><BR />
</DIV><BR />
The purpose of this script is to retrieve a fresh access token and present it in a way that can be <CODE>eval</CODE>'d into the environment. It does this by calling the authentication endpoint (<CODE>qmacrosubdomain.authentication.eu10.hana.ondemand.com/oauth/token</CODE> in this case) and passing the appropriate credentials and request information.<BR />
<BR />
Note that the authentication for this endpoint is Basic Authentication with the username and password provided by the 'netrc' facility which we've seen on recent previous live stream episodes - basically, credentials are managed on a per-host basis in a private <CODE>.netrc</CODE> file and <CODE>curl</CODE> will use those when told to with the <CODE>--netrc</CODE> option.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=PaZ_2n9XclY0&amp;t=00h17m10s" target="_blank" rel="nofollow noopener noreferrer">00:17:10</A> On the subject of token requests in OAuth flows, there's a really nice post by <SPAN class="mention-scrubbed">carlos.roggan</SPAN> - <A href="https://blogs.sap.com/2019/05/06/sap-cloud-platform-backend-service-tutorial-14-about-oauth-mechanism/" target="_blank" rel="noopener noreferrer">SAP Cloud Platform Backend service: Tutorial [14]: about OAuth mechanism</A> - which explains lots of things and is, along with its companion blog posts, well worth reading, not least to understand more about the different OAuth based authentication mechanisms, or 'grant types'.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=PaZ_2n9XclY0&amp;t=00h17m50s" target="_blank" rel="nofollow noopener noreferrer">00:17:50</A> The grant type we're going to use is the 'resource owner password credentials grant type', and is also described in the documentation for the NPM module <A href="https://www.npmjs.com/package/client-oauth2" target="_blank" rel="nofollow noopener noreferrer">client-oauth2</A> that we're about to use in our JavaScript code.<BR />
<BR />
This grant type, or flow, is when the client is trusted by the user, because the user gives the client their credentials to send to the OAuth endpoint. This is different to other flows where the client is not trusted, and in these cases the user is temporarily redirected to be asked for their credentials, and a short-lived token is returned to the client with which an access token can then be requested.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=PaZ_2n9XclY0&amp;t=00h18m55s" target="_blank" rel="nofollow noopener noreferrer">00:18:55</A> For managing my credentials securely in my terminal, I'm using the classic <A href="https://www.passwordstore.org/" target="_blank" rel="nofollow noopener noreferrer"><CODE>pass</CODE> password manager</A> which you can see in action in the <CODE>$(pass SAP/trial)</CODE> part of the script.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=PaZ_2n9XclY0&amp;t=00h20m25s" target="_blank" rel="nofollow noopener noreferrer">00:20:25</A> Having retrieved a token, we look briefly at the other data that is returned with it, including the value of the <CODE>expires_in</CODE> property, which is 43199. If you weren't on the live stream at the time, can you make a guess as to why that is a significant number? Put your thoughts in the comments to this post.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=PaZ_2n9XclY0&amp;t=00h21m00s" target="_blank" rel="nofollow noopener noreferrer">00:21:00</A> Once we have a token in the <CODE>TOKEN</CODE> environment variable, we can make the actual API call to <CODE>/v1/projects</CODE> (this is still warming ourselves up from last week) to retrieve information from the designtime API, about the projects we have. This is in the <A href="https://github.com/qmacro/handsonsapdev/blob/master/episodes/ep51/getprojectinfo.bash" target="_blank" rel="nofollow noopener noreferrer"><CODE>getprojectinfo.bash</CODE> script</A> which looks like this:<BR />
<DIV><BR />
<PRE class="sourceCode bash"><CODE class="sourceCode bash"><SPAN class="co">#!/bin/bash</SPAN><BR />
<BR />
<SPAN class="ex">curl</SPAN> \<BR />
  --silent \<BR />
  --header <SPAN class="st">"Authorization: Bearer </SPAN><SPAN class="va">${TOKEN}</SPAN><SPAN class="st">"</SPAN> \<BR />
  <A href="https://bpmrulerepository.cfapps.eu10.hana.ondemand.com/rules-service/rest/v1/projects" target="test_blank" rel="nofollow noopener noreferrer">https://bpmrulerepository.cfapps.eu10.hana.ondemand.com/rules-service/rest/v1/projects</A></CODE></PRE><BR />
</DIV><BR />
That all works fine. So far so good.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=PaZ_2n9XclY0&amp;t=00h23m00s" target="_blank" rel="nofollow noopener noreferrer">00:23:00</A> Thinking now about calls not to the designtime API but to the runtime API, we pause briefly to think about the version management that has been introduced to the Business Rules service, which is explained by <SPAN class="mention-scrubbed">archana.shukla</SPAN> in the blog post <A href="https://blogs.sap.com/2019/08/03/version-management-in-sap-cloud-platform-business-rules/" target="_blank" rel="noopener noreferrer">Version Management in SAP Cloud Platform Business Rules</A>, and means that our new airline discounts rule project that we're currently authoring is accessible to call as a 'working set' rule, for which we need the <CODE>/v2/workingset-rule-services</CODE> endpoint.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=PaZ_2n9XclY0&amp;t=00h23m50s" target="_blank" rel="nofollow noopener noreferrer">00:23:50</A> We try out this call in the SAP API Hub using my 'EU10' environment that I've already got set up, using a payload that I'd stored in <A href="https://github.com/qmacro/handsonsapdev/blob/master/episodes/ep51/payload.json" target="_blank" rel="nofollow noopener noreferrer"><CODE>payload.json</CODE></A>, that looks like this:<BR />
<DIV><BR />
<PRE class="sourceCode json"><CODE class="sourceCode json"><SPAN class="fu">{</SPAN><BR />
  <SPAN class="dt">"RuleServiceId"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="st">"8ebbf08e24f84790a99f1e8f32be59a9"</SPAN><SPAN class="fu">,</SPAN><BR />
  <SPAN class="dt">"Vocabulary"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="ot">[</SPAN><BR />
    <SPAN class="fu">{</SPAN><BR />
      <SPAN class="dt">"flightinfo"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="fu">{</SPAN><BR />
        <SPAN class="dt">"carrier"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="st">"LH"</SPAN><BR />
      <SPAN class="fu">}</SPAN><BR />
    <SPAN class="fu">}</SPAN><BR />
  <SPAN class="ot">]</SPAN><BR />
<SPAN class="fu">}</SPAN></CODE></PRE><BR />
</DIV><BR />
I think that's a nice way of calling rules in runtime, nicer than the previous version (v1).<BR />
<BR />
By the way, the value for the <CODE>RuleServiceId</CODE> property is available in the URL when we're looking at the business rule service within the project in the Business Rules Editor.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=PaZ_2n9XclY0&amp;t=00h26m55s" target="_blank" rel="nofollow noopener noreferrer">00:26:55</A> We copy the <CODE>getprojectinfo.bash</CODE> script to a new one, <A href="https://github.com/qmacro/handsonsapdev/blob/master/episodes/ep51/callrule.bash" target="_blank" rel="nofollow noopener noreferrer"><CODE>callrule.bash</CODE></A> which we modify to look like this:<BR />
<DIV><BR />
<PRE class="sourceCode bash"><CODE class="sourceCode bash"><SPAN class="co">#!/bin/bash</SPAN><BR />
<BR />
<SPAN class="ex">curl</SPAN> \<BR />
  --silent \<BR />
  --header <SPAN class="st">"Authorization: Bearer </SPAN><SPAN class="va">${TOKEN}</SPAN><SPAN class="st">"</SPAN> \<BR />
  -d@payload.json \<BR />
  --header <SPAN class="st">"Content-Type: application/json"</SPAN> \<BR />
  <A href="https://bpmruleruntime.cfapps.eu10.hana.ondemand.com/rules-service/rest/v2/workingset-rule-services" target="test_blank" rel="nofollow noopener noreferrer">https://bpmruleruntime.cfapps.eu10.hana.ondemand.com/rules-service/rest/v2/workingset-rule-services</A></CODE></PRE><BR />
</DIV><BR />
As you can see, we're calling the runtime API (<CODE>bpmruleruntime.cfapps.eu10.hana.ondemand.com</CODE> in my case) with the <CODE>/v2/workingset-rule-services</CODE> endpoint, passing the contents of <CODE>payload.json</CODE> using the <CODE>-d@</CODE> option to <CODE>curl</CODE>. Of course, we pass the token we already have as a bearer token in the <CODE>Authorization</CODE> header of the request.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=PaZ_2n9XclY0&amp;t=00h30m00s" target="_blank" rel="nofollow noopener noreferrer">00:30:00</A> Starting to move across to doing this now in JavaScript, and we initialise a new Node.js project <A href="https://github.com/qmacro/handsonsapdev/tree/master/episodes/ep51/callrule" target="_blank" rel="nofollow noopener noreferrer"><CODE>callrule</CODE></A> ... and while I do that <SPAN class="mention-scrubbed">christian.drumm</SPAN> gently challenges me on my continued use of the Bash shell, rather than, say, the Z shell.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=PaZ_2n9XclY0&amp;t=00h32m10s" target="_blank" rel="nofollow noopener noreferrer">00:32:10</A> At this stage we go back and take a closer look at the <A href="https://npmjs.com/package/client-oauth2" target="_blank" rel="nofollow noopener noreferrer">client-oauth2</A> that we glanced at earlier, as this is what we're going to use for the OAuth flow.<BR />
<BR />
We also look at the <A href="https://npmjs.com/package/request-promise" target="_blank" rel="nofollow noopener noreferrer">request-promise</A> package for making the actual HTTP requests, in a promise context (this package is essentially a wrapper around the request package). This is a deprecated package but serves our purpose for now.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=PaZ_2n9XclY0&amp;t=00h33m50s" target="_blank" rel="nofollow noopener noreferrer">00:33:50</A> First, we install the <A href="https://www.npmjs.com/package/nodemon" target="_blank" rel="nofollow noopener noreferrer">nodemon</A> package as a development dependency - everyone likes a bit of nodemon, right? We start running it in a new <CODE>tmux</CODE> pane and create the simplest thing that could possibly work to satisfy nodemon, in a sort of "nodemon driven development" style.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=PaZ_2n9XclY0&amp;t=00h55m30s" target="_blank" rel="nofollow noopener noreferrer">00:55:30</A> After lots of thinking and typing, we end up with something that looks like this in <A href="https://github.com/qmacro/handsonsapdev/blob/master/episodes/ep51/callrule/index.js" target="_blank" rel="nofollow noopener noreferrer"><CODE>index.js</CODE></A>:<BR />
<DIV><BR />
<PRE class="sourceCode javascript"><CODE class="sourceCode javascript"><SPAN class="kw">const</SPAN><BR />
  oauth2client <SPAN class="op">=</SPAN> <SPAN class="at">require</SPAN>(<SPAN class="st">'client-oauth2'</SPAN>)<SPAN class="op">,</SPAN><BR />
  request <SPAN class="op">=</SPAN> <SPAN class="at">require</SPAN>(<SPAN class="st">'request-promise'</SPAN>)<SPAN class="op">,</SPAN><BR />
<BR />
  client <SPAN class="op">=</SPAN> <SPAN class="kw">new</SPAN> <SPAN class="at">oauth2client</SPAN>(<SPAN class="op">{</SPAN><BR />
    <SPAN class="dt">clientId</SPAN><SPAN class="op">:</SPAN> <SPAN class="st">'sb-clone-b9c9-e0ad-4f1d-b0be-b38f2da71f95!b34464|bpmrulebroker!b2466'</SPAN><SPAN class="op">,</SPAN><BR />
    <SPAN class="dt">clientSecret</SPAN><SPAN class="op">:</SPAN> <SPAN class="st">'xs+ExbQ-eTZLBX857nQOGkbKj4='</SPAN><SPAN class="op">,</SPAN><BR />
    <SPAN class="dt">accessTokenUri</SPAN><SPAN class="op">:</SPAN> <SPAN class="st">'https://qmacrosubdomain.authentication.eu10.hana.ondemand.com/oauth/token'</SPAN><BR />
  <SPAN class="op">}</SPAN>)<BR />
<BR />
async <SPAN class="kw">function</SPAN> <SPAN class="at">main</SPAN>() <SPAN class="op">{</SPAN><BR />
  <SPAN class="kw">const</SPAN><BR />
    token <SPAN class="op">=</SPAN> await <SPAN class="va">client</SPAN>.<SPAN class="va">owner</SPAN>.<SPAN class="at">getToken</SPAN>(<SPAN class="va">process</SPAN>.<SPAN class="va">env</SPAN>.<SPAN class="at">USERNAME</SPAN><SPAN class="op">,</SPAN> <SPAN class="va">process</SPAN>.<SPAN class="va">env</SPAN>.<SPAN class="at">PASSWORD</SPAN>)<BR />
<BR />
  <SPAN class="va">console</SPAN>.<SPAN class="at">log</SPAN>(<SPAN class="va">token</SPAN>.<SPAN class="at">accessToken</SPAN>)<BR />
<BR />
  <SPAN class="kw">const</SPAN><BR />
    req <SPAN class="op">=</SPAN> <SPAN class="va">request</SPAN>.<SPAN class="at">defaults</SPAN>(<SPAN class="op">{</SPAN><BR />
      headers: { <SPAN class="dt">Authorization</SPAN><SPAN class="op">:</SPAN> <SPAN class="st">'Bearer '</SPAN> <SPAN class="op">+</SPAN> <SPAN class="va">token</SPAN>.<SPAN class="at">accessToken }</SPAN><SPAN class="op">,</SPAN><BR />
    <SPAN class="op">}</SPAN>)<BR />
<BR />
<BR />
  <SPAN class="kw">const</SPAN> result <SPAN class="op">=</SPAN> await <SPAN class="va">req</SPAN>.<SPAN class="at">post</SPAN>(<SPAN class="st">'https://bpmruleruntime.cfapps.eu10.hana.ondemand.com/rules-service/rest/v2/workingset-rule-services'</SPAN><SPAN class="op">,</SPAN> <SPAN class="op">{</SPAN><BR />
    <SPAN class="dt">json</SPAN><SPAN class="op">:</SPAN> <SPAN class="op">{</SPAN><BR />
      <SPAN class="dt">RuleServiceId</SPAN><SPAN class="op">:</SPAN> <SPAN class="st">"8ebbf08e24f84790a99f1e8f32be59a9"</SPAN><SPAN class="op">,</SPAN><BR />
      <SPAN class="dt">Vocabulary</SPAN><SPAN class="op">:</SPAN> [<BR />
        <SPAN class="op">{</SPAN><BR />
          <SPAN class="dt">flightinfo</SPAN><SPAN class="op">:</SPAN> <SPAN class="op">{</SPAN><BR />
            <SPAN class="dt">carrier</SPAN><SPAN class="op">:</SPAN> <SPAN class="st">"LH"</SPAN><BR />
          <SPAN class="op">}</SPAN><BR />
        <SPAN class="op">}</SPAN><BR />
      ]<BR />
    <SPAN class="op">}</SPAN><BR />
  <SPAN class="op">}</SPAN>)<BR />
<BR />
  <SPAN class="va">console</SPAN>.<SPAN class="at">log</SPAN>(result)<BR />
<BR />
<BR />
<SPAN class="op">}</SPAN><BR />
<BR />
<SPAN class="at">main</SPAN>()</CODE></PRE><BR />
</DIV><BR />
You can get a good idea of what each part of this does by watching this section of the recording, but here's a brief rundown too:<BR />
<UL><BR />
 	<LI>We use a set of <CODE>const</CODE> declarations to bring in the two modules we want to use (client-oauth2 and request-promise), and to initialise a new client-oauth2 object that has the client ID and secret set, along with the authorisation endpoint, ready for calls to be made (this set of ID and secret is now no longer in existence, in case you're wondering).</LI><BR />
 	<LI>As we're using a promise-based request mechanism, we can wrap the actual calls inside a function <CODE>main</CODE> that's declared as asynchronous, and then call it right at the bottom of the script (with <CODE>main()</CODE>) when everything is ready. This reminds me a little of the Python pattern involving <CODE>__name__ == "__main__"</CODE>, but that's a story for another time I guess. Anyway, that allows us to make the actual calls in a synchronous fashion, using <CODE>await</CODE>.</LI><BR />
 	<LI>Inside the <CODE>main</CODE> function we pass the user credentials (remember this is the 'resource owner password credentials' grant type flow) in the call to actually request a token (<CODE>getToken</CODE>). We get the credential values from environment variables so you don't see them in the script.</LI><BR />
 	<LI>Assuming that a token is returned successfully (remember, this is just demo code and not robust!) we make an HTTP POST request with the request-promise module, having first set some defaults for requests with the <CODE>request.defaults</CODE> call, setting the bearer token in an Authorization header.</LI><BR />
 	<LI>The request-promise's <CODE>post</CODE> mechanism is very convenient, allowing us to send JSON directly via the <CODE>json</CODE> parameter, which we do, supplying the same payload as we've seen already to invoke the business rule.</LI><BR />
</UL><BR />
Unfortunately (or fortunately, if you like live streams that end with some suspense!) I forget something small but fundamental in the code, which we don't manage to catch before the hour is up. For those of you following this in the future, I'll give you a <A href="https://twitter.com/qmacro/status/1223171926216101888" target="_blank" rel="nofollow noopener noreferrer">clue</A> - it's in the call to <CODE>request.defaults</CODE>, and I will cover it in <A href="https://bit.ly/handsonsapdev#ep52" target="_blank" rel="nofollow noopener noreferrer">Ep.52</A> which at the time of writing this post is tomorrow! <span class="lia-unicode-emoji" title=":slightly_smiling_face:">🙂</span><BR />
<BR />
That wrapped it up for this episode. Tune in for the next one for some more (hopefully exciting) hands-on stuff with SAP development!
