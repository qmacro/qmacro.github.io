2019-03-26-annotated-links-episode-9-of-hands-on-sap-dev-with-qmacro
Annotated links: Episode 9 of Hands-on SAP dev with qmacro
technology-blog-sap
2019-03-26
https://community.sap.com/t5/technology-blogs-by-sap/annotated-links-episode-9-of-hands-on-sap-dev-with-qmacro/ba-p/13388506
<EM>This is a searchable description of the content of a live stream recording, specifically <STRONG>"Episode 9 - Continuing with data retrieval for Northbreeze"</STRONG> in the "<A href="https://bit.ly/handsonsapdev" target="_blank" rel="nofollow noopener noreferrer">Hands-on SAP dev with qmacro</A>" series. There are links directly to specific highlights in the video recording. For links to annotations of other episodes, please see the "<A href="https://bit.ly/handsonsapdev#replays" target="_blank" rel="nofollow noopener noreferrer">Catch the replays</A>" section of the series blog post.</EM><BR />
<BR />
This episode, titled "<A href="https://bit.ly/handsonsapdev#ep9" target="_blank" rel="nofollow noopener noreferrer">Continuing with data retrieval for Northbreeze</A>", was streamed live on Wed 06 Mar 2019 and is approximately one hour in length. The stream recording is <A href="https://www.youtube.com/watch?v=FoK25WbVg_M&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0" target="_blank" rel="nofollow noopener noreferrer">available on YouTube</A>.<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2019/03/Screen-Shot-2019-03-20-at-09.13.49.png" /><BR />
<BR />
Below is a brief synopsis, and links to specific highlights - use these links to jump directly to particular places of interest in the recording, based on 'hh:mm:ss' style timestamps.<BR />
<H2 id="brief-synopsis" id="toc-hId-907741226">Brief synopsis</H2><BR />
In <A href="https://bit.ly/handsonsapdev#ep8" target="_blank" rel="nofollow noopener noreferrer">episode 8</A> last Friday we were constructing the data retrieval script using Axios and promises. In this episode we continue to build that out, and then convert the data thus retrieved to CSV for loading into the database with <CODE>cds deploy</CODE>.<BR />
<H2 id="links-to-specific-highlights" id="toc-hId-711227721">Links to specific highlights</H2><BR />
<STRONG><A href="https://www.youtube.com/watch?v=FoK25WbVg_M&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h02m20s" target="_blank" rel="nofollow noopener noreferrer">00:02:20</A>:</STRONG> Starting off with some SAP Inside Track announcements! - <A href="https://wiki.scn.sap.com/wiki/display/events/SAP+Inside+Track+Maidenhead,+Friday+March+15th+2019,+%23sitMAI" target="_blank" rel="noopener noreferrer">Maidenhead</A> - Friday 15 March - <A href="https://wiki.scn.sap.com/wiki/display/events/SAP+Inside+Track+Frankfurt+2019%2C+March+30th%2C+%23sitFRA" target="_blank" rel="noopener noreferrer">Frankfurt</A> - Saturday 30 March - <A href="https://wiki.scn.sap.com/wiki/display/events/SAP+Inside+Track+Oslo+-+17+August+2019" target="_blank" rel="noopener noreferrer">Oslo</A> - Saturday 17 August<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=FoK25WbVg_M&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h03m00s" target="_blank" rel="nofollow noopener noreferrer">00:03:00</A>:</STRONG> Spotting an update to the VS Code extension for CDS - from 1.0.36 to 1.1.1.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=FoK25WbVg_M&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h04m50s" target="_blank" rel="nofollow noopener noreferrer">00:04:50</A>:</STRONG> Looking at the <A href="https://www.youtube.com/channel/UCNfmelKDrvRmjYwSi9yvrMg" target="_blank" rel="nofollow noopener noreferrer">SAP Developers</A> YouTube channel, to which you should definitely subscribe!<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=FoK25WbVg_M&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h06m50s" target="_blank" rel="nofollow noopener noreferrer">00:06:50</A>:</STRONG> Looking at where we left off with the Northbreeze project, looking at the model and service definitions that we set up before detouring to grab some seed data from the original Northwind service with our "grab" project.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=FoK25WbVg_M&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h08m20s" target="_blank" rel="nofollow noopener noreferrer">00:08:20</A>:</STRONG> Opening a tmux session and looking at the "grab" project details, and in particular reminding ourselves how the <CODE>skipToken</CODE> works, and looking where we've saved local copies of the entity data, to serve to ourselves as we develop the script.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=FoK25WbVg_M&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h10m30s" target="_blank" rel="nofollow noopener noreferrer">00:10:30</A>:</STRONG> Opening up the <CODE>grab.js</CODE> script and looking through where we'd got to, and also starting up our local HTTP server in another tmux pane to serve the local data to the script.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=FoK25WbVg_M&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h16m55s" target="_blank" rel="nofollow noopener noreferrer">00:16:55</A>:</STRONG> Starting up <CODE>nodemon</CODE> in yet another tmux pane, to monitor and rerun the script as we make modifications.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=FoK25WbVg_M&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h18m00s" target="_blank" rel="nofollow noopener noreferrer">00:18:00</A>:</STRONG> Inserting another entry in the dot chain to see how many entities there are for each type, thus:<BR />
<PRE><CODE>.then(xs =&gt; xs.length)</CODE></PRE><BR />
This shows us that there's something not quite right ... of course, we've hardcoded "Products" in the <CODE>baseurl</CODE> constant, so we'll never manage to get any Categories or Suppliers in this configuration.<BR />
<BR />
We fix this by using placeholders in the constant instead:<BR />
<PRE><CODE><A href="http://localhost:8000/ENTITY-TOKEN" target="test_blank" rel="nofollow noopener noreferrer">http://localhost:8000/ENTITY-TOKEN</A></CODE></PRE><BR />
Also, even for the minimum number of pages of data, we're still getting 40 entities. That's because, for reasons unknown, I'd added 1 to the number of skip tokens like this:<BR />
<PRE><CODE>range(entities[entity].tokens + 1)</CODE></PRE><BR />
I can't for the life of me remember why I did that, and it's not correct. So we remove that <CODE>+ 1</CODE>.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=FoK25WbVg_M&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h21m00s" target="_blank" rel="nofollow noopener noreferrer">00:21:00</A>:</STRONG> To simplify things now, we create a new function <CODE>buildurl</CODE> that takes an entity name and a token count and constructs a real URL to be used in the Axios calls. This function includes the value of the <CODE>baseurl</CODE> constant so it can be pure.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=FoK25WbVg_M&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h21m50s" target="_blank" rel="nofollow noopener noreferrer">00:21:50</A>:</STRONG> The nice thing about the <CODE>replace</CODE> function in JS is that it's well behaved, in that (a) it doesn't mutate the source, and (b) what it produces is a new string, which we can then of course use to chain a further call to <CODE>replace</CODE> or whatever operation we want on that string.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=FoK25WbVg_M&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h23m39s" target="_blank" rel="nofollow noopener noreferrer">00:23:39</A>:</STRONG> With those changes, we've now fixes what we had, and can see the correct numbers of entities being returned: 77 Products, 29 Suppliers and 8 Categories.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=FoK25WbVg_M&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h24m15s" target="_blank" rel="nofollow noopener noreferrer">00:24:15</A>:</STRONG> Looking at another package <A href="https://www.npmjs.com/package/json2csv" target="_blank" rel="nofollow noopener noreferrer">json2csv</A> which will convert JSON to, you guessed it, CSV. It is in the form of a command line utility as well as having an API that can be used from within a JS script.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=FoK25WbVg_M&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h25m38s" target="_blank" rel="nofollow noopener noreferrer">00:25:38</A>:</STRONG> For now, to build out the next part, we'll just focus on Categories, and for that we insert a filter into the dot chain thus:<BR />
<PRE><CODE>.filter(x =&gt; x == 'Categories')</CODE></PRE><BR />
In looking at what we get as output, we notice that there's a whole load of data for a <CODE>picture</CODE> property - some sort of encoded image, which we don't want. And in digging deeper, we also notice that the properties we've defined in our entities (in CDS) are not the same as the properties we have in the JSON, so we'll have to convert them (for example we have <CODE>name</CODE> in the entity definition but <CODE>CategoryName</CODE> in the Northwind source that has come through as JSON).<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=FoK25WbVg_M&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h30m08s" target="_blank" rel="nofollow noopener noreferrer">00:30:08</A>:</STRONG> In the context of talking about Chris coming onto the next live stream episode to talk about functional programming, I point out that the filter we just added is a little ugly, in that it's hardcoded and also only useful there. What we would like to do ideally (partly, admittedly, to explore some functional programming aspects) is to write something like:<BR />
<PRE><CODE>.filter(onlyCategories)</CODE></PRE><BR />
because that's easy to understand and also "solid state".<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=FoK25WbVg_M&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h30m50s" target="_blank" rel="nofollow noopener noreferrer">00:30:50</A>:</STRONG> To do this, we start by defining a new function <CODE>is</CODE>:<BR />
<PRE><CODE>is = (val, x) =&gt; x == val</CODE></PRE><BR />
With this we can now say:<BR />
<PRE><CODE>.filter(x =&gt; is('Categories', x))</CODE></PRE><BR />
which is a bit nicer but not much. But we're on our way to a micro-nirvana.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=FoK25WbVg_M&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h32m55s" target="_blank" rel="nofollow noopener noreferrer">00:32:55</A>:</STRONG> Defining the <CODE>is</CODE> function like this instead:<BR />
<PRE><CODE>is =&gt; val =&gt; x =&gt; x == val</CODE></PRE><BR />
we can now define an <CODE>onlyCategories</CODE> like this:<BR />
<PRE><CODE>onlyCategories = is('Categories')</CODE></PRE><BR />
which is effectively the result of partially applying the call to the <CODE>is</CODE> function, with the first argument it wants; and now we have a function <CODE>onlyCategories</CODE> which is expecting also a single argument, which is the equivalent of the second argument to <CODE>is</CODE>.<BR />
<BR />
We can then do what we want, which is:<BR />
<PRE><CODE>.filter(onlyCategories)</CODE></PRE><BR />
Stare that that for a bit.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=FoK25WbVg_M&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h36m01s" target="_blank" rel="nofollow noopener noreferrer">00:36:01</A>:</STRONG> Installing <CODE>json2csv</CODE> and double-checking, with <CODE>npm list --depth=1</CODE>, what packages we have installed locally in this project (directory).<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=FoK25WbVg_M&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h37m30s" target="_blank" rel="nofollow noopener noreferrer">00:37:30</A>:</STRONG> Looking at <A href="https://www.npmjs.com/package/json2csv#example-3" target="_blank" rel="nofollow noopener noreferrer">Example 3</A> in the <CODE>json2csv</CODE> package documentation which shows how we can match up and rename properties during the conversion.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=FoK25WbVg_M&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h40m05s" target="_blank" rel="nofollow noopener noreferrer">00:40:05</A>:</STRONG> Starting to introduce the <CODE>json2csv</CODE> package use to our script, looking in particular at the destructuring construct (from ES6) in the example:<BR />
<PRE><CODE>const opts = { fields }</CODE></PRE><BR />
<STRONG><A href="https://www.youtube.com/watch?v=FoK25WbVg_M&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h42m00s" target="_blank" rel="nofollow noopener noreferrer">00:42:00</A>:</STRONG> A reference to a recording of a great talk by Brian Lonsdorf called "<A href="https://youtu.be/m3svKOdZijA" target="_blank" rel="nofollow noopener noreferrer">Hey Underscore, You're Doing It Wrong!</A>" which talks a lot about the importance of parameter order in function definitions, and how that affects how well (or not) functions can be used in a functional (point free) style.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=FoK25WbVg_M&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h44m33s" target="_blank" rel="nofollow noopener noreferrer">00:44:33</A>:</STRONG> Defining the fields that we want in the <CODE>entities</CODE> map we defined earlier, alongside the token information. We can then refer to this information in the options parameter in the call to <CODE>json2csv</CODE>.<BR />
<BR />
The next execution of the script shows us that it's doing what we want (in this case, creating CSV data with the new (and reduced) field set).<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=FoK25WbVg_M&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h50m51s" target="_blank" rel="nofollow noopener noreferrer">00:50:51</A>:</STRONG> Removing the call to <CODE>console.log</CODE> in the dot chain to see if we get the CSV written to files, and in fact we do!<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=FoK25WbVg_M&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h51m42s" target="_blank" rel="nofollow noopener noreferrer">00:51:42</A>:</STRONG> So we bring those CSV files into a new <CODE>csv</CODE> directory within the <CODE>db</CODE> directory in our CAP-based Northbreeze project, remembering the CSV file naming convention: <CODE>&lt;namespace&gt;-Entity.csv</CODE>.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=FoK25WbVg_M&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h55m00s" target="_blank" rel="nofollow noopener noreferrer">00:55:00</A>:</STRONG> Installing the <CODE>sqlite3</CODE> package, so we can deploy the data and service definitions, and the CSV data, to a SQLite database like this:<BR />
<PRE><CODE>cds deploy --to sqlite:northbreeze.db</CODE></PRE><BR />
<STRONG><A href="https://www.youtube.com/watch?v=FoK25WbVg_M&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h56m10s" target="_blank" rel="nofollow noopener noreferrer">00:56:10</A>:</STRONG> In response to a question from Jluiizz, I explain that the keyboard I'm using is the Vortex Race 3 with Cherry MX Blue switches. I buy my keyboards from <A href="https://candykeys.com" target="_blank" rel="nofollow noopener noreferrer">Candykeys</A>.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=FoK25WbVg_M&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h57m45s" target="_blank" rel="nofollow noopener noreferrer">00:57:45</A>:</STRONG> We use the <CODE>sqlite3</CODE> command line client to check if everything has worked ... and it has!
