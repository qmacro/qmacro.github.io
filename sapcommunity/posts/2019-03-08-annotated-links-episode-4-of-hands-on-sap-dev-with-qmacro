2019-03-08-annotated-links-episode-4-of-hands-on-sap-dev-with-qmacro
Annotated links: Episode 4 of Hands-on SAP dev with qmacro
technology-blog-sap
2019-03-08
https://community.sap.com/t5/technology-blogs-by-sap/annotated-links-episode-4-of-hands-on-sap-dev-with-qmacro/ba-p/13412505
<EM>This is a searchable description of the content of a live stream recording, specifically <STRONG>"Episode 4 - Debugging CAPM and a look at the cds REPL"</STRONG> in the "<A href="https://bit.ly/handsonsapdev" target="_blank" rel="nofollow noopener noreferrer">Hands-on SAP dev with qmacro</A>" series. There are links directly to specific highlights in the video recording. For links to annotations of other episodes, please see the "<A href="https://bit.ly/handsonsapdev#replays" target="_blank" rel="nofollow noopener noreferrer">Catch the replays</A>" section of the series blog post.</EM><BR />
<BR />
This episode, titled "<A href="https://bit.ly/handsonsapdev#ep4" target="_blank" rel="nofollow noopener noreferrer">Debugging CAPM and a look at the cds REPL</A>", was streamed live on Wed 13 Feb 2019 and is approximately one hour in length. The stream recording is <A href="https://www.youtube.com/watch?v=Dc0XZXoirf8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0" target="_blank" rel="nofollow noopener noreferrer">available on YouTube</A>.<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2019/03/Screen-Shot-2019-03-08-at-15.41.28.png" /><BR />
<BR />
Below is a brief synopsis, and links to specific highlights - use these links to jump directly to particular places of interest in the recording, based on 'hh:mm:ss' style timestamps.<BR />
<H2 id="brief-synopsis" id="toc-hId-929726983">Brief synopsis</H2><BR />
We take a look at how we can use VS Code debugging facilities to debug CAPM services, and also start to explore the cds command line toolâ€™s REPL (Read Evaluate Print Loop) environment.<BR />
<H2 id="links-to-specific-highlights" id="toc-hId-733213478">Links to specific highlights</H2><BR />
<STRONG><A href="https://www.youtube.com/watch?v=Dc0XZXoirf8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h01m15s" target="_blank" rel="nofollow noopener noreferrer">00:01:15</A>:</STRONG> Answering Pierre Dominique's question about Wednesday streams. Basically Friday is the regular slot that I run every week, always at the same time - 0800 UTC+0 (Manchester). I run an <EM>occasional</EM> midweek slot, and that will be on Wednesdays when it does happen. See the <A href="https://bit.ly/handsonsapdev#schedule" target="_blank" rel="nofollow noopener noreferrer">schedule</A> section of the main live stream blog post for details, including start times around the world.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=Dc0XZXoirf8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h03m38s" target="_blank" rel="nofollow noopener noreferrer">00:03:38</A>:</STRONG> Looking at the blog post <A href="https://blogs.sap.com/2019/02/04/cloudfoundryfun-upgrade-cloud-foundry-with-a-new-repl-feature/" target="_blank" rel="noopener noreferrer">#CloudFoundryFun - Upgrade Cloud Foundry With A New REPL Feature</A> by <SPAN class="mention-scrubbed">mariusobert</SPAN>, where he says "a REPL makes your application runtime more tangible".<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=Dc0XZXoirf8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h06m30s" target="_blank" rel="nofollow noopener noreferrer">00:06:30</A>:</STRONG> Looking at where we are in the tutorial, and opening up (in VS Code) a copy of the project at where we'd got to, in the <CODE>bookshop/</CODE> directory.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=Dc0XZXoirf8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h07m30s" target="_blank" rel="nofollow noopener noreferrer">00:07:30</A>:</STRONG> Looking at the SQLite database using the Database Explorer extension.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=Dc0XZXoirf8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h08m15s" target="_blank" rel="nofollow noopener noreferrer">00:08:15</A>:</STRONG> Executing <CODE>cds help repl</CODE> to get a quick overview of what the REPL is and does for us. Noting also that the overview points to the regular <A href="https://nodejs.org/api/repl.html" target="_blank" rel="nofollow noopener noreferrer">Node.js REPL documentation</A> ... because that is what the CDS REPL is based on ... a Node.js REPL with extra magic.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=Dc0XZXoirf8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h09m34s" target="_blank" rel="nofollow noopener noreferrer">00:09:34</A>:</STRONG> Starting a Node.js REPL and having a little play, noting that there's command line history built in. We look in <CODE>~/.node_repl_history</CODE>.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=Dc0XZXoirf8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h11m00s" target="_blank" rel="nofollow noopener noreferrer">00:11:00</A>:</STRONG> Looking inside the <CODE>node_modules/</CODE> directory, particularly in the <CODE>bin/</CODE> subdirectory, and we find the <CODE>repl.js</CODE> script which represents the CDS REPL, and as expected it's just using the Node.js REPL. Lovely!<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=Dc0XZXoirf8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h13m04s" target="_blank" rel="nofollow noopener noreferrer">00:13:04</A>:</STRONG> Starting up a CDS REPL with <CODE>cds repl</CODE>, and looking at the <A href="https://help.sap.com/viewer/65de2977205c403bbc107264b8eccf4b/Cloud/en-US/d2ee648522044ea19d3b5126c29692b5.html" target="_blank" rel="noopener noreferrer">References</A> section of the CAP documentation on the SAP Help Portal which gives us some insight into the JavaScript API.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=Dc0XZXoirf8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h14m25s" target="_blank" rel="nofollow noopener noreferrer">00:14:25</A>:</STRONG> Starting up <CODE>tmux</CODE> to manage our workspace better.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=Dc0XZXoirf8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h15m50s" target="_blank" rel="nofollow noopener noreferrer">00:15:50</A>:</STRONG> Instantiating a reference to the CDS package which also represents a connection, with<BR />
<DIV><BR />
<PRE class="sourceCode javascript"><CODE class="sourceCode javascript"><SPAN class="kw">const</SPAN> cds <SPAN class="op">=</SPAN> <SPAN class="at">require</SPAN>(<SPAN class="st">'@sap/cds'</SPAN>).<SPAN class="at">connect</SPAN>()</CODE></PRE><BR />
</DIV><BR />
Note that the CDS REPL history is in <CODE>~/.cds_repl_history</CODE> as opposed to <CODE>~/.node_repl_history</CODE>.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=Dc0XZXoirf8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h16m52s" target="_blank" rel="nofollow noopener noreferrer">00:16:52</A>:</STRONG> Exploring what we have in the <CODE>cds</CODE> constant, using <CODE>tmux</CODE>'s pane scroll feature (Ctrl-A [) to scroll up.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=Dc0XZXoirf8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h20m05s" target="_blank" rel="nofollow noopener noreferrer">00:20:05</A>:</STRONG> Examining a more detailed version of the call, specifying a value 'db' for the <CODE>connect()</CODE> call, and seeing that it refers to a section in the <CODE>cds</CODE> stanza inside <CODE>package.json</CODE>.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=Dc0XZXoirf8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h21m15s" target="_blank" rel="nofollow noopener noreferrer">00:21:15</A>:</STRONG> Pierre Dominique reminds us that we can use some of the builtin REPL commands, for example to disconnect. Using <CODE>.help</CODE> to see what they are, we get:<BR />
<PRE><CODE>.break    Sometimes you get stuck, this gets you out<BR />
.clear    Alias for .break<BR />
.editor   Enter editor mode<BR />
.exit     Exit the repl<BR />
.help     Print this help message<BR />
.load     Load JS from a file into the REPL session<BR />
.save     Save all evaluated commands in this REPL session to a file</CODE></PRE><BR />
<STRONG><A href="https://www.youtube.com/watch?v=Dc0XZXoirf8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h21m50s" target="_blank" rel="nofollow noopener noreferrer">00:21:50</A>:</STRONG> Seeing that we can use command completion on the <CODE>cds</CODE> constant, and looking at <CODE>cds.env</CODE>, which comes from <CODE>package.json</CODE>.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=Dc0XZXoirf8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h22m15s" target="_blank" rel="nofollow noopener noreferrer">00:22:15</A>:</STRONG> Because we're connected to the database we can use <CODE>cds.entities</CODE> to look at the entities in there.The output is in canonical form (CSN), and we look at the keys of the object returned with <CODE>Object.keys(cds.entities)</CODE> to get <CODE>['Books', 'Authors', 'Orders']</CODE>. We dig in further by looking at one of the entities with <CODE>cds.entities.Authors</CODE>.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=Dc0XZXoirf8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h23m15s" target="_blank" rel="nofollow noopener noreferrer">00:23:15</A>:</STRONG> We can do more, such as <CODE>cds.entities.Authors.keys</CODE> and <CODE>cds.entities.Authors.elements</CODE> to inspect the keys and elements (respectively) of the Authors entity.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=Dc0XZXoirf8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h24m13s" target="_blank" rel="nofollow noopener noreferrer">00:24:13</A>:</STRONG> Looking at the documentation for <A href="https://help.sap.com/viewer/65de2977205c403bbc107264b8eccf4b/Cloud/en-US/d844e8c7fa7f4160a3b17e564a2a4352.html" target="_blank" rel="noopener noreferrer">cds.ql</A> in the SAP Help Portal to see that it provides fluent API functions for writing queries in JavaScript, including <CODE>INSERT.into</CODE>, <CODE>UPDATE</CODE>, <CODE>DELETE.from</CODE> and <CODE>SELECT.from</CODE>.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=Dc0XZXoirf8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h27m30s" target="_blank" rel="nofollow noopener noreferrer">00:27:30</A>:</STRONG> Starting to play around with the fluent API, using command completion to help us. We try: <CODE>cds.ql.SELECT</CODE>, or actually (as <CODE>SELECT</CODE> is available globally):<BR />
<PRE><CODE>SELECT.from('Books')</CODE></PRE><BR />
(which is not SQL but JavaScript, remember!) which returns:<BR />
<PRE><CODE>{ SELECT: { from: {ref:['Books']} } }</CODE></PRE><BR />
which is in the canonical representation of CDS queries known as Core Query Notation (CQN), the query equivalent of Core Schema Notation (CSN).<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=Dc0XZXoirf8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h30m00s" target="_blank" rel="nofollow noopener noreferrer">00:30:00</A>:</STRONG> Looking at loading and compiling definitions programatically, like this:<BR />
<DIV><BR />
<PRE class="sourceCode javascript"><CODE class="sourceCode javascript"><SPAN class="va">cds</SPAN>.<SPAN class="at">load</SPAN>(<SPAN class="st">'db'</SPAN>).<SPAN class="at">then</SPAN>(<SPAN class="st">'cds.compile.to.sql'</SPAN>)</CODE></PRE><BR />
</DIV><BR />
which produces something like this:<BR />
<PRE><CODE>[ 'CREATE TABLE my_bookshop_Authors (\n  ID INTEGER,\n  name NVARCHAR(5000),\n  PRIMARY KEY(ID)\n)',<BR />
  'CREATE TABLE my_bookshop_Books (\n  ID INTEGER,\n  title NVARCHAR(5000),\n  stock INTEGER,\n  author_ID INTEGER,\n  PRIMARY KEY(ID)\n)',<BR />
  'CREATE TABLE my_bookshop_Orders (\n  modifiedAt SECONDDATE,\n  createdAt SECONDDATE,\n  createdBy NVARCHAR(255),\n  modifiedBy NVARCHAR(255),\n  ID NVARCHAR(36),\n  amount INTEGER,\n  book_ID INTEGER,\n  country_code NVARCHAR(3),\n  PRIMARY KEY(ID)\n)',<BR />
  'CREATE TABLE sap_common_Countries (\n  name NVARCHAR(255),\n  descr NVARCHAR(1000),\n  code NVARCHAR(3),\n  PRIMARY KEY(code)\n)' ]</CODE></PRE><BR />
Note the use of promises here!<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=Dc0XZXoirf8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h30m55s" target="_blank" rel="nofollow noopener noreferrer">00:30:55</A>:</STRONG> Getting back to <CODE>{ SELECT: { from: {ref:['Books']} } }</CODE>, we continue our journey, by feeding that in to the <CODE>cds.run</CODE> function:<BR />
<DIV><BR />
<PRE class="sourceCode javascript"><CODE class="sourceCode javascript"><SPAN class="va">cds</SPAN>.<SPAN class="at">run</SPAN>(<SPAN class="va">SELECT</SPAN>.<SPAN class="at">from</SPAN>(<SPAN class="st">'Books'</SPAN>))</CODE></PRE><BR />
</DIV><BR />
Note however that we actually have to specify the full name of the table, i.e.<BR />
<DIV><BR />
<PRE class="sourceCode javascript"><CODE class="sourceCode javascript"><SPAN class="va">cds</SPAN>.<SPAN class="at">run</SPAN>(<SPAN class="va">SELECT</SPAN>.<SPAN class="at">from</SPAN>(<SPAN class="st">'my.bookshop.Books'</SPAN>))</CODE></PRE><BR />
</DIV><BR />
and this produces:<BR />
<PRE><CODE>[ { ID: 201, title: 'Wuthering Heights', stock: 3, author_ID: 101 },<BR />
  { ID: 207, title: 'Jane Eyre', stock: 11, author_ID: 107 },<BR />
  { ID: 251, title: 'The Raven', stock: 333, author_ID: 150 },<BR />
  { ID: 252, title: 'Eleonora', stock: 555, author_ID: 150 },<BR />
  { ID: 271, title: 'Catweazle', stock: 22, author_ID: 170 } ]</CODE></PRE><BR />
Excellent!<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=Dc0XZXoirf8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h32m05s" target="_blank" rel="nofollow noopener noreferrer">00:32:05</A>:</STRONG> We see that we don't actually have to know the 'my.bookshop' prefix for 'Books' ... we can do this:<BR />
<DIV><BR />
<PRE class="sourceCode javascript"><CODE class="sourceCode javascript">b <SPAN class="op">=</SPAN> <SPAN class="va">cds</SPAN>.<SPAN class="va">entities</SPAN>.<SPAN class="at">Books</SPAN><BR />
<SPAN class="va">cds</SPAN>.<SPAN class="at">run</SPAN>(<SPAN class="va">SELECT</SPAN>.<SPAN class="at">from</SPAN>(b))</CODE></PRE><BR />
</DIV><BR />
and get the same result (the five records) ... as <CODE>b</CODE> is now a representation of the Books entityset. (We see that the value of <CODE>b.name</CODE> is 'my.bookshop.Books' too).<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=Dc0XZXoirf8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h33m45s" target="_blank" rel="nofollow noopener noreferrer">00:33:45</A>:</STRONG> Trying an insert. First we build up the CQN object (the output from each line is shown in subsequent comment lines):<BR />
<PRE><CODE>add_dna = INSERT.into(cds.entities.Authors)<BR />
// -&gt; { INSERT: { into: 'my.bookshop.Authors' } }<BR />
<BR />
add_dna.columns('ID', 'name')<BR />
// -&gt; { INSERT: { into: 'my.bookshop.Authors', columns: ['ID', 'name'] } }<BR />
<BR />
add_dna.columns('ID', 'name').values(42, 'Douglas Adams')</CODE></PRE><BR />
This final evaluation gives us:<BR />
<PRE><CODE>{ INSERT:<BR />
  { into: 'my.bookshop.Authors',<BR />
    columns: [ 'ID', 'name' ],<BR />
    values: [ 42, 'Douglas Adams' ] } }</CODE></PRE><BR />
<STRONG><A href="https://www.youtube.com/watch?v=Dc0XZXoirf8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h37m10s" target="_blank" rel="nofollow noopener noreferrer">00:37:10</A>:</STRONG> Running the query gives us some result:<BR />
<PRE><CODE>cds.run(add_dna)<BR />
// -&gt; 1</CODE></PRE><BR />
Running a query on the Authors entity (<CODE>cds.run(SELECT.from(cds.entities.Authors))</CODE>) shows that the insert was successful:<BR />
<PRE><CODE>[ { ID: 42, name: 'Douglas Adams' },<BR />
  { ID: 101, name: 'Emily BrontÃ«' },<BR />
  { ID: 107, name: 'Charlote BrontÃ«' },<BR />
  { ID: 150, name: 'Edgar Allen Poe' },<BR />
  { ID: 170, name: 'Richard Carpenter' } ]</CODE></PRE><BR />
We can also see the new record with the OData query: <CODE><A href="http://localhost:4004/catalog/Authors" target="test_blank" rel="nofollow noopener noreferrer">http://localhost:4004/catalog/Authors</A></CODE>.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=Dc0XZXoirf8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h39m00s" target="_blank" rel="nofollow noopener noreferrer">00:39:00</A>:</STRONG> Moving to VS Code now for a bit of debugging.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=Dc0XZXoirf8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h40m51s" target="_blank" rel="nofollow noopener noreferrer">00:40:51</A>:</STRONG> Looking at the <CODE>.vscode/launch.json</CODE> configuration file which has some debugging settings, not CDS specific or CAP specific but general to VS Code. By the way, this is the newer version of the "Bookshop" sample project that Christian was using to demonstrate features to us in the <A href="https://bit.ly/handsonsapdev#ep3" target="_blank" rel="nofollow noopener noreferrer">previous episode</A>.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=Dc0XZXoirf8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h43m23s" target="_blank" rel="nofollow noopener noreferrer">00:43:23</A>:</STRONG> Using <CODE>npm run setup</CODE> to install the Node modules and perform the deployment, as in <CODE>package.json</CODE> the 'setup' script is defined to be:<BR />
<PRE><CODE>npm i &amp;&amp; cds deploy -2 sqlite:bookshop.db</CODE></PRE><BR />
<STRONG><A href="https://www.youtube.com/watch?v=Dc0XZXoirf8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h45m00s" target="_blank" rel="nofollow noopener noreferrer">00:45:00</A>:</STRONG> With 'convention over configuration', we have a file <CODE>cat-service.js</CODE>, and this means that the runtime will use the code in <CODE>cat-service.js</CODE> to extend the default implementation of the CRUD+Q service defined in <CODE>cat-service.cds</CODE>. We spend some time exploring what the different handlers are, and how to inject logic into the flow, with service provider methods like <CODE>.before</CODE> and <CODE>.after</CODE>.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=Dc0XZXoirf8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h49m25s" target="_blank" rel="nofollow noopener noreferrer">00:49:25</A>:</STRONG> A brief reminder of the naming convetions in the <A href="https://help.sap.com/viewer/65de2977205c403bbc107264b8eccf4b/Cloud/en-US/e4a7559baf9f4e4394302442745edcd9.html" target="_blank" rel="noopener noreferrer">Best Practices</A> section of the documentation on SAP Help Portal.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=Dc0XZXoirf8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h51m28s" target="_blank" rel="nofollow noopener noreferrer">00:51:28</A>:</STRONG> We dig into the signature of the <CODE>.after</CODE> method ("service.after (event, entity?, handler) : this"), noting that the single parameter <CODE>each</CODE> is a special case, a convenient shortcut for a per-row handler. We insert a <CODE>console.log</CODE> statement to see what the values are when we run it.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=Dc0XZXoirf8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h53m35s" target="_blank" rel="nofollow noopener noreferrer">00:53:35</A>:</STRONG> Adding a breakpoint to the <CODE>console.log</CODE> line, we can see that execution pauses for us to have a look around and even modify things.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=Dc0XZXoirf8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h54m47s" target="_blank" rel="nofollow noopener noreferrer">00:54:47</A>:</STRONG> Modifying the <CODE>srv.after</CODE> call to use the <CODE>req</CODE> pattern that makes available the inbound request:<BR />
<DIV><BR />
<PRE class="sourceCode javascript"><CODE class="sourceCode javascript"><SPAN class="va">srv</SPAN>.<SPAN class="at">after</SPAN> (<SPAN class="st">'READ'</SPAN><SPAN class="op">,</SPAN> <SPAN class="st">'Books'</SPAN><SPAN class="op">,</SPAN> (books<SPAN class="op">,</SPAN> req) <SPAN class="op">=&gt;</SPAN> <SPAN class="op">{</SPAN><BR />
  ...<BR />
<SPAN class="op">}</SPAN>)</CODE></PRE><BR />
</DIV><BR />
Now in this approach we can get access, in the debug console, to all the entries that have been retrieved (in <CODE>books</CODE>), and also look at the actual request (in <CODE>req</CODE>). This is just the start, we're just scratching the surface!
