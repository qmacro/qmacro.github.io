2019-04-15-annotated-links-episode-15-of-hands-on-sap-dev-with-qmacro
Annotated links: Episode 15 of Hands-on SAP dev with qmacro
technology-blog-sap
2019-04-15
https://community.sap.com/t5/technology-blogs-by-sap/annotated-links-episode-15-of-hands-on-sap-dev-with-qmacro/ba-p/13415416
<EM>This is a searchable description of the content of a live stream recording, specifically <STRONG>"Episode 15 - Starting to look at a frontend for our Northbreeze app"</STRONG> in the "<A href="https://bit.ly/handsonsapdev" target="_blank" rel="nofollow noopener noreferrer">Hands-on SAP dev with qmacro</A>" series. There are links directly to specific highlights in the video recording. For links to annotations of other episodes, please see the "<A href="https://bit.ly/handsonsapdev#replays" target="_blank" rel="nofollow noopener noreferrer">Catch the replays</A>" section of the series blog post.</EM><BR />
<BR />
This episode, titled "<A href="https://bit.ly/handsonsapdev#ep15" target="_blank" rel="nofollow noopener noreferrer">Starting to look at a frontend for our Northbreeze app</A>", was streamed live on Fri 29 Mar 2019 and is approximately one hour in length. The stream recording is <A href="https://www.youtube.com/watch?v=qqi64GOMGY8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0" target="_blank" rel="nofollow noopener noreferrer">available on YouTube</A>.<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2019/04/Screen-Shot-2019-04-15-at-17.35.11.png" /><BR />
<BR />
Below is a brief synopsis, and links to specific highlights - use these links to jump directly to particular places of interest in the recording, based on 'hh:mm:ss' style timestamps.<BR />
<H2 id="brief-synopsis" id="toc-hId-929815427">Brief synopsis</H2><BR />
This session comes to you live from the location of the SAP CodeJam event in the AOK offices in Frankfurt. In this episode we investigate at a few more cool features of CAP and CDS and start to look at a user interface for our Northbreeze app, and even get to serve it from the CAP runtime itself.<BR />
<H2 id="links-to-specific-highlights" id="toc-hId-733301922">Links to specific highlights</H2><BR />
<STRONG><A href="https://www.youtube.com/watch?v=qqi64GOMGY8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h01m00s" target="_blank" rel="nofollow noopener noreferrer">00:01:00</A>:</STRONG> Introducing <SPAN class="mention-scrubbed">riley.rainey</SPAN> to this episode, who tells us a bit about himself and the work of the evangelists and developer relations as a whole, and mentions the CodeJams that are running that day. By the way, if you would like to know more about CodeJams or request one, visit the <A href="https://www.sap.com/community/events.html" target="_blank" rel="noopener noreferrer">Community Events</A> page.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=qqi64GOMGY8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h05m00s" target="_blank" rel="nofollow noopener noreferrer">00:05:00</A>:</STRONG> Talking about the recent announcement relating to the SAP S/4HANA Cloud SDK - which is the availability of release 1.0.0 of the JavaScript version. This has been in beta for a while but has now gone Generally Available (GA). This is great news! See the post <A href="https://blogs.sap.com/2019/03/28/announcing-the-sap-s4hana-cloud-sdk-for-javascript/" target="_blank" rel="noopener noreferrer">Announcing the SAP S/4HANA Cloud SDK</A> by <SPAN class="mention-scrubbed">henning.heitkoetter#overview</SPAN> for more info on this.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=qqi64GOMGY8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h09m00s" target="_blank" rel="nofollow noopener noreferrer">00:09:00</A>:</STRONG> Using <CODE>npm info <a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a>/cds</CODE> we look at the latest info on the <CODE><a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a>/cds</CODE> module, we can see that it's at version 3.7.1. I've deliberately not upgraded the version I have installed globally, which is still at 3.5.2. This resulted in some interesting effects, for new projects created (with <CODE>cds init</CODE>) which we explore at this point.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=qqi64GOMGY8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h14m24s" target="_blank" rel="nofollow noopener noreferrer">00:14:24</A>:</STRONG> Looking at which actual <CODE>cds</CODE> executable is being used:<BR />
<DIV><BR />
<PRE class="sourceCode bash"><CODE class="sourceCode bash">=<SPAN class="op">&gt;</SPAN> <SPAN class="fu">which</SPAN> cds<BR />
<SPAN class="ex">/Users/i347491/.nvm/versions/node/v8.12.0/bin/cds</SPAN></CODE></PRE><BR />
</DIV><BR />
which is the globally installed one, and also looking what type of file that is:<BR />
<DIV><BR />
<PRE class="sourceCode bash"><CODE class="sourceCode bash">=<SPAN class="op">&gt;</SPAN> <SPAN class="fu">file</SPAN> <SPAN class="kw">`</SPAN><SPAN class="fu">which</SPAN> cds<SPAN class="kw">`</SPAN><BR />
<SPAN class="ex">/Users/i347491/.nvm/versions/node/v8.12.0/bin</SPAN>/cds: <SPAN class="ex">a</SPAN> /usr/bin/env node script text executable, ASCII text</CODE></PRE><BR />
</DIV><BR />
This is also possible with the following sequence of commands:<BR />
<DIV><BR />
<PRE class="sourceCode bash"><CODE class="sourceCode bash">=<SPAN class="op">&gt;</SPAN> <SPAN class="fu">which</SPAN> cds<BR />
<SPAN class="ex">/Users/i347491/.nvm/versions/node/v8.12.0/bin/cds</SPAN><BR />
=<SPAN class="op">&gt;</SPAN> <SPAN class="fu">file</SPAN> <SPAN class="va">$(</SPAN>!!<SPAN class="va">)</SPAN><BR />
<SPAN class="ex">/Users/i347491/.nvm/versions/node/v8.12.0/bin</SPAN>/cds: <SPAN class="ex">a</SPAN> /usr/bin/env node script text executable, ASCII text</CODE></PRE><BR />
</DIV><BR />
<STRONG><A href="https://www.youtube.com/watch?v=qqi64GOMGY8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h17m45s" target="_blank" rel="nofollow noopener noreferrer">00:17:45</A>:</STRONG> Looking a bit more closely at the <CODE>cds</CODE> file, we see that it's actually a symbolic link to another file elsewhere in the <CODE><a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a>/cds</CODE> package:<BR />
<DIV><BR />
<PRE class="sourceCode bash"><CODE class="sourceCode bash">=<SPAN class="op">&gt;</SPAN> <SPAN class="fu">ls</SPAN> -l ~/.nvm/versions/node/v8.12.0/bin/cds<BR />
<SPAN class="ex">lrwxr-xr-x</SPAN>  1 i347491  staff  39 12 Apr 07:14 /Users/i347491/.nvm/versions/node/v8.12.0/bin/cds@ -<SPAN class="op">&gt;</SPAN> ../lib/node_modules/@sap/cds/bin/cds.js</CODE></PRE><BR />
</DIV><BR />
<STRONG><A href="https://www.youtube.com/watch?v=qqi64GOMGY8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h18m35s" target="_blank" rel="nofollow noopener noreferrer">00:18:35</A>:</STRONG> A cameo appearance from <SPAN class="mention-scrubbed">iinside</SPAN>, who, along with Former Member (who also makes an appearance a few minutes later - bearing gifts in the form of SAP Cloud Application Programming Model sticksers!) is co-running the CAP CodeJam there at AOK Systems.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=qqi64GOMGY8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h23m20s" target="_blank" rel="nofollow noopener noreferrer">00:23:20</A>:</STRONG> Having a look inside the <CODE>cds</CODE> entrypoint, in particular, the "bootstrap" section which has this comment: "try to find a locally installed cds, otherwise launch this one".<BR />
<BR />
This is something we'll try to debug, to see it in action.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=qqi64GOMGY8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h25m30s" target="_blank" rel="nofollow noopener noreferrer">00:25:30</A>:</STRONG> We're going to use the Node Inspector to debug:<BR />
<DIV><BR />
<PRE class="sourceCode bash"><CODE class="sourceCode bash">=<SPAN class="op">&gt;</SPAN> <SPAN class="ex">node</SPAN> --inspect-brk <SPAN class="kw">`</SPAN><SPAN class="fu">which</SPAN> cds<SPAN class="kw">`</SPAN><BR />
<SPAN class="ex">Debugger</SPAN> listening on ws://127.0.0.1:9229/d4274321-3b28-4ae2-90a0-fbf02c5bf1e0<BR />
<SPAN class="ex">For</SPAN> help see <A href="https://nodejs.org/en/docs/inspector" target="test_blank" rel="nofollow noopener noreferrer">https://nodejs.org/en/docs/inspector</A></CODE></PRE><BR />
</DIV><BR />
We can now attach the Chrome Developer tools to this, to debug! Opening up the special <A class="uri" href="https://blogs.sap.com//inspect" target="_blank" rel="noopener noreferrer">chrome://inspect</A> address we can see the Node process waiting for us to connect and start inspecting.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=qqi64GOMGY8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h29m00s" target="_blank" rel="nofollow noopener noreferrer">00:29:00</A>:</STRONG> We stop on the use of <CODE>require_local</CODE> which is a module inside the global <CODE><a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a>/cds</CODE> package, specifically in <CODE>lib/utils/</CODE>. This module attempts to load a project-local version of the module specified, and back in <CODE>cds.js</CODE> we see the result of this, if successful, is assigned to the <CODE>_main</CODE> constant, falling back to the <CODE>main</CODE> function that's defined further down in this global <CODE>cds.js</CODE> script.<BR />
<BR />
We can see how this works now, and understand why, when we invoke <CODE>cds</CODE> from within a CAP project directory,We can see how this works now, and understand why, when we invoke <CODE>cds</CODE> from within a CAP project directory, we get a different version of <CODE>cds</CODE> compared to when we invoke it from outside a CAP project directory. The power of Node, Chrome Developer Tools and debugging in general! (And of course this would be almost impossible if we didn't have access to the source code).<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=qqi64GOMGY8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h33m00s" target="_blank" rel="nofollow noopener noreferrer">00:33:00</A>:</STRONG> Discussing the differences (and similarities) between <CODE>cds run</CODE> and <CODE>cds serve all</CODE>.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=qqi64GOMGY8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h35m00s" target="_blank" rel="nofollow noopener noreferrer">00:35:00</A>:</STRONG> Getting back to our Northbreeze project, to remind ourselves where we ended up last time, and starting to talk a bit about a function import on our OData service, something we haven't previously considered. This causes me to go on a bit about how function imports are quite orthogonal to the rest of the OData protocol, how they are more like remote procedure calls, in the context of OData's otherwise nicely RESTful design.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=qqi64GOMGY8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h37m50s" target="_blank" rel="nofollow noopener noreferrer">00:37:50</A>:</STRONG> So despite my (mostly philosophical) reservations about function imports, we plan to take a quick look at how we go about defining one in the service definition in this Northbreeze project.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=qqi64GOMGY8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h39m00s" target="_blank" rel="nofollow noopener noreferrer">00:39:00</A>:</STRONG> Reminding ourselves that adding a <CODE>.js</CODE> file, with the same base name as a service definition file, allows us to provide custom implementation logic for the contents of that service. You can use this technique to enhance or override standard CAP service functionality as you see fit.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=qqi64GOMGY8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h40m35s" target="_blank" rel="nofollow noopener noreferrer">00:40:35</A>:</STRONG> To warm up, we add a <CODE>service.js</CODE> file alongside the <CODE>service.cds</CODE> file, with the following contents:<BR />
<DIV><BR />
<PRE class="sourceCode javascript"><CODE class="sourceCode javascript"><SPAN class="va">module</SPAN>.<SPAN class="at">exports</SPAN> <SPAN class="op">=</SPAN> srv <SPAN class="op">=&gt;</SPAN> <SPAN class="op">{</SPAN><BR />
  <SPAN class="va">console</SPAN>.<SPAN class="at">log</SPAN>(<SPAN class="st">"IN SERVICE IMPLEMENTATION"</SPAN><SPAN class="op">,</SPAN> srv)<BR />
<SPAN class="op">}</SPAN></CODE></PRE><BR />
</DIV><BR />
When we start the service, we see a whole lot of information produced by this <CODE>console.log</CODE> statement.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=qqi64GOMGY8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h41m49s" target="_blank" rel="nofollow noopener noreferrer">00:41:49</A>:</STRONG> Changing the reference in the <CODE>console.log</CODE> statement from <CODE>srv</CODE> to <CODE>srv.name</CODE>, and we can more easily see that in fact the function we've defined gets called <EM>for each of the services defined</EM> in <CODE>service.cds</CODE>:<BR />
<PRE><CODE>IN SERVICE IMPLEMENTATION Breezy<BR />
IN SERVICE IMPLEMENTATION Restricted</CODE></PRE><BR />
This is because we have both these services defined in <CODE>service.cds</CODE>, thus:<BR />
<PRE class="cds"><CODE>using northbreeze from '../db/model';<BR />
<BR />
service Breezy {<BR />
        entity Products as projection on northbreeze.Products;<BR />
        entity Suppliers as projection on northbreeze.Suppliers;<BR />
        entity Categories as projection on northbreeze.Categories;<BR />
        function hello (to:String) returns String;<BR />
}<BR />
<BR />
service Restricted {<BR />
        entity Orders as projection on northbreeze.Orders;<BR />
}</CODE></PRE><BR />
<STRONG><A href="https://www.youtube.com/watch?v=qqi64GOMGY8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h44m15s" target="_blank" rel="nofollow noopener noreferrer">00:44:15</A>:</STRONG> Next up, having replaced the body of the exported function in <CODE>service.js</CODE> with this:<BR />
<DIV><BR />
<PRE class="sourceCode javascript"><CODE class="sourceCode javascript"><SPAN class="cf">if</SPAN> (<SPAN class="va">srv</SPAN>.<SPAN class="at">name</SPAN> <SPAN class="op">===</SPAN> <SPAN class="st">'Breezy'</SPAN>) <SPAN class="op">{</SPAN><BR />
  <SPAN class="va">srv</SPAN>.<SPAN class="at">before</SPAN>(<SPAN class="st">'READ'</SPAN><SPAN class="op">,</SPAN> <SPAN class="st">'Products'</SPAN><SPAN class="op">,</SPAN> x <SPAN class="op">=&gt;</SPAN> <SPAN class="op">{</SPAN><BR />
    <SPAN class="va">console</SPAN>.<SPAN class="at">log</SPAN>(x)<BR />
  <SPAN class="op">}</SPAN><BR />
<SPAN class="op">}</SPAN></CODE></PRE><BR />
</DIV><BR />
... we can get a glimpse of the sort of information that's passed to such a custom hook function.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=qqi64GOMGY8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h45m00s" target="_blank" rel="nofollow noopener noreferrer">00:45:00</A>:</STRONG> We define a simple function import definition in the <CODE>service.cds</CODE> file. Of course, a function import will belong to a specific OData service, so we write the definition inside one of the two services defined there, specifically the 'Breezy' service, and the definition looks like this:<BR />
<PRE class="cds"><CODE>function hello (to:String) returns String;</CODE></PRE><BR />
The corresponding implementation for this function definition can be written in the <CODE>service.js</CODE> implementation file, which we do, like this:<BR />
<DIV><BR />
<PRE class="sourceCode javascript"><CODE class="sourceCode javascript"><SPAN class="va">srv</SPAN>.<SPAN class="at">on</SPAN>(<SPAN class="st">'hello'</SPAN><SPAN class="op">,</SPAN> x <SPAN class="op">=&gt;</SPAN> <SPAN class="op">{</SPAN><BR />
  <SPAN class="va">console</SPAN>.<SPAN class="at">log</SPAN>(x)<BR />
<SPAN class="op">}</SPAN></CODE></PRE><BR />
</DIV><BR />
<STRONG><A href="https://www.youtube.com/watch?v=qqi64GOMGY8&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h46m45s" target="_blank" rel="nofollow noopener noreferrer">00:46:45</A>:</STRONG> Calling the function import like this:<BR />
<PRE><CODE>http://localhost:4004/breezy/hello(to='dj')</CODE></PRE><BR />
we see, via a breakpoint, that the data passed to the function import definition contains all sorts of information, including, in <CODE>data</CODE>, the value of the <CODE>to</CODE> parameter that we passed ("dj"), which we now use in what we return, modifying the function so it now looks like this:<BR />
<DIV><BR />
<PRE class="sourceCode javascript"><CODE class="sourceCode javascript"><SPAN class="va">srv</SPAN>.<SPAN class="at">on</SPAN>(<SPAN class="st">'hello'</SPAN><SPAN class="op">,</SPAN> x <SPAN class="op">=&gt;</SPAN> <SPAN class="vs">`Hello there </SPAN><SPAN class="sc">${</SPAN><SPAN class="va">x</SPAN>.<SPAN class="va">data</SPAN>.<SPAN class="at">to</SPAN><SPAN class="sc">}</SPAN><SPAN class="vs"> !`</SPAN>)</CODE></PRE><BR />
</DIV><BR />
And with that, I end the stream a little bit early, to allow the CAP CodeJam participants to enter the room and get set up for the day's session! We'll continue the move towards looking at a UI layer next time!
