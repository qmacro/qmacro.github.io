2019-02-20-annotated-links-episode-0-of-hands-on-sap-dev-with-qmacro
Annotated links: Episode 0 of Hands-on SAP dev with qmacro
technology-blog-sap
2019-02-20
https://community.sap.com/t5/technology-blogs-by-sap/annotated-links-episode-0-of-hands-on-sap-dev-with-qmacro/ba-p/13393497
<EM>This is a searchable description of the content of a live stream recording, specifically <STRONG>"Episode 0 - Getting our feet wet"</STRONG> in the "<A href="https://bit.ly/handsonsapdev" target="_blank" rel="nofollow noopener noreferrer">Hands-on SAP dev with qmacro</A>" series. There are links directly to specific highlights in the video recording. For links to annotations of other episodes, please see the "<A href="https://bit.ly/handsonsapdev#replays" target="_blank" rel="nofollow noopener noreferrer">Catch the replays</A>" section of the series blog post.</EM><BR />
<BR />
This episode, titled "<A href="https://bit.ly/handsonsapdev#ep0" target="_blank" rel="nofollow noopener noreferrer">Getting our feet wet</A>", was streamed live on Fri 18 Jan 2019 and is approximately one hour in length. The stream recording is <A href="https://www.youtube.com/watch?v=V7UCloLcPyo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0" target="_blank" rel="nofollow noopener noreferrer">available on YouTube</A>.<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2019/02/Screen-Shot-2019-02-28-at-13.03.36-2.png" /><BR />
<BR />
Below is a brief synopsis, and links to specific highlights - use these links to jump directly to particular places of interest in the recording, based on 'hh:mm:ss' style timestamps.<BR />
<H2 id="brief-synopsis" id="toc-hId-908515111">Brief synopsis</H2><BR />
In this initial episode of the "Hands-on SAP dev with qmacro" series, we take a brief look at what using SAP's Cloud Application Programming Model in a Node.js context means for us JavaScript developers, and warm our brains up by solving some puzzles with a bit of ES6 flavoured code (with some functional aspects thrown in for good measure).<BR />
<H2 id="links-to-specific-highlights" id="toc-hId-712001606">Links to specific highlights</H2><BR />
<STRONG><A href="https://www.youtube.com/watch?v=V7UCloLcPyo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h00m49s" target="_blank" rel="nofollow noopener noreferrer">00:00:49</A>:</STRONG> Shoutout to the <A href="https://anchor.fm/sap-community-podcast" target="_blank" rel="nofollow noopener noreferrer">Coffee Corner Radio</A> podcast show.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=V7UCloLcPyo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h02m20s" target="_blank" rel="nofollow noopener noreferrer">00:02:20</A>:</STRONG> A callout to just be nice to each other (which I'm sure you all are and will continue to be), and reference to the Participation Etiquette in the <A href="https://www.sap.com/community/resources/rules-of-engagement.html" target="_blank" rel="noopener noreferrer">SAP Community Rules of Engagement</A>.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=V7UCloLcPyo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h03m47s" target="_blank" rel="nofollow noopener noreferrer">00:03:47</A>:</STRONG> A quick look at my <A href="https://streamlabs.com" target="_blank" rel="nofollow noopener noreferrer">Streamlabs</A> setup.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=V7UCloLcPyo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h05m02s" target="_blank" rel="nofollow noopener noreferrer">00:05:02</A>:</STRONG> Taking a first look at the <A href="https://developers.sap.com/tutorial-navigator.html" target="_blank" rel="noopener noreferrer">tutorial navigator</A> on <A href="https://developers.sap.com" target="_blank" rel="noopener noreferrer">developers.sap.com</A> and specifically the <A href="https://developers.sap.com/tutorials/cp-apm-nodejs-create-service.html" target="_blank" rel="noopener noreferrer">Create a Business Service with Note.js using Visual Studio Code</A> tutorial.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=V7UCloLcPyo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h07m12s" target="_blank" rel="nofollow noopener noreferrer">00:07:12</A>:</STRONG> Jumping ahead to the "Provide Mock Data" step in the tutorial we see that the JavaScript used is quite modern, specifically embracing many ECMAScript 6 (ES6) features, possibly less recognisable to many of us.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=V7UCloLcPyo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h08m27s" target="_blank" rel="nofollow noopener noreferrer">00:08:27</A>:</STRONG> We see a similar pattern with the "Add custom logic" step later on in the tutorial, with modern JavaScript, including ES6 aspects such as destructuring and the fat arrow syntax.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=V7UCloLcPyo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h09m37s" target="_blank" rel="nofollow noopener noreferrer">00:09:37</A>:</STRONG> Moving into the terminal for the rest of this episode, and bringing up a simple task for us to work on and practise our JavaScript. We'll be using the Christmas themed <A href="https://adventofcode.com/2018/day/1" target="_blank" rel="nofollow noopener noreferrer">Advent of Code day 1</A> pair of puzzles to warm up our brains a little bit.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=V7UCloLcPyo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h11m17s" target="_blank" rel="nofollow noopener noreferrer">00:11:17</A>:</STRONG> Diving straight into part 1 of the puzzle, looking at what's required.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=V7UCloLcPyo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h13m07s" target="_blank" rel="nofollow noopener noreferrer">00:13:07</A>:</STRONG> Looking at the puzzle input (which is user-specific), and then grabbing the example input from the puzzle description itself.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=V7UCloLcPyo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h13m37s" target="_blank" rel="nofollow noopener noreferrer">00:13:37</A>:</STRONG> Thinking about a good development environment for this, with quick feedback turnaround.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=V7UCloLcPyo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h13m57s" target="_blank" rel="nofollow noopener noreferrer">00:13:57</A>:</STRONG> Initialising a new repo for the solution project with <CODE>npm init</CODE>.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=V7UCloLcPyo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h14m05s" target="_blank" rel="nofollow noopener noreferrer">00:14:05</A>:</STRONG> Looking at <CODE>package.json</CODE> as it initially is generated.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=V7UCloLcPyo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h15m40s" target="_blank" rel="nofollow noopener noreferrer">00:15:40</A>:</STRONG> Examining the 'test harness' in the form of <CODE>index.js</CODE> (which is referenced in <CODE>package.json</CODE>) - this works as a test runner for the solutions, which provides a <CODE>clean</CODE> function, loads the day's solvers (for parts 1 and 2) and then loads the puzzle input and tries each solution.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=V7UCloLcPyo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h16m13s" target="_blank" rel="nofollow noopener noreferrer">00:16:13</A>:</STRONG> Taking a brief look at two beautiful Vim plugins <A href="https://github.com/junegunn/goyo.vim" target="_blank" rel="nofollow noopener noreferrer">Goyo</A> and <A href="https://github.com/junegunn/limelight.vim" target="_blank" rel="nofollow noopener noreferrer">Limelight</A>.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=V7UCloLcPyo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h17m23s" target="_blank" rel="nofollow noopener noreferrer">00:17:23</A>:</STRONG> Taking a bit of a closer look at how the <CODE>clean</CODE> function processes the puzzle data that's read in, turning the string into a clean array of values.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=V7UCloLcPyo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h19m05s" target="_blank" rel="nofollow noopener noreferrer">00:19:05</A>:</STRONG> Starting with a basic skeleton solver module with functions <CODE>a</CODE> and <CODE>b</CODE> for parts 1 and 2 of the day's puzzle, respectively.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=V7UCloLcPyo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h20m42s" target="_blank" rel="nofollow noopener noreferrer">00:20:42</A>:</STRONG> Creating the initial contents of the <CODE>day1.input</CODE> file from the test data in the example.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=V7UCloLcPyo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h21m21s" target="_blank" rel="nofollow noopener noreferrer">00:21:21</A>:</STRONG> Initial run of <CODE>index.js</CODE> shows that we have some work to do, not least creating a <CODE>day1.js</CODE> from the <CODE>day0.js</CODE> skeleton.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=V7UCloLcPyo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h21m39s" target="_blank" rel="nofollow noopener noreferrer">00:21:39</A>:</STRONG> Using <A href="https://en.wikipedia.org/wiki/Tmux" target="_blank" rel="nofollow noopener noreferrer">tmux</A> to let us see the execution output of our tests as well as the contents of what we're editing. My tmux configuration is <A href="https://github.com/qmacro/scripts/blob/master/tmux.conf" target="_blank" rel="nofollow noopener noreferrer">available</A> online if you're interested, in my <A href="https://github.com/qmacro/scripts" target="_blank" rel="nofollow noopener noreferrer">scripts</A> repo.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=V7UCloLcPyo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h22m36s" target="_blank" rel="nofollow noopener noreferrer">00:22:36</A>:</STRONG> Looking at the less than ideal situation of having to manually flip over from editor to runtime to test changes to the puzzle solutions.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=V7UCloLcPyo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h23m46s" target="_blank" rel="nofollow noopener noreferrer">00:23:46</A>:</STRONG> The answer here is <A href="https://github.com/remy/nodemon" target="_blank" rel="nofollow noopener noreferrer">nodemon</A> which we install directly into our project as a dev dependency, with <CODE>npm i nodemon --save-dev</CODE>, looking at the addition to the <CODE>package.json</CODE> that this caused.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=V7UCloLcPyo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h24m27s" target="_blank" rel="nofollow noopener noreferrer">00:24:27</A>:</STRONG> First run of <CODE>nodemon</CODE> directly, using the path via the project's <CODE>node_modules</CODE> directory (<CODE>node_modules/nodemon/bin/nodemon.js</CODE>) which will automatically run the existing <CODE>index.js</CODE> and rerun it if anything is modified.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=V7UCloLcPyo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h26m02s" target="_blank" rel="nofollow noopener noreferrer">00:26:02</A>:</STRONG> Reminding ourselves of the challenge at hand, and considering an "old fashioned" approach with a for-loop, adding one such loop to the <CODE>a</CODE> function (as this is part 1 from this day's pair of puzzles).<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=V7UCloLcPyo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h27m12s" target="_blank" rel="nofollow noopener noreferrer">00:27:12</A>:</STRONG> First, simply getting <CODE>a</CODE> to return the input so we can see and confirm what the function is receiving and must act upon.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=V7UCloLcPyo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h28m02s" target="_blank" rel="nofollow noopener noreferrer">00:28:02</A>:</STRONG> Using a shortcut to get to my Vim configuration, so we can examine an alternative way of saving file content (with <CODE>&lt;leader&gt;w</CODE>). Check out my entire Vim config in my <A href="https://github.com/qmacro/dotvim" target="_blank" rel="nofollow noopener noreferrer">dotvim</A> repo online.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=V7UCloLcPyo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h28m45s" target="_blank" rel="nofollow noopener noreferrer">00:28:45</A>:</STRONG> Just going for a first attempt, in the knowledge that something with the input data isn't yet quite right. Building a simple for-loop as the basis for the solution first.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=V7UCloLcPyo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h29m32s" target="_blank" rel="nofollow noopener noreferrer">00:29:32</A>:</STRONG> Talking about <CODE>fold</CODE> and its close relation to <CODE>reduce</CODE> (they're pretty much the same thing, see <A href="https://en.wikipedia.org/wiki/Fold_(higher-order_function)" target="_blank" rel="nofollow noopener noreferrer">Fold (higher-order function)</A>).<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=V7UCloLcPyo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h30m32s" target="_blank" rel="nofollow noopener noreferrer">00:30:32</A>:</STRONG> Seeing the result of the data not being quite right ... JavaScript is taking the values literally, i.e. is adding the strings together. We therefore have to turn the strings into numbers which we do with the <CODE>Number</CODE> class. We get the right answer now.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=V7UCloLcPyo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h31m32s" target="_blank" rel="nofollow noopener noreferrer">00:31:32</A>:</STRONG> Referencing <A href="https://lukesmith.xyz/" target="_blank" rel="nofollow noopener noreferrer">Luke Smith</A> from whom I've learned a great deal in the *nix shell and tools configuration area.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=V7UCloLcPyo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h32m11s" target="_blank" rel="nofollow noopener noreferrer">00:32:11</A>:</STRONG> Getting rid of the for-loop to embrace a modicum of functional programming, using <A href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map" target="_blank" rel="nofollow noopener noreferrer"><CODE>map</CODE></A> and also <A href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce" target="_blank" rel="nofollow noopener noreferrer"><CODE>reduce</CODE></A>. Also a quick look at the fat-arrow syntax for function definitions, not requiring curly braces to denote a block or even a return statement (if there's only a single expression to evaluate).<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=V7UCloLcPyo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h35m27s" target="_blank" rel="nofollow noopener noreferrer">00:35:27</A>:</STRONG> Copying in the real puzzle input, using <A href="https://langui.sh/2010/11/14/pbpaste-pbcopy-in-mac-os-x-or-terminal-clipboard-fun/" target="_blank" rel="nofollow noopener noreferrer"><CODE>pbpaste</CODE></A> and rerunning the solution, which gives us the correct answer.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=V7UCloLcPyo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h36m22s" target="_blank" rel="nofollow noopener noreferrer">00:36:22</A>:</STRONG> Getting ready to solve part 2 of this puzzle.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=V7UCloLcPyo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h38m29s" target="_blank" rel="nofollow noopener noreferrer">00:38:29</A>:</STRONG> Examining the details of part 2.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=V7UCloLcPyo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h40m44s" target="_blank" rel="nofollow noopener noreferrer">00:40:44</A>:</STRONG> Starting to build the solution to part 2 in the <CODE>b</CODE> function. We use the rather stylish (IMHO) <CODE>xs</CODE> as the parameter name for the input. "X over XS" is a phrase I remember fondly from Erik Meijer's wonderful videos on Functional Programming, F# and Haskell which you can find on YouTube here: <A href="https://www.youtube.com/playlist?list=PLoJC20gNfC2gpI7Dl6fg8uj1a-wfnWTH8" target="_blank" rel="nofollow noopener noreferrer">Haskell - Functional Programming Fundamentals (Dr. Erik Meijer)</A>.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=V7UCloLcPyo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h42m02s" target="_blank" rel="nofollow noopener noreferrer">00:42:02</A>:</STRONG> Switching back to the test input ready to code and test our solution for this part 2.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=V7UCloLcPyo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h42m42s" target="_blank" rel="nofollow noopener noreferrer">00:42:42</A>:</STRONG> Starting to build out the <CODE>b</CODE> function, looking at a functional approach, and using the concept of a <A href="https://en.wikipedia.org/wiki/Closure_(computer_programming)" target="_blank" rel="nofollow noopener noreferrer">closure</A> which is a super powerful idea which is implemented in many languages including of course JavaScript.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=V7UCloLcPyo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h44m12s" target="_blank" rel="nofollow noopener noreferrer">00:44:12</A>:</STRONG> We create the closure in the form of an Immediately Invoked Function Expression (IIFE) which you can find details about here: <A class="uri" href="https://developer.mozilla.org/en-US/docs/Glossary/IIFE" target="_blank" rel="nofollow noopener noreferrer">https://developer.mozilla.org/en-US/docs/Glossary/IIFE</A>.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=V7UCloLcPyo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h46m49s" target="_blank" rel="nofollow noopener noreferrer">00:46:49</A>:</STRONG> We now have a little function that has some memory, that we can use to check whether we've already seen a value or not. We evaluate the call to the lambda function (immediately invoke it) and capture the returned value in the <CODE>seen</CODE> constant - this value is actually the function that is defined, taking a single parameter <CODE>x</CODE>, directly following the <CODE>return</CODE> statement:<BR />
<DIV><BR />
<PRE class="sourceCode javascript"><CODE class="sourceCode javascript"><SPAN class="kw">const</SPAN> seen <SPAN class="op">=</SPAN> (() <SPAN class="op">=&gt;</SPAN> <SPAN class="op">{</SPAN><BR />
  <SPAN class="kw">const</SPAN> values <SPAN class="op">=</SPAN> []<BR />
  <SPAN class="cf">return</SPAN> x <SPAN class="op">=&gt;</SPAN> <SPAN class="op">{</SPAN><BR />
    <SPAN class="cf">if</SPAN> (<SPAN class="va">values</SPAN>.<SPAN class="at">indexOf</SPAN>(x) <SPAN class="op">&gt;</SPAN> <SPAN class="op">-</SPAN><SPAN class="dv">1</SPAN>) <SPAN class="op">{</SPAN><BR />
      <SPAN class="cf">return</SPAN> <SPAN class="kw">true</SPAN><BR />
    <SPAN class="op">}</SPAN> <SPAN class="cf">else</SPAN> <SPAN class="op">{</SPAN><BR />
      <SPAN class="va">values</SPAN>.<SPAN class="at">push</SPAN>(x)<BR />
      <SPAN class="cf">return</SPAN> <SPAN class="kw">false</SPAN><BR />
    <SPAN class="op">}</SPAN><BR />
  <SPAN class="op">}</SPAN><BR />
<SPAN class="op">}</SPAN>)()</CODE></PRE><BR />
</DIV><BR />
<STRONG><A href="https://www.youtube.com/watch?v=V7UCloLcPyo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h50m12s" target="_blank" rel="nofollow noopener noreferrer">00:50:12</A>:</STRONG> We try this out with the following test invocation: <CODE>return [1, 2, 3, 2, 1].map(seen)</CODE> which gives us, correctly, <CODE>[ false, false, false, true, true ]</CODE>.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=V7UCloLcPyo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h51m02s" target="_blank" rel="nofollow noopener noreferrer">00:51:02</A>:</STRONG> Now we start to build out the latter part of this solution, that uses <CODE>seen</CODE>. Starting with an initial frequency of 0, iterating over the list of frequencies with a view to having to wrap around in case the list is exhausted before we get to the solution (which it will be) - modulo arithmetic is required here.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=V7UCloLcPyo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h52m57s" target="_blank" rel="nofollow noopener noreferrer">00:52:57</A>:</STRONG> Now we bring in the real input again, and run the solution upon it, and the answer it returns is the correct one (hurray). Adding a bit of code to count how many frequency changes the solution must iterate through shows a value of more than 139k!
