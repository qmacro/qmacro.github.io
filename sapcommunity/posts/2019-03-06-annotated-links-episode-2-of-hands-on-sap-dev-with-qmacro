2019-03-06-annotated-links-episode-2-of-hands-on-sap-dev-with-qmacro
Annotated links: Episode 2 of Hands-on SAP dev with qmacro
technology-blog-sap
2019-03-06
https://community.sap.com/t5/technology-blogs-by-sap/annotated-links-episode-2-of-hands-on-sap-dev-with-qmacro/ba-p/13411298
<EM>This is a searchable description of the content of a live stream recording, specifically <STRONG>"Episode 2 - Starting to build a bookshop backend service with CAPM"</STRONG> in the "<A href="https://bit.ly/handsonsapdev" target="_blank" rel="nofollow noopener noreferrer">Hands-on SAP dev with qmacro</A>" series. There are links directly to specific highlights in the video recording. For links to annotations of other episodes, please see the "<A href="https://bit.ly/handsonsapdev#replays" target="_blank" rel="nofollow noopener noreferrer">Catch the replays</A>" section of the series blog post.</EM><BR />
<BR />
This episode, titled "<A href="https://bit.ly/handsonsapdev#ep2" target="_blank" rel="nofollow noopener noreferrer">Starting to build a bookshop backend service with CAPM</A>", was streamed live on Fri 01 Feb 2019 and is approximately one hour in length. The stream recording is <A href="https://www.youtube.com/watch?v=583eQZFfWgE&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0" target="_blank" rel="nofollow noopener noreferrer">available on YouTube</A>.<BR />
<H2 id="toc-hId-929694591"><IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2019/03/Screen-Shot-2019-03-06-at-17.33.07.png" /></H2><BR />
&nbsp;<BR />
<BR />
Below is a brief synopsis, and links to specific highlights - use these links to jump directly to particular places of interest in the recording, based on 'hh:mm:ss' style timestamps.<BR />
<H2 id="toc-hId-733181086">Brief synopsis</H2><BR />
In the <A href="https://bit.ly/handsonsapdev#ep1" target="_blank" rel="nofollow noopener noreferrer">previous episode</A> we set up our tools and development environment ready for some SAP Cloud Application Programming Model (CAPM) action of the Node.js (JavaScript) flavour. So now we’re ready to start exploring our first data and service definitions in the language of CAPM, i.e. CDS (Core Data &amp; Services).<BR />
<BR />
We follow the “<A href="https://developers.sap.com/tutorials/cp-apm-nodejs-create-service.html" target="_blank" rel="noopener noreferrer">Create a Business Service with Node.js using Visual Studio Code</A>” tutorial on the SAP Developers tutorial navigator and start to explore what CAPM and CDS can do for us.<BR />
<H2 id="links-to-specific-highlights" id="toc-hId-536667581">Links to specific highlights</H2><BR />
<STRONG><A href="https://www.youtube.com/watch?v=583eQZFfWgE&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h06m15s" target="_blank" rel="nofollow noopener noreferrer">00:06:15</A>:</STRONG> This time I'm holding my coffee mug the right way round to show the <A href="https://anchor.fm/sap-community-podcast" target="_blank" rel="nofollow noopener noreferrer">Coffee Corner Radio</A> podcast logo to the camera!<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=583eQZFfWgE&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h06m46s" target="_blank" rel="nofollow noopener noreferrer">00:06:46</A>:</STRONG> A recap of what we did in <A href="https://bit.ly/handsonsapdev#ep1" target="_blank" rel="nofollow noopener noreferrer">the previous episode</A> and how far into the tutorial we got.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=583eQZFfWgE&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h08m55s" target="_blank" rel="nofollow noopener noreferrer">00:08:55</A>:</STRONG> Talking about what we get out of the box from CAP - built in core services for CRUD+Q, not boilerplate code that we must take over and manage ourselves.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=583eQZFfWgE&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h10m05s" target="_blank" rel="nofollow noopener noreferrer">00:10:05</A>:</STRONG> Starting the CAP project with <CODE>cds init my-bookshop</CODE>.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=583eQZFfWgE&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h10m50s" target="_blank" rel="nofollow noopener noreferrer">00:10:50</A>:</STRONG> Looking at what was installed when we installed the <CODE><a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a>/cds</CODE> package and wondering why the <CODE><a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a>/generator-cds</CODE> package has a different name pattern (all the other packages are <CODE>cds-...</CODE>). On this subject, Fred later makes what I think is a nice oblique reference to <A href="https://en.wikipedia.org/wiki/Conway%27s_law" target="_blank" rel="nofollow noopener noreferrer">Conway's Law</A>: "<EM>Organizations which design systems ... are constrained to produce designs which are copies of the communication structures of these organizations</EM>".<BR />
<BR />
Talking of <CODE><a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a>/generator-cds</CODE>, we can see that this provides a "binary" (executable) <CODE>cds-gen</CODE> by looking at the output of <CODE>npm info <a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a>/generator</CODE>. This is used in turn by the <CODE>cds</CODE> command.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=583eQZFfWgE&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h11m55s" target="_blank" rel="nofollow noopener noreferrer">00:11:55</A>:</STRONG> Taking a first quick look at what's been generated in the <CODE>my-bookshop</CODE> project, and noting that the <CODE>README.md</CODE> file contains a tutorial similar to what we're following here. We also briefly explore the <CODE><a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a></CODE> packages inside the <CODE>node_modules</CODE> directory, especially the "binaries" in the <CODE>.bin</CODE> directory such as <CODE>cds</CODE>, <CODE>cds-gen</CODE>, <CODE>cdsc</CODE>, <CODE>mime</CODE> and <CODE>uuid</CODE>.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=583eQZFfWgE&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h15m02s" target="_blank" rel="nofollow noopener noreferrer">00:15:02</A>:</STRONG> Initialising this project as a git repository so we can see and track changes, and then opening up the project in VS Code.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=583eQZFfWgE&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h16m50s" target="_blank" rel="nofollow noopener noreferrer">00:16:50</A>:</STRONG> Looking at some VS Code specific items that have been created as part of the <CODE>cds init</CODE> based project generation, in particular the contents of the <CODE>.vscode</CODE> directory, relating to the launch and debug facilities that VS Code offers.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=583eQZFfWgE&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h17m45s" target="_blank" rel="nofollow noopener noreferrer">00:17:45</A>:</STRONG> Creating the <CODE>cat-service.cds</CODE> file in the <CODE>srv</CODE> directory, and noticing immediately what the extension for CDS is doing for us (in terms of highlighting errors and even suggesting completions).<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=583eQZFfWgE&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h19m00s" target="_blank" rel="nofollow noopener noreferrer">00:19:00</A>:</STRONG> Thinking about what we're doing with this first line:<BR />
<PRE><CODE>using { Country, managed } from '@sap/cds/common';</CODE></PRE><BR />
This refers to <CODE>common.cds</CODE> inside the <CODE><a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a>/cds</CODE> package itself; the file provides some basic types and definitions that are common to many projects. Definitions for languages, currencies and countries are in this file, for example. We explore this <CODE>common.cds</CODE> file here, looking at the <CODE>managed</CODE> type and the concept of <A href="https://help.sap.com/viewer/65de2977205c403bbc107264b8eccf4b/Cloud/en-US/40582e7bbeca4311b0b165c8b9745094.html" target="_blank" rel="noopener noreferrer">aspects</A>.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=583eQZFfWgE&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h23m39s" target="_blank" rel="nofollow noopener noreferrer">00:23:39</A>:</STRONG> Noting the convention for names of entity definitions is capitalised and in the plural (e.g. "Books") - this comes from CAP Best Practices - see the <A href="https://help.sap.com/viewer/65de2977205c403bbc107264b8eccf4b/Cloud/en-US/8fd8fa7687504f2aaa4bf6670cfad1ea.html" target="_blank" rel="noopener noreferrer">Using our Naming Conventions</A> section.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=583eQZFfWgE&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h25m38s" target="_blank" rel="nofollow noopener noreferrer">00:25:38</A>:</STRONG> Using the F8 shortcut to jump between errors that have been found in the CDS definition so far (which of course is because we're using the VS Code extension for the CDS language that is pointing out these nrrors).<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=583eQZFfWgE&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h28m25s" target="_blank" rel="nofollow noopener noreferrer">00:28:25</A>:</STRONG> Looking in detail at how the <CODE>managed</CODE> aspect is used on the definition of the <CODE>Orders</CODE> entity, and what that aspect brings to the entity in terms of extra fields that are automatically filled on certain events.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=583eQZFfWgE&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h32m05s" target="_blank" rel="nofollow noopener noreferrer">00:32:05</A>:</STRONG> Looking at the <CODE>sap.common</CODE> context, which is like a namespace, but within a file.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=583eQZFfWgE&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h35m58s" target="_blank" rel="nofollow noopener noreferrer">00:35:58</A>:</STRONG> Bringing up the integrated terminal (with the shortcut Ctrl-]`) and maximising it with a custom keyboard shortcut. Here we use <CODE>cds compile</CODE> to see what is produced. In fact we don't even use the <CODE>compile</CODE> command as that is the default, as we can see here:<BR />
<PRE><CODE>COMMANDS<BR />
<BR />
  c | compile    ...individual models (= the default)<BR />
  d | deploy     ...data models to a database<BR />
  s | serve      ...service models to REST clients<BR />
  b | build      ...whole modules or projects<BR />
  i | init       ...jump-starts a new project<BR />
  e | env        get/set current cds configuration<BR />
  r | repl       cds's read-eval-event-loop<BR />
  h | help       shows usage for cds and individual commands<BR />
  v | version    prints detailed version information</CODE></PRE><BR />
So invoking <CODE>cds srv/cat-service.cds</CODE> we get a whole load of output, which is in fact Core Schema Notation (CSN), specifically a plain JavaScript object representation thereof (there are different representations possible - see the <A href="https://help.sap.com/viewer/65de2977205c403bbc107264b8eccf4b/Cloud/en-US/73ac472d2cd048629cd592983d9ac56a.html" target="_blank" rel="noopener noreferrer">cds.compile</A> documentation for details).<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=583eQZFfWgE&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h36m57s" target="_blank" rel="nofollow noopener noreferrer">00:36:57</A>:</STRONG> But this is too much to wrap our heads around right now, so we look at what else we can do here. Looking in the <CODE>node_modules/.bin/</CODE> directory we see the <CODE>cdsc</CODE> executable which is the CDS compiler, and what the <CODE>cds</CODE> command uses for compilation. LET'S RUN IT! We see that it shows us all sorts of output in a help format, and we can explore what different types of compiler output are possible.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=583eQZFfWgE&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h38m50s" target="_blank" rel="nofollow noopener noreferrer">00:38:50</A>:</STRONG> The options we see translate into parameters available for the <CODE>cds compile</CODE> command, like this one which we run now: <CODE>cds srv/cat-service.cds --to sql</CODE> which perhaps is more palatable to us right now:<BR />
<PRE><CODE>CREATE TABLE my_bookshop_Authors (<BR />
  ID INTEGER,<BR />
  name NVARCHAR(5000),<BR />
  PRIMARY KEY(ID)<BR />
);<BR />
...</CODE></PRE><BR />
<STRONG><A href="https://www.youtube.com/watch?v=583eQZFfWgE&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h39m39s" target="_blank" rel="nofollow noopener noreferrer">00:39:39</A>:</STRONG> We can also do this for HANA, thus: <CODE>cds srv/cat-service.cds --to hana</CODE> which produces something like this:<BR />
<PRE><CODE>using MY_BOOKSHOP_BOOKS as MY_BOOKSHOP_BOOKS;<BR />
entity MY_BOOKSHOP_AUTHORS {<BR />
  key ID : Integer;<BR />
  NAME : String(5000);<BR />
  BOOKS : association[*] to MY_BOOKSHOP_BOOKS on BOOKS.AUTHOR_ID = ID;<BR />
};<BR />
...</CODE></PRE><BR />
<STRONG><A href="https://www.youtube.com/watch?v=583eQZFfWgE&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h40m44s" target="_blank" rel="nofollow noopener noreferrer">00:40:44</A>:</STRONG> Even though we don't even have a persistence layer (a database) yet, we can start this service up, with <CODE>cds run</CODE>, which we do now, and we see a local server start up, listening by default on port 4004 (there's a story behind why the port is 4004 ... and it's not because of the first commercial the Intel microprocessor as I'd thought ... but I'll leave that for another time :-)). We can change this port by setting the value of the <CODE>PORT</CODE> environmental variable too (e.g. <CODE>PORT=1234 cds run</CODE>).<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=583eQZFfWgE&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h44m10s" target="_blank" rel="nofollow noopener noreferrer">00:44:10</A>:</STRONG> Changing the service name from <CODE>CatalogService</CODE> to <CODE>Banana</CODE> we can see what effect this has on how the service is served.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=583eQZFfWgE&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h44m50s" target="_blank" rel="nofollow noopener noreferrer">00:44:50</A>:</STRONG> We now examine the output from <CODE>cds run</CODE> and make sure we understand what's going on:<BR />
<PRE><CODE>[cds] - server listens at <A href="http://localhost:4004" target="test_blank" rel="nofollow noopener noreferrer">http://localhost:4004</A><BR />
[cds] - serving CatalogService at /catalog<BR />
[cds] - service definitions loaded from:<BR />
<BR />
  srv/cat-service.cds<BR />
  node_modules/@sap/cds/common.cds<BR />
<BR />
[cds] - launched in: 1350.885ms</CODE></PRE><BR />
The service definitions are loaded of course not only from our <CODE>srv/cat-service.cds</CODE> file but also the <CODE>common.cds</CODE> file that we're using for the <CODE>Country</CODE> and <CODE>managed</CODE> definitions.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=583eQZFfWgE&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h45m30s" target="_blank" rel="nofollow noopener noreferrer">00:45:30</A>:</STRONG> We can now explore what has been generated and is running for us (in the form of the OData V4 service document and metadata document), even though we have only a very simple definition, and no data!<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=583eQZFfWgE&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h45m35s" target="_blank" rel="nofollow noopener noreferrer">00:45:35</A>:</STRONG> Slightly controversially I make known my dislike for the choice of font for the "Welcome to cds.services" at this point <span class="lia-unicode-emoji" title=":winking_face:">😉</span><BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=583eQZFfWgE&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h46m35s" target="_blank" rel="nofollow noopener noreferrer">00:46:35</A>:</STRONG> Thanks to a question from MEXICO_MAN we explore how we might define <EM>multiple</EM> services in a single CDS definition file at this point. We add a second service definition to <CODE>cat-service.cds</CODE>:<BR />
<PRE><CODE>service Mexico {<BR />
  entity Things {<BR />
    key ID : Integer;<BR />
    name   : String;<BR />
  }<BR />
}</CODE></PRE><BR />
and when we reinvoke <CODE>cds run</CODE> we see:<BR />
<PRE><CODE>[cds] - serving CatalogService at /catalog<BR />
[cds] - serving Mexico at /mexico</CODE></PRE><BR />
And we see the corresponding second group of links in the root web page. Nice!<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=583eQZFfWgE&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h52m40s" target="_blank" rel="nofollow noopener noreferrer">00:52:40</A>:</STRONG> Getting towards the end of this episode, we create a JavaScript based implementation of our service, by creating a file of the same name but with a <CODE>.js</CODE> extension, i.e. <CODE>cat-service.js</CODE>, in the same directory. By following this convention we can have the runtime use our JavaScript code to enhance the implementation of our definitions. This is Step 5 in the tutorial, by the way.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=583eQZFfWgE&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h54m35s" target="_blank" rel="nofollow noopener noreferrer">00:54:35</A>:</STRONG> Finally we extend the implementation of the function for <CODE>srv.on ('READ', 'Books', ...)</CODE> in the <CODE>cat-service.js</CODE> implementation by changing the body of the function from a single expression that is returning an array, to a block that executes a <CODE>console.log</CODE> statement, and then returns the array.<BR />
<BR />
After fixing an error due to the fact that I missed the definition of the "stock" property in the original Books entity definition, we can see the output from the <CODE>console.log</CODE> statement, which is a very small step towards a future investigation into logging and debugging (which we do in <A href="https://bit.ly/handsonsapdev#ep4" target="_blank" rel="nofollow noopener noreferrer">Episode 4</A>). Hurray!
