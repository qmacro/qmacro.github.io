2024-07-22-task-7-using-cql-in-an-unbound-function-implementation-july-developer
Task 7 - Using CQL in an unbound function implementation (July Developer Challenge - "Reverse APIs")
application-developmentforum-board
2024-07-22
https://community.sap.com/t5/application-development-discussions/task-7-using-cql-in-an-unbound-function-implementation-july-developer/td-p/13767476
<P>This is a task in the<SPAN>&nbsp;</SPAN><A href="https://community.sap.com/t5/application-development-blog-posts/2024-07-quot-reverse-apis-quot-sap-developer-challenge/ba-p/13749653" target="_blank">July Developer Challenge - "Reverse APIs"</A>.</P><P>This task sees you creating a third service, and a first API endpoint within that service. Unlike the previous two services this service will be a more fully formed OData service complete with some sample data. Ready?</P><H2 id="toc-hId-1020380253">Background</H2><P>The previous two services in this month's Developer Challenge,<SPAN>&nbsp;</SPAN>basic<SPAN>&nbsp;</SPAN>and<SPAN>&nbsp;</SPAN>plain, were fairly simple and only contained API endpoints that were based on simple functions and an action. There were no entities defined in the CDS model, no data, and no implicit, out-of-the-box CRUD+Q OData operations involved. Today's task is where that changes.</P><H3 id="toc-hId-952949467">Northwind and Northbreeze</H3><P>For this task and the rest of the tasks this month (there are 4 more after this one), you'll make available API endpoints that all revolve around a simple data model based off the famous Northwind service, various versions of which are running at<SPAN>&nbsp;</SPAN><A href="https://services.odata.org/" target="_blank" rel="nofollow noopener noreferrer">https://services.odata.org</A>. As you can see from the<SPAN>&nbsp;</SPAN><A href="https://services.odata.org/V4/Northwind/Northwind.svc/" target="_blank" rel="nofollow noopener noreferrer">OData V4 Northwind service's service document</A><SPAN>&nbsp;</SPAN>there are quite a few "collections", otherwise known by the OData term "entity sets", including:</P><UL><LI>Categories</LI><LI>CustomerDemographics</LI><LI>Customers</LI><LI>Employees</LI><LI>Orders</LI><LI>Categories</LI><LI>Products</LI><LI>Regions</LI><LI>Shippers</LI><LI>Suppliers</LI><LI>...</LI></UL><P>I like to keep things simple, and often turn to a simplified version that I like to call "Northbreeze" (<A href="https://www.google.com/search?q=geddit" target="_blank" rel="nofollow noopener noreferrer">geddit?</A>), where I just have three entity types, with relations between them:</P><UL><LI>Categories</LI><LI>Products</LI><LI>Suppliers</LI></UL><P>I have a live Northbreeze service running at<SPAN>&nbsp;</SPAN><A href="https://qmacro.cfapps.eu10.hana.ondemand.com/northbreeze" target="_blank" rel="nofollow noopener noreferrer">https://qmacro.cfapps.eu10.hana.ondemand.com/northbreeze</A><SPAN>&nbsp;</SPAN>and this is based on a simple CAP service that I've defined and made available in a GitHub repo at<SPAN>&nbsp;</SPAN><A href="https://github.com/qmacro/northbreeze" target="_blank" rel="nofollow noopener noreferrer">qmacro/northbreeze</A>. As you can see, there's no actual code, there's just:</P><UL><LI>the<SPAN>&nbsp;</SPAN><A href="https://github.com/qmacro/northbreeze/blob/main/db/schema.cds" target="_blank" rel="nofollow noopener noreferrer">schema-level definition of Categories, Products and Suppliers</A></LI><LI><A href="https://github.com/qmacro/northbreeze/tree/main/db/data" target="_blank" rel="nofollow noopener noreferrer">CSV based data</A><SPAN>&nbsp;</SPAN>to seed the three entity sets that correspond to those entity types</LI><LI>an extremely simple<SPAN>&nbsp;</SPAN><A href="https://github.com/qmacro/northbreeze/blob/main/srv/main.cds" target="_blank" rel="nofollow noopener noreferrer">service</A><SPAN>&nbsp;</SPAN>exposing those three entity types via direct projections</LI></UL><P>And that's pretty much it. Note that the<SPAN>&nbsp;</SPAN><A href="https://github.com/qmacro/northbreeze/tree/main/db/data" target="_blank" rel="nofollow noopener noreferrer">data</A><SPAN>&nbsp;</SPAN>reflects as accurately as possible the data in the original Northwind service, i.e. there are<SPAN>&nbsp;</SPAN><A href="https://github.com/qmacro/northbreeze/blob/main/db/data/northwind-Products.csv" target="_blank" rel="nofollow noopener noreferrer">77 products</A><SPAN>&nbsp;</SPAN>ranging from<SPAN>&nbsp;</SPAN><A href="https://qmacro.cfapps.eu10.hana.ondemand.com/northbreeze/Products/1?$expand=Supplier,Category" target="_blank" rel="nofollow noopener noreferrer">Chai, in the Beverages category, from the supplier Exotic Liquids</A><SPAN>&nbsp;</SPAN>to<SPAN>&nbsp;</SPAN><A href="https://qmacro.cfapps.eu10.hana.ondemand.com/northbreeze/Products/77?$expand=Supplier,Category" target="_blank" rel="nofollow noopener noreferrer">Original Frankfurter grüne Soße, in the Condiments category, from the supplier Plutzer Lebensmittelgroßmärkte AG</A>.</P><P>You can (and I recommend that you do) clone the repo and use that as a starting point for the service for this and the subsequent tasks in this challenge.</P><H2 id="toc-hId-627353243">The requirements</H2><P>Here are the specific requirements for this task.</P><P>The service must be served using the OData V4 protocol, with the (default) path prefix<SPAN>&nbsp;</SPAN>/odata/v4<SPAN>&nbsp;</SPAN>plus the service name<SPAN>&nbsp;</SPAN>northbreeze, i.e.:</P><DIV class=""><PRE>/odata/v4/northbreeze</PRE><DIV class=""><SPAN>You must make an API endpoint available that returns a sort of "product information" string. The endpoint has a single integer parameter</SPAN><SPAN>&nbsp;</SPAN><SPAN>id</SPAN><SPAN>&nbsp;</SPAN><SPAN>and the TESTER will make a call to the endpoint with the value of a product ID (it will be</SPAN><SPAN>&nbsp;</SPAN><A href="https://qmacro.cfapps.eu10.hana.ondemand.com/northbreeze/Products?$select=ProductID" target="_blank" rel="nofollow noopener noreferrer">between 1 and 77</A><SPAN>).</SPAN></DIV></DIV><P>It should return a string, formed thus:</P><P>&lt;name of the product&gt; by &lt;name of the supplier&gt;</P><P>For example, let's take the<SPAN>&nbsp;</SPAN><A href="https://qmacro.cfapps.eu10.hana.ondemand.com/northbreeze/Products(11)" target="_blank" rel="nofollow noopener noreferrer">Northbreeze product with the ID 11</A>:</P><UL><LI>the product name is<SPAN>&nbsp;</SPAN><A href="https://qmacro.cfapps.eu10.hana.ondemand.com/northbreeze/Products(11)/ProductName" target="_blank" rel="nofollow noopener noreferrer">Queso Cabrales</A></LI><LI>the name of the product's supplier is<SPAN>&nbsp;</SPAN><A href="https://qmacro.cfapps.eu10.hana.ondemand.com/northbreeze/Products(11)/Supplier/CompanyName" target="_blank" rel="nofollow noopener noreferrer">Cooperativa de Quesos 'Las Cabras'</A></LI></UL><P>So the call would be made to:</P><DIV class=""><PRE>/odata/v4/northbreeze/productInfo(<SPAN class="">id</SPAN>=11)</PRE><DIV class=""><SPAN>and the expected response should be:</SPAN></DIV></DIV><DIV class=""><PRE>{
  <SPAN class="">"@odata.context"</SPAN>: <SPAN class=""><SPAN class="">"</SPAN>$metadata#Edm.String<SPAN class="">"</SPAN></SPAN>,
  <SPAN class="">"value"</SPAN>: <SPAN class=""><SPAN class="">"</SPAN>Queso Cabrales by Cooperativa de Quesos 'Las Cabras'<SPAN class="">"</SPAN></SPAN>
}</PRE><DIV class=""><SPAN>By the way, looking back at the OData query operation URLs for the supplier of</SPAN><SPAN>&nbsp;</SPAN><SPAN>Queso Cabrales</SPAN><SPAN>&nbsp;</SPAN><SPAN>just now, did you know that for such scalar properties returned</SPAN><SPAN>&nbsp;</SPAN><EM>for OData query or read operations</EM><SPAN>&nbsp;</SPAN><SPAN>(CompanyName</SPAN><SPAN>&nbsp;</SPAN><SPAN>in this example) you can get the literal value on its own? Just append</SPAN><SPAN>&nbsp;</SPAN><SPAN>/$value</SPAN><SPAN>&nbsp;</SPAN><SPAN>to the URL, so that</SPAN></DIV></DIV><P><A href="https://qmacro.cfapps.eu10.hana.ondemand.com/northbreeze/Products(11)/Supplier/CompanyName" target="_blank" rel="nofollow noopener noreferrer">https://qmacro.cfapps.eu10.hana.ondemand.com/northbreeze/Products(11)/Supplier/CompanyName</A></P><P>becomes</P><P><A href="https://qmacro.cfapps.eu10.hana.ondemand.com/northbreeze/Products(11)/Supplier/CompanyName/$value" target="_blank" rel="nofollow noopener noreferrer">https://qmacro.cfapps.eu10.hana.ondemand.com/northbreeze/Products(11)/Supplier/CompanyName/$value</A></P><P>and you get</P><DIV class=""><PRE>Cooperativa de Quesos 'Las Cabras'</PRE><DIV class=""><SPAN>instead of</SPAN></DIV></DIV><DIV class=""><PRE>{
  <SPAN class="">"@odata.context"</SPAN>: <SPAN class=""><SPAN class="">"</SPAN>../../$metadata#Suppliers(5)/CompanyName<SPAN class="">"</SPAN></SPAN>,
  <SPAN class="">"value"</SPAN>: <SPAN class=""><SPAN class="">"</SPAN>Cooperativa de Quesos 'Las Cabras'<SPAN class="">"</SPAN></SPAN>
}</PRE></DIV><H3 id="toc-hId-559922457">The endpoint definition</H3><P>As you may have worked out by now, this API endpoint needs to be defined as an unbound function (yes, it could be implemented as a function bound to a particular product but we'll be doing that sort of thing in a later task).</P><P>When you have defined the endpoint, you should see evidence of it (productInfo) in the OData metadata, which should look like this (vastly reduced for brevity):</P><DIV class=""><PRE>&lt;?<SPAN class="">xml</SPAN><SPAN class=""> version</SPAN>=<SPAN class=""><SPAN class="">"</SPAN>1.0<SPAN class="">"</SPAN></SPAN><SPAN class=""> encoding</SPAN>=<SPAN class=""><SPAN class="">"</SPAN>utf-8<SPAN class="">"</SPAN></SPAN>?&gt;
&lt;<SPAN class="">edmx</SPAN><SPAN class="">:</SPAN><SPAN class="">Edmx</SPAN> <SPAN class="">Version</SPAN>=<SPAN class=""><SPAN class="">"</SPAN>4.0<SPAN class="">"</SPAN></SPAN> <SPAN class="">xmlns</SPAN><SPAN class="">:</SPAN><SPAN class="">edmx</SPAN>=<SPAN class=""><SPAN class="">"</SPAN>http://docs.oasis-open.org/odata/ns/edmx<SPAN class="">"</SPAN></SPAN>&gt;
  &lt;<SPAN class="">edmx</SPAN><SPAN class="">:</SPAN><SPAN class="">DataServices</SPAN>&gt;
    &lt;<SPAN class="">Schema</SPAN> <SPAN class="">Namespace</SPAN>=<SPAN class=""><SPAN class="">"</SPAN>northbreeze<SPAN class="">"</SPAN></SPAN> <SPAN class="">xmlns</SPAN>=<SPAN class=""><SPAN class="">"</SPAN>http://docs.oasis-open.org/odata/ns/edm<SPAN class="">"</SPAN></SPAN>&gt;
      &lt;<SPAN class="">EntityContainer</SPAN> <SPAN class="">Name</SPAN>=<SPAN class=""><SPAN class="">"</SPAN>EntityContainer<SPAN class="">"</SPAN></SPAN>&gt;
        &lt;<SPAN class="">EntitySet</SPAN> <SPAN class="">Name</SPAN>=<SPAN class=""><SPAN class="">"</SPAN>Products<SPAN class="">"</SPAN></SPAN> <SPAN class="">EntityType</SPAN>=<SPAN class=""><SPAN class="">"</SPAN>northbreeze.Products<SPAN class="">"</SPAN></SPAN>&gt;
          &lt;<SPAN class="">NavigationPropertyBinding</SPAN> <SPAN class="">Path</SPAN>=<SPAN class=""><SPAN class="">"</SPAN>Category<SPAN class="">"</SPAN></SPAN> <SPAN class="">Target</SPAN>=<SPAN class=""><SPAN class="">"</SPAN>Categories<SPAN class="">"</SPAN></SPAN>/&gt;
          &lt;<SPAN class="">NavigationPropertyBinding</SPAN> <SPAN class="">Path</SPAN>=<SPAN class=""><SPAN class="">"</SPAN>Supplier<SPAN class="">"</SPAN></SPAN> <SPAN class="">Target</SPAN>=<SPAN class=""><SPAN class="">"</SPAN>Suppliers<SPAN class="">"</SPAN></SPAN>/&gt;
        &lt;/<SPAN class="">EntitySet</SPAN>&gt;
        &lt;<SPAN class="">EntitySet</SPAN> <SPAN class="">Name</SPAN>=<SPAN class=""><SPAN class="">"</SPAN>Suppliers<SPAN class="">"</SPAN></SPAN> <SPAN class="">EntityType</SPAN>=<SPAN class=""><SPAN class="">"</SPAN>northbreeze.Suppliers<SPAN class="">"</SPAN></SPAN>&gt;
          &lt;<SPAN class="">NavigationPropertyBinding</SPAN> <SPAN class="">Path</SPAN>=<SPAN class=""><SPAN class="">"</SPAN>Products<SPAN class="">"</SPAN></SPAN> <SPAN class="">Target</SPAN>=<SPAN class=""><SPAN class="">"</SPAN>Products<SPAN class="">"</SPAN></SPAN>/&gt;
        &lt;/<SPAN class="">EntitySet</SPAN>&gt;
        &lt;<SPAN class="">FunctionImport</SPAN> <SPAN class="">Name</SPAN>=<SPAN class=""><SPAN class="">"</SPAN>productInfo<SPAN class="">"</SPAN></SPAN> <SPAN class="">Function</SPAN>=<SPAN class=""><SPAN class="">"</SPAN>northbreeze.productInfo<SPAN class="">"</SPAN></SPAN>/&gt;
      &lt;/<SPAN class="">EntityContainer</SPAN>&gt;
      &lt;<SPAN class="">Function</SPAN> <SPAN class="">Name</SPAN>=<SPAN class=""><SPAN class="">"</SPAN>productInfo<SPAN class="">"</SPAN></SPAN> <SPAN class="">IsBound</SPAN>=<SPAN class=""><SPAN class="">"</SPAN>false<SPAN class="">"</SPAN></SPAN> <SPAN class="">IsComposable</SPAN>=<SPAN class=""><SPAN class="">"</SPAN>false<SPAN class="">"</SPAN></SPAN>&gt;
        &lt;<SPAN class="">Parameter</SPAN> <SPAN class="">Name</SPAN>=<SPAN class=""><SPAN class="">"</SPAN>id<SPAN class="">"</SPAN></SPAN> <SPAN class="">Type</SPAN>=<SPAN class=""><SPAN class="">"</SPAN>Edm.Int32<SPAN class="">"</SPAN></SPAN>/&gt;
        &lt;<SPAN class="">ReturnType</SPAN> <SPAN class="">Type</SPAN>=<SPAN class=""><SPAN class="">"</SPAN>Edm.String<SPAN class="">"</SPAN></SPAN>/&gt;
      &lt;/<SPAN class="">Function</SPAN>&gt;
    &lt;/<SPAN class="">Schema</SPAN>&gt;
  &lt;/<SPAN class="">edmx</SPAN><SPAN class="">:</SPAN><SPAN class="">DataServices</SPAN>&gt;
&lt;/<SPAN class="">edmx</SPAN><SPAN class="">:</SPAN><SPAN class="">Edmx</SPAN>&gt;</PRE></DIV><H3 id="toc-hId-363408952">The endpoint implementation</H3><P>The idea of this task is to get you using some<SPAN>&nbsp;</SPAN><A href="https://cap.cloud.sap/docs/cds/cql" target="_blank" rel="nofollow noopener noreferrer">CQL</A>. In other words, you'll have to write a simple implementation for this unbound function, writing a handler for the<SPAN>&nbsp;</SPAN><A href="https://cap.cloud.sap/docs/guides/providing-services#hooks-on-before-after" target="_blank" rel="nofollow noopener noreferrer">on hook</A><SPAN>&nbsp;</SPAN>as usual, for the<SPAN>&nbsp;</SPAN>productInfo<SPAN>&nbsp;</SPAN>event.</P><H4 id="toc-hId-295978166">CQL</H4><P>If you're not sure where to start, I'd recommend the<SPAN>&nbsp;</SPAN><A href="https://cap.cloud.sap/docs/node.js/cds-ql" target="_blank" rel="nofollow noopener noreferrer">Querying in JavaScript</A><SPAN>&nbsp;</SPAN>section of Capire, in particular the<SPAN>&nbsp;</SPAN><A href="https://cap.cloud.sap/docs/node.js/cds-ql#select" target="_blank" rel="nofollow noopener noreferrer">SELECT class</A>. Within that<SPAN>&nbsp;</SPAN>SELECT<SPAN>&nbsp;</SPAN>section, you may want to pay particular attention to the following properties:</P><UL><LI><A href="https://cap.cloud.sap/docs/node.js/cds-ql#one" target="_blank" rel="nofollow noopener noreferrer">one</A></LI><LI><A href="https://cap.cloud.sap/docs/node.js/cds-ql#select-from" target="_blank" rel="nofollow noopener noreferrer">from</A></LI><LI><A href="https://cap.cloud.sap/docs/node.js/cds-ql#columns" target="_blank" rel="nofollow noopener noreferrer">columns</A></LI><LI><A href="https://cap.cloud.sap/docs/node.js/cds-ql#where" target="_blank" rel="nofollow noopener noreferrer">where</A></LI></UL><P>In particular, you'll have to work out how to get a property of a related entity. In other words, how do you express what you want, using the facilities such as path expressions or projection functions described in the<SPAN>&nbsp;</SPAN><A href="https://cap.cloud.sap/docs/node.js/cds-ql#columns" target="_blank" rel="nofollow noopener noreferrer">columns</A><SPAN>&nbsp;</SPAN>section. On this topic, you may find this blog post helpful:<SPAN>&nbsp;</SPAN><A href="https://qmacro.org/blog/posts/2024/07/12/turning-an-odata-expand-into-a-cds.ql-cql-query-with-a-projection-function-in-cap/" target="_blank" rel="nofollow noopener noreferrer">Turning an OData expand into a cds.ql CQL query with a projection function in CAP</A>.</P><H4 id="toc-hId-99464661">Using async/await</H4><P>One more tip: Up until now, you've defined your JavaScript function based handlers for functions and actions in quite a straightforward way. But now you're about to use the<SPAN>&nbsp;</SPAN><A href="https://cap.cloud.sap/docs/node.js/cds-ql#select" target="_blank" rel="nofollow noopener noreferrer">SELECT</A><SPAN>&nbsp;</SPAN>class, which by itself<SPAN>&nbsp;</SPAN><EM>defines</EM><SPAN>&nbsp;</SPAN>a query. It doesn't run it directly. If you read the<SPAN>&nbsp;</SPAN><A href="https://cap.cloud.sap/docs/node.js/cds-ql#executing-queries" target="_blank" rel="nofollow noopener noreferrer">Executing Queries</A><SPAN>&nbsp;</SPAN>section of Capire you'll see that "<EM>you can just await a constructed query, which by default passes the query to cds.db.run()</EM>". That means you can use<SPAN>&nbsp;</SPAN>await<SPAN>&nbsp;</SPAN>in front of your<SPAN>&nbsp;</SPAN>SELECT<SPAN>&nbsp;</SPAN>expression.</P><P>But that in turn means that your handler function needs to be defined as an asynchronous one, with<SPAN>&nbsp;</SPAN>async. If you're looking for some examples or inspiration, remember that there are some great CAP samples in the<SPAN>&nbsp;</SPAN><A href="https://github.com/SAP-samples" target="_blank" rel="nofollow noopener noreferrer">sap-samples</A><SPAN>&nbsp;</SPAN>org on GitHub. And remember also that GitHub has an excellent search mechanism, where you can express detailed contextual searches, like this one:</P><P><A href="https://github.com/search?q=org%3Asap-samples+language%3Ajs+%22await+SELECT%22+AND+%28path%3A%2Fsrv%2F%29&amp;type=code" target="_blank" rel="nofollow noopener noreferrer">org:sap-samples language:js "await SELECT" AND (path:/srv/)</A></P><P>Don't you just love it when you come across a well thought out URL scheme for this sort of search facility? Beautiful.</P><H4 id="toc-hId--97048844">Setting up for CQL</H4><P>Note that also, for this handler function and some of the subsequent ones in this service, you'll need a connection to the database layer, and a 'handle' on the<SPAN>&nbsp;</SPAN>Products<SPAN>&nbsp;</SPAN>entity definition (to use in your<SPAN>&nbsp;</SPAN>SELECT<SPAN>&nbsp;</SPAN>expressions, specifically with the<SPAN>&nbsp;</SPAN>.from()<SPAN>&nbsp;</SPAN>method). You can just use this classic pair of constant definitions, before you start to define your<SPAN>&nbsp;</SPAN>on<SPAN>&nbsp;</SPAN>handler:</P><DIV class=""><PRE><SPAN class="">const</SPAN> <SPAN class="">db</SPAN> <SPAN class="">=</SPAN> <SPAN class="">await</SPAN> <SPAN class="">cds</SPAN><SPAN class="">.</SPAN><SPAN class="">connect</SPAN><SPAN class="">.</SPAN><SPAN class="">to</SPAN><SPAN class="">(</SPAN><SPAN class="">'db'</SPAN><SPAN class="">)</SPAN>
<SPAN class="">const</SPAN> <SPAN class="">{</SPAN> Products <SPAN class="">}</SPAN> <SPAN class="">=</SPAN> <SPAN class="">db</SPAN><SPAN class="">.</SPAN><SPAN class="">entities</SPAN></PRE></DIV><H2 id="toc-hId--551727787">Submitting to the TESTER</H2><P>Now you're ready to submit your CANDIDATE service, with this new API endpoint, to the TESTER!</P><H3 id="toc-hId--619158573">The payload</H3><P>The task identifier you need to supply in the payload of your submission is:<SPAN>&nbsp;</SPAN><STRONG>northbreeze-productInfo</STRONG>.</P><P>You'll have already done this sort of thing<SPAN>&nbsp;</SPAN><A href="https://community.sap.com/t5/application-development-discussions/july-developer-challenge-quot-reverse-apis-quot-task-1-your-first-service/m-p/13752205" target="_blank">previously</A><SPAN>&nbsp;</SPAN>so just head back there for the more detailed instructions if you need them, or to the the section titled "<A href="https://community.sap.com/t5/application-development-blog-posts/2024-07-quot-reverse-apis-quot-sap-developer-challenge/ba-p/13749653#toc-hId--553513390" target="_blank">The Tester service, and making a test request</A>" in the<SPAN>&nbsp;</SPAN><A href="https://community.sap.com/t5/application-development-blog-posts/2024-07-quot-reverse-apis-quot-sap-developer-challenge/ba-p/13749653" target="_blank">main challenge blog post</A>.</P><P>You'll need to submit a JSON payload like this:</P><DIV class=""><PRE>{
  <SPAN class="">"communityid"</SPAN>: <SPAN class=""><SPAN class="">"</SPAN>&lt;your-community-id&gt;<SPAN class="">"</SPAN></SPAN>,
  <SPAN class="">"serviceurl"</SPAN>: <SPAN class=""><SPAN class="">"</SPAN>&lt;the-URL-of-your-service&gt;<SPAN class="">"</SPAN></SPAN>,
  <SPAN class="">"task"</SPAN>: <SPAN class=""><SPAN class="">"</SPAN>northbreeze-productInfo<SPAN class="">"</SPAN></SPAN>
}</PRE><DIV class=""><SPAN>And, just as with the previous (and all further tasks):</SPAN></DIV></DIV><UL><LI><P>the value for the<SPAN>&nbsp;</SPAN>communityid<SPAN>&nbsp;</SPAN>property should be your ID on this SAP Community platform (e.g. mine is "qmacro")</P></LI><LI><P>the value for the<SPAN>&nbsp;</SPAN>serviceurl<SPAN>&nbsp;</SPAN>property should be the absolute URL (i.e. including the scheme), of your CANDIDATE<SPAN>&nbsp;</SPAN><STRONG>service</STRONG><SPAN>&nbsp;</SPAN>which<SPAN>&nbsp;</SPAN><EM>contains</EM><SPAN>&nbsp;</SPAN>the API endpoint (see<SPAN>&nbsp;</SPAN><A href="https://community.sap.com/t5/application-development-blog-posts/2024-07-quot-reverse-apis-quot-sap-developer-challenge/ba-p/13749653#toc-hId--356999885" target="_blank"><span class="lia-unicode-emoji" title=":information:">ℹ️</span><SPAN>&nbsp;</SPAN>A note on URLs and services</A>).</P></LI></UL><P>That's it!</P><H2 id="toc-hId--597500440">Logging of test results</H2><P>Remember that you can check on your progress, and the progress of your fellow participants - all requests are logged and are available in an entity set served by the TESTER service. The entity set URL is<SPAN>&nbsp;</SPAN><A href="https://developer-challenge-2024-07.cfapps.eu10.hana.ondemand.com/tester/Testlog" target="_blank" rel="nofollow noopener noreferrer">https://developer-challenge-2024-07.cfapps.eu10.hana.ondemand.com/tester/Testlog</A><SPAN>&nbsp;</SPAN>and being an OData V4 entity set, all the normal OData system query options are available to you for digging into that information.</P><P>Until the next task, have fun, and if you have any questions or comments, leave them below!</P>
