2018-11-12-monday-morning-thoughts-longevity-and-loose-coupling
Monday morning thoughts: longevity and loose coupling
technology-blog-sap
2018-11-12
https://community.sap.com/t5/technology-blogs-by-sap/monday-morning-thoughts-longevity-and-loose-coupling/ba-p/13365146
<EM>In this post, I think about the importance of core technologies, and how the arrival of functions-as-a-service might be merely the next incarnation of an idea that's existed for a while.</EM><BR />
<BR />
This weekend I picked up on a conversation about RSS (alternatively standing for RDF Site Summary, Really Simple Syndication and Rich Site Summary) and how authors should include the whole blog post contents in the RSS feed. There was some wonder within the conversation thread that RSS was still being used; despite the disappearance a few years ago of arguably the pre-eminent RSS reader, <A href="https://www.google.com/reader/about/" target="_blank" rel="nofollow noopener noreferrer">Google Reader</A>, RSS is alive and well and powering syndication &amp; sharing on the web even today. (If you want to know more about RSS, its history and its relation to OData, you might want to read "<A href="https://blogs.sap.com/2018/08/20/monday-morning-thoughts-odata/" target="_blank" rel="noopener noreferrer">Monday morning thoughts: OData</A>".)<BR />
<BR />
That got me thinking of the protocol upon which RSS relies - the venerable HyperText Transfer Protocol (HTTP). HTTP has been around for a long time, and in the same way that email has become a sort of universal mechanism for asynchronous communication, HTTP is a universal mechanism for all sorts of things. Why is that? Well, I think one reason is its beautiful simplicity. When HTTP first arrived on the scene, I remember being delighted by it and indeed by the similarities with email.<BR />
<BR />
&nbsp;<BR />
<BR />
<STRONG>The beautiful simplicity of email and HTTP</STRONG><BR />
<BR />
The official <A href="https://en.wikipedia.org/wiki/Request_for_Comments" target="_blank" rel="nofollow noopener noreferrer">request for comments</A> (RFC) document number <A href="https://www.ietf.org/rfc/rfc0822.txt" target="_blank" rel="nofollow noopener noreferrer">822</A>, from the Internet Engineering Task Force (IETF) describes, amongst other things, what an email looks like. There are headers, and a body - the email message, effectively. Headers are name:value pairs, and the headers are separated from the body by an empty line. Here's a simplified example:<BR />
<PRE id="raw_message_text" class="raw_message_text">Message-ID: &lt;23944892.154212220.SomeMail.root@2ea9232e1&gt;<BR />
From: Sender &lt;sender@example.com&gt;<BR />
To: recipient@example.com<BR />
Subject: The email subject line<BR />
Date: Sat, 10 Nov 2018 14:25:13 +0000 (UTC)<BR />
Content-Type: text/plain; charset=UTF-8<BR />
<BR />
Greetings, earthling!<BR />
<BR />
</PRE><BR />
In HTTP, described in RFC <A href="https://www.ietf.org/rfc/rfc2616.txt" target="_blank" rel="nofollow noopener noreferrer">2616</A>, messages are either requests or responses, and in both cases, the structure is the same: headers in the form of name:value pairs, an empty line, then the payload of the request or the response. Here's a simplified example of an HTTP request (this one doesn't have a payload) and the corresponding HTTP response:<BR />
<BR />
Request:<BR />
<PRE class="result notranslate">GET /qmacro/blog/ HTTP/1.1<BR />
User-Agent: Mozilla/5.0 (X11; CrOS x86_64 11151.17.0)<BR />
Host: pipetree.com<BR />
Accept-Language: en-gb<BR />
Accept-Encoding: gzip, deflate<BR />
Connection: Keep-Alive<BR />
<BR />
</PRE><BR />
Response:<BR />
<PRE class="result notranslate">HTTP/1.1 200 OK<BR />
Date: Mon, 12 Nov 2018 06:43:07 GMT<BR />
Server: Apache/2.4.18 (Ubuntu)<BR />
Content-Type: text/html; charset=utf-8<BR />
Content-Length: 10557<BR />
<BR />
&lt;!DOCTYPE HTML&gt;<BR />
&lt;html&gt;<BR />
&lt;head&gt;<BR />
&lt;title&gt;DJ's Weblog&lt;/title&gt;<BR />
<BR />
</PRE><BR />
There's a beauty in the simplicity and similarity across all these different examples - they follow the same pattern, even sharing some headers (such as Date and Content-Type), and above all they are human-readable*.<BR />
<BR />
*the advent of HTML email has made that a little more challenging, and brought about the death of many excellent text-only email clients such as (my favourite email client of all time) <A href="https://en.wikipedia.org/wiki/Mutt_(email_client)" target="_blank" rel="nofollow noopener noreferrer">mutt</A>, but that's a story for another time.<BR />
<BR />
There have been attempts at improving upon today's HTTP, and you can see those attempts in the form of <A href="https://www.chromium.org/spdy" target="_blank" rel="nofollow noopener noreferrer">SPDY</A> and HTTP/2.0. And of course we have web sockets and the WS protocol prefix being utilised between server and client (browser) ... but ultimately the core of HTTP remains strong and ubiquitous. Indeed, in the Las Vegas and Barcelona editions of one of my SAP TechEd sessions this year - LT106 "<A href="https://sessioncatalog.sapevents.com/go/agendabuilder.sessions/?l=192&amp;sid=62863&amp;locale=en_US" target="_blank" rel="nofollow noopener noreferrer">Understanding the Available Paths for Developers Throughout SAP</A>", I have exhorted the attendees to learn core technologies regardless of the path they take. One of these core technologies that I think everyone should learn is HTTP.<BR />
<BR />
&nbsp;<BR />
<BR />
<STRONG>Probot and Webhooks&nbsp;</STRONG><BR />
<BR />
Something else I looked into this weekend was a result of my attendance last week at <A href="https://london-2018.devrel.net" target="_blank" rel="nofollow noopener noreferrer">DevRelCon 2018 London</A>, where, amongst other things, I learned about all sorts of tools that <A href="https://github.com/" target="_blank" rel="nofollow noopener noreferrer">GitHub</A> has to offer above and beyond what I consider core (social coding via repository &amp; project management based around the distributed source code control system "git"). One of these tools is <A href="https://probot.github.io/" target="_blank" rel="nofollow noopener noreferrer">Probot</A>, which allows you to use apps to extend processes managed within GitHub.<BR />
<BR />
<IMG src="https://probot.github.io/assets/logo.png" alt="Probot logo" width="106" height="126" /><BR />
<BR />
<EM>The Probot character</EM><BR />
<BR />
The apps can be pre-built, or you can create your own. Essentially Probot is a layer built on top of a couple of fundamental mechanisms - <A href="https://developer.github.com/webhooks/" target="_blank" rel="nofollow noopener noreferrer">webhooks and the GitHub event API</A>, making it easier for these apps to be constructed.<BR />
<BR />
Let's look at webhooks for a minute. What are they? Think of webhooks as an architectural pattern based usage of HTTP. The concept of webhooks has been around for more than a decade - first invented and popularised by Jeff Lindsay - see his post "<A href="http://progrium.com/blog/2007/05/03/web-hooks-to-revolutionize-the-web/" target="_blank" rel="nofollow noopener noreferrer">Web hooks to revolutionize the web</A>" from 2007. He describes them as "user defined callbacks made with HTTP POST"*, and a core use case for webhooks at the time was to address the challenges of polling - the repeated requests one piece of software makes to another, asking, over and over again: "anything new?", "have you finished it yet?", "do you have anything for me?" and similar requests. The polling pattern is often the simplest to think about and implement, but it's rather wasteful and inefficient.<BR />
<BR />
*Interestingly, Jeff likens webhooks to <EM>pingbacks</EM>, which I wrote about in last week's post: "<A href="https://blogs.sap.com/2018/11/05/monday-morning-thoughts-on-starting-blogging/" target="_blank" rel="noopener noreferrer">Monday morning thoughts: on starting blogging</A>".<BR />
<BR />
Back in 2007 when Jeff described this architectural pattern, we immediately saw the possibilities of a web of event-driven services, loosely connected via HTTP. At that time, HTTP was the lingua franca of inter-application communication.<BR />
<BR />
Today, it still is. Look at the other half of what Probot is built upon - GitHub's event API. Want to have some checks automatically carried out when source code is updated?&nbsp;Want to trigger a process in your organisation when a pull request is made to a specific repository? Register a callback, to be executed when these events happen. The form of that execution is simply some code, somewhere, that responds to an HTTP request, a request that is made by the system that is raising the event (GitHub in this case), and making that HTTP POST to the callback endpoint you registered. Again, this is where knowing about the HTTP protocol in general, and understanding the nature of how HTTP server frameworks function, is an essential skill, in my opinion*.<BR />
<BR />
*one of the ideas that drove me originally to create the Alternative Dispatcher Layer (ADL) for the ABAP stack was the lovely similarity between HTTP server frameworks large and small, across different languages and environments. See "<A href="https://blogs.sap.com/2009/09/21/a-new-rest-handler-dispatcher-for-the-icf/" target="_blank" rel="noopener noreferrer">A new REST handler / dispatcher for the ICF</A>" and&nbsp;<SPAN class="mention-scrubbed">nigel.james</SPAN>'s presentation "<A href="https://www.slideshare.net/squarecloud/alternative-dispatcher-layer-overview-12170192" target="_blank" rel="nofollow noopener noreferrer">Alternative Dispatcher Layer Overview</A>" for a little bit of background reading.<BR />
<BR />
&nbsp;<BR />
<BR />
<STRONG>Functions-as-a-Service (FaaS)</STRONG><BR />
<BR />
Today's serverless paradigm is a utility computing model where cloud vendors (such as SAP) provide compute resources, dynamically managing the allocation according to load, and&nbsp;charging based directly (and only) on resources consumed, rather than on pre-allocated units. This is a perfect example of cloud native computing, and amongst other things, it allows, even encourages us to think in terms of small computational executions, and to construct solutions out of loosely coupled building blocks.<BR />
<BR />
I've written about FaaS in a previous post: "<A href="https://blogs.sap.com/2018/05/14/functions-what-functions/" target="_blank" rel="noopener noreferrer">Monday morning thoughts: functions - what functions?</A>" but I thought it was worth continuing the "loosely coupled" idea in this direction. The appeal of SAP's FaaS offering is especially interesting to us as folks who build enterprise business solutions because the serverless fabric extends into the business processes themselves, as we saw for example in the SAP TechEd 2018 Las Vegas keynote demo from&nbsp;<SPAN class="mention-scrubbed">jana.richter</SPAN>&nbsp;and&nbsp;<SPAN class="mention-scrubbed">ian.kimbell</SPAN>&nbsp;(see "<A href="https://www.youtube.com/watch?v=JDVDY1jMsuQ" target="_blank" rel="nofollow noopener noreferrer">Speed with Serverless Apps: SAP Cloud Platform Functions at SAP TechEd 2018</A>").<BR />
<BR />
Essentially we can see that there are commonalities between various FaaS solutions, not only with SAP but with the hyperscale providers too, on how code is invoked:<BR />
<UL><BR />
 	<LI>Triggers: you can invoke a function directly with an HTTP call</LI><BR />
 	<LI>Events: functions can be invoked as and when appropriate, based on the occurrence of various events, whether those events are <A href="https://help.sap.com/viewer/788fa4c7585e415187e347e904010cee/1808.500/en-US/82e97d5329044732af1efd996bfdc2ab.html" target="_blank" rel="noopener noreferrer">business related</A>&nbsp;or service related (for example - <A href="https://cloud.google.com/functions/docs/concepts/events-triggers" target="_blank" rel="nofollow noopener noreferrer">Google Cloud Functions offer events</A> based upon Cloud Storage and Cloud Pub/Sub)</LI><BR />
 	<LI>Timers: in a wonderful acknowledgement of the enduring nature of various Unix designs, you can use the language of&nbsp;<A href="https://en.wikipedia.org/wiki/Cron" target="_blank" rel="nofollow noopener noreferrer">cron</A>&nbsp;to <A href="https://help.sap.com/viewer/94fafb5bcf8f4c5cbdd0cdd8e358183c/Cloud/en-US/e5d2c92959b94b7e98612ca577cbba2e.html" target="_blank" rel="noopener noreferrer">schedule time-based invocations</A> of functions on SAP Cloud Platform</LI><BR />
</UL><BR />
Moreover, the commonality doesn't stop at the invocation level. At the end of the day, what are being invoked are functions, and the API is HTTP flavoured. Discrete functions with a well-defined, (well-loved, perhaps?) interface: The function receives the call and its context, in the form of an object representing the HTTP request, with the method, the URL path of the resource, the headers and any payload that is sent. It also receives an empty object representing the HTTP response, and it can and should populate that object appropriately, before "letting go" and allowing the server infrastructure take care of what happens after that.<BR />
<BR />
Note that the primary purpose of these loosely coupled HTTP-invoked functions is not always to return a rich response, but to perhaps perform some computation, store some data, change some state, as an appropriate reaction to the original event. These are not pure functions - many will have side effects (so it's appropriate for the method to be POST). But now I'm (semi-deliberately) mixing in functional programming concepts, which is a valid thing to think about here too, but perhaps I'll leave that for another time.<BR />
<BR />
&nbsp;<BR />
<BR />
<STRONG>Loose coupling and management</STRONG><BR />
<BR />
I'd like to end this post by encouraging you to think about the nature of this idea of loose coupling of functions, and event-based invocation. There's a huge amount of potential, and of flexibility, especially in the context of trying to keep the core clean (see "<A href="https://blogs.sap.com/2018/11/08/keep-the-core-clean-clarifying-points-from-bjorn-goerkes-keynote/" target="_blank" rel="noopener noreferrer">Keep the Core Clean: Clarifying Points from Björn Goerke’s Keynote</A>" by&nbsp;<SPAN class="mention-scrubbed">jerry.janda</SPAN>) by extending computation for business services in the cloud.<BR />
<BR />
One challenge is the management of the events and the functions written to be invoked at the events' occurrences. In a similar way to how we have to think about managing a large software project, with modules and libraries, we have to think about how we will go about managing this new style of resources.<BR />
<BR />
How will we retain an overview of what we have, and what is invoked when? Our tools should help us there to some extent. How do we manage the intersection of business process requirements and the triggering of actions and reactions? Perhaps that's more of a human-led activity that is only assisted by tools. I don't know yet. It's something that&nbsp;<SPAN class="mention-scrubbed">dahowlett</SPAN>&nbsp;and I touched upon at SAP TechEd 2018 Barcelona (see the audio content "<A href="https://www.youtube.com/watch?v=cFN5OQ2D9R8" target="_blank" rel="nofollow noopener noreferrer">Towards a more open SAP?</A>" that Den and I recorded at the event), and a topic that we should explore more together.<BR />
<BR />
&nbsp;<BR />
<BR />
If you learn about one thing this week, I hope I can make an argument for it to be about HTTP, and how you write HTTP services in the framework relating to your favourite language. As well as being a meditation on a now-venerable protocol, it will help you step into this new era of cloud computing.<BR />
<BR />
&nbsp;<BR />
<BR />
This post was brought to you by the prospect of a relaxing week off, by the distraction of the falling leaves outside, and by <A href="https://www.pactcoffee.com/coffees/asomuprisma" target="_blank" rel="nofollow noopener noreferrer">Pact Coffee's Asomuprisma</A>.<BR />
<BR />
&nbsp;<BR />
<BR />
Read more posts in this series here:&nbsp;<A href="https://blogs.sap.com/tag/mondaymorningthoughts/" target="_blank" rel="noopener noreferrer">Monday morning thoughts</A>.<BR />
<BR />
&nbsp;<BR />
<BR />
<EM>Update 20 Nov 2018: See James Governor's post "<A href="https://redmonk.com/jgovernor/2018/11/07/github-universe-2018-low-key-revolutionary/" target="_blank" rel="nofollow noopener noreferrer">GitHub Universe 2018: Low Key Revolutionary</A>" on the recent GitHub conference and more on serverless in relation to the recently released <A href="https://github.com/features/actions" target="_blank" rel="nofollow noopener noreferrer">GitHub Actions</A>.</EM>
