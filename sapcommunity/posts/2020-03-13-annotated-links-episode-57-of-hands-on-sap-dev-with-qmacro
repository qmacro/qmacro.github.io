2020-03-13-annotated-links-episode-57-of-hands-on-sap-dev-with-qmacro
Annotated links: Episode 57 of Hands-on SAP dev with qmacro
technology-blog-sap
2020-03-13
https://community.sap.com/t5/technology-blogs-by-sap/annotated-links-episode-57-of-hands-on-sap-dev-with-qmacro/ba-p/13428022
<EM>This is a searchable description of the content of a live stream recording, specifically <STRONG>“Ep.57 - Setting up our first Workflow definition on CF”</STRONG> in the “<A href="https://bit.ly/handsonsapdev" target="_blank" rel="nofollow noopener noreferrer">Hands-on SAP dev with qmacro</A>” series. There are links directly to specific highlights in the video recording. For links to annotations of other episodes, please see the “<A href="https://bit.ly/handsonsapdev#replays" target="_blank" rel="nofollow noopener noreferrer">Catch the replays</A>” section of the series blog post.</EM><BR />
<BR />
This episode was streamed live on Fri 13 Mar and is approximately 65 minutes in length. The stream recording is <A href="https://www.youtube.com/watch?v=ZE4P__ePFcM" target="_blank" rel="nofollow noopener noreferrer">available on YouTube</A>.<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/03/Screenshot-2020-03-13-at-16.24.18-1.png" /><BR />
<BR />
Brief synopsis: Now we have our Workflow tools set up on Cloud Foundry, it’s time to put them to use, with a simple workflow definition that we’ll create and deploy. What’s more, we dive into a little OAuth 2.0 adventure of discovery!<BR />
<BR />
<A href="https://www.youtube.com/watch?v=ZE4P__ePFcM&amp;t=00h02m55s" target="_blank" rel="nofollow noopener noreferrer">00:02:55</A> After a brief moment of fail on my part where I’d forgotten to reconfigure the mic settings since switching back to the MBP for this broadcast, my audio improves so that you can hear what I’m saying.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=ZE4P__ePFcM&amp;t=00h04m00s" target="_blank" rel="nofollow noopener noreferrer">00:04:00</A> Showing off my Asus Chromebox 3 (i5, 8GB RAM) which, unusually, is not in use so I can hold it up the camera.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=ZE4P__ePFcM&amp;t=00h04m40s" target="_blank" rel="nofollow noopener noreferrer">00:04:40</A> Switching to show <SPAN class="mention-scrubbed">thomas.jung</SPAN>’s <A href="https://www.linkedin.com/feed/update/urn:li:activity:6643842077400592386/" target="_blank" rel="nofollow noopener noreferrer">update</A> on LinkedIn about the SAP Community Coding Challenge Finalist Announcement (with a brief return to the mic fail as it’s configured on a per-scene basis). The announcement is on 17 Mar - and you can head on over to Tom’s scheduled live stream session <A href="https://www.youtube.com/watch?v=4riDYGR_t_o&amp;feature=youtu.be" target="_blank" rel="nofollow noopener noreferrer">here</A> to set a reminder. Find out more about the challenge series in Tom’s post “<A href="https://blogs.sap.com/2020/02/28/sap-community-coding-challenge-series/" target="_blank" rel="noopener noreferrer">SAP Community Coding Challenge Series</A>”.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=ZE4P__ePFcM&amp;t=00h07m15s" target="_blank" rel="nofollow noopener noreferrer">00:07:15</A> Mentioning a new live stream initiative, which is related to our Hands-on SAP dev series. It’s called <A href="https://www.youtube.com/playlist?list=PLfctWmgNyOIf9rXaZp9RSM2YVxAPGGthe" target="_blank" rel="nofollow noopener noreferrer">Brambleweeny Cluster Experiments</A> and it’s for exploring and learning about clouds, clusters and more, using the physical hardware medium of Raspberry Pi computers. I’ve not set a schedule up yet, and may just do this on a fairly ad-hoc basis, but in any case, watch out on my YouTube <A href="https://youtube.com/djadams-qmacro" target="_blank" rel="nofollow noopener noreferrer">home page</A> for upcoming live stream episodes and set reminders as appropriate. These topics are indeed relevant for us as developers and technicians in the SAP tech universe, and will become more so over time too.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=ZE4P__ePFcM&amp;t=00h09m20s" target="_blank" rel="nofollow noopener noreferrer">00:09:20</A> Looking at where we’d left off at the end of the last episode, with a fully deployed Workflow tools environment in my Cloud Foundry (CF) dev space, including the running <CODE>workflowtilesApprouter</CODE> app and the <CODE>workflowtilesFLP</CODE> app which is in the stopped status as the task (of deploying content to the portal service) had completed successfully.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=ZE4P__ePFcM&amp;t=00h12m00s" target="_blank" rel="nofollow noopener noreferrer">00:12:00</A> Jumping to the tiles in the Fiori Launchpad site, which are available (and to which we’re directed) at the <CODE>/cp.portal</CODE> path, as defined in the <CODE>xs-app.json</CODE>. Following this, I share some thoughts on how it’s important to properly understand OAuth in this context, i.e.&nbsp;in the context of exercising APIs on SAP Cloud Platform Cloud Foundry, to which end I intend to dig in a little bit to better grok how things fit together.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=ZE4P__ePFcM&amp;t=00h16m50s" target="_blank" rel="nofollow noopener noreferrer">00:16:50</A> To create a new workflow definition, and deploy it, we create a new Multi-Target Application template based project. This appears initially very empty, which makes sense as we haven’t defined any modules (or dependencies) yet. The entirety of the project looks like this:<BR />
<PRE><CODE>Episode57/<BR />
  |<BR />
  +-- mta.yaml</CODE></PRE><BR />
Even the <CODE>mta.yaml</CODE> contents are very minimal:<BR />
<PRE><CODE>ID: Episode57<BR />
_schema-version: '2.1'<BR />
version: 0.0.1</CODE></PRE><BR />
<A href="https://www.youtube.com/watch?v=ZE4P__ePFcM&amp;t=00h17m50s" target="_blank" rel="nofollow noopener noreferrer">00:17:50</A> Using the context menu, we add a new Workflow Module which then appears in our project, so that we have something recognisable (from working in the SAP Web IDE with the Workflow service on Neo in the past), within our MTA project. We end out with the simplest workflow definition possible (the flow starts and then immediately ends) but it’s enough for now. More importantly, this is what we end up with in our project structure:<BR />
<PRE><CODE>Episode57/<BR />
  |<BR />
  +-- SimpleWorkflow/<BR />
  |     |<BR />
  |     +-- forms/<BR />
  |     +-- sample-data/<BR />
  |     +-- scripts/<BR />
  |     +-- webcontent/<BR />
  |     +-- workflows/<BR />
  |           |<BR />
  |           +-- simpleworkflow.workflow<BR />
  |<BR />
  +-- mta.yaml</CODE></PRE><BR />
(At this point <SPAN class="mention-scrubbed">rsletta</SPAN> arrives on the scene, prompting me to remind folks of the SAP Online Track update he posted recently: <A href="https://www.youtube.com/watch?v=Q-2PcZx3F70" target="_blank" rel="nofollow noopener noreferrer">SAP Online Track - Weekly Update #2</A>.)<BR />
<BR />
We’ve seen this type of module before, as a ‘content deployment’ type - the <CODE>workflowtilesFLP</CODE> module is of type <CODE>com.sap.portal.content</CODE>, and this time we have a slightly more generic <CODE>com.sap.application.content</CODE> content deployment type that describes our <CODE>SimpleWorkflow</CODE> module.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=ZE4P__ePFcM&amp;t=00h20m50s" target="_blank" rel="nofollow noopener noreferrer">00:20:50</A> While we’re checking this type, we modify the name references for the workflow service instance in our <CODE>mta.yaml</CODE> which have been injected when we created the new <CODE>SimpleWorkflow</CODE> module, also changing the type of that resource to “existing” (<CODE>org.cloudfoundry.existing-service</CODE>).<BR />
<BR />
At this point, I also notice that the parameters in this resource definition, are probably not required if we’re specifying an existing service … but then forget to come back and test that theory. While writing up these annotations, I did test it, removing the <CODE>parameters</CODE> node of the <CODE>workflow</CODE> resource definition:<BR />
<PRE><CODE>resources:<BR />
  - name: workflow<BR />
    parameters:               &lt;--- removed<BR />
      service-plan: standard  &lt;--- removed<BR />
      service: workflow       &lt;--- removed<BR />
    type: org.cloudfoundry.existing-service</CODE></PRE><BR />
I can happily confirm that after removing these three lines the deployment still succeeded. Makes sense, right?<BR />
<BR />
<A href="https://www.youtube.com/watch?v=ZE4P__ePFcM&amp;t=00h22m50s" target="_blank" rel="nofollow noopener noreferrer">00:22:50</A> Having checked through everything we build and deploy the MTA (in the same way we would build and deploy any MTA) which causes the <CODE>simpleworkflow</CODE> workflow definition to be deployed to our instance of the workflow service.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=ZE4P__ePFcM&amp;t=00h24m55s" target="_blank" rel="nofollow noopener noreferrer">00:24:55</A> Checking the deployment log, we notice this line:<BR />
<BR />
<EM>Creating service key “SimpleWorkflow-workflow-credentials” for service “workflow”…</EM><BR />
<BR />
and we’ll see this new service key shortly.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=ZE4P__ePFcM&amp;t=00h25m25s" target="_blank" rel="nofollow noopener noreferrer">00:25:25</A> We see, in the Workflow Definitions app, that we now have this new <CODE>simpleworkflow</CODE> definition alongside a definition I’d deployed earlier this week (<CODE>orderprocess</CODE>) from another MTA project “OrderFlow”. We test the definition out by creating an instance of it, and all looks well (remember, we have to widen the status filter to be able to see instances in COMPLETED status).<BR />
<BR />
<A href="https://www.youtube.com/watch?v=ZE4P__ePFcM&amp;t=00h27m10s" target="_blank" rel="nofollow noopener noreferrer">00:27:10</A> At this point, our thoughts turn towards using the SAP API Business Hub, specifically to use the Workflow API to list those definitions. We’ve used the API Hub many times before, for example in the context of the Workflow API for Neo, and the context of the Business Rules API for Cloud Foundry. Here, there are a couple of differences worth mentioning:<BR />
<UL><BR />
 	<LI>The Workflow API for Neo uses Basic Authentication and (as a consequence) also requires the use of CSRF tokens</LI><BR />
 	<LI>The Business Rules API for Cloud Foundry divides the “API space” differently, in that it has separate API groups for designtime and runtime artifacts (think of this distinction as the difference between managing the artifacts in the repository - designtime - and actually invoking those APIs - runtime)</LI><BR />
</UL><BR />
Here, the Workflow API for CF, like all the APIs I’ve seen for CF, doesn’t use Basic Authentication, but uses OAuth 2.0. This is an open standard that goes way beyond what Basic Authentication has to offer, and supports not only authentication but also authorisation, and does that across multiple parties - users, agents (clients), authentication servers and resource servers. It’s an accomplished but complex standard … and because it’s at the heart of many things we’ll be doing on a day to day basis in real life with Cloud Foundry, it’s important to understand properly.<BR />
<BR />
Considering how the Business Rules APIs are organised, it’s worth noticing that the Workflow APIs are organised slightly differently. There’s no distinction between designtime and runtime (if you look at the <A href="https://api.sap.com/api/SAP_CP_Workflow_CF/resource" target="_blank" rel="noopener noreferrer">specifications on the API Hub</A> you’ll see that a single API endpoint covers definitions and instances for tasks, workflows and more) but there is a distinction between this main endpoint, known as the “Workflow REST API”, and the “Workflow OData API” which is (surprise surprise) an OData service for task collection management, used in the My Inbox app, for example.<BR />
<BR />
Actually, you can see these endpoints spelled out in the service key data, the relevant section of which looks like this:<BR />
<PRE><CODE>{<BR />
  "endpoints": {<BR />
    "workflow_odata_url": "https://api.workflow-sap.cfapps.eu10.hana.ondemand.com/workflow-service/odata",<BR />
    "workflow_rest_url": "https://api.workflow-sap.cfapps.eu10.hana.ondemand.com/workflow-service/rest"<BR />
  },<BR />
  ...<BR />
}</CODE></PRE><BR />
<A href="https://www.youtube.com/watch?v=ZE4P__ePFcM&amp;t=00h29m30s" target="_blank" rel="nofollow noopener noreferrer">00:29:30</A> Anyway, getting back to what we want to focus on here, which is an initial exploration of OAuth, specifically, as we’ll see shortly, the “Client Credentials Grant” flow. We start with the very convenient configurable “Environments” feature of the API Hub. We’ll be eventually able to summise, by poking this black box feature with a stick, that it performs the “Client Credentials Grant” flow on our behalf, which is nice.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=ZE4P__ePFcM&amp;t=00h30m50s" target="_blank" rel="nofollow noopener noreferrer">00:30:50</A> In order to complete an environment configuration (modulo the slight hiccup with that feature during the live stream), we need to take information from our service key data from the workflow service instance that we have.<BR />
<BR />
First, we need the starting endpoint URL, which is our EU10 specific one, i.e. <CODE><A href="https://api.workflow-sap.cfapps.eu10.hana.ondemand.com/workflow-service/rest" target="test_blank" rel="nofollow noopener noreferrer">https://api.workflow-sap.cfapps.eu10.hana.ondemand.com/workflow-service/rest</A></CODE>. This is, as you’ve probably spotted, exactly the value of our <CODE>workflow_rest_url</CODE> endpoint that we looked at earlier, within the <CODE>endpoints</CODE> section.<BR />
<BR />
Next, we need OAuth credentials, in the form of a client ID and secret. And, you guessed it, they’re also in the service key data, in the <CODE>uaa</CODE> section.<BR />
<BR />
The authentication endpoint is next, in the form of the “Token URL” (i.e.&nbsp;the URL that we’re going to send our request for a token to). This is (surprise surprise) also in the service key data, at the <CODE>uaa.url</CODE> node, and in our case it’s <CODE><A href="https://i347491trial.authentication.eu10.hana.ondemand.com" target="test_blank" rel="nofollow noopener noreferrer">https://i347491trial.authentication.eu10.hana.ondemand.com</A></CODE> which is based on the combination of the generic <CODE><A href="https://authentication.eu10.hana.ondemand.com" target="test_blank" rel="nofollow noopener noreferrer">https://authentication.eu10.hana.ondemand.com</A></CODE> URL with a hostname prefix reflecting my subaccount name <CODE>i347491trial</CODE>.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=ZE4P__ePFcM&amp;t=00h36m20s" target="_blank" rel="nofollow noopener noreferrer">00:36:20</A> Now that we have our “EU10” environment configured, we go to make an API call to list the workflow definitions, expecting to see the two we know about, i.e. <CODE>simpleworkflow</CODE> and <CODE>orderprocess</CODE>. We use the “Try out” facility for this API endpoint:<BR />
<PRE><CODE>GET /v1/workflow-definitions</CODE></PRE><BR />
BUT … this is what we get:<BR />
<PRE><CODE>{<BR />
  "error": {<BR />
    "message": "User does not have sufficient privileges."<BR />
  }<BR />
}</CODE></PRE><BR />
which accompanies an HTTP 403 response. Ouch! Why is this? Well, read on to find out. It will all make sense, when we dig into this a bit more.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=ZE4P__ePFcM&amp;t=00h37m20s" target="_blank" rel="nofollow noopener noreferrer">00:37:20</A> While trying to figure out why we get a 403 response (“Forbidden”, of course, learn your <A href="https://i347491trial.authentication.eu10.hana.ondemand.com" target="_blank" rel="nofollow noopener noreferrer">HTTP response codes</A> if you don’t know them already!), we go over to the subaccount level security settings and check that the role collection “workflow”, containing a myriad roles relating to workflow (WorkflowAdmin, WorkflowContextViewer, WorkflowDeveloper, et al.) giving me pretty much all access, is assigned to my user. Which it is.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=ZE4P__ePFcM&amp;t=00h38m45s" target="_blank" rel="nofollow noopener noreferrer">00:38:45</A> Taking a step back to look at the documentation at the top of this API endpoint, we see this:<BR />
<BR />
<EM>Roles permitted to execute this operation:</EM> <EM>- Global roles: WorkflowViewer, WorkflowAdmin, WorkflowDeveloper</EM> <EM>- Scope: WORKFLOW_DEFINITION_GET</EM><BR />
<BR />
The thing is, I have those roles listed, but <STRONG>I am not involved in the authentication flow here</STRONG>.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=ZE4P__ePFcM&amp;t=00h40m40s" target="_blank" rel="nofollow noopener noreferrer">00:40:40</A> Checking the SAP Help Portal, we see there are two sections relating to accessing workflow APIs using OAuth:<BR />
<UL><BR />
 	<LI><A href="https://help.sap.com/viewer/e157c391253b4ecd93647bf232d18a83/Cloud/en-US/9edeb36db8aa4628be092328e8810e5e.html" target="_blank" rel="noopener noreferrer">Access Workflow APIs Using OAuth 2.0 Authentication (Authorization Code Grant)</A></LI><BR />
 	<LI><A href="https://help.sap.com/viewer/e157c391253b4ecd93647bf232d18a83/Cloud/en-US/c2bd37c63dda47449e24b8830ba312f1.html" target="_blank" rel="noopener noreferrer">Access Workflow APIs Using OAuth 2.0 Authentication (Client Credentials Grant)</A></LI><BR />
</UL><BR />
While the “Authorization Code Grant” flow would involve me as a participant in the flow, what’s being used in the API Hub environment and what it does for us, is the “Client Credentials Grant” flow. This doesn’t involve any request to an end user (me) to supply credentials (my email address and password), so how could any roles assigned to me be relevant here? They’re not.<BR />
<BR />
The “Client Credentials Grant” flow is something we’ve actually seen - and used - before. It involves requesting an access token, using the client ID and secret, and then using that token as a bearer token in an authentication header when making the actual API calls. To refresh your memory, you might want to check out the annotation blog post for, or recording of, <A href="https://bit.ly/handsonsapdev#ep51" target="_blank" rel="nofollow noopener noreferrer">Ep.51 - More fun with Business Rules API and OAuth</A>.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=ZE4P__ePFcM&amp;t=00h43m00s" target="_blank" rel="nofollow noopener noreferrer">00:43:00</A> In this flow, it’s not any global roles that are relevant - it’s the <STRONG>scopes</STRONG> that are relevant, the scopes that are, in the form of so-called “authorities”, assigned to the service instance. And the scope that’s required in this particular case is, as we now know, “WORKFLOW_DEFINITION_GET”.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=ZE4P__ePFcM&amp;t=00h44m20s" target="_blank" rel="nofollow noopener noreferrer">00:44:20</A> So to solve the authentication issue we have, we need to add that scope to the service instance. We do that using the command line CF CLI <CODE>cf</CODE>.<BR />
<BR />
First, let’s see what service keys there are:<BR />
<PRE><CODE>-&gt; cf service-keys workflow<BR />
<BR />
Getting keys for service instance workflow as dj.adams@sap.com...<BR />
<BR />
name<BR />
OrderProcess-workflow-credentials<BR />
SimpleWorkflow--workflow-credentials</CODE></PRE><BR />
Now, let’s have a look at the second one specifically:<BR />
<PRE><CODE>-&gt; cf service-key workflow SimpleWorkflow-workflow-credentials<BR />
<BR />
Getting key SimpleWorkflow-workflow-credentials for service instance workflow as dj.adams@sap.com...<BR />
<BR />
{<BR />
 "content_endpoint": "https://api.workflow-sap.cfapps.eu10.hana.ondemand.com/workflow-deploy/rest/internal/v1",<BR />
 "endpoints": {<BR />
  "workflow_odata_url": "https://api.workflow-sap.cfapps.eu10.hana.ondemand.com/workflow-service/odata",<BR />
  "workflow_rest_url": "https://api.workflow-sap.cfapps.eu10.hana.ondemand.com/workflow-service/rest"<BR />
 },<BR />
 "html5-apps-repo": {<BR />
  "app_host_id": "1365363a-6e04-4f43-876a-67b81f32306e,1a5b93af-f1af-4acf-aee0-8c6cc8d3f315,8964e911-e35d-4cfd-972e-08e681a2df0f,9ea7410f-80ea-4b19-bbf0-4fca238ef098"<BR />
 },<BR />
 "saasregistryappname": "workflow",<BR />
 "sap.cloud.service": "com.sap.bpm.workflow",<BR />
 "uaa": {<BR />
  "apiurl": "https://api.authentication.eu10.hana.ondemand.com",<BR />
  "clientid": "sb-clone-9316c623-329a-4b3f-aacd-13cf03...",<BR />
  "clientsecret": "8f72614b-db26-42dd-9293-6139b1ffcecc$P-zEsLD...",<BR />
  "identityzone": "i347491trial",<BR />
  "identityzoneid": "119daf21-ae67-4ced-9bd3-5cddb5...",<BR />
  "sburl": "https://internal-xsuaa.authentication.eu10.hana.ondemand.com",<BR />
  "tenantid": "119daf21-ae67-4ced-9bd3-5cddb5...",<BR />
  "tenantmode": "dedicated",<BR />
  "uaadomain": "authentication.eu10.hana.ondemand.com",<BR />
  "url": "https://i347491trial.authentication.eu10.hana.ondemand.com",<BR />
  "verificationkey": "-----BEGIN PUBLIC KEY-----MIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAwThn6OO9kj0bchkOGkqYBnV1dQ3zU/xtj7Kj7nDd8nyRMcEWCtVzrzjzh- [ ] sRhlrzlRIEY82wRAZNGKMnw7cvCwNixcfcDJnjzgr2pJ+5/yDZUc0IXXyIWPZD+XdL+0EogC3d4+fqyvg/BF/F0t2hKHWr/UTXE6zrGhBKaL0d8rKfYd6olGWigFd+3+24CKI14zWVxUBtC+P9Fhngc9DRzkXqhxOK/EKn0HzSgotf5duq6Tmk9DCNM4sLW4+ERc6xzrgbeEexakabvax/Az9WZ4qhwgw+fwIhKIC7WLwCEJaRsW4m7NKkv+eJR2LKYesuQ9SVAJ3EXV86RwdnH4uAv7lQHsKURPVAQBlranSqyQu0EXs2N9OlWTxe+FyNkIvyZvoLrZl/CdlYc8AKxRm5rn2/88nkrYQ0XZSrnICM5FRWgVF2hn5KfZGwtBN85/D4Yck6B3ocMfyX7e4URUm9lRPQFUJGTXaZnEIge0R159HUwhTN1HvyXrs6uT1ZZmW+c3p47dw1+LmUf/hIf8zd+uvHQjIeHEJqxjqfyA8yqAFKRHKVFrwnwdMHIsRap2EKBhHMfeVf0P2th5C9MggYoGCvdIaIUgMBX3TtCdvGrcWML7hnyS2zkrlA8SoKJnRcRF2KxWKs355FhpHpzqyZflO5l98+O8wO...==-----END PUBLIC KEY-----",<BR />
  "xsappname": "clone-9316c623-329a-4b3f-aacd-13cf030e0216!b35963|workflow!b10150"<BR />
 }<BR />
}</CODE></PRE><BR />
<A href="https://www.youtube.com/watch?v=ZE4P__ePFcM&amp;t=00h45m35s" target="_blank" rel="nofollow noopener noreferrer">00:45:35</A> This is great, and we’ll use this shortly, but for now, we want to add that scope to the instance.<BR />
<BR />
We can do this with the CF cli again, like this:<BR />
<PRE><CODE>-&gt; cf update-service workflow -c '{"authorities": ["WORKFLOW_DEFINITION_GET"]}'<BR />
Updating service instance workflow as dj.adams@sap.com...<BR />
OK</CODE></PRE><BR />
(Note that this list is absolute, not relative, so whatever is specified in the <CODE>[...]</CODE> list <STRONG>replaces</STRONG> what’s already there.)<BR />
<BR />
<A href="https://www.youtube.com/watch?v=ZE4P__ePFcM&amp;t=00h47m40s" target="_blank" rel="nofollow noopener noreferrer">00:47:40</A> Now when we try the API call in the API Hub again, it works! We have the appropriate authorisations to list the workflow definitions, and we see the result:<BR />
<PRE><CODE>[<BR />
  {<BR />
    "id": "simpleworkflow",<BR />
    "version": "2",<BR />
    "name": "simpleworkflow",<BR />
    "createdBy": "sb-clone-9316c623-329a-4b3f-aacd-13cf030e0216!b35963|workflow!b10150",<BR />
    "createdAt": "2020-03-13T10:49:17.018Z",<BR />
    "jobs": []<BR />
  },<BR />
  {<BR />
    "id": "orderprocess",<BR />
    "version": "1",<BR />
    "name": "orderprocess",<BR />
    "createdBy": "sb-clone-9316c623-329a-4b3f-aacd-13cf030e0216!b35963|workflow!b10150",<BR />
    "createdAt": "2020-03-10T11:01:02.084Z",<BR />
    "jobs": []<BR />
  }<BR />
]</CODE></PRE><BR />
This also suggests that each time we make an API call in the API Hub, it probably goes through the entire Client Credentials Grant flow (otherwise, if it had reused the token, it would still have failed. In other words, the token returned reflects what’s allowed).<BR />
<BR />
<A href="https://www.youtube.com/watch?v=ZE4P__ePFcM&amp;t=00h49m00s" target="_blank" rel="nofollow noopener noreferrer">00:49:00</A> <SPAN class="mention-scrubbed">31a8856c1f6f4bcfa7f3d890a0b88fd2</SPAN> mentions something in the chat that is a bit of a hint which reminds me of what we’ve seen before but sort of ignored until now. That is, when creating a workflow service instance in the Cockpit with the “New Instance” button, we go through the wizard and there’s a “Specify Parameters (Optional)” step … that has a default value that looks like this:<BR />
<PRE><CODE>{<BR />
  "authorities": []<BR />
}</CODE></PRE><BR />
In other words, when we created the workflow instance a while back, we created it and <EM>explicitly</EM> (albeit unknowingly, at the time) said that it should have (from an Client Credentials Grant OAuth flow perspective) no authorities, no scopes. So it’s no wonder that when we first tried to make the API call to <CODE>/v1/workflow-definitions</CODE> in the API Hub, we were greeted by a 403 response!<BR />
<BR />
<A href="https://www.youtube.com/watch?v=ZE4P__ePFcM&amp;t=00h51m00s" target="_blank" rel="nofollow noopener noreferrer">00:51:00</A> We double check our understanding by removing the “WORKFLOW_DEFINITION_GET” scope again from the instance, like this:<BR />
<PRE><CODE>-&gt; cf update-service workflow -c '{"authorities":[]}'<BR />
Updating service instance workflow as dj.adams@sap.com...</CODE></PRE><BR />
and noting that on retrying this API call, we get the 403 error again. Nice!<BR />
<BR />
<A href="https://www.youtube.com/watch?v=ZE4P__ePFcM&amp;t=00h53m20s" target="_blank" rel="nofollow noopener noreferrer">00:53:20</A> In the final stage of this episode, there’s just enough time to dig in a little bit to how this Client Credentials Grant flow works … and in fact, regulars of this live stream series already know how it works, because we’ve used it before, albeit in a different context (the Business Rules CF API).<BR />
<BR />
<A href="https://www.youtube.com/watch?v=ZE4P__ePFcM&amp;t=00h54m00s" target="_blank" rel="nofollow noopener noreferrer">00:54:00</A> A short digression (digress? moi?) on what I think is a nicer way to enter JSON to a command. Instead of typing this:<BR />
<PRE><CODE>-&gt; cf update-service workflow -c '{"authorities": ["WORKFLOW_DEFINITION_GET"]}'</CODE></PRE><BR />
which involves lots of commas, double quotes and so on, we can type this:<BR />
<PRE><CODE>-&gt; cf update-service workflow -c $(yq r -j -)<BR />
authorities:<BR />
- WORKFLOW_DEFINITION_GET</CODE></PRE><BR />
which uses the <CODE>yq</CODE> tool to convert the YAML to JSON. Now I like that!<BR />
<BR />
<A href="https://www.youtube.com/watch?v=ZE4P__ePFcM&amp;t=00h55m30s" target="_blank" rel="nofollow noopener noreferrer">00:55:30</A> To work through this, we start at the command line, bearing in mind the prerequisites described in the documentation for <A href="https://help.sap.com/viewer/e157c391253b4ecd93647bf232d18a83/Cloud/en-US/c2bd37c63dda47449e24b8830ba312f1.html" target="_blank" rel="noopener noreferrer">Access Workflow APIs using OAuth 2.0 Authentication (Client Credentials Grant)</A>.<BR />
<BR />
We can use the command line to our advantage (remember, <A href="https://twitter.com/search?q=%23TheFutureIsTerminal" target="_blank" rel="nofollow noopener noreferrer">#TheFutureIsTerminal</A>!), as follows.<BR />
<BR />
First, we grab the service keys data for the workflow instance, specifically for the <CODE>SimpleWorkflow-workflow-credentials</CODE> service key:<BR />
<PRE><CODE>cf service-key workflow SimpleWorkflow-workflow-credentials &gt; keys.json</CODE></PRE><BR />
At this point we note that the output from various <CODE>cf</CODE> commands is really rather messy, in that we get headings as well as data, which we have to tidy up each time. Ugh. Anyway.<BR />
<BR />
We can now grab service key values using <CODE>jq</CODE>, which is nice; and we take a closer look at all the keys including the <CODE>endpoints</CODE> and <CODE>uaa</CODE> nodes that we saw earlier.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=ZE4P__ePFcM&amp;t=00h58m20s" target="_blank" rel="nofollow noopener noreferrer">00:58:20</A> Given that one of the philosophies of the Unix command line is “small pieces loosely joined”, we create a simple throwaway shell function (called ‘skv’, for ‘service key value’) that gives us some convenience for dipping into this rich seam of values:<BR />
<PRE><CODE>-&gt; skv () { jq -r "$1" keys.json; }</CODE></PRE><BR />
Now we can use this very comfortably, like this:<BR />
<PRE><CODE>-&gt; skv .uaa.clientid<BR />
sb-clone-9316c623-329a-4b3f-aacd-13cf03...</CODE></PRE><BR />
<A href="https://www.youtube.com/watch?v=ZE4P__ePFcM&amp;t=00h59m30s" target="_blank" rel="nofollow noopener noreferrer">00:59:30</A> At this stage, we turn to the next part of the documentation which instructs us to request an access token from the OAuth 2.0 endpoint, which we do, also updating the <CODE>.netrc</CODE> values for our authentication endpoint as we want to tell <CODE>curl</CODE> to use <CODE>.netrc</CODE>.<BR />
<BR />
This is what we end up doing to make the access token request and store the result in a file:<BR />
<PRE><CODE>-&gt; curl -n -v -X POST "$(skv .uaa.url)/oauth/token?grant_type=client_credentials" &gt; token.json</CODE></PRE><BR />
<A href="https://www.youtube.com/watch?v=ZE4P__ePFcM&amp;t=01h02m50s" target="_blank" rel="nofollow noopener noreferrer">01:02:50</A> Now we have the access token to use in an authorisation header for the actual API call, as we’ve done before, and we get the result we’re expecting!<BR />
<PRE><CODE>-&gt; curl -H "Authorization: Bearer $(jq -r .access_token token.json)" \<BR />
&gt; "$(skv .endpoints.workflow_rest_url)/v1/workflow-definitions" | jq .<BR />
[<BR />
  {<BR />
    "id": "simpleworkflow",<BR />
    "version": "2",<BR />
    "name": "simpleworkflow",<BR />
    "createdBy": "sb-clone-9316c623-329a-4b3f-aacd-13cf030e0216!b35963|workflow!b10150",<BR />
    "createdAt": "2020-03-13T10:49:17.018Z",<BR />
    "jobs": []<BR />
  },<BR />
  {<BR />
    "id": "orderprocess",<BR />
    "version": "1",<BR />
    "name": "orderprocess",<BR />
    "createdBy": "sb-clone-9316c623-329a-4b3f-aacd-13cf030e0216!b35963|workflow!b10150",<BR />
    "createdAt": "2020-03-10T11:01:02.084Z",<BR />
    "jobs": []<BR />
  }<BR />
]</CODE></PRE><BR />
And that’s it for this episode. Hopefully that makes some sense, there’s a lot more to discover, especially the other flow which is the Authorisation Code Grant type, which we’ll try next time.<BR />
<BR />
Just before we finish, <SPAN class="mention-scrubbed">iinside</SPAN> points out that there’s also <CODE>cf curl</CODE> which is definitely worth looking into for more predictable and parseable output from <CODE>cf</CODE>. Thanks Max!
