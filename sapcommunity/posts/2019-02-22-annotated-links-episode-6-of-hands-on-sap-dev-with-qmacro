2019-02-22-annotated-links-episode-6-of-hands-on-sap-dev-with-qmacro
Annotated links: Episode 6 of Hands-on SAP dev with qmacro
technology-blog-sap
2019-02-22
https://community.sap.com/t5/technology-blogs-by-sap/annotated-links-episode-6-of-hands-on-sap-dev-with-qmacro/ba-p/13395704
<EM>This is a searchable description of the content of a live stream recording, specifically <STRONG>"Episode 6 - Extending the CAPM bookshop tutorial – hacking &amp; learning"</STRONG> in the "<A href="https://bit.ly/handsonsapdev" target="_blank" rel="nofollow noopener noreferrer">Hands-on SAP dev with qmacro</A>" series. There are links directly to specific highlights in the video recording. For links to annotations of other episodes, please see the "<A href="https://bit.ly/handsonsapdev#replays" target="_blank" rel="nofollow noopener noreferrer">Catch the replays</A>" section of the series blog post.</EM><BR />
<BR />
This episode, titled "<A href="https://bit.ly/handsonsapdev#ep6" target="_blank" rel="nofollow noopener noreferrer">Extending the CAPM bookshop tutorial – hacking &amp; learning</A>", was streamed live on Fri 22 Feb 2019 and is approximately one hour in length. The stream recording is <A href="https://www.youtube.com/watch?v=kIDTvoSvpa0&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0" target="_blank" rel="nofollow noopener noreferrer">available on YouTube</A>.<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2019/02/Screen-Shot-2019-03-13-at-21.06.18.png" /><BR />
<H2 id="brief-synopsis" id="toc-hId-908577294">Brief synopsis</H2><BR />
We’re pretty much at the end of the tutorial as it stands. But there’s always more to learn by hacking on it, to tweak and extend it. We do that in this episode, uncovering more features of CAPM and CDS.<BR />
<H2 id="links-to-specific-highlights" id="toc-hId-712063789">Links to specific highlights</H2><BR />
<STRONG><A href="https://www.youtube.com/watch?v=kIDTvoSvpa0&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h05m07s" target="_blank" rel="nofollow noopener noreferrer">00:05:07</A>:</STRONG> A quick look at the CDS Language Support extension for VS Code, which is based on the use of the <A href="https://langserver.org/" target="_blank" rel="nofollow noopener noreferrer">Language Server Protocol</A> which was created by Microsoft.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=kIDTvoSvpa0&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h07m15s" target="_blank" rel="nofollow noopener noreferrer">00:07:15</A>:</STRONG> Downloading the CDS Language Support extension from the <A href="https://tools.hana.ondemand.com/#cloud" target="_blank" rel="nofollow noopener noreferrer">SAP Development Tools (cloud)</A> site so we can have a look inside it.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=kIDTvoSvpa0&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h08m15s" target="_blank" rel="nofollow noopener noreferrer">00:08:15</A>:</STRONG> The <CODE>.vsix</CODE> file is actually a bundle that is a gzipped tarball, which means that we can change the extension to <CODE>.tgz</CODE> and unpack it to have a look inside, where we see, amongst other things, the <CODE>cds-compiler</CODE> package and the <CODE>cds-lsp</CODE> package within the <CODE><a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a></CODE> namespace.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=kIDTvoSvpa0&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h10m00s" target="_blank" rel="nofollow noopener noreferrer">00:10:00</A>:</STRONG> We notice that the CDS package is now at 3.5.2, following a couple of point updates since the move from 3.0.0 to 3.5.0 a couple of weeks ago.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=kIDTvoSvpa0&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h11m09s" target="_blank" rel="nofollow noopener noreferrer">00:11:09</A>:</STRONG> We note that the <CODE>cds-lsp</CODE> package is not part of the main <CODE><a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a>/cds</CODE> install, i.e. it's not a dependency that we can see with <CODE>npm info <a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a>/cds</CODE>. It's the language server implementation for the VS Code language server client.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=kIDTvoSvpa0&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h11m59s" target="_blank" rel="nofollow noopener noreferrer">00:11:59</A>:</STRONG> Using the <CODE>cds-lsp</CODE> package "standalone" as a server for another language server client ... in Vim. The config in my <CODE>.vimrc</CODE> for this looks like <A href="https://github.com/qmacro/dotvim/blob/a6567d431119527aa5764363fdddc61a1fa2275d/vimrc#L94-L100" target="_blank" rel="nofollow noopener noreferrer">this</A>:<BR />
<PRE><CODE>set runtimepath+=~/.vim/bundle/languageclient<BR />
set hidden<BR />
autocmd BufRead,BufNewFile *.cds setfiletype cds<BR />
set signcolumn=yes<BR />
let g:LanguageClient_serverCommands = {<BR />
    \ 'cds': ['/Users/i347491/.vim/bundle/languageclient/startcdslsp']<BR />
    \ }</CODE></PRE><BR />
and I'm using the <A href="https://github.com/autozimu/LanguageClient-neovim" target="_blank" rel="nofollow noopener noreferrer">LanguageClient-neovim</A> plugin.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=kIDTvoSvpa0&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h13m22s" target="_blank" rel="nofollow noopener noreferrer">00:13:22</A>:</STRONG> Seeing the language client in Vim in action, connecting to the language server provided by the <CODE><a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a>/cds-lsp</CODE> package and offering autocompletion (in Vim via Ctrl-X Ctrl-O) as well as CDS syntax checks.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=kIDTvoSvpa0&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h14m58s" target="_blank" rel="nofollow noopener noreferrer">00:14:58</A>:</STRONG> Talking briefly about a very useful macOS app, in response to a question from Ronnie about keyboard-shortcut based anchoring of windows. I use <A href="https://www.spectacleapp.com/" target="_blank" rel="nofollow noopener noreferrer">Spectacle</A> which is the single most useful little app I have on this machine. Recommended!<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=kIDTvoSvpa0&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h16m23s" target="_blank" rel="nofollow noopener noreferrer">00:16:23</A>:</STRONG> Looking quickly at a keyboard shortcut I have in my config that can quickly take me to inside the globally installed <CODE><a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a>/cds</CODE> package directory so I can hunt around and discover things. I manage this with features in my <A href="https://github.com/qmacro/scripts" target="_blank" rel="nofollow noopener noreferrer">scripts</A> repo (look at the <CODE>.bmdirs</CODE>, <CODE>.bmfiles</CODE> and <CODE>shortcuts</CODE> files in particular).<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=kIDTvoSvpa0&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h17m36s" target="_blank" rel="nofollow noopener noreferrer">00:17:36</A>:</STRONG> Starting the new project with <CODE>cds init</CODE>. This project will be to create a cut down version of the Northwind dataset and services, and so we call it "northbreeze" (naming things is hard).<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=kIDTvoSvpa0&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h18m49s" target="_blank" rel="nofollow noopener noreferrer">00:18:49</A>:</STRONG> Security alert - some strange person in the field.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=kIDTvoSvpa0&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h19m50s" target="_blank" rel="nofollow noopener noreferrer">00:19:50</A>:</STRONG> Creating a new file <CODE>db/model.cds</CODE>, using the command palette to refresh the Explorer to see the newly created directory <CODE>db/</CODE>. Pierre points out that you can actually create the <CODE>db</CODE> and <CODE>srv</CODE> folders automatically when you initialise the project. Have a look at <CODE>cds help init</CODE> to find out more on this.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=kIDTvoSvpa0&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h21m39s" target="_blank" rel="nofollow noopener noreferrer">00:21:39</A>:</STRONG> Looking at the Products data in Northwind, via <A class="uri" href="https://services.odata.org/V3/Northwind/Northwind.svc/Products?$format=json" target="_blank" rel="nofollow noopener noreferrer">https://services.odata.org/V3/Northwind/Northwind.svc/Products?$format=json</A>.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=kIDTvoSvpa0&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h22m26s" target="_blank" rel="nofollow noopener noreferrer">00:22:26</A>:</STRONG> Talking about a nice triple of data types that we can use: Products, Suppliers and Categories - there are relationships between them.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=kIDTvoSvpa0&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h23m19s" target="_blank" rel="nofollow noopener noreferrer">00:23:19</A>:</STRONG> Noting that for Products, we don't get all the entities in the entityset (there are 77 in total) in one go - we can see that at the end of the output there's a link to the next 'batch', via the use of a <CODE>$skiptoken</CODE>. We have to bear this in mind when thinking about grabbing the data from the Northwind servers programmatically.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=kIDTvoSvpa0&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h26m45s" target="_blank" rel="nofollow noopener noreferrer">00:26:45</A>:</STRONG> Starting to define our model, something like the definition in the tutorial we followed previously - <A href="https://developers.sap.com/tutorials/cp-apm-nodejs-create-service.html" target="_blank" rel="noopener noreferrer">Create a Business Service with Node.js using Visual Studio Code</A>.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=kIDTvoSvpa0&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h27m40s" target="_blank" rel="nofollow noopener noreferrer">00:27:40</A>:</STRONG> Delighted by the autocompletion providing us with an entity definition skeleton that includes the <CODE>cuid</CODE> aspect which we saw in a previous live stream episode ... it comes from the <CODE><a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a>/common.cds</CODE> file we explored in episode 1. The definition looks like this:<BR />
<PRE><CODE>/**<BR />
 * Aspect for entities with canonical universal IDs.<BR />
 */<BR />
abstract entity cuid {<BR />
  key ID : UUID;  //&gt; automatically filled in<BR />
}</CODE></PRE><BR />
This aspect will cause the entity to have a key property <CODE>ID</CODE> defined as a <CODE>UUID</CODE> type, automatically.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=kIDTvoSvpa0&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h28m50s" target="_blank" rel="nofollow noopener noreferrer">00:28:50</A>:</STRONG> Talking about how the CAPM <A href="https://help.sap.com/viewer/65de2977205c403bbc107264b8eccf4b/Cloud/en-US/e4a7559baf9f4e4394302442745edcd9.html" target="_blank" rel="noopener noreferrer">best practices</A> influence how we name our things. So for example our first entity is capitalised and plural (Products) and the properties are simple (e.g. "name" rather than "product_name"). Perhaps I should have used more underscores in the property names, or camel case, but there you go.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=kIDTvoSvpa0&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h32m40s" target="_blank" rel="nofollow noopener noreferrer">00:32:40</A>:</STRONG> Rather than me typing everything in, I bring in the model definition from another file, to save time.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=kIDTvoSvpa0&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h33m45s" target="_blank" rel="nofollow noopener noreferrer">00:33:45</A>:</STRONG> Looking at the relationships between Products, Suppliers and Categories as described by the <CODE>Association</CODE> keyword, noting that the definitions are bi-directional. These definitions result in the appropriate navigation properties in the OData service that we get.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=kIDTvoSvpa0&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h35m25s" target="_blank" rel="nofollow noopener noreferrer">00:35:25</A>:</STRONG> Adding a simple service that just reflects the entities we have so far, in a one-to-one mapping.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=kIDTvoSvpa0&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h37m06s" target="_blank" rel="nofollow noopener noreferrer">00:37:06</A>:</STRONG> Trying the service out on localhost, even before we've set up the database as a persistence layer. Inspecting the metadata document. Confirming the service is working.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=kIDTvoSvpa0&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h38m25s" target="_blank" rel="nofollow noopener noreferrer">00:38:25</A>:</STRONG> Looking at a blog post <A href="https://www.twilio.com/blog/2017/08/http-requests-in-node-js.html" target="_blank" rel="nofollow noopener noreferrer">5 Ways to Make HTTP Requests in Node.js</A> which takes us through different ways to make HTTP requests when in the Node.js context, from the simple (and builtin) <CODE>http</CODE> library which is standard, through to <A href="https://www.npmjs.com/package/axios" target="_blank" rel="nofollow noopener noreferrer">axios</A> which supports the Promise API.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=kIDTvoSvpa0&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h40m08s" target="_blank" rel="nofollow noopener noreferrer">00:40:08</A>:</STRONG> Creating a new project ('grab') where we'll write the JavaScript to grab the data from the Northwind service, using <CODE>npm init -y</CODE> to set up a basic <CODE>package.json</CODE> file and then immediately installing (locally to this project) the <CODE>axios</CODE> package.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=kIDTvoSvpa0&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h41m55s" target="_blank" rel="nofollow noopener noreferrer">00:41:55</A>:</STRONG> Looking at the blog post example to see how we use <CODE>axios</CODE>, especially taking advantage of <CODE>axios.all([...])</CODE>.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=kIDTvoSvpa0&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h44m07s" target="_blank" rel="nofollow noopener noreferrer">00:44:07</A>:</STRONG> Starting to create <CODE>grab.js</CODE>, bringing in the <CODE>axios</CODE> module and trying out a first HTTP request to <A class="uri" href="https://services.odata.org/V3/Northwind/Northwind.svc/Products?$skiptoken=0" target="_blank" rel="nofollow noopener noreferrer">https://services.odata.org/V3/Northwind/Northwind.svc/Products?$skiptoken=0</A>.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=kIDTvoSvpa0&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h46m45s" target="_blank" rel="nofollow noopener noreferrer">00:46:45</A>:</STRONG> We see that the result of the call to <CODE>axios.get</CODE> is a Promise. And that holds a lot of, err, promise.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=kIDTvoSvpa0&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h46m55s" target="_blank" rel="nofollow noopener noreferrer">00:46:55</A>:</STRONG> Extending the basic call to specify <CODE>console.log</CODE> to a chained <CODE>.then()</CODE>, noticing that we're supplying a reference to the function (<CODE>console.log</CODE>) and not actually <EM>invoking</EM> the function. In other words, <CODE>then</CODE> takes a function as its parameter here.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=kIDTvoSvpa0&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h48m34s" target="_blank" rel="nofollow noopener noreferrer">00:48:34</A>:</STRONG> We get the axios object as output.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=kIDTvoSvpa0&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h49m06s" target="_blank" rel="nofollow noopener noreferrer">00:49:06</A>:</STRONG> Now we change the call to <CODE>axios.get</CODE> to <CODE>axios.all</CODE> which will enable us to specify multiple HTTP request, which we do, for the first and the second batch of 20 products.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=kIDTvoSvpa0&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h50m25s" target="_blank" rel="nofollow noopener noreferrer">00:50:25</A>:</STRONG> We start up VS Code to run this in now, so we can use the debug feature to inspect what we get after the <CODE>axios.all</CODE> finishes. We use F9 to set a breakpoint on the <CODE>console.log(x)</CODE> statement so we can stop and have a look at what we get.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=kIDTvoSvpa0&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h51m44s" target="_blank" rel="nofollow noopener noreferrer">00:51:44</A>:</STRONG> We see that what we get (in <CODE>x</CODE>) is an array of two objects (maps). Each is from axios, and represents the HTTP response, and a nicely parsed bit of data from the payload (converted from JSON into a JavaScript object) in <CODE>x[0].data</CODE> (for the first one, of course).<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=kIDTvoSvpa0&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h53m33s" target="_blank" rel="nofollow noopener noreferrer">00:53:33</A>:</STRONG> Sir Rodney's Scones! Clearly the correct pronunciation of "scones" matches "stones".<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=kIDTvoSvpa0&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h53m55s" target="_blank" rel="nofollow noopener noreferrer">00:53:55</A>:</STRONG> Finally in this episode we'll coalesce the data from the two objects into a single array (i.e. to get all 40 products into a single structure).<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=kIDTvoSvpa0&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h55m15s" target="_blank" rel="nofollow noopener noreferrer">00:55:15</A>:</STRONG> Noting that we can use <CODE>concat</CODE> to bring together values from different arrays, noting that the function is pure, i.e. it doesn't modify either of the two source arrays, rather, it produces a new array.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=kIDTvoSvpa0&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h55m57s" target="_blank" rel="nofollow noopener noreferrer">00:55:57</A>:</STRONG> Now we know we can use <CODE>concat</CODE>, we'll employ it in a single expression function definition that we'll pass to <CODE>then</CODE>. This expression is a call to <CODE>reduce</CODE> on the array of objects, and looks like this:<BR />
<PRE><CODE>xs.reduce((a, x) =&gt; a.concat(x.data.value), [])</CODE></PRE><BR />
I'll leave that there for us to stare at for a bit. Single expression, no moving parts, no mutation and pure, in a promise context (which therefore causes the result of this expression to be available to the next <CODE>then</CODE> in the chain. Nice. Well, <EM>I</EM> like it anyway!<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=kIDTvoSvpa0&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h58m17s" target="_blank" rel="nofollow noopener noreferrer">00:58:17</A>:</STRONG> As a result of this, we get a nice single array of 40 product objects, which is exactly what we wanted. And we can tidy the code up now to make it really clean.
