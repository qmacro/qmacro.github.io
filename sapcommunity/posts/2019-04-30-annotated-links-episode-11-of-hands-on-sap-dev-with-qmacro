2019-04-30-annotated-links-episode-11-of-hands-on-sap-dev-with-qmacro
Annotated links: Episode 11 of Hands-on SAP dev with qmacro
technology-blog-sap
2019-04-30
https://community.sap.com/t5/technology-blogs-by-sap/annotated-links-episode-11-of-hands-on-sap-dev-with-qmacro/ba-p/13401796
<EM>This is a searchable description of the content of a live stream recording, specifically <STRONG>"Episode 11 - A CAP project for “Geonames” &amp; funcprog style with Chris Whealy"</STRONG> in the "<A href="https://bit.ly/handsonsapdev" target="_blank" rel="nofollow noopener noreferrer">Hands-on SAP dev with qmacro</A>" series. There are links directly to specific highlights in the video recording. For links to annotations of other episodes, please see the "<A href="https://bit.ly/handsonsapdev#replays" target="_blank" rel="nofollow noopener noreferrer">Catch the replays</A>" section of the series blog post.</EM><BR />
<BR />
This episode, titled "<A href="https://bit.ly/handsonsapdev#ep11" target="_blank" rel="nofollow noopener noreferrer">A CAP project for “Geonames” &amp; funcprog style with Chris Whealy</A>", was streamed live on Fri 08 Mar 2019 and is approximately one hour in length. The stream recording is <A href="https://www.youtube.com/watch?v=c5KVuCNOv4g&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0" target="_blank" rel="nofollow noopener noreferrer">available on YouTube</A>.<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2019/04/Screen-Shot-2019-04-02-at-14.11.39.jpg" /><BR />
<BR />
Below is a brief synopsis, and links to specific highlights - use these links to jump directly to particular places of interest in the recording, based on 'hh:mm:ss' style timestamps.<BR />
<H2 id="brief-synopsis" id="toc-hId-928775873">Brief synopsis</H2><BR />
In this episode we have developer <A href="https://twitter.com/logarhythm" target="_blank" rel="nofollow noopener noreferrer">Chris Whealy</A> as a guest, taking us through his <A href="https://github.com/ChrisWhealy/geonames_hana" target="_blank" rel="nofollow noopener noreferrer">personal project</A> making use of <A href="https://www.geonames.org/" target="_blank" rel="nofollow noopener noreferrer">Geonames</A> data and built using CAP with Node.js. Along the way we look at Chris’s programming style which takes a lot from the functional programming world.<BR />
<H2 id="links-to-specific-highlights" id="toc-hId-732262368">Links to specific highlights</H2><BR />
<STRONG><A href="https://www.youtube.com/watch?v=c5KVuCNOv4g&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h01m30s" target="_blank" rel="nofollow noopener noreferrer">00:01:30</A>:</STRONG> Good morning to Chris Whealy, our special guest for this episode! The project we're going to take a look at with Chris is available on GitHub - see the <A href="https://github.com/ChrisWhealy/geonames_hana" target="_blank" rel="nofollow noopener noreferrer">geonames_hana</A> repository.q<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=c5KVuCNOv4g&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h03m20s" target="_blank" rel="nofollow noopener noreferrer">00:03:20</A>:</STRONG> Starting out by looking at the <A href="https://twitter.com/qmacro/status/1102874725578092550" target="_blank" rel="nofollow noopener noreferrer">tweet</A> on 5th March showing the functional "tick" that I learned from Chris, specifically:<BR />
<DIV><BR />
<PRE class="sourceCode javascript"><CODE class="sourceCode javascript"><SPAN class="va">data</SPAN>.<SPAN class="va">results</SPAN>.<SPAN class="at">reduce</SPAN>((a<SPAN class="op">,</SPAN> x) <SPAN class="op">=&gt;</SPAN> (_ <SPAN class="op">=&gt;</SPAN> a)(a[<SPAN class="va">x</SPAN>.<SPAN class="at">Id</SPAN>] <SPAN class="op">=</SPAN> <SPAN class="va">x</SPAN>.<SPAN class="at">Name</SPAN>)<SPAN class="op">,</SPAN> <SPAN class="op">{}</SPAN>)</CODE></PRE><BR />
</DIV><BR />
<STRONG><A href="https://www.youtube.com/watch?v=c5KVuCNOv4g&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h05m25s" target="_blank" rel="nofollow noopener noreferrer">00:05:25</A>:</STRONG> Chris explains in what circumstances such a construct can be used, and why it's useful (especially referring to the fact that some standard JavaScript array functions such as <CODE>Array.prototype.push</CODE> don't return the array as a result, which is, on the whole, less than helpful, as we can't chain functions together).<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=c5KVuCNOv4g&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h08m20s" target="_blank" rel="nofollow noopener noreferrer">00:08:20</A>:</STRONG> Reminding ourselves that the <CODE>Array.prototype.reduce</CODE> function can turn an array into any shape, either another array, a map (an object) or even a scalar.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=c5KVuCNOv4g&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h09m40s" target="_blank" rel="nofollow noopener noreferrer">00:09:40</A>:</STRONG> While <CODE>map</CODE> and <CODE>reduce</CODE> are relatively well known, functional programming is a lot more than just those two functions. Also, <CODE>map</CODE> is just a special case of <CODE>reduce</CODE>.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=c5KVuCNOv4g&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h11m10s" target="_blank" rel="nofollow noopener noreferrer">00:11:10</A>:</STRONG> In other languages, <CODE>reduce</CODE> is known as <CODE>fold</CODE> (and there's a fold left and a fold right, by the way).<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=c5KVuCNOv4g&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h12m00s" target="_blank" rel="nofollow noopener noreferrer">00:12:00</A>:</STRONG> Chris starts to share his screen to introduce the project and start taking us through some of the codebase.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=c5KVuCNOv4g&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h13m02s" target="_blank" rel="nofollow noopener noreferrer">00:13:02</A>:</STRONG> The data is taken from the website <A href="https://www.geonames.org/" target="_blank" rel="nofollow noopener noreferrer">geonames.org</A> which is open and crowdsourced, updated daily.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=c5KVuCNOv4g&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h15m58s" target="_blank" rel="nofollow noopener noreferrer">00:15:58</A>:</STRONG> Chris takes us through a few of the REST API calls to see some of the data that's stored and served by the service, including modifying the requests with values in query parameters in the URL.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=c5KVuCNOv4g&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h21m35s" target="_blank" rel="nofollow noopener noreferrer">00:21:35</A>:</STRONG> Switching to the GitHub project to start to take a look at the code behind the service. We notice straight away the now-familiar <CODE>db</CODE> and <CODE>srv</CODE> directories therein, this being a CAP project.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=c5KVuCNOv4g&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h22m20s" target="_blank" rel="nofollow noopener noreferrer">00:22:20</A>:</STRONG> Chris points out that he built the project using the <A href="https://cloudplatform.sap.com/capabilities/product-info.SAP-Web-IDE.9e5c9d90-e8e0-4e82-aed2-09087a10c973.html" target="_blank" rel="noopener noreferrer">SAP Web IDE</A>, mostly because he specifically wanted to use HANA for the persistence layer immediately.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=c5KVuCNOv4g&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h24m00s" target="_blank" rel="nofollow noopener noreferrer">00:24:00</A>:</STRONG> Taking a first look at some of the annotations, and also specifically at the <CODE>index.cds</CODE> and the role that plays in a CAP project. If found by the CDS compiler, that <CODE>index.cds</CODE> file, and only that <CODE>index.cds</CODE> file will be opened and its contents (including references to other files) compiled. Otherwise any and all files with a <CODE>cds</CODE> extension will be opened and compiled. This way you can manage how the data model gets compiled.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=c5KVuCNOv4g&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h26m00s" target="_blank" rel="nofollow noopener noreferrer">00:26:00</A>:</STRONG> Chris highlights that once the HDI container is created, he can interact with it directly, in JavaScript, using the <CODE><a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a>/cds</CODE> module. We saw some of this in <A href="http://bit.ly/handsonsapdev#ep4" target="_blank" rel="nofollow noopener noreferrer">Ep.4 - Debugging CAPM and a look at the cds REPL</A>.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=c5KVuCNOv4g&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h26m40s" target="_blank" rel="nofollow noopener noreferrer">00:26:40</A>:</STRONG> It's the <CODE>srv/server.js</CODE> script that responds to the HTTP requests that we've already seen when exploring the frontend (via the HTML index) and the API calls.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=c5KVuCNOv4g&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h27m53s" target="_blank" rel="nofollow noopener noreferrer">00:27:53</A>:</STRONG> Chris explains that instead of using the normal <CODE>express</CODE> based HTTP server that comes set up with any new CAP project, he's using his own HTTP server based on the lower-level <CODE>http</CODE> module.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=c5KVuCNOv4g&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h29m05s" target="_blank" rel="nofollow noopener noreferrer">00:29:05</A>:</STRONG> Relaying a message from Former Member who has spotted a <CODE>vue/</CODE> directory in the project, which has piqued his (and others') interest! This is the next part of the project that Chris intends to work on.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=c5KVuCNOv4g&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h30m38s" target="_blank" rel="nofollow noopener noreferrer">00:30:38</A>:</STRONG> Starting to look at some of the JS in the <CODE>srv/server.js</CODE> file, specifically the <CODE>genApiHandler</CODE> function, which has a certain style and has a noticeable lack of curly braces. Chris tries to write every function as a single expression, holding to the principle that a function should do one thing and one thing only.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=c5KVuCNOv4g&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h32m25s" target="_blank" rel="nofollow noopener noreferrer">00:32:25</A>:</STRONG> Noticing that the initial lines of the <CODE>genApiHandler</CODE> definition is somewhat familiar to us, in that it is a function that returns a function, enabling <A href="https://en.wikipedia.org/wiki/Partial_application" target="_blank" rel="nofollow noopener noreferrer">partial application</A>. Chris also talks about how he tries to be consistent with variable names.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=c5KVuCNOv4g&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h35m05s" target="_blank" rel="nofollow noopener noreferrer">00:35:05</A>:</STRONG> Chris explains how he has to build something on the server side that services API calls with paths like this:<BR />
<PRE><CODE>/api/v1/geonames</CODE></PRE><BR />
<STRONG><A href="https://www.youtube.com/watch?v=c5KVuCNOv4g&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h36m25s" target="_blank" rel="nofollow noopener noreferrer">00:36:25</A>:</STRONG> Chris describes the function as giving back a function, i.e. it is a partial function, in that the complete evaluation of the arguments doesn't happen necessarily all at once.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=c5KVuCNOv4g&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h38m05s" target="_blank" rel="nofollow noopener noreferrer">00:38:05</A>:</STRONG> Looking at the config that encapsulates the different possible paths in the API.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=c5KVuCNOv4g&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h39m50s" target="_blank" rel="nofollow noopener noreferrer">00:39:50</A>:</STRONG> Essentially, the <CODE>genApiHandler</CODE> function is abstraction across every object in the config, and returns a function that is immediately invoked, i.e. an immediately invoked function expression (IIFE).<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=c5KVuCNOv4g&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h41m05s" target="_blank" rel="nofollow noopener noreferrer">00:41:05</A>:</STRONG> Chris explains one of the challenges with the traditional "for loop", in that you have to keep track of how many times the loop has executed. Very low level, using things that are changing. Functional programming is in many ways all about moving from such a "how" to a "what" approach to describing what you want.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=c5KVuCNOv4g&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h45m30s" target="_blank" rel="nofollow noopener noreferrer">00:45:30</A>:</STRONG> Looking specifically at how request handlers are created for each of the possible API URLs, with this bit of code in <CODE>srv/server.js</CODE>:<BR />
<DIV><BR />
<PRE class="sourceCode javascript"><CODE class="sourceCode javascript">Object<BR />
  .<SPAN class="at">keys</SPAN>(<SPAN class="va">config</SPAN>.<SPAN class="at">urls</SPAN>)<BR />
  .<SPAN class="at">map</SPAN>(assignRequestHandler)</CODE></PRE><BR />
</DIV><BR />
<STRONG><A href="https://www.youtube.com/watch?v=c5KVuCNOv4g&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h47m25s" target="_blank" rel="nofollow noopener noreferrer">00:47:25</A>:</STRONG> Considering that we might be in a "strange land" somewhere between programming and configuration, using higher order functions (functions that receive and / or produce functions) as solid-state building blocks, upon which basis Chris likens his creation to a functional finite state machine.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=c5KVuCNOv4g&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h48m50s" target="_blank" rel="nofollow noopener noreferrer">00:48:50</A>:</STRONG> Noticing the use of a ternary operator (of which <SPAN class="mention-scrubbed">rsletta</SPAN> is fond, in fact there's a nested ternary operator in there too. Chris points out that one of the advantages of these ternary expressions is using the alternative, an <CODE>if</CODE> statement, introduces something that is <EM>not</EM> an expression (it is a statement).<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=c5KVuCNOv4g&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h51m50s" target="_blank" rel="nofollow noopener noreferrer">00:51:50</A>:</STRONG> Jumping to a different place now in <CODE>srv/server.js</CODE> to look at some usage of the CDS API, which starts with:<BR />
<DIV><BR />
<PRE class="sourceCode javascript"><CODE class="sourceCode javascript"><SPAN class="va">cds</SPAN>.<SPAN class="at">connect</SPAN>(connectionObj)</CODE></PRE><BR />
</DIV><BR />
<STRONG><A href="https://www.youtube.com/watch?v=c5KVuCNOv4g&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h52m58s" target="_blank" rel="nofollow noopener noreferrer">00:52:58</A>:</STRONG> We look at the contents of the <CODE>connectionObj</CODE> which in fact looks like this:<BR />
<DIV><BR />
<PRE class="sourceCode javascript"><CODE class="sourceCode javascript"><SPAN class="kw">const</SPAN> connectionObject <SPAN class="op">=</SPAN> <SPAN class="op">{</SPAN><BR />
  <SPAN class="st">"kind"</SPAN><SPAN class="op">:</SPAN> <SPAN class="st">"hana"</SPAN><SPAN class="op">,</SPAN><BR />
  <SPAN class="st">"model"</SPAN><SPAN class="op">:</SPAN> <SPAN class="st">"gen/csn.json"</SPAN><SPAN class="op">,</SPAN><BR />
  <SPAN class="st">"credentials"</SPAN><SPAN class="op">:</SPAN> (vcapSrv[<SPAN class="st">'hana'</SPAN>] <SPAN class="op">||</SPAN> vcapSrv[<SPAN class="st">'hanatrial'</SPAN>])[<SPAN class="dv">0</SPAN>].<SPAN class="at">credentials</SPAN></CODE></PRE><BR />
</DIV><BR />
and specifically focus on the value for the "credentials" property, which is using the "or" operator (<CODE>||</CODE>) in place of an <CODE>if ... else</CODE> expression. Again, a functional approach which is as easy to read as it is concise.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=c5KVuCNOv4g&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h54m00s" target="_blank" rel="nofollow noopener noreferrer">00:54:00</A>:</STRONG> Examining the promise chain of <CODE>.then</CODE> calls after the CDS connection (the <CODE>cds.connect</CODE> function actually returns a promise); much preferable than using a callback approach.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=c5KVuCNOv4g&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h55m13s" target="_blank" rel="nofollow noopener noreferrer">00:55:13</A>:</STRONG> Then we look briefly at the next CDS API call, which is this:<BR />
<DIV><BR />
<PRE class="sourceCode javascript"><CODE class="sourceCode javascript"><SPAN class="va">cds</SPAN>.<SPAN class="at">run</SPAN>(<SPAN class="st">'SELECT * FROM ORG_GEONAMES_BASE_GEO_COUNTRIES'</SPAN>).<SPAN class="at">catch</SPAN>(<SPAN class="va">console</SPAN>.<SPAN class="at">error</SPAN>))</CODE></PRE><BR />
</DIV><BR />
and this in turn returns a promise, and so on.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=c5KVuCNOv4g&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h57m30s" target="_blank" rel="nofollow noopener noreferrer">00:57:30</A>:</STRONG> I note that in a couple of our previous episodes we see another promise chain in action, specifically in <A href="https://bit.ly/handsonsapdev#ep9" target="_blank" rel="nofollow noopener noreferrer">Ep.9</A> and <A href="https://bit.ly/handsonsapdev#ep10" target="_blank" rel="nofollow noopener noreferrer">Ep.10</A>, in our data retrieval script.
