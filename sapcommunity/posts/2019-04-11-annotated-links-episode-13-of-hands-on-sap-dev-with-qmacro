2019-04-11-annotated-links-episode-13-of-hands-on-sap-dev-with-qmacro
Annotated links: Episode 13 of Hands-on SAP dev with qmacro
technology-blog-sap
2019-04-11
https://community.sap.com/t5/technology-blogs-by-sap/annotated-links-episode-13-of-hands-on-sap-dev-with-qmacro/ba-p/13411936
<EM>This is a searchable description of the content of a live stream recording, specifically <STRONG>"Episode 13 - Stdio-ifying the CSV filter mechanism"</STRONG> in the "<A href="https://bit.ly/handsonsapdev" target="_blank" rel="nofollow noopener noreferrer">Hands-on SAP dev with qmacro</A>" series. There are links directly to specific highlights in the video recording. For links to annotations of other episodes, please see the "<A href="https://bit.ly/handsonsapdev#replays" target="_blank" rel="nofollow noopener noreferrer">Catch the replays</A>" section of the series blog post.</EM><BR />
<BR />
This episode, titled "<A href="https://bit.ly/handsonsapdev#ep13" target="_blank" rel="nofollow noopener noreferrer">Stdio-ifying the CSV filter mechanism</A>", was streamed live on Wed 20 Mar 2019 and is approximately one hour in length. The stream recording is <A href="https://www.youtube.com/watch?v=vwPE7IaEfbc&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0" target="_blank" rel="nofollow noopener noreferrer">available on YouTube</A>.<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2019/04/Screen-Shot-2019-04-11-at-16.42.15.png" /><BR />
<BR />
Below is a brief synopsis, and links to specific highlights - use these links to jump directly to particular places of interest in the recording, based on 'hh:mm:ss' style timestamps.<BR />
<H2 id="brief-synopsis" id="toc-hId-929701130">Brief synopsis</H2><BR />
In the previous episode (Ep.12) we looked at a simple CSV filter utility. In this episode we improve it by giving it the ability to read from STDIN and write to STDOUT so it plays nicely in pipeline contexts. Then we’ll be ready to use it to finalise our data for our CAP based “Northbreeze” service.<BR />
<H2 id="links-to-specific-highlights" id="toc-hId-733187625">Links to specific highlights</H2><BR />
<STRONG><A href="https://www.youtube.com/watch?v=vwPE7IaEfbc&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h03m45s" target="_blank" rel="nofollow noopener noreferrer">00:03:45</A>:</STRONG> A brief glimpse behind the scenes, as it were, where I produce the annotation blog posts for the video recordings that get uploaded to the <A href="https://www.youtube.com/playlist?list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0" target="_blank" rel="nofollow noopener noreferrer">SAP Developers YouTube playlist</A>. I write in <A href="https://en.wikipedia.org/wiki/Markdown" target="_blank" rel="nofollow noopener noreferrer">Markdown</A> in Vim, which is a pretty nice combination of reliable and comfortable tech.<BR />
<BR />
I use a Vim macro while writing the content, which we have a look at, starting from a simple template, and converting the HH:MM:SS timestamps to a Markdown-annotated link. I don't have this macro in my standard <CODE>.vimrc</CODE>, as it's only really relevant for this particular task, so I have it in a "project-local" <CODE>.vimrc</CODE> which is possible via this configuration:<BR />
<PRE><CODE>set exrc</CODE></PRE><BR />
(see my <A href="https://github.com/qmacro/dotvim" target="_blank" rel="nofollow noopener noreferrer">dotvim</A> repo for more details).<BR />
<BR />
This is what the macro looks like:<BR />
<PRE><CODE>let @t = '0Ypihttps://www.youtube.com/watch?v=VIDEOID&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=wwrhwrmAs0ys$)A:k0ys$]Jx0ys$*.'</CODE></PRE><BR />
(note the escape characters just after the <CODE>t=</CODE>, <CODE>As</CODE> and <CODE>A:</CODE> bits).<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=vwPE7IaEfbc&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h10m30s" target="_blank" rel="nofollow noopener noreferrer">00:10:30</A>:</STRONG> Based on <SPAN class="mention-scrubbed">speri</SPAN>'s question, we have a quick go at creating a simple macro in Vim.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=vwPE7IaEfbc&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h14m30s" target="_blank" rel="nofollow noopener noreferrer">00:14:30</A>:</STRONG> A recap of the Unix STDIO philosophy, thinking about the three streams STDIN, STDOUT and STDERR, and the power that brings. There's a parallel between that and the dotchains that we're writing in JS with the Axios library.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=vwPE7IaEfbc&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h15m55s" target="_blank" rel="nofollow noopener noreferrer">00:15:55</A>:</STRONG> Talking about Node.js debugging, based on a comment from <SPAN class="mention-scrubbed">nabheet.madan3</SPAN>.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=vwPE7IaEfbc&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h17m04s" target="_blank" rel="nofollow noopener noreferrer">00:17:04</A>:</STRONG> Reminding ourselves of what we have in the project directory <CODE>csvf</CODE>, including taking a quick look inside the project's <CODE>package.json</CODE>. This shows us that we have two dependencies, one on <CODE><a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a>/cds</CODE> and the other on the <CODE>command-line-args</CODE> package.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=vwPE7IaEfbc&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h17m40s" target="_blank" rel="nofollow noopener noreferrer">00:17:40</A>:</STRONG> A feature in the terminal file manager <A href="https://github.com/ranger/ranger" target="_blank" rel="nofollow noopener noreferrer">Ranger</A> that I discovered accidentally is the "zoom" feature with <CODE>i</CODE>, which I show here.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=vwPE7IaEfbc&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h20m18s" target="_blank" rel="nofollow noopener noreferrer">00:20:18</A>:</STRONG> Setting out our new intentions by modifying the option definitions in the constant <CODE>optionDefinitions</CODE>. Remembering how it works right now with a simple example:<BR />
<PRE class="shell"><CODE>=&gt; ./cli.js -v -i tmp/Suppliers.csv --fields supplierID city<BR />
&gt;&gt; Processing tmp/Suppliers.csv<BR />
&gt;&gt; Filtering to supplierID,city<BR />
&gt;&gt; Written to _out.csv</CODE></PRE><BR />
What we actually want to be able to do now is something more like this:<BR />
<PRE class="shell"><CODE>=&gt; cat tmp/Suppliers.csv | ./cli.js --fields supplierID city &gt; file.csv 2&gt; error.log</CODE></PRE><BR />
using the pipe operator (<CODE>|</CODE>), the redirect operator (<CODE>&gt;</CODE>) and the redirect-to-stderr operator (<CODE>2&gt;</CODE>).<BR />
<BR />
Anyway, we end up with options that look like this (from the help text):<BR />
<PRE><CODE>Options:<BR />
    -i, --input    Input CSV file (reads from STDIN if not specified)<BR />
    -o, --output   Output CSV file (defaults to STDOUT)<BR />
    -f, --fields   List of fields to output (space separated)<BR />
<BR />
    -h, --help     Shows this help<BR />
    -v, --verbose  Talkative mode<BR />
<BR />
Examples:<BR />
    csvf -i data.csv -f supplierID companyName city -o smaller.csv<BR />
    csvf --fields supplierID city &lt; input.csv &gt; output.csv<BR />
    cat input.csv | csvf -f supplierID city | less</CODE></PRE><BR />
<STRONG><A href="https://www.youtube.com/watch?v=vwPE7IaEfbc&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h28m45s" target="_blank" rel="nofollow noopener noreferrer">00:28:45</A>:</STRONG> I fix the call to <CODE>process.exit()</CODE> by changing the value passed from a 1 to a 0, denoting success rather than failure (!).<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=vwPE7IaEfbc&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h29m10s" target="_blank" rel="nofollow noopener noreferrer">00:29:10</A>:</STRONG> Looking at the NPM module <A href="https://www.npmjs.com/package/get-stdin" target="_blank" rel="nofollow noopener noreferrer">get-stdin</A> which allows us to read from STDIN, which we will use. And it's promised-based, too!<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=vwPE7IaEfbc&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h29m50s" target="_blank" rel="nofollow noopener noreferrer">00:29:50</A>:</STRONG> We install <CODE>get-stdin</CODE> with:<BR />
<PRE class="shell"><CODE>=&gt; npm install --save get-stdin</CODE></PRE><BR />
... write a simple test script to try it out:<BR />
<DIV><BR />
<PRE class="sourceCode javascript"><CODE class="sourceCode javascript"><SPAN class="kw">const</SPAN> getStdin <SPAN class="op">=</SPAN> <SPAN class="at">require</SPAN>(<SPAN class="st">'get-stdin'</SPAN>)<BR />
<SPAN class="at">getStdin</SPAN>()<BR />
  .<SPAN class="at">then</SPAN>(xs <SPAN class="op">=&gt;</SPAN> <SPAN class="va">console</SPAN>.<SPAN class="at">log</SPAN>(<SPAN class="st">"GOT:"</SPAN><SPAN class="op">,</SPAN> xs))</CODE></PRE><BR />
</DIV><BR />
... and try it out:<BR />
<PRE class="shell"><CODE>=&gt; echo "hello" | node stdin.js<BR />
GOT: hello</CODE></PRE><BR />
and also:<BR />
<PRE class="shell"><CODE>=&gt; node stdin.js &lt; /etc/hosts<BR />
GOT: ...</CODE></PRE><BR />
<STRONG><A href="https://www.youtube.com/watch?v=vwPE7IaEfbc&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h32m00s" target="_blank" rel="nofollow noopener noreferrer">00:32:00</A>:</STRONG> Someprogrammingdude points out that a future version of JS will indeed get a pipeline operator - this is great. See <A class="uri" href="https://github.com/tc39/proposal-pipeline-operator" target="_blank" rel="nofollow noopener noreferrer">https://github.com/tc39/proposal-pipeline-operator</A> for more details. This information causes me to think of a talk on the F# language that I saw at <A href="http://lambdalounge.org.uk" target="_blank" rel="nofollow noopener noreferrer">Manchester Lambda Lounge</A> which in turn reminded me of the Elm language.<BR />
<BR />
At this point I dug out the content from a talk I gave at Lambda Lounge a couple of years ago: <A href="https://docs.google.com/presentation/d/1zpN8150gIiYEC-o_Nc35T3xshXJIorEBEcjaarSw9z8/edit#slide=id.p" target="_blank" rel="nofollow noopener noreferrer">Discovering the beauty of pattern matching and recursion</A> where I look at these two language features in different languages, including Elm, Elixir, Haskell, JavaScript and Clojure. This talk was slide based but the slides are mostly full of code, so that's OK, right? <span class="lia-unicode-emoji" title=":slightly_smiling_face:">🙂</span><BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=vwPE7IaEfbc&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h35m08s" target="_blank" rel="nofollow noopener noreferrer">00:35:08</A>:</STRONG> Starting to refactor the code a little bit, turning the main part of the script into a new function <CODE>process</CODE> - this lays the ground for a really odd error which we'll come across a bit further on!<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=vwPE7IaEfbc&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h37m20s" target="_blank" rel="nofollow noopener noreferrer">00:37:20</A>:</STRONG> Now we can refactor the final part which looks at the value of <CODE>options.input</CODE> and we use <CODE>util.promisify</CODE> to make things a little nicer - see the post <A href="http://2ality.com/2017/05/util-promisify.html" target="_blank" rel="nofollow noopener noreferrer">Node.js: util.promisify()</A> for more detail.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=vwPE7IaEfbc&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h47m58s" target="_blank" rel="nofollow noopener noreferrer">00:47:58</A>:</STRONG> So we end up with this:<BR />
<DIV><BR />
<PRE class="sourceCode javascript"><CODE class="sourceCode javascript"><SPAN class="cf">if</SPAN> (<SPAN class="va">options</SPAN>.<SPAN class="at">input</SPAN>) <SPAN class="op">{</SPAN><BR />
  <SPAN class="at">readFileAsync</SPAN>(<SPAN class="va">options</SPAN>.<SPAN class="at">input</SPAN><SPAN class="op">,</SPAN> <SPAN class="op">{</SPAN> <SPAN class="dt">encoding</SPAN><SPAN class="op">:</SPAN> <SPAN class="st">'utf8'</SPAN> <SPAN class="op">}</SPAN>)<BR />
    .<SPAN class="at">then</SPAN>(process)<BR />
    .<SPAN class="at">then</SPAN>(<SPAN class="va">console</SPAN>.<SPAN class="at">log</SPAN>)</CODE></PRE><BR />
</DIV><BR />
Notice how this is so clean and solid state, there's nothing really "moving" in here, not even any explicit arguments passed to the functions in the <CODE>then()</CODE> calls, nothing that can go awry.<BR />
<BR />
Notice also, however, a glaring oversight that we'll discover shortly!<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=vwPE7IaEfbc&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h49m40s" target="_blank" rel="nofollow noopener noreferrer">00:49:40</A>:</STRONG> We note that right now, while we can write to STDOUT already (with <CODE>console.log</CODE>), both our verbose output (prefixed with "&gt;&gt;") and also the real data output goes to the same place, which we see in a test run. We fix this in the <CODE>log</CODE> function by changing the <CODE>console.log</CODE> call to <CODE>process.stderr.write</CODE>.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=vwPE7IaEfbc&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h51m10s" target="_blank" rel="nofollow noopener noreferrer">00:51:10</A>:</STRONG> Bang! When we try the new script out, we get a nice error: "Cannot read property 'write' of undefined". What the heck? Anyway, after a few brief moments of head scratching, we realise that this is because I inadvertently <STRONG>redefined</STRONG> a major feature of the Node.js runtime in that we created our own function called <CODE>process</CODE>, clobbering the standard <CODE>process</CODE> object which has, amongst other things, the <CODE>stderr</CODE> property (to which we're referring with <CODE>process.stderr.write</CODE>).<BR />
<BR />
What a fool!<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=vwPE7IaEfbc&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h57m30s" target="_blank" rel="nofollow noopener noreferrer">00:57:30</A>:</STRONG> Renaming our function from <CODE>process</CODE> to something else (<CODE>filtercsv</CODE>) fixes the problem <span class="lia-unicode-emoji" title=":slightly_smiling_face:">🙂</span><BR />
<BR />
We can now finish the refactoring of the script, which we do, including writing an <CODE>output</CODE> function in a way that we can partially apply it, too.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=vwPE7IaEfbc&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=01h01m50s" target="_blank" rel="nofollow noopener noreferrer">01:01:50</A>:</STRONG> Trying the refactored script out, with STDIN and appending to the STDERR output using the append (<CODE>&gt;&gt;</CODE>) operator (as opposed to the (over)write operator (<CODE>&gt;</CODE>)), and trying the write-to-file option too. All seems to work as intended. Great!<BR />
<BR />
Phew!
