2018-07-09-monday-morning-thoughts-curiosity-and-understanding
Monday morning thoughts: curiosity and understanding
technology-blog-sap
2018-07-09
https://community.sap.com/t5/technology-blogs-by-sap/monday-morning-thoughts-curiosity-and-understanding/ba-p/13386230
<EM>In this post, I think about how curiosity can lead to a better understanding of things, and give a specific example concerning CDS and the new Application Programming Model for SAP Cloud Platform.</EM><BR />
<BR />
On Friday I tweeted something that seemed to capture the interest of some:<BR />
<BR />
<A href="https://twitter.com/qmacro/status/1015254046079422465" target="test_blank" rel="nofollow noopener noreferrer">https://twitter.com/qmacro/status/1015254046079422465</A><BR />
<BR />
It was a discovery that was the result of a natural curiosity which I think is part of my DNA, and I suspect a part of many folks' DNA here in the SAP Community. With the advent of new technologies, I've often wondered how things work, wondered about the underlying themes or features that have been put together to form a greater whole. It's like when you get a new device, and the first thing you do is to turn it around, upside down, to look at the ports, and open it up to see what's inside.<BR />
<BR />
<STRONG>Digging in</STRONG><BR />
<BR />
This curiosity has been especially prevalent in my various roles in the SAP technology ecosphere. It's driven me to look deeper into things, dive below the surface, primarily to find out how things work, but equally to understand what the creators were thinking and why they made the design decisions that they did. As a result, I've gained clarity, enjoyed a richer understanding, and perhaps most subtly improved my view of the bigger picture.<BR />
<BR />
Merely asking myself "why" and "how" more often than not results in a comprehension that really helps me. Not always directly - there are plenty of occasions where I've "felt" something was the right direction, or the wrong direction, not because of some innate sixth sense, but because of the layers of information I've unearthed by digging in, trying to get to the bottom of how certain things are put together.<BR />
<BR />
And so it was on Friday. It was the end of the day, and the end of a long week, and a good opportunity to "reward myself" with a bit of time to look into something that had been nagging me for a few weeks.<BR />
<BR />
<STRONG>The Application Programming Model and CDS</STRONG><BR />
<BR />
I've written about these subjects in this <A href="https://blogs.sap.com/tag/mondaymorningthoughts/" target="_blank" rel="noopener noreferrer">Monday morning thoughts series</A> before. In fact, I have two posts, one on <A href="https://blogs.sap.com/2018/06/25/monday-morning-thoughts-programming-models/" target="_blank" rel="noopener noreferrer">programming models</A> and one on <A href="https://blogs.sap.com/2018/06/11/monday-morning-thoughts-core-data-services/" target="_blank" rel="noopener noreferrer">CDS</A>. I'm fascinated by the fact that now I'm wearing my CDS tinted spectacles I can see it everywhere. And I was intrigued by the Application Programming Model's&nbsp;<A href="https://help.sap.com/viewer/65de2977205c403bbc107264b8eccf4b/Cloud/en-US/5ec8c983a0bf43b4a13186fcf59015fc.html" target="_blank" rel="noopener noreferrer">Getting Started tutorial</A>, in particular what was going on behind the scenes - what was the SAP Web IDE doing for us as we progressed, what was being generated, and perhaps most relevant for this post - *how*.<BR />
<BR />
I decided to dig in a little and let my curiosity loose. Here's a part of the journey I took, which resulted in the tweet.<BR />
<BR />
The tutorial starts off in the "Start a Project" step with generating a project using the template wizard, specifically choosing the "SAP Cloud Platform Business Application". Notably, there's quite an array of artefacts that appear from the get-go in the generated project. I was curious about these, what they were, and where they came from, particularly the db/data-model.cds and srv/my-service.cds files and perhaps moreso the outermost package.json file, which contained this:<BR />
<PRE class="language-javascript"><CODE>{<BR />
	"name": "my.app",<BR />
	"description": "A simple data model for SAP CP application",<BR />
	"version": "1.0.0",<BR />
	"dependencies": {<BR />
		"@sap/cds": "2.x"<BR />
	},<BR />
<BR />
	"scripts": {<BR />
		"build": "cds build --clean"<BR />
	},<BR />
	"private": true<BR />
}</CODE></PRE><BR />
There's an SAP NPM (Node Package Manager) registry at <A href="https://npm.sap.com" target="test_blank" rel="noopener noreferrer">https://npm.sap.com</A> - I remember reading about it in a post from&nbsp;<SPAN class="mention-scrubbed">sven.kohlhaas</SPAN>&nbsp;last year: "<A href="https://blogs.sap.com/2017/05/16/sap-npm-registry-launched-making-the-lives-of-node.js-developers-easier/" target="_blank" rel="noopener noreferrer">SAP NPM Registry launched: Making the lives of Node.js developers easier</A>".<BR />
<BR />
Moreover, I had seen, when previously going through the tutorial steps, that in the "Compile OData Models" step of the tutorial, I saw output appear in the SAP Web IDE console like this:<BR />
<PRE class="language-markup"><CODE>7:31:05 AM (CDS) Using language server v1.4.10 and compiler v1.0.30<BR />
<BR />
[...]<BR />
<BR />
7:32:52 AM (DIBuild) Build of /bookshop in progress<BR />
7:33:03 AM (DIBuild) [INFO] Injecting source code into builder...<BR />
[INFO] Source code injection finished<BR />
[INFO] ------------------------------------------------------------------------<BR />
npm install<BR />
added 20 packages from 8 contributors in 0.809s<BR />
npm run build<BR />
<BR />
&gt; my.app@1.0.0 build /home/vcap/app/.java-buildpack/tomcat/temp/builder/sap.cds.mta/builds/build-253077567018682723/bookshop<BR />
&gt; cds build --clean<BR />
<BR />
This is CDS 2.3.2, Compiler 1.0.30, Home: node_modules/@sap/cds<BR />
<BR />
Compiled 'db/data-model.cds' to  <BR />
  db/src/gen/.hdinamespace  <BR />
  db/src/gen/CATALOGSERVICE_AUTHORS.hdbcds  <BR />
  db/src/gen/CATALOGSERVICE_BOOKS.hdbcds  <BR />
  db/src/gen/CATALOGSERVICE_ORDERS.hdbcds  <BR />
  db/src/gen/MY_BOOKSHOP_AUTHORS.hdbcds  <BR />
  db/src/gen/MY_BOOKSHOP_BOOKS.hdbcds  <BR />
  db/src/gen/MY_BOOKSHOP_ORDERS.hdbcds<BR />
Compiled 'srv/my-service.cds' to  <BR />
  srv/src/main/resources/edmx/CatalogService.xml  <BR />
  srv/src/main/resources/edmx/csn.json<BR />
<BR />
CDS return code: 0<BR />
7:33:16 AM (DIBuild) ********** End of /bookshop Build Log **********<BR />
</CODE></PRE><BR />
Indeed, that first message "(CDS) Using language server ..." had kicked off my thoughts in the <A href="https://blogs.sap.com/2018/06/11/monday-morning-thoughts-core-data-services/" target="_blank" rel="noopener noreferrer">Monday morning thoughts post on Core Data Services</A>.<BR />
<BR />
Staring long enough at that output, it appears that the "Build CDS" command in the SAP Web IDE triggered some sort of npm based process.<BR />
<BR />
<STRONG>Challenge accepted</STRONG><BR />
<BR />
Could it be that I could find the&nbsp;<a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a>/cds package in the NPM registry, install it manually in a terminal session, and get to where I was here in the SAP Web IDE, but independent of it?<BR />
<BR />
The answer was yes.<BR />
<BR />
In my NPM configuration file (~/.npmrc) I have only a single setting:<BR />
<PRE class="language-markup"><CODE>prefix=/Users/i347491/.npm-packages</CODE></PRE><BR />
This means that globally installed packages end up there, rather than some directory controlled by root, so I can avoid all that <A href="http://hitchhikers.wikia.com/wiki/Infinite_Improbability_Drive" target="_blank" rel="nofollow noopener noreferrer">tedious mucking about in hyperspace</A> aka sudo-ing to root.<BR />
<BR />
Anyway, I added the SAP NPM registry to my config, crossed my fingers, and asked for a global install of the&nbsp;<a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a>/cds package:<BR />
<PRE class="language-c"><CODE>i347491@C02W52RKHV2Q:~<BR />
=&gt; npm config set @sap:registry <A href="https://npm.sap.com" target="test_blank" rel="noopener noreferrer">https://npm.sap.com</A><BR />
<BR />
i347491@C02W52RKHV2Q:~<BR />
=&gt; npm install -g @sap:cds<BR />
/Users/i347491/.npm-packages/bin/cds -&gt; /Users/i347491/.npm-packages/lib/node_modules/@sap/cds/bin/cds.js<BR />
+ @sap/cds@2.3.2<BR />
added 20 packages in 5.732s<BR />
<BR />
i347491@C02W52RKHV2Q:~<BR />
=&gt; </CODE></PRE><BR />
Happily, this ties up with part of the output we saw from the SAP Web IDE console, specifically the 'npm install' command, in the context of the package.json file directing, via the 'dependencies' section, that version 2.x of <a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a>/cds package should be installed.<BR />
<BR />
Immediately this gave me the 'cds' command, the output of which I posted in my tweet, above.<BR />
<BR />
Digging in a little more, I wondered about a couple of cds command options: init, and build. I investigated with the help documentation built into the command ('cds help init', and 'cds help build').<BR />
<BR />
It turns out that 'cds init' will create a new project folder with various artefacts, just like what happens with the template wizard. There's even a '--java' option for generating files for Java development (in the 'srv' folder, by default). If you run through the template wizard you'll see those files in the SAP Web IDE.<BR />
<BR />
More interestingly perhaps was the cds command invoked via the 'npm run build' command we saw in the SAP Web IDE console: specifically 'cds build --clean'. What does the help documentation tell us? Let's have a look:<BR />
<PRE class="language-css"><CODE>i347491@C02W52RKHV2Q:~ <BR />
=&gt; cds help build<BR />
<BR />
SYNOPSIS<BR />
<BR />
    cds build [&lt;project&gt;] [&lt;options&gt;]<BR />
<BR />
    Builds all modules in the given or current project by compiling contained<BR />
    cds sources according to the module types. The modules are folders in the<BR />
    project root. All well known modules or those configured in package.json<BR />
    are built.<BR />
<BR />
<BR />
OPTIONS<BR />
<BR />
    -in | --project &lt;folder&gt;<BR />
<BR />
        use the specified folder as the project root.<BR />
        default = current working directory ./<BR />
<BR />
    -c  | --clean<BR />
<BR />
        deletes target folders before building modules.<BR />
        default = true<BR />
<BR />
    -i  | --incremental<BR />
<BR />
        do not delete target folders before building modules.<BR />
<BR />
    -l  | --lang &lt;languages&gt; | all<BR />
<BR />
        localize the models with given &lt;languages&gt;, a comma-separated list<BR />
        of language/locale codes or all.<BR />
<BR />
    -o  | --dest &lt;folder&gt;<BR />
<BR />
        writes output to the given folder.<BR />
        default = &lt;project root&gt;<BR />
<BR />
<BR />
EXAMPLES<BR />
<BR />
   cds build<BR />
   cds build project -o _out<BR />
<BR />
<BR />
i347491@C02W52RKHV2Q:~ <BR />
=&gt; <BR />
</CODE></PRE><BR />
Gosh! This is exactly what I was looking for (even though I didn't realise it at the outset). CDS's wonderful role as an abstraction layer is very relevant here. The 'cds build' command seems to wrap the default 'cds compile' command, compiling CDS sources to their targets. What targets? Well, looking at the help documentation for the compile command ('cds help compile') reveals all sorts of goodness relating to targets such as CDL, EDMX, YAML and more.<BR />
<BR />
Indeed, the rest of the output we saw in the console confirms this - the db/data-model.cds file is compiled into 'hdbcds' files, which I can repeat locally on my command line like this:<BR />
<PRE class="language-markup"><CODE>i347491@C02W52RKHV2Q:/tmp <BR />
=&gt; cds init testproject<BR />
i347491@C02W52RKHV2Q:/tmp <BR />
=&gt; cd testproject/<BR />
i347491@C02W52RKHV2Q:/tmp/testproject <BR />
=&gt; cds build --clean<BR />
This is CDS 2.5.1, Compiler 1.0.30, Home: ../../../Users/i347491/.npm-packages/lib/node_modules/@sap/cds<BR />
<BR />
Compiled 'db/data-model.cds' to<BR />
  db/src/gen/.hdinamespace<BR />
  db/src/gen/MY_DATA_MODEL_FOO.hdbcds<BR />
  db/src/gen/MY_SERVICE_FOOSERVICE_FOO.hdbcds<BR />
Compiled 'srv/my-service.cds' to<BR />
  srv/src/main/resources/edmx/csn.json<BR />
  srv/src/main/resources/edmx/my.service.FooService.xml<BR />
i347491@C02W52RKHV2Q:/tmp/testproject <BR />
=&gt; <BR />
</CODE></PRE><BR />
What this tells me is that our hunch about CDS was not crazy:<BR />
<BR />
<EM>"[...] CDS — a layer that has hitherto been largely understated — has an identity, a version, all of its own. Even the CDS compiler has its own version. Rather than thinking about CDS as an amorphous blob of language that sits implicitly somewhere between the database and UI5 (especially Fiori Elements, with the annotations that CDS offers), CDS is very much something that we should sit up and pay attention to as an explicit part of SAP’s development technology stack."<BR />
</EM>-- from&nbsp;the post on <A href="https://blogs.sap.com/2018/06/11/monday-morning-thoughts-core-data-services/" target="_blank" rel="noopener noreferrer">Core Data Services</A><BR />
<BR />
<A name="noidea" target="_blank"></A><STRONG>Another win for curiosity</STRONG><BR />
<BR />
There's a meme out there which tickles me, because for me it's so true in many ways:<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2018/07/Screen-Shot-2018-07-09-at-08.35.02.png" /><BR />
<BR />
(via <A href="http://www.quickmeme.com/" target="_blank" rel="nofollow noopener noreferrer">quickmeme.com</A>)<BR />
<BR />
In this case, in trying to keep up, keep ahead, with technologies that I think are important, I've stumbled across something that I was curious about. And that curiosity caused me to investigate, with the journey and end result fairly enlightening. My understanding of the area has improved and my view of the surface relating to Core Data Services, the build process, tools &amp; approaches has become a little bit clearer. CDS is something I should continue to pay attention to, and the tooling promises to be wider than a single IDE. Additionally, it's clear that the tooling is in a shape and colour that is so very not SAP-proprietary - the NPM world in particular, and NodeJS in general.<BR />
<BR />
I don't think I could have got this from simply reading documentation. I often only have a chance to attain this level of understanding if I bumble my way through things, finding the right path between knowing what I know and don't know, awareness that there are things I don't know that I don't know, and a restless curiosity.<BR />
<BR />
I suspect there are many of you with a similar approach to things. What are your experiences, how do you learn and increase your understanding? Let me know in the comments. And in the meantime ... stay curious.<BR />
<BR />
&nbsp;<BR />
<BR />
This post was brought to you by a refreshingly cool run in the early Manchester sunrise, and <A href="https://www.pactcoffee.com/coffees/planalto" target="_blank" rel="nofollow noopener noreferrer">Pact Coffee's Planalto</A>.<BR />
<BR />
&nbsp;<BR />
<BR />
Read more posts in this series here:&nbsp;<A href="https://blogs.sap.com/tag/mondaymorningthoughts/" target="_blank" rel="noopener noreferrer">Monday morning thoughts</A>.
