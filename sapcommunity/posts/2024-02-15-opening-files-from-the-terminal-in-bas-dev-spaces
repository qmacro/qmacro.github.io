2024-02-15-opening-files-from-the-terminal-in-bas-dev-spaces
Opening files from the terminal in BAS dev spaces
application-developmentblog-board
2024-02-15
https://community.sap.com/t5/application-development-blog-posts/opening-files-from-the-terminal-in-bas-dev-spaces/ba-p/13606953
<P><SPAN>In the comments to&nbsp;</SPAN><A href="https://www.youtube.com/watch?v=1ywiOaGVA5w" target="_blank" rel="noopener nofollow noreferrer">episode 4 of our back to basics series of live stream episodes on CAP, on the Hands-on SAP Dev show</A><SPAN>, there was a question on my use of&nbsp;</SPAN>code<SPAN>&nbsp;in VS Code, which, when invoked in the terminal (e.g.&nbsp;</SPAN>code services.cds<SPAN>) opens the file directly in a VS Code editor window, like this:</SPAN></P><P><SPAN><span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="vscode-open-file.gif" style="width: 999px;"><img src="https://community.sap.com/t5/image/serverpage/image-id/66097iB237FF443FD1889F/image-size/large?v=v2&amp;px=999" role="button" title="vscode-open-file.gif" alt="vscode-open-file.gif" /></span></SPAN></P><P>The question was about<SPAN>&nbsp;</SPAN>code<SPAN>&nbsp;</SPAN>being recognised in SAP Business Application Studio (BAS) dev spaces.</P><P>Basically, while<SPAN>&nbsp;</SPAN>code<SPAN>&nbsp;</SPAN>is not a command that's available in dev spaces, there's a BAS-specific command<SPAN>&nbsp;</SPAN>basctl<SPAN>&nbsp;</SPAN>which has a couple of options, one of which is<SPAN>&nbsp;</SPAN>--open. Here are some examples, taken from the usage text:</P><P>&nbsp;</P><pre class="lia-code-sample language-text"><code>Examples
  $ basctl --open http://sap.com
  $ basctl --open http://localhost:8082/tmp
  $ basctl --open file:///home/user/projects/proj1/myfile.txt
  $ basctl --open /myfile.txt
  $ basctl --open ./myfolder/myfile.txt</code></pre><P>&nbsp;</P><P>So while there isn't a<SPAN>&nbsp;</SPAN>code<SPAN>&nbsp;</SPAN>command, you can use<SPAN>&nbsp;</SPAN>basctl --open<SPAN>&nbsp;</SPAN>to get something similar. I say similar, because for some reason I cannot yet fathom (my small brain, again) it opens the file in a new column. Anyway, here's what it looks like in action:</P><P><span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="basctl-open-file.gif" style="width: 999px;"><img src="https://community.sap.com/t5/image/serverpage/image-id/66099i8BA8180320BE42A4/image-size/large?v=v2&amp;px=999" role="button" title="basctl-open-file.gif" alt="basctl-open-file.gif" /></span></P><P>(I've asked internally about this behaviour, and will update this blog post with anything I find out.)</P><P>The nice thing about what<SPAN>&nbsp;</SPAN>basctl<SPAN>&nbsp;</SPAN>offers perhaps is the ability to invoke framework commands, via an additional<SPAN>&nbsp;</SPAN>--command<SPAN>&nbsp;</SPAN>option, like this:<SPAN>&nbsp;</SPAN>basctl --command workbench.action.openSettings.</P><P>The question also asked about my use of<SPAN>&nbsp;</SPAN>tree, and noted its lack of availability in BAS dev spaces. This is simple to address, if not entirely straightforward. I got<SPAN>&nbsp;</SPAN>tree<SPAN>&nbsp;</SPAN>working in my dev space, as you can see:</P><P><span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="tree-in-bas-dev-space.png" style="width: 683px;"><img src="https://community.sap.com/t5/image/serverpage/image-id/66101i224A4F195ADAD200/image-size/large?v=v2&amp;px=999" role="button" title="tree-in-bas-dev-space.png" alt="tree-in-bas-dev-space.png" /></span></P><P>I did this by copying in a<SPAN>&nbsp;</SPAN>tree<SPAN>&nbsp;</SPAN>binary (and ensuring the execution bit was set). Where did I get that<SPAN>&nbsp;</SPAN>tree<SPAN>&nbsp;</SPAN>binary from? Well, first, I looked what the architecture of the dev spaces was, via<SPAN>&nbsp;</SPAN>uname<SPAN>&nbsp;</SPAN>(I've added whitespace for readability):</P><P>&nbsp;</P><pre class="lia-code-sample language-shell"><code>user: user $ uname -a
Linux workspaces-ws-nvzxc-deployment-9f9b9b656-sfdh5
5.15.135-gardenlinux-cloud-amd64 
SMP Debian 5.15.135-0gardenlinux1 (2023-10-12)
x86_64 GNU/Linux</code></pre><P>&nbsp;</P><P>I also checked what distribution the environment was based on:</P><P>&nbsp;</P><pre class="lia-code-sample language-shell"><code>user: user $ cat /etc/issue
Debian GNU/Linux 12 \n \l</code></pre><P>&nbsp;</P><P>Basically, it's Debian 12 on x86_64 architecture. Classic. So then I created a quick container from a Debian 12 based container image, via a<SPAN>&nbsp;</SPAN><A href="https://qmacro.org/blog/posts/2024/01/26/exploring-codespaces-as-temporary-dev-containers/" target="_blank" rel="noopener nofollow noreferrer">codespace</A><SPAN>&nbsp;</SPAN>that I spun up for the purpose, and copied the<SPAN>&nbsp;</SPAN>tree<SPAN>&nbsp;</SPAN>binary out of there to my local filesystem, like this:</P><P>&nbsp;</P><pre class="lia-code-sample language-shell"><code>gh codespace cp 'remote:/usr/bin/tree' .</code></pre><P>&nbsp;</P><P>I then copied that binary to the dev space by dragging it into the Explorer window, and then set the execution bit with<SPAN>&nbsp;</SPAN>chmod +x $HOME/tree.</P><P>Job done!</P><P>(<A href="https://qmacro.org/blog/posts/2024/02/15/opening-files-from-the-terminal-in-bas-dev-spaces/" target="_self" rel="nofollow noopener noreferrer">Originally published on qmacro.org</A>)</P>
