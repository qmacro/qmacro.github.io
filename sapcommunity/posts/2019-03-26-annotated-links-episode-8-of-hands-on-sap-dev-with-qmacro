2019-03-26-annotated-links-episode-8-of-hands-on-sap-dev-with-qmacro
Annotated links: Episode 8 of Hands-on SAP dev with qmacro
technology-blog-sap
2019-03-26
https://community.sap.com/t5/technology-blogs-by-sap/annotated-links-episode-8-of-hands-on-sap-dev-with-qmacro/ba-p/13422149
<EM>This is a searchable description of the content of a live stream recording, specifically <STRONG>"Episode 8 - Using Axios, ES6, promises &amp; pure functions to grab data"</STRONG> in the "<A href="https://bit.ly/handsonsapdev" target="_blank" rel="nofollow noopener noreferrer">Hands-on SAP dev with qmacro</A>" series. There are links directly to specific highlights in the video recording. For links to annotations of other episodes, please see the "<A href="https://bit.ly/handsonsapdev#replays" target="_blank" rel="nofollow noopener noreferrer">Catch the replays</A>" section of the series blog post.</EM><BR />
<BR />
This episode, titled "<A href="https://bit.ly/handsonsapdev#ep8" target="_blank" rel="nofollow noopener noreferrer">Using Axios, ES6, promises &amp; pure functions to grab data</A>", was streamed live on Fri 01 Mar 2019 and is approximately one hour in length. The stream recording is <A href="https://www.youtube.com/watch?v=xUDSnNPFTQo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0" target="_blank" rel="nofollow noopener noreferrer">available on YouTube</A>.<BR />
<BR />
<EM><IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2019/03/Screen-Shot-2019-03-26-at-05.26.51.png" /></EM><BR />
<BR />
Below is a brief synopsis, and links to specific highlights - use these links to jump directly to particular places of interest in the recording, based on 'hh:mm:ss' style timestamps.<BR />
<H2 id="brief-synopsis" id="toc-hId-930646788">Brief synopsis</H2><BR />
In <A href="https://bit.ly/handsonsapdev#ep6" target="_blank" rel="nofollow noopener noreferrer">Episode 6</A> we set out creating our mini Northwind service, called Northbreeze, and started to write some code to grab the Northwind data, exploring Axios as an HTTP client library that supports promises and (therefore) dot chaining. In this episode we continue on towards completing this code to produce CSV files as input to our CAP model, exploring pure functions along the way.<BR />
<H2 id="links-to-specific-highlights" id="toc-hId-734133283">Links to specific highlights</H2><BR />
<STRONG><A href="https://www.youtube.com/watch?v=xUDSnNPFTQo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h03m15s" target="_blank" rel="nofollow noopener noreferrer">00:03:15</A>:</STRONG> Reminding ourselves of what we'd been doing on this subject last time: We had created an initial Node.js project with a <CODE>grab.js</CODE> script to pull data from the Northwind OData service.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=xUDSnNPFTQo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h04m35s" target="_blank" rel="nofollow noopener noreferrer">00:04:35</A>:</STRONG> <SPAN class="mention-scrubbed">rsletta</SPAN> shares a fun fact with us - Coffee Corner Radio is partially the reason why there will be an SAP Inside Track in Oslo this year, and it's on 17 Aug 2019! See the <A href="https://wiki.scn.sap.com/wiki/display/events/SAP+Inside+Track+Oslo+-+17+August+2019" target="_blank" rel="noopener noreferrer">sitOSLO wiki page</A> for more details.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=xUDSnNPFTQo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h04m54s" target="_blank" rel="nofollow noopener noreferrer">00:04:54</A>:</STRONG> Noting we'd installed the Axios package, an HTTP client that supports the use of promises, and taking a look where we'd got to in the <CODE>grab.js</CODE> script, using Axios's <CODE>.all()</CODE> function which allows us to fire off multiple HTTP requests, and which returns a promise.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=xUDSnNPFTQo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h07m30s" target="_blank" rel="nofollow noopener noreferrer">00:07:30</A>:</STRONG> Adding a function that does effectively nothing just so we can add a breakpoint in VS Code, to inspect what we get from the multiple HTTP calls:<BR />
<PRE><CODE>.then(xs =&gt; {<BR />
  return xs<BR />
})</CODE></PRE><BR />
What we get is an array of two objects representing the responses to the HTTP requests. The object is the response data from an HTTP perspective, but also a nicely parsed data object.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=xUDSnNPFTQo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h09m27s" target="_blank" rel="nofollow noopener noreferrer">00:09:27</A>:</STRONG> Looking at the <CODE>odata.nextLink</CODE> based paging mechanism that's used to return pages of data where the whole data set is deemed to large to return in one go (there are, for example, 77 products).<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=xUDSnNPFTQo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h12m33s" target="_blank" rel="nofollow noopener noreferrer">00:12:33</A>:</STRONG> Noting that I've downloaded, into a <CODE>data</CODE> directory, the JSON representing the data resources for the entitysets we want to download, so we can store and serve them locally, rather than run any risk of being (rightly) rate-limited or banned for overuse of the public Northwind service.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=xUDSnNPFTQo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h13m40s" target="_blank" rel="nofollow noopener noreferrer">00:13:40</A>:</STRONG> Based on a question from <SPAN class="mention-scrubbed">christian.drumm</SPAN>, we take a brief look at <A href="https://github.com/ranger/ranger" target="_blank" rel="nofollow noopener noreferrer">ranger</A>, a terminal based file manager with lots of features including Vim keybindings. My ranger config, and more, is available in my <A href="https://github.com/qmacro/scripts" target="_blank" rel="nofollow noopener noreferrer">scripts</A> repo on GitHub.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=xUDSnNPFTQo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h16m28s" target="_blank" rel="nofollow noopener noreferrer">00:16:28</A>:</STRONG> Starting up a quick HTTP server using Python's <CODE>http.server</CODE> module, which is super useful. We use this in the <CODE>data/</CODE> directory to serve up the JSON resources we've previously downloaded. Note that the module name changed between Python versions 2 and 3 (it was <CODE>SimpleHTTPServer</CODE> with Python 2).<BR />
<PRE><CODE>=&gt; python -mhttp.server<BR />
Serving HTTP on 0.0.0.0 port 8000 (http://0.0.0.0:8000)</CODE></PRE><BR />
<STRONG><A href="https://www.youtube.com/watch?v=xUDSnNPFTQo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h18m00s" target="_blank" rel="nofollow noopener noreferrer">00:18:00</A>:</STRONG> Starting to edit the <CODE>grab.js</CODE> script, changing the <CODE>baseurl</CODE> to point to this local HTTP server endpoint.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=xUDSnNPFTQo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h19m15s" target="_blank" rel="nofollow noopener noreferrer">00:19:15</A>:</STRONG> Noting that my ultimate goal is to be able to work on this sort of stuff on an original VT100 terminal from DEC. I have (or used to have) many terminals, they're a wonderful thing to collect.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=xUDSnNPFTQo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h19m40s" target="_blank" rel="nofollow noopener noreferrer">00:19:40</A>:</STRONG> Installing <CODE>nodemon</CODE> (which we first saw in <A href="https://bit.ly/handsonsapdev#ep0" target="_blank" rel="nofollow noopener noreferrer">episode 0</A>) locally inside this project, and starting it up thus:<BR />
<PRE><CODE>./node_modules/nodemon/bin/nodemon.js grab.js</CODE></PRE><BR />
<STRONG><A href="https://www.youtube.com/watch?v=xUDSnNPFTQo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h22m40s" target="_blank" rel="nofollow noopener noreferrer">00:22:40</A>:</STRONG> Considering the steps in the code as a 'dot chain', a series of steps that are processed one after the other, where the output from one step becomes the input for the next. We explore this with:<BR />
<PRE><CODE>.then(xs =&gt; xs.reduce((a, x) =&gt; a.concat(x.data.value), []))<BR />
.then(xs =&gt; xs.length)<BR />
.then(console.log)</CODE></PRE><BR />
and can see that we get the right "count" of items in the output.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=xUDSnNPFTQo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h24m40s" target="_blank" rel="nofollow noopener noreferrer">00:24:40</A>:</STRONG> Reminding ourselves of what the first <CODE>.then(...)</CODE> call is doing, with the <CODE>reduce</CODE> function; basically, here's an example, from the Node.js REPL:<BR />
<PRE><CODE>&gt; stuff<BR />
[ [ 1, 2, 3 ], [ 4, 5, 6 ], [ 7, 8, 9 ] ]<BR />
&gt; stuff.reduce((a, x) =&gt; a.concat(x), [])<BR />
[ 1, 2, 3, 4, 5, 6, 7, 8, 9 ]</CODE></PRE><BR />
<STRONG><A href="https://www.youtube.com/watch?v=xUDSnNPFTQo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h28m00s" target="_blank" rel="nofollow noopener noreferrer">00:28:00</A>:</STRONG> Removing the static list of calls we've used so far (<CODE>axios.get(baseurl + '0')</CODE> etc) and writing something to generate them instead. In this part, we look again at Python, to briefly explore the difference between <CODE>range</CODE> and <CODE>xrange</CODE>, noting the difference between the two - one is lazy, the other is not. Laziness is a good thing! BTW there is <CODE>range</CODE> and <CODE>xrange</CODE> in Python 2, but Python 3's <CODE>range</CODE> is the equivalent of Python 2's <CODE>xrange</CODE>.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=xUDSnNPFTQo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h31m55s" target="_blank" rel="nofollow noopener noreferrer">00:31:55</A>:</STRONG> Now looking at the equivalent of <CODE>range</CODE> in JavaScript (I make a brief reference to Gary Bernhardt's excellent and very entertaining talk titled "<A href="https://www.destroyallsoftware.com/talks/wat" target="_blank" rel="nofollow noopener noreferrer">Wat</A>", on JavaScript), we create a <CODE>range</CODE> function like this:<BR />
<PRE><CODE>range = x =&gt; [...Array(x).keys()]</CODE></PRE><BR />
Lovely!<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=xUDSnNPFTQo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h37m00s" target="_blank" rel="nofollow noopener noreferrer">00:37:00</A>:</STRONG> Starting to replace the static list of <CODE>get()</CODE> calls in the <CODE>all()</CODE> call by generating the calls dynamically, making use of our new <CODE>range</CODE> function.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=xUDSnNPFTQo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h40m00s" target="_blank" rel="nofollow noopener noreferrer">00:40:00</A>:</STRONG> Slightly annoyed by myself for using a less than perfect Vim motion and action command to start appending at the end of the line. I used <CODE>$</CODE> to get to the end of the line, then <CODE>a</CODE> to start appending from there. I should have simply used <CODE>A</CODE> which does both those things.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=xUDSnNPFTQo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h41m25s" target="_blank" rel="nofollow noopener noreferrer">00:41:25</A>:</STRONG> The resulting reworking of the <CODE>all()</CODE> call looks like this:<BR />
<PRE><CODE>.all(range(4).map(x =&gt; axios.get(baseurl + (x * 20))))</CODE></PRE><BR />
<STRONG><A href="https://www.youtube.com/watch?v=xUDSnNPFTQo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h42m30s" target="_blank" rel="nofollow noopener noreferrer">00:42:30</A>:</STRONG> Creating a configuration map for the entities (Products, Suppliers, Categories), where we can supply the number of skipTokens required to retrieve everything (and implicitly, via the keys, have a list of the entities that we need).<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=xUDSnNPFTQo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h44m50s" target="_blank" rel="nofollow noopener noreferrer">00:44:50</A>:</STRONG> Starting to turn the main call into a function <CODE>grab</CODE> that we can then make calls to later. The function will return a promise.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=xUDSnNPFTQo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h46m48s" target="_blank" rel="nofollow noopener noreferrer">00:46:48</A>:</STRONG> Now we start to flesh out the call to <CODE>grab</CODE> like this:<BR />
<PRE><CODE>grab('Products')<BR />
  .then(xs =&gt; xs.length)<BR />
  .then(console.log)</CODE></PRE><BR />
(For the observant amongst you, I didn't notice that at this point I was making one HTTP call too many - note the call to '/Products-80' in the top left pane, and there are only 77 products!).<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=xUDSnNPFTQo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h47m43s" target="_blank" rel="nofollow noopener noreferrer">00:47:43</A>:</STRONG> Starting to wrap the call to <CODE>grab</CODE> in an <CODE>Object.keys</CODE> that works on the entities configuration map we previously defined, noting that the simple use of <CODE>console.log</CODE> in the <CODE>map</CODE> call, we get what is really passed to the function in a <CODE>map</CODE> call, i.e. three arguments (not just a single argument) - current value, index and array. See <A class="uri" href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map#Parameters" target="_blank" rel="nofollow noopener noreferrer">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map#Parameters</A> for details about this.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=xUDSnNPFTQo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h51m00s" target="_blank" rel="nofollow noopener noreferrer">00:51:00</A>:</STRONG> <SPAN class="mention-scrubbed">chris.whealy#overview</SPAN> makes the point, in a comment, that the <CODE>grab</CODE> function could be curried, to allow us to remove the reliance that it currently has on the global <CODE>baseurl</CODE> constant. This is a good idea and something we should look at if we cover this code again in the next few sessions. If you're interested in what this means and why it's a good idea, you might want to take a look at <A href="https://bit.ly/handsonsapdev#ep12" target="_blank" rel="nofollow noopener noreferrer">episode 12</A> ("Exploring and understanding parts of <SPAN class="citation"><a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a>/cds</SPAN> JS - code &amp; style") where we look at pure functions and partial application in the course of exploring a short JS script.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=xUDSnNPFTQo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h54m05s" target="_blank" rel="nofollow noopener noreferrer">00:54:05</A>:</STRONG> Using the <CODE>fs</CODE> module to start to write the JSON data to output files. When we run this, it causes <CODE>nodemon</CODE> to repeatedly restart, endlessly! This is because we're creating files that it notices, causing it to restart, and recreate the files, causing it to notice those files, restarting, etc. Ad infinitum.<BR />
<BR />
We fix this by modifying the call to <CODE>nodemon</CODE> to ignore files in the data directory, so it looks like this:<BR />
<PRE><CODE>./node_modules/nodemon/bin/nodemon.js grab.js --ignore data</CODE></PRE><BR />
<STRONG><A href="https://www.youtube.com/watch?v=xUDSnNPFTQo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h57m01s" target="_blank" rel="nofollow noopener noreferrer">00:57:01</A>:</STRONG> We notice that in the JSON files, we have <CODE>[object Object]</CODE> which is not quite right. This is fixed by adding another process in the dot chain, to stringify the data (the objects) into JSON. Along the way, I write this:<BR />
<PRE><CODE>.then(x =&gt; JSON.stringify(x))</CODE></PRE><BR />
which I pick up as a "bad [code] smell" because actually this is a redundant use of function parameterisation. This is better, and more concisely written, as<BR />
<PRE><CODE>.then(JSON.stringify)</CODE></PRE><BR />
Stare at that for a couple of minutes and you'll see why.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=xUDSnNPFTQo&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h58m35s" target="_blank" rel="nofollow noopener noreferrer">00:58:35</A>:</STRONG> Phone call from Michelle, which I ignore. Yikes!
