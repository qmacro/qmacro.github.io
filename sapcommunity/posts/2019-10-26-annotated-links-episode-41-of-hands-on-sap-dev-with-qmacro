2019-10-26-annotated-links-episode-41-of-hands-on-sap-dev-with-qmacro
Annotated links: Episode 41 of Hands-on SAP dev with qmacro
technology-blog-sap
2019-10-26
https://community.sap.com/t5/technology-blogs-by-sap/annotated-links-episode-41-of-hands-on-sap-dev-with-qmacro/ba-p/13422161
<EM>This is a searchable description of the content of a live stream recording, specifically <STRONG>“Ep.41 - Business Rules API on the BTP”</STRONG> in the “<A href="https://bit.ly/handsonsapdev" target="_blank" rel="nofollow noopener noreferrer">Hands-on SAP dev with qmacro</A>” series. There are links directly to specific highlights in the video recording. For links to annotations of other episodes, please see the “<A href="https://bit.ly/handsonsapdev#replays" target="_blank" rel="nofollow noopener noreferrer">Catch the replays</A>” section of the series blog post.</EM><BR />
<BR />
This episode was streamed live on Fri 25 Oct 2019 and is approximately one hour in length. The stream recording is <A href="https://www.youtube.com/watch?v=xhis86osj1s&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;index=42" target="_blank" rel="nofollow noopener noreferrer">available on YouTube</A>.<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2019/10/Screenshot-2019-10-26-at-08.51.33.png" /><BR />
<BR />
Brief synopsis: Continuing on from where we left off in Ep.40, we dig further into the Business Rules APIs and start our journey to the Cloud Foundry environment.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=xhis86osj1s&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;index=42&amp;t=02m50s" target="_blank" rel="nofollow noopener noreferrer">02:50</A> Explaining the path we want to take over the next few live stream episodes, on the way to consuming Business Services on the SAP Cloud Platform (SCP) Cloud Foundry (CF) environment, given that SCP is the Business Technology Platform that helps us extend and build business apps in the cloud, in particular to look at a couple of classic business services, the orchestration pair Workflow and <A href="https://api.sap.com/package/SAPCPBusinessRulesAPIs?section=Artifacts" target="_blank" rel="noopener noreferrer">Business Rules</A>.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=xhis86osj1s&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;index=42&amp;t=06m10s" target="_blank" rel="nofollow noopener noreferrer">06:10</A> Mentioning the excellent <A href="https://open.sap.com" target="_blank" rel="noopener noreferrer">openSAP</A> - the goto learning place for SAP technology subjects, and looking specifically at the course “<A href="https://open.sap.com/courses/mobile3" target="_blank" rel="noopener noreferrer">Build Mobile Applications with SAP Cloud Platform Mobile Services</A>” with <SPAN class="citation" data-cites="Martin"><a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1736">@Martin</a></SPAN> Grasshoff and others. That course has just recently come to an end, so it’s now available as a self-paced course (this is my favourite feature of openSAP), and has a rating of 4.49 (out of 5) - recommended! We also looked briefly at a current course “<A href="https://open.sap.com/courses/suse1-pc" target="_blank" rel="noopener noreferrer">Introduction to SUSE Linux Enterprise Server (SLES)</A>” which appeals to me generally and specifically because my hardware hacker tentacles were vibrating having seen this really interesting blog post on the SAP Community by <SPAN class="mention-scrubbed">kimveasna_xyz</SPAN> - "<A href="https://blogs.sap.com/2019/10/23/another-diy-for-geeks-build-your-home-data-center-and-install-s4hana/" target="_blank" rel="noopener noreferrer">Another DIY for geeks: build your home Data Center and install S/4HANA</A>.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=xhis86osj1s&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;index=42&amp;t=13m40s" target="_blank" rel="nofollow noopener noreferrer">13:40</A> Briefly noting that you can still submit an article or blog post for me to read out on the <A href="https://qmacro.org/2019/09/17/new-podcast-tech-aloud/" target="_blank" rel="nofollow noopener noreferrer">Tech Aloud</A> podcast - see this blog post for more details on how to do it and what’s required: “<A href="https://blogs.sap.com/2019/10/04/submit-suggestions-for-tech-aloud-during-sap-teched-barcelona/" target="_blank" rel="noopener noreferrer">Submit suggestions for Tech Aloud during SAP TechEd 2019</A>”.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=xhis86osj1s&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;index=42&amp;t=14m25s" target="_blank" rel="nofollow noopener noreferrer">14:25</A> Starting our journey by looking where the destination is - the business services in a trial CF subaccount on SCP. We can see in there that there’s the Business Rules service available, with a “lite” service plan, which is the CF equivalent service to where we’re starting from in Neo.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=xhis86osj1s&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;index=42&amp;t=16m55s" target="_blank" rel="nofollow noopener noreferrer">16:55</A> Starting up the administrative UI “Manage Rules Project” where we take a look at a simple project I’d already created: “airlinediscounts”. In this UI we explore how a Business Rules project is set up, looking at the project itself and what it contains, i.e.&nbsp;Data Objects, Rules, Rulesets and Rule Services.<BR />
<BR />
In the Data Objects context we have a couple of structures, each with a single attribute. The first structure is used for the data flowing into an invocation call, and the second is to convey the results:<BR />
<PRE><CODE>Data Objects<BR />
 |<BR />
 +-- structure: flightinfo (used for Input)<BR />
 |    |<BR />
 |    +-- attribute: airline (String)<BR />
 |<BR />
 +-- structure: discountinfo (used for Result)<BR />
      |<BR />
      +-- attribute: discount (Number)</CODE></PRE><BR />
These structures (and attributes) are used in the Rule “discountrule” which is rolled up into the Ruleset “discountruleset”, which in turn is made available in the deployable unit, the Rule Service “discountruleservice”. The deployment is done using the runtime (execution) API.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=xhis86osj1s&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;index=42&amp;t=29m40s" target="_blank" rel="nofollow noopener noreferrer">29:40</A> Looking at the <A href="https://api.sap.com/package/SAPCPBusinessRulesAPIs?section=Artifacts" target="_blank" rel="noopener noreferrer">Business Rules API Package on the SAP API Business Hub</A> and we see there are multiple APIs because of the dimensions of: Neo and CF, Authoring and Execution (or designtime and runtime) plus the fact that the Execution API for Neo has gone from v1 to v2 and v1 is still around, albeit deprecated (and still supported until May 2020).<BR />
<BR />
<A href="https://www.youtube.com/watch?v=xhis86osj1s&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;index=42&amp;t=33m40s" target="_blank" rel="nofollow noopener noreferrer">33:40</A> Taking a closer look at v1 of the Rule Execution API for Neo, and the different categories of API endpoints (Deploy and Undeply Rule Service, Get Rule Services, Invoke Rule Service and XSRF Handling), then diving in specifically to examine the Invoke Rule Service category, which has a single verb/noun combination:<BR />
<PRE><CODE>POST /v1/rule-services/java/{projectName}/{ruleserviceName}</CODE></PRE><BR />
Remember this is the deprecated v1 version but it provides us with a good first step to start our journey from, and appreciate the changes in v2. Note also that the “java” part of the path conflicts with the philosophies expressed in Tim Berners-Lee’s classic article “Cool URIs Don’t Change” which you can listen to on Tech Aloud in this episode “<A href="https://anchor.fm/tech-aloud/episodes/Cool-URIs-dont-change---Tim-Berners-Lee---1998-e7gb1v" target="_blank" rel="nofollow noopener noreferrer">Cool URIs Don’t Change</A>” … and one of the changes in v2 is to address this.<BR />
<BR />
Note that the project name is “airlinediscounts” and the rule service name is “discountruleservice”.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=xhis86osj1s&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;index=42&amp;t=37m20s" target="_blank" rel="nofollow noopener noreferrer">37:20</A> Talking briefly about Cross Site Request Forgery (CSRF) protection via the token mechanism, which is used for this API and many others on the SAP API Business Hub, and noting the subtle reference to validity for “the current session”.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=xhis86osj1s&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;index=42&amp;t=39m10s" target="_blank" rel="nofollow noopener noreferrer">39:10</A> Trying a fetch request for a CSRF token in the API Hub itself, passing this header in the request:<BR />
<PRE><CODE>X-CSRF-Token: Fetch</CODE></PRE><BR />
In the response, a corresponding header is returned:<BR />
<PRE><CODE>X-CSRF-Token: 01ECAF[...]</CODE></PRE><BR />
We can (and must) use this token in subsequent POST requests, i.e.&nbsp;requests with side-effects (think “REST”).<BR />
<BR />
<A href="https://www.youtube.com/watch?v=xhis86osj1s&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;index=42&amp;t=41m30s" target="_blank" rel="nofollow noopener noreferrer">41:30</A> Examining briefly what the payload of a call to the Invoke Rule Service endpoint needs to look like, in v1:<BR />
<PRE><CODE>[<BR />
  {<BR />
    "__type__": "flightinfo",<BR />
    "airline": "BA"<BR />
  }<BR />
]</CODE></PRE><BR />
<A href="https://www.youtube.com/watch?v=xhis86osj1s&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;index=42&amp;t=42m10s" target="_blank" rel="nofollow noopener noreferrer">42:10</A> Looking at the <CODE>invokeruleservice</CODE> script that we’ll be spending our time using for the rest of this episode. Before we go on, here it is in its entirety:<BR />
<DIV><BR />
<PRE class="sourceCode bash"><CODE class="sourceCode bash"><SPAN id="cb6-1"><SPAN class="co">#!/bin/bash</SPAN></SPAN><BR />
<SPAN id="cb6-2"></SPAN><BR />
<SPAN id="cb6-3"><SPAN class="co"># Invokes the discountruleservice in the airlinediscounts Business Rule project</SPAN></SPAN><BR />
<SPAN id="cb6-4"></SPAN><BR />
<SPAN id="cb6-5"><SPAN class="va">RULEPROJECTNAME=</SPAN>airlinediscounts</SPAN><BR />
<SPAN id="cb6-6"><SPAN class="va">RULESERVICENAME=</SPAN>discountruleservice</SPAN><BR />
<SPAN id="cb6-7"><SPAN class="va">AIRLINECODE=$1</SPAN></SPAN><BR />
<SPAN id="cb6-8"><SPAN class="va">USER=</SPAN>i347491</SPAN><BR />
<SPAN id="cb6-9"><SPAN class="va">COOKIES=</SPAN>cookiejar-<SPAN class="va">${USER}</SPAN>.dat</SPAN><BR />
<SPAN id="cb6-10"><SPAN class="va">HEADERDATA=</SPAN>headers.dat</SPAN><BR />
<SPAN id="cb6-11"></SPAN><BR />
<SPAN id="cb6-12"><SPAN class="va">BPMRULESRUNTIME=</SPAN><A href="https://bpmrulesruntimebpm-" target="test_blank" rel="nofollow noopener noreferrer">https://bpmrulesruntimebpm-</A><SPAN class="va">${USER}</SPAN>trial.hanatrial.ondemand.com</SPAN><BR />
<SPAN id="cb6-13"><SPAN class="va">BPMRULESRUNTIMEPREFIX=</SPAN>/rules-service</SPAN><BR />
<SPAN id="cb6-14"></SPAN><BR />
<SPAN id="cb6-15"><SPAN class="va">ENDPOINT=${BPMRULESRUNTIME}${BPMRULESRUNTIMEPREFIX}</SPAN></SPAN><BR />
<SPAN id="cb6-16"></SPAN><BR />
<SPAN id="cb6-17"><SPAN class="co"># Abort if no airline code has been specified</SPAN></SPAN><BR />
<SPAN id="cb6-18"><SPAN class="bu">[</SPAN> <SPAN class="ot">-z</SPAN> <SPAN class="st">"</SPAN><SPAN class="va">$AIRLINECODE</SPAN><SPAN class="st">"</SPAN><SPAN class="bu"> ]</SPAN> <SPAN class="kw">&amp;&amp;</SPAN> <SPAN class="bu">echo</SPAN> Specify an airline code <SPAN class="dt">\(</SPAN>e.g. BA<SPAN class="dt">\)</SPAN> <SPAN class="kw">&amp;&amp;</SPAN> <SPAN class="bu">exit</SPAN> 1</SPAN><BR />
<SPAN id="cb6-19"></SPAN><BR />
<SPAN id="cb6-20"><SPAN class="co"># Retrieve CSRF token</SPAN></SPAN><BR />
<SPAN id="cb6-21"><SPAN class="fu">rm</SPAN> -f <SPAN class="va">$HEADERDATA</SPAN></SPAN><BR />
<SPAN id="cb6-22"><SPAN class="ex">curl</SPAN> \</SPAN><BR />
<SPAN id="cb6-23">        --netrc \</SPAN><BR />
<SPAN id="cb6-24">        --header <SPAN class="st">"X-CSRF-Token: Fetch"</SPAN> \</SPAN><BR />
<SPAN id="cb6-25">        --cookie-jar <SPAN class="va">$COOKIES</SPAN> \</SPAN><BR />
<SPAN id="cb6-26">        --verbose \</SPAN><BR />
<SPAN id="cb6-27">        <SPAN class="st">"</SPAN><SPAN class="va">${ENDPOINT}</SPAN><SPAN class="st">/v1/rules/xsrf-token"</SPAN> <SPAN class="op">2&gt;</SPAN> <SPAN class="op">&gt;(</SPAN><SPAN class="fu">grep</SPAN> -v Authorization <SPAN class="op">&gt;</SPAN> <SPAN class="va">$HEADERDATA</SPAN><SPAN class="op">)</SPAN></SPAN><BR />
<SPAN id="cb6-28"></SPAN><BR />
<SPAN id="cb6-29"><SPAN class="co"># Capture token</SPAN></SPAN><BR />
<SPAN id="cb6-30"><SPAN class="va">TOKEN=</SPAN><SPAN class="kw">`</SPAN><SPAN class="fu">grep</SPAN> <SPAN class="st">'&lt; X-CSRF-Token'</SPAN> <SPAN class="va">$HEADERDATA</SPAN> <SPAN class="kw">|</SPAN> <SPAN class="fu">awk</SPAN> <SPAN class="st">'{print $3}'</SPAN><SPAN class="kw">`</SPAN></SPAN><BR />
<SPAN id="cb6-31"></SPAN><BR />
<SPAN id="cb6-32"><SPAN class="co"># Invoke rule</SPAN></SPAN><BR />
<SPAN id="cb6-33"><SPAN class="ex">curl</SPAN> \</SPAN><BR />
<SPAN id="cb6-34">        --netrc \</SPAN><BR />
<SPAN id="cb6-35">        --request POST \</SPAN><BR />
<SPAN id="cb6-36">        --header <SPAN class="st">"X-CSRF-Token: </SPAN><SPAN class="va">$TOKEN</SPAN><SPAN class="st">"</SPAN> \</SPAN><BR />
<SPAN id="cb6-37">        --header <SPAN class="st">"Content-Type: application/json"</SPAN> \</SPAN><BR />
<SPAN id="cb6-38">        --data <SPAN class="st">"[{</SPAN><SPAN class="dt">\"</SPAN><SPAN class="st">__type__</SPAN><SPAN class="dt">\"</SPAN><SPAN class="st">:</SPAN><SPAN class="dt">\"</SPAN><SPAN class="st">flightinfo</SPAN><SPAN class="dt">\"</SPAN><SPAN class="st">,</SPAN><SPAN class="dt">\"</SPAN><SPAN class="st">airline</SPAN><SPAN class="dt">\"</SPAN><SPAN class="st">:</SPAN><SPAN class="dt">\"</SPAN><SPAN class="va">${AIRLINECODE}</SPAN><SPAN class="dt">\"</SPAN><SPAN class="st">}]"</SPAN> \</SPAN><BR />
<SPAN id="cb6-39">        --cookie <SPAN class="va">$COOKIES</SPAN> \</SPAN><BR />
<SPAN id="cb6-40">        --silent \</SPAN><BR />
<SPAN id="cb6-41">        <SPAN class="st">"</SPAN><SPAN class="va">${ENDPOINT}</SPAN><SPAN class="st">/rest/v1/rule-services/java/</SPAN><SPAN class="va">${RULEPROJECTNAME}</SPAN><SPAN class="st">/</SPAN><SPAN class="va">${RULESERVICENAME}</SPAN><SPAN class="st">"</SPAN> <SPAN class="kw">|</SPAN> <SPAN class="ex">jq</SPAN></SPAN></CODE></PRE><BR />
</DIV><BR />
<A href="https://www.youtube.com/watch?v=xhis86osj1s&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;index=42&amp;t=46m05s" target="_blank" rel="nofollow noopener noreferrer">46:05</A> Looking at the first HTTP request we’re about to make, with curl, to retrieve the CSRF token. This includes a brief foray into the <A href="https://ec.haxx.se/usingcurl-netrc.html" target="_blank" rel="nofollow noopener noreferrer">.netrc support in curl</A> for a more comfortable way of handling credentials. Here’s the relevant part of my <CODE>.netrc</CODE> file:<BR />
<PRE><CODE>machine bpmrulesruntimebpm-i347491trial.hanatrial.ondemand.com<BR />
login i347491<BR />
password SEKRIT!</CODE></PRE><BR />
(that’s not the real password, obviously!)<BR />
<BR />
<A href="https://www.youtube.com/watch?v=xhis86osj1s&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;index=42&amp;t=47m40s" target="_blank" rel="nofollow noopener noreferrer">47:40</A> Mentioning the use of process substitution in the redirection of STDERR from curl. If you want to learn more about process substitution, see the brief (10 minute!) bonus <A href="https://bit.ly/handsonsapdev#ep39" target="_blank" rel="nofollow noopener noreferrer">Ep.39</A>.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=xhis86osj1s&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;index=42&amp;t=49m55s" target="_blank" rel="nofollow noopener noreferrer">49:55</A> The first invocation of the script, stopping deliberately once a token has been retrieved. What we also get is the cookie jar (which we’ll look at in a moment) and also the headers, captured in <CODE>headers.dat</CODE>. Note that outgoing (request) headers are denoted by curl with “&gt;” symbols in the first column, and incoming (response) headers are denoted by curl with “&lt;” symbols. Nice!<BR />
<BR />
<A href="https://www.youtube.com/watch?v=xhis86osj1s&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;index=42&amp;t=53m15s" target="_blank" rel="nofollow noopener noreferrer">53:15</A> What we get back, as well as the CSRF token, are cookies! The <CODE>Set-Cookie</CODE> headers in the response supply cookies that represent the session within which, and only within which, the token is actually valid. So if we make our subsequent POST request with the token, <EM>without</EM> passing the cookies to contextualise the token, things won’t work (as we see - we try this out and we get a 403 HTTP response).<BR />
<BR />
<A href="https://www.youtube.com/watch?v=xhis86osj1s&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;index=42&amp;t=54m15s" target="_blank" rel="nofollow noopener noreferrer">54:15</A> We use <CODE>awk</CODE> to pull out the token from the response line. For more on <CODE>awk</CODE> see this recent post "<A href="https://langram.org/2019/10/23/shell-power-simplicity/" target="_blank" rel="nofollow noopener noreferrer">Shell power and simplicity</A>.<BR />
<BR />
<A href="https://www.youtube.com/watch?v=xhis86osj1s&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;index=42&amp;t=55m10s" target="_blank" rel="nofollow noopener noreferrer">55:10</A> Now we have the token, we can make the main POST invocation, which we do very quickly before the episode comes to an end (<A href="https://open.spotify.com/album/7isYifHXAT7wbuxbJziBG3" target="_blank" rel="nofollow noopener noreferrer">who knows where the time goes?</A>!). We need to make sure that we pass the cookies we received (we do that with the <CODE>--cookie</CODE> parameter) as well as the token (in the <CODE>--header</CODE> parameter) and of course the actual payload, in the <CODE>--data</CODE> parameter:<BR />
<DIV><BR />
<PRE class="sourceCode bash"><CODE class="sourceCode bash"><SPAN id="cb8-1"><SPAN class="ex">curl</SPAN> \</SPAN><BR />
<SPAN id="cb8-2">        --netrc \</SPAN><BR />
<SPAN id="cb8-3">        --request POST \</SPAN><BR />
<SPAN id="cb8-4">        --header <SPAN class="st">"X-CSRF-Token: </SPAN><SPAN class="va">$TOKEN</SPAN><SPAN class="st">"</SPAN> \</SPAN><BR />
<SPAN id="cb8-5">        --header <SPAN class="st">"Content-Type: application/json"</SPAN> \</SPAN><BR />
<SPAN id="cb8-6">        --data <SPAN class="st">"[{</SPAN><SPAN class="dt">\"</SPAN><SPAN class="st">__type__</SPAN><SPAN class="dt">\"</SPAN><SPAN class="st">:</SPAN><SPAN class="dt">\"</SPAN><SPAN class="st">flightinfo</SPAN><SPAN class="dt">\"</SPAN><SPAN class="st">,</SPAN><SPAN class="dt">\"</SPAN><SPAN class="st">airline</SPAN><SPAN class="dt">\"</SPAN><SPAN class="st">:</SPAN><SPAN class="dt">\"</SPAN><SPAN class="va">${AIRLINECODE}</SPAN><SPAN class="dt">\"</SPAN><SPAN class="st">}]"</SPAN> \</SPAN><BR />
<SPAN id="cb8-7">        --cookie <SPAN class="va">$COOKIES</SPAN> \</SPAN><BR />
<SPAN id="cb8-8">        --silent \</SPAN><BR />
<SPAN id="cb8-9">        <SPAN class="st">"</SPAN><SPAN class="va">${ENDPOINT}</SPAN><SPAN class="st">/rest/v1/rule-services/java/</SPAN><SPAN class="va">${RULEPROJECTNAME}</SPAN><SPAN class="st">/</SPAN><SPAN class="va">${RULESERVICENAME}</SPAN><SPAN class="st">"</SPAN> <SPAN class="kw">|</SPAN> <SPAN class="ex">jq</SPAN></SPAN></CODE></PRE><BR />
</DIV><BR />
If you blur your eyes slightly at the value of that <CODE>--data</CODE> parameter, you’ll see it resolves into the payload we saw earlier (with <CODE>${AIRLINECODE}</CODE> representing the value passed in on the command line:<BR />
<PRE><CODE>[<BR />
  {<BR />
    "__type__": "flightinfo",<BR />
    "airline": "${AIRLINECODE}"<BR />
  }<BR />
]</CODE></PRE><BR />
Next time we’ll go through a little bit of this again, a bit slower, to make sure we understand everything properly. Phew!
