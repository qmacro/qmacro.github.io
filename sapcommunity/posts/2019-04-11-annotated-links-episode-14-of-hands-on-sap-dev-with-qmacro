2019-04-11-annotated-links-episode-14-of-hands-on-sap-dev-with-qmacro
Annotated links: Episode 14 of Hands-on SAP dev with qmacro
technology-blog-sap
2019-04-11
https://community.sap.com/t5/technology-blogs-by-sap/annotated-links-episode-14-of-hands-on-sap-dev-with-qmacro/ba-p/13411948
<EM>This is a searchable description of the content of a live stream recording, specifically <STRONG>"Episode 14 - Exploring CAP service level features and annotations"</STRONG> in the "<A href="https://bit.ly/handsonsapdev" target="_blank" rel="nofollow noopener noreferrer">Hands-on SAP dev with qmacro</A>" series. There are links directly to specific highlights in the video recording. For links to annotations of other episodes, please see the "<A href="https://bit.ly/handsonsapdev#replays" target="_blank" rel="nofollow noopener noreferrer">Catch the replays</A>" section of the series blog post.</EM><BR />
<BR />
This episode, titled "<A href="https://bit.ly/handsonsapdev#ep14" target="_blank" rel="nofollow noopener noreferrer">Exploring CAP service level features and annotations</A>", was streamed live on Fri 22 Mar 2019 and is approximately one hour in length. The stream recording is <A href="https://www.youtube.com/watch?v=E-0BR62oX-Q&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0" target="_blank" rel="nofollow noopener noreferrer">available on YouTube</A>.<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2019/04/Screen-Shot-2019-04-11-at-16.47.11.png" /><BR />
<BR />
Below is a brief synopsis, and links to specific highlights - use these links to jump directly to particular places of interest in the recording, based on 'hh:mm:ss' style timestamps.<BR />
<H2 id="brief-synopsis" id="toc-hId-929701163">Brief synopsis</H2><BR />
After a pleasant detour hacking together some CSV related utilities with Node.js we return to our Northbreeze CAP project and take a look at some of the service level features, looking how they can complement the data model, and playing around with some of the annotations available to us, to see what effect they have. We also take a look at fixing the issue we had with the boolean property :-0 back in Ep.10.<BR />
<H2 id="links-to-specific-highlights" id="toc-hId-733187658">Links to specific highlights</H2><BR />
<STRONG><A href="https://www.youtube.com/watch?v=E-0BR62oX-Q&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h03m35s" target="_blank" rel="nofollow noopener noreferrer">00:03:35</A>:</STRONG> I was reminded by <SPAN class="mention-scrubbed">nabheet.madan3</SPAN> that we finished <A href="https://bit.ly/handsonsapdev#ep10" target="_blank" rel="nofollow noopener noreferrer">Ep.10</A> on a cliffhanger, in that all the values for the <CODE>discontinued</CODE> property were "true", which is not actually the case when we look at the source data in Northwind itself.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=E-0BR62oX-Q&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h05m10s" target="_blank" rel="nofollow noopener noreferrer">00:05:10</A>:</STRONG> Remember that <A href="https://wiki.scn.sap.com/wiki/display/events/SAP+Inside+Track+Oslo+-+17+August+2019" target="_blank" rel="noopener noreferrer">SAP Inside Track OSLO</A> is on 17 August 2019!<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=E-0BR62oX-Q&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h05m45s" target="_blank" rel="nofollow noopener noreferrer">00:05:45</A>:</STRONG> Proud of the latest keyboard in my growing collection of mechanical keyboards: an Anne Pro 2 with Gateron Brown switches, purchased from the same place I got my Vortex Race 3 - <A href="https://candykeys.com/" target="_blank" rel="nofollow noopener noreferrer">Candy Keys</A> - recommended! The Anne Pro 2 is a so-called "60% keyboard" which refers to the size and number of keys.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=E-0BR62oX-Q&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h07m10s" target="_blank" rel="nofollow noopener noreferrer">00:07:10</A>:</STRONG> There are no dedicated arrow keys on this keyboard so I've adjusted my <A href="https://www.spectacleapp.com/" target="_blank" rel="nofollow noopener noreferrer">Spectacle</A> settings accordingly. (It turns out that I <EM>can</EM> define arrow keys in a layer, and use the Fn, Menu, Ctrl and Shift key cluster on the right, works very well in fact!).<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=E-0BR62oX-Q&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h08m40s" target="_blank" rel="nofollow noopener noreferrer">00:08:40</A>:</STRONG> Reminding ourselves of the detail of the <CODE>discontinued</CODE> problem, looking at the data model and specifically at the definition of the <CODE>Products</CODE> entity which includes the <CODE>discontinued</CODE> property.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=E-0BR62oX-Q&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h10m35s" target="_blank" rel="nofollow noopener noreferrer">00:10:35</A>:</STRONG> In the CSV file for the Products data we can see various values for the <CODE>discontinued</CODE> property, specifically <CODE>true</CODE> and <CODE>false</CODE> randomly throughout. But when we look at the data via <A href="http://localhost:4004/breezy/Products?$select=name,discontinued" target="_blank" rel="nofollow noopener noreferrer">an OData query operation</A>, we can see that every value for <CODE>discontinued</CODE> is <CODE>true</CODE>!<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=E-0BR62oX-Q&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h12m00s" target="_blank" rel="nofollow noopener noreferrer">00:12:00</A>:</STRONG> I've installed the <A href="https://chrome.google.com/webstore/detail/vimium/dbepggeogbaibhgnhhndojpepiihcmeb?hl=en" target="_blank" rel="nofollow noopener noreferrer">Vimium</A> Chrome extension which allows me to operate Chrome pretty-much mouse-less, and more specifically, using Vim style key bindings. Wonderful! I demonstrate this using my home website <A href="https://qmacro.org" target="_blank" rel="nofollow noopener noreferrer">qmacro.org</A>.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=E-0BR62oX-Q&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h12m55s" target="_blank" rel="nofollow noopener noreferrer">00:12:55</A>:</STRONG> We check directly in the persistence layer (the SQLite database) to see what values are actually stored:<BR />
<PRE><CODE>14:10 $ sqlite3 northbreeze.db<BR />
SQLite version 3.22.0 2018-01-22 18:45:57<BR />
Enter ".help" for usage hints.<BR />
sqlite&gt; .tables<BR />
Breezy_Categories       Restricted_Orders       northbreeze_Products<BR />
Breezy_Products         northbreeze_Categories  northbreeze_Suppliers<BR />
Breezy_Suppliers        northbreeze_Orders<BR />
sqlite&gt; select * from northbreeze_Products;<BR />
1|Chai|10 boxes x 20 bags|18|39|0|10|false|1|1<BR />
2|Chang|24 - 12 oz bottles|19|17|40|25|false|1|1<BR />
3|Aniseed Syrup|12 - 550 ml bottles|10|13|70|25|false|1|2<BR />
4|Chef Anton's Cajun Seasoning|48 - 6 oz jars|22|53|0|0|0|2|2<BR />
5|Chef Anton's Gumbo Mix|36 boxes|21.35|0|0|0|true|2|2<BR />
6|Grandma's Boysenberry Spread|12 - 8 oz jars|25|120|0|25|false|3|2<BR />
[...]</CODE></PRE><BR />
<STRONG><A href="https://www.youtube.com/watch?v=E-0BR62oX-Q&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h13m20s" target="_blank" rel="nofollow noopener noreferrer">00:13:20</A>:</STRONG> It turns out that the problem lay in the conversion from JSON to CSV in the <CODE>grab.js</CODE> script, using the <CODE>json2csv</CODE> package.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=E-0BR62oX-Q&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h14m45s" target="_blank" rel="nofollow noopener noreferrer">00:14:45</A>:</STRONG> To illustrate, we created a quick CDS project in my <CODE>/tmp/</CODE> directory:<BR />
<DIV><BR />
<PRE class="sourceCode bash"><CODE class="sourceCode bash">=<SPAN class="op">&gt;</SPAN> <SPAN class="ex">cds</SPAN> init --modules db,srv x</CODE></PRE><BR />
</DIV><BR />
... then the definition of the <CODE>Books</CODE> entity to have a Boolean type property thus:<BR />
<PRE class="cds"><CODE>entity Books {<BR />
  key ID  : Integer;<BR />
  title   : String;<BR />
  instock : Boolean;<BR />
}</CODE></PRE><BR />
and then added a CSV file <CODE>my.bookshop-Books.csv</CODE> with this content:<BR />
<PRE class="csv"><CODE>ID,title,instock<BR />
1,Book Title A,false<BR />
2,Book Title B,true</CODE></PRE><BR />
Then, after an <CODE>npm install --save sqlite3</CODE> we ran <CODE>cds deploy --to sqlite:x.db</CODE>, which meant then we could immediately thereafter start the server with <CODE>cds run</CODE>, which gave us the <A href="https://community.sap.com/endpoint" target="_blank" rel="nofollow noopener noreferrer">http://localhost:4004</A> to check.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=E-0BR62oX-Q&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h17m40s" target="_blank" rel="nofollow noopener noreferrer">00:17:40</A>:</STRONG> Lo and behold, we observed the problem first hand - both books were shown to be in stock!Turns out this issue is known, and I found an issue logged against the package's repository: <A href="https://github.com/zemirco/json2csv/issues/156" target="_blank" rel="nofollow noopener noreferrer">Issue converting columns with boolean values</A>. Basically, the conversion is treating <CODE>true</CODE> and <CODE>false</CODE> as strings, rather than boolean values, and as we know, any non-empty string is "truthy", resulting in every value for the <CODE>discontinued</CODE> property being true.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=E-0BR62oX-Q&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h20m50s" target="_blank" rel="nofollow noopener noreferrer">00:20:50</A>:</STRONG> We create a second launch configuration in the project's <CODE>launch.json</CODE> for the <CODE>deploy</CODE> command, so we can put a breakpoint in <CODE>init-from-csv.js</CODE> (which is part of <CODE><a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a>/cds</CODE>).<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=E-0BR62oX-Q&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h22m15s" target="_blank" rel="nofollow noopener noreferrer">00:22:15</A>:</STRONG> A side note on VS Code's search facility, which by default explicitly excludes any <CODE>node_modules/</CODE> directory when searching for files. This is usually what we want. But when we don't, like now, we can change the setting, by opening the settings JSON and adding this:<BR />
<DIV><BR />
<PRE class="sourceCode json"><CODE class="sourceCode json"><SPAN class="er">"search.exclude":</SPAN> <SPAN class="fu">{</SPAN><BR />
  <SPAN class="dt">"**/node_modules"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="kw">false</SPAN><BR />
<SPAN class="fu">}</SPAN></CODE></PRE><BR />
</DIV><BR />
Nice!<BR />
<BR />
This means we can now navigate to <CODE>init-from-csv.js</CODE> and set a breakpoint in the <CODE>_init</CODE> function to see what's going on.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=E-0BR62oX-Q&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h24m34s" target="_blank" rel="nofollow noopener noreferrer">00:24:34</A>:</STRONG> Kicking off the launch configuration that we just created for the <CODE>cds deploy</CODE> command, we now hit the breakpoint we just sent, and can examine the data, which looks like this:<BR />
<PRE><CODE>rows[1]<BR />
&gt; Array(3) ["2", "Book Title B", "true"]</CODE></PRE><BR />
The third value is a string, rather than a boolean!<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=E-0BR62oX-Q&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h26m20s" target="_blank" rel="nofollow noopener noreferrer">00:26:20</A>:</STRONG> To fix this quickly, we go into the CSV file and modify the values - changing <CODE>false</CODE> to <CODE>0</CODE> and <CODE>true</CODE> to <CODE>1</CODE>. Not the best solution, but why not, especially as we have control of the input data! <span class="lia-unicode-emoji" title=":slightly_smiling_face:">🙂</span><BR />
<BR />
Here are the global substitution commands used:<BR />
<PRE><CODE>%s/,false,/,0,/<BR />
%s/,true,/,1,/</CODE></PRE><BR />
After a new <CODE>cds deploy</CODE> invocation, we can see that the <CODE>discontinued</CODE> values are now correct. Good!<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=E-0BR62oX-Q&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h28m30s" target="_blank" rel="nofollow noopener noreferrer">00:28:30</A>:</STRONG> Thinking about the explicit difference in layers, between the data model and the service definition, in our project (and many typical CAP projects).<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=E-0BR62oX-Q&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h31m05s" target="_blank" rel="nofollow noopener noreferrer">00:31:05</A>:</STRONG> Starting to play around with a couple of annotations: <CODE>@readonly</CODE> and <CODE>@insertonly</CODE> to see what their effect is.<BR />
<BR />
In the temporary project we created earlier, the <CODE>CatalogService</CODE> is defined as having a single entity <CODE>Books</CODE> which is annotated with <CODE>@readonly</CODE>:<BR />
<PRE class="cds"><CODE>service CatalogService {<BR />
  @readonly entity Books as projection on my.Books;<BR />
}</CODE></PRE><BR />
<STRONG><A href="https://www.youtube.com/watch?v=E-0BR62oX-Q&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h35m10s" target="_blank" rel="nofollow noopener noreferrer">00:35:10</A>:</STRONG> We look briefly at the <A href="https://github.com/qmacro/scripts" target="_blank" rel="nofollow noopener noreferrer">scripts</A> repo content, which contains various configuration settings, including the shortcuts that I used, and a mechanism to generate them. The one in question here is <CODE>t</CODE> which I use to change to the <CODE>/tmp/</CODE> directory, and in fact, like other shortcuts I have that take me to specific directories, I have the shortcut do for me what I'd do anyway, which is to call <CODE>ls</CODE> to show the files. This is how <CODE>t</CODE> is defined:<BR />
<PRE class="shell"><CODE>alias t='cd /tmp &amp;&amp; ls -a'</CODE></PRE><BR />
<STRONG><A href="https://www.youtube.com/watch?v=E-0BR62oX-Q&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h36m40s" target="_blank" rel="nofollow noopener noreferrer">00:36:40</A>:</STRONG> In order to test whether we can make non-read-only calls on the <CODE>Books</CODE> entity, we prepare some book data in JSON format, in a new file <CODE>book.json</CODE>:<BR />
<DIV><BR />
<PRE class="sourceCode json"><CODE class="sourceCode json"><SPAN class="fu">{</SPAN><BR />
  <SPAN class="dt">"ID"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="dv">42</SPAN><SPAN class="fu">,</SPAN><BR />
  <SPAN class="dt">"title"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="st">"The Hitch Hiker's Guide To The Galaxy"</SPAN><SPAN class="fu">,</SPAN><BR />
  <SPAN class="dt">"instock"</SPAN><SPAN class="fu">:</SPAN> <SPAN class="kw">true</SPAN><BR />
<SPAN class="fu">}</SPAN></CODE></PRE><BR />
</DIV><BR />
Now we can test, using <A href="https://curl.haxx.se/" target="_blank" rel="nofollow noopener noreferrer">curl</A>:<BR />
<PRE class="shell"><CODE>=&gt; curl -d @book.json -H "Content-Type: application/json" <A href="http://localhost:4004/catalog/Books" target="test_blank" rel="nofollow noopener noreferrer">http://localhost:4004/catalog/Books</A></CODE></PRE><BR />
And as expected (or at least hoped for), we get a proper and appropriate HTTP response code - 405 Method Not Allowed!<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=E-0BR62oX-Q&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h40m25s" target="_blank" rel="nofollow noopener noreferrer">00:40:25</A>:</STRONG> We check in the service's metadata document to have a quick look at the UI focused annotations that are related (and are generated from the same <CODE>@readonly</CODE> annotation in the service definition.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=E-0BR62oX-Q&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h42m00s" target="_blank" rel="nofollow noopener noreferrer">00:42:00</A>:</STRONG> We now try an OData delete operation on one of the entities, and receive the same response:<BR />
<PRE class="shell"><CODE>=&gt; curl -X DELETE 'http://localhost:4004/catalog/Books(1)'<BR />
{"error":{"code":"405","message":"Method Not Allowed"}}</CODE></PRE><BR />
Great!<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=E-0BR62oX-Q&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h43m15s" target="_blank" rel="nofollow noopener noreferrer">00:43:15</A>:</STRONG> Having a brief look at another small modification of the service definition, this time using the <CODE>excluding</CODE> keyword, to move from a simple pass-through of an entity definition in the data model, to a custom, tuned version thereof. Going back to the main Northbreeze project, we add the following service to the <CODE>service.cds</CODE> file:<BR />
<PRE class="cds"><CODE>service Restricted {<BR />
  entity Orders as projection on northbreeze.Orders;<BR />
}</CODE></PRE><BR />
This is for a new entity we also define, in <CODE>model.cds</CODE>, using the <CODE>managed</CODE> aspect from <CODE><a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241">@Sisn</a>/cds/common</CODE>:<BR />
<PRE class="cds"><CODE>entity Orders : managed {<BR />
  key ID   : UUID;<BR />
  quantity : Integer;<BR />
}</CODE></PRE><BR />
Looking at the output of <CODE>cds compile</CODE> for this, we see the following SQL:<BR />
<DIV><BR />
<PRE class="sourceCode sql"><CODE class="sourceCode sql"><SPAN class="kw">CREATE</SPAN> <SPAN class="kw">TABLE</SPAN> northbreeze_Orders (<BR />
  modifiedAt SECONDDATE,<BR />
  createdAt SECONDDATE,<BR />
  createdBy <SPAN class="dt">NVARCHAR</SPAN>(<SPAN class="dv">255</SPAN>),<BR />
  modifiedBy <SPAN class="dt">NVARCHAR</SPAN>(<SPAN class="dv">255</SPAN>),<BR />
  <SPAN class="kw">ID</SPAN> <SPAN class="dt">NVARCHAR</SPAN>(<SPAN class="dv">36</SPAN>),<BR />
  quantity <SPAN class="dt">INTEGER</SPAN>,<BR />
  <SPAN class="kw">PRIMARY</SPAN> <SPAN class="kw">KEY</SPAN>(<SPAN class="kw">ID</SPAN>)<BR />
);</CODE></PRE><BR />
</DIV><BR />
This shows us that the use of the <CODE>managed</CODE> aspect brings in the modified and created fields here, which are reflected in the metadata document.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=E-0BR62oX-Q&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h50m00s" target="_blank" rel="nofollow noopener noreferrer">00:50:00</A>:</STRONG> So for the sake of demonstration, we now <EM>exclude</EM> the <CODE>createdAt</CODE> and <CODE>createdBy</CODE> properties:<BR />
<PRE class="cds"><CODE>service Restricted {<BR />
  entity Orders as projection on northbreeze.Orders<BR />
  excluding { createdAt, createdBy };<BR />
}</CODE></PRE><BR />
and, as expected, the metadata document describes the <CODE>Orders</CODE> entity <EM>without</EM> the created properties. <A href="https://en.wikipedia.org/wiki/John_%22Hannibal%22_Smith" target="_blank" rel="nofollow noopener noreferrer">I love it when a plan comes together.</A>.<BR />
<BR />
<STRONG><A href="https://www.youtube.com/watch?v=E-0BR62oX-Q&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h52m45s" target="_blank" rel="nofollow noopener noreferrer">00:52:45</A>:</STRONG> Preparing for the final test, we replace the explicit UUID based key property <CODE>ID</CODE> by something that's the same but implicit, brought about by the use of the <CODE>cuid</CODE> aspect:<BR />
<PRE class="cds"><CODE>entity Orders : managed, cuid {<BR />
  quantity : Integer;<BR />
}</CODE></PRE><BR />
And now we try creating a new order, thus:<BR />
<PRE class="shell"><CODE>=&gt; curl -d '{"quantity":42}' -v -H "Content-Type: application/json" <A href="http://localhost:4004/restricted/Orders" target="test_blank" rel="nofollow noopener noreferrer">http://localhost:4004/restricted/Orders</A></CODE></PRE><BR />
And as a happy end to this episode, we indeed get back the HTTP response we were expecting, i.e. an HTTP 201 CREATED with the data in the response payload. Note in passing the <CODE>Location</CODE> header in the response (which goes hand-in-hand with a 201 response code), showing the (relative) address of the entity that was just created:<BR />
<PRE><CODE>Location: Orders(a374413d-612f-4a8f-b3b3-1a9812311e53d)</CODE></PRE><BR />
<STRONG><A href="https://www.youtube.com/watch?v=E-0BR62oX-Q&amp;list=PL6RpkC85SLQAIntm7MkNk78ysDm3Ua8t0&amp;t=00h58m50s" target="_blank" rel="nofollow noopener noreferrer">00:58:50</A>:</STRONG> Checking in the persistence layer with <CODE>sqlite3</CODE>, we see the data!<BR />
<PRE><CODE>sqlite&gt; select * from northbreeze_Orders;<BR />
|2019-03-22T08:58:16Z|anonymous||a374413d-612f-4a8f-b3b3-1a9812311e53d|42</CODE></PRE>
