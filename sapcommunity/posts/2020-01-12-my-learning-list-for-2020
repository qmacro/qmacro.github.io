2020-01-12-my-learning-list-for-2020
My learning list for 2020
technology-blog-sap
2020-01-12
https://community.sap.com/t5/technology-blogs-by-sap/my-learning-list-for-2020/ba-p/13453862
<EM>Turning the page into a new year is often useful to reflect on the previous period and look forward to the next one. I usually don't set hard and fast "new year resolutions" but like some of you out there I have a general idea of what I'd like to dig deeper into over the next 12 months. Here's some of what's on that list.</EM><BR />
<BR />
My colleagues <SPAN class="mention-scrubbed">mariusobert</SPAN> and <SPAN class="mention-scrubbed">vitaliy.rudnytskiy</SPAN> have already shared their learning bucket lists for this year, and I thought I'd do the same. I find it fascinating to see what other people are interested in, both in how they differ and how they overlap.<BR />
<BR />
<STRONG>Looking back</STRONG><BR />
<BR />
Learning is what I do, and 2019 was no exception. While live streaming still reminds me of the art of plate spinning, I've become more comfortable with the tech. Along the way of course I've also become more proficient in some of the subjects we've covered, such as the SAP Cloud Application Programming Model, OData V4, Business Rules (and other business services) on SAP Cloud Platform Cloud Foundry, functional programming and more besides.<BR />
<BR />
That said, I still feel as though <A href="https://blogs.sap.com/2018/10/01/monday-morning-thoughts-impostor-syndrome/" target="_blank" rel="noopener noreferrer">I've no idea what I'm doing</A>. But I've learned to accept that - it's part of who I am, and that's fine.<BR />
<BR />
&nbsp;<BR />
<BR />
<STRONG>Looking forward</STRONG><BR />
<BR />
As <SPAN class="mention-scrubbed">james.governor</SPAN> and I talked briefly about in the last part of <A href="https://www.youtube.com/watch?v=hpMiXp8WLvo" target="_blank" rel="nofollow noopener noreferrer">our interview at SAP TechEd 2019 Barcelona</A> I feel quite strongly that the cloud is forming into what I'm going to call "the new mainframe", with characteristics such as boundless computing resources, different forms of compute unit (from serverless through to VMs, from black box APIs through to software-as-as-service offerings) and consumption-based billing that I remember from the mid 1980s when we ran IBM big iron; in this context the billing was internal, but still measured in a similar way to what we see today.<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/01/Screenshot-2020-01-12-at-18.54.13.png" /><BR />
<BR />
But I think the most significant part of all of this is that, for the most part, the almost infinite power is at our fingertips in two very simple forms: web browser (i.e. native*) based GUIs and character terminals. In other words, the present and future of computing, in my eyes, is very much mainframe based in that we require very limited compute complexity on our desktops. This is partly why Chrome OS as a workstation operating system makes so much sense to me (beyond it also being more reliable, stable, and secure than anything else I've used).<BR />
<BR />
*<EM>Yes, native. Web is the true native GUI, everything else is merely OS-specific.</EM><BR />
<BR />
This is the thinking behind my hashtag-based mantra <A href="https://twitter.com/search?q=%23TheFutureIsTerminal&amp;src=typed_query" target="_blank" rel="nofollow noopener noreferrer">#TheFutureIsTerminal</A> - heck, I even have a tshirt that helps me make the point.<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/01/Screenshot-2020-01-12-at-16.12.38.png" /><BR />
<BR />
For me the terminal is the ultimate UI. Simple, reliable and pretty much ubiquitous. And it's built on solid technology that has been around for as long as I have, so it's stable and well understood. And much of the headless cloud computing power we have runs natively on Linux where remote terminal access is the obvious choice.<BR />
<BR />
Add to this the scriptable nature of command line interfaces (CLIs) and application programming interfaces (APIs), combine it with some shell magic (such as bash or zsh) and you have a wonderful environment in which to work, and that is accessible from pretty much anywhere and from any device, <A href="https://blogs.sap.com/2020/01/03/spice-up-your-windows-terminal/" target="_blank" rel="noopener noreferrer">even Windows-based devices!</A> <span class="lia-unicode-emoji" title=":winking_face:">ðŸ˜‰</span> Joking aside, you may also be interested to listen to a reading aloud of <A href="https://www.hanselman.com/" target="_blank" rel="nofollow noopener noreferrer">Scott Hanselman</A>'s post on consoles, terminals &amp; shells: <A href="https://anchor.fm/tech-aloud/episodes/Whats-the-difference-between-a-console--a-terminal--and-a-shell----Scott-Hanselman---20-Sep-2019-e5qbdu" target="_blank" rel="nofollow noopener noreferrer">What's the difference between a console, a terminal, and a shell?</A><BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/01/2310259-1568661278810-bf47ea92c8b6-1.jpg" height="186" width="186" /><BR />
<BR />
So some of the items that I'd like to dig deeper into and learn more about this year are a result of this way of looking at computing, both in business and as a hobby.<BR />
<BR />
&nbsp;<BR />
<BR />
<STRONG>Part 1 - Understanding core things better</STRONG><BR />
<BR />
And so to the list, where I begin with a category that contains important generic topics that I know something about already, but not enough.<BR />
<BR />
Too often I hack around with core services and utilities on the command line, and find myself googling how to do simple things, instead of reading the manual (the man pages that are automatically available right there in the terminal environment) and building up a more solid and long lasting understanding.<BR />
<BR />
An example this weekend was the <A href="https://en.wikipedia.org/wiki/Secure_Shell" target="_blank" rel="nofollow noopener noreferrer">Secure Shell</A> (SSH), which I was using without knowing as much as I feel as though I should do. I <A href="https://twitter.com/qmacro/status/1216384864800387078" target="_blank" rel="nofollow noopener noreferrer">hacked around with configuration</A> (ssh_config and sshd_config, if you're interested) until I got things working. But I knew that I was really just doing the equivalent of thrashing around until things stopped being broken.<BR />
<BR />
Another related example is the vast <A href="https://en.wikipedia.org/wiki/X_Window_System" target="_blank" rel="nofollow noopener noreferrer">X Windows System</A>, which, while pretty old, still works well and reliably, and compliments the terminal environment nicely. I have a fondness for X which is a little arcane, but hits that sweet spot for me in being both interesting as an old set of technologies to dig into as a hobbyist (or perhaps a computing archaeologist) and useful as tech that still works today. X is perhaps as relevant now in the new mainframe era as it ever was. I have an old book that I've taken from my shelves that I'd like to dig into for this.<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/01/IMG_20200112_151618.jpg" height="395" width="296" /><BR />
<BR />
So SSH and the X Windows System are just two technologies that I'd like to understand better. But that's only the tip of the iceberg. In the same vein, I'd like to grow my understanding of Cloud Foundry and have the <A href="https://docs.cloudfoundry.org/cf-cli/" target="_blank" rel="nofollow noopener noreferrer">CF CLI</A> be second nature to me. Similarly with <A href="https://www.ansible.com/" target="_blank" rel="nofollow noopener noreferrer">Ansible</A>, which I used recently for the first time to manage the Raspberry Pi cluster I set up with my son Joseph to eventually run a local Kubernetes cluster.<BR />
<BR />
&nbsp;<BR />
<BR />
<STRONG>Part 2 - New technologies</STRONG><BR />
<BR />
And so we come to the second part of the list, of technologies that are mostly new to me, but ones that I see will play an important part in the new mainframe era future.<BR />
<BR />
With that, <A href="https://kubernetes.io/" target="_blank" rel="nofollow noopener noreferrer">Kubernetes</A> is in first place (this is why I built the cluster over the holiday period), as a specific example of a more general topic that represents containerisation.<BR />
<BR />
<IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/01/IMG_20200103_132947-1.jpg" /><BR />
<BR />
This covers virtualisation in the form of virtual machines (VMs), but more specifically <A href="https://en.wikipedia.org/wiki/LXC" target="_blank" rel="nofollow noopener noreferrer">LXC</A> powered containers and related technologies such as <A href="https://www.docker.com/" target="_blank" rel="nofollow noopener noreferrer">Docker</A> (if you want to learn more about Docker, <SPAN class="mention-scrubbed">vitaliy.rudnytskiy</SPAN> has a nice series "<A href="https://blogs.sap.com/tag/understandcontainers/" target="_blank" rel="noopener noreferrer">Understanding Containers</A>" here on the SAP Community).<BR />
<BR />
I guess there's an irony in the title of this part of the list ("New technologies"), in that none of them are really new - the mainframe operating systems that I used in the 1980s ran on virtual machines way back then, specifically I remember that the MVS/XA and MVS/ESA operating system environments were actually hosted on <A href="https://en.wikipedia.org/wiki/VM_(operating_system)" target="_blank" rel="nofollow noopener noreferrer">VM/CMS</A> which dates back to the 1970s.<BR />
<BR />
One thing that is relatively new, in terms of being available, is <A href="https://github.com/actions" target="_blank" rel="nofollow noopener noreferrer">GitHub Actions</A> which is one of the building blocks that has been released on the platform since Microsoft took over, and is one of the things that has helped cement my thoughts about the cloud being the new mainframe. I've dabbled already with GitHub Actions, having built <A href="https://github.com/qmacro/action-add-issue-to-project-column" target="_blank" rel="nofollow noopener noreferrer">an action to auto-assign a new issue to a specific project</A> (and I use this action every day), in an attempt to get my head around the concepts, but I'd like to extend my knowledge here too.<BR />
<BR />
&nbsp;<BR />
<BR />
<STRONG>Part 3 - Language and expression</STRONG><BR />
<BR />
It's no secret that I am a big fan of the functional programming style. This is something I want to dig into more this year, and move closer towards a more natural, second-nature understanding of some of the concepts that this style embraces and enables. I'd like to dig even more into <A href="https://ramdajs.com" target="_blank" rel="nofollow noopener noreferrer">Ramda</A>, the functional programming library for JavaScript, and its companion library <A href="https://char0n.github.io/ramda-adjunct/2.23.0/" target="_blank" rel="nofollow noopener noreferrer">Ramda Adjunct</A>.<BR />
<BR />
Along the same lines as others such as <SPAN class="mention-scrubbed">mariusobert</SPAN> and <SPAN class="mention-scrubbed">helmut.tammen2</SPAN> I'd like to look more into <A href="https://www.typescriptlang.org/" target="_blank" rel="nofollow noopener noreferrer">TypeScript</A> too, pretty much for similar reasons. I've long been a user of dynamically typed scripting languages but my journey into functional programming has taught me the benefits of strong typing and type systems generally. And it's just JavaScript underneath, which helps a lot.<BR />
<BR />
&nbsp;<BR />
<BR />
<STRONG>Part 4 - SAP technologies</STRONG><BR />
<BR />
There's no particular reason why this part is at the end; as you might have guessed, everything on my list so far is to help my working life in the SAP world. As SAP has moved more and more towards embracing open standards and technologies, it's natural that the overlap between SAP and non-SAP topics is getting larger and larger all the time.<BR />
<BR />
I'm particularly looking forward to diving deeper into the <A href="https://developers.sap.com/topics/cloud-sdk.html" target="_blank" rel="noopener noreferrer">Cloud SDK</A>, and how to use that, along with services on SAP Cloud Platform generally, to build upon existing "brownfield" installations. This of course means using lots of different technologies together, combining the <A href="https://api.sap.com/" target="_blank" rel="noopener noreferrer">API Hub</A> as a directory for available services, Cloud Foundry as the deployment target platform, using the <A href="https://blogs.sap.com/2019/05/07/now-available-the-sap-cp-extension-factory/" target="_blank" rel="noopener noreferrer">Extension Factory</A> (and, by association, <A href="https://kyma-project.io/" target="_blank" rel="nofollow noopener noreferrer">Kyma</A>).<BR />
<BR />
Not to mention keeping my brain sharp on all things <A href="https://cap.cloud.sap/" target="_blank" rel="nofollow noopener noreferrer">CAP</A>. Because we shouldn't forget, that <A href="https://blogs.sap.com/2019/11/06/cap-is-important-because-its-not-important/" target="_blank" rel="noopener noreferrer">CAP is important, because it's not important</A>.<BR />
<BR />
&nbsp;<BR />
<BR />
<STRONG>Wrapping up</STRONG><BR />
<BR />
So there you have it. If nothing drastic changes, this is the learning trajectory that I hope to keep myself following. One thing is for certain, and that's I'm looking forward to learning and sharing, whatever the topic.<BR />
<BR />
See you <A href="https://bit.ly/handsonsapdev" target="_blank" rel="nofollow noopener noreferrer">online</A>!
