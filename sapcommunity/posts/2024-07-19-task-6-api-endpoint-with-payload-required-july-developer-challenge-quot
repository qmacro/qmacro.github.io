2024-07-19-task-6-api-endpoint-with-payload-required-july-developer-challenge-quot
Task 6 - API endpoint with payload required (July Developer Challenge - "Reverse APIs")
application-developmentforum-board
2024-07-19
https://community.sap.com/t5/application-development-discussions/task-6-api-endpoint-with-payload-required-july-developer-challenge-quot/td-p/13765529
<P>This is a task in the<SPAN>&nbsp;</SPAN><A href="https://community.sap.com/t5/application-development-blog-posts/2024-07-quot-reverse-apis-quot-sap-developer-challenge/ba-p/13749653" target="_blank">July Developer Challenge - "Reverse APIs"</A>.</P><P>This task gets you to add another API endpoint to the<SPAN>&nbsp;</SPAN>plain<SPAN>&nbsp;</SPAN>"REST" service you have, but will be a little different in its definition, implementation, and how it's called.</P><H2 id="toc-hId-1020321480">Background</H2><P>HTTP-based API endpoints, whatever the protocol, can differ in various ways, such as:</P><UL><LI>how they're called (which HTTP method)</LI><LI>whether they expect a payload (a body) in the HTTP request</LI><LI>what they do, what effect they have at the server side</LI><LI>what resource and representation they return (if any)</LI></UL><P>HTTP is an application protocol and there are already well understood semantic meanings for each of the methods (also known as "verbs", where the URLs are the "nouns"). There are some protocols that abuse or ignore these semantics, particularly the set of heavyweight "Web Services" from a decade or so ago, known as "WS-Deathstar" (due to their weight and complexity), SOAP, and even today we have GraphQL that arguably abuses HTTP as a mere transport layer. Yes, "abuse" is a strong word, but, as my<SPAN>&nbsp;</SPAN><A href="https://www.linkedin.com/in/djadams/" target="_blank" rel="nofollow noopener noreferrer">bio</A><SPAN>&nbsp;</SPAN>hints at, it's an opinion I hold, and is one of many <span class="lia-unicode-emoji" title=":slightly_smiling_face:">🙂</span></P><P><span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="bio.png" style="width: 313px;"><img src="https://community.sap.com/t5/image/serverpage/image-id/138709iF44A397EA563D7FB/image-size/large?v=v2&amp;px=999" role="button" title="bio.png" alt="bio.png" /></span></P><P>Anyway, in addition to those differences listed earlier, one must also consider the duumvirate (yes, I did just use that word) of:</P><UL><LI>idempotency</LI><LI>side effects</LI></UL><P>Idempotency (from the Latin, as is, of course, duumvirate) essentially means "having the same effect". To quote the excellent MDN docs on<SPAN>&nbsp;</SPAN><A href="https://developer.mozilla.org/en-US/docs/Glossary/Idempotent" target="_blank" rel="nofollow noopener noreferrer">Idempotency</A>:</P><BLOCKQUOTE><P>An HTTP method is idempotent if the intended effect on the server of making a single request is the same as the effect of making several identical requests.</P></BLOCKQUOTE><P>Examples of HTTP methods that have this idempotency characteristic are: GET, HEAD, PUT and DELETE (yes!).</P><P>A side effect in this context means that in handling or otherwise fulfilling an HTTP request, state is changed on the server. HTTP methods that do not have side effects are known as<SPAN>&nbsp;</SPAN><A href="https://developer.mozilla.org/en-US/docs/Glossary/Safe/HTTP" target="_blank" rel="nofollow noopener noreferrer">safe</A>. Examples of HTTP methods that do have side effects, i.e. that are not safe, are POST, PUT and DELETE. Examples of HTTP methods that are side effect free, i.e. safe, are GET, HEAD and OPTIONS.</P><P>Semantic meanings are important, as they form part of the "contract" of behaviour between clients and servers.</P><P>Why am I telling you all this? Because CDL, CAP's definition language that you use to define your overall CDS model, has a couple of keywords that are important in this context.</P><H3 id="toc-hId-952890694">Actions and functions</H3><P>In Capire's section on Providing Services, there's a subsection on<SPAN>&nbsp;</SPAN><A href="https://cap.cloud.sap/docs/guides/providing-services#actions-functions" target="_blank" rel="nofollow noopener noreferrer">Actions &amp; Functions</A><SPAN>&nbsp;</SPAN>that explain more. I recommend you go and read that section, then come back here.</P><P>Did you notice the explanation was in the context of OData? That's because it's where the specific definitions originate, but these definitions make sense even outside the context of OData, such as when serving via the "REST" protocol.</P><P>In summary, we can see that both actions and functions are for providing API endpoints that represent resources beyond the standard CRUD+Q requests, although:</P><UL><LI>Functions are for defining API endpoints that are safe, these endpoints are to be requested with HTTP GET, and any data should be supplied in the URL. There's a related rule here that functions must be addressed (in the URL) with brackets, even if there's no data to supply. Functions, on the whole, are for returning data.</LI><LI>Actions are for defining API endpoints that <EM>may</EM> have side effects, and these endpoints must be requested with HTTP POST; any data that is to be supplied must be as a payload to the POST request. In addition, actions may return nothing (just an HTTP status code and headers).</LI></UL><P>In addition (but not relevant for this task), both functions and actions can be bound or unbound. The idea of "unbound" is what we generally think of in terms of simple API endpoints. The "bound" concept is from OData, and is about calling an action or function relative to a specific entity. In such cases there's an extra implicit "binding parameter" that the implementation receives in the request, as a connection to the instance of the entity to which the called function is bound.</P><P>The first task in the context of this current<SPAN>&nbsp;</SPAN>plain<SPAN>&nbsp;</SPAN>"REST" service was an unbound function (note the brackets, despite no parameters):</P><DIV class=""><PRE>/rest/plain/theAnswer()</PRE><DIV class=""><SPAN>This task will require you to define and implement a simple unbound action, which means you must:</SPAN></DIV></DIV><UL><LI>use the<SPAN>&nbsp;</SPAN>action<SPAN>&nbsp;</SPAN>keyword</LI><LI>call it using a request with the HTTP POST method</LI><LI>send the data in the payload of the request</LI></UL><P>You will also not need to use brackets at the end of the URL.</P><H2 id="toc-hId-627294470">The requirements</H2><P>Here are the specific requirements for this task.</P><P>In the<SPAN>&nbsp;</SPAN>plain<SPAN>&nbsp;</SPAN>service you have already, define an unbound action that expects a list of integers. The implementation of that unbound action must determine the highest of those numbers, and return it as a single integer.</P><P><SPAN>Note that if you are running CAP Node.js version 8 then you will have to annotate your&nbsp;</SPAN>action<SPAN>&nbsp;definition with&nbsp;</SPAN>@open<SPAN>. See the&nbsp;</SPAN><A href="https://qmacro.org/blog/posts/2024/07/24/automatic-validation-in-odata-and-rest-calls-with-cap/#opentypes" target="_blank" rel="nofollow noopener noreferrer">Open Types section</A><SPAN>&nbsp;of the blog post&nbsp;</SPAN><A href="https://qmacro.org/blog/posts/2024/07/24/automatic-validation-in-odata-and-rest-calls-with-cap/" target="_blank" rel="nofollow noopener noreferrer">Automatic validation in OData and REST calls with CAP</A><SPAN>&nbsp;for more information.</SPAN></P><H2 id="toc-hId-430780965">Submitting to the TESTER</H2><P>Now you're ready to submit your CANDIDATE service, with this new API endpoint, to the TESTER!</P><P>Note that the TESTER will be calling your action via HTTP POST, and supplying the list of integers as an array, in a JSON representation, in other words, like this:</P><DIV class=""><PRE><SPAN class="">POST</SPAN><SPAN class=""> /rest/plain/highestValue HTTP/1.1</SPAN>
<SPAN class=""><SPAN class="">Host:</SPAN> localhost:8000</SPAN>
<SPAN class=""><SPAN class="">Content-Type:</SPAN> application/json</SPAN>
<SPAN class=""><SPAN class="">Content-Length:</SPAN> 19</SPAN>

<SPAN class="">[</SPAN>54<SPAN class="">,</SPAN> 203<SPAN class="">,</SPAN> -3<SPAN class="">,</SPAN> 0<SPAN class="">,</SPAN> 1<SPAN class="">]</SPAN></PRE></DIV><H3 id="toc-hId-363350179">The payload</H3><P>The task identifier you need to supply in the payload of your submission is:<SPAN>&nbsp;</SPAN><STRONG>plain-highestValue</STRONG>.</P><P>You'll have already done this sort of thing<SPAN>&nbsp;</SPAN><A href="https://community.sap.com/t5/application-development-discussions/july-developer-challenge-quot-reverse-apis-quot-task-1-your-first-service/m-p/13752205" target="_blank">previously</A><SPAN>&nbsp;</SPAN>so just head back there for the more detailed instructions if you need them, or to the the section titled "<A href="https://community.sap.com/t5/application-development-blog-posts/2024-07-quot-reverse-apis-quot-sap-developer-challenge/ba-p/13749653#toc-hId--553513390" target="_blank">The Tester service, and making a test request</A>" in the<SPAN>&nbsp;</SPAN><A href="https://community.sap.com/t5/application-development-blog-posts/2024-07-quot-reverse-apis-quot-sap-developer-challenge/ba-p/13749653" target="_blank">main challenge blog post</A>.</P><P>You'll need to submit a JSON payload like this:</P><DIV class=""><PRE>{
  <SPAN class="">"communityid"</SPAN>: <SPAN class=""><SPAN class="">"</SPAN>&lt;your-community-id&gt;<SPAN class="">"</SPAN></SPAN>,
  <SPAN class="">"serviceurl"</SPAN>: <SPAN class=""><SPAN class="">"</SPAN>&lt;the-URL-of-your-service&gt;<SPAN class="">"</SPAN></SPAN>,
  <SPAN class="">"task"</SPAN>: <SPAN class=""><SPAN class="">"</SPAN>plain-highestValue<SPAN class="">"</SPAN></SPAN>
}</PRE><DIV class=""><SPAN>And, just as with the previous (and all further tasks):</SPAN></DIV></DIV><UL><LI><P>the value for the<SPAN>&nbsp;</SPAN>communityid<SPAN>&nbsp;</SPAN>property should be your ID on this SAP Community platform (e.g. mine is "qmacro")</P></LI><LI><P>the value for the<SPAN>&nbsp;</SPAN>serviceurl<SPAN>&nbsp;</SPAN>property should be the absolute URL (i.e. including the scheme), of your CANDIDATE<SPAN>&nbsp;</SPAN><STRONG>service</STRONG><SPAN>&nbsp;</SPAN>which<SPAN>&nbsp;</SPAN><EM>contains</EM><SPAN>&nbsp;</SPAN>the API endpoint (see<SPAN>&nbsp;</SPAN><A href="https://community.sap.com/t5/application-development-blog-posts/2024-07-quot-reverse-apis-quot-sap-developer-challenge/ba-p/13749653#toc-hId--356999885" target="_blank"><span class="lia-unicode-emoji" title=":information:">ℹ️</span><SPAN>&nbsp;</SPAN>A note on URLs and services</A>).</P></LI></UL><P>That's it!</P><H2 id="toc-hId-37753955">Logging of test results</H2><P>Remember that you can check on your progress, and the progress of your fellow participants - all requests are logged and are available in an entity set served by the TESTER service. The entity set URL is<SPAN>&nbsp;</SPAN><A href="https://developer-challenge-2024-07.cfapps.eu10.hana.ondemand.com/tester/Testlog" target="_blank" rel="nofollow noopener noreferrer">https://developer-challenge-2024-07.cfapps.eu10.hana.ondemand.com/tester/Testlog</A><SPAN>&nbsp;</SPAN>and being an OData V4 entity set, all the normal OData system query options are available to you for digging into that information.</P><P>Until the next task, have fun, and if you have any questions or comments, leave them below!</P>
