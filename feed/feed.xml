<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet href="pretty-atom-feed.xsl" type="text/xsl"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
  <title>DJ Adams</title>
  <subtitle>Reserving the right to be wrong</subtitle>
  <link href="https://qmacro.org/feed/feed.xml" rel="self" />
  <link href="https://qmacro.org/blog/" />
  <updated>2025-09-10T00:00:00Z</updated>
  <id>https://qmacro.org/blog/</id>
  <author>
    <name>DJ Adams</name>
  </author>
  <entry>
    <title>Upcoming talks in autumn 2025</title>
    <link href="https://qmacro.org/blog/posts/2025/09/10/upcoming-talks-in-autumn-2025/" />
    <updated>2025-09-10T00:00:00Z</updated>
    <id>https://qmacro.org/blog/posts/2025/09/10/upcoming-talks-in-autumn-2025/</id>
    <content type="html">&lt;p&gt;I&#39;m delivering and / or involved in various in-person talks and workshops over the next few months, here&#39;s a quick breakdown.&lt;/p&gt;
&lt;h3 id=&quot;26-sep-foundations-of-ai-applications-with-the-sap-hana-cloud&quot;&gt;26 Sep: Foundations of AI applications with the SAP HANA Cloud&lt;/h3&gt;
&lt;p&gt;This is an SAP CodeJam &lt;a href=&quot;https://community.sap.com/t5/sap-codejam/foundations-of-ai-applications-with-the-sap-hana-cloud-porto-pt/ev-p/14153367&quot;&gt;on Fri 26 Sep in Porto, PT&lt;/a&gt;, led by my lovely colleague Witalij Rudnicki and assisted by me.&lt;/p&gt;
&lt;h3 id=&quot;27-sep-level-up-your-cap-skills-by-learning-how-to-use-the-cds-repl&quot;&gt;27 Sep: Level up your CAP skills by learning how to use the cds REPL&lt;/h3&gt;
&lt;p&gt;This is a talk I&#39;m giving on Sat 27 Sep at &lt;a href=&quot;https://sitporto.com&quot;&gt;SAP Inside Track Porto&lt;/a&gt;, PT, following the AI and SAP HANA Cloud CodeJam the day before.&lt;/p&gt;
&lt;p&gt;Abstract: The cds repl (REPL stands for Read Evaluate Print Loop) is an extremely powerful and versatile tool for every CAP Node.js developer. In this session, you&#39;ll become acquainted with it, get a feel for what it&#39;s like, how to wield its powers, and more. No experience required, this will be a live session with no slides.&lt;/p&gt;
&lt;h3 id=&quot;08-oct-sap-fiori-elements-flexible-programming-model&quot;&gt;08 Oct: SAP Fiori elements flexible programming model&lt;/h3&gt;
&lt;p&gt;This is an SAP CodeJam &lt;a href=&quot;https://community.sap.com/t5/sap-codejam/sap-fiori-elements-flexible-programming-model-birmingham-uk/ev-p/14210332&quot;&gt;on Wed 08 Oct in Birmingham, UK&lt;/a&gt;, led by my lovely colleague Nico Schoenteich and assisted by me.&lt;/p&gt;
&lt;h3 id=&quot;10-oct-service-integration-with-sap-cloud-application-programming-model&quot;&gt;10 Oct: Service integration with SAP Cloud Application Programming Model&lt;/h3&gt;
&lt;p&gt;This is an SAP CodeJam &lt;a href=&quot;https://community.sap.com/t5/sap-codejam/service-integration-with-the-sap-cloud-application-programming-model-munich/ec-p/14212922&quot;&gt;on Fri 10 Oct in Munich, DE&lt;/a&gt;, led by me.&lt;/p&gt;
&lt;h3 id=&quot;11-oct-cap-node-js-features-for-local-development&quot;&gt;11 Oct: CAP Node.js features for local development&lt;/h3&gt;
&lt;p&gt;This is a talk on Sat 11 Oct at &lt;a href=&quot;https://community.sap.com/t5/m%C3%BCnchen-blog-posts/sap-inside-track-munich-2025-call-for-speakers-sitmuc25/ba-p/14161947&quot;&gt;SAP Inside Track Munich&lt;/a&gt; DE, following the CAP CodeJam the day before.&lt;/p&gt;
&lt;p&gt;Abstract: There are some great facilities in CAP Node.js for local development, which means rapid iterations and the ability to think local-first without losing sight of the productive context in the cloud. In this session I&#39;ll demonstrate some of these facilities which will make you a valuable asset to any project. No slides, just working live in the terminal and editor.&lt;/p&gt;
&lt;h3 id=&quot;05-nov-draft-day-for-developers-turning-new-technology-into-real-world-wins&quot;&gt;05 Nov: Draft day for developers: Turning new technology into real-world wins&lt;/h3&gt;
&lt;p&gt;I&#39;ll &lt;a href=&quot;https://www.sap.com/events/teched/berlin/flow/sap/te25/speaker-catalog-inperson/page/dj-adams&quot;&gt;be at SAP TechEd&lt;/a&gt;, and I&#39;m honoured to play a part in session &lt;a href=&quot;https://www.sap.com/events/teched/berlin/flow/sap/te25/catalog-inperson/page/catalog/session/1755789361320001c3gG&quot;&gt;KEY101 | Draft day for developers: Turning new technology into real-world wins&lt;/a&gt;, the Developer Keynote on Wed 05 Nov at SAP TechEd in Berlin this year.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://qmacro.org/images/2025/09/teched-speaker.png&quot; alt=&quot;TechEd speaker profile&quot;&gt;&lt;/p&gt;
&lt;p&gt;Abstract: The picks are in, and developers, their tools, and frameworks are first-round talent. Get a front-row seat to SAP&#39;s latest innovations built to accelerate how you code, automate, and scale. Explore how you can use SAP&#39;s newest AI capabilities, generative agents, and enhanced tooling to build faster and smarter with less friction and more impact.&lt;/p&gt;
&lt;h3 id=&quot;05-nov-trivia-competition&quot;&gt;05 Nov: Trivia competition&lt;/h3&gt;
&lt;p&gt;I&#39;ll be running a live trivia competition (&lt;a href=&quot;https://www.sap.com/events/teched/berlin/flow/sap/te25/catalog-inperson/page/catalog/session/1756936085495001SaY9&quot;&gt;CT1288&lt;/a&gt;) on Wed 05 Nov in the Community Theatre.&lt;/p&gt;
&lt;h3 id=&quot;05-nov-learning-by-doing-in-the-cds-repl&quot;&gt;05 Nov: Learning by doing in the cds REPL&lt;/h3&gt;
&lt;p&gt;This is a talk (&lt;a href=&quot;https://www.sap.com/events/teched/berlin/flow/sap/te25/catalog-inperson/page/catalog/session/1756936609129001McHZ&quot;&gt;CT1291&lt;/a&gt;) that I&#39;m giving in the Community Theatre on Wed 05 Nov.&lt;/p&gt;
&lt;p&gt;Abstract: Work through a simple SAP Cloud Application Programming Model (CAP) project, live with your peers, in the cds REPL. Explore as you go and collectively ask each other questions, such as &amp;quot;What will happen if?&amp;quot; &amp;quot;What do you think this will evaluate to?&amp;quot; and &amp;quot;Why does this happen?&amp;quot;&lt;/p&gt;
&lt;h3 id=&quot;30-nov-hands-on-workshop&quot;&gt;30 Nov: Hands-on workshop&lt;/h3&gt;
&lt;p&gt;I&#39;m &lt;em&gt;hoping&lt;/em&gt; to be able to attend and deliver some sort of hands-on workshop at &lt;a href=&quot;https://www.sap.com/uk/events/2025-11-30-uk-pe-ukisug-connect.html&quot;&gt;UKISUG Connect&lt;/a&gt; this year on Sun 30 Nov in Birmingham, UK. Nothing has been confirmed or agreed yet, but I thought I&#39;d put it in this list, and cross my fingers :-)&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Auto formatting extensionless Bash scripts in Neovim</title>
    <link href="https://qmacro.org/blog/posts/2025/09/01/auto-formatting-extensionless-bash-scripts-in-neovim/" />
    <updated>2025-09-01T00:00:00Z</updated>
    <id>https://qmacro.org/blog/posts/2025/09/01/auto-formatting-extensionless-bash-scripts-in-neovim/</id>
    <content type="html">&lt;h2 id=&quot;tl-dr&quot;&gt;TL;DR&lt;/h2&gt;
&lt;p&gt;The Bash language server is easy to install and has support for &lt;code&gt;shfmt&lt;/code&gt; which in turn has support for Editorconfig settings.&lt;/p&gt;
&lt;p&gt;For shell scripts without extensions, Editorconfig is no good, except if you use &lt;code&gt;shfmt&lt;/code&gt;&#39;s special support in the form of &lt;code&gt;[[shell]]&lt;/code&gt; or &lt;code&gt;[[bash]]&lt;/code&gt; section globs.&lt;/p&gt;
&lt;p&gt;But that&#39;s non-standard, and when invoked via the Bash language server, doesn&#39;t work. However, you can get it to work by using a wrapper script that strips off options in the call to &lt;code&gt;shfmt&lt;/code&gt; with the result that these special Editorconfig sections are recognised.&lt;/p&gt;
&lt;h2 id=&quot;background&quot;&gt;Background&lt;/h2&gt;
&lt;p&gt;In my continuing quest to &lt;a href=&quot;https://qmacro.org/blog/posts/2025/06/10/a-modern-and-clean-neovim-setup-for-cap-node.js-configuration-and-diagnostics/&quot;&gt;build out a cleaner and leaner Neovim configuration&lt;/a&gt; I turned my attention recently to improving my Bash script editing experience. For Bash there are plenty of facilities that fit into my Personal Development Environment, including &lt;code&gt;shellcheck&lt;/code&gt; and &lt;code&gt;shfmt&lt;/code&gt;, both of which I have been using for quite a while (see &lt;a href=&quot;https://qmacro.org/blog/posts/2020/10/05/improving-my-shell-scripting/&quot;&gt;Improving my shell scripting&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;I decided to give the &lt;a href=&quot;https://github.com/bash-lsp/bash-language-server&quot;&gt;Bash language server&lt;/a&gt; a try. It&#39;s a super easy setup &lt;a href=&quot;https://github.com/bash-lsp/bash-language-server?tab=readme-ov-file#neovim&quot;&gt;for Neovim 0.11+&lt;/a&gt; and the &lt;a href=&quot;https://github.com/bash-lsp/bash-language-server?tab=readme-ov-file#shfmt-integration&quot;&gt;integration with shfmt&lt;/a&gt; was a feature that caught my eye in particular. See &lt;a href=&quot;https://qmacro.org/blog/posts/2025/09/01/auto-formatting-extensionless-bash-scripts-in-neovim/#appendix-c-neovim-lsp-configuration-for-the-bash-language-server&quot;&gt;Appendix C&lt;/a&gt; for the setup configuration details.&lt;/p&gt;
&lt;p&gt;Add to this a desire to also more consciously embrace &lt;a href=&quot;https://editorconfig.org/&quot;&gt;Editorconfig&lt;/a&gt;, especially given &lt;a href=&quot;https://github.com/mvdan/sh/blob/master/cmd/shfmt/shfmt.1.scd#description&quot;&gt;shfmt&#39;s support for that&lt;/a&gt;, and I was set for a great experience.&lt;/p&gt;
&lt;h2 id=&quot;the-perfect-storm&quot;&gt;The perfect storm&lt;/h2&gt;
&lt;p&gt;I am of the opinion that the names of shell scripts that are written to be executed on the command line should not have extensions. This follows a &lt;a href=&quot;https://google.github.io/styleguide/shellguide.html#s2.1-file-extensions&quot;&gt;specific guideline&lt;/a&gt; in the &lt;a href=&quot;https://google.github.io/styleguide/shellguide.html&quot;&gt;Google Shell Style Guide&lt;/a&gt;. Interpretation of shell script file[type]s is based on the &lt;a href=&quot;https://en.wikipedia.org/wiki/Shebang_(Unix)&quot;&gt;shebang&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This approach, combined with the Bash language server, its support for &lt;code&gt;shfmt&lt;/code&gt;, and a custom part of &lt;code&gt;shfmt&lt;/code&gt;&#39;s support for Editorconfig, turned out to be a small but perfect storm:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Editorconfig&#39;s approach and configuration (&lt;a href=&quot;https://spec.editorconfig.org/&quot;&gt;specification&lt;/a&gt;) is based on file extensions only and there is no generic provision for specifying editor settings for files without extensions&lt;/li&gt;
&lt;li&gt;As the extensionless shell script is such a common phenomenon, support for Editorconfig within &lt;code&gt;shfmt&lt;/code&gt; has been extended to allow for special &lt;a href=&quot;https://spec.editorconfig.org/#glob-expressions&quot;&gt;section names&lt;/a&gt; in Editorconfig configuration files so that such shell scripts can be matched more generically; this support is described in the &lt;a href=&quot;https://github.com/mvdan/sh/blob/master/cmd/shfmt/shfmt.1.scd#examples&quot;&gt;Examples&lt;/a&gt; section in &lt;code&gt;shfmt&lt;/code&gt;&#39;s documentation thus:
&lt;blockquote&gt;
&lt;p&gt;&amp;quot;EditorConfig sections may also use &lt;code&gt;[[shell]]&lt;/code&gt; or &lt;code&gt;[[bash]]&lt;/code&gt; to match any shell or bash scripts, which is particularly useful when scripts use a shebang but no extension. Note that this feature is outside of the EditorConfig spec and may be changed in the future.&amp;quot;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;While it&#39;s great to have &lt;a href=&quot;https://github.com/bash-lsp/bash-language-server?tab=readme-ov-file#shfmt-integration&quot;&gt;support for shfmt&lt;/a&gt; in the Bash language server, this support does not include this non-standard (but insanely useful) &lt;code&gt;[[bash]]&lt;/code&gt; style facility for Editorconfig configuration.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Consequently, when editing shell scripts with extensionless filenames using Neovim with the Bash language server configured and &lt;code&gt;shfmt&lt;/code&gt; installed&lt;a href=&quot;https://qmacro.org/blog/posts/2025/09/01/auto-formatting-extensionless-bash-scripts-in-neovim/#footnotes&quot;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;
I got a very odd and confusing experience.&lt;/p&gt;
&lt;p&gt;&lt;a name=&quot;example-of-the-issue&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;example-of-the-issue&quot;&gt;Example of the issue&lt;/h2&gt;
&lt;p&gt;Here&#39;s an example, based on three test files called &lt;code&gt;a&lt;/code&gt;, &lt;code&gt;b&lt;/code&gt; and &lt;code&gt;fixup&lt;/code&gt;, and these (reduced) Editorconfig settings in my &lt;code&gt;.editorconfig&lt;/code&gt; file:&lt;/p&gt;
&lt;pre class=&quot;language-toml&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-toml&quot;&gt;&lt;span class=&quot;token key property&quot;&gt;root&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;

&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;*&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;token key property&quot;&gt;indent_style&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt; tab

&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token table class-name&quot;&gt;bash&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;token key property&quot;&gt;indent_size&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;token key property&quot;&gt;indent_style&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt; space
&lt;span class=&quot;token key property&quot;&gt;switch_case_indent&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;token key property&quot;&gt;binary_next_line&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;token key property&quot;&gt;space_redirects&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;On the command line&lt;/em&gt;, running &lt;code&gt;shfmt&lt;/code&gt;&lt;a href=&quot;https://qmacro.org/blog/posts/2025/09/01/auto-formatting-extensionless-bash-scripts-in-neovim/#footnotes&quot;&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; on each of these three files produced the expected results, in that all were formatted according to the &lt;code&gt;shfmt&lt;/code&gt;-specific settings in that &lt;code&gt;[[bash]]&lt;/code&gt; section plus of course indented with 2 spaces.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Within Neovim&lt;/em&gt;, via the Bash language server&lt;a href=&quot;https://qmacro.org/blog/posts/2025/09/01/auto-formatting-extensionless-bash-scripts-in-neovim/#footnotes&quot;&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt;, with shell script files &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; everything seemed to work fine and my Bash scripts were indented appropriately with 2 spaces. When I then started to work on real shell scripts such as the one called &lt;code&gt;fixup&lt;/code&gt;, things didn&#39;t work the same, and the indentation was done with tabs, not spaces (the horror!).&lt;/p&gt;
&lt;p&gt;Yes, you guessed it, this was because in standard Editorconfig procedure, the &lt;code&gt;[bash]&lt;/code&gt; part of the &lt;code&gt;[[bash]]&lt;/code&gt; section heading is considered a sequence of characters &lt;code&gt;b&lt;/code&gt;, &lt;code&gt;a&lt;/code&gt;, &lt;code&gt;s&lt;/code&gt; and &lt;code&gt;h&lt;/code&gt;, matching files of those single-character names; and as &lt;code&gt;fixup&lt;/code&gt; was not matched with that sequence, that section (containing &lt;code&gt;indent_style = space&lt;/code&gt;) didn&#39;t apply, and so &lt;code&gt;indent_style = tab&lt;/code&gt; prevailed.&lt;/p&gt;
&lt;p&gt;This is unfortunate, but is not really anyone&#39;s fault.&lt;/p&gt;
&lt;h2 id=&quot;bash-language-server-shfmt-and-editorconfig&quot;&gt;Bash language server, shfmt and Editorconfig&lt;/h2&gt;
&lt;p&gt;I dug in to see what was happening in the Bash language server.&lt;/p&gt;
&lt;p&gt;In preparing to call &lt;code&gt;shfmt&lt;/code&gt;, properties appropriate for the file in question are determined from the Editorconfig configuration. The &lt;a href=&quot;https://www.npmjs.com/package/editorconfig&quot;&gt;editorconfig&lt;/a&gt; NPM package is used for this determination, and the custom &lt;code&gt;shfmt&lt;/code&gt; extension to allow for &lt;code&gt;[[bash]]&lt;/code&gt; and &lt;code&gt;[[shell]]&lt;/code&gt; does not exist in that package.&lt;/p&gt;
&lt;p&gt;There are generic configuration properties such as &lt;code&gt;indent_style&lt;/code&gt;, and &lt;code&gt;shfmt&lt;/code&gt;-specific ones such as &lt;code&gt;switch_case_indent&lt;/code&gt;. If there are any &lt;code&gt;shfmt&lt;/code&gt;-specific ones then the Editorconfig configuration is used. Otherwise, the language server configuration is used. This reflects the approach taken by &lt;code&gt;shfmt&lt;/code&gt; itself in using either Editorconfig or its own command line flags, but not both (as we&#39;ll see in the next section).&lt;/p&gt;
&lt;p&gt;The configuration is then turned into a series of explicit &lt;code&gt;shfmt&lt;/code&gt; command line options, in particular (but not exclusively) from the &lt;a href=&quot;https://github.com/mvdan/sh/blob/master/cmd/shfmt/shfmt.1.scd#printer-flags&quot;&gt;Printer flags&lt;/a&gt; group. For example, on surfacing a &lt;code&gt;binary_next_line = true&lt;/code&gt; setting in &lt;code&gt;.editorconfig&lt;/code&gt; it will generate an equivalent &lt;code&gt;-bn&lt;/code&gt; flag to pass in the call to &lt;code&gt;shfmt&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Then the Bash language server invokes &lt;code&gt;shfmt&lt;/code&gt; passing these generated options, plus the &lt;code&gt;--filename&lt;/code&gt; option to specify the full pathname of the file being formatted.&lt;/p&gt;
&lt;h3 id=&quot;example-for-script-called-fixup&quot;&gt;Example for script called &#39;fixup&#39;&lt;/h3&gt;
&lt;p&gt;Here&#39;s an example of that for the script called &lt;code&gt;fixup&lt;/code&gt; for which the &lt;code&gt;editorconfig&lt;/code&gt; package does &lt;em&gt;not&lt;/em&gt; match the &lt;code&gt;[[bash]]&lt;/code&gt; section. This is what&#39;s invoked:&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;shfmt &lt;span class=&quot;token parameter variable&quot;&gt;--filename&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;/home/dj/test/fixup &lt;span class=&quot;token parameter variable&quot;&gt;-i0&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-ln&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;auto -&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;the &lt;code&gt;-i0&lt;/code&gt; comes from a default driven by the basic details sent in the request from Neovim&#39;s LSP client, which includes &lt;code&gt;insertSpaces = false&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;the &lt;code&gt;-ln=auto&lt;/code&gt; comes from &lt;a href=&quot;https://github.com/bash-lsp/bash-language-server/blob/main/server/src/config.ts&quot;&gt;a default in the Bash language server itself&lt;/a&gt; for &lt;code&gt;languageDialect&lt;/code&gt; (see also &lt;a href=&quot;https://qmacro.org/blog/posts/2025/09/01/auto-formatting-extensionless-bash-scripts-in-neovim/#appendix-a-mason-info-for-bash-language-server&quot;&gt;Appendix A&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;example-for-script-called-a&quot;&gt;Example for script called &#39;a&#39;&lt;/h3&gt;
&lt;p&gt;Here&#39;s another example of what the Bash language server ultimately invokes for the script called &lt;code&gt;a&lt;/code&gt; which (by chance) &lt;em&gt;was&lt;/em&gt; matched by the &lt;code&gt;[[bash]]&lt;/code&gt; section:&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;shfmt &lt;span class=&quot;token parameter variable&quot;&gt;--filename&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;/home/dj/test/a &lt;span class=&quot;token parameter variable&quot;&gt;-i&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-bn&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-ci&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-sr&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;these options come from the &lt;code&gt;indent_size&lt;/code&gt;, &lt;code&gt;binary_next_line&lt;/code&gt;, &lt;code&gt;switch_case_indent&lt;/code&gt; and &lt;code&gt;space_redirects&lt;/code&gt; Editorconfig properties in the &lt;code&gt;[[bash]]&lt;/code&gt; section&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;between-a-rock-and-a-hard-place&quot;&gt;Between a rock and a hard place&lt;/h2&gt;
&lt;p&gt;As mentioned in the previous section, the Bash language server&#39;s approach takes its cue from the &lt;a href=&quot;https://github.com/mvdan/sh/blob/master/cmd/shfmt/shfmt.1.scd#description&quot;&gt;equivalent approach&lt;/a&gt; of &lt;code&gt;shfmt&lt;/code&gt; itself:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;quot;If any EditorConfig files are found, they will be used to apply formatting options. If any parser or printer flags are given to the tool, no EditorConfig formatting options will be used. A default like -i=0 can be used for this purpose.&amp;quot;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In other words, &lt;em&gt;either&lt;/em&gt; Editorconfig (only), or no Editorconfig.&lt;/p&gt;
&lt;p&gt;But to effect this, Bash language server invokes &lt;code&gt;shfmt&lt;/code&gt; with explicit options for &lt;em&gt;both&lt;/em&gt; cases (where there&#39;s a match, and where there isn&#39;t). This can be seen directly in the two example invocations above.&lt;/p&gt;
&lt;p&gt;I want to manage my formatting in my &lt;code&gt;.editorconfig&lt;/code&gt; file(s), but if I want the Editorconfig settings to be honoured when formatting my shell scripts, I need to give them names that I can match with the Editorconfig section name globs, for example by giving them extensions. I don&#39;t want to do that.&lt;/p&gt;
&lt;p&gt;I want the Bash language server to invoke &lt;code&gt;shfmt&lt;/code&gt; without any &lt;a href=&quot;https://github.com/mvdan/sh/blob/master/cmd/shfmt/shfmt.1.scd#parser-flags&quot;&gt;parser&lt;/a&gt; or &lt;a href=&quot;https://github.com/mvdan/sh/blob/master/cmd/shfmt/shfmt.1.scd#printer-flags&quot;&gt;printer&lt;/a&gt; options so that &lt;code&gt;shfmt&lt;/code&gt; itself, with its special &lt;code&gt;[[bash]]&lt;/code&gt; processing ability (rather than the Bash language server with the standard &lt;code&gt;editorconfig&lt;/code&gt; package) parses the Editorconfig settings. This would effectively bypass any Bash language server logic for &lt;code&gt;shfmt&lt;/code&gt; and just let &lt;code&gt;shfmt&lt;/code&gt; do its thing, with (or without) an &lt;code&gt;.editorconfig&lt;/code&gt; file present.&lt;/p&gt;
&lt;h2 id=&quot;forcing-the-effect&quot;&gt;Forcing the effect&lt;/h2&gt;
&lt;p&gt;To begin with, I debugged what was going on (see the &lt;a href=&quot;https://qmacro.org/blog/posts/2025/09/01/auto-formatting-extensionless-bash-scripts-in-neovim/#useful-debugging-approaches&quot;&gt;Useful debugging approaches&lt;/a&gt; section) and found that the options for &lt;code&gt;shfmt&lt;/code&gt; were being determined and marshalled in &lt;a href=&quot;https://github.com/bash-lsp/bash-language-server/blob/6e419dad6fb07bcf269101c8ffe0d47fd11b14db/server/src/shfmt/index.ts&quot;&gt;server/src/shfmt/index.ts&lt;/a&gt; (yay for open source!):&lt;/p&gt;
&lt;pre class=&quot;language-typescript&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-typescript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;runShfmt&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
  document&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; TextDocument&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  formatOptions&lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;LSP&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;FormattingOptions &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  shfmtConfig&lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Record&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;boolean&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; args &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getShfmtArguments&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;uri&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; formatOptions&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; shfmtConfig&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; proc &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token builtin&quot;&gt;Promise&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;resolve&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; reject&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; proc &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;spawn&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;executablePath&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;args&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;-&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; cwd&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;cwd &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Using brute force&lt;a href=&quot;https://qmacro.org/blog/posts/2025/09/01/auto-formatting-extensionless-bash-scripts-in-neovim/#footnotes&quot;&gt;&lt;sup&gt;4&lt;/sup&gt;&lt;/a&gt; I simply truncated &lt;code&gt;args&lt;/code&gt; to &lt;code&gt;[]&lt;/code&gt;, removing the call to &lt;code&gt;this.getShfmtArguments&lt;/code&gt;, and everything worked as planned - &lt;code&gt;shfmt&lt;/code&gt; was called without any options at all, with the result that &lt;code&gt;shfmt&lt;/code&gt; did the right thing, finding and using the appropriate Editorconfig settings, for all Bash files.&lt;/p&gt;
&lt;p&gt;I didn&#39;t want to have to make this modification each time I installed the Bash language server, nor do I think it appropriate to suggest as a modification upstream. So I decided to wrap the call to &lt;code&gt;shfmt&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&quot;wrapping-shfmt-to-strip-off-the-options&quot;&gt;Wrapping shfmt to strip off the options&lt;/h3&gt;
&lt;p&gt;The Bash language server &lt;a href=&quot;https://github.com/bash-lsp/bash-language-server/blob/main/server/src/config.ts&quot;&gt;configuration&lt;/a&gt; includes a section specifically for &lt;code&gt;shfmt&lt;/code&gt; (see &lt;a href=&quot;https://qmacro.org/blog/posts/2025/09/01/auto-formatting-extensionless-bash-scripts-in-neovim/#appendix-b-configuration-for-bash-language-server&quot;&gt;Appendix B&lt;/a&gt;). I can use the &lt;code&gt;shfmt.path&lt;/code&gt; configuration option to specify an alternate path for the executable, pointing to a simple shell script that removes all the options passed, except for a couple of generic ones.&lt;/p&gt;
&lt;p&gt;Here&#39;s the script, called &lt;code&gt;shfmt-wrapper&lt;/code&gt;, placed in &lt;code&gt;~/.local/bin/&lt;/code&gt; which is listed first in my &lt;code&gt;PATH&lt;/code&gt; environment variable:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token shebang important&quot;&gt;#!/usr/bin/env bash&lt;/span&gt;

&lt;span class=&quot;token builtin class-name&quot;&gt;declare&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-a&lt;/span&gt; shfmtargs
&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token for-or-select variable&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&lt;span class=&quot;token variable&quot;&gt;$@&lt;/span&gt;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$i&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;--filename&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;* &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$i&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;-&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;then&lt;/span&gt;
    &lt;span class=&quot;token assign-left variable&quot;&gt;shfmtargs&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;&lt;span class=&quot;token variable&quot;&gt;${shfmtargs&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;@&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;}&lt;/span&gt;&quot;&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&lt;span class=&quot;token variable&quot;&gt;$i&lt;/span&gt;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;fi&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;done&lt;/span&gt;
shfmt &lt;span class=&quot;token string&quot;&gt;&quot;&lt;span class=&quot;token variable&quot;&gt;${shfmtargs&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;@&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;}&lt;/span&gt;&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;All it does is take the options passed to it, removes all but the &lt;code&gt;--filename=...&lt;/code&gt; and &lt;code&gt;-&lt;/code&gt; ones, and then calls the actual &lt;code&gt;shfmt&lt;/code&gt; with what&#39;s left.&lt;/p&gt;
&lt;p&gt;And with the &lt;code&gt;shfmt.path&lt;/code&gt; option (see &lt;a href=&quot;https://qmacro.org/blog/posts/2025/09/01/auto-formatting-extensionless-bash-scripts-in-neovim/#appendix-c-neovim-lsp-configuration-for-the-bash-language-server&quot;&gt;Appendix C&lt;/a&gt;) I then told the Bash language server to use this wrapper when invoking &lt;code&gt;shfmt&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Therefore, because no parser or printer flags are ever present in the &lt;code&gt;shfmt&lt;/code&gt; option list, &lt;code&gt;shfmt&lt;/code&gt; will use the Editorconfig configuration, interpreting it using the custom support for &lt;code&gt;[[bash]]&lt;/code&gt; or &lt;code&gt;[[shell]]&lt;/code&gt; sections.&lt;/p&gt;
&lt;p&gt;The result is that this section of my &lt;code&gt;.editorconfig&lt;/code&gt; file is interpreted as I intend:&lt;/p&gt;
&lt;pre class=&quot;language-toml&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-toml&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token table class-name&quot;&gt;bash&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;token key property&quot;&gt;indent_size&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;token key property&quot;&gt;indent_style&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt; space
&lt;span class=&quot;token key property&quot;&gt;switch_case_indent&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;token key property&quot;&gt;binary_next_line&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;token key property&quot;&gt;space_redirects&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and my extensionless Bash script files are formatted appropriately. Not with tabs, and no &lt;code&gt;shfmt&lt;/code&gt;-specific configuration, but as I have described in configuration.&lt;/p&gt;
&lt;p&gt;Great!&lt;/p&gt;
&lt;p&gt;This is of course a bit hacky, but I think it is within the boundaries of &amp;quot;small pieces, loosely joined&amp;quot; and doesn&#39;t require any modification to any non-user-serviceable parts.&lt;/p&gt;
&lt;p&gt;&lt;a name=&quot;useful-debugging-approaches&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;useful-debugging-approaches&quot;&gt;Useful debugging approaches&lt;/h2&gt;
&lt;p&gt;In working out what was going on, I used various tools and settings to help me. Here&#39;s a quick list of those, mostly to remind my future self.&lt;/p&gt;
&lt;h3 id=&quot;the-editorconfig-cli&quot;&gt;The editorconfig CLI&lt;/h3&gt;
&lt;p&gt;The &lt;a href=&quot;https://www.npmjs.com/package/editorconfig&quot;&gt;editorconfig&lt;/a&gt; package, which I installed globally for these investigations with &lt;code&gt;npm i -g editorconfig&lt;/code&gt;, also sports a CLI which can be used to show the &amp;quot;effective configuration&amp;quot;, given a filename. Taking the &lt;code&gt;.editorconfig&lt;/code&gt; file contents in the &lt;a href=&quot;https://qmacro.org/blog/posts/2025/09/01/auto-formatting-extensionless-bash-scripts-in-neovim/#example-of-the-issue&quot;&gt;example of the issue&lt;/a&gt; shown earlier, here&#39;s what is output ...&lt;/p&gt;
&lt;p&gt;for the shell script file named &lt;code&gt;a&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;$ editorconfig a
&lt;span class=&quot;token assign-left variable&quot;&gt;indent_style&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;space
&lt;span class=&quot;token assign-left variable&quot;&gt;indent_size&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;token assign-left variable&quot;&gt;switch_case_indent&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;true
&lt;span class=&quot;token assign-left variable&quot;&gt;binary_next_line&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;true
&lt;span class=&quot;token assign-left variable&quot;&gt;space_redirects&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;true
&lt;span class=&quot;token assign-left variable&quot;&gt;tab_width&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and for the shell script file named &lt;code&gt;fixup&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;$ editorconfig fixup
&lt;span class=&quot;token assign-left variable&quot;&gt;indent_style&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;tab
&lt;span class=&quot;token assign-left variable&quot;&gt;indent_size&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;tab&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Thus I can see first hand what the Bash language server would receive from the &lt;code&gt;editorconfig&lt;/code&gt; module, given a filename and some Editorconfig configuration.&lt;/p&gt;
&lt;h3 id=&quot;language-server-logging&quot;&gt;Language server logging&lt;/h3&gt;
&lt;p&gt;Logs are emitted at various points in the Bash language server&#39;s operation, as I could see from browsing the &lt;a href=&quot;https://github.com/bash-lsp/bash-language-server/tree/main/server/src&quot;&gt;server source code&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For example, the &lt;a href=&quot;https://github.com/bash-lsp/bash-language-server/blob/main/server/src/shfmt/index.ts&quot;&gt;shfmt support&lt;/a&gt; has many logging lines, including this one:&lt;/p&gt;
&lt;pre class=&quot;language-typescript&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-typescript&quot;&gt;logger&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Shfmt: found .editorconfig properties: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;stringify&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    editorconfigProperties&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the &lt;a href=&quot;https://github.com/bash-lsp/bash-language-server/blob/main/server/src/config.ts&quot;&gt;configuration section&lt;/a&gt; I could see that it was probably possible to set my desired logging level with the environment variable &lt;code&gt;BASH_IDE_LOG_LEVEL&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;But it turns out that the idea is that settings can be specified in the LSP configuration, and the setting property &amp;quot;path&amp;quot; is what&#39;s actually shown in the &lt;a href=&quot;https://qmacro.org/blog/posts/2025/09/01/auto-formatting-extensionless-bash-scripts-in-neovim/#appendix-a-mason-info-for-bash-language-server&quot;&gt;Mason info&lt;/a&gt;, starting with &lt;code&gt;bashIde&lt;/code&gt; as the first path section. I didn&#39;t find that in the Bash language server README or configuration section, perhaps I should have known that implicitly, or known to look elsewhere for it.&lt;/p&gt;
&lt;p&gt;Anyway, once I figured that out, I could set my desired level like this (also shown in &lt;a href=&quot;https://qmacro.org/blog/posts/2025/09/01/auto-formatting-extensionless-bash-scripts-in-neovim/appendix-c-neovim-lsp-configuration-for-the-bash-language-server&quot;&gt;Appendix C&lt;/a&gt;):&lt;/p&gt;
&lt;pre class=&quot;language-lua&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-lua&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  cmd &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;bash-language-server&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;start&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  filetypes &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;bash&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;sh&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  settings &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    bashIde &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      logLevel &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;debug&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      shfmt &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        path &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;/home/dj/.local/bin/shfmt-wrapper&#39;&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Where does this log output from the Bash language server show up? Well, now I figured it out, it&#39;s obvious - it&#39;s all collected in Neovim&#39;s general LSP log file at &lt;code&gt;~/.local/state/nvim/lsp.log&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;However, any debug level log output from the Bash language server will only show up there if the general Neovim language server logging level is high enough. Even after adding the &lt;code&gt;logLevel = &#39;debug&#39;&lt;/code&gt; configuration above, nothing showed up ... until I realised I had this in my &lt;code&gt;~/.config/nvim/init.lua&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-lua&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-lua&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;-- LSP logging&lt;/span&gt;
vim&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;lsp&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;set_log_level&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;WARN&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Setting this to &lt;code&gt;DEBUG&lt;/code&gt;, either by changing the value in the &lt;code&gt;init.lua&lt;/code&gt; file itself, or simply on the fly with:&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;:lua vim.lsp.set_log_level&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;DEBUG&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;does the trick, and output like this appears in the &lt;code&gt;lsp.log&lt;/code&gt; file:&lt;/p&gt;
&lt;pre class=&quot;language-log&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-log&quot;&gt;&lt;span class=&quot;token level debug keyword&quot;&gt;DEBUG&lt;/span&gt; &lt;span class=&quot;token property&quot;&gt;Shfmt:&lt;/span&gt; found &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;editorconfig properties&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;indent_style&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;tab&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;indent_size&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;tab&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;}&lt;/span&gt;&#39;
&lt;span class=&quot;token level debug keyword&quot;&gt;DEBUG&lt;/span&gt; &lt;span class=&quot;token property&quot;&gt;Shfmt:&lt;/span&gt; no shfmt properties found in &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;editorconfig &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; using language server shfmt config&quot;
&lt;span class=&quot;token level debug keyword&quot;&gt;DEBUG&lt;/span&gt; &lt;span class=&quot;token property&quot;&gt;Shfmt:&lt;/span&gt; running &lt;span class=&quot;token string&quot;&gt;&quot;/home/dj/.local/bin/shfmt-wrapper --filename=/tmp/formatting/fixup -i=0 -ln=auto&quot;&lt;/span&gt;&#39;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a name=&quot;appendix-a-mason-info-for-the-bash-language-server&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;appendix-a-mason-info-for-the-bash-language-server&quot;&gt;Appendix A - Mason info for the Bash language server&lt;/h2&gt;
&lt;pre class=&quot;language-text&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;Language Filter: press &lt;C-f&gt; to apply filter

Installed (1)
  ◍ bash-language-server
    A language server for Bash.

    installed version 5.6.0
    installed purl    pkg:npm/bash-language-server@5.6.0
    homepage          https://github.com/bash-lsp/bash-language-server
    languages         Bash, Csh, Ksh, Sh, Zsh
    categories        LSP
    executables       bash-language-server

    ↓ LSP server configuration schema (press enter to collapse)
      This is a read-only overview of the settings this server accepts.
      Note that some settings might not apply to neovim.

      → bashIde.backgroundAnalysisMaxFiles    default: 500
      → bashIde.enableSourceErrorDiagnostics  default: false
      → bashIde.explainshellEndpoint          default: &quot;&quot;
      → bashIde.globPattern                   default: &quot;**/*@(.sh|.inc|.bash|.command)&quot;
      → bashIde.includeAllWorkspaceSymbols    default: false
      → bashIde.logLevel                      default: &quot;info&quot;
      → bashIde.shellcheckArguments           default: &quot;&quot;
      → bashIde.shellcheckPath                default: &quot;shellcheck&quot;
      → bashIde.shfmt.binaryNextLine          default: false
      → bashIde.shfmt.caseIndent              default: false
      → bashIde.shfmt.funcNextLine            default: false
      → bashIde.shfmt.ignoreEditorconfig      default: false
      → bashIde.shfmt.keepPadding             default: false
      → bashIde.shfmt.languageDialect         default: &quot;auto&quot;
      → bashIde.shfmt.path                    default: &quot;shfmt&quot;
      → bashIde.shfmt.simplifyCode            default: false
      → bashIde.shfmt.spaceRedirects          default: false&lt;/C-f&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a name=&quot;appendix-b-configuation-for-bash-language-server&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;appendix-b-configuration-for-bash-language-server&quot;&gt;Appendix B - Configuration for Bash language server&lt;/h2&gt;
&lt;pre class=&quot;language-javascript&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; rawConfig &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;backgroundAnalysisMaxFiles&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;toNumber&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;process&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;env&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;BACKGROUND_ANALYSIS_MAX_FILES&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;enableSourceErrorDiagnostics&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;toBoolean&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;process&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;env&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;ENABLE_SOURCE_ERROR_DIAGNOSTICS&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;explainshellEndpoint&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; process&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;env&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;EXPLAINSHELL_ENDPOINT&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;globPattern&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; process&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;env&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;GLOB_PATTERN&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;includeAllWorkspaceSymbols&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;toBoolean&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;process&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;env&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;INCLUDE_ALL_WORKSPACE_SYMBOLS&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;logLevel&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; process&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;env&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;LOG_LEVEL_ENV_VAR&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;shellcheckArguments&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; process&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;env&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;SHELLCHECK_ARGUMENTS&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;shellcheckPath&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; process&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;env&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;SHELLCHECK_PATH&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;shfmt&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token literal-property property&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; process&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;env&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;SHFMT_PATH&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token literal-property property&quot;&gt;ignoreEditorconfig&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;toBoolean&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;process&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;env&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;SHFMT_IGNORE_EDITORCONFIG&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token literal-property property&quot;&gt;languageDialect&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; process&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;env&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;SHFMT_LANGUAGE_DIALECT&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token literal-property property&quot;&gt;binaryNextLine&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;toBoolean&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;process&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;env&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;SHFMT_BINARY_NEXT_LINE&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token literal-property property&quot;&gt;caseIndent&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;toBoolean&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;process&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;env&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;SHFMT_CASE_INDENT&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token literal-property property&quot;&gt;funcNextLine&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;toBoolean&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;process&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;env&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;SHFMT_FUNC_NEXT_LINE&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token literal-property property&quot;&gt;keepPadding&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;toBoolean&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;process&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;env&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;SHFMT_KEEP_PADDING&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token literal-property property&quot;&gt;simplifyCode&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;toBoolean&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;process&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;env&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;SHFMT_SIMPLIFY_CODE&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token literal-property property&quot;&gt;spaceRedirects&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;toBoolean&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;process&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;env&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;SHFMT_SPACE_REDIRECTS&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a name=&quot;appendix-c-neovim-lsp-configuration-for-the-bash-language-server&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;appendix-c-neovim-lsp-configuration-for-the-bash-language-server&quot;&gt;Appendix C - Neovim LSP configuration for the Bash language server&lt;/h2&gt;
&lt;p&gt;To add the Bash language server to &lt;a href=&quot;https://qmacro.org/blog/posts/2025/06/10/a-modern-and-clean-neovim-setup-for-cap-node.js-configuration-and-diagnostics/&quot;&gt;my Neovim 0.11+ setup&lt;/a&gt; and configure it, all I needed was to create a new configuration file &lt;code&gt;~/.config/nvim/lsp/bash.lua&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-lua&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-lua&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  cmd &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;bash-language-server&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;start&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  filetypes &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;bash&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;sh&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  settings &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    bashIde &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      logLevel &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;debug&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      shfmt &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        path &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;/home/dj/.local/bin/shfmt-wrapper&#39;&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(The settings will be explained in the course of this post.)&lt;/p&gt;
&lt;p&gt;Then it was just a matter of enabling the server in the list in my main &lt;code&gt;~/config/nvim/init.lua&lt;/code&gt; file:&lt;/p&gt;
&lt;pre class=&quot;language-lua&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-lua&quot;&gt;vim&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;lsp&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;enable&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token string&quot;&gt;&#39;javascript&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token string&quot;&gt;&#39;cds&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token string&quot;&gt;&#39;markdown&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token string&quot;&gt;&#39;dockerfile&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token string&quot;&gt;&#39;lua&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token string&quot;&gt;&#39;bash&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;-- here&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a name=&quot;footnotes&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;footnotes&quot;&gt;Footnotes&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;as well as &lt;code&gt;shellcheck&lt;/code&gt; which &lt;a href=&quot;https://github.com/bash-lsp/bash-language-server?tab=readme-ov-file#dependencies&quot;&gt;is also supported&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;version &lt;a href=&quot;https://github.com/mvdan/sh/releases/tag/v3.8.0&quot;&gt;3.8.0&lt;/a&gt; or higher, as that is when support for Editorconfig sections such as &lt;code&gt;[[shell]]&lt;/code&gt; &lt;a href=&quot;https://github.com/mvdan/sh/issues/664&quot;&gt;was introduced&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/qmacro/dotfiles/blob/57c7f38e64ef1f59b9c41f6155b0fa350eb030b7/config/nvim/init.lua#L14-L23&quot;&gt;configured&lt;/a&gt; through a &lt;code&gt;BufWritePre&lt;/code&gt; event based call to &lt;code&gt;vim.lsp.buf.format&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;it was actually in the &lt;a href=&quot;https://github.com/mason-org/mason.nvim&quot;&gt;Mason&lt;/a&gt; installed and managed location at &lt;code&gt;~/.local/share/nvim/mason/packages/bash-language-server/node_modules/bash-language-server/out/shfmt/index.js&lt;/code&gt;, i.e. the transpiled JavaScript equivalent file&lt;/li&gt;
&lt;/ol&gt;
</content>
  </entry>
  <entry>
    <title>Neovim configuration for file and module navigation in CDS models</title>
    <link href="https://qmacro.org/blog/posts/2025/08/06/neovim-configuration-for-file-and-module-navigation-in-cds-models/" />
    <updated>2025-08-06T00:00:00Z</updated>
    <id>https://qmacro.org/blog/posts/2025/08/06/neovim-configuration-for-file-and-module-navigation-in-cds-models/</id>
    <content type="html">&lt;h2 id=&quot;cds-modelling-across-files-and-modules&quot;&gt;CDS modelling across files and modules&lt;/h2&gt;
&lt;p&gt;In the context of CDS models, one of the best practices is to embrace &lt;a href=&quot;https://cap.cloud.sap/docs/about/best-practices#aspects&quot;&gt;aspects&lt;/a&gt; and &amp;quot;factor out separate concerns into separate files&amp;quot;. In addition to files the CDS compiler supports Node.js packages (modules).&lt;/p&gt;
&lt;p&gt;An example of both can be found in the &lt;a href=&quot;https://cap.cloud.sap/docs/tools/cds-cli#sample&quot;&gt;sample&lt;/a&gt; facet. Let&#39;s create a project based on this sample facet and explore.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;cd&lt;/span&gt; /tmp &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; cds init &lt;span class=&quot;token parameter variable&quot;&gt;--add&lt;/span&gt; sample sample &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;cd&lt;/span&gt; sample &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; tree &lt;span class=&quot;token parameter variable&quot;&gt;-L&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;
creating new CAP project &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; ./sample

adding nodejs
adding sample

successfully created project – &lt;span class=&quot;token builtin class-name&quot;&gt;continue&lt;/span&gt; with &lt;span class=&quot;token builtin class-name&quot;&gt;cd&lt;/span&gt; sample

&lt;span class=&quot;token function&quot;&gt;find&lt;/span&gt; samples on https://github.com/SAP-samples/cloud-cap-samples
learn about next steps at https://cap.cloud.sap
&lt;span class=&quot;token builtin class-name&quot;&gt;.&lt;/span&gt;
├── README.md
├── app
│   ├── _i18n
│   │   ├── i18n.properties
│   │   └── i18n_de.properties
│   ├── admin-books
│   │   ├── fiori-service.cds
│   │   └── webapp
│   ├── appconfig
│   │   └── fioriSandboxConfig.json
│   ├── browse
│   │   ├── fiori-service.cds
│   │   └── webapp
│   ├── common.cds
│   ├── index.html
│   └── services.cds
├── db
│   ├── data
│   │   ├── sap.capire.bookshop-Authors.csv
│   │   ├── sap.capire.bookshop-Books.csv
│   │   ├── sap.capire.bookshop-Books_texts.csv
│   │   └── sap.capire.bookshop-Genres.csv
│   └── schema.cds
├── eslint.config.mjs
├── package.json
└── srv
    ├── admin-service.cds
    ├── admin-service.js
    ├── cat-service.cds
    └── cat-service.js

&lt;span class=&quot;token number&quot;&gt;11&lt;/span&gt; directories, &lt;span class=&quot;token number&quot;&gt;20&lt;/span&gt; files&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;examining-the-using-references&quot;&gt;Examining the &#39;using&#39; references&lt;/h3&gt;
&lt;p&gt;In &lt;code&gt;app/admin-books/fiori-service.cds&lt;/code&gt; there&#39;s this:&lt;/p&gt;
&lt;pre class=&quot;language-cds&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-cds&quot;&gt;&lt;span class=&quot;token using keyword&quot;&gt;using&lt;/span&gt; { AdminService } &lt;span class=&quot;token from keyword&quot;&gt;from&lt;/span&gt; &#39;../../srv/admin-&lt;span class=&quot;token keyword&quot;&gt;service&lt;/span&gt;.cds&#39;;
&lt;span class=&quot;token using keyword&quot;&gt;using&lt;/span&gt; { sap.capire.bookshop } &lt;span class=&quot;token from keyword&quot;&gt;from&lt;/span&gt; &#39;../../db/schema&#39;;
...&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So &lt;code&gt;AdminService&lt;/code&gt; is being imported from &lt;code&gt;../../srv/admin-service.cds&lt;/code&gt;, which looks like this:&lt;/p&gt;
&lt;pre class=&quot;language-cds&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-cds&quot;&gt;&lt;span class=&quot;token using keyword&quot;&gt;using&lt;/span&gt; { sap.capire.bookshop &lt;span class=&quot;token cqlkeywords keyword&quot;&gt;as&lt;/span&gt; my } &lt;span class=&quot;token from keyword&quot;&gt;from&lt;/span&gt; &#39;../db/schema&#39;;
&lt;span class=&quot;token keyword&quot;&gt;service&lt;/span&gt; AdminService &lt;span class=&quot;token annotation important&quot;&gt;@(requires:&#39;admin&#39;)&lt;/span&gt; {
  &lt;span class=&quot;token keyword&quot;&gt;entity&lt;/span&gt; Books &lt;span class=&quot;token cqlkeywords keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;token cdl-keyword keyword&quot;&gt;projection&lt;/span&gt; &lt;span class=&quot;token cqlkeywords keyword&quot;&gt;on&lt;/span&gt; my.Books;
  &lt;span class=&quot;token keyword&quot;&gt;entity&lt;/span&gt; Authors &lt;span class=&quot;token cqlkeywords keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;token cdl-keyword keyword&quot;&gt;projection&lt;/span&gt; &lt;span class=&quot;token cqlkeywords keyword&quot;&gt;on&lt;/span&gt; my.Authors;
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In turn, the entities here are from the &lt;code&gt;sap.capire.bookshop&lt;/code&gt; namespace which is imported from &lt;code&gt;../db/schema&lt;/code&gt;, which looks like this:&lt;/p&gt;
&lt;pre class=&quot;language-cds&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-cds&quot;&gt;&lt;span class=&quot;token using keyword&quot;&gt;using&lt;/span&gt; { Currency, managed, sap } &lt;span class=&quot;token from keyword&quot;&gt;from&lt;/span&gt; &#39;@sap/cds/common&#39;;
&lt;span class=&quot;token keyword&quot;&gt;namespace&lt;/span&gt; sap.capire.bookshop;

&lt;span class=&quot;token keyword&quot;&gt;entity&lt;/span&gt; Books : managed {
   ...
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And &lt;code&gt;Currency&lt;/code&gt;, &lt;code&gt;managed&lt;/code&gt; and &lt;code&gt;sap&lt;/code&gt; are imported from the module &lt;code&gt;@sap/cds/common&lt;/code&gt;, a file (&lt;code&gt;common.cds&lt;/code&gt;) within the &lt;code&gt;@sap/cds&lt;/code&gt; module, which (at this point) is available in the globally installed &lt;code&gt;@sap/cds-dk&lt;/code&gt; module location (as we haven&#39;t performed a project-local &lt;code&gt;npm install&lt;/code&gt; yet), and looks like this (heavily redacted):&lt;/p&gt;
&lt;pre class=&quot;language-cds&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-cds&quot;&gt;&lt;span class=&quot;token cqlkeywords keyword&quot;&gt;type&lt;/span&gt; Currency : &lt;span class=&quot;token association-composition keyword&quot;&gt;Association to sap&lt;/span&gt;.common.Currencies;
...
&lt;span class=&quot;token keyword&quot;&gt;aspect&lt;/span&gt; managed {
  createdAt  : &lt;span class=&quot;token type builtin&quot;&gt;Timestamp &lt;/span&gt;&lt;span class=&quot;token annotation important&quot;&gt;@cds.on.insert&lt;/span&gt; : $now;
  createdBy  : User      &lt;span class=&quot;token annotation important&quot;&gt;@cds.on.insert&lt;/span&gt; : $user;
  modifiedAt : &lt;span class=&quot;token type builtin&quot;&gt;Timestamp &lt;/span&gt;&lt;span class=&quot;token annotation important&quot;&gt;@cds.on.insert&lt;/span&gt; : $now  &lt;span class=&quot;token annotation important&quot;&gt;@cds.on.update&lt;/span&gt; : $now;
  modifiedBy : User      &lt;span class=&quot;token annotation important&quot;&gt;@cds.on.insert&lt;/span&gt; : $user &lt;span class=&quot;token annotation important&quot;&gt;@cds.on.update&lt;/span&gt; : $user;
}
...&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;visualising-the-navigation-path&quot;&gt;Visualising the navigation path&lt;/h3&gt;
&lt;p&gt;Here&#39;s what these relations (and navigations) look like in &amp;quot;diagram&amp;quot; form (thanks to &lt;a href=&quot;https://asciiflow.com/#/&quot;&gt;ASCIIFlow&lt;/a&gt;):&lt;/p&gt;
&lt;pre class=&quot;language-text&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;+-----------------------------+
|app/admin/fiori-service.cds  |
+-----------------------------+
|using ... from               |
|&#39;../../srv/admin-service.cds&#39;|
|             |              1|
+-------------|---------------+   +-----------------------------+
              +-------------------|srv/admin-service.cds        |
                                  +-----------------------------+
                                  |using ... from               |
                                  |&#39;../db/schema.cds&#39;           |
                                  |            |               2|
+-----------------------------+   +------------|----------------+
|db/schema.cds                |----------------+
+-----------------------------+
|using ... from               |
|&#39;@sap/cds/common&#39;            |
|             |              3|
+-------------|---------------+   +-----------------------------+
              +-------------------|@sap/cds/common              |
                                  +-----------------------------+
                                  |type Currency ...            |
                                  |aspect managed { ... }       |
                                  |                            4|
                                  +-----------------------------+&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;As mentioned earlier, the &lt;code&gt;@sap/cds/common&lt;/code&gt; resource is a file called &lt;code&gt;common.cds&lt;/code&gt; within the &lt;code&gt;@sap/cds&lt;/code&gt; module.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;What&#39;s notable is that these relations are expressed differently each time:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the first points to &lt;code&gt;../../srv/admin-service.cds&lt;/code&gt; which has an explicit &lt;code&gt;.cds&lt;/code&gt; extension&lt;/li&gt;
&lt;li&gt;the second points to &lt;code&gt;../db/schema&lt;/code&gt; which has no extension&lt;/li&gt;
&lt;li&gt;the third points to a Node.js module based resource &lt;code&gt;@sap/cds/common&lt;/code&gt;, again with no extension specified&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here&#39;s a quick demo of how that navigation path can be followed in VS Code, with the &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=SAPSE.vscode-cds&quot;&gt;SAP CDS Language Support&lt;/a&gt; extension:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://qmacro.org/images/2025/08/vscode-nav.gif&quot; alt=&quot;navigation in VS Code&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;making-cds-model-navigation-work-in-neovim&quot;&gt;Making CDS model navigation work in Neovim&lt;/h2&gt;
&lt;p&gt;With the &lt;code&gt;@sap/cds-lsp&lt;/code&gt; language server in play, plus the Tree-sitter queries for CDS, I have a good experience in Neovim already (see &lt;a href=&quot;https://qmacro.org/blog/posts/2025/06/10/a-modern-and-clean-neovim-setup-for-cap-node.js-configuration-and-diagnostics/&quot;&gt;A modern and clean Neovim setup for CAP Node.js - configuration and diagnostics&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;However, using the standard &lt;a href=&quot;https://neovim.io/doc/user/editing.html#gf&quot;&gt;gf&lt;/a&gt; mechanism left me wanting, due to the types of navigation target and the vagaries of how they are expressed. With a little configuration though, (which is still experimental at this stage, as I&#39;m still learning) I&#39;ve improved the situation.&lt;/p&gt;
&lt;p&gt;I added some &lt;a href=&quot;https://neovim.io/doc/user/usr_41.html#_writing-a-filetype-plugin&quot;&gt;ftplugin&lt;/a&gt; configuration specific to CDS files, in an &lt;code&gt;after/ftplugin/cds.lua&lt;/code&gt; file within my Neovim config, and it looks like this:&lt;/p&gt;
&lt;pre class=&quot;language-lua&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-lua&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;-- Settings to be able to navigate to cds resources in Node.js modules&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;-- Given a path p, add it to the &#39;path&#39; if it exists&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;local&lt;/span&gt; addpath &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;p&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; vim&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;uv&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;fs_stat&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;p&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;then&lt;/span&gt; vim&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;opt&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;path&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;p&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;-- Auto add .cds extension to files if necessary when nav with gf&lt;/span&gt;
vim&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;opt&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;suffixesadd &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;.cds&#39;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;-- Ensure that the literal @ symbol is treated as part of a filename&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;-- (required as the CAP module names are in the @sap namespace)&lt;/span&gt;
vim&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;opt&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;isfname&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;append &lt;span class=&quot;token string&quot;&gt;&#39;@-@&#39;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;-- The standard module location&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;local&lt;/span&gt; moduledir &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;/node_modules&#39;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;-- If a project-local npm install has been executed then projpath&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;-- will reflect the project-local node_modules dir&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;local&lt;/span&gt; projpath &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; vim&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;fs&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;package.json&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;..&lt;/span&gt; moduledir

&lt;span class=&quot;token comment&quot;&gt;-- We can also add the CAP global based node_modules dir,&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;-- based on the location of the &#39;cds&#39; executable&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;local&lt;/span&gt; cdsdkpath &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; vim&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;fs&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;dirname&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;vim&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;fn&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;exepath&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;cds&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;..&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;/../lib/node_modules/@sap/cds-dk&#39;&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;..&lt;/span&gt; moduledir

&lt;span class=&quot;token comment&quot;&gt;-- Add them if they exist&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;addpath&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;projpath&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;addpath&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;cdsdkpath&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here&#39;s a quick summary:&lt;/p&gt;
&lt;p&gt;I have a simple function &lt;code&gt;addpath&lt;/code&gt; which will add a (path) value to &lt;code&gt;path&lt;/code&gt; option, which the help describes as &amp;quot;a list of directories which will be searched when using &lt;code&gt;gf&lt;/code&gt; ... and other commands&amp;quot;. The function uses &lt;a href=&quot;https://neovim.io/doc/user/lua.html#vim.fs.exists()&quot;&gt;uv.fs_stat&lt;/a&gt; to ensure the directory actually exists before adding it.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;suffixesadd&lt;/code&gt; option (via &lt;a href=&quot;https://neovim.io/doc/user/options.html#&#39;suffixesadd&#39;&quot;&gt;vim.opt.suffixesadd&lt;/a&gt;) is also related to the use of &lt;code&gt;gf&lt;/code&gt; and is a &amp;quot;comma-separated list of suffixes, which are used when searching for a file for the &lt;code&gt;gf&lt;/code&gt;, &lt;code&gt;[I&lt;/code&gt;, etc. commands&amp;quot;. So here I add &lt;code&gt;.cds&lt;/code&gt; to this option for the case where an extension isn&#39;t given - like in this case:&lt;/p&gt;
&lt;pre class=&quot;language-cds&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-cds&quot;&gt;&lt;span class=&quot;token using keyword&quot;&gt;using&lt;/span&gt; { sap.capire.bookshop &lt;span class=&quot;token cqlkeywords keyword&quot;&gt;as&lt;/span&gt; my } &lt;span class=&quot;token from keyword&quot;&gt;from&lt;/span&gt; &#39;../db/schema&#39;;&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;The extension is omitted here as a sort of CAP best practice, and could in fact be &lt;code&gt;.csn&lt;/code&gt;, the compiled machine-readable equivalent of CDL (the human-readable language used in CDS model files). But I&#39;ll cross that bridge when I come to it.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;That&#39;s it with regards to handling navigation to other CDS model files. But navigation to Node.js modules requires a bit more fettling.&lt;/p&gt;
&lt;p&gt;The CAP modules are all in the &lt;code&gt;sap&lt;/code&gt; namespace. Namespaces, or &lt;a href=&quot;https://docs.npmjs.com/about-scopes&quot;&gt;scopes&lt;/a&gt;, are prefixed with the &lt;code&gt;@&lt;/code&gt; symbol (as in &lt;code&gt;@sap/cds&lt;/code&gt;, for example). When modules are installed, in the &lt;code&gt;node_modules/&lt;/code&gt; directory, the &lt;code&gt;@&lt;/code&gt;-prefixed namespace forms part of the directory structure. So in this &lt;code&gt;sample&lt;/code&gt; project, after running &lt;code&gt;npm install&lt;/code&gt;, here&#39;s where &lt;code&gt;@sap/cds/common&lt;/code&gt; is to be found:&lt;/p&gt;
&lt;pre class=&quot;language-text&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;node_modules/
├── @cap-js
│   ├── cds-types
│   │   ├── ...
│   │   └── scripts
│   ├── db-service
│   │   ├── ...
│   │   └── package.json
│   └── sqlite
│       ├── ...
│       └── package.json
└── @sap
    └── cds
        ├── CHANGELOG.md
        ├── LICENSE
        ├── README.md
        ├── _i18n
        ├── app
        ├── bin
  ---&gt;  ├── common.cds
        ├── eslint.config.mjs
        ├── lib
        ├── libx
        ├── package.json
        ├── server.js
        ├── srv
        └── tasks&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That means I need to add the literal &lt;code&gt;@&lt;/code&gt; symbol to the &lt;a href=&quot;https://neovim.io/doc/user/options.html#&#39;isfname&#39;&quot;&gt;isfname&lt;/a&gt; option, which denotes the characters included in filenames. If we look at the default value for &lt;code&gt;isfname&lt;/code&gt; (with &lt;code&gt;:set isfname?&lt;/code&gt;) we see this:&lt;/p&gt;
&lt;pre class=&quot;language-text&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;@,48-57,/,.,-,_,+,,,#,$,%,~,=&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But &lt;code&gt;@&lt;/code&gt; here represents &amp;quot;alpha characters&amp;quot;, and to have the actual &lt;code&gt;@&lt;/code&gt; symbol included, one needs to add &lt;code&gt;@-@&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Once that is done, it&#39;s just a question of determining:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the CAP Node.js project&#39;s root directory (with &lt;code&gt;vim.fs.root(0, &#39;package.json&#39;)&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;the location of the globally installed &lt;code&gt;@sap/cds-dk&lt;/code&gt; module, based on where the &lt;code&gt;cds&lt;/code&gt; executable can be found&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Then, &lt;code&gt;/node_modules&lt;/code&gt; is appended to each, and they&#39;re both passed to the &lt;code&gt;addpath&lt;/code&gt; function defined earlier.&lt;/p&gt;
&lt;p&gt;Once either or both these paths are in the &lt;code&gt;path&lt;/code&gt; option (depending on whether they exist or not), &lt;code&gt;gf&lt;/code&gt; based navigation can proceed successfully!&lt;/p&gt;
&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;/h2&gt;
&lt;p&gt;This was a quick configuration hack in an area of Neovim (well, Vim, I guess) that I hadn&#39;t previously much experience in. So it may need some more tweaking. But for now, it works well, as shown here:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://qmacro.org/images/2025/08/neovim-nav.gif&quot; alt=&quot;navigation in Neovim&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In VS Code each newly navigated-to resource was opened in a separate tab by default. In Neovim they&#39;re opened in the same buffer, so to return to the previous resource in the &amp;quot;jump list&amp;quot; one can use &lt;code&gt;ctrl-o&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;see-also&quot;&gt;See also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://qmacro.org/blog/posts/2025/06/10/a-modern-and-clean-neovim-setup-for-cap-node.js-configuration-and-diagnostics/&quot;&gt;A modern and clean Neovim setup for CAP Node.js - configuration and diagnostics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://qmacro.org/blog/posts/2025/08/04/excluding-specific-diagnostics-in-neovim/&quot;&gt;Excluding specific diagnostics in Neovim&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Excluding specific diagnostics in Neovim</title>
    <link href="https://qmacro.org/blog/posts/2025/08/04/excluding-specific-diagnostics-in-neovim/" />
    <updated>2025-08-04T00:00:00Z</updated>
    <id>https://qmacro.org/blog/posts/2025/08/04/excluding-specific-diagnostics-in-neovim/</id>
    <content type="html">&lt;p&gt;Note: I&#39;m still learning (a) Lua, (b) the API surface of Neovim and (c) how the different core components interact and work together, so this may not be the best solution, but it works for me and I&#39;ve learned a lot digging in and putting it together.&lt;/p&gt;
&lt;p&gt;I recently revisited my Neovim config, with a view to updating and simplifying it with the advent of release 0.11. I covered some of this in my last Neovim related post &lt;a href=&quot;https://qmacro.org/blog/posts/2025/06/10/a-modern-and-clean-neovim-setup-for-cap-node.js-configuration-and-diagnostics/&quot;&gt;A modern and clean Neovim setup for CAP Node.js - configuration and diagnostics&lt;/a&gt;. In that context, when editing Node.js (JavaScript) files, everything worked nicely with regards to the Language Server and how the diagnostics were surfaced.&lt;/p&gt;
&lt;h2 id=&quot;a-desire-to-filter-out-a-specific-diagnostic&quot;&gt;A desire to filter out a specific diagnostic&lt;/h2&gt;
&lt;p&gt;That is, everything worked nicely ... with one annoyance - the hint level diagnostic &amp;quot;File is a CommonJS module&amp;quot; shown here on line 1:&lt;/p&gt;
&lt;pre class=&quot;language-text&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;H   1 const cds = require(&#39;@sap/cds&#39;)     ■ File is a CommonJS module; it may be converted to an ES module.
    2 module.exports = cds.service.impl(function() {
    3   this.after(&#39;each&#39;, &#39;Books&#39;, book =&gt; {
    4     console.log(book
E   5   })     ■ &#39;,&#39; expected.
    6 })&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;For this sample display I&#39;d temporarily changed my preferred config so that all diagnostics are shown, as virtual text, rather than virtual lines, like this:&lt;/p&gt;
&lt;pre class=&quot;language-text&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;:lua vim.diagnostic.config({virtual_lines = false, virtual_text = true})&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;So I wanted the language server to still publish diagnostics, but for me to be able to filter them.&lt;/p&gt;
&lt;h2 id=&quot;digging-into-the-neovim-docu&quot;&gt;Digging into the Neovim docu&lt;/h2&gt;
&lt;p&gt;In order to achieve this, I spent a pleasant morning today looking through the documentation and getting a better understanding of the API with respect to these features of Neovim (the links are to the documentation sections that are important here):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://neovim.io/doc/user/diagnostic.html&quot;&gt;Diagnostic framework&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://neovim.io/doc/user/lsp.html&quot;&gt;LSP client / framework&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://neovim.io/doc/user/lua.html&quot;&gt;Lua engine&lt;/a&gt; (including the &lt;code&gt;vim&lt;/code&gt; table-related functions)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;the-general-idea&quot;&gt;The general idea&lt;/h2&gt;
&lt;p&gt;Neovim has mechanisms for firing up language servers, connecting to them and making their features and functionality available in buffers. It also has facilities for managing diagnostics and surfacing them in different ways.&lt;/p&gt;
&lt;p&gt;With regards to diagnostics, a simplified flow between Neovim and a language server looks generally like this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Neovim attaches to a language server, sending the contents of the buffer to it for analysis&lt;/li&gt;
&lt;li&gt;The language server publishes hint, information, warning and error level diagnostics (via &lt;a href=&quot;https://code.visualstudio.com/api/language-extensions/programmatic-language-features#provide-diagnostics&quot;&gt;textDocument/publishDiagnostics&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;These diagnostics are stored in Neovim via a call to &lt;code&gt;vim.diagnostic.set&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Depending on the configuration, the diagnostics are displayed appropriately in the buffer&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;While I first went down the path of trying to add a filter in the last part (diagnostic display), I found that this was ultimately the wrong way to go about it, not least because I would have found myself having to override all the various diagnostic display affordances such as signs, virtual text, and so on.&lt;/p&gt;
&lt;p&gt;The key was to interrupt the &lt;em&gt;setting&lt;/em&gt; of the diagnostics so that I could filter some out before they were actually stored, which meant overriding &lt;code&gt;vim.diagnostic.set&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&quot;examining-the-anatomy-of-a-diagnostic&quot;&gt;Examining the anatomy of a diagnostic&lt;/h2&gt;
&lt;p&gt;Understanding what a diagnostic looked like helped me enormously. In the JavaScript sample above, these two diagnostics are displayed:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(H)INT 80001: File is a CommonJS module; it may be converted to an ES module.&lt;/li&gt;
&lt;li&gt;(E)RROR 1005: &#39;,&#39; expected&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We can look at what these are via &lt;code&gt;vim.diagnostic.get&lt;/code&gt;. Invoking this:&lt;/p&gt;
&lt;pre class=&quot;language-text&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;:lua print(vim.diagnostic.get())&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;will just emit a table reference, something like this:&lt;/p&gt;
&lt;pre class=&quot;language-text&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;table: 0x68251cb7dca8&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But we can use the &lt;code&gt;vim.print&lt;/code&gt; function instead:&lt;/p&gt;
&lt;pre class=&quot;language-text&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;:lua vim.print(vim.diagnostic.get())&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;or even simply the &lt;code&gt;=&lt;/code&gt; mechanism:&lt;/p&gt;
&lt;pre class=&quot;language-text&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;:lua =vim.diagnostic.get()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and this will cause a formatted display of the table contents:&lt;/p&gt;
&lt;pre class=&quot;language-lua&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-lua&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    bufnr &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    code &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1005&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    col &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    end_col &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    end_lnum &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    lnum &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    message &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&#39;,&#39; expected.&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    namespace &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    severity &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    source &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;typescript&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    user_data &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      lsp &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        code &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1005&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        message &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&#39;,&#39; expected.&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        range &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;end&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            character &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
            line &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;
          &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          start &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            character &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
            line &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;
          &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        severity &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        source &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;typescript&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        tags &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    bufnr &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    code &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;80001&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    col &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    end_col &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    end_lnum &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    lnum &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    message &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;File is a CommonJS module; it may be converted to an ES module.&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    namespace &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    severity &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    source &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;typescript&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    user_data &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      lsp &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        code &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;80001&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        message &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;File is a CommonJS module; it may be converted to an ES module.&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        range &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;end&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            character &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
            line &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;
          &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          start &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            character &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
            line &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;
          &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        severity &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        source &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;typescript&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        tags &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I decided that I would want to filter on &lt;code&gt;code&lt;/code&gt; and &lt;code&gt;source&lt;/code&gt;; the &lt;code&gt;source&lt;/code&gt; for both diagnostics here is &lt;code&gt;typescript&lt;/code&gt;, and the &lt;code&gt;code&lt;/code&gt; values are actually shown in the virtual text display already (&lt;code&gt;80001&lt;/code&gt; and &lt;code&gt;1005&lt;/code&gt;).&lt;/p&gt;
&lt;h2 id=&quot;how-diagnostics-are-set&quot;&gt;How diagnostics are set&lt;/h2&gt;
&lt;p&gt;Diagnostics find their way from the language server back into Neovim via &lt;code&gt;vim.diagnostic.set&lt;/code&gt; which &lt;a href=&quot;https://neovim.io/doc/user/diagnostic.html#vim.diagnostic.set()&quot;&gt;has this signature&lt;/a&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-text&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;set({namespace}, {bufnr}, {diagnostics}, {opts})&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;I was curious as to what the namespace was; the value is shown as &lt;code&gt;7&lt;/code&gt; for both diagnostic records above; looking at the namespaces with &lt;code&gt;:lua =vim.api.nvim_get_namespaces()&lt;/code&gt; shows this:&lt;/p&gt;
&lt;pre class=&quot;language-lua&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-lua&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  lazy &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;nvim.hlyank&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;nvim.lsp.references&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;nvim.lsp.semantic_tokens&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;nvim.lsp.semantic_tokens:1&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;nvim.lsp.signature_help&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;nvim.terminal.prompt&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;nvim.treesitter.highlighter&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;nvim.vim.lsp.javascript.1.diagnostic.signs&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;nvim.vim.lsp.javascript.1.diagnostic.underline&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;nvim.vim.lsp.javascript.1.diagnostic.virtual_lines&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;vim.lsp.javascript.1&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;which confirms that they&#39;re coming from the language server for TypeScript/JavaScript.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;injecting-a-filter-into-vim-diagnostic-set&quot;&gt;Injecting a filter into vim.diagnostic.set&lt;/h3&gt;
&lt;p&gt;Once I understood this, I was able to create a simple module (it&#39;s my first real foray into custom modules, so I may be doing this suboptimally), in &lt;code&gt;~/.config/nvim/lua/qmacro/diagnostic.lua&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-lua&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-lua&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;local&lt;/span&gt; M &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;local&lt;/span&gt; original_vim_diagnostic_set &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; vim&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;diagnostic&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;set

&lt;span class=&quot;token keyword&quot;&gt;local&lt;/span&gt; filterbuilder &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;filters&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;diagnostic&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; _&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; e &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;pairs&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;filters&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; e&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;code &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; diagnostic&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;code &lt;span class=&quot;token keyword&quot;&gt;and&lt;/span&gt; e&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;source &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; diagnostic&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;source &lt;span class=&quot;token keyword&quot;&gt;then&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;-- if e.reason then&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;--   print(&#39;Filtering out&#39;, diagnostic.source, &#39;/&#39;, diagnostic.code, &#39;diagnostic -&#39;, e.reason)&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;-- end&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;false&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;end&lt;/span&gt;

M&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;exclude &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;filters&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  vim&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;diagnostic&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;set &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ns&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; bufnr&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; diagnostics&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; opts&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;local&lt;/span&gt; filtered_diagnostics &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; vim&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;tbl_filter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;filterbuilder&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;filters&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; diagnostics&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;original_vim_diagnostic_set&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ns&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; bufnr&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; filtered_diagnostics&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; opts&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; M&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;using-the-module&quot;&gt;Using the module&lt;/h3&gt;
&lt;p&gt;Before walking through this, I thought it would help to show how I want to call this, from within my &lt;code&gt;~/.config/nvim/init.lua&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-lua&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-lua&quot;&gt;&lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;qmacro.diagnostic&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;exclude&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; code &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;80001&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; source &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;typescript&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; reason &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;yes I know already!&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In calling the &lt;code&gt;exclude&lt;/code&gt; function in this module, I can pass a table of exclude filters, each of which has a &lt;code&gt;code&lt;/code&gt; and &lt;code&gt;source&lt;/code&gt; field, and an optional &lt;code&gt;reason&lt;/code&gt; field.&lt;/p&gt;
&lt;h3 id=&quot;a-walkthrough-of-the-module&quot;&gt;A walkthrough of the module&lt;/h3&gt;
&lt;p&gt;Now here&#39;s a brief breakdown of the module:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I save the original &lt;code&gt;vim.diagnostic.set&lt;/code&gt; function in &lt;code&gt;original_vim_diagnostic_set&lt;/code&gt; so I can call it later&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;filterbuilder&lt;/code&gt; function takes a table of filters and produces a function (yes, I like higher order functions), specifically a predicate function, that can be then used with &lt;a href=&quot;https://neovim.io/doc/user/lua.html#vim.tbl_filter()&quot;&gt;vim.tbl_filter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;The predicate function produced also has some commented-out logging (that uses the optional &lt;code&gt;reason&lt;/code&gt; field from the filter entry) that I&#39;ll make good once I figure out the best way to log stuff cleanly and in accordance with standard levels&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;With all that preparation, all that I then have to do is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Override the standard &lt;code&gt;vim.diagnostic.set&lt;/code&gt; function with one that injects a call to &lt;code&gt;vim.tbl_filter&lt;/code&gt; to remove any diagnostics that are caught by the exclude filters, before passing through the modified table and the rest of the original arguments to the original &lt;code&gt;vim.diagnostic.set&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And that&#39;s pretty much it.&lt;/p&gt;
&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;/h2&gt;
&lt;p&gt;This works for me so far, and getting to this stage has also taught me some more about Neovim&#39;s Lua API and various components.&lt;/p&gt;
&lt;p&gt;I added this setup to my Neovim configuration with &lt;a href=&quot;https://github.com/qmacro/dotfiles/commit/fb3272c121a5acd7610dc21aceb3a7bb53190257&quot;&gt;this commit to my dotfiles&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Along with the Neovim documentation itself, the following resources helped clarify things in my mind:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://influentcoder.com/posts/nvim-diagnostics/&quot;&gt;Understanding Diagnostics in Neovim&lt;/a&gt; by Guillaume Humbert&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blob42.xyz/blog/neovim-diagnostic-filtering/&quot;&gt;Filtering Neovim Diagnostics&lt;/a&gt; by Chakib Benziane&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.youtube.com/playlist?list=PLep05UYkc6wTyBe7kPjQFWVXTlhKeQejM&quot;&gt;Advent of Neovim&lt;/a&gt; by TJ DeVries&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Thanks!&lt;/p&gt;
&lt;h2 id=&quot;see-also&quot;&gt;See also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://qmacro.org/blog/posts/2025/06/10/a-modern-and-clean-neovim-setup-for-cap-node.js-configuration-and-diagnostics/&quot;&gt;A modern and clean Neovim setup for CAP Node.js - configuration and diagnostics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://qmacro.org/blog/posts/2025/08/06/neovim-configuration-for-file-and-module-navigation-in-cds-models/&quot;&gt;Neovim configuration for file and module navigation in CDS models&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>A reCAP intro to the cds REPL</title>
    <link href="https://qmacro.org/blog/posts/2025/07/21/a-recap-intro-to-the-cds-repl/" />
    <updated>2025-07-21T00:00:00Z</updated>
    <id>https://qmacro.org/blog/posts/2025/07/21/a-recap-intro-to-the-cds-repl/</id>
    <content type="html">&lt;p&gt;At &lt;a href=&quot;https://recap-conf.dev/&quot;&gt;reCAP&lt;/a&gt;, part of &lt;a href=&quot;https://code-connect.dev/&quot;&gt;Code Connect 2025&lt;/a&gt;, I gave a talk on the cds REPL: &amp;quot;Gain a superpower by learning how to harness the cds REPL&amp;quot;. You can watch the recording on the &lt;a href=&quot;https://broadcast.sap.com/replay/250709_recap#&quot;&gt;replay site&lt;/a&gt;; this post is a sort of summary and accompaniment, and an extension to &lt;a href=&quot;https://qmacro.org/blog/posts/2025/03/21/level-up-your-cap-skills-by-learning-how-to-use-the-cds-repl/&quot;&gt;my previous post on the topic&lt;/a&gt;. Read this post while watching the replay.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://qmacro.org/images/2025/07/audimax-shot.png&quot; alt=&quot;A selfie with the audience&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;setting-up&quot;&gt;Setting up&lt;/h2&gt;
&lt;p&gt;Using my &lt;a href=&quot;https://github.com/qmacro/cap-con-img/&quot;&gt;cap-con-img&lt;/a&gt; repo I built an image with the (at the time) latest CAP Node.js release which was 9.1.0 and launched a throwaway (&lt;code&gt;--rm&lt;/code&gt;) container from it (I actually used &lt;code&gt;./buildver latest&lt;/code&gt; which will also work but today will give you a newer version of course):&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; gh repo clone https://github.com/qmacro/cap-con-img &lt;span class=&quot;token punctuation&quot;&gt;&#92;&lt;/span&gt;
  &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;cd&lt;/span&gt; cap-con-img &lt;span class=&quot;token punctuation&quot;&gt;&#92;&lt;/span&gt;
  &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; ./buildbase &lt;span class=&quot;token punctuation&quot;&gt;&#92;&lt;/span&gt;
  &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; ./buildver &lt;span class=&quot;token number&quot;&gt;9.1&lt;/span&gt;.0 &lt;span class=&quot;token punctuation&quot;&gt;&#92;&lt;/span&gt;
  &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;docker&lt;/span&gt; run &lt;span class=&quot;token parameter variable&quot;&gt;--rm&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-it&lt;/span&gt; cap-9.1.0 &lt;span class=&quot;token function&quot;&gt;bash&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;node&lt;/span&gt; ➜ ~
$&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;For orientation, my local shell prompt is &lt;code&gt;;&lt;/code&gt;, the shell prompt inside the container is &lt;code&gt;$&lt;/code&gt; and the cds REPL prompt will be &lt;code&gt;&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Once at the container shell prompt I initialised a new CAP project based on the &lt;code&gt;tiny-sample&lt;/code&gt; facet, installing &lt;code&gt;@sap-cloud-sdk/http-client&lt;/code&gt; too, as I&#39;ll need that towards the end of the talk:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ cds init &lt;span class=&quot;token parameter variable&quot;&gt;--add&lt;/span&gt; tiny-sample tiny-sample &lt;span class=&quot;token punctuation&quot;&gt;&#92;&lt;/span&gt;
  &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;cd&lt;/span&gt; tiny-sample &lt;span class=&quot;token punctuation&quot;&gt;&#92;&lt;/span&gt;
  &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt; @sap-cloud-sdk/http-client&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here&#39;s what the entire project structure (minus the &lt;code&gt;node_modules/&lt;/code&gt; content) looks like:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ tree &lt;span class=&quot;token parameter variable&quot;&gt;-AI&lt;/span&gt; node*
&lt;span class=&quot;token builtin class-name&quot;&gt;.&lt;/span&gt;
├── README.md
├── app
├── db
│   ├── data
│   │   └── my.bookshop-Books.csv
│   └── schema.cds
├── eslint.config.mjs
├── package-lock.json
├── package.json
└── srv
    └── cat-service.cds&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then I started the cds REPL:&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;$ cds repl
Welcome to cds repl &lt;span class=&quot;token function&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;9.1&lt;/span&gt;.0
&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It&#39;s also worth looking at the entire CDS model in source form, as it will provide the background for what I explore.&lt;/p&gt;
&lt;p&gt;At the &amp;quot;db&amp;quot; layer there is &lt;code&gt;db/schema.cds&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-cds&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-cds&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;namespace&lt;/span&gt; my.bookshop;

&lt;span class=&quot;token keyword&quot;&gt;entity&lt;/span&gt; Books {
  &lt;span class=&quot;token cqlkeywords keyword&quot;&gt;key&lt;/span&gt; ID : &lt;span class=&quot;token type builtin&quot;&gt;Integer&lt;/span&gt;;
  title  : &lt;span class=&quot;token type builtin&quot;&gt;String&lt;/span&gt;;
  stock  : &lt;span class=&quot;token type builtin&quot;&gt;Integer&lt;/span&gt;;
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;At the &amp;quot;service&amp;quot; layer there is &lt;code&gt;srv/cat-service.cds&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-cds&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-cds&quot;&gt;&lt;span class=&quot;token using keyword&quot;&gt;using&lt;/span&gt; my.bookshop &lt;span class=&quot;token cqlkeywords keyword&quot;&gt;as&lt;/span&gt; my &lt;span class=&quot;token from keyword&quot;&gt;from&lt;/span&gt; &#39;../db/schema&#39;;

&lt;span class=&quot;token keyword&quot;&gt;service&lt;/span&gt; CatalogService {
    &lt;span class=&quot;token annotation important&quot;&gt;@readonly&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;entity&lt;/span&gt; Books &lt;span class=&quot;token cqlkeywords keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;token cdl-keyword keyword&quot;&gt;projection&lt;/span&gt; &lt;span class=&quot;token cqlkeywords keyword&quot;&gt;on&lt;/span&gt; my.Books;
}&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;getting-help&quot;&gt;Getting help&lt;/h2&gt;
&lt;p&gt;The cds REPL is based on the Node.js REPL and asking for help shows the regular Node.js REPL commands plus &lt;code&gt;.run&lt;/code&gt; and &lt;code&gt;.inspect&lt;/code&gt; which are specific to the cds REPL:&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; .help
.break     Sometimes you get stuck, this gets you out
.clear     Alias &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; .break
.editor    Enter editor mode
.exit      Exit the REPL
.help      Print this &lt;span class=&quot;token builtin class-name&quot;&gt;help&lt;/span&gt; message
.inspect   Sets options &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; util.inspect, e.g. &lt;span class=&quot;token variable&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;`&lt;/span&gt;.inspect .depth&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;.&lt;/span&gt;
.load      Load JS from a &lt;span class=&quot;token function&quot;&gt;file&lt;/span&gt; into the REPL session
.run       Runs a cds server from a given CAP project folder, or module name like @capire/bookshop.
.save      Save all evaluated commands &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; this REPL session to a &lt;span class=&quot;token function&quot;&gt;file&lt;/span&gt;

Press Ctrl+C to abort current expression, Ctrl+D to &lt;span class=&quot;token builtin class-name&quot;&gt;exit&lt;/span&gt; the REPL&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;exploring-the-cds-facade-with-inspect&quot;&gt;Exploring the cds facade with .inspect&lt;/h2&gt;
&lt;p&gt;The &lt;a href=&quot;https://cap.cloud.sap/docs/node.js/cds-facade&quot;&gt;cds facade&lt;/a&gt; is a good place to start exploring. It contains a lot of detail, so I used the &lt;code&gt;.inspect&lt;/code&gt; feature to keep things to a minimum:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; .inspect .depth&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; cds

cds: cds_facade &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  _events: &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Object: null prototype&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;,
  _eventsCount: &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;,
  _maxListeners: undefined,
  model: undefined,
  db: undefined,
  cli: &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Object&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;,
  root: &lt;span class=&quot;token string&quot;&gt;&#39;/home/node/tiny-sample&#39;&lt;/span&gt;,
  services: &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;,
  extend: &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Function &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;anonymous&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;,
  version: &lt;span class=&quot;token string&quot;&gt;&#39;9.1.0&#39;&lt;/span&gt;,
  builtin: &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Object&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;,
  service: &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Function&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;,
  log: &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Function&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;,
  parse: &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Function&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;,
  home: &lt;span class=&quot;token string&quot;&gt;&#39;/home/node/tiny-sample/node_modules/@sap/cds&#39;&lt;/span&gt;,
  env: &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Config&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;,
  requires: &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;,
  &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Symbol&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;shapeMode&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;: false,
  &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Symbol&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;kCapture&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;: &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Running &lt;code&gt;.inspect .depth=N&lt;/code&gt; on its own will fix the detail level for subsequent inspections to N.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; .inspect .depth&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;

updated node:util.inspect.defaultOptions with: &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; depth: &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;At this point there are no values for &lt;code&gt;db&lt;/code&gt;, &lt;code&gt;services&lt;/code&gt; or &lt;code&gt;model&lt;/code&gt; in the facade, because I&#39;ve not yet started any CAP server.&lt;/p&gt;
&lt;h2 id=&quot;starting-a-server-with-run&quot;&gt;Starting a server with .run&lt;/h2&gt;
&lt;p&gt;With &lt;code&gt;.run&lt;/code&gt; I started a CAP server based on the project in the current (&lt;code&gt;.&lt;/code&gt;) directory:&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; .run &lt;span class=&quot;token builtin class-name&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;. &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;usual CAP server output&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
Following variables are made available &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; your repl&#39;s global context:

from cds.entities: &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  Books,
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

from cds.services: &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  db,
  CatalogService,
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

Simply &lt;span class=&quot;token builtin class-name&quot;&gt;type&lt;/span&gt; e.g. CatalogService &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; the prompt to use the respective objects.&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;This can be done on launching the REPL too like this: &lt;code&gt;cds repl --run .&lt;/code&gt;, or &lt;code&gt;cds r -r .&lt;/code&gt; if you like short invocations.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Everything is a service, including the database facility (&lt;code&gt;db&lt;/code&gt;) as well as the &lt;code&gt;CatalogService&lt;/code&gt; defined in &lt;code&gt;srv/cat-service.cds&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;And there&#39;s also the &lt;code&gt;Books&lt;/code&gt; entity from &lt;code&gt;db/schema.cds&lt;/code&gt; (at this point I&#39;ve increased the &lt;code&gt;.inspect&lt;/code&gt; depth from 0 to 4):&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; Books
entity &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;entity&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;elements&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; LinkedDefinitions &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token constant&quot;&gt;ID&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Integer &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;cds.Integer&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token literal-property property&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; String &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;cds.String&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token literal-property property&quot;&gt;stock&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Integer &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;cds.Integer&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I then took a peek at some of the detail in the &lt;code&gt;CatalogService&lt;/code&gt;, specifically the &lt;code&gt;handlers&lt;/code&gt;, to show &lt;a href=&quot;https://qmacro.org/blog/posts/2024/11/07/five-reasons-to-use-cap/#1-the-code-is-in-the-framework-not-outside-of-it&quot;&gt;the built-in mechanisms&lt;/a&gt; - all those features one can read about in &lt;a href=&quot;https://cap.cloud.sap/docs/&quot;&gt;Capire&lt;/a&gt; such as auth checks, autoexposure, input validation, paging, sorting, and so on, plus the complete support for CRUD operations, is there:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; CatalogService&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;handlers
EventHandlers &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;_initial&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token literal-property property&quot;&gt;before&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;*&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token literal-property property&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Function&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; check_service_level_restrictions&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;before&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;*&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Function&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; check_auth_privileges&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;before&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;*&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Function&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; check_readonly&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;before&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;*&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Function&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; check_insertonly&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;before&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;*&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Function&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; check_odata_constraints&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;before&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;*&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Function&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; check_autoexposed&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;before&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;*&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;AsyncFunction&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; enforce_auth&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;before&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;READ&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Function&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; restrict_expand&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;before&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;CREATE&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;AsyncFunction&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; validate_input&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;before&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;UPDATE&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;AsyncFunction&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; validate_input&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;before&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;NEW&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;AsyncFunction&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; validate_input&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;before&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;READ&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Function&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; handle_paging&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;before&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;READ&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Function&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; handle_sorting&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;before&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;CREATE&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;AsyncFunction&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; handle_crud_requests&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;READ&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;AsyncFunction&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; handle_crud_requests&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;UPDATE&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;AsyncFunction&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; handle_crud_requests&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;DELETE&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;AsyncFunction&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; handle_crud_requests&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;UPSERT&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;AsyncFunction&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; handle_crud_requests&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;after&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;_error&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;understanding-entities-at-different-levels&quot;&gt;Understanding entities at different levels&lt;/h2&gt;
&lt;p&gt;With the &lt;a href=&quot;https://qmacro.org/blog/posts/2025/07/21/a-recap-intro-to-the-cds-repl/#cds-model&quot;&gt;CDS model&lt;/a&gt; in mind, I stopped for a moment to look at the difference between what the injected variable &lt;code&gt;Books&lt;/code&gt; represents (shown just above), and what the expanded &amp;quot;service-equivalent&amp;quot; looks like, in &lt;code&gt;CatalogService.entities&lt;/code&gt;, which I first extracted using a destructuring assignment:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;Books&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; mybooks &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; CatalogService&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;entities
&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;object Function&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and then inspected:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; mybooks
entity &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;entity&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token string-property property&quot;&gt;&#39;@readonly&#39;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;projection&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;ref&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;my.bookshop.Books&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;elements&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; LinkedDefinitions &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token constant&quot;&gt;ID&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Integer &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;cds.Integer&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token literal-property property&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; String &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;cds.String&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token literal-property property&quot;&gt;stock&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Integer &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;cds.Integer&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token string-property property&quot;&gt;&#39;@Capabilities.DeleteRestrictions.Deletable&#39;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token string-property property&quot;&gt;&#39;@Capabilities.InsertRestrictions.Insertable&#39;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token string-property property&quot;&gt;&#39;@Capabilities.UpdateRestrictions.Updatable&#39;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What&#39;s different is that this &amp;quot;version&amp;quot; is a projection on the &lt;code&gt;Books&lt;/code&gt; entity (in the &lt;code&gt;my.bookshop&lt;/code&gt; namespace), defined by a query object construct, there&#39;s a &lt;code&gt;@readonly&lt;/code&gt; annotation defined upon it, which in turn &lt;a href=&quot;https://cap.cloud.sap/docs/guides/security/authorization#restricting-events&quot;&gt;expand into&lt;/a&gt; the &lt;code&gt;@Capabilities&lt;/code&gt; based restrictions seen here.&lt;/p&gt;
&lt;h2 id=&quot;building-and-executing-query-objects&quot;&gt;Building and executing query objects&lt;/h2&gt;
&lt;p&gt;In CAP query objects are first class citizens and essential to our understanding of the fundamentals. They&#39;re constructed at a core level with &lt;a href=&quot;https://cap.cloud.sap/docs/node.js/cds-ql&quot;&gt;cds.ql&lt;/a&gt; but there are also higher level APIs such as the &lt;a href=&quot;https://cap.cloud.sap/docs/node.js/core-services#crud-style-api&quot;&gt;CRUD-style API&lt;/a&gt; which I used here, assigning the object directly to a variable:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; thebooks &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; CatalogService&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;mybooks&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
cds&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ql &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token constant&quot;&gt;SELECT&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;ref&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;CatalogService.Books&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To &lt;a href=&quot;https://cap.cloud.sap/docs/node.js/cds-ql#executing-queries&quot;&gt;execute the query&lt;/a&gt; I used &lt;code&gt;await&lt;/code&gt;, which by default passes the query to &lt;code&gt;cds.db.run()&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; thebooks
&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;ID&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Wuthering Heights&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;stock&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;ID&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Jane Eyre&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;stock&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;500&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In other words, this is the same as:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; db&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;thebooks&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;because I still have the &lt;code&gt;db&lt;/code&gt; variable that was automatically made available in the REPL session&#39;s global context.&lt;/p&gt;
&lt;p&gt;Queries can be extended, which I did at this point:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; thebooks&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string-property property&quot;&gt;&#39;stock&#39;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string-property property&quot;&gt;&#39;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;ID&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Jane Eyre&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;stock&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;500&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;Beware, this will modify the query object:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; thebooks
cds&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ql &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token constant&quot;&gt;SELECT&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token literal-property property&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;ref&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;CatalogService.Books&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token literal-property property&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;ref&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;stock&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;creating-a-service-from-scratch&quot;&gt;Creating a service from scratch&lt;/h2&gt;
&lt;p&gt;As well as defining a service (such as &lt;code&gt;CatalogService&lt;/code&gt;) in the CDS model, it&#39;s possible to create a service from the ground up, which I illustrated next:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; srv &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;cds&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Service&lt;/span&gt;
Service &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Service&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;handlers&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; EventHandlers &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token literal-property property&quot;&gt;_initial&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token literal-property property&quot;&gt;before&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token literal-property property&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token literal-property property&quot;&gt;after&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token literal-property property&quot;&gt;_error&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;definition&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;undefined&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is like an &amp;quot;empty&amp;quot; version of the service I looked at before - for example, there are no handlers defined.&lt;/p&gt;
&lt;p&gt;That doesn&#39;t prevent the sending of messages; it&#39;s just that nothing will happen, as I then demonstrated:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; srv&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;recap&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;awesome&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;At this point I defined a super simple handler for the &lt;code&gt;recap&lt;/code&gt; event (remember, a handler definition is essentially a function, so &lt;code&gt;console.log&lt;/code&gt; will do just fine here):&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; srv&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;recap&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;log&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This time, because of the definition of the &lt;code&gt;on&lt;/code&gt; phase handler for this event named &lt;code&gt;recap&lt;/code&gt;, the data is passed to the handler function, which outputs it:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; srv&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;recap&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;awesome&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
Request &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;recap&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;awesome&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;AsyncFunction&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; next&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is what was shown in the output:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;what is being passed is an object of type &lt;code&gt;Request&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;the content of the &lt;code&gt;Request&lt;/code&gt;, an object containing the request &lt;code&gt;method&lt;/code&gt;, and the payload (in &lt;code&gt;data&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;a &lt;code&gt;next&lt;/code&gt; function that can be called by the handler&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In other words, this is effectively a request/response concept, close to the synchronous ideas in HTTP, for example.&lt;/p&gt;
&lt;p&gt;Then, to contrast this with an event message concept, close to the ideas in the asynchronous ideas in event emitters and receivers, I swapped out the &lt;code&gt;srv.send&lt;/code&gt; and used &lt;code&gt;srv.emit&lt;/code&gt; instead:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; srv&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;emit&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;recap&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;awesome&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
EventMessage &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;recap&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;awesome&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Function&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; _dummy&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This time the &lt;code&gt;console.log&lt;/code&gt; handler showed that:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;what is being passed is an object of type &lt;code&gt;EventMessage&lt;/code&gt; (as opposed to &lt;code&gt;Request&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;the &lt;code&gt;recap&lt;/code&gt; name is the same, but is now treated as an &lt;code&gt;event&lt;/code&gt; rather than a &lt;code&gt;method&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;there is no &lt;code&gt;next&lt;/code&gt; function (just a &lt;code&gt;_dummy&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This &lt;code&gt;next&lt;/code&gt; vs &lt;code&gt;_dummy&lt;/code&gt; function is at the heart of one of the key differences between events and requests in CAP. In both contexts one can define multiple handlers that are called in sequence for a given message.&lt;/p&gt;
&lt;p&gt;The handling of &lt;em&gt;requests&lt;/em&gt; is done in the context of a classic &lt;a href=&quot;https://cap.cloud.sap/docs/node.js/core-services#interceptor-stack-with-next&quot;&gt;interceptor stack&lt;/a&gt;, where any given handler break the chain and effectively declare that the message has been handled (by not calling &lt;code&gt;next&lt;/code&gt; to pass the processing to the next handler in the stack). But there is no interceptor stack in the handling of &lt;em&gt;events&lt;/em&gt; - every registered handler is called, regardless (and therefore there&#39;s no need for the &lt;code&gt;next&lt;/code&gt; function).&lt;/p&gt;
&lt;h2 id=&quot;sending-queries-to-a-remote-service&quot;&gt;Sending queries to a remote service&lt;/h2&gt;
&lt;p&gt;Constructing and sending queries to services is fundamental in CAP. Earlier I constructed a query and sent it to the &lt;code&gt;db&lt;/code&gt; service. In this last part of the talk I showed how one can construct a query and send it to a remote service (my &lt;a href=&quot;https://developer-challenge.cfapps.eu10.hana.ondemand.com/odata/v4/northbreeze&quot;&gt;Northbreeze OData service&lt;/a&gt;), without having to think too much at all about the fact that it is even remote.&lt;/p&gt;
&lt;p&gt;In CAP services are either &amp;quot;required&amp;quot; or &amp;quot;provided&amp;quot;. A remote service is one that is &amp;quot;required&amp;quot;, commonly with the details in &lt;code&gt;package.json#cds.requires&lt;/code&gt;, and &lt;a href=&quot;https://cap.cloud.sap/docs/node.js/cds-connect&quot;&gt;cds.connect&lt;/a&gt; is used to make a connection to such a remote service.&lt;/p&gt;
&lt;p&gt;I don&#39;t have anything in &lt;code&gt;package.json#cds.requires&lt;/code&gt; so this is what I got when I tried something simple like this:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; cds&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;connect&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;northbreeze&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
Promise &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;rejected&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; Error&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Didn&lt;span class=&quot;token string&quot;&gt;&#39;t find a configuration for &#39;&lt;/span&gt;cds&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;requires&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;northbreeze&#39; &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;home&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;node&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;tiny&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;sample&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There&#39;s a second parameter to &lt;code&gt;cds.connect.to&lt;/code&gt; which expects an options object, wherein one can provide a service binding (essentially a destination object) in a &lt;code&gt;credentials&lt;/code&gt; property:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; nb &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; cds&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;connect&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;northbreeze&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token literal-property property&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;odata&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;credentials&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;https://developer-challenge.cfapps.eu10.hana.ondemand.com/odata/v4/northbreeze&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
RemoteService &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;northbreeze&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token literal-property property&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;odata&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token literal-property property&quot;&gt;impl&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;@sap/cds/libx/_runtime/remote/Service.js&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token literal-property property&quot;&gt;external&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token literal-property property&quot;&gt;credentials&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token literal-property property&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;https://developer-challenge.cfapps.eu10.hana.ondemand.com/odata/v4/northbreeze&#39;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;odata&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;handlers&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; EventHandlers &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token literal-property property&quot;&gt;_initial&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;before&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;UPDATE&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Function&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; clearKeysFromData&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token literal-property property&quot;&gt;before&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token literal-property property&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;*&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;AsyncFunction&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; on_handler&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token literal-property property&quot;&gt;after&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token literal-property property&quot;&gt;_error&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;definition&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;undefined&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;_source&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;/home/node/tiny-sample/node_modules/@sap/cds/libx/_runtime/remote/Service.js&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;datasource&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;undefined&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;destinationOptions&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;undefined&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;destination&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token literal-property property&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;undefined&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token literal-property property&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;https://developer-challenge.cfapps.eu10.hana.ondemand.com/odata/v4/northbreeze&#39;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;undefined&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;requestTimeout&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;60000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;csrf&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;undefined&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;csrfInBatch&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;undefined&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;middlewares&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;timeout&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;anonymous&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;csrf&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;undefined&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;entities&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;actions&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Doing this, and assigning the result to a variable, gives a &lt;code&gt;RemoteService&lt;/code&gt; object, which is on a similar level to the &lt;code&gt;db&lt;/code&gt; and &lt;code&gt;CatalogService&lt;/code&gt; objects I had after starting the CAP server:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;db&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; CatalogService&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; nb&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;constructor&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; (&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;kind&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token literal-property property&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;SQLiteService&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;sqlite&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token literal-property property&quot;&gt;CatalogService&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;ApplicationService&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;app&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;service&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token literal-property property&quot;&gt;northbreeze&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;RemoteService&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;odata&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;At this point I constructed a new query object, enjoying how the approach (which uses tagged templates) allows me to express my query in almost-English:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; cats &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;CategoryName&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;from &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Categories&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;
cds&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ql &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token constant&quot;&gt;SELECT&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token literal-property property&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;ref&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Categories&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token literal-property property&quot;&gt;columns&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;ref&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;CategoryName&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The context here in the post has diverged slightly from the context of the talk, because (as I&#39;d exited the cds REPL back to the shell to show the output of &lt;code&gt;npm ls&lt;/code&gt;) the cds REPL session at this point was a fresh one in the talk, one where I hadn&#39;t re-invoked the CAP server (with &lt;code&gt;.run .&lt;/code&gt;), and therefore there was no &lt;code&gt;db&lt;/code&gt; variable injected into the global REPL context like before.&lt;/p&gt;
&lt;p&gt;So when I ran this during the talk, this happened, which nicely illustrated the default use of &lt;code&gt;db.run&lt;/code&gt; when &lt;code&gt;await&lt;/code&gt;-ing a query:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; cats
Uncaught Error&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Can&#39;t execute query &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; no primary database is connected&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But here, while we &lt;em&gt;do&lt;/em&gt; have a primary database in the form of &lt;code&gt;db&lt;/code&gt;, we get a different and equally illustrative error:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; cats
Uncaught SqliteError&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; no such table&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Categories &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;token constant&quot;&gt;SELECT&lt;/span&gt; CategoryName &lt;span class=&quot;token constant&quot;&gt;FROM&lt;/span&gt; Categories&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Of course, I wanted to have this query sent to the remote service, which I achieved with the same method but called on the &lt;code&gt;RemoteService&lt;/code&gt; object (in &lt;code&gt;nb&lt;/code&gt;), rather than the &lt;code&gt;SQLiteService&lt;/code&gt; object (in &lt;code&gt;db&lt;/code&gt;):&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; nb&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;cats&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;CategoryName&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Beverages&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;CategoryID&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;CategoryName&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Condiments&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;CategoryID&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;CategoryName&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Confections&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;CategoryID&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;CategoryName&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Dairy Products&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;CategoryID&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;CategoryName&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Grains/Cereals&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;CategoryID&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;CategoryName&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Meat/Poultry&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;CategoryID&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;CategoryName&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Produce&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;CategoryID&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;7&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;CategoryName&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Seafood&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;CategoryID&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;8&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The query object is serialised and sent to the remote service, and the results returned, without me having to do anything! If you&#39;re curious, information on the built-in implementation that facilitates this is also available:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; nb&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;options
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;odata&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;impl&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;@sap/cds/libx/_runtime/remote/Service.js&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;external&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;credentials&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token literal-property property&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;https://developer-challenge.cfapps.eu10.hana.ondemand.com/odata/v4/northbreeze&#39;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Excellent!&lt;/p&gt;
&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;/h2&gt;
&lt;p&gt;With that, I wrapped up the talk (it was only a 20 minute slot) and so I&#39;ll wrap up this post too.&lt;/p&gt;
&lt;p&gt;Let me know in the comments how you get on with the cds REPL, and share what you discover!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>A modern and clean Neovim setup for CAP Node.js - configuration and diagnostics</title>
    <link href="https://qmacro.org/blog/posts/2025/06/10/a-modern-and-clean-neovim-setup-for-cap-node-js-configuration-and-diagnostics/" />
    <updated>2025-06-10T00:00:00Z</updated>
    <id>https://qmacro.org/blog/posts/2025/06/10/a-modern-and-clean-neovim-setup-for-cap-node-js-configuration-and-diagnostics/</id>
    <content type="html">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;The advent of the latest release of Neovim (&lt;a href=&quot;https://neovim.io/doc/user/news-0.11.html&quot; title=&quot;The official release news item&quot;&gt;0.11&lt;/a&gt;) brought some changes and improvements in the area of LSP and diagnostics support, covered nicely in the post &lt;a href=&quot;https://gpanders.com/blog/whats-new-in-neovim-0-11/&quot; title=&quot;A very readable post by Gregory Anders&quot;&gt;What&#39;s new in Neovim 0.11&lt;/a&gt; from Gregory Anders, and also in David Kunz&#39;s video &lt;a href=&quot;https://www.youtube.com/watch?v=ZiH59zg59kg&quot; title=&quot;An 8 min overview video by David Kunz (aka DevOnDuty)&quot;&gt;Neovim 0.11: What&#39;s New?&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I have tried to embrace the new simplified LSP features and have created a clean configuration for CAP Node.js development, predominantly the editing of CDS and JavaScript files.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;For those outside the SAP ecosphere, &lt;a href=&quot;https://cap.cloud.sap/docs/&quot; title=&quot;The main CAP documentation&quot;&gt;CAP&lt;/a&gt; is the SAP Cloud Application Programming Model and &lt;a href=&quot;https://cap.cloud.sap/docs/cds/&quot;&gt;CDS&lt;/a&gt; is the backbone of CAP, a collection of domain specific languages (DSLs) that include the Conceptual Definition Language (&lt;a href=&quot;https://cap.cloud.sap/docs/cds/cdl&quot;&gt;CDL&lt;/a&gt;), a declarative language for defining models; files containing CDL source are usually found with the extension &lt;code&gt;.cds&lt;/code&gt; which reflects the overall model.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Both JavaScript and CDS sources are supported by language servers and also by Tree-sitter. The setup of Neovim to use such facilities with a minimum of configuration and a maximum use of default keybindings and operations is my aim here.&lt;/p&gt;
&lt;p&gt;In the following sections I&#39;ll describe the configuration and how I am using the facilities that the configuration describes, specifically the diagnostic facilities.&lt;/p&gt;
&lt;h2 id=&quot;configuration&quot;&gt;Configuration&lt;/h2&gt;
&lt;p&gt;The overall configuration follows what I think is a fairly standard approach, coupled with &lt;a href=&quot;https://gpanders.com/blog/whats-new-in-neovim-0-11/#simpler-lsp-setup-and-configuration&quot;&gt;the simpler LSP setup and configuration&lt;/a&gt; approach in 0.11.&lt;/p&gt;
&lt;p&gt;For the purposes of isolating and working on this configuration, I use the &lt;a href=&quot;https://neovim.io/doc/user/starting.html#_nvim_appname&quot;&gt;NVIM_APPNAME&lt;/a&gt; feature which lets me split out and manage separate clusters of Neovim configuration. I have a cluster named &amp;quot;clean&amp;quot;, which I put together for this exercise, and for which I set &lt;code&gt;NVIM_APPNAME=clean&lt;/code&gt; for this purpose, via a custom shell function &lt;a href=&quot;https://github.com/qmacro/dotfiles/blob/73e27bb3e76067e9bf21be873ad7c131a0ddf40b/bashrc.d/70-functions.sh#L95-L115&quot;&gt;nvc&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;the-file-and-directory-structure&quot;&gt;The file and directory structure&lt;/h3&gt;
&lt;p&gt;In the root of the &amp;quot;clean&amp;quot; configuration, here&#39;s what &lt;code&gt;tree&lt;/code&gt; shows:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# /home/dj/.config/nvim-configs/clean&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; tree
&lt;span class=&quot;token builtin class-name&quot;&gt;.&lt;/span&gt;
├── init.lua
├── lazy-lock.json
├── lsp
│   ├── cds.lua
│   ├── javascript.lua
│   └── lua.lua
├── lua
│   ├── config
│   │   └── lazy.lua
│   └── plugins
│       ├── mini.lua
│       └── treesitter.lua
└── queries
    └── cds
        ├── folds.scm
        ├── highlights.scm
        ├── indents.scm
        ├── injections.scm
        └── locals.scm

&lt;span class=&quot;token number&quot;&gt;7&lt;/span&gt; directories, &lt;span class=&quot;token number&quot;&gt;16&lt;/span&gt; files&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Briefly:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The main configuration is in &lt;code&gt;init.lua&lt;/code&gt;, supported by a fairly standard configuration file &lt;code&gt;lua/config/lazy.lua&lt;/code&gt; for the &lt;a href=&quot;https://github.com/folke/lazy.nvim&quot;&gt;lazy.nvim&lt;/a&gt; plugin manager.&lt;/li&gt;
&lt;li&gt;I&#39;m managing language server configuration in separate files within the &lt;code&gt;lsp/&lt;/code&gt; directory (as described in the &amp;quot;simpler LSP setup and configuration&amp;quot; section of Gregory&#39;s blog post referenced earlier).&lt;/li&gt;
&lt;li&gt;I have kept the plugins (in &lt;code&gt;lua/plugins/&lt;/code&gt;) to a minimum; a status line from the &lt;code&gt;mini&lt;/code&gt; family of plugins that shows LSP info (see &lt;a href=&quot;https://qmacro.org/blog/posts/2025/06/10/a-modern-and-clean-neovim-setup-for-cap-node-js-configuration-and-diagnostics/#diagnostic-summary-in-the-statusline&quot;&gt;later&lt;/a&gt; for an example of what this looks like) and configuration for Tree-sitter.&lt;/li&gt;
&lt;li&gt;In the &lt;code&gt;queries/cds/&lt;/code&gt; directory are various query definitions to go along with the custom Tree-sitter support in &lt;a href=&quot;https://github.com/cap-js-community/tree-sitter-cds&quot;&gt;tree-sitter-cds&lt;/a&gt;; while Tree-sitter will be able to parse and recognise symbols in the CDS sources, Neovim won&#39;t be able to assign colours to the different parts of the generated syntax tree without those queries, and no syntax highlighting will appear. The setup of &lt;code&gt;tree-sitter-cds&lt;/code&gt;, which includes the addition of these &lt;code&gt;*.scm&lt;/code&gt; files, is described in the &lt;a href=&quot;https://github.com/cap-js-community/tree-sitter-cds/blob/main/docs/neovim-support.md&quot;&gt;Neovim support&lt;/a&gt; section of the repo.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It&#39;s perhaps worth pointing out what&#39;s &lt;em&gt;not&lt;/em&gt; there - in particular, the &lt;a href=&quot;https://github.com/neovim/nvim-lspconfig&quot;&gt;nvim-lspconfig&lt;/a&gt; plugin, which I don&#39;t need to use now.&lt;/p&gt;
&lt;p&gt;The entire configuration cluster (all the files above) is &lt;a href=&quot;https://github.com/qmacro/dotfiles/tree/5c5b83acf6c0e2931a6b662e8602e2d97ea6f02a/config/nvim-configs/clean&quot;&gt;available to browse in my dotfiles repo&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;init-lua&quot;&gt;init.lua&lt;/h3&gt;
&lt;p&gt;Here&#39;s the full content of the &lt;code&gt;init.lua&lt;/code&gt; file:&lt;/p&gt;
&lt;pre class=&quot;language-lua&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-lua&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;-- PLUGIN MANAGER&lt;/span&gt;

&lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;config.lazy&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;-- LANGUAGE SERVER PROTOCOL&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;-- LSP-based completion support&lt;/span&gt;
vim&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;api&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;nvim_create_autocmd&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;LspAttach&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  callback &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ev&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;local&lt;/span&gt; client &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; vim&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;lsp&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get_client_by_id&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ev&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;client_id&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; client&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;supports_method&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;textDocument/completion&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;then&lt;/span&gt;
      vim&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;lsp&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;completion&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;enable&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; client&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;id&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; ev&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;buf&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; autotrigger &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;-- Control LSP support by filetype&lt;/span&gt;
vim&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;lsp&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;enable&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token string&quot;&gt;&#39;javascript&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token string&quot;&gt;&#39;cds&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;-- &#39;lua&#39;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;-- LSP logging&lt;/span&gt;
vim&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;lsp&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;set_log_level&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;WARN&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;-- DIAGNOSTICS&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;-- How diagnostics are displayed&lt;/span&gt;
vim&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;diagnostic&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; virtual_lines &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; current_line &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;-- GENERAL OPTIONS&lt;/span&gt;

vim&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;opt&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;list &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;true&lt;/span&gt;
vim&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;opt&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;expandtab &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;true&lt;/span&gt;
vim&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;opt&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;shiftwidth &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;
vim&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;opt&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;signcolumn &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;yes:1&quot;&lt;/span&gt;
vim&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;opt&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;cursorline &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;true&lt;/span&gt;
vim&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;opt&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;splitright &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;true&lt;/span&gt;
vim&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;opt&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;winborder &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;rounded&quot;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;-- FILETYPES&lt;/span&gt;

vim&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;filetype&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; extension &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; cds &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;cds&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I&#39;ll take this section by section.&lt;/p&gt;
&lt;h4 id=&quot;plugin-manager&quot;&gt;Plugin manager&lt;/h4&gt;
&lt;p&gt;In the &amp;quot;plugin manager&amp;quot; section I require the &lt;a href=&quot;https://github.com/folke/lazy.nvim&quot;&gt;lazy.nvim&lt;/a&gt; plugin manager configuration which is in &lt;a href=&quot;https://github.com/qmacro/dotfiles/blob/1a8f26fc6b80b9ab1043a9b4e197019c66295306/config/nvim-configs/clean/lua/config/lazy.lua&quot;&gt;lua/config/lazy.lua&lt;/a&gt;. This is very close to the standard configuration example in the &lt;a href=&quot;https://lazy.folke.io/installation&quot;&gt;lazy installation guide&lt;/a&gt;, I have not consciously added or changed anything there.&lt;/p&gt;
&lt;h4 id=&quot;language-server-protocol&quot;&gt;Language server protocol&lt;/h4&gt;
&lt;p&gt;The &amp;quot;language server protocol&amp;quot; section uses the new 0.11 features, specifically creating an &lt;code&gt;LspAttach&lt;/code&gt; callback to check for and enable completion if the language server supports it, and enabling the configuration on a filetype by filetype basis.&lt;/p&gt;
&lt;p&gt;The language server specific configuration itself can be found in individual files in the &lt;code&gt;lsp/&lt;/code&gt; directory. I have configuration files for CDS, JavaScript and Lua, and am enabling language server usage for the first two.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This is partly because I want to focus on just those two but also, with respect to Lua, I need to figure out how to &amp;quot;put back&amp;quot; that configuration that prevents warnings about &lt;code&gt;vim&lt;/code&gt; being an &amp;quot;undefined global&amp;quot;:&lt;/p&gt;
&lt;pre class=&quot;language-lua&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-lua&quot;&gt; &lt;span class=&quot;token comment&quot;&gt;-- LSP-based completion support&lt;/span&gt;
W vim&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;api&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;nvim_create_autocmd&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;LspAttach&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
 └──── undefined&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;global&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Undefined global `vim`&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;
   callback &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ev&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;token punctuation&quot;&gt;...&lt;/span&gt;
   &lt;span class=&quot;token keyword&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Until I do, I&#39;ve disabled the LSP connection for Lua.&lt;/p&gt;
&lt;p&gt;Update: I found out how to do this in 0.11 - see the &lt;a href=&quot;https://qmacro.org/blog/posts/2025/06/10/a-modern-and-clean-neovim-setup-for-cap-node-js-configuration-and-diagnostics/#prevent-the-lua-undefined-global-diagnostic-message&quot;&gt;Prevent the Lua &amp;quot;undefined global&amp;quot; diagnostic message&lt;/a&gt; section in the Appendix.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Here is what &lt;code&gt;lsp/javascript.lua&lt;/code&gt; contains:&lt;/p&gt;
&lt;pre class=&quot;language-lua&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-lua&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  cmd &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;typescript-language-server&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;--stdio&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  root_markers &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;package.json&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;.git&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  filetypes &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;javascript&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That&#39;s it! All that&#39;s needed here is information on how to invoke the actual language server executable, hints on how to find where the project (&amp;quot;workspace&amp;quot;) root is, and what Neovim filetypes this configuration is for. The contents of &lt;a href=&quot;https://github.com/qmacro/dotfiles/blob/1a8f26fc6b80b9ab1043a9b4e197019c66295306/config/nvim-configs/clean/lsp/cds.lua&quot;&gt;lsp/cds.lua&lt;/a&gt; is similar.&lt;/p&gt;
&lt;p&gt;Where are these language server executables? Well, one might use &lt;a href=&quot;https://github.com/mason-org/mason.nvim&quot;&gt;mason.nvim&lt;/a&gt; to install and manage language servers and other similar executables, but to keep things simple from a Neovim configuration perspective, I just installed them manually; for JavaScript I use &lt;a href=&quot;https://www.npmjs.com/package/typescript-language-server&quot;&gt;typescript-language-server&lt;/a&gt; and &lt;a href=&quot;https://github.com/qmacro/dotfiles/blob/1a8f26fc6b80b9ab1043a9b4e197019c66295306/config/nvim-configs/clean/lsp/cds.lua#L2&quot;&gt;for CDS&lt;/a&gt; I use &lt;a href=&quot;https://www.npmjs.com/package/@sap/cds-lsp&quot;&gt;@sap/cds-lsp&lt;/a&gt;, both of which are available via NPM:&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-g&lt;/span&gt; typescript-language-server @sap/cds-lsp&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;In my dev container based Personal Development Environment (PDE) setup I have the global NPM directory set to &lt;code&gt;$HOME/.npm-packages&lt;/code&gt; (with &lt;code&gt;npm config set prefix &amp;quot;$HOME/.npm-packages&lt;/code&gt;), and &lt;code&gt;$HOME/.npm-packages/bin/&lt;/code&gt; is in my &lt;code&gt;$PATH&lt;/code&gt;, meaning that once installed, the executables from these two packages are reachable both by me and by Neovim:&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# /home/dj&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token environment constant&quot;&gt;$PATH&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;tr&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;:&#39;&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;&#92;n&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;grep&lt;/span&gt; npm-packages
/home/dj/.npm-packages/bin
&lt;span class=&quot;token comment&quot;&gt;# /home/dj&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;which&lt;/span&gt; cds-lsp typescript-language-server
/home/dj/.npm-packages/bin/cds-lsp
/home/dj/.npm-packages/bin/typescript-language-server&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;I have a line in &lt;code&gt;init.lua&lt;/code&gt; relating to &lt;a href=&quot;https://neovim.io/doc/user/lsp.html#vim.lsp.set_log_level()&quot;&gt;LSP logging output&lt;/a&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-lua&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-lua&quot;&gt;vim&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;lsp&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;set_log_level&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;WARN&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This &amp;quot;WARN&amp;quot; level is actually the default, but I like to leave this line in and have the option to increase the level to &amp;quot;INFO&amp;quot; or even &amp;quot;DEBUG&amp;quot; to see what&#39;s going on. The log records are written to a file called &lt;code&gt;lsp.log&lt;/code&gt; in the &lt;code&gt;$HOME/.local/state/&lt;/code&gt; directory for the active Neovim configuration cluster, so in my case it&#39;s:&lt;/p&gt;
&lt;pre class=&quot;language-text&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;~/.local/state/nvim-configs/clean/lsp.log&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;While I&#39;m learning more about the protocol and what each server offers, I find it useful sometimes to keep an eye on what&#39;s going on between Neovim and the language server.&lt;/p&gt;
&lt;h4 id=&quot;diagnostics&quot;&gt;Diagnostics&lt;/h4&gt;
&lt;p&gt;In the &amp;quot;diagnostics&amp;quot; section I&#39;ve included some configuration that is also from the &lt;a href=&quot;https://gpanders.com/blog/whats-new-in-neovim-0-11/#diagnostics&quot;&gt;Diagnostics&lt;/a&gt; part of the &amp;quot;What&#39;s new in Neovim 0.11&amp;quot; blog post.&lt;/p&gt;
&lt;p&gt;The configuration as shown above, using &lt;code&gt;virtual_lines&lt;/code&gt;, results in a nice display of the diagnostic messages on a separate line, with a pointer to the exact position to which the diagnostic relates. See later for a comparison of different diagnostic displays.&lt;/p&gt;
&lt;h4 id=&quot;general-options&quot;&gt;General options&lt;/h4&gt;
&lt;p&gt;There&#39;s only a couple of things perhaps worth pointing out in my general options.&lt;/p&gt;
&lt;p&gt;First, there&#39;s the &lt;a href=&quot;https://neovim.io/doc/user/options.html#&#39;signcolumn&#39;&quot;&gt;signcolumn&lt;/a&gt; value. I don&#39;t like the entire buffer content switching left and right by a character when there&#39;s a sign (such as &lt;code&gt;H&lt;/code&gt;, &lt;code&gt;W&lt;/code&gt;, &lt;code&gt;I&lt;/code&gt; or &lt;code&gt;E&lt;/code&gt; for hint, warning, info and error respectively) to be displayed, so I use &lt;code&gt;yes:1&lt;/code&gt; to have a permanent single character column for sign eventualities.&lt;/p&gt;
&lt;p&gt;Then there&#39;s &lt;a href=&quot;https://neovim.io/doc/user/options.html#&#39;winborder&#39;&quot;&gt;winborder&lt;/a&gt; which is new and mentioned in the &lt;a href=&quot;https://gpanders.com/blog/whats-new-in-neovim-0-11/#improved-hover-documentation&quot;&gt;Improved hover documentation&lt;/a&gt; section of the &amp;quot;What&#39;s new with Neovim 0.11&amp;quot; blog post. See later for what effect this has.&lt;/p&gt;
&lt;h4 id=&quot;filetypes&quot;&gt;Filetypes&lt;/h4&gt;
&lt;p&gt;Lastly I have added an explicit line to set the filetype to &lt;code&gt;cds&lt;/code&gt; for files ending in &lt;code&gt;.cds&lt;/code&gt;. Without this, Neovim won&#39;t recognise and set this custom filetype for the CDS content I want to edit, and as a consequence, none of the filetype based configuration (such as for the language servers) will kick in.&lt;/p&gt;
&lt;h2 id=&quot;usage&quot;&gt;Usage&lt;/h2&gt;
&lt;p&gt;With all that out of the way, here are a few notes on how I can use this configuration, specifically regarding diagnostics.&lt;/p&gt;
&lt;h3 id=&quot;diagnostic-display&quot;&gt;Diagnostic display&lt;/h3&gt;
&lt;p&gt;There are different ways I can have Neovim share diagnostic information with me.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In all the following samples, the symbol for which the diagnostic has been raised is actually underlined by default in Neovim, for example &lt;code&gt;book&lt;/code&gt; (in &lt;code&gt;book.stock&lt;/code&gt;) on the line with the &lt;code&gt;E&lt;/code&gt; in the sign column would be underlined in the first example here; I just can&#39;t get it to render as underlined in this code block rendered from Markdown.&lt;/p&gt;
&lt;p&gt;Incidentally, this underline feature belongs to the &amp;quot;family&amp;quot; of diagnostic display options, along with virtual text, virtual lines and signs. If you really want to, you can turn underlining off in this context by including &lt;code&gt;underline = false&lt;/code&gt; in the table of options passed to &lt;code&gt;vim.diagnostic.config()&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;floating-window&quot;&gt;Floating window&lt;/h4&gt;
&lt;p&gt;Without any explicit call to &lt;code&gt;vim.dianostic.config()&lt;/code&gt; in my configuration, diagnostic signs are shown in the sign column, the relevant part of the line is underlined, but no diagnostic detail is displayed at all by default, even if my cursor is on that line:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;after&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;each&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; ListOfBooks&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;book&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token constant&quot;&gt;E&lt;/span&gt;     &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; book&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;stock &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;111&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; book&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;title &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; -- 11% discount!&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;// Reduce stock of ordered books if available stock suffices&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;submitOrder&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;req&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;Prior to 0.11 diagnostic detail would be displayed for every line, all at once, as virtual text (see below), which was a little too much; now, the default is not to do that.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;To summon the diagnostic detail when I&#39;m on that line I can use the default keymap binding &lt;code&gt;C-w d&lt;/code&gt; to &amp;quot;show diagnostic under cursor&amp;quot;, which then appears like this (with the rounded border decoration thanks to the &lt;code&gt;winborder&lt;/code&gt; configuration shown earlier):&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;after&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;each&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; ListOfBooks&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;book&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token constant&quot;&gt;E&lt;/span&gt;     &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; book&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;stock &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;111&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; book&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;title &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; -- 11% discount!&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;   ╭───────────────────────╮
         &lt;span class=&quot;token literal-property property&quot;&gt;│Diagnostics&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;           │
    &lt;span class=&quot;token comment&quot;&gt;// Re│1. &#39;(&#39; expected. [1005]│ks if available stock suffices&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;╰───────────────────────╯eq&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;book&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;id&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; quantity &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; req&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;data&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;See later in this section, where I look at some CDS sources, for an example of how to invoke this floating window manually.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;virtual-text&quot;&gt;Virtual text&lt;/h4&gt;
&lt;p&gt;Virtual text is the vivid text displayed to the right of the source lines, and with:&lt;/p&gt;
&lt;pre class=&quot;language-lua&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-lua&quot;&gt;vim&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;diagnostic&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; virtual_text &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;the diagnostic detail is shown for any and all lines, all the time (which is how diagnostic detail was displayed by default prior to 0.11):&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;after&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;each&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; ListOfBooks&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;book&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token constant&quot;&gt;E&lt;/span&gt;     &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; book&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;stock &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;111&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; book&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;title &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; -- 11% discount!&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;     ■ &lt;span class=&quot;token string&quot;&gt;&#39;(&#39;&lt;/span&gt; expected&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;// Reduce stock of ordered books if available stock suffices&lt;/span&gt;
&lt;span class=&quot;token constant&quot;&gt;E&lt;/span&gt;   &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;submitOrder&#39;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;req&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;     ■■■ Unterminated string literal&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;book&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;id&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; quantity &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; req&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;data&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;While there are just two errors shown in this example, with more it can get a little too &amp;quot;busy&amp;quot; so this is not a configuration option I use.&lt;/p&gt;
&lt;p&gt;Replacing the scalar &lt;code&gt;true&lt;/code&gt; value with &lt;code&gt;{ current_line = true }&lt;/code&gt; like this:&lt;/p&gt;
&lt;pre class=&quot;language-lua&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-lua&quot;&gt;vim&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;diagnostic&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; virtual_text &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; current_line &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;causes any diagnostic detail to be displayed as virtual text but only for the line you&#39;re on; in this following example, the same two errors exist as before, but the cursor is on the &lt;code&gt;this.on( ... )&lt;/code&gt; line:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;after&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;each&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; ListOfBooks&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;book&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token constant&quot;&gt;E&lt;/span&gt;     &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; book&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;stock &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;111&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; book&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;title &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; -- 11% discount!&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;// Reduce stock of ordered books if available stock suffices&lt;/span&gt;
&lt;span class=&quot;token constant&quot;&gt;E&lt;/span&gt;   &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;submitOrder&#39;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;req&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;     ■■■ Unterminated string literal&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;book&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;id&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; quantity &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; req&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;data&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note, as shown here, that by default the signs will always be displayed in the sign column for all relevant lines.&lt;/p&gt;
&lt;h4 id=&quot;virtual-lines&quot;&gt;Virtual lines&lt;/h4&gt;
&lt;p&gt;Changing the configuration property from &lt;code&gt;virtual_text&lt;/code&gt; to &lt;code&gt;virtual_lines&lt;/code&gt; causes the diagnostic detail to be displayed on a separate line, with a thin pointer to the specific problematic position; here&#39;s an example based on the actual configuration I have in &lt;code&gt;init.lua&lt;/code&gt;, i.e. using virtual lines but only displaying the diagnostic detail for the line I&#39;m currently on (which here is the one with &lt;code&gt;this.on( ... )&lt;/code&gt; again):&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;after&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;each&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; ListOfBooks&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;book&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token constant&quot;&gt;E&lt;/span&gt;     &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; book&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;stock &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;111&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; book&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;title &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; -- 11% discount!&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;// Reduce stock of ordered books if available stock suffices&lt;/span&gt;
&lt;span class=&quot;token constant&quot;&gt;E&lt;/span&gt;   &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&quot;submitOrder&#39;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;req&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                                         └──── &lt;span class=&quot;token number&quot;&gt;1002&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Unterminated string literal&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;token constant&quot;&gt;E&lt;/span&gt;     &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;book&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;id&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; quantity &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; req&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;data
&lt;span class=&quot;token constant&quot;&gt;E&lt;/span&gt;     &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; book &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;SELECT&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;one&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Books&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; id&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; b&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;stock&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that while diagnostic detail is indeed only displayed for the line I&#39;m on (e.g. it&#39;s not displayed for the first error where there&#39;s a missing opening bracket for the &lt;code&gt;if&lt;/code&gt; condition), there could be multiple virtual lines displayed for a single line of course, depending on the knock-on effects of the actual issue.&lt;/p&gt;
&lt;p&gt;There&#39;s an example of multiple virtual lines later in the &lt;a href=&quot;https://qmacro.org/blog/posts/2025/06/10/a-modern-and-clean-neovim-setup-for-cap-node-js-configuration-and-diagnostics/#diagnostic-severity-order&quot;&gt;Diagnostic severity order&lt;/a&gt; section, and both Gregory and David cover virtual lines nicely in their post and video respectively too.&lt;/p&gt;
&lt;p&gt;Here&#39;s how I see the pros and cons of each of these diagnostic detail display approaches:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Detail display&lt;/th&gt;
&lt;th&gt;For&lt;/th&gt;
&lt;th&gt;Against&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Floating window&lt;/td&gt;
&lt;td&gt;Neat, and can usually see all the detail&lt;/td&gt;
&lt;td&gt;Have to use an explicit keybinding to invoke&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Virtual text&lt;/td&gt;
&lt;td&gt;Source code remains stable&lt;/td&gt;
&lt;td&gt;Sometimes the detail displayed is off the right hand edge of the buffer&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Virtual lines&lt;/td&gt;
&lt;td&gt;More of the detail is available to read, and there&#39;s a nice pointer to the relevant position&lt;/td&gt;
&lt;td&gt;Causes the source code to jump up and down&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Note that the option to have diagnostic detail displayed just on the current line (vs all lines all the time) is available for both virtual text and virtual lines.&lt;/p&gt;
&lt;p&gt;For now I&#39;m going with virtual lines, with diagnostic detail displayed on the current line only; that&#39;s what the configuration shown in my &lt;code&gt;init.lua&lt;/code&gt; above declares, too.&lt;/p&gt;
&lt;p&gt;By the way, all the examples above have been based on JavaScript sources. Here&#39;s an example of a CDS source, where there are three diagnostics - one warning and two error. The cursor is on the &lt;code&gt;entity Books : managed {&lt;/code&gt; line:&lt;/p&gt;
&lt;pre class=&quot;language-cds&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-cds&quot;&gt;W &lt;span class=&quot;token using keyword&quot;&gt;using&lt;/span&gt; { Currency, sap, Language } &lt;span class=&quot;token from keyword&quot;&gt;from&lt;/span&gt; &#39;@sap/cds/common&#39;;
  &lt;span class=&quot;token keyword&quot;&gt;namespace&lt;/span&gt; sap.capire.bookshop;

E &lt;span class=&quot;token keyword&quot;&gt;entity&lt;/span&gt; Books : managed {
                 └──── ref-undefined-art: No artifact has been found with &lt;span class=&quot;token cdl-keyword keyword&quot;&gt;name&lt;/span&gt; “managed”
E   &lt;span class=&quot;token cqlkeywords keyword&quot;&gt;key&lt;/span&gt; ID  &lt;span class=&quot;token type builtin&quot;&gt;Integer&lt;/span&gt;;
    &lt;span class=&quot;token annotation important&quot;&gt;@mandatory&lt;/span&gt; title  : localized &lt;span class=&quot;token type builtin&quot;&gt;String(111)&lt;/span&gt;;
    descr  : localized &lt;span class=&quot;token type builtin&quot;&gt;String(1111)&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(The warning is an &lt;code&gt;unused-artifact-import&lt;/code&gt; diagnostic for the imported &lt;code&gt;Language&lt;/code&gt; type and the other error is a &lt;code&gt;syntax-unexpected-token&lt;/code&gt; caused by a missing colon between &lt;code&gt;ID&lt;/code&gt; and &lt;code&gt;Integer&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;While we&#39;re in this file, let&#39;s look at how to invoke the floating window with the diagnostic detail, which would normally be done with &lt;code&gt;C-w d&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-cds&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-cds&quot;&gt;W ╭────────────────────────────────────────────────────────────────────────────────────────────╮
  │Diagnostics:                                                                                │
  │1. Mismatched ‹Identifier›, expecting ‘:’, ‘;’, ‘{’, ‘}’, ‘&lt;span class=&quot;token annotation important&quot;&gt;@’,&lt;/span&gt; ‘=’ [syntax-unexpected-token]│
E ╰────────────────────────────────────────────────────────────────────────────────────────────╯
E   &lt;span class=&quot;token cqlkeywords keyword&quot;&gt;key&lt;/span&gt; ID  &lt;span class=&quot;token type builtin&quot;&gt;Integer&lt;/span&gt;;
            └──── syntax-unexpected-token: Mismatched ‹Identifier›, expecting ‘:’, ‘;’, ‘{’, ‘}’, ‘&lt;span class=&quot;token annotation important&quot;&gt;@’,&lt;/span&gt; ‘=’
    &lt;span class=&quot;token annotation important&quot;&gt;@mandatory&lt;/span&gt; title  : localized &lt;span class=&quot;token type builtin&quot;&gt;String(111)&lt;/span&gt;;
    descr  : localized &lt;span class=&quot;token type builtin&quot;&gt;String(1111)&lt;/span&gt;;
    &lt;span class=&quot;token annotation important&quot;&gt;@mandatory&lt;/span&gt; author : &lt;span class=&quot;token association-composition keyword&quot;&gt;Association to Authors&lt;/span&gt;;
 N  Diag E4 W1 LSP +  cap/db/schema.cds[+]                                                                cds  29|55│ 1|18
:lua vim.diagnostic.open_float()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can see in the command line that the floating window (independent of the virtual lines already displayed) is opened with &lt;a href=&quot;https://neovim.io/doc/user/diagnostic.html#vim.diagnostic.open_float()&quot;&gt;vim.diagnostic.open_float()&lt;/a&gt; .&lt;/p&gt;
&lt;h4 id=&quot;diagnostic-summary-in-the-statusline&quot;&gt;Diagnostic summary in the statusline&lt;/h4&gt;
&lt;p&gt;The &lt;a href=&quot;https://github.com/qmacro/dotfiles/blob/5c5b83acf6c0e2931a6b662e8602e2d97ea6f02a/config/nvim-configs/clean/lua/plugins/mini.lua&quot;&gt;statusline configuration&lt;/a&gt; in &lt;code&gt;lua/plugins/mini.lua&lt;/code&gt; is simple but the effect is very useful; here&#39;s what it looks like with icons enabled:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://qmacro.org/images/2025/06/mini-statusline-with-icons.png&quot; alt=&quot;mini statusline showing LSP info, with icons enabled&quot;&gt;&lt;/p&gt;
&lt;p&gt;and with them disabled:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://qmacro.org/images/2025/06/mini-statusline-no-icons.png&quot; alt=&quot;mini statusline showing LSP info, with icons disabled&quot;&gt;&lt;/p&gt;
&lt;p&gt;From left to right this status line shows that I&#39;m currently in &amp;quot;Normal&amp;quot; mode, there are two &amp;quot;error&amp;quot; level diagnostics and one &amp;quot;hint&amp;quot; level diagnostics in the current buffer, and that there is one &lt;a href=&quot;https://github.com/echasnovski/mini.statusline/blob/e331175f10d9f400b42523b3890841aba202ce16/lua/mini/statusline.lua#L351-L369&quot;&gt;LSP server attached&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;See also the &lt;a href=&quot;https://qmacro.org/blog/posts/2025/06/10/a-modern-and-clean-neovim-setup-for-cap-node-js-configuration-and-diagnostics/#lsp-health-check&quot;&gt;LSP health check&lt;/a&gt; section in the Appendix.&lt;/p&gt;
&lt;h4 id=&quot;diagnostic-severity-order&quot;&gt;Diagnostic severity order&lt;/h4&gt;
&lt;p&gt;There&#39;s only space for a single diagnostic severity indicator (&lt;code&gt;W&lt;/code&gt;, &lt;code&gt;E&lt;/code&gt; etc) in the sign column on each line. But if there are multiple problems on a single line, this is what could appear (my cursor is on the &lt;code&gt;entity Books&lt;/code&gt; line):&lt;/p&gt;
&lt;pre class=&quot;language-cds&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-cds&quot;&gt;W &lt;span class=&quot;token using keyword&quot;&gt;using&lt;/span&gt; { Currency, sap, Languages } &lt;span class=&quot;token from keyword&quot;&gt;from&lt;/span&gt; &#39;@sap/cds/common&#39;;
  &lt;span class=&quot;token keyword&quot;&gt;namespace&lt;/span&gt; sap.capire.bookshop;

E &lt;span class=&quot;token keyword&quot;&gt;entity&lt;/span&gt; Books : managed {
                 └──── ref-undefined-art: No artifact has been found with &lt;span class=&quot;token cdl-keyword keyword&quot;&gt;name&lt;/span&gt; “managed”
E   &lt;span class=&quot;token cqlkeywords keyword&quot;&gt;key&lt;/span&gt; ID  &lt;span class=&quot;token type builtin&quot;&gt;Integer&lt;/span&gt;;
    &lt;span class=&quot;token annotation important&quot;&gt;@mandatory&lt;/span&gt; title  : localized &lt;span class=&quot;token type builtin&quot;&gt;String(111)&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Because I use the sign column to get an at-a-glance summary of what&#39;s going on with my code, I would think that the highest &lt;a href=&quot;https://neovim.io/doc/user/diagnostic.html#diagnostic-severity&quot;&gt;diagnostic severity&lt;/a&gt; on the first line was a &amp;quot;warning&amp;quot;.&lt;/p&gt;
&lt;p&gt;But in fact there&#39;s an &amp;quot;error&amp;quot; level diagnostic too, which is revealed along with the &amp;quot;warning&amp;quot; level diagnostic when I move my cursor to the first line to cause the virtual lines to be displayed:&lt;/p&gt;
&lt;pre class=&quot;language-lua&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-lua&quot;&gt;W &lt;span class=&quot;token function&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; Currency&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; sap&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; Languages &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; from &lt;span class=&quot;token string&quot;&gt;&#39;@sap/cds/common&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                         ├──── unused&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;artefact&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;import&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Imported artefact &lt;span class=&quot;token string&quot;&gt;&#39;Languages&#39;&lt;/span&gt; is &lt;span class=&quot;token keyword&quot;&gt;not&lt;/span&gt; used &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; this source file
                         └──── ref&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;undefined&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;def&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Artifact “Languages” has &lt;span class=&quot;token keyword&quot;&gt;not&lt;/span&gt; been found
  namespace sap&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;capire&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;bookshop&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

E entity Books &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;managed&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
E   key ID  Integer&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    @mandatory title  &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; localized &lt;span class=&quot;token function&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;111&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;unused-artefact-import&lt;/code&gt; is the &amp;quot;warning&amp;quot; level diagnostic, and the &lt;code&gt;ref-undefined-def&lt;/code&gt; is the &amp;quot;error&amp;quot; level diagnostic.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;These diagnostic detail lines are actually coloured differently in Neovim itself (warnings in yellow and errors in red) but that colour is not conveyed in these Markdown code block based text representations here (I&#39;m trying to avoid too many non-searchable screenshots).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I can address this problem with the &lt;code&gt;severity_sort&lt;/code&gt; diagnostic option; if I &lt;a href=&quot;https://github.com/qmacro/dotfiles/commit/4199e8d1fa5a7bd44611702108a6868f82a388e9&quot;&gt;extend my diagnostic configuration&lt;/a&gt; in &lt;code&gt;init.lua&lt;/code&gt; to look like this:&lt;/p&gt;
&lt;pre class=&quot;language-lua&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-lua&quot;&gt;  vim&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;diagnostic&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    virtual_lines &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; current_line &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    severity_sort &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;then the sign for the first line is shown as &lt;code&gt;E&lt;/code&gt; rather than &lt;code&gt;W&lt;/code&gt;, and the virtual lines are re-ordered too:&lt;/p&gt;
&lt;pre class=&quot;language-cds&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-cds&quot;&gt;E &lt;span class=&quot;token using keyword&quot;&gt;using&lt;/span&gt; { Currency, sap, Languages } &lt;span class=&quot;token from keyword&quot;&gt;from&lt;/span&gt; &#39;@sap/cds/common&#39;;
                         ├──── ref-undefined-def: Artifact “Languages” has not been found
                         └──── unused-artefact-import: Imported artefact &#39;Languages&#39; is not used in this source file
  &lt;span class=&quot;token keyword&quot;&gt;namespace&lt;/span&gt; sap.capire.bookshop;

E &lt;span class=&quot;token keyword&quot;&gt;entity&lt;/span&gt; Books : managed {
E   &lt;span class=&quot;token cqlkeywords keyword&quot;&gt;key&lt;/span&gt; ID  &lt;span class=&quot;token type builtin&quot;&gt;Integer&lt;/span&gt;;
    &lt;span class=&quot;token annotation important&quot;&gt;@mandatory&lt;/span&gt; title  : localized &lt;span class=&quot;token type builtin&quot;&gt;String(111)&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;diagnostic-navigation&quot;&gt;Diagnostic navigation&lt;/h3&gt;
&lt;p&gt;There are different ways that you can look at and get to the diagnostics in your code.&lt;/p&gt;
&lt;h4 id=&quot;jumping-between-diagnostics&quot;&gt;Jumping between diagnostics&lt;/h4&gt;
&lt;p&gt;Version 0.11 introduced more &lt;a href=&quot;https://gpanders.com/blog/whats-new-in-neovim-0-11/#more-default-mappings&quot;&gt;default key mappings&lt;/a&gt;; many of them are square-bracket based and related to navigation and inspired by Tim Pope&#39;s &lt;a href=&quot;https://github.com/tpope/vim-unimpaired&quot;&gt;vim-unimpaired&lt;/a&gt; plugin. There are a couple of pairs for moving between diagnostics in a buffer:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Key mapping&lt;/th&gt;
&lt;th&gt;Action&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;[d&lt;/code&gt;, &lt;code&gt;]d&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Jump to prev, next diagnostic&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;[D&lt;/code&gt;, &lt;code&gt;]D&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Jump to first, last diagnostic&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&quot;using-the-quickfix-list&quot;&gt;Using the quickfix list&lt;/h4&gt;
&lt;p&gt;There isn&#39;t a default key mapping for this, but with &lt;a href=&quot;https://neovim.io/doc/user/diagnostic.html#vim.diagnostic.setqflist()&quot;&gt;vim.diagnostic.setqflist()&lt;/a&gt; you can ask for all the diagnostics to be put in the quickfix list, which is great for an overall display and to jump between them using standard quickfix actions; what&#39;s more, some of the new &lt;a href=&quot;https://gpanders.com/blog/whats-new-in-neovim-0-11/#more-default-mappings&quot;&gt;default key mappings&lt;/a&gt; make this even more comfortable:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;[q&lt;/code&gt;, &lt;code&gt;]q&lt;/code&gt;, &lt;code&gt;[Q&lt;/code&gt;, &lt;code&gt;]Q&lt;/code&gt;, &lt;code&gt;[CTRL-Q&lt;/code&gt;, &lt;code&gt;]CTRL-Q&lt;/code&gt; navigate through the quickfix list&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here&#39;s what the quickfix list looks like for the diagnostics in that CDS file; at this point I&#39;ve just invoked &lt;code&gt;:lua vim.diagnostic.setqflist()&lt;/code&gt; and I&#39;m on the first line in the quickfix list which is the &amp;quot;warning&amp;quot; level item:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://qmacro.org/images/2025/06/diagnostics-in-quickfix-list.png&quot; alt=&quot;diagnostics in quickfix list&quot;&gt;&lt;/p&gt;
&lt;p&gt;This could easily be configured as a key mapping for e.g. &lt;code&gt;&amp;lt;leader&amp;gt;dq&lt;/code&gt; (for &amp;quot;diagnostics into quickfix list&amp;quot;) like this:&lt;/p&gt;
&lt;pre class=&quot;language-lua&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-lua&quot;&gt;vim&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;keymap&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;n&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;&amp;lt;leader&gt;dq&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; vim&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;diagnostic&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;setqflist&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;If you&#39;re a user of &lt;a href=&quot;https://github.com/nvim-telescope/telescope.nvim&quot;&gt;Telescope&lt;/a&gt; you may know there&#39;s a similar facility to show a nice navigable list of the diagnostics, with &lt;code&gt;builtin.diagnostics&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;/h2&gt;
&lt;p&gt;I&#39;ve come to a point where it makes sense to finish this post. There&#39;s plenty more to learn about with respect to diagnostics, and the &lt;a href=&quot;https://neovim.io/doc/user/diagnostic.html&quot;&gt;standard Diagnostic documentation&lt;/a&gt; is great, I&#39;d recommend you have a coffee-time browse through at some point.&lt;/p&gt;
&lt;p&gt;If you want to try out this exact setup without messing up your current config, or are just curious to see how it feels, I&#39;ve set up a repo on GitHub called &lt;a href=&quot;https://github.com/qmacro/neovim-modern-clean-cap-nodejs&quot;&gt;neovim-modern-clean-cap-nodejs&lt;/a&gt; that has a dev container definition so you can create a codespace from it, ssh to it, and run Neovim with this config. All the instructions are in the repo&#39;s README.&lt;/p&gt;
&lt;p&gt;Until next time, happy editing!&lt;/p&gt;
&lt;h2 id=&quot;see-also&quot;&gt;See also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://qmacro.org/blog/posts/2025/08/04/excluding-specific-diagnostics-in-neovim/&quot;&gt;Excluding specific diagnostics in Neovim&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://qmacro.org/blog/posts/2025/08/06/neovim-configuration-for-file-and-module-navigation-in-cds-models/&quot;&gt;Neovim configuration for file and module navigation in CDS models&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;appendix&quot;&gt;Appendix&lt;/h2&gt;
&lt;h3 id=&quot;lsp-health-check&quot;&gt;LSP health check&lt;/h3&gt;
&lt;p&gt;While my statusline does a good job of summarising the LSP facilities in play for the current buffer, I can get more info with the &lt;a href=&quot;https://neovim.io/doc/user/health.html#_checkhealth&quot;&gt;checkhealth&lt;/a&gt; command, for which there&#39;s a specific option to check the health of the LSP submodule in Neovim: &lt;code&gt;checkhealth vim.lsp&lt;/code&gt;. Here&#39;s what that shows when I invoke it from a buffer that I&#39;ve loaded a CDS source file into, and where there&#39;s the CDS language server attached:&lt;/p&gt;
&lt;pre class=&quot;language-text&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;
  ==============================================================================
  vim.lsp:                                                                    ✅

  - LSP log level : WARN
  - Log path: /home/dj/.local/state/nvim-configs/clean/lsp.log
  - Log size: 123 KB

  vim.lsp: Active Clients
  - cds (id: 1)
    - Version: 9.0.1
    - Root directory: /work/scratch/clean/cap
    - Command: { &quot;cds-lsp&quot;, &quot;--stdio&quot; }
    - Settings: {}
    - Attached buffers: 1

  vim.lsp: Enabled Configurations
  - cds:
    - cmd: { &quot;cds-lsp&quot;, &quot;--stdio&quot; }
    - filetypes: cds
    - root_markers: package.json, .git

  - javascript:
    - cmd: { &quot;typescript-language-server&quot;, &quot;--stdio&quot; }
    - filetypes: javascript
    - root_markers: package.json, .git


  vim.lsp: File Watcher
  - file watching &quot;(workspace/didChangeWatchedFiles)&quot; disabled on all clients

  vim.lsp: Position Encodings
  - No buffers contain mixed position encodings

~
 Normal  health://[-]                                                                                                     checkhealth  1|34│ 1|0&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is very useful to keep an eye on what&#39;s going on in the language server mechanisms of Neovim.&lt;/p&gt;
&lt;h3 id=&quot;prevent-the-lua-undefined-global-diagnostic-message&quot;&gt;Prevent the Lua &amp;quot;undefined global&amp;quot; diagnostic message&lt;/h3&gt;
&lt;p&gt;Here&#39;s how to prevent the &amp;quot;undefined global&amp;quot; diagnostic message for &amp;quot;vim&amp;quot; appearing when editing Lua files:&lt;/p&gt;
&lt;pre class=&quot;language-lua&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-lua&quot;&gt;vim&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;lsp&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;lua&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  settings &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    Lua &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      diagnostics &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        globals &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;vim&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Having just read the example &lt;code&gt;vim.lsp.config&lt;/code&gt; code in the &lt;a href=&quot;https://neovim.io/doc/user/lsp.html#lsp-quickstart&quot;&gt;lsp-quickstart&lt;/a&gt; section of the Neovim documentation, I see it&#39;s also possible (&lt;a href=&quot;https://github.com/qmacro/dotfiles/commit/a240b0c6b604e6d188e1dea23fdce7b1f753347b&quot;&gt;and preferable, I think&lt;/a&gt;) to add this directly to the table of settings for the language server itself, i.e.:&lt;/p&gt;
&lt;pre class=&quot;language-lua&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-lua&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  cmd &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;lua-language-server&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  root_markers &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;package.json&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;.git&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  filetypes &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;lua&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  settings &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    Lua &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      diagnostics &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        globals &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;vim&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
</content>
  </entry>
  <entry>
    <title>Editing Markdown in a Neovim environment</title>
    <link href="https://qmacro.org/blog/posts/2025/06/03/editing-markdown-in-a-neovim-environment/" />
    <updated>2025-06-03T00:00:00Z</updated>
    <id>https://qmacro.org/blog/posts/2025/06/03/editing-markdown-in-a-neovim-environment/</id>
    <content type="html">&lt;p&gt;🚧 DRAFT POST 🚧&lt;/p&gt;
&lt;p&gt;I am now feeling more comfortable having made the transition from Vim to Neovim and started reconfiguring in Lua. While I had a Neovim setup that worked fine for me for editing in general, which included Markdown sources, I knew I didn&#39;t quite understand how things worked, which tools were doing what, and what features I hadn&#39;t either discovered or properly got to grips with.&lt;/p&gt;
&lt;p&gt;This post is simply an attempt to document what I&#39;ve set up specifically for Markdown, my understanding of it and the components that it comprises. I&#39;m sure I have many gaps in that understanding and in my ability to wield the tools correctly; if you have any suggestions for changes or improvements, or can fix or enhance my understanding, please let me know in the comments!&lt;/p&gt;
&lt;h2 id=&quot;caveat-lector&quot;&gt;Caveat lector&lt;/h2&gt;
&lt;p&gt;In addition to the gaps in my understanding, one can think of Neovim as an equal if not more extreme companion to Perl in the &lt;a href=&quot;https://en.wikipedia.org/wiki/Perl#Philosophy&quot;&gt;TMTOWTDI&lt;/a&gt; department. The setup I describe in this post is just one way of doing things; one particular combination of tools, one way I have decided to use them, and one way of setting them up.&lt;/p&gt;
&lt;p&gt;There are other options, so don&#39;t take what you read here as definitive.&lt;/p&gt;
&lt;p&gt;For example, I know that the Markdownlint tool can &lt;a href=&quot;https://github.com/DavidAnson/markdownlint?tab=readme-ov-file#fixing&quot;&gt;automatically fix certain issues&lt;/a&gt;, such as &lt;a href=&quot;https://github.com/markdownlint/markdownlint/blob/main/docs/RULES.md#md004---unordered-list-style&quot;&gt;MD004 - Unordered list style&lt;/a&gt;, but (a) my approach is to get the tool to nag me so I learn to get things right by having to correct issues myself, and (b) I&#39;m not sure yet how I can use the &lt;code&gt;--fix&lt;/code&gt; option in the context of Neovim as &lt;a href=&quot;https://qmacro.org/blog/posts/2021/05/13/notes-on-markdown-linting-part-1/#:~:text=fix%20basic%20errors%20(does%20not%20work%20with%20STDIN)&quot;&gt;it doesn&#39;t work in the context of STDIN&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Another example relates to &lt;a href=&quot;https://prettier.io/docs/&quot;&gt;Prettier&lt;/a&gt;, an opinionated code formatter that supports Markdown. I know that folks use Prettier in conjunction with Neovim (often via the &lt;a href=&quot;https://github.com/stevearc/conform.nvim&quot;&gt;conform plugin&lt;/a&gt;) but I will get to that in the next iteration of this Markdown editing setup.&lt;/p&gt;
&lt;h2 id=&quot;configuration&quot;&gt;Configuration&lt;/h2&gt;
&lt;p&gt;My general Neovim configuration is based on some of the early videos in the excellent &lt;a href=&quot;https://www.youtube.com/playlist?list=PLep05UYkc6wTyBe7kPjQFWVXTlhKeQejM&quot;&gt;Advent of Neovim&lt;/a&gt; series from TJ DeVries, and I&#39;m also using the &lt;a href=&quot;https://neovim.io/doc/user/starting.html#%24NVIM_APPNAME&quot;&gt;NVIM_APPNAME&lt;/a&gt; feature to split up my config and have different experimental instances, which I switch between with a function that &lt;a href=&quot;https://github.com/qmacro/dotfiles/blob/73e27bb3e76067e9bf21be873ad7c131a0ddf40b/bashrc.d/70-functions.sh#L95-L114&quot;&gt;looks like&lt;/a&gt; this:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function-name function&quot;&gt;nvc&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;token builtin class-name&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;token assign-left variable&quot;&gt;configdir&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;nvim-configs

  &lt;span class=&quot;token builtin class-name&quot;&gt;local&lt;/span&gt; config
  &lt;span class=&quot;token assign-left variable&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;&lt;span class=&quot;token variable&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;$(&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;find&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&lt;span class=&quot;token environment constant&quot;&gt;$HOME&lt;/span&gt;/.config/&lt;span class=&quot;token variable&quot;&gt;$configdir&lt;/span&gt;&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;&#92;&lt;/span&gt;
    &lt;span class=&quot;token parameter variable&quot;&gt;-mindepth&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;&#92;&lt;/span&gt;
    &lt;span class=&quot;token parameter variable&quot;&gt;-maxdepth&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;&#92;&lt;/span&gt;
    &lt;span class=&quot;token parameter variable&quot;&gt;-printf&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;%f&lt;span class=&quot;token entity&quot; title=&quot;&#92;n&quot;&gt;&#92;n&lt;/span&gt;&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;&#92;&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; fzf
  &lt;span class=&quot;token variable&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&quot;&lt;/span&gt;

  &lt;span class=&quot;token builtin class-name&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token assign-left variable&quot;&gt;NVIM_APPNAME&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;&lt;span class=&quot;token variable&quot;&gt;$configdir&lt;/span&gt;/&lt;span class=&quot;token variable&quot;&gt;${config&lt;span class=&quot;token operator&quot;&gt;:-&lt;/span&gt;nvim}&lt;/span&gt;&quot;&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;sed&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-E&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;s#(NVIM_APPNAME)=.*$#&#92;1=&#39;&lt;/span&gt;&quot;&lt;span class=&quot;token variable&quot;&gt;$NVIM_APPNAME&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;&#39;#&#39; &lt;span class=&quot;token environment constant&quot;&gt;$HOME&lt;/span&gt;/dotfiles/bashrc.d/54-globals-nvim.sh

  nvim &quot;&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$@&lt;/span&gt;&quot;

&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and track which &amp;quot;flavour&amp;quot; I have set &lt;a href=&quot;https://github.com/qmacro/dotfiles/commit/c40e76516ef162b01ad0aee1d7fba45449329888&quot;&gt;in my shell prompt&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;the-tools&quot;&gt;The tools&lt;/h2&gt;
&lt;p&gt;Beyond Neovim itself, I&#39;m using a number of tools which provide different features and facilities for my Markdown editing needs.&lt;/p&gt;
&lt;h3 id=&quot;editorconfig&quot;&gt;EditorConfig&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://editorconfig.org/&quot;&gt;EditorConfig&lt;/a&gt; is a file format specification that describes the content of configuration files, the use of which helps to maintain consistent coding styles for multiple developers working on the same files across various editors and IDEs.&lt;/p&gt;
&lt;p&gt;Neovim has &lt;a href=&quot;https://neovim.io/doc/user/editorconfig.html&quot;&gt;native support for EditorConfig&lt;/a&gt; and all that&#39;s needed is a configuration file with the required coding style aspects. I think of the EditorConfig tool as one that is built in to Neovim and controlled by configuration.&lt;/p&gt;
&lt;h3 id=&quot;marksman&quot;&gt;Marksman&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/artempyanykh/marksman&quot;&gt;Marksman&lt;/a&gt; is a &lt;a href=&quot;https://en.wikipedia.org/wiki/Language_Server_Protocol&quot;&gt;language server&lt;/a&gt; for Markdown that provides various language server protocol (LSP) features for Markdown content, such as completion, goto definition, diagnostics and more.&lt;/p&gt;
&lt;p&gt;Neovim has &lt;a href=&quot;https://neovim.io/doc/user/lsp.html&quot;&gt;native LSP support&lt;/a&gt; in that it can act as a client to various language servers, and exposes a Lua framework (via &lt;code&gt;vim.lsp&lt;/code&gt;) that makes the facililities offered by language servers available.&lt;/p&gt;
&lt;p&gt;I think of the Marksman tool as a facility that is separate from Neovim but not anything I would (or can) use directly; rather, something I use &amp;quot;remotely&amp;quot; from within Neovim. Like most language servers, Marksman has features that allow me to navigate and manipulate my Markdown sources, and also can surface issues (in the form of warnings and errors, for example) that can be then displayed in Neovim as &lt;a href=&quot;https://neovim.io/doc/user/diagnostic.html&quot;&gt;diagnostics&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;markdownlint&quot;&gt;Markdownlint&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/markdownlint/markdownlint&quot;&gt;Markdownlint&lt;/a&gt; is a linting tool to check Markdown content for stylistic and other issues; there are many &lt;a href=&quot;https://github.com/markdownlint/markdownlint/blob/main/docs/RULES.md&quot;&gt;rules&lt;/a&gt; that it will base the checking on, rules that can be customised or turned off entirely, depending on what you want. As an example, I normally turn off the &lt;a href=&quot;https://github.com/markdownlint/markdownlint/blob/main/docs/RULES.md#md013---line-length&quot;&gt;MD013 - Line length&lt;/a&gt; rule as I like to write long lines in my Markdown sources.&lt;/p&gt;
&lt;p&gt;Differing again to EditorConfig and Marksman, Markdownlint is an external tool that I can (and sometimes do) run on the command line directly, pointing it at Markdown files ... but something that I can harness from within Neovim too and capture (and display) the output as &lt;a href=&quot;https://neovim.io/doc/user/diagnostic.html&quot;&gt;diagnostics&lt;/a&gt;. I use the &lt;a href=&quot;https://github.com/mfussenegger/nvim-lint&quot;&gt;mfussenegger/nvim-lint&lt;/a&gt; asynchronous linter plugin for this harness as it (to quote the README) &amp;quot;spawns linters, parses their output, and reports the results via the &lt;code&gt;vim.diagnostic&lt;/code&gt; module&amp;quot;.&lt;/p&gt;
&lt;h3 id=&quot;treesitter&quot;&gt;Treesitter&lt;/h3&gt;
&lt;p&gt;As with EditorConfig, Neovim also has built-in support for [Treesitter], and (beyond the parser for Markdown itself) there&#39;s not really anything specific to editing Markdown. That said, I have added configuration for &lt;a href=&quot;https://neovim.io/doc/user/treesitter.html&quot;&gt;Neovim&#39;s built-in support for Treesitter&lt;/a&gt; listing the languages for which I want Treesitter parsers automatically installed. This is so I can get &lt;a href=&quot;https://qmacro.org/blog/posts/2025/06/03/editing-markdown-in-a-neovim-environment/#syntax-highlighting-of-code-within-code-blocks&quot;&gt;syntax highlighting in fenced code blocks&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;the-combined-effect&quot;&gt;The combined effect&lt;/h2&gt;
&lt;p&gt;The combination of each of these tools comes together for a comfortable overall effect, making my Markdown editing life easier.&lt;/p&gt;
&lt;p&gt;In no particular order, here is a run down of the features I&#39;m taking advantage of, which tool supplies them, and how I use them. Note that beyond those features listed here, the tools offer more.&lt;/p&gt;
&lt;h3 id=&quot;automatic-trimming-of-trailing-whitespace&quot;&gt;Automatic trimming of trailing whitespace&lt;/h3&gt;
&lt;p&gt;I use EditorConfig on other projects so it was a natural fit here for my Markdown sources. With &lt;code&gt;trim_trailing_whitespace&lt;/code&gt; set to &lt;code&gt;true&lt;/code&gt; I know that NeoVim will do exactly that for me when I save. Here&#39;s the entire content of the &lt;code&gt;.editorconfig&lt;/code&gt; file in this blog repository:&lt;/p&gt;
&lt;pre class=&quot;language-toml&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-toml&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;*&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;md&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;token key property&quot;&gt;trim_trailing_whitespace&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;token key property&quot;&gt;insert_final_newline&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;syntax-highlighting-of-code-within-code-blocks&quot;&gt;Syntax highlighting of code within code blocks&lt;/h3&gt;
&lt;p&gt;Often in my Markdown sources I&#39;ll use &lt;a href=&quot;https://www.markdownguide.org/extended-syntax/#fenced-code-blocks&quot;&gt;fenced code blocks&lt;/a&gt; to include code samples. If I specify the language of the fenced code block, and have the requisite Treesitter parser installed, I&#39;ll get language-aware syntax highlighting for the content within the block, which is really lovely. This is what the relevant section of the Treesitter configuration looks like (in &lt;code&gt;lua/plugins/treesitter.lua&lt;/code&gt;):&lt;/p&gt;
&lt;pre class=&quot;language-lua&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-lua&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&quot;nvim-treesitter/nvim-treesitter&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    build &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;:TSUpdate&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    config &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
      require &lt;span class=&quot;token string&quot;&gt;&#39;nvim-treesitter.configs&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setup&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        ensure_installed &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;c&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;lua&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;vim&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;vimdoc&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;query&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;markdown&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;markdown_inline&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;bash&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;javascript&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;toml&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        auto_install &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;-- ...&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So when for example I add a fenced code block containing Bash, JavaScript or Lua for example, the block contents will be nicely highlighted (I added the &lt;code&gt;&amp;quot;toml&amp;quot;&lt;/code&gt; entry just now so I could get syntax highlighting for the TOML block I just added earlier to this post).&lt;/p&gt;
&lt;h3 id=&quot;an-overview-of-section-headings&quot;&gt;An overview of section headings&lt;/h3&gt;
&lt;p&gt;TODO: add basic use of &lt;code&gt;gO&lt;/code&gt; too!&lt;/p&gt;
&lt;p&gt;The Marksman language server presents &lt;a href=&quot;https://www.markdownguide.org/basic-syntax/#headings&quot;&gt;Markdown headings&lt;/a&gt; as &lt;a href=&quot;https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#textDocument_documentSymbol&quot;&gt;document symbols&lt;/a&gt;. This means I can get a quick overview of the current document&#39;s sections, and also jump to them. With the &lt;a href=&quot;https://neovim.io/doc/user/lsp.html#vim.lsp.buf.document_symbol()&quot;&gt;vim.lsp.buf.document_symbol()&lt;/a&gt; function (invoked in command mode with &lt;code&gt;lua vim.lsp.buf.document_symbol()&lt;/code&gt;) I can have them displayed in Neovim&#39;s location list:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://qmacro.org/images/2025/06/document-symbols-in-location-list.png&quot; alt=&quot;screenshot of location list containing three document symbols, each of which is a heading in the document&quot;&gt;&lt;/p&gt;
&lt;p&gt;I&#39;m also starting to use &lt;a href=&quot;https://github.com/nvim-telescope/telescope.nvim&quot;&gt;Telescope&lt;/a&gt;, the &amp;quot;highly extendable fuzzy finder over lists&amp;quot;. Telescope has a built-in &lt;a href=&quot;https://github.com/nvim-telescope/telescope.nvim?tab=readme-ov-file#pickers&quot;&gt;picker&lt;/a&gt; for such document symbols too, so I can also invoke &lt;code&gt;Telescope lsp_document_symbols&lt;/code&gt; in command mode for a similar result, from the same Marksman language server source:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://qmacro.org/images/2025/06/document-symbols-in-telescope.png&quot; alt=&quot;screenshot of a Telescope picker containing three document symbols, each of which is a heading in the document&quot;&gt;&lt;/p&gt;
&lt;p&gt;Navigating through these and selecting one will then take me to that selected heading in the document.&lt;/p&gt;
&lt;h3 id=&quot;diagnostics-in-general&quot;&gt;Diagnostics in general&lt;/h3&gt;
&lt;h3 id=&quot;diagnostic-details&quot;&gt;Diagnostic details&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://qmacro.org/images/2025/06/diagnostic-link-to-non-existent-document.png&quot; alt=&quot;TODO&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
</content>
  </entry>
  <entry>
    <title>Point free coding and function composition</title>
    <link href="https://qmacro.org/blog/posts/2025/05/15/point-free-coding-and-function-composition/" />
    <updated>2025-05-15T00:00:00Z</updated>
    <id>https://qmacro.org/blog/posts/2025/05/15/point-free-coding-and-function-composition/</id>
    <content type="html">&lt;p&gt;While preparing for tomorrow&#39;s &lt;a href=&quot;https://www.youtube.com/watch?v=8eKWxP3F6xc&amp;amp;list=PL6RpkC85SLQB-0sK7KSRwCc2gdtlZDIkL&amp;amp;index=5&quot;&gt;fifth and final episode&lt;/a&gt; in our current Hands-on SAP Dev series &lt;a href=&quot;https://www.youtube.com/playlist?list=PL6RpkC85SLQB-0sK7KSRwCc2gdtlZDIkL&quot;&gt;Let&#39;s explore functional programming&lt;/a&gt; I was thinking about how point free coding and composition can be found in many places, not just in functional libraries and languages.&lt;/p&gt;
&lt;p&gt;We&#39;ve been learning about functional programming concepts mainly with JavaScript, sometimes making use of features from the excellent &lt;a href=&quot;https://ramdajs.com&quot;&gt;Ramda&lt;/a&gt; library. For data, we&#39;ve mostly used &lt;a href=&quot;https://github.com/qmacro/northbreeze&quot;&gt;Northbreeze&lt;/a&gt;, a sort of &amp;quot;reduced&amp;quot; &lt;a href=&quot;https://services.odata.org/V4/Northwind/Northwind.svc/&quot;&gt;Northwind&lt;/a&gt;. There&#39;s an instance of the OData V4 service &lt;a href=&quot;https://developer-challenge.cfapps.eu10.hana.ondemand.com/odata/v4/northbreeze&quot;&gt;available&lt;/a&gt; for the time being, and I&#39;ll use that to explore in this post too, in particular the &lt;a href=&quot;https://developer-challenge.cfapps.eu10.hana.ondemand.com/odata/v4/northbreeze/Products&quot;&gt;Products&lt;/a&gt; entityset.&lt;/p&gt;
&lt;h2 id=&quot;the-basic-concepts&quot;&gt;The basic concepts&lt;/h2&gt;
&lt;p&gt;With point free coding, also known as &lt;a href=&quot;https://en.wikipedia.org/wiki/Tacit_programming&quot;&gt;tacit programming&lt;/a&gt;, data and behaviour are separate, a fundamental philosophy of the functional programming style. Behaviour is defined in the form of functions, building blocks that are used on their own or composed together.&lt;/p&gt;
&lt;p&gt;In writing those function declarations, the data that they will operate on is not specified. Instead, when the time is right, data is passed through to the function(s), often in a flowing approach through a series of them which are chained together.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;There are more formal definitions and interpretations of point free coding, but at this level of exploration we can be comfortable thinking of the concepts as described here.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;exploring-in-jq&quot;&gt;Exploring in jq&lt;/h2&gt;
&lt;p&gt;It&#39;s no secret that I&#39;m a &lt;a href=&quot;https://qmacro.org/tags/jq/&quot;&gt;fan&lt;/a&gt; of &lt;a href=&quot;https://jqlang.org&quot;&gt;jq&lt;/a&gt;, a fully formed programming language that exhibits a predominantly functional paradigm, as well as being a powerful way to manipulate JSON with ad hoc expressions.&lt;/p&gt;
&lt;p&gt;There are &lt;a href=&quot;https://developer-challenge.cfapps.eu10.hana.ondemand.com/odata/v4/northbreeze/Products/$count&quot;&gt;77&lt;/a&gt; products in Northbreeze. Let&#39;s have a look at the first one with:&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;jq &lt;span class=&quot;token string&quot;&gt;&#39;.value|first&#39;&lt;/span&gt; products.json&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;which emits:&lt;/p&gt;
&lt;pre class=&quot;language-json&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;ProductID&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;ProductName&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Chai&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;QuantityPerUnit&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;10 boxes x 20 bags&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;UnitPrice&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;18&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;Category_CategoryID&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;Supplier_SupplierID&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;UnitsInStock&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;39&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;UnitsOnOrder&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;ReorderLevel&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;Discontinued&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;In the &lt;code&gt;jq&lt;/code&gt; filter here (and elsewhere in this post) &lt;code&gt;.value&lt;/code&gt; is an artifact of the OData V4 JSON representation of the data, not anything inherently required by &lt;code&gt;jq&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;discontinued-products&quot;&gt;Discontinued products&lt;/h3&gt;
&lt;p&gt;Defining a function that discards anything that&#39;s not discontinued, and using that to map over the products, like this:&lt;/p&gt;
&lt;pre class=&quot;language-jq&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-jq&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;justDiscontinued&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token c-style-function function&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Discontinued&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;value
&lt;span class=&quot;token operator pipe&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token c-style-function function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;justDiscontinued&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token operator pipe&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ProductName&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;gives us:&lt;/p&gt;
&lt;pre class=&quot;language-text&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&quot;Chef Anton&#39;s Gumbo Mix&quot;
&quot;Mishi Kobe Niku&quot;
&quot;Alice Mutton&quot;
&quot;Guaraná Fantástica&quot;
&quot;Rössle Sauerkraut&quot;
&quot;Thüringer Rostbratwurst&quot;
&quot;Singaporean Hokkien Fried Mee&quot;
&quot;Perth Pasties&quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Already we can start to see how the product data is nowhere to be seen in this &lt;code&gt;jq&lt;/code&gt; filter. It&#39;s implicit, and sent through the chain (by means of the &lt;a href=&quot;https://jqlang.org/manual/#pipe&quot;&gt;pipe operator&lt;/a&gt;) when the expression is evaluated.&lt;/p&gt;
&lt;p&gt;Even the definition of &lt;code&gt;justDiscontinued&lt;/code&gt; exhibits the idea of tacitness, in that there&#39;s no indication of what this function, or its body, is to work on.&lt;/p&gt;
&lt;h3 id=&quot;stock-information&quot;&gt;Stock information&lt;/h3&gt;
&lt;p&gt;Rather than that deliberately simple iterator and property expression at the end (&lt;code&gt;.[].ProductName&lt;/code&gt;), let&#39;s add a further filter to the chain:&lt;/p&gt;
&lt;pre class=&quot;language-jq&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-jq&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;justDiscontinued&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token c-style-function function&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Discontinued&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;stockInfo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ProductName&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;UnitsInStock&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;value
&lt;span class=&quot;token operator pipe&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token c-style-function function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;justDiscontinued&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token operator pipe&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token c-style-function function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;stockInfo&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This produces:&lt;/p&gt;
&lt;pre class=&quot;language-json&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;Chef Anton&#39;s Gumbo Mix&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;Mishi Kobe Niku&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;29&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;Alice Mutton&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;Guaraná Fantástica&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;20&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;Rössle Sauerkraut&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;26&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;Thüringer Rostbratwurst&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;Singaporean Hokkien Fried Mee&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;26&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;Perth Pasties&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There are a couple of improvements we can make here. The first is to &lt;a href=&quot;https://jqlang.org/manual/#add&quot;&gt;add&lt;/a&gt; the elements of the array together:&lt;/p&gt;
&lt;pre class=&quot;language-jq&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-jq&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;justDiscontinued&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token c-style-function function&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Discontinued&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;stockInfo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ProductName&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;UnitsInStock&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;value
&lt;span class=&quot;token operator pipe&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token c-style-function function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;justDiscontinued&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token operator pipe&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token c-style-function function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;stockInfo&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token operator pipe&quot;&gt;|&lt;/span&gt; add&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;which reshapes the output to look like this:&lt;/p&gt;
&lt;pre class=&quot;language-json&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;Chef Anton&#39;s Gumbo Mix&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;Mishi Kobe Niku&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;29&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;Alice Mutton&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;Guaraná Fantástica&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;Rössle Sauerkraut&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;26&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;Thüringer Rostbratwurst&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;Singaporean Hokkien Fried Mee&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;26&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;Perth Pasties&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;an-alternative-way-to-chain-mappings&quot;&gt;An alternative way to chain mappings&lt;/h3&gt;
&lt;p&gt;The second improvement is to think about how we have two chained &lt;code&gt;map&lt;/code&gt; expressions; this is neat and pleasing on the eye, and helps us understand how data flows through, especially when it forces us to think about what &lt;em&gt;shape&lt;/em&gt; that data is (an array of objects).&lt;/p&gt;
&lt;p&gt;But we can just as easily (and more efficiently) write the chain like this:&lt;/p&gt;
&lt;pre class=&quot;language-jq&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-jq&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;justDiscontinued&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token c-style-function function&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Discontinued&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;stockInfo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ProductName&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;UnitsInStock&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;value
&lt;span class=&quot;token operator pipe&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token c-style-function function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;justDiscontinued&lt;span class=&quot;token operator pipe&quot;&gt;|&lt;/span&gt;stockInfo&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token operator pipe&quot;&gt;|&lt;/span&gt; add&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;which produces exactly the same result, and is possibly an even better visualisation of what tacit expressions look like.&lt;/p&gt;
&lt;h3 id=&quot;average-calculation&quot;&gt;Average calculation&lt;/h3&gt;
&lt;p&gt;In fact, talking of &lt;code&gt;add&lt;/code&gt;, how about this succinct way of emitting the average unit price of all products:&lt;/p&gt;
&lt;pre class=&quot;language-jq&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-jq&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;value
&lt;span class=&quot;token operator pipe&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token c-style-function function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;UnitPrice&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token operator pipe&quot;&gt;|&lt;/span&gt; add &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; length&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This produces the value &lt;code&gt;28.866363636363637&lt;/code&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Incidentally we can check and compare that to what Northbreeze tells us, using an OData V4 &lt;a href=&quot;https://github.com/qmacro/odata-v4-and-cap/blob/main/slides.md#data-aggregation&quot;&gt;data aggregation&lt;/a&gt; feature that is supported out of the box with CAP (see the &lt;a href=&quot;https://cap.cloud.sap/docs/advanced/odata#aggregation-methods&quot;&gt;Aggregation Methods&lt;/a&gt; section of the OData APIs topic in Capire); the resource at &lt;a href=&quot;https://developer-challenge.cfapps.eu10.hana.ondemand.com/odata/v4/northbreeze/Products?$apply=aggregate(UnitPrice%20with%20average%20as%20AvgPrice)&quot;&gt;this URL&lt;/a&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-url&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-url&quot;&gt;&lt;span class=&quot;token scheme&quot;&gt;https&lt;span class=&quot;token scheme-delimiter&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token authority&quot;&gt;&lt;span class=&quot;token authority-delimiter&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;token host&quot;&gt;developer-challenge.cfapps.eu10.hana.ondemand.com&lt;/span&gt;&lt;/span&gt;
 /odata/v4/northbreeze/Products
 &lt;span class=&quot;token query&quot;&gt;&lt;span class=&quot;token query-delimiter&quot;&gt;?&lt;/span&gt;&lt;/span&gt;
 $apply=aggregate(UnitPrice with average as AvgPrice)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;is returned in a JSON representation, like this:&lt;/p&gt;
&lt;pre class=&quot;language-json&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;token property&quot;&gt;&quot;@odata.context&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;$metadata#Products(AvgPrice)&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
 &lt;span class=&quot;token property&quot;&gt;&quot;value&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
   &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;token property&quot;&gt;&quot;AvgPrice@odata.type&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;#Decimal&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
     &lt;span class=&quot;token property&quot;&gt;&quot;AvgPrice&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;28.8663636363636&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
     &lt;span class=&quot;token property&quot;&gt;&quot;@odata.id&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token null keyword&quot;&gt;null&lt;/span&gt;
   &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
 &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;examining-the-data-flow&quot;&gt;Examining the data flow&lt;/h3&gt;
&lt;p&gt;What&#39;s even more wonderful about this is how &lt;code&gt;jq&lt;/code&gt; flows the data through the final pipe ... both into &lt;code&gt;add&lt;/code&gt; &lt;em&gt;and also into &lt;code&gt;length&lt;/code&gt;&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;This is not just a thing of beauty, but also a great reason for us to stop and think for a moment what&#39;s happening here. I&#39;ll use just the first three products to visualise here, and temporarily remove the last part of the chain:&lt;/p&gt;
&lt;pre class=&quot;language-jq&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-jq&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;token operator pipe&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token c-style-function function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;UnitPrice&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So &lt;code&gt;.value[0:3]&lt;/code&gt; emits an array of the &lt;a href=&quot;https://developer-challenge.cfapps.eu10.hana.ondemand.com/odata/v4/northbreeze/Products?$top=3&quot;&gt;first three products&lt;/a&gt; with all their properties, which in turn is piped into &lt;code&gt;map(.UnitPrice)&lt;/code&gt; which produces:&lt;/p&gt;
&lt;pre class=&quot;language-json&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;token number&quot;&gt;18&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token number&quot;&gt;19&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then with &lt;code&gt;| add / length&lt;/code&gt; this array is then sent to both &lt;code&gt;add&lt;/code&gt; and &lt;code&gt;length&lt;/code&gt;, in parallel, and then the output of each is combined with the &lt;code&gt;/&lt;/code&gt; divide operator:&lt;/p&gt;
&lt;pre class=&quot;language-text&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;
                 +--&gt;  add   --&gt; 47 --+
                 |                    |
[ 18, 19, 10 ] --+                    +--&gt; / --&gt; 15.6666666
                 |                    |
                 +--&gt; length --&gt; 3  --+&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;the-shell&quot;&gt;The shell&lt;/h2&gt;
&lt;p&gt;Unix shells in general, and in particular &lt;a href=&quot;https://en.wikipedia.org/wiki/Bash_(Unix_shell)&quot;&gt;my favourite flavour&lt;/a&gt;, exhibit similar point free and functional chain features.&lt;/p&gt;
&lt;p&gt;Using the same data set, we can produce Unix shell friendly&lt;a href=&quot;https://qmacro.org/blog/posts/2025/05/15/point-free-coding-and-function-composition/#footnote-1&quot;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; output like this:&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;jq &lt;span class=&quot;token parameter variable&quot;&gt;-r&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;.value[] | [.UnitPrice, .ProductName] | @tsv&#39;&lt;/span&gt; products.json&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This produces:&lt;/p&gt;
&lt;pre class=&quot;language-text&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;18     Chai
19     Chang
10     Aniseed Syrup
22     Chef Anton&#39;s Cajun Seasoning
21.35  Chef Anton&#39;s Gumbo Mix
25     Grandma&#39;s Boysenberry Spread
6      Konbu
23.25  Tofu
15.5   Genen Shouyu
...&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The shell&#39;s &lt;a href=&quot;https://en.wikipedia.org/wiki/Standard_streams&quot;&gt;standard streams&lt;/a&gt; concept (STDIN / STDOUT etc), make it easy for us to use regular utilities in their natural environment, i.e. in a point free style, where no data is specified, but is implicit and supplied via STDIN.&lt;/p&gt;
&lt;p&gt;How about working out the top three most expensive products?&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;jq &lt;span class=&quot;token parameter variable&quot;&gt;-r&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;.value[] | [.UnitPrice, .ProductName] | @tsv&#39;&lt;/span&gt; products.json &lt;span class=&quot;token punctuation&quot;&gt;&#92;&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;sort&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-nr&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;&#92;&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-3&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here we are:&lt;/p&gt;
&lt;pre class=&quot;language-text&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;263.5   Côte de Blaye
123.79  Thüringer Rostbratwurst
97      Mishi Kobe Niku&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Yup, &lt;a href=&quot;https://developer-challenge.cfapps.eu10.hana.ondemand.com/odata/v4/northbreeze/Products?$select=ProductName,UnitPrice&amp;amp;$orderby=UnitPrice%20desc&amp;amp;$top=3&quot;&gt;that computes&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We can even &#39;compose&#39; these two &#39;functions&#39; (&lt;code&gt;sort&lt;/code&gt; and &lt;code&gt;head&lt;/code&gt;) like this, again, with no data in sight:&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token function-name function&quot;&gt;topthree&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;sort&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-nr&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-3&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and then use that higher level building block:&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;jq &lt;span class=&quot;token parameter variable&quot;&gt;-r&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;.value[] | [.UnitPrice, .ProductName] | @tsv&#39;&lt;/span&gt; products.json &lt;span class=&quot;token punctuation&quot;&gt;&#92;&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; topthree&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;to-javascript-and-beyond&quot;&gt;To JavaScript and beyond&lt;/h2&gt;
&lt;p&gt;Well, we&#39;ve already started from &amp;quot;beyond&amp;quot; JavaScript, but I guess what I was trying to say with this section heading is that these concepts are to be found in many places. Not least JavaScript, as well as of course in languages more strongly focused on the functional programming paradigm.&lt;/p&gt;
&lt;p&gt;Hopefully I&#39;ve illustrated some general features of these two concepts to show how they allow, even encourage programming that favours:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;thinking about behaviours separately from data&lt;/li&gt;
&lt;li&gt;building new functions from other functions&lt;/li&gt;
&lt;li&gt;constructing generic blocks of code&lt;/li&gt;
&lt;li&gt;coding at a high level&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;This last point has got me thinking that the combination of these concepts lends itself well to being an alternative to the current &amp;quot;low code&amp;quot; approaches. But that&#39;s perhaps a digression for another time.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This type of approach to programming is facilitated by many of the features we&#39;ve seen in the &lt;a href=&quot;https://www.youtube.com/playlist?list=PL6RpkC85SLQB-0sK7KSRwCc2gdtlZDIkL&quot;&gt;Let&#39;s explore functional programming&lt;/a&gt; series, such as currying, partial application and higher order functions, key items in a programming toolset for using, combining and building new discrete and data-free functions.&lt;/p&gt;
&lt;p&gt;Turning to a more mainstream programming language like JavaScript allows me to talk about an important aspect of functions in this context.&lt;/p&gt;
&lt;h3 id=&quot;data-last&quot;&gt;Data last&lt;/h3&gt;
&lt;p&gt;That important aspect is the order of arguments in function definitions. If we are to embrace all the features that we&#39;ve seen in this series and expand our collection of building blocks even further, we need to be aware of where the data comes in the list of arguments (or &amp;quot;points&amp;quot;).&lt;/p&gt;
&lt;p&gt;It comes &lt;em&gt;last&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Take a look at any of the functions in Ramda that process data, specifically lists, for example. Take &lt;a href=&quot;https://ramdajs.com/docs/#filter&quot;&gt;filter&lt;/a&gt;, &lt;a href=&quot;https://ramdajs.com/docs/#head&quot;&gt;head&lt;/a&gt; or &lt;a href=&quot;https://ramdajs.com/docs/#reduce&quot;&gt;reduce&lt;/a&gt;. Heck, take &lt;a href=&quot;https://ramdajs.com/docs/#take&quot;&gt;take&lt;/a&gt; (sorry, couldn&#39;t resist).&lt;/p&gt;
&lt;p&gt;Each one of them expects the data to be supplied via the last argument. Let&#39;s examine &lt;a href=&quot;https://ramdajs.com/docs/#reduce&quot;&gt;reduce&lt;/a&gt; as representative of how this looks. First, the signature is:&lt;/p&gt;
&lt;pre class=&quot;language-text&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;((a, b) → a) → a → [b] → a&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So &lt;code&gt;reduce&lt;/code&gt; expects, in this order:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;((a, b) → a&lt;/code&gt; the reducer function&lt;/li&gt;
&lt;li&gt;&lt;code&gt;a&lt;/code&gt; the starting value for the accumulator&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[b]&lt;/code&gt; the data (a list of values)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;and produces:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;a&lt;/code&gt; some value&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;This is, by the way, brilliantly explained by Brian Lonsdorf in a now-classic talk - see the &lt;a href=&quot;https://qmacro.org/blog/posts/2025/05/15/point-free-coding-and-function-composition/#further-material&quot;&gt;Further material&lt;/a&gt; section for a link.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;a-contrived-example&quot;&gt;A contrived example&lt;/h3&gt;
&lt;p&gt;This &amp;quot;data last&amp;quot; approach, combined with &lt;a href=&quot;https://en.wikipedia.org/wiki/Closure_(computer_programming)&quot;&gt;closures&lt;/a&gt;, makes currying and partial application not only possible, but powerful.&lt;/p&gt;
&lt;p&gt;Let&#39;s examine what this means with another slightly contrived example, focusing on the &lt;a href=&quot;https://developer-challenge.cfapps.eu10.hana.ondemand.com/odata/v4/northbreeze/Categories/7?$expand=Products&quot;&gt;products in the Produce (dried fruit and bean curd) category&lt;/a&gt;, this time in JavaScript. I&#39;ll use some functions from &lt;a href=&quot;https://ramdajs.com&quot;&gt;Ramda&lt;/a&gt;, mostly to illustrate the mechanisms in a &amp;quot;purer&amp;quot; form than the equivalents in standard JavaScript where the equivalent functions are &amp;quot;attached&amp;quot; to the &lt;code&gt;Array&lt;/code&gt; prototype.&lt;/p&gt;
&lt;p&gt;Assuming the entire JSON representation of the &lt;a href=&quot;https://developer-challenge.cfapps.eu10.hana.ondemand.com/odata/v4/northbreeze/Products&quot;&gt;Products entityset&lt;/a&gt; is available in a file called &lt;code&gt;products.json&lt;/code&gt;, let&#39;s start like this:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; prop &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;ramda&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; products &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;./products.json&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;value&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ramda&#39;s &lt;a href=&quot;https://ramdajs.com/docs/#prop&quot;&gt;prop&lt;/a&gt; is a convenient function for getting the value of a property.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;It&#39;s worth pausing here to think about how this &lt;code&gt;prop&lt;/code&gt; function might look in its basic form, as it could help to further cement the concepts of currying and partial application (and closures, by the by). Given an object such as &lt;a href=&quot;https://developer-challenge.cfapps.eu10.hana.ondemand.com/odata/v4/northbreeze/Products/1&quot;&gt;the Chai product&lt;/a&gt; (see &lt;a href=&quot;https://qmacro.org/blog/posts/2025/05/15/point-free-coding-and-function-composition/#chai&quot;&gt;earlier&lt;/a&gt;), if we want a function with which to retrieve the value of a property, we need both the object and the property name, which we can express with a definition such as &lt;code&gt;myprop = p =&amp;gt; o =&amp;gt; o[p]&lt;/code&gt;. One difference between &lt;code&gt;myprop&lt;/code&gt; here and &lt;code&gt;prop&lt;/code&gt; is that the latter, being a Ramda function, is curried by default.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;OK. Suppose we wanted to determine the products in the Produce category (the category ID is 7) and emit a list of their names.&lt;/p&gt;
&lt;p&gt;The &amp;quot;imperative&amp;quot;, or at least direct way of approaching this might look like this:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
  products
    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Category_CategoryID &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;prop&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;ProductName&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This produces what we want:&lt;/p&gt;
&lt;pre class=&quot;language-json&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;token string&quot;&gt;&quot;Uncle Bob&#39;s Organic Dried Pears&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token string&quot;&gt;&quot;Tofu&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token string&quot;&gt;&quot;Rössle Sauerkraut&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token string&quot;&gt;&quot;Manjimup Dried Apples&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token string&quot;&gt;&quot;Longlife Tofu&quot;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;but is a little rigid. It&#39;s not &lt;em&gt;bad&lt;/em&gt;, and JavaScript&#39;s native &lt;code&gt;filter&lt;/code&gt; and &lt;code&gt;map&lt;/code&gt; functions work well. But we&#39;ll switch to the Ramda equivalents to experiment a little bit more, and to explore the point free and partial application concepts further, as well as working our way towards a nice (if not a little simple) composition.&lt;/p&gt;
&lt;h3 id=&quot;building-blocks&quot;&gt;Building blocks&lt;/h3&gt;
&lt;p&gt;Let&#39;s feel our way through constructing some high level building blocks (in the form of functions, of course).&lt;/p&gt;
&lt;p&gt;First, how about this. I&#39;ll add &lt;a href=&quot;https://ramdajs.com/docs/#curry&quot;&gt;curry&lt;/a&gt; and &lt;a href=&quot;https://ramdajs.com/docs/#filter&quot;&gt;filter&lt;/a&gt; to the list of explicitly imported functions (&lt;code&gt;const { prop, curry, filter } = require(&#39;ramda&#39;)&lt;/code&gt;), and use it when defining a function thus:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; justCategory &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;curry&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;n&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; x&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;prop&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Category_CategoryID&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; n&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Because the function is curried, we can now comfortably partially apply it and build other functions with it:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; onlyProduce &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;justCategory&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we can use this as follows:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;onlyProduce&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; products&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;prop&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;ProductName&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Not a huge change, but right now it feels weird because we&#39;re sort of in a hybrid state - a &amp;quot;pure&amp;quot; &lt;code&gt;filter&lt;/code&gt; function from Ramda but then the &lt;code&gt;Array.prototype.map&lt;/code&gt; function tacked on at the end. Moreover, consider where that &lt;code&gt;products&lt;/code&gt; data reference is currently: it&#39;s sort of stuck, embedded within the entire expression.&lt;/p&gt;
&lt;p&gt;If we add &lt;code&gt;map&lt;/code&gt; to the list of imported functions, we can modify things to use Ramda&#39;s &lt;code&gt;map&lt;/code&gt; so that we have a literal composition:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;prop&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;ProductName&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;onlyProduce&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; products&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is also a sort of intermediate state but one that conveniently illustrates the mathematical basis of composition, i.e. &lt;code&gt;f(g(x))&lt;/code&gt;, where &lt;code&gt;g&lt;/code&gt; is applied to &lt;code&gt;x&lt;/code&gt; and then &lt;code&gt;f&lt;/code&gt; is applied to what that produces. You might have seen this &lt;a href=&quot;https://en.wikipedia.org/wiki/Function_composition_(computer_science)&quot;&gt;composition of functions&lt;/a&gt; &lt;code&gt;f&lt;/code&gt; and &lt;code&gt;g&lt;/code&gt; expressed as &lt;code&gt;f ∘ g&lt;/code&gt;, i.e. &amp;quot;g composed with f&amp;quot;&lt;a href=&quot;https://qmacro.org/blog/posts/2025/05/15/point-free-coding-and-function-composition/#footnote-2&quot;&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;compose&quot;&gt;Compose&lt;/h3&gt;
&lt;p&gt;So let&#39;s use Ramda&#39;s &lt;a href=&quot;https://ramdajs.com/docs/#compose&quot;&gt;compose&lt;/a&gt; to cement this, noting that we can &amp;quot;unnest&amp;quot; the relationship, and more importantly &amp;quot;lose&amp;quot; the reference to the data:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; produceList &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;compose&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;prop&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;ProductName&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;onlyProduce&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;While we&#39;re at it, let&#39;s construct another small building block:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;prop&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;ProductName&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and use that to move our composition to something that is arguably even more declarative:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; produceList &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;compose&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;onlyProduce&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Be aware that at this point, emitting &lt;code&gt;produceList&lt;/code&gt; to the log will show this:&lt;/p&gt;
&lt;pre class=&quot;language-text&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;[Function (anonymous)]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That&#39;s because &lt;code&gt;compose&lt;/code&gt; has also only been partially applied, and is &lt;em&gt;waiting for data&lt;/em&gt;. Let&#39;s give it some now:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;produceList&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;products&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Guess what - this produces the same output too:&lt;/p&gt;
&lt;pre class=&quot;language-json&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;token string&quot;&gt;&quot;Uncle Bob&#39;s Organic Dried Pears&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token string&quot;&gt;&quot;Tofu&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token string&quot;&gt;&quot;Rössle Sauerkraut&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token string&quot;&gt;&quot;Manjimup Dried Apples&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token string&quot;&gt;&quot;Longlife Tofu&quot;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here&#39;s the script now in its entirety:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; prop&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; curry&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; filter&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; compose&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; map &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;ramda&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; products &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;./products.json&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;value

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; justCategory &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;curry&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;n&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; x&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;prop&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Category_CategoryID&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; n&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; onlyProduce &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;justCategory&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;prop&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;ProductName&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; produceList &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;compose&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;onlyProduce&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;produceList&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;products&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;one-extra-level-of-abstraction&quot;&gt;One extra level of abstraction&lt;/h3&gt;
&lt;p&gt;Depending on how we prefer to think about the abstractions, we might wish to go one level further up towards even higher level coding abstractions by pushing the &lt;code&gt;map&lt;/code&gt; and &lt;code&gt;filter&lt;/code&gt; up into the pre-&lt;code&gt;compose&lt;/code&gt; definitions:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; onlyProduce &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;justCategory&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; names &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;prop&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;ProductName&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; produceList &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;compose&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
  names&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  onlyProduce
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;produceList&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;products&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;pipe&quot;&gt;Pipe&lt;/h3&gt;
&lt;p&gt;In a way, we got here to this composition via a route that included function chains, which are most similar to the pipe based constructions in the &lt;code&gt;jq&lt;/code&gt; and &lt;code&gt;bash&lt;/code&gt; examples earlier. And in fact there&#39;s a sibling function to &lt;code&gt;compose&lt;/code&gt; in the Ramda toolkit, which is &lt;a href=&quot;https://ramdajs.com/docs/#pipe&quot;&gt;pipe&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;With &lt;code&gt;compose&lt;/code&gt;, we think about the &lt;code&gt;f(g(x))&lt;/code&gt; pattern and express it naturally in that way, with the innermost function last in the list:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token function&quot;&gt;compose&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;f&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; g&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Alternatively we can consider the data flowing through a series of functions, our building blocks, so it&#39;s easier to think about things the other way round, i.e. &lt;code&gt;-&amp;gt; | g | f&lt;/code&gt;, and with &lt;code&gt;pipe&lt;/code&gt; we can express it naturally in that way:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token function&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;g&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; f&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you&#39;re coming from a more standard JavaScript background and have been used to using function chains with the &lt;code&gt;Array&lt;/code&gt; prototypical functions such as &lt;code&gt;map&lt;/code&gt;, &lt;code&gt;filter&lt;/code&gt;, &lt;code&gt;some&lt;/code&gt;, &lt;code&gt;reduce&lt;/code&gt; and so on, then &lt;code&gt;pipe&lt;/code&gt; might be a better mental fit.&lt;/p&gt;
&lt;p&gt;By the way, based on the &lt;code&gt;pipe&lt;/code&gt; equivalent of the even higher abstraction version, it would look like this (assuming we add &lt;code&gt;pipe&lt;/code&gt; to the list of imported functions from Ramda of course):&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; produceList &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
  onlyProduce&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  names
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;/h2&gt;
&lt;p&gt;Anyway, I think it&#39;s time to bring this ramble to a close. Hopefully you can see that thinking about functional programming concepts such as partial application will naturally lead you to also think about other related concepts such as currying, closures and so on, all supported by the underpinnings that come in the form of functions as values and higher order functions. And while you can already start thinking functionally even in regular JavaScript, having a library like Ramda, or even building your own utility functions&lt;a href=&quot;https://qmacro.org/blog/posts/2025/05/15/point-free-coding-and-function-composition/#footnote-3&quot;&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt;, takes you a great deal further.&lt;/p&gt;
&lt;h2 id=&quot;further-material&quot;&gt;Further material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://qmacro.org/blog/posts/2025/05/01/fp-function-chains-and-cap-model-loading/&quot;&gt;FP, function chains and CAP model loading&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://qmacro.org/tags/jq/&quot;&gt;More posts on jq&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Brian Lonsdorf&#39;s classic talk &lt;a href=&quot;https://www.youtube.com/watch?v=m3svKOdZijA&quot;&gt;Hey Underscore, You&#39;re Doing It Wrong!&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a name=&quot;footnotes&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;footnotes&quot;&gt;Footnotes&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;i.e. amenable to classic shell tools that process textual-based information.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In some languages, such as Haskell, this is expressed in pretty much the same way, i.e. &lt;code&gt;foo = f . g&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For example, a simple &lt;code&gt;compose&lt;/code&gt; function &lt;a href=&quot;https://www.linkedin.com/posts/djadams_handsonsapdev-activity-7327252502918184961-LEo9&quot;&gt;could look like&lt;/a&gt; this: &lt;code&gt;const compose = (...fs) =&amp;gt; (x) =&amp;gt; fs.reverse().reduce((a, f) =&amp;gt; f(a), x)&lt;/code&gt; (yes I know there&#39;s a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight&quot;&gt;reduceRight&lt;/a&gt; too :-))&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</content>
  </entry>
  <entry>
    <title>Adjusting the preview width in Telescope&#39;s horizontal picker</title>
    <link href="https://qmacro.org/blog/posts/2025/05/04/adjusting-the-preview-width-in-telescopes-horizontal-picker/" />
    <updated>2025-05-04T00:00:00Z</updated>
    <id>https://qmacro.org/blog/posts/2025/05/04/adjusting-the-preview-width-in-telescopes-horizontal-picker/</id>
    <content type="html">&lt;p&gt;The &lt;a href=&quot;https://github.com/nvim-telescope/telescope.nvim&quot;&gt;telescope.nvim&lt;/a&gt; plugin is pretty spectacular and has many features that I haven&#39;t had chance to explore yet. There are a set of building blocks from which the features are constructed, falling into various categories such as Pickers, Previewers, Sorters, Layouts and Themes.&lt;/p&gt;
&lt;p&gt;I found that the defaults work pretty well for me and my simple needs, including the layouts. When there is enough horizontal space, the horizontal picker is used, which has a layout like this (see &lt;code&gt;:help telescope.layout.horizontal()&lt;/code&gt;):&lt;/p&gt;
&lt;pre class=&quot;language-text&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;┌──────────────────────────────────────────────────┐
│                                                  │
│    ┌───────────────────┐┌───────────────────┐    │
│    │                   ││                   │    │
│    │                   ││                   │    │
│    │                   ││                   │    │
│    │      Results      ││                   │    │
│    │                   ││      Preview      │    │
│    │                   ││                   │    │
│    │                   ││                   │    │
│    └───────────────────┘│                   │    │
│    ┌───────────────────┐│                   │    │
│    │      Prompt       ││                   │    │
│    └───────────────────┘└───────────────────┘    │
│                                                  │
└──────────────────────────────────────────────────┘&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The only thing was that in some cases (depending on my current font and terminal size) the Preview was actually narrower than the Results and Prompt. This makes a lot of sense for those wanting to see more of the file paths, but I wanted to see more of the file contents, and therefore decided to force increase the size of the Preview width.&lt;/p&gt;
&lt;p&gt;This is what it looked like out of the box:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://qmacro.org/images/2025/05/telescope-preview-width-60-40.png&quot; alt=&quot;telescope horizontal layout with preview width at around 40%&quot;&gt;&lt;/p&gt;
&lt;p&gt;With some &lt;a href=&quot;https://github.com/qmacro/dotfiles/commit/c8dbd4675790808e555d197e38ef67526860637e&quot;&gt;simple configuration&lt;/a&gt; in my &lt;code&gt;lua/config/plugins/telescope.lua&lt;/code&gt; file:&lt;/p&gt;
&lt;pre class=&quot;language-lua&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-lua&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&#39;nvim-telescope/telescope.nvim&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;...&lt;/span&gt;
    config &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;telescope&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setup&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        defaults &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
          layout_strategy &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;horizontal&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          layout_config &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; preview_width &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0.6&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I got what I was looking for, which was this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://qmacro.org/images/2025/05/telescope-preview-width-40-60.png&quot; alt=&quot;telescope horizontal layout with preview width at around 60%&quot;&gt;&lt;/p&gt;
&lt;p&gt;Nice!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>FP, function chains and CAP model loading</title>
    <link href="https://qmacro.org/blog/posts/2025/05/01/fp-function-chains-and-cap-model-loading/" />
    <updated>2025-05-01T00:00:00Z</updated>
    <id>https://qmacro.org/blog/posts/2025/05/01/fp-function-chains-and-cap-model-loading/</id>
    <content type="html">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;I&#39;m currently running a mini series on the Hands-on SAP Dev show, called &lt;a href=&quot;https://www.youtube.com/playlist?list=PL6RpkC85SLQB-0sK7KSRwCc2gdtlZDIkL&quot;&gt;Let&#39;s explore functional programming&lt;/a&gt;. Nothing too heavy; so far we&#39;ve looked at functions as first class citizens, the concept of higher order functions, closures, dug into reduce, glimpsed the beauty of currying and partial application and set the scene for further investigations in upcoming episodes.&lt;/p&gt;
&lt;p&gt;In tomorrow&#39;s episode I hope to find time to start looking at function chaining with the typical JavaScript candidates &lt;code&gt;filter&lt;/code&gt;, &lt;code&gt;map&lt;/code&gt; and &lt;code&gt;reduce&lt;/code&gt;, where we can chain such higher order functions together to process data (I cover this in various blog posts and other resources elsewhere, see &lt;a href=&quot;https://qmacro.org/tags/fp&quot;&gt;posts tagged with &#39;fp&#39;&lt;/a&gt; for more details). Being comfortable with a technique like this, which in turn includes a healthy grasp of lambda (anonymous) functions, often in the form of &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions&quot;&gt;arrow function expressions&lt;/a&gt; and of course the whole premise of higher order functions, allows us to &lt;a href=&quot;https://qmacro.org/blog/posts/2017/02/19/the-beauty-of-recursion-and-list-machinery/#initialrecognition:~:text=%22If%20you%20stare%20long%20enough%20at%20it%20...%22.&quot;&gt;stare at&lt;/a&gt; code and understand what&#39;s going on.&lt;/p&gt;
&lt;p&gt;Here&#39;s a case in point, where I had always been curious as to why a certain CSN source was being loaded into the overall CDS model, and found out by looking at the CAP Node.js server source code, following the logic, and seeing the light. I&#39;d guessed there must be a reason, but my curiosity was always brought out at points where I didn&#39;t have the luxury of time to investigate ... while I was standing up in front of a workshop full of people, walking them through hands-on exercise material. This afternoon I decided to remedy that.&lt;/p&gt;
&lt;h2 id=&quot;setting-the-scene-and-the-challenge&quot;&gt;Setting the scene and the challenge&lt;/h2&gt;
&lt;p&gt;In the &lt;a href=&quot;https://github.com/SAP-samples/cap-service-integration-codejam&quot;&gt;Service integration with SAP Cloud Application Programming Model&lt;/a&gt; CodeJam, we &lt;a href=&quot;https://github.com/SAP-samples/cap-service-integration-codejam/tree/main/exercises/03-import-odata-api#import-the-api-specification&quot;&gt;import an external API definition&lt;/a&gt; for the &amp;quot;Business Partner (A2X)&amp;quot; OData V2 service in Exercise 03, like this:&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;cds &lt;span class=&quot;token function&quot;&gt;import&lt;/span&gt; API_BUSINESS_PARTNER.edmx&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the subsequent exercise, without any further changes or additions, we &lt;a href=&quot;https://github.com/SAP-samples/cap-service-integration-codejam/tree/main/exercises/04-understand-service-mocking#start-the-cap-server&quot;&gt;start the CAP server&lt;/a&gt; like this:&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;cds run&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and see log output that starts off like this:&lt;/p&gt;
&lt;pre class=&quot;language-log&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-log&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;cds&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; loaded model from &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt; file&lt;span class=&quot;token operator&quot;&gt;(&lt;/span&gt;s&lt;span class=&quot;token operator&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;

  srv&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;external&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;API_BUSINESS_PARTNER&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;csn
  app&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;fiori&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;cds
  srv&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;incidents&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;service&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;cds
  db&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;schema&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;cds
  node_modules&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;@&lt;/span&gt;sap&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;cds&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;common&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;cds&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Given what I knew about how resources are loaded to make up the overall CDS model, I was always a little bit curious as to why this file:&lt;/p&gt;
&lt;pre class=&quot;language-log&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-log&quot;&gt;srv&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;external&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;API_BUSINESS_PARTNER&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;csn&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;was included. According to the default set of &amp;quot;roots&amp;quot;, it shouldn&#39;t be.&lt;/p&gt;
&lt;p&gt;So the challenge is set: Can I find out &lt;em&gt;why&lt;/em&gt; it&#39;s being loaded?&lt;/p&gt;
&lt;h2 id=&quot;some-background-on-cds-roots&quot;&gt;Some background on CDS roots&lt;/h2&gt;
&lt;p&gt;Briefly, &lt;code&gt;cds run&lt;/code&gt; is syntactic sugar for &lt;code&gt;cds serve all&lt;/code&gt;, whereupon all the resources in a set of defined roots are loaded.&lt;/p&gt;
&lt;p&gt;What are these roots? Well, we can ask to see them with:&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;cds &lt;span class=&quot;token function&quot;&gt;env&lt;/span&gt; get roots&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;which returns:&lt;/p&gt;
&lt;pre class=&quot;language-json&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &#39;db/&#39;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &#39;srv/&#39;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &#39;app/&#39;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &#39;schema&#39;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &#39;services&#39; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In other words, unless directed otherwise, the compiler will look for files in the &lt;code&gt;db/&lt;/code&gt;, &lt;code&gt;srv/&lt;/code&gt; and &lt;code&gt;app/&lt;/code&gt; directories (the holy model trinity) plus any files specifically named &lt;code&gt;schema&lt;/code&gt; or &lt;code&gt;services&lt;/code&gt;&lt;a href=&quot;https://qmacro.org/blog/posts/2025/05/01/fp-function-chains-and-cap-model-loading/#footnote-1&quot;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; (with &lt;code&gt;cds&lt;/code&gt; or &lt;code&gt;csn&lt;/code&gt; extensions).&lt;/p&gt;
&lt;p&gt;It doesn&#39;t &lt;em&gt;descend&lt;/em&gt; within those three directories, so why does that file, in a directory &lt;em&gt;within&lt;/em&gt; &lt;code&gt;srv/&lt;/code&gt;, get loaded at all?&lt;/p&gt;
&lt;h2 id=&quot;use-the-source-luke&quot;&gt;Use the source Luke&lt;/h2&gt;
&lt;p&gt;Taking heed of a &lt;a href=&quot;https://wiki.c2.com/?UseTheSourceLuke&quot;&gt;great piece of advice&lt;/a&gt; in the original Wiki&lt;a href=&quot;https://qmacro.org/blog/posts/2025/05/01/fp-function-chains-and-cap-model-loading/#footnote-2&quot;&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; - to look at the source code, ideally while it&#39;s running, in a debugger - I dug in to the CAP Node.js server source. Here&#39;s what I discovered.&lt;/p&gt;
&lt;h3 id=&quot;sap-cds-server-js&quot;&gt;@sap/cds/server.js&lt;/h3&gt;
&lt;p&gt;This file is loaded when a server is started, and after doing some preparations relating to the &lt;a href=&quot;https://expressjs.com/&quot;&gt;Express&lt;/a&gt; framework upon which it rides, it loads and prepares the models:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// load and prepare models&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; csn &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; cds&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;load&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;o&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;from&lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;*&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;o&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;cds&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;minify&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;sap-cds-lib-compile-load-js&quot;&gt;@sap/cds/lib/compile/load.js&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;load&lt;/code&gt; function is exported from &lt;code&gt;compile/load.js&lt;/code&gt; and looks like this:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;module&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;exports &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;load&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;files&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; options&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; any &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; cds&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;files&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;options&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;any&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; Promise&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;reject&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;cds&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;error&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token literal-property property&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Couldn&#39;t find a CDS model for &#39;&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;files&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39; in &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;cds&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;root&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token literal-property property&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;MODEL_NOT_FOUND&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; files&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;any&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;options&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;inferred&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;At this point, the value passed to the function&#39;s &lt;code&gt;files&lt;/code&gt; parameter is &lt;code&gt;&#39;*&#39;&lt;/code&gt;, effectively corresponding to the &lt;code&gt;all&lt;/code&gt; in &lt;code&gt;cds serve all&lt;/code&gt;, and via some nifty &lt;a href=&quot;https://qmacro.org/blog/posts/2024/12/10/tasc-notes-part-4/#lazy-loading-of-the-cds-facades-many-features&quot;&gt;lazy loading via getters&lt;/a&gt;, in &lt;code&gt;@sap/cds/lib/index.js&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;resolve &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;./compile/resolve&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;we end up in &lt;code&gt;@sap/cds/lib/compile/resolve.js&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&quot;sap-cds-lib-compile-resolve-js&quot;&gt;@sap/cds/lib/compile/resolve.js&lt;/h3&gt;
&lt;p&gt;We end up specifically in the &lt;code&gt;_resolve_all&lt;/code&gt; function, which looks like this:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;_resolve_all&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;o&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;cds&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;roots&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; o&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;env &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; cds&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;env&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;o&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;dry &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; o &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;roots&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;_required&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;cds&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;flat&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; cache &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; o&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;cache &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; exports&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;cache
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; cached &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; cache&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;*&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;cached&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; cached
  cache&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;*&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// important to avoid endless recursion on &#39;*&#39;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; sources &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; cds&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;resolve&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;roots&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;o&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;sources&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; sources&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;endsWith&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;csn.json&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// REVISIT: why is that? -&gt; pre-compiled gen/csn.json?&lt;/span&gt;
    sources&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;cds&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;resolve&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;_required&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;cds&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;o&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;env&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;o&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; cache&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;*&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;_resolved&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;sources&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After working through the roots we looked at earlier, this function ends up (in the case of the &lt;a href=&quot;https://github.com/SAP-samples/cap-service-integration-codejam/tree/main/incidents&quot;&gt;CAP project in the CodeJam&lt;/a&gt;) with the following value in &lt;code&gt;sources&lt;/code&gt; (the initial part of each path deliberately elided to keep things short), just before the &lt;code&gt;if&lt;/code&gt; statement:&lt;/p&gt;
&lt;pre class=&quot;language-json&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;token string&quot;&gt;&quot;/.../incidents/db/schema.cds&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token string&quot;&gt;&quot;/.../incidents/srv/incidents-service.cds&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token string&quot;&gt;&quot;/.../incidents/app/fiori.cds&quot;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This makes sense given what we know about the roots.&lt;/p&gt;
&lt;p&gt;Just before returning, there&#39;s a final line which pushes extra values onto this list; the condition guarding this logic is not met (there are three source items, not just one, for a start) and so this line is executed:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;sources&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;cds&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;resolve&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;_required&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;cds&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;o&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;env&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;o&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What is this &lt;code&gt;_required&lt;/code&gt; function? Well, it&#39;s defined just above the &lt;code&gt;_resolve_all&lt;/code&gt; function, like this:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;_required&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;cds&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;env&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;cds&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;env&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; Object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;env&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;requires&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; r&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;model&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;digging-in-to-the-function-chain&quot;&gt;Digging in to the function chain&lt;/h4&gt;
&lt;p&gt;That&#39;s quite a definition! Let&#39;s break it down by adding some whitespace:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;_required&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;cds&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;env&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;cds&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;env&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;
  Object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;env&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;requires&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; r&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;model&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There&#39;s a lot of fat arrows and dots, but staring at it for a moment reveals its actual simplicity - it&#39;s a function chain, transforming a list of values through a chain of functions (two in this case) first a call to &lt;code&gt;map&lt;/code&gt;, then a call to &lt;code&gt;filter&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The value of the &lt;code&gt;env&lt;/code&gt; parameter (the second one in the &lt;code&gt;_required&lt;/code&gt; signature) is an object representing the &amp;quot;effective&amp;quot; environment of the running server, and includes a &lt;code&gt;requires&lt;/code&gt; property. It&#39;s the value of this property that is passed first to &lt;code&gt;Object.values&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The value of this &lt;code&gt;requires&lt;/code&gt; property looks like this (I&#39;ve removed some of the entries in &lt;code&gt;auth.users&lt;/code&gt; for brevity):&lt;/p&gt;
&lt;pre class=&quot;language-json&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;middlewares&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;auth&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;restrict_all_services&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;kind&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;mocked&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;users&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;&quot;alice&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token property&quot;&gt;&quot;tenant&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;t1&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token property&quot;&gt;&quot;roles&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
          &lt;span class=&quot;token string&quot;&gt;&quot;cds.Subscriber&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token string&quot;&gt;&quot;admin&quot;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;&quot;bob&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token property&quot;&gt;&quot;tenant&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;t1&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token property&quot;&gt;&quot;roles&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
          &lt;span class=&quot;token string&quot;&gt;&quot;cds.ExtensionDeveloper&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token string&quot;&gt;&quot;cds.UIFlexDeveloper&quot;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;tenants&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;&quot;t1&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token property&quot;&gt;&quot;features&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
          &lt;span class=&quot;token string&quot;&gt;&quot;isbn&quot;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;&quot;t2&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token property&quot;&gt;&quot;features&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;*&quot;&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;db&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;impl&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;@cap-js/sqlite&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;credentials&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;&quot;url&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;:memory:&quot;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;kind&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;sqlite&quot;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;API_BUSINESS_PARTNER&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;impl&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;@sap/cds/libx/_runtime/remote/Service.js&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;external&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;kind&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;odata-v2&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;model&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;srv/external/API_BUSINESS_PARTNER&quot;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Some of these &amp;quot;requirements&amp;quot; come from the defined default behaviour of a CAP Node.js server in this context. But look at that last entry:&lt;/p&gt;
&lt;pre class=&quot;language-json&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;API_BUSINESS_PARTNER&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;impl&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;@sap/cds/libx/_runtime/remote/Service.js&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;external&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;kind&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;odata-v2&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;model&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;srv/external/API_BUSINESS_PARTNER&quot;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That is directly from the &lt;code&gt;cds.requires&lt;/code&gt; section of the project&#39;s &lt;code&gt;package.json&lt;/code&gt; file (which can be neatly expressed as &lt;code&gt;package.json#cds.requires&lt;/code&gt;) ... which was added by the actions initiated with the invocation of &lt;code&gt;cds import API_BUSINESS_PARTNER.edmx&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-json&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;cds&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;requires&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;&quot;API_BUSINESS_PARTNER&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token property&quot;&gt;&quot;kind&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;odata-v2&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token property&quot;&gt;&quot;model&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;srv/external/API_BUSINESS_PARTNER&quot;&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;OK, so now we know what&#39;s in &lt;code&gt;env.requires&lt;/code&gt; - an object with entries representing different requirements, in different shaped JSON stanzas.&lt;/p&gt;
&lt;p&gt;Now let&#39;s look at the function chain.&lt;/p&gt;
&lt;p&gt;First, we have a call to &lt;code&gt;map&lt;/code&gt;, where the callback function is simply:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token parameter&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; r&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;model&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;All this does is return the value of the &lt;code&gt;model&lt;/code&gt; property for each object passed in. Looking back at the entire &lt;code&gt;env.requires&lt;/code&gt; value earlier, we can see that this is going to produce something that looks a little odd:&lt;/p&gt;
&lt;pre class=&quot;language-json&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
  undefined&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  undefined&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  undefined&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token string&quot;&gt;&quot;srv/external/API_BUSINESS_PARTNER&quot;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Only the &lt;code&gt;API_BUSINESS_PARTNER&lt;/code&gt; object has a &lt;code&gt;model&lt;/code&gt; property.&lt;/p&gt;
&lt;p&gt;This is fine, and also indicative of the simplicity with which function chains can be conceived, constructed and understood.&lt;/p&gt;
&lt;p&gt;All that is wanted here is a reference to any and all CDS model files, and if there are any other items required that aren&#39;t directly related to the overall CDS model, then that&#39;s OK, they won&#39;t have a &lt;code&gt;model&lt;/code&gt; property, meaning &lt;code&gt;undefined&lt;/code&gt; is returned for those (&lt;code&gt;middlewares&lt;/code&gt;, &lt;code&gt;auth&lt;/code&gt; and &lt;code&gt;db&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;This simple callback function for &lt;code&gt;map&lt;/code&gt; produces a simple structure (&lt;code&gt;map&lt;/code&gt; always reads a list and produces a list that is the same length).&lt;/p&gt;
&lt;p&gt;And now this is passed in, to the next (and last) function in this chain, namely to &lt;code&gt;filter&lt;/code&gt;, which is another higher order function that takes a predicate function&lt;a href=&quot;https://qmacro.org/blog/posts/2025/05/01/fp-function-chains-and-cap-model-loading/#footnote-3&quot;&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt;, which is even simpler than the previous callback function:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token parameter&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; x&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What the heck is going on here? Well, JavaScript&#39;s &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter&quot;&gt;filter&lt;/a&gt; function takes a list (like &lt;code&gt;map&lt;/code&gt; does), and returns a list, but (unlike &lt;code&gt;map&lt;/code&gt;) that list may be shorter. Filter removes any elements for which the predicate function, when called with that element, returns something that is false ... or &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Falsy&quot;&gt;falsey&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;And with &lt;code&gt;x =&amp;gt; x&lt;/code&gt;, what is returned is effectively the value of the element passed in. Given that &lt;code&gt;undefined&lt;/code&gt; is falsey, all that is emitted from this second and last function in the chain is:&lt;/p&gt;
&lt;pre class=&quot;language-json&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;token string&quot;&gt;&quot;srv/external/API_BUSINESS_PARTNER&quot;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And that&#39;s exactly what is needed - a list of CDS model file references to be pushed onto the end of the &lt;code&gt;sources&lt;/code&gt; list that already exists, giving:&lt;/p&gt;
&lt;pre class=&quot;language-json&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;token string&quot;&gt;&quot;/.../incidents/db/schema.cds&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token string&quot;&gt;&quot;/.../incidents/srv/incidents-service.cds&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token string&quot;&gt;&quot;/.../incidents/app/fiori.cds&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token string&quot;&gt;&quot;/.../incidents/srv/external/API_BUSINESS_PARTNER&quot;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;So now it&#39;s clear why the &lt;code&gt;srv/external/API_BUSINESS_PARTNER.csn&lt;/code&gt; model file is loaded:&lt;/p&gt;
&lt;pre class=&quot;language-log&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-log&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;cds&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; loaded model from &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt; file&lt;span class=&quot;token operator&quot;&gt;(&lt;/span&gt;s&lt;span class=&quot;token operator&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;

  srv&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;external&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;API_BUSINESS_PARTNER&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;csn
  app&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;fiori&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;cds
  srv&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;incidents&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;service&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;cds
  db&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;schema&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;cds
  node_modules&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;@&lt;/span&gt;sap&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;cds&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;common&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;cds&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(In case you&#39;re wondering, the &lt;code&gt;node_modules/@sap/cds/common.cds&lt;/code&gt; model file is loaded because it&#39;s &amp;quot;imported&amp;quot; from within &lt;code&gt;db/schema.cds&lt;/code&gt; with &lt;code&gt;using { cuid, managed, sap.common.CodeList } from &#39;@sap/cds/common&#39;;&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;But the bigger conclusion here is that reading code is extremely useful. And, going &lt;a href=&quot;https://dictionary.cambridge.org/grammar/british-grammar/comparison-adjectives-bigger-biggest-more-interesting&quot;&gt;from the comparative to the superlative&lt;/a&gt; here, the biggest conclusion is perhaps the yin-yang of learning. Some basic knowledge of functional programming approaches has allowed us to dig into the source and understand what&#39;s going on. And conversely, reading that code has increased our understanding and appreciation for such approaches, especially with the simplicity of the callback functions in the function chain here.&lt;/p&gt;
&lt;p&gt;If you&#39;re keen to learn more, perhaps I&#39;ll see you live in the chat on our &lt;a href=&quot;https://www.youtube.com/playlist?list=PL6RpkC85SLQB-0sK7KSRwCc2gdtlZDIkL&quot;&gt;series exploring functional programming&lt;/a&gt; sometime soon. Until then, happy learning!&lt;/p&gt;
&lt;h2 id=&quot;notes&quot;&gt;Notes&lt;/h2&gt;
&lt;p&gt;There&#39;s so much other stuff to unpick from what we&#39;ve seen in the code we&#39;ve been digging into. Here are a couple of items.&lt;/p&gt;
&lt;h3 id=&quot;default-parameter-definition-references&quot;&gt;Default parameter definition references&lt;/h3&gt;
&lt;p&gt;Did you notice the signature for &lt;code&gt;_required&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;_required&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;cds&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;env&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;cds&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;env&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; Object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;env&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;requires&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; r&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;model&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What on earth is going on with &lt;code&gt;(cds,env=cds.env)&lt;/code&gt;?&lt;/p&gt;
&lt;p&gt;Well, functions can have default parameters. That&#39;s not surprising. The &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Default_parameters&quot;&gt;MDN reference page&lt;/a&gt; gives this simple example:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;multiply&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;a&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; b &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; b&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That&#39;s straightforward, in that if no value is supplied for &lt;code&gt;b&lt;/code&gt;, the default value of &lt;code&gt;1&lt;/code&gt; is used.&lt;/p&gt;
&lt;p&gt;But what about &lt;code&gt;env=cds.env&lt;/code&gt;? The default value here ... is referring to a property in the &lt;code&gt;cds&lt;/code&gt; object, which itself is the first parameter! Said out loud:&lt;/p&gt;
&lt;p&gt;&amp;quot;&lt;em&gt;If there&#39;s no value&lt;a href=&quot;https://qmacro.org/blog/posts/2025/05/01/fp-function-chains-and-cap-model-loading/#footnote-4&quot;&gt;&lt;sup&gt;4&lt;/sup&gt;&lt;/a&gt; for the &lt;code&gt;env&lt;/code&gt; parameter, take the value of the &lt;code&gt;env&lt;/code&gt; property of the (object) value passed to the first parameter named &lt;code&gt;cds&lt;/code&gt;&lt;/em&gt;&amp;quot;.&lt;/p&gt;
&lt;p&gt;I did a double-take when I first saw that, and thought it worth highlighting.&lt;/p&gt;
&lt;h3 id=&quot;callback-function-parameter-names&quot;&gt;Callback function parameter names&lt;/h3&gt;
&lt;p&gt;There&#39;s an innate beauty in abstraction when it comes to functions, and one thing I discovered when digging into Haskell was the consistent and sensible use of the symbols &lt;a href=&quot;https://qmacro.org/blog/posts/2017/02/19/the-beauty-of-recursion-and-list-machinery/#introduction-via-haskell&quot;&gt;&lt;code&gt;x&lt;/code&gt; and &lt;code&gt;xs&lt;/code&gt;&lt;/a&gt;. When expressing a function as simple as either of the callback functions we encountered here:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token parameter&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; r&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;model&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token parameter&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; x&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;there&#39;s a natural tendency to think of such expressions, such operations, in an abstract way.&lt;/p&gt;
&lt;p&gt;In this context, I enjoyed the code author&#39;s choice of &lt;code&gt;x&lt;/code&gt; here, but also understood the choice of &lt;code&gt;r&lt;/code&gt; to perhaps represent &amp;quot;the required thing&amp;quot;. Personally I would have used &lt;code&gt;x&lt;/code&gt; here too (i.e. &lt;code&gt;x =&amp;gt; x.model&lt;/code&gt;), but all the same, I&#39;m glad they&#39;re both just single letter symbols. Long symbol names would detract from the readability here as well as the abstract nature. But that&#39;s a longer story for another time, perhaps.&lt;/p&gt;
&lt;p&gt;&lt;a name=&quot;footnotes&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;footnotes&quot;&gt;Footnotes&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;That&#39;s why my micro starter script &lt;a href=&quot;https://github.com/qmacro/dotfiles/blob/main/scripts/cdsnano&quot;&gt;cdsnano&lt;/a&gt; copies a single CDS file called &lt;code&gt;services.cds&lt;/code&gt; from the &lt;a href=&quot;https://github.com/qmacro/dotfiles/tree/main/scripts/cdsnano-template&quot;&gt;nano template directory&lt;/a&gt; because it will be automatically picked up based on the default roots, and has everything in it - the &lt;a href=&quot;https://creators.spotify.com/pod/profile/tech-aloud/episodes/The-Simplest-Thing-that-Could-Possibly-Work--A-conversation-with-Ward-Cunningham--Part-V---Bill-Venners-e5dpts&quot;&gt;simplest thing that could possibly work&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;This is of course Ward Cunningham&#39;s own Wiki &amp;quot;C2&amp;quot;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A &amp;quot;predicate function&amp;quot; is a function that returns a boolean value, i.e. &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;, and can therefore be used as callbacks in higher order functions such as &lt;code&gt;filter&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Or &lt;code&gt;undefined&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</content>
  </entry>
</feed>